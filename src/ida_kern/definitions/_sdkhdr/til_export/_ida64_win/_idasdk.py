# -*- coding: utf-8 -*-
#
# TARGET arch is: []
# WORD_SIZE is: 8
# POINTER_SIZE is: 8
# LONGDOUBLE_SIZE is: 16
#
import ctypes


class AsDictMixin:
    @classmethod
    def as_dict(cls, self):
        result = {}
        if not isinstance(self, AsDictMixin):
            # not a structure, assume it's already a python object
            return self
        if not hasattr(cls, "_fields_"):
            return result
        # sys.version_info >= (3, 5)
        # for (field, *_) in cls._fields_:  # noqa
        for field_tuple in cls._fields_:  # noqa
            field = field_tuple[0]
            if field.startswith('PADDING_'):
                continue
            value = getattr(self, field)
            type_ = type(value)
            if hasattr(value, "_length_") and hasattr(value, "_type_"):
                # array
                if not hasattr(type_, "as_dict"):
                    value = [v for v in value]
                else:
                    type_ = type_._type_
                    value = [type_.as_dict(v) for v in value]
            elif hasattr(value, "contents") and hasattr(value, "_type_"):
                # pointer
                try:
                    if not hasattr(type_, "as_dict"):
                        value = value.contents
                    else:
                        type_ = type_._type_
                        value = type_.as_dict(value.contents)
                except ValueError:
                    # nullptr
                    value = None
            elif isinstance(value, AsDictMixin):
                # other structure
                value = type_.as_dict(value)
            result[field] = value
        return result


class Structure(ctypes.Structure, AsDictMixin):

    def __init__(self, *args, **kwds):
        # We don't want to use positional arguments fill PADDING_* fields

        args = dict(zip(self.__class__._field_names_(), args))
        args.update(kwds)
        super(Structure, self).__init__(**args)

    @classmethod
    def _field_names_(cls):
        if hasattr(cls, '_fields_'):
            return (f[0] for f in cls._fields_ if not f[0].startswith('PADDING'))
        else:
            return ()

    @classmethod
    def get_type(cls, field):
        for f in cls._fields_:
            if f[0] == field:
                return f[1]
        return None

    @classmethod
    def bind(cls, bound_fields):
        fields = {}
        for name, type_ in cls._fields_:
            if hasattr(type_, "restype"):
                if name in bound_fields:
                    if bound_fields[name] is None:
                        fields[name] = type_()
                    else:
                        # use a closure to capture the callback from the loop scope
                        fields[name] = (
                            type_((lambda callback: lambda *args: callback(*args))(
                                bound_fields[name]))
                        )
                    del bound_fields[name]
                else:
                    # default callback implementation (does nothing)
                    try:
                        default_ = type_(0).restype().value
                    except TypeError:
                        default_ = None
                    fields[name] = type_((
                        lambda default_: lambda *args: default_)(default_))
            else:
                # not a callback function, use default initialization
                if name in bound_fields:
                    fields[name] = bound_fields[name]
                    del bound_fields[name]
                else:
                    fields[name] = type_()
        if len(bound_fields) != 0:
            raise ValueError(
                "Cannot bind the following unknown callback(s) {}.{}".format(
                    cls.__name__, bound_fields.keys()
            ))
        return cls(**fields)


class Union(ctypes.Union, AsDictMixin):
    pass



def string_cast(char_pointer, encoding='utf-8', errors='strict'):
    value = ctypes.cast(char_pointer, ctypes.c_char_p).value
    if value is not None and encoding is not None:
        value = value.decode(encoding, errors=errors)
    return value


def char_pointer_cast(string, encoding='utf-8'):
    if encoding is not None:
        try:
            string = string.encode(encoding)
        except AttributeError:
            # In Python3, bytes has no encode attribute
            pass
    string = ctypes.c_char_p(string)
    return ctypes.cast(string, ctypes.POINTER(ctypes.c_char))



c_int128 = ctypes.c_ubyte*16
c_uint128 = c_int128
void = None
if ctypes.sizeof(ctypes.c_longdouble) == 16:
    c_long_double_t = ctypes.c_longdouble
else:
    c_long_double_t = ctypes.c_ubyte*16



class struct_std__exception_vtbl(Structure):
    pass

class struct_std__nested_exception_vtbl(Structure):
    pass

class struct_qrefcnt_obj_t_vtbl(Structure):
    pass

class struct_post_event_visitor_t_vtbl(Structure):
    pass

class struct_altadjust_visitor_t_vtbl(Structure):
    pass

class struct_outctx_base_t_vtbl(Structure):
    pass

class struct_procmod_t(Structure):
    pass

class struct_event_listener_t_vtbl(Structure):
    pass

class struct_user_defined_prefix_t_vtbl(Structure):
    pass

class struct_encoder_t_vtbl(Structure):
    pass

class struct_file_enumerator_t_vtbl(Structure):
    pass

class struct_ioports_fallback_t_vtbl(Structure):
    pass

class struct_choose_ioport_parser_t_vtbl(Structure):
    pass

class struct_generic_linput_t_vtbl(Structure):
    pass

class struct_place_t_vtbl(Structure):
    pass

class struct_hexplace_gen_t_vtbl(Structure):
    pass

class struct_chooser_base_t_vtbl(Structure):
    pass

class struct_exec_request_t_vtbl(Structure):
    pass

class struct_ui_request_t_vtbl(Structure):
    pass

class struct_action_handler_t_vtbl(Structure):
    pass

class struct_form_actions_t_vtbl(Structure):
    pass

class struct_macro_constructor_t_vtbl(Structure):
    pass

class struct_plugmod_t_vtbl(Structure):
    pass

class struct_bpt_visitor_t_vtbl(Structure):
    pass

class struct_srcinfo_provider_t_vtbl(Structure):
    pass

class struct_dirspec_t_vtbl(Structure):
    pass

class struct_dirtree_visitor_t_vtbl(Structure):
    pass

class struct_enum_member_visitor_t_vtbl(Structure):
    pass

class struct_highlighter_cbs_t_vtbl(Structure):
    pass

class struct_syntax_highlighter_t_vtbl(Structure):
    pass

class struct_extlang_visitor_t_vtbl(Structure):
    pass

class struct_idc_resolver_t_vtbl(Structure):
    pass

class struct_gdl_graph_t_vtbl(Structure):
    pass

class struct_graph_node_visitor_t_vtbl(Structure):
    pass

class struct_graph_path_visitor_t_vtbl(Structure):
    pass

class struct_graph_visitor_t_vtbl(Structure):
    pass

class struct_aloc_visitor_t_vtbl(Structure):
    pass

class struct_const_aloc_visitor_t_vtbl(Structure):
    pass

class struct_tinfo_visitor_t_vtbl(Structure):
    pass

class struct_argtinfo_helper_t_vtbl(Structure):
    pass

class struct_lowertype_helper_t_vtbl(Structure):
    pass

class struct_text_sink_t_vtbl(Structure):
    pass

class struct_predicate_t_vtbl(Structure):
    pass

class struct_jump_pattern_t_vtbl(Structure):
    pass

class struct_network_client_handler_t_vtbl(Structure):
    pass

class struct_client_handlers_list_t_vtbl(Structure):
    pass

class struct_base_dispatcher_t_vtbl(Structure):
    pass

class struct_rpc_packet_data_t_vtbl(Structure):
    pass

class struct_rpc_engine_t_vtbl(Structure):
    pass

class struct_generic_client_t_vtbl(Structure):
    pass

class struct_struct_field_visitor_t_vtbl(Structure):
    pass

uintptr_t = ctypes.c_uint64
va_list = ctypes.POINTER(ctypes.c_char)
size_t = ctypes.c_uint64
ptrdiff_t = ctypes.c_int64
intptr_t = ctypes.c_int64
__vcrt_bool = ctypes.c_char
__crt_bool = ctypes.c_char
errno_t = ctypes.c_int32
wint_t = ctypes.c_uint16
wctype_t = ctypes.c_uint16
__time32_t = ctypes.c_int32
__time64_t = ctypes.c_int64
class struct___crt_locale_data_public(Structure):
    pass

struct___crt_locale_data_public._pack_ = 1 # source:False
struct___crt_locale_data_public._fields_ = [
    ('_locale_pctype', ctypes.POINTER(ctypes.c_uint16)),
    ('_locale_mb_cur_max', ctypes.c_int32),
    ('_locale_lc_codepage', ctypes.c_uint32),
]

class struct___crt_locale_data(Structure):
    pass

class struct___crt_multibyte_data(Structure):
    pass

class struct___crt_locale_pointers(Structure):
    pass

struct___crt_locale_pointers._pack_ = 1 # source:False
struct___crt_locale_pointers._fields_ = [
    ('locinfo', ctypes.POINTER(struct___crt_locale_data)),
    ('mbcinfo', ctypes.POINTER(struct___crt_multibyte_data)),
]

_locale_t = ctypes.POINTER(struct___crt_locale_pointers)
mbstate_t = ctypes.c_char
time_t = ctypes.c_int64
rsize_t = ctypes.c_uint64
std__nullptr_t = ctypes.c_int64
_CoreCrtSecureSearchSortCompareFunction = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(None))
_CoreCrtNonSecureSearchSortCompareFunction = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), ctypes.POINTER(None))
_onexit_t = ctypes.CFUNCTYPE(ctypes.c_int32)
_purecall_handler = ctypes.CFUNCTYPE(None)
_invalid_parameter_handler = ctypes.CFUNCTYPE(None, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.c_uint32, ctypes.c_uint64)
class struct__div_t(Structure):
    pass

struct__div_t._pack_ = 1 # source:False
struct__div_t._fields_ = [
    ('quot', ctypes.c_int32),
    ('rem', ctypes.c_int32),
]

div_t = struct__div_t
class struct__ldiv_t(Structure):
    pass

struct__ldiv_t._pack_ = 1 # source:False
struct__ldiv_t._fields_ = [
    ('quot', ctypes.c_int32),
    ('rem', ctypes.c_int32),
]

ldiv_t = struct__ldiv_t
class struct__lldiv_t(Structure):
    pass

struct__lldiv_t._pack_ = 1 # source:False
struct__lldiv_t._fields_ = [
    ('quot', ctypes.c_int64),
    ('rem', ctypes.c_int64),
]

lldiv_t = struct__lldiv_t
class struct__LDOUBLE(Structure):
    pass

struct__LDOUBLE._pack_ = 1 # source:False
struct__LDOUBLE._fields_ = [
    ('ld', ctypes.c_ubyte * 10),
]

class struct__CRT_DOUBLE(Structure):
    pass

struct__CRT_DOUBLE._pack_ = 1 # source:False
struct__CRT_DOUBLE._fields_ = [
    ('x', ctypes.c_double),
]

class struct__CRT_FLOAT(Structure):
    pass

struct__CRT_FLOAT._pack_ = 1 # source:False
struct__CRT_FLOAT._fields_ = [
    ('f', ctypes.c_float),
]

class struct__LONGDOUBLE(Structure):
    pass

struct__LONGDOUBLE._pack_ = 1 # source:False
struct__LONGDOUBLE._fields_ = [
    ('x', c_long_double_t),
]

class struct__LDBL12(Structure):
    pass

struct__LDBL12._pack_ = 1 # source:False
struct__LDBL12._fields_ = [
    ('ld12', ctypes.c_ubyte * 12),
]

class struct__iobuf(Structure):
    pass

struct__iobuf._pack_ = 1 # source:False
struct__iobuf._fields_ = [
    ('_Placeholder', ctypes.POINTER(None)),
]

FILE = struct__iobuf
fpos_t = ctypes.c_int64
class struct_tm(Structure):
    pass

struct_tm._pack_ = 1 # source:False
struct_tm._fields_ = [
    ('tm_sec', ctypes.c_int32),
    ('tm_min', ctypes.c_int32),
    ('tm_hour', ctypes.c_int32),
    ('tm_mday', ctypes.c_int32),
    ('tm_mon', ctypes.c_int32),
    ('tm_year', ctypes.c_int32),
    ('tm_wday', ctypes.c_int32),
    ('tm_yday', ctypes.c_int32),
    ('tm_isdst', ctypes.c_int32),
]

clock_t = ctypes.c_int32
class struct__timespec32(Structure):
    pass

struct__timespec32._pack_ = 1 # source:False
struct__timespec32._fields_ = [
    ('tv_sec', ctypes.c_int32),
    ('tv_nsec', ctypes.c_int32),
]

class struct__timespec64(Structure):
    pass

struct__timespec64._pack_ = 1 # source:False
struct__timespec64._fields_ = [
    ('tv_sec', ctypes.c_int64),
    ('tv_nsec', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_timespec(Structure):
    pass

struct_timespec._pack_ = 1 # source:False
struct_timespec._fields_ = [
    ('tv_sec', ctypes.c_int64),
    ('tv_nsec', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_std__nothrow_t(Structure):
    pass

_HFILE = ctypes.POINTER(None)
_CRT_REPORT_HOOK = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_int32))
_CRT_REPORT_HOOKW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int32))
_CRT_ALLOC_HOOK = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(ctypes.c_ubyte), ctypes.c_int32)
_CRT_DUMP_CLIENT = ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.c_uint64)
class struct__CrtMemBlockHeader(Structure):
    pass

class struct__CrtMemState(Structure):
    pass

struct__CrtMemState._pack_ = 1 # source:False
struct__CrtMemState._fields_ = [
    ('pBlockHeader', ctypes.POINTER(struct__CrtMemBlockHeader)),
    ('lCounts', ctypes.c_uint64 * 5),
    ('lSizes', ctypes.c_uint64 * 5),
    ('lHighWaterCount', ctypes.c_uint64),
    ('lTotalCount', ctypes.c_uint64),
]


# values for enumeration 'std___Uninitialized'
std___Uninitialized__enumvalues = {
    0: '_Noinit',
}
_Noinit = 0
std___Uninitialized = ctypes.c_uint32 # enum
class struct_std___Lockit(Structure):
    pass

struct_std___Lockit._pack_ = 1 # source:False
struct_std___Lockit._fields_ = [
    ('_Locktype', ctypes.c_int32),
]

class struct_std___Init_locks(Structure):
    pass

int8_t = ctypes.c_int8
int16_t = ctypes.c_int16
int32_t = ctypes.c_int32
int64_t = ctypes.c_int64
uint8_t = ctypes.c_uint8
uint16_t = ctypes.c_uint16
uint32_t = ctypes.c_uint32
uint64_t = ctypes.c_uint64
int_least8_t = ctypes.c_char
int_least16_t = ctypes.c_int16
int_least32_t = ctypes.c_int32
int_least64_t = ctypes.c_int64
uint_least8_t = ctypes.c_ubyte
uint_least16_t = ctypes.c_uint16
uint_least32_t = ctypes.c_uint32
uint_least64_t = ctypes.c_uint64
int_fast8_t = ctypes.c_char
int_fast16_t = ctypes.c_int32
int_fast32_t = ctypes.c_int32
int_fast64_t = ctypes.c_int64
uint_fast8_t = ctypes.c_ubyte
uint_fast16_t = ctypes.c_uint32
uint_fast32_t = ctypes.c_uint32
uint_fast64_t = ctypes.c_uint64
intmax_t = ctypes.c_int64
uintmax_t = ctypes.c_uint64
class struct_std__integral_constant_bool__true_(Structure):
    pass

std__integral_constant_bool__true___value_type = ctypes.c_char
std__true_type = struct_std__integral_constant_bool__true_
class struct_std__integral_constant_bool__false_(Structure):
    pass

std__integral_constant_bool__false___value_type = ctypes.c_char
std__false_type = struct_std__integral_constant_bool__false_
std__max_align_t = ctypes.c_double
class struct__exception(Structure):
    pass

struct__exception._pack_ = 1 # source:False
struct__exception._fields_ = [
    ('type', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('arg1', ctypes.c_double),
    ('arg2', ctypes.c_double),
    ('retval', ctypes.c_double),
]

class struct__complex(Structure):
    pass

struct__complex._pack_ = 1 # source:False
struct__complex._fields_ = [
    ('x', ctypes.c_double),
    ('y', ctypes.c_double),
]

float_t = ctypes.c_float
double_t = ctypes.c_double
class union__double_val(Union):
    pass

union__double_val._pack_ = 1 # source:False
union__double_val._fields_ = [
    ('_Sh', ctypes.c_uint16 * 4),
    ('_Val', ctypes.c_double),
]

class union__float_val(Union):
    pass

union__float_val._pack_ = 1 # source:False
union__float_val._fields_ = [
    ('_Sh', ctypes.c_uint16 * 2),
    ('_Val', ctypes.c_float),
]

class union__ldouble_val(Union):
    pass

union__ldouble_val._pack_ = 1 # source:False
union__ldouble_val._fields_ = [
    ('_Sh', ctypes.c_uint16 * 4),
    ('_Val', c_long_double_t),
]

class union__float_const(Union):
    pass

union__float_const._pack_ = 1 # source:False
union__float_const._fields_ = [
    ('_Word', ctypes.c_uint16 * 4),
    ('_Float', ctypes.c_float),
    ('_Double', ctypes.c_double),
    ('_Long_double', c_long_double_t),
]

class struct__Combined_type_float__double_(Structure):
    pass

class struct__Combined_type_float__long_double_(Structure):
    pass

class struct__Real_widened_float__float_(Structure):
    pass

class struct__Real_widened_float__double_(Structure):
    pass

class struct__Real_widened_double__float_(Structure):
    pass

class struct__Real_widened_double__double_(Structure):
    pass

class struct__Real_type_float_(Structure):
    pass

class struct__Real_type_long_double_(Structure):
    pass

class struct_std__plus_void_(Structure):
    pass

class struct_std__minus_void_(Structure):
    pass

class struct_std__multiplies_void_(Structure):
    pass

class struct_std__equal_to_void_(Structure):
    pass

class struct_std__not_equal_to_void_(Structure):
    pass

class struct_std__greater_void_(Structure):
    pass

class struct_std__less_void_(Structure):
    pass

class struct_std__greater_equal_void_(Structure):
    pass

class struct_std__less_equal_void_(Structure):
    pass

class struct_std___Select_false_(Structure):
    pass

class struct_std___Make_signed2_1_(Structure):
    pass

class struct_std___Make_signed2_2_(Structure):
    pass

class struct_std___Make_signed2_4_(Structure):
    pass

class struct_std___Make_signed2_8_(Structure):
    pass

class struct_std___Make_unsigned2_1_(Structure):
    pass

class struct_std___Make_unsigned2_2_(Structure):
    pass

class struct_std___Make_unsigned2_4_(Structure):
    pass

class struct_std___Make_unsigned2_8_(Structure):
    pass

class struct_std__integral_constant_unsigned_long_long__0_(Structure):
    pass

class struct_std___Maximum__(struct_std__integral_constant_unsigned_long_long__0_):
    pass

std__integral_constant_unsigned_long_long__0___value_type = ctypes.c_uint64
class struct_std__common_type__(Structure):
    pass


# values for enumeration 'std___Invoker_strategy'
std___Invoker_strategy__enumvalues = {
    0: '_Functor',
    1: '_Pmf_object',
    2: '_Pmf_refwrap',
    3: '_Pmf_pointer',
    4: '_Pmd_object',
    5: '_Pmd_refwrap',
    6: '_Pmd_pointer',
}
_Functor = 0
_Pmf_object = 1
_Pmf_refwrap = 2
_Pmf_pointer = 3
_Pmd_object = 4
_Pmd_refwrap = 5
_Pmd_pointer = 6
std___Invoker_strategy = ctypes.c_uint32 # enum
class struct_std___Invoker_functor(Structure):
    pass

class struct_std___Invoker_pmf_object(Structure):
    pass

class struct_std___Invoker_pmf_refwrap(Structure):
    pass

class struct_std___Invoker_pmf_pointer(Structure):
    pass

class struct_std___Invoker_pmd_object(Structure):
    pass

class struct_std___Invoker_pmd_refwrap(Structure):
    pass

class struct_std___Invoker_pmd_pointer(Structure):
    pass

class struct_std__hash_float_(Structure):
    pass

class struct_std__hash_double_(Structure):
    pass

class struct_std__hash_long_double_(Structure):
    pass

class struct_std__hash_std__nullptr_t_(Structure):
    pass

class struct_std___Floating_type_traits_float_(Structure):
    pass

class struct_std___Floating_type_traits_double_(Structure):
    pass

class struct_std___Floating_type_traits_long_double_(struct_std___Floating_type_traits_double_):
    pass

class struct__heapinfo(Structure):
    pass

struct__heapinfo._pack_ = 1 # source:False
struct__heapinfo._fields_ = [
    ('_pentry', ctypes.POINTER(ctypes.c_int32)),
    ('_size', ctypes.c_uint64),
    ('_useflag', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

_HEAPINFO = struct__heapinfo
terminate_handler = ctypes.CFUNCTYPE(None)
terminate_function = ctypes.CFUNCTYPE(None)
unexpected_handler = ctypes.CFUNCTYPE(None)
unexpected_function = ctypes.CFUNCTYPE(None)
class struct__EXCEPTION_RECORD(Structure):
    pass

struct__EXCEPTION_RECORD._pack_ = 1 # source:False
struct__EXCEPTION_RECORD._fields_ = [
    ('ExceptionCode', ctypes.c_uint32),
    ('ExceptionFlags', ctypes.c_uint32),
    ('ExceptionRecord', ctypes.POINTER(struct__EXCEPTION_RECORD)),
    ('ExceptionAddress', ctypes.POINTER(None)),
    ('NumberParameters', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ExceptionInformation', ctypes.c_uint64 * 15),
]

EXCEPTION_RECORD = struct__EXCEPTION_RECORD
PEXCEPTION_RECORD = ctypes.POINTER(struct__EXCEPTION_RECORD)
class struct__CONTEXT(Structure):
    pass

PCONTEXT = ctypes.POINTER(struct__CONTEXT)
class struct__EXCEPTION_POINTERS(Structure):
    pass

struct__EXCEPTION_POINTERS._pack_ = 1 # source:False
struct__EXCEPTION_POINTERS._fields_ = [
    ('ExceptionRecord', ctypes.POINTER(struct__EXCEPTION_RECORD)),
    ('ContextRecord', ctypes.POINTER(struct__CONTEXT)),
]

_se_translator_function = ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.POINTER(struct__EXCEPTION_POINTERS))
class struct_type_info(Structure):
    pass

class struct___std_exception_data(Structure):
    pass

struct___std_exception_data._pack_ = 1 # source:False
struct___std_exception_data._fields_ = [
    ('_What', ctypes.POINTER(ctypes.c_char)),
    ('_DoFree', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

class struct_std__exception(Structure):
    pass

struct_std__exception._pack_ = 1 # source:False
struct_std__exception._fields_ = [
    ('__vftable', ctypes.POINTER(struct_std__exception_vtbl)),
    ('_Data', struct___std_exception_data),
]

class struct_std__bad_exception(struct_std__exception):
    pass

class struct_std__bad_alloc(struct_std__exception):
    pass

class struct_std__bad_array_new_length(struct_std__bad_alloc):
    pass

class struct_std__exception_ptr(Structure):
    pass

struct_std__exception_ptr._pack_ = 1 # source:False
struct_std__exception_ptr._fields_ = [
    ('_Data1', ctypes.POINTER(None)),
    ('_Data2', ctypes.POINTER(None)),
]

class struct_std__nested_exception(Structure):
    pass

struct_std__nested_exception._pack_ = 1 # source:False
struct_std__nested_exception._fields_ = [
    ('__vftable', ctypes.POINTER(struct_std__nested_exception_vtbl)),
    ('_Exc', struct_std__exception_ptr),
]

std__new_handler = ctypes.CFUNCTYPE(None)
_fsize_t = ctypes.c_uint32
class struct__wfinddata32_t(Structure):
    pass

struct__wfinddata32_t._pack_ = 1 # source:False
struct__wfinddata32_t._fields_ = [
    ('attrib', ctypes.c_uint32),
    ('time_create', ctypes.c_int32),
    ('time_access', ctypes.c_int32),
    ('time_write', ctypes.c_int32),
    ('size', ctypes.c_uint32),
    ('name', ctypes.c_int16 * 260),
]

class struct__wfinddata32i64_t(Structure):
    pass

struct__wfinddata32i64_t._pack_ = 1 # source:False
struct__wfinddata32i64_t._fields_ = [
    ('attrib', ctypes.c_uint32),
    ('time_create', ctypes.c_int32),
    ('time_access', ctypes.c_int32),
    ('time_write', ctypes.c_int32),
    ('size', ctypes.c_int64),
    ('name', ctypes.c_int16 * 260),
]

class struct__wfinddata64i32_t(Structure):
    pass

struct__wfinddata64i32_t._pack_ = 1 # source:False
struct__wfinddata64i32_t._fields_ = [
    ('attrib', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('time_create', ctypes.c_int64),
    ('time_access', ctypes.c_int64),
    ('time_write', ctypes.c_int64),
    ('size', ctypes.c_uint32),
    ('name', ctypes.c_int16 * 260),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

class struct__wfinddata64_t(Structure):
    pass

struct__wfinddata64_t._pack_ = 1 # source:False
struct__wfinddata64_t._fields_ = [
    ('attrib', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('time_create', ctypes.c_int64),
    ('time_access', ctypes.c_int64),
    ('time_write', ctypes.c_int64),
    ('size', ctypes.c_int64),
    ('name', ctypes.c_int16 * 260),
]

_ino_t = ctypes.c_uint16
ino_t = ctypes.c_uint16
_dev_t = ctypes.c_uint32
dev_t = ctypes.c_uint32
_off_t = ctypes.c_int32
off_t = ctypes.c_int32
class struct__stat32(Structure):
    pass

struct__stat32._pack_ = 1 # source:False
struct__stat32._fields_ = [
    ('st_dev', ctypes.c_uint32),
    ('st_ino', ctypes.c_uint16),
    ('st_mode', ctypes.c_uint16),
    ('st_nlink', ctypes.c_int16),
    ('st_uid', ctypes.c_int16),
    ('st_gid', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('st_rdev', ctypes.c_uint32),
    ('st_size', ctypes.c_int32),
    ('st_atime', ctypes.c_int32),
    ('st_mtime', ctypes.c_int32),
    ('st_ctime', ctypes.c_int32),
]

class struct__stat32i64(Structure):
    pass

struct__stat32i64._pack_ = 1 # source:False
struct__stat32i64._fields_ = [
    ('st_dev', ctypes.c_uint32),
    ('st_ino', ctypes.c_uint16),
    ('st_mode', ctypes.c_uint16),
    ('st_nlink', ctypes.c_int16),
    ('st_uid', ctypes.c_int16),
    ('st_gid', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('st_rdev', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('st_size', ctypes.c_int64),
    ('st_atime', ctypes.c_int32),
    ('st_mtime', ctypes.c_int32),
    ('st_ctime', ctypes.c_int32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

class struct__stat64i32(Structure):
    pass

struct__stat64i32._pack_ = 1 # source:False
struct__stat64i32._fields_ = [
    ('st_dev', ctypes.c_uint32),
    ('st_ino', ctypes.c_uint16),
    ('st_mode', ctypes.c_uint16),
    ('st_nlink', ctypes.c_int16),
    ('st_uid', ctypes.c_int16),
    ('st_gid', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('st_rdev', ctypes.c_uint32),
    ('st_size', ctypes.c_int32),
    ('st_atime', ctypes.c_int64),
    ('st_mtime', ctypes.c_int64),
    ('st_ctime', ctypes.c_int64),
]

class struct__stat64(Structure):
    pass

struct__stat64._pack_ = 1 # source:False
struct__stat64._fields_ = [
    ('st_dev', ctypes.c_uint32),
    ('st_ino', ctypes.c_uint16),
    ('st_mode', ctypes.c_uint16),
    ('st_nlink', ctypes.c_int16),
    ('st_uid', ctypes.c_int16),
    ('st_gid', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('st_rdev', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('st_size', ctypes.c_int64),
    ('st_atime', ctypes.c_int64),
    ('st_mtime', ctypes.c_int64),
    ('st_ctime', ctypes.c_int64),
]

class struct_stat(Structure):
    pass

struct_stat._pack_ = 1 # source:False
struct_stat._fields_ = [
    ('st_dev', ctypes.c_uint32),
    ('st_ino', ctypes.c_uint16),
    ('st_mode', ctypes.c_uint16),
    ('st_nlink', ctypes.c_int16),
    ('st_uid', ctypes.c_int16),
    ('st_gid', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('st_rdev', ctypes.c_uint32),
    ('st_size', ctypes.c_int32),
    ('st_atime', ctypes.c_int64),
    ('st_mtime', ctypes.c_int64),
    ('st_ctime', ctypes.c_int64),
]

_Wint_t = ctypes.c_int16
std__streamoff = ctypes.c_int64
std__streamsize = ctypes.c_int64
class struct_std__fpos__Mbstatet_(Structure):
    pass

struct_std__fpos__Mbstatet_._pack_ = 1 # source:False
struct_std__fpos__Mbstatet_._fields_ = [
    ('_Myoff', ctypes.c_int64),
    ('_Fpos', ctypes.c_int64),
    ('_Mystate', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

std__streampos = struct_std__fpos__Mbstatet_
std__wstreampos = struct_std__fpos__Mbstatet_
class struct_std__locale(Structure):
    pass

class struct_std___Char_traits_char__int_(Structure):
    pass

class struct_std___Narrow_char_traits_char__int_(struct_std___Char_traits_char__int_):
    pass

class struct_std__char_traits_char_(struct_std___Narrow_char_traits_char__int_):
    pass

class struct_std___Char_traits_char16_t__unsigned_short_(Structure):
    pass

class struct_std___WChar_traits_char16_t_(struct_std___Char_traits_char16_t__unsigned_short_):
    pass

class struct_std__char_traits_char16_t_(struct_std___WChar_traits_char16_t_):
    pass

class struct_std___Char_traits_char32_t__unsigned_int_(Structure):
    pass

class struct_std__char_traits_char32_t_(struct_std___Char_traits_char32_t__unsigned_int_):
    pass

class struct_std___Char_traits_wchar_t__unsigned_short_(Structure):
    pass

class struct_std___WChar_traits_wchar_t_(struct_std___Char_traits_wchar_t__unsigned_short_):
    pass

class struct_std__char_traits_wchar_t_(struct_std___WChar_traits_wchar_t_):
    pass

class struct_std___Char_traits_unsigned_short__unsigned_short_(Structure):
    pass

class struct_std___WChar_traits_unsigned_short_(struct_std___Char_traits_unsigned_short__unsigned_short_):
    pass

class struct_std__char_traits_unsigned_short_(struct_std___WChar_traits_unsigned_short_):
    pass

class struct_std__ios_base(Structure):
    pass

class struct_std__ios(Structure):
    pass

std__ios = struct_std__ios
class struct_std__streambuf(Structure):
    pass

std__streambuf = struct_std__streambuf
class struct_std__istream(Structure):
    pass

std__istream = struct_std__istream
class struct_std__ostream(Structure):
    pass

std__ostream = struct_std__ostream
class struct_std__iostream(Structure):
    pass

std__iostream = struct_std__iostream
class struct_std__stringbuf(Structure):
    pass

std__stringbuf = struct_std__stringbuf
class struct_std__istringstream(Structure):
    pass

std__istringstream = struct_std__istringstream
class struct_std__ostringstream(Structure):
    pass

std__ostringstream = struct_std__ostringstream
class struct_std__basic_stringstream_char_(Structure):
    pass

std__stringstream = struct_std__basic_stringstream_char_
class struct_std__filebuf(Structure):
    pass

std__filebuf = struct_std__filebuf
class struct_std__ifstream(Structure):
    pass

std__ifstream = struct_std__ifstream
class struct_std__ofstream(Structure):
    pass

std__ofstream = struct_std__ofstream
class struct_std__fstream(Structure):
    pass

std__fstream = struct_std__fstream
class struct_std__wios(Structure):
    pass

std__wios = struct_std__wios
class struct_std__wstreambuf(Structure):
    pass

std__wstreambuf = struct_std__wstreambuf
class struct_std__wistream(Structure):
    pass

std__wistream = struct_std__wistream
class struct_std__wostream(Structure):
    pass

std__wostream = struct_std__wostream
class struct_std__wiostream(Structure):
    pass

std__wiostream = struct_std__wiostream
class struct_std__wstringbuf(Structure):
    pass

std__wstringbuf = struct_std__wstringbuf
class struct_std__wistringstream(Structure):
    pass

std__wistringstream = struct_std__wistringstream
class struct_std__wostringstream(Structure):
    pass

std__wostringstream = struct_std__wostringstream
class struct_std__basic_stringstream_wchar_t_(Structure):
    pass

std__wstringstream = struct_std__basic_stringstream_wchar_t_
class struct_std__wfilebuf(Structure):
    pass

std__wfilebuf = struct_std__wfilebuf
class struct_std__wifstream(Structure):
    pass

std__wifstream = struct_std__wifstream
class struct_std__wofstream(Structure):
    pass

std__wofstream = struct_std__wofstream
class struct_std__wfstream(Structure):
    pass

std__wfstream = struct_std__wfstream

# values for enumeration 'ISA_AVAILABILITY'
ISA_AVAILABILITY__enumvalues = {
    0: '__ISA_AVAILABLE_X86',
    1: '__ISA_AVAILABLE_SSE2',
    2: '__ISA_AVAILABLE_SSE42',
    3: '__ISA_AVAILABLE_AVX',
    4: '__ISA_AVAILABLE_ENFSTRG',
    5: '__ISA_AVAILABLE_AVX2',
    6: '__ISA_AVAILABLE_AVX512',
    0: '__ISA_AVAILABLE_ARMNT',
    1: '__ISA_AVAILABLE_NEON',
    2: '__ISA_AVAILABLE_NEON_ARM64',
}
__ISA_AVAILABLE_X86 = 0
__ISA_AVAILABLE_SSE2 = 1
__ISA_AVAILABLE_SSE42 = 2
__ISA_AVAILABLE_AVX = 3
__ISA_AVAILABLE_ENFSTRG = 4
__ISA_AVAILABLE_AVX2 = 5
__ISA_AVAILABLE_AVX512 = 6
__ISA_AVAILABLE_ARMNT = 0
__ISA_AVAILABLE_NEON = 1
__ISA_AVAILABLE_NEON_ARM64 = 2
ISA_AVAILABILITY = ctypes.c_uint32 # enum

# values for enumeration 'std__float_denorm_style'
std__float_denorm_style__enumvalues = {
    4294967295: 'denorm_indeterminate',
    0: 'denorm_absent',
    1: 'denorm_present',
}
denorm_indeterminate = 4294967295
denorm_absent = 0
denorm_present = 1
std__float_denorm_style = ctypes.c_uint32 # enum

# values for enumeration 'std__float_round_style'
std__float_round_style__enumvalues = {
    4294967295: 'round_indeterminate',
    0: 'round_toward_zero',
    1: 'round_to_nearest',
    2: 'round_toward_infinity',
    3: 'round_toward_neg_infinity',
}
round_indeterminate = 4294967295
round_toward_zero = 0
round_to_nearest = 1
round_toward_infinity = 2
round_toward_neg_infinity = 3
std__float_round_style = ctypes.c_uint32 # enum
class struct_std___Num_base(Structure):
    pass

class struct_std___Num_int_base(struct_std___Num_base):
    pass

class struct_std___Num_float_base(struct_std___Num_base):
    pass

class struct_std__numeric_limits_bool_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_char_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_signed_char_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_unsigned_char_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_char16_t_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_char32_t_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_wchar_t_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_short_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_int_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_long_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_long_long_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_unsigned_short_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_unsigned_int_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_unsigned_long_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_unsigned_long_long_(struct_std___Num_int_base):
    pass

class struct_std__numeric_limits_float_(struct_std___Num_float_base):
    pass

class struct_std__numeric_limits_double_(struct_std___Num_float_base):
    pass

class struct_std__numeric_limits_long_double_(struct_std___Num_float_base):
    pass


# values for enumeration 'std__memory_order'
std__memory_order__enumvalues = {
    0: 'memory_order_relaxed',
    1: 'memory_order_consume',
    2: 'memory_order_acquire',
    3: 'memory_order_release',
    4: 'memory_order_acq_rel',
    5: 'memory_order_seq_cst',
}
memory_order_relaxed = 0
memory_order_consume = 1
memory_order_acquire = 2
memory_order_release = 3
memory_order_acq_rel = 4
memory_order_seq_cst = 5
std__memory_order = ctypes.c_uint32 # enum
std___Atomic_counter_t = ctypes.c_uint32
class struct_std__piecewise_construct_t(Structure):
    pass

class struct_std___Unused_parameter(Structure):
    pass

std___Any_tag = struct_std___Unused_parameter
class struct_std__input_iterator_tag(Structure):
    pass

class struct_std__output_iterator_tag(Structure):
    pass

class struct_std__forward_iterator_tag(struct_std__input_iterator_tag):
    pass

class struct_std__bidirectional_iterator_tag(struct_std__forward_iterator_tag):
    pass

class struct_std__random_access_iterator_tag(struct_std__bidirectional_iterator_tag):
    pass

class struct_std___Distance_unknown(Structure):
    pass

class struct_std___Container_proxy(Structure):
    pass

class struct_std___Container_base12(Structure):
    pass

class struct_std___Iterator_base12(Structure):
    pass

struct_std___Container_proxy._pack_ = 1 # source:False
struct_std___Container_proxy._fields_ = [
    ('_Mycont', ctypes.POINTER(struct_std___Container_base12)),
    ('_Myfirstiter', ctypes.POINTER(struct_std___Iterator_base12)),
]

class struct_std___Default_sentinel(Structure):
    pass

class struct_std___False_copy_cat(Structure):
    pass

class struct_std___Is_character_char_(struct_std__integral_constant_bool__true_):
    pass

class struct_std___Is_character_signed_char_(struct_std__integral_constant_bool__true_):
    pass

class struct_std___Is_character_unsigned_char_(struct_std__integral_constant_bool__true_):
    pass

class struct_std___Is_character_or_bool_bool_(struct_std__integral_constant_bool__true_):
    pass

class struct_std__allocator_arg_t(Structure):
    pass

class struct_std___Nontrivial_dummy_type(Structure):
    pass

class struct_std___Default_allocate_traits(Structure):
    pass

class struct_std___Equal_allocators(Structure):
    pass

std___Propagate_allocators = struct_std__integral_constant_bool__true_
std___No_propagate_allocators = struct_std__integral_constant_bool__false_
class struct_std__allocator_void_(Structure):
    pass

class struct_std___Fake_allocator(Structure):
    pass

class struct_std___Container_base0(Structure):
    pass

class struct_std___Iterator_base0(Structure):
    pass

std___Container_base = struct_std___Container_base0
std___Iterator_base = struct_std___Iterator_base0
class struct_std___Leave_proxy_unbound(Structure):
    pass

class struct_std___Fake_proxy_ptr_impl(Structure):
    pass

class struct_std___Basic_container_proxy_ptr12(Structure):
    pass

struct_std___Basic_container_proxy_ptr12._pack_ = 1 # source:False
struct_std___Basic_container_proxy_ptr12._fields_ = [
    ('_Ptr', ctypes.POINTER(struct_std___Container_proxy)),
]

class struct_std___Zero_then_variadic_args_t(Structure):
    pass

class struct_std___One_then_variadic_args_t(Structure):
    pass

class struct_std___Move_allocator_tag(Structure):
    pass

std___Char_traits_char16_t__unsigned_short___int_type = ctypes.c_uint16
std___WChar_traits__Elem___int_type = ctypes.c_uint16
std___WChar_traits_char16_t___int_type = ctypes.c_uint16
std__u16streampos = struct_std__fpos__Mbstatet_
std___Char_traits_char32_t__unsigned_int___int_type = ctypes.c_uint32
std__u32streampos = struct_std__fpos__Mbstatet_
std___Char_traits_wchar_t__unsigned_short___int_type = ctypes.c_uint16
std___WChar_traits_wchar_t___int_type = ctypes.c_uint16
std___Char_traits_unsigned_short__unsigned_short___int_type = ctypes.c_uint16
std___WChar_traits_unsigned_short___int_type = ctypes.c_uint16
std___Char_traits_char__int___int_type = ctypes.c_int32
std___Narrow_char_traits_char__int___int_type = ctypes.c_int32
class struct_std___String_constructor_concat_tag(Structure):
    pass

class struct_std___String_constructor_rvalue_allocator_tag(Structure):
    pass

class struct_std__allocator_char_(Structure):
    pass

std___Simple_types_char___value_type = ctypes.c_char
std___String_val_std___Simple_types_char____value_type = ctypes.c_char
std___Simple_types_char___pointer = ctypes.POINTER(ctypes.c_char)
std___String_val_std___Simple_types_char____pointer = ctypes.POINTER(ctypes.c_char)
class union_std___String_val_std___Simple_types_char_____Bxty(Union):
    pass

union_std___String_val_std___Simple_types_char_____Bxty._pack_ = 1 # source:False
union_std___String_val_std___Simple_types_char_____Bxty._fields_ = [
    ('_Buf', ctypes.c_char * 16),
    ('_Ptr', ctypes.POINTER(ctypes.c_char)),
    ('_Alias', ctypes.c_char * 16),
]

std___Simple_types_char___size_type = ctypes.c_uint64
std___String_val_std___Simple_types_char____size_type = ctypes.c_uint64
class struct_std___String_val_std___Simple_types_char__(struct_std___Container_base0):
    pass

struct_std___String_val_std___Simple_types_char__._pack_ = 1 # source:False
struct_std___String_val_std___Simple_types_char__._fields_ = [
    ('_Bx', union_std___String_val_std___Simple_types_char_____Bxty),
    ('_Mysize', ctypes.c_uint64),
    ('_Myres', ctypes.c_uint64),
]

class struct_std___Compressed_pair_std__allocator_char___std___String_val_std___Simple_types_char____true_(struct_std__allocator_char_):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___String_val_std___Simple_types_char__),
     ]

class struct_std__string(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Mypair', struct_std___Compressed_pair_std__allocator_char___std___String_val_std___Simple_types_char____true_),
     ]

std___Default_allocator_traits_std__allocator_char____size_type = ctypes.c_uint64
std__string__size_type = ctypes.c_uint64
class struct_std__initializer_list_char_(Structure):
    pass

struct_std__initializer_list_char_._pack_ = 1 # source:False
struct_std__initializer_list_char_._fields_ = [
    ('_First', ctypes.POINTER(ctypes.c_char)),
    ('_Last', ctypes.POINTER(ctypes.c_char)),
]

std___Simple_types_char___const_pointer = ctypes.POINTER(ctypes.c_char)
std___String_val_std___Simple_types_char____const_pointer = ctypes.POINTER(ctypes.c_char)
std___String_const_iterator_std___String_val_std___Simple_types_char_____pointer = ctypes.POINTER(ctypes.c_char)
class struct_std___String_const_iterator_std___String_val_std___Simple_types_char___(struct_std___Iterator_base0):
    pass

struct_std___String_const_iterator_std___String_val_std___Simple_types_char___._pack_ = 1 # source:False
struct_std___String_const_iterator_std___String_val_std___Simple_types_char___._fields_ = [
    ('_Ptr', ctypes.POINTER(ctypes.c_char)),
]

class struct_std___String_iterator_std___String_val_std___Simple_types_char___(struct_std___String_const_iterator_std___String_val_std___Simple_types_char___):
    pass

std___String_const_iterator_std___String_val_std___Simple_types_char_____value_type = ctypes.c_char
std___String_const_iterator_std___String_val_std___Simple_types_char_____reference = ctypes.POINTER(ctypes.c_char)
std___Simple_types_char___difference_type = ctypes.c_int64
std___String_val_std___Simple_types_char____difference_type = ctypes.c_int64
std___String_const_iterator_std___String_val_std___Simple_types_char_____difference_type = ctypes.c_int64
std___String_iterator_std___String_val_std___Simple_types_char_____value_type = ctypes.c_char
std___String_iterator_std___String_val_std___Simple_types_char_____reference = ctypes.POINTER(ctypes.c_char)
std___String_iterator_std___String_val_std___Simple_types_char_____pointer = ctypes.POINTER(ctypes.c_char)
std___String_iterator_std___String_val_std___Simple_types_char_____difference_type = ctypes.c_int64
std__string__iterator = struct_std___String_iterator_std___String_val_std___Simple_types_char___
std__string__const_iterator = struct_std___String_const_iterator_std___String_val_std___Simple_types_char___
class struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___String_iterator_std___String_val_std___Simple_types_char___),
     ]

std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char____ = ctypes.POINTER(ctypes.c_char)
std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______reference = ctypes.POINTER(ctypes.c_char)
std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char______pointer = ctypes.POINTER(ctypes.c_char)
std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______pointer = ctypes.POINTER(ctypes.c_char)
std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char____ = ctypes.c_int64
std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______difference_type = ctypes.c_int64
std__string__reverse_iterator = struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char____
class struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___String_const_iterator_std___String_val_std___Simple_types_char___),
     ]

std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char____ = ctypes.POINTER(ctypes.c_char)
std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______reference = ctypes.POINTER(ctypes.c_char)
std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char______pointer = ctypes.POINTER(ctypes.c_char)
std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______pointer = ctypes.POINTER(ctypes.c_char)
std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char____ = ctypes.c_int64
std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______difference_type = ctypes.c_int64
std__string__const_reverse_iterator = struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char____
std__string__value_type = ctypes.c_char
std__string__reference = ctypes.POINTER(ctypes.c_char)
std__string__const_reference = ctypes.POINTER(ctypes.c_char)
std__string___Scary_val = struct_std___String_val_std___Simple_types_char__
std__string__allocator_type = struct_std__allocator_char_
std__string___Alty = struct_std__allocator_char_
std__string = struct_std__string
class struct_std__allocator_wchar_t_(Structure):
    pass

std___Simple_types_wchar_t___value_type = ctypes.c_int16
std___String_val_std___Simple_types_wchar_t____value_type = ctypes.c_int16
std___Simple_types_wchar_t___pointer = ctypes.POINTER(ctypes.c_int16)
std___String_val_std___Simple_types_wchar_t____pointer = ctypes.POINTER(ctypes.c_int16)
class union_std___String_val_std___Simple_types_wchar_t_____Bxty(Union):
    pass

union_std___String_val_std___Simple_types_wchar_t_____Bxty._pack_ = 1 # source:False
union_std___String_val_std___Simple_types_wchar_t_____Bxty._fields_ = [
    ('_Buf', ctypes.c_int16 * 8),
    ('_Ptr', ctypes.POINTER(ctypes.c_int16)),
    ('_Alias', ctypes.c_char * 8),
    ('PADDING_0', ctypes.c_ubyte * 8),
]

std___Simple_types_wchar_t___size_type = ctypes.c_uint64
std___String_val_std___Simple_types_wchar_t____size_type = ctypes.c_uint64
class struct_std___String_val_std___Simple_types_wchar_t__(struct_std___Container_base0):
    pass

struct_std___String_val_std___Simple_types_wchar_t__._pack_ = 1 # source:False
struct_std___String_val_std___Simple_types_wchar_t__._fields_ = [
    ('_Bx', union_std___String_val_std___Simple_types_wchar_t_____Bxty),
    ('_Mysize', ctypes.c_uint64),
    ('_Myres', ctypes.c_uint64),
]

class struct_std___Compressed_pair_std__allocator_wchar_t___std___String_val_std___Simple_types_wchar_t____true_(struct_std__allocator_wchar_t_):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___String_val_std___Simple_types_wchar_t__),
     ]

class struct_std__wstring(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Mypair', struct_std___Compressed_pair_std__allocator_wchar_t___std___String_val_std___Simple_types_wchar_t____true_),
     ]

std___Default_allocator_traits_std__allocator_wchar_t____size_type = ctypes.c_uint64
std__wstring__size_type = ctypes.c_uint64
class struct_std__initializer_list_wchar_t_(Structure):
    pass

struct_std__initializer_list_wchar_t_._pack_ = 1 # source:False
struct_std__initializer_list_wchar_t_._fields_ = [
    ('_First', ctypes.POINTER(ctypes.c_int16)),
    ('_Last', ctypes.POINTER(ctypes.c_int16)),
]

std___Simple_types_wchar_t___const_pointer = ctypes.POINTER(ctypes.c_int16)
std___String_val_std___Simple_types_wchar_t____const_pointer = ctypes.POINTER(ctypes.c_int16)
std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____pointer = ctypes.POINTER(ctypes.c_int16)
class struct_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___(struct_std___Iterator_base0):
    pass

struct_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___._pack_ = 1 # source:False
struct_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___._fields_ = [
    ('_Ptr', ctypes.POINTER(ctypes.c_int16)),
]

class struct_std___String_iterator_std___String_val_std___Simple_types_wchar_t___(struct_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___):
    pass

std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____value_type = ctypes.c_int16
std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____reference = ctypes.POINTER(ctypes.c_int16)
std___Simple_types_wchar_t___difference_type = ctypes.c_int64
std___String_val_std___Simple_types_wchar_t____difference_type = ctypes.c_int64
std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____difference_type = ctypes.c_int64
std___String_iterator_std___String_val_std___Simple_types_wchar_t_____value_type = ctypes.c_int16
std___String_iterator_std___String_val_std___Simple_types_wchar_t_____reference = ctypes.POINTER(ctypes.c_int16)
std___String_iterator_std___String_val_std___Simple_types_wchar_t_____pointer = ctypes.POINTER(ctypes.c_int16)
std___String_iterator_std___String_val_std___Simple_types_wchar_t_____difference_type = ctypes.c_int64
std__wstring__iterator = struct_std___String_iterator_std___String_val_std___Simple_types_wchar_t___
std__wstring__const_iterator = struct_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___
class struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___String_iterator_std___String_val_std___Simple_types_wchar_t___),
     ]

std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_wchar_t____ = ctypes.POINTER(ctypes.c_int16)
std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______reference = ctypes.POINTER(ctypes.c_int16)
std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_wchar_t______pointer = ctypes.POINTER(ctypes.c_int16)
std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______pointer = ctypes.POINTER(ctypes.c_int16)
std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_wchar_t____ = ctypes.c_int64
std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______difference_type = ctypes.c_int64
std__wstring__reverse_iterator = struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t____
class struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___),
     ]

std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____ = ctypes.POINTER(ctypes.c_int16)
std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______reference = ctypes.POINTER(ctypes.c_int16)
std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______pointer = ctypes.POINTER(ctypes.c_int16)
std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______pointer = ctypes.POINTER(ctypes.c_int16)
std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____ = ctypes.c_int64
std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______difference_type = ctypes.c_int64
std__wstring__const_reverse_iterator = struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____
std__wstring__value_type = ctypes.c_int16
std__wstring__reference = ctypes.POINTER(ctypes.c_int16)
std__wstring__const_reference = ctypes.POINTER(ctypes.c_int16)
std__wstring___Scary_val = struct_std___String_val_std___Simple_types_wchar_t__
std__wstring__allocator_type = struct_std__allocator_wchar_t_
std__wstring___Alty = struct_std__allocator_wchar_t_
std__wstring = struct_std__wstring
class struct_std__allocator_char16_t_(Structure):
    pass

std___Simple_types_char16_t___value_type = ctypes.c_int16
std___String_val_std___Simple_types_char16_t____value_type = ctypes.c_int16
std___Simple_types_char16_t___pointer = ctypes.POINTER(ctypes.c_int16)
std___String_val_std___Simple_types_char16_t____pointer = ctypes.POINTER(ctypes.c_int16)
class union_std___String_val_std___Simple_types_char16_t_____Bxty(Union):
    pass

union_std___String_val_std___Simple_types_char16_t_____Bxty._pack_ = 1 # source:False
union_std___String_val_std___Simple_types_char16_t_____Bxty._fields_ = [
    ('_Buf', ctypes.c_int16 * 8),
    ('_Ptr', ctypes.POINTER(ctypes.c_int16)),
    ('_Alias', ctypes.c_char * 8),
    ('PADDING_0', ctypes.c_ubyte * 8),
]

std___Simple_types_char16_t___size_type = ctypes.c_uint64
std___String_val_std___Simple_types_char16_t____size_type = ctypes.c_uint64
class struct_std___String_val_std___Simple_types_char16_t__(struct_std___Container_base0):
    pass

struct_std___String_val_std___Simple_types_char16_t__._pack_ = 1 # source:False
struct_std___String_val_std___Simple_types_char16_t__._fields_ = [
    ('_Bx', union_std___String_val_std___Simple_types_char16_t_____Bxty),
    ('_Mysize', ctypes.c_uint64),
    ('_Myres', ctypes.c_uint64),
]

class struct_std___Compressed_pair_std__allocator_char16_t___std___String_val_std___Simple_types_char16_t____true_(struct_std__allocator_char16_t_):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___String_val_std___Simple_types_char16_t__),
     ]

class struct_std__basic_string_char16_t_(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Mypair', struct_std___Compressed_pair_std__allocator_char16_t___std___String_val_std___Simple_types_char16_t____true_),
     ]

std___Default_allocator_traits_std__allocator_char16_t____size_type = ctypes.c_uint64
std__basic_string_char16_t___size_type = ctypes.c_uint64
class struct_std__initializer_list_char16_t_(Structure):
    pass

struct_std__initializer_list_char16_t_._pack_ = 1 # source:False
struct_std__initializer_list_char16_t_._fields_ = [
    ('_First', ctypes.POINTER(ctypes.c_int16)),
    ('_Last', ctypes.POINTER(ctypes.c_int16)),
]

std___Simple_types_char16_t___const_pointer = ctypes.POINTER(ctypes.c_int16)
std___String_val_std___Simple_types_char16_t____const_pointer = ctypes.POINTER(ctypes.c_int16)
std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____pointer = ctypes.POINTER(ctypes.c_int16)
class struct_std___String_const_iterator_std___String_val_std___Simple_types_char16_t___(struct_std___Iterator_base0):
    pass

struct_std___String_const_iterator_std___String_val_std___Simple_types_char16_t___._pack_ = 1 # source:False
struct_std___String_const_iterator_std___String_val_std___Simple_types_char16_t___._fields_ = [
    ('_Ptr', ctypes.POINTER(ctypes.c_int16)),
]

class struct_std___String_iterator_std___String_val_std___Simple_types_char16_t___(struct_std___String_const_iterator_std___String_val_std___Simple_types_char16_t___):
    pass

std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____value_type = ctypes.c_int16
std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____reference = ctypes.POINTER(ctypes.c_int16)
std___Simple_types_char16_t___difference_type = ctypes.c_int64
std___String_val_std___Simple_types_char16_t____difference_type = ctypes.c_int64
std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____difference_type = ctypes.c_int64
std___String_iterator_std___String_val_std___Simple_types_char16_t_____value_type = ctypes.c_int16
std___String_iterator_std___String_val_std___Simple_types_char16_t_____reference = ctypes.POINTER(ctypes.c_int16)
std___String_iterator_std___String_val_std___Simple_types_char16_t_____pointer = ctypes.POINTER(ctypes.c_int16)
std___String_iterator_std___String_val_std___Simple_types_char16_t_____difference_type = ctypes.c_int64
std__basic_string_char16_t___iterator = struct_std___String_iterator_std___String_val_std___Simple_types_char16_t___
std__basic_string_char16_t___const_iterator = struct_std___String_const_iterator_std___String_val_std___Simple_types_char16_t___
class struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___String_iterator_std___String_val_std___Simple_types_char16_t___),
     ]

std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char16_t____ = ctypes.POINTER(ctypes.c_int16)
std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______reference = ctypes.POINTER(ctypes.c_int16)
std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char16_t______pointer = ctypes.POINTER(ctypes.c_int16)
std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______pointer = ctypes.POINTER(ctypes.c_int16)
std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char16_t____ = ctypes.c_int64
std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______difference_type = ctypes.c_int64
std__basic_string_char16_t___reverse_iterator = struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t____
class struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___String_const_iterator_std___String_val_std___Simple_types_char16_t___),
     ]

std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____ = ctypes.POINTER(ctypes.c_int16)
std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______reference = ctypes.POINTER(ctypes.c_int16)
std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______pointer = ctypes.POINTER(ctypes.c_int16)
std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______pointer = ctypes.POINTER(ctypes.c_int16)
std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____ = ctypes.c_int64
std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______difference_type = ctypes.c_int64
std__basic_string_char16_t___const_reverse_iterator = struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____
std__basic_string_char16_t___value_type = ctypes.c_int16
std__basic_string_char16_t___reference = ctypes.POINTER(ctypes.c_int16)
std__basic_string_char16_t___const_reference = ctypes.POINTER(ctypes.c_int16)
std__basic_string_char16_t____Scary_val = struct_std___String_val_std___Simple_types_char16_t__
std__basic_string_char16_t___allocator_type = struct_std__allocator_char16_t_
std__basic_string_char16_t____Alty = struct_std__allocator_char16_t_
std__u16string = struct_std__basic_string_char16_t_
class struct_std__allocator_char32_t_(Structure):
    pass

std___Simple_types_char32_t___value_type = ctypes.c_int32
std___String_val_std___Simple_types_char32_t____value_type = ctypes.c_int32
std___Simple_types_char32_t___pointer = ctypes.POINTER(ctypes.c_int32)
std___String_val_std___Simple_types_char32_t____pointer = ctypes.POINTER(ctypes.c_int32)
class union_std___String_val_std___Simple_types_char32_t_____Bxty(Union):
    pass

union_std___String_val_std___Simple_types_char32_t_____Bxty._pack_ = 1 # source:False
union_std___String_val_std___Simple_types_char32_t_____Bxty._fields_ = [
    ('_Buf', ctypes.c_int32 * 4),
    ('_Ptr', ctypes.POINTER(ctypes.c_int32)),
    ('_Alias', ctypes.c_char * 4),
    ('PADDING_0', ctypes.c_ubyte * 12),
]

std___Simple_types_char32_t___size_type = ctypes.c_uint64
std___String_val_std___Simple_types_char32_t____size_type = ctypes.c_uint64
class struct_std___String_val_std___Simple_types_char32_t__(struct_std___Container_base0):
    pass

struct_std___String_val_std___Simple_types_char32_t__._pack_ = 1 # source:False
struct_std___String_val_std___Simple_types_char32_t__._fields_ = [
    ('_Bx', union_std___String_val_std___Simple_types_char32_t_____Bxty),
    ('_Mysize', ctypes.c_uint64),
    ('_Myres', ctypes.c_uint64),
]

class struct_std___Compressed_pair_std__allocator_char32_t___std___String_val_std___Simple_types_char32_t____true_(struct_std__allocator_char32_t_):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___String_val_std___Simple_types_char32_t__),
     ]

class struct_std__basic_string_char32_t_(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Mypair', struct_std___Compressed_pair_std__allocator_char32_t___std___String_val_std___Simple_types_char32_t____true_),
     ]

std___Default_allocator_traits_std__allocator_char32_t____size_type = ctypes.c_uint64
std__basic_string_char32_t___size_type = ctypes.c_uint64
class struct_std__initializer_list_char32_t_(Structure):
    pass

struct_std__initializer_list_char32_t_._pack_ = 1 # source:False
struct_std__initializer_list_char32_t_._fields_ = [
    ('_First', ctypes.POINTER(ctypes.c_int32)),
    ('_Last', ctypes.POINTER(ctypes.c_int32)),
]

std___Simple_types_char32_t___const_pointer = ctypes.POINTER(ctypes.c_int32)
std___String_val_std___Simple_types_char32_t____const_pointer = ctypes.POINTER(ctypes.c_int32)
std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____pointer = ctypes.POINTER(ctypes.c_int32)
class struct_std___String_const_iterator_std___String_val_std___Simple_types_char32_t___(struct_std___Iterator_base0):
    pass

struct_std___String_const_iterator_std___String_val_std___Simple_types_char32_t___._pack_ = 1 # source:False
struct_std___String_const_iterator_std___String_val_std___Simple_types_char32_t___._fields_ = [
    ('_Ptr', ctypes.POINTER(ctypes.c_int32)),
]

class struct_std___String_iterator_std___String_val_std___Simple_types_char32_t___(struct_std___String_const_iterator_std___String_val_std___Simple_types_char32_t___):
    pass

std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____value_type = ctypes.c_int32
std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____reference = ctypes.POINTER(ctypes.c_int32)
std___Simple_types_char32_t___difference_type = ctypes.c_int64
std___String_val_std___Simple_types_char32_t____difference_type = ctypes.c_int64
std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____difference_type = ctypes.c_int64
std___String_iterator_std___String_val_std___Simple_types_char32_t_____value_type = ctypes.c_int32
std___String_iterator_std___String_val_std___Simple_types_char32_t_____reference = ctypes.POINTER(ctypes.c_int32)
std___String_iterator_std___String_val_std___Simple_types_char32_t_____pointer = ctypes.POINTER(ctypes.c_int32)
std___String_iterator_std___String_val_std___Simple_types_char32_t_____difference_type = ctypes.c_int64
std__basic_string_char32_t___iterator = struct_std___String_iterator_std___String_val_std___Simple_types_char32_t___
std__basic_string_char32_t___const_iterator = struct_std___String_const_iterator_std___String_val_std___Simple_types_char32_t___
class struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___String_iterator_std___String_val_std___Simple_types_char32_t___),
     ]

std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char32_t____ = ctypes.POINTER(ctypes.c_int32)
std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______reference = ctypes.POINTER(ctypes.c_int32)
std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char32_t______pointer = ctypes.POINTER(ctypes.c_int32)
std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______pointer = ctypes.POINTER(ctypes.c_int32)
std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char32_t____ = ctypes.c_int64
std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______difference_type = ctypes.c_int64
std__basic_string_char32_t___reverse_iterator = struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t____
class struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___String_const_iterator_std___String_val_std___Simple_types_char32_t___),
     ]

std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____ = ctypes.POINTER(ctypes.c_int32)
std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______reference = ctypes.POINTER(ctypes.c_int32)
std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______pointer = ctypes.POINTER(ctypes.c_int32)
std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______pointer = ctypes.POINTER(ctypes.c_int32)
std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____ = ctypes.c_int64
std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______difference_type = ctypes.c_int64
std__basic_string_char32_t___const_reverse_iterator = struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____
std__basic_string_char32_t___value_type = ctypes.c_int32
std__basic_string_char32_t___reference = ctypes.POINTER(ctypes.c_int32)
std__basic_string_char32_t___const_reference = ctypes.POINTER(ctypes.c_int32)
std__basic_string_char32_t____Scary_val = struct_std___String_val_std___Simple_types_char32_t__
std__basic_string_char32_t___allocator_type = struct_std__allocator_char32_t_
std__basic_string_char32_t____Alty = struct_std__allocator_char32_t_
std__u32string = struct_std__basic_string_char32_t_
class struct__finddata32_t(Structure):
    pass

struct__finddata32_t._pack_ = 1 # source:False
struct__finddata32_t._fields_ = [
    ('attrib', ctypes.c_uint32),
    ('time_create', ctypes.c_int32),
    ('time_access', ctypes.c_int32),
    ('time_write', ctypes.c_int32),
    ('size', ctypes.c_uint32),
    ('name', ctypes.c_char * 260),
]

class struct__finddata32i64_t(Structure):
    pass

struct__finddata32i64_t._pack_ = 1 # source:False
struct__finddata32i64_t._fields_ = [
    ('attrib', ctypes.c_uint32),
    ('time_create', ctypes.c_int32),
    ('time_access', ctypes.c_int32),
    ('time_write', ctypes.c_int32),
    ('size', ctypes.c_int64),
    ('name', ctypes.c_char * 260),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct__finddata64i32_t(Structure):
    pass

struct__finddata64i32_t._pack_ = 1 # source:False
struct__finddata64i32_t._fields_ = [
    ('attrib', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('time_create', ctypes.c_int64),
    ('time_access', ctypes.c_int64),
    ('time_write', ctypes.c_int64),
    ('size', ctypes.c_uint32),
    ('name', ctypes.c_char * 260),
]

class struct___finddata64_t(Structure):
    pass

struct___finddata64_t._pack_ = 1 # source:False
struct___finddata64_t._fields_ = [
    ('attrib', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('time_create', ctypes.c_int64),
    ('time_access', ctypes.c_int64),
    ('time_write', ctypes.c_int64),
    ('size', ctypes.c_int64),
    ('name', ctypes.c_char * 260),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

class struct__diskfree_t(Structure):
    pass

struct__diskfree_t._pack_ = 1 # source:False
struct__diskfree_t._fields_ = [
    ('total_clusters', ctypes.c_uint32),
    ('avail_clusters', ctypes.c_uint32),
    ('sectors_per_cluster', ctypes.c_uint32),
    ('bytes_per_sector', ctypes.c_uint32),
]


# values for enumeration 'std___Tree_child'
std___Tree_child__enumvalues = {
    0: '_Right',
    1: '_Left',
    2: '_Unused',
}
_Right = 0
_Left = 1
_Unused = 2
std___Tree_child = ctypes.c_uint32 # enum
class struct_std___Ignore(Structure):
    pass

class struct_std___Exact_args_t(Structure):
    pass

class struct_std___Unpack_tuple_t(Structure):
    pass

class struct_std___Alloc_exact_args_t(Structure):
    pass

class struct_std___Alloc_unpack_tuple_t(Structure):
    pass

class struct_std__tuple__(Structure):
    pass

class struct_std___Rand_urng_from_func(Structure):
    pass

std___Rand_urng_from_func__result_type = ctypes.c_uint32
uchar = ctypes.c_ubyte
ushort = ctypes.c_uint16
uint = ctypes.c_uint32
int8 = ctypes.c_char
sint8 = ctypes.c_char
uint8 = ctypes.c_ubyte
int16 = ctypes.c_int16
uint16 = ctypes.c_uint16
int32 = ctypes.c_int32
uint32 = ctypes.c_uint32
ulonglong = ctypes.c_uint64
longlong = ctypes.c_int64
class struct_uint128(Structure):
    pass

struct_uint128._pack_ = 1 # source:False
struct_uint128._fields_ = [
    ('l', ctypes.c_uint64),
    ('h', ctypes.c_uint64),
]

class struct_int128(Structure):
    pass

struct_int128._pack_ = 1 # source:False
struct_int128._fields_ = [
    ('l', ctypes.c_uint64),
    ('h', ctypes.c_int64),
]

int64 = ctypes.c_int64
uint64 = ctypes.c_uint64
wchar16_t = ctypes.c_int16
wchar32_t = ctypes.c_uint32
ssize_t = ctypes.c_int64
ea_t = ctypes.c_uint64
sel_t = ctypes.c_uint64
asize_t = ctypes.c_uint64
adiff_t = ctypes.c_int64
uval_t = ctypes.c_uint64
sval_t = ctypes.c_int64
ea64_t = ctypes.c_uint64
error_t = ctypes.c_int32
op_dtype_t = ctypes.c_ubyte
inode_t = ctypes.c_uint64
diffpos_t = ctypes.c_uint64
qtime32_t = ctypes.c_int32
qtime64_t = ctypes.c_uint64
class struct_qstatbuf(Structure):
    pass

struct_qstatbuf._pack_ = 1 # source:False
struct_qstatbuf._fields_ = [
    ('qst_dev', ctypes.c_uint64),
    ('qst_ino', ctypes.c_uint32),
    ('qst_mode', ctypes.c_uint32),
    ('qst_nlink', ctypes.c_uint32),
    ('qst_uid', ctypes.c_uint32),
    ('qst_gid', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('qst_rdev', ctypes.c_uint64),
    ('qst_size', ctypes.c_int64),
    ('qst_blksize', ctypes.c_int32),
    ('qst_blocks', ctypes.c_int32),
    ('qst_atime', ctypes.c_uint64),
    ('qst_mtime', ctypes.c_uint64),
    ('qst_ctime', ctypes.c_uint64),
]

class struct_interr_exc_t(struct_std__exception):
    pass

struct_interr_exc_t._pack_ = 1 # source:False
struct_interr_exc_t._fields_ = [
    ('code', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_qvector_unsigned_long_long_(Structure):
    pass

struct_qvector_unsigned_long_long_._pack_ = 1 # source:False
struct_qvector_unsigned_long_long_._fields_ = [
    ('array', ctypes.POINTER(ctypes.c_uint64)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_unsigned_long_long___iterator = ctypes.POINTER(ctypes.c_uint64)
qvector_unsigned_long_long___const_iterator = ctypes.POINTER(ctypes.c_uint64)
uvalvec_t = struct_qvector_unsigned_long_long_
class struct_qvector_long_long_(Structure):
    pass

struct_qvector_long_long_._pack_ = 1 # source:False
struct_qvector_long_long_._fields_ = [
    ('array', ctypes.POINTER(ctypes.c_int64)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_long_long___iterator = ctypes.POINTER(ctypes.c_int64)
qvector_long_long___const_iterator = ctypes.POINTER(ctypes.c_int64)
svalvec_t = struct_qvector_long_long_
eavec_t = struct_qvector_unsigned_long_long_
class struct_qvector_int_(Structure):
    pass

struct_qvector_int_._pack_ = 1 # source:False
struct_qvector_int_._fields_ = [
    ('array', ctypes.POINTER(ctypes.c_int32)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_int___iterator = ctypes.POINTER(ctypes.c_int32)
qvector_int___const_iterator = ctypes.POINTER(ctypes.c_int32)
intvec_t = struct_qvector_int_
class struct_qvector_bool_(Structure):
    pass

struct_qvector_bool_._pack_ = 1 # source:False
struct_qvector_bool_._fields_ = [
    ('array', ctypes.POINTER(ctypes.c_char)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_bool___iterator = ctypes.POINTER(ctypes.c_char)
qvector_bool___const_iterator = ctypes.POINTER(ctypes.c_char)
boolvec_t = struct_qvector_bool_
sizevec_t = struct_qvector_unsigned_long_long_
class struct_qrefcnt_obj_t(Structure):
    pass

struct_qrefcnt_obj_t._pack_ = 1 # source:False
struct_qrefcnt_obj_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_qrefcnt_obj_t_vtbl)),
    ('refcnt', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_qvector_char_(Structure):
    pass

struct_qvector_char_._pack_ = 1 # source:False
struct_qvector_char_._fields_ = [
    ('array', ctypes.POINTER(ctypes.c_char)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

class struct__qstring_char_(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('body', struct_qvector_char_),
     ]

_qstring_char___iterator = ctypes.POINTER(ctypes.c_char)
_qstring_char___const_iterator = ctypes.POINTER(ctypes.c_char)
class struct_qvector__qstring_char__(Structure):
    pass

struct_qvector__qstring_char__._pack_ = 1 # source:False
struct_qvector__qstring_char__._fields_ = [
    ('array', ctypes.POINTER(struct__qstring_char_)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector__qstring_char____iterator = ctypes.POINTER(struct__qstring_char_)
qvector__qstring_char____const_iterator = ctypes.POINTER(struct__qstring_char_)
qvector_char___iterator = ctypes.POINTER(ctypes.c_char)
qvector_char___const_iterator = ctypes.POINTER(ctypes.c_char)
qstring = struct__qstring_char_
class struct_qvector_unsigned_char_(Structure):
    pass

struct_qvector_unsigned_char_._pack_ = 1 # source:False
struct_qvector_unsigned_char_._fields_ = [
    ('array', ctypes.POINTER(ctypes.c_ubyte)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

class struct__qstring_unsigned_char_(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('body', struct_qvector_unsigned_char_),
     ]

_qstring_unsigned_char___iterator = ctypes.POINTER(ctypes.c_ubyte)
_qstring_unsigned_char___const_iterator = ctypes.POINTER(ctypes.c_ubyte)
class struct_qvector__qstring_unsigned_char__(Structure):
    pass

struct_qvector__qstring_unsigned_char__._pack_ = 1 # source:False
struct_qvector__qstring_unsigned_char__._fields_ = [
    ('array', ctypes.POINTER(struct__qstring_unsigned_char_)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector__qstring_unsigned_char____iterator = ctypes.POINTER(struct__qstring_unsigned_char_)
qvector__qstring_unsigned_char____const_iterator = ctypes.POINTER(struct__qstring_unsigned_char_)
qvector_unsigned_char___iterator = ctypes.POINTER(ctypes.c_ubyte)
qvector_unsigned_char___const_iterator = ctypes.POINTER(ctypes.c_ubyte)
qtype = struct__qstring_unsigned_char_
class struct_qvector_wchar_t_(Structure):
    pass

struct_qvector_wchar_t_._pack_ = 1 # source:False
struct_qvector_wchar_t_._fields_ = [
    ('array', ctypes.POINTER(ctypes.c_int16)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

class struct__qstring_wchar_t_(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('body', struct_qvector_wchar_t_),
     ]

_qstring_wchar_t___iterator = ctypes.POINTER(ctypes.c_int16)
_qstring_wchar_t___const_iterator = ctypes.POINTER(ctypes.c_int16)
class struct_qvector__qstring_wchar_t__(Structure):
    pass

struct_qvector__qstring_wchar_t__._pack_ = 1 # source:False
struct_qvector__qstring_wchar_t__._fields_ = [
    ('array', ctypes.POINTER(struct__qstring_wchar_t_)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector__qstring_wchar_t____iterator = ctypes.POINTER(struct__qstring_wchar_t_)
qvector__qstring_wchar_t____const_iterator = ctypes.POINTER(struct__qstring_wchar_t_)
qvector_wchar_t___iterator = ctypes.POINTER(ctypes.c_int16)
qvector_wchar_t___const_iterator = ctypes.POINTER(ctypes.c_int16)
qwstring = struct__qstring_wchar_t_
qstrvec_t = struct_qvector__qstring_char__
qwstrvec_t = struct_qvector__qstring_wchar_t__
class struct_bytevec_t(struct_qvector_unsigned_char_):
    pass

class struct_reloc_info_t(struct_bytevec_t):
    pass

class struct_relobj_t(struct_bytevec_t):
    pass

struct_relobj_t._pack_ = 1 # source:False
struct_relobj_t._fields_ = [
    ('base', ctypes.c_uint64),
    ('ri', struct_reloc_info_t),
]

class struct_memory_deserializer_t(Structure):
    pass

struct_memory_deserializer_t._pack_ = 1 # source:False
struct_memory_deserializer_t._fields_ = [
    ('ptr', ctypes.POINTER(ctypes.c_ubyte)),
    ('end', ctypes.POINTER(ctypes.c_ubyte)),
]

flags_t = ctypes.c_uint32
tid_t = ctypes.c_uint64
bgcolor_t = ctypes.c_uint32
class struct_channel_redir_t(Structure):
    pass

struct_channel_redir_t._pack_ = 1 # source:False
struct_channel_redir_t._fields_ = [
    ('fd', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('file', qstring),
    ('flags', ctypes.c_int32),
    ('start', ctypes.c_int32),
    ('length', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

class struct_qvector_channel_redir_t_(Structure):
    pass

struct_qvector_channel_redir_t_._pack_ = 1 # source:False
struct_qvector_channel_redir_t_._fields_ = [
    ('array', ctypes.POINTER(struct_channel_redir_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_channel_redir_t___iterator = ctypes.POINTER(struct_channel_redir_t)
qvector_channel_redir_t___const_iterator = ctypes.POINTER(struct_channel_redir_t)
channel_redirs_t = struct_qvector_channel_redir_t_
cliopt_handler_t = ctypes.CFUNCTYPE(None, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(None))
cliopt_poly_handler_t = ctypes.CFUNCTYPE(None, ctypes.c_int32, ctypes.POINTER(ctypes.POINTER(ctypes.c_char)), ctypes.POINTER(None))
class struct_cliopt_t(Structure):
    pass

struct_cliopt_t._pack_ = 1 # source:False
struct_cliopt_t._fields_ = [
    ('shortname', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
    ('longname', ctypes.POINTER(ctypes.c_char)),
    ('help', ctypes.POINTER(ctypes.c_char)),
    ('handler', ctypes.CFUNCTYPE(None, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(None))),
    ('nargs', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

class struct_ida_movable_type_cliopt_t_(Structure):
    pass

class struct_qvector_cliopt_t_(Structure):
    pass

struct_qvector_cliopt_t_._pack_ = 1 # source:False
struct_qvector_cliopt_t_._fields_ = [
    ('array', ctypes.POINTER(struct_cliopt_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

cliopts_t__usage_printer_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char))
class struct_cliopts_t(struct_qvector_cliopt_t_):
    pass

struct_cliopts_t._pack_ = 1 # source:False
struct_cliopts_t._fields_ = [
    ('prog_name', qstring),
    ('epilog', qstring),
    ('printer', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char))),
]

qvector_cliopt_t___iterator = ctypes.POINTER(struct_cliopt_t)
qvector_cliopt_t___const_iterator = ctypes.POINTER(struct_cliopt_t)
class struct_instant_dbgopts_t(Structure):
    pass

struct_instant_dbgopts_t._pack_ = 1 # source:False
struct_instant_dbgopts_t._fields_ = [
    ('debmod', qstring),
    ('env', qstring),
    ('host', qstring),
    ('pass', qstring),
    ('port', ctypes.c_int32),
    ('pid', ctypes.c_int32),
    ('event_id', ctypes.c_int32),
    ('attach', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

class struct_launch_process_params_t(Structure):
    pass

struct_launch_process_params_t._pack_ = 1 # source:False
struct_launch_process_params_t._fields_ = [
    ('cb', ctypes.c_uint64),
    ('flags', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('path', ctypes.POINTER(ctypes.c_char)),
    ('args', ctypes.POINTER(ctypes.c_char)),
    ('in_handle', ctypes.c_int64),
    ('out_handle', ctypes.c_int64),
    ('err_handle', ctypes.c_int64),
    ('env', ctypes.POINTER(ctypes.c_char)),
    ('startdir', ctypes.POINTER(ctypes.c_char)),
    ('info', ctypes.POINTER(None)),
]


# values for enumeration 'tty_control_t'
tty_control_t__enumvalues = {
    0: 'TCT_UNKNOWN',
    1: 'TCT_OWNER',
    2: 'TCT_NOT_OWNER',
}
TCT_UNKNOWN = 0
TCT_OWNER = 1
TCT_NOT_OWNER = 2
tty_control_t = ctypes.c_uint32 # enum
_B4F266B0568ADA5794EA29B6B9D8A3FE = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None))
class struct___qthread_t(Structure):
    pass

qthread_t = ctypes.POINTER(struct___qthread_t)
class struct___qsemaphore_t(Structure):
    pass

qsemaphore_t = ctypes.POINTER(struct___qsemaphore_t)
class struct___qmutex_t(Structure):
    pass

qmutex_t = ctypes.POINTER(struct___qmutex_t)
class struct_qmutex_locker_t(Structure):
    pass

struct_qmutex_locker_t._pack_ = 1 # source:False
struct_qmutex_locker_t._fields_ = [
    ('lock', ctypes.POINTER(struct___qmutex_t)),
]

qhandle_t = ctypes.POINTER(None)
class struct_range_t(Structure):
    pass

struct_range_t._pack_ = 1 # source:False
struct_range_t._fields_ = [
    ('start_ea', ctypes.c_uint64),
    ('end_ea', ctypes.c_uint64),
]

class struct_ida_movable_type_range_t_(Structure):
    pass

class struct_qvector_range_t_(Structure):
    pass

struct_qvector_range_t_._pack_ = 1 # source:False
struct_qvector_range_t_._fields_ = [
    ('array', ctypes.POINTER(struct_range_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_range_t___iterator = ctypes.POINTER(struct_range_t)
qvector_range_t___const_iterator = ctypes.POINTER(struct_range_t)
rangevec_base_t = struct_qvector_range_t_
class struct_rangevec_t(struct_qvector_range_t_):
    pass


# values for enumeration 'range_kind_t'
range_kind_t__enumvalues = {
    0: 'RANGE_KIND_UNKNOWN',
    1: 'RANGE_KIND_FUNC',
    2: 'RANGE_KIND_SEGMENT',
    3: 'RANGE_KIND_HIDDEN_RANGE',
}
RANGE_KIND_UNKNOWN = 0
RANGE_KIND_FUNC = 1
RANGE_KIND_SEGMENT = 2
RANGE_KIND_HIDDEN_RANGE = 3
range_kind_t = ctypes.c_uint32 # enum
class struct_rangeset_t(Structure):
    pass

struct_rangeset_t._pack_ = 1 # source:False
struct_rangeset_t._fields_ = [
    ('bag', struct_rangevec_t),
    ('cache', ctypes.POINTER(struct_range_t)),
    ('undo_code', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

rangeset_t__const_iterator = ctypes.POINTER(struct_range_t)
rangeset_t__iterator = ctypes.POINTER(struct_range_t)
class struct_ida_movable_type_rangeset_t_(Structure):
    pass

class struct_qvector_rangeset_t_(Structure):
    pass

struct_qvector_rangeset_t_._pack_ = 1 # source:False
struct_qvector_rangeset_t_._fields_ = [
    ('array', ctypes.POINTER(struct_rangeset_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_rangeset_t___iterator = ctypes.POINTER(struct_rangeset_t)
qvector_rangeset_t___const_iterator = ctypes.POINTER(struct_rangeset_t)
array_of_rangesets = struct_qvector_rangeset_t_
class struct_qvector_const_rangeset_t__P_(Structure):
    pass

struct_qvector_const_rangeset_t__P_._pack_ = 1 # source:False
struct_qvector_const_rangeset_t__P_._fields_ = [
    ('array', ctypes.POINTER(ctypes.POINTER(struct_rangeset_t))),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_const_rangeset_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_rangeset_t))
qvector_const_rangeset_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_rangeset_t))
rangeset_crefvec_t = struct_qvector_const_rangeset_t__P_
class struct_plugin_t(Structure):
    pass

class struct_plugmod_t(Structure):
    pass

struct_plugin_t._pack_ = 1 # source:False
struct_plugin_t._fields_ = [
    ('version', ctypes.c_int32),
    ('flags', ctypes.c_int32),
    ('init', ctypes.CFUNCTYPE(ctypes.POINTER(struct_plugmod_t))),
    ('term', ctypes.CFUNCTYPE(None)),
    ('run', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.c_uint64)),
    ('comment', ctypes.POINTER(ctypes.c_char)),
    ('help', ctypes.POINTER(ctypes.c_char)),
    ('wanted_name', ctypes.POINTER(ctypes.c_char)),
    ('wanted_hotkey', ctypes.POINTER(ctypes.c_char)),
]


# values for enumeration 'filetype_t'
filetype_t__enumvalues = {
    0: 'f_EXE_old',
    1: 'f_COM_old',
    2: 'f_BIN',
    3: 'f_DRV',
    4: 'f_WIN',
    5: 'f_HEX',
    6: 'f_MEX',
    7: 'f_LX',
    8: 'f_LE',
    9: 'f_NLM',
    10: 'f_COFF',
    11: 'f_PE',
    12: 'f_OMF',
    13: 'f_SREC',
    14: 'f_ZIP',
    15: 'f_OMFLIB',
    16: 'f_AR',
    17: 'f_LOADER',
    18: 'f_ELF',
    19: 'f_W32RUN',
    20: 'f_AOUT',
    21: 'f_PRC',
    22: 'f_EXE',
    23: 'f_COM',
    24: 'f_AIXAR',
    25: 'f_MACHO',
    26: 'f_PSXOBJ',
}
f_EXE_old = 0
f_COM_old = 1
f_BIN = 2
f_DRV = 3
f_WIN = 4
f_HEX = 5
f_MEX = 6
f_LX = 7
f_LE = 8
f_NLM = 9
f_COFF = 10
f_PE = 11
f_OMF = 12
f_SREC = 13
f_ZIP = 14
f_OMFLIB = 15
f_AR = 16
f_LOADER = 17
f_ELF = 18
f_W32RUN = 19
f_AOUT = 20
f_PRC = 21
f_EXE = 22
f_COM = 23
f_AIXAR = 24
f_MACHO = 25
f_PSXOBJ = 26
filetype_t = ctypes.c_uint32 # enum
comp_t = ctypes.c_ubyte
cm_t = ctypes.c_ubyte
class struct_compiler_info_t(Structure):
    pass

struct_compiler_info_t._pack_ = 1 # source:False
struct_compiler_info_t._fields_ = [
    ('id', ctypes.c_ubyte),
    ('cm', ctypes.c_ubyte),
    ('size_i', ctypes.c_ubyte),
    ('size_b', ctypes.c_ubyte),
    ('size_e', ctypes.c_ubyte),
    ('defalign', ctypes.c_ubyte),
    ('size_s', ctypes.c_ubyte),
    ('size_l', ctypes.c_ubyte),
    ('size_ll', ctypes.c_ubyte),
    ('size_ldbl', ctypes.c_ubyte),
]


# values for enumeration 'storage_type_t'
storage_type_t__enumvalues = {
    4294967295: 'STT_CUR',
    0: 'STT_VA',
    1: 'STT_MM',
    2: 'STT_DBG',
}
STT_CUR = 4294967295
STT_VA = 0
STT_MM = 1
STT_DBG = 2
storage_type_t = ctypes.c_uint32 # enum
class struct_idainfo(Structure):
    pass

struct_idainfo._pack_ = 1 # source:False
struct_idainfo._fields_ = [
    ('tag', ctypes.c_char * 3),
    ('zero', ctypes.c_char),
    ('version', ctypes.c_uint16),
    ('procname', ctypes.c_char * 16),
    ('s_genflags', ctypes.c_uint16),
    ('lflags', ctypes.c_uint32),
    ('database_change_count', ctypes.c_uint32),
    ('filetype', ctypes.c_uint16),
    ('ostype', ctypes.c_uint16),
    ('apptype', ctypes.c_uint16),
    ('asmtype', ctypes.c_ubyte),
    ('specsegs', ctypes.c_ubyte),
    ('af', ctypes.c_uint32),
    ('af2', ctypes.c_uint32),
    ('baseaddr', ctypes.c_uint64),
    ('start_ss', ctypes.c_uint64),
    ('start_cs', ctypes.c_uint64),
    ('start_ip', ctypes.c_uint64),
    ('start_ea', ctypes.c_uint64),
    ('start_sp', ctypes.c_uint64),
    ('main', ctypes.c_uint64),
    ('min_ea', ctypes.c_uint64),
    ('max_ea', ctypes.c_uint64),
    ('omin_ea', ctypes.c_uint64),
    ('omax_ea', ctypes.c_uint64),
    ('lowoff', ctypes.c_uint64),
    ('highoff', ctypes.c_uint64),
    ('maxref', ctypes.c_uint64),
    ('privrange', struct_range_t),
    ('netdelta', ctypes.c_int64),
    ('xrefnum', ctypes.c_ubyte),
    ('type_xrefnum', ctypes.c_ubyte),
    ('refcmtnum', ctypes.c_ubyte),
    ('s_xrefflag', ctypes.c_ubyte),
    ('max_autoname_len', ctypes.c_uint16),
    ('nametype', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte),
    ('short_demnames', ctypes.c_uint32),
    ('long_demnames', ctypes.c_uint32),
    ('demnames', ctypes.c_ubyte),
    ('listnames', ctypes.c_ubyte),
    ('indent', ctypes.c_ubyte),
    ('cmt_indent', ctypes.c_ubyte),
    ('margin', ctypes.c_uint16),
    ('lenxref', ctypes.c_uint16),
    ('outflags', ctypes.c_uint32),
    ('s_cmtflg', ctypes.c_ubyte),
    ('s_limiter', ctypes.c_ubyte),
    ('bin_prefix_size', ctypes.c_int16),
    ('s_prefflag', ctypes.c_ubyte),
    ('strlit_flags', ctypes.c_ubyte),
    ('strlit_break', ctypes.c_ubyte),
    ('strlit_zeroes', ctypes.c_char),
    ('strtype', ctypes.c_int32),
    ('strlit_pref', ctypes.c_char * 16),
    ('strlit_sernum', ctypes.c_uint64),
    ('datatypes', ctypes.c_uint64),
    ('cc', struct_compiler_info_t),
    ('PADDING_1', ctypes.c_ubyte * 2),
    ('abibits', ctypes.c_uint32),
    ('appcall_options', ctypes.c_uint32),
    ('padding', ctypes.c_uint32),
]


# values for enumeration 'inftag_t'
inftag_t__enumvalues = {
    0: 'INF_VERSION',
    1: 'INF_PROCNAME',
    2: 'INF_GENFLAGS',
    3: 'INF_LFLAGS',
    4: 'INF_DATABASE_CHANGE_COUNT',
    5: 'INF_FILETYPE',
    6: 'INF_OSTYPE',
    7: 'INF_APPTYPE',
    8: 'INF_ASMTYPE',
    9: 'INF_SPECSEGS',
    10: 'INF_AF',
    11: 'INF_AF2',
    12: 'INF_BASEADDR',
    13: 'INF_START_SS',
    14: 'INF_START_CS',
    15: 'INF_START_IP',
    16: 'INF_START_EA',
    17: 'INF_START_SP',
    18: 'INF_MAIN',
    19: 'INF_MIN_EA',
    20: 'INF_MAX_EA',
    21: 'INF_OMIN_EA',
    22: 'INF_OMAX_EA',
    23: 'INF_LOWOFF',
    24: 'INF_HIGHOFF',
    25: 'INF_MAXREF',
    26: 'INF_PRIVRANGE',
    27: 'INF_PRIVRANGE_START_EA',
    28: 'INF_PRIVRANGE_END_EA',
    29: 'INF_NETDELTA',
    30: 'INF_XREFNUM',
    31: 'INF_TYPE_XREFNUM',
    32: 'INF_REFCMTNUM',
    33: 'INF_XREFFLAG',
    34: 'INF_MAX_AUTONAME_LEN',
    35: 'INF_NAMETYPE',
    36: 'INF_SHORT_DEMNAMES',
    37: 'INF_LONG_DEMNAMES',
    38: 'INF_DEMNAMES',
    39: 'INF_LISTNAMES',
    40: 'INF_INDENT',
    41: 'INF_CMT_INDENT',
    42: 'INF_MARGIN',
    43: 'INF_LENXREF',
    44: 'INF_OUTFLAGS',
    45: 'INF_CMTFLG',
    46: 'INF_LIMITER',
    47: 'INF_BIN_PREFIX_SIZE',
    48: 'INF_PREFFLAG',
    49: 'INF_STRLIT_FLAGS',
    50: 'INF_STRLIT_BREAK',
    51: 'INF_STRLIT_ZEROES',
    52: 'INF_STRTYPE',
    53: 'INF_STRLIT_PREF',
    54: 'INF_STRLIT_SERNUM',
    55: 'INF_DATATYPES',
    56: 'INF_CC',
    57: 'INF_CC_ID',
    58: 'INF_CC_CM',
    59: 'INF_CC_SIZE_I',
    60: 'INF_CC_SIZE_B',
    61: 'INF_CC_SIZE_E',
    62: 'INF_CC_DEFALIGN',
    63: 'INF_CC_SIZE_S',
    64: 'INF_CC_SIZE_L',
    65: 'INF_CC_SIZE_LL',
    66: 'INF_CC_SIZE_LDBL',
    67: 'INF_ABIBITS',
    68: 'INF_APPCALL_OPTIONS',
    69: 'INF_FILE_FORMAT_NAME',
    70: 'INF_GROUPS',
    71: 'INF_H_PATH',
    72: 'INF_C_MACROS',
    73: 'INF_INCLUDE',
    74: 'INF_DUALOP_GRAPH',
    75: 'INF_DUALOP_TEXT',
    76: 'INF_MD5',
    77: 'INF_IDA_VERSION',
    78: 'INF_STR_ENCODINGS',
    79: 'INF_DBG_BINPATHS',
    80: 'INF_SHA256',
    81: 'INF_ABINAME',
    82: 'INF_ARCHIVE_PATH',
    83: 'INF_PROBLEMS',
    84: 'INF_SELECTORS',
    85: 'INF_NOTEPAD',
    86: 'INF_SRCDBG_PATHS',
    87: 'INF_SRCDBG_UNDESIRED',
    88: 'INF_INITIAL_VERSION',
    89: 'INF_CTIME',
    90: 'INF_ELAPSED',
    91: 'INF_NOPENS',
    92: 'INF_CRC32',
    93: 'INF_IMAGEBASE',
    94: 'INF_IDSNODE',
    95: 'INF_FSIZE',
    96: 'INF_OUTFILEENC',
    97: 'INF_INPUT_FILE_PATH',
    98: 'INF_LAST',
}
INF_VERSION = 0
INF_PROCNAME = 1
INF_GENFLAGS = 2
INF_LFLAGS = 3
INF_DATABASE_CHANGE_COUNT = 4
INF_FILETYPE = 5
INF_OSTYPE = 6
INF_APPTYPE = 7
INF_ASMTYPE = 8
INF_SPECSEGS = 9
INF_AF = 10
INF_AF2 = 11
INF_BASEADDR = 12
INF_START_SS = 13
INF_START_CS = 14
INF_START_IP = 15
INF_START_EA = 16
INF_START_SP = 17
INF_MAIN = 18
INF_MIN_EA = 19
INF_MAX_EA = 20
INF_OMIN_EA = 21
INF_OMAX_EA = 22
INF_LOWOFF = 23
INF_HIGHOFF = 24
INF_MAXREF = 25
INF_PRIVRANGE = 26
INF_PRIVRANGE_START_EA = 27
INF_PRIVRANGE_END_EA = 28
INF_NETDELTA = 29
INF_XREFNUM = 30
INF_TYPE_XREFNUM = 31
INF_REFCMTNUM = 32
INF_XREFFLAG = 33
INF_MAX_AUTONAME_LEN = 34
INF_NAMETYPE = 35
INF_SHORT_DEMNAMES = 36
INF_LONG_DEMNAMES = 37
INF_DEMNAMES = 38
INF_LISTNAMES = 39
INF_INDENT = 40
INF_CMT_INDENT = 41
INF_MARGIN = 42
INF_LENXREF = 43
INF_OUTFLAGS = 44
INF_CMTFLG = 45
INF_LIMITER = 46
INF_BIN_PREFIX_SIZE = 47
INF_PREFFLAG = 48
INF_STRLIT_FLAGS = 49
INF_STRLIT_BREAK = 50
INF_STRLIT_ZEROES = 51
INF_STRTYPE = 52
INF_STRLIT_PREF = 53
INF_STRLIT_SERNUM = 54
INF_DATATYPES = 55
INF_CC = 56
INF_CC_ID = 57
INF_CC_CM = 58
INF_CC_SIZE_I = 59
INF_CC_SIZE_B = 60
INF_CC_SIZE_E = 61
INF_CC_DEFALIGN = 62
INF_CC_SIZE_S = 63
INF_CC_SIZE_L = 64
INF_CC_SIZE_LL = 65
INF_CC_SIZE_LDBL = 66
INF_ABIBITS = 67
INF_APPCALL_OPTIONS = 68
INF_FILE_FORMAT_NAME = 69
INF_GROUPS = 70
INF_H_PATH = 71
INF_C_MACROS = 72
INF_INCLUDE = 73
INF_DUALOP_GRAPH = 74
INF_DUALOP_TEXT = 75
INF_MD5 = 76
INF_IDA_VERSION = 77
INF_STR_ENCODINGS = 78
INF_DBG_BINPATHS = 79
INF_SHA256 = 80
INF_ABINAME = 81
INF_ARCHIVE_PATH = 82
INF_PROBLEMS = 83
INF_SELECTORS = 84
INF_NOTEPAD = 85
INF_SRCDBG_PATHS = 86
INF_SRCDBG_UNDESIRED = 87
INF_INITIAL_VERSION = 88
INF_CTIME = 89
INF_ELAPSED = 90
INF_NOPENS = 91
INF_CRC32 = 92
INF_IMAGEBASE = 93
INF_IDSNODE = 94
INF_FSIZE = 95
INF_OUTFILEENC = 96
INF_INPUT_FILE_PATH = 97
INF_LAST = 98
inftag_t = ctypes.c_uint32 # enum
_EBA1F6A8D2DCA7438A99E71F042CF31F = ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(None), ctypes.c_int32, ctypes.POINTER(ctypes.c_char))

# values for enumeration 'hook_type_t'
hook_type_t__enumvalues = {
    0: 'HT_IDP',
    1: 'HT_UI',
    2: 'HT_DBG',
    3: 'HT_IDB',
    4: 'HT_DEV',
    5: 'HT_VIEW',
    6: 'HT_OUTPUT',
    7: 'HT_GRAPH',
    8: 'HT_IDD',
    9: 'HT_LAST',
}
HT_IDP = 0
HT_UI = 1
HT_DBG = 2
HT_IDB = 3
HT_DEV = 4
HT_VIEW = 5
HT_OUTPUT = 6
HT_GRAPH = 7
HT_IDD = 8
HT_LAST = 9
hook_type_t = ctypes.c_uint32 # enum
class struct_post_event_visitor_t(Structure):
    pass

struct_post_event_visitor_t._pack_ = 1 # source:False
struct_post_event_visitor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_post_event_visitor_t_vtbl)),
]

class struct_dbctx_t(Structure):
    pass

atype_t = ctypes.c_int32
idastate_t = ctypes.c_int32
class struct_auto_display_t(Structure):
    pass

struct_auto_display_t._pack_ = 1 # source:False
struct_auto_display_t._fields_ = [
    ('type', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ea', ctypes.c_uint64),
    ('state', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

class struct_bitrange_t(Structure):
    pass

struct_bitrange_t._pack_ = 1 # source:False
struct_bitrange_t._fields_ = [
    ('offset', ctypes.c_uint16),
    ('nbits', ctypes.c_uint16),
]

nodeidx_t = ctypes.c_uint64
class struct_altadjust_visitor_t(Structure):
    pass

struct_altadjust_visitor_t._pack_ = 1 # source:False
struct_altadjust_visitor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_altadjust_visitor_t_vtbl)),
]

class struct_netnode(Structure):
    pass

struct_netnode._pack_ = 1 # source:False
struct_netnode._fields_ = [
    ('netnodenumber', ctypes.c_uint64),
]

class struct_linput_t(Structure):
    pass

class struct_xrefpos_t(Structure):
    pass

struct_xrefpos_t._pack_ = 1 # source:False
struct_xrefpos_t._fields_ = [
    ('ea', ctypes.c_uint64),
    ('type', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

aflags_t = ctypes.c_uint32
class struct_array_parameters_t(Structure):
    pass

struct_array_parameters_t._pack_ = 1 # source:False
struct_array_parameters_t._fields_ = [
    ('flags', ctypes.c_int32),
    ('lineitems', ctypes.c_int32),
    ('alignment', ctypes.c_int32),
]

class union_switch_info_t___C5DE5EF0754122DC92472705FC220635(Union):
    pass

union_switch_info_t___C5DE5EF0754122DC92472705FC220635._pack_ = 1 # source:False
union_switch_info_t___C5DE5EF0754122DC92472705FC220635._fields_ = [
    ('values', ctypes.c_uint64),
    ('lowcase', ctypes.c_uint64),
]

class struct_switch_info_t(Structure):
    pass

class union_switch_info_t_0(Union):
    pass

union_switch_info_t_0._pack_ = 1 # source:False
union_switch_info_t_0._fields_ = [
    ('values', ctypes.c_uint64),
    ('lowcase', ctypes.c_uint64),
]

struct_switch_info_t._pack_ = 1 # source:False
struct_switch_info_t._anonymous_ = ('_0',)
struct_switch_info_t._fields_ = [
    ('flags', ctypes.c_uint32),
    ('ncases', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('jumps', ctypes.c_uint64),
    ('_0', union_switch_info_t_0),
    ('defjump', ctypes.c_uint64),
    ('startea', ctypes.c_uint64),
    ('jcases', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('ind_lowcase', ctypes.c_int64),
    ('elbase', ctypes.c_uint64),
    ('regnum', ctypes.c_int32),
    ('regdtype', ctypes.c_ubyte),
    ('PADDING_2', ctypes.c_ubyte * 3),
    ('custom', ctypes.c_uint64),
    ('version', ctypes.c_int32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('expr_ea', ctypes.c_uint64),
    ('marks', eavec_t),
]

class struct_custom_data_type_ids_t(Structure):
    pass

struct_custom_data_type_ids_t._pack_ = 1 # source:False
struct_custom_data_type_ids_t._fields_ = [
    ('dtid', ctypes.c_int16),
    ('fids', ctypes.c_int16 * 8),
]

reftype_t = ctypes.c_ubyte
class struct_refinfo_t(Structure):
    pass

struct_refinfo_t._pack_ = 1 # source:False
struct_refinfo_t._fields_ = [
    ('target', ctypes.c_uint64),
    ('base', ctypes.c_uint64),
    ('tdelta', ctypes.c_int64),
    ('flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_custom_refinfo_handler_t(Structure):
    pass

struct_custom_refinfo_handler_t._pack_ = 1 # source:False
struct_custom_refinfo_handler_t._fields_ = [
    ('cbsize', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('desc', ctypes.POINTER(ctypes.c_char)),
    ('props', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('gen_expr', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(struct__qstring_char_), ctypes.c_uint64, ctypes.c_int32, ctypes.POINTER(struct_refinfo_t), ctypes.c_uint64, ctypes.POINTER(ctypes.c_int64), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64), ctypes.c_int32)),
    ('calc_reference_data', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64), ctypes.c_uint64, ctypes.POINTER(struct_refinfo_t), ctypes.c_int64)),
    ('get_format', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct__qstring_char_))),
]

class struct_refinfo_desc_t(Structure):
    pass

struct_refinfo_desc_t._pack_ = 1 # source:False
struct_refinfo_desc_t._fields_ = [
    ('type', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('desc', ctypes.POINTER(ctypes.c_char)),
]

class struct_ida_movable_type_refinfo_desc_t_(Structure):
    pass

class struct_qvector_refinfo_desc_t_(Structure):
    pass

struct_qvector_refinfo_desc_t_._pack_ = 1 # source:False
struct_qvector_refinfo_desc_t_._fields_ = [
    ('array', ctypes.POINTER(struct_refinfo_desc_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_refinfo_desc_t___iterator = ctypes.POINTER(struct_refinfo_desc_t)
qvector_refinfo_desc_t___const_iterator = ctypes.POINTER(struct_refinfo_desc_t)
refinfo_desc_vec_t = struct_qvector_refinfo_desc_t_
class struct_strpath_t(Structure):
    pass

struct_strpath_t._pack_ = 1 # source:False
struct_strpath_t._fields_ = [
    ('len', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ids', ctypes.c_uint64 * 32),
    ('delta', ctypes.c_int64),
]

class struct_enum_const_t(Structure):
    pass

struct_enum_const_t._pack_ = 1 # source:False
struct_enum_const_t._fields_ = [
    ('tid', ctypes.c_uint64),
    ('serial', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

class union_opinfo_t(Union):
    pass

union_opinfo_t._pack_ = 1 # source:False
union_opinfo_t._fields_ = [
    ('ri', struct_refinfo_t),
    ('tid', ctypes.c_uint64),
    ('path', struct_strpath_t),
    ('strtype', ctypes.c_int32),
    ('ec', struct_enum_const_t),
    ('cd', struct_custom_data_type_ids_t),
    ('PADDING_0', ctypes.c_ubyte * 254),
]

class struct_printop_t(Structure):
    pass

struct_printop_t._pack_ = 1 # source:False
struct_printop_t._fields_ = [
    ('flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ti', union_opinfo_t),
    ('features', ctypes.c_ubyte),
    ('PADDING_1', ctypes.c_ubyte * 3),
    ('suspop', ctypes.c_int32),
    ('aflags', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

type_t = ctypes.c_ubyte
p_list = ctypes.c_ubyte
class struct_tinfo_t(Structure):
    pass

struct_tinfo_t._pack_ = 1 # source:False
struct_tinfo_t._fields_ = [
    ('typid', ctypes.c_uint32),
]

_9F179BD796548CF53E626457CEE0248F = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint64, ctypes.POINTER(ctypes.c_char), ctypes.c_uint64, ctypes.POINTER(None))
color_t = ctypes.c_ubyte
class struct_user_defined_prefix_t(Structure):
    pass

struct_user_defined_prefix_t._pack_ = 1 # source:False
struct_user_defined_prefix_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_user_defined_prefix_t_vtbl)),
]

class union_insn_t___9E84824C699BAE5425C4537D9D91097B(Union):
    pass

union_insn_t___9E84824C699BAE5425C4537D9D91097B._pack_ = 1 # source:False
union_insn_t___9E84824C699BAE5425C4537D9D91097B._fields_ = [
    ('auxpref', ctypes.c_uint32),
    ('auxpref_u16', ctypes.c_uint16 * 2),
    ('auxpref_u8', ctypes.c_ubyte * 4),
]

optype_t = ctypes.c_ubyte
class union_op_t___355AB7214167B95D8B5C7B6316BAAD36(Union):
    pass

union_op_t___355AB7214167B95D8B5C7B6316BAAD36._pack_ = 1 # source:False
union_op_t___355AB7214167B95D8B5C7B6316BAAD36._fields_ = [
    ('reg', ctypes.c_uint16),
    ('phrase', ctypes.c_uint16),
]

class struct__C9A2842D7E4A03835E8DE2C0C76BEBF2(Structure):
    pass

struct__C9A2842D7E4A03835E8DE2C0C76BEBF2._pack_ = 1 # source:False
struct__C9A2842D7E4A03835E8DE2C0C76BEBF2._fields_ = [
    ('low', ctypes.c_uint16),
    ('high', ctypes.c_uint16),
]

class union_op_t___D19208C9BED479775D09B0229B31B2BF(Union):
    pass

union_op_t___D19208C9BED479775D09B0229B31B2BF._pack_ = 1 # source:False
union_op_t___D19208C9BED479775D09B0229B31B2BF._fields_ = [
    ('value', ctypes.c_uint64),
    ('value_shorts', struct__C9A2842D7E4A03835E8DE2C0C76BEBF2),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class union_op_t___45BD1DDA02ACF400568455B314CE2DFE(Union):
    pass

union_op_t___45BD1DDA02ACF400568455B314CE2DFE._pack_ = 1 # source:False
union_op_t___45BD1DDA02ACF400568455B314CE2DFE._fields_ = [
    ('addr', ctypes.c_uint64),
    ('addr_shorts', struct__C9A2842D7E4A03835E8DE2C0C76BEBF2),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class union_op_t___B5B57D01B492307C249AAF11037C7C50(Union):
    pass

union_op_t___B5B57D01B492307C249AAF11037C7C50._pack_ = 1 # source:False
union_op_t___B5B57D01B492307C249AAF11037C7C50._fields_ = [
    ('specval', ctypes.c_uint64),
    ('specval_shorts', struct__C9A2842D7E4A03835E8DE2C0C76BEBF2),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_op_t(Structure):
    pass

class union_op_t_2(Union):
    pass

union_op_t_2._pack_ = 1 # source:False
union_op_t_2._fields_ = [
    ('addr', ctypes.c_uint64),
    ('addr_shorts', struct__C9A2842D7E4A03835E8DE2C0C76BEBF2),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class union_op_t_1(Union):
    pass

union_op_t_1._pack_ = 1 # source:False
union_op_t_1._fields_ = [
    ('value', ctypes.c_uint64),
    ('value_shorts', struct__C9A2842D7E4A03835E8DE2C0C76BEBF2),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class union_op_t_3(Union):
    pass

union_op_t_3._pack_ = 1 # source:False
union_op_t_3._fields_ = [
    ('specval', ctypes.c_uint64),
    ('specval_shorts', struct__C9A2842D7E4A03835E8DE2C0C76BEBF2),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class union_op_t_0(Union):
    pass

union_op_t_0._pack_ = 1 # source:False
union_op_t_0._fields_ = [
    ('reg', ctypes.c_uint16),
    ('phrase', ctypes.c_uint16),
]

struct_op_t._pack_ = 1 # source:False
struct_op_t._anonymous_ = ('_0', '_1', '_2', '_3',)
struct_op_t._fields_ = [
    ('n', ctypes.c_ubyte),
    ('type', ctypes.c_ubyte),
    ('offb', ctypes.c_char),
    ('offo', ctypes.c_char),
    ('flags', ctypes.c_ubyte),
    ('dtype', ctypes.c_ubyte),
    ('_0', union_op_t_0),
    ('_1', union_op_t_1),
    ('_2', union_op_t_2),
    ('_3', union_op_t_3),
    ('specflag1', ctypes.c_char),
    ('specflag2', ctypes.c_char),
    ('specflag3', ctypes.c_char),
    ('specflag4', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_insn_t(Structure):
    pass

class union_insn_t_0(Union):
    pass

union_insn_t_0._pack_ = 1 # source:False
union_insn_t_0._fields_ = [
    ('auxpref', ctypes.c_uint32),
    ('auxpref_u16', ctypes.c_uint16 * 2),
    ('auxpref_u8', ctypes.c_ubyte * 4),
]

struct_insn_t._pack_ = 1 # source:False
struct_insn_t._anonymous_ = ('_0',)
struct_insn_t._fields_ = [
    ('cs', ctypes.c_uint64),
    ('ip', ctypes.c_uint64),
    ('ea', ctypes.c_uint64),
    ('itype', ctypes.c_uint16),
    ('size', ctypes.c_uint16),
    ('_0', union_insn_t_0),
    ('segpref', ctypes.c_char),
    ('insnpref', ctypes.c_char),
    ('flags', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ops', struct_op_t * 8),
]

class struct_processor_t(Structure):
    pass

class struct_bytes_t(Structure):
    pass

class struct_instruc_t(Structure):
    pass

class struct_asm_t(Structure):
    pass

struct_processor_t._pack_ = 1 # source:False
struct_processor_t._fields_ = [
    ('version', ctypes.c_int32),
    ('id', ctypes.c_int32),
    ('flag', ctypes.c_uint32),
    ('flag2', ctypes.c_uint32),
    ('cnbits', ctypes.c_int32),
    ('dnbits', ctypes.c_int32),
    ('psnames', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('plnames', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('assemblers', ctypes.POINTER(ctypes.POINTER(struct_asm_t))),
    ('_notify', ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(None), ctypes.c_int32, ctypes.POINTER(ctypes.c_char))),
    ('reg_names', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('regs_num', ctypes.c_int32),
    ('reg_first_sreg', ctypes.c_int32),
    ('reg_last_sreg', ctypes.c_int32),
    ('segreg_size', ctypes.c_int32),
    ('reg_code_sreg', ctypes.c_int32),
    ('reg_data_sreg', ctypes.c_int32),
    ('codestart', ctypes.POINTER(struct_bytes_t)),
    ('retcodes', ctypes.POINTER(struct_bytes_t)),
    ('instruc_start', ctypes.c_int32),
    ('instruc_end', ctypes.c_int32),
    ('instruc', ctypes.POINTER(struct_instruc_t)),
    ('tbyte_size', ctypes.c_uint64),
    ('real_width', ctypes.c_char * 4),
    ('icode_return', ctypes.c_int32),
    ('unused_slot', ctypes.POINTER(None)),
]


# values for enumeration 'processor_t__event_t'
processor_t__event_t__enumvalues = {
    0: 'ev_init',
    1: 'ev_term',
    2: 'ev_newprc',
    3: 'ev_newasm',
    4: 'ev_newfile',
    5: 'ev_oldfile',
    6: 'ev_newbinary',
    7: 'ev_endbinary',
    8: 'ev_set_idp_options',
    9: 'ev_set_proc_options',
    10: 'ev_ana_insn',
    11: 'ev_emu_insn',
    12: 'ev_out_header',
    13: 'ev_out_footer',
    14: 'ev_out_segstart',
    15: 'ev_out_segend',
    16: 'ev_out_assumes',
    17: 'ev_out_insn',
    18: 'ev_out_mnem',
    19: 'ev_out_operand',
    20: 'ev_out_data',
    21: 'ev_out_label',
    22: 'ev_out_special_item',
    23: 'ev_gen_stkvar_def',
    24: 'ev_gen_regvar_def',
    25: 'ev_gen_src_file_lnnum',
    26: 'ev_creating_segm',
    27: 'ev_moving_segm',
    28: 'ev_coagulate',
    29: 'ev_undefine',
    30: 'ev_treat_hindering_item',
    31: 'ev_rename',
    32: 'ev_is_far_jump',
    33: 'ev_is_sane_insn',
    34: 'ev_is_cond_insn',
    35: 'ev_is_call_insn',
    36: 'ev_is_ret_insn',
    37: 'ev_may_be_func',
    38: 'ev_is_basic_block_end',
    39: 'ev_is_indirect_jump',
    40: 'ev_is_insn_table_jump',
    41: 'ev_is_switch',
    42: 'ev_calc_switch_cases',
    43: 'ev_create_switch_xrefs',
    44: 'ev_is_align_insn',
    45: 'ev_is_alloca_probe',
    46: 'ev_delay_slot_insn',
    47: 'ev_is_sp_based',
    48: 'ev_can_have_type',
    49: 'ev_cmp_operands',
    50: 'ev_adjust_refinfo',
    51: 'ev_get_operand_string',
    52: 'ev_get_reg_name',
    53: 'ev_str2reg',
    54: 'ev_get_autocmt',
    55: 'ev_get_bg_color',
    56: 'ev_is_jump_func',
    57: 'ev_func_bounds',
    58: 'ev_verify_sp',
    59: 'ev_verify_noreturn',
    60: 'ev_create_func_frame',
    61: 'ev_get_frame_retsize',
    62: 'ev_get_stkvar_scale_factor',
    63: 'ev_demangle_name',
    64: 'ev_add_cref',
    65: 'ev_add_dref',
    66: 'ev_del_cref',
    67: 'ev_del_dref',
    68: 'ev_coagulate_dref',
    69: 'ev_may_show_sreg',
    70: 'ev_loader_elf_machine',
    71: 'ev_auto_queue_empty',
    72: 'ev_validate_flirt_func',
    73: 'ev_adjust_libfunc_ea',
    74: 'ev_assemble',
    75: 'ev_extract_address',
    76: 'ev_realcvt',
    77: 'ev_gen_asm_or_lst',
    78: 'ev_gen_map_file',
    79: 'ev_create_flat_group',
    80: 'ev_getreg',
    81: 'ev_analyze_prolog',
    82: 'ev_calc_spdelta',
    83: 'ev_calcrel',
    84: 'ev_find_reg_value',
    85: 'ev_find_op_value',
    86: 'ev_replaying_undo',
    87: 'ev_ending_undo',
    88: 'ev_set_code16_mode',
    89: 'ev_get_code16_mode',
    90: 'ev_get_procmod',
    91: 'ev_asm_installed',
    92: 'ev_get_reg_accesses',
    93: 'ev_is_control_flow_guard',
    94: 'ev_broadcast',
    95: 'ev_create_merge_handlers',
    96: 'ev_privrange_changed',
    97: 'ev_last_cb_before_debugger',
    1000: 'ev_next_exec_insn',
    1001: 'ev_calc_step_over',
    1002: 'ev_calc_next_eas',
    1003: 'ev_get_macro_insn_head',
    1004: 'ev_get_dbr_opnum',
    1005: 'ev_insn_reads_tbit',
    1006: 'ev_clean_tbit',
    1007: 'ev_get_idd_opinfo',
    1008: 'ev_get_reg_info',
    1010: 'ev_last_cb_before_type_callbacks',
    2000: 'ev_setup_til',
    2001: 'ev_get_abi_info',
    2002: 'ev_max_ptr_size',
    2003: 'ev_get_default_enum_size',
    2004: 'ev_get_cc_regs',
    2005: 'ev_obsolete1',
    2006: 'ev_obsolete2',
    2007: 'ev_get_simd_types',
    2008: 'ev_calc_cdecl_purged_bytes',
    2009: 'ev_calc_purged_bytes',
    2010: 'ev_calc_retloc',
    2011: 'ev_calc_arglocs',
    2012: 'ev_calc_varglocs',
    2013: 'ev_adjust_argloc',
    2014: 'ev_lower_func_type',
    2015: 'ev_equal_reglocs',
    2016: 'ev_use_stkarg_type',
    2017: 'ev_use_regarg_type',
    2018: 'ev_use_arg_types',
    2019: 'ev_arg_addrs_ready',
    2020: 'ev_decorate_name',
    2021: 'ev_arch_changed',
    2022: 'ev_get_stkarg_area_info',
    2023: 'ev_last_cb_before_loader',
    3000: 'ev_loader',
}
ev_init = 0
ev_term = 1
ev_newprc = 2
ev_newasm = 3
ev_newfile = 4
ev_oldfile = 5
ev_newbinary = 6
ev_endbinary = 7
ev_set_idp_options = 8
ev_set_proc_options = 9
ev_ana_insn = 10
ev_emu_insn = 11
ev_out_header = 12
ev_out_footer = 13
ev_out_segstart = 14
ev_out_segend = 15
ev_out_assumes = 16
ev_out_insn = 17
ev_out_mnem = 18
ev_out_operand = 19
ev_out_data = 20
ev_out_label = 21
ev_out_special_item = 22
ev_gen_stkvar_def = 23
ev_gen_regvar_def = 24
ev_gen_src_file_lnnum = 25
ev_creating_segm = 26
ev_moving_segm = 27
ev_coagulate = 28
ev_undefine = 29
ev_treat_hindering_item = 30
ev_rename = 31
ev_is_far_jump = 32
ev_is_sane_insn = 33
ev_is_cond_insn = 34
ev_is_call_insn = 35
ev_is_ret_insn = 36
ev_may_be_func = 37
ev_is_basic_block_end = 38
ev_is_indirect_jump = 39
ev_is_insn_table_jump = 40
ev_is_switch = 41
ev_calc_switch_cases = 42
ev_create_switch_xrefs = 43
ev_is_align_insn = 44
ev_is_alloca_probe = 45
ev_delay_slot_insn = 46
ev_is_sp_based = 47
ev_can_have_type = 48
ev_cmp_operands = 49
ev_adjust_refinfo = 50
ev_get_operand_string = 51
ev_get_reg_name = 52
ev_str2reg = 53
ev_get_autocmt = 54
ev_get_bg_color = 55
ev_is_jump_func = 56
ev_func_bounds = 57
ev_verify_sp = 58
ev_verify_noreturn = 59
ev_create_func_frame = 60
ev_get_frame_retsize = 61
ev_get_stkvar_scale_factor = 62
ev_demangle_name = 63
ev_add_cref = 64
ev_add_dref = 65
ev_del_cref = 66
ev_del_dref = 67
ev_coagulate_dref = 68
ev_may_show_sreg = 69
ev_loader_elf_machine = 70
ev_auto_queue_empty = 71
ev_validate_flirt_func = 72
ev_adjust_libfunc_ea = 73
ev_assemble = 74
ev_extract_address = 75
ev_realcvt = 76
ev_gen_asm_or_lst = 77
ev_gen_map_file = 78
ev_create_flat_group = 79
ev_getreg = 80
ev_analyze_prolog = 81
ev_calc_spdelta = 82
ev_calcrel = 83
ev_find_reg_value = 84
ev_find_op_value = 85
ev_replaying_undo = 86
ev_ending_undo = 87
ev_set_code16_mode = 88
ev_get_code16_mode = 89
ev_get_procmod = 90
ev_asm_installed = 91
ev_get_reg_accesses = 92
ev_is_control_flow_guard = 93
ev_broadcast = 94
ev_create_merge_handlers = 95
ev_privrange_changed = 96
ev_last_cb_before_debugger = 97
ev_next_exec_insn = 1000
ev_calc_step_over = 1001
ev_calc_next_eas = 1002
ev_get_macro_insn_head = 1003
ev_get_dbr_opnum = 1004
ev_insn_reads_tbit = 1005
ev_clean_tbit = 1006
ev_get_idd_opinfo = 1007
ev_get_reg_info = 1008
ev_last_cb_before_type_callbacks = 1010
ev_setup_til = 2000
ev_get_abi_info = 2001
ev_max_ptr_size = 2002
ev_get_default_enum_size = 2003
ev_get_cc_regs = 2004
ev_obsolete1 = 2005
ev_obsolete2 = 2006
ev_get_simd_types = 2007
ev_calc_cdecl_purged_bytes = 2008
ev_calc_purged_bytes = 2009
ev_calc_retloc = 2010
ev_calc_arglocs = 2011
ev_calc_varglocs = 2012
ev_adjust_argloc = 2013
ev_lower_func_type = 2014
ev_equal_reglocs = 2015
ev_use_stkarg_type = 2016
ev_use_regarg_type = 2017
ev_use_arg_types = 2018
ev_arg_addrs_ready = 2019
ev_decorate_name = 2020
ev_arch_changed = 2021
ev_get_stkarg_area_info = 2022
ev_last_cb_before_loader = 2023
ev_loader = 3000
processor_t__event_t = ctypes.c_uint32 # enum
class struct_segment_t(struct_range_t):
    pass

struct_segment_t._pack_ = 1 # source:False
struct_segment_t._fields_ = [
    ('name', ctypes.c_uint64),
    ('sclass', ctypes.c_uint64),
    ('orgbase', ctypes.c_uint64),
    ('align', ctypes.c_ubyte),
    ('comb', ctypes.c_ubyte),
    ('perm', ctypes.c_ubyte),
    ('bitness', ctypes.c_ubyte),
    ('flags', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('sel', ctypes.c_uint64),
    ('defsr', ctypes.c_uint64 * 16),
    ('type', ctypes.c_ubyte),
    ('PADDING_1', ctypes.c_ubyte * 3),
    ('color', ctypes.c_uint32),
]

class struct_outctx_base_t(Structure):
    pass

struct_outctx_base_t._pack_ = 1 # source:False
struct_outctx_base_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_outctx_base_t_vtbl)),
    ('insn_ea', ctypes.c_uint64),
    ('outbuf', qstring),
    ('regname_idx', ctypes.c_int64),
    ('suspop', ctypes.c_int32),
    ('F', ctypes.c_uint32),
    ('outvalues', ctypes.POINTER(ctypes.c_uint64)),
    ('outvalue_getn_flags', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('user_data', ctypes.POINTER(None)),
    ('kern_data', ctypes.POINTER(None)),
    ('lnar', ctypes.POINTER(struct_qvector__qstring_char__)),
    ('lnar_maxsize', ctypes.c_int32),
    ('default_lnnum', ctypes.c_int32),
    ('line_prefix', qstring),
    ('prefix_len', ctypes.c_int64),
    ('ctxflags', ctypes.c_int32),
    ('ind0', ctypes.c_int32),
    ('cmt_ea', ctypes.c_uint64),
    ('cmtbuf', qstring),
    ('cmtptr', ctypes.POINTER(ctypes.c_char)),
    ('cmtcolor', ctypes.c_ubyte),
    ('PADDING_1', ctypes.c_ubyte * 7),
]

class struct_outctx_t(struct_outctx_base_t):
    pass

struct_outctx_t._pack_ = 1 # source:False
struct_outctx_t._fields_ = [
    ('bin_ea', ctypes.c_uint64),
    ('bin_state', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('gl_bpsize', ctypes.c_int32),
    ('bin_width', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('insn', struct_insn_t),
    ('curlabel', qstring),
    ('wif', ctypes.POINTER(struct_printop_t)),
    ('procmod', ctypes.POINTER(struct_procmod_t)),
    ('ph', ctypes.POINTER(struct_processor_t)),
    ('ash', ctypes.POINTER(struct_asm_t)),
    ('saved_immvals', ctypes.c_uint64 * 8),
]

class struct_member_t(Structure):
    pass

struct_member_t._pack_ = 1 # source:False
struct_member_t._fields_ = [
    ('id', ctypes.c_uint64),
    ('soff', ctypes.c_uint64),
    ('eoff', ctypes.c_uint64),
    ('flag', ctypes.c_uint32),
    ('props', ctypes.c_uint32),
]

class struct_llabel_t(Structure):
    pass

class struct__65BAA48EEE7310C500857B0EADEF1038(Structure):
    pass

class struct_stkpnt_t(Structure):
    pass

class struct_regarg_t(Structure):
    pass

class struct_regvar_t(Structure):
    pass

struct__65BAA48EEE7310C500857B0EADEF1038._pack_ = 1 # source:False
struct__65BAA48EEE7310C500857B0EADEF1038._fields_ = [
    ('frame', ctypes.c_uint64),
    ('frsize', ctypes.c_uint64),
    ('frregs', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 6),
    ('argsize', ctypes.c_uint64),
    ('fpd', ctypes.c_uint64),
    ('color', ctypes.c_uint32),
    ('pntqty', ctypes.c_uint32),
    ('points', ctypes.POINTER(struct_stkpnt_t)),
    ('regvarqty', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('regvars', ctypes.POINTER(struct_regvar_t)),
    ('llabelqty', ctypes.c_int32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('llabels', ctypes.POINTER(struct_llabel_t)),
    ('regargqty', ctypes.c_int32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('regargs', ctypes.POINTER(struct_regarg_t)),
    ('tailqty', ctypes.c_int32),
    ('PADDING_4', ctypes.c_ubyte * 4),
    ('tails', ctypes.POINTER(struct_range_t)),
]

class struct__87937D864C1217F0C6EDE3E399C97469(Structure):
    pass

struct__87937D864C1217F0C6EDE3E399C97469._pack_ = 1 # source:False
struct__87937D864C1217F0C6EDE3E399C97469._fields_ = [
    ('owner', ctypes.c_uint64),
    ('refqty', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('referers', ctypes.POINTER(ctypes.c_uint64)),
]

class union_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC(Union):
    pass

class struct_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC_1(Structure):
    pass

struct_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC_1._pack_ = 1 # source:False
struct_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC_1._fields_ = [
    ('owner', ctypes.c_uint64),
    ('refqty', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('referers', ctypes.POINTER(ctypes.c_uint64)),
]

class struct_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC_0(Structure):
    pass

struct_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC_0._pack_ = 1 # source:False
struct_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC_0._fields_ = [
    ('frame', ctypes.c_uint64),
    ('frsize', ctypes.c_uint64),
    ('frregs', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 6),
    ('argsize', ctypes.c_uint64),
    ('fpd', ctypes.c_uint64),
    ('color', ctypes.c_uint32),
    ('pntqty', ctypes.c_uint32),
    ('points', ctypes.POINTER(struct_stkpnt_t)),
    ('regvarqty', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('regvars', ctypes.POINTER(struct_regvar_t)),
    ('llabelqty', ctypes.c_int32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('llabels', ctypes.POINTER(struct_llabel_t)),
    ('regargqty', ctypes.c_int32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('regargs', ctypes.POINTER(struct_regarg_t)),
    ('tailqty', ctypes.c_int32),
    ('PADDING_4', ctypes.c_ubyte * 4),
    ('tails', ctypes.POINTER(struct_range_t)),
]

union_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC._pack_ = 1 # source:False
union_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC._anonymous_ = ('_0', '_1',)
union_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC._fields_ = [
    ('_0', struct_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC_0),
    ('_1', struct_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC_1),
    ('PADDING_0', ctypes.c_ubyte * 96),
]

class struct_func_t(struct_range_t):
    pass

class union_func_t_0(Union):
    pass

class struct_func_t_0_1(Structure):
    pass

struct_func_t_0_1._pack_ = 1 # source:False
struct_func_t_0_1._fields_ = [
    ('owner', ctypes.c_uint64),
    ('refqty', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('referers', ctypes.POINTER(ctypes.c_uint64)),
]

class struct_func_t_0_0(Structure):
    pass

struct_func_t_0_0._pack_ = 1 # source:False
struct_func_t_0_0._fields_ = [
    ('frame', ctypes.c_uint64),
    ('frsize', ctypes.c_uint64),
    ('frregs', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 6),
    ('argsize', ctypes.c_uint64),
    ('fpd', ctypes.c_uint64),
    ('color', ctypes.c_uint32),
    ('pntqty', ctypes.c_uint32),
    ('points', ctypes.POINTER(struct_stkpnt_t)),
    ('regvarqty', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('regvars', ctypes.POINTER(struct_regvar_t)),
    ('llabelqty', ctypes.c_int32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('llabels', ctypes.POINTER(struct_llabel_t)),
    ('regargqty', ctypes.c_int32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('regargs', ctypes.POINTER(struct_regarg_t)),
    ('tailqty', ctypes.c_int32),
    ('PADDING_4', ctypes.c_ubyte * 4),
    ('tails', ctypes.POINTER(struct_range_t)),
]

union_func_t_0._pack_ = 1 # source:False
union_func_t_0._anonymous_ = ('_0', '_1',)
union_func_t_0._fields_ = [
    ('_0', struct_func_t_0_0),
    ('_1', struct_func_t_0_1),
    ('PADDING_0', ctypes.c_ubyte * 96),
]

struct_func_t._pack_ = 1 # source:False
struct_func_t._anonymous_ = ('_0',)
struct_func_t._fields_ = [
    ('flags', ctypes.c_uint64),
    ('_0', union_func_t_0),
]

class struct_event_listener_t(Structure):
    pass

struct_event_listener_t._pack_ = 1 # source:False
struct_event_listener_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_event_listener_t_vtbl)),
    ('listener_flags', ctypes.c_uint64),
]

class struct_ignore_micro_t(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('ignore_micro', struct_netnode),
     ]

help_t = ctypes.c_int32
class struct_proc_def_t(Structure):
    pass

class struct_elf_loader_t(Structure):
    pass

class struct_reader_t(Structure):
    pass

class struct_qvector_reg_access_t_(Structure):
    pass

class struct_reg_access_t(Structure):
    pass

struct_qvector_reg_access_t_._pack_ = 1 # source:False
struct_qvector_reg_access_t_._fields_ = [
    ('array', ctypes.POINTER(struct_reg_access_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

reg_access_vec_t = struct_qvector_reg_access_t_
class struct_reg_accesses_t(struct_qvector_reg_access_t_):
    pass


# values for enumeration 'access_type_t'
access_type_t__enumvalues = {
    0: 'NO_ACCESS',
    1: 'WRITE_ACCESS',
    2: 'READ_ACCESS',
    3: 'RW_ACCESS',
}
NO_ACCESS = 0
WRITE_ACCESS = 1
READ_ACCESS = 2
RW_ACCESS = 3
access_type_t = ctypes.c_uint8 # enum
qvector_reg_access_t___iterator = ctypes.POINTER(struct_reg_access_t)
qvector_reg_access_t___const_iterator = ctypes.POINTER(struct_reg_access_t)

# values for enumeration 'cref_t'
cref_t__enumvalues = {
    0: 'fl_U',
    16: 'fl_CF',
    17: 'fl_CN',
    18: 'fl_JF',
    19: 'fl_JN',
    20: 'fl_USobsolete',
    21: 'fl_F',
}
fl_U = 0
fl_CF = 16
fl_CN = 17
fl_JF = 18
fl_JN = 19
fl_USobsolete = 20
fl_F = 21
cref_t = ctypes.c_uint32 # enum

# values for enumeration 'dref_t'
dref_t__enumvalues = {
    0: 'dr_U',
    1: 'dr_O',
    2: 'dr_W',
    3: 'dr_R',
    4: 'dr_T',
    5: 'dr_I',
    6: 'dr_S',
}
dr_U = 0
dr_O = 1
dr_W = 2
dr_R = 3
dr_T = 4
dr_I = 5
dr_S = 6
dref_t = ctypes.c_uint32 # enum
class struct_idasgn_t(Structure):
    pass

class struct_libfunc_t(Structure):
    pass


# values for enumeration 'fpvalue_error_t'
fpvalue_error_t__enumvalues = {
    0: 'REAL_ERROR_OK',
    4294967295: 'REAL_ERROR_FORMAT',
    4294967294: 'REAL_ERROR_RANGE',
    4294967293: 'REAL_ERROR_BADDATA',
    1: 'REAL_ERROR_FPOVER',
    2: 'REAL_ERROR_BADSTR',
    3: 'REAL_ERROR_ZERODIV',
    4: 'REAL_ERROR_INTOVER',
}
REAL_ERROR_OK = 0
REAL_ERROR_FORMAT = 4294967295
REAL_ERROR_RANGE = 4294967294
REAL_ERROR_BADDATA = 4294967293
REAL_ERROR_FPOVER = 1
REAL_ERROR_BADSTR = 2
REAL_ERROR_ZERODIV = 3
REAL_ERROR_INTOVER = 4
fpvalue_error_t = ctypes.c_uint32 # enum
class struct_fpvalue_t(Structure):
    pass

struct_fpvalue_t._pack_ = 1 # source:False
struct_fpvalue_t._fields_ = [
    ('w', ctypes.c_uint16 * 6),
]


# values for enumeration 'fpvalue_kind_t'
fpvalue_kind_t__enumvalues = {
    0: 'FPV_BADARG',
    1: 'FPV_NORM',
    2: 'FPV_NAN',
    3: 'FPV_PINF',
    4: 'FPV_NINF',
}
FPV_BADARG = 0
FPV_NORM = 1
FPV_NAN = 2
FPV_PINF = 3
FPV_NINF = 4
fpvalue_kind_t = ctypes.c_uint32 # enum
fixup_type_t = ctypes.c_uint16
class struct_fixup_data_t(Structure):
    pass

struct_fixup_data_t._pack_ = 1 # source:False
struct_fixup_data_t._fields_ = [
    ('type', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('flags', ctypes.c_uint32),
    ('base', ctypes.c_uint64),
    ('sel', ctypes.c_uint64),
    ('off', ctypes.c_uint64),
    ('displacement', ctypes.c_int64),
]

class struct_fixup_handler_t(Structure):
    pass

struct_fixup_handler_t._pack_ = 1 # source:False
struct_fixup_handler_t._fields_ = [
    ('cbsize', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('props', ctypes.c_uint32),
    ('size', ctypes.c_ubyte),
    ('width', ctypes.c_ubyte),
    ('shift', ctypes.c_ubyte),
    ('rsrv4', ctypes.c_ubyte),
    ('reftype', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('apply', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_fixup_handler_t), ctypes.c_uint64, ctypes.c_uint64, ctypes.c_int32, ctypes.c_char, ctypes.POINTER(struct_fixup_data_t))),
    ('get_value', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_fixup_handler_t), ctypes.c_uint64)),
    ('patch_value', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_fixup_handler_t), ctypes.c_uint64, ctypes.POINTER(struct_fixup_data_t))),
]

class union_regval_t___EEAEB4CADE21DABB4BB43158C5D5B2F9(Union):
    pass

union_regval_t___EEAEB4CADE21DABB4BB43158C5D5B2F9._pack_ = 1 # source:False
union_regval_t___EEAEB4CADE21DABB4BB43158C5D5B2F9._fields_ = [
    ('ival', ctypes.c_uint64),
    ('fval', struct_fpvalue_t),
    ('reserve', ctypes.c_ubyte * 24),
]

class struct_regval_t(Structure):
    pass

class union_regval_t_0(Union):
    pass

union_regval_t_0._pack_ = 1 # source:False
union_regval_t_0._fields_ = [
    ('ival', ctypes.c_uint64),
    ('fval', struct_fpvalue_t),
    ('reserve', ctypes.c_ubyte * 24),
]

struct_regval_t._pack_ = 1 # source:False
struct_regval_t._anonymous_ = ('_0',)
struct_regval_t._fields_ = [
    ('rvtype', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('_0', union_regval_t_0),
]

class struct_idd_opinfo_t(Structure):
    pass

struct_idd_opinfo_t._pack_ = 1 # source:False
struct_idd_opinfo_t._fields_ = [
    ('modified', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
    ('ea', ctypes.c_uint64),
    ('value', struct_regval_t),
    ('debregidx', ctypes.c_int32),
    ('value_size', ctypes.c_int32),
]

class struct_qvector_call_stack_info_t_(Structure):
    pass

class struct_call_stack_info_t(Structure):
    pass

struct_qvector_call_stack_info_t_._pack_ = 1 # source:False
struct_qvector_call_stack_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_call_stack_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

class struct_call_stack_t(struct_qvector_call_stack_info_t_):
    pass

qvector_call_stack_info_t___iterator = ctypes.POINTER(struct_call_stack_info_t)
qvector_call_stack_info_t___const_iterator = ctypes.POINTER(struct_call_stack_info_t)
argloc_type_t = ctypes.c_int32
argloc_t__biggest_t = ctypes.c_uint64
class union_argloc_t___6BE26F2DC3BD49B7B415E512C333AEE4(Union):
    pass

class struct_scattered_aloc_t(Structure):
    pass

class struct_rrel_t(Structure):
    pass

union_argloc_t___6BE26F2DC3BD49B7B415E512C333AEE4._pack_ = 1 # source:False
union_argloc_t___6BE26F2DC3BD49B7B415E512C333AEE4._fields_ = [
    ('sval', ctypes.c_int64),
    ('reginfo', ctypes.c_uint32),
    ('rrel', ctypes.POINTER(struct_rrel_t)),
    ('dist', ctypes.POINTER(struct_scattered_aloc_t)),
    ('custom', ctypes.POINTER(None)),
    ('biggest', ctypes.c_uint64),
]

class struct_argloc_t(Structure):
    pass

class union_argloc_t_0(Union):
    pass

union_argloc_t_0._pack_ = 1 # source:False
union_argloc_t_0._fields_ = [
    ('sval', ctypes.c_int64),
    ('reginfo', ctypes.c_uint32),
    ('rrel', ctypes.POINTER(struct_rrel_t)),
    ('dist', ctypes.POINTER(struct_scattered_aloc_t)),
    ('custom', ctypes.POINTER(None)),
    ('biggest', ctypes.c_uint64),
]

struct_argloc_t._pack_ = 1 # source:False
struct_argloc_t._anonymous_ = ('_0',)
struct_argloc_t._fields_ = [
    ('type', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('_0', union_argloc_t_0),
]

class struct_qvector_argpart_t_(Structure):
    pass

class struct_argpart_t(Structure):
    pass

struct_qvector_argpart_t_._pack_ = 1 # source:False
struct_qvector_argpart_t_._fields_ = [
    ('array', ctypes.POINTER(struct_argpart_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

argpartvec_t = struct_qvector_argpart_t_
qvector_argpart_t___iterator = ctypes.POINTER(struct_argpart_t)
qvector_argpart_t___const_iterator = ctypes.POINTER(struct_argpart_t)
class struct_qvector_funcarg_t_(Structure):
    pass

class struct_funcarg_t(Structure):
    pass

struct_qvector_funcarg_t_._pack_ = 1 # source:False
struct_qvector_funcarg_t_._fields_ = [
    ('array', ctypes.POINTER(struct_funcarg_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

funcargvec_t = struct_qvector_funcarg_t_
class struct_qvector_reg_info_t_(Structure):
    pass

class struct_reg_info_t(Structure):
    pass

struct_qvector_reg_info_t_._pack_ = 1 # source:False
struct_qvector_reg_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_reg_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

reginfovec_t = struct_qvector_reg_info_t_
class struct_func_type_data_t(struct_qvector_funcarg_t_):
    pass

struct_func_type_data_t._pack_ = 1 # source:False
struct_func_type_data_t._fields_ = [
    ('flags', ctypes.c_int32),
    ('rettype', struct_tinfo_t),
    ('retloc', struct_argloc_t),
    ('stkargs', ctypes.c_uint64),
    ('spoiled', reginfovec_t),
    ('cc', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

qvector_funcarg_t___iterator = ctypes.POINTER(struct_funcarg_t)
qvector_funcarg_t___const_iterator = ctypes.POINTER(struct_funcarg_t)
qvector_reg_info_t___iterator = ctypes.POINTER(struct_reg_info_t)
qvector_reg_info_t___const_iterator = ctypes.POINTER(struct_reg_info_t)
class struct_qvector_regobj_t_(Structure):
    pass

class struct_regobj_t(Structure):
    pass

struct_qvector_regobj_t_._pack_ = 1 # source:False
struct_qvector_regobj_t_._fields_ = [
    ('array', ctypes.POINTER(struct_regobj_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

regobjvec_t = struct_qvector_regobj_t_
class struct_regobjs_t(struct_qvector_regobj_t_):
    pass

qvector_regobj_t___iterator = ctypes.POINTER(struct_regobj_t)
qvector_regobj_t___const_iterator = ctypes.POINTER(struct_regobj_t)
class struct_stkarg_area_info_t(Structure):
    pass

struct_stkarg_area_info_t._pack_ = 1 # source:False
struct_stkarg_area_info_t._fields_ = [
    ('cb', ctypes.c_uint64),
    ('stkarg_offset', ctypes.c_int64),
    ('shadow_size', ctypes.c_int64),
    ('linkage_area', ctypes.c_int64),
]


# values for enumeration 'argreg_policy_t'
argreg_policy_t__enumvalues = {
    0: 'ARGREGS_POLICY_UNDEFINED',
    1: 'ARGREGS_GP_ONLY',
    2: 'ARGREGS_INDEPENDENT',
    3: 'ARGREGS_BY_SLOTS',
    4: 'ARGREGS_FP_CONSUME_GP',
    5: 'ARGREGS_MIPS_O32',
}
ARGREGS_POLICY_UNDEFINED = 0
ARGREGS_GP_ONLY = 1
ARGREGS_INDEPENDENT = 2
ARGREGS_BY_SLOTS = 3
ARGREGS_FP_CONSUME_GP = 4
ARGREGS_MIPS_O32 = 5
argreg_policy_t = ctypes.c_uint32 # enum
class struct_callregs_t(Structure):
    pass

struct_callregs_t._pack_ = 1 # source:False
struct_callregs_t._fields_ = [
    ('policy', argreg_policy_t),
    ('nregs', ctypes.c_int32),
    ('gpregs', intvec_t),
    ('fpregs', intvec_t),
]

class struct_simd_info_t(Structure):
    pass

struct_simd_info_t._pack_ = 1 # source:False
struct_simd_info_t._fields_ = [
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('tif', struct_tinfo_t),
    ('size', ctypes.c_uint16),
    ('memtype', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte),
]

class struct_merge_data_t(Structure):
    pass

class struct_encoder_t(Structure):
    pass

struct_encoder_t._pack_ = 1 # source:False
struct_encoder_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_encoder_t_vtbl)),
]


# values for enumeration 'encoder_t__notify_recerr_t'
encoder_t__notify_recerr_t__enumvalues = {
    0: 'nr_none',
    1: 'nr_once',
}
nr_none = 0
nr_once = 1
encoder_t__notify_recerr_t = ctypes.c_uint32 # enum
_FFE4F2BE2353311DBA8192D1D977A912 = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__iobuf))
_F5551018EF9FF3302B1F558B75822FB9 = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__iobuf), ctypes.POINTER(struct__qstring_char_), ctypes.c_uint32, ctypes.c_uint32)
enum_t = ctypes.c_uint64
_1E3911DAF3A698F9E9678E651B612671 = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.c_uint32, ctypes.POINTER(None))
_D65593A1337DD8579B558648E0CA47AC = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.c_uint64)
class struct_data_type_t(Structure):
    pass

struct_data_type_t._pack_ = 1 # source:False
struct_data_type_t._fields_ = [
    ('cbsize', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ud', ctypes.POINTER(None)),
    ('props', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('menu_name', ctypes.POINTER(ctypes.c_char)),
    ('hotkey', ctypes.POINTER(ctypes.c_char)),
    ('asm_keyword', ctypes.POINTER(ctypes.c_char)),
    ('value_size', ctypes.c_uint64),
    ('may_create_at', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_uint64)),
    ('calc_item_size', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_uint64)),
]

class struct_data_format_t(Structure):
    pass

struct_data_format_t._pack_ = 1 # source:False
struct_data_format_t._fields_ = [
    ('cbsize', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ud', ctypes.POINTER(None)),
    ('props', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('menu_name', ctypes.POINTER(ctypes.c_char)),
    ('hotkey', ctypes.POINTER(ctypes.c_char)),
    ('value_size', ctypes.c_uint64),
    ('text_width', ctypes.c_int32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('print', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(None), ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_uint64, ctypes.c_int32, ctypes.c_int32)),
    ('scan', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(None), ctypes.POINTER(struct_bytevec_t), ctypes.POINTER(ctypes.c_char), ctypes.c_uint64, ctypes.c_int32, ctypes.POINTER(struct__qstring_char_))),
    ('analyze', ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_int32)),
]

class struct_compiled_binpat_t(Structure):
    pass

struct_compiled_binpat_t._pack_ = 1 # source:False
struct_compiled_binpat_t._fields_ = [
    ('bytes', struct_bytevec_t),
    ('mask', struct_bytevec_t),
    ('strlits', struct_rangevec_t),
    ('encidx', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_ida_movable_type_compiled_binpat_t_(Structure):
    pass

class struct_qvector_compiled_binpat_t_(Structure):
    pass

struct_qvector_compiled_binpat_t_._pack_ = 1 # source:False
struct_qvector_compiled_binpat_t_._fields_ = [
    ('array', ctypes.POINTER(struct_compiled_binpat_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_compiled_binpat_t___iterator = ctypes.POINTER(struct_compiled_binpat_t)
qvector_compiled_binpat_t___const_iterator = ctypes.POINTER(struct_compiled_binpat_t)
compiled_binpat_vec_t = struct_qvector_compiled_binpat_t_
class struct_hidden_range_t(struct_range_t):
    pass

struct_hidden_range_t._pack_ = 1 # source:False
struct_hidden_range_t._fields_ = [
    ('description', ctypes.POINTER(ctypes.c_char)),
    ('header', ctypes.POINTER(ctypes.c_char)),
    ('footer', ctypes.POINTER(ctypes.c_char)),
    ('visible', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('color', ctypes.c_uint32),
]

class struct_file_enumerator_t(Structure):
    pass

struct_file_enumerator_t._pack_ = 1 # source:False
struct_file_enumerator_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_file_enumerator_t_vtbl)),
]

class struct_ioport_bit_t(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('name', qstring),
    ('cmt', qstring),
     ]

class struct_ida_movable_type_ioport_bit_t_(Structure):
    pass

class struct_qvector_ioport_bit_t_(Structure):
    pass

struct_qvector_ioport_bit_t_._pack_ = 1 # source:False
struct_qvector_ioport_bit_t_._fields_ = [
    ('array', ctypes.POINTER(struct_ioport_bit_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_ioport_bit_t___iterator = ctypes.POINTER(struct_ioport_bit_t)
qvector_ioport_bit_t___const_iterator = ctypes.POINTER(struct_ioport_bit_t)
ioport_bits_t = struct_qvector_ioport_bit_t_
class struct_ioport_t(Structure):
    pass

struct_ioport_t._pack_ = 1 # source:False
struct_ioport_t._fields_ = [
    ('address', ctypes.c_uint64),
    ('name', qstring),
    ('cmt', qstring),
    ('bits', ioport_bits_t),
    ('userdata', ctypes.POINTER(None)),
]

class struct_ida_movable_type_ioport_t_(Structure):
    pass

class struct_qvector_ioport_t_(Structure):
    pass

struct_qvector_ioport_t_._pack_ = 1 # source:False
struct_qvector_ioport_t_._fields_ = [
    ('array', ctypes.POINTER(struct_ioport_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_ioport_t___iterator = ctypes.POINTER(struct_ioport_t)
qvector_ioport_t___const_iterator = ctypes.POINTER(struct_ioport_t)
ioports_t = struct_qvector_ioport_t_
class struct_ioports_fallback_t(Structure):
    pass

struct_ioports_fallback_t._pack_ = 1 # source:False
struct_ioports_fallback_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_ioports_fallback_t_vtbl)),
]

class struct_choose_ioport_parser_t(Structure):
    pass

struct_choose_ioport_parser_t._pack_ = 1 # source:False
struct_choose_ioport_parser_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_choose_ioport_parser_t_vtbl)),
]


# values for enumeration 'linput_type_t'
linput_type_t__enumvalues = {
    0: 'LINPUT_NONE',
    1: 'LINPUT_LOCAL',
    2: 'LINPUT_RFILE',
    3: 'LINPUT_PROCMEM',
    4: 'LINPUT_GENERIC',
}
LINPUT_NONE = 0
LINPUT_LOCAL = 1
LINPUT_RFILE = 2
LINPUT_PROCMEM = 3
LINPUT_GENERIC = 4
linput_type_t = ctypes.c_uint32 # enum
class struct_generic_linput_t(Structure):
    pass

struct_generic_linput_t._pack_ = 1 # source:False
struct_generic_linput_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_generic_linput_t_vtbl)),
    ('filesize', ctypes.c_uint64),
    ('blocksize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_janitor_t_linput_t__P_(Structure):
    pass

struct_janitor_t_linput_t__P_._pack_ = 1 # source:False
struct_janitor_t_linput_t__P_._fields_ = [
    ('resource', ctypes.POINTER(ctypes.POINTER(struct_linput_t))),
]

linput_janitor_t = struct_janitor_t_linput_t__P_
class struct_linput_buffer_t(Structure):
    pass

struct_linput_buffer_t._pack_ = 1 # source:False
struct_linput_buffer_t._fields_ = [
    ('li', ctypes.POINTER(struct_linput_t)),
    ('lsize', ctypes.c_int64),
]


# values for enumeration 'linput_close_code_t'
linput_close_code_t__enumvalues = {
    0: 'LOC_CLOSE',
    1: 'LOC_UNMAKE',
    2: 'LOC_KEEP',
}
LOC_CLOSE = 0
LOC_UNMAKE = 1
LOC_KEEP = 2
linput_close_code_t = ctypes.c_uint32 # enum
_C9E14A82B8291B557AC92E2F5A452CE5 = ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.c_int32, ctypes.POINTER(None), ctypes.c_char)
class struct_lexer_t(Structure):
    pass

lxtype = ctypes.c_uint16
class union_token_t___8299423771E115C2E8FEC5C7170C0424(Union):
    pass

union_token_t___8299423771E115C2E8FEC5C7170C0424._pack_ = 1 # source:False
union_token_t___8299423771E115C2E8FEC5C7170C0424._fields_ = [
    ('unicode', ctypes.c_char),
    ('is_unsigned', ctypes.c_char),
]

class union_token_t___3D5BEF5E36E80DC11FFAA595727647C4(Union):
    pass

union_token_t___3D5BEF5E36E80DC11FFAA595727647C4._pack_ = 1 # source:False
union_token_t___3D5BEF5E36E80DC11FFAA595727647C4._fields_ = [
    ('fnum', struct_fpvalue_t),
    ('i64', ctypes.c_int64),
    ('PADDING_0', ctypes.c_ubyte * 8),
]

class struct_token_t(Structure):
    pass

class union_token_t_1(Union):
    pass

union_token_t_1._pack_ = 1 # source:False
union_token_t_1._fields_ = [
    ('fnum', struct_fpvalue_t),
    ('i64', ctypes.c_int64),
    ('PADDING_0', ctypes.c_ubyte * 8),
]

class union_token_t_0(Union):
    pass

union_token_t_0._pack_ = 1 # source:False
union_token_t_0._fields_ = [
    ('unicode', ctypes.c_char),
    ('is_unsigned', ctypes.c_char),
]

struct_token_t._pack_ = 1 # source:False
struct_token_t._anonymous_ = ('_0', '_1',)
struct_token_t._fields_ = [
    ('str', qstring),
    ('type', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 6),
    ('num', ctypes.c_int64),
    ('_0', union_token_t_0),
    ('PADDING_1', ctypes.c_ubyte * 7),
    ('_1', union_token_t_1),
]

class struct_idc_object_t(Structure):
    pass

class union_idc_value_t___B5D45BAF0C91A61557C5F5ABF5FB1D44(Union):
    pass

union_idc_value_t___B5D45BAF0C91A61557C5F5ABF5FB1D44._pack_ = 1 # source:False
union_idc_value_t___B5D45BAF0C91A61557C5F5ABF5FB1D44._fields_ = [
    ('num', ctypes.c_int64),
    ('e', struct_fpvalue_t),
    ('obj', ctypes.POINTER(struct_idc_object_t)),
    ('funcidx', ctypes.c_int32),
    ('pvoid', ctypes.POINTER(None)),
    ('i64', ctypes.c_int64),
    ('reserve', ctypes.c_ubyte * 24),
]

class struct_idc_value_t(Structure):
    pass

class union_idc_value_t_0(Union):
    pass

union_idc_value_t_0._pack_ = 1 # source:False
union_idc_value_t_0._fields_ = [
    ('num', ctypes.c_int64),
    ('e', struct_fpvalue_t),
    ('obj', ctypes.POINTER(struct_idc_object_t)),
    ('funcidx', ctypes.c_int32),
    ('pvoid', ctypes.POINTER(None)),
    ('i64', ctypes.c_int64),
    ('reserve', ctypes.c_ubyte * 24),
]

struct_idc_value_t._pack_ = 1 # source:False
struct_idc_value_t._anonymous_ = ('_0',)
struct_idc_value_t._fields_ = [
    ('vtype', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
    ('_0', union_idc_value_t_0),
]

_EF63A35B22AA948F6F3465FEB80D5317 = ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t))
_DA0AE4BD8D2DD7986E2E969647424E53 = ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t), ctypes.c_int64, ctypes.c_int64)
_5D571C3E1F56A75D00027C63749DCB4C = ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t), ctypes.c_int64, ctypes.c_int64, ctypes.POINTER(None))
class union_cfgopt_t___E63BAB3383D3A85693CC29A7ABAAB8B7(Union):
    pass

union_cfgopt_t___E63BAB3383D3A85693CC29A7ABAAB8B7._pack_ = 1 # source:False
union_cfgopt_t___E63BAB3383D3A85693CC29A7ABAAB8B7._fields_ = [
    ('ptr', ctypes.POINTER(None)),
    ('mbroff', ctypes.c_uint64),
    ('hnd', ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t))),
    ('hnd2', ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t), ctypes.c_int64, ctypes.c_int64)),
    ('hnd3', ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t), ctypes.c_int64, ctypes.c_int64, ctypes.POINTER(None))),
]

class struct_cfgopt_t__num_range_t(Structure):
    pass

struct_cfgopt_t__num_range_t._pack_ = 1 # source:False
struct_cfgopt_t__num_range_t._fields_ = [
    ('minval', ctypes.c_int64),
    ('maxval', ctypes.c_int64),
]

class struct_cfgopt_t__params_t(Structure):
    pass

struct_cfgopt_t__params_t._pack_ = 1 # source:False
struct_cfgopt_t__params_t._fields_ = [
    ('p1', ctypes.c_int64),
    ('p2', ctypes.c_int64),
]

class union_cfgopt_t___520FE22CA735B42199839BFA51A95DC1(Union):
    pass

union_cfgopt_t___520FE22CA735B42199839BFA51A95DC1._pack_ = 1 # source:False
union_cfgopt_t___520FE22CA735B42199839BFA51A95DC1._fields_ = [
    ('buf_size', ctypes.c_uint64),
    ('num_range', struct_cfgopt_t__num_range_t),
    ('bit_flags', ctypes.c_uint32),
    ('params', struct_cfgopt_t__params_t),
    ('mbroff_obj', ctypes.POINTER(None)),
    ('PADDING_0', ctypes.c_ubyte * 8),
]

class struct_cfgopt_t(Structure):
    pass

class union_cfgopt_t_1(Union):
    pass

union_cfgopt_t_1._pack_ = 1 # source:False
union_cfgopt_t_1._fields_ = [
    ('buf_size', ctypes.c_uint64),
    ('num_range', struct_cfgopt_t__num_range_t),
    ('bit_flags', ctypes.c_uint32),
    ('params', struct_cfgopt_t__params_t),
    ('mbroff_obj', ctypes.POINTER(None)),
    ('PADDING_0', ctypes.c_ubyte * 8),
]

class union_cfgopt_t_0(Union):
    pass

union_cfgopt_t_0._pack_ = 1 # source:False
union_cfgopt_t_0._fields_ = [
    ('ptr', ctypes.POINTER(None)),
    ('mbroff', ctypes.c_uint64),
    ('hnd', ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t))),
    ('hnd2', ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t), ctypes.c_int64, ctypes.c_int64)),
    ('hnd3', ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t), ctypes.c_int64, ctypes.c_int64, ctypes.POINTER(None))),
]

struct_cfgopt_t._pack_ = 1 # source:False
struct_cfgopt_t._anonymous_ = ('_0', '_1',)
struct_cfgopt_t._fields_ = [
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('_0', union_cfgopt_t_0),
    ('flags', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('_1', union_cfgopt_t_1),
]

_620535340E4C71C89198F40493D5015B = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_cfgopt_t), ctypes.c_int32, ctypes.POINTER(None))
class struct_cfgopt_set_t(Structure):
    pass

struct_cfgopt_set_t._pack_ = 1 # source:False
struct_cfgopt_set_t._fields_ = [
    ('opts', ctypes.POINTER(struct_cfgopt_t)),
    ('nopts', ctypes.c_uint64),
    ('cb', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_cfgopt_t), ctypes.c_int32, ctypes.POINTER(None))),
    ('obj', ctypes.POINTER(None)),
]

class struct_qvector_cfgopt_set_t_(Structure):
    pass

struct_qvector_cfgopt_set_t_._pack_ = 1 # source:False
struct_qvector_cfgopt_set_t_._fields_ = [
    ('array', ctypes.POINTER(struct_cfgopt_set_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

class struct_cfgopt_set_vec_t(struct_qvector_cfgopt_set_t_):
    pass

qvector_cfgopt_set_t___iterator = ctypes.POINTER(struct_cfgopt_set_t)
qvector_cfgopt_set_t___const_iterator = ctypes.POINTER(struct_cfgopt_set_t)

# values for enumeration '_A32948CF266C727D9CC1D79F2B35CC28'
_A32948CF266C727D9CC1D79F2B35CC28__enumvalues = {
    1: 'QMOVE_CROSS_FS',
    2: 'QMOVE_OVERWRITE',
    4: 'QMOVE_OVR_RO',
}
QMOVE_CROSS_FS = 1
QMOVE_OVERWRITE = 2
QMOVE_OVR_RO = 4
_A32948CF266C727D9CC1D79F2B35CC28 = ctypes.c_uint32 # enum
class struct_janitor_t__iobuf__P_(Structure):
    pass

struct_janitor_t__iobuf__P_._pack_ = 1 # source:False
struct_janitor_t__iobuf__P_._fields_ = [
    ('resource', ctypes.POINTER(ctypes.POINTER(struct__iobuf))),
]

file_janitor_t = struct_janitor_t__iobuf__P_
eNI = ctypes.c_uint16 * 9
class struct_lock_segment(Structure):
    pass

struct_lock_segment._pack_ = 1 # source:False
struct_lock_segment._fields_ = [
    ('segm', ctypes.POINTER(struct_segment_t)),
]

class struct_ida_movable_type_regarg_t_(Structure):
    pass

class struct_ida_movable_type_func_t_(Structure):
    pass

class struct_lock_func(Structure):
    pass

struct_lock_func._pack_ = 1 # source:False
struct_lock_func._fields_ = [
    ('pfn', ctypes.POINTER(struct_func_t)),
]

class struct_func_parent_iterator_t(Structure):
    pass

struct_func_parent_iterator_t._pack_ = 1 # source:False
struct_func_parent_iterator_t._fields_ = [
    ('fnt', ctypes.POINTER(struct_func_t)),
    ('idx', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_func_tail_iterator_t(Structure):
    pass

struct_func_tail_iterator_t._pack_ = 1 # source:False
struct_func_tail_iterator_t._fields_ = [
    ('pfn', ctypes.POINTER(struct_func_t)),
    ('idx', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('seglim', struct_range_t),
]

class struct_func_item_iterator_t(Structure):
    pass

struct_func_item_iterator_t._pack_ = 1 # source:False
struct_func_item_iterator_t._fields_ = [
    ('fti', struct_func_tail_iterator_t),
    ('ea', ctypes.c_uint64),
]

bmask_t = ctypes.c_uint64
class struct_location_t(Structure):
    pass

class struct_graph_location_info_t(Structure):
    pass

struct_graph_location_info_t._pack_ = 1 # source:False
struct_graph_location_info_t._fields_ = [
    ('zoom', ctypes.c_double),
    ('orgx', ctypes.c_double),
    ('orgy', ctypes.c_double),
]

class struct_renderer_info_pos_t(Structure):
    pass

struct_renderer_info_pos_t._pack_ = 1 # source:False
struct_renderer_info_pos_t._fields_ = [
    ('node', ctypes.c_int32),
    ('cx', ctypes.c_int16),
    ('cy', ctypes.c_int16),
]

renderer_info_t__pos_t = struct_renderer_info_pos_t

# values for enumeration 'tcc_renderer_type_t'
tcc_renderer_type_t__enumvalues = {
    0: 'TCCRT_INVALID',
    1: 'TCCRT_FLAT',
    2: 'TCCRT_GRAPH',
    3: 'TCCRT_PROXIMITY',
}
TCCRT_INVALID = 0
TCCRT_FLAT = 1
TCCRT_GRAPH = 2
TCCRT_PROXIMITY = 3
tcc_renderer_type_t = ctypes.c_uint32 # enum
class struct_renderer_info_t(Structure):
    pass

struct_renderer_info_t._pack_ = 1 # source:False
struct_renderer_info_t._fields_ = [
    ('gli', struct_graph_location_info_t),
    ('pos', renderer_info_t__pos_t),
    ('rtype', tcc_renderer_type_t),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_lochist_entry_t(Structure):
    pass

class struct_place_t(Structure):
    pass

struct_lochist_entry_t._pack_ = 1 # source:False
struct_lochist_entry_t._fields_ = [
    ('rinfo', struct_renderer_info_t),
    ('plce', ctypes.POINTER(struct_place_t)),
]

class struct_strwinsetup_t(Structure):
    pass

struct_strwinsetup_t._pack_ = 1 # source:False
struct_strwinsetup_t._fields_ = [
    ('strtypes', struct_bytevec_t),
    ('minlen', ctypes.c_int64),
    ('display_only_existing_strings', ctypes.c_ubyte),
    ('only_7bit', ctypes.c_ubyte),
    ('ignore_heads', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 5),
]

class struct_qvector_segm_move_info_t_(Structure):
    pass

class struct_segm_move_info_t(Structure):
    pass

struct_qvector_segm_move_info_t_._pack_ = 1 # source:False
struct_qvector_segm_move_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_segm_move_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

segm_move_info_vec_t = struct_qvector_segm_move_info_t_
class struct_segm_move_infos_t(struct_qvector_segm_move_info_t_):
    pass

class struct_load_info_t(Structure):
    pass

struct_load_info_t._pack_ = 1 # source:False
struct_load_info_t._fields_ = [
    ('next', ctypes.POINTER(struct_load_info_t)),
    ('dllname', qstring),
    ('ftypename', qstring),
    ('processor', qstring),
    ('ftype', filetype_t),
    ('loader_flags', ctypes.c_uint32),
    ('lflags', ctypes.c_uint32),
    ('pri', ctypes.c_int32),
]


# values for enumeration 'mbox_kind_t'
mbox_kind_t__enumvalues = {
    0: 'mbox_internal',
    1: 'mbox_info',
    2: 'mbox_warning',
    3: 'mbox_error',
    4: 'mbox_nomem',
    5: 'mbox_feedback',
    6: 'mbox_readerror',
    7: 'mbox_writeerror',
    8: 'mbox_filestruct',
    9: 'mbox_wait',
    10: 'mbox_hide',
    11: 'mbox_replace',
}
mbox_internal = 0
mbox_info = 1
mbox_warning = 2
mbox_error = 3
mbox_nomem = 4
mbox_feedback = 5
mbox_readerror = 6
mbox_writeerror = 7
mbox_filestruct = 8
mbox_wait = 9
mbox_hide = 10
mbox_replace = 11
mbox_kind_t = ctypes.c_uint32 # enum

# values for enumeration 'choose_type_t'
choose_type_t__enumvalues = {
    0: 'chtype_generic',
    1: 'chtype_idasgn',
    2: 'chtype_entry',
    3: 'chtype_name',
    4: 'chtype_stkvar_xref',
    5: 'chtype_xref',
    6: 'chtype_enum',
    7: 'chtype_enum_by_value',
    8: 'chtype_func',
    9: 'chtype_segm',
    10: 'chtype_struc',
    11: 'chtype_strpath',
    12: 'chtype_idatil',
    13: 'chtype_enum_by_value_and_size',
    14: 'chtype_srcp',
}
chtype_generic = 0
chtype_idasgn = 1
chtype_entry = 2
chtype_name = 3
chtype_stkvar_xref = 4
chtype_xref = 5
chtype_enum = 6
chtype_enum_by_value = 7
chtype_func = 8
chtype_segm = 9
chtype_struc = 10
chtype_strpath = 11
chtype_idatil = 12
chtype_enum_by_value_and_size = 13
chtype_srcp = 14
choose_type_t = ctypes.c_uint32 # enum

# values for enumeration 'beep_t'
beep_t__enumvalues = {
    0: 'beep_default',
}
beep_default = 0
beep_t = ctypes.c_uint32 # enum
class struct_sreg_range_t(struct_range_t):
    pass

struct_sreg_range_t._pack_ = 1 # source:False
struct_sreg_range_t._fields_ = [
    ('val', ctypes.c_uint64),
    ('tag', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

class struct_struc_t(Structure):
    pass

struct_struc_t._pack_ = 1 # source:False
struct_struc_t._fields_ = [
    ('id', ctypes.c_uint64),
    ('memqty', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('members', ctypes.POINTER(struct_member_t)),
    ('age', ctypes.c_uint16),
    ('PADDING_1', ctypes.c_ubyte * 2),
    ('props', ctypes.c_uint32),
    ('ordinal', ctypes.c_int32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

class struct_minsn_t(Structure):
    pass

class struct_qvector_snapshot_t__P_(Structure):
    pass

class struct_snapshot_t(Structure):
    pass

struct_qvector_snapshot_t__P_._pack_ = 1 # source:False
struct_qvector_snapshot_t__P_._fields_ = [
    ('array', ctypes.POINTER(ctypes.POINTER(struct_snapshot_t))),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

snapshots_t = struct_qvector_snapshot_t__P_

# values for enumeration 'tcc_place_type_t'
tcc_place_type_t__enumvalues = {
    0: 'TCCPT_INVALID',
    1: 'TCCPT_PLACE',
    2: 'TCCPT_SIMPLELINE_PLACE',
    3: 'TCCPT_IDAPLACE',
    4: 'TCCPT_ENUMPLACE',
    5: 'TCCPT_STRUCTPLACE',
}
TCCPT_INVALID = 0
TCCPT_PLACE = 1
TCCPT_SIMPLELINE_PLACE = 2
TCCPT_IDAPLACE = 3
TCCPT_ENUMPLACE = 4
TCCPT_STRUCTPLACE = 5
tcc_place_type_t = ctypes.c_uint32 # enum

# values for enumeration 'vme_button_t'
vme_button_t__enumvalues = {
    0: 'VME_UNKNOWN',
    1: 'VME_LEFT_BUTTON',
    2: 'VME_RIGHT_BUTTON',
    3: 'VME_MID_BUTTON',
}
VME_UNKNOWN = 0
VME_LEFT_BUTTON = 1
VME_RIGHT_BUTTON = 2
VME_MID_BUTTON = 3
vme_button_t = ctypes.c_uint32 # enum
class union_callui_t(Union):
    pass

union_callui_t._pack_ = 1 # source:False
union_callui_t._fields_ = [
    ('cnd', ctypes.c_char),
    ('i8', ctypes.c_char),
    ('i', ctypes.c_int32),
    ('i16', ctypes.c_int16),
    ('i32', ctypes.c_int32),
    ('u8', ctypes.c_ubyte),
    ('u16', ctypes.c_uint16),
    ('u32', ctypes.c_uint32),
    ('cptr', ctypes.POINTER(ctypes.c_char)),
    ('vptr', ctypes.POINTER(None)),
    ('ssize', ctypes.c_int64),
    ('fptr', ctypes.POINTER(struct_func_t)),
    ('segptr', ctypes.POINTER(struct_segment_t)),
    ('strptr', ctypes.POINTER(struct_struc_t)),
    ('pluginptr', ctypes.POINTER(struct_plugin_t)),
    ('sraptr', ctypes.POINTER(struct_sreg_range_t)),
]


# values for enumeration 'ui_notification_t'
ui_notification_t__enumvalues = {
    0: 'ui_null',
    1: 'ui_range',
    2: 'ui_refresh_choosers',
    3: 'ui_idcstart',
    4: 'ui_idcstop',
    5: 'ui_suspend',
    6: 'ui_resume',
    7: 'ui_broadcast',
    8: 'ui_read_selection',
    9: 'ui_read_range_selection',
    10: 'ui_unmarksel',
    11: 'ui_screenea',
    12: 'ui_saving',
    13: 'ui_saved',
    14: 'ui_refreshmarked',
    15: 'ui_refresh',
    16: 'ui_choose',
    17: 'ui_close_chooser',
    18: 'ui_banner',
    19: 'ui_setidle',
    20: 'ui_database_closed',
    21: 'ui_beep',
    22: 'ui_is_msg_inited',
    23: 'ui_msg',
    24: 'ui_mbox',
    25: 'ui_clr_cancelled',
    26: 'ui_set_cancelled',
    27: 'ui_test_cancelled',
    28: 'ui_ask_buttons',
    29: 'ui_ask_file',
    30: 'ui_ask_form',
    31: 'ui_ask_text',
    32: 'ui_ask_str',
    33: 'ui_ask_addr',
    34: 'ui_ask_seg',
    35: 'ui_ask_long',
    36: 'ui_add_idckey',
    37: 'ui_obsolete_del_idckey',
    38: 'ui_analyzer_options',
    39: 'ui_load_file',
    40: 'ui_run_dbg',
    41: 'ui_get_cursor',
    42: 'ui_get_curline',
    43: 'ui_copywarn',
    44: 'ui_noabort',
    45: 'ui_lock_range_refresh',
    46: 'ui_unlock_range_refresh',
    47: 'ui_genfile_callback',
    48: 'ui_open_url',
    49: 'ui_hexdumpea',
    50: 'ui_get_key_code',
    51: 'ui_setup_plugins_menu',
    52: 'ui_get_kernel_version',
    53: 'ui_is_idaq',
    54: 'ui_refresh_navband',
    55: 'ui_debugger_menu_change',
    56: 'ui_get_curplace',
    57: 'ui_obsolete_display_widget',
    58: 'ui_close_widget',
    59: 'ui_activate_widget',
    60: 'ui_find_widget',
    61: 'ui_get_current_widget',
    62: 'ui_widget_visible',
    63: 'ui_widget_closing',
    64: 'ui_widget_invisible',
    65: 'ui_get_ea_hint',
    66: 'ui_get_item_hint',
    67: 'ui_refresh_custom_viewer',
    68: 'ui_destroy_custom_viewer',
    69: 'ui_jump_in_custom_viewer',
    70: 'ui_get_custom_viewer_curline',
    71: 'ui_get_current_viewer',
    72: 'ui_is_idaview',
    73: 'ui_get_custom_viewer_hint',
    74: 'ui_set_custom_viewer_range',
    75: 'ui_database_inited',
    76: 'ui_ready_to_run',
    77: 'ui_set_custom_viewer_handler',
    78: 'ui_refresh_chooser',
    79: 'ui_open_builtin',
    80: 'ui_preprocess_action',
    81: 'ui_postprocess_action',
    82: 'ui_set_custom_viewer_mode',
    83: 'ui_gen_disasm_text',
    84: 'ui_gen_idanode_text',
    85: 'ui_install_cli',
    86: 'ui_execute_sync',
    87: 'ui_get_chooser_obj',
    88: 'ui_enable_chooser_item_attrs',
    89: 'ui_get_chooser_item_attrs',
    90: 'ui_set_dock_pos',
    91: 'ui_get_opnum',
    92: 'ui_install_custom_datatype_menu',
    93: 'ui_install_custom_optype_menu',
    94: 'ui_get_range_marker',
    95: 'ui_lookup_key_code',
    96: 'ui_load_custom_icon_file',
    97: 'ui_load_custom_icon',
    98: 'ui_free_custom_icon',
    99: 'ui_process_action',
    100: 'ui_create_code_viewer',
    101: 'ui_addons',
    102: 'ui_execute_ui_requests',
    103: 'ui_execute_ui_requests_list',
    104: 'ui_register_timer',
    105: 'ui_unregister_timer',
    106: 'ui_take_database_snapshot',
    107: 'ui_restore_database_snapshot',
    108: 'ui_set_code_viewer_line_handlers',
    109: 'ui_obsolete_refresh_custom_code_viewer',
    110: 'ui_create_source_viewer',
    111: 'ui_get_tab_size',
    112: 'ui_repaint_qwidget',
    113: 'ui_custom_viewer_set_userdata',
    114: 'ui_jumpto',
    115: 'ui_cancel_exec_request',
    116: 'ui_open_form',
    117: 'ui_unrecognized_config_directive',
    118: 'ui_get_output_cursor',
    119: 'ui_get_output_curline',
    120: 'ui_get_output_selected_text',
    121: 'ui_get_renderer_type',
    122: 'ui_set_renderer_type',
    123: 'ui_get_viewer_user_data',
    124: 'ui_get_viewer_place_type',
    125: 'ui_ea_viewer_history_push_and_jump',
    126: 'ui_ea_viewer_history_info',
    127: 'ui_register_action',
    128: 'ui_unregister_action',
    129: 'ui_attach_action_to_menu',
    130: 'ui_detach_action_from_menu',
    131: 'ui_attach_action_to_popup',
    132: 'ui_detach_action_from_popup',
    133: 'ui_attach_dynamic_action_to_popup',
    134: 'ui_attach_action_to_toolbar',
    135: 'ui_detach_action_from_toolbar',
    136: 'ui_updating_actions',
    137: 'ui_updated_actions',
    138: 'ui_populating_widget_popup',
    139: 'ui_finish_populating_widget_popup',
    140: 'ui_update_action_attr',
    141: 'ui_get_action_attr',
    142: 'ui_plugin_loaded',
    143: 'ui_plugin_unloading',
    144: 'ui_get_widget_type',
    145: 'ui_current_widget_changed',
    146: 'ui_get_widget_title',
    147: 'ui_obsolete_get_user_strlist_options',
    148: 'ui_create_custom_viewer',
    149: 'ui_custom_viewer_jump',
    150: 'ui_set_custom_viewer_handlers',
    151: 'ui_get_registered_actions',
    152: 'ui_create_toolbar',
    153: 'ui_delete_toolbar',
    154: 'ui_create_menu',
    155: 'ui_delete_menu',
    156: 'ui_obsolete_set_nav_colorizer',
    157: 'ui_get_chooser_data',
    158: 'ui_obsolete_get_highlight',
    159: 'ui_set_highlight',
    160: 'ui_set_mappings',
    161: 'ui_create_empty_widget',
    162: 'ui_msg_clear',
    163: 'ui_msg_save',
    164: 'ui_msg_get_lines',
    165: 'ui_chooser_default_enter',
    166: 'ui_screen_ea_changed',
    167: 'ui_get_active_modal_widget',
    168: 'ui_navband_pixel',
    169: 'ui_navband_ea',
    170: 'ui_get_window_id',
    171: 'ui_create_desktop_widget',
    172: 'ui_strchoose',
    173: 'ui_set_nav_colorizer',
    174: 'ui_display_widget',
    175: 'ui_get_lines_rendering_info',
    176: 'ui_sync_sources',
    177: 'ui_get_widget_config',
    178: 'ui_set_widget_config',
    179: 'ui_get_custom_viewer_location',
    180: 'ui_initing_database',
    181: 'ui_destroying_procmod',
    182: 'ui_destroying_plugmod',
    183: 'ui_update_file_history',
    184: 'ui_cancel_thread_exec_requests',
    185: 'ui_get_synced_group',
    186: 'ui_show_rename_dialog',
    187: 'ui_desktop_applied',
    188: 'ui_choose_bookmark',
    189: 'ui_get_custom_viewer_place_xcoord',
    190: 'ui_get_user_input_event',
    191: 'ui_get_highlight_2',
    192: 'ui_last',
    1000: 'ui_dbg_begin',
    1000: 'ui_dbg_run_requests',
    1001: 'ui_dbg_get_running_request',
    1002: 'ui_dbg_get_running_notification',
    1003: 'ui_dbg_clear_requests_queue',
    1004: 'ui_dbg_get_process_state',
    1005: 'ui_dbg_start_process',
    1006: 'ui_dbg_request_start_process',
    1007: 'ui_dbg_suspend_process',
    1008: 'ui_dbg_request_suspend_process',
    1009: 'ui_dbg_continue_process',
    1010: 'ui_dbg_request_continue_process',
    1011: 'ui_dbg_exit_process',
    1012: 'ui_dbg_request_exit_process',
    1013: 'ui_dbg_get_thread_qty',
    1014: 'ui_dbg_getn_thread',
    1015: 'ui_dbg_select_thread',
    1016: 'ui_dbg_request_select_thread',
    1017: 'ui_dbg_step_into',
    1018: 'ui_dbg_request_step_into',
    1019: 'ui_dbg_step_over',
    1020: 'ui_dbg_request_step_over',
    1021: 'ui_dbg_run_to',
    1022: 'ui_dbg_request_run_to',
    1023: 'ui_dbg_step_until_ret',
    1024: 'ui_dbg_request_step_until_ret',
    1025: 'ui_dbg_get_bpt_qty',
    1026: 'ui_dbg_add_oldbpt',
    1027: 'ui_dbg_request_add_oldbpt',
    1028: 'ui_dbg_del_oldbpt',
    1029: 'ui_dbg_request_del_oldbpt',
    1030: 'ui_dbg_enable_oldbpt',
    1031: 'ui_dbg_request_enable_oldbpt',
    1032: 'ui_dbg_set_trace_size',
    1033: 'ui_dbg_clear_trace',
    1034: 'ui_dbg_request_clear_trace',
    1035: 'ui_dbg_is_step_trace_enabled',
    1036: 'ui_dbg_enable_step_trace',
    1037: 'ui_dbg_request_enable_step_trace',
    1038: 'ui_dbg_get_step_trace_options',
    1039: 'ui_dbg_set_step_trace_options',
    1040: 'ui_dbg_request_set_step_trace_options',
    1041: 'ui_dbg_is_insn_trace_enabled',
    1042: 'ui_dbg_enable_insn_trace',
    1043: 'ui_dbg_request_enable_insn_trace',
    1044: 'ui_dbg_get_insn_trace_options',
    1045: 'ui_dbg_set_insn_trace_options',
    1046: 'ui_dbg_request_set_insn_trace_options',
    1047: 'ui_dbg_is_func_trace_enabled',
    1048: 'ui_dbg_enable_func_trace',
    1049: 'ui_dbg_request_enable_func_trace',
    1050: 'ui_dbg_get_func_trace_options',
    1051: 'ui_dbg_set_func_trace_options',
    1052: 'ui_dbg_request_set_func_trace_options',
    1053: 'ui_dbg_get_tev_qty',
    1054: 'ui_dbg_get_tev_info',
    1055: 'ui_dbg_get_call_tev_callee',
    1056: 'ui_dbg_get_ret_tev_return',
    1057: 'ui_dbg_get_bpt_tev_ea',
    1058: 'ui_dbg_get_reg_value_type',
    1059: 'ui_dbg_get_processes',
    1060: 'ui_dbg_attach_process',
    1061: 'ui_dbg_request_attach_process',
    1062: 'ui_dbg_detach_process',
    1063: 'ui_dbg_request_detach_process',
    1064: 'ui_dbg_get_first_module',
    1065: 'ui_dbg_get_next_module',
    1066: 'ui_dbg_bring_to_front',
    1067: 'ui_dbg_get_current_thread',
    1068: 'ui_dbg_wait_for_next_event',
    1069: 'ui_dbg_get_debug_event',
    1070: 'ui_dbg_set_debugger_options',
    1071: 'ui_dbg_set_remote_debugger',
    1072: 'ui_dbg_load_debugger',
    1073: 'ui_dbg_retrieve_exceptions',
    1074: 'ui_dbg_store_exceptions',
    1075: 'ui_dbg_define_exception',
    1076: 'ui_dbg_suspend_thread',
    1077: 'ui_dbg_request_suspend_thread',
    1078: 'ui_dbg_resume_thread',
    1079: 'ui_dbg_request_resume_thread',
    1080: 'ui_dbg_get_process_options',
    1081: 'ui_dbg_check_bpt',
    1082: 'ui_dbg_set_process_state',
    1083: 'ui_dbg_get_manual_regions',
    1084: 'ui_dbg_set_manual_regions',
    1085: 'ui_dbg_enable_manual_regions',
    1086: 'ui_dbg_set_process_options',
    1087: 'ui_dbg_is_busy',
    1088: 'ui_dbg_hide_all_bpts',
    1089: 'ui_dbg_edit_manual_regions',
    1090: 'ui_dbg_get_sp_val',
    1091: 'ui_dbg_get_ip_val',
    1092: 'ui_dbg_get_reg_val',
    1093: 'ui_dbg_set_reg_val',
    1094: 'ui_dbg_request_set_reg_val',
    1095: 'ui_dbg_get_insn_tev_reg_val',
    1096: 'ui_dbg_get_insn_tev_reg_result',
    1097: 'ui_dbg_register_provider',
    1098: 'ui_dbg_unregister_provider',
    1099: 'ui_dbg_handle_debug_event',
    1100: 'ui_dbg_add_vmod',
    1101: 'ui_dbg_del_vmod',
    1102: 'ui_dbg_compare_bpt_locs',
    1103: 'ui_obsolete_dbg_save_bpts',
    1104: 'ui_dbg_set_bptloc_string',
    1105: 'ui_dbg_get_bptloc_string',
    1106: 'ui_dbg_internal_appcall',
    1107: 'ui_dbg_internal_cleanup_appcall',
    1108: 'ui_dbg_internal_get_sreg_base',
    1109: 'ui_dbg_internal_ioctl',
    1110: 'ui_dbg_read_memory',
    1111: 'ui_dbg_write_memory',
    1112: 'ui_dbg_read_registers',
    1113: 'ui_dbg_write_register',
    1114: 'ui_dbg_get_memory_info',
    1115: 'ui_dbg_get_event_cond',
    1116: 'ui_dbg_set_event_cond',
    1117: 'ui_dbg_enable_bpt',
    1118: 'ui_dbg_request_enable_bpt',
    1119: 'ui_dbg_del_bpt',
    1120: 'ui_dbg_request_del_bpt',
    1121: 'ui_dbg_map_source_path',
    1122: 'ui_dbg_map_source_file_path',
    1123: 'ui_dbg_modify_source_paths',
    1124: 'ui_dbg_is_bblk_trace_enabled',
    1125: 'ui_dbg_enable_bblk_trace',
    1126: 'ui_dbg_request_enable_bblk_trace',
    1127: 'ui_dbg_get_bblk_trace_options',
    1128: 'ui_dbg_set_bblk_trace_options',
    1129: 'ui_dbg_request_set_bblk_trace_options',
    1130: 'ui_dbg_load_trace_file',
    1131: 'ui_dbg_save_trace_file',
    1132: 'ui_dbg_is_valid_trace_file',
    1133: 'ui_dbg_set_trace_file_desc',
    1134: 'ui_dbg_get_trace_file_desc',
    1135: 'ui_dbg_choose_trace_file',
    1136: 'ui_dbg_diff_trace_file',
    1137: 'ui_dbg_graph_trace',
    1138: 'ui_dbg_get_tev_memory_info',
    1139: 'ui_dbg_get_tev_event',
    1140: 'ui_dbg_get_insn_tev_reg_mem',
    1141: 'ui_dbg_getn_bpt',
    1142: 'ui_dbg_get_bpt',
    1143: 'ui_dbg_find_bpt',
    1144: 'ui_dbg_add_bpt',
    1145: 'ui_dbg_request_add_bpt',
    1146: 'ui_dbg_update_bpt',
    1147: 'ui_dbg_for_all_bpts',
    1148: 'ui_dbg_get_tev_ea',
    1149: 'ui_dbg_get_tev_type',
    1150: 'ui_dbg_get_tev_tid',
    1151: 'ui_dbg_get_trace_base_address',
    1152: 'ui_dbg_set_trace_base_address',
    1153: 'ui_dbg_add_tev',
    1154: 'ui_dbg_add_insn_tev',
    1155: 'ui_dbg_add_call_tev',
    1156: 'ui_dbg_add_ret_tev',
    1157: 'ui_dbg_add_bpt_tev',
    1158: 'ui_dbg_add_debug_event',
    1159: 'ui_dbg_add_thread',
    1160: 'ui_dbg_del_thread',
    1161: 'ui_dbg_add_many_tevs',
    1162: 'ui_dbg_set_bpt_group',
    1163: 'ui_dbg_set_highlight_trace_options',
    1164: 'ui_dbg_set_trace_platform',
    1165: 'ui_dbg_get_trace_platform',
    1166: 'ui_dbg_internal_get_elang',
    1167: 'ui_dbg_internal_set_elang',
    1168: 'ui_dbg_load_dbg_dbginfo',
    1169: 'ui_dbg_set_resume_mode',
    1170: 'ui_dbg_request_set_resume_mode',
    1171: 'ui_dbg_set_bptloc_group',
    1172: 'ui_dbg_list_bptgrps',
    1173: 'ui_dbg_rename_bptgrp',
    1174: 'ui_dbg_del_bptgrp',
    1175: 'ui_dbg_get_grp_bpts',
    1176: 'ui_dbg_get_bpt_group',
    1177: 'ui_dbg_change_bptlocs',
    1178: 'ui_dbg_collect_stack_trace',
    1179: 'ui_dbg_get_module_info',
    1180: 'ui_dbg_get_srcinfo_provider',
    1181: 'ui_dbg_get_global_var',
    1182: 'ui_dbg_get_local_var',
    1183: 'ui_dbg_get_local_vars',
    1184: 'ui_dbg_add_path_mapping',
    1185: 'ui_dbg_get_current_source_file',
    1186: 'ui_dbg_get_current_source_line',
    1187: 'ui_dbg_srcdbg_step_into',
    1188: 'ui_dbg_srcdbg_request_step_into',
    1189: 'ui_dbg_srcdbg_step_over',
    1190: 'ui_dbg_srcdbg_request_step_over',
    1191: 'ui_dbg_srcdbg_step_until_ret',
    1192: 'ui_dbg_srcdbg_request_step_until_ret',
    1193: 'ui_dbg_getn_thread_name',
    1194: 'ui_dbg_bin_search',
    1195: 'ui_dbg_get_insn_tev_reg_val_i',
    1196: 'ui_dbg_get_insn_tev_reg_result_i',
    1197: 'ui_dbg_get_reg_val_i',
    1198: 'ui_dbg_set_reg_val_i',
    1199: 'ui_dbg_get_reg_info',
    1200: 'ui_dbg_set_trace_dynamic_register_set',
    1201: 'ui_dbg_get_trace_dynamic_register_set',
    1202: 'ui_dbg_enable_bptgrp',
    1203: 'ui_dbg_end',
}
ui_null = 0
ui_range = 1
ui_refresh_choosers = 2
ui_idcstart = 3
ui_idcstop = 4
ui_suspend = 5
ui_resume = 6
ui_broadcast = 7
ui_read_selection = 8
ui_read_range_selection = 9
ui_unmarksel = 10
ui_screenea = 11
ui_saving = 12
ui_saved = 13
ui_refreshmarked = 14
ui_refresh = 15
ui_choose = 16
ui_close_chooser = 17
ui_banner = 18
ui_setidle = 19
ui_database_closed = 20
ui_beep = 21
ui_is_msg_inited = 22
ui_msg = 23
ui_mbox = 24
ui_clr_cancelled = 25
ui_set_cancelled = 26
ui_test_cancelled = 27
ui_ask_buttons = 28
ui_ask_file = 29
ui_ask_form = 30
ui_ask_text = 31
ui_ask_str = 32
ui_ask_addr = 33
ui_ask_seg = 34
ui_ask_long = 35
ui_add_idckey = 36
ui_obsolete_del_idckey = 37
ui_analyzer_options = 38
ui_load_file = 39
ui_run_dbg = 40
ui_get_cursor = 41
ui_get_curline = 42
ui_copywarn = 43
ui_noabort = 44
ui_lock_range_refresh = 45
ui_unlock_range_refresh = 46
ui_genfile_callback = 47
ui_open_url = 48
ui_hexdumpea = 49
ui_get_key_code = 50
ui_setup_plugins_menu = 51
ui_get_kernel_version = 52
ui_is_idaq = 53
ui_refresh_navband = 54
ui_debugger_menu_change = 55
ui_get_curplace = 56
ui_obsolete_display_widget = 57
ui_close_widget = 58
ui_activate_widget = 59
ui_find_widget = 60
ui_get_current_widget = 61
ui_widget_visible = 62
ui_widget_closing = 63
ui_widget_invisible = 64
ui_get_ea_hint = 65
ui_get_item_hint = 66
ui_refresh_custom_viewer = 67
ui_destroy_custom_viewer = 68
ui_jump_in_custom_viewer = 69
ui_get_custom_viewer_curline = 70
ui_get_current_viewer = 71
ui_is_idaview = 72
ui_get_custom_viewer_hint = 73
ui_set_custom_viewer_range = 74
ui_database_inited = 75
ui_ready_to_run = 76
ui_set_custom_viewer_handler = 77
ui_refresh_chooser = 78
ui_open_builtin = 79
ui_preprocess_action = 80
ui_postprocess_action = 81
ui_set_custom_viewer_mode = 82
ui_gen_disasm_text = 83
ui_gen_idanode_text = 84
ui_install_cli = 85
ui_execute_sync = 86
ui_get_chooser_obj = 87
ui_enable_chooser_item_attrs = 88
ui_get_chooser_item_attrs = 89
ui_set_dock_pos = 90
ui_get_opnum = 91
ui_install_custom_datatype_menu = 92
ui_install_custom_optype_menu = 93
ui_get_range_marker = 94
ui_lookup_key_code = 95
ui_load_custom_icon_file = 96
ui_load_custom_icon = 97
ui_free_custom_icon = 98
ui_process_action = 99
ui_create_code_viewer = 100
ui_addons = 101
ui_execute_ui_requests = 102
ui_execute_ui_requests_list = 103
ui_register_timer = 104
ui_unregister_timer = 105
ui_take_database_snapshot = 106
ui_restore_database_snapshot = 107
ui_set_code_viewer_line_handlers = 108
ui_obsolete_refresh_custom_code_viewer = 109
ui_create_source_viewer = 110
ui_get_tab_size = 111
ui_repaint_qwidget = 112
ui_custom_viewer_set_userdata = 113
ui_jumpto = 114
ui_cancel_exec_request = 115
ui_open_form = 116
ui_unrecognized_config_directive = 117
ui_get_output_cursor = 118
ui_get_output_curline = 119
ui_get_output_selected_text = 120
ui_get_renderer_type = 121
ui_set_renderer_type = 122
ui_get_viewer_user_data = 123
ui_get_viewer_place_type = 124
ui_ea_viewer_history_push_and_jump = 125
ui_ea_viewer_history_info = 126
ui_register_action = 127
ui_unregister_action = 128
ui_attach_action_to_menu = 129
ui_detach_action_from_menu = 130
ui_attach_action_to_popup = 131
ui_detach_action_from_popup = 132
ui_attach_dynamic_action_to_popup = 133
ui_attach_action_to_toolbar = 134
ui_detach_action_from_toolbar = 135
ui_updating_actions = 136
ui_updated_actions = 137
ui_populating_widget_popup = 138
ui_finish_populating_widget_popup = 139
ui_update_action_attr = 140
ui_get_action_attr = 141
ui_plugin_loaded = 142
ui_plugin_unloading = 143
ui_get_widget_type = 144
ui_current_widget_changed = 145
ui_get_widget_title = 146
ui_obsolete_get_user_strlist_options = 147
ui_create_custom_viewer = 148
ui_custom_viewer_jump = 149
ui_set_custom_viewer_handlers = 150
ui_get_registered_actions = 151
ui_create_toolbar = 152
ui_delete_toolbar = 153
ui_create_menu = 154
ui_delete_menu = 155
ui_obsolete_set_nav_colorizer = 156
ui_get_chooser_data = 157
ui_obsolete_get_highlight = 158
ui_set_highlight = 159
ui_set_mappings = 160
ui_create_empty_widget = 161
ui_msg_clear = 162
ui_msg_save = 163
ui_msg_get_lines = 164
ui_chooser_default_enter = 165
ui_screen_ea_changed = 166
ui_get_active_modal_widget = 167
ui_navband_pixel = 168
ui_navband_ea = 169
ui_get_window_id = 170
ui_create_desktop_widget = 171
ui_strchoose = 172
ui_set_nav_colorizer = 173
ui_display_widget = 174
ui_get_lines_rendering_info = 175
ui_sync_sources = 176
ui_get_widget_config = 177
ui_set_widget_config = 178
ui_get_custom_viewer_location = 179
ui_initing_database = 180
ui_destroying_procmod = 181
ui_destroying_plugmod = 182
ui_update_file_history = 183
ui_cancel_thread_exec_requests = 184
ui_get_synced_group = 185
ui_show_rename_dialog = 186
ui_desktop_applied = 187
ui_choose_bookmark = 188
ui_get_custom_viewer_place_xcoord = 189
ui_get_user_input_event = 190
ui_get_highlight_2 = 191
ui_last = 192
ui_dbg_begin = 1000
ui_dbg_run_requests = 1000
ui_dbg_get_running_request = 1001
ui_dbg_get_running_notification = 1002
ui_dbg_clear_requests_queue = 1003
ui_dbg_get_process_state = 1004
ui_dbg_start_process = 1005
ui_dbg_request_start_process = 1006
ui_dbg_suspend_process = 1007
ui_dbg_request_suspend_process = 1008
ui_dbg_continue_process = 1009
ui_dbg_request_continue_process = 1010
ui_dbg_exit_process = 1011
ui_dbg_request_exit_process = 1012
ui_dbg_get_thread_qty = 1013
ui_dbg_getn_thread = 1014
ui_dbg_select_thread = 1015
ui_dbg_request_select_thread = 1016
ui_dbg_step_into = 1017
ui_dbg_request_step_into = 1018
ui_dbg_step_over = 1019
ui_dbg_request_step_over = 1020
ui_dbg_run_to = 1021
ui_dbg_request_run_to = 1022
ui_dbg_step_until_ret = 1023
ui_dbg_request_step_until_ret = 1024
ui_dbg_get_bpt_qty = 1025
ui_dbg_add_oldbpt = 1026
ui_dbg_request_add_oldbpt = 1027
ui_dbg_del_oldbpt = 1028
ui_dbg_request_del_oldbpt = 1029
ui_dbg_enable_oldbpt = 1030
ui_dbg_request_enable_oldbpt = 1031
ui_dbg_set_trace_size = 1032
ui_dbg_clear_trace = 1033
ui_dbg_request_clear_trace = 1034
ui_dbg_is_step_trace_enabled = 1035
ui_dbg_enable_step_trace = 1036
ui_dbg_request_enable_step_trace = 1037
ui_dbg_get_step_trace_options = 1038
ui_dbg_set_step_trace_options = 1039
ui_dbg_request_set_step_trace_options = 1040
ui_dbg_is_insn_trace_enabled = 1041
ui_dbg_enable_insn_trace = 1042
ui_dbg_request_enable_insn_trace = 1043
ui_dbg_get_insn_trace_options = 1044
ui_dbg_set_insn_trace_options = 1045
ui_dbg_request_set_insn_trace_options = 1046
ui_dbg_is_func_trace_enabled = 1047
ui_dbg_enable_func_trace = 1048
ui_dbg_request_enable_func_trace = 1049
ui_dbg_get_func_trace_options = 1050
ui_dbg_set_func_trace_options = 1051
ui_dbg_request_set_func_trace_options = 1052
ui_dbg_get_tev_qty = 1053
ui_dbg_get_tev_info = 1054
ui_dbg_get_call_tev_callee = 1055
ui_dbg_get_ret_tev_return = 1056
ui_dbg_get_bpt_tev_ea = 1057
ui_dbg_get_reg_value_type = 1058
ui_dbg_get_processes = 1059
ui_dbg_attach_process = 1060
ui_dbg_request_attach_process = 1061
ui_dbg_detach_process = 1062
ui_dbg_request_detach_process = 1063
ui_dbg_get_first_module = 1064
ui_dbg_get_next_module = 1065
ui_dbg_bring_to_front = 1066
ui_dbg_get_current_thread = 1067
ui_dbg_wait_for_next_event = 1068
ui_dbg_get_debug_event = 1069
ui_dbg_set_debugger_options = 1070
ui_dbg_set_remote_debugger = 1071
ui_dbg_load_debugger = 1072
ui_dbg_retrieve_exceptions = 1073
ui_dbg_store_exceptions = 1074
ui_dbg_define_exception = 1075
ui_dbg_suspend_thread = 1076
ui_dbg_request_suspend_thread = 1077
ui_dbg_resume_thread = 1078
ui_dbg_request_resume_thread = 1079
ui_dbg_get_process_options = 1080
ui_dbg_check_bpt = 1081
ui_dbg_set_process_state = 1082
ui_dbg_get_manual_regions = 1083
ui_dbg_set_manual_regions = 1084
ui_dbg_enable_manual_regions = 1085
ui_dbg_set_process_options = 1086
ui_dbg_is_busy = 1087
ui_dbg_hide_all_bpts = 1088
ui_dbg_edit_manual_regions = 1089
ui_dbg_get_sp_val = 1090
ui_dbg_get_ip_val = 1091
ui_dbg_get_reg_val = 1092
ui_dbg_set_reg_val = 1093
ui_dbg_request_set_reg_val = 1094
ui_dbg_get_insn_tev_reg_val = 1095
ui_dbg_get_insn_tev_reg_result = 1096
ui_dbg_register_provider = 1097
ui_dbg_unregister_provider = 1098
ui_dbg_handle_debug_event = 1099
ui_dbg_add_vmod = 1100
ui_dbg_del_vmod = 1101
ui_dbg_compare_bpt_locs = 1102
ui_obsolete_dbg_save_bpts = 1103
ui_dbg_set_bptloc_string = 1104
ui_dbg_get_bptloc_string = 1105
ui_dbg_internal_appcall = 1106
ui_dbg_internal_cleanup_appcall = 1107
ui_dbg_internal_get_sreg_base = 1108
ui_dbg_internal_ioctl = 1109
ui_dbg_read_memory = 1110
ui_dbg_write_memory = 1111
ui_dbg_read_registers = 1112
ui_dbg_write_register = 1113
ui_dbg_get_memory_info = 1114
ui_dbg_get_event_cond = 1115
ui_dbg_set_event_cond = 1116
ui_dbg_enable_bpt = 1117
ui_dbg_request_enable_bpt = 1118
ui_dbg_del_bpt = 1119
ui_dbg_request_del_bpt = 1120
ui_dbg_map_source_path = 1121
ui_dbg_map_source_file_path = 1122
ui_dbg_modify_source_paths = 1123
ui_dbg_is_bblk_trace_enabled = 1124
ui_dbg_enable_bblk_trace = 1125
ui_dbg_request_enable_bblk_trace = 1126
ui_dbg_get_bblk_trace_options = 1127
ui_dbg_set_bblk_trace_options = 1128
ui_dbg_request_set_bblk_trace_options = 1129
ui_dbg_load_trace_file = 1130
ui_dbg_save_trace_file = 1131
ui_dbg_is_valid_trace_file = 1132
ui_dbg_set_trace_file_desc = 1133
ui_dbg_get_trace_file_desc = 1134
ui_dbg_choose_trace_file = 1135
ui_dbg_diff_trace_file = 1136
ui_dbg_graph_trace = 1137
ui_dbg_get_tev_memory_info = 1138
ui_dbg_get_tev_event = 1139
ui_dbg_get_insn_tev_reg_mem = 1140
ui_dbg_getn_bpt = 1141
ui_dbg_get_bpt = 1142
ui_dbg_find_bpt = 1143
ui_dbg_add_bpt = 1144
ui_dbg_request_add_bpt = 1145
ui_dbg_update_bpt = 1146
ui_dbg_for_all_bpts = 1147
ui_dbg_get_tev_ea = 1148
ui_dbg_get_tev_type = 1149
ui_dbg_get_tev_tid = 1150
ui_dbg_get_trace_base_address = 1151
ui_dbg_set_trace_base_address = 1152
ui_dbg_add_tev = 1153
ui_dbg_add_insn_tev = 1154
ui_dbg_add_call_tev = 1155
ui_dbg_add_ret_tev = 1156
ui_dbg_add_bpt_tev = 1157
ui_dbg_add_debug_event = 1158
ui_dbg_add_thread = 1159
ui_dbg_del_thread = 1160
ui_dbg_add_many_tevs = 1161
ui_dbg_set_bpt_group = 1162
ui_dbg_set_highlight_trace_options = 1163
ui_dbg_set_trace_platform = 1164
ui_dbg_get_trace_platform = 1165
ui_dbg_internal_get_elang = 1166
ui_dbg_internal_set_elang = 1167
ui_dbg_load_dbg_dbginfo = 1168
ui_dbg_set_resume_mode = 1169
ui_dbg_request_set_resume_mode = 1170
ui_dbg_set_bptloc_group = 1171
ui_dbg_list_bptgrps = 1172
ui_dbg_rename_bptgrp = 1173
ui_dbg_del_bptgrp = 1174
ui_dbg_get_grp_bpts = 1175
ui_dbg_get_bpt_group = 1176
ui_dbg_change_bptlocs = 1177
ui_dbg_collect_stack_trace = 1178
ui_dbg_get_module_info = 1179
ui_dbg_get_srcinfo_provider = 1180
ui_dbg_get_global_var = 1181
ui_dbg_get_local_var = 1182
ui_dbg_get_local_vars = 1183
ui_dbg_add_path_mapping = 1184
ui_dbg_get_current_source_file = 1185
ui_dbg_get_current_source_line = 1186
ui_dbg_srcdbg_step_into = 1187
ui_dbg_srcdbg_request_step_into = 1188
ui_dbg_srcdbg_step_over = 1189
ui_dbg_srcdbg_request_step_over = 1190
ui_dbg_srcdbg_step_until_ret = 1191
ui_dbg_srcdbg_request_step_until_ret = 1192
ui_dbg_getn_thread_name = 1193
ui_dbg_bin_search = 1194
ui_dbg_get_insn_tev_reg_val_i = 1195
ui_dbg_get_insn_tev_reg_result_i = 1196
ui_dbg_get_reg_val_i = 1197
ui_dbg_set_reg_val_i = 1198
ui_dbg_get_reg_info = 1199
ui_dbg_set_trace_dynamic_register_set = 1200
ui_dbg_get_trace_dynamic_register_set = 1201
ui_dbg_enable_bptgrp = 1202
ui_dbg_end = 1203
ui_notification_t = ctypes.c_uint32 # enum
struct_place_t._pack_ = 1 # source:False
struct_place_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_place_t_vtbl)),
    ('lnnum', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_simpleline_place_t(struct_place_t):
    pass

struct_simpleline_place_t._pack_ = 1 # source:False
struct_simpleline_place_t._fields_ = [
    ('n', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_simpleline_t(Structure):
    pass

struct_simpleline_t._pack_ = 1 # source:False
struct_simpleline_t._fields_ = [
    ('line', qstring),
    ('color', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('bgcolor', ctypes.c_uint32),
]

class struct_qvector_simpleline_t_(Structure):
    pass

struct_qvector_simpleline_t_._pack_ = 1 # source:False
struct_qvector_simpleline_t_._fields_ = [
    ('array', ctypes.POINTER(struct_simpleline_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_simpleline_t___iterator = ctypes.POINTER(struct_simpleline_t)
qvector_simpleline_t___const_iterator = ctypes.POINTER(struct_simpleline_t)
strvec_t = struct_qvector_simpleline_t_
class struct_idaplace_t(struct_place_t):
    pass

struct_idaplace_t._pack_ = 1 # source:False
struct_idaplace_t._fields_ = [
    ('ea', ctypes.c_uint64),
]

class struct_enumplace_t(struct_place_t):
    pass

struct_enumplace_t._pack_ = 1 # source:False
struct_enumplace_t._fields_ = [
    ('idx', ctypes.c_uint64),
    ('bmask', ctypes.c_uint64),
    ('value', ctypes.c_uint64),
    ('serial', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

class struct_structplace_t(struct_place_t):
    pass

struct_structplace_t._pack_ = 1 # source:False
struct_structplace_t._fields_ = [
    ('idx', ctypes.c_uint64),
    ('offset', ctypes.c_uint64),
]

class struct_hexplace_t(struct_idaplace_t):
    pass

struct_hexplace_t._pack_ = 1 # source:False
struct_hexplace_t._fields_ = [
    ('sol', ctypes.c_uint64),
]

class struct_hexplace_gen_t(Structure):
    pass

struct_hexplace_gen_t._pack_ = 1 # source:False
struct_hexplace_gen_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_hexplace_gen_t_vtbl)),
]

class struct_hexview_t(Structure):
    pass


# values for enumeration 'hexplace_gen_t__byte_kind_t'
hexplace_gen_t__byte_kind_t__enumvalues = {
    0: 'BK_VALID',
    1: 'BK_INVALIDADDR',
    2: 'BK_NOVALUE',
}
BK_VALID = 0
BK_INVALIDADDR = 1
BK_NOVALUE = 2
hexplace_gen_t__byte_kind_t = ctypes.c_uint32 # enum

# values for enumeration 'hexplace_gen_t__data_kind_t'
hexplace_gen_t__data_kind_t__enumvalues = {
    0: 'dk_float',
    1: 'dk_int',
    2: 'dk_addr_names',
    3: 'dk_addr_text',
}
dk_float = 0
dk_int = 1
dk_addr_names = 2
dk_addr_text = 3
hexplace_gen_t__data_kind_t = ctypes.c_uint32 # enum

# values for enumeration 'hexplace_gen_t__int_format_t'
hexplace_gen_t__int_format_t__enumvalues = {
    0: 'if_hex',
    1: 'if_signed',
    2: 'if_unsigned',
}
if_hex = 0
if_signed = 1
if_unsigned = 2
hexplace_gen_t__int_format_t = ctypes.c_uint32 # enum
class struct_TWidget(Structure):
    pass

class struct_sync_source_t(Structure):
    pass

struct_sync_source_t._pack_ = 1 # source:False
struct_sync_source_t._fields_ = [
    ('storage', ctypes.c_ubyte * 16),
]

class struct_ida_movable_type_sync_source_t_(Structure):
    pass

class struct_qvector_sync_source_t_(Structure):
    pass

struct_qvector_sync_source_t_._pack_ = 1 # source:False
struct_qvector_sync_source_t_._fields_ = [
    ('array', ctypes.POINTER(struct_sync_source_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_sync_source_t___iterator = ctypes.POINTER(struct_sync_source_t)
qvector_sync_source_t___const_iterator = ctypes.POINTER(struct_sync_source_t)
sync_source_vec_t = struct_qvector_sync_source_t_
class struct_synced_group_t(struct_qvector_sync_source_t_):
    pass


# values for enumeration 'lecvt_code_t'
lecvt_code_t__enumvalues = {
    4294967295: 'LECVT_CANCELED',
    0: 'LECVT_ERROR',
    1: 'LECVT_OK',
}
LECVT_CANCELED = 4294967295
LECVT_ERROR = 0
LECVT_OK = 1
lecvt_code_t = ctypes.c_uint32 # enum
_22625691FD6E331CB9270B94477ECC85 = ctypes.CFUNCTYPE(lecvt_code_t, ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_TWidget), ctypes.c_uint32)
class struct_twinpos_t(Structure):
    pass

struct_twinpos_t._pack_ = 1 # source:False
struct_twinpos_t._fields_ = [
    ('at', ctypes.POINTER(struct_place_t)),
    ('x', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_twinline_t(Structure):
    pass

struct_twinline_t._pack_ = 1 # source:False
struct_twinline_t._fields_ = [
    ('at', ctypes.POINTER(struct_place_t)),
    ('line', qstring),
    ('prefix_color', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('bg_color', ctypes.c_uint32),
    ('is_default', ctypes.c_char),
    ('PADDING_1', ctypes.c_ubyte * 7),
]

class struct_ida_movable_type_twinline_t_(Structure):
    pass

class struct_qvector_twinline_t_(Structure):
    pass

struct_qvector_twinline_t_._pack_ = 1 # source:False
struct_qvector_twinline_t_._fields_ = [
    ('array', ctypes.POINTER(struct_twinline_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_twinline_t___iterator = ctypes.POINTER(struct_twinline_t)
qvector_twinline_t___const_iterator = ctypes.POINTER(struct_twinline_t)
text_t = struct_qvector_twinline_t_
class struct_linearray_t(Structure):
    pass

struct_linearray_t._pack_ = 1 # source:False
struct_linearray_t._fields_ = [
    ('lines', qstrvec_t),
    ('at', ctypes.POINTER(struct_place_t)),
    ('ud', ctypes.POINTER(None)),
    ('prefix_color', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('bg_color', ctypes.c_uint32),
    ('extra', qstring),
    ('dlnnum', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

class struct_qvector_const_twinline_t__P_(Structure):
    pass

struct_qvector_const_twinline_t__P_._pack_ = 1 # source:False
struct_qvector_const_twinline_t__P_._fields_ = [
    ('array', ctypes.POINTER(ctypes.POINTER(struct_twinline_t))),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_const_twinline_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_twinline_t))
qvector_const_twinline_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_twinline_t))
section_lines_refs_t = struct_qvector_const_twinline_t__P_
class struct_qvector_qvector_const_twinline_t__P__(Structure):
    pass

struct_qvector_qvector_const_twinline_t__P__._pack_ = 1 # source:False
struct_qvector_qvector_const_twinline_t__P__._fields_ = [
    ('array', ctypes.POINTER(struct_qvector_const_twinline_t__P_)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_qvector_const_twinline_t__P____iterator = ctypes.POINTER(struct_qvector_const_twinline_t__P_)
qvector_qvector_const_twinline_t__P____const_iterator = ctypes.POINTER(struct_qvector_const_twinline_t__P_)
sections_lines_refs_t = struct_qvector_qvector_const_twinline_t__P__
class struct_lines_rendering_input_t(Structure):
    pass

struct_lines_rendering_input_t._pack_ = 1 # source:False
struct_lines_rendering_input_t._fields_ = [
    ('cb', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('sections_lines', sections_lines_refs_t),
    ('sync_group', ctypes.POINTER(struct_synced_group_t)),
]

class struct_line_rendering_output_entry_t(Structure):
    pass

struct_line_rendering_output_entry_t._pack_ = 1 # source:False
struct_line_rendering_output_entry_t._fields_ = [
    ('line', ctypes.POINTER(struct_twinline_t)),
    ('flags', ctypes.c_uint32),
    ('bg_color', ctypes.c_uint32),
    ('cpx', ctypes.c_int32),
    ('nchars', ctypes.c_int32),
]

class struct_ida_movable_type_line_rendering_output_entry_t_(Structure):
    pass

class struct_qvector_line_rendering_output_entry_t__P_(Structure):
    pass

struct_qvector_line_rendering_output_entry_t__P_._pack_ = 1 # source:False
struct_qvector_line_rendering_output_entry_t__P_._fields_ = [
    ('array', ctypes.POINTER(ctypes.POINTER(struct_line_rendering_output_entry_t))),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_line_rendering_output_entry_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_line_rendering_output_entry_t))
qvector_line_rendering_output_entry_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_line_rendering_output_entry_t))
line_rendering_output_entries_refs_t = struct_qvector_line_rendering_output_entry_t__P_
class struct_lines_rendering_output_t(Structure):
    pass

struct_lines_rendering_output_t._pack_ = 1 # source:False
struct_lines_rendering_output_t._fields_ = [
    ('entries', line_rendering_output_entries_refs_t),
    ('flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

twidget_type_t = ctypes.c_int32
class struct_dirtree_impl_t(Structure):
    pass

class struct_dirtree_t(Structure):
    pass

struct_dirtree_t._pack_ = 1 # source:False
struct_dirtree_t._fields_ = [
    ('d', ctypes.POINTER(struct_dirtree_impl_t)),
]

class struct_chooser_item_attrs_t(Structure):
    pass

struct_chooser_item_attrs_t._pack_ = 1 # source:False
struct_chooser_item_attrs_t._fields_ = [
    ('cb', ctypes.c_int32),
    ('flags', ctypes.c_int32),
    ('color', ctypes.c_uint32),
]

class struct_chooser_base_t(Structure):
    pass

struct_chooser_base_t._pack_ = 1 # source:False
struct_chooser_base_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_chooser_base_t_vtbl)),
    ('version', ctypes.c_uint32),
    ('flags', ctypes.c_uint32),
    ('x0', ctypes.c_int32),
    ('y0', ctypes.c_int32),
    ('x1', ctypes.c_int32),
    ('y1', ctypes.c_int32),
    ('width', ctypes.c_int32),
    ('height', ctypes.c_int32),
    ('title', ctypes.POINTER(ctypes.c_char)),
    ('columns', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('widths', ctypes.POINTER(ctypes.c_int32)),
    ('header', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('icon', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('popup_names', struct__qstring_char_ * 4),
    ('deflt_col', ctypes.c_int32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

class struct_chooser_t(struct_chooser_base_t):
    pass


# values for enumeration 'chooser_base_t__cbres_t'
chooser_base_t__cbres_t__enumvalues = {
    0: 'NOTHING_CHANGED',
    1: 'ALL_CHANGED',
    2: 'SELECTION_CHANGED',
}
NOTHING_CHANGED = 0
ALL_CHANGED = 1
SELECTION_CHANGED = 2
chooser_base_t__cbres_t = ctypes.c_uint32 # enum
class struct_chooser_t__cbret_t(Structure):
    pass

struct_chooser_t__cbret_t._pack_ = 1 # source:False
struct_chooser_t__cbret_t._fields_ = [
    ('idx', ctypes.c_int64),
    ('changed', chooser_base_t__cbres_t),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_chooser_multi_t(struct_chooser_base_t):
    pass

class struct_textctrl_info_t(Structure):
    pass

struct_textctrl_info_t._pack_ = 1 # source:False
struct_textctrl_info_t._fields_ = [
    ('cb', ctypes.c_uint64),
    ('text', qstring),
    ('flags', ctypes.c_uint16),
    ('tabsize', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 4),
]


# values for enumeration 'navaddr_type_t'
navaddr_type_t__enumvalues = {
    0: 'nat_lib',
    1: 'nat_fun',
    2: 'nat_cod',
    3: 'nat_dat',
    4: 'nat_und',
    5: 'nat_ext',
    6: 'nat_err',
    7: 'nat_gap',
    8: 'nat_cur',
    9: 'nat_auto',
    10: 'nat_lum',
    11: 'nat_hlo',
    12: 'nat_last',
}
nat_lib = 0
nat_fun = 1
nat_cod = 2
nat_dat = 3
nat_und = 4
nat_ext = 5
nat_err = 6
nat_gap = 7
nat_cur = 8
nat_auto = 9
nat_lum = 10
nat_hlo = 11
nat_last = 12
navaddr_type_t = ctypes.c_uint32 # enum
_348C6D6B4F9D7A80DE44C8FF011E20CA = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(None))

# values for enumeration 'custom_viewer_handler_id_t'
custom_viewer_handler_id_t__enumvalues = {
    0: 'CVH_USERDATA',
    1: 'CVH_KEYDOWN',
    2: 'CVH_POPUP',
    3: 'CVH_DBLCLICK',
    4: 'CVH_CURPOS',
    5: 'CVH_CLOSE',
    6: 'CVH_CLICK',
    7: 'CVH_QT_AWARE',
    8: 'CVH_HELP',
    9: 'CVH_MOUSEMOVE',
    1000: 'CDVH_USERDATA',
    1001: 'CDVH_SRCVIEW',
    1002: 'CDVH_LINES_CLICK',
    1003: 'CDVH_LINES_DBLCLICK',
    1004: 'CDVH_LINES_POPUP',
    1005: 'CDVH_LINES_DRAWICON',
    1006: 'CDVH_LINES_LINENUM',
    1007: 'CDVH_LINES_ICONMARGIN',
    1008: 'CDVH_LINES_RADIX',
    1009: 'CDVH_LINES_ALIGNMENT',
}
CVH_USERDATA = 0
CVH_KEYDOWN = 1
CVH_POPUP = 2
CVH_DBLCLICK = 3
CVH_CURPOS = 4
CVH_CLOSE = 5
CVH_CLICK = 6
CVH_QT_AWARE = 7
CVH_HELP = 8
CVH_MOUSEMOVE = 9
CDVH_USERDATA = 1000
CDVH_SRCVIEW = 1001
CDVH_LINES_CLICK = 1002
CDVH_LINES_DBLCLICK = 1003
CDVH_LINES_POPUP = 1004
CDVH_LINES_DRAWICON = 1005
CDVH_LINES_LINENUM = 1006
CDVH_LINES_ICONMARGIN = 1007
CDVH_LINES_RADIX = 1008
CDVH_LINES_ALIGNMENT = 1009
custom_viewer_handler_id_t = ctypes.c_uint32 # enum
input_event_modifiers_t = ctypes.c_int32
view_event_state_t = ctypes.c_int32

# values for enumeration 'msg_notification_t'
msg_notification_t__enumvalues = {
    0: 'msg_activated',
    1: 'msg_deactivated',
    2: 'msg_click',
    3: 'msg_dblclick',
    4: 'msg_closed',
    5: 'msg_keydown',
}
msg_activated = 0
msg_deactivated = 1
msg_click = 2
msg_dblclick = 3
msg_closed = 4
msg_keydown = 5
msg_notification_t = ctypes.c_uint32 # enum
class struct_renderer_pos_info_t(Structure):
    pass

struct_renderer_pos_info_t._pack_ = 1 # source:False
struct_renderer_pos_info_t._fields_ = [
    ('node', ctypes.c_int32),
    ('cx', ctypes.c_int16),
    ('cy', ctypes.c_int16),
    ('sx', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

class struct_edge_t(Structure):
    pass

struct_edge_t._pack_ = 1 # source:False
struct_edge_t._fields_ = [
    ('src', ctypes.c_int32),
    ('dst', ctypes.c_int32),
]

class struct_edge_layout_point_t(Structure):
    pass

struct_edge_layout_point_t._pack_ = 1 # source:False
struct_edge_layout_point_t._fields_ = [
    ('pidx', ctypes.c_int32),
    ('e', struct_edge_t),
]

class struct_selection_item_t(Structure):
    pass

struct_selection_item_t._pack_ = 1 # source:False
struct_selection_item_t._fields_ = [
    ('is_node', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('node', ctypes.c_int32),
    ('elp', struct_edge_layout_point_t),
]

class union_view_mouse_event_location_t(Union):
    pass

union_view_mouse_event_location_t._pack_ = 1 # source:False
union_view_mouse_event_location_t._fields_ = [
    ('ea', ctypes.c_uint64),
    ('item', ctypes.POINTER(struct_selection_item_t)),
]

view_mouse_event_t__location_t = union_view_mouse_event_location_t
class struct_view_mouse_event_t(Structure):
    pass

struct_view_mouse_event_t._pack_ = 1 # source:False
struct_view_mouse_event_t._fields_ = [
    ('rtype', tcc_renderer_type_t),
    ('x', ctypes.c_uint32),
    ('y', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('location', view_mouse_event_t__location_t),
    ('state', ctypes.c_int32),
    ('button', vme_button_t),
    ('renderer_pos', struct_renderer_pos_info_t),
    ('PADDING_1', ctypes.c_ubyte * 4),
]


# values for enumeration 'view_notification_t'
view_notification_t__enumvalues = {
    0: 'view_activated',
    1: 'view_deactivated',
    2: 'view_keydown',
    3: 'view_click',
    4: 'view_dblclick',
    5: 'view_curpos',
    6: 'view_created',
    7: 'view_close',
    8: 'view_switched',
    9: 'view_mouse_over',
    10: 'view_loc_changed',
    11: 'view_mouse_moved',
}
view_activated = 0
view_deactivated = 1
view_keydown = 2
view_click = 3
view_dblclick = 4
view_curpos = 5
view_created = 6
view_close = 7
view_switched = 8
view_mouse_over = 9
view_loc_changed = 10
view_mouse_moved = 11
view_notification_t = ctypes.c_uint32 # enum
_653E9C544EBAD1C578F1C3EA01A7EA50 = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(None))
_D8A63F76A72CA95C9ABF1913B4CBA647 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))
_35D9E31152E82F0DC4ACD195DE0FABB8 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.POINTER(struct_view_mouse_event_t), ctypes.POINTER(None))
_BC5D78B1122B948293185BB24923F2AB = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.POINTER(None))
_5AB30559351E7209272A12F5E44EDFCF = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))
_23323E8D0E36F5183F546A73BEF3AA0F = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(None))
_9FAA1159FEB73E1F987165FCF7559316 = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_place_t), ctypes.POINTER(struct_place_t), ctypes.POINTER(None))

# values for enumeration 'locchange_reason_t'
locchange_reason_t__enumvalues = {
    0: 'lcr_unknown',
    1: 'lcr_goto',
    2: 'lcr_user_switch',
    3: 'lcr_auto_switch',
    4: 'lcr_jump',
    5: 'lcr_navigate',
    6: 'lcr_scroll',
    7: 'lcr_internal',
}
lcr_unknown = 0
lcr_goto = 1
lcr_user_switch = 2
lcr_auto_switch = 3
lcr_jump = 4
lcr_navigate = 5
lcr_scroll = 6
lcr_internal = 7
locchange_reason_t = ctypes.c_uint32 # enum
class struct_locchange_md_t(Structure):
    pass

struct_locchange_md_t._pack_ = 1 # source:False
struct_locchange_md_t._fields_ = [
    ('cb', ctypes.c_ubyte),
    ('r', ctypes.c_ubyte),
    ('f', ctypes.c_ubyte),
    ('reserved', ctypes.c_ubyte),
]

class struct_ida_movable_type_locchange_md_t_(Structure):
    pass

_07DD72C5C6FD4DF77ADB3AE4C3F346E8 = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_locchange_md_t), ctypes.POINTER(None))
_6CCEADC9C9AFEEC6AD966E8EE72B4AF1 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_locchange_md_t), ctypes.POINTER(None))
_FFCAA51FE472A9B5C2FD486DFC769AD3 = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_place_t), ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(None))
_52B47B3014E6D78C5675739022A393A4 = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_place_t), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(None))
_59DFB1CB44B512208DC0D7E0FF4E723C = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_place_t), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None))

# values for enumeration 'input_event_kind_t'
input_event_kind_t__enumvalues = {
    0: 'iek_unknown',
    1: 'iek_shortcut',
    2: 'iek_key_press',
    3: 'iek_key_release',
    4: 'iek_mouse_button_press',
    5: 'iek_mouse_button_release',
    6: 'iek_mouse_wheel',
}
iek_unknown = 0
iek_shortcut = 1
iek_key_press = 2
iek_key_release = 3
iek_mouse_button_press = 4
iek_mouse_button_release = 5
iek_mouse_wheel = 6
input_event_kind_t = ctypes.c_uint32 # enum
class struct_input_event_t__input_event_shortcut_data_t(Structure):
    pass

struct_input_event_t__input_event_shortcut_data_t._pack_ = 1 # source:False
struct_input_event_t__input_event_shortcut_data_t._fields_ = [
    ('action_name', ctypes.POINTER(ctypes.c_char)),
]

class struct_input_event_t__input_event_keyboard_data_t(Structure):
    pass

struct_input_event_t__input_event_keyboard_data_t._pack_ = 1 # source:False
struct_input_event_t__input_event_keyboard_data_t._fields_ = [
    ('key', ctypes.c_int32),
    ('text', ctypes.c_char * 8),
]

class struct_input_event_t__input_event_mouse_data_t(Structure):
    pass

struct_input_event_t__input_event_mouse_data_t._pack_ = 1 # source:False
struct_input_event_t__input_event_mouse_data_t._fields_ = [
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('button', vme_button_t),
]

class union_input_event_t___F3C8F5E9C7D26C2A8509C540BA2A20D8(Union):
    pass

union_input_event_t___F3C8F5E9C7D26C2A8509C540BA2A20D8._pack_ = 1 # source:False
union_input_event_t___F3C8F5E9C7D26C2A8509C540BA2A20D8._fields_ = [
    ('shortcut', struct_input_event_t__input_event_shortcut_data_t),
    ('keyboard', struct_input_event_t__input_event_keyboard_data_t),
    ('mouse', struct_input_event_t__input_event_mouse_data_t),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_input_event_t(Structure):
    pass

class union_input_event_t_0(Union):
    pass

union_input_event_t_0._pack_ = 1 # source:False
union_input_event_t_0._fields_ = [
    ('shortcut', struct_input_event_t__input_event_shortcut_data_t),
    ('keyboard', struct_input_event_t__input_event_keyboard_data_t),
    ('mouse', struct_input_event_t__input_event_mouse_data_t),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

struct_input_event_t._pack_ = 1 # source:False
struct_input_event_t._anonymous_ = ('_0',)
struct_input_event_t._fields_ = [
    ('cb', ctypes.c_int32),
    ('kind', input_event_kind_t),
    ('modifiers', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('target', ctypes.POINTER(struct_TWidget)),
    ('source', ctypes.POINTER(None)),
    ('_0', union_input_event_t_0),
]

class struct_cli_t(Structure):
    pass

struct_cli_t._pack_ = 1 # source:False
struct_cli_t._fields_ = [
    ('size', ctypes.c_uint64),
    ('flags', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('sname', ctypes.POINTER(ctypes.c_char)),
    ('lname', ctypes.POINTER(ctypes.c_char)),
    ('hint', ctypes.POINTER(ctypes.c_char)),
    ('execute_line', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(ctypes.c_char))),
    ('unused', ctypes.POINTER(None)),
    ('keydown', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32), ctypes.c_int32)),
    ('find_completions', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_qvector__qstring_char__), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_char), ctypes.c_int32)),
]

class struct_exec_request_t(Structure):
    pass

struct_exec_request_t._pack_ = 1 # source:False
struct_exec_request_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_exec_request_t_vtbl)),
    ('code', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('sem', ctypes.POINTER(struct___qsemaphore_t)),
]

class struct_ui_request_t(Structure):
    pass

struct_ui_request_t._pack_ = 1 # source:False
struct_ui_request_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_ui_request_t_vtbl)),
]

class struct_qlist_ui_request_t__P___listnode_t(Structure):
    pass

struct_qlist_ui_request_t__P___listnode_t._pack_ = 1 # source:False
struct_qlist_ui_request_t__P___listnode_t._fields_ = [
    ('next', ctypes.POINTER(struct_qlist_ui_request_t__P___listnode_t)),
    ('prev', ctypes.POINTER(struct_qlist_ui_request_t__P___listnode_t)),
]

class struct_qlist_ui_request_t__P_(Structure):
    pass

struct_qlist_ui_request_t__P_._pack_ = 1 # source:False
struct_qlist_ui_request_t__P_._fields_ = [
    ('node', struct_qlist_ui_request_t__P___listnode_t),
    ('length', ctypes.c_uint64),
]

class struct_ui_requests_t(struct_qlist_ui_request_t__P_):
    pass

class struct_qlist_ui_request_t__P___iterator(Structure):
    pass

class struct_qlist_ui_request_t__P___const_iterator(Structure):
    pass

class struct_qlist_ui_request_t__P___reverse_iterator(Structure):
    pass

class struct_qlist_ui_request_t__P___const_reverse_iterator(Structure):
    pass

_0F4B5B224EF598EAC96C9D985A235D75 = ctypes.CFUNCTYPE(None, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(None))
class struct_qvector_selection_item_t_(Structure):
    pass

struct_qvector_selection_item_t_._pack_ = 1 # source:False
struct_qvector_selection_item_t_._fields_ = [
    ('array', ctypes.POINTER(struct_selection_item_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

screen_graph_selection_base_t = struct_qvector_selection_item_t_
class struct_screen_graph_selection_t(struct_qvector_selection_item_t_):
    pass

class struct_qvector_dirtree_cursor_t_(Structure):
    pass

class struct_dirtree_cursor_t(Structure):
    pass

struct_qvector_dirtree_cursor_t_._pack_ = 1 # source:False
struct_qvector_dirtree_cursor_t_._fields_ = [
    ('array', ctypes.POINTER(struct_dirtree_cursor_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

dirtree_cursor_vec_t = struct_qvector_dirtree_cursor_t_
class struct_dirtree_selection_t(struct_qvector_dirtree_cursor_t_):
    pass

const_t = ctypes.c_uint64
class struct_action_ctx_base_cur_sel_t(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('from', struct_twinpos_t),
    ('to', struct_twinpos_t),
     ]

class union_action_ctx_base_source_t(Union):
    pass

union_action_ctx_base_source_t._pack_ = 1 # source:False
union_action_ctx_base_source_t._fields_ = [
    ('chooser', ctypes.POINTER(struct_chooser_base_t)),
]

class struct_action_ctx_base_t(Structure):
    pass

struct_action_ctx_base_t._pack_ = 1 # source:False
struct_action_ctx_base_t._fields_ = [
    ('widget', ctypes.POINTER(struct_TWidget)),
    ('widget_type', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('widget_title', qstring),
    ('chooser_selection', sizevec_t),
    ('action', ctypes.POINTER(ctypes.c_char)),
    ('cur_flags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('cur_ea', ctypes.c_uint64),
    ('cur_value', ctypes.c_uint64),
    ('cur_func', ctypes.POINTER(struct_func_t)),
    ('cur_fchunk', ctypes.POINTER(struct_func_t)),
    ('cur_struc', ctypes.POINTER(struct_struc_t)),
    ('cur_strmem', ctypes.POINTER(struct_member_t)),
    ('cur_enum', ctypes.c_uint64),
    ('cur_seg', ctypes.POINTER(struct_segment_t)),
    ('cur_sel', struct_action_ctx_base_cur_sel_t),
    ('regname', ctypes.POINTER(ctypes.c_char)),
    ('focus', ctypes.POINTER(struct_TWidget)),
    ('graph_selection', ctypes.POINTER(struct_screen_graph_selection_t)),
    ('cur_enum_member', ctypes.c_uint64),
    ('dirtree_selection', ctypes.POINTER(struct_dirtree_selection_t)),
    ('source', union_action_ctx_base_source_t),
]

action_activation_ctx_t = struct_action_ctx_base_t
action_update_ctx_t = struct_action_ctx_base_t

# values for enumeration 'action_state_t'
action_state_t__enumvalues = {
    0: 'AST_ENABLE_ALWAYS',
    1: 'AST_ENABLE_FOR_IDB',
    2: 'AST_ENABLE_FOR_WIDGET',
    3: 'AST_ENABLE',
    4: 'AST_DISABLE_ALWAYS',
    5: 'AST_DISABLE_FOR_IDB',
    6: 'AST_DISABLE_FOR_WIDGET',
    7: 'AST_DISABLE',
}
AST_ENABLE_ALWAYS = 0
AST_ENABLE_FOR_IDB = 1
AST_ENABLE_FOR_WIDGET = 2
AST_ENABLE = 3
AST_DISABLE_ALWAYS = 4
AST_DISABLE_FOR_IDB = 5
AST_DISABLE_FOR_WIDGET = 6
AST_DISABLE = 7
action_state_t = ctypes.c_uint32 # enum
class struct_action_handler_t(Structure):
    pass

struct_action_handler_t._pack_ = 1 # source:False
struct_action_handler_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_action_handler_t_vtbl)),
    ('flags', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_action_desc_t(Structure):
    pass

struct_action_desc_t._pack_ = 1 # source:False
struct_action_desc_t._fields_ = [
    ('cb', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('label', ctypes.POINTER(ctypes.c_char)),
    ('handler', ctypes.POINTER(struct_action_handler_t)),
    ('owner', ctypes.POINTER(None)),
    ('shortcut', ctypes.POINTER(ctypes.c_char)),
    ('tooltip', ctypes.POINTER(ctypes.c_char)),
    ('icon', ctypes.c_int32),
    ('flags', ctypes.c_int32),
]


# values for enumeration 'action_attr_t'
action_attr_t__enumvalues = {
    0: 'AA_NONE',
    1: 'AA_LABEL',
    2: 'AA_SHORTCUT',
    3: 'AA_TOOLTIP',
    4: 'AA_ICON',
    5: 'AA_STATE',
    6: 'AA_CHECKABLE',
    7: 'AA_CHECKED',
    8: 'AA_VISIBILITY',
}
AA_NONE = 0
AA_LABEL = 1
AA_SHORTCUT = 2
AA_TOOLTIP = 3
AA_ICON = 4
AA_STATE = 5
AA_CHECKABLE = 6
AA_CHECKED = 7
AA_VISIBILITY = 8
action_attr_t = ctypes.c_uint32 # enum
class struct_custom_viewer_handlers_t(Structure):
    pass

struct_custom_viewer_handlers_t._pack_ = 1 # source:False
struct_custom_viewer_handlers_t._fields_ = [
    ('cb', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('keyboard', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(None))),
    ('popup', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))),
    ('mouse_moved', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.POINTER(struct_view_mouse_event_t), ctypes.POINTER(None))),
    ('click', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.POINTER(None))),
    ('dblclick', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.POINTER(None))),
    ('curpos', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))),
    ('close', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))),
    ('help', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))),
    ('adjust_place', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(None))),
    ('get_place_xcoord', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_place_t), ctypes.POINTER(struct_place_t), ctypes.POINTER(None))),
    ('location_changed', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_locchange_md_t), ctypes.POINTER(None))),
    ('can_navigate', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_locchange_md_t), ctypes.POINTER(None))),
]

class struct___qtimer_t(Structure):
    pass

qtimer_t = ctypes.POINTER(struct___qtimer_t)
class struct_TPopupMenu(Structure):
    pass

class struct_range_marker_suspender_t(Structure):
    pass

struct_range_marker_suspender_t._pack_ = 1 # source:False
struct_range_marker_suspender_t._fields_ = [
    ('backup', ctypes.CFUNCTYPE(None, ctypes.c_uint64, ctypes.c_uint64)),
]

class struct_form_actions_t(Structure):
    pass

struct_form_actions_t._pack_ = 1 # source:False
struct_form_actions_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_form_actions_t_vtbl)),
]


# values for enumeration 'form_actions_t__dlgbtn_t'
form_actions_t__dlgbtn_t__enumvalues = {
    0: 'dbt_yes',
    1: 'dbt_cancel',
    2: 'dbt_no',
}
dbt_yes = 0
dbt_cancel = 1
dbt_no = 2
form_actions_t__dlgbtn_t = ctypes.c_uint32 # enum
_D5FD35C4853277703E798CDE70CE5D9D = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(struct_form_actions_t))
class struct_addon_info_t(Structure):
    pass

struct_addon_info_t._pack_ = 1 # source:False
struct_addon_info_t._fields_ = [
    ('cb', ctypes.c_uint64),
    ('id', ctypes.POINTER(ctypes.c_char)),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('producer', ctypes.POINTER(ctypes.c_char)),
    ('version', ctypes.POINTER(ctypes.c_char)),
    ('url', ctypes.POINTER(ctypes.c_char)),
    ('freeform', ctypes.POINTER(ctypes.c_char)),
    ('custom_data', ctypes.POINTER(None)),
    ('custom_size', ctypes.c_uint64),
]

class struct_strarray_t(Structure):
    pass

struct_strarray_t._pack_ = 1 # source:False
struct_strarray_t._fields_ = [
    ('code', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('text', ctypes.POINTER(ctypes.c_char)),
]


# values for enumeration 'cb_id'
cb_id__enumvalues = {
    4294967295: 'CB_INIT',
    4294967294: 'CB_YES',
    4294967293: 'CB_CLOSE',
    4294967292: 'CB_INVISIBLE',
    4294967291: 'CB_DESTROYING',
}
CB_INIT = 4294967295
CB_YES = 4294967294
CB_CLOSE = 4294967293
CB_INVISIBLE = 4294967292
CB_DESTROYING = 4294967291
cb_id = ctypes.c_uint32 # enum
class struct_xrefblk_t(Structure):
    pass

struct_xrefblk_t._pack_ = 1 # source:False
struct_xrefblk_t._fields_ = [
    ('from', ctypes.c_uint64),
    ('to', ctypes.c_uint64),
    ('iscode', ctypes.c_ubyte),
    ('type', ctypes.c_ubyte),
    ('user', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 5),
]

class struct_qvector_qvector_long_long__(Structure):
    pass

struct_qvector_qvector_long_long__._pack_ = 1 # source:False
struct_qvector_qvector_long_long__._fields_ = [
    ('array', ctypes.POINTER(struct_qvector_long_long_)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_qvector_long_long____iterator = ctypes.POINTER(struct_qvector_long_long_)
qvector_qvector_long_long____const_iterator = ctypes.POINTER(struct_qvector_long_long_)
casevec_t = struct_qvector_qvector_long_long__
class struct_value_u__dq_t(Structure):
    pass

struct_value_u__dq_t._pack_ = 1 # source:False
struct_value_u__dq_t._fields_ = [
    ('low', ctypes.c_uint32),
    ('high', ctypes.c_uint32),
]

class struct_value_u__dt_t(Structure):
    pass

struct_value_u__dt_t._pack_ = 1 # source:False
struct_value_u__dt_t._fields_ = [
    ('low', ctypes.c_uint32),
    ('high', ctypes.c_uint32),
    ('upper', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

class struct_value_u__d128_t(Structure):
    pass

struct_value_u__d128_t._pack_ = 1 # source:False
struct_value_u__d128_t._fields_ = [
    ('low', ctypes.c_uint64),
    ('high', ctypes.c_uint64),
]

class union_value_u(Union):
    pass

union_value_u._pack_ = 1 # source:False
union_value_u._fields_ = [
    ('v_char', ctypes.c_ubyte),
    ('v_short', ctypes.c_uint16),
    ('v_long', ctypes.c_uint32),
    ('v_int64', ctypes.c_uint64),
    ('v_uval', ctypes.c_uint64),
    ('_dq', struct_value_u__dq_t),
    ('dt', struct_value_u__dt_t),
    ('d128', struct_value_u__d128_t),
    ('byte16', ctypes.c_ubyte * 16),
    ('dword3', ctypes.c_uint32 * 3),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_macro_constructor_t(Structure):
    pass

struct_macro_constructor_t._pack_ = 1 # source:False
struct_macro_constructor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_macro_constructor_t_vtbl)),
    ('reserved', ctypes.c_uint64),
]

class struct_qvector_stkpnt_t_(Structure):
    pass

struct_qvector_stkpnt_t_._pack_ = 1 # source:False
struct_qvector_stkpnt_t_._fields_ = [
    ('array', ctypes.POINTER(struct_stkpnt_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

class struct_stkpnts_t(struct_qvector_stkpnt_t_):
    pass

class struct_extlang_t(Structure):
    pass

class struct_syntax_highlighter_t(Structure):
    pass

struct_extlang_t._pack_ = 1 # source:False
struct_extlang_t._fields_ = [
    ('size', ctypes.c_uint64),
    ('flags', ctypes.c_uint32),
    ('refcnt', ctypes.c_int32),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('fileext', ctypes.POINTER(ctypes.c_char)),
    ('highlighter', ctypes.POINTER(struct_syntax_highlighter_t)),
    ('compile_expr', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(ctypes.c_char), ctypes.c_uint64, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct__qstring_char_))),
    ('compile_file', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct__qstring_char_))),
    ('call_func', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_idc_value_t), ctypes.c_uint64, ctypes.POINTER(struct__qstring_char_))),
    ('eval_expr', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.c_uint64, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct__qstring_char_))),
    ('eval_snippet', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct__qstring_char_))),
    ('create_object', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_idc_value_t), ctypes.c_uint64, ctypes.POINTER(struct__qstring_char_))),
    ('get_attr', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(ctypes.c_char))),
    ('set_attr', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_idc_value_t))),
    ('call_method', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_idc_value_t), ctypes.c_uint64, ctypes.POINTER(struct__qstring_char_))),
    ('load_procmod', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct__qstring_char_))),
    ('unload_procmod', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct__qstring_char_))),
]

class struct_gdl_graph_t(Structure):
    pass

struct_gdl_graph_t._pack_ = 1 # source:False
struct_gdl_graph_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_gdl_graph_t_vtbl)),
]

class struct_cancellable_graph_t(struct_gdl_graph_t):
    pass

struct_cancellable_graph_t._pack_ = 1 # source:False
struct_cancellable_graph_t._fields_ = [
    ('cancelled', ctypes.c_char),
    ('padding', ctypes.c_char * 3),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_qvector_qbasic_block_t_(Structure):
    pass

class struct_qbasic_block_t(Structure):
    pass

struct_qvector_qbasic_block_t_._pack_ = 1 # source:False
struct_qvector_qbasic_block_t_._fields_ = [
    ('array', ctypes.POINTER(struct_qbasic_block_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qflow_chart_t__blocks_t = struct_qvector_qbasic_block_t_
class struct_qflow_chart_t(struct_cancellable_graph_t):
    pass

struct_qflow_chart_t._pack_ = 1 # source:False
struct_qflow_chart_t._fields_ = [
    ('title', qstring),
    ('bounds', struct_range_t),
    ('pfn', ctypes.POINTER(struct_func_t)),
    ('flags', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('blocks', qflow_chart_t__blocks_t),
    ('nproper', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

hexdsp_t = ctypes.CFUNCTYPE(ctypes.POINTER(None), ctypes.c_int32)
class struct_ida_movable_type_reg_info_t_(Structure):
    pass

class struct_ida_movable_type_reg_access_t_(Structure):
    pass


# values for enumeration 'setproc_level_t'
setproc_level_t__enumvalues = {
    0: 'SETPROC_IDB',
    1: 'SETPROC_LOADER',
    2: 'SETPROC_LOADER_NON_FATAL',
    3: 'SETPROC_USER',
}
SETPROC_IDB = 0
SETPROC_LOADER = 1
SETPROC_LOADER_NON_FATAL = 2
SETPROC_USER = 3
setproc_level_t = ctypes.c_uint32 # enum

# values for enumeration 'idb_event__event_code_t'
idb_event__event_code_t__enumvalues = {
    0: 'closebase',
    1: 'savebase',
    2: 'upgraded',
    3: 'auto_empty',
    4: 'auto_empty_finally',
    5: 'determined_main',
    6: 'local_types_changed',
    7: 'extlang_changed',
    8: 'idasgn_loaded',
    9: 'kernel_config_loaded',
    10: 'loader_finished',
    11: 'flow_chart_created',
    12: 'compiler_changed',
    13: 'changing_ti',
    14: 'ti_changed',
    15: 'changing_op_ti',
    16: 'op_ti_changed',
    17: 'changing_op_type',
    18: 'op_type_changed',
    19: 'enum_created',
    20: 'deleting_enum',
    21: 'enum_deleted',
    22: 'renaming_enum',
    23: 'enum_renamed',
    24: 'changing_enum_bf',
    25: 'enum_bf_changed',
    26: 'changing_enum_cmt',
    27: 'enum_cmt_changed',
    28: 'enum_member_created',
    29: 'deleting_enum_member',
    30: 'enum_member_deleted',
    31: 'struc_created',
    32: 'deleting_struc',
    33: 'struc_deleted',
    34: 'changing_struc_align',
    35: 'struc_align_changed',
    36: 'renaming_struc',
    37: 'struc_renamed',
    38: 'expanding_struc',
    39: 'struc_expanded',
    40: 'struc_member_created',
    41: 'deleting_struc_member',
    42: 'struc_member_deleted',
    43: 'renaming_struc_member',
    44: 'struc_member_renamed',
    45: 'changing_struc_member',
    46: 'struc_member_changed',
    47: 'changing_struc_cmt',
    48: 'struc_cmt_changed',
    49: 'segm_added',
    50: 'deleting_segm',
    51: 'segm_deleted',
    52: 'changing_segm_start',
    53: 'segm_start_changed',
    54: 'changing_segm_end',
    55: 'segm_end_changed',
    56: 'changing_segm_name',
    57: 'segm_name_changed',
    58: 'changing_segm_class',
    59: 'segm_class_changed',
    60: 'segm_attrs_updated',
    61: 'segm_moved',
    62: 'allsegs_moved',
    63: 'func_added',
    64: 'func_updated',
    65: 'set_func_start',
    66: 'set_func_end',
    67: 'deleting_func',
    68: 'frame_deleted',
    69: 'thunk_func_created',
    70: 'func_tail_appended',
    71: 'deleting_func_tail',
    72: 'func_tail_deleted',
    73: 'tail_owner_changed',
    74: 'func_noret_changed',
    75: 'stkpnts_changed',
    76: 'updating_tryblks',
    77: 'tryblks_updated',
    78: 'deleting_tryblks',
    79: 'sgr_changed',
    80: 'make_code',
    81: 'make_data',
    82: 'destroyed_items',
    83: 'renamed',
    84: 'byte_patched',
    85: 'changing_cmt',
    86: 'cmt_changed',
    87: 'changing_range_cmt',
    88: 'range_cmt_changed',
    89: 'extra_cmt_changed',
    90: 'item_color_changed',
    91: 'callee_addr_changed',
    92: 'bookmark_changed',
    93: 'sgr_deleted',
    94: 'adding_segm',
    95: 'func_deleted',
    96: 'dirtree_mkdir',
    97: 'dirtree_rmdir',
    98: 'dirtree_link',
    99: 'dirtree_move',
    100: 'dirtree_rank',
    101: 'dirtree_rminode',
    102: 'dirtree_segm_moved',
    103: 'enum_width_changed',
    104: 'enum_flag_changed',
    105: 'enum_ordinal_changed',
}
closebase = 0
savebase = 1
upgraded = 2
auto_empty = 3
auto_empty_finally = 4
determined_main = 5
local_types_changed = 6
extlang_changed = 7
idasgn_loaded = 8
kernel_config_loaded = 9
loader_finished = 10
flow_chart_created = 11
compiler_changed = 12
changing_ti = 13
ti_changed = 14
changing_op_ti = 15
op_ti_changed = 16
changing_op_type = 17
op_type_changed = 18
enum_created = 19
deleting_enum = 20
enum_deleted = 21
renaming_enum = 22
enum_renamed = 23
changing_enum_bf = 24
enum_bf_changed = 25
changing_enum_cmt = 26
enum_cmt_changed = 27
enum_member_created = 28
deleting_enum_member = 29
enum_member_deleted = 30
struc_created = 31
deleting_struc = 32
struc_deleted = 33
changing_struc_align = 34
struc_align_changed = 35
renaming_struc = 36
struc_renamed = 37
expanding_struc = 38
struc_expanded = 39
struc_member_created = 40
deleting_struc_member = 41
struc_member_deleted = 42
renaming_struc_member = 43
struc_member_renamed = 44
changing_struc_member = 45
struc_member_changed = 46
changing_struc_cmt = 47
struc_cmt_changed = 48
segm_added = 49
deleting_segm = 50
segm_deleted = 51
changing_segm_start = 52
segm_start_changed = 53
changing_segm_end = 54
segm_end_changed = 55
changing_segm_name = 56
segm_name_changed = 57
changing_segm_class = 58
segm_class_changed = 59
segm_attrs_updated = 60
segm_moved = 61
allsegs_moved = 62
func_added = 63
func_updated = 64
set_func_start = 65
set_func_end = 66
deleting_func = 67
frame_deleted = 68
thunk_func_created = 69
func_tail_appended = 70
deleting_func_tail = 71
func_tail_deleted = 72
tail_owner_changed = 73
func_noret_changed = 74
stkpnts_changed = 75
updating_tryblks = 76
tryblks_updated = 77
deleting_tryblks = 78
sgr_changed = 79
make_code = 80
make_data = 81
destroyed_items = 82
renamed = 83
byte_patched = 84
changing_cmt = 85
cmt_changed = 86
changing_range_cmt = 87
range_cmt_changed = 88
extra_cmt_changed = 89
item_color_changed = 90
callee_addr_changed = 91
bookmark_changed = 92
sgr_deleted = 93
adding_segm = 94
func_deleted = 95
dirtree_mkdir = 96
dirtree_rmdir = 97
dirtree_link = 98
dirtree_move = 99
dirtree_rank = 100
dirtree_rminode = 101
dirtree_segm_moved = 102
enum_width_changed = 103
enum_flag_changed = 104
enum_ordinal_changed = 105
idb_event__event_code_t = ctypes.c_uint32 # enum
pid_t = ctypes.c_int32
thid_t = ctypes.c_int32
class struct_process_info_t(Structure):
    pass

struct_process_info_t._pack_ = 1 # source:False
struct_process_info_t._fields_ = [
    ('pid', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('name', qstring),
]

class struct_ida_movable_type_process_info_t_(Structure):
    pass

class struct_qvector_process_info_t_(Structure):
    pass

struct_qvector_process_info_t_._pack_ = 1 # source:False
struct_qvector_process_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_process_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_process_info_t___iterator = ctypes.POINTER(struct_process_info_t)
qvector_process_info_t___const_iterator = ctypes.POINTER(struct_process_info_t)
procinfo_vec_t = struct_qvector_process_info_t_
class struct_debapp_attrs_t(Structure):
    pass

struct_debapp_attrs_t._pack_ = 1 # source:False
struct_debapp_attrs_t._fields_ = [
    ('cbsize', ctypes.c_int32),
    ('addrsize', ctypes.c_int32),
    ('platform', qstring),
    ('is_be', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

register_class_t = ctypes.c_ubyte
class struct_register_info_t(Structure):
    pass

struct_register_info_t._pack_ = 1 # source:False
struct_register_info_t._fields_ = [
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('flags', ctypes.c_uint32),
    ('register_class', ctypes.c_ubyte),
    ('dtype', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('bit_strings', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('default_bit_strings_mask', ctypes.c_uint64),
]

class struct_ida_movable_type_register_info_t_(Structure):
    pass

class struct_qvector_register_info_t_(Structure):
    pass

struct_qvector_register_info_t_._pack_ = 1 # source:False
struct_qvector_register_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_register_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_register_info_t___iterator = ctypes.POINTER(struct_register_info_t)
qvector_register_info_t___const_iterator = ctypes.POINTER(struct_register_info_t)
register_info_vec_t = struct_qvector_register_info_t_
class struct_qvector_const_char__P_(Structure):
    pass

struct_qvector_const_char__P_._pack_ = 1 # source:False
struct_qvector_const_char__P_._fields_ = [
    ('array', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

dynamic_register_set_t__const_char_vec_t = struct_qvector_const_char__P_
class struct_qvector_qvector_const_char__P__(Structure):
    pass

struct_qvector_qvector_const_char__P__._pack_ = 1 # source:False
struct_qvector_qvector_const_char__P__._fields_ = [
    ('array', ctypes.POINTER(struct_qvector_const_char__P_)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

class struct_dynamic_register_set_t(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('ri_vec', register_info_vec_t),
    ('strvec', qstrvec_t),
    ('classname_ptrs', dynamic_register_set_t__const_char_vec_t),
    ('bit_strings_ptrs_vec', struct_qvector_qvector_const_char__P__),
     ]

qvector_const_char__P___iterator = ctypes.POINTER(ctypes.POINTER(ctypes.c_char))
qvector_const_char__P___const_iterator = ctypes.POINTER(ctypes.POINTER(ctypes.c_char))
qvector_qvector_const_char__P____iterator = ctypes.POINTER(struct_qvector_const_char__P_)
qvector_qvector_const_char__P____const_iterator = ctypes.POINTER(struct_qvector_const_char__P_)
class struct_memory_info_t(struct_range_t):
    pass

struct_memory_info_t._pack_ = 1 # source:False
struct_memory_info_t._fields_ = [
    ('name', qstring),
    ('sclass', qstring),
    ('sbase', ctypes.c_uint64),
    ('bitness', ctypes.c_ubyte),
    ('perm', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

class struct_ida_movable_type_memory_info_t_(Structure):
    pass

class struct_qvector_memory_info_t_(Structure):
    pass

struct_qvector_memory_info_t_._pack_ = 1 # source:False
struct_qvector_memory_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_memory_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_memory_info_t___iterator = ctypes.POINTER(struct_memory_info_t)
qvector_memory_info_t___const_iterator = ctypes.POINTER(struct_memory_info_t)
meminfo_vec_t = struct_qvector_memory_info_t_
class struct_scattered_segm_t(struct_range_t):
    _pack_ = 1 # source:False
    _fields_ = [
    ('name', qstring),
     ]

class struct_ida_movable_type_scattered_segm_t_(Structure):
    pass

class struct_qvector_scattered_segm_t_(Structure):
    pass

struct_qvector_scattered_segm_t_._pack_ = 1 # source:False
struct_qvector_scattered_segm_t_._fields_ = [
    ('array', ctypes.POINTER(struct_scattered_segm_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_scattered_segm_t___iterator = ctypes.POINTER(struct_scattered_segm_t)
qvector_scattered_segm_t___const_iterator = ctypes.POINTER(struct_scattered_segm_t)
scattered_image_t = struct_qvector_scattered_segm_t_

# values for enumeration 'event_id_t'
event_id_t__enumvalues = {
    0: 'NO_EVENT',
    1: 'PROCESS_STARTED',
    2: 'PROCESS_EXITED',
    4: 'THREAD_STARTED',
    8: 'THREAD_EXITED',
    16: 'BREAKPOINT',
    32: 'STEP',
    64: 'EXCEPTION',
    128: 'LIB_LOADED',
    256: 'LIB_UNLOADED',
    512: 'INFORMATION',
    1024: 'PROCESS_ATTACHED',
    2048: 'PROCESS_DETACHED',
    4096: 'PROCESS_SUSPENDED',
    8192: 'TRACE_FULL',
}
NO_EVENT = 0
PROCESS_STARTED = 1
PROCESS_EXITED = 2
THREAD_STARTED = 4
THREAD_EXITED = 8
BREAKPOINT = 16
STEP = 32
EXCEPTION = 64
LIB_LOADED = 128
LIB_UNLOADED = 256
INFORMATION = 512
PROCESS_ATTACHED = 1024
PROCESS_DETACHED = 2048
PROCESS_SUSPENDED = 4096
TRACE_FULL = 8192
event_id_t = ctypes.c_uint32 # enum
class struct_debug_event_t(Structure):
    pass

struct_debug_event_t._pack_ = 1 # source:False
struct_debug_event_t._fields_ = [
    ('pid', ctypes.c_int32),
    ('tid', ctypes.c_int32),
    ('ea', ctypes.c_uint64),
    ('handled', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('_eid', event_id_t),
    ('bytes', ctypes.c_char * 48),
]

class struct_modinfo_t(Structure):
    pass

struct_modinfo_t._pack_ = 1 # source:False
struct_modinfo_t._fields_ = [
    ('name', qstring),
    ('base', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
    ('rebase_to', ctypes.c_uint64),
]

class struct_ida_movable_type_modinfo_t_(Structure):
    pass

class struct_qvector_modinfo_t_(Structure):
    pass

struct_qvector_modinfo_t_._pack_ = 1 # source:False
struct_qvector_modinfo_t_._fields_ = [
    ('array', ctypes.POINTER(struct_modinfo_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_modinfo_t___iterator = ctypes.POINTER(struct_modinfo_t)
qvector_modinfo_t___const_iterator = ctypes.POINTER(struct_modinfo_t)
modinfovec_t = struct_qvector_modinfo_t_
class struct_bptaddr_t(Structure):
    pass

struct_bptaddr_t._pack_ = 1 # source:False
struct_bptaddr_t._fields_ = [
    ('hea', ctypes.c_uint64),
    ('kea', ctypes.c_uint64),
]

class struct_excinfo_t(Structure):
    pass

struct_excinfo_t._pack_ = 1 # source:False
struct_excinfo_t._fields_ = [
    ('code', ctypes.c_uint32),
    ('can_cont', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('ea', ctypes.c_uint64),
    ('info', qstring),
]

class struct_ida_movable_type_debug_event_t_(Structure):
    pass

bpttype_t = ctypes.c_int32
class struct_exception_info_t(Structure):
    pass

struct_exception_info_t._pack_ = 1 # source:False
struct_exception_info_t._fields_ = [
    ('code', ctypes.c_uint32),
    ('flags', ctypes.c_uint32),
    ('name', qstring),
    ('desc', qstring),
]

class struct_ida_movable_type_exception_info_t_(Structure):
    pass

class struct_qvector_exception_info_t_(Structure):
    pass

struct_qvector_exception_info_t_._pack_ = 1 # source:False
struct_qvector_exception_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_exception_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_exception_info_t___iterator = ctypes.POINTER(struct_exception_info_t)
qvector_exception_info_t___const_iterator = ctypes.POINTER(struct_exception_info_t)
excvec_t = struct_qvector_exception_info_t_
class struct_ida_movable_type_regval_t_(Structure):
    pass

class struct_qvector_regval_t_(Structure):
    pass

struct_qvector_regval_t_._pack_ = 1 # source:False
struct_qvector_regval_t_._fields_ = [
    ('array', ctypes.POINTER(struct_regval_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_regval_t___iterator = ctypes.POINTER(struct_regval_t)
qvector_regval_t___const_iterator = ctypes.POINTER(struct_regval_t)
regvals_t = struct_qvector_regval_t_
class struct_ida_movable_type_call_stack_info_t_(Structure):
    pass


# values for enumeration 'gdecode_t'
gdecode_t__enumvalues = {
    4294967295: 'GDE_ERROR',
    0: 'GDE_NO_EVENT',
    1: 'GDE_ONE_EVENT',
    2: 'GDE_MANY_EVENTS',
}
GDE_ERROR = 4294967295
GDE_NO_EVENT = 0
GDE_ONE_EVENT = 1
GDE_MANY_EVENTS = 2
gdecode_t = ctypes.c_uint32 # enum
class struct_update_bpt_info_t(Structure):
    pass

struct_update_bpt_info_t._pack_ = 1 # source:False
struct_update_bpt_info_t._fields_ = [
    ('ea', ctypes.c_uint64),
    ('orgbytes', struct_bytevec_t),
    ('type', ctypes.c_int32),
    ('size', ctypes.c_int32),
    ('code', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('pid', ctypes.c_int32),
    ('tid', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

class struct_ida_movable_type_update_bpt_info_t_(Structure):
    pass

class struct_qvector_update_bpt_info_t_(Structure):
    pass

struct_qvector_update_bpt_info_t_._pack_ = 1 # source:False
struct_qvector_update_bpt_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_update_bpt_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_update_bpt_info_t___iterator = ctypes.POINTER(struct_update_bpt_info_t)
qvector_update_bpt_info_t___const_iterator = ctypes.POINTER(struct_update_bpt_info_t)
update_bpt_vec_t = struct_qvector_update_bpt_info_t_
class struct_lowcnd_t(Structure):
    pass

struct_lowcnd_t._pack_ = 1 # source:False
struct_lowcnd_t._fields_ = [
    ('ea', ctypes.c_uint64),
    ('cndbody', qstring),
    ('type', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('orgbytes', struct_bytevec_t),
    ('cmd', struct_insn_t),
    ('compiled', ctypes.c_char),
    ('PADDING_1', ctypes.c_ubyte * 3),
    ('size', ctypes.c_int32),
]

class struct_qvector_lowcnd_t_(Structure):
    pass

struct_qvector_lowcnd_t_._pack_ = 1 # source:False
struct_qvector_lowcnd_t_._fields_ = [
    ('array', ctypes.POINTER(struct_lowcnd_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_lowcnd_t___iterator = ctypes.POINTER(struct_lowcnd_t)
qvector_lowcnd_t___const_iterator = ctypes.POINTER(struct_lowcnd_t)
lowcnd_vec_t = struct_qvector_lowcnd_t_
class struct_thread_name_t(Structure):
    pass

struct_thread_name_t._pack_ = 1 # source:False
struct_thread_name_t._fields_ = [
    ('tid', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('name', qstring),
]

class struct_qvector_thread_name_t_(Structure):
    pass

struct_qvector_thread_name_t_._pack_ = 1 # source:False
struct_qvector_thread_name_t_._fields_ = [
    ('array', ctypes.POINTER(struct_thread_name_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_thread_name_t___iterator = ctypes.POINTER(struct_thread_name_t)
qvector_thread_name_t___const_iterator = ctypes.POINTER(struct_thread_name_t)
thread_name_vec_t = struct_qvector_thread_name_t_

# values for enumeration 'resume_mode_t'
resume_mode_t__enumvalues = {
    0: 'RESMOD_NONE',
    1: 'RESMOD_INTO',
    2: 'RESMOD_OVER',
    3: 'RESMOD_OUT',
    4: 'RESMOD_SRCINTO',
    5: 'RESMOD_SRCOVER',
    6: 'RESMOD_SRCOUT',
    7: 'RESMOD_USER',
    8: 'RESMOD_HANDLE',
    9: 'RESMOD_MAX',
}
RESMOD_NONE = 0
RESMOD_INTO = 1
RESMOD_OVER = 2
RESMOD_OUT = 3
RESMOD_SRCINTO = 4
RESMOD_SRCOVER = 5
RESMOD_SRCOUT = 6
RESMOD_USER = 7
RESMOD_HANDLE = 8
RESMOD_MAX = 9
resume_mode_t = ctypes.c_uint32 # enum

# values for enumeration 'drc_t'
drc_t__enumvalues = {
    3: 'DRC_EVENTS',
    2: 'DRC_CRC',
    1: 'DRC_OK',
    0: 'DRC_NONE',
    4294967295: 'DRC_FAILED',
    4294967294: 'DRC_NETERR',
    4294967293: 'DRC_NOFILE',
    4294967292: 'DRC_IDBSEG',
    4294967291: 'DRC_NOPROC',
    4294967290: 'DRC_NOCHG',
    4294967289: 'DRC_ERROR',
}
DRC_EVENTS = 3
DRC_CRC = 2
DRC_OK = 1
DRC_NONE = 0
DRC_FAILED = 4294967295
DRC_NETERR = 4294967294
DRC_NOFILE = 4294967293
DRC_IDBSEG = 4294967292
DRC_NOPROC = 4294967291
DRC_NOCHG = 4294967290
DRC_ERROR = 4294967289
drc_t = ctypes.c_uint32 # enum
class struct_debugger_t(Structure):
    pass

struct_debugger_t._pack_ = 1 # source:False
struct_debugger_t._fields_ = [
    ('version', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('id', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('processor', ctypes.POINTER(ctypes.c_char)),
    ('flags', ctypes.c_uint32),
    ('flags2', ctypes.c_uint32),
    ('regclasses', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('default_regclasses', ctypes.c_int32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('registers', ctypes.POINTER(struct_register_info_t)),
    ('nregs', ctypes.c_int32),
    ('memory_page_size', ctypes.c_int32),
    ('bpt_bytes', ctypes.POINTER(ctypes.c_ubyte)),
    ('bpt_size', ctypes.c_ubyte),
    ('filetype', ctypes.c_ubyte),
    ('resume_modes', ctypes.c_uint16),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('set_dbg_options', ctypes.CFUNCTYPE(ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(None))),
    ('callback', ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(None), ctypes.c_int32, ctypes.POINTER(ctypes.c_char))),
]


# values for enumeration 'debugger_t__event_t'
debugger_t__event_t__enumvalues = {
    0: 'ev_init_debugger',
    1: 'ev_term_debugger',
    2: 'ev_get_processes',
    3: 'ev_start_process',
    4: 'ev_attach_process',
    5: 'ev_detach_process',
    6: 'ev_get_debapp_attrs',
    7: 'ev_rebase_if_required_to',
    8: 'ev_request_pause',
    9: 'ev_exit_process',
    10: 'ev_get_debug_event',
    11: 'ev_resume',
    12: 'ev_set_exception_info',
    13: 'ev_suspended',
    14: 'ev_thread_suspend',
    15: 'ev_thread_continue',
    16: 'ev_set_resume_mode',
    17: 'ev_read_registers',
    18: 'ev_write_register',
    19: 'ev_thread_get_sreg_base',
    20: 'ev_get_memory_info',
    21: 'ev_read_memory',
    22: 'ev_write_memory',
    23: 'ev_check_bpt',
    24: 'ev_update_bpts',
    25: 'ev_update_lowcnds',
    26: 'ev_open_file',
    27: 'ev_close_file',
    28: 'ev_read_file',
    29: 'ev_write_file',
    30: 'ev_map_address',
    31: 'ev_get_debmod_extensions',
    32: 'ev_update_call_stack',
    33: 'ev_appcall',
    34: 'ev_cleanup_appcall',
    35: 'ev_eval_lowcnd',
    36: 'ev_send_ioctl',
    37: 'ev_dbg_enable_trace',
    38: 'ev_is_tracing_enabled',
    39: 'ev_rexec',
    40: 'ev_get_srcinfo_path',
    41: 'ev_bin_search',
}
ev_init_debugger = 0
ev_term_debugger = 1
ev_get_processes = 2
ev_start_process = 3
ev_attach_process = 4
ev_detach_process = 5
ev_get_debapp_attrs = 6
ev_rebase_if_required_to = 7
ev_request_pause = 8
ev_exit_process = 9
ev_get_debug_event = 10
ev_resume = 11
ev_set_exception_info = 12
ev_suspended = 13
ev_thread_suspend = 14
ev_thread_continue = 15
ev_set_resume_mode = 16
ev_read_registers = 17
ev_write_register = 18
ev_thread_get_sreg_base = 19
ev_get_memory_info = 20
ev_read_memory = 21
ev_write_memory = 22
ev_check_bpt = 23
ev_update_bpts = 24
ev_update_lowcnds = 25
ev_open_file = 26
ev_close_file = 27
ev_read_file = 28
ev_write_file = 29
ev_map_address = 30
ev_get_debmod_extensions = 31
ev_update_call_stack = 32
ev_appcall = 33
ev_cleanup_appcall = 34
ev_eval_lowcnd = 35
ev_send_ioctl = 36
ev_dbg_enable_trace = 37
ev_is_tracing_enabled = 38
ev_rexec = 39
ev_get_srcinfo_path = 40
ev_bin_search = 41
debugger_t__event_t = ctypes.c_uint32 # enum

# values for enumeration 'dbg_notification_t'
dbg_notification_t__enumvalues = {
    0: 'dbg_null',
    1: 'dbg_process_start',
    2: 'dbg_process_exit',
    3: 'dbg_process_attach',
    4: 'dbg_process_detach',
    5: 'dbg_thread_start',
    6: 'dbg_thread_exit',
    7: 'dbg_library_load',
    8: 'dbg_library_unload',
    9: 'dbg_information',
    10: 'dbg_exception',
    11: 'dbg_suspend_process',
    12: 'dbg_bpt',
    13: 'dbg_trace',
    14: 'dbg_request_error',
    15: 'dbg_step_into',
    16: 'dbg_step_over',
    17: 'dbg_run_to',
    18: 'dbg_step_until_ret',
    19: 'dbg_bpt_changed',
    20: 'dbg_started_loading_bpts',
    21: 'dbg_finished_loading_bpts',
    22: 'dbg_last',
}
dbg_null = 0
dbg_process_start = 1
dbg_process_exit = 2
dbg_process_attach = 3
dbg_process_detach = 4
dbg_thread_start = 5
dbg_thread_exit = 6
dbg_library_load = 7
dbg_library_unload = 8
dbg_information = 9
dbg_exception = 10
dbg_suspend_process = 11
dbg_bpt = 12
dbg_trace = 13
dbg_request_error = 14
dbg_step_into = 15
dbg_step_over = 16
dbg_run_to = 17
dbg_step_until_ret = 18
dbg_bpt_changed = 19
dbg_started_loading_bpts = 20
dbg_finished_loading_bpts = 21
dbg_last = 22
dbg_notification_t = ctypes.c_uint32 # enum

# values for enumeration 'bpt_loctype_t'
bpt_loctype_t__enumvalues = {
    0: 'BPLT_ABS',
    1: 'BPLT_REL',
    2: 'BPLT_SYM',
    3: 'BPLT_SRC',
}
BPLT_ABS = 0
BPLT_REL = 1
BPLT_SYM = 2
BPLT_SRC = 3
bpt_loctype_t = ctypes.c_uint32 # enum
class struct_bpt_location_t(Structure):
    pass

struct_bpt_location_t._pack_ = 1 # source:False
struct_bpt_location_t._fields_ = [
    ('info', ctypes.c_uint64),
    ('index', ctypes.c_int32),
    ('loctype', bpt_loctype_t),
]

class struct_bpt_t(Structure):
    pass

struct_bpt_t._pack_ = 1 # source:False
struct_bpt_t._fields_ = [
    ('cb', ctypes.c_uint64),
    ('cndbody', qstring),
    ('loc', struct_bpt_location_t),
    ('pid', ctypes.c_int32),
    ('tid', ctypes.c_int32),
    ('ea', ctypes.c_uint64),
    ('type', ctypes.c_int32),
    ('pass_count', ctypes.c_int32),
    ('flags', ctypes.c_uint32),
    ('props', ctypes.c_uint32),
    ('size', ctypes.c_int32),
    ('cndidx', ctypes.c_int32),
    ('bptid', ctypes.c_uint64),
]

class struct_movbpt_info_t(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('from', struct_bpt_location_t),
    ('to', struct_bpt_location_t),
     ]

class struct_qvector_movbpt_info_t_(Structure):
    pass

struct_qvector_movbpt_info_t_._pack_ = 1 # source:False
struct_qvector_movbpt_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_movbpt_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_movbpt_info_t___iterator = ctypes.POINTER(struct_movbpt_info_t)
qvector_movbpt_info_t___const_iterator = ctypes.POINTER(struct_movbpt_info_t)
movbpt_infos_t = struct_qvector_movbpt_info_t_
class struct_qvector_const_bpt_t__P_(Structure):
    pass

struct_qvector_const_bpt_t__P_._pack_ = 1 # source:False
struct_qvector_const_bpt_t__P_._fields_ = [
    ('array', ctypes.POINTER(ctypes.POINTER(struct_bpt_t))),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_const_bpt_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_bpt_t))
qvector_const_bpt_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_bpt_t))
bpt_constptr_vec_t = struct_qvector_const_bpt_t__P_
class struct_qvector_bpt_t__P_(Structure):
    pass

struct_qvector_bpt_t__P_._pack_ = 1 # source:False
struct_qvector_bpt_t__P_._fields_ = [
    ('array', ctypes.POINTER(ctypes.POINTER(struct_bpt_t))),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_bpt_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_bpt_t))
qvector_bpt_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_bpt_t))
bptptr_vec_t = struct_qvector_bpt_t__P_
class struct_qvector_bpt_t_(Structure):
    pass

struct_qvector_bpt_t_._pack_ = 1 # source:False
struct_qvector_bpt_t_._fields_ = [
    ('array', ctypes.POINTER(struct_bpt_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_bpt_t___iterator = ctypes.POINTER(struct_bpt_t)
qvector_bpt_t___const_iterator = ctypes.POINTER(struct_bpt_t)
bpt_vec_t = struct_qvector_bpt_t_

# values for enumeration 'movbpt_code_t'
movbpt_code_t__enumvalues = {
    0: 'MOVBPT_OK',
    1: 'MOVBPT_NOT_FOUND',
    2: 'MOVBPT_DEST_BUSY',
    3: 'MOVBPT_BAD_TYPE',
}
MOVBPT_OK = 0
MOVBPT_NOT_FOUND = 1
MOVBPT_DEST_BUSY = 2
MOVBPT_BAD_TYPE = 3
movbpt_code_t = ctypes.c_uint32 # enum
class struct_qvector_movbpt_code_t_(Structure):
    pass

struct_qvector_movbpt_code_t_._pack_ = 1 # source:False
struct_qvector_movbpt_code_t_._fields_ = [
    ('array', ctypes.POINTER(movbpt_code_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_movbpt_code_t___iterator = ctypes.POINTER(movbpt_code_t)
qvector_movbpt_code_t___const_iterator = ctypes.POINTER(movbpt_code_t)
movbpt_codes_t = struct_qvector_movbpt_code_t_
class struct_bptaddrs_t(struct_qvector_unsigned_long_long_):
    pass

struct_bptaddrs_t._pack_ = 1 # source:False
struct_bptaddrs_t._fields_ = [
    ('bpt', ctypes.POINTER(struct_bpt_t)),
]

class struct_qvector_bptaddrs_t_(Structure):
    pass

struct_qvector_bptaddrs_t_._pack_ = 1 # source:False
struct_qvector_bptaddrs_t_._fields_ = [
    ('array', ctypes.POINTER(struct_bptaddrs_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_bptaddrs_t___iterator = ctypes.POINTER(struct_bptaddrs_t)
qvector_bptaddrs_t___const_iterator = ctypes.POINTER(struct_bptaddrs_t)
bpteas_t = struct_qvector_bptaddrs_t_
class struct_ida_movable_type_bpt_location_t_(Structure):
    pass

class struct_ida_movable_type_bpt_t_(Structure):
    pass

class struct_ida_movable_type_movbpt_info_t_(Structure):
    pass

class struct_bpt_visitor_t(Structure):
    pass

struct_bpt_visitor_t._pack_ = 1 # source:False
struct_bpt_visitor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_bpt_visitor_t_vtbl)),
    ('range', struct_range_t),
    ('name', ctypes.POINTER(ctypes.c_char)),
]


# values for enumeration 'tev_type_t'
tev_type_t__enumvalues = {
    0: 'tev_none',
    1: 'tev_insn',
    2: 'tev_call',
    3: 'tev_ret',
    4: 'tev_bpt',
    5: 'tev_mem',
    6: 'tev_event',
    7: 'tev_max',
}
tev_none = 0
tev_insn = 1
tev_call = 2
tev_ret = 3
tev_bpt = 4
tev_mem = 5
tev_event = 6
tev_max = 7
tev_type_t = ctypes.c_uint32 # enum
class struct_qvector_debug_event_t_(Structure):
    pass

struct_qvector_debug_event_t_._pack_ = 1 # source:False
struct_qvector_debug_event_t_._fields_ = [
    ('array', ctypes.POINTER(struct_debug_event_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_debug_event_t___iterator = ctypes.POINTER(struct_debug_event_t)
qvector_debug_event_t___const_iterator = ctypes.POINTER(struct_debug_event_t)
dbgevt_vec_t = struct_qvector_debug_event_t_
class struct_tev_info_t(Structure):
    pass

struct_tev_info_t._pack_ = 1 # source:False
struct_tev_info_t._fields_ = [
    ('type', tev_type_t),
    ('tid', ctypes.c_int32),
    ('ea', ctypes.c_uint64),
]

class struct_qvector_tev_info_t_(Structure):
    pass

struct_qvector_tev_info_t_._pack_ = 1 # source:False
struct_qvector_tev_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_tev_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_tev_info_t___iterator = ctypes.POINTER(struct_tev_info_t)
qvector_tev_info_t___const_iterator = ctypes.POINTER(struct_tev_info_t)
tevinfo_vec_t = struct_qvector_tev_info_t_
class struct_memreg_info_t(Structure):
    pass

struct_memreg_info_t._pack_ = 1 # source:False
struct_memreg_info_t._fields_ = [
    ('ea', ctypes.c_uint64),
    ('bytes', struct_bytevec_t),
]

class struct_ida_movable_type_memreg_info_t_(Structure):
    pass

class struct_qvector_memreg_info_t_(Structure):
    pass

struct_qvector_memreg_info_t_._pack_ = 1 # source:False
struct_qvector_memreg_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_memreg_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_memreg_info_t___iterator = ctypes.POINTER(struct_memreg_info_t)
qvector_memreg_info_t___const_iterator = ctypes.POINTER(struct_memreg_info_t)
memreg_infos_t = struct_qvector_memreg_info_t_
class struct_tev_reg_value_t(Structure):
    pass

struct_tev_reg_value_t._pack_ = 1 # source:False
struct_tev_reg_value_t._fields_ = [
    ('value', struct_regval_t),
    ('reg_idx', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_ida_movable_type_tev_reg_value_t_(Structure):
    pass

class struct_qvector_tev_reg_value_t_(Structure):
    pass

struct_qvector_tev_reg_value_t_._pack_ = 1 # source:False
struct_qvector_tev_reg_value_t_._fields_ = [
    ('array', ctypes.POINTER(struct_tev_reg_value_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_tev_reg_value_t___iterator = ctypes.POINTER(struct_tev_reg_value_t)
qvector_tev_reg_value_t___const_iterator = ctypes.POINTER(struct_tev_reg_value_t)
tev_reg_values_t = struct_qvector_tev_reg_value_t_
class struct_tev_info_reg_t(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('info', struct_tev_info_t),
    ('registers', tev_reg_values_t),
     ]

class struct_ida_movable_type_tev_info_reg_t_(Structure):
    pass

class struct_qvector_tev_info_reg_t_(Structure):
    pass

struct_qvector_tev_info_reg_t_._pack_ = 1 # source:False
struct_qvector_tev_info_reg_t_._fields_ = [
    ('array', ctypes.POINTER(struct_tev_info_reg_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_tev_info_reg_t___iterator = ctypes.POINTER(struct_tev_info_reg_t)
qvector_tev_info_reg_t___const_iterator = ctypes.POINTER(struct_tev_info_reg_t)
tevinforeg_vec_t = struct_qvector_tev_info_reg_t_

# values for enumeration 'save_reg_values_t'
save_reg_values_t__enumvalues = {
    0: 'SAVE_ALL_VALUES',
    1: 'SAVE_DIFF',
    2: 'SAVE_NONE',
}
SAVE_ALL_VALUES = 0
SAVE_DIFF = 1
SAVE_NONE = 2
save_reg_values_t = ctypes.c_uint32 # enum

# values for enumeration 'dbg_event_code_t'
dbg_event_code_t__enumvalues = {
    4294967294: 'DEC_NOTASK',
    4294967295: 'DEC_ERROR',
    0: 'DEC_TIMEOUT',
}
DEC_NOTASK = 4294967294
DEC_ERROR = 4294967295
DEC_TIMEOUT = 0
dbg_event_code_t = ctypes.c_uint32 # enum
class struct_srcinfo_provider_t(Structure):
    pass

struct_srcinfo_provider_t._pack_ = 1 # source:False
struct_srcinfo_provider_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_srcinfo_provider_t_vtbl)),
    ('cb', ctypes.c_uint64),
    ('flags', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('display_name', ctypes.POINTER(ctypes.c_char)),
]

class struct_source_item_t(struct_qrefcnt_obj_t):
    pass

class struct_qrefcnt_t_source_item_t_(Structure):
    pass

struct_qrefcnt_t_source_item_t_._pack_ = 1 # source:False
struct_qrefcnt_t_source_item_t_._fields_ = [
    ('ptr', ctypes.POINTER(struct_source_item_t)),
]

source_item_ptr = struct_qrefcnt_t_source_item_t_
class struct_qiterator_qrefcnt_t_source_item_t__(struct_qrefcnt_obj_t):
    pass

_source_item_iterator = struct_qiterator_qrefcnt_t_source_item_t__
class struct_qrefcnt_t_qiterator_qrefcnt_t_source_item_t___(Structure):
    pass

struct_qrefcnt_t_qiterator_qrefcnt_t_source_item_t___._pack_ = 1 # source:False
struct_qrefcnt_t_qiterator_qrefcnt_t_source_item_t___._fields_ = [
    ('ptr', ctypes.POINTER(struct_qiterator_qrefcnt_t_source_item_t__)),
]

source_item_iterator = struct_qrefcnt_t_qiterator_qrefcnt_t_source_item_t___
class struct_qvector_qrefcnt_t_source_item_t__(Structure):
    pass

struct_qvector_qrefcnt_t_source_item_t__._pack_ = 1 # source:False
struct_qvector_qrefcnt_t_source_item_t__._fields_ = [
    ('array', ctypes.POINTER(struct_qrefcnt_t_source_item_t_)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_qrefcnt_t_source_item_t____iterator = ctypes.POINTER(struct_qrefcnt_t_source_item_t_)
qvector_qrefcnt_t_source_item_t____const_iterator = ctypes.POINTER(struct_qrefcnt_t_source_item_t_)
source_items_t = struct_qvector_qrefcnt_t_source_item_t__
class struct_eval_ctx_t(Structure):
    pass

struct_eval_ctx_t._pack_ = 1 # source:False
struct_eval_ctx_t._fields_ = [
    ('size_cb', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ea', ctypes.c_uint64),
]

class struct_source_file_t(struct_qrefcnt_obj_t):
    pass

class struct_qrefcnt_t_source_file_t_(Structure):
    pass

struct_qrefcnt_t_source_file_t_._pack_ = 1 # source:False
struct_qrefcnt_t_source_file_t_._fields_ = [
    ('ptr', ctypes.POINTER(struct_source_file_t)),
]

source_file_ptr = struct_qrefcnt_t_source_file_t_
class struct_qiterator_qrefcnt_t_source_file_t__(struct_qrefcnt_obj_t):
    pass

_source_file_iterator = struct_qiterator_qrefcnt_t_source_file_t__
class struct_qrefcnt_t_qiterator_qrefcnt_t_source_file_t___(Structure):
    pass

struct_qrefcnt_t_qiterator_qrefcnt_t_source_file_t___._pack_ = 1 # source:False
struct_qrefcnt_t_qiterator_qrefcnt_t_source_file_t___._fields_ = [
    ('ptr', ctypes.POINTER(struct_qiterator_qrefcnt_t_source_file_t__)),
]

source_file_iterator = struct_qrefcnt_t_qiterator_qrefcnt_t_source_file_t___

# values for enumeration 'src_item_kind_t'
src_item_kind_t__enumvalues = {
    0: 'SRCIT_NONE',
    1: 'SRCIT_MODULE',
    2: 'SRCIT_FUNC',
    3: 'SRCIT_STMT',
    4: 'SRCIT_EXPR',
    5: 'SRCIT_STTVAR',
    6: 'SRCIT_LOCVAR',
}
SRCIT_NONE = 0
SRCIT_MODULE = 1
SRCIT_FUNC = 2
SRCIT_STMT = 3
SRCIT_EXPR = 4
SRCIT_STTVAR = 5
SRCIT_LOCVAR = 6
src_item_kind_t = ctypes.c_uint32 # enum
class struct_source_view_t(Structure):
    pass

_221F7DF9B1AB1F591FA2F298ADACB592 = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_uint32, ctypes.POINTER(ctypes.c_char), ctypes.c_uint32)
mangled_name_type_t = ctypes.c_int32
inodevec_t = struct_qvector_unsigned_long_long_
diridx_t = ctypes.c_uint64
dirvec_t = struct_qvector_unsigned_long_long_
blob_idx_t = ctypes.c_uint64
class struct_direntry_t(Structure):
    pass

struct_direntry_t._pack_ = 1 # source:False
struct_direntry_t._fields_ = [
    ('idx', ctypes.c_uint64),
    ('isdir', ctypes.c_char),
]

class struct_ida_movable_type_direntry_t_(Structure):
    pass

class struct_qvector_direntry_t_(Structure):
    pass

struct_qvector_direntry_t_._pack_ = 1 # source:False
struct_qvector_direntry_t_._fields_ = [
    ('array', ctypes.POINTER(struct_direntry_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_direntry_t___iterator = ctypes.POINTER(struct_direntry_t)
qvector_direntry_t___const_iterator = ctypes.POINTER(struct_direntry_t)
direntry_vec_t = struct_qvector_direntry_t_

# values for enumeration '_7014156F94AE1B7FC5F5E3560392A8C4'
_7014156F94AE1B7FC5F5E3560392A8C4__enumvalues = {
    0: 'DTN_FULL_NAME',
    1: 'DTN_DISPLAY_NAME',
}
DTN_FULL_NAME = 0
DTN_DISPLAY_NAME = 1
_7014156F94AE1B7FC5F5E3560392A8C4 = ctypes.c_uint32 # enum
class struct_dirspec_t(Structure):
    pass

struct_dirspec_t._pack_ = 1 # source:False
struct_dirspec_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_dirspec_t_vtbl)),
    ('flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('id', qstring),
]

class struct_ida_movable_type_dirtree_cursor_t_(Structure):
    pass

qvector_dirtree_cursor_t___iterator = ctypes.POINTER(struct_dirtree_cursor_t)
qvector_dirtree_cursor_t___const_iterator = ctypes.POINTER(struct_dirtree_cursor_t)
class struct_dirtree_iterator_t(Structure):
    pass

struct_dirtree_cursor_t._pack_ = 1 # source:False
struct_dirtree_cursor_t._fields_ = [
    ('parent', ctypes.c_uint64),
    ('rank', ctypes.c_uint64),
]

struct_dirtree_iterator_t._pack_ = 1 # source:False
struct_dirtree_iterator_t._fields_ = [
    ('pattern', qstring),
    ('cursor', struct_dirtree_cursor_t),
]


# values for enumeration 'dterr_t'
dterr_t__enumvalues = {
    0: 'DTE_OK',
    1: 'DTE_ALREADY_EXISTS',
    2: 'DTE_NOT_FOUND',
    3: 'DTE_NOT_DIRECTORY',
    4: 'DTE_NOT_EMPTY',
    5: 'DTE_BAD_PATH',
    6: 'DTE_CANT_RENAME',
    7: 'DTE_OWN_CHILD',
    8: 'DTE_MAX_DIR',
    9: 'DTE_LAST',
}
DTE_OK = 0
DTE_ALREADY_EXISTS = 1
DTE_NOT_FOUND = 2
DTE_NOT_DIRECTORY = 3
DTE_NOT_EMPTY = 4
DTE_BAD_PATH = 5
DTE_CANT_RENAME = 6
DTE_OWN_CHILD = 7
DTE_MAX_DIR = 8
DTE_LAST = 9
dterr_t = ctypes.c_uint32 # enum
class struct_dirtree_visitor_t(Structure):
    pass

struct_dirtree_visitor_t._pack_ = 1 # source:False
struct_dirtree_visitor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_dirtree_visitor_t_vtbl)),
]


# values for enumeration 'dirtree_id_t'
dirtree_id_t__enumvalues = {
    0: 'DIRTREE_LOCAL_TYPES',
    1: 'DIRTREE_STRUCTS',
    2: 'DIRTREE_ENUMS',
    3: 'DIRTREE_FUNCS',
    4: 'DIRTREE_NAMES',
    5: 'DIRTREE_IMPORTS',
    6: 'DIRTREE_IDAPLACE_BOOKMARKS',
    7: 'DIRTREE_STRUCTS_BOOKMARKS',
    8: 'DIRTREE_ENUMS_BOOKMARKS',
    9: 'DIRTREE_BPTS',
    10: 'DIRTREE_END',
}
DIRTREE_LOCAL_TYPES = 0
DIRTREE_STRUCTS = 1
DIRTREE_ENUMS = 2
DIRTREE_FUNCS = 3
DIRTREE_NAMES = 4
DIRTREE_IMPORTS = 5
DIRTREE_IDAPLACE_BOOKMARKS = 6
DIRTREE_STRUCTS_BOOKMARKS = 7
DIRTREE_ENUMS_BOOKMARKS = 8
DIRTREE_BPTS = 9
DIRTREE_END = 10
dirtree_id_t = ctypes.c_uint32 # enum
class struct_enum_member_visitor_t(Structure):
    pass

struct_enum_member_visitor_t._pack_ = 1 # source:False
struct_enum_member_visitor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_enum_member_visitor_t_vtbl)),
]

class struct_exehdr(Structure):
    pass

struct_exehdr._pack_ = 1 # source:False
struct_exehdr._fields_ = [
    ('exe_ident', ctypes.c_uint16),
    ('PartPag', ctypes.c_uint16),
    ('PageCnt', ctypes.c_uint16),
    ('ReloCnt', ctypes.c_uint16),
    ('HdrSize', ctypes.c_uint16),
    ('MinMem', ctypes.c_uint16),
    ('MaxMem', ctypes.c_uint16),
    ('ReloSS', ctypes.c_uint16),
    ('ExeSP', ctypes.c_uint16),
    ('ChkSum', ctypes.c_uint16),
    ('ExeIP', ctypes.c_uint16),
    ('ReloCS', ctypes.c_uint16),
    ('TablOff', ctypes.c_uint16),
    ('Overlay', ctypes.c_uint16),
]

class struct_exehdr_full(struct_exehdr):
    pass

struct_exehdr_full._pack_ = 1 # source:False
struct_exehdr_full._fields_ = [
    ('res', ctypes.c_uint16 * 4),
    ('oemid', ctypes.c_uint16),
    ('oeminfo', ctypes.c_uint16),
    ('res2', ctypes.c_uint16 * 10),
    ('lfanew', ctypes.c_uint32),
]

class struct_idc_class_t(Structure):
    pass

class struct_idc_global_t(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('name', qstring),
    ('value', struct_idc_value_t),
     ]

class struct_qvector_idc_global_t_(Structure):
    pass

struct_qvector_idc_global_t_._pack_ = 1 # source:False
struct_qvector_idc_global_t_._fields_ = [
    ('array', ctypes.POINTER(struct_idc_global_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_idc_global_t___iterator = ctypes.POINTER(struct_idc_global_t)
qvector_idc_global_t___const_iterator = ctypes.POINTER(struct_idc_global_t)
idc_vars_t = struct_qvector_idc_global_t_
_1DAB1DE771FB1F3D524D5CA7A3A423C5 = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t))
class struct_ext_idcfunc_t(Structure):
    pass

struct_ext_idcfunc_t._pack_ = 1 # source:False
struct_ext_idcfunc_t._fields_ = [
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('fptr', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t))),
    ('args', ctypes.POINTER(ctypes.c_char)),
    ('defvals', ctypes.POINTER(struct_idc_value_t)),
    ('ndefvals', ctypes.c_int32),
    ('flags', ctypes.c_int32),
]

class struct_idcfuncs_t(Structure):
    pass

struct_idcfuncs_t._pack_ = 1 # source:False
struct_idcfuncs_t._fields_ = [
    ('qnty', ctypes.c_uint64),
    ('funcs', ctypes.POINTER(struct_ext_idcfunc_t)),
    ('startup', ctypes.CFUNCTYPE(ctypes.c_int32)),
    ('shutdown', ctypes.CFUNCTYPE(ctypes.c_int32)),
    ('init_idc', ctypes.CFUNCTYPE(None)),
    ('term_idc', ctypes.CFUNCTYPE(None)),
    ('is_database_open', ctypes.CFUNCTYPE(ctypes.c_char)),
    ('ea2str', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(ctypes.c_char), ctypes.c_uint64, ctypes.c_uint64)),
    ('undeclared_variable_ok', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(ctypes.c_char))),
    ('get_unkvar', ctypes.c_int32),
    ('set_unkvar', ctypes.c_int32),
    ('exec_resolved_func', ctypes.c_int32),
    ('calc_sizeof', ctypes.c_int32),
    ('get_field_ea', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_ida_movable_type_idc_value_t_(Structure):
    pass

class struct_ida_movable_type_idc_global_t_(Structure):
    pass


# values for enumeration 'syntax_highlight_style'
syntax_highlight_style__enumvalues = {
    0: 'HF_DEFAULT',
    1: 'HF_KEYWORD1',
    2: 'HF_KEYWORD2',
    3: 'HF_KEYWORD3',
    4: 'HF_STRING',
    5: 'HF_COMMENT',
    6: 'HF_PREPROC',
    7: 'HF_NUMBER',
    8: 'HF_MAX',
}
HF_DEFAULT = 0
HF_KEYWORD1 = 1
HF_KEYWORD2 = 2
HF_KEYWORD3 = 3
HF_STRING = 4
HF_COMMENT = 5
HF_PREPROC = 6
HF_NUMBER = 7
HF_MAX = 8
syntax_highlight_style = ctypes.c_uint32 # enum
class struct_highlighter_cbs_t(Structure):
    pass

struct_highlighter_cbs_t._pack_ = 1 # source:False
struct_highlighter_cbs_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_highlighter_cbs_t_vtbl)),
]

class struct_qvector_extlang_t__P_(Structure):
    pass

struct_qvector_extlang_t__P_._pack_ = 1 # source:False
struct_qvector_extlang_t__P_._fields_ = [
    ('array', ctypes.POINTER(ctypes.POINTER(struct_extlang_t))),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_extlang_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_extlang_t))
qvector_extlang_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_extlang_t))
extlangs_t = struct_qvector_extlang_t__P_
class struct_qrefcnt_t_extlang_t_(Structure):
    pass

struct_qrefcnt_t_extlang_t_._pack_ = 1 # source:False
struct_qrefcnt_t_extlang_t_._fields_ = [
    ('ptr', ctypes.POINTER(struct_extlang_t)),
]

extlang_object_t = struct_qrefcnt_t_extlang_t_
class struct_extlang_visitor_t(Structure):
    pass

struct_extlang_visitor_t._pack_ = 1 # source:False
struct_extlang_visitor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_extlang_visitor_t_vtbl)),
]


# values for enumeration 'find_extlang_kind_t'
find_extlang_kind_t__enumvalues = {
    0: 'FIND_EXTLANG_BY_EXT',
    1: 'FIND_EXTLANG_BY_NAME',
    2: 'FIND_EXTLANG_BY_IDX',
}
FIND_EXTLANG_BY_EXT = 0
FIND_EXTLANG_BY_NAME = 1
FIND_EXTLANG_BY_IDX = 2
find_extlang_kind_t = ctypes.c_uint32 # enum
class struct_idc_resolver_t(Structure):
    pass

struct_idc_resolver_t._pack_ = 1 # source:False
struct_idc_resolver_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_idc_resolver_t_vtbl)),
]

class struct_fixup_info_t(Structure):
    pass

struct_fixup_info_t._pack_ = 1 # source:False
struct_fixup_info_t._fields_ = [
    ('ea', ctypes.c_uint64),
    ('fd', struct_fixup_data_t),
]

class struct_ida_movable_type_fixup_info_t_(Structure):
    pass

class struct_qvector_fixup_info_t_(Structure):
    pass

struct_qvector_fixup_info_t_._pack_ = 1 # source:False
struct_qvector_fixup_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_fixup_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_fixup_info_t___iterator = ctypes.POINTER(struct_fixup_info_t)
qvector_fixup_info_t___const_iterator = ctypes.POINTER(struct_fixup_info_t)
fixups_t = struct_qvector_fixup_info_t_
class struct_ida_movable_type_stkpnt_t_(Structure):
    pass

qvector_stkpnt_t___iterator = ctypes.POINTER(struct_stkpnt_t)
qvector_stkpnt_t___const_iterator = ctypes.POINTER(struct_stkpnt_t)

# values for enumeration 'frame_part_t'
frame_part_t__enumvalues = {
    0: 'FPC_ARGS',
    1: 'FPC_RETADDR',
    2: 'FPC_SAVREGS',
    3: 'FPC_LVARS',
}
FPC_ARGS = 0
FPC_RETADDR = 1
FPC_SAVREGS = 2
FPC_LVARS = 3
frame_part_t = ctypes.c_uint32 # enum
class struct_ida_movable_type_regvar_t_(Structure):
    pass

class struct_xreflist_entry_t(Structure):
    pass

struct_xreflist_entry_t._pack_ = 1 # source:False
struct_xreflist_entry_t._fields_ = [
    ('ea', ctypes.c_uint64),
    ('opnum', ctypes.c_ubyte),
    ('type', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

class struct_ida_movable_type_xreflist_entry_t_(Structure):
    pass

class struct_qvector_xreflist_entry_t_(Structure):
    pass

struct_qvector_xreflist_entry_t_._pack_ = 1 # source:False
struct_qvector_xreflist_entry_t_._fields_ = [
    ('array', ctypes.POINTER(struct_xreflist_entry_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_xreflist_entry_t___iterator = ctypes.POINTER(struct_xreflist_entry_t)
qvector_xreflist_entry_t___const_iterator = ctypes.POINTER(struct_xreflist_entry_t)
xreflist_t = struct_qvector_xreflist_entry_t_
class struct_node_iterator(Structure):
    pass

struct_node_iterator._pack_ = 1 # source:False
struct_node_iterator._fields_ = [
    ('g', ctypes.POINTER(struct_gdl_graph_t)),
    ('i', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]


# values for enumeration 'fc_block_type_t'
fc_block_type_t__enumvalues = {
    0: 'fcb_normal',
    1: 'fcb_indjump',
    2: 'fcb_ret',
    3: 'fcb_cndret',
    4: 'fcb_noret',
    5: 'fcb_enoret',
    6: 'fcb_extern',
    7: 'fcb_error',
}
fcb_normal = 0
fcb_indjump = 1
fcb_ret = 2
fcb_cndret = 3
fcb_noret = 4
fcb_enoret = 5
fcb_extern = 6
fcb_error = 7
fc_block_type_t = ctypes.c_uint32 # enum
class struct_std__less_int_(Structure):
    pass

class struct_std__allocator_std___Tree_node_int__void__P__(Structure):
    pass

class struct_std___Tree_node_int__void__P_(Structure):
    pass

struct_std___Tree_node_int__void__P_._pack_ = 1 # source:False
struct_std___Tree_node_int__void__P_._fields_ = [
    ('_Left', ctypes.POINTER(struct_std___Tree_node_int__void__P_)),
    ('_Parent', ctypes.POINTER(struct_std___Tree_node_int__void__P_)),
    ('_Right', ctypes.POINTER(struct_std___Tree_node_int__void__P_)),
    ('_Color', ctypes.c_char),
    ('_Isnil', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('_Myval', ctypes.c_int32),
]

std___Tree_simple_types_int____Node = struct_std___Tree_node_int__void__P_
std___Tree_simple_types_int____Nodeptr = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
std___Tree_val_std___Tree_simple_types_int_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
std___Simple_types_int___size_type = ctypes.c_uint64
std___Tree_val_std___Tree_simple_types_int____size_type = ctypes.c_uint64
class struct_std___Tree_val_std___Tree_simple_types_int__(struct_std___Container_base0):
    pass

struct_std___Tree_val_std___Tree_simple_types_int__._pack_ = 1 # source:False
struct_std___Tree_val_std___Tree_simple_types_int__._fields_ = [
    ('_Myhead', ctypes.POINTER(struct_std___Tree_node_int__void__P_)),
    ('_Mysize', ctypes.c_uint64),
]

class struct_std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true_(struct_std__allocator_std___Tree_node_int__void__P__):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___Tree_val_std___Tree_simple_types_int__),
     ]

class struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true___true_(struct_std__less_int_):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true_),
     ]

class struct_std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false__(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Mypair', struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true___true_),
     ]

class struct_std__set_int_(struct_std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false__):
    pass

class struct_intset_t(struct_std__set_int_):
    pass

std___Tset_traits_int__std__less_int___std__allocator_int___false___key_compare = struct_std__less_int_
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____key_compare = struct_std__less_int_
class struct_std__allocator_int_(Structure):
    pass

std___Tset_traits_int__std__less_int___std__allocator_int___false___allocator_type = struct_std__allocator_int_
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____allocator_type = struct_std__allocator_int_
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int______Nodeptr = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
class struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___(struct_std___Iterator_base0):
    pass

struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___._pack_ = 1 # source:False
struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___._fields_ = [
    ('_Ptr', ctypes.POINTER(struct_std___Tree_node_int__void__P_)),
]

class struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___(struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___):
    pass

std___Rebind_pointer_t_void__P__std___Tree_node_int__void__P__ = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
std___Tree_node_int__void__P____Nodeptr = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
std___Tree_node_int__void__P___value_type = ctypes.c_int32
std___Tree_val_std___Tree_simple_types_int_____Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___
class struct_std___Tree_id_std___Tree_node_int__void__P___P_(Structure):
    pass

struct_std___Tree_id_std___Tree_node_int__void__P___P_._pack_ = 1 # source:False
struct_std___Tree_id_std___Tree_node_int__void__P___P_._fields_ = [
    ('_Parent', ctypes.POINTER(struct_std___Tree_node_int__void__P_)),
    ('_Child', std___Tree_child),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

std___Simple_types_int___value_type = ctypes.c_int32
std___Tree_val_std___Tree_simple_types_int____value_type = ctypes.c_int32
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____value_type = ctypes.c_int32
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____reference = ctypes.POINTER(ctypes.c_int32)
std___Simple_types_int___const_pointer = ctypes.POINTER(ctypes.c_int32)
std___Tree_val_std___Tree_simple_types_int____const_pointer = ctypes.POINTER(ctypes.c_int32)
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____pointer = ctypes.POINTER(ctypes.c_int32)
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____value_type = ctypes.c_int32
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____reference = ctypes.POINTER(ctypes.c_int32)
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____pointer = ctypes.POINTER(ctypes.c_int32)
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____iterator = struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____const_iterator = struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Unchecked_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___
class struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___),
     ]

std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____ = ctypes.POINTER(ctypes.c_int32)
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______reference = ctypes.POINTER(ctypes.c_int32)
std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______pointer = ctypes.POINTER(ctypes.c_int32)
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______pointer = ctypes.POINTER(ctypes.c_int32)
std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____ = ctypes.c_int64
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______difference_type = ctypes.c_int64
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____reverse_iterator = struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____const_reverse_iterator = struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____
std___Default_allocator_traits_std__allocator_int____size_type = ctypes.c_uint64
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____size_type = ctypes.c_uint64
std___Tset_traits_int__std__less_int___std__allocator_int___false___value_compare = struct_std__less_int_
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____value_compare = struct_std__less_int_
std___Tset_traits_int__std__less_int___std__allocator_int___false___value_type = ctypes.c_int32
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____value_type = ctypes.c_int32
class struct_std__initializer_list_int_(Structure):
    pass

struct_std__initializer_list_int_._pack_ = 1 # source:False
struct_std__initializer_list_int_._fields_ = [
    ('_First', ctypes.POINTER(ctypes.c_int32)),
    ('_Last', ctypes.POINTER(ctypes.c_int32)),
]

std__allocator_std___Tree_node_int__void__P____value_type = struct_std___Tree_node_int__void__P_
std___Default_allocator_traits_std__allocator_std___Tree_node_int__void__P_____value_type = struct_std___Tree_node_int__void__P_
std___Default_allocator_traits_std__allocator_std___Tree_node_int__void__P_____pointer = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
std___Tset_traits_int__std__less_int___std__allocator_int___false___key_type = ctypes.c_int32
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____key_type = ctypes.c_int32
class struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('first', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___),
    ('second', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___),
     ]

std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Alnode = struct_std__allocator_std___Tree_node_int__void__P__
std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Scary_val = struct_std___Tree_val_std___Tree_simple_types_int__
std__set_int___allocator_type = struct_std__allocator_int_
std__set_int___key_compare = struct_std__less_int_
class struct_qvector_qvector_int__(Structure):
    pass

struct_qvector_qvector_int__._pack_ = 1 # source:False
struct_qvector_qvector_int__._fields_ = [
    ('array', ctypes.POINTER(struct_qvector_int_)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_qvector_int____iterator = ctypes.POINTER(struct_qvector_int_)
qvector_qvector_int____const_iterator = ctypes.POINTER(struct_qvector_int_)
array_of_intvec_t = struct_qvector_qvector_int__
class struct_std__allocator_std___Tree_node_std__pair_const_int__int___void__P__(Structure):
    pass

class struct_std___Tree_node_std__pair_const_int__int___void__P_(Structure):
    pass

class struct_std__pair_const_int__int_(Structure):
    pass

struct_std__pair_const_int__int_._pack_ = 1 # source:False
struct_std__pair_const_int__int_._fields_ = [
    ('first', ctypes.c_int32),
    ('second', ctypes.c_int32),
]

std___Tree_node_std__pair_const_int__int___void__P___value_type = struct_std__pair_const_int__int_
struct_std___Tree_node_std__pair_const_int__int___void__P_._pack_ = 1 # source:False
struct_std___Tree_node_std__pair_const_int__int___void__P_._fields_ = [
    ('_Left', ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)),
    ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)),
    ('_Right', ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)),
    ('_Color', ctypes.c_char),
    ('_Isnil', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('_Myval', std___Tree_node_std__pair_const_int__int___void__P___value_type),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

std___Tree_simple_types_std__pair_const_int__int_____Node = struct_std___Tree_node_std__pair_const_int__int___void__P_
std___Tree_simple_types_std__pair_const_int__int_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
std___Simple_types_std__pair_const_int__int____size_type = ctypes.c_uint64
std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____size_type = ctypes.c_uint64
class struct_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___(struct_std___Container_base0):
    pass

struct_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___._pack_ = 1 # source:False
struct_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___._fields_ = [
    ('_Myhead', ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)),
    ('_Mysize', ctypes.c_uint64),
]

class struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true_(struct_std__allocator_std___Tree_node_std__pair_const_int__int___void__P__):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___),
     ]

class struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true___true_(struct_std__less_int_):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true_),
     ]

class struct_std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false__(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Mypair', struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true___true_),
     ]

class struct_std__map_int__int_(struct_std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false__):
    pass

class struct_intmap_t(struct_std__map_int__int_):
    pass

std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___key_compare = struct_std__less_int_
std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____key_compare = struct_std__less_int_
class struct_std__allocator_std__pair_const_int__int__(Structure):
    pass

std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___allocator_type = struct_std__allocator_std__pair_const_int__int__
std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____allocator_type = struct_std__allocator_std__pair_const_int__int__
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
class struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____(struct_std___Iterator_base0):
    pass

struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____._pack_ = 1 # source:False
struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____._fields_ = [
    ('_Ptr', ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)),
]

class struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____(struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____):
    pass

class struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____(struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____):
    pass

std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_int__int___void__P__ = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
std___Tree_node_std__pair_const_int__int___void__P____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____
class struct_std___Tree_id_std___Tree_node_std__pair_const_int__int___void__P___P_(Structure):
    pass

struct_std___Tree_id_std___Tree_node_std__pair_const_int__int___void__P___P_._pack_ = 1 # source:False
struct_std___Tree_id_std___Tree_node_std__pair_const_int__int___void__P___P_._fields_ = [
    ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)),
    ('_Child', std___Tree_child),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

std___Simple_types_std__pair_const_int__int____value_type = struct_std__pair_const_int__int_
std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____value_type = struct_std__pair_const_int__int_
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type = struct_std__pair_const_int__int_
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Simple_types_std__pair_const_int__int____const_pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____const_pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type = struct_std__pair_const_int__int_
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type = struct_std__pair_const_int__int_
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Simple_types_std__pair_const_int__int____pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
class struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____(struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____):
    pass

std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type = struct_std__pair_const_int__int_
std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____iterator = struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____
std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____const_iterator = struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____
std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Unchecked_iterator = struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____
std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____
class struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____),
     ]

std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ = ctypes.POINTER(struct_std__pair_const_int__int_)
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______reference = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ = ctypes.c_int64
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______difference_type = ctypes.c_int64
std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____reverse_iterator = struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____
class struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____),
     ]

std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ = ctypes.POINTER(struct_std__pair_const_int__int_)
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______reference = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ = ctypes.c_int64
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______difference_type = ctypes.c_int64
std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____const_reverse_iterator = struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____
std___Default_allocator_traits_std__allocator_std__pair_const_int__int_____size_type = ctypes.c_uint64
std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____size_type = ctypes.c_uint64
class struct_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_compare(Structure):
    pass

std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____value_compare = struct_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_compare
std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_type = struct_std__pair_const_int__int_
std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____value_type = struct_std__pair_const_int__int_
class struct_std__initializer_list_std__pair_const_int__int__(Structure):
    pass

struct_std__initializer_list_std__pair_const_int__int__._pack_ = 1 # source:False
struct_std__initializer_list_std__pair_const_int__int__._fields_ = [
    ('_First', ctypes.POINTER(struct_std__pair_const_int__int_)),
    ('_Last', ctypes.POINTER(struct_std__pair_const_int__int_)),
]

std__allocator_std___Tree_node_std__pair_const_int__int___void__P____value_type = struct_std___Tree_node_std__pair_const_int__int___void__P_
std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_int__int___void__P_____value_type = struct_std___Tree_node_std__pair_const_int__int___void__P_
std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_int__int___void__P_____pointer = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___key_type = ctypes.c_int32
std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____key_type = ctypes.c_int32
class struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('first', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____),
    ('second', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____),
     ]

class struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('first', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____),
    ('second', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____),
     ]

std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Alnode = struct_std__allocator_std___Tree_node_std__pair_const_int__int___void__P__
std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Scary_val = struct_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___
std__map_int__int___allocator_type = struct_std__allocator_std__pair_const_int__int__
std__map_int__int___key_compare = struct_std__less_int_
std__map_int__int___mapped_type = ctypes.c_int32
std__map_int__int___key_type = ctypes.c_int32
class struct_qvector_intmap_t_(Structure):
    pass

struct_qvector_intmap_t_._pack_ = 1 # source:False
struct_qvector_intmap_t_._fields_ = [
    ('array', ctypes.POINTER(struct_intmap_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_intmap_t___iterator = ctypes.POINTER(struct_intmap_t)
qvector_intmap_t___const_iterator = ctypes.POINTER(struct_intmap_t)
array_of_intmap_t = struct_qvector_intmap_t_
class struct_node_set_t(struct_intset_t):
    pass

class struct_qvector_node_set_t_(Structure):
    pass

struct_qvector_node_set_t_._pack_ = 1 # source:False
struct_qvector_node_set_t_._fields_ = [
    ('array', ctypes.POINTER(struct_node_set_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_node_set_t___iterator = ctypes.POINTER(struct_node_set_t)
qvector_node_set_t___const_iterator = ctypes.POINTER(struct_node_set_t)
array_of_node_set_t = struct_qvector_node_set_t_
qvector_qbasic_block_t___iterator = ctypes.POINTER(struct_qbasic_block_t)
qvector_qbasic_block_t___const_iterator = ctypes.POINTER(struct_qbasic_block_t)
layout_type_t = ctypes.c_int32
class struct_point_t(Structure):
    pass

struct_point_t._pack_ = 1 # source:False
struct_point_t._fields_ = [
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
]

class struct_abstract_graph_t(struct_gdl_graph_t):
    pass

struct_abstract_graph_t._pack_ = 1 # source:False
struct_abstract_graph_t._fields_ = [
    ('title', qstring),
    ('rect_edges_made', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('current_layout', ctypes.c_int32),
    ('circle_center', struct_point_t),
    ('circle_radius', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('callback', ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(None), ctypes.c_int32, ctypes.POINTER(ctypes.c_char))),
    ('callback_ud', ctypes.POINTER(None)),
]

class struct_node_info_t(Structure):
    pass

struct_node_info_t._pack_ = 1 # source:False
struct_node_info_t._fields_ = [
    ('cb', ctypes.c_uint64),
    ('bg_color', ctypes.c_uint32),
    ('frame_color', ctypes.c_uint32),
    ('flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ea', ctypes.c_uint64),
    ('text', qstring),
]

graph_id_t = ctypes.c_uint64
class struct_node_ordering_t(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('node_by_order', intvec_t),
    ('order_by_node', intvec_t),
     ]

class struct_ida_movable_type_edge_t_(Structure):
    pass

class struct_qvector_edge_t_(Structure):
    pass

struct_qvector_edge_t_._pack_ = 1 # source:False
struct_qvector_edge_t_._fields_ = [
    ('array', ctypes.POINTER(struct_edge_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_edge_t___iterator = ctypes.POINTER(struct_edge_t)
qvector_edge_t___const_iterator = ctypes.POINTER(struct_edge_t)
edgevec_t = struct_qvector_edge_t_
class struct_edgeset_t(Structure):
    pass

class struct_edge_segs_vec_t(Structure):
    pass

class struct_edge_infos_t(Structure):
    pass

class struct_destset_t(Structure):
    pass


# values for enumeration 'edge_type_t'
edge_type_t__enumvalues = {
    0: 'edge_error',
    1: 'edge_tree',
    2: 'edge_forward',
    3: 'edge_back',
    4: 'edge_cross',
    5: 'edge_subgraph',
}
edge_error = 0
edge_tree = 1
edge_forward = 2
edge_back = 3
edge_cross = 4
edge_subgraph = 5
edge_type_t = ctypes.c_uint32 # enum
class struct_edge_typer_t(Structure):
    pass

class struct_graph_node_visitor_t(Structure):
    pass

struct_graph_node_visitor_t._pack_ = 1 # source:False
struct_graph_node_visitor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_graph_node_visitor_t_vtbl)),
    ('visited', struct_node_set_t),
]

class struct_graph_path_visitor_t(Structure):
    pass

struct_graph_path_visitor_t._pack_ = 1 # source:False
struct_graph_path_visitor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_graph_path_visitor_t_vtbl)),
    ('path', intvec_t),
    ('prune', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

class struct_ida_movable_type_point_t_(Structure):
    pass

class struct_qvector_point_t_(Structure):
    pass

struct_qvector_point_t_._pack_ = 1 # source:False
struct_qvector_point_t_._fields_ = [
    ('array', ctypes.POINTER(struct_point_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_point_t___iterator = ctypes.POINTER(struct_point_t)
qvector_point_t___const_iterator = ctypes.POINTER(struct_point_t)
pointvec_t = struct_qvector_point_t_
class struct_pointseq_t(struct_qvector_point_t_):
    pass

class struct_rect_t(Structure):
    pass

struct_rect_t._pack_ = 1 # source:False
struct_rect_t._fields_ = [
    ('left', ctypes.c_int32),
    ('top', ctypes.c_int32),
    ('right', ctypes.c_int32),
    ('bottom', ctypes.c_int32),
]

class struct_ida_movable_type_rect_t_(Structure):
    pass

class struct_TPointDouble(Structure):
    pass

struct_TPointDouble._pack_ = 1 # source:False
struct_TPointDouble._fields_ = [
    ('x', ctypes.c_double),
    ('y', ctypes.c_double),
]

class struct_edge_info_t(Structure):
    pass

struct_edge_info_t._pack_ = 1 # source:False
struct_edge_info_t._fields_ = [
    ('color', ctypes.c_uint32),
    ('width', ctypes.c_int32),
    ('srcoff', ctypes.c_int32),
    ('dstoff', ctypes.c_int32),
    ('layout', struct_pointseq_t),
]


# values for enumeration 'graph_item_type_t'
graph_item_type_t__enumvalues = {
    0: 'git_none',
    1: 'git_edge',
    2: 'git_node',
    3: 'git_tool',
    4: 'git_text',
    5: 'git_elp',
}
git_none = 0
git_edge = 1
git_node = 2
git_tool = 3
git_text = 4
git_elp = 5
graph_item_type_t = ctypes.c_uint32 # enum
class struct_graph_item_t(Structure):
    pass

struct_graph_item_t._pack_ = 1 # source:False
struct_graph_item_t._fields_ = [
    ('type', graph_item_type_t),
    ('e', struct_edge_t),
    ('n', ctypes.c_int32),
    ('b', ctypes.c_int32),
    ('p', struct_point_t),
    ('elp', struct_edge_layout_point_t),
]

qvector_selection_item_t___iterator = ctypes.POINTER(struct_selection_item_t)
qvector_selection_item_t___const_iterator = ctypes.POINTER(struct_selection_item_t)
class struct_edge_segment_t(Structure):
    pass

struct_edge_segment_t._pack_ = 1 # source:False
struct_edge_segment_t._fields_ = [
    ('e', struct_edge_t),
    ('nseg', ctypes.c_int32),
    ('x0', ctypes.c_int32),
    ('x1', ctypes.c_int32),
]

class struct_interval_t(Structure):
    pass

struct_interval_t._pack_ = 1 # source:False
struct_interval_t._fields_ = [
    ('x0', ctypes.c_int32),
    ('x1', ctypes.c_int32),
]

class struct_row_info_t(Structure):
    pass

struct_row_info_t._pack_ = 1 # source:False
struct_row_info_t._fields_ = [
    ('nodes', intvec_t),
    ('top', ctypes.c_int32),
    ('bottom', ctypes.c_int32),
]

class struct_qvector_row_info_t_(Structure):
    pass

struct_qvector_row_info_t_._pack_ = 1 # source:False
struct_qvector_row_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_row_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_row_info_t___iterator = ctypes.POINTER(struct_row_info_t)
qvector_row_info_t___const_iterator = ctypes.POINTER(struct_row_info_t)
graph_row_info_t = struct_qvector_row_info_t_
class struct_graph_visitor_t(Structure):
    pass

struct_graph_visitor_t._pack_ = 1 # source:False
struct_graph_visitor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_graph_visitor_t_vtbl)),
    ('g', ctypes.POINTER(struct_abstract_graph_t)),
]

class struct_depth_first_info_t(Structure):
    pass

class struct_edge_infos_wrapper_t(Structure):
    pass

struct_edge_infos_wrapper_t._pack_ = 1 # source:False
struct_edge_infos_wrapper_t._fields_ = [
    ('ptr', ctypes.POINTER(struct_edge_infos_t)),
]

class struct_qvector_rect_t_(Structure):
    pass

struct_qvector_rect_t_._pack_ = 1 # source:False
struct_qvector_rect_t_._fields_ = [
    ('array', ctypes.POINTER(struct_rect_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

mutable_graph_t__node_layout_t = struct_qvector_rect_t_
class struct_mutable_graph_t(struct_abstract_graph_t):
    pass

struct_mutable_graph_t._pack_ = 1 # source:False
struct_mutable_graph_t._fields_ = [
    ('gid', ctypes.c_uint64),
    ('belongs', intvec_t),
    ('node_flags', struct_bytevec_t),
    ('org_succs', array_of_intvec_t),
    ('org_preds', array_of_intvec_t),
    ('succs', array_of_intvec_t),
    ('preds', array_of_intvec_t),
    ('nodes', mutable_graph_t__node_layout_t),
    ('edges', struct_edge_infos_wrapper_t),
]

qvector_rect_t___iterator = ctypes.POINTER(struct_rect_t)
qvector_rect_t___const_iterator = ctypes.POINTER(struct_rect_t)

# values for enumeration 'graph_notification_t'
graph_notification_t__enumvalues = {
    0: 'grcode_calculating_layout',
    1: 'grcode_layout_calculated',
    2: 'grcode_changed_graph',
    3: 'grcode_reserved',
    4: 'grcode_clicked',
    5: 'grcode_dblclicked',
    6: 'grcode_creating_group',
    7: 'grcode_deleting_group',
    8: 'grcode_group_visibility',
    9: 'grcode_gotfocus',
    10: 'grcode_lostfocus',
    11: 'grcode_user_refresh',
    12: 'grcode_reserved2',
    13: 'grcode_user_text',
    14: 'grcode_user_size',
    15: 'grcode_user_title',
    16: 'grcode_user_draw',
    17: 'grcode_user_hint',
    18: 'grcode_destroyed',
    256: 'grcode_create_graph_viewer',
    257: 'grcode_get_graph_viewer',
    258: 'grcode_get_viewer_graph',
    259: 'grcode_create_mutable_graph',
    260: 'grcode_set_viewer_graph',
    261: 'grcode_refresh_viewer',
    262: 'grcode_fit_window',
    263: 'grcode_get_curnode',
    264: 'grcode_center_on',
    265: 'grcode_get_selection',
    266: 'grcode_del_custom_layout',
    267: 'grcode_set_custom_layout',
    268: 'grcode_set_graph_groups',
    269: 'grcode_clear',
    270: 'grcode_create_digraph_layout',
    271: 'grcode_create_tree_layout',
    272: 'grcode_create_circle_layout',
    273: 'grcode_get_node_representative',
    274: 'grcode_find_subgraph_node',
    275: 'grcode_create_group',
    276: 'grcode_get_custom_layout',
    277: 'grcode_get_graph_groups',
    278: 'grcode_empty',
    279: 'grcode_is_visible_node',
    280: 'grcode_delete_group',
    281: 'grcode_change_group_visibility',
    282: 'grcode_set_edge',
    283: 'grcode_node_qty',
    284: 'grcode_nrect',
    285: 'grcode_set_titlebar_height',
    286: 'grcode_create_user_graph_place',
    287: 'grcode_create_disasm_graph1',
    288: 'grcode_create_disasm_graph2',
    289: 'grcode_set_node_info',
    290: 'grcode_get_node_info',
    291: 'grcode_del_node_info',
    292: 'grcode_viewer_create_groups',
    293: 'grcode_viewer_delete_groups',
    294: 'grcode_viewer_groups_visibility',
    295: 'grcode_viewer_create_groups_vec',
    296: 'grcode_viewer_delete_groups_vec',
    297: 'grcode_viewer_groups_visibility_vec',
    298: 'grcode_delete_mutable_graph',
    299: 'grcode_edge_infos_wrapper_copy',
    300: 'grcode_edge_infos_wrapper_clear',
    301: 'grcode_attach_menu_item',
    302: 'grcode_set_gli',
    303: 'grcode_get_gli',
}
grcode_calculating_layout = 0
grcode_layout_calculated = 1
grcode_changed_graph = 2
grcode_reserved = 3
grcode_clicked = 4
grcode_dblclicked = 5
grcode_creating_group = 6
grcode_deleting_group = 7
grcode_group_visibility = 8
grcode_gotfocus = 9
grcode_lostfocus = 10
grcode_user_refresh = 11
grcode_reserved2 = 12
grcode_user_text = 13
grcode_user_size = 14
grcode_user_title = 15
grcode_user_draw = 16
grcode_user_hint = 17
grcode_destroyed = 18
grcode_create_graph_viewer = 256
grcode_get_graph_viewer = 257
grcode_get_viewer_graph = 258
grcode_create_mutable_graph = 259
grcode_set_viewer_graph = 260
grcode_refresh_viewer = 261
grcode_fit_window = 262
grcode_get_curnode = 263
grcode_center_on = 264
grcode_get_selection = 265
grcode_del_custom_layout = 266
grcode_set_custom_layout = 267
grcode_set_graph_groups = 268
grcode_clear = 269
grcode_create_digraph_layout = 270
grcode_create_tree_layout = 271
grcode_create_circle_layout = 272
grcode_get_node_representative = 273
grcode_find_subgraph_node = 274
grcode_create_group = 275
grcode_get_custom_layout = 276
grcode_get_graph_groups = 277
grcode_empty = 278
grcode_is_visible_node = 279
grcode_delete_group = 280
grcode_change_group_visibility = 281
grcode_set_edge = 282
grcode_node_qty = 283
grcode_nrect = 284
grcode_set_titlebar_height = 285
grcode_create_user_graph_place = 286
grcode_create_disasm_graph1 = 287
grcode_create_disasm_graph2 = 288
grcode_set_node_info = 289
grcode_get_node_info = 290
grcode_del_node_info = 291
grcode_viewer_create_groups = 292
grcode_viewer_delete_groups = 293
grcode_viewer_groups_visibility = 294
grcode_viewer_create_groups_vec = 295
grcode_viewer_delete_groups_vec = 296
grcode_viewer_groups_visibility_vec = 297
grcode_delete_mutable_graph = 298
grcode_edge_infos_wrapper_copy = 299
grcode_edge_infos_wrapper_clear = 300
grcode_attach_menu_item = 301
grcode_set_gli = 302
grcode_get_gli = 303
graph_notification_t = ctypes.c_uint32 # enum
class struct_group_crinfo_t(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('nodes', intvec_t),
    ('text', qstring),
     ]

class struct_qvector_group_crinfo_t_(Structure):
    pass

struct_qvector_group_crinfo_t_._pack_ = 1 # source:False
struct_qvector_group_crinfo_t_._fields_ = [
    ('array', ctypes.POINTER(struct_group_crinfo_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_group_crinfo_t___iterator = ctypes.POINTER(struct_group_crinfo_t)
qvector_group_crinfo_t___const_iterator = ctypes.POINTER(struct_group_crinfo_t)
groups_crinfos_t = struct_qvector_group_crinfo_t_
graph_viewer_t = struct_TWidget
class struct_user_graph_place_t(struct_place_t):
    pass

struct_user_graph_place_t._pack_ = 1 # source:False
struct_user_graph_place_t._fields_ = [
    ('node', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

_32B6B66086532CD0BDAD8C0DB37B9942 = ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(syntax_highlight_style), ctypes.POINTER(ctypes.c_char))
class struct_qvector_long_long___P__syntax_highlight_style__P__const_char__P__(Structure):
    pass

struct_qvector_long_long___P__syntax_highlight_style__P__const_char__P__._pack_ = 1 # source:False
struct_qvector_long_long___P__syntax_highlight_style__P__const_char__P__._fields_ = [
    ('array', ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(syntax_highlight_style), ctypes.POINTER(ctypes.c_char)))),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_long_long___P__syntax_highlight_style__P__const_char__P____iterator = ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(syntax_highlight_style), ctypes.POINTER(ctypes.c_char)))
qvector_long_long___P__syntax_highlight_style__P__const_char__P____const_iterator = ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(syntax_highlight_style), ctypes.POINTER(ctypes.c_char)))
external_colorizers_t = struct_qvector_long_long___P__syntax_highlight_style__P__const_char__P__
_69915A3241C829CBB6DA5B9EFF11997D = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(syntax_highlight_style), ctypes.POINTER(struct__qstring_char_))
class struct_qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R__(Structure):
    pass

struct_qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R__._pack_ = 1 # source:False
struct_qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R__._fields_ = [
    ('array', ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(syntax_highlight_style), ctypes.POINTER(struct__qstring_char_)))),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R____iterator = ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(syntax_highlight_style), ctypes.POINTER(struct__qstring_char_)))
qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R____const_iterator = ctypes.POINTER(ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(syntax_highlight_style), ctypes.POINTER(struct__qstring_char_)))
external_ident_colorizers_t = struct_qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R__
class struct_qvector_ida_syntax_highlighter_t__keywords_style_t_(Structure):
    pass

class struct_ida_syntax_highlighter_t__keywords_style_t(Structure):
    pass

struct_qvector_ida_syntax_highlighter_t__keywords_style_t_._pack_ = 1 # source:False
struct_qvector_ida_syntax_highlighter_t__keywords_style_t_._fields_ = [
    ('array', ctypes.POINTER(struct_ida_syntax_highlighter_t__keywords_style_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

ida_syntax_highlighter_t__keywords_t = struct_qvector_ida_syntax_highlighter_t__keywords_style_t_
class struct_qvector_ida_syntax_highlighter_t__multicmt_t_(Structure):
    pass

class struct_ida_syntax_highlighter_t__multicmt_t(Structure):
    pass

struct_qvector_ida_syntax_highlighter_t__multicmt_t_._pack_ = 1 # source:False
struct_qvector_ida_syntax_highlighter_t__multicmt_t_._fields_ = [
    ('array', ctypes.POINTER(struct_ida_syntax_highlighter_t__multicmt_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

ida_syntax_highlighter_t__multicmtvec_t = struct_qvector_ida_syntax_highlighter_t__multicmt_t_
struct_syntax_highlighter_t._pack_ = 1 # source:False
struct_syntax_highlighter_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_syntax_highlighter_t_vtbl)),
    ('highlight_block', ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.POINTER(struct_highlighter_cbs_t), ctypes.POINTER(struct__qstring_char_))),
]

class struct_ida_syntax_highlighter_t(struct_syntax_highlighter_t):
    pass

struct_ida_syntax_highlighter_t._pack_ = 1 # source:False
struct_ida_syntax_highlighter_t._fields_ = [
    ('keyword_memory', qstrvec_t),
    ('keywords', ida_syntax_highlighter_t__keywords_t),
    ('open_cmt', qstring),
    ('multicmts', ida_syntax_highlighter_t__multicmtvec_t),
    ('literal_closer', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('text_color', syntax_highlight_style),
    ('comment_color', syntax_highlight_style),
    ('string_color', syntax_highlight_style),
    ('preprocessor_color', syntax_highlight_style),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('external_colorizers', external_colorizers_t),
    ('external_ident_colorizers', external_ident_colorizers_t),
    ('input', ctypes.POINTER(ctypes.c_char)),
    ('pending', ctypes.POINTER(ctypes.c_char)),
    ('style', syntax_highlight_style),
    ('open_strconst', ctypes.c_char),
    ('close_strconst', ctypes.c_char),
    ('open_chrconst', ctypes.c_char),
    ('close_chrconst', ctypes.c_char),
    ('escape_char', ctypes.c_char),
    ('preprocessor_char', ctypes.c_char),
    ('PADDING_2', ctypes.c_ubyte * 6),
]

class struct_qvector_ida_syntax_highlighter_t__plain_char_ptr_t_(Structure):
    pass

class struct_ida_syntax_highlighter_t__plain_char_ptr_t(Structure):
    pass

struct_qvector_ida_syntax_highlighter_t__plain_char_ptr_t_._pack_ = 1 # source:False
struct_qvector_ida_syntax_highlighter_t__plain_char_ptr_t_._fields_ = [
    ('array', ctypes.POINTER(struct_ida_syntax_highlighter_t__plain_char_ptr_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_ida_syntax_highlighter_t__plain_char_ptr_t___iterator = ctypes.POINTER(struct_ida_syntax_highlighter_t__plain_char_ptr_t)
qvector_ida_syntax_highlighter_t__plain_char_ptr_t___const_iterator = ctypes.POINTER(struct_ida_syntax_highlighter_t__plain_char_ptr_t)
qvector_ida_syntax_highlighter_t__keywords_style_t___iterator = ctypes.POINTER(struct_ida_syntax_highlighter_t__keywords_style_t)
qvector_ida_syntax_highlighter_t__keywords_style_t___const_iterator = ctypes.POINTER(struct_ida_syntax_highlighter_t__keywords_style_t)
qvector_ida_syntax_highlighter_t__multicmt_t___iterator = ctypes.POINTER(struct_ida_syntax_highlighter_t__multicmt_t)
qvector_ida_syntax_highlighter_t__multicmt_t___const_iterator = ctypes.POINTER(struct_ida_syntax_highlighter_t__multicmt_t)

# values for enumeration 'ucdr_kind_t'
ucdr_kind_t__enumvalues = {
    1: 'UCDR_STRLIT',
    2: 'UCDR_NAME',
    4: 'UCDR_MANGLED',
    8: 'UCDR_TYPE',
}
UCDR_STRLIT = 1
UCDR_NAME = 2
UCDR_MANGLED = 4
UCDR_TYPE = 8
ucdr_kind_t = ctypes.c_uint32 # enum

# values for enumeration 'nametype_t'
nametype_t__enumvalues = {
    6: 'VNT_IDENT',
    8: 'VNT_TYPE',
    2: 'VNT_UDTMEM',
    1: 'VNT_STRLIT',
    2: 'VNT_VISIBLE',
}
VNT_IDENT = 6
VNT_TYPE = 8
VNT_UDTMEM = 2
VNT_STRLIT = 1
VNT_VISIBLE = 2
nametype_t = ctypes.c_uint32 # enum
class struct_getname_info_t(Structure):
    pass

struct_getname_info_t._pack_ = 1 # source:False
struct_getname_info_t._fields_ = [
    ('cb', ctypes.c_uint64),
    ('inhibitor', ctypes.c_int32),
    ('demform', ctypes.c_int32),
    ('demcode', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]


# values for enumeration 'debug_name_how_t'
debug_name_how_t__enumvalues = {
    0: 'DEBNAME_EXACT',
    1: 'DEBNAME_LOWER',
    2: 'DEBNAME_UPPER',
    3: 'DEBNAME_NICE',
}
DEBNAME_EXACT = 0
DEBNAME_LOWER = 1
DEBNAME_UPPER = 2
DEBNAME_NICE = 3
debug_name_how_t = ctypes.c_uint32 # enum
class struct_ea_name_t(Structure):
    pass

struct_ea_name_t._pack_ = 1 # source:False
struct_ea_name_t._fields_ = [
    ('ea', ctypes.c_uint64),
    ('name', qstring),
]

class struct_ida_movable_type_ea_name_t_(Structure):
    pass

class struct_qvector_ea_name_t_(Structure):
    pass

struct_qvector_ea_name_t_._pack_ = 1 # source:False
struct_qvector_ea_name_t_._fields_ = [
    ('array', ctypes.POINTER(struct_ea_name_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_ea_name_t___iterator = ctypes.POINTER(struct_ea_name_t)
qvector_ea_name_t___const_iterator = ctypes.POINTER(struct_ea_name_t)
ea_name_vec_t = struct_qvector_ea_name_t_

# values for enumeration 'demreq_type_t'
demreq_type_t__enumvalues = {
    4294967288: 'DQT_NPURGED_8',
    4294967292: 'DQT_NPURGED_4',
    4294967294: 'DQT_NPURGED_2',
    0: 'DQT_COMPILER',
    1: 'DQT_NAME_TYPE',
    2: 'DQT_FULL',
}
DQT_NPURGED_8 = 4294967288
DQT_NPURGED_4 = 4294967292
DQT_NPURGED_2 = 4294967294
DQT_COMPILER = 0
DQT_NAME_TYPE = 1
DQT_FULL = 2
demreq_type_t = ctypes.c_uint32 # enum
ignore_name_def_t = ctypes.c_int32
p_string = ctypes.c_ubyte
class struct_til_bucket_t(Structure):
    pass

class struct_til_stream_t(Structure):
    pass

class struct_til_t(Structure):
    pass

struct_til_t._pack_ = 1 # source:False
struct_til_t._fields_ = [
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('desc', ctypes.POINTER(ctypes.c_char)),
    ('nbases', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('base', ctypes.POINTER(ctypes.POINTER(struct_til_t))),
    ('flags', ctypes.c_uint32),
    ('cc', struct_compiler_info_t),
    ('PADDING_1', ctypes.c_ubyte * 2),
    ('syms', ctypes.POINTER(struct_til_bucket_t)),
    ('types', ctypes.POINTER(struct_til_bucket_t)),
    ('macros', ctypes.POINTER(struct_til_bucket_t)),
    ('nrefs', ctypes.c_int32),
    ('nstreams', ctypes.c_int32),
    ('streams', ctypes.POINTER(ctypes.POINTER(struct_til_stream_t))),
]

bte_t = ctypes.c_ubyte
class struct_type_attr_t(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('key', qstring),
    ('value', struct_bytevec_t),
     ]

class struct_ida_movable_type_type_attr_t_(Structure):
    pass

class struct_qvector_type_attr_t_(Structure):
    pass

struct_qvector_type_attr_t_._pack_ = 1 # source:False
struct_qvector_type_attr_t_._fields_ = [
    ('array', ctypes.POINTER(struct_type_attr_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_type_attr_t___iterator = ctypes.POINTER(struct_type_attr_t)
qvector_type_attr_t___const_iterator = ctypes.POINTER(struct_type_attr_t)
type_attrs_t = struct_qvector_type_attr_t_
type_sign_t = ctypes.c_int32
class struct_custloc_desc_t(Structure):
    pass

struct_custloc_desc_t._pack_ = 1 # source:False
struct_custloc_desc_t._fields_ = [
    ('cbsize', ctypes.c_uint64),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('copy', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_argloc_t))),
    ('cleanup', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_argloc_t))),
    ('verify', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_argloc_t), ctypes.c_int32, ctypes.POINTER(struct_rangeset_t), ctypes.c_char)),
    ('compare', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_argloc_t))),
    ('print', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(ctypes.c_char), ctypes.c_uint64, ctypes.POINTER(struct_argloc_t), ctypes.c_uint64, ctypes.c_int32)),
    ('deref_field', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t), ctypes.c_uint64, ctypes.POINTER(struct__qstring_char_))),
    ('deref_array', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t), ctypes.c_uint64, ctypes.c_uint64)),
    ('deref_ptr', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_argloc_t))),
    ('read_value', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(union_value_u), ctypes.POINTER(struct_argloc_t), ctypes.c_int32, ctypes.POINTER(struct_tinfo_t))),
    ('write_value', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(union_value_u), ctypes.c_int32, ctypes.POINTER(struct__qstring_char_))),
    ('calc_string_length', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t))),
    ('get_string', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t), ctypes.c_uint64)),
    ('guess_array_size', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t))),
    ('get_tinfo', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_argloc_t))),
    ('calc_number_of_children', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t))),
    ('print_ptr_value', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(ctypes.c_char), ctypes.c_uint64, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t))),
]

class struct_ida_movable_type_argloc_t_(Structure):
    pass

class struct_qvector_argloc_t_(Structure):
    pass

struct_qvector_argloc_t_._pack_ = 1 # source:False
struct_qvector_argloc_t_._fields_ = [
    ('array', ctypes.POINTER(struct_argloc_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_argloc_t___iterator = ctypes.POINTER(struct_argloc_t)
qvector_argloc_t___const_iterator = ctypes.POINTER(struct_argloc_t)
arglocs_t = struct_qvector_argloc_t_
class struct_ida_movable_type_argpart_t_(Structure):
    pass

class struct_ida_movable_type_scattered_aloc_t_(Structure):
    pass

class struct_aloc_visitor_t(Structure):
    pass

struct_aloc_visitor_t._pack_ = 1 # source:False
struct_aloc_visitor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_aloc_visitor_t_vtbl)),
]

class struct_const_aloc_visitor_t(Structure):
    pass

struct_const_aloc_visitor_t._pack_ = 1 # source:False
struct_const_aloc_visitor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_const_aloc_visitor_t_vtbl)),
]

compvec_t = struct_qvector_unsigned_char_

# values for enumeration 'abs_t'
abs_t__enumvalues = {
    0: 'abs_unk',
    1: 'abs_no',
    2: 'abs_yes',
}
abs_unk = 0
abs_no = 1
abs_yes = 2
abs_t = ctypes.c_uint32 # enum

# values for enumeration 'sclass_t'
sclass_t__enumvalues = {
    0: 'sc_unk',
    1: 'sc_type',
    2: 'sc_ext',
    3: 'sc_stat',
    4: 'sc_reg',
    5: 'sc_auto',
    6: 'sc_friend',
    7: 'sc_virt',
}
sc_unk = 0
sc_type = 1
sc_ext = 2
sc_stat = 3
sc_reg = 4
sc_auto = 5
sc_friend = 6
sc_virt = 7
sclass_t = ctypes.c_uint32 # enum
_B52219EC9FEEEB7613BA56E0CE8F1794 = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None))
printer_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char))

# values for enumeration 'tinfo_code_t'
tinfo_code_t__enumvalues = {
    0: 'TERR_OK',
    4294967295: 'TERR_SAVE',
    4294967294: 'TERR_SERIALIZE',
    4294967293: 'TERR_WRONGNAME',
    4294967292: 'TERR_BADSYNC',
}
TERR_OK = 0
TERR_SAVE = 4294967295
TERR_SERIALIZE = 4294967294
TERR_WRONGNAME = 4294967293
TERR_BADSYNC = 4294967292
tinfo_code_t = ctypes.c_uint32 # enum
class struct_ptr_type_data_t(Structure):
    pass

struct_ptr_type_data_t._pack_ = 1 # source:False
struct_ptr_type_data_t._fields_ = [
    ('obj_type', struct_tinfo_t),
    ('closure', struct_tinfo_t),
    ('based_ptr_size', ctypes.c_ubyte),
    ('taptr_bits', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('parent', struct_tinfo_t),
    ('delta', ctypes.c_int32),
]

class struct_qvector_udt_member_t_(Structure):
    pass

class struct_udt_member_t(Structure):
    pass

struct_qvector_udt_member_t_._pack_ = 1 # source:False
struct_qvector_udt_member_t_._fields_ = [
    ('array', ctypes.POINTER(struct_udt_member_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

class struct_udtmembervec_t(struct_qvector_udt_member_t_):
    pass

class struct_udt_type_data_t(struct_udtmembervec_t):
    pass

struct_udt_type_data_t._pack_ = 1 # source:False
struct_udt_type_data_t._fields_ = [
    ('total_size', ctypes.c_uint64),
    ('unpadded_size', ctypes.c_uint64),
    ('effalign', ctypes.c_uint32),
    ('taudt_bits', ctypes.c_uint32),
    ('sda', ctypes.c_ubyte),
    ('pack', ctypes.c_ubyte),
    ('is_union', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 5),
]

class struct_qvector_enum_member_t_(Structure):
    pass

class struct_enum_member_t(Structure):
    pass

struct_qvector_enum_member_t_._pack_ = 1 # source:False
struct_qvector_enum_member_t_._fields_ = [
    ('array', ctypes.POINTER(struct_enum_member_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

enum_member_vec_t = struct_qvector_enum_member_t_
class struct_enum_type_data_t(struct_qvector_enum_member_t_):
    pass

struct_enum_type_data_t._pack_ = 1 # source:False
struct_enum_type_data_t._fields_ = [
    ('group_sizes', intvec_t),
    ('taenum_bits', ctypes.c_uint32),
    ('bte', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

class struct_array_type_data_t(Structure):
    pass

struct_array_type_data_t._pack_ = 1 # source:False
struct_array_type_data_t._fields_ = [
    ('elem_type', struct_tinfo_t),
    ('base', ctypes.c_uint32),
    ('nelems', ctypes.c_uint32),
]

class union_typedef_type_data_t___5FA288E9F36186DAB0C04B104ACC3745(Union):
    pass

union_typedef_type_data_t___5FA288E9F36186DAB0C04B104ACC3745._pack_ = 1 # source:False
union_typedef_type_data_t___5FA288E9F36186DAB0C04B104ACC3745._fields_ = [
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('ordinal', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_typedef_type_data_t(Structure):
    pass

class union_typedef_type_data_t_0(Union):
    pass

union_typedef_type_data_t_0._pack_ = 1 # source:False
union_typedef_type_data_t_0._fields_ = [
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('ordinal', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

struct_typedef_type_data_t._pack_ = 1 # source:False
struct_typedef_type_data_t._anonymous_ = ('_0',)
struct_typedef_type_data_t._fields_ = [
    ('til', ctypes.POINTER(struct_til_t)),
    ('_0', union_typedef_type_data_t_0),
    ('is_ordref', ctypes.c_char),
    ('resolve', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

class struct_bitfield_type_data_t(Structure):
    pass

struct_bitfield_type_data_t._pack_ = 1 # source:False
struct_bitfield_type_data_t._fields_ = [
    ('nbytes', ctypes.c_ubyte),
    ('width', ctypes.c_ubyte),
    ('is_unsigned', ctypes.c_char),
]


# values for enumeration 'stock_type_id_t'
stock_type_id_t__enumvalues = {
    0: 'STI_PCHAR',
    1: 'STI_PUCHAR',
    2: 'STI_PCCHAR',
    3: 'STI_PCUCHAR',
    4: 'STI_PBYTE',
    5: 'STI_PINT',
    6: 'STI_PUINT',
    7: 'STI_PVOID',
    8: 'STI_PPVOID',
    9: 'STI_PCVOID',
    10: 'STI_ACHAR',
    11: 'STI_AUCHAR',
    12: 'STI_ACCHAR',
    13: 'STI_ACUCHAR',
    14: 'STI_FPURGING',
    15: 'STI_FDELOP',
    16: 'STI_MSGSEND',
    17: 'STI_AEABI_LCMP',
    18: 'STI_AEABI_ULCMP',
    19: 'STI_DONT_USE',
    20: 'STI_SIZE_T',
    21: 'STI_SSIZE_T',
    22: 'STI_AEABI_MEMCPY',
    23: 'STI_AEABI_MEMSET',
    24: 'STI_AEABI_MEMCLR',
    25: 'STI_RTC_CHECK_2',
    26: 'STI_RTC_CHECK_4',
    27: 'STI_RTC_CHECK_8',
    28: 'STI_COMPLEX64',
    29: 'STI_COMPLEX128',
    30: 'STI_LAST',
}
STI_PCHAR = 0
STI_PUCHAR = 1
STI_PCCHAR = 2
STI_PCUCHAR = 3
STI_PBYTE = 4
STI_PINT = 5
STI_PUINT = 6
STI_PVOID = 7
STI_PPVOID = 8
STI_PCVOID = 9
STI_ACHAR = 10
STI_AUCHAR = 11
STI_ACCHAR = 12
STI_ACUCHAR = 13
STI_FPURGING = 14
STI_FDELOP = 15
STI_MSGSEND = 16
STI_AEABI_LCMP = 17
STI_AEABI_ULCMP = 18
STI_DONT_USE = 19
STI_SIZE_T = 20
STI_SSIZE_T = 21
STI_AEABI_MEMCPY = 22
STI_AEABI_MEMSET = 23
STI_AEABI_MEMCLR = 24
STI_RTC_CHECK_2 = 25
STI_RTC_CHECK_4 = 26
STI_RTC_CHECK_8 = 27
STI_COMPLEX64 = 28
STI_COMPLEX128 = 29
STI_LAST = 30
stock_type_id_t = ctypes.c_uint32 # enum

# values for enumeration 'gtd_udt_t'
gtd_udt_t__enumvalues = {
    0: 'GTD_CALC_LAYOUT',
    128: 'GTD_NO_LAYOUT',
    64: 'GTD_DEL_BITFLDS',
}
GTD_CALC_LAYOUT = 0
GTD_NO_LAYOUT = 128
GTD_DEL_BITFLDS = 64
gtd_udt_t = ctypes.c_uint32 # enum

# values for enumeration 'gtd_func_t'
gtd_func_t__enumvalues = {
    0: 'GTD_CALC_ARGLOCS',
    128: 'GTD_NO_ARGLOCS',
}
GTD_CALC_ARGLOCS = 0
GTD_NO_ARGLOCS = 128
gtd_func_t = ctypes.c_uint32 # enum

# values for enumeration 'gts_code_t'
gts_code_t__enumvalues = {
    1: 'GTS_NESTED',
    2: 'GTS_BASECLASS',
}
GTS_NESTED = 1
GTS_BASECLASS = 2
gts_code_t = ctypes.c_uint32 # enum
class struct_tinfo_visitor_t(Structure):
    pass

struct_tinfo_visitor_t._pack_ = 1 # source:False
struct_tinfo_visitor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_tinfo_visitor_t_vtbl)),
    ('state', ctypes.c_int32),
    ('level', ctypes.c_int32),
]

class struct_type_mods_t(Structure):
    pass

struct_type_mods_t._pack_ = 1 # source:False
struct_type_mods_t._fields_ = [
    ('type', struct_tinfo_t),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('name', qstring),
    ('cmt', qstring),
    ('flags', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

class struct_ida_movable_type_tinfo_t_(Structure):
    pass

class struct_qvector_tinfo_t_(Structure):
    pass

struct_qvector_tinfo_t_._pack_ = 1 # source:False
struct_qvector_tinfo_t_._fields_ = [
    ('array', ctypes.POINTER(struct_tinfo_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_tinfo_t___iterator = ctypes.POINTER(struct_tinfo_t)
qvector_tinfo_t___const_iterator = ctypes.POINTER(struct_tinfo_t)
tinfovec_t = struct_qvector_tinfo_t_
class struct_ida_movable_type_simd_info_t_(Structure):
    pass

class struct_qvector_simd_info_t_(Structure):
    pass

struct_qvector_simd_info_t_._pack_ = 1 # source:False
struct_qvector_simd_info_t_._fields_ = [
    ('array', ctypes.POINTER(struct_simd_info_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_simd_info_t___iterator = ctypes.POINTER(struct_simd_info_t)
qvector_simd_info_t___const_iterator = ctypes.POINTER(struct_simd_info_t)
simd_info_vec_t = struct_qvector_simd_info_t_
class struct_ida_movable_type_ptr_type_data_t_(Structure):
    pass

class struct_ida_movable_type_array_type_data_t_(Structure):
    pass

class struct_ida_movable_type_funcarg_t_(Structure):
    pass


# values for enumeration 'format_functype_t'
format_functype_t__enumvalues = {
    0: 'FMTFUNC_PRINTF',
    1: 'FMTFUNC_SCANF',
    2: 'FMTFUNC_STRFTIME',
    3: 'FMTFUNC_STRFMON',
}
FMTFUNC_PRINTF = 0
FMTFUNC_SCANF = 1
FMTFUNC_STRFTIME = 2
FMTFUNC_STRFMON = 3
format_functype_t = ctypes.c_uint32 # enum
class struct_ida_movable_type_enum_member_t_(Structure):
    pass

qvector_enum_member_t___iterator = ctypes.POINTER(struct_enum_member_t)
qvector_enum_member_t___const_iterator = ctypes.POINTER(struct_enum_member_t)
class struct_ida_movable_type_enum_type_data_t_(Structure):
    pass

class struct_ida_movable_type_typedef_type_data_t_(Structure):
    pass

class struct_ida_movable_type_udt_member_t_(Structure):
    pass

qvector_udt_member_t___iterator = ctypes.POINTER(struct_udt_member_t)
qvector_udt_member_t___const_iterator = ctypes.POINTER(struct_udt_member_t)
class struct_ida_movable_type_udt_type_data_t_(Structure):
    pass

class struct_ida_movable_type_bitfield_type_data_t_(Structure):
    pass

class struct_ida_movable_type_regobj_t_(Structure):
    pass

class struct_argtinfo_helper_t(Structure):
    pass

struct_argtinfo_helper_t._pack_ = 1 # source:False
struct_argtinfo_helper_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_argtinfo_helper_t_vtbl)),
    ('reserved', ctypes.c_uint64),
]

class struct_lowertype_helper_t(Structure):
    pass

struct_lowertype_helper_t._pack_ = 1 # source:False
struct_lowertype_helper_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_lowertype_helper_t_vtbl)),
]

class struct_ida_lowertype_helper_t(struct_lowertype_helper_t):
    pass

struct_ida_lowertype_helper_t._pack_ = 1 # source:False
struct_ida_lowertype_helper_t._fields_ = [
    ('tif', ctypes.POINTER(struct_tinfo_t)),
    ('ea', ctypes.c_uint64),
    ('purged_bytes', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]


# values for enumeration 'update_type_t'
update_type_t__enumvalues = {
    0: 'UTP_ENUM',
    1: 'UTP_STRUCT',
}
UTP_ENUM = 0
UTP_STRUCT = 1
update_type_t = ctypes.c_uint32 # enum
class struct_format_data_info_t(Structure):
    pass

struct_format_data_info_t._pack_ = 1 # source:False
struct_format_data_info_t._fields_ = [
    ('ptvf', ctypes.c_int32),
    ('radix', ctypes.c_int32),
    ('max_length', ctypes.c_int32),
    ('arrbase', ctypes.c_int32),
    ('arrnelems', ctypes.c_int32),
    ('margin', ctypes.c_int32),
    ('indent', ctypes.c_int32),
]

class struct_valinfo_t(Structure):
    pass

struct_valinfo_t._pack_ = 1 # source:False
struct_valinfo_t._fields_ = [
    ('loc', struct_argloc_t),
    ('label', qstring),
    ('type', struct_tinfo_t),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_ida_movable_type_valinfo_t_(Structure):
    pass

class struct_valstr_t(Structure):
    pass

class struct_valstrs_t(Structure):
    pass

struct_valstr_t._pack_ = 1 # source:False
struct_valstr_t._fields_ = [
    ('oneline', qstring),
    ('length', ctypes.c_uint64),
    ('members', ctypes.POINTER(struct_valstrs_t)),
    ('info', ctypes.POINTER(struct_valinfo_t)),
    ('props', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_valstr_t__flatten_args_t(Structure):
    pass

struct_valstr_t__flatten_args_t._pack_ = 1 # source:False
struct_valstr_t__flatten_args_t._fields_ = [
    ('may_not_collapse', ctypes.POINTER(struct_valstr_t)),
    ('ptvf', ctypes.c_int32),
    ('max_length', ctypes.c_int32),
    ('margin', ctypes.c_int32),
    ('indent', ctypes.c_int32),
]

class struct_qvector_valstr_t_(Structure):
    pass

struct_qvector_valstr_t_._pack_ = 1 # source:False
struct_qvector_valstr_t_._fields_ = [
    ('array', ctypes.POINTER(struct_valstr_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

valstrvec_t = struct_qvector_valstr_t_
qvector_valstr_t___iterator = ctypes.POINTER(struct_valstr_t)
qvector_valstr_t___const_iterator = ctypes.POINTER(struct_valstr_t)
class struct_ida_movable_type_valstr_t_(Structure):
    pass

class struct_text_sink_t(Structure):
    pass

struct_text_sink_t._pack_ = 1 # source:False
struct_text_sink_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_text_sink_t_vtbl)),
]

class struct_qvector_unsigned_int_(Structure):
    pass

struct_qvector_unsigned_int_._pack_ = 1 # source:False
struct_qvector_unsigned_int_._fields_ = [
    ('array', ctypes.POINTER(ctypes.c_uint32)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_unsigned_int___iterator = ctypes.POINTER(ctypes.c_uint32)
qvector_unsigned_int___const_iterator = ctypes.POINTER(ctypes.c_uint32)
ordvec_t = struct_qvector_unsigned_int_
class struct_til_symbol_t(Structure):
    pass

struct_til_symbol_t._pack_ = 1 # source:False
struct_til_symbol_t._fields_ = [
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('til', ctypes.POINTER(struct_til_t)),
]

class struct_ida_movable_type_til_symbol_t_(Structure):
    pass

class struct_predicate_t(Structure):
    pass

struct_predicate_t._pack_ = 1 # source:False
struct_predicate_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_predicate_t_vtbl)),
]

_5180D2431AAA58F02F49DC28AEB2105D = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint32, ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(None))
_A733A7B66D85F1BCB3C320081B86070A = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_insn_t), ctypes.POINTER(struct_op_t), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(ctypes.c_char))
_FAE2C21797B3ADDF1CCA604739912F24 = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_insn_t), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32))

# values for enumeration '_CE7E32CC3E1379FDB2C7D74087D653D3'
_CE7E32CC3E1379FDB2C7D74087D653D3__enumvalues = {
    0: 'NN_null',
    1: 'NN_aaa',
    2: 'NN_aad',
    3: 'NN_aam',
    4: 'NN_aas',
    5: 'NN_adc',
    6: 'NN_add',
    7: 'NN_and',
    8: 'NN_arpl',
    9: 'NN_bound',
    10: 'NN_bsf',
    11: 'NN_bsr',
    12: 'NN_bt',
    13: 'NN_btc',
    14: 'NN_btr',
    15: 'NN_bts',
    16: 'NN_call',
    17: 'NN_callfi',
    18: 'NN_callni',
    19: 'NN_cbw',
    20: 'NN_cwde',
    21: 'NN_cdqe',
    22: 'NN_clc',
    23: 'NN_cld',
    24: 'NN_cli',
    25: 'NN_clts',
    26: 'NN_cmc',
    27: 'NN_cmp',
    28: 'NN_cmps',
    29: 'NN_cwd',
    30: 'NN_cdq',
    31: 'NN_cqo',
    32: 'NN_daa',
    33: 'NN_das',
    34: 'NN_dec',
    35: 'NN_div',
    36: 'NN_enterw',
    37: 'NN_enter',
    38: 'NN_enterd',
    39: 'NN_enterq',
    40: 'NN_hlt',
    41: 'NN_idiv',
    42: 'NN_imul',
    43: 'NN_in',
    44: 'NN_inc',
    45: 'NN_ins',
    46: 'NN_int',
    47: 'NN_into',
    48: 'NN_int3',
    49: 'NN_iretw',
    50: 'NN_iret',
    51: 'NN_iretd',
    52: 'NN_iretq',
    53: 'NN_ja',
    54: 'NN_jae',
    55: 'NN_jb',
    56: 'NN_jbe',
    57: 'NN_jc',
    58: 'NN_jcxz',
    59: 'NN_jecxz',
    60: 'NN_jrcxz',
    61: 'NN_je',
    62: 'NN_jg',
    63: 'NN_jge',
    64: 'NN_jl',
    65: 'NN_jle',
    66: 'NN_jna',
    67: 'NN_jnae',
    68: 'NN_jnb',
    69: 'NN_jnbe',
    70: 'NN_jnc',
    71: 'NN_jne',
    72: 'NN_jng',
    73: 'NN_jnge',
    74: 'NN_jnl',
    75: 'NN_jnle',
    76: 'NN_jno',
    77: 'NN_jnp',
    78: 'NN_jns',
    79: 'NN_jnz',
    80: 'NN_jo',
    81: 'NN_jp',
    82: 'NN_jpe',
    83: 'NN_jpo',
    84: 'NN_js',
    85: 'NN_jz',
    86: 'NN_jmp',
    87: 'NN_jmpfi',
    88: 'NN_jmpni',
    89: 'NN_jmpshort',
    90: 'NN_lahf',
    91: 'NN_lar',
    92: 'NN_lea',
    93: 'NN_leavew',
    94: 'NN_leave',
    95: 'NN_leaved',
    96: 'NN_leaveq',
    97: 'NN_lgdt',
    98: 'NN_lidt',
    99: 'NN_lgs',
    100: 'NN_lss',
    101: 'NN_lds',
    102: 'NN_les',
    103: 'NN_lfs',
    104: 'NN_lldt',
    105: 'NN_lmsw',
    106: 'NN_lock',
    107: 'NN_lods',
    108: 'NN_loopw',
    109: 'NN_loop',
    110: 'NN_loopd',
    111: 'NN_loopq',
    112: 'NN_loopwe',
    113: 'NN_loope',
    114: 'NN_loopde',
    115: 'NN_loopqe',
    116: 'NN_loopwne',
    117: 'NN_loopne',
    118: 'NN_loopdne',
    119: 'NN_loopqne',
    120: 'NN_lsl',
    121: 'NN_ltr',
    122: 'NN_mov',
    123: 'NN_movsp',
    124: 'NN_movs',
    125: 'NN_movsx',
    126: 'NN_movzx',
    127: 'NN_mul',
    128: 'NN_neg',
    129: 'NN_nop',
    130: 'NN_not',
    131: 'NN_or',
    132: 'NN_out',
    133: 'NN_outs',
    134: 'NN_pop',
    135: 'NN_popaw',
    136: 'NN_popa',
    137: 'NN_popad',
    138: 'NN_popaq',
    139: 'NN_popfw',
    140: 'NN_popf',
    141: 'NN_popfd',
    142: 'NN_popfq',
    143: 'NN_push',
    144: 'NN_pushaw',
    145: 'NN_pusha',
    146: 'NN_pushad',
    147: 'NN_pushaq',
    148: 'NN_pushfw',
    149: 'NN_pushf',
    150: 'NN_pushfd',
    151: 'NN_pushfq',
    152: 'NN_rcl',
    153: 'NN_rcr',
    154: 'NN_rol',
    155: 'NN_ror',
    156: 'NN_rep',
    157: 'NN_repe',
    158: 'NN_repne',
    159: 'NN_retn',
    160: 'NN_retf',
    161: 'NN_sahf',
    162: 'NN_sal',
    163: 'NN_sar',
    164: 'NN_shl',
    165: 'NN_shr',
    166: 'NN_sbb',
    167: 'NN_scas',
    168: 'NN_seta',
    169: 'NN_setae',
    170: 'NN_setb',
    171: 'NN_setbe',
    172: 'NN_setc',
    173: 'NN_sete',
    174: 'NN_setg',
    175: 'NN_setge',
    176: 'NN_setl',
    177: 'NN_setle',
    178: 'NN_setna',
    179: 'NN_setnae',
    180: 'NN_setnb',
    181: 'NN_setnbe',
    182: 'NN_setnc',
    183: 'NN_setne',
    184: 'NN_setng',
    185: 'NN_setnge',
    186: 'NN_setnl',
    187: 'NN_setnle',
    188: 'NN_setno',
    189: 'NN_setnp',
    190: 'NN_setns',
    191: 'NN_setnz',
    192: 'NN_seto',
    193: 'NN_setp',
    194: 'NN_setpe',
    195: 'NN_setpo',
    196: 'NN_sets',
    197: 'NN_setz',
    198: 'NN_sgdt',
    199: 'NN_sidt',
    200: 'NN_shld',
    201: 'NN_shrd',
    202: 'NN_sldt',
    203: 'NN_smsw',
    204: 'NN_stc',
    205: 'NN_std',
    206: 'NN_sti',
    207: 'NN_stos',
    208: 'NN_str',
    209: 'NN_sub',
    210: 'NN_test',
    211: 'NN_verr',
    212: 'NN_verw',
    213: 'NN_wait',
    214: 'NN_xchg',
    215: 'NN_xlat',
    216: 'NN_xor',
    217: 'NN_cmpxchg',
    218: 'NN_bswap',
    219: 'NN_xadd',
    220: 'NN_invd',
    221: 'NN_wbinvd',
    222: 'NN_invlpg',
    223: 'NN_rdmsr',
    224: 'NN_wrmsr',
    225: 'NN_cpuid',
    226: 'NN_cmpxchg8b',
    227: 'NN_rdtsc',
    228: 'NN_rsm',
    229: 'NN_cmova',
    230: 'NN_cmovb',
    231: 'NN_cmovbe',
    232: 'NN_cmovg',
    233: 'NN_cmovge',
    234: 'NN_cmovl',
    235: 'NN_cmovle',
    236: 'NN_cmovnb',
    237: 'NN_cmovno',
    238: 'NN_cmovnp',
    239: 'NN_cmovns',
    240: 'NN_cmovnz',
    241: 'NN_cmovo',
    242: 'NN_cmovp',
    243: 'NN_cmovs',
    244: 'NN_cmovz',
    245: 'NN_fcmovb',
    246: 'NN_fcmove',
    247: 'NN_fcmovbe',
    248: 'NN_fcmovu',
    249: 'NN_fcmovnb',
    250: 'NN_fcmovne',
    251: 'NN_fcmovnbe',
    252: 'NN_fcmovnu',
    253: 'NN_fcomi',
    254: 'NN_fucomi',
    255: 'NN_fcomip',
    256: 'NN_fucomip',
    257: 'NN_rdpmc',
    258: 'NN_fld',
    259: 'NN_fst',
    260: 'NN_fstp',
    261: 'NN_fxch',
    262: 'NN_fild',
    263: 'NN_fist',
    264: 'NN_fistp',
    265: 'NN_fbld',
    266: 'NN_fbstp',
    267: 'NN_fadd',
    268: 'NN_faddp',
    269: 'NN_fiadd',
    270: 'NN_fsub',
    271: 'NN_fsubp',
    272: 'NN_fisub',
    273: 'NN_fsubr',
    274: 'NN_fsubrp',
    275: 'NN_fisubr',
    276: 'NN_fmul',
    277: 'NN_fmulp',
    278: 'NN_fimul',
    279: 'NN_fdiv',
    280: 'NN_fdivp',
    281: 'NN_fidiv',
    282: 'NN_fdivr',
    283: 'NN_fdivrp',
    284: 'NN_fidivr',
    285: 'NN_fsqrt',
    286: 'NN_fscale',
    287: 'NN_fprem',
    288: 'NN_frndint',
    289: 'NN_fxtract',
    290: 'NN_fabs',
    291: 'NN_fchs',
    292: 'NN_fcom',
    293: 'NN_fcomp',
    294: 'NN_fcompp',
    295: 'NN_ficom',
    296: 'NN_ficomp',
    297: 'NN_ftst',
    298: 'NN_fxam',
    299: 'NN_fptan',
    300: 'NN_fpatan',
    301: 'NN_f2xm1',
    302: 'NN_fyl2x',
    303: 'NN_fyl2xp1',
    304: 'NN_fldz',
    305: 'NN_fld1',
    306: 'NN_fldpi',
    307: 'NN_fldl2t',
    308: 'NN_fldl2e',
    309: 'NN_fldlg2',
    310: 'NN_fldln2',
    311: 'NN_finit',
    312: 'NN_fninit',
    313: 'NN_fsetpm',
    314: 'NN_fldcw',
    315: 'NN_fstcw',
    316: 'NN_fnstcw',
    317: 'NN_fstsw',
    318: 'NN_fnstsw',
    319: 'NN_fclex',
    320: 'NN_fnclex',
    321: 'NN_fstenv',
    322: 'NN_fnstenv',
    323: 'NN_fldenv',
    324: 'NN_fsave',
    325: 'NN_fnsave',
    326: 'NN_frstor',
    327: 'NN_fincstp',
    328: 'NN_fdecstp',
    329: 'NN_ffree',
    330: 'NN_fnop',
    331: 'NN_feni',
    332: 'NN_fneni',
    333: 'NN_fdisi',
    334: 'NN_fndisi',
    335: 'NN_fprem1',
    336: 'NN_fsincos',
    337: 'NN_fsin',
    338: 'NN_fcos',
    339: 'NN_fucom',
    340: 'NN_fucomp',
    341: 'NN_fucompp',
    342: 'NN_setalc',
    343: 'NN_svdc',
    344: 'NN_rsdc',
    345: 'NN_svldt',
    346: 'NN_rsldt',
    347: 'NN_svts',
    348: 'NN_rsts',
    349: 'NN_icebp',
    350: 'NN_loadall',
    351: 'NN_emms',
    352: 'NN_movd',
    353: 'NN_movq',
    354: 'NN_packsswb',
    355: 'NN_packssdw',
    356: 'NN_packuswb',
    357: 'NN_paddb',
    358: 'NN_paddw',
    359: 'NN_paddd',
    360: 'NN_paddsb',
    361: 'NN_paddsw',
    362: 'NN_paddusb',
    363: 'NN_paddusw',
    364: 'NN_pand',
    365: 'NN_pandn',
    366: 'NN_pcmpeqb',
    367: 'NN_pcmpeqw',
    368: 'NN_pcmpeqd',
    369: 'NN_pcmpgtb',
    370: 'NN_pcmpgtw',
    371: 'NN_pcmpgtd',
    372: 'NN_pmaddwd',
    373: 'NN_pmulhw',
    374: 'NN_pmullw',
    375: 'NN_por',
    376: 'NN_psllw',
    377: 'NN_pslld',
    378: 'NN_psllq',
    379: 'NN_psraw',
    380: 'NN_psrad',
    381: 'NN_psrlw',
    382: 'NN_psrld',
    383: 'NN_psrlq',
    384: 'NN_psubb',
    385: 'NN_psubw',
    386: 'NN_psubd',
    387: 'NN_psubsb',
    388: 'NN_psubsw',
    389: 'NN_psubusb',
    390: 'NN_psubusw',
    391: 'NN_punpckhbw',
    392: 'NN_punpckhwd',
    393: 'NN_punpckhdq',
    394: 'NN_punpcklbw',
    395: 'NN_punpcklwd',
    396: 'NN_punpckldq',
    397: 'NN_pxor',
    398: 'NN_fxsave',
    399: 'NN_fxrstor',
    400: 'NN_sysenter',
    401: 'NN_sysexit',
    402: 'NN_pavgusb',
    403: 'NN_pfadd',
    404: 'NN_pfsub',
    405: 'NN_pfsubr',
    406: 'NN_pfacc',
    407: 'NN_pfcmpge',
    408: 'NN_pfcmpgt',
    409: 'NN_pfcmpeq',
    410: 'NN_pfmin',
    411: 'NN_pfmax',
    412: 'NN_pi2fd',
    413: 'NN_pf2id',
    414: 'NN_pfrcp',
    415: 'NN_pfrsqrt',
    416: 'NN_pfmul',
    417: 'NN_pfrcpit1',
    418: 'NN_pfrsqit1',
    419: 'NN_pfrcpit2',
    420: 'NN_pmulhrw',
    421: 'NN_femms',
    422: 'NN_prefetch',
    423: 'NN_prefetchw',
    424: 'NN_addps',
    425: 'NN_addss',
    426: 'NN_andnps',
    427: 'NN_andps',
    428: 'NN_cmpps',
    429: 'NN_cmpss',
    430: 'NN_comiss',
    431: 'NN_cvtpi2ps',
    432: 'NN_cvtps2pi',
    433: 'NN_cvtsi2ss',
    434: 'NN_cvtss2si',
    435: 'NN_cvttps2pi',
    436: 'NN_cvttss2si',
    437: 'NN_divps',
    438: 'NN_divss',
    439: 'NN_ldmxcsr',
    440: 'NN_maxps',
    441: 'NN_maxss',
    442: 'NN_minps',
    443: 'NN_minss',
    444: 'NN_movaps',
    445: 'NN_movhlps',
    446: 'NN_movhps',
    447: 'NN_movlhps',
    448: 'NN_movlps',
    449: 'NN_movmskps',
    450: 'NN_movss',
    451: 'NN_movups',
    452: 'NN_mulps',
    453: 'NN_mulss',
    454: 'NN_orps',
    455: 'NN_rcpps',
    456: 'NN_rcpss',
    457: 'NN_rsqrtps',
    458: 'NN_rsqrtss',
    459: 'NN_shufps',
    460: 'NN_sqrtps',
    461: 'NN_sqrtss',
    462: 'NN_stmxcsr',
    463: 'NN_subps',
    464: 'NN_subss',
    465: 'NN_ucomiss',
    466: 'NN_unpckhps',
    467: 'NN_unpcklps',
    468: 'NN_xorps',
    469: 'NN_pavgb',
    470: 'NN_pavgw',
    471: 'NN_pextrw',
    472: 'NN_pinsrw',
    473: 'NN_pmaxsw',
    474: 'NN_pmaxub',
    475: 'NN_pminsw',
    476: 'NN_pminub',
    477: 'NN_pmovmskb',
    478: 'NN_pmulhuw',
    479: 'NN_psadbw',
    480: 'NN_pshufw',
    481: 'NN_maskmovq',
    482: 'NN_movntps',
    483: 'NN_movntq',
    484: 'NN_prefetcht0',
    485: 'NN_prefetcht1',
    486: 'NN_prefetcht2',
    487: 'NN_prefetchnta',
    488: 'NN_sfence',
    489: 'NN_cmpeqps',
    490: 'NN_cmpltps',
    491: 'NN_cmpleps',
    492: 'NN_cmpunordps',
    493: 'NN_cmpneqps',
    494: 'NN_cmpnltps',
    495: 'NN_cmpnleps',
    496: 'NN_cmpordps',
    497: 'NN_cmpeqss',
    498: 'NN_cmpltss',
    499: 'NN_cmpless',
    500: 'NN_cmpunordss',
    501: 'NN_cmpneqss',
    502: 'NN_cmpnltss',
    503: 'NN_cmpnless',
    504: 'NN_cmpordss',
    505: 'NN_pf2iw',
    506: 'NN_pfnacc',
    507: 'NN_pfpnacc',
    508: 'NN_pi2fw',
    509: 'NN_pswapd',
    510: 'NN_fstp1',
    511: 'NN_fcom2',
    512: 'NN_fcomp3',
    513: 'NN_fxch4',
    514: 'NN_fcomp5',
    515: 'NN_ffreep',
    516: 'NN_fxch7',
    517: 'NN_fstp8',
    518: 'NN_fstp9',
    519: 'NN_addpd',
    520: 'NN_addsd',
    521: 'NN_andnpd',
    522: 'NN_andpd',
    523: 'NN_clflush',
    524: 'NN_cmppd',
    525: 'NN_cmpsd',
    526: 'NN_comisd',
    527: 'NN_cvtdq2pd',
    528: 'NN_cvtdq2ps',
    529: 'NN_cvtpd2dq',
    530: 'NN_cvtpd2pi',
    531: 'NN_cvtpd2ps',
    532: 'NN_cvtpi2pd',
    533: 'NN_cvtps2dq',
    534: 'NN_cvtps2pd',
    535: 'NN_cvtsd2si',
    536: 'NN_cvtsd2ss',
    537: 'NN_cvtsi2sd',
    538: 'NN_cvtss2sd',
    539: 'NN_cvttpd2dq',
    540: 'NN_cvttpd2pi',
    541: 'NN_cvttps2dq',
    542: 'NN_cvttsd2si',
    543: 'NN_divpd',
    544: 'NN_divsd',
    545: 'NN_lfence',
    546: 'NN_maskmovdqu',
    547: 'NN_maxpd',
    548: 'NN_maxsd',
    549: 'NN_mfence',
    550: 'NN_minpd',
    551: 'NN_minsd',
    552: 'NN_movapd',
    553: 'NN_movdq2q',
    554: 'NN_movdqa',
    555: 'NN_movdqu',
    556: 'NN_movhpd',
    557: 'NN_movlpd',
    558: 'NN_movmskpd',
    559: 'NN_movntdq',
    560: 'NN_movnti',
    561: 'NN_movntpd',
    562: 'NN_movq2dq',
    563: 'NN_movsd',
    564: 'NN_movupd',
    565: 'NN_mulpd',
    566: 'NN_mulsd',
    567: 'NN_orpd',
    568: 'NN_paddq',
    569: 'NN_pause',
    570: 'NN_pmuludq',
    571: 'NN_pshufd',
    572: 'NN_pshufhw',
    573: 'NN_pshuflw',
    574: 'NN_pslldq',
    575: 'NN_psrldq',
    576: 'NN_psubq',
    577: 'NN_punpckhqdq',
    578: 'NN_punpcklqdq',
    579: 'NN_shufpd',
    580: 'NN_sqrtpd',
    581: 'NN_sqrtsd',
    582: 'NN_subpd',
    583: 'NN_subsd',
    584: 'NN_ucomisd',
    585: 'NN_unpckhpd',
    586: 'NN_unpcklpd',
    587: 'NN_xorpd',
    588: 'NN_syscall',
    589: 'NN_sysret',
    590: 'NN_swapgs',
    591: 'NN_movddup',
    592: 'NN_movshdup',
    593: 'NN_movsldup',
    594: 'NN_movsxd',
    595: 'NN_cmpxchg16b',
    596: 'NN_addsubpd',
    597: 'NN_addsubps',
    598: 'NN_haddpd',
    599: 'NN_haddps',
    600: 'NN_hsubpd',
    601: 'NN_hsubps',
    602: 'NN_monitor',
    603: 'NN_mwait',
    604: 'NN_fisttp',
    605: 'NN_lddqu',
    606: 'NN_psignb',
    607: 'NN_psignw',
    608: 'NN_psignd',
    609: 'NN_pshufb',
    610: 'NN_pmulhrsw',
    611: 'NN_pmaddubsw',
    612: 'NN_phsubsw',
    613: 'NN_phaddsw',
    614: 'NN_phaddw',
    615: 'NN_phaddd',
    616: 'NN_phsubw',
    617: 'NN_phsubd',
    618: 'NN_palignr',
    619: 'NN_pabsb',
    620: 'NN_pabsw',
    621: 'NN_pabsd',
    622: 'NN_vmcall',
    623: 'NN_vmclear',
    624: 'NN_vmlaunch',
    625: 'NN_vmresume',
    626: 'NN_vmptrld',
    627: 'NN_vmptrst',
    628: 'NN_vmread',
    629: 'NN_vmwrite',
    630: 'NN_vmxoff',
    631: 'NN_vmxon',
    632: 'NN_ud2',
    633: 'NN_rdtscp',
    634: 'NN_pfrcpv',
    635: 'NN_pfrsqrtv',
    636: 'NN_cmpeqpd',
    637: 'NN_cmpltpd',
    638: 'NN_cmplepd',
    639: 'NN_cmpunordpd',
    640: 'NN_cmpneqpd',
    641: 'NN_cmpnltpd',
    642: 'NN_cmpnlepd',
    643: 'NN_cmpordpd',
    644: 'NN_cmpeqsd',
    645: 'NN_cmpltsd',
    646: 'NN_cmplesd',
    647: 'NN_cmpunordsd',
    648: 'NN_cmpneqsd',
    649: 'NN_cmpnltsd',
    650: 'NN_cmpnlesd',
    651: 'NN_cmpordsd',
    652: 'NN_blendpd',
    653: 'NN_blendps',
    654: 'NN_blendvpd',
    655: 'NN_blendvps',
    656: 'NN_dppd',
    657: 'NN_dpps',
    658: 'NN_extractps',
    659: 'NN_insertps',
    660: 'NN_movntdqa',
    661: 'NN_mpsadbw',
    662: 'NN_packusdw',
    663: 'NN_pblendvb',
    664: 'NN_pblendw',
    665: 'NN_pcmpeqq',
    666: 'NN_pextrb',
    667: 'NN_pextrd',
    668: 'NN_pextrq',
    669: 'NN_phminposuw',
    670: 'NN_pinsrb',
    671: 'NN_pinsrd',
    672: 'NN_pinsrq',
    673: 'NN_pmaxsb',
    674: 'NN_pmaxsd',
    675: 'NN_pmaxud',
    676: 'NN_pmaxuw',
    677: 'NN_pminsb',
    678: 'NN_pminsd',
    679: 'NN_pminud',
    680: 'NN_pminuw',
    681: 'NN_pmovsxbw',
    682: 'NN_pmovsxbd',
    683: 'NN_pmovsxbq',
    684: 'NN_pmovsxwd',
    685: 'NN_pmovsxwq',
    686: 'NN_pmovsxdq',
    687: 'NN_pmovzxbw',
    688: 'NN_pmovzxbd',
    689: 'NN_pmovzxbq',
    690: 'NN_pmovzxwd',
    691: 'NN_pmovzxwq',
    692: 'NN_pmovzxdq',
    693: 'NN_pmuldq',
    694: 'NN_pmulld',
    695: 'NN_ptest',
    696: 'NN_roundpd',
    697: 'NN_roundps',
    698: 'NN_roundsd',
    699: 'NN_roundss',
    700: 'NN_crc32',
    701: 'NN_pcmpestri',
    702: 'NN_pcmpestrm',
    703: 'NN_pcmpistri',
    704: 'NN_pcmpistrm',
    705: 'NN_pcmpgtq',
    706: 'NN_popcnt',
    707: 'NN_extrq',
    708: 'NN_insertq',
    709: 'NN_movntsd',
    710: 'NN_movntss',
    711: 'NN_lzcnt',
    712: 'NN_xgetbv',
    713: 'NN_xrstor',
    714: 'NN_xsave',
    715: 'NN_xsetbv',
    716: 'NN_getsec',
    717: 'NN_clgi',
    718: 'NN_invlpga',
    719: 'NN_skinit',
    720: 'NN_stgi',
    721: 'NN_vmexit',
    722: 'NN_vmload',
    723: 'NN_vmmcall',
    724: 'NN_vmrun',
    725: 'NN_vmsave',
    726: 'NN_invept',
    727: 'NN_invvpid',
    728: 'NN_movbe',
    729: 'NN_aesenc',
    730: 'NN_aesenclast',
    731: 'NN_aesdec',
    732: 'NN_aesdeclast',
    733: 'NN_aesimc',
    734: 'NN_aeskeygenassist',
    735: 'NN_pclmulqdq',
    736: 'NN_retnw',
    737: 'NN_retnd',
    738: 'NN_retnq',
    739: 'NN_retfw',
    740: 'NN_retfd',
    741: 'NN_retfq',
    742: 'NN_rdrand',
    743: 'NN_adcx',
    744: 'NN_adox',
    745: 'NN_andn',
    746: 'NN_bextr',
    747: 'NN_blsi',
    748: 'NN_blsmsk',
    749: 'NN_blsr',
    750: 'NN_bzhi',
    751: 'NN_clac',
    752: 'NN_mulx',
    753: 'NN_pdep',
    754: 'NN_pext',
    755: 'NN_rorx',
    756: 'NN_sarx',
    757: 'NN_shlx',
    758: 'NN_shrx',
    759: 'NN_stac',
    760: 'NN_tzcnt',
    761: 'NN_xsaveopt',
    762: 'NN_invpcid',
    763: 'NN_rdseed',
    764: 'NN_rdfsbase',
    765: 'NN_rdgsbase',
    766: 'NN_wrfsbase',
    767: 'NN_wrgsbase',
    768: 'NN_vaddpd',
    769: 'NN_vaddps',
    770: 'NN_vaddsd',
    771: 'NN_vaddss',
    772: 'NN_vaddsubpd',
    773: 'NN_vaddsubps',
    774: 'NN_vaesdec',
    775: 'NN_vaesdeclast',
    776: 'NN_vaesenc',
    777: 'NN_vaesenclast',
    778: 'NN_vaesimc',
    779: 'NN_vaeskeygenassist',
    780: 'NN_vandnpd',
    781: 'NN_vandnps',
    782: 'NN_vandpd',
    783: 'NN_vandps',
    784: 'NN_vblendpd',
    785: 'NN_vblendps',
    786: 'NN_vblendvpd',
    787: 'NN_vblendvps',
    788: 'NN_vbroadcastf128',
    789: 'NN_vbroadcasti128',
    790: 'NN_vbroadcastsd',
    791: 'NN_vbroadcastss',
    792: 'NN_vcmppd',
    793: 'NN_vcmpps',
    794: 'NN_vcmpsd',
    795: 'NN_vcmpss',
    796: 'NN_vcomisd',
    797: 'NN_vcomiss',
    798: 'NN_vcvtdq2pd',
    799: 'NN_vcvtdq2ps',
    800: 'NN_vcvtpd2dq',
    801: 'NN_vcvtpd2ps',
    802: 'NN_vcvtph2ps',
    803: 'NN_vcvtps2dq',
    804: 'NN_vcvtps2pd',
    805: 'NN_vcvtps2ph',
    806: 'NN_vcvtsd2si',
    807: 'NN_vcvtsd2ss',
    808: 'NN_vcvtsi2sd',
    809: 'NN_vcvtsi2ss',
    810: 'NN_vcvtss2sd',
    811: 'NN_vcvtss2si',
    812: 'NN_vcvttpd2dq',
    813: 'NN_vcvttps2dq',
    814: 'NN_vcvttsd2si',
    815: 'NN_vcvttss2si',
    816: 'NN_vdivpd',
    817: 'NN_vdivps',
    818: 'NN_vdivsd',
    819: 'NN_vdivss',
    820: 'NN_vdppd',
    821: 'NN_vdpps',
    822: 'NN_vextractf128',
    823: 'NN_vextracti128',
    824: 'NN_vextractps',
    825: 'NN_vfmadd132pd',
    826: 'NN_vfmadd132ps',
    827: 'NN_vfmadd132sd',
    828: 'NN_vfmadd132ss',
    829: 'NN_vfmadd213pd',
    830: 'NN_vfmadd213ps',
    831: 'NN_vfmadd213sd',
    832: 'NN_vfmadd213ss',
    833: 'NN_vfmadd231pd',
    834: 'NN_vfmadd231ps',
    835: 'NN_vfmadd231sd',
    836: 'NN_vfmadd231ss',
    837: 'NN_vfmaddsub132pd',
    838: 'NN_vfmaddsub132ps',
    839: 'NN_vfmaddsub213pd',
    840: 'NN_vfmaddsub213ps',
    841: 'NN_vfmaddsub231pd',
    842: 'NN_vfmaddsub231ps',
    843: 'NN_vfmsub132pd',
    844: 'NN_vfmsub132ps',
    845: 'NN_vfmsub132sd',
    846: 'NN_vfmsub132ss',
    847: 'NN_vfmsub213pd',
    848: 'NN_vfmsub213ps',
    849: 'NN_vfmsub213sd',
    850: 'NN_vfmsub213ss',
    851: 'NN_vfmsub231pd',
    852: 'NN_vfmsub231ps',
    853: 'NN_vfmsub231sd',
    854: 'NN_vfmsub231ss',
    855: 'NN_vfmsubadd132pd',
    856: 'NN_vfmsubadd132ps',
    857: 'NN_vfmsubadd213pd',
    858: 'NN_vfmsubadd213ps',
    859: 'NN_vfmsubadd231pd',
    860: 'NN_vfmsubadd231ps',
    861: 'NN_vfnmadd132pd',
    862: 'NN_vfnmadd132ps',
    863: 'NN_vfnmadd132sd',
    864: 'NN_vfnmadd132ss',
    865: 'NN_vfnmadd213pd',
    866: 'NN_vfnmadd213ps',
    867: 'NN_vfnmadd213sd',
    868: 'NN_vfnmadd213ss',
    869: 'NN_vfnmadd231pd',
    870: 'NN_vfnmadd231ps',
    871: 'NN_vfnmadd231sd',
    872: 'NN_vfnmadd231ss',
    873: 'NN_vfnmsub132pd',
    874: 'NN_vfnmsub132ps',
    875: 'NN_vfnmsub132sd',
    876: 'NN_vfnmsub132ss',
    877: 'NN_vfnmsub213pd',
    878: 'NN_vfnmsub213ps',
    879: 'NN_vfnmsub213sd',
    880: 'NN_vfnmsub213ss',
    881: 'NN_vfnmsub231pd',
    882: 'NN_vfnmsub231ps',
    883: 'NN_vfnmsub231sd',
    884: 'NN_vfnmsub231ss',
    885: 'NN_vgatherdps',
    886: 'NN_vgatherdpd',
    887: 'NN_vgatherqps',
    888: 'NN_vgatherqpd',
    889: 'NN_vhaddpd',
    890: 'NN_vhaddps',
    891: 'NN_vhsubpd',
    892: 'NN_vhsubps',
    893: 'NN_vinsertf128',
    894: 'NN_vinserti128',
    895: 'NN_vinsertps',
    896: 'NN_vlddqu',
    897: 'NN_vldmxcsr',
    898: 'NN_vmaskmovdqu',
    899: 'NN_vmaskmovpd',
    900: 'NN_vmaskmovps',
    901: 'NN_vmaxpd',
    902: 'NN_vmaxps',
    903: 'NN_vmaxsd',
    904: 'NN_vmaxss',
    905: 'NN_vminpd',
    906: 'NN_vminps',
    907: 'NN_vminsd',
    908: 'NN_vminss',
    909: 'NN_vmovapd',
    910: 'NN_vmovaps',
    911: 'NN_vmovd',
    912: 'NN_vmovddup',
    913: 'NN_vmovdqa',
    914: 'NN_vmovdqu',
    915: 'NN_vmovhlps',
    916: 'NN_vmovhpd',
    917: 'NN_vmovhps',
    918: 'NN_vmovlhps',
    919: 'NN_vmovlpd',
    920: 'NN_vmovlps',
    921: 'NN_vmovmskpd',
    922: 'NN_vmovmskps',
    923: 'NN_vmovntdq',
    924: 'NN_vmovntdqa',
    925: 'NN_vmovntpd',
    926: 'NN_vmovntps',
    927: 'NN_vmovq',
    928: 'NN_vmovsd',
    929: 'NN_vmovshdup',
    930: 'NN_vmovsldup',
    931: 'NN_vmovss',
    932: 'NN_vmovupd',
    933: 'NN_vmovups',
    934: 'NN_vmpsadbw',
    935: 'NN_vmulpd',
    936: 'NN_vmulps',
    937: 'NN_vmulsd',
    938: 'NN_vmulss',
    939: 'NN_vorpd',
    940: 'NN_vorps',
    941: 'NN_vpabsb',
    942: 'NN_vpabsd',
    943: 'NN_vpabsw',
    944: 'NN_vpackssdw',
    945: 'NN_vpacksswb',
    946: 'NN_vpackusdw',
    947: 'NN_vpackuswb',
    948: 'NN_vpaddb',
    949: 'NN_vpaddd',
    950: 'NN_vpaddq',
    951: 'NN_vpaddsb',
    952: 'NN_vpaddsw',
    953: 'NN_vpaddusb',
    954: 'NN_vpaddusw',
    955: 'NN_vpaddw',
    956: 'NN_vpalignr',
    957: 'NN_vpand',
    958: 'NN_vpandn',
    959: 'NN_vpavgb',
    960: 'NN_vpavgw',
    961: 'NN_vpblendd',
    962: 'NN_vpblendvb',
    963: 'NN_vpblendw',
    964: 'NN_vpbroadcastb',
    965: 'NN_vpbroadcastd',
    966: 'NN_vpbroadcastq',
    967: 'NN_vpbroadcastw',
    968: 'NN_vpclmulqdq',
    969: 'NN_vpcmpeqb',
    970: 'NN_vpcmpeqd',
    971: 'NN_vpcmpeqq',
    972: 'NN_vpcmpeqw',
    973: 'NN_vpcmpestri',
    974: 'NN_vpcmpestrm',
    975: 'NN_vpcmpgtb',
    976: 'NN_vpcmpgtd',
    977: 'NN_vpcmpgtq',
    978: 'NN_vpcmpgtw',
    979: 'NN_vpcmpistri',
    980: 'NN_vpcmpistrm',
    981: 'NN_vperm2f128',
    982: 'NN_vperm2i128',
    983: 'NN_vpermd',
    984: 'NN_vpermilpd',
    985: 'NN_vpermilps',
    986: 'NN_vpermpd',
    987: 'NN_vpermps',
    988: 'NN_vpermq',
    989: 'NN_vpextrb',
    990: 'NN_vpextrd',
    991: 'NN_vpextrq',
    992: 'NN_vpextrw',
    993: 'NN_vpgatherdd',
    994: 'NN_vpgatherdq',
    995: 'NN_vpgatherqd',
    996: 'NN_vpgatherqq',
    997: 'NN_vphaddd',
    998: 'NN_vphaddsw',
    999: 'NN_vphaddw',
    1000: 'NN_vphminposuw',
    1001: 'NN_vphsubd',
    1002: 'NN_vphsubsw',
    1003: 'NN_vphsubw',
    1004: 'NN_vpinsrb',
    1005: 'NN_vpinsrd',
    1006: 'NN_vpinsrq',
    1007: 'NN_vpinsrw',
    1008: 'NN_vpmaddubsw',
    1009: 'NN_vpmaddwd',
    1010: 'NN_vpmaskmovd',
    1011: 'NN_vpmaskmovq',
    1012: 'NN_vpmaxsb',
    1013: 'NN_vpmaxsd',
    1014: 'NN_vpmaxsw',
    1015: 'NN_vpmaxub',
    1016: 'NN_vpmaxud',
    1017: 'NN_vpmaxuw',
    1018: 'NN_vpminsb',
    1019: 'NN_vpminsd',
    1020: 'NN_vpminsw',
    1021: 'NN_vpminub',
    1022: 'NN_vpminud',
    1023: 'NN_vpminuw',
    1024: 'NN_vpmovmskb',
    1025: 'NN_vpmovsxbd',
    1026: 'NN_vpmovsxbq',
    1027: 'NN_vpmovsxbw',
    1028: 'NN_vpmovsxdq',
    1029: 'NN_vpmovsxwd',
    1030: 'NN_vpmovsxwq',
    1031: 'NN_vpmovzxbd',
    1032: 'NN_vpmovzxbq',
    1033: 'NN_vpmovzxbw',
    1034: 'NN_vpmovzxdq',
    1035: 'NN_vpmovzxwd',
    1036: 'NN_vpmovzxwq',
    1037: 'NN_vpmuldq',
    1038: 'NN_vpmulhrsw',
    1039: 'NN_vpmulhuw',
    1040: 'NN_vpmulhw',
    1041: 'NN_vpmulld',
    1042: 'NN_vpmullw',
    1043: 'NN_vpmuludq',
    1044: 'NN_vpor',
    1045: 'NN_vpsadbw',
    1046: 'NN_vpshufb',
    1047: 'NN_vpshufd',
    1048: 'NN_vpshufhw',
    1049: 'NN_vpshuflw',
    1050: 'NN_vpsignb',
    1051: 'NN_vpsignd',
    1052: 'NN_vpsignw',
    1053: 'NN_vpslld',
    1054: 'NN_vpslldq',
    1055: 'NN_vpsllq',
    1056: 'NN_vpsllvd',
    1057: 'NN_vpsllvq',
    1058: 'NN_vpsllw',
    1059: 'NN_vpsrad',
    1060: 'NN_vpsravd',
    1061: 'NN_vpsraw',
    1062: 'NN_vpsrld',
    1063: 'NN_vpsrldq',
    1064: 'NN_vpsrlq',
    1065: 'NN_vpsrlvd',
    1066: 'NN_vpsrlvq',
    1067: 'NN_vpsrlw',
    1068: 'NN_vpsubb',
    1069: 'NN_vpsubd',
    1070: 'NN_vpsubq',
    1071: 'NN_vpsubsb',
    1072: 'NN_vpsubsw',
    1073: 'NN_vpsubusb',
    1074: 'NN_vpsubusw',
    1075: 'NN_vpsubw',
    1076: 'NN_vptest',
    1077: 'NN_vpunpckhbw',
    1078: 'NN_vpunpckhdq',
    1079: 'NN_vpunpckhqdq',
    1080: 'NN_vpunpckhwd',
    1081: 'NN_vpunpcklbw',
    1082: 'NN_vpunpckldq',
    1083: 'NN_vpunpcklqdq',
    1084: 'NN_vpunpcklwd',
    1085: 'NN_vpxor',
    1086: 'NN_vrcpps',
    1087: 'NN_vrcpss',
    1088: 'NN_vroundpd',
    1089: 'NN_vroundps',
    1090: 'NN_vroundsd',
    1091: 'NN_vroundss',
    1092: 'NN_vrsqrtps',
    1093: 'NN_vrsqrtss',
    1094: 'NN_vshufpd',
    1095: 'NN_vshufps',
    1096: 'NN_vsqrtpd',
    1097: 'NN_vsqrtps',
    1098: 'NN_vsqrtsd',
    1099: 'NN_vsqrtss',
    1100: 'NN_vstmxcsr',
    1101: 'NN_vsubpd',
    1102: 'NN_vsubps',
    1103: 'NN_vsubsd',
    1104: 'NN_vsubss',
    1105: 'NN_vtestpd',
    1106: 'NN_vtestps',
    1107: 'NN_vucomisd',
    1108: 'NN_vucomiss',
    1109: 'NN_vunpckhpd',
    1110: 'NN_vunpckhps',
    1111: 'NN_vunpcklpd',
    1112: 'NN_vunpcklps',
    1113: 'NN_vxorpd',
    1114: 'NN_vxorps',
    1115: 'NN_vzeroall',
    1116: 'NN_vzeroupper',
    1117: 'NN_xabort',
    1118: 'NN_xbegin',
    1119: 'NN_xend',
    1120: 'NN_xtest',
    1121: 'NN_vmgetinfo',
    1122: 'NN_vmsetinfo',
    1123: 'NN_vmdxdsbl',
    1124: 'NN_vmdxenbl',
    1125: 'NN_vmcpuid',
    1126: 'NN_vmhlt',
    1127: 'NN_vmsplaf',
    1128: 'NN_vmpushfd',
    1129: 'NN_vmpopfd',
    1130: 'NN_vmcli',
    1131: 'NN_vmsti',
    1132: 'NN_vmiretd',
    1133: 'NN_vmsgdt',
    1134: 'NN_vmsidt',
    1135: 'NN_vmsldt',
    1136: 'NN_vmstr',
    1137: 'NN_vmsdte',
    1138: 'NN_vpcext',
    1139: 'NN_vfmaddsubps',
    1140: 'NN_vfmaddsubpd',
    1141: 'NN_vfmsubaddps',
    1142: 'NN_vfmsubaddpd',
    1143: 'NN_vfmaddps',
    1144: 'NN_vfmaddpd',
    1145: 'NN_vfmaddss',
    1146: 'NN_vfmaddsd',
    1147: 'NN_vfmsubps',
    1148: 'NN_vfmsubpd',
    1149: 'NN_vfmsubss',
    1150: 'NN_vfmsubsd',
    1151: 'NN_vfnmaddps',
    1152: 'NN_vfnmaddpd',
    1153: 'NN_vfnmaddss',
    1154: 'NN_vfnmaddsd',
    1155: 'NN_vfnmsubps',
    1156: 'NN_vfnmsubpd',
    1157: 'NN_vfnmsubss',
    1158: 'NN_vfnmsubsd',
    1159: 'NN_bndmk',
    1160: 'NN_bndcl',
    1161: 'NN_bndcu',
    1162: 'NN_bndcn',
    1163: 'NN_bndmov',
    1164: 'NN_bndldx',
    1165: 'NN_bndstx',
    1166: 'NN_xrstors',
    1167: 'NN_xsavec',
    1168: 'NN_xsaves',
    1169: 'NN_prefetchwt1',
    1170: 'NN_clflushopt',
    1171: 'NN_clwb',
    1172: 'NN_pcommit',
    1173: 'NN_rdpkru',
    1174: 'NN_wrpkru',
    1175: 'NN_vcmpeqpd',
    1176: 'NN_vcmpltpd',
    1177: 'NN_vcmplepd',
    1178: 'NN_vcmpunordpd',
    1179: 'NN_vcmpneqpd',
    1180: 'NN_vcmpnltpd',
    1181: 'NN_vcmpnlepd',
    1182: 'NN_vcmpordpd',
    1183: 'NN_vcmpeq_uqpd',
    1184: 'NN_vcmpngepd',
    1185: 'NN_vcmpngtpd',
    1186: 'NN_vcmpfalsepd',
    1187: 'NN_vcmpneq_oqpd',
    1188: 'NN_vcmpgepd',
    1189: 'NN_vcmpgtpd',
    1190: 'NN_vcmptruepd',
    1191: 'NN_vcmpeq_ospd',
    1192: 'NN_vcmplt_oqpd',
    1193: 'NN_vcmple_oqpd',
    1194: 'NN_vcmpunord_spd',
    1195: 'NN_vcmpneq_uspd',
    1196: 'NN_vcmpnlt_uqpd',
    1197: 'NN_vcmpnle_uqpd',
    1198: 'NN_vcmpord_spd',
    1199: 'NN_vcmpeq_uspd',
    1200: 'NN_vcmpnge_uqpd',
    1201: 'NN_vcmpngt_uqpd',
    1202: 'NN_vcmpfalse_ospd',
    1203: 'NN_vcmpneq_ospd',
    1204: 'NN_vcmpge_oqpd',
    1205: 'NN_vcmpgt_oqpd',
    1206: 'NN_vcmptrue_uspd',
    1207: 'NN_vcmpeqps',
    1208: 'NN_vcmpltps',
    1209: 'NN_vcmpleps',
    1210: 'NN_vcmpunordps',
    1211: 'NN_vcmpneqps',
    1212: 'NN_vcmpnltps',
    1213: 'NN_vcmpnleps',
    1214: 'NN_vcmpordps',
    1215: 'NN_vcmpeq_uqps',
    1216: 'NN_vcmpngeps',
    1217: 'NN_vcmpngtps',
    1218: 'NN_vcmpfalseps',
    1219: 'NN_vcmpneq_oqps',
    1220: 'NN_vcmpgeps',
    1221: 'NN_vcmpgtps',
    1222: 'NN_vcmptrueps',
    1223: 'NN_vcmpeq_osps',
    1224: 'NN_vcmplt_oqps',
    1225: 'NN_vcmple_oqps',
    1226: 'NN_vcmpunord_sps',
    1227: 'NN_vcmpneq_usps',
    1228: 'NN_vcmpnlt_uqps',
    1229: 'NN_vcmpnle_uqps',
    1230: 'NN_vcmpord_sps',
    1231: 'NN_vcmpeq_usps',
    1232: 'NN_vcmpnge_uqps',
    1233: 'NN_vcmpngt_uqps',
    1234: 'NN_vcmpfalse_osps',
    1235: 'NN_vcmpneq_osps',
    1236: 'NN_vcmpge_oqps',
    1237: 'NN_vcmpgt_oqps',
    1238: 'NN_vcmptrue_usps',
    1239: 'NN_vcmpeqsd',
    1240: 'NN_vcmpltsd',
    1241: 'NN_vcmplesd',
    1242: 'NN_vcmpunordsd',
    1243: 'NN_vcmpneqsd',
    1244: 'NN_vcmpnltsd',
    1245: 'NN_vcmpnlesd',
    1246: 'NN_vcmpordsd',
    1247: 'NN_vcmpeq_uqsd',
    1248: 'NN_vcmpngesd',
    1249: 'NN_vcmpngtsd',
    1250: 'NN_vcmpfalsesd',
    1251: 'NN_vcmpneq_oqsd',
    1252: 'NN_vcmpgesd',
    1253: 'NN_vcmpgtsd',
    1254: 'NN_vcmptruesd',
    1255: 'NN_vcmpeq_ossd',
    1256: 'NN_vcmplt_oqsd',
    1257: 'NN_vcmple_oqsd',
    1258: 'NN_vcmpunord_ssd',
    1259: 'NN_vcmpneq_ussd',
    1260: 'NN_vcmpnlt_uqsd',
    1261: 'NN_vcmpnle_uqsd',
    1262: 'NN_vcmpord_ssd',
    1263: 'NN_vcmpeq_ussd',
    1264: 'NN_vcmpnge_uqsd',
    1265: 'NN_vcmpngt_uqsd',
    1266: 'NN_vcmpfalse_ossd',
    1267: 'NN_vcmpneq_ossd',
    1268: 'NN_vcmpge_oqsd',
    1269: 'NN_vcmpgt_oqsd',
    1270: 'NN_vcmptrue_ussd',
    1271: 'NN_vcmpeqss',
    1272: 'NN_vcmpltss',
    1273: 'NN_vcmpless',
    1274: 'NN_vcmpunordss',
    1275: 'NN_vcmpneqss',
    1276: 'NN_vcmpnltss',
    1277: 'NN_vcmpnless',
    1278: 'NN_vcmpordss',
    1279: 'NN_vcmpeq_uqss',
    1280: 'NN_vcmpngess',
    1281: 'NN_vcmpngtss',
    1282: 'NN_vcmpfalsess',
    1283: 'NN_vcmpneq_oqss',
    1284: 'NN_vcmpgess',
    1285: 'NN_vcmpgtss',
    1286: 'NN_vcmptruess',
    1287: 'NN_vcmpeq_osss',
    1288: 'NN_vcmplt_oqss',
    1289: 'NN_vcmple_oqss',
    1290: 'NN_vcmpunord_sss',
    1291: 'NN_vcmpneq_usss',
    1292: 'NN_vcmpnlt_uqss',
    1293: 'NN_vcmpnle_uqss',
    1294: 'NN_vcmpord_sss',
    1295: 'NN_vcmpeq_usss',
    1296: 'NN_vcmpnge_uqss',
    1297: 'NN_vcmpngt_uqss',
    1298: 'NN_vcmpfalse_osss',
    1299: 'NN_vcmpneq_osss',
    1300: 'NN_vcmpge_oqss',
    1301: 'NN_vcmpgt_oqss',
    1302: 'NN_vcmptrue_usss',
    1303: 'NN_valignd',
    1304: 'NN_valignq',
    1305: 'NN_vblendmpd',
    1306: 'NN_vblendmps',
    1307: 'NN_vpblendmb',
    1308: 'NN_vpblendmw',
    1309: 'NN_vpblendmd',
    1310: 'NN_vpblendmq',
    1311: 'NN_vbroadcastf32x2',
    1312: 'NN_vbroadcastf32x4',
    1313: 'NN_vbroadcastf64x2',
    1314: 'NN_vbroadcastf32x8',
    1315: 'NN_vbroadcastf64x4',
    1316: 'NN_vbroadcasti32x2',
    1317: 'NN_vbroadcasti32x4',
    1318: 'NN_vbroadcasti64x2',
    1319: 'NN_vbroadcasti32x8',
    1320: 'NN_vbroadcasti64x4',
    1321: 'NN_vcompresspd',
    1322: 'NN_vcompressps',
    1323: 'NN_vcvtpd2qq',
    1324: 'NN_vcvtpd2udq',
    1325: 'NN_vcvtpd2uqq',
    1326: 'NN_vcvtps2udq',
    1327: 'NN_vcvtps2qq',
    1328: 'NN_vcvtps2uqq',
    1329: 'NN_vcvtqq2pd',
    1330: 'NN_vcvtqq2ps',
    1331: 'NN_vcvtsd2usi',
    1332: 'NN_vcvtss2usi',
    1333: 'NN_vcvttpd2qq',
    1334: 'NN_vcvttpd2udq',
    1335: 'NN_vcvttpd2uqq',
    1336: 'NN_vcvttps2udq',
    1337: 'NN_vcvttps2qq',
    1338: 'NN_vcvttps2uqq',
    1339: 'NN_vcvttsd2usi',
    1340: 'NN_vcvttss2usi',
    1341: 'NN_vcvtudq2pd',
    1342: 'NN_vcvtudq2ps',
    1343: 'NN_vcvtuqq2pd',
    1344: 'NN_vcvtuqq2ps',
    1345: 'NN_vcvtusi2sd',
    1346: 'NN_vcvtusi2ss',
    1347: 'NN_vdbpsadbw',
    1348: 'NN_vexpandpd',
    1349: 'NN_vexpandps',
    1350: 'NN_vextractf32x4',
    1351: 'NN_vextractf64x2',
    1352: 'NN_vextractf32x8',
    1353: 'NN_vextractf64x4',
    1354: 'NN_vextracti32x4',
    1355: 'NN_vextracti64x2',
    1356: 'NN_vextracti32x8',
    1357: 'NN_vextracti64x4',
    1358: 'NN_vfixupimmpd',
    1359: 'NN_vfixupimmps',
    1360: 'NN_vfixupimmsd',
    1361: 'NN_vfixupimmss',
    1362: 'NN_vfpclasspd',
    1363: 'NN_vfpclassps',
    1364: 'NN_vfpclasssd',
    1365: 'NN_vfpclassss',
    1366: 'NN_vgetexppd',
    1367: 'NN_vgetexpps',
    1368: 'NN_vgetexpsd',
    1369: 'NN_vgetexpss',
    1370: 'NN_vgetmantpd',
    1371: 'NN_vgetmantps',
    1372: 'NN_vgetmantsd',
    1373: 'NN_vgetmantss',
    1374: 'NN_vinsertf32x4',
    1375: 'NN_vinsertf64x2',
    1376: 'NN_vinsertf32x8',
    1377: 'NN_vinsertf64x4',
    1378: 'NN_vinserti32x4',
    1379: 'NN_vinserti64x2',
    1380: 'NN_vinserti32x8',
    1381: 'NN_vinserti64x4',
    1382: 'NN_vmovdqa32',
    1383: 'NN_vmovdqa64',
    1384: 'NN_vmovdqu8',
    1385: 'NN_vmovdqu16',
    1386: 'NN_vmovdqu32',
    1387: 'NN_vmovdqu64',
    1388: 'NN_vpabsq',
    1389: 'NN_vpandd',
    1390: 'NN_vpandq',
    1391: 'NN_vpandnd',
    1392: 'NN_vpandnq',
    1393: 'NN_vpbroadcastmb2q',
    1394: 'NN_vpbroadcastmw2d',
    1395: 'NN_vpcmpb',
    1396: 'NN_vpcmpub',
    1397: 'NN_vpcmpd',
    1398: 'NN_vpcmpud',
    1399: 'NN_vpcmpq',
    1400: 'NN_vpcmpuq',
    1401: 'NN_vpcmpw',
    1402: 'NN_vpcmpuw',
    1403: 'NN_vpcompressd',
    1404: 'NN_vpcompressq',
    1405: 'NN_vpconflictd',
    1406: 'NN_vpconflictq',
    1407: 'NN_vpermb',
    1408: 'NN_vpermw',
    1409: 'NN_vpermi2b',
    1410: 'NN_vpermi2w',
    1411: 'NN_vpermi2d',
    1412: 'NN_vpermi2q',
    1413: 'NN_vpermi2ps',
    1414: 'NN_vpermi2pd',
    1415: 'NN_vpermt2b',
    1416: 'NN_vpermt2w',
    1417: 'NN_vpermt2d',
    1418: 'NN_vpermt2q',
    1419: 'NN_vpermt2ps',
    1420: 'NN_vpermt2pd',
    1421: 'NN_vpexpandd',
    1422: 'NN_vpexpandq',
    1423: 'NN_vplzcntd',
    1424: 'NN_vplzcntq',
    1425: 'NN_vpmadd52luq',
    1426: 'NN_vpmadd52huq',
    1427: 'NN_vpmaxsq',
    1428: 'NN_vpmaxuq',
    1429: 'NN_vpminsq',
    1430: 'NN_vpminuq',
    1431: 'NN_vpmovm2b',
    1432: 'NN_vpmovm2w',
    1433: 'NN_vpmovm2d',
    1434: 'NN_vpmovm2q',
    1435: 'NN_vpmovb2m',
    1436: 'NN_vpmovw2m',
    1437: 'NN_vpmovd2m',
    1438: 'NN_vpmovq2m',
    1439: 'NN_vpmovqb',
    1440: 'NN_vpmovsqb',
    1441: 'NN_vpmovusqb',
    1442: 'NN_vpmovqw',
    1443: 'NN_vpmovsqw',
    1444: 'NN_vpmovusqw',
    1445: 'NN_vpmovqd',
    1446: 'NN_vpmovsqd',
    1447: 'NN_vpmovusqd',
    1448: 'NN_vpmovdb',
    1449: 'NN_vpmovsdb',
    1450: 'NN_vpmovusdb',
    1451: 'NN_vpmovdw',
    1452: 'NN_vpmovsdw',
    1453: 'NN_vpmovusdw',
    1454: 'NN_vpmovwb',
    1455: 'NN_vpmovswb',
    1456: 'NN_vpmovuswb',
    1457: 'NN_vpmullq',
    1458: 'NN_vpmultishiftqb',
    1459: 'NN_vpord',
    1460: 'NN_vporq',
    1461: 'NN_vprold',
    1462: 'NN_vprolvd',
    1463: 'NN_vprolq',
    1464: 'NN_vprolvq',
    1465: 'NN_vprord',
    1466: 'NN_vprorvd',
    1467: 'NN_vprorq',
    1468: 'NN_vprorvq',
    1469: 'NN_vpscatterdd',
    1470: 'NN_vpscatterdq',
    1471: 'NN_vpscatterqd',
    1472: 'NN_vpscatterqq',
    1473: 'NN_vpsraq',
    1474: 'NN_vpsllvw',
    1475: 'NN_vpsrlvw',
    1476: 'NN_vptestnmb',
    1477: 'NN_vptestnmw',
    1478: 'NN_vptestnmd',
    1479: 'NN_vptestnmq',
    1480: 'NN_vshuff32x4',
    1481: 'NN_vshuff64x2',
    1482: 'NN_vshufi32x4',
    1483: 'NN_vshufi64x2',
    1484: 'NN_vpternlogd',
    1485: 'NN_vpternlogq',
    1486: 'NN_vptestmb',
    1487: 'NN_vptestmw',
    1488: 'NN_vptestmd',
    1489: 'NN_vptestmq',
    1490: 'NN_vpsravw',
    1491: 'NN_vpsravq',
    1492: 'NN_vpxord',
    1493: 'NN_vpxorq',
    1494: 'NN_vrangepd',
    1495: 'NN_vrangeps',
    1496: 'NN_vrangesd',
    1497: 'NN_vrangess',
    1498: 'NN_vrcp14pd',
    1499: 'NN_vrcp14sd',
    1500: 'NN_vrcp14ps',
    1501: 'NN_vrcp14ss',
    1502: 'NN_vreducepd',
    1503: 'NN_vreducesd',
    1504: 'NN_vreduceps',
    1505: 'NN_vreducess',
    1506: 'NN_vrndscalepd',
    1507: 'NN_vrndscalesd',
    1508: 'NN_vrndscaleps',
    1509: 'NN_vrndscaless',
    1510: 'NN_vrsqrt14pd',
    1511: 'NN_vrsqrt14sd',
    1512: 'NN_vrsqrt14ps',
    1513: 'NN_vrsqrt14ss',
    1514: 'NN_vscalefpd',
    1515: 'NN_vscalefsd',
    1516: 'NN_vscalefps',
    1517: 'NN_vscalefss',
    1518: 'NN_vscatterdps',
    1519: 'NN_vscatterdpd',
    1520: 'NN_vscatterqps',
    1521: 'NN_vscatterqpd',
    1522: 'NN_vexp2pd',
    1523: 'NN_vexp2ps',
    1524: 'NN_vrcp28pd',
    1525: 'NN_vrcp28sd',
    1526: 'NN_vrcp28ps',
    1527: 'NN_vrcp28ss',
    1528: 'NN_vrsqrt28pd',
    1529: 'NN_vrsqrt28sd',
    1530: 'NN_vrsqrt28ps',
    1531: 'NN_vrsqrt28ss',
    1532: 'NN_vgatherpf0dps',
    1533: 'NN_vgatherpf0qps',
    1534: 'NN_vgatherpf0dpd',
    1535: 'NN_vgatherpf0qpd',
    1536: 'NN_vgatherpf1dps',
    1537: 'NN_vgatherpf1qps',
    1538: 'NN_vgatherpf1dpd',
    1539: 'NN_vgatherpf1qpd',
    1540: 'NN_vscatterpf0dps',
    1541: 'NN_vscatterpf0qps',
    1542: 'NN_vscatterpf0dpd',
    1543: 'NN_vscatterpf0qpd',
    1544: 'NN_vscatterpf1dps',
    1545: 'NN_vscatterpf1qps',
    1546: 'NN_vscatterpf1dpd',
    1547: 'NN_vscatterpf1qpd',
    1548: 'NN_vpcmpltd',
    1549: 'NN_vpcmpled',
    1550: 'NN_vpcmpneqd',
    1551: 'NN_vpcmpnltd',
    1552: 'NN_vpcmpnled',
    1553: 'NN_vpcmpequd',
    1554: 'NN_vpcmpltud',
    1555: 'NN_vpcmpleud',
    1556: 'NN_vpcmpnequd',
    1557: 'NN_vpcmpnltud',
    1558: 'NN_vpcmpnleud',
    1559: 'NN_vpcmpltq',
    1560: 'NN_vpcmpleq',
    1561: 'NN_vpcmpneqq',
    1562: 'NN_vpcmpnltq',
    1563: 'NN_vpcmpnleq',
    1564: 'NN_vpcmpequq',
    1565: 'NN_vpcmpltuq',
    1566: 'NN_vpcmpleuq',
    1567: 'NN_vpcmpnequq',
    1568: 'NN_vpcmpnltuq',
    1569: 'NN_vpcmpnleuq',
    1570: 'NN_kaddw',
    1571: 'NN_kaddb',
    1572: 'NN_kaddq',
    1573: 'NN_kaddd',
    1574: 'NN_kandw',
    1575: 'NN_kandb',
    1576: 'NN_kandq',
    1577: 'NN_kandd',
    1578: 'NN_kandnw',
    1579: 'NN_kandnb',
    1580: 'NN_kandnq',
    1581: 'NN_kandnd',
    1582: 'NN_kmovw',
    1583: 'NN_kmovb',
    1584: 'NN_kmovq',
    1585: 'NN_kmovd',
    1586: 'NN_kunpckbw',
    1587: 'NN_kunpckwd',
    1588: 'NN_kunpckdq',
    1589: 'NN_knotw',
    1590: 'NN_knotb',
    1591: 'NN_knotq',
    1592: 'NN_knotd',
    1593: 'NN_korw',
    1594: 'NN_korb',
    1595: 'NN_korq',
    1596: 'NN_kord',
    1597: 'NN_kortestw',
    1598: 'NN_kortestb',
    1599: 'NN_kortestq',
    1600: 'NN_kortestd',
    1601: 'NN_kshiftlw',
    1602: 'NN_kshiftlb',
    1603: 'NN_kshiftlq',
    1604: 'NN_kshiftld',
    1605: 'NN_kshiftrw',
    1606: 'NN_kshiftrb',
    1607: 'NN_kshiftrq',
    1608: 'NN_kshiftrd',
    1609: 'NN_kxnorw',
    1610: 'NN_kxnorb',
    1611: 'NN_kxnorq',
    1612: 'NN_kxnord',
    1613: 'NN_ktestw',
    1614: 'NN_ktestb',
    1615: 'NN_ktestq',
    1616: 'NN_ktestd',
    1617: 'NN_kxorw',
    1618: 'NN_kxorb',
    1619: 'NN_kxorq',
    1620: 'NN_kxord',
    1621: 'NN_sha1rnds4',
    1622: 'NN_sha1nexte',
    1623: 'NN_sha1msg1',
    1624: 'NN_sha1msg2',
    1625: 'NN_sha256rnds2',
    1626: 'NN_sha256msg1',
    1627: 'NN_sha256msg2',
    1628: 'NN_encls',
    1629: 'NN_enclu',
    1630: 'NN_vfrczpd',
    1631: 'NN_vfrczps',
    1632: 'NN_vfrczsd',
    1633: 'NN_vfrczss',
    1634: 'NN_vpcmov',
    1635: 'NN_vpcomb',
    1636: 'NN_vpcomd',
    1637: 'NN_vpcomq',
    1638: 'NN_vpcomub',
    1639: 'NN_vpcomud',
    1640: 'NN_vpcomuq',
    1641: 'NN_vpcomuw',
    1642: 'NN_vpcomw',
    1643: 'NN_vpermil2pd',
    1644: 'NN_vpermil2ps',
    1645: 'NN_vphaddbd',
    1646: 'NN_vphaddbq',
    1647: 'NN_vphaddbw',
    1648: 'NN_vphadddq',
    1649: 'NN_vphaddubd',
    1650: 'NN_vphaddubq',
    1651: 'NN_vphaddubw',
    1652: 'NN_vphaddudq',
    1653: 'NN_vphadduwd',
    1654: 'NN_vphadduwq',
    1655: 'NN_vphaddwd',
    1656: 'NN_vphaddwq',
    1657: 'NN_vphsubbw',
    1658: 'NN_vphsubdq',
    1659: 'NN_vphsubwd',
    1660: 'NN_vpmacsdd',
    1661: 'NN_vpmacsdqh',
    1662: 'NN_vpmacsdql',
    1663: 'NN_vpmacssdd',
    1664: 'NN_vpmacssdqh',
    1665: 'NN_vpmacssdql',
    1666: 'NN_vpmacsswd',
    1667: 'NN_vpmacssww',
    1668: 'NN_vpmacswd',
    1669: 'NN_vpmacsww',
    1670: 'NN_vpmadcsswd',
    1671: 'NN_vpmadcswd',
    1672: 'NN_vpperm',
    1673: 'NN_vprotb',
    1674: 'NN_vprotd',
    1675: 'NN_vprotq',
    1676: 'NN_vprotw',
    1677: 'NN_vpshab',
    1678: 'NN_vpshad',
    1679: 'NN_vpshaq',
    1680: 'NN_vpshaw',
    1681: 'NN_vpshlb',
    1682: 'NN_vpshld',
    1683: 'NN_vpshlq',
    1684: 'NN_vpshlw',
    1685: 'NN_vpcomltb',
    1686: 'NN_vpcomleb',
    1687: 'NN_vpcomgtb',
    1688: 'NN_vpcomgeb',
    1689: 'NN_vpcomeqb',
    1690: 'NN_vpcomneqb',
    1691: 'NN_vpcomfalseb',
    1692: 'NN_vpcomtrueb',
    1693: 'NN_vpcomltw',
    1694: 'NN_vpcomlew',
    1695: 'NN_vpcomgtw',
    1696: 'NN_vpcomgew',
    1697: 'NN_vpcomeqw',
    1698: 'NN_vpcomneqw',
    1699: 'NN_vpcomfalsew',
    1700: 'NN_vpcomtruew',
    1701: 'NN_vpcomltd',
    1702: 'NN_vpcomled',
    1703: 'NN_vpcomgtd',
    1704: 'NN_vpcomged',
    1705: 'NN_vpcomeqd',
    1706: 'NN_vpcomneqd',
    1707: 'NN_vpcomfalsed',
    1708: 'NN_vpcomtrued',
    1709: 'NN_vpcomltq',
    1710: 'NN_vpcomleq',
    1711: 'NN_vpcomgtq',
    1712: 'NN_vpcomgeq',
    1713: 'NN_vpcomeqq',
    1714: 'NN_vpcomneqq',
    1715: 'NN_vpcomfalseq',
    1716: 'NN_vpcomtrueq',
    1717: 'NN_vpcomltub',
    1718: 'NN_vpcomleub',
    1719: 'NN_vpcomgtub',
    1720: 'NN_vpcomgeub',
    1721: 'NN_vpcomequb',
    1722: 'NN_vpcomnequb',
    1723: 'NN_vpcomfalseub',
    1724: 'NN_vpcomtrueub',
    1725: 'NN_vpcomltuw',
    1726: 'NN_vpcomleuw',
    1727: 'NN_vpcomgtuw',
    1728: 'NN_vpcomgeuw',
    1729: 'NN_vpcomequw',
    1730: 'NN_vpcomnequw',
    1731: 'NN_vpcomfalseuw',
    1732: 'NN_vpcomtrueuw',
    1733: 'NN_vpcomltud',
    1734: 'NN_vpcomleud',
    1735: 'NN_vpcomgtud',
    1736: 'NN_vpcomgeud',
    1737: 'NN_vpcomequd',
    1738: 'NN_vpcomnequd',
    1739: 'NN_vpcomfalseud',
    1740: 'NN_vpcomtrueud',
    1741: 'NN_vpcomltuq',
    1742: 'NN_vpcomleuq',
    1743: 'NN_vpcomgtuq',
    1744: 'NN_vpcomgeuq',
    1745: 'NN_vpcomequq',
    1746: 'NN_vpcomnequq',
    1747: 'NN_vpcomfalseuq',
    1748: 'NN_vpcomtrueuq',
    1749: 'NN_monitorx',
    1750: 'NN_mwaitx',
    1751: 'NN_clzero',
    1752: 'NN_ptwrite',
    1753: 'NN_v4fmaddps',
    1754: 'NN_v4fnmaddps',
    1755: 'NN_v4fmaddss',
    1756: 'NN_v4fnmaddss',
    1757: 'NN_vp4dpwssd',
    1758: 'NN_vp4dpwssds',
    1759: 'NN_vpopcntd',
    1760: 'NN_vpopcntq',
    1761: 'NN_rdpid',
    1762: 'NN_vmfunc',
    1763: 'NN_incsspd',
    1764: 'NN_incsspq',
    1765: 'NN_rdsspd',
    1766: 'NN_rdsspq',
    1767: 'NN_saveprevssp',
    1768: 'NN_rstorssp',
    1769: 'NN_wrssd',
    1770: 'NN_wrssq',
    1771: 'NN_wrussd',
    1772: 'NN_wrussq',
    1773: 'NN_setssbsy',
    1774: 'NN_clrssbsy',
    1775: 'NN_endbr64',
    1776: 'NN_endbr32',
    1777: 'NN_ud0',
    1778: 'NN_ud1',
    1779: 'NN_enqcmd',
    1780: 'NN_enqcmds',
    1781: 'NN_mcommit',
    1782: 'NN_rdpru',
    1783: 'NN_cldemote',
    1784: 'NN_enclv',
    1785: 'NN_movdiri',
    1786: 'NN_movdir64b',
    1787: 'NN_tpause',
    1788: 'NN_umonitor',
    1789: 'NN_umwait',
    1790: 'NN_serialize',
    1791: 'NN_xresldtrk',
    1792: 'NN_xsusldtrk',
    1793: 'NN_gf2p8mulb',
    1794: 'NN_gf2p8affineqb',
    1795: 'NN_gf2p8affineinvqb',
    1796: 'NN_vgf2p8mulb',
    1797: 'NN_vgf2p8affineqb',
    1798: 'NN_vgf2p8affineinvqb',
    1799: 'NN_fxsave64',
    1800: 'NN_fxrstor64',
    1801: 'NN_last',
}
NN_null = 0
NN_aaa = 1
NN_aad = 2
NN_aam = 3
NN_aas = 4
NN_adc = 5
NN_add = 6
NN_and = 7
NN_arpl = 8
NN_bound = 9
NN_bsf = 10
NN_bsr = 11
NN_bt = 12
NN_btc = 13
NN_btr = 14
NN_bts = 15
NN_call = 16
NN_callfi = 17
NN_callni = 18
NN_cbw = 19
NN_cwde = 20
NN_cdqe = 21
NN_clc = 22
NN_cld = 23
NN_cli = 24
NN_clts = 25
NN_cmc = 26
NN_cmp = 27
NN_cmps = 28
NN_cwd = 29
NN_cdq = 30
NN_cqo = 31
NN_daa = 32
NN_das = 33
NN_dec = 34
NN_div = 35
NN_enterw = 36
NN_enter = 37
NN_enterd = 38
NN_enterq = 39
NN_hlt = 40
NN_idiv = 41
NN_imul = 42
NN_in = 43
NN_inc = 44
NN_ins = 45
NN_int = 46
NN_into = 47
NN_int3 = 48
NN_iretw = 49
NN_iret = 50
NN_iretd = 51
NN_iretq = 52
NN_ja = 53
NN_jae = 54
NN_jb = 55
NN_jbe = 56
NN_jc = 57
NN_jcxz = 58
NN_jecxz = 59
NN_jrcxz = 60
NN_je = 61
NN_jg = 62
NN_jge = 63
NN_jl = 64
NN_jle = 65
NN_jna = 66
NN_jnae = 67
NN_jnb = 68
NN_jnbe = 69
NN_jnc = 70
NN_jne = 71
NN_jng = 72
NN_jnge = 73
NN_jnl = 74
NN_jnle = 75
NN_jno = 76
NN_jnp = 77
NN_jns = 78
NN_jnz = 79
NN_jo = 80
NN_jp = 81
NN_jpe = 82
NN_jpo = 83
NN_js = 84
NN_jz = 85
NN_jmp = 86
NN_jmpfi = 87
NN_jmpni = 88
NN_jmpshort = 89
NN_lahf = 90
NN_lar = 91
NN_lea = 92
NN_leavew = 93
NN_leave = 94
NN_leaved = 95
NN_leaveq = 96
NN_lgdt = 97
NN_lidt = 98
NN_lgs = 99
NN_lss = 100
NN_lds = 101
NN_les = 102
NN_lfs = 103
NN_lldt = 104
NN_lmsw = 105
NN_lock = 106
NN_lods = 107
NN_loopw = 108
NN_loop = 109
NN_loopd = 110
NN_loopq = 111
NN_loopwe = 112
NN_loope = 113
NN_loopde = 114
NN_loopqe = 115
NN_loopwne = 116
NN_loopne = 117
NN_loopdne = 118
NN_loopqne = 119
NN_lsl = 120
NN_ltr = 121
NN_mov = 122
NN_movsp = 123
NN_movs = 124
NN_movsx = 125
NN_movzx = 126
NN_mul = 127
NN_neg = 128
NN_nop = 129
NN_not = 130
NN_or = 131
NN_out = 132
NN_outs = 133
NN_pop = 134
NN_popaw = 135
NN_popa = 136
NN_popad = 137
NN_popaq = 138
NN_popfw = 139
NN_popf = 140
NN_popfd = 141
NN_popfq = 142
NN_push = 143
NN_pushaw = 144
NN_pusha = 145
NN_pushad = 146
NN_pushaq = 147
NN_pushfw = 148
NN_pushf = 149
NN_pushfd = 150
NN_pushfq = 151
NN_rcl = 152
NN_rcr = 153
NN_rol = 154
NN_ror = 155
NN_rep = 156
NN_repe = 157
NN_repne = 158
NN_retn = 159
NN_retf = 160
NN_sahf = 161
NN_sal = 162
NN_sar = 163
NN_shl = 164
NN_shr = 165
NN_sbb = 166
NN_scas = 167
NN_seta = 168
NN_setae = 169
NN_setb = 170
NN_setbe = 171
NN_setc = 172
NN_sete = 173
NN_setg = 174
NN_setge = 175
NN_setl = 176
NN_setle = 177
NN_setna = 178
NN_setnae = 179
NN_setnb = 180
NN_setnbe = 181
NN_setnc = 182
NN_setne = 183
NN_setng = 184
NN_setnge = 185
NN_setnl = 186
NN_setnle = 187
NN_setno = 188
NN_setnp = 189
NN_setns = 190
NN_setnz = 191
NN_seto = 192
NN_setp = 193
NN_setpe = 194
NN_setpo = 195
NN_sets = 196
NN_setz = 197
NN_sgdt = 198
NN_sidt = 199
NN_shld = 200
NN_shrd = 201
NN_sldt = 202
NN_smsw = 203
NN_stc = 204
NN_std = 205
NN_sti = 206
NN_stos = 207
NN_str = 208
NN_sub = 209
NN_test = 210
NN_verr = 211
NN_verw = 212
NN_wait = 213
NN_xchg = 214
NN_xlat = 215
NN_xor = 216
NN_cmpxchg = 217
NN_bswap = 218
NN_xadd = 219
NN_invd = 220
NN_wbinvd = 221
NN_invlpg = 222
NN_rdmsr = 223
NN_wrmsr = 224
NN_cpuid = 225
NN_cmpxchg8b = 226
NN_rdtsc = 227
NN_rsm = 228
NN_cmova = 229
NN_cmovb = 230
NN_cmovbe = 231
NN_cmovg = 232
NN_cmovge = 233
NN_cmovl = 234
NN_cmovle = 235
NN_cmovnb = 236
NN_cmovno = 237
NN_cmovnp = 238
NN_cmovns = 239
NN_cmovnz = 240
NN_cmovo = 241
NN_cmovp = 242
NN_cmovs = 243
NN_cmovz = 244
NN_fcmovb = 245
NN_fcmove = 246
NN_fcmovbe = 247
NN_fcmovu = 248
NN_fcmovnb = 249
NN_fcmovne = 250
NN_fcmovnbe = 251
NN_fcmovnu = 252
NN_fcomi = 253
NN_fucomi = 254
NN_fcomip = 255
NN_fucomip = 256
NN_rdpmc = 257
NN_fld = 258
NN_fst = 259
NN_fstp = 260
NN_fxch = 261
NN_fild = 262
NN_fist = 263
NN_fistp = 264
NN_fbld = 265
NN_fbstp = 266
NN_fadd = 267
NN_faddp = 268
NN_fiadd = 269
NN_fsub = 270
NN_fsubp = 271
NN_fisub = 272
NN_fsubr = 273
NN_fsubrp = 274
NN_fisubr = 275
NN_fmul = 276
NN_fmulp = 277
NN_fimul = 278
NN_fdiv = 279
NN_fdivp = 280
NN_fidiv = 281
NN_fdivr = 282
NN_fdivrp = 283
NN_fidivr = 284
NN_fsqrt = 285
NN_fscale = 286
NN_fprem = 287
NN_frndint = 288
NN_fxtract = 289
NN_fabs = 290
NN_fchs = 291
NN_fcom = 292
NN_fcomp = 293
NN_fcompp = 294
NN_ficom = 295
NN_ficomp = 296
NN_ftst = 297
NN_fxam = 298
NN_fptan = 299
NN_fpatan = 300
NN_f2xm1 = 301
NN_fyl2x = 302
NN_fyl2xp1 = 303
NN_fldz = 304
NN_fld1 = 305
NN_fldpi = 306
NN_fldl2t = 307
NN_fldl2e = 308
NN_fldlg2 = 309
NN_fldln2 = 310
NN_finit = 311
NN_fninit = 312
NN_fsetpm = 313
NN_fldcw = 314
NN_fstcw = 315
NN_fnstcw = 316
NN_fstsw = 317
NN_fnstsw = 318
NN_fclex = 319
NN_fnclex = 320
NN_fstenv = 321
NN_fnstenv = 322
NN_fldenv = 323
NN_fsave = 324
NN_fnsave = 325
NN_frstor = 326
NN_fincstp = 327
NN_fdecstp = 328
NN_ffree = 329
NN_fnop = 330
NN_feni = 331
NN_fneni = 332
NN_fdisi = 333
NN_fndisi = 334
NN_fprem1 = 335
NN_fsincos = 336
NN_fsin = 337
NN_fcos = 338
NN_fucom = 339
NN_fucomp = 340
NN_fucompp = 341
NN_setalc = 342
NN_svdc = 343
NN_rsdc = 344
NN_svldt = 345
NN_rsldt = 346
NN_svts = 347
NN_rsts = 348
NN_icebp = 349
NN_loadall = 350
NN_emms = 351
NN_movd = 352
NN_movq = 353
NN_packsswb = 354
NN_packssdw = 355
NN_packuswb = 356
NN_paddb = 357
NN_paddw = 358
NN_paddd = 359
NN_paddsb = 360
NN_paddsw = 361
NN_paddusb = 362
NN_paddusw = 363
NN_pand = 364
NN_pandn = 365
NN_pcmpeqb = 366
NN_pcmpeqw = 367
NN_pcmpeqd = 368
NN_pcmpgtb = 369
NN_pcmpgtw = 370
NN_pcmpgtd = 371
NN_pmaddwd = 372
NN_pmulhw = 373
NN_pmullw = 374
NN_por = 375
NN_psllw = 376
NN_pslld = 377
NN_psllq = 378
NN_psraw = 379
NN_psrad = 380
NN_psrlw = 381
NN_psrld = 382
NN_psrlq = 383
NN_psubb = 384
NN_psubw = 385
NN_psubd = 386
NN_psubsb = 387
NN_psubsw = 388
NN_psubusb = 389
NN_psubusw = 390
NN_punpckhbw = 391
NN_punpckhwd = 392
NN_punpckhdq = 393
NN_punpcklbw = 394
NN_punpcklwd = 395
NN_punpckldq = 396
NN_pxor = 397
NN_fxsave = 398
NN_fxrstor = 399
NN_sysenter = 400
NN_sysexit = 401
NN_pavgusb = 402
NN_pfadd = 403
NN_pfsub = 404
NN_pfsubr = 405
NN_pfacc = 406
NN_pfcmpge = 407
NN_pfcmpgt = 408
NN_pfcmpeq = 409
NN_pfmin = 410
NN_pfmax = 411
NN_pi2fd = 412
NN_pf2id = 413
NN_pfrcp = 414
NN_pfrsqrt = 415
NN_pfmul = 416
NN_pfrcpit1 = 417
NN_pfrsqit1 = 418
NN_pfrcpit2 = 419
NN_pmulhrw = 420
NN_femms = 421
NN_prefetch = 422
NN_prefetchw = 423
NN_addps = 424
NN_addss = 425
NN_andnps = 426
NN_andps = 427
NN_cmpps = 428
NN_cmpss = 429
NN_comiss = 430
NN_cvtpi2ps = 431
NN_cvtps2pi = 432
NN_cvtsi2ss = 433
NN_cvtss2si = 434
NN_cvttps2pi = 435
NN_cvttss2si = 436
NN_divps = 437
NN_divss = 438
NN_ldmxcsr = 439
NN_maxps = 440
NN_maxss = 441
NN_minps = 442
NN_minss = 443
NN_movaps = 444
NN_movhlps = 445
NN_movhps = 446
NN_movlhps = 447
NN_movlps = 448
NN_movmskps = 449
NN_movss = 450
NN_movups = 451
NN_mulps = 452
NN_mulss = 453
NN_orps = 454
NN_rcpps = 455
NN_rcpss = 456
NN_rsqrtps = 457
NN_rsqrtss = 458
NN_shufps = 459
NN_sqrtps = 460
NN_sqrtss = 461
NN_stmxcsr = 462
NN_subps = 463
NN_subss = 464
NN_ucomiss = 465
NN_unpckhps = 466
NN_unpcklps = 467
NN_xorps = 468
NN_pavgb = 469
NN_pavgw = 470
NN_pextrw = 471
NN_pinsrw = 472
NN_pmaxsw = 473
NN_pmaxub = 474
NN_pminsw = 475
NN_pminub = 476
NN_pmovmskb = 477
NN_pmulhuw = 478
NN_psadbw = 479
NN_pshufw = 480
NN_maskmovq = 481
NN_movntps = 482
NN_movntq = 483
NN_prefetcht0 = 484
NN_prefetcht1 = 485
NN_prefetcht2 = 486
NN_prefetchnta = 487
NN_sfence = 488
NN_cmpeqps = 489
NN_cmpltps = 490
NN_cmpleps = 491
NN_cmpunordps = 492
NN_cmpneqps = 493
NN_cmpnltps = 494
NN_cmpnleps = 495
NN_cmpordps = 496
NN_cmpeqss = 497
NN_cmpltss = 498
NN_cmpless = 499
NN_cmpunordss = 500
NN_cmpneqss = 501
NN_cmpnltss = 502
NN_cmpnless = 503
NN_cmpordss = 504
NN_pf2iw = 505
NN_pfnacc = 506
NN_pfpnacc = 507
NN_pi2fw = 508
NN_pswapd = 509
NN_fstp1 = 510
NN_fcom2 = 511
NN_fcomp3 = 512
NN_fxch4 = 513
NN_fcomp5 = 514
NN_ffreep = 515
NN_fxch7 = 516
NN_fstp8 = 517
NN_fstp9 = 518
NN_addpd = 519
NN_addsd = 520
NN_andnpd = 521
NN_andpd = 522
NN_clflush = 523
NN_cmppd = 524
NN_cmpsd = 525
NN_comisd = 526
NN_cvtdq2pd = 527
NN_cvtdq2ps = 528
NN_cvtpd2dq = 529
NN_cvtpd2pi = 530
NN_cvtpd2ps = 531
NN_cvtpi2pd = 532
NN_cvtps2dq = 533
NN_cvtps2pd = 534
NN_cvtsd2si = 535
NN_cvtsd2ss = 536
NN_cvtsi2sd = 537
NN_cvtss2sd = 538
NN_cvttpd2dq = 539
NN_cvttpd2pi = 540
NN_cvttps2dq = 541
NN_cvttsd2si = 542
NN_divpd = 543
NN_divsd = 544
NN_lfence = 545
NN_maskmovdqu = 546
NN_maxpd = 547
NN_maxsd = 548
NN_mfence = 549
NN_minpd = 550
NN_minsd = 551
NN_movapd = 552
NN_movdq2q = 553
NN_movdqa = 554
NN_movdqu = 555
NN_movhpd = 556
NN_movlpd = 557
NN_movmskpd = 558
NN_movntdq = 559
NN_movnti = 560
NN_movntpd = 561
NN_movq2dq = 562
NN_movsd = 563
NN_movupd = 564
NN_mulpd = 565
NN_mulsd = 566
NN_orpd = 567
NN_paddq = 568
NN_pause = 569
NN_pmuludq = 570
NN_pshufd = 571
NN_pshufhw = 572
NN_pshuflw = 573
NN_pslldq = 574
NN_psrldq = 575
NN_psubq = 576
NN_punpckhqdq = 577
NN_punpcklqdq = 578
NN_shufpd = 579
NN_sqrtpd = 580
NN_sqrtsd = 581
NN_subpd = 582
NN_subsd = 583
NN_ucomisd = 584
NN_unpckhpd = 585
NN_unpcklpd = 586
NN_xorpd = 587
NN_syscall = 588
NN_sysret = 589
NN_swapgs = 590
NN_movddup = 591
NN_movshdup = 592
NN_movsldup = 593
NN_movsxd = 594
NN_cmpxchg16b = 595
NN_addsubpd = 596
NN_addsubps = 597
NN_haddpd = 598
NN_haddps = 599
NN_hsubpd = 600
NN_hsubps = 601
NN_monitor = 602
NN_mwait = 603
NN_fisttp = 604
NN_lddqu = 605
NN_psignb = 606
NN_psignw = 607
NN_psignd = 608
NN_pshufb = 609
NN_pmulhrsw = 610
NN_pmaddubsw = 611
NN_phsubsw = 612
NN_phaddsw = 613
NN_phaddw = 614
NN_phaddd = 615
NN_phsubw = 616
NN_phsubd = 617
NN_palignr = 618
NN_pabsb = 619
NN_pabsw = 620
NN_pabsd = 621
NN_vmcall = 622
NN_vmclear = 623
NN_vmlaunch = 624
NN_vmresume = 625
NN_vmptrld = 626
NN_vmptrst = 627
NN_vmread = 628
NN_vmwrite = 629
NN_vmxoff = 630
NN_vmxon = 631
NN_ud2 = 632
NN_rdtscp = 633
NN_pfrcpv = 634
NN_pfrsqrtv = 635
NN_cmpeqpd = 636
NN_cmpltpd = 637
NN_cmplepd = 638
NN_cmpunordpd = 639
NN_cmpneqpd = 640
NN_cmpnltpd = 641
NN_cmpnlepd = 642
NN_cmpordpd = 643
NN_cmpeqsd = 644
NN_cmpltsd = 645
NN_cmplesd = 646
NN_cmpunordsd = 647
NN_cmpneqsd = 648
NN_cmpnltsd = 649
NN_cmpnlesd = 650
NN_cmpordsd = 651
NN_blendpd = 652
NN_blendps = 653
NN_blendvpd = 654
NN_blendvps = 655
NN_dppd = 656
NN_dpps = 657
NN_extractps = 658
NN_insertps = 659
NN_movntdqa = 660
NN_mpsadbw = 661
NN_packusdw = 662
NN_pblendvb = 663
NN_pblendw = 664
NN_pcmpeqq = 665
NN_pextrb = 666
NN_pextrd = 667
NN_pextrq = 668
NN_phminposuw = 669
NN_pinsrb = 670
NN_pinsrd = 671
NN_pinsrq = 672
NN_pmaxsb = 673
NN_pmaxsd = 674
NN_pmaxud = 675
NN_pmaxuw = 676
NN_pminsb = 677
NN_pminsd = 678
NN_pminud = 679
NN_pminuw = 680
NN_pmovsxbw = 681
NN_pmovsxbd = 682
NN_pmovsxbq = 683
NN_pmovsxwd = 684
NN_pmovsxwq = 685
NN_pmovsxdq = 686
NN_pmovzxbw = 687
NN_pmovzxbd = 688
NN_pmovzxbq = 689
NN_pmovzxwd = 690
NN_pmovzxwq = 691
NN_pmovzxdq = 692
NN_pmuldq = 693
NN_pmulld = 694
NN_ptest = 695
NN_roundpd = 696
NN_roundps = 697
NN_roundsd = 698
NN_roundss = 699
NN_crc32 = 700
NN_pcmpestri = 701
NN_pcmpestrm = 702
NN_pcmpistri = 703
NN_pcmpistrm = 704
NN_pcmpgtq = 705
NN_popcnt = 706
NN_extrq = 707
NN_insertq = 708
NN_movntsd = 709
NN_movntss = 710
NN_lzcnt = 711
NN_xgetbv = 712
NN_xrstor = 713
NN_xsave = 714
NN_xsetbv = 715
NN_getsec = 716
NN_clgi = 717
NN_invlpga = 718
NN_skinit = 719
NN_stgi = 720
NN_vmexit = 721
NN_vmload = 722
NN_vmmcall = 723
NN_vmrun = 724
NN_vmsave = 725
NN_invept = 726
NN_invvpid = 727
NN_movbe = 728
NN_aesenc = 729
NN_aesenclast = 730
NN_aesdec = 731
NN_aesdeclast = 732
NN_aesimc = 733
NN_aeskeygenassist = 734
NN_pclmulqdq = 735
NN_retnw = 736
NN_retnd = 737
NN_retnq = 738
NN_retfw = 739
NN_retfd = 740
NN_retfq = 741
NN_rdrand = 742
NN_adcx = 743
NN_adox = 744
NN_andn = 745
NN_bextr = 746
NN_blsi = 747
NN_blsmsk = 748
NN_blsr = 749
NN_bzhi = 750
NN_clac = 751
NN_mulx = 752
NN_pdep = 753
NN_pext = 754
NN_rorx = 755
NN_sarx = 756
NN_shlx = 757
NN_shrx = 758
NN_stac = 759
NN_tzcnt = 760
NN_xsaveopt = 761
NN_invpcid = 762
NN_rdseed = 763
NN_rdfsbase = 764
NN_rdgsbase = 765
NN_wrfsbase = 766
NN_wrgsbase = 767
NN_vaddpd = 768
NN_vaddps = 769
NN_vaddsd = 770
NN_vaddss = 771
NN_vaddsubpd = 772
NN_vaddsubps = 773
NN_vaesdec = 774
NN_vaesdeclast = 775
NN_vaesenc = 776
NN_vaesenclast = 777
NN_vaesimc = 778
NN_vaeskeygenassist = 779
NN_vandnpd = 780
NN_vandnps = 781
NN_vandpd = 782
NN_vandps = 783
NN_vblendpd = 784
NN_vblendps = 785
NN_vblendvpd = 786
NN_vblendvps = 787
NN_vbroadcastf128 = 788
NN_vbroadcasti128 = 789
NN_vbroadcastsd = 790
NN_vbroadcastss = 791
NN_vcmppd = 792
NN_vcmpps = 793
NN_vcmpsd = 794
NN_vcmpss = 795
NN_vcomisd = 796
NN_vcomiss = 797
NN_vcvtdq2pd = 798
NN_vcvtdq2ps = 799
NN_vcvtpd2dq = 800
NN_vcvtpd2ps = 801
NN_vcvtph2ps = 802
NN_vcvtps2dq = 803
NN_vcvtps2pd = 804
NN_vcvtps2ph = 805
NN_vcvtsd2si = 806
NN_vcvtsd2ss = 807
NN_vcvtsi2sd = 808
NN_vcvtsi2ss = 809
NN_vcvtss2sd = 810
NN_vcvtss2si = 811
NN_vcvttpd2dq = 812
NN_vcvttps2dq = 813
NN_vcvttsd2si = 814
NN_vcvttss2si = 815
NN_vdivpd = 816
NN_vdivps = 817
NN_vdivsd = 818
NN_vdivss = 819
NN_vdppd = 820
NN_vdpps = 821
NN_vextractf128 = 822
NN_vextracti128 = 823
NN_vextractps = 824
NN_vfmadd132pd = 825
NN_vfmadd132ps = 826
NN_vfmadd132sd = 827
NN_vfmadd132ss = 828
NN_vfmadd213pd = 829
NN_vfmadd213ps = 830
NN_vfmadd213sd = 831
NN_vfmadd213ss = 832
NN_vfmadd231pd = 833
NN_vfmadd231ps = 834
NN_vfmadd231sd = 835
NN_vfmadd231ss = 836
NN_vfmaddsub132pd = 837
NN_vfmaddsub132ps = 838
NN_vfmaddsub213pd = 839
NN_vfmaddsub213ps = 840
NN_vfmaddsub231pd = 841
NN_vfmaddsub231ps = 842
NN_vfmsub132pd = 843
NN_vfmsub132ps = 844
NN_vfmsub132sd = 845
NN_vfmsub132ss = 846
NN_vfmsub213pd = 847
NN_vfmsub213ps = 848
NN_vfmsub213sd = 849
NN_vfmsub213ss = 850
NN_vfmsub231pd = 851
NN_vfmsub231ps = 852
NN_vfmsub231sd = 853
NN_vfmsub231ss = 854
NN_vfmsubadd132pd = 855
NN_vfmsubadd132ps = 856
NN_vfmsubadd213pd = 857
NN_vfmsubadd213ps = 858
NN_vfmsubadd231pd = 859
NN_vfmsubadd231ps = 860
NN_vfnmadd132pd = 861
NN_vfnmadd132ps = 862
NN_vfnmadd132sd = 863
NN_vfnmadd132ss = 864
NN_vfnmadd213pd = 865
NN_vfnmadd213ps = 866
NN_vfnmadd213sd = 867
NN_vfnmadd213ss = 868
NN_vfnmadd231pd = 869
NN_vfnmadd231ps = 870
NN_vfnmadd231sd = 871
NN_vfnmadd231ss = 872
NN_vfnmsub132pd = 873
NN_vfnmsub132ps = 874
NN_vfnmsub132sd = 875
NN_vfnmsub132ss = 876
NN_vfnmsub213pd = 877
NN_vfnmsub213ps = 878
NN_vfnmsub213sd = 879
NN_vfnmsub213ss = 880
NN_vfnmsub231pd = 881
NN_vfnmsub231ps = 882
NN_vfnmsub231sd = 883
NN_vfnmsub231ss = 884
NN_vgatherdps = 885
NN_vgatherdpd = 886
NN_vgatherqps = 887
NN_vgatherqpd = 888
NN_vhaddpd = 889
NN_vhaddps = 890
NN_vhsubpd = 891
NN_vhsubps = 892
NN_vinsertf128 = 893
NN_vinserti128 = 894
NN_vinsertps = 895
NN_vlddqu = 896
NN_vldmxcsr = 897
NN_vmaskmovdqu = 898
NN_vmaskmovpd = 899
NN_vmaskmovps = 900
NN_vmaxpd = 901
NN_vmaxps = 902
NN_vmaxsd = 903
NN_vmaxss = 904
NN_vminpd = 905
NN_vminps = 906
NN_vminsd = 907
NN_vminss = 908
NN_vmovapd = 909
NN_vmovaps = 910
NN_vmovd = 911
NN_vmovddup = 912
NN_vmovdqa = 913
NN_vmovdqu = 914
NN_vmovhlps = 915
NN_vmovhpd = 916
NN_vmovhps = 917
NN_vmovlhps = 918
NN_vmovlpd = 919
NN_vmovlps = 920
NN_vmovmskpd = 921
NN_vmovmskps = 922
NN_vmovntdq = 923
NN_vmovntdqa = 924
NN_vmovntpd = 925
NN_vmovntps = 926
NN_vmovq = 927
NN_vmovsd = 928
NN_vmovshdup = 929
NN_vmovsldup = 930
NN_vmovss = 931
NN_vmovupd = 932
NN_vmovups = 933
NN_vmpsadbw = 934
NN_vmulpd = 935
NN_vmulps = 936
NN_vmulsd = 937
NN_vmulss = 938
NN_vorpd = 939
NN_vorps = 940
NN_vpabsb = 941
NN_vpabsd = 942
NN_vpabsw = 943
NN_vpackssdw = 944
NN_vpacksswb = 945
NN_vpackusdw = 946
NN_vpackuswb = 947
NN_vpaddb = 948
NN_vpaddd = 949
NN_vpaddq = 950
NN_vpaddsb = 951
NN_vpaddsw = 952
NN_vpaddusb = 953
NN_vpaddusw = 954
NN_vpaddw = 955
NN_vpalignr = 956
NN_vpand = 957
NN_vpandn = 958
NN_vpavgb = 959
NN_vpavgw = 960
NN_vpblendd = 961
NN_vpblendvb = 962
NN_vpblendw = 963
NN_vpbroadcastb = 964
NN_vpbroadcastd = 965
NN_vpbroadcastq = 966
NN_vpbroadcastw = 967
NN_vpclmulqdq = 968
NN_vpcmpeqb = 969
NN_vpcmpeqd = 970
NN_vpcmpeqq = 971
NN_vpcmpeqw = 972
NN_vpcmpestri = 973
NN_vpcmpestrm = 974
NN_vpcmpgtb = 975
NN_vpcmpgtd = 976
NN_vpcmpgtq = 977
NN_vpcmpgtw = 978
NN_vpcmpistri = 979
NN_vpcmpistrm = 980
NN_vperm2f128 = 981
NN_vperm2i128 = 982
NN_vpermd = 983
NN_vpermilpd = 984
NN_vpermilps = 985
NN_vpermpd = 986
NN_vpermps = 987
NN_vpermq = 988
NN_vpextrb = 989
NN_vpextrd = 990
NN_vpextrq = 991
NN_vpextrw = 992
NN_vpgatherdd = 993
NN_vpgatherdq = 994
NN_vpgatherqd = 995
NN_vpgatherqq = 996
NN_vphaddd = 997
NN_vphaddsw = 998
NN_vphaddw = 999
NN_vphminposuw = 1000
NN_vphsubd = 1001
NN_vphsubsw = 1002
NN_vphsubw = 1003
NN_vpinsrb = 1004
NN_vpinsrd = 1005
NN_vpinsrq = 1006
NN_vpinsrw = 1007
NN_vpmaddubsw = 1008
NN_vpmaddwd = 1009
NN_vpmaskmovd = 1010
NN_vpmaskmovq = 1011
NN_vpmaxsb = 1012
NN_vpmaxsd = 1013
NN_vpmaxsw = 1014
NN_vpmaxub = 1015
NN_vpmaxud = 1016
NN_vpmaxuw = 1017
NN_vpminsb = 1018
NN_vpminsd = 1019
NN_vpminsw = 1020
NN_vpminub = 1021
NN_vpminud = 1022
NN_vpminuw = 1023
NN_vpmovmskb = 1024
NN_vpmovsxbd = 1025
NN_vpmovsxbq = 1026
NN_vpmovsxbw = 1027
NN_vpmovsxdq = 1028
NN_vpmovsxwd = 1029
NN_vpmovsxwq = 1030
NN_vpmovzxbd = 1031
NN_vpmovzxbq = 1032
NN_vpmovzxbw = 1033
NN_vpmovzxdq = 1034
NN_vpmovzxwd = 1035
NN_vpmovzxwq = 1036
NN_vpmuldq = 1037
NN_vpmulhrsw = 1038
NN_vpmulhuw = 1039
NN_vpmulhw = 1040
NN_vpmulld = 1041
NN_vpmullw = 1042
NN_vpmuludq = 1043
NN_vpor = 1044
NN_vpsadbw = 1045
NN_vpshufb = 1046
NN_vpshufd = 1047
NN_vpshufhw = 1048
NN_vpshuflw = 1049
NN_vpsignb = 1050
NN_vpsignd = 1051
NN_vpsignw = 1052
NN_vpslld = 1053
NN_vpslldq = 1054
NN_vpsllq = 1055
NN_vpsllvd = 1056
NN_vpsllvq = 1057
NN_vpsllw = 1058
NN_vpsrad = 1059
NN_vpsravd = 1060
NN_vpsraw = 1061
NN_vpsrld = 1062
NN_vpsrldq = 1063
NN_vpsrlq = 1064
NN_vpsrlvd = 1065
NN_vpsrlvq = 1066
NN_vpsrlw = 1067
NN_vpsubb = 1068
NN_vpsubd = 1069
NN_vpsubq = 1070
NN_vpsubsb = 1071
NN_vpsubsw = 1072
NN_vpsubusb = 1073
NN_vpsubusw = 1074
NN_vpsubw = 1075
NN_vptest = 1076
NN_vpunpckhbw = 1077
NN_vpunpckhdq = 1078
NN_vpunpckhqdq = 1079
NN_vpunpckhwd = 1080
NN_vpunpcklbw = 1081
NN_vpunpckldq = 1082
NN_vpunpcklqdq = 1083
NN_vpunpcklwd = 1084
NN_vpxor = 1085
NN_vrcpps = 1086
NN_vrcpss = 1087
NN_vroundpd = 1088
NN_vroundps = 1089
NN_vroundsd = 1090
NN_vroundss = 1091
NN_vrsqrtps = 1092
NN_vrsqrtss = 1093
NN_vshufpd = 1094
NN_vshufps = 1095
NN_vsqrtpd = 1096
NN_vsqrtps = 1097
NN_vsqrtsd = 1098
NN_vsqrtss = 1099
NN_vstmxcsr = 1100
NN_vsubpd = 1101
NN_vsubps = 1102
NN_vsubsd = 1103
NN_vsubss = 1104
NN_vtestpd = 1105
NN_vtestps = 1106
NN_vucomisd = 1107
NN_vucomiss = 1108
NN_vunpckhpd = 1109
NN_vunpckhps = 1110
NN_vunpcklpd = 1111
NN_vunpcklps = 1112
NN_vxorpd = 1113
NN_vxorps = 1114
NN_vzeroall = 1115
NN_vzeroupper = 1116
NN_xabort = 1117
NN_xbegin = 1118
NN_xend = 1119
NN_xtest = 1120
NN_vmgetinfo = 1121
NN_vmsetinfo = 1122
NN_vmdxdsbl = 1123
NN_vmdxenbl = 1124
NN_vmcpuid = 1125
NN_vmhlt = 1126
NN_vmsplaf = 1127
NN_vmpushfd = 1128
NN_vmpopfd = 1129
NN_vmcli = 1130
NN_vmsti = 1131
NN_vmiretd = 1132
NN_vmsgdt = 1133
NN_vmsidt = 1134
NN_vmsldt = 1135
NN_vmstr = 1136
NN_vmsdte = 1137
NN_vpcext = 1138
NN_vfmaddsubps = 1139
NN_vfmaddsubpd = 1140
NN_vfmsubaddps = 1141
NN_vfmsubaddpd = 1142
NN_vfmaddps = 1143
NN_vfmaddpd = 1144
NN_vfmaddss = 1145
NN_vfmaddsd = 1146
NN_vfmsubps = 1147
NN_vfmsubpd = 1148
NN_vfmsubss = 1149
NN_vfmsubsd = 1150
NN_vfnmaddps = 1151
NN_vfnmaddpd = 1152
NN_vfnmaddss = 1153
NN_vfnmaddsd = 1154
NN_vfnmsubps = 1155
NN_vfnmsubpd = 1156
NN_vfnmsubss = 1157
NN_vfnmsubsd = 1158
NN_bndmk = 1159
NN_bndcl = 1160
NN_bndcu = 1161
NN_bndcn = 1162
NN_bndmov = 1163
NN_bndldx = 1164
NN_bndstx = 1165
NN_xrstors = 1166
NN_xsavec = 1167
NN_xsaves = 1168
NN_prefetchwt1 = 1169
NN_clflushopt = 1170
NN_clwb = 1171
NN_pcommit = 1172
NN_rdpkru = 1173
NN_wrpkru = 1174
NN_vcmpeqpd = 1175
NN_vcmpltpd = 1176
NN_vcmplepd = 1177
NN_vcmpunordpd = 1178
NN_vcmpneqpd = 1179
NN_vcmpnltpd = 1180
NN_vcmpnlepd = 1181
NN_vcmpordpd = 1182
NN_vcmpeq_uqpd = 1183
NN_vcmpngepd = 1184
NN_vcmpngtpd = 1185
NN_vcmpfalsepd = 1186
NN_vcmpneq_oqpd = 1187
NN_vcmpgepd = 1188
NN_vcmpgtpd = 1189
NN_vcmptruepd = 1190
NN_vcmpeq_ospd = 1191
NN_vcmplt_oqpd = 1192
NN_vcmple_oqpd = 1193
NN_vcmpunord_spd = 1194
NN_vcmpneq_uspd = 1195
NN_vcmpnlt_uqpd = 1196
NN_vcmpnle_uqpd = 1197
NN_vcmpord_spd = 1198
NN_vcmpeq_uspd = 1199
NN_vcmpnge_uqpd = 1200
NN_vcmpngt_uqpd = 1201
NN_vcmpfalse_ospd = 1202
NN_vcmpneq_ospd = 1203
NN_vcmpge_oqpd = 1204
NN_vcmpgt_oqpd = 1205
NN_vcmptrue_uspd = 1206
NN_vcmpeqps = 1207
NN_vcmpltps = 1208
NN_vcmpleps = 1209
NN_vcmpunordps = 1210
NN_vcmpneqps = 1211
NN_vcmpnltps = 1212
NN_vcmpnleps = 1213
NN_vcmpordps = 1214
NN_vcmpeq_uqps = 1215
NN_vcmpngeps = 1216
NN_vcmpngtps = 1217
NN_vcmpfalseps = 1218
NN_vcmpneq_oqps = 1219
NN_vcmpgeps = 1220
NN_vcmpgtps = 1221
NN_vcmptrueps = 1222
NN_vcmpeq_osps = 1223
NN_vcmplt_oqps = 1224
NN_vcmple_oqps = 1225
NN_vcmpunord_sps = 1226
NN_vcmpneq_usps = 1227
NN_vcmpnlt_uqps = 1228
NN_vcmpnle_uqps = 1229
NN_vcmpord_sps = 1230
NN_vcmpeq_usps = 1231
NN_vcmpnge_uqps = 1232
NN_vcmpngt_uqps = 1233
NN_vcmpfalse_osps = 1234
NN_vcmpneq_osps = 1235
NN_vcmpge_oqps = 1236
NN_vcmpgt_oqps = 1237
NN_vcmptrue_usps = 1238
NN_vcmpeqsd = 1239
NN_vcmpltsd = 1240
NN_vcmplesd = 1241
NN_vcmpunordsd = 1242
NN_vcmpneqsd = 1243
NN_vcmpnltsd = 1244
NN_vcmpnlesd = 1245
NN_vcmpordsd = 1246
NN_vcmpeq_uqsd = 1247
NN_vcmpngesd = 1248
NN_vcmpngtsd = 1249
NN_vcmpfalsesd = 1250
NN_vcmpneq_oqsd = 1251
NN_vcmpgesd = 1252
NN_vcmpgtsd = 1253
NN_vcmptruesd = 1254
NN_vcmpeq_ossd = 1255
NN_vcmplt_oqsd = 1256
NN_vcmple_oqsd = 1257
NN_vcmpunord_ssd = 1258
NN_vcmpneq_ussd = 1259
NN_vcmpnlt_uqsd = 1260
NN_vcmpnle_uqsd = 1261
NN_vcmpord_ssd = 1262
NN_vcmpeq_ussd = 1263
NN_vcmpnge_uqsd = 1264
NN_vcmpngt_uqsd = 1265
NN_vcmpfalse_ossd = 1266
NN_vcmpneq_ossd = 1267
NN_vcmpge_oqsd = 1268
NN_vcmpgt_oqsd = 1269
NN_vcmptrue_ussd = 1270
NN_vcmpeqss = 1271
NN_vcmpltss = 1272
NN_vcmpless = 1273
NN_vcmpunordss = 1274
NN_vcmpneqss = 1275
NN_vcmpnltss = 1276
NN_vcmpnless = 1277
NN_vcmpordss = 1278
NN_vcmpeq_uqss = 1279
NN_vcmpngess = 1280
NN_vcmpngtss = 1281
NN_vcmpfalsess = 1282
NN_vcmpneq_oqss = 1283
NN_vcmpgess = 1284
NN_vcmpgtss = 1285
NN_vcmptruess = 1286
NN_vcmpeq_osss = 1287
NN_vcmplt_oqss = 1288
NN_vcmple_oqss = 1289
NN_vcmpunord_sss = 1290
NN_vcmpneq_usss = 1291
NN_vcmpnlt_uqss = 1292
NN_vcmpnle_uqss = 1293
NN_vcmpord_sss = 1294
NN_vcmpeq_usss = 1295
NN_vcmpnge_uqss = 1296
NN_vcmpngt_uqss = 1297
NN_vcmpfalse_osss = 1298
NN_vcmpneq_osss = 1299
NN_vcmpge_oqss = 1300
NN_vcmpgt_oqss = 1301
NN_vcmptrue_usss = 1302
NN_valignd = 1303
NN_valignq = 1304
NN_vblendmpd = 1305
NN_vblendmps = 1306
NN_vpblendmb = 1307
NN_vpblendmw = 1308
NN_vpblendmd = 1309
NN_vpblendmq = 1310
NN_vbroadcastf32x2 = 1311
NN_vbroadcastf32x4 = 1312
NN_vbroadcastf64x2 = 1313
NN_vbroadcastf32x8 = 1314
NN_vbroadcastf64x4 = 1315
NN_vbroadcasti32x2 = 1316
NN_vbroadcasti32x4 = 1317
NN_vbroadcasti64x2 = 1318
NN_vbroadcasti32x8 = 1319
NN_vbroadcasti64x4 = 1320
NN_vcompresspd = 1321
NN_vcompressps = 1322
NN_vcvtpd2qq = 1323
NN_vcvtpd2udq = 1324
NN_vcvtpd2uqq = 1325
NN_vcvtps2udq = 1326
NN_vcvtps2qq = 1327
NN_vcvtps2uqq = 1328
NN_vcvtqq2pd = 1329
NN_vcvtqq2ps = 1330
NN_vcvtsd2usi = 1331
NN_vcvtss2usi = 1332
NN_vcvttpd2qq = 1333
NN_vcvttpd2udq = 1334
NN_vcvttpd2uqq = 1335
NN_vcvttps2udq = 1336
NN_vcvttps2qq = 1337
NN_vcvttps2uqq = 1338
NN_vcvttsd2usi = 1339
NN_vcvttss2usi = 1340
NN_vcvtudq2pd = 1341
NN_vcvtudq2ps = 1342
NN_vcvtuqq2pd = 1343
NN_vcvtuqq2ps = 1344
NN_vcvtusi2sd = 1345
NN_vcvtusi2ss = 1346
NN_vdbpsadbw = 1347
NN_vexpandpd = 1348
NN_vexpandps = 1349
NN_vextractf32x4 = 1350
NN_vextractf64x2 = 1351
NN_vextractf32x8 = 1352
NN_vextractf64x4 = 1353
NN_vextracti32x4 = 1354
NN_vextracti64x2 = 1355
NN_vextracti32x8 = 1356
NN_vextracti64x4 = 1357
NN_vfixupimmpd = 1358
NN_vfixupimmps = 1359
NN_vfixupimmsd = 1360
NN_vfixupimmss = 1361
NN_vfpclasspd = 1362
NN_vfpclassps = 1363
NN_vfpclasssd = 1364
NN_vfpclassss = 1365
NN_vgetexppd = 1366
NN_vgetexpps = 1367
NN_vgetexpsd = 1368
NN_vgetexpss = 1369
NN_vgetmantpd = 1370
NN_vgetmantps = 1371
NN_vgetmantsd = 1372
NN_vgetmantss = 1373
NN_vinsertf32x4 = 1374
NN_vinsertf64x2 = 1375
NN_vinsertf32x8 = 1376
NN_vinsertf64x4 = 1377
NN_vinserti32x4 = 1378
NN_vinserti64x2 = 1379
NN_vinserti32x8 = 1380
NN_vinserti64x4 = 1381
NN_vmovdqa32 = 1382
NN_vmovdqa64 = 1383
NN_vmovdqu8 = 1384
NN_vmovdqu16 = 1385
NN_vmovdqu32 = 1386
NN_vmovdqu64 = 1387
NN_vpabsq = 1388
NN_vpandd = 1389
NN_vpandq = 1390
NN_vpandnd = 1391
NN_vpandnq = 1392
NN_vpbroadcastmb2q = 1393
NN_vpbroadcastmw2d = 1394
NN_vpcmpb = 1395
NN_vpcmpub = 1396
NN_vpcmpd = 1397
NN_vpcmpud = 1398
NN_vpcmpq = 1399
NN_vpcmpuq = 1400
NN_vpcmpw = 1401
NN_vpcmpuw = 1402
NN_vpcompressd = 1403
NN_vpcompressq = 1404
NN_vpconflictd = 1405
NN_vpconflictq = 1406
NN_vpermb = 1407
NN_vpermw = 1408
NN_vpermi2b = 1409
NN_vpermi2w = 1410
NN_vpermi2d = 1411
NN_vpermi2q = 1412
NN_vpermi2ps = 1413
NN_vpermi2pd = 1414
NN_vpermt2b = 1415
NN_vpermt2w = 1416
NN_vpermt2d = 1417
NN_vpermt2q = 1418
NN_vpermt2ps = 1419
NN_vpermt2pd = 1420
NN_vpexpandd = 1421
NN_vpexpandq = 1422
NN_vplzcntd = 1423
NN_vplzcntq = 1424
NN_vpmadd52luq = 1425
NN_vpmadd52huq = 1426
NN_vpmaxsq = 1427
NN_vpmaxuq = 1428
NN_vpminsq = 1429
NN_vpminuq = 1430
NN_vpmovm2b = 1431
NN_vpmovm2w = 1432
NN_vpmovm2d = 1433
NN_vpmovm2q = 1434
NN_vpmovb2m = 1435
NN_vpmovw2m = 1436
NN_vpmovd2m = 1437
NN_vpmovq2m = 1438
NN_vpmovqb = 1439
NN_vpmovsqb = 1440
NN_vpmovusqb = 1441
NN_vpmovqw = 1442
NN_vpmovsqw = 1443
NN_vpmovusqw = 1444
NN_vpmovqd = 1445
NN_vpmovsqd = 1446
NN_vpmovusqd = 1447
NN_vpmovdb = 1448
NN_vpmovsdb = 1449
NN_vpmovusdb = 1450
NN_vpmovdw = 1451
NN_vpmovsdw = 1452
NN_vpmovusdw = 1453
NN_vpmovwb = 1454
NN_vpmovswb = 1455
NN_vpmovuswb = 1456
NN_vpmullq = 1457
NN_vpmultishiftqb = 1458
NN_vpord = 1459
NN_vporq = 1460
NN_vprold = 1461
NN_vprolvd = 1462
NN_vprolq = 1463
NN_vprolvq = 1464
NN_vprord = 1465
NN_vprorvd = 1466
NN_vprorq = 1467
NN_vprorvq = 1468
NN_vpscatterdd = 1469
NN_vpscatterdq = 1470
NN_vpscatterqd = 1471
NN_vpscatterqq = 1472
NN_vpsraq = 1473
NN_vpsllvw = 1474
NN_vpsrlvw = 1475
NN_vptestnmb = 1476
NN_vptestnmw = 1477
NN_vptestnmd = 1478
NN_vptestnmq = 1479
NN_vshuff32x4 = 1480
NN_vshuff64x2 = 1481
NN_vshufi32x4 = 1482
NN_vshufi64x2 = 1483
NN_vpternlogd = 1484
NN_vpternlogq = 1485
NN_vptestmb = 1486
NN_vptestmw = 1487
NN_vptestmd = 1488
NN_vptestmq = 1489
NN_vpsravw = 1490
NN_vpsravq = 1491
NN_vpxord = 1492
NN_vpxorq = 1493
NN_vrangepd = 1494
NN_vrangeps = 1495
NN_vrangesd = 1496
NN_vrangess = 1497
NN_vrcp14pd = 1498
NN_vrcp14sd = 1499
NN_vrcp14ps = 1500
NN_vrcp14ss = 1501
NN_vreducepd = 1502
NN_vreducesd = 1503
NN_vreduceps = 1504
NN_vreducess = 1505
NN_vrndscalepd = 1506
NN_vrndscalesd = 1507
NN_vrndscaleps = 1508
NN_vrndscaless = 1509
NN_vrsqrt14pd = 1510
NN_vrsqrt14sd = 1511
NN_vrsqrt14ps = 1512
NN_vrsqrt14ss = 1513
NN_vscalefpd = 1514
NN_vscalefsd = 1515
NN_vscalefps = 1516
NN_vscalefss = 1517
NN_vscatterdps = 1518
NN_vscatterdpd = 1519
NN_vscatterqps = 1520
NN_vscatterqpd = 1521
NN_vexp2pd = 1522
NN_vexp2ps = 1523
NN_vrcp28pd = 1524
NN_vrcp28sd = 1525
NN_vrcp28ps = 1526
NN_vrcp28ss = 1527
NN_vrsqrt28pd = 1528
NN_vrsqrt28sd = 1529
NN_vrsqrt28ps = 1530
NN_vrsqrt28ss = 1531
NN_vgatherpf0dps = 1532
NN_vgatherpf0qps = 1533
NN_vgatherpf0dpd = 1534
NN_vgatherpf0qpd = 1535
NN_vgatherpf1dps = 1536
NN_vgatherpf1qps = 1537
NN_vgatherpf1dpd = 1538
NN_vgatherpf1qpd = 1539
NN_vscatterpf0dps = 1540
NN_vscatterpf0qps = 1541
NN_vscatterpf0dpd = 1542
NN_vscatterpf0qpd = 1543
NN_vscatterpf1dps = 1544
NN_vscatterpf1qps = 1545
NN_vscatterpf1dpd = 1546
NN_vscatterpf1qpd = 1547
NN_vpcmpltd = 1548
NN_vpcmpled = 1549
NN_vpcmpneqd = 1550
NN_vpcmpnltd = 1551
NN_vpcmpnled = 1552
NN_vpcmpequd = 1553
NN_vpcmpltud = 1554
NN_vpcmpleud = 1555
NN_vpcmpnequd = 1556
NN_vpcmpnltud = 1557
NN_vpcmpnleud = 1558
NN_vpcmpltq = 1559
NN_vpcmpleq = 1560
NN_vpcmpneqq = 1561
NN_vpcmpnltq = 1562
NN_vpcmpnleq = 1563
NN_vpcmpequq = 1564
NN_vpcmpltuq = 1565
NN_vpcmpleuq = 1566
NN_vpcmpnequq = 1567
NN_vpcmpnltuq = 1568
NN_vpcmpnleuq = 1569
NN_kaddw = 1570
NN_kaddb = 1571
NN_kaddq = 1572
NN_kaddd = 1573
NN_kandw = 1574
NN_kandb = 1575
NN_kandq = 1576
NN_kandd = 1577
NN_kandnw = 1578
NN_kandnb = 1579
NN_kandnq = 1580
NN_kandnd = 1581
NN_kmovw = 1582
NN_kmovb = 1583
NN_kmovq = 1584
NN_kmovd = 1585
NN_kunpckbw = 1586
NN_kunpckwd = 1587
NN_kunpckdq = 1588
NN_knotw = 1589
NN_knotb = 1590
NN_knotq = 1591
NN_knotd = 1592
NN_korw = 1593
NN_korb = 1594
NN_korq = 1595
NN_kord = 1596
NN_kortestw = 1597
NN_kortestb = 1598
NN_kortestq = 1599
NN_kortestd = 1600
NN_kshiftlw = 1601
NN_kshiftlb = 1602
NN_kshiftlq = 1603
NN_kshiftld = 1604
NN_kshiftrw = 1605
NN_kshiftrb = 1606
NN_kshiftrq = 1607
NN_kshiftrd = 1608
NN_kxnorw = 1609
NN_kxnorb = 1610
NN_kxnorq = 1611
NN_kxnord = 1612
NN_ktestw = 1613
NN_ktestb = 1614
NN_ktestq = 1615
NN_ktestd = 1616
NN_kxorw = 1617
NN_kxorb = 1618
NN_kxorq = 1619
NN_kxord = 1620
NN_sha1rnds4 = 1621
NN_sha1nexte = 1622
NN_sha1msg1 = 1623
NN_sha1msg2 = 1624
NN_sha256rnds2 = 1625
NN_sha256msg1 = 1626
NN_sha256msg2 = 1627
NN_encls = 1628
NN_enclu = 1629
NN_vfrczpd = 1630
NN_vfrczps = 1631
NN_vfrczsd = 1632
NN_vfrczss = 1633
NN_vpcmov = 1634
NN_vpcomb = 1635
NN_vpcomd = 1636
NN_vpcomq = 1637
NN_vpcomub = 1638
NN_vpcomud = 1639
NN_vpcomuq = 1640
NN_vpcomuw = 1641
NN_vpcomw = 1642
NN_vpermil2pd = 1643
NN_vpermil2ps = 1644
NN_vphaddbd = 1645
NN_vphaddbq = 1646
NN_vphaddbw = 1647
NN_vphadddq = 1648
NN_vphaddubd = 1649
NN_vphaddubq = 1650
NN_vphaddubw = 1651
NN_vphaddudq = 1652
NN_vphadduwd = 1653
NN_vphadduwq = 1654
NN_vphaddwd = 1655
NN_vphaddwq = 1656
NN_vphsubbw = 1657
NN_vphsubdq = 1658
NN_vphsubwd = 1659
NN_vpmacsdd = 1660
NN_vpmacsdqh = 1661
NN_vpmacsdql = 1662
NN_vpmacssdd = 1663
NN_vpmacssdqh = 1664
NN_vpmacssdql = 1665
NN_vpmacsswd = 1666
NN_vpmacssww = 1667
NN_vpmacswd = 1668
NN_vpmacsww = 1669
NN_vpmadcsswd = 1670
NN_vpmadcswd = 1671
NN_vpperm = 1672
NN_vprotb = 1673
NN_vprotd = 1674
NN_vprotq = 1675
NN_vprotw = 1676
NN_vpshab = 1677
NN_vpshad = 1678
NN_vpshaq = 1679
NN_vpshaw = 1680
NN_vpshlb = 1681
NN_vpshld = 1682
NN_vpshlq = 1683
NN_vpshlw = 1684
NN_vpcomltb = 1685
NN_vpcomleb = 1686
NN_vpcomgtb = 1687
NN_vpcomgeb = 1688
NN_vpcomeqb = 1689
NN_vpcomneqb = 1690
NN_vpcomfalseb = 1691
NN_vpcomtrueb = 1692
NN_vpcomltw = 1693
NN_vpcomlew = 1694
NN_vpcomgtw = 1695
NN_vpcomgew = 1696
NN_vpcomeqw = 1697
NN_vpcomneqw = 1698
NN_vpcomfalsew = 1699
NN_vpcomtruew = 1700
NN_vpcomltd = 1701
NN_vpcomled = 1702
NN_vpcomgtd = 1703
NN_vpcomged = 1704
NN_vpcomeqd = 1705
NN_vpcomneqd = 1706
NN_vpcomfalsed = 1707
NN_vpcomtrued = 1708
NN_vpcomltq = 1709
NN_vpcomleq = 1710
NN_vpcomgtq = 1711
NN_vpcomgeq = 1712
NN_vpcomeqq = 1713
NN_vpcomneqq = 1714
NN_vpcomfalseq = 1715
NN_vpcomtrueq = 1716
NN_vpcomltub = 1717
NN_vpcomleub = 1718
NN_vpcomgtub = 1719
NN_vpcomgeub = 1720
NN_vpcomequb = 1721
NN_vpcomnequb = 1722
NN_vpcomfalseub = 1723
NN_vpcomtrueub = 1724
NN_vpcomltuw = 1725
NN_vpcomleuw = 1726
NN_vpcomgtuw = 1727
NN_vpcomgeuw = 1728
NN_vpcomequw = 1729
NN_vpcomnequw = 1730
NN_vpcomfalseuw = 1731
NN_vpcomtrueuw = 1732
NN_vpcomltud = 1733
NN_vpcomleud = 1734
NN_vpcomgtud = 1735
NN_vpcomgeud = 1736
NN_vpcomequd = 1737
NN_vpcomnequd = 1738
NN_vpcomfalseud = 1739
NN_vpcomtrueud = 1740
NN_vpcomltuq = 1741
NN_vpcomleuq = 1742
NN_vpcomgtuq = 1743
NN_vpcomgeuq = 1744
NN_vpcomequq = 1745
NN_vpcomnequq = 1746
NN_vpcomfalseuq = 1747
NN_vpcomtrueuq = 1748
NN_monitorx = 1749
NN_mwaitx = 1750
NN_clzero = 1751
NN_ptwrite = 1752
NN_v4fmaddps = 1753
NN_v4fnmaddps = 1754
NN_v4fmaddss = 1755
NN_v4fnmaddss = 1756
NN_vp4dpwssd = 1757
NN_vp4dpwssds = 1758
NN_vpopcntd = 1759
NN_vpopcntq = 1760
NN_rdpid = 1761
NN_vmfunc = 1762
NN_incsspd = 1763
NN_incsspq = 1764
NN_rdsspd = 1765
NN_rdsspq = 1766
NN_saveprevssp = 1767
NN_rstorssp = 1768
NN_wrssd = 1769
NN_wrssq = 1770
NN_wrussd = 1771
NN_wrussq = 1772
NN_setssbsy = 1773
NN_clrssbsy = 1774
NN_endbr64 = 1775
NN_endbr32 = 1776
NN_ud0 = 1777
NN_ud1 = 1778
NN_enqcmd = 1779
NN_enqcmds = 1780
NN_mcommit = 1781
NN_rdpru = 1782
NN_cldemote = 1783
NN_enclv = 1784
NN_movdiri = 1785
NN_movdir64b = 1786
NN_tpause = 1787
NN_umonitor = 1788
NN_umwait = 1789
NN_serialize = 1790
NN_xresldtrk = 1791
NN_xsusldtrk = 1792
NN_gf2p8mulb = 1793
NN_gf2p8affineqb = 1794
NN_gf2p8affineinvqb = 1795
NN_vgf2p8mulb = 1796
NN_vgf2p8affineqb = 1797
NN_vgf2p8affineinvqb = 1798
NN_fxsave64 = 1799
NN_fxrstor64 = 1800
NN_last = 1801
_CE7E32CC3E1379FDB2C7D74087D653D3 = ctypes.c_uint32 # enum

# values for enumeration '_D56FBCFBBCE5EB183B3B7533D8D23EB1'
_D56FBCFBBCE5EB183B3B7533D8D23EB1__enumvalues = {
    0: 'I5_null',
    1: 'I5_aci',
    2: 'I5_adc',
    2: 'Z80_adc',
    3: 'I5_add',
    3: 'Z80_add',
    4: 'I5_adi',
    5: 'I5_ana',
    6: 'I5_ani',
    7: 'I5_call',
    8: 'I5_cnz',
    9: 'I5_cz',
    10: 'I5_cnc',
    11: 'I5_cc',
    12: 'I5_cpo',
    13: 'I5_cpe',
    14: 'I5_cp',
    15: 'I5_cm',
    16: 'I5_cmc',
    17: 'I5_cmp',
    18: 'I5_cpi',
    19: 'I5_cma',
    20: 'I5_daa',
    21: 'I5_dad',
    22: 'I5_dcr',
    23: 'I5_dcx',
    24: 'I5_di',
    24: 'Z80_di',
    25: 'I5_ei',
    25: 'Z80_ei',
    26: 'I5_halt',
    27: 'I5_in',
    27: 'Z80_in',
    28: 'I5_inr',
    29: 'I5_inx',
    30: 'I5_jmp',
    31: 'I5_jnz',
    32: 'I5_jz',
    33: 'I5_jnc',
    34: 'I5_jc',
    35: 'I5_jpo',
    36: 'I5_jpe',
    37: 'I5_jp',
    38: 'I5_jm',
    39: 'I5_lda',
    40: 'I5_ldax',
    41: 'I5_lhld',
    42: 'I5_lxi',
    43: 'I5_mov',
    44: 'I5_mvi',
    45: 'I5_nop',
    46: 'I5_ora',
    47: 'I5_ori',
    48: 'I5_out',
    48: 'Z80_out',
    49: 'I5_pchl',
    50: 'I5_pop',
    50: 'Z80_pop',
    51: 'I5_push',
    51: 'Z80_push',
    52: 'I5_ret',
    53: 'I5_rnz',
    54: 'I5_rz',
    55: 'I5_rnc',
    56: 'I5_rc',
    57: 'I5_rpo',
    58: 'I5_rpe',
    59: 'I5_rp',
    60: 'I5_rm',
    61: 'I5_ral',
    62: 'I5_rlc',
    63: 'I5_rar',
    64: 'I5_rrc',
    65: 'I5_rst',
    66: 'I5_sbb',
    67: 'I5_sbi',
    68: 'I5_stc',
    69: 'I5_sphl',
    70: 'I5_sta',
    71: 'I5_stax',
    72: 'I5_shld',
    73: 'I5_sui',
    74: 'I5_sub',
    74: 'Z80_sub',
    75: 'I5_xra',
    76: 'I5_xri',
    77: 'I5_xchg',
    78: 'I5_xthl',
    79: 'I5_rim',
    80: 'I5_sim',
    81: 'Z80_and',
    82: 'Z80_bit',
    83: 'Z80_call',
    84: 'Z80_ccf',
    85: 'Z80_cp',
    86: 'Z80_cpd',
    87: 'Z80_cpdr',
    88: 'Z80_cpi',
    89: 'Z80_cpir',
    90: 'Z80_cpl',
    91: 'Z80_dec',
    92: 'Z80_djnz',
    93: 'Z80_ex',
    94: 'Z80_exx',
    95: 'Z80_halt',
    96: 'Z80_im',
    97: 'Z80_inc',
    98: 'Z80_ind',
    99: 'Z80_indr',
    100: 'Z80_ini',
    101: 'Z80_inir',
    102: 'Z80_jp',
    103: 'Z80_jr',
    104: 'Z80_ld',
    105: 'Z80_ldd',
    106: 'Z80_lddr',
    107: 'Z80_ldi',
    108: 'Z80_ldir',
    109: 'Z80_neg',
    110: 'Z80_or',
    111: 'Z80_otdr',
    112: 'Z80_otir',
    113: 'Z80_outd',
    114: 'Z80_outi',
    115: 'Z80_res',
    116: 'Z80_ret',
    117: 'Z80_reti',
    118: 'Z80_retn',
    119: 'Z80_rl',
    120: 'Z80_rla',
    121: 'Z80_rlc',
    122: 'Z80_rlca',
    123: 'Z80_rld',
    124: 'Z80_rr',
    125: 'Z80_rra',
    126: 'Z80_rrc',
    127: 'Z80_rrca',
    128: 'Z80_rrd',
    129: 'Z80_scf',
    130: 'Z80_sbc',
    131: 'Z80_set',
    132: 'Z80_sla',
    133: 'Z80_sra',
    134: 'Z80_srl',
    135: 'Z80_xor',
    136: 'Z80_inp',
    137: 'Z80_outp',
    138: 'Z80_srr',
    139: 'HD_in0',
    139: 'Z80_in0',
    140: 'HD_mlt',
    140: 'Z80_mlt',
    141: 'HD_otim',
    141: 'Z80_otim',
    142: 'HD_otimr',
    142: 'Z80_otimr',
    143: 'HD_otdm',
    143: 'Z80_otdm',
    144: 'HD_otdmr',
    144: 'Z80_otdmr',
    145: 'HD_out0',
    145: 'Z80_out0',
    146: 'HD_slp',
    146: 'Z80_slp',
    147: 'HD_tst',
    147: 'Z80_tst',
    148: 'HD_tstio',
    148: 'Z80_tstio',
    149: 'A80_lbcd',
    150: 'A80_lded',
    151: 'A80_lspd',
    152: 'A80_lixd',
    153: 'A80_liyd',
    154: 'A80_sbcd',
    155: 'A80_sded',
    156: 'A80_sspd',
    157: 'A80_sixd',
    158: 'A80_siyd',
    159: 'A80_xtix',
    160: 'A80_xtiy',
    161: 'A80_spix',
    162: 'A80_spiy',
    163: 'A80_pcix',
    164: 'A80_pciy',
    165: 'A80_mvra',
    166: 'A80_mvia',
    167: 'A80_mvar',
    168: 'A80_mvai',
    169: 'A80_addix',
    170: 'A80_addiy',
    171: 'A80_addc',
    172: 'A80_addcix',
    173: 'A80_addciy',
    174: 'A80_subc',
    175: 'A80_subcix',
    176: 'A80_subciy',
    177: 'A80_jrc',
    178: 'A80_jrnc',
    179: 'A80_jrz',
    180: 'A80_jrnz',
    181: 'A80_cmpi',
    182: 'A80_cmpd',
    183: 'A80_im0',
    184: 'A80_im1',
    185: 'A80_im2',
    186: 'A80_otd',
    187: 'A80_oti',
    188: 'I5_dsub',
    189: 'I5_arhl',
    190: 'I5_rdel',
    191: 'I5_ldhi',
    192: 'I5_ldsi',
    193: 'I5_shlx',
    194: 'I5_lhlx',
    195: 'I5_rstv',
    196: 'I5_jx5',
    197: 'I5_jnx5',
    198: 'Z80_cplw',
    199: 'Z80_swap',
    200: 'Z80_inw',
    201: 'Z80_outw',
    202: 'Z80_ldw',
    203: 'Z80_addw',
    204: 'Z80_subw',
    205: 'Z80_adcw',
    206: 'Z80_sbcw',
    207: 'Z80_andw',
    208: 'Z80_xorw',
    209: 'Z80_orw',
    210: 'Z80_cpw',
    211: 'Z80_ddir',
    212: 'Z80_calr',
    213: 'Z80_ldctl',
    214: 'Z80_mtest',
    215: 'Z80_exxx',
    216: 'Z80_exxy',
    217: 'Z80_exall',
    218: 'Z80_setc',
    219: 'Z80_resc',
    220: 'Z80_rlcw',
    221: 'Z80_rrcw',
    222: 'Z80_rlw',
    223: 'Z80_rrw',
    224: 'Z80_slaw',
    225: 'Z80_sraw',
    226: 'Z80_srlw',
    227: 'Z80_multw',
    228: 'Z80_multuw',
    229: 'Z80_divuw',
    230: 'Z80_outaw',
    231: 'Z80_inaw',
    232: 'Z80_outa',
    233: 'Z80_ina',
    234: 'Z80_negw',
    235: 'Z80_exts',
    236: 'Z80_extsw',
    237: 'Z80_btest',
    238: 'Z80_ldiw',
    239: 'Z80_ldirw',
    240: 'Z80_lddw',
    241: 'Z80_lddrw',
    242: 'Z80_iniw',
    243: 'Z80_inirw',
    244: 'Z80_indw',
    245: 'Z80_indrw',
    246: 'Z80_outiw',
    247: 'Z80_otirw',
    248: 'Z80_outdw',
    249: 'Z80_otdrw',
    250: 'GB_ldh',
    251: 'GB_stop',
    252: 'I5_last',
}
I5_null = 0
I5_aci = 1
I5_adc = 2
Z80_adc = 2
I5_add = 3
Z80_add = 3
I5_adi = 4
I5_ana = 5
I5_ani = 6
I5_call = 7
I5_cnz = 8
I5_cz = 9
I5_cnc = 10
I5_cc = 11
I5_cpo = 12
I5_cpe = 13
I5_cp = 14
I5_cm = 15
I5_cmc = 16
I5_cmp = 17
I5_cpi = 18
I5_cma = 19
I5_daa = 20
I5_dad = 21
I5_dcr = 22
I5_dcx = 23
I5_di = 24
Z80_di = 24
I5_ei = 25
Z80_ei = 25
I5_halt = 26
I5_in = 27
Z80_in = 27
I5_inr = 28
I5_inx = 29
I5_jmp = 30
I5_jnz = 31
I5_jz = 32
I5_jnc = 33
I5_jc = 34
I5_jpo = 35
I5_jpe = 36
I5_jp = 37
I5_jm = 38
I5_lda = 39
I5_ldax = 40
I5_lhld = 41
I5_lxi = 42
I5_mov = 43
I5_mvi = 44
I5_nop = 45
I5_ora = 46
I5_ori = 47
I5_out = 48
Z80_out = 48
I5_pchl = 49
I5_pop = 50
Z80_pop = 50
I5_push = 51
Z80_push = 51
I5_ret = 52
I5_rnz = 53
I5_rz = 54
I5_rnc = 55
I5_rc = 56
I5_rpo = 57
I5_rpe = 58
I5_rp = 59
I5_rm = 60
I5_ral = 61
I5_rlc = 62
I5_rar = 63
I5_rrc = 64
I5_rst = 65
I5_sbb = 66
I5_sbi = 67
I5_stc = 68
I5_sphl = 69
I5_sta = 70
I5_stax = 71
I5_shld = 72
I5_sui = 73
I5_sub = 74
Z80_sub = 74
I5_xra = 75
I5_xri = 76
I5_xchg = 77
I5_xthl = 78
I5_rim = 79
I5_sim = 80
Z80_and = 81
Z80_bit = 82
Z80_call = 83
Z80_ccf = 84
Z80_cp = 85
Z80_cpd = 86
Z80_cpdr = 87
Z80_cpi = 88
Z80_cpir = 89
Z80_cpl = 90
Z80_dec = 91
Z80_djnz = 92
Z80_ex = 93
Z80_exx = 94
Z80_halt = 95
Z80_im = 96
Z80_inc = 97
Z80_ind = 98
Z80_indr = 99
Z80_ini = 100
Z80_inir = 101
Z80_jp = 102
Z80_jr = 103
Z80_ld = 104
Z80_ldd = 105
Z80_lddr = 106
Z80_ldi = 107
Z80_ldir = 108
Z80_neg = 109
Z80_or = 110
Z80_otdr = 111
Z80_otir = 112
Z80_outd = 113
Z80_outi = 114
Z80_res = 115
Z80_ret = 116
Z80_reti = 117
Z80_retn = 118
Z80_rl = 119
Z80_rla = 120
Z80_rlc = 121
Z80_rlca = 122
Z80_rld = 123
Z80_rr = 124
Z80_rra = 125
Z80_rrc = 126
Z80_rrca = 127
Z80_rrd = 128
Z80_scf = 129
Z80_sbc = 130
Z80_set = 131
Z80_sla = 132
Z80_sra = 133
Z80_srl = 134
Z80_xor = 135
Z80_inp = 136
Z80_outp = 137
Z80_srr = 138
HD_in0 = 139
Z80_in0 = 139
HD_mlt = 140
Z80_mlt = 140
HD_otim = 141
Z80_otim = 141
HD_otimr = 142
Z80_otimr = 142
HD_otdm = 143
Z80_otdm = 143
HD_otdmr = 144
Z80_otdmr = 144
HD_out0 = 145
Z80_out0 = 145
HD_slp = 146
Z80_slp = 146
HD_tst = 147
Z80_tst = 147
HD_tstio = 148
Z80_tstio = 148
A80_lbcd = 149
A80_lded = 150
A80_lspd = 151
A80_lixd = 152
A80_liyd = 153
A80_sbcd = 154
A80_sded = 155
A80_sspd = 156
A80_sixd = 157
A80_siyd = 158
A80_xtix = 159
A80_xtiy = 160
A80_spix = 161
A80_spiy = 162
A80_pcix = 163
A80_pciy = 164
A80_mvra = 165
A80_mvia = 166
A80_mvar = 167
A80_mvai = 168
A80_addix = 169
A80_addiy = 170
A80_addc = 171
A80_addcix = 172
A80_addciy = 173
A80_subc = 174
A80_subcix = 175
A80_subciy = 176
A80_jrc = 177
A80_jrnc = 178
A80_jrz = 179
A80_jrnz = 180
A80_cmpi = 181
A80_cmpd = 182
A80_im0 = 183
A80_im1 = 184
A80_im2 = 185
A80_otd = 186
A80_oti = 187
I5_dsub = 188
I5_arhl = 189
I5_rdel = 190
I5_ldhi = 191
I5_ldsi = 192
I5_shlx = 193
I5_lhlx = 194
I5_rstv = 195
I5_jx5 = 196
I5_jnx5 = 197
Z80_cplw = 198
Z80_swap = 199
Z80_inw = 200
Z80_outw = 201
Z80_ldw = 202
Z80_addw = 203
Z80_subw = 204
Z80_adcw = 205
Z80_sbcw = 206
Z80_andw = 207
Z80_xorw = 208
Z80_orw = 209
Z80_cpw = 210
Z80_ddir = 211
Z80_calr = 212
Z80_ldctl = 213
Z80_mtest = 214
Z80_exxx = 215
Z80_exxy = 216
Z80_exall = 217
Z80_setc = 218
Z80_resc = 219
Z80_rlcw = 220
Z80_rrcw = 221
Z80_rlw = 222
Z80_rrw = 223
Z80_slaw = 224
Z80_sraw = 225
Z80_srlw = 226
Z80_multw = 227
Z80_multuw = 228
Z80_divuw = 229
Z80_outaw = 230
Z80_inaw = 231
Z80_outa = 232
Z80_ina = 233
Z80_negw = 234
Z80_exts = 235
Z80_extsw = 236
Z80_btest = 237
Z80_ldiw = 238
Z80_ldirw = 239
Z80_lddw = 240
Z80_lddrw = 241
Z80_iniw = 242
Z80_inirw = 243
Z80_indw = 244
Z80_indrw = 245
Z80_outiw = 246
Z80_otirw = 247
Z80_outdw = 248
Z80_otdrw = 249
GB_ldh = 250
GB_stop = 251
I5_last = 252
_D56FBCFBBCE5EB183B3B7533D8D23EB1 = ctypes.c_uint32 # enum

# values for enumeration '_C46A069ECCBAC5339B2B9C1238DA1DE1'
_C46A069ECCBAC5339B2B9C1238DA1DE1__enumvalues = {
    0: 'I860_null',
    1: 'I860_adds',
    2: 'I860_addu',
    3: 'I860_and',
    4: 'I860_andh',
    5: 'I860_andnot',
    6: 'I860_andnoth',
    7: 'I860_bc',
    8: 'I860_bc_t',
    9: 'I860_bla',
    10: 'I860_bnc',
    11: 'I860_bnc_t',
    12: 'I860_br',
    13: 'I860_bri',
    14: 'I860_bte',
    15: 'I860_btne',
    16: 'I860_call',
    17: 'I860_calli',
    18: 'I860_fadd',
    19: 'I860_faddp',
    20: 'I860_faddz',
    21: 'I860_famov',
    22: 'I860_fiadd',
    23: 'I860_fisub',
    24: 'I860_fix',
    25: 'I860_fld',
    26: 'I860_flush',
    27: 'I860_fmlow_dd',
    28: 'I860_fmul',
    29: 'I860_form',
    30: 'I860_frcp',
    31: 'I860_frsqr',
    32: 'I860_fst',
    33: 'I860_fsub',
    34: 'I860_ftrunc',
    35: 'I860_fxfr',
    36: 'I860_fzchkl',
    37: 'I860_fzchks',
    38: 'I860_introvr',
    39: 'I860_ixfr',
    40: 'I860_ld_c',
    41: 'I860_ld',
    42: 'I860_ldint',
    43: 'I860_ldio',
    44: 'I860_lock',
    45: 'I860_or',
    46: 'I860_orh',
    47: 'I860_pfadd',
    48: 'I860_pfaddp',
    49: 'I860_pfaddz',
    50: 'I860_pfamov',
    51: 'I860_pfeq',
    52: 'I860_pfgt',
    53: 'I860_pfiadd',
    54: 'I860_pfisub',
    55: 'I860_pfix',
    56: 'I860_pfld',
    57: 'I860_pfle',
    58: 'I860_pfmul',
    59: 'I860_pfmul3_dd',
    60: 'I860_pform',
    61: 'I860_pfsub',
    62: 'I860_pftrunc',
    63: 'I860_pfzchkl',
    64: 'I860_pfzchks',
    65: 'I860_pst_d',
    66: 'I860_scyc',
    67: 'I860_shl',
    68: 'I860_shr',
    69: 'I860_shra',
    70: 'I860_shrd',
    71: 'I860_st_c',
    72: 'I860_st',
    73: 'I860_stio',
    74: 'I860_subs',
    75: 'I860_subu',
    76: 'I860_trap',
    77: 'I860_unlock',
    78: 'I860_xor',
    79: 'I860_xorh',
    80: 'I860_r2p1',
    81: 'I860_r2pt',
    82: 'I860_r2ap1',
    83: 'I860_r2apt',
    84: 'I860_i2p1',
    85: 'I860_i2pt',
    86: 'I860_i2ap1',
    87: 'I860_i2apt',
    88: 'I860_rat1p2',
    89: 'I860_m12apm',
    90: 'I860_ra1p2',
    91: 'I860_m12ttpa',
    92: 'I860_iat1p2',
    93: 'I860_m12tpm',
    94: 'I860_ia1p2',
    95: 'I860_m12tpa',
    96: 'I860_r2s1',
    97: 'I860_r2st',
    98: 'I860_r2as1',
    99: 'I860_r2ast',
    100: 'I860_i2s1',
    101: 'I860_i2st',
    102: 'I860_i2as1',
    103: 'I860_i2ast',
    104: 'I860_rat1s2',
    105: 'I860_m12asm',
    106: 'I860_ra1s2',
    107: 'I860_m12ttsa',
    108: 'I860_iat1s2',
    109: 'I860_m12tsm',
    110: 'I860_ia1s2',
    111: 'I860_m12tsa',
    112: 'I860_mr2p1',
    113: 'I860_mr2pt',
    114: 'I860_mr2mp1',
    115: 'I860_mr2mpt',
    116: 'I860_mi2p1',
    117: 'I860_mi2pt',
    118: 'I860_mi2mp1',
    119: 'I860_mi2mpt',
    120: 'I860_mrmt1p2',
    121: 'I860_mm12mpm',
    122: 'I860_mrm1p2',
    123: 'I860_mm12ttpm',
    124: 'I860_mimt1p2',
    125: 'I860_mm12tpm',
    126: 'I860_mim1p2',
    127: 'I860_mr2s1',
    128: 'I860_mr2st',
    129: 'I860_mr2ms1',
    130: 'I860_mr2mst',
    131: 'I860_mi2s1',
    132: 'I860_mi2st',
    133: 'I860_mi2ms1',
    134: 'I860_mi2mst',
    135: 'I860_mrmt1s2',
    136: 'I860_mm12msm',
    137: 'I860_mrm1s2',
    138: 'I860_mm12ttsm',
    139: 'I860_mimt1s2',
    140: 'I860_mm12tsm',
    141: 'I860_mim1s2',
    142: 'I860_last',
}
I860_null = 0
I860_adds = 1
I860_addu = 2
I860_and = 3
I860_andh = 4
I860_andnot = 5
I860_andnoth = 6
I860_bc = 7
I860_bc_t = 8
I860_bla = 9
I860_bnc = 10
I860_bnc_t = 11
I860_br = 12
I860_bri = 13
I860_bte = 14
I860_btne = 15
I860_call = 16
I860_calli = 17
I860_fadd = 18
I860_faddp = 19
I860_faddz = 20
I860_famov = 21
I860_fiadd = 22
I860_fisub = 23
I860_fix = 24
I860_fld = 25
I860_flush = 26
I860_fmlow_dd = 27
I860_fmul = 28
I860_form = 29
I860_frcp = 30
I860_frsqr = 31
I860_fst = 32
I860_fsub = 33
I860_ftrunc = 34
I860_fxfr = 35
I860_fzchkl = 36
I860_fzchks = 37
I860_introvr = 38
I860_ixfr = 39
I860_ld_c = 40
I860_ld = 41
I860_ldint = 42
I860_ldio = 43
I860_lock = 44
I860_or = 45
I860_orh = 46
I860_pfadd = 47
I860_pfaddp = 48
I860_pfaddz = 49
I860_pfamov = 50
I860_pfeq = 51
I860_pfgt = 52
I860_pfiadd = 53
I860_pfisub = 54
I860_pfix = 55
I860_pfld = 56
I860_pfle = 57
I860_pfmul = 58
I860_pfmul3_dd = 59
I860_pform = 60
I860_pfsub = 61
I860_pftrunc = 62
I860_pfzchkl = 63
I860_pfzchks = 64
I860_pst_d = 65
I860_scyc = 66
I860_shl = 67
I860_shr = 68
I860_shra = 69
I860_shrd = 70
I860_st_c = 71
I860_st = 72
I860_stio = 73
I860_subs = 74
I860_subu = 75
I860_trap = 76
I860_unlock = 77
I860_xor = 78
I860_xorh = 79
I860_r2p1 = 80
I860_r2pt = 81
I860_r2ap1 = 82
I860_r2apt = 83
I860_i2p1 = 84
I860_i2pt = 85
I860_i2ap1 = 86
I860_i2apt = 87
I860_rat1p2 = 88
I860_m12apm = 89
I860_ra1p2 = 90
I860_m12ttpa = 91
I860_iat1p2 = 92
I860_m12tpm = 93
I860_ia1p2 = 94
I860_m12tpa = 95
I860_r2s1 = 96
I860_r2st = 97
I860_r2as1 = 98
I860_r2ast = 99
I860_i2s1 = 100
I860_i2st = 101
I860_i2as1 = 102
I860_i2ast = 103
I860_rat1s2 = 104
I860_m12asm = 105
I860_ra1s2 = 106
I860_m12ttsa = 107
I860_iat1s2 = 108
I860_m12tsm = 109
I860_ia1s2 = 110
I860_m12tsa = 111
I860_mr2p1 = 112
I860_mr2pt = 113
I860_mr2mp1 = 114
I860_mr2mpt = 115
I860_mi2p1 = 116
I860_mi2pt = 117
I860_mi2mp1 = 118
I860_mi2mpt = 119
I860_mrmt1p2 = 120
I860_mm12mpm = 121
I860_mrm1p2 = 122
I860_mm12ttpm = 123
I860_mimt1p2 = 124
I860_mm12tpm = 125
I860_mim1p2 = 126
I860_mr2s1 = 127
I860_mr2st = 128
I860_mr2ms1 = 129
I860_mr2mst = 130
I860_mi2s1 = 131
I860_mi2st = 132
I860_mi2ms1 = 133
I860_mi2mst = 134
I860_mrmt1s2 = 135
I860_mm12msm = 136
I860_mrm1s2 = 137
I860_mm12ttsm = 138
I860_mimt1s2 = 139
I860_mm12tsm = 140
I860_mim1s2 = 141
I860_last = 142
_C46A069ECCBAC5339B2B9C1238DA1DE1 = ctypes.c_uint32 # enum

# values for enumeration '_32AE0FC8A9D5CBD75CD8A50945F15FCA'
_32AE0FC8A9D5CBD75CD8A50945F15FCA__enumvalues = {
    0: 'I51_null',
    1: 'I51_acall',
    2: 'I51_add',
    3: 'I51_addc',
    4: 'I51_ajmp',
    5: 'I51_anl',
    6: 'I51_cjne',
    7: 'I51_clr',
    8: 'I51_cpl',
    9: 'I51_da',
    10: 'I51_dec',
    11: 'I51_div',
    12: 'I51_djnz',
    13: 'I51_inc',
    14: 'I51_jb',
    15: 'I51_jbc',
    16: 'I51_jc',
    17: 'I51_jmp',
    18: 'I51_jnb',
    19: 'I51_jnc',
    20: 'I51_jnz',
    21: 'I51_jz',
    22: 'I51_lcall',
    23: 'I51_ljmp',
    24: 'I51_mov',
    25: 'I51_movc',
    26: 'I51_movx',
    27: 'I51_mul',
    28: 'I51_nop',
    29: 'I51_orl',
    30: 'I51_pop',
    31: 'I51_push',
    32: 'I51_ret',
    33: 'I51_reti',
    34: 'I51_rl',
    35: 'I51_rlc',
    36: 'I51_rr',
    37: 'I51_rrc',
    38: 'I51_setb',
    39: 'I51_sjmp',
    40: 'I51_subb',
    41: 'I51_swap',
    42: 'I51_xch',
    43: 'I51_xchd',
    44: 'I51_xrl',
    45: 'I51_jsle',
    46: 'I51_jsg',
    47: 'I51_jle',
    48: 'I51_jg',
    49: 'I51_jsl',
    50: 'I51_jsge',
    51: 'I51_je',
    52: 'I51_jne',
    53: 'I51_trap',
    54: 'I51_ejmp',
    55: 'I51_ecall',
    56: 'I51_eret',
    57: 'I51_movh',
    58: 'I51_movz',
    59: 'I51_movs',
    60: 'I51_srl',
    61: 'I51_sra',
    62: 'I51_sll',
    63: 'I51_sub',
    64: 'I51_cmp',
    65: 'I51_emov',
    66: 'I51_last',
}
I51_null = 0
I51_acall = 1
I51_add = 2
I51_addc = 3
I51_ajmp = 4
I51_anl = 5
I51_cjne = 6
I51_clr = 7
I51_cpl = 8
I51_da = 9
I51_dec = 10
I51_div = 11
I51_djnz = 12
I51_inc = 13
I51_jb = 14
I51_jbc = 15
I51_jc = 16
I51_jmp = 17
I51_jnb = 18
I51_jnc = 19
I51_jnz = 20
I51_jz = 21
I51_lcall = 22
I51_ljmp = 23
I51_mov = 24
I51_movc = 25
I51_movx = 26
I51_mul = 27
I51_nop = 28
I51_orl = 29
I51_pop = 30
I51_push = 31
I51_ret = 32
I51_reti = 33
I51_rl = 34
I51_rlc = 35
I51_rr = 36
I51_rrc = 37
I51_setb = 38
I51_sjmp = 39
I51_subb = 40
I51_swap = 41
I51_xch = 42
I51_xchd = 43
I51_xrl = 44
I51_jsle = 45
I51_jsg = 46
I51_jle = 47
I51_jg = 48
I51_jsl = 49
I51_jsge = 50
I51_je = 51
I51_jne = 52
I51_trap = 53
I51_ejmp = 54
I51_ecall = 55
I51_eret = 56
I51_movh = 57
I51_movz = 58
I51_movs = 59
I51_srl = 60
I51_sra = 61
I51_sll = 62
I51_sub = 63
I51_cmp = 64
I51_emov = 65
I51_last = 66
_32AE0FC8A9D5CBD75CD8A50945F15FCA = ctypes.c_uint32 # enum

# values for enumeration '_16DB410077B9C880BC0DBFDD6BC1DE27'
_16DB410077B9C880BC0DBFDD6BC1DE27__enumvalues = {
    0: 'TMS_null',
    1: 'TMS_abs',
    2: 'TMS_adcb',
    3: 'TMS_add',
    4: 'TMS_addb',
    5: 'TMS_addc',
    6: 'TMS_adds',
    7: 'TMS_addt',
    8: 'TMS_adrk',
    9: 'TMS_and',
    10: 'TMS_andb',
    11: 'TMS_apac',
    12: 'TMS_apl',
    13: 'TMS_apl2',
    14: 'TMS_b',
    15: 'TMS_bacc',
    16: 'TMS_baccd',
    17: 'TMS_banz',
    18: 'TMS_banzd',
    19: 'TMS_bcnd',
    20: 'TMS_bcndd',
    21: 'TMS_bd',
    22: 'TMS_bit',
    23: 'TMS_bitt',
    24: 'TMS_bldd',
    25: 'TMS_bldp',
    26: 'TMS_blpd',
    27: 'TMS_bsar',
    28: 'TMS_cala',
    29: 'TMS_calad',
    30: 'TMS_call',
    31: 'TMS_calld',
    32: 'TMS_cc',
    33: 'TMS_ccd',
    34: 'TMS_clrc',
    35: 'TMS_cmpl',
    36: 'TMS_cmpr',
    37: 'TMS_cpl',
    38: 'TMS_cpl2',
    39: 'TMS_crgt',
    40: 'TMS_crlt',
    41: 'TMS_dmov',
    42: 'TMS_estop',
    43: 'TMS_exar',
    44: 'TMS_idle',
    45: 'TMS_idle2',
    46: 'TMS_in',
    47: 'TMS_intr',
    48: 'TMS_lacb',
    49: 'TMS_lacc',
    50: 'TMS_lacl',
    51: 'TMS_lact',
    52: 'TMS_lamm',
    53: 'TMS_lar',
    54: 'TMS_ldp',
    55: 'TMS_lmmr',
    56: 'TMS_lph',
    57: 'TMS_lst',
    58: 'TMS_lt',
    59: 'TMS_lta',
    60: 'TMS_ltd',
    61: 'TMS_ltp',
    62: 'TMS_lts',
    63: 'TMS_mac',
    64: 'TMS_macd',
    65: 'TMS_madd',
    66: 'TMS_mads',
    67: 'TMS_mar',
    68: 'TMS_mpy',
    69: 'TMS_mpya',
    70: 'TMS_mpys',
    71: 'TMS_mpyu',
    72: 'TMS_neg',
    73: 'TMS_nmi',
    74: 'TMS_nop',
    75: 'TMS_norm',
    76: 'TMS_opl',
    77: 'TMS_opl2',
    78: 'TMS_or',
    79: 'TMS_orb',
    80: 'TMS_out',
    81: 'TMS_pac',
    82: 'TMS_pop',
    83: 'TMS_popd',
    84: 'TMS_pshd',
    85: 'TMS_push',
    86: 'TMS_ret',
    87: 'TMS_retc',
    88: 'TMS_retcd',
    89: 'TMS_retd',
    90: 'TMS_rete',
    91: 'TMS_reti',
    92: 'TMS_rol',
    93: 'TMS_rolb',
    94: 'TMS_ror',
    95: 'TMS_rorb',
    96: 'TMS_rpt',
    97: 'TMS_rptb',
    98: 'TMS_rptz',
    99: 'TMS_sacb',
    100: 'TMS_sach',
    101: 'TMS_sacl',
    102: 'TMS_samm',
    103: 'TMS_sar',
    104: 'TMS_sath',
    105: 'TMS_satl',
    106: 'TMS_sbb',
    107: 'TMS_sbbb',
    108: 'TMS_sbrk',
    109: 'TMS_setc',
    110: 'TMS_sfl',
    111: 'TMS_sflb',
    112: 'TMS_sfr',
    113: 'TMS_sfrb',
    114: 'TMS_smmr',
    115: 'TMS_spac',
    116: 'TMS_sph',
    117: 'TMS_spl',
    118: 'TMS_splk',
    119: 'TMS_spm',
    120: 'TMS_sqra',
    121: 'TMS_sqrs',
    122: 'TMS_sst',
    123: 'TMS_sub',
    124: 'TMS_subb',
    125: 'TMS_subc',
    126: 'TMS_subs',
    127: 'TMS_subt',
    128: 'TMS_tblr',
    129: 'TMS_tblw',
    130: 'TMS_trap',
    131: 'TMS_xc',
    132: 'TMS_xor',
    133: 'TMS_xorb',
    134: 'TMS_xpl',
    135: 'TMS_xpl2',
    136: 'TMS_zalr',
    137: 'TMS_zap',
    138: 'TMS_zpr',
    139: 'TMS2_abs',
    140: 'TMS2_add',
    141: 'TMS2_addc',
    142: 'TMS2_addh',
    143: 'TMS2_addk',
    144: 'TMS2_adds',
    145: 'TMS2_addt',
    146: 'TMS2_adlk',
    147: 'TMS2_adrk',
    148: 'TMS2_and',
    149: 'TMS2_andk',
    150: 'TMS2_apac',
    151: 'TMS2_b',
    152: 'TMS2_bacc',
    153: 'TMS2_banz',
    154: 'TMS2_bbnz',
    155: 'TMS2_bbz',
    156: 'TMS2_bc',
    157: 'TMS2_bgez',
    158: 'TMS2_bgz',
    159: 'TMS2_bioz',
    160: 'TMS2_bit',
    161: 'TMS2_bitt',
    162: 'TMS2_blez',
    163: 'TMS2_blkd',
    164: 'TMS2_blkp',
    165: 'TMS2_blz',
    166: 'TMS2_bnc',
    167: 'TMS2_bnv',
    168: 'TMS2_bnz',
    169: 'TMS2_bv',
    170: 'TMS2_bz',
    171: 'TMS2_cala',
    172: 'TMS2_call',
    173: 'TMS2_cmpl',
    174: 'TMS2_cmpr',
    175: 'TMS2_cnfd',
    176: 'TMS2_cnfp',
    177: 'TMS2_conf',
    178: 'TMS2_dint',
    179: 'TMS2_dmov',
    180: 'TMS2_eint',
    181: 'TMS2_fort',
    182: 'TMS2_idle',
    183: 'TMS2_in',
    184: 'TMS2_lac',
    185: 'TMS2_lack',
    186: 'TMS2_lact',
    187: 'TMS2_lalk',
    188: 'TMS2_lar',
    189: 'TMS2_lark',
    190: 'TMS2_larp',
    191: 'TMS2_ldp',
    192: 'TMS2_ldpk',
    193: 'TMS2_lph',
    194: 'TMS2_lrlk',
    195: 'TMS2_lst',
    196: 'TMS2_lst1',
    197: 'TMS2_lt',
    198: 'TMS2_lta',
    199: 'TMS2_ltd',
    200: 'TMS2_ltp',
    201: 'TMS2_lts',
    202: 'TMS2_mac',
    203: 'TMS2_macd',
    204: 'TMS2_mar',
    205: 'TMS2_mpy',
    206: 'TMS2_mpya',
    207: 'TMS2_mpyk',
    208: 'TMS2_mpys',
    209: 'TMS2_mpyu',
    210: 'TMS2_neg',
    211: 'TMS2_nop',
    212: 'TMS2_norm',
    213: 'TMS2_or',
    214: 'TMS2_ork',
    215: 'TMS2_out',
    216: 'TMS2_pac',
    217: 'TMS2_pop',
    218: 'TMS2_popd',
    219: 'TMS2_pshd',
    220: 'TMS2_push',
    221: 'TMS2_rc',
    222: 'TMS2_ret',
    223: 'TMS2_rfsm',
    224: 'TMS2_rhm',
    225: 'TMS2_rol',
    226: 'TMS2_ror',
    227: 'TMS2_rovm',
    228: 'TMS2_rpt',
    229: 'TMS2_rptk',
    230: 'TMS2_rsxm',
    231: 'TMS2_rtc',
    232: 'TMS2_rtxm',
    233: 'TMS2_rxf',
    234: 'TMS2_sach',
    235: 'TMS2_sacl',
    236: 'TMS2_sar',
    237: 'TMS2_sblk',
    238: 'TMS2_sbrk',
    239: 'TMS2_sc',
    240: 'TMS2_sfl',
    241: 'TMS2_sfr',
    242: 'TMS2_sfsm',
    243: 'TMS2_shm',
    244: 'TMS2_sovm',
    245: 'TMS2_spac',
    246: 'TMS2_sph',
    247: 'TMS2_spl',
    248: 'TMS2_spm',
    249: 'TMS2_sqra',
    250: 'TMS2_sqrs',
    251: 'TMS2_sst',
    252: 'TMS2_sst1',
    253: 'TMS2_ssxm',
    254: 'TMS2_stc',
    255: 'TMS2_stxm',
    256: 'TMS2_sub',
    257: 'TMS2_subb',
    258: 'TMS2_subc',
    259: 'TMS2_subh',
    260: 'TMS2_subk',
    261: 'TMS2_subs',
    262: 'TMS2_subt',
    263: 'TMS2_sxf',
    264: 'TMS2_tblr',
    265: 'TMS2_tblw',
    266: 'TMS2_trap',
    267: 'TMS2_xor',
    268: 'TMS2_xork',
    269: 'TMS2_zac',
    270: 'TMS2_zalh',
    271: 'TMS2_zalr',
    272: 'TMS2_zals',
    273: 'TMS_last',
}
TMS_null = 0
TMS_abs = 1
TMS_adcb = 2
TMS_add = 3
TMS_addb = 4
TMS_addc = 5
TMS_adds = 6
TMS_addt = 7
TMS_adrk = 8
TMS_and = 9
TMS_andb = 10
TMS_apac = 11
TMS_apl = 12
TMS_apl2 = 13
TMS_b = 14
TMS_bacc = 15
TMS_baccd = 16
TMS_banz = 17
TMS_banzd = 18
TMS_bcnd = 19
TMS_bcndd = 20
TMS_bd = 21
TMS_bit = 22
TMS_bitt = 23
TMS_bldd = 24
TMS_bldp = 25
TMS_blpd = 26
TMS_bsar = 27
TMS_cala = 28
TMS_calad = 29
TMS_call = 30
TMS_calld = 31
TMS_cc = 32
TMS_ccd = 33
TMS_clrc = 34
TMS_cmpl = 35
TMS_cmpr = 36
TMS_cpl = 37
TMS_cpl2 = 38
TMS_crgt = 39
TMS_crlt = 40
TMS_dmov = 41
TMS_estop = 42
TMS_exar = 43
TMS_idle = 44
TMS_idle2 = 45
TMS_in = 46
TMS_intr = 47
TMS_lacb = 48
TMS_lacc = 49
TMS_lacl = 50
TMS_lact = 51
TMS_lamm = 52
TMS_lar = 53
TMS_ldp = 54
TMS_lmmr = 55
TMS_lph = 56
TMS_lst = 57
TMS_lt = 58
TMS_lta = 59
TMS_ltd = 60
TMS_ltp = 61
TMS_lts = 62
TMS_mac = 63
TMS_macd = 64
TMS_madd = 65
TMS_mads = 66
TMS_mar = 67
TMS_mpy = 68
TMS_mpya = 69
TMS_mpys = 70
TMS_mpyu = 71
TMS_neg = 72
TMS_nmi = 73
TMS_nop = 74
TMS_norm = 75
TMS_opl = 76
TMS_opl2 = 77
TMS_or = 78
TMS_orb = 79
TMS_out = 80
TMS_pac = 81
TMS_pop = 82
TMS_popd = 83
TMS_pshd = 84
TMS_push = 85
TMS_ret = 86
TMS_retc = 87
TMS_retcd = 88
TMS_retd = 89
TMS_rete = 90
TMS_reti = 91
TMS_rol = 92
TMS_rolb = 93
TMS_ror = 94
TMS_rorb = 95
TMS_rpt = 96
TMS_rptb = 97
TMS_rptz = 98
TMS_sacb = 99
TMS_sach = 100
TMS_sacl = 101
TMS_samm = 102
TMS_sar = 103
TMS_sath = 104
TMS_satl = 105
TMS_sbb = 106
TMS_sbbb = 107
TMS_sbrk = 108
TMS_setc = 109
TMS_sfl = 110
TMS_sflb = 111
TMS_sfr = 112
TMS_sfrb = 113
TMS_smmr = 114
TMS_spac = 115
TMS_sph = 116
TMS_spl = 117
TMS_splk = 118
TMS_spm = 119
TMS_sqra = 120
TMS_sqrs = 121
TMS_sst = 122
TMS_sub = 123
TMS_subb = 124
TMS_subc = 125
TMS_subs = 126
TMS_subt = 127
TMS_tblr = 128
TMS_tblw = 129
TMS_trap = 130
TMS_xc = 131
TMS_xor = 132
TMS_xorb = 133
TMS_xpl = 134
TMS_xpl2 = 135
TMS_zalr = 136
TMS_zap = 137
TMS_zpr = 138
TMS2_abs = 139
TMS2_add = 140
TMS2_addc = 141
TMS2_addh = 142
TMS2_addk = 143
TMS2_adds = 144
TMS2_addt = 145
TMS2_adlk = 146
TMS2_adrk = 147
TMS2_and = 148
TMS2_andk = 149
TMS2_apac = 150
TMS2_b = 151
TMS2_bacc = 152
TMS2_banz = 153
TMS2_bbnz = 154
TMS2_bbz = 155
TMS2_bc = 156
TMS2_bgez = 157
TMS2_bgz = 158
TMS2_bioz = 159
TMS2_bit = 160
TMS2_bitt = 161
TMS2_blez = 162
TMS2_blkd = 163
TMS2_blkp = 164
TMS2_blz = 165
TMS2_bnc = 166
TMS2_bnv = 167
TMS2_bnz = 168
TMS2_bv = 169
TMS2_bz = 170
TMS2_cala = 171
TMS2_call = 172
TMS2_cmpl = 173
TMS2_cmpr = 174
TMS2_cnfd = 175
TMS2_cnfp = 176
TMS2_conf = 177
TMS2_dint = 178
TMS2_dmov = 179
TMS2_eint = 180
TMS2_fort = 181
TMS2_idle = 182
TMS2_in = 183
TMS2_lac = 184
TMS2_lack = 185
TMS2_lact = 186
TMS2_lalk = 187
TMS2_lar = 188
TMS2_lark = 189
TMS2_larp = 190
TMS2_ldp = 191
TMS2_ldpk = 192
TMS2_lph = 193
TMS2_lrlk = 194
TMS2_lst = 195
TMS2_lst1 = 196
TMS2_lt = 197
TMS2_lta = 198
TMS2_ltd = 199
TMS2_ltp = 200
TMS2_lts = 201
TMS2_mac = 202
TMS2_macd = 203
TMS2_mar = 204
TMS2_mpy = 205
TMS2_mpya = 206
TMS2_mpyk = 207
TMS2_mpys = 208
TMS2_mpyu = 209
TMS2_neg = 210
TMS2_nop = 211
TMS2_norm = 212
TMS2_or = 213
TMS2_ork = 214
TMS2_out = 215
TMS2_pac = 216
TMS2_pop = 217
TMS2_popd = 218
TMS2_pshd = 219
TMS2_push = 220
TMS2_rc = 221
TMS2_ret = 222
TMS2_rfsm = 223
TMS2_rhm = 224
TMS2_rol = 225
TMS2_ror = 226
TMS2_rovm = 227
TMS2_rpt = 228
TMS2_rptk = 229
TMS2_rsxm = 230
TMS2_rtc = 231
TMS2_rtxm = 232
TMS2_rxf = 233
TMS2_sach = 234
TMS2_sacl = 235
TMS2_sar = 236
TMS2_sblk = 237
TMS2_sbrk = 238
TMS2_sc = 239
TMS2_sfl = 240
TMS2_sfr = 241
TMS2_sfsm = 242
TMS2_shm = 243
TMS2_sovm = 244
TMS2_spac = 245
TMS2_sph = 246
TMS2_spl = 247
TMS2_spm = 248
TMS2_sqra = 249
TMS2_sqrs = 250
TMS2_sst = 251
TMS2_sst1 = 252
TMS2_ssxm = 253
TMS2_stc = 254
TMS2_stxm = 255
TMS2_sub = 256
TMS2_subb = 257
TMS2_subc = 258
TMS2_subh = 259
TMS2_subk = 260
TMS2_subs = 261
TMS2_subt = 262
TMS2_sxf = 263
TMS2_tblr = 264
TMS2_tblw = 265
TMS2_trap = 266
TMS2_xor = 267
TMS2_xork = 268
TMS2_zac = 269
TMS2_zalh = 270
TMS2_zalr = 271
TMS2_zals = 272
TMS_last = 273
_16DB410077B9C880BC0DBFDD6BC1DE27 = ctypes.c_uint32 # enum

# values for enumeration '_6FFF11F2835D0DC88B7A63E751D57F89'
_6FFF11F2835D0DC88B7A63E751D57F89__enumvalues = {
    0: 'M65_null',
    1: 'M65_adc',
    2: 'M65_anc',
    3: 'M65_and',
    4: 'M65_ane',
    5: 'M65_arr',
    6: 'M65_asl',
    7: 'M65_asr',
    8: 'M65_bcc',
    9: 'M65_bcs',
    10: 'M65_beq',
    11: 'M65_bit',
    12: 'M65_bmi',
    13: 'M65_bne',
    14: 'M65_bpl',
    15: 'M65_brk',
    16: 'M65_bvc',
    17: 'M65_bvs',
    18: 'M65_clc',
    19: 'M65_cld',
    20: 'M65_cli',
    21: 'M65_clv',
    22: 'M65_cmp',
    23: 'M65_cpx',
    24: 'M65_cpy',
    25: 'M65_dcp',
    26: 'M65_dec',
    27: 'M65_dex',
    28: 'M65_dey',
    29: 'M65_eor',
    30: 'M65_inc',
    31: 'M65_inx',
    32: 'M65_iny',
    33: 'M65_isb',
    34: 'M65_jmp',
    35: 'M65_jmpi',
    36: 'M65_jsr',
    37: 'M65_lae',
    38: 'M65_lax',
    39: 'M65_lda',
    40: 'M65_ldx',
    41: 'M65_ldy',
    42: 'M65_lsr',
    43: 'M65_lxa',
    44: 'M65_nop',
    45: 'M65_ora',
    46: 'M65_pha',
    47: 'M65_php',
    48: 'M65_pla',
    49: 'M65_plp',
    50: 'M65_rla',
    51: 'M65_rol',
    52: 'M65_ror',
    53: 'M65_rra',
    54: 'M65_rti',
    55: 'M65_rts',
    56: 'M65_sax',
    57: 'M65_sbc',
    58: 'M65_sbx',
    59: 'M65_sec',
    60: 'M65_sed',
    61: 'M65_sei',
    62: 'M65_sha',
    63: 'M65_shs',
    64: 'M65_shx',
    65: 'M65_shy',
    66: 'M65_slo',
    67: 'M65_sre',
    68: 'M65_sta',
    69: 'M65_stx',
    70: 'M65_sty',
    71: 'M65_tax',
    72: 'M65_tay',
    73: 'M65_tsx',
    74: 'M65_txa',
    75: 'M65_txs',
    76: 'M65_tya',
    77: 'M65_bbr0',
    78: 'M65_bbr1',
    79: 'M65_bbr2',
    80: 'M65_bbr3',
    81: 'M65_bbr4',
    82: 'M65_bbr5',
    83: 'M65_bbr6',
    84: 'M65_bbr7',
    85: 'M65_bbs0',
    86: 'M65_bbs1',
    87: 'M65_bbs2',
    88: 'M65_bbs3',
    89: 'M65_bbs4',
    90: 'M65_bbs5',
    91: 'M65_bbs6',
    92: 'M65_bbs7',
    93: 'M65_rmb0',
    94: 'M65_rmb1',
    95: 'M65_rmb2',
    96: 'M65_rmb3',
    97: 'M65_rmb4',
    98: 'M65_rmb5',
    99: 'M65_rmb6',
    100: 'M65_rmb7',
    101: 'M65_smb0',
    102: 'M65_smb1',
    103: 'M65_smb2',
    104: 'M65_smb3',
    105: 'M65_smb4',
    106: 'M65_smb5',
    107: 'M65_smb6',
    108: 'M65_smb7',
    109: 'M65_stz',
    110: 'M65_tsb',
    111: 'M65_trb',
    112: 'M65_phy',
    113: 'M65_ply',
    114: 'M65_phx',
    115: 'M65_plx',
    116: 'M65_bra',
    117: 'M65_wai',
    118: 'M65_stp',
    119: 'M65_last',
}
M65_null = 0
M65_adc = 1
M65_anc = 2
M65_and = 3
M65_ane = 4
M65_arr = 5
M65_asl = 6
M65_asr = 7
M65_bcc = 8
M65_bcs = 9
M65_beq = 10
M65_bit = 11
M65_bmi = 12
M65_bne = 13
M65_bpl = 14
M65_brk = 15
M65_bvc = 16
M65_bvs = 17
M65_clc = 18
M65_cld = 19
M65_cli = 20
M65_clv = 21
M65_cmp = 22
M65_cpx = 23
M65_cpy = 24
M65_dcp = 25
M65_dec = 26
M65_dex = 27
M65_dey = 28
M65_eor = 29
M65_inc = 30
M65_inx = 31
M65_iny = 32
M65_isb = 33
M65_jmp = 34
M65_jmpi = 35
M65_jsr = 36
M65_lae = 37
M65_lax = 38
M65_lda = 39
M65_ldx = 40
M65_ldy = 41
M65_lsr = 42
M65_lxa = 43
M65_nop = 44
M65_ora = 45
M65_pha = 46
M65_php = 47
M65_pla = 48
M65_plp = 49
M65_rla = 50
M65_rol = 51
M65_ror = 52
M65_rra = 53
M65_rti = 54
M65_rts = 55
M65_sax = 56
M65_sbc = 57
M65_sbx = 58
M65_sec = 59
M65_sed = 60
M65_sei = 61
M65_sha = 62
M65_shs = 63
M65_shx = 64
M65_shy = 65
M65_slo = 66
M65_sre = 67
M65_sta = 68
M65_stx = 69
M65_sty = 70
M65_tax = 71
M65_tay = 72
M65_tsx = 73
M65_txa = 74
M65_txs = 75
M65_tya = 76
M65_bbr0 = 77
M65_bbr1 = 78
M65_bbr2 = 79
M65_bbr3 = 80
M65_bbr4 = 81
M65_bbr5 = 82
M65_bbr6 = 83
M65_bbr7 = 84
M65_bbs0 = 85
M65_bbs1 = 86
M65_bbs2 = 87
M65_bbs3 = 88
M65_bbs4 = 89
M65_bbs5 = 90
M65_bbs6 = 91
M65_bbs7 = 92
M65_rmb0 = 93
M65_rmb1 = 94
M65_rmb2 = 95
M65_rmb3 = 96
M65_rmb4 = 97
M65_rmb5 = 98
M65_rmb6 = 99
M65_rmb7 = 100
M65_smb0 = 101
M65_smb1 = 102
M65_smb2 = 103
M65_smb3 = 104
M65_smb4 = 105
M65_smb5 = 106
M65_smb6 = 107
M65_smb7 = 108
M65_stz = 109
M65_tsb = 110
M65_trb = 111
M65_phy = 112
M65_ply = 113
M65_phx = 114
M65_plx = 115
M65_bra = 116
M65_wai = 117
M65_stp = 118
M65_last = 119
_6FFF11F2835D0DC88B7A63E751D57F89 = ctypes.c_uint32 # enum

# values for enumeration 'm65_itype_t'
m65_itype_t__enumvalues = {
    0: 'M65816_null',
    1: 'M65816_adc',
    2: 'M65816_and',
    3: 'M65816_asl',
    4: 'M65816_bcc',
    5: 'M65816_bcs',
    6: 'M65816_beq',
    7: 'M65816_bit',
    8: 'M65816_bmi',
    9: 'M65816_bne',
    10: 'M65816_bpl',
    11: 'M65816_bra',
    12: 'M65816_brk',
    13: 'M65816_brl',
    14: 'M65816_bvc',
    15: 'M65816_bvs',
    16: 'M65816_clc',
    17: 'M65816_cld',
    18: 'M65816_cli',
    19: 'M65816_clv',
    20: 'M65816_cmp',
    21: 'M65816_cop',
    22: 'M65816_cpx',
    23: 'M65816_cpy',
    24: 'M65816_dec',
    25: 'M65816_dex',
    26: 'M65816_dey',
    27: 'M65816_eor',
    28: 'M65816_inc',
    29: 'M65816_inx',
    30: 'M65816_iny',
    31: 'M65816_jml',
    32: 'M65816_jmp',
    33: 'M65816_jsl',
    34: 'M65816_jsr',
    35: 'M65816_lda',
    36: 'M65816_ldx',
    37: 'M65816_ldy',
    38: 'M65816_lsr',
    39: 'M65816_mvn',
    40: 'M65816_mvp',
    41: 'M65816_nop',
    42: 'M65816_ora',
    43: 'M65816_pea',
    44: 'M65816_pei',
    45: 'M65816_per',
    46: 'M65816_pha',
    47: 'M65816_phb',
    48: 'M65816_phd',
    49: 'M65816_phk',
    50: 'M65816_php',
    51: 'M65816_phx',
    52: 'M65816_phy',
    53: 'M65816_pla',
    54: 'M65816_plb',
    55: 'M65816_pld',
    56: 'M65816_plp',
    57: 'M65816_plx',
    58: 'M65816_ply',
    59: 'M65816_rep',
    60: 'M65816_rol',
    61: 'M65816_ror',
    62: 'M65816_rti',
    63: 'M65816_rtl',
    64: 'M65816_rts',
    65: 'M65816_sbc',
    66: 'M65816_sec',
    67: 'M65816_sed',
    68: 'M65816_sei',
    69: 'M65816_sep',
    70: 'M65816_sta',
    71: 'M65816_stp',
    72: 'M65816_stx',
    73: 'M65816_sty',
    74: 'M65816_stz',
    75: 'M65816_tax',
    76: 'M65816_tay',
    77: 'M65816_tcd',
    78: 'M65816_tcs',
    79: 'M65816_tdc',
    80: 'M65816_trb',
    81: 'M65816_tsb',
    82: 'M65816_tsc',
    83: 'M65816_tsx',
    84: 'M65816_txa',
    85: 'M65816_txs',
    86: 'M65816_txy',
    87: 'M65816_tya',
    88: 'M65816_tyx',
    89: 'M65816_wai',
    90: 'M65816_wdm',
    91: 'M65816_xba',
    92: 'M65816_xce',
    93: 'M65816_last',
}
M65816_null = 0
M65816_adc = 1
M65816_and = 2
M65816_asl = 3
M65816_bcc = 4
M65816_bcs = 5
M65816_beq = 6
M65816_bit = 7
M65816_bmi = 8
M65816_bne = 9
M65816_bpl = 10
M65816_bra = 11
M65816_brk = 12
M65816_brl = 13
M65816_bvc = 14
M65816_bvs = 15
M65816_clc = 16
M65816_cld = 17
M65816_cli = 18
M65816_clv = 19
M65816_cmp = 20
M65816_cop = 21
M65816_cpx = 22
M65816_cpy = 23
M65816_dec = 24
M65816_dex = 25
M65816_dey = 26
M65816_eor = 27
M65816_inc = 28
M65816_inx = 29
M65816_iny = 30
M65816_jml = 31
M65816_jmp = 32
M65816_jsl = 33
M65816_jsr = 34
M65816_lda = 35
M65816_ldx = 36
M65816_ldy = 37
M65816_lsr = 38
M65816_mvn = 39
M65816_mvp = 40
M65816_nop = 41
M65816_ora = 42
M65816_pea = 43
M65816_pei = 44
M65816_per = 45
M65816_pha = 46
M65816_phb = 47
M65816_phd = 48
M65816_phk = 49
M65816_php = 50
M65816_phx = 51
M65816_phy = 52
M65816_pla = 53
M65816_plb = 54
M65816_pld = 55
M65816_plp = 56
M65816_plx = 57
M65816_ply = 58
M65816_rep = 59
M65816_rol = 60
M65816_ror = 61
M65816_rti = 62
M65816_rtl = 63
M65816_rts = 64
M65816_sbc = 65
M65816_sec = 66
M65816_sed = 67
M65816_sei = 68
M65816_sep = 69
M65816_sta = 70
M65816_stp = 71
M65816_stx = 72
M65816_sty = 73
M65816_stz = 74
M65816_tax = 75
M65816_tay = 76
M65816_tcd = 77
M65816_tcs = 78
M65816_tdc = 79
M65816_trb = 80
M65816_tsb = 81
M65816_tsc = 82
M65816_tsx = 83
M65816_txa = 84
M65816_txs = 85
M65816_txy = 86
M65816_tya = 87
M65816_tyx = 88
M65816_wai = 89
M65816_wdm = 90
M65816_xba = 91
M65816_xce = 92
M65816_last = 93
m65_itype_t = ctypes.c_uint32 # enum

# values for enumeration '_AF91462B75AFE921B3530C2E678F17DE'
_AF91462B75AFE921B3530C2E678F17DE__enumvalues = {
    0: 'pdp_null',
    1: 'pdp_halt',
    2: 'pdp_wait',
    3: 'pdp_rti',
    4: 'pdp_bpt',
    5: 'pdp_iot',
    6: 'pdp_reset',
    7: 'pdp_rtt',
    8: 'pdp_mfpt',
    9: 'pdp_jmp',
    10: 'pdp_rts',
    11: 'pdp_spl',
    12: 'pdp_nop',
    13: 'pdp_clc',
    14: 'pdp_clv',
    15: 'pdp_clz',
    16: 'pdp_cln',
    17: 'pdp_ccc',
    18: 'pdp_sec',
    19: 'pdp_sev',
    20: 'pdp_sez',
    21: 'pdp_sen',
    22: 'pdp_scc',
    23: 'pdp_swab',
    24: 'pdp_br',
    25: 'pdp_bne',
    26: 'pdp_beq',
    27: 'pdp_bge',
    28: 'pdp_blt',
    29: 'pdp_bgt',
    30: 'pdp_ble',
    31: 'pdp_jsr',
    32: 'pdp_clr',
    33: 'pdp_com',
    34: 'pdp_inc',
    35: 'pdp_dec',
    36: 'pdp_neg',
    37: 'pdp_adc',
    38: 'pdp_sbc',
    39: 'pdp_tst',
    40: 'pdp_ror',
    41: 'pdp_rol',
    42: 'pdp_asr',
    43: 'pdp_asl',
    44: 'pdp_mark',
    45: 'pdp_mfpi',
    46: 'pdp_mtpi',
    47: 'pdp_sxt',
    48: 'pdp_mov',
    49: 'pdp_cmp',
    50: 'pdp_bit',
    51: 'pdp_bic',
    52: 'pdp_bis',
    53: 'pdp_add',
    54: 'pdp_sub',
    55: 'pdp_mul',
    56: 'pdp_div',
    57: 'pdp_ash',
    58: 'pdp_ashc',
    59: 'pdp_xor',
    60: 'pdp_fadd',
    61: 'pdp_fsub',
    62: 'pdp_fmul',
    63: 'pdp_fdiv',
    64: 'pdp_sob',
    65: 'pdp_bpl',
    66: 'pdp_bmi',
    67: 'pdp_bhi',
    68: 'pdp_blos',
    69: 'pdp_bvc',
    70: 'pdp_bvs',
    71: 'pdp_bcc',
    72: 'pdp_bcs',
    73: 'pdp_emt',
    74: 'pdp_trap',
    75: 'pdp_mtps',
    76: 'pdp_mfpd',
    77: 'pdp_mtpd',
    78: 'pdp_mfps',
    79: 'pdp_cfcc',
    80: 'pdp_setf',
    81: 'pdp_seti',
    82: 'pdp_setd',
    83: 'pdp_setl',
    84: 'pdp_ldfps',
    85: 'pdp_stfps',
    86: 'pdp_stst',
    87: 'pdp_clrd',
    88: 'pdp_tstd',
    89: 'pdp_absd',
    90: 'pdp_negd',
    91: 'pdp_muld',
    92: 'pdp_modd',
    93: 'pdp_addd',
    94: 'pdp_ldd',
    95: 'pdp_subd',
    96: 'pdp_cmpd',
    97: 'pdp_std',
    98: 'pdp_divd',
    99: 'pdp_stexp',
    100: 'pdp_stcdi',
    101: 'pdp_stcdf',
    102: 'pdp_ldexp',
    103: 'pdp_ldcif',
    104: 'pdp_ldcfd',
    105: 'pdp_call',
    106: 'pdp_return',
    107: 'pdp_compcc',
    108: 'pdp_last',
}
pdp_null = 0
pdp_halt = 1
pdp_wait = 2
pdp_rti = 3
pdp_bpt = 4
pdp_iot = 5
pdp_reset = 6
pdp_rtt = 7
pdp_mfpt = 8
pdp_jmp = 9
pdp_rts = 10
pdp_spl = 11
pdp_nop = 12
pdp_clc = 13
pdp_clv = 14
pdp_clz = 15
pdp_cln = 16
pdp_ccc = 17
pdp_sec = 18
pdp_sev = 19
pdp_sez = 20
pdp_sen = 21
pdp_scc = 22
pdp_swab = 23
pdp_br = 24
pdp_bne = 25
pdp_beq = 26
pdp_bge = 27
pdp_blt = 28
pdp_bgt = 29
pdp_ble = 30
pdp_jsr = 31
pdp_clr = 32
pdp_com = 33
pdp_inc = 34
pdp_dec = 35
pdp_neg = 36
pdp_adc = 37
pdp_sbc = 38
pdp_tst = 39
pdp_ror = 40
pdp_rol = 41
pdp_asr = 42
pdp_asl = 43
pdp_mark = 44
pdp_mfpi = 45
pdp_mtpi = 46
pdp_sxt = 47
pdp_mov = 48
pdp_cmp = 49
pdp_bit = 50
pdp_bic = 51
pdp_bis = 52
pdp_add = 53
pdp_sub = 54
pdp_mul = 55
pdp_div = 56
pdp_ash = 57
pdp_ashc = 58
pdp_xor = 59
pdp_fadd = 60
pdp_fsub = 61
pdp_fmul = 62
pdp_fdiv = 63
pdp_sob = 64
pdp_bpl = 65
pdp_bmi = 66
pdp_bhi = 67
pdp_blos = 68
pdp_bvc = 69
pdp_bvs = 70
pdp_bcc = 71
pdp_bcs = 72
pdp_emt = 73
pdp_trap = 74
pdp_mtps = 75
pdp_mfpd = 76
pdp_mtpd = 77
pdp_mfps = 78
pdp_cfcc = 79
pdp_setf = 80
pdp_seti = 81
pdp_setd = 82
pdp_setl = 83
pdp_ldfps = 84
pdp_stfps = 85
pdp_stst = 86
pdp_clrd = 87
pdp_tstd = 88
pdp_absd = 89
pdp_negd = 90
pdp_muld = 91
pdp_modd = 92
pdp_addd = 93
pdp_ldd = 94
pdp_subd = 95
pdp_cmpd = 96
pdp_std = 97
pdp_divd = 98
pdp_stexp = 99
pdp_stcdi = 100
pdp_stcdf = 101
pdp_ldexp = 102
pdp_ldcif = 103
pdp_ldcfd = 104
pdp_call = 105
pdp_return = 106
pdp_compcc = 107
pdp_last = 108
_AF91462B75AFE921B3530C2E678F17DE = ctypes.c_uint32 # enum

# values for enumeration '_4128853ACAA9BBDE95E7DB551EADDCD7'
_4128853ACAA9BBDE95E7DB551EADDCD7__enumvalues = {
    0: 'mc_null',
    1: 'mc_abcd',
    2: 'mc_add',
    3: 'mc_adda',
    4: 'mc_addi',
    5: 'mc_addq',
    6: 'mc_addx',
    7: 'mc_and',
    8: 'mc_andi',
    9: 'mc_asl',
    10: 'mc_asr',
    11: 'mc_b',
    12: 'mc_bchg',
    13: 'mc_bclr',
    14: 'mc_bftst',
    15: 'mc_bfchg',
    16: 'mc_bfclr',
    17: 'mc_bfset',
    18: 'mc_bfextu',
    19: 'mc_bfexts',
    20: 'mc_bfffo',
    21: 'mc_bfins',
    22: 'mc_bgnd',
    23: 'mc_bkpt',
    24: 'mc_bra',
    25: 'mc_bset',
    26: 'mc_bsr',
    27: 'mc_btst',
    28: 'mc_callm',
    29: 'mc_cas',
    30: 'mc_cas2',
    31: 'mc_chk',
    32: 'mc_chk2',
    33: 'mc_cinv',
    34: 'mc_clr',
    35: 'mc_cmp',
    36: 'mc_cmp2',
    37: 'mc_cmpa',
    38: 'mc_cmpi',
    39: 'mc_cmpm',
    40: 'mc_cpush',
    41: 'mc_db',
    42: 'mc_divs',
    43: 'mc_divsl',
    44: 'mc_divu',
    45: 'mc_divul',
    46: 'mc_eor',
    47: 'mc_eori',
    48: 'mc_exg',
    49: 'mc_ext',
    50: 'mc_extb',
    51: 'mc_fabs',
    52: 'mc_facos',
    53: 'mc_fadd',
    54: 'mc_fasin',
    55: 'mc_fatan',
    56: 'mc_fatanh',
    57: 'mc_fb',
    58: 'mc_fcmp',
    59: 'mc_fcos',
    60: 'mc_fcosh',
    61: 'mc_fdabs',
    62: 'mc_fdadd',
    63: 'mc_fdb',
    64: 'mc_fddiv',
    65: 'mc_fdiv',
    66: 'mc_fdmove',
    67: 'mc_fdmul',
    68: 'mc_fdneg',
    69: 'mc_fdsqrt',
    70: 'mc_fdsub',
    71: 'mc_fetox',
    72: 'mc_fetoxm1',
    73: 'mc_fgetexp',
    74: 'mc_fgetman',
    75: 'mc_fint',
    76: 'mc_fintrz',
    77: 'mc_flog2',
    78: 'mc_flog10',
    79: 'mc_flogn',
    80: 'mc_flognp1',
    81: 'mc_fmod',
    82: 'mc_fmove',
    83: 'mc_fmovecr',
    84: 'mc_fmovem',
    85: 'mc_fmul',
    86: 'mc_fneg',
    87: 'mc_fnop',
    88: 'mc_frem',
    89: 'mc_frestore',
    90: 'mc_fs',
    91: 'mc_fsabs',
    92: 'mc_fsadd',
    93: 'mc_fsave',
    94: 'mc_fscale',
    95: 'mc_fsdiv',
    96: 'mc_fsgldiv',
    97: 'mc_fsglmul',
    98: 'mc_fsin',
    99: 'mc_fsincos',
    100: 'mc_fsinh',
    101: 'mc_fsmove',
    102: 'mc_fsmul',
    103: 'mc_fsneg',
    104: 'mc_fsqrt',
    105: 'mc_fssqrt',
    106: 'mc_fssub',
    107: 'mc_fsub',
    108: 'mc_ftan',
    109: 'mc_ftanh',
    110: 'mc_ftentox',
    111: 'mc_ftrap',
    112: 'mc_ftst',
    113: 'mc_ftwotox',
    114: 'mc_halt',
    115: 'mc_illegal',
    116: 'mc_jmp',
    117: 'mc_jsr',
    118: 'mc_lea',
    119: 'mc_link',
    120: 'mc_lpstop',
    121: 'mc_lsl',
    122: 'mc_lsr',
    123: 'mc_mac',
    124: 'mc_macl',
    125: 'mc_move',
    126: 'mc_move16',
    127: 'mc_movea',
    128: 'mc_movec',
    129: 'mc_movem',
    130: 'mc_movep',
    131: 'mc_moveq',
    132: 'mc_moves',
    133: 'mc_msac',
    134: 'mc_msacl',
    135: 'mc_muls',
    136: 'mc_mulu',
    137: 'mc_nbcd',
    138: 'mc_neg',
    139: 'mc_negx',
    140: 'mc_nop',
    141: 'mc_not',
    142: 'mc_or',
    143: 'mc_ori',
    144: 'mc_pack',
    145: 'mc_pea',
    146: 'mc_pb',
    147: 'mc_pdb',
    148: 'mc_pflush',
    149: 'mc_pflushr',
    150: 'mc_ploadr',
    151: 'mc_ploadw',
    152: 'mc_pmove',
    153: 'mc_prestore',
    154: 'mc_psave',
    155: 'mc_ps',
    156: 'mc_ptestr',
    157: 'mc_ptestw',
    158: 'mc_ptrap',
    159: 'mc_pulse',
    160: 'mc_pvalid',
    161: 'mc_rol',
    162: 'mc_ror',
    163: 'mc_roxl',
    164: 'mc_roxr',
    165: 'mc_reset',
    166: 'mc_rtd',
    167: 'mc_rte',
    168: 'mc_rtm',
    169: 'mc_rtr',
    170: 'mc_rts',
    171: 'mc_sbcd',
    172: 'mc_s',
    173: 'mc_stop',
    174: 'mc_sub',
    175: 'mc_suba',
    176: 'mc_subi',
    177: 'mc_subq',
    178: 'mc_subx',
    179: 'mc_swap',
    180: 'mc_tas',
    181: 'mc_tbl',
    182: 'mc_trap',
    183: 'mc_trapv',
    184: 'mc_tst',
    185: 'mc_unlk',
    186: 'mc_unpk',
    187: 'mc_wddata',
    188: 'mc_wdebug',
    189: 'mc_atrap',
    190: 'mc_bitrev',
    191: 'mc_byterev',
    192: 'mc_ff1',
    193: 'mc_intouch',
    194: 'mc_mov3q',
    195: 'mc_mvs',
    196: 'mc_mvz',
    197: 'mc_sats',
    198: 'mc_movclr',
    199: 'mc_maaac',
    200: 'mc_masac',
    201: 'mc_msaac',
    202: 'mc_mssac',
    203: 'mc_remsl',
    204: 'mc_remul',
    205: 'mc_last',
}
mc_null = 0
mc_abcd = 1
mc_add = 2
mc_adda = 3
mc_addi = 4
mc_addq = 5
mc_addx = 6
mc_and = 7
mc_andi = 8
mc_asl = 9
mc_asr = 10
mc_b = 11
mc_bchg = 12
mc_bclr = 13
mc_bftst = 14
mc_bfchg = 15
mc_bfclr = 16
mc_bfset = 17
mc_bfextu = 18
mc_bfexts = 19
mc_bfffo = 20
mc_bfins = 21
mc_bgnd = 22
mc_bkpt = 23
mc_bra = 24
mc_bset = 25
mc_bsr = 26
mc_btst = 27
mc_callm = 28
mc_cas = 29
mc_cas2 = 30
mc_chk = 31
mc_chk2 = 32
mc_cinv = 33
mc_clr = 34
mc_cmp = 35
mc_cmp2 = 36
mc_cmpa = 37
mc_cmpi = 38
mc_cmpm = 39
mc_cpush = 40
mc_db = 41
mc_divs = 42
mc_divsl = 43
mc_divu = 44
mc_divul = 45
mc_eor = 46
mc_eori = 47
mc_exg = 48
mc_ext = 49
mc_extb = 50
mc_fabs = 51
mc_facos = 52
mc_fadd = 53
mc_fasin = 54
mc_fatan = 55
mc_fatanh = 56
mc_fb = 57
mc_fcmp = 58
mc_fcos = 59
mc_fcosh = 60
mc_fdabs = 61
mc_fdadd = 62
mc_fdb = 63
mc_fddiv = 64
mc_fdiv = 65
mc_fdmove = 66
mc_fdmul = 67
mc_fdneg = 68
mc_fdsqrt = 69
mc_fdsub = 70
mc_fetox = 71
mc_fetoxm1 = 72
mc_fgetexp = 73
mc_fgetman = 74
mc_fint = 75
mc_fintrz = 76
mc_flog2 = 77
mc_flog10 = 78
mc_flogn = 79
mc_flognp1 = 80
mc_fmod = 81
mc_fmove = 82
mc_fmovecr = 83
mc_fmovem = 84
mc_fmul = 85
mc_fneg = 86
mc_fnop = 87
mc_frem = 88
mc_frestore = 89
mc_fs = 90
mc_fsabs = 91
mc_fsadd = 92
mc_fsave = 93
mc_fscale = 94
mc_fsdiv = 95
mc_fsgldiv = 96
mc_fsglmul = 97
mc_fsin = 98
mc_fsincos = 99
mc_fsinh = 100
mc_fsmove = 101
mc_fsmul = 102
mc_fsneg = 103
mc_fsqrt = 104
mc_fssqrt = 105
mc_fssub = 106
mc_fsub = 107
mc_ftan = 108
mc_ftanh = 109
mc_ftentox = 110
mc_ftrap = 111
mc_ftst = 112
mc_ftwotox = 113
mc_halt = 114
mc_illegal = 115
mc_jmp = 116
mc_jsr = 117
mc_lea = 118
mc_link = 119
mc_lpstop = 120
mc_lsl = 121
mc_lsr = 122
mc_mac = 123
mc_macl = 124
mc_move = 125
mc_move16 = 126
mc_movea = 127
mc_movec = 128
mc_movem = 129
mc_movep = 130
mc_moveq = 131
mc_moves = 132
mc_msac = 133
mc_msacl = 134
mc_muls = 135
mc_mulu = 136
mc_nbcd = 137
mc_neg = 138
mc_negx = 139
mc_nop = 140
mc_not = 141
mc_or = 142
mc_ori = 143
mc_pack = 144
mc_pea = 145
mc_pb = 146
mc_pdb = 147
mc_pflush = 148
mc_pflushr = 149
mc_ploadr = 150
mc_ploadw = 151
mc_pmove = 152
mc_prestore = 153
mc_psave = 154
mc_ps = 155
mc_ptestr = 156
mc_ptestw = 157
mc_ptrap = 158
mc_pulse = 159
mc_pvalid = 160
mc_rol = 161
mc_ror = 162
mc_roxl = 163
mc_roxr = 164
mc_reset = 165
mc_rtd = 166
mc_rte = 167
mc_rtm = 168
mc_rtr = 169
mc_rts = 170
mc_sbcd = 171
mc_s = 172
mc_stop = 173
mc_sub = 174
mc_suba = 175
mc_subi = 176
mc_subq = 177
mc_subx = 178
mc_swap = 179
mc_tas = 180
mc_tbl = 181
mc_trap = 182
mc_trapv = 183
mc_tst = 184
mc_unlk = 185
mc_unpk = 186
mc_wddata = 187
mc_wdebug = 188
mc_atrap = 189
mc_bitrev = 190
mc_byterev = 191
mc_ff1 = 192
mc_intouch = 193
mc_mov3q = 194
mc_mvs = 195
mc_mvz = 196
mc_sats = 197
mc_movclr = 198
mc_maaac = 199
mc_masac = 200
mc_msaac = 201
mc_mssac = 202
mc_remsl = 203
mc_remul = 204
mc_last = 205
_4128853ACAA9BBDE95E7DB551EADDCD7 = ctypes.c_uint32 # enum

# values for enumeration '_D85C7057457CDA45599059B9A17E4B84'
_D85C7057457CDA45599059B9A17E4B84__enumvalues = {
    0: 'mc8_null',
    1: 'mc8_aba',
    2: 'mc8_ab',
    3: 'mc8_adc',
    4: 'mc8_add',
    5: 'mc8_addd',
    6: 'mc8_ais',
    7: 'mc8_aix',
    8: 'mc8_and',
    9: 'mc8_andcc',
    10: 'mc8_asr',
    11: 'mc8_bcc',
    12: 'mc8_bclr',
    13: 'mc8_bcs',
    14: 'mc8_beq',
    15: 'mc8_bge',
    16: 'mc8_bgt',
    17: 'mc8_bhcc',
    18: 'mc8_bhcs',
    19: 'mc8_bhi',
    20: 'mc8_bhs',
    21: 'mc8_bih',
    22: 'mc8_bil',
    23: 'mc8_bit',
    24: 'mc8_ble',
    25: 'mc8_blo',
    26: 'mc8_bls',
    27: 'mc8_blt',
    28: 'mc8_bmc',
    29: 'mc8_bmi',
    30: 'mc8_bms',
    31: 'mc8_bne',
    32: 'mc8_bpl',
    33: 'mc8_bra',
    34: 'mc8_brclr',
    35: 'mc8_brn',
    36: 'mc8_brset',
    37: 'mc8_bset',
    38: 'mc8_bsr',
    39: 'mc8_bvc',
    40: 'mc8_bvs',
    41: 'mc8_cba',
    42: 'mc8_cbeq',
    43: 'mc8_clc',
    44: 'mc8_cli',
    45: 'mc8_clr',
    46: 'mc8_clv',
    47: 'mc8_cmp',
    48: 'mc8_com',
    49: 'mc8_cp',
    50: 'mc8_cpd',
    51: 'mc8_cphx',
    52: 'mc8_cpx',
    53: 'mc8_cwai',
    54: 'mc8_daa',
    55: 'mc8_dbnz',
    56: 'mc8_de',
    57: 'mc8_dec',
    58: 'mc8_des',
    59: 'mc8_div',
    60: 'mc8_eor',
    61: 'mc8_exg',
    62: 'mc8_fdiv',
    63: 'mc8_idiv',
    64: 'mc8_in',
    65: 'mc8_inc',
    66: 'mc8_ins',
    67: 'mc8_jmp',
    68: 'mc8_jsr',
    69: 'mc8_ld',
    70: 'mc8_lda',
    71: 'mc8_ldd',
    72: 'mc8_ldhx',
    73: 'mc8_lds',
    74: 'mc8_ldx',
    75: 'mc8_lea',
    76: 'mc8_lsl',
    77: 'mc8_lsld',
    78: 'mc8_lsr',
    79: 'mc8_lsrd',
    80: 'mc8_mov',
    81: 'mc8_mul',
    82: 'mc8_neg',
    83: 'mc8_nop',
    84: 'mc8_nsa',
    85: 'mc8_ora',
    86: 'mc8_orcc',
    87: 'mc8_psh',
    88: 'mc8_psha',
    89: 'mc8_pshb',
    90: 'mc8_pshh',
    91: 'mc8_pshx',
    92: 'mc8_pul',
    93: 'mc8_pula',
    94: 'mc8_pulb',
    95: 'mc8_pulh',
    96: 'mc8_pulx',
    97: 'mc8_rol',
    98: 'mc8_ror',
    99: 'mc8_rsp',
    100: 'mc8_rti',
    101: 'mc8_rts',
    102: 'mc8_sba',
    103: 'mc8_sbc',
    104: 'mc8_sec',
    105: 'mc8_sei',
    106: 'mc8_sev',
    107: 'mc8_sex',
    108: 'mc8_slp',
    109: 'mc8_st',
    110: 'mc8_sta',
    111: 'mc8_std',
    112: 'mc8_sthx',
    113: 'mc8_stop',
    114: 'mc8_sts',
    115: 'mc8_stx',
    116: 'mc8_sub',
    117: 'mc8_subd',
    118: 'mc8_swi',
    119: 'mc8_sync',
    120: 'mc8_tab',
    121: 'mc8_tap',
    122: 'mc8_tax',
    123: 'mc8_tba',
    124: 'mc8_test',
    125: 'mc8_tfr',
    126: 'mc8_tpa',
    127: 'mc8_ts',
    128: 'mc8_tst',
    129: 'mc8_tsx',
    130: 'mc8_txa',
    131: 'mc8_txs',
    132: 'mc8_tys',
    133: 'mc8_wai',
    134: 'mc8_wait',
    135: 'mc8_xgd',
    136: 'mc8_1',
    137: 'mc8_2',
    138: 'mc8_os9',
    139: 'mc8_aim',
    140: 'mc8_oim',
    141: 'mc8_eim',
    142: 'mc8_tim',
    143: 'mc8_bgnd',
    144: 'mc8_call',
    145: 'mc8_rtc',
    146: 'mc8_skip1',
    147: 'mc8_skip2',
    148: 'mc8_last',
}
mc8_null = 0
mc8_aba = 1
mc8_ab = 2
mc8_adc = 3
mc8_add = 4
mc8_addd = 5
mc8_ais = 6
mc8_aix = 7
mc8_and = 8
mc8_andcc = 9
mc8_asr = 10
mc8_bcc = 11
mc8_bclr = 12
mc8_bcs = 13
mc8_beq = 14
mc8_bge = 15
mc8_bgt = 16
mc8_bhcc = 17
mc8_bhcs = 18
mc8_bhi = 19
mc8_bhs = 20
mc8_bih = 21
mc8_bil = 22
mc8_bit = 23
mc8_ble = 24
mc8_blo = 25
mc8_bls = 26
mc8_blt = 27
mc8_bmc = 28
mc8_bmi = 29
mc8_bms = 30
mc8_bne = 31
mc8_bpl = 32
mc8_bra = 33
mc8_brclr = 34
mc8_brn = 35
mc8_brset = 36
mc8_bset = 37
mc8_bsr = 38
mc8_bvc = 39
mc8_bvs = 40
mc8_cba = 41
mc8_cbeq = 42
mc8_clc = 43
mc8_cli = 44
mc8_clr = 45
mc8_clv = 46
mc8_cmp = 47
mc8_com = 48
mc8_cp = 49
mc8_cpd = 50
mc8_cphx = 51
mc8_cpx = 52
mc8_cwai = 53
mc8_daa = 54
mc8_dbnz = 55
mc8_de = 56
mc8_dec = 57
mc8_des = 58
mc8_div = 59
mc8_eor = 60
mc8_exg = 61
mc8_fdiv = 62
mc8_idiv = 63
mc8_in = 64
mc8_inc = 65
mc8_ins = 66
mc8_jmp = 67
mc8_jsr = 68
mc8_ld = 69
mc8_lda = 70
mc8_ldd = 71
mc8_ldhx = 72
mc8_lds = 73
mc8_ldx = 74
mc8_lea = 75
mc8_lsl = 76
mc8_lsld = 77
mc8_lsr = 78
mc8_lsrd = 79
mc8_mov = 80
mc8_mul = 81
mc8_neg = 82
mc8_nop = 83
mc8_nsa = 84
mc8_ora = 85
mc8_orcc = 86
mc8_psh = 87
mc8_psha = 88
mc8_pshb = 89
mc8_pshh = 90
mc8_pshx = 91
mc8_pul = 92
mc8_pula = 93
mc8_pulb = 94
mc8_pulh = 95
mc8_pulx = 96
mc8_rol = 97
mc8_ror = 98
mc8_rsp = 99
mc8_rti = 100
mc8_rts = 101
mc8_sba = 102
mc8_sbc = 103
mc8_sec = 104
mc8_sei = 105
mc8_sev = 106
mc8_sex = 107
mc8_slp = 108
mc8_st = 109
mc8_sta = 110
mc8_std = 111
mc8_sthx = 112
mc8_stop = 113
mc8_sts = 114
mc8_stx = 115
mc8_sub = 116
mc8_subd = 117
mc8_swi = 118
mc8_sync = 119
mc8_tab = 120
mc8_tap = 121
mc8_tax = 122
mc8_tba = 123
mc8_test = 124
mc8_tfr = 125
mc8_tpa = 126
mc8_ts = 127
mc8_tst = 128
mc8_tsx = 129
mc8_txa = 130
mc8_txs = 131
mc8_tys = 132
mc8_wai = 133
mc8_wait = 134
mc8_xgd = 135
mc8_1 = 136
mc8_2 = 137
mc8_os9 = 138
mc8_aim = 139
mc8_oim = 140
mc8_eim = 141
mc8_tim = 142
mc8_bgnd = 143
mc8_call = 144
mc8_rtc = 145
mc8_skip1 = 146
mc8_skip2 = 147
mc8_last = 148
_D85C7057457CDA45599059B9A17E4B84 = ctypes.c_uint32 # enum

# values for enumeration '_D36E12C1735F187932BE64E09404B8E3'
_D36E12C1735F187932BE64E09404B8E3__enumvalues = {
    0: 'j_nop',
    1: 'j_aconst_null',
    2: 'j_iconst_m1',
    3: 'j_iconst_0',
    4: 'j_iconst_1',
    5: 'j_iconst_2',
    6: 'j_iconst_3',
    7: 'j_iconst_4',
    8: 'j_iconst_5',
    9: 'j_lconst_0',
    10: 'j_lconst_1',
    11: 'j_fconst_0',
    12: 'j_fconst_1',
    13: 'j_fconst_2',
    14: 'j_dconst_0',
    15: 'j_dconst_1',
    16: 'j_bipush',
    17: 'j_sipush',
    18: 'j_ldc',
    19: 'j_ldcw',
    20: 'j_ldc2w',
    21: 'j_iload',
    22: 'j_lload',
    23: 'j_fload',
    24: 'j_dload',
    25: 'j_aload',
    26: 'j_iload_0',
    27: 'j_iload_1',
    28: 'j_iload_2',
    29: 'j_iload_3',
    30: 'j_lload_0',
    31: 'j_lload_1',
    32: 'j_lload_2',
    33: 'j_lload_3',
    34: 'j_fload_0',
    35: 'j_fload_1',
    36: 'j_fload_2',
    37: 'j_fload_3',
    38: 'j_dload_0',
    39: 'j_dload_1',
    40: 'j_dload_2',
    41: 'j_dload_3',
    42: 'j_aload_0',
    43: 'j_aload_1',
    44: 'j_aload_2',
    45: 'j_aload_3',
    46: 'j_iaload',
    47: 'j_laload',
    48: 'j_faload',
    49: 'j_daload',
    50: 'j_aaload',
    51: 'j_baload',
    52: 'j_caload',
    53: 'j_saload',
    54: 'j_istore',
    55: 'j_lstore',
    56: 'j_fstore',
    57: 'j_dstore',
    58: 'j_astore',
    59: 'j_istore_0',
    60: 'j_istore_1',
    61: 'j_istore_2',
    62: 'j_istore_3',
    63: 'j_lstore_0',
    64: 'j_lstore_1',
    65: 'j_lstore_2',
    66: 'j_lstore_3',
    67: 'j_fstore_0',
    68: 'j_fstore_1',
    69: 'j_fstore_2',
    70: 'j_fstore_3',
    71: 'j_dstore_0',
    72: 'j_dstore_1',
    73: 'j_dstore_2',
    74: 'j_dstore_3',
    75: 'j_astore_0',
    76: 'j_astore_1',
    77: 'j_astore_2',
    78: 'j_astore_3',
    79: 'j_iastore',
    80: 'j_lastore',
    81: 'j_fastore',
    82: 'j_dastore',
    83: 'j_aastore',
    84: 'j_bastore',
    85: 'j_castore',
    86: 'j_sastore',
    87: 'j_pop',
    88: 'j_pop2',
    89: 'j_dup',
    90: 'j_dup_x1',
    91: 'j_dup_x2',
    92: 'j_dup2',
    93: 'j_dup2_x1',
    94: 'j_dup2_x2',
    95: 'j_swap',
    96: 'j_iadd',
    97: 'j_ladd',
    98: 'j_fadd',
    99: 'j_dadd',
    100: 'j_isub',
    101: 'j_lsub',
    102: 'j_fsub',
    103: 'j_dsub',
    104: 'j_imul',
    105: 'j_lmul',
    106: 'j_fmul',
    107: 'j_dmul',
    108: 'j_idiv',
    109: 'j_ldiv',
    110: 'j_fdiv',
    111: 'j_ddiv',
    112: 'j_irem',
    113: 'j_lrem',
    114: 'j_frem',
    115: 'j_drem',
    116: 'j_ineg',
    117: 'j_lneg',
    118: 'j_fneg',
    119: 'j_dneg',
    120: 'j_ishl',
    121: 'j_lshl',
    122: 'j_ishr',
    123: 'j_lshr',
    124: 'j_iushr',
    125: 'j_lushr',
    126: 'j_iand',
    127: 'j_land',
    128: 'j_ior',
    129: 'j_lor',
    130: 'j_ixor',
    131: 'j_lxor',
    132: 'j_iinc',
    133: 'j_i2l',
    134: 'j_i2f',
    135: 'j_i2d',
    136: 'j_l2i',
    137: 'j_l2f',
    138: 'j_l2d',
    139: 'j_f2i',
    140: 'j_f2l',
    141: 'j_f2d',
    142: 'j_d2i',
    143: 'j_d2l',
    144: 'j_d2f',
    145: 'j_i2b',
    146: 'j_i2c',
    147: 'j_i2s',
    148: 'j_lcmp',
    149: 'j_fcmpl',
    150: 'j_fcmpg',
    151: 'j_dcmpl',
    152: 'j_dcmpg',
    153: 'j_ifeq',
    154: 'j_ifne',
    155: 'j_iflt',
    156: 'j_ifge',
    157: 'j_ifgt',
    158: 'j_ifle',
    159: 'j_if_icmpeq',
    160: 'j_if_icmpne',
    161: 'j_if_icmplt',
    162: 'j_if_icmpge',
    163: 'j_if_icmpgt',
    164: 'j_if_icmple',
    165: 'j_if_acmpeq',
    166: 'j_if_acmpne',
    167: 'j_goto',
    168: 'j_jsr',
    169: 'j_ret',
    170: 'j_tableswitch',
    171: 'j_lookupswitch',
    172: 'j_ireturn',
    173: 'j_lreturn',
    174: 'j_freturn',
    175: 'j_dreturn',
    176: 'j_areturn',
    177: 'j_return',
    178: 'j_getstatic',
    179: 'j_putstatic',
    180: 'j_getfield',
    181: 'j_putfield',
    182: 'j_invokevirtual',
    183: 'j_invokespecial',
    184: 'j_invokestatic',
    185: 'j_invokeinterface',
    186: 'j_invokedynamic',
    187: 'j_new',
    188: 'j_newarray',
    189: 'j_anewarray',
    190: 'j_arraylength',
    191: 'j_athrow',
    192: 'j_checkcast',
    193: 'j_instanceof',
    194: 'j_monitorenter',
    195: 'j_monitorexit',
    196: 'j_wide',
    197: 'j_multianewarray',
    198: 'j_ifnull',
    199: 'j_ifnonnull',
    200: 'j_goto_w',
    201: 'j_jsr_w',
    202: 'j_breakpoint',
    203: 'j_lastnorm',
    203: 'j_a_invokesuper',
    204: 'j_a_invokevirtualobject',
    205: 'j_a_invokeignored',
    206: 'j_a_software',
    207: 'j_a_hardware',
    208: 'j_last',
}
j_nop = 0
j_aconst_null = 1
j_iconst_m1 = 2
j_iconst_0 = 3
j_iconst_1 = 4
j_iconst_2 = 5
j_iconst_3 = 6
j_iconst_4 = 7
j_iconst_5 = 8
j_lconst_0 = 9
j_lconst_1 = 10
j_fconst_0 = 11
j_fconst_1 = 12
j_fconst_2 = 13
j_dconst_0 = 14
j_dconst_1 = 15
j_bipush = 16
j_sipush = 17
j_ldc = 18
j_ldcw = 19
j_ldc2w = 20
j_iload = 21
j_lload = 22
j_fload = 23
j_dload = 24
j_aload = 25
j_iload_0 = 26
j_iload_1 = 27
j_iload_2 = 28
j_iload_3 = 29
j_lload_0 = 30
j_lload_1 = 31
j_lload_2 = 32
j_lload_3 = 33
j_fload_0 = 34
j_fload_1 = 35
j_fload_2 = 36
j_fload_3 = 37
j_dload_0 = 38
j_dload_1 = 39
j_dload_2 = 40
j_dload_3 = 41
j_aload_0 = 42
j_aload_1 = 43
j_aload_2 = 44
j_aload_3 = 45
j_iaload = 46
j_laload = 47
j_faload = 48
j_daload = 49
j_aaload = 50
j_baload = 51
j_caload = 52
j_saload = 53
j_istore = 54
j_lstore = 55
j_fstore = 56
j_dstore = 57
j_astore = 58
j_istore_0 = 59
j_istore_1 = 60
j_istore_2 = 61
j_istore_3 = 62
j_lstore_0 = 63
j_lstore_1 = 64
j_lstore_2 = 65
j_lstore_3 = 66
j_fstore_0 = 67
j_fstore_1 = 68
j_fstore_2 = 69
j_fstore_3 = 70
j_dstore_0 = 71
j_dstore_1 = 72
j_dstore_2 = 73
j_dstore_3 = 74
j_astore_0 = 75
j_astore_1 = 76
j_astore_2 = 77
j_astore_3 = 78
j_iastore = 79
j_lastore = 80
j_fastore = 81
j_dastore = 82
j_aastore = 83
j_bastore = 84
j_castore = 85
j_sastore = 86
j_pop = 87
j_pop2 = 88
j_dup = 89
j_dup_x1 = 90
j_dup_x2 = 91
j_dup2 = 92
j_dup2_x1 = 93
j_dup2_x2 = 94
j_swap = 95
j_iadd = 96
j_ladd = 97
j_fadd = 98
j_dadd = 99
j_isub = 100
j_lsub = 101
j_fsub = 102
j_dsub = 103
j_imul = 104
j_lmul = 105
j_fmul = 106
j_dmul = 107
j_idiv = 108
j_ldiv = 109
j_fdiv = 110
j_ddiv = 111
j_irem = 112
j_lrem = 113
j_frem = 114
j_drem = 115
j_ineg = 116
j_lneg = 117
j_fneg = 118
j_dneg = 119
j_ishl = 120
j_lshl = 121
j_ishr = 122
j_lshr = 123
j_iushr = 124
j_lushr = 125
j_iand = 126
j_land = 127
j_ior = 128
j_lor = 129
j_ixor = 130
j_lxor = 131
j_iinc = 132
j_i2l = 133
j_i2f = 134
j_i2d = 135
j_l2i = 136
j_l2f = 137
j_l2d = 138
j_f2i = 139
j_f2l = 140
j_f2d = 141
j_d2i = 142
j_d2l = 143
j_d2f = 144
j_i2b = 145
j_i2c = 146
j_i2s = 147
j_lcmp = 148
j_fcmpl = 149
j_fcmpg = 150
j_dcmpl = 151
j_dcmpg = 152
j_ifeq = 153
j_ifne = 154
j_iflt = 155
j_ifge = 156
j_ifgt = 157
j_ifle = 158
j_if_icmpeq = 159
j_if_icmpne = 160
j_if_icmplt = 161
j_if_icmpge = 162
j_if_icmpgt = 163
j_if_icmple = 164
j_if_acmpeq = 165
j_if_acmpne = 166
j_goto = 167
j_jsr = 168
j_ret = 169
j_tableswitch = 170
j_lookupswitch = 171
j_ireturn = 172
j_lreturn = 173
j_freturn = 174
j_dreturn = 175
j_areturn = 176
j_return = 177
j_getstatic = 178
j_putstatic = 179
j_getfield = 180
j_putfield = 181
j_invokevirtual = 182
j_invokespecial = 183
j_invokestatic = 184
j_invokeinterface = 185
j_invokedynamic = 186
j_new = 187
j_newarray = 188
j_anewarray = 189
j_arraylength = 190
j_athrow = 191
j_checkcast = 192
j_instanceof = 193
j_monitorenter = 194
j_monitorexit = 195
j_wide = 196
j_multianewarray = 197
j_ifnull = 198
j_ifnonnull = 199
j_goto_w = 200
j_jsr_w = 201
j_breakpoint = 202
j_lastnorm = 203
j_a_invokesuper = 203
j_a_invokevirtualobject = 204
j_a_invokeignored = 205
j_a_software = 206
j_a_hardware = 207
j_last = 208
_D36E12C1735F187932BE64E09404B8E3 = ctypes.c_uint32 # enum

# values for enumeration 'name_quick'
name_quick__enumvalues = {
    203: 'j_ldc_quick',
    204: 'j_ldcw_quick',
    205: 'j_ldc2w_quick',
    206: 'j_getfield_quick',
    207: 'j_putfield_quick',
    208: 'j_getfield2_quick',
    209: 'j_putfield2_quick',
    210: 'j_getstatic_quick',
    211: 'j_putstatic_quick',
    212: 'j_getstatic2_quick',
    213: 'j_putstatic2_quick',
    214: 'j_invokevirtual_quick',
    215: 'j_invokenonvirtual_quick',
    216: 'j_invokesuper_quick',
    217: 'j_invokestatic_quick',
    218: 'j_invokeinterface_quick',
    219: 'j_invokevirtualobject_quick',
    220: 'j_invokeignored_quick',
    221: 'j_new_quick',
    222: 'j_anewarray_quick',
    223: 'j_multianewarray_quick',
    224: 'j_checkcast_quick',
    225: 'j_instanceof_quick',
    226: 'j_invokevirtual_quick_w',
    227: 'j_getfield_quick_w',
    228: 'j_putfield_quick_w',
    229: 'j_quick_last',
}
j_ldc_quick = 203
j_ldcw_quick = 204
j_ldc2w_quick = 205
j_getfield_quick = 206
j_putfield_quick = 207
j_getfield2_quick = 208
j_putfield2_quick = 209
j_getstatic_quick = 210
j_putstatic_quick = 211
j_getstatic2_quick = 212
j_putstatic2_quick = 213
j_invokevirtual_quick = 214
j_invokenonvirtual_quick = 215
j_invokesuper_quick = 216
j_invokestatic_quick = 217
j_invokeinterface_quick = 218
j_invokevirtualobject_quick = 219
j_invokeignored_quick = 220
j_new_quick = 221
j_anewarray_quick = 222
j_multianewarray_quick = 223
j_checkcast_quick = 224
j_instanceof_quick = 225
j_invokevirtual_quick_w = 226
j_getfield_quick_w = 227
j_putfield_quick_w = 228
j_quick_last = 229
name_quick = ctypes.c_uint32 # enum

# values for enumeration '_A2D27DEC506196B2AFD43577ED2E1BBE'
_A2D27DEC506196B2AFD43577ED2E1BBE__enumvalues = {
    0: 'ARM_null',
    1: 'ARM_ret',
    2: 'ARM_nop',
    3: 'ARM_b',
    4: 'ARM_bl',
    5: 'ARM_asr',
    6: 'ARM_lsl',
    7: 'ARM_lsr',
    8: 'ARM_ror',
    9: 'ARM_neg',
    10: 'ARM_and',
    11: 'ARM_eor',
    12: 'ARM_sub',
    13: 'ARM_rsb',
    14: 'ARM_add',
    15: 'ARM_adc',
    16: 'ARM_sbc',
    17: 'ARM_rsc',
    18: 'ARM_tst',
    19: 'ARM_teq',
    20: 'ARM_cmp',
    21: 'ARM_cmn',
    22: 'ARM_orr',
    23: 'ARM_mov',
    24: 'ARM_bic',
    25: 'ARM_mvn',
    26: 'ARM_mrs',
    27: 'ARM_msr',
    28: 'ARM_mul',
    29: 'ARM_mla',
    30: 'ARM_ldr',
    31: 'ARM_ldrpc',
    32: 'ARM_str',
    33: 'ARM_ldm',
    34: 'ARM_stm',
    35: 'ARM_swp',
    36: 'ARM_svc',
    37: 'ARM_smull',
    38: 'ARM_smlal',
    39: 'ARM_umull',
    40: 'ARM_umlal',
    41: 'ARM_bx',
    42: 'ARM_pop',
    43: 'ARM_push',
    44: 'ARM_adr',
    45: 'ARM_bkpt',
    46: 'ARM_blx1',
    47: 'ARM_blx2',
    48: 'ARM_clz',
    49: 'ARM_ldrd',
    50: 'ARM_pld',
    51: 'ARM_qadd',
    52: 'ARM_qdadd',
    53: 'ARM_qdsub',
    54: 'ARM_qsub',
    55: 'ARM_smlabb',
    56: 'ARM_smlatb',
    57: 'ARM_smlabt',
    58: 'ARM_smlatt',
    59: 'ARM_smlalbb',
    60: 'ARM_smlaltb',
    61: 'ARM_smlalbt',
    62: 'ARM_smlaltt',
    63: 'ARM_smlawb',
    64: 'ARM_smulwb',
    65: 'ARM_smlawt',
    66: 'ARM_smulwt',
    67: 'ARM_smulbb',
    68: 'ARM_smultb',
    69: 'ARM_smulbt',
    70: 'ARM_smultt',
    71: 'ARM_strd',
    72: 'xScale_mia',
    73: 'xScale_miaph',
    74: 'xScale_miabb',
    75: 'xScale_miabt',
    76: 'xScale_miatb',
    77: 'xScale_miatt',
    78: 'xScale_mar',
    79: 'xScale_mra',
    80: 'ARM_movl',
    81: 'ARM_adrl',
    82: 'ARM_swbkpt',
    83: 'ARM_cdp',
    84: 'ARM_cdp2',
    85: 'ARM_ldc',
    86: 'ARM_ldc2',
    87: 'ARM_stc',
    88: 'ARM_stc2',
    89: 'ARM_mrc',
    90: 'ARM_mrc2',
    91: 'ARM_mcr',
    92: 'ARM_mcr2',
    93: 'ARM_mcrr',
    94: 'ARM_mrrc',
    95: 'ARM_fabsd',
    96: 'ARM_fabss',
    97: 'ARM_faddd',
    98: 'ARM_fadds',
    99: 'ARM_fcmpd',
    100: 'ARM_fcmps',
    101: 'ARM_fcmped',
    102: 'ARM_fcmpes',
    103: 'ARM_fcmpezd',
    104: 'ARM_fcmpezs',
    105: 'ARM_fcmpzd',
    106: 'ARM_fcmpzs',
    107: 'ARM_fcpyd',
    108: 'ARM_fcpys',
    109: 'ARM_fcvtsd',
    110: 'ARM_fcvtds',
    111: 'ARM_fdivd',
    112: 'ARM_fdivs',
    113: 'ARM_fldd',
    114: 'ARM_flds',
    115: 'ARM_fldmd',
    116: 'ARM_fldms',
    117: 'ARM_fldmx',
    118: 'ARM_fmacd',
    119: 'ARM_fmacs',
    120: 'ARM_fmscd',
    121: 'ARM_fmscs',
    122: 'ARM_fmstat',
    123: 'ARM_fmuld',
    124: 'ARM_fmuls',
    125: 'ARM_fnegd',
    126: 'ARM_fnegs',
    127: 'ARM_fnmacd',
    128: 'ARM_fnmacs',
    129: 'ARM_fnmscd',
    130: 'ARM_fnmscs',
    131: 'ARM_fnmuld',
    132: 'ARM_fnmuls',
    133: 'ARM_fsitod',
    134: 'ARM_fsitos',
    135: 'ARM_fsqrtd',
    136: 'ARM_fsqrts',
    137: 'ARM_fstd',
    138: 'ARM_fsts',
    139: 'ARM_fstmd',
    140: 'ARM_fstms',
    141: 'ARM_fstmx',
    142: 'ARM_fsubd',
    143: 'ARM_fsubs',
    144: 'ARM_ftosid',
    145: 'ARM_ftosis',
    146: 'ARM_ftosizd',
    147: 'ARM_ftosizs',
    148: 'ARM_ftouid',
    149: 'ARM_ftouis',
    150: 'ARM_ftouizd',
    151: 'ARM_ftouizs',
    152: 'ARM_fuitod',
    153: 'ARM_fuitos',
    154: 'ARM_fmdhr',
    155: 'ARM_fmrdh',
    156: 'ARM_fmdlr',
    157: 'ARM_fmrdl',
    158: 'ARM_fmxr',
    159: 'ARM_fmrx',
    160: 'ARM_fmsr',
    161: 'ARM_fmrs',
    162: 'ARM_fmdrr',
    163: 'ARM_fmrrd',
    164: 'ARM_fmsrr',
    165: 'ARM_fmrrs',
    166: 'ARM_bxj',
    167: 'ARM_mcrr2',
    168: 'ARM_mrrc2',
    169: 'ARM_cps',
    170: 'ARM_cpsid',
    171: 'ARM_cpsie',
    172: 'ARM_ldrex',
    173: 'ARM_pkhbt',
    174: 'ARM_pkhtb',
    175: 'ARM_qadd16',
    176: 'ARM_qadd8',
    177: 'ARM_qaddsubx',
    178: 'ARM_qsub16',
    179: 'ARM_qsub8',
    180: 'ARM_qsubaddx',
    181: 'ARM_rev',
    182: 'ARM_rev16',
    183: 'ARM_revsh',
    184: 'ARM_rfe',
    185: 'ARM_sadd16',
    186: 'ARM_sadd8',
    187: 'ARM_saddsubx',
    188: 'ARM_sel',
    189: 'ARM_setend',
    190: 'ARM_shadd16',
    191: 'ARM_shadd8',
    192: 'ARM_shaddsubx',
    193: 'ARM_shsub16',
    194: 'ARM_shsub8',
    195: 'ARM_shsubaddx',
    196: 'ARM_smlad',
    197: 'ARM_smladx',
    198: 'ARM_smuad',
    199: 'ARM_smuadx',
    200: 'ARM_smlald',
    201: 'ARM_smlaldx',
    202: 'ARM_smlsd',
    203: 'ARM_smlsdx',
    204: 'ARM_smusd',
    205: 'ARM_smusdx',
    206: 'ARM_smlsld',
    207: 'ARM_smlsldx',
    208: 'ARM_smmla',
    209: 'ARM_smmlar',
    210: 'ARM_smmul',
    211: 'ARM_smmulr',
    212: 'ARM_smmls',
    213: 'ARM_smmlsr',
    214: 'ARM_srs',
    215: 'ARM_ssat',
    216: 'ARM_ssat16',
    217: 'ARM_ssub16',
    218: 'ARM_ssub8',
    219: 'ARM_ssubaddx',
    220: 'ARM_strex',
    221: 'ARM_sxtab',
    222: 'ARM_sxtb',
    223: 'ARM_sxtab16',
    224: 'ARM_sxtb16',
    225: 'ARM_sxtah',
    226: 'ARM_sxth',
    227: 'ARM_uadd16',
    228: 'ARM_uadd8',
    229: 'ARM_uaddsubx',
    230: 'ARM_uhadd16',
    231: 'ARM_uhadd8',
    232: 'ARM_uhaddsubx',
    233: 'ARM_uhsub16',
    234: 'ARM_uhsub8',
    235: 'ARM_uhsubaddx',
    236: 'ARM_umaal',
    237: 'ARM_uqadd16',
    238: 'ARM_uqadd8',
    239: 'ARM_uqaddsubx',
    240: 'ARM_uqsub16',
    241: 'ARM_uqsub8',
    242: 'ARM_uqsubaddx',
    243: 'ARM_usada8',
    244: 'ARM_usad8',
    245: 'ARM_usat',
    246: 'ARM_usat16',
    247: 'ARM_usub16',
    248: 'ARM_usub8',
    249: 'ARM_usubaddx',
    250: 'ARM_uxtab',
    251: 'ARM_uxtb',
    252: 'ARM_uxtab16',
    253: 'ARM_uxtb16',
    254: 'ARM_uxtah',
    255: 'ARM_uxth',
    256: 'ARM_clrex',
    257: 'ARM_ldrexb',
    258: 'ARM_ldrexd',
    259: 'ARM_ldrexh',
    260: 'ARM_strexb',
    261: 'ARM_strexd',
    262: 'ARM_strexh',
    263: 'ARM_yield',
    264: 'ARM_sev',
    265: 'ARM_wfe',
    266: 'ARM_wfi',
    267: 'ARM_smc',
    268: 'ARM_orn',
    269: 'ARM_movt',
    270: 'ARM_sbfx',
    271: 'ARM_ubfx',
    272: 'ARM_bfi',
    273: 'ARM_bfc',
    274: 'ARM_tbb',
    275: 'ARM_tbh',
    276: 'ARM_pli',
    277: 'ARM_rbit',
    278: 'ARM_it',
    279: 'ARM_mls',
    280: 'ARM_sdiv',
    281: 'ARM_udiv',
    282: 'ARM_cbz',
    283: 'ARM_cbnz',
    284: 'ARM_dsb',
    285: 'ARM_dmb',
    286: 'ARM_isb',
    287: 'ARM_dbg',
    288: 'ARM_und',
    289: 'ARM_rrx',
    290: 'ARM_enterx',
    291: 'ARM_leavex',
    292: 'ARM_chka',
    293: 'ARM_hb',
    294: 'ARM_hbl',
    295: 'ARM_hblp',
    296: 'ARM_hbp',
    297: 'ARM_vaba',
    298: 'ARM_vabal',
    299: 'ARM_vabd',
    300: 'ARM_vabdl',
    301: 'ARM_vabs',
    302: 'ARM_vacge',
    303: 'ARM_vacgt',
    304: 'ARM_vacle',
    305: 'ARM_vaclt',
    306: 'ARM_vadd',
    307: 'ARM_vaddhn',
    308: 'ARM_vaddl',
    309: 'ARM_vaddw',
    310: 'ARM_vand',
    311: 'ARM_vbic',
    312: 'ARM_vbif',
    313: 'ARM_vbit',
    314: 'ARM_vbsl',
    315: 'ARM_vceq',
    316: 'ARM_vcge',
    317: 'ARM_vcgt',
    318: 'ARM_vcle',
    319: 'ARM_vcls',
    320: 'ARM_vclt',
    321: 'ARM_vclz',
    322: 'ARM_vcmp',
    323: 'ARM_vcmpe',
    324: 'ARM_vcnt',
    325: 'ARM_vcvt',
    326: 'ARM_vcvtr',
    327: 'ARM_vcvtb',
    328: 'ARM_vcvtt',
    329: 'ARM_vdiv',
    330: 'ARM_vdup',
    331: 'ARM_veor',
    332: 'ARM_vext',
    333: 'ARM_vfma',
    334: 'ARM_vfms',
    335: 'ARM_vfnma',
    336: 'ARM_vfnms',
    337: 'ARM_vhadd',
    338: 'ARM_vhsub',
    339: 'ARM_vld1',
    340: 'ARM_vld2',
    341: 'ARM_vld3',
    342: 'ARM_vld4',
    343: 'ARM_vldm',
    344: 'ARM_vldr',
    345: 'ARM_vmax',
    346: 'ARM_vmin',
    347: 'ARM_vmla',
    348: 'ARM_vmlal',
    349: 'ARM_vmls',
    350: 'ARM_vmlsl',
    351: 'ARM_vmov',
    352: 'ARM_vmovl',
    353: 'ARM_vmovn',
    354: 'ARM_vmrs',
    355: 'ARM_vmsr',
    356: 'ARM_vmul',
    357: 'ARM_vmull',
    358: 'ARM_vmvn',
    359: 'ARM_vneg',
    360: 'ARM_vnmla',
    361: 'ARM_vnmls',
    362: 'ARM_vnmul',
    363: 'ARM_vorn',
    364: 'ARM_vorr',
    365: 'ARM_vpadal',
    366: 'ARM_vpadd',
    367: 'ARM_vpaddl',
    368: 'ARM_vpmax',
    369: 'ARM_vpmin',
    370: 'ARM_vpop',
    371: 'ARM_vpush',
    372: 'ARM_vqabs',
    373: 'ARM_vqadd',
    374: 'ARM_vqdmlal',
    375: 'ARM_vqdmlsl',
    376: 'ARM_vqdmulh',
    377: 'ARM_vqdmull',
    378: 'ARM_vqmovn',
    379: 'ARM_vqmovun',
    380: 'ARM_vqneg',
    381: 'ARM_vqrdmulh',
    382: 'ARM_vqrshl',
    383: 'ARM_vqrshrn',
    384: 'ARM_vqrshrun',
    385: 'ARM_vqshl',
    386: 'ARM_vqshlu',
    387: 'ARM_vqshrn',
    388: 'ARM_vqshrun',
    389: 'ARM_vqsub',
    390: 'ARM_vraddhn',
    391: 'ARM_vrecpe',
    392: 'ARM_vrecps',
    393: 'ARM_vrev16',
    394: 'ARM_vrev32',
    395: 'ARM_vrev64',
    396: 'ARM_vrhadd',
    397: 'ARM_vrshl',
    398: 'ARM_vrshr',
    399: 'ARM_vrshrn',
    400: 'ARM_vrsqrte',
    401: 'ARM_vrsqrts',
    402: 'ARM_vrsra',
    403: 'ARM_vrsubhn',
    404: 'ARM_vshl',
    405: 'ARM_vshll',
    406: 'ARM_vshr',
    407: 'ARM_vshrn',
    408: 'ARM_vsli',
    409: 'ARM_vsqrt',
    410: 'ARM_vsra',
    411: 'ARM_vsri',
    412: 'ARM_vst1',
    413: 'ARM_vst2',
    414: 'ARM_vst3',
    415: 'ARM_vst4',
    416: 'ARM_vstm',
    417: 'ARM_vstr',
    418: 'ARM_vsub',
    419: 'ARM_vsubhn',
    420: 'ARM_vsubl',
    421: 'ARM_vsubw',
    422: 'ARM_vswp',
    423: 'ARM_vtbl',
    424: 'ARM_vtbx',
    425: 'ARM_vtrn',
    426: 'ARM_vtst',
    427: 'ARM_vuzp',
    428: 'ARM_vzip',
    429: 'ARM_eret',
    430: 'ARM_hvc',
    431: 'ARM_lda',
    432: 'ARM_stl',
    433: 'ARM_ldaex',
    434: 'ARM_stlex',
    435: 'ARM_vsel',
    436: 'ARM_vmaxnm',
    437: 'ARM_vminnm',
    438: 'ARM_vcvta',
    439: 'ARM_vcvtn',
    440: 'ARM_vcvtp',
    441: 'ARM_vcvtm',
    442: 'ARM_vrintx',
    443: 'ARM_vrintr',
    444: 'ARM_vrintz',
    445: 'ARM_vrinta',
    446: 'ARM_vrintn',
    447: 'ARM_vrintp',
    448: 'ARM_vrintm',
    449: 'ARM_aesd',
    450: 'ARM_aese',
    451: 'ARM_aesimc',
    452: 'ARM_aesmc',
    453: 'ARM_sha1c',
    454: 'ARM_sha1m',
    455: 'ARM_sha1p',
    456: 'ARM_sha1h',
    457: 'ARM_sha1su0',
    458: 'ARM_sha1su1',
    459: 'ARM_sha256h',
    460: 'ARM_sha256h2',
    461: 'ARM_sha256su0',
    462: 'ARM_sha256su1',
    463: 'ARM_dcps1',
    464: 'ARM_dcps2',
    465: 'ARM_dcps3',
    466: 'ARM_hlt',
    467: 'ARM_sevl',
    468: 'ARM_tbz',
    469: 'ARM_tbnz',
    470: 'ARM_br',
    471: 'ARM_blr',
    472: 'ARM_ldur',
    473: 'ARM_stur',
    474: 'ARM_ldp',
    475: 'ARM_stp',
    476: 'ARM_ldnp',
    477: 'ARM_stnp',
    478: 'ARM_ldtr',
    479: 'ARM_sttr',
    480: 'ARM_ldxr',
    481: 'ARM_stxr',
    482: 'ARM_ldxp',
    483: 'ARM_stxp',
    484: 'ARM_ldar',
    485: 'ARM_stlr',
    486: 'ARM_ldaxr',
    487: 'ARM_stlxr',
    488: 'ARM_ldaxp',
    489: 'ARM_stlxp',
    490: 'ARM_prfm',
    491: 'ARM_prfum',
    492: 'ARM_movi',
    493: 'ARM_mvni',
    494: 'ARM_movz',
    495: 'ARM_movn',
    496: 'ARM_movk',
    497: 'ARM_adrp',
    498: 'ARM_bfm',
    499: 'ARM_sbfm',
    500: 'ARM_ubfm',
    501: 'ARM_bfxil',
    502: 'ARM_sbfiz',
    503: 'ARM_ubfiz',
    504: 'ARM_extr',
    505: 'ARM_sxtw',
    506: 'ARM_uxtw',
    507: 'ARM_eon',
    508: 'ARM_not',
    509: 'ARM_cls',
    510: 'ARM_rev32',
    511: 'ARM_csel',
    512: 'ARM_csinc',
    513: 'ARM_csinv',
    514: 'ARM_csneg',
    515: 'ARM_cset',
    516: 'ARM_csetm',
    517: 'ARM_cinc',
    518: 'ARM_cinv',
    519: 'ARM_cneg',
    520: 'ARM_ngc',
    521: 'ARM_ccmn',
    522: 'ARM_ccmp',
    523: 'ARM_madd',
    524: 'ARM_msub',
    525: 'ARM_mneg',
    526: 'ARM_smaddl',
    527: 'ARM_smsubl',
    528: 'ARM_smnegl',
    529: 'ARM_smulh',
    530: 'ARM_umaddl',
    531: 'ARM_umsubl',
    532: 'ARM_umnegl',
    533: 'ARM_umulh',
    534: 'ARM_drps',
    535: 'ARM_sys',
    536: 'ARM_sysl',
    537: 'ARM_ic',
    538: 'ARM_dc',
    539: 'ARM_at',
    540: 'ARM_tlbi',
    541: 'ARM_hint',
    542: 'ARM_brk',
    543: 'ARM_uaba',
    544: 'ARM_saba',
    545: 'ARM_uabal',
    546: 'ARM_uabal2',
    547: 'ARM_sabal',
    548: 'ARM_sabal2',
    549: 'ARM_uabd',
    550: 'ARM_sabd',
    551: 'ARM_fabd',
    552: 'ARM_uabdl',
    553: 'ARM_uabdl2',
    554: 'ARM_sabdl',
    555: 'ARM_sabdl2',
    556: 'ARM_abs',
    557: 'ARM_fabs',
    558: 'ARM_facge',
    559: 'ARM_facgt',
    560: 'ARM_facle',
    561: 'ARM_faclt',
    562: 'ARM_fadd',
    563: 'ARM_addhn',
    564: 'ARM_addhn2',
    565: 'ARM_uaddl',
    566: 'ARM_uaddl2',
    567: 'ARM_saddl',
    568: 'ARM_saddl2',
    569: 'ARM_uaddw',
    570: 'ARM_uaddw2',
    571: 'ARM_saddw',
    572: 'ARM_saddw2',
    573: 'ARM_bif',
    574: 'ARM_bit',
    575: 'ARM_bsl',
    576: 'ARM_cmeq',
    577: 'ARM_fcmeq',
    578: 'ARM_cmhs',
    579: 'ARM_cmge',
    580: 'ARM_fcmge',
    581: 'ARM_cmhi',
    582: 'ARM_cmgt',
    583: 'ARM_fcmgt',
    584: 'ARM_cmls',
    585: 'ARM_cmle',
    586: 'ARM_fcmle',
    587: 'ARM_cmlo',
    588: 'ARM_cmlt',
    589: 'ARM_fcmlt',
    590: 'ARM_fcmp',
    591: 'ARM_fcmpe',
    592: 'ARM_fccmp',
    593: 'ARM_fccmpe',
    594: 'ARM_fcsel',
    595: 'ARM_cnt',
    596: 'ARM_fcvt',
    597: 'ARM_fcvtzs',
    598: 'ARM_fcvtas',
    599: 'ARM_fcvtns',
    600: 'ARM_fcvtps',
    601: 'ARM_fcvtms',
    602: 'ARM_fcvtzu',
    603: 'ARM_fcvtau',
    604: 'ARM_fcvtnu',
    605: 'ARM_fcvtpu',
    606: 'ARM_fcvtmu',
    607: 'ARM_ucvtf',
    608: 'ARM_scvtf',
    609: 'ARM_fcvtn',
    610: 'ARM_fcvtn2',
    611: 'ARM_fcvtl',
    612: 'ARM_fcvtl2',
    613: 'ARM_fcvtxn',
    614: 'ARM_fcvtxn2',
    615: 'ARM_frinta',
    616: 'ARM_frinti',
    617: 'ARM_frintm',
    618: 'ARM_frintn',
    619: 'ARM_frintp',
    620: 'ARM_frintx',
    621: 'ARM_frintz',
    622: 'ARM_fmadd',
    623: 'ARM_fmsub',
    624: 'ARM_fnmadd',
    625: 'ARM_fnmsub',
    626: 'ARM_fdiv',
    627: 'ARM_dup',
    628: 'ARM_ins',
    629: 'ARM_ext',
    630: 'ARM_uhadd',
    631: 'ARM_shadd',
    632: 'ARM_uhsub',
    633: 'ARM_shsub',
    634: 'ARM_ld1',
    635: 'ARM_ld2',
    636: 'ARM_ld3',
    637: 'ARM_ld4',
    638: 'ARM_ld1r',
    639: 'ARM_ld2r',
    640: 'ARM_ld3r',
    641: 'ARM_ld4r',
    642: 'ARM_umax',
    643: 'ARM_smax',
    644: 'ARM_fmax',
    645: 'ARM_fmaxnm',
    646: 'ARM_umin',
    647: 'ARM_smin',
    648: 'ARM_fmin',
    649: 'ARM_fminnm',
    650: 'ARM_fmla',
    651: 'ARM_umlal2',
    652: 'ARM_smlal2',
    653: 'ARM_fmls',
    654: 'ARM_umlsl',
    655: 'ARM_umlsl2',
    656: 'ARM_smlsl',
    657: 'ARM_smlsl2',
    658: 'ARM_umov',
    659: 'ARM_smov',
    660: 'ARM_fmov',
    661: 'ARM_uxtl',
    662: 'ARM_uxtl2',
    663: 'ARM_sxtl',
    664: 'ARM_sxtl2',
    665: 'ARM_xtn',
    666: 'ARM_xtn2',
    667: 'ARM_fmul',
    668: 'ARM_pmul',
    669: 'ARM_fmulx',
    670: 'ARM_fnmul',
    671: 'ARM_umull2',
    672: 'ARM_smull2',
    673: 'ARM_pmull',
    674: 'ARM_pmull2',
    675: 'ARM_fneg',
    676: 'ARM_uadalp',
    677: 'ARM_sadalp',
    678: 'ARM_addp',
    679: 'ARM_faddp',
    680: 'ARM_uaddlp',
    681: 'ARM_saddlp',
    682: 'ARM_umaxp',
    683: 'ARM_smaxp',
    684: 'ARM_fmaxp',
    685: 'ARM_fmaxnmp',
    686: 'ARM_uminp',
    687: 'ARM_sminp',
    688: 'ARM_fminp',
    689: 'ARM_fminnmp',
    690: 'ARM_sqabs',
    691: 'ARM_uqadd',
    692: 'ARM_sqadd',
    693: 'ARM_suqadd',
    694: 'ARM_usqadd',
    695: 'ARM_sqdmlal',
    696: 'ARM_sqdmlal2',
    697: 'ARM_sqdmlsl',
    698: 'ARM_sqdmlsl2',
    699: 'ARM_sqdmulh',
    700: 'ARM_sqdmull',
    701: 'ARM_sqdmull2',
    702: 'ARM_uqxtn',
    703: 'ARM_uqxtn2',
    704: 'ARM_sqxtn',
    705: 'ARM_sqxtn2',
    706: 'ARM_sqxtun',
    707: 'ARM_sqxtun2',
    708: 'ARM_sqneg',
    709: 'ARM_sqrdmulh',
    710: 'ARM_uqrshl',
    711: 'ARM_sqrshl',
    712: 'ARM_uqrshrn',
    713: 'ARM_uqrshrn2',
    714: 'ARM_sqrshrn',
    715: 'ARM_sqrshrn2',
    716: 'ARM_sqrshrun',
    717: 'ARM_sqrshrun2',
    718: 'ARM_uqshl',
    719: 'ARM_sqshl',
    720: 'ARM_sqshlu',
    721: 'ARM_uqshrn',
    722: 'ARM_uqshrn2',
    723: 'ARM_sqshrn',
    724: 'ARM_sqshrn2',
    725: 'ARM_sqshrun',
    726: 'ARM_sqshrun2',
    727: 'ARM_uqsub',
    728: 'ARM_sqsub',
    729: 'ARM_raddhn',
    730: 'ARM_raddhn2',
    731: 'ARM_urecpe',
    732: 'ARM_frecpe',
    733: 'ARM_frecps',
    734: 'ARM_frecpx',
    735: 'ARM_rev64',
    736: 'ARM_urhadd',
    737: 'ARM_srhadd',
    738: 'ARM_urshl',
    739: 'ARM_srshl',
    740: 'ARM_urshr',
    741: 'ARM_srshr',
    742: 'ARM_rshrn',
    743: 'ARM_rshrn2',
    744: 'ARM_ursqrte',
    745: 'ARM_frsqrte',
    746: 'ARM_frsqrts',
    747: 'ARM_ursra',
    748: 'ARM_srsra',
    749: 'ARM_rsubhn',
    750: 'ARM_rsubhn2',
    751: 'ARM_ushl',
    752: 'ARM_sshl',
    753: 'ARM_ushll',
    754: 'ARM_ushll2',
    755: 'ARM_sshll',
    756: 'ARM_sshll2',
    757: 'ARM_ushr',
    758: 'ARM_sshr',
    759: 'ARM_shrn',
    760: 'ARM_shrn2',
    761: 'ARM_shl',
    762: 'ARM_shll',
    763: 'ARM_shll2',
    764: 'ARM_sli',
    765: 'ARM_fsqrt',
    766: 'ARM_usra',
    767: 'ARM_ssra',
    768: 'ARM_sri',
    769: 'ARM_st1',
    770: 'ARM_st2',
    771: 'ARM_st3',
    772: 'ARM_st4',
    773: 'ARM_fsub',
    774: 'ARM_subhn',
    775: 'ARM_subhn2',
    776: 'ARM_usubl',
    777: 'ARM_usubl2',
    778: 'ARM_ssubl',
    779: 'ARM_ssubl2',
    780: 'ARM_usubw',
    781: 'ARM_usubw2',
    782: 'ARM_ssubw',
    783: 'ARM_ssubw2',
    784: 'ARM_tbl',
    785: 'ARM_tbx',
    786: 'ARM_trn1',
    787: 'ARM_trn2',
    788: 'ARM_cmtst',
    789: 'ARM_uzp1',
    790: 'ARM_uzp2',
    791: 'ARM_zip1',
    792: 'ARM_zip2',
    793: 'ARM_addv',
    794: 'ARM_uaddlv',
    795: 'ARM_saddlv',
    796: 'ARM_umaxv',
    797: 'ARM_smaxv',
    798: 'ARM_fmaxv',
    799: 'ARM_fmaxnmv',
    800: 'ARM_uminv',
    801: 'ARM_sminv',
    802: 'ARM_fminv',
    803: 'ARM_fminnmv',
    804: 'ARM_swpl',
    805: 'ARM_swpa',
    806: 'ARM_swpal',
    807: 'ARM_ldapr',
    808: 'ARM_ldadd',
    809: 'ARM_ldaddl',
    810: 'ARM_ldadda',
    811: 'ARM_ldaddal',
    812: 'ARM_stadd',
    813: 'ARM_staddl',
    814: 'ARM_ldclr',
    815: 'ARM_ldclrl',
    816: 'ARM_ldclra',
    817: 'ARM_ldclral',
    818: 'ARM_stclr',
    819: 'ARM_stclrl',
    820: 'ARM_ldeor',
    821: 'ARM_ldeorl',
    822: 'ARM_ldeora',
    823: 'ARM_ldeoral',
    824: 'ARM_steor',
    825: 'ARM_steorl',
    826: 'ARM_ldset',
    827: 'ARM_ldsetl',
    828: 'ARM_ldseta',
    829: 'ARM_ldsetal',
    830: 'ARM_stset',
    831: 'ARM_stsetl',
    832: 'ARM_ldsmax',
    833: 'ARM_ldsmaxl',
    834: 'ARM_ldsmaxa',
    835: 'ARM_ldsmaxal',
    836: 'ARM_stsmax',
    837: 'ARM_stsmaxl',
    838: 'ARM_ldsmin',
    839: 'ARM_ldsminl',
    840: 'ARM_ldsmina',
    841: 'ARM_ldsminal',
    842: 'ARM_stsmin',
    843: 'ARM_stsminl',
    844: 'ARM_ldumax',
    845: 'ARM_ldumaxl',
    846: 'ARM_ldumaxa',
    847: 'ARM_ldumaxal',
    848: 'ARM_stumax',
    849: 'ARM_stumaxl',
    850: 'ARM_ldumin',
    851: 'ARM_lduminl',
    852: 'ARM_ldumina',
    853: 'ARM_lduminal',
    854: 'ARM_stumin',
    855: 'ARM_stuminl',
    856: 'ARM_cas',
    857: 'ARM_casl',
    858: 'ARM_casa',
    859: 'ARM_casal',
    860: 'ARM_casp',
    861: 'ARM_caspl',
    862: 'ARM_caspa',
    863: 'ARM_caspal',
    864: 'ARM_ldlar',
    865: 'ARM_stllr',
    866: 'ARM_sqrdmlah',
    867: 'ARM_sqrdmlsh',
    868: 'ARM_pac',
    869: 'ARM_aut',
    870: 'ARM_xpac',
    871: 'ARM_ldrd2',
    872: 'ARM_strd2',
    873: 'ARM_crc32',
    874: 'ARM_crc32c',
    875: 'ARM_tt',
    876: 'ARM_tta',
    877: 'ARM_sg',
    878: 'ARM_vlldm',
    879: 'ARM_vlstm',
    880: 'ARM_pldw',
    881: 'ARM_vqrdmlah',
    882: 'ARM_vqrdmlsh',
    883: 'ARM_vmovx',
    884: 'ARM_vins',
    885: 'ARM_vjcvt',
    886: 'ARM_fjcvtzs',
    887: 'ARM_ldapur',
    888: 'ARM_stlur',
    889: 'ARM_cfinv',
    890: 'ARM_rmif',
    891: 'ARM_setf8',
    892: 'ARM_setf16',
    893: 'ARM_xaflag',
    894: 'ARM_axflag',
    895: 'ARM_addg',
    896: 'ARM_subg',
    897: 'ARM_subp',
    898: 'ARM_cmpp',
    899: 'ARM_irg',
    900: 'ARM_gmi',
    901: 'ARM_stg',
    902: 'ARM_stzg',
    903: 'ARM_stzgm',
    904: 'ARM_st2g',
    905: 'ARM_stz2g',
    906: 'ARM_stgm',
    907: 'ARM_stgp',
    908: 'ARM_ldg',
    909: 'ARM_ldgm',
    910: 'ARM_bti',
    911: 'ARM_sb',
    912: 'ARM_ssbb',
    913: 'ARM_pssbb',
    914: 'ARM_frint32x',
    915: 'ARM_frint32z',
    916: 'ARM_frint64x',
    917: 'ARM_frint64z',
    918: 'ARM_last',
}
ARM_null = 0
ARM_ret = 1
ARM_nop = 2
ARM_b = 3
ARM_bl = 4
ARM_asr = 5
ARM_lsl = 6
ARM_lsr = 7
ARM_ror = 8
ARM_neg = 9
ARM_and = 10
ARM_eor = 11
ARM_sub = 12
ARM_rsb = 13
ARM_add = 14
ARM_adc = 15
ARM_sbc = 16
ARM_rsc = 17
ARM_tst = 18
ARM_teq = 19
ARM_cmp = 20
ARM_cmn = 21
ARM_orr = 22
ARM_mov = 23
ARM_bic = 24
ARM_mvn = 25
ARM_mrs = 26
ARM_msr = 27
ARM_mul = 28
ARM_mla = 29
ARM_ldr = 30
ARM_ldrpc = 31
ARM_str = 32
ARM_ldm = 33
ARM_stm = 34
ARM_swp = 35
ARM_svc = 36
ARM_smull = 37
ARM_smlal = 38
ARM_umull = 39
ARM_umlal = 40
ARM_bx = 41
ARM_pop = 42
ARM_push = 43
ARM_adr = 44
ARM_bkpt = 45
ARM_blx1 = 46
ARM_blx2 = 47
ARM_clz = 48
ARM_ldrd = 49
ARM_pld = 50
ARM_qadd = 51
ARM_qdadd = 52
ARM_qdsub = 53
ARM_qsub = 54
ARM_smlabb = 55
ARM_smlatb = 56
ARM_smlabt = 57
ARM_smlatt = 58
ARM_smlalbb = 59
ARM_smlaltb = 60
ARM_smlalbt = 61
ARM_smlaltt = 62
ARM_smlawb = 63
ARM_smulwb = 64
ARM_smlawt = 65
ARM_smulwt = 66
ARM_smulbb = 67
ARM_smultb = 68
ARM_smulbt = 69
ARM_smultt = 70
ARM_strd = 71
xScale_mia = 72
xScale_miaph = 73
xScale_miabb = 74
xScale_miabt = 75
xScale_miatb = 76
xScale_miatt = 77
xScale_mar = 78
xScale_mra = 79
ARM_movl = 80
ARM_adrl = 81
ARM_swbkpt = 82
ARM_cdp = 83
ARM_cdp2 = 84
ARM_ldc = 85
ARM_ldc2 = 86
ARM_stc = 87
ARM_stc2 = 88
ARM_mrc = 89
ARM_mrc2 = 90
ARM_mcr = 91
ARM_mcr2 = 92
ARM_mcrr = 93
ARM_mrrc = 94
ARM_fabsd = 95
ARM_fabss = 96
ARM_faddd = 97
ARM_fadds = 98
ARM_fcmpd = 99
ARM_fcmps = 100
ARM_fcmped = 101
ARM_fcmpes = 102
ARM_fcmpezd = 103
ARM_fcmpezs = 104
ARM_fcmpzd = 105
ARM_fcmpzs = 106
ARM_fcpyd = 107
ARM_fcpys = 108
ARM_fcvtsd = 109
ARM_fcvtds = 110
ARM_fdivd = 111
ARM_fdivs = 112
ARM_fldd = 113
ARM_flds = 114
ARM_fldmd = 115
ARM_fldms = 116
ARM_fldmx = 117
ARM_fmacd = 118
ARM_fmacs = 119
ARM_fmscd = 120
ARM_fmscs = 121
ARM_fmstat = 122
ARM_fmuld = 123
ARM_fmuls = 124
ARM_fnegd = 125
ARM_fnegs = 126
ARM_fnmacd = 127
ARM_fnmacs = 128
ARM_fnmscd = 129
ARM_fnmscs = 130
ARM_fnmuld = 131
ARM_fnmuls = 132
ARM_fsitod = 133
ARM_fsitos = 134
ARM_fsqrtd = 135
ARM_fsqrts = 136
ARM_fstd = 137
ARM_fsts = 138
ARM_fstmd = 139
ARM_fstms = 140
ARM_fstmx = 141
ARM_fsubd = 142
ARM_fsubs = 143
ARM_ftosid = 144
ARM_ftosis = 145
ARM_ftosizd = 146
ARM_ftosizs = 147
ARM_ftouid = 148
ARM_ftouis = 149
ARM_ftouizd = 150
ARM_ftouizs = 151
ARM_fuitod = 152
ARM_fuitos = 153
ARM_fmdhr = 154
ARM_fmrdh = 155
ARM_fmdlr = 156
ARM_fmrdl = 157
ARM_fmxr = 158
ARM_fmrx = 159
ARM_fmsr = 160
ARM_fmrs = 161
ARM_fmdrr = 162
ARM_fmrrd = 163
ARM_fmsrr = 164
ARM_fmrrs = 165
ARM_bxj = 166
ARM_mcrr2 = 167
ARM_mrrc2 = 168
ARM_cps = 169
ARM_cpsid = 170
ARM_cpsie = 171
ARM_ldrex = 172
ARM_pkhbt = 173
ARM_pkhtb = 174
ARM_qadd16 = 175
ARM_qadd8 = 176
ARM_qaddsubx = 177
ARM_qsub16 = 178
ARM_qsub8 = 179
ARM_qsubaddx = 180
ARM_rev = 181
ARM_rev16 = 182
ARM_revsh = 183
ARM_rfe = 184
ARM_sadd16 = 185
ARM_sadd8 = 186
ARM_saddsubx = 187
ARM_sel = 188
ARM_setend = 189
ARM_shadd16 = 190
ARM_shadd8 = 191
ARM_shaddsubx = 192
ARM_shsub16 = 193
ARM_shsub8 = 194
ARM_shsubaddx = 195
ARM_smlad = 196
ARM_smladx = 197
ARM_smuad = 198
ARM_smuadx = 199
ARM_smlald = 200
ARM_smlaldx = 201
ARM_smlsd = 202
ARM_smlsdx = 203
ARM_smusd = 204
ARM_smusdx = 205
ARM_smlsld = 206
ARM_smlsldx = 207
ARM_smmla = 208
ARM_smmlar = 209
ARM_smmul = 210
ARM_smmulr = 211
ARM_smmls = 212
ARM_smmlsr = 213
ARM_srs = 214
ARM_ssat = 215
ARM_ssat16 = 216
ARM_ssub16 = 217
ARM_ssub8 = 218
ARM_ssubaddx = 219
ARM_strex = 220
ARM_sxtab = 221
ARM_sxtb = 222
ARM_sxtab16 = 223
ARM_sxtb16 = 224
ARM_sxtah = 225
ARM_sxth = 226
ARM_uadd16 = 227
ARM_uadd8 = 228
ARM_uaddsubx = 229
ARM_uhadd16 = 230
ARM_uhadd8 = 231
ARM_uhaddsubx = 232
ARM_uhsub16 = 233
ARM_uhsub8 = 234
ARM_uhsubaddx = 235
ARM_umaal = 236
ARM_uqadd16 = 237
ARM_uqadd8 = 238
ARM_uqaddsubx = 239
ARM_uqsub16 = 240
ARM_uqsub8 = 241
ARM_uqsubaddx = 242
ARM_usada8 = 243
ARM_usad8 = 244
ARM_usat = 245
ARM_usat16 = 246
ARM_usub16 = 247
ARM_usub8 = 248
ARM_usubaddx = 249
ARM_uxtab = 250
ARM_uxtb = 251
ARM_uxtab16 = 252
ARM_uxtb16 = 253
ARM_uxtah = 254
ARM_uxth = 255
ARM_clrex = 256
ARM_ldrexb = 257
ARM_ldrexd = 258
ARM_ldrexh = 259
ARM_strexb = 260
ARM_strexd = 261
ARM_strexh = 262
ARM_yield = 263
ARM_sev = 264
ARM_wfe = 265
ARM_wfi = 266
ARM_smc = 267
ARM_orn = 268
ARM_movt = 269
ARM_sbfx = 270
ARM_ubfx = 271
ARM_bfi = 272
ARM_bfc = 273
ARM_tbb = 274
ARM_tbh = 275
ARM_pli = 276
ARM_rbit = 277
ARM_it = 278
ARM_mls = 279
ARM_sdiv = 280
ARM_udiv = 281
ARM_cbz = 282
ARM_cbnz = 283
ARM_dsb = 284
ARM_dmb = 285
ARM_isb = 286
ARM_dbg = 287
ARM_und = 288
ARM_rrx = 289
ARM_enterx = 290
ARM_leavex = 291
ARM_chka = 292
ARM_hb = 293
ARM_hbl = 294
ARM_hblp = 295
ARM_hbp = 296
ARM_vaba = 297
ARM_vabal = 298
ARM_vabd = 299
ARM_vabdl = 300
ARM_vabs = 301
ARM_vacge = 302
ARM_vacgt = 303
ARM_vacle = 304
ARM_vaclt = 305
ARM_vadd = 306
ARM_vaddhn = 307
ARM_vaddl = 308
ARM_vaddw = 309
ARM_vand = 310
ARM_vbic = 311
ARM_vbif = 312
ARM_vbit = 313
ARM_vbsl = 314
ARM_vceq = 315
ARM_vcge = 316
ARM_vcgt = 317
ARM_vcle = 318
ARM_vcls = 319
ARM_vclt = 320
ARM_vclz = 321
ARM_vcmp = 322
ARM_vcmpe = 323
ARM_vcnt = 324
ARM_vcvt = 325
ARM_vcvtr = 326
ARM_vcvtb = 327
ARM_vcvtt = 328
ARM_vdiv = 329
ARM_vdup = 330
ARM_veor = 331
ARM_vext = 332
ARM_vfma = 333
ARM_vfms = 334
ARM_vfnma = 335
ARM_vfnms = 336
ARM_vhadd = 337
ARM_vhsub = 338
ARM_vld1 = 339
ARM_vld2 = 340
ARM_vld3 = 341
ARM_vld4 = 342
ARM_vldm = 343
ARM_vldr = 344
ARM_vmax = 345
ARM_vmin = 346
ARM_vmla = 347
ARM_vmlal = 348
ARM_vmls = 349
ARM_vmlsl = 350
ARM_vmov = 351
ARM_vmovl = 352
ARM_vmovn = 353
ARM_vmrs = 354
ARM_vmsr = 355
ARM_vmul = 356
ARM_vmull = 357
ARM_vmvn = 358
ARM_vneg = 359
ARM_vnmla = 360
ARM_vnmls = 361
ARM_vnmul = 362
ARM_vorn = 363
ARM_vorr = 364
ARM_vpadal = 365
ARM_vpadd = 366
ARM_vpaddl = 367
ARM_vpmax = 368
ARM_vpmin = 369
ARM_vpop = 370
ARM_vpush = 371
ARM_vqabs = 372
ARM_vqadd = 373
ARM_vqdmlal = 374
ARM_vqdmlsl = 375
ARM_vqdmulh = 376
ARM_vqdmull = 377
ARM_vqmovn = 378
ARM_vqmovun = 379
ARM_vqneg = 380
ARM_vqrdmulh = 381
ARM_vqrshl = 382
ARM_vqrshrn = 383
ARM_vqrshrun = 384
ARM_vqshl = 385
ARM_vqshlu = 386
ARM_vqshrn = 387
ARM_vqshrun = 388
ARM_vqsub = 389
ARM_vraddhn = 390
ARM_vrecpe = 391
ARM_vrecps = 392
ARM_vrev16 = 393
ARM_vrev32 = 394
ARM_vrev64 = 395
ARM_vrhadd = 396
ARM_vrshl = 397
ARM_vrshr = 398
ARM_vrshrn = 399
ARM_vrsqrte = 400
ARM_vrsqrts = 401
ARM_vrsra = 402
ARM_vrsubhn = 403
ARM_vshl = 404
ARM_vshll = 405
ARM_vshr = 406
ARM_vshrn = 407
ARM_vsli = 408
ARM_vsqrt = 409
ARM_vsra = 410
ARM_vsri = 411
ARM_vst1 = 412
ARM_vst2 = 413
ARM_vst3 = 414
ARM_vst4 = 415
ARM_vstm = 416
ARM_vstr = 417
ARM_vsub = 418
ARM_vsubhn = 419
ARM_vsubl = 420
ARM_vsubw = 421
ARM_vswp = 422
ARM_vtbl = 423
ARM_vtbx = 424
ARM_vtrn = 425
ARM_vtst = 426
ARM_vuzp = 427
ARM_vzip = 428
ARM_eret = 429
ARM_hvc = 430
ARM_lda = 431
ARM_stl = 432
ARM_ldaex = 433
ARM_stlex = 434
ARM_vsel = 435
ARM_vmaxnm = 436
ARM_vminnm = 437
ARM_vcvta = 438
ARM_vcvtn = 439
ARM_vcvtp = 440
ARM_vcvtm = 441
ARM_vrintx = 442
ARM_vrintr = 443
ARM_vrintz = 444
ARM_vrinta = 445
ARM_vrintn = 446
ARM_vrintp = 447
ARM_vrintm = 448
ARM_aesd = 449
ARM_aese = 450
ARM_aesimc = 451
ARM_aesmc = 452
ARM_sha1c = 453
ARM_sha1m = 454
ARM_sha1p = 455
ARM_sha1h = 456
ARM_sha1su0 = 457
ARM_sha1su1 = 458
ARM_sha256h = 459
ARM_sha256h2 = 460
ARM_sha256su0 = 461
ARM_sha256su1 = 462
ARM_dcps1 = 463
ARM_dcps2 = 464
ARM_dcps3 = 465
ARM_hlt = 466
ARM_sevl = 467
ARM_tbz = 468
ARM_tbnz = 469
ARM_br = 470
ARM_blr = 471
ARM_ldur = 472
ARM_stur = 473
ARM_ldp = 474
ARM_stp = 475
ARM_ldnp = 476
ARM_stnp = 477
ARM_ldtr = 478
ARM_sttr = 479
ARM_ldxr = 480
ARM_stxr = 481
ARM_ldxp = 482
ARM_stxp = 483
ARM_ldar = 484
ARM_stlr = 485
ARM_ldaxr = 486
ARM_stlxr = 487
ARM_ldaxp = 488
ARM_stlxp = 489
ARM_prfm = 490
ARM_prfum = 491
ARM_movi = 492
ARM_mvni = 493
ARM_movz = 494
ARM_movn = 495
ARM_movk = 496
ARM_adrp = 497
ARM_bfm = 498
ARM_sbfm = 499
ARM_ubfm = 500
ARM_bfxil = 501
ARM_sbfiz = 502
ARM_ubfiz = 503
ARM_extr = 504
ARM_sxtw = 505
ARM_uxtw = 506
ARM_eon = 507
ARM_not = 508
ARM_cls = 509
ARM_rev32 = 510
ARM_csel = 511
ARM_csinc = 512
ARM_csinv = 513
ARM_csneg = 514
ARM_cset = 515
ARM_csetm = 516
ARM_cinc = 517
ARM_cinv = 518
ARM_cneg = 519
ARM_ngc = 520
ARM_ccmn = 521
ARM_ccmp = 522
ARM_madd = 523
ARM_msub = 524
ARM_mneg = 525
ARM_smaddl = 526
ARM_smsubl = 527
ARM_smnegl = 528
ARM_smulh = 529
ARM_umaddl = 530
ARM_umsubl = 531
ARM_umnegl = 532
ARM_umulh = 533
ARM_drps = 534
ARM_sys = 535
ARM_sysl = 536
ARM_ic = 537
ARM_dc = 538
ARM_at = 539
ARM_tlbi = 540
ARM_hint = 541
ARM_brk = 542
ARM_uaba = 543
ARM_saba = 544
ARM_uabal = 545
ARM_uabal2 = 546
ARM_sabal = 547
ARM_sabal2 = 548
ARM_uabd = 549
ARM_sabd = 550
ARM_fabd = 551
ARM_uabdl = 552
ARM_uabdl2 = 553
ARM_sabdl = 554
ARM_sabdl2 = 555
ARM_abs = 556
ARM_fabs = 557
ARM_facge = 558
ARM_facgt = 559
ARM_facle = 560
ARM_faclt = 561
ARM_fadd = 562
ARM_addhn = 563
ARM_addhn2 = 564
ARM_uaddl = 565
ARM_uaddl2 = 566
ARM_saddl = 567
ARM_saddl2 = 568
ARM_uaddw = 569
ARM_uaddw2 = 570
ARM_saddw = 571
ARM_saddw2 = 572
ARM_bif = 573
ARM_bit = 574
ARM_bsl = 575
ARM_cmeq = 576
ARM_fcmeq = 577
ARM_cmhs = 578
ARM_cmge = 579
ARM_fcmge = 580
ARM_cmhi = 581
ARM_cmgt = 582
ARM_fcmgt = 583
ARM_cmls = 584
ARM_cmle = 585
ARM_fcmle = 586
ARM_cmlo = 587
ARM_cmlt = 588
ARM_fcmlt = 589
ARM_fcmp = 590
ARM_fcmpe = 591
ARM_fccmp = 592
ARM_fccmpe = 593
ARM_fcsel = 594
ARM_cnt = 595
ARM_fcvt = 596
ARM_fcvtzs = 597
ARM_fcvtas = 598
ARM_fcvtns = 599
ARM_fcvtps = 600
ARM_fcvtms = 601
ARM_fcvtzu = 602
ARM_fcvtau = 603
ARM_fcvtnu = 604
ARM_fcvtpu = 605
ARM_fcvtmu = 606
ARM_ucvtf = 607
ARM_scvtf = 608
ARM_fcvtn = 609
ARM_fcvtn2 = 610
ARM_fcvtl = 611
ARM_fcvtl2 = 612
ARM_fcvtxn = 613
ARM_fcvtxn2 = 614
ARM_frinta = 615
ARM_frinti = 616
ARM_frintm = 617
ARM_frintn = 618
ARM_frintp = 619
ARM_frintx = 620
ARM_frintz = 621
ARM_fmadd = 622
ARM_fmsub = 623
ARM_fnmadd = 624
ARM_fnmsub = 625
ARM_fdiv = 626
ARM_dup = 627
ARM_ins = 628
ARM_ext = 629
ARM_uhadd = 630
ARM_shadd = 631
ARM_uhsub = 632
ARM_shsub = 633
ARM_ld1 = 634
ARM_ld2 = 635
ARM_ld3 = 636
ARM_ld4 = 637
ARM_ld1r = 638
ARM_ld2r = 639
ARM_ld3r = 640
ARM_ld4r = 641
ARM_umax = 642
ARM_smax = 643
ARM_fmax = 644
ARM_fmaxnm = 645
ARM_umin = 646
ARM_smin = 647
ARM_fmin = 648
ARM_fminnm = 649
ARM_fmla = 650
ARM_umlal2 = 651
ARM_smlal2 = 652
ARM_fmls = 653
ARM_umlsl = 654
ARM_umlsl2 = 655
ARM_smlsl = 656
ARM_smlsl2 = 657
ARM_umov = 658
ARM_smov = 659
ARM_fmov = 660
ARM_uxtl = 661
ARM_uxtl2 = 662
ARM_sxtl = 663
ARM_sxtl2 = 664
ARM_xtn = 665
ARM_xtn2 = 666
ARM_fmul = 667
ARM_pmul = 668
ARM_fmulx = 669
ARM_fnmul = 670
ARM_umull2 = 671
ARM_smull2 = 672
ARM_pmull = 673
ARM_pmull2 = 674
ARM_fneg = 675
ARM_uadalp = 676
ARM_sadalp = 677
ARM_addp = 678
ARM_faddp = 679
ARM_uaddlp = 680
ARM_saddlp = 681
ARM_umaxp = 682
ARM_smaxp = 683
ARM_fmaxp = 684
ARM_fmaxnmp = 685
ARM_uminp = 686
ARM_sminp = 687
ARM_fminp = 688
ARM_fminnmp = 689
ARM_sqabs = 690
ARM_uqadd = 691
ARM_sqadd = 692
ARM_suqadd = 693
ARM_usqadd = 694
ARM_sqdmlal = 695
ARM_sqdmlal2 = 696
ARM_sqdmlsl = 697
ARM_sqdmlsl2 = 698
ARM_sqdmulh = 699
ARM_sqdmull = 700
ARM_sqdmull2 = 701
ARM_uqxtn = 702
ARM_uqxtn2 = 703
ARM_sqxtn = 704
ARM_sqxtn2 = 705
ARM_sqxtun = 706
ARM_sqxtun2 = 707
ARM_sqneg = 708
ARM_sqrdmulh = 709
ARM_uqrshl = 710
ARM_sqrshl = 711
ARM_uqrshrn = 712
ARM_uqrshrn2 = 713
ARM_sqrshrn = 714
ARM_sqrshrn2 = 715
ARM_sqrshrun = 716
ARM_sqrshrun2 = 717
ARM_uqshl = 718
ARM_sqshl = 719
ARM_sqshlu = 720
ARM_uqshrn = 721
ARM_uqshrn2 = 722
ARM_sqshrn = 723
ARM_sqshrn2 = 724
ARM_sqshrun = 725
ARM_sqshrun2 = 726
ARM_uqsub = 727
ARM_sqsub = 728
ARM_raddhn = 729
ARM_raddhn2 = 730
ARM_urecpe = 731
ARM_frecpe = 732
ARM_frecps = 733
ARM_frecpx = 734
ARM_rev64 = 735
ARM_urhadd = 736
ARM_srhadd = 737
ARM_urshl = 738
ARM_srshl = 739
ARM_urshr = 740
ARM_srshr = 741
ARM_rshrn = 742
ARM_rshrn2 = 743
ARM_ursqrte = 744
ARM_frsqrte = 745
ARM_frsqrts = 746
ARM_ursra = 747
ARM_srsra = 748
ARM_rsubhn = 749
ARM_rsubhn2 = 750
ARM_ushl = 751
ARM_sshl = 752
ARM_ushll = 753
ARM_ushll2 = 754
ARM_sshll = 755
ARM_sshll2 = 756
ARM_ushr = 757
ARM_sshr = 758
ARM_shrn = 759
ARM_shrn2 = 760
ARM_shl = 761
ARM_shll = 762
ARM_shll2 = 763
ARM_sli = 764
ARM_fsqrt = 765
ARM_usra = 766
ARM_ssra = 767
ARM_sri = 768
ARM_st1 = 769
ARM_st2 = 770
ARM_st3 = 771
ARM_st4 = 772
ARM_fsub = 773
ARM_subhn = 774
ARM_subhn2 = 775
ARM_usubl = 776
ARM_usubl2 = 777
ARM_ssubl = 778
ARM_ssubl2 = 779
ARM_usubw = 780
ARM_usubw2 = 781
ARM_ssubw = 782
ARM_ssubw2 = 783
ARM_tbl = 784
ARM_tbx = 785
ARM_trn1 = 786
ARM_trn2 = 787
ARM_cmtst = 788
ARM_uzp1 = 789
ARM_uzp2 = 790
ARM_zip1 = 791
ARM_zip2 = 792
ARM_addv = 793
ARM_uaddlv = 794
ARM_saddlv = 795
ARM_umaxv = 796
ARM_smaxv = 797
ARM_fmaxv = 798
ARM_fmaxnmv = 799
ARM_uminv = 800
ARM_sminv = 801
ARM_fminv = 802
ARM_fminnmv = 803
ARM_swpl = 804
ARM_swpa = 805
ARM_swpal = 806
ARM_ldapr = 807
ARM_ldadd = 808
ARM_ldaddl = 809
ARM_ldadda = 810
ARM_ldaddal = 811
ARM_stadd = 812
ARM_staddl = 813
ARM_ldclr = 814
ARM_ldclrl = 815
ARM_ldclra = 816
ARM_ldclral = 817
ARM_stclr = 818
ARM_stclrl = 819
ARM_ldeor = 820
ARM_ldeorl = 821
ARM_ldeora = 822
ARM_ldeoral = 823
ARM_steor = 824
ARM_steorl = 825
ARM_ldset = 826
ARM_ldsetl = 827
ARM_ldseta = 828
ARM_ldsetal = 829
ARM_stset = 830
ARM_stsetl = 831
ARM_ldsmax = 832
ARM_ldsmaxl = 833
ARM_ldsmaxa = 834
ARM_ldsmaxal = 835
ARM_stsmax = 836
ARM_stsmaxl = 837
ARM_ldsmin = 838
ARM_ldsminl = 839
ARM_ldsmina = 840
ARM_ldsminal = 841
ARM_stsmin = 842
ARM_stsminl = 843
ARM_ldumax = 844
ARM_ldumaxl = 845
ARM_ldumaxa = 846
ARM_ldumaxal = 847
ARM_stumax = 848
ARM_stumaxl = 849
ARM_ldumin = 850
ARM_lduminl = 851
ARM_ldumina = 852
ARM_lduminal = 853
ARM_stumin = 854
ARM_stuminl = 855
ARM_cas = 856
ARM_casl = 857
ARM_casa = 858
ARM_casal = 859
ARM_casp = 860
ARM_caspl = 861
ARM_caspa = 862
ARM_caspal = 863
ARM_ldlar = 864
ARM_stllr = 865
ARM_sqrdmlah = 866
ARM_sqrdmlsh = 867
ARM_pac = 868
ARM_aut = 869
ARM_xpac = 870
ARM_ldrd2 = 871
ARM_strd2 = 872
ARM_crc32 = 873
ARM_crc32c = 874
ARM_tt = 875
ARM_tta = 876
ARM_sg = 877
ARM_vlldm = 878
ARM_vlstm = 879
ARM_pldw = 880
ARM_vqrdmlah = 881
ARM_vqrdmlsh = 882
ARM_vmovx = 883
ARM_vins = 884
ARM_vjcvt = 885
ARM_fjcvtzs = 886
ARM_ldapur = 887
ARM_stlur = 888
ARM_cfinv = 889
ARM_rmif = 890
ARM_setf8 = 891
ARM_setf16 = 892
ARM_xaflag = 893
ARM_axflag = 894
ARM_addg = 895
ARM_subg = 896
ARM_subp = 897
ARM_cmpp = 898
ARM_irg = 899
ARM_gmi = 900
ARM_stg = 901
ARM_stzg = 902
ARM_stzgm = 903
ARM_st2g = 904
ARM_stz2g = 905
ARM_stgm = 906
ARM_stgp = 907
ARM_ldg = 908
ARM_ldgm = 909
ARM_bti = 910
ARM_sb = 911
ARM_ssbb = 912
ARM_pssbb = 913
ARM_frint32x = 914
ARM_frint32z = 915
ARM_frint64x = 916
ARM_frint64z = 917
ARM_last = 918
_A2D27DEC506196B2AFD43577ED2E1BBE = ctypes.c_uint32 # enum

# values for enumeration '_7DEE59BDA5505BA79906AD1B11AD5B46'
_7DEE59BDA5505BA79906AD1B11AD5B46__enumvalues = {
    0: 'TMS6_null',
    1: 'TMS6_abs',
    2: 'TMS6_add',
    3: 'TMS6_addu',
    4: 'TMS6_addab',
    5: 'TMS6_addah',
    6: 'TMS6_addaw',
    7: 'TMS6_addk',
    8: 'TMS6_add2',
    9: 'TMS6_and',
    10: 'TMS6_b',
    11: 'TMS6_clr',
    12: 'TMS6_cmpeq',
    13: 'TMS6_cmpgt',
    14: 'TMS6_cmpgtu',
    15: 'TMS6_cmplt',
    16: 'TMS6_cmpltu',
    17: 'TMS6_ext',
    18: 'TMS6_extu',
    19: 'TMS6_idle',
    20: 'TMS6_ldb',
    21: 'TMS6_ldbu',
    22: 'TMS6_ldh',
    23: 'TMS6_ldhu',
    24: 'TMS6_ldw',
    25: 'TMS6_lmbd',
    26: 'TMS6_mpy',
    27: 'TMS6_mpyu',
    28: 'TMS6_mpyus',
    29: 'TMS6_mpysu',
    30: 'TMS6_mpyh',
    31: 'TMS6_mpyhu',
    32: 'TMS6_mpyhus',
    33: 'TMS6_mpyhsu',
    34: 'TMS6_mpyhl',
    35: 'TMS6_mpyhlu',
    36: 'TMS6_mpyhuls',
    37: 'TMS6_mpyhslu',
    38: 'TMS6_mpylh',
    39: 'TMS6_mpylhu',
    40: 'TMS6_mpyluhs',
    41: 'TMS6_mpylshu',
    42: 'TMS6_mv',
    43: 'TMS6_mvc',
    44: 'TMS6_mvk',
    45: 'TMS6_mvkh',
    46: 'TMS6_mvklh',
    47: 'TMS6_neg',
    48: 'TMS6_nop',
    49: 'TMS6_norm',
    50: 'TMS6_not',
    51: 'TMS6_or',
    52: 'TMS6_sadd',
    53: 'TMS6_sat',
    54: 'TMS6_set',
    55: 'TMS6_shl',
    56: 'TMS6_shr',
    57: 'TMS6_shru',
    58: 'TMS6_smpy',
    59: 'TMS6_smpyhl',
    60: 'TMS6_smpylh',
    61: 'TMS6_smpyh',
    62: 'TMS6_sshl',
    63: 'TMS6_ssub',
    64: 'TMS6_stb',
    65: 'TMS6_stbu',
    66: 'TMS6_sth',
    67: 'TMS6_sthu',
    68: 'TMS6_stw',
    69: 'TMS6_sub',
    70: 'TMS6_subu',
    71: 'TMS6_subab',
    72: 'TMS6_subah',
    73: 'TMS6_subaw',
    74: 'TMS6_subc',
    75: 'TMS6_sub2',
    76: 'TMS6_xor',
    77: 'TMS6_zero',
    78: 'TMS6_abs2',
    79: 'TMS6_absdp',
    80: 'TMS6_abssp',
    81: 'TMS6_add4',
    82: 'TMS6_addad',
    83: 'TMS6_adddp',
    84: 'TMS6_addkpc',
    85: 'TMS6_addsp',
    86: 'TMS6_addsub',
    87: 'TMS6_addsub2',
    88: 'TMS6_andn',
    89: 'TMS6_avg2',
    90: 'TMS6_avgu4',
    91: 'TMS6_bdec',
    92: 'TMS6_bitc4',
    93: 'TMS6_bitr',
    94: 'TMS6_bnop',
    95: 'TMS6_bpos',
    96: 'TMS6_callp',
    97: 'TMS6_cmpeq2',
    98: 'TMS6_cmpeq4',
    99: 'TMS6_cmpeqdp',
    100: 'TMS6_cmpeqsp',
    101: 'TMS6_cmpgt2',
    102: 'TMS6_cmpgtdp',
    103: 'TMS6_cmpgtsp',
    104: 'TMS6_cmpgtu4',
    105: 'TMS6_cmplt2',
    106: 'TMS6_cmpltdp',
    107: 'TMS6_cmpltsp',
    108: 'TMS6_cmpltu4',
    109: 'TMS6_cmpy',
    110: 'TMS6_cmpyr',
    111: 'TMS6_cmpyr1',
    112: 'TMS6_ddotp4',
    113: 'TMS6_ddotph2',
    114: 'TMS6_ddotph2r',
    115: 'TMS6_ddotpl2',
    116: 'TMS6_ddotpl2r',
    117: 'TMS6_deal',
    118: 'TMS6_dint',
    119: 'TMS6_dmv',
    120: 'TMS6_dotp2',
    121: 'TMS6_dotpn2',
    122: 'TMS6_dotpnrsu2',
    123: 'TMS6_dotpnrus2',
    124: 'TMS6_dotprsu2',
    125: 'TMS6_dotprus2',
    126: 'TMS6_dotpsu4',
    127: 'TMS6_dotpu4',
    128: 'TMS6_dotpus4',
    129: 'TMS6_dpack2',
    130: 'TMS6_dpackx2',
    131: 'TMS6_dpint',
    132: 'TMS6_dpsp',
    133: 'TMS6_dptrunc',
    134: 'TMS6_gmpy',
    135: 'TMS6_gmpy4',
    136: 'TMS6_intdp',
    137: 'TMS6_intdpu',
    138: 'TMS6_intsp',
    139: 'TMS6_intspu',
    140: 'TMS6_lddw',
    141: 'TMS6_ldndw',
    142: 'TMS6_ldnw',
    143: 'TMS6_max2',
    144: 'TMS6_maxu4',
    145: 'TMS6_min2',
    146: 'TMS6_minu4',
    147: 'TMS6_mpy2',
    148: 'TMS6_mpy2ir',
    149: 'TMS6_mpy32',
    150: 'TMS6_mpy32su',
    151: 'TMS6_mpy32u',
    152: 'TMS6_mpy32us',
    153: 'TMS6_mpydp',
    154: 'TMS6_mpyhi',
    155: 'TMS6_mpyhir',
    156: 'TMS6_mpyi',
    157: 'TMS6_mpyid',
    158: 'TMS6_mpyih',
    159: 'TMS6_mpyihr',
    160: 'TMS6_mpyil',
    161: 'TMS6_mpyilr',
    162: 'TMS6_mpyli',
    163: 'TMS6_mpylir',
    164: 'TMS6_mpysp',
    165: 'TMS6_mpysp2dp',
    166: 'TMS6_mpyspdp',
    167: 'TMS6_mpysu4',
    168: 'TMS6_mpyu4',
    169: 'TMS6_mpyus4',
    170: 'TMS6_mvd',
    171: 'TMS6_mvkl',
    172: 'TMS6_pack2',
    173: 'TMS6_packh2',
    174: 'TMS6_packh4',
    175: 'TMS6_packhl2',
    176: 'TMS6_packl4',
    177: 'TMS6_packlh2',
    178: 'TMS6_rcpdp',
    179: 'TMS6_rcpsp',
    180: 'TMS6_rint',
    181: 'TMS6_rotl',
    182: 'TMS6_rpack2',
    183: 'TMS6_rsqrdp',
    184: 'TMS6_rsqrsp',
    185: 'TMS6_sadd2',
    186: 'TMS6_saddsu2',
    187: 'TMS6_saddsub',
    188: 'TMS6_saddsub2',
    189: 'TMS6_saddu4',
    190: 'TMS6_saddus2',
    191: 'TMS6_shfl',
    192: 'TMS6_shfl3',
    193: 'TMS6_shlmb',
    194: 'TMS6_shr2',
    195: 'TMS6_shrmb',
    196: 'TMS6_shru2',
    197: 'TMS6_smpy2',
    198: 'TMS6_smpy32',
    199: 'TMS6_spack2',
    200: 'TMS6_spacku4',
    201: 'TMS6_spdp',
    202: 'TMS6_spint',
    203: 'TMS6_spkernel',
    204: 'TMS6_spkernelr',
    205: 'TMS6_sploop',
    206: 'TMS6_sploopd',
    207: 'TMS6_sploopw',
    208: 'TMS6_spmask',
    209: 'TMS6_spmaskr',
    210: 'TMS6_sptrunc',
    211: 'TMS6_sshvl',
    212: 'TMS6_sshvr',
    213: 'TMS6_ssub2',
    214: 'TMS6_stdw',
    215: 'TMS6_stndw',
    216: 'TMS6_stnw',
    217: 'TMS6_sub4',
    218: 'TMS6_subabs4',
    219: 'TMS6_subdp',
    220: 'TMS6_subsp',
    221: 'TMS6_swap2',
    222: 'TMS6_swap4',
    223: 'TMS6_swe',
    224: 'TMS6_swenr',
    225: 'TMS6_unpkhu4',
    226: 'TMS6_unpklu4',
    227: 'TMS6_xormpy',
    228: 'TMS6_xpnd2',
    229: 'TMS6_xpnd4',
    230: 'TMS6_last',
}
TMS6_null = 0
TMS6_abs = 1
TMS6_add = 2
TMS6_addu = 3
TMS6_addab = 4
TMS6_addah = 5
TMS6_addaw = 6
TMS6_addk = 7
TMS6_add2 = 8
TMS6_and = 9
TMS6_b = 10
TMS6_clr = 11
TMS6_cmpeq = 12
TMS6_cmpgt = 13
TMS6_cmpgtu = 14
TMS6_cmplt = 15
TMS6_cmpltu = 16
TMS6_ext = 17
TMS6_extu = 18
TMS6_idle = 19
TMS6_ldb = 20
TMS6_ldbu = 21
TMS6_ldh = 22
TMS6_ldhu = 23
TMS6_ldw = 24
TMS6_lmbd = 25
TMS6_mpy = 26
TMS6_mpyu = 27
TMS6_mpyus = 28
TMS6_mpysu = 29
TMS6_mpyh = 30
TMS6_mpyhu = 31
TMS6_mpyhus = 32
TMS6_mpyhsu = 33
TMS6_mpyhl = 34
TMS6_mpyhlu = 35
TMS6_mpyhuls = 36
TMS6_mpyhslu = 37
TMS6_mpylh = 38
TMS6_mpylhu = 39
TMS6_mpyluhs = 40
TMS6_mpylshu = 41
TMS6_mv = 42
TMS6_mvc = 43
TMS6_mvk = 44
TMS6_mvkh = 45
TMS6_mvklh = 46
TMS6_neg = 47
TMS6_nop = 48
TMS6_norm = 49
TMS6_not = 50
TMS6_or = 51
TMS6_sadd = 52
TMS6_sat = 53
TMS6_set = 54
TMS6_shl = 55
TMS6_shr = 56
TMS6_shru = 57
TMS6_smpy = 58
TMS6_smpyhl = 59
TMS6_smpylh = 60
TMS6_smpyh = 61
TMS6_sshl = 62
TMS6_ssub = 63
TMS6_stb = 64
TMS6_stbu = 65
TMS6_sth = 66
TMS6_sthu = 67
TMS6_stw = 68
TMS6_sub = 69
TMS6_subu = 70
TMS6_subab = 71
TMS6_subah = 72
TMS6_subaw = 73
TMS6_subc = 74
TMS6_sub2 = 75
TMS6_xor = 76
TMS6_zero = 77
TMS6_abs2 = 78
TMS6_absdp = 79
TMS6_abssp = 80
TMS6_add4 = 81
TMS6_addad = 82
TMS6_adddp = 83
TMS6_addkpc = 84
TMS6_addsp = 85
TMS6_addsub = 86
TMS6_addsub2 = 87
TMS6_andn = 88
TMS6_avg2 = 89
TMS6_avgu4 = 90
TMS6_bdec = 91
TMS6_bitc4 = 92
TMS6_bitr = 93
TMS6_bnop = 94
TMS6_bpos = 95
TMS6_callp = 96
TMS6_cmpeq2 = 97
TMS6_cmpeq4 = 98
TMS6_cmpeqdp = 99
TMS6_cmpeqsp = 100
TMS6_cmpgt2 = 101
TMS6_cmpgtdp = 102
TMS6_cmpgtsp = 103
TMS6_cmpgtu4 = 104
TMS6_cmplt2 = 105
TMS6_cmpltdp = 106
TMS6_cmpltsp = 107
TMS6_cmpltu4 = 108
TMS6_cmpy = 109
TMS6_cmpyr = 110
TMS6_cmpyr1 = 111
TMS6_ddotp4 = 112
TMS6_ddotph2 = 113
TMS6_ddotph2r = 114
TMS6_ddotpl2 = 115
TMS6_ddotpl2r = 116
TMS6_deal = 117
TMS6_dint = 118
TMS6_dmv = 119
TMS6_dotp2 = 120
TMS6_dotpn2 = 121
TMS6_dotpnrsu2 = 122
TMS6_dotpnrus2 = 123
TMS6_dotprsu2 = 124
TMS6_dotprus2 = 125
TMS6_dotpsu4 = 126
TMS6_dotpu4 = 127
TMS6_dotpus4 = 128
TMS6_dpack2 = 129
TMS6_dpackx2 = 130
TMS6_dpint = 131
TMS6_dpsp = 132
TMS6_dptrunc = 133
TMS6_gmpy = 134
TMS6_gmpy4 = 135
TMS6_intdp = 136
TMS6_intdpu = 137
TMS6_intsp = 138
TMS6_intspu = 139
TMS6_lddw = 140
TMS6_ldndw = 141
TMS6_ldnw = 142
TMS6_max2 = 143
TMS6_maxu4 = 144
TMS6_min2 = 145
TMS6_minu4 = 146
TMS6_mpy2 = 147
TMS6_mpy2ir = 148
TMS6_mpy32 = 149
TMS6_mpy32su = 150
TMS6_mpy32u = 151
TMS6_mpy32us = 152
TMS6_mpydp = 153
TMS6_mpyhi = 154
TMS6_mpyhir = 155
TMS6_mpyi = 156
TMS6_mpyid = 157
TMS6_mpyih = 158
TMS6_mpyihr = 159
TMS6_mpyil = 160
TMS6_mpyilr = 161
TMS6_mpyli = 162
TMS6_mpylir = 163
TMS6_mpysp = 164
TMS6_mpysp2dp = 165
TMS6_mpyspdp = 166
TMS6_mpysu4 = 167
TMS6_mpyu4 = 168
TMS6_mpyus4 = 169
TMS6_mvd = 170
TMS6_mvkl = 171
TMS6_pack2 = 172
TMS6_packh2 = 173
TMS6_packh4 = 174
TMS6_packhl2 = 175
TMS6_packl4 = 176
TMS6_packlh2 = 177
TMS6_rcpdp = 178
TMS6_rcpsp = 179
TMS6_rint = 180
TMS6_rotl = 181
TMS6_rpack2 = 182
TMS6_rsqrdp = 183
TMS6_rsqrsp = 184
TMS6_sadd2 = 185
TMS6_saddsu2 = 186
TMS6_saddsub = 187
TMS6_saddsub2 = 188
TMS6_saddu4 = 189
TMS6_saddus2 = 190
TMS6_shfl = 191
TMS6_shfl3 = 192
TMS6_shlmb = 193
TMS6_shr2 = 194
TMS6_shrmb = 195
TMS6_shru2 = 196
TMS6_smpy2 = 197
TMS6_smpy32 = 198
TMS6_spack2 = 199
TMS6_spacku4 = 200
TMS6_spdp = 201
TMS6_spint = 202
TMS6_spkernel = 203
TMS6_spkernelr = 204
TMS6_sploop = 205
TMS6_sploopd = 206
TMS6_sploopw = 207
TMS6_spmask = 208
TMS6_spmaskr = 209
TMS6_sptrunc = 210
TMS6_sshvl = 211
TMS6_sshvr = 212
TMS6_ssub2 = 213
TMS6_stdw = 214
TMS6_stndw = 215
TMS6_stnw = 216
TMS6_sub4 = 217
TMS6_subabs4 = 218
TMS6_subdp = 219
TMS6_subsp = 220
TMS6_swap2 = 221
TMS6_swap4 = 222
TMS6_swe = 223
TMS6_swenr = 224
TMS6_unpkhu4 = 225
TMS6_unpklu4 = 226
TMS6_xormpy = 227
TMS6_xpnd2 = 228
TMS6_xpnd4 = 229
TMS6_last = 230
_7DEE59BDA5505BA79906AD1B11AD5B46 = ctypes.c_uint32 # enum

# values for enumeration '_94774701A62EC69B1B7643AC725F5DF9'
_94774701A62EC69B1B7643AC725F5DF9__enumvalues = {
    0: 'I196_null',
    1: 'I196_add2',
    2: 'I196_add3',
    3: 'I196_addb2',
    4: 'I196_addb3',
    5: 'I196_addc',
    6: 'I196_addcb',
    7: 'I196_and2',
    8: 'I196_and3',
    9: 'I196_andb2',
    10: 'I196_andb3',
    11: 'I196_bmov',
    12: 'I196_bmovi',
    13: 'I196_br',
    14: 'I196_clr',
    15: 'I196_clrb',
    16: 'I196_clrc',
    17: 'I196_clrvt',
    18: 'I196_cmp',
    19: 'I196_cmpb',
    20: 'I196_cmpl',
    21: 'I196_dec',
    22: 'I196_decb',
    23: 'I196_di',
    24: 'I196_div',
    25: 'I196_divb',
    26: 'I196_divu',
    27: 'I196_divub',
    28: 'I196_djnz',
    29: 'I196_djnzw',
    30: 'I196_dpts',
    31: 'I196_ei',
    32: 'I196_epts',
    33: 'I196_ext',
    34: 'I196_extb',
    35: 'I196_idlpd',
    36: 'I196_inc',
    37: 'I196_incb',
    38: 'I196_jbc',
    39: 'I196_jbs',
    40: 'I196_jc',
    41: 'I196_je',
    42: 'I196_jge',
    43: 'I196_jgt',
    44: 'I196_jh',
    45: 'I196_jle',
    46: 'I196_jlt',
    47: 'I196_jnc',
    48: 'I196_jne',
    49: 'I196_jnh',
    50: 'I196_jnst',
    51: 'I196_jnv',
    52: 'I196_jnvt',
    53: 'I196_jst',
    54: 'I196_jv',
    55: 'I196_jvt',
    56: 'I196_lcall',
    57: 'I196_ld',
    58: 'I196_ldb',
    59: 'I196_ldbse',
    60: 'I196_ldbze',
    61: 'I196_ljmp',
    62: 'I196_mul2',
    63: 'I196_mul3',
    64: 'I196_mulb2',
    65: 'I196_mulb3',
    66: 'I196_mulu2',
    67: 'I196_mulu3',
    68: 'I196_mulub2',
    69: 'I196_mulub3',
    70: 'I196_neg',
    71: 'I196_negb',
    72: 'I196_nop',
    73: 'I196_norml',
    74: 'I196_not',
    75: 'I196_notb',
    76: 'I196_or',
    77: 'I196_orb',
    78: 'I196_pop',
    79: 'I196_popa',
    80: 'I196_popf',
    81: 'I196_push',
    82: 'I196_pusha',
    83: 'I196_pushf',
    84: 'I196_ret',
    85: 'I196_rst',
    86: 'I196_scall',
    87: 'I196_setc',
    88: 'I196_shl',
    89: 'I196_shlb',
    90: 'I196_shll',
    91: 'I196_shr',
    92: 'I196_shra',
    93: 'I196_shrab',
    94: 'I196_shral',
    95: 'I196_shrb',
    96: 'I196_shrl',
    97: 'I196_sjmp',
    98: 'I196_skip',
    99: 'I196_st',
    100: 'I196_stb',
    101: 'I196_sub2',
    102: 'I196_sub3',
    103: 'I196_subb2',
    104: 'I196_subb3',
    105: 'I196_subc',
    106: 'I196_subcb',
    107: 'I196_tijmp',
    108: 'I196_trap',
    109: 'I196_xch',
    110: 'I196_xchb',
    111: 'I196_xor',
    112: 'I196_xorb',
    113: 'I196_ebmovi',
    114: 'I196_ebr',
    115: 'I196_ecall',
    116: 'I196_ejmp',
    117: 'I196_eld',
    118: 'I196_eldb',
    119: 'I196_est',
    120: 'I196_estb',
    121: 'I196_last',
}
I196_null = 0
I196_add2 = 1
I196_add3 = 2
I196_addb2 = 3
I196_addb3 = 4
I196_addc = 5
I196_addcb = 6
I196_and2 = 7
I196_and3 = 8
I196_andb2 = 9
I196_andb3 = 10
I196_bmov = 11
I196_bmovi = 12
I196_br = 13
I196_clr = 14
I196_clrb = 15
I196_clrc = 16
I196_clrvt = 17
I196_cmp = 18
I196_cmpb = 19
I196_cmpl = 20
I196_dec = 21
I196_decb = 22
I196_di = 23
I196_div = 24
I196_divb = 25
I196_divu = 26
I196_divub = 27
I196_djnz = 28
I196_djnzw = 29
I196_dpts = 30
I196_ei = 31
I196_epts = 32
I196_ext = 33
I196_extb = 34
I196_idlpd = 35
I196_inc = 36
I196_incb = 37
I196_jbc = 38
I196_jbs = 39
I196_jc = 40
I196_je = 41
I196_jge = 42
I196_jgt = 43
I196_jh = 44
I196_jle = 45
I196_jlt = 46
I196_jnc = 47
I196_jne = 48
I196_jnh = 49
I196_jnst = 50
I196_jnv = 51
I196_jnvt = 52
I196_jst = 53
I196_jv = 54
I196_jvt = 55
I196_lcall = 56
I196_ld = 57
I196_ldb = 58
I196_ldbse = 59
I196_ldbze = 60
I196_ljmp = 61
I196_mul2 = 62
I196_mul3 = 63
I196_mulb2 = 64
I196_mulb3 = 65
I196_mulu2 = 66
I196_mulu3 = 67
I196_mulub2 = 68
I196_mulub3 = 69
I196_neg = 70
I196_negb = 71
I196_nop = 72
I196_norml = 73
I196_not = 74
I196_notb = 75
I196_or = 76
I196_orb = 77
I196_pop = 78
I196_popa = 79
I196_popf = 80
I196_push = 81
I196_pusha = 82
I196_pushf = 83
I196_ret = 84
I196_rst = 85
I196_scall = 86
I196_setc = 87
I196_shl = 88
I196_shlb = 89
I196_shll = 90
I196_shr = 91
I196_shra = 92
I196_shrab = 93
I196_shral = 94
I196_shrb = 95
I196_shrl = 96
I196_sjmp = 97
I196_skip = 98
I196_st = 99
I196_stb = 100
I196_sub2 = 101
I196_sub3 = 102
I196_subb2 = 103
I196_subb3 = 104
I196_subc = 105
I196_subcb = 106
I196_tijmp = 107
I196_trap = 108
I196_xch = 109
I196_xchb = 110
I196_xor = 111
I196_xorb = 112
I196_ebmovi = 113
I196_ebr = 114
I196_ecall = 115
I196_ejmp = 116
I196_eld = 117
I196_eldb = 118
I196_est = 119
I196_estb = 120
I196_last = 121
_94774701A62EC69B1B7643AC725F5DF9 = ctypes.c_uint32 # enum

# values for enumeration '_E2B20928BFB82BAF3AD0622BAF5EB89D'
_E2B20928BFB82BAF3AD0622BAF5EB89D__enumvalues = {
    0: 'SH3_null',
    1: 'SH3_add',
    2: 'SH3_addc',
    3: 'SH3_addv',
    4: 'SH3_and',
    5: 'SH3_and_b',
    6: 'SH3_bf',
    7: 'SH3_bf_s',
    8: 'SH3_bra',
    9: 'SH3_braf',
    10: 'SH3_bsr',
    11: 'SH3_bsrf',
    12: 'SH3_bt',
    13: 'SH3_bt_s',
    14: 'SH3_clrmac',
    15: 'SH3_clrs',
    16: 'SH3_clrt',
    17: 'SH3_cmp_eq',
    18: 'SH3_cmp_ge',
    19: 'SH3_cmp_gt',
    20: 'SH3_cmp_hi',
    21: 'SH3_cmp_hs',
    22: 'SH3_cmp_pl',
    23: 'SH3_cmp_pz',
    24: 'SH3_cmp_str',
    25: 'SH3_div0s',
    26: 'SH3_div0u',
    27: 'SH3_div1',
    28: 'SH3_dmuls_l',
    29: 'SH3_dmulu_l',
    30: 'SH3_dt',
    31: 'SH3_exts_b',
    32: 'SH3_exts_w',
    33: 'SH3_extu_b',
    34: 'SH3_extu_w',
    35: 'SH3_jmp',
    36: 'SH3_jsr',
    37: 'SH3_ldc',
    38: 'SH3_ldc_l',
    39: 'SH3_lds',
    40: 'SH3_lds_l',
    41: 'SH3_ldtlb',
    42: 'SH3_mac_w',
    43: 'SH3_mac_l',
    44: 'SH3_mov',
    45: 'SH3_mov_b',
    46: 'SH3_mov_w',
    47: 'SH3_mov_l',
    48: 'SH3_movi',
    49: 'SH3_movi_w',
    50: 'SH3_movi_l',
    51: 'SH3_movp_b',
    52: 'SH3_movp_w',
    53: 'SH3_movp_l',
    54: 'SH3_movs_b',
    55: 'SH3_movs_w',
    56: 'SH3_movs_l',
    57: 'SH3_mova',
    58: 'SH3_movt',
    59: 'SH3_mul',
    60: 'SH3_muls',
    61: 'SH3_mulu',
    62: 'SH3_neg',
    63: 'SH3_negc',
    64: 'SH3_nop',
    65: 'SH3_not',
    66: 'SH3_or',
    67: 'SH3_or_b',
    68: 'SH3_pref',
    69: 'SH3_rotcl',
    70: 'SH3_rotcr',
    71: 'SH3_rotl',
    72: 'SH3_rotr',
    73: 'SH3_rte',
    74: 'SH3_rts',
    75: 'SH3_sets',
    76: 'SH3_sett',
    77: 'SH3_shad',
    78: 'SH3_shal',
    79: 'SH3_shar',
    80: 'SH3_shld',
    81: 'SH3_shll',
    82: 'SH3_shll2',
    83: 'SH3_shll8',
    84: 'SH3_shll16',
    85: 'SH3_shlr',
    86: 'SH3_shlr2',
    87: 'SH3_shlr8',
    88: 'SH3_shlr16',
    89: 'SH3_sleep',
    90: 'SH3_stc',
    91: 'SH3_stc_l',
    92: 'SH3_sts',
    93: 'SH3_sts_l',
    94: 'SH3_sub',
    95: 'SH3_subc',
    96: 'SH3_subv',
    97: 'SH3_swap_b',
    98: 'SH3_swap_w',
    99: 'SH3_tas_b',
    100: 'SH3_trapa',
    101: 'SH3_tst',
    102: 'SH3_tst_b',
    103: 'SH3_xor',
    104: 'SH3_xor_b',
    105: 'SH3_xtrct',
    106: 'SH4_fabs',
    107: 'SH4_fadd',
    108: 'SH4_fcmp_eq',
    109: 'SH4_fcmp_gt',
    110: 'SH4_fcnvds',
    111: 'SH4_fcnvsd',
    112: 'SH4_fdiv',
    113: 'SH4_fipr',
    114: 'SH4_fldi0',
    115: 'SH4_fldi1',
    116: 'SH4_flds',
    117: 'SH4_float',
    118: 'SH4_fmac',
    119: 'SH4_fmov',
    120: 'SH4_fmov_s',
    121: 'SH4_fmovex',
    122: 'SH4_fmul',
    123: 'SH4_fneg',
    124: 'SH4_frchg',
    125: 'SH4_fschg',
    126: 'SH4_fsqrt',
    127: 'SH4_fsts',
    128: 'SH4_fsub',
    129: 'SH4_ftrc',
    130: 'SH4_ftrv',
    131: 'SH4_ftstn',
    132: 'SH4_movca_l',
    133: 'SH4_ocbi',
    134: 'SH4_ocbp',
    135: 'SH4_ocbwb',
    136: 'SH4_fsca',
    137: 'SH2a_band_b',
    138: 'SH2a_bandnot_b',
    139: 'SH2a_bclr',
    140: 'SH2a_bclr_b',
    141: 'SH2a_bld',
    142: 'SH2a_bld_b',
    143: 'SH2a_bldnot_b',
    144: 'SH2a_bor_b',
    145: 'SH2a_bornot_b',
    146: 'SH2a_bset',
    147: 'SH2a_bset_b',
    148: 'SH2a_bst',
    149: 'SH2a_bst_b',
    150: 'SH2a_bxor_b',
    151: 'SH2a_clips_b',
    152: 'SH2a_clips_w',
    153: 'SH2a_clipu_b',
    154: 'SH2a_clipu_w',
    155: 'SH2a_divs',
    156: 'SH2a_divu',
    157: 'SH2a_jsr_n',
    158: 'SH2a_ldbank',
    159: 'SH2a_movi20',
    160: 'SH2a_movi20s',
    161: 'SH2a_movml_l',
    162: 'SH2a_movmu_l',
    163: 'SH2a_movrt',
    164: 'SH2a_movu_b',
    165: 'SH2a_movu_w',
    166: 'SH2a_mulr',
    167: 'SH2a_nott',
    168: 'SH2a_resbank',
    169: 'SH2a_rts_n',
    170: 'SH2a_rtv_n',
    171: 'SH2a_stbank',
    172: 'SH4a_movco_l',
    173: 'SH4a_movli_l',
    174: 'SH4a_movua_l',
    175: 'SH4a_icbi',
    176: 'SH4a_prefi',
    177: 'SH4a_synco',
    178: 'SH4a_fsrra',
    179: 'SH4a_fpchg',
    180: 'SH4_last',
}
SH3_null = 0
SH3_add = 1
SH3_addc = 2
SH3_addv = 3
SH3_and = 4
SH3_and_b = 5
SH3_bf = 6
SH3_bf_s = 7
SH3_bra = 8
SH3_braf = 9
SH3_bsr = 10
SH3_bsrf = 11
SH3_bt = 12
SH3_bt_s = 13
SH3_clrmac = 14
SH3_clrs = 15
SH3_clrt = 16
SH3_cmp_eq = 17
SH3_cmp_ge = 18
SH3_cmp_gt = 19
SH3_cmp_hi = 20
SH3_cmp_hs = 21
SH3_cmp_pl = 22
SH3_cmp_pz = 23
SH3_cmp_str = 24
SH3_div0s = 25
SH3_div0u = 26
SH3_div1 = 27
SH3_dmuls_l = 28
SH3_dmulu_l = 29
SH3_dt = 30
SH3_exts_b = 31
SH3_exts_w = 32
SH3_extu_b = 33
SH3_extu_w = 34
SH3_jmp = 35
SH3_jsr = 36
SH3_ldc = 37
SH3_ldc_l = 38
SH3_lds = 39
SH3_lds_l = 40
SH3_ldtlb = 41
SH3_mac_w = 42
SH3_mac_l = 43
SH3_mov = 44
SH3_mov_b = 45
SH3_mov_w = 46
SH3_mov_l = 47
SH3_movi = 48
SH3_movi_w = 49
SH3_movi_l = 50
SH3_movp_b = 51
SH3_movp_w = 52
SH3_movp_l = 53
SH3_movs_b = 54
SH3_movs_w = 55
SH3_movs_l = 56
SH3_mova = 57
SH3_movt = 58
SH3_mul = 59
SH3_muls = 60
SH3_mulu = 61
SH3_neg = 62
SH3_negc = 63
SH3_nop = 64
SH3_not = 65
SH3_or = 66
SH3_or_b = 67
SH3_pref = 68
SH3_rotcl = 69
SH3_rotcr = 70
SH3_rotl = 71
SH3_rotr = 72
SH3_rte = 73
SH3_rts = 74
SH3_sets = 75
SH3_sett = 76
SH3_shad = 77
SH3_shal = 78
SH3_shar = 79
SH3_shld = 80
SH3_shll = 81
SH3_shll2 = 82
SH3_shll8 = 83
SH3_shll16 = 84
SH3_shlr = 85
SH3_shlr2 = 86
SH3_shlr8 = 87
SH3_shlr16 = 88
SH3_sleep = 89
SH3_stc = 90
SH3_stc_l = 91
SH3_sts = 92
SH3_sts_l = 93
SH3_sub = 94
SH3_subc = 95
SH3_subv = 96
SH3_swap_b = 97
SH3_swap_w = 98
SH3_tas_b = 99
SH3_trapa = 100
SH3_tst = 101
SH3_tst_b = 102
SH3_xor = 103
SH3_xor_b = 104
SH3_xtrct = 105
SH4_fabs = 106
SH4_fadd = 107
SH4_fcmp_eq = 108
SH4_fcmp_gt = 109
SH4_fcnvds = 110
SH4_fcnvsd = 111
SH4_fdiv = 112
SH4_fipr = 113
SH4_fldi0 = 114
SH4_fldi1 = 115
SH4_flds = 116
SH4_float = 117
SH4_fmac = 118
SH4_fmov = 119
SH4_fmov_s = 120
SH4_fmovex = 121
SH4_fmul = 122
SH4_fneg = 123
SH4_frchg = 124
SH4_fschg = 125
SH4_fsqrt = 126
SH4_fsts = 127
SH4_fsub = 128
SH4_ftrc = 129
SH4_ftrv = 130
SH4_ftstn = 131
SH4_movca_l = 132
SH4_ocbi = 133
SH4_ocbp = 134
SH4_ocbwb = 135
SH4_fsca = 136
SH2a_band_b = 137
SH2a_bandnot_b = 138
SH2a_bclr = 139
SH2a_bclr_b = 140
SH2a_bld = 141
SH2a_bld_b = 142
SH2a_bldnot_b = 143
SH2a_bor_b = 144
SH2a_bornot_b = 145
SH2a_bset = 146
SH2a_bset_b = 147
SH2a_bst = 148
SH2a_bst_b = 149
SH2a_bxor_b = 150
SH2a_clips_b = 151
SH2a_clips_w = 152
SH2a_clipu_b = 153
SH2a_clipu_w = 154
SH2a_divs = 155
SH2a_divu = 156
SH2a_jsr_n = 157
SH2a_ldbank = 158
SH2a_movi20 = 159
SH2a_movi20s = 160
SH2a_movml_l = 161
SH2a_movmu_l = 162
SH2a_movrt = 163
SH2a_movu_b = 164
SH2a_movu_w = 165
SH2a_mulr = 166
SH2a_nott = 167
SH2a_resbank = 168
SH2a_rts_n = 169
SH2a_rtv_n = 170
SH2a_stbank = 171
SH4a_movco_l = 172
SH4a_movli_l = 173
SH4a_movua_l = 174
SH4a_icbi = 175
SH4a_prefi = 176
SH4a_synco = 177
SH4a_fsrra = 178
SH4a_fpchg = 179
SH4_last = 180
_E2B20928BFB82BAF3AD0622BAF5EB89D = ctypes.c_uint32 # enum

# values for enumeration '_9181CA8ACBCDBAA965F884E226B6B56B'
_9181CA8ACBCDBAA965F884E226B6B56B__enumvalues = {
    0: 'Z8_null',
    1: 'Z8_adc',
    2: 'Z8_add',
    3: 'Z8_and',
    4: 'Z8_call',
    5: 'Z8_ccf',
    6: 'Z8_clr',
    7: 'Z8_com',
    8: 'Z8_cp',
    9: 'Z8_da',
    10: 'Z8_dec',
    11: 'Z8_decw',
    12: 'Z8_di',
    13: 'Z8_djnz',
    14: 'Z8_ei',
    15: 'Z8_halt',
    16: 'Z8_inc',
    17: 'Z8_incw',
    18: 'Z8_iret',
    19: 'Z8_jp',
    20: 'Z8_jpcond',
    21: 'Z8_jr',
    22: 'Z8_jrcond',
    23: 'Z8_ld',
    24: 'Z8_ldc',
    25: 'Z8_ldci',
    26: 'Z8_lde',
    27: 'Z8_ldei',
    28: 'Z8_nop',
    29: 'Z8_or',
    30: 'Z8_pop',
    31: 'Z8_push',
    32: 'Z8_rcf',
    33: 'Z8_ret',
    34: 'Z8_rl',
    35: 'Z8_rlc',
    36: 'Z8_rr',
    37: 'Z8_rrc',
    38: 'Z8_sbc',
    39: 'Z8_scf',
    40: 'Z8_sra',
    41: 'Z8_srp',
    42: 'Z8_stop',
    43: 'Z8_sub',
    44: 'Z8_swap',
    45: 'Z8_tm',
    46: 'Z8_tcm',
    47: 'Z8_xor',
    48: 'Z8_wdh',
    49: 'Z8_wdt',
    50: 'Z8_last',
}
Z8_null = 0
Z8_adc = 1
Z8_add = 2
Z8_and = 3
Z8_call = 4
Z8_ccf = 5
Z8_clr = 6
Z8_com = 7
Z8_cp = 8
Z8_da = 9
Z8_dec = 10
Z8_decw = 11
Z8_di = 12
Z8_djnz = 13
Z8_ei = 14
Z8_halt = 15
Z8_inc = 16
Z8_incw = 17
Z8_iret = 18
Z8_jp = 19
Z8_jpcond = 20
Z8_jr = 21
Z8_jrcond = 22
Z8_ld = 23
Z8_ldc = 24
Z8_ldci = 25
Z8_lde = 26
Z8_ldei = 27
Z8_nop = 28
Z8_or = 29
Z8_pop = 30
Z8_push = 31
Z8_rcf = 32
Z8_ret = 33
Z8_rl = 34
Z8_rlc = 35
Z8_rr = 36
Z8_rrc = 37
Z8_sbc = 38
Z8_scf = 39
Z8_sra = 40
Z8_srp = 41
Z8_stop = 42
Z8_sub = 43
Z8_swap = 44
Z8_tm = 45
Z8_tcm = 46
Z8_xor = 47
Z8_wdh = 48
Z8_wdt = 49
Z8_last = 50
_9181CA8ACBCDBAA965F884E226B6B56B = ctypes.c_uint32 # enum

# values for enumeration '_399A7FCDD38BA7F71B3EB8BA6F845075'
_399A7FCDD38BA7F71B3EB8BA6F845075__enumvalues = {
    0: 'AVR_null',
    1: 'AVR_add',
    2: 'AVR_adc',
    3: 'AVR_adiw',
    4: 'AVR_sub',
    5: 'AVR_subi',
    6: 'AVR_sbc',
    7: 'AVR_sbci',
    8: 'AVR_sbiw',
    9: 'AVR_and',
    10: 'AVR_andi',
    11: 'AVR_or',
    12: 'AVR_ori',
    13: 'AVR_eor',
    14: 'AVR_com',
    15: 'AVR_neg',
    16: 'AVR_sbr',
    17: 'AVR_cbr',
    18: 'AVR_inc',
    19: 'AVR_dec',
    20: 'AVR_tst',
    21: 'AVR_clr',
    22: 'AVR_ser',
    23: 'AVR_cp',
    24: 'AVR_cpc',
    25: 'AVR_cpi',
    26: 'AVR_mul',
    27: 'AVR_rjmp',
    28: 'AVR_ijmp',
    29: 'AVR_jmp',
    30: 'AVR_rcall',
    31: 'AVR_icall',
    32: 'AVR_call',
    33: 'AVR_ret',
    34: 'AVR_reti',
    35: 'AVR_cpse',
    36: 'AVR_sbrc',
    37: 'AVR_sbrs',
    38: 'AVR_sbic',
    39: 'AVR_sbis',
    40: 'AVR_brbs',
    41: 'AVR_brbc',
    42: 'AVR_breq',
    43: 'AVR_brne',
    44: 'AVR_brcs',
    45: 'AVR_brcc',
    46: 'AVR_brsh',
    47: 'AVR_brlo',
    48: 'AVR_brmi',
    49: 'AVR_brpl',
    50: 'AVR_brge',
    51: 'AVR_brlt',
    52: 'AVR_brhs',
    53: 'AVR_brhc',
    54: 'AVR_brts',
    55: 'AVR_brtc',
    56: 'AVR_brvs',
    57: 'AVR_brvc',
    58: 'AVR_brie',
    59: 'AVR_brid',
    60: 'AVR_mov',
    61: 'AVR_ldi',
    62: 'AVR_lds',
    63: 'AVR_ld',
    64: 'AVR_ldd',
    65: 'AVR_sts',
    66: 'AVR_st',
    67: 'AVR_std',
    68: 'AVR_lpm',
    69: 'AVR_in',
    70: 'AVR_out',
    71: 'AVR_push',
    72: 'AVR_pop',
    73: 'AVR_lsl',
    74: 'AVR_lsr',
    75: 'AVR_rol',
    76: 'AVR_ror',
    77: 'AVR_asr',
    78: 'AVR_swap',
    79: 'AVR_bset',
    80: 'AVR_bclr',
    81: 'AVR_sbi',
    82: 'AVR_cbi',
    83: 'AVR_bst',
    84: 'AVR_bld',
    85: 'AVR_sec',
    86: 'AVR_clc',
    87: 'AVR_sen',
    88: 'AVR_cln',
    89: 'AVR_sez',
    90: 'AVR_clz',
    91: 'AVR_sei',
    92: 'AVR_cli',
    93: 'AVR_ses',
    94: 'AVR_cls',
    95: 'AVR_sev',
    96: 'AVR_clv',
    97: 'AVR_set',
    98: 'AVR_clt',
    99: 'AVR_seh',
    100: 'AVR_clh',
    101: 'AVR_nop',
    102: 'AVR_sleep',
    103: 'AVR_wdr',
    104: 'AVR_elpm',
    105: 'AVR_espm',
    106: 'AVR_fmul',
    107: 'AVR_fmuls',
    108: 'AVR_fmulsu',
    109: 'AVR_movw',
    110: 'AVR_muls',
    111: 'AVR_mulsu',
    112: 'AVR_spm',
    113: 'AVR_eicall',
    114: 'AVR_eijmp',
    115: 'AVR_des',
    116: 'AVR_lac',
    117: 'AVR_las',
    118: 'AVR_lat',
    119: 'AVR_xch',
    120: 'AVR_last',
}
AVR_null = 0
AVR_add = 1
AVR_adc = 2
AVR_adiw = 3
AVR_sub = 4
AVR_subi = 5
AVR_sbc = 6
AVR_sbci = 7
AVR_sbiw = 8
AVR_and = 9
AVR_andi = 10
AVR_or = 11
AVR_ori = 12
AVR_eor = 13
AVR_com = 14
AVR_neg = 15
AVR_sbr = 16
AVR_cbr = 17
AVR_inc = 18
AVR_dec = 19
AVR_tst = 20
AVR_clr = 21
AVR_ser = 22
AVR_cp = 23
AVR_cpc = 24
AVR_cpi = 25
AVR_mul = 26
AVR_rjmp = 27
AVR_ijmp = 28
AVR_jmp = 29
AVR_rcall = 30
AVR_icall = 31
AVR_call = 32
AVR_ret = 33
AVR_reti = 34
AVR_cpse = 35
AVR_sbrc = 36
AVR_sbrs = 37
AVR_sbic = 38
AVR_sbis = 39
AVR_brbs = 40
AVR_brbc = 41
AVR_breq = 42
AVR_brne = 43
AVR_brcs = 44
AVR_brcc = 45
AVR_brsh = 46
AVR_brlo = 47
AVR_brmi = 48
AVR_brpl = 49
AVR_brge = 50
AVR_brlt = 51
AVR_brhs = 52
AVR_brhc = 53
AVR_brts = 54
AVR_brtc = 55
AVR_brvs = 56
AVR_brvc = 57
AVR_brie = 58
AVR_brid = 59
AVR_mov = 60
AVR_ldi = 61
AVR_lds = 62
AVR_ld = 63
AVR_ldd = 64
AVR_sts = 65
AVR_st = 66
AVR_std = 67
AVR_lpm = 68
AVR_in = 69
AVR_out = 70
AVR_push = 71
AVR_pop = 72
AVR_lsl = 73
AVR_lsr = 74
AVR_rol = 75
AVR_ror = 76
AVR_asr = 77
AVR_swap = 78
AVR_bset = 79
AVR_bclr = 80
AVR_sbi = 81
AVR_cbi = 82
AVR_bst = 83
AVR_bld = 84
AVR_sec = 85
AVR_clc = 86
AVR_sen = 87
AVR_cln = 88
AVR_sez = 89
AVR_clz = 90
AVR_sei = 91
AVR_cli = 92
AVR_ses = 93
AVR_cls = 94
AVR_sev = 95
AVR_clv = 96
AVR_set = 97
AVR_clt = 98
AVR_seh = 99
AVR_clh = 100
AVR_nop = 101
AVR_sleep = 102
AVR_wdr = 103
AVR_elpm = 104
AVR_espm = 105
AVR_fmul = 106
AVR_fmuls = 107
AVR_fmulsu = 108
AVR_movw = 109
AVR_muls = 110
AVR_mulsu = 111
AVR_spm = 112
AVR_eicall = 113
AVR_eijmp = 114
AVR_des = 115
AVR_lac = 116
AVR_las = 117
AVR_lat = 118
AVR_xch = 119
AVR_last = 120
_399A7FCDD38BA7F71B3EB8BA6F845075 = ctypes.c_uint32 # enum

# values for enumeration '_49804ECC545513722F7C143297BF37DB'
_49804ECC545513722F7C143297BF37DB__enumvalues = {
    0: 'MIPS_null',
    1: 'MIPS_add',
    2: 'MIPS_addu',
    3: 'MIPS_and',
    4: 'MIPS_dadd',
    5: 'MIPS_daddu',
    6: 'MIPS_dsub',
    7: 'MIPS_dsubu',
    8: 'MIPS_nor',
    9: 'MIPS_or',
    10: 'MIPS_slt',
    11: 'MIPS_sltu',
    12: 'MIPS_sub',
    13: 'MIPS_subu',
    14: 'MIPS_xor',
    15: 'MIPS_dsll',
    16: 'MIPS_dsll32',
    17: 'MIPS_dsra',
    18: 'MIPS_dsra32',
    19: 'MIPS_dsrl',
    20: 'MIPS_dsrl32',
    21: 'MIPS_sll',
    22: 'MIPS_sra',
    23: 'MIPS_srl',
    24: 'MIPS_dsllv',
    25: 'MIPS_dsrav',
    26: 'MIPS_dsrlv',
    27: 'MIPS_sllv',
    28: 'MIPS_srav',
    29: 'MIPS_srlv',
    30: 'MIPS_addi',
    31: 'MIPS_addiu',
    32: 'MIPS_daddi',
    33: 'MIPS_daddiu',
    34: 'MIPS_slti',
    35: 'MIPS_sltiu',
    36: 'MIPS_andi',
    37: 'MIPS_ori',
    38: 'MIPS_xori',
    39: 'MIPS_teq',
    40: 'MIPS_tge',
    41: 'MIPS_tgeu',
    42: 'MIPS_tlt',
    43: 'MIPS_tltu',
    44: 'MIPS_tne',
    45: 'MIPS_cfc1',
    46: 'MIPS_cfc2',
    47: 'MIPS_ctc1',
    48: 'MIPS_ctc2',
    49: 'MIPS_dmfc0',
    50: 'MIPS_qmfc2',
    51: 'MIPS_dmtc0',
    52: 'MIPS_qmtc2',
    53: 'MIPS_mfc0',
    54: 'MIPS_mfc1',
    55: 'MIPS_mfc2',
    56: 'MIPS_mtc0',
    57: 'MIPS_mtc1',
    58: 'MIPS_mtc2',
    59: 'MIPS_teqi',
    60: 'MIPS_tgei',
    61: 'MIPS_tgeiu',
    62: 'MIPS_tlti',
    63: 'MIPS_tltiu',
    64: 'MIPS_tnei',
    65: 'MIPS_ddiv',
    66: 'MIPS_ddivu',
    67: 'MIPS_div',
    68: 'MIPS_divu',
    69: 'MIPS_dmult',
    70: 'MIPS_dmultu',
    71: 'MIPS_mult',
    72: 'MIPS_multu',
    73: 'MIPS_mthi',
    74: 'MIPS_mtlo',
    75: 'MIPS_mfhi',
    76: 'MIPS_mflo',
    77: 'MIPS_cop0',
    78: 'MIPS_cop1',
    79: 'MIPS_cop2',
    80: 'MIPS_break',
    81: 'MIPS_syscall',
    82: 'MIPS_bc0f',
    83: 'MIPS_bc1f',
    84: 'MIPS_bc2f',
    85: 'MIPS_bc3f',
    86: 'MIPS_bc0fl',
    87: 'MIPS_bc1fl',
    88: 'MIPS_bc2fl',
    89: 'MIPS_bc3fl',
    90: 'MIPS_bc0t',
    91: 'MIPS_bc1t',
    92: 'MIPS_bc2t',
    93: 'MIPS_bc3t',
    94: 'MIPS_bc0tl',
    95: 'MIPS_bc1tl',
    96: 'MIPS_bc2tl',
    97: 'MIPS_bc3tl',
    98: 'MIPS_bgez',
    99: 'MIPS_bgezal',
    100: 'MIPS_bgezall',
    101: 'MIPS_bgezl',
    102: 'MIPS_bgtz',
    103: 'MIPS_bgtzl',
    104: 'MIPS_blez',
    105: 'MIPS_blezl',
    106: 'MIPS_bltz',
    107: 'MIPS_bltzal',
    108: 'MIPS_bltzall',
    109: 'MIPS_bltzl',
    110: 'MIPS_beq',
    111: 'MIPS_beql',
    112: 'MIPS_bne',
    113: 'MIPS_bnel',
    114: 'MIPS_jalr',
    115: 'MIPS_j',
    116: 'MIPS_jr',
    117: 'MIPS_jal',
    118: 'MIPS_jalx',
    119: 'MIPS_cache',
    120: 'MIPS_lb',
    121: 'MIPS_lbu',
    122: 'MIPS_ldl',
    123: 'MIPS_ldr',
    124: 'MIPS_lwl',
    125: 'MIPS_lwr',
    126: 'MIPS_ld',
    127: 'MIPS_lld',
    128: 'MIPS_ldc1',
    129: 'MIPS_ldc2',
    130: 'MIPS_ll',
    131: 'MIPS_lw',
    132: 'MIPS_lwu',
    133: 'MIPS_lh',
    134: 'MIPS_lhu',
    135: 'MIPS_lui',
    136: 'MIPS_lwc1',
    137: 'MIPS_lwc2',
    138: 'MIPS_sb',
    139: 'MIPS_sdl',
    140: 'MIPS_sdr',
    141: 'MIPS_swl',
    142: 'MIPS_swr',
    143: 'MIPS_scd',
    144: 'MIPS_sd',
    145: 'MIPS_sdc1',
    146: 'MIPS_sdc2',
    147: 'MIPS_sc',
    148: 'MIPS_sw',
    149: 'MIPS_sh',
    150: 'MIPS_swc1',
    151: 'MIPS_swc2',
    152: 'MIPS_sync',
    153: 'MIPS_eret',
    154: 'MIPS_tlbp',
    155: 'MIPS_tlbr',
    156: 'MIPS_tlbwi',
    157: 'MIPS_tlbwr',
    158: 'MIPS_fadd',
    159: 'MIPS_fsub',
    160: 'MIPS_fmul',
    161: 'MIPS_fdiv',
    162: 'MIPS_fabs',
    163: 'MIPS_fcvt_s',
    164: 'MIPS_fcvt_d',
    165: 'MIPS_fcvt_w',
    166: 'MIPS_fcvt_l',
    167: 'MIPS_fround_l',
    168: 'MIPS_ftrunc_l',
    169: 'MIPS_fceil_l',
    170: 'MIPS_ffloor_l',
    171: 'MIPS_fround_w',
    172: 'MIPS_ftrunc_w',
    173: 'MIPS_fceil_w',
    174: 'MIPS_ffloor_w',
    175: 'MIPS_fmov',
    176: 'MIPS_fneg',
    177: 'MIPS_fsqrt',
    178: 'MIPS_fc_f',
    179: 'MIPS_fc_un',
    180: 'MIPS_fc_eq',
    181: 'MIPS_fc_ueq',
    182: 'MIPS_fc_olt',
    183: 'MIPS_fc_ult',
    184: 'MIPS_fc_ole',
    185: 'MIPS_fc_ule',
    186: 'MIPS_fc_sf',
    187: 'MIPS_fc_ngle',
    188: 'MIPS_fc_seq',
    189: 'MIPS_fc_ngl',
    190: 'MIPS_fc_lt',
    191: 'MIPS_fc_nge',
    192: 'MIPS_fc_le',
    193: 'MIPS_fc_ngt',
    194: 'MIPS_nop',
    195: 'MIPS_mov',
    196: 'MIPS_neg',
    197: 'MIPS_negu',
    198: 'MIPS_bnez',
    199: 'MIPS_bnezl',
    200: 'MIPS_beqz',
    201: 'MIPS_beqzl',
    202: 'MIPS_b',
    203: 'MIPS_bal',
    204: 'MIPS_li',
    205: 'MIPS_la',
    206: 'MIPS_pref',
    207: 'MIPS_ldxc1',
    208: 'MIPS_lwxc1',
    209: 'MIPS_sdxc1',
    210: 'MIPS_swxc1',
    211: 'MIPS_madd_s',
    212: 'MIPS_madd_d',
    213: 'MIPS_msub_s',
    214: 'MIPS_msub_d',
    215: 'MIPS_movf',
    216: 'MIPS_movt',
    217: 'MIPS_movn',
    218: 'MIPS_movz',
    219: 'MIPS_fmovf',
    220: 'MIPS_fmovt',
    221: 'MIPS_fmovn',
    222: 'MIPS_fmovz',
    223: 'MIPS_nmadd_s',
    224: 'MIPS_nmadd_d',
    225: 'MIPS_nmsub_s',
    226: 'MIPS_nmsub_d',
    227: 'MIPS_prefx',
    228: 'MIPS_frecip',
    229: 'MIPS_frsqrt',
    230: 'MIPS_lbv',
    231: 'MIPS_lsv',
    232: 'MIPS_llv',
    233: 'MIPS_ldv',
    234: 'MIPS_lqv',
    235: 'MIPS_lrv',
    236: 'MIPS_lpv',
    237: 'MIPS_luv',
    238: 'MIPS_lhv',
    239: 'MIPS_lfv',
    240: 'MIPS_lwv',
    241: 'MIPS_ltv',
    242: 'MIPS_sbv',
    243: 'MIPS_ssv',
    244: 'MIPS_slv',
    245: 'MIPS_sdv',
    246: 'MIPS_sqv',
    247: 'MIPS_srv',
    248: 'MIPS_spv',
    249: 'MIPS_suv',
    250: 'MIPS_shv',
    251: 'MIPS_sfv',
    252: 'MIPS_swv',
    253: 'MIPS_stv',
    254: 'MIPS_vmulf',
    255: 'MIPS_vmacf',
    256: 'MIPS_vmulu',
    257: 'MIPS_vmacu',
    258: 'MIPS_vrndp',
    259: 'MIPS_vrndn',
    260: 'MIPS_vmulq',
    261: 'MIPS_vmacq',
    262: 'MIPS_vmudh',
    263: 'MIPS_vmadh',
    264: 'MIPS_vmudm',
    265: 'MIPS_vmadm',
    266: 'MIPS_vmudn',
    267: 'MIPS_vmadn',
    268: 'MIPS_vmudl',
    269: 'MIPS_vmadl',
    270: 'MIPS_vadd',
    271: 'MIPS_vsub',
    272: 'MIPS_vsut',
    273: 'MIPS_vabs',
    274: 'MIPS_vaddc',
    275: 'MIPS_vsubc',
    276: 'MIPS_vaddb',
    277: 'MIPS_vsubb',
    278: 'MIPS_vaccb',
    279: 'MIPS_vsucb',
    280: 'MIPS_vsad',
    281: 'MIPS_vsac',
    282: 'MIPS_vsum',
    283: 'MIPS_vsaw',
    284: 'MIPS_vlt',
    285: 'MIPS_veq',
    286: 'MIPS_vne',
    287: 'MIPS_vge',
    288: 'MIPS_vcl',
    289: 'MIPS_vch',
    290: 'MIPS_vcr',
    291: 'MIPS_vmrg',
    292: 'MIPS_vand',
    293: 'MIPS_vnand',
    294: 'MIPS_vor',
    295: 'MIPS_vnor',
    296: 'MIPS_vxor',
    297: 'MIPS_vnxor',
    298: 'MIPS_vnoop',
    299: 'MIPS_vmov',
    300: 'MIPS_vrcp',
    301: 'MIPS_vrsq',
    302: 'MIPS_vrcph',
    303: 'MIPS_vrsqh',
    304: 'MIPS_vrcpl',
    305: 'MIPS_vrsql',
    306: 'MIPS_vinst',
    307: 'MIPS_vextt',
    308: 'MIPS_vinsq',
    309: 'MIPS_vextq',
    310: 'MIPS_vinsn',
    311: 'MIPS_vextn',
    312: 'MIPS_cfc0',
    313: 'MIPS_ctc0',
    314: 'MIPS_mtsa',
    314: 'MIPS_R5900_first',
    315: 'MIPS_mfsa',
    316: 'MIPS_mtsab',
    317: 'MIPS_mtsah',
    318: 'MIPS_fadda',
    319: 'MIPS_fsuba',
    320: 'MIPS_fmula',
    321: 'MIPS_fmadda',
    322: 'MIPS_fmsuba',
    323: 'MIPS_fmadd',
    324: 'MIPS_fmsub',
    325: 'MIPS_fmax',
    326: 'MIPS_fmin',
    327: 'MIPS_plzcw',
    328: 'MIPS_mthi1',
    329: 'MIPS_mtlo1',
    330: 'MIPS_pmthl_lw',
    331: 'MIPS_pmthi',
    332: 'MIPS_pmtlo',
    333: 'MIPS_div1',
    334: 'MIPS_divu1',
    335: 'MIPS_pdivw',
    336: 'MIPS_pdivuw',
    337: 'MIPS_pdivbw',
    338: 'MIPS_paddw',
    339: 'MIPS_pmaddw',
    340: 'MIPS_mult1',
    341: 'MIPS_multu1',
    342: 'MIPS_madd1',
    343: 'MIPS_maddu1',
    344: 'MIPS_pmadduw',
    345: 'MIPS_psubw',
    346: 'MIPS_pcgtw',
    347: 'MIPS_psllvw',
    348: 'MIPS_pceqw',
    349: 'MIPS_pmaxw',
    350: 'MIPS_psrlvw',
    351: 'MIPS_pminw',
    352: 'MIPS_psravw',
    353: 'MIPS_paddh',
    354: 'MIPS_pmsubw',
    355: 'MIPS_padsbh',
    356: 'MIPS_psubh',
    357: 'MIPS_pcgth',
    358: 'MIPS_pceqh',
    359: 'MIPS_pmaxh',
    360: 'MIPS_pminh',
    361: 'MIPS_paddb',
    362: 'MIPS_psubb',
    363: 'MIPS_pcgtb',
    364: 'MIPS_pinth',
    365: 'MIPS_pceqb',
    366: 'MIPS_pintoh',
    367: 'MIPS_pmultw',
    368: 'MIPS_pmultuw',
    369: 'MIPS_pcpyld',
    370: 'MIPS_pcpyud',
    371: 'MIPS_paddsw',
    372: 'MIPS_pmaddh',
    373: 'MIPS_padduw',
    374: 'MIPS_psubsw',
    375: 'MIPS_phmadh',
    376: 'MIPS_psubuw',
    377: 'MIPS_pextlw',
    378: 'MIPS_pand',
    379: 'MIPS_pextuw',
    380: 'MIPS_por',
    381: 'MIPS_ppacw',
    382: 'MIPS_pxor',
    383: 'MIPS_pnor',
    384: 'MIPS_paddsh',
    385: 'MIPS_pmsubh',
    386: 'MIPS_padduh',
    387: 'MIPS_psubsh',
    388: 'MIPS_phmsbh',
    389: 'MIPS_psubuh',
    390: 'MIPS_pextlh',
    391: 'MIPS_pextuh',
    392: 'MIPS_ppach',
    393: 'MIPS_paddsb',
    394: 'MIPS_paddub',
    395: 'MIPS_psubsb',
    396: 'MIPS_psubub',
    397: 'MIPS_pextlb',
    398: 'MIPS_pextub',
    399: 'MIPS_ppacb',
    400: 'MIPS_qfsrv',
    401: 'MIPS_pmulth',
    402: 'MIPS_pabsw',
    403: 'MIPS_pabsh',
    404: 'MIPS_pexoh',
    405: 'MIPS_pexch',
    406: 'MIPS_prevh',
    407: 'MIPS_pcpyh',
    408: 'MIPS_pext5',
    409: 'MIPS_pexow',
    410: 'MIPS_pexcw',
    411: 'MIPS_ppac5',
    412: 'MIPS_prot3w',
    413: 'MIPS_psllh',
    414: 'MIPS_psrlh',
    415: 'MIPS_psrah',
    416: 'MIPS_psllw',
    417: 'MIPS_psrlw',
    418: 'MIPS_psraw',
    419: 'MIPS_mfhi1',
    420: 'MIPS_mflo1',
    421: 'MIPS_pmfhi',
    422: 'MIPS_pmflo',
    423: 'MIPS_pmfhl',
    424: 'MIPS_lq',
    425: 'MIPS_sq',
    426: 'MIPS_lqc2',
    427: 'MIPS_sqc2',
    428: 'MIPS_madd_r5900',
    429: 'MIPS_maddu_r5900',
    429: 'MIPS_R5900_last',
    430: 'MIPS_mult3',
    431: 'MIPS_multu3',
    439: 'MIPS_bteqz',
    440: 'MIPS_btnez',
    441: 'MIPS_cmp',
    442: 'MIPS_cmpi',
    458: 'MIPS_extend',
    473: 'MIPS_move',
    477: 'MIPS_not',
    495: 'MIPS_dla',
    498: 'MIPS_clo',
    499: 'MIPS_clz',
    500: 'MIPS_madd',
    501: 'MIPS_maddu',
    502: 'MIPS_msub',
    503: 'MIPS_msubu',
    504: 'MIPS_mul',
    505: 'MIPS_sdbbp',
    506: 'MIPS_wait',
    507: 'MIPS_alnv_ps',
    508: 'MIPS_deret',
    509: 'MIPS_di',
    510: 'MIPS_ehb',
    511: 'MIPS_ei',
    512: 'MIPS_ext',
    513: 'MIPS_fcvt_ps',
    514: 'MIPS_fcvt_s_pl',
    515: 'MIPS_fcvt_s_pu',
    516: 'MIPS_ins',
    517: 'MIPS_jalr_hb',
    518: 'MIPS_jr_hb',
    519: 'MIPS_luxc1',
    520: 'MIPS_madd_ps',
    521: 'MIPS_mfhc1',
    522: 'MIPS_mfhc2',
    523: 'MIPS_msub_ps',
    524: 'MIPS_mthc1',
    525: 'MIPS_mthc2',
    526: 'MIPS_nmadd_ps',
    527: 'MIPS_nmsub_ps',
    528: 'MIPS_pll',
    529: 'MIPS_plu',
    530: 'MIPS_pul',
    531: 'MIPS_puu',
    532: 'MIPS_rdhwr',
    533: 'MIPS_rdpgpr',
    534: 'MIPS_rotr',
    535: 'MIPS_rotrv',
    536: 'MIPS_seb',
    537: 'MIPS_seh',
    538: 'MIPS_suxc1',
    539: 'MIPS_synci',
    540: 'MIPS_wrpgpr',
    541: 'MIPS_wsbh',
    542: 'MIPS_dmfc1',
    543: 'MIPS_dmtc1',
    544: 'MIPS_save',
    545: 'MIPS_restore',
    546: 'MIPS_jalrc',
    547: 'MIPS_jrc',
    548: 'MIPS_sew',
    549: 'MIPS_zeb',
    550: 'MIPS_zeh',
    551: 'MIPS_zew',
    552: 'MIPS_ssnop',
    553: 'MIPS_li_s',
    554: 'MIPS_li_d',
    555: 'MIPS_dneg',
    556: 'MIPS_dnegu',
    557: 'MIPS_pause',
    558: 'MIPS_dclo',
    559: 'MIPS_dclz',
    560: 'MIPS_dext',
    561: 'MIPS_dextm',
    562: 'MIPS_dextu',
    563: 'MIPS_dins',
    564: 'MIPS_dinsm',
    565: 'MIPS_dinsu',
    566: 'MIPS_dmfc2',
    567: 'MIPS_dmtc2',
    568: 'MIPS_drotr',
    569: 'MIPS_drotr32',
    570: 'MIPS_drotrv',
    571: 'MIPS_dsbh',
    572: 'MIPS_dshd',
    573: 'MIPS_baddu',
    574: 'MIPS_bbit0',
    575: 'MIPS_bbit032',
    576: 'MIPS_bbit1',
    577: 'MIPS_bbit132',
    578: 'MIPS_cins',
    579: 'MIPS_cins32',
    580: 'MIPS_dmul',
    581: 'MIPS_dpop',
    582: 'MIPS_exts',
    583: 'MIPS_exts32',
    584: 'MIPS_mtm0',
    585: 'MIPS_mtm1',
    586: 'MIPS_mtm2',
    587: 'MIPS_mtp0',
    588: 'MIPS_mtp1',
    589: 'MIPS_mtp2',
    590: 'MIPS_pop',
    591: 'MIPS_saa',
    592: 'MIPS_saad',
    593: 'MIPS_seq',
    594: 'MIPS_seqi',
    595: 'MIPS_sne',
    596: 'MIPS_snei',
    597: 'MIPS_synciobdma',
    598: 'MIPS_syncs',
    599: 'MIPS_syncw',
    600: 'MIPS_syncws',
    601: 'MIPS_uld',
    602: 'MIPS_ulw',
    603: 'MIPS_usd',
    604: 'MIPS_usw',
    605: 'MIPS_v3mulu',
    606: 'MIPS_vmm0',
    607: 'MIPS_vmulu_cn',
    608: 'MIPS_dbreak',
    609: 'MIPS_dret',
    610: 'MIPS_mfdr',
    611: 'MIPS_mtdr',
    612: 'PSP_bitrev',
    613: 'PSP_max',
    614: 'PSP_min',
    615: 'PSP_mfic',
    616: 'PSP_mtic',
    617: 'PSP_wsbw',
    618: 'PSP_sleep',
    619: 'PSP_lv',
    620: 'PSP_lvl',
    621: 'PSP_lvr',
    622: 'PSP_sv',
    623: 'PSP_svl',
    624: 'PSP_svr',
    625: 'PSP_mfv',
    626: 'PSP_mtv',
    627: 'PSP_mfvc',
    628: 'PSP_mtvc',
    629: 'PSP_bvf',
    630: 'PSP_bvt',
    631: 'PSP_bvfl',
    632: 'PSP_bvtl',
    633: 'PSP_vnop',
    634: 'PSP_vflush',
    635: 'PSP_vsync',
    636: 'PSP_vabs',
    637: 'PSP_vadd',
    638: 'PSP_vasin',
    639: 'PSP_vavg',
    640: 'PSP_vbfy1',
    641: 'PSP_vbfy2',
    642: 'PSP_vc2i',
    643: 'PSP_vcmovf',
    644: 'PSP_vcmovt',
    645: 'PSP_vcmp',
    646: 'PSP_vcos',
    647: 'PSP_vcrs',
    648: 'PSP_vcrsp',
    649: 'PSP_vcst',
    650: 'PSP_vdet',
    651: 'PSP_vdiv',
    652: 'PSP_vdot',
    653: 'PSP_vexp2',
    654: 'PSP_vf2h',
    655: 'PSP_vf2id',
    656: 'PSP_vf2in',
    657: 'PSP_vf2iu',
    658: 'PSP_vf2iz',
    659: 'PSP_vfad',
    660: 'PSP_vfim',
    661: 'PSP_vh2f',
    662: 'PSP_vhdp',
    663: 'PSP_vhtfm2',
    664: 'PSP_vhtfm3',
    665: 'PSP_vhtfm4',
    666: 'PSP_vi2c',
    667: 'PSP_vi2f',
    668: 'PSP_vi2s',
    669: 'PSP_vi2uc',
    670: 'PSP_vi2us',
    671: 'PSP_vidt',
    672: 'PSP_viim',
    673: 'PSP_vlgb',
    674: 'PSP_vlog2',
    675: 'PSP_vmax',
    676: 'PSP_vmfvc',
    677: 'PSP_vmidt',
    678: 'PSP_vmin',
    679: 'PSP_vmmov',
    680: 'PSP_vmmul',
    681: 'PSP_vmone',
    682: 'PSP_vmov',
    683: 'PSP_vmscl',
    684: 'PSP_vmtvc',
    685: 'PSP_vmul',
    686: 'PSP_vmzero',
    687: 'PSP_vneg',
    688: 'PSP_vnrcp',
    689: 'PSP_vnsin',
    690: 'PSP_vocp',
    691: 'PSP_vone',
    692: 'PSP_vpfxd',
    693: 'PSP_vpfxs',
    694: 'PSP_vpfxt',
    695: 'PSP_vqmul',
    696: 'PSP_vrcp',
    697: 'PSP_vrexp2',
    698: 'PSP_vrndf1',
    699: 'PSP_vrndf2',
    700: 'PSP_vrndi',
    701: 'PSP_vrnds',
    702: 'PSP_vrot',
    703: 'PSP_vrsq',
    704: 'PSP_vs2i',
    705: 'PSP_vsat0',
    706: 'PSP_vsat1',
    707: 'PSP_vsbn',
    708: 'PSP_vsbz',
    709: 'PSP_vscl',
    710: 'PSP_vscmp',
    711: 'PSP_vsge',
    712: 'PSP_vsgn',
    713: 'PSP_vsin',
    714: 'PSP_vslt',
    715: 'PSP_vsocp',
    716: 'PSP_vsqrt',
    717: 'PSP_vsrt1',
    718: 'PSP_vsrt2',
    719: 'PSP_vsrt3',
    720: 'PSP_vsrt4',
    721: 'PSP_vsub',
    722: 'PSP_vt4444',
    723: 'PSP_vt5551',
    724: 'PSP_vt5650',
    725: 'PSP_vtfm2',
    726: 'PSP_vtfm3',
    727: 'PSP_vtfm4',
    728: 'PSP_vuc2i',
    729: 'PSP_vus2i',
    730: 'PSP_vwbn',
    731: 'PSP_vzero',
    732: 'PSP_mfvme',
    733: 'PSP_mtvme',
    734: 'MIPS_ac0iu',
    735: 'MIPS_bs1f',
    736: 'MIPS_bfins',
    737: 'MIPS_addmiu',
    738: 'MIPS_sadd',
    739: 'MIPS_ssub',
    740: 'MIPS_btst',
    741: 'MIPS_bclr',
    742: 'MIPS_bset',
    743: 'MIPS_bins',
    744: 'MIPS_bext',
    745: 'MIPS_dive',
    746: 'MIPS_diveu',
    747: 'MIPS_min',
    748: 'MIPS_max',
    749: 'MIPS_madd3',
    750: 'MIPS_maddu3',
    751: 'MIPS_msub3',
    752: 'MIPS_msubu3',
    753: 'MIPS_dvpe',
    754: 'MIPS_evpe',
    755: 'MIPS_dmt',
    756: 'MIPS_emt',
    757: 'MIPS_fork',
    758: 'MIPS_yield',
    759: 'MIPS_mftr',
    760: 'MIPS_mftc0',
    761: 'MIPS_mftlo',
    762: 'MIPS_mfthi',
    763: 'MIPS_mftacx',
    764: 'MIPS_mftdsp',
    765: 'MIPS_mfthc1',
    766: 'MIPS_mftc1',
    767: 'MIPS_cftc1',
    768: 'MIPS_mfthc2',
    769: 'MIPS_mftc2',
    770: 'MIPS_cftc2',
    771: 'MIPS_mftgpr',
    772: 'MIPS_mttr',
    773: 'MIPS_mttc0',
    774: 'MIPS_mttlo',
    775: 'MIPS_mtthi',
    776: 'MIPS_mttacx',
    777: 'MIPS_mttdsp',
    778: 'MIPS_mtthc1',
    779: 'MIPS_mttc1',
    780: 'MIPS_cttc1',
    781: 'MIPS_mtthc2',
    782: 'MIPS_mttc2',
    783: 'MIPS_cttc2',
    784: 'MIPS_mttgpr',
    785: 'MIPS_faddr',
    786: 'MIPS_bc1any2f',
    787: 'MIPS_bc1any2t',
    788: 'MIPS_bc1any4f',
    789: 'MIPS_bc1any4t',
    790: 'MIPS_fcabs_f',
    791: 'MIPS_fcabs_un',
    792: 'MIPS_fcabs_eq',
    793: 'MIPS_fcabs_ueq',
    794: 'MIPS_fcabs_olt',
    795: 'MIPS_fcabs_ult',
    796: 'MIPS_fcabs_ole',
    797: 'MIPS_fcabs_ule',
    798: 'MIPS_fcabs_sf',
    799: 'MIPS_fcabs_ngle',
    800: 'MIPS_fcabs_seq',
    801: 'MIPS_fcabs_ngl',
    802: 'MIPS_fcabs_lt',
    803: 'MIPS_fcabs_nge',
    804: 'MIPS_fcabs_le',
    805: 'MIPS_fcabs_ngt',
    806: 'MIPS_fcvt_pw_ps',
    807: 'MIPS_fcvt_ps_pw',
    808: 'MIPS_fmulr',
    809: 'MIPS_frecip1',
    810: 'MIPS_frecip2',
    811: 'MIPS_frsqrt1',
    812: 'MIPS_frsqrt2',
    813: 'MIPS_lwxs',
    814: 'MIPS_maddp',
    815: 'MIPS_mflhxu',
    816: 'MIPS_mtlhx',
    817: 'MIPS_multp',
    818: 'MIPS_pperm',
    819: 'MIPS_jals',
    820: 'MIPS_lwp',
    821: 'MIPS_ldp',
    822: 'MIPS_lwm',
    823: 'MIPS_ldm',
    824: 'MIPS_swp',
    825: 'MIPS_sdp',
    826: 'MIPS_swm',
    827: 'MIPS_sdm',
    828: 'MIPS_bnezc',
    829: 'MIPS_bltzals',
    830: 'MIPS_beqzc',
    831: 'MIPS_bgezals',
    832: 'MIPS_jraddiusp',
    833: 'MIPS_jalrs',
    834: 'MIPS_jalrs_hb',
    835: 'MIPS_movep',
    836: 'MIPS_dli',
    837: 'MIPS_insv',
    838: 'MIPS_dinsv',
    839: 'MIPS_bposge32',
    840: 'MIPS_bposge64',
    841: 'MIPS_addu_qb',
    842: 'MIPS_addu_ph',
    843: 'MIPS_addsc',
    844: 'MIPS_subu_qb',
    845: 'MIPS_subu_ph',
    846: 'MIPS_addwc',
    847: 'MIPS_addq_ph',
    848: 'MIPS_modsub',
    849: 'MIPS_subq_ph',
    850: 'MIPS_addu_s_qb',
    851: 'MIPS_addu_s_ph',
    852: 'MIPS_raddu_w_qb',
    853: 'MIPS_muleq_s_w_phl',
    854: 'MIPS_subu_s_qb',
    855: 'MIPS_subu_s_ph',
    856: 'MIPS_muleq_s_w_phr',
    857: 'MIPS_muleu_s_ph_qbl',
    858: 'MIPS_addq_s_ph',
    859: 'MIPS_addq_s_w',
    860: 'MIPS_mulq_s_ph',
    861: 'MIPS_muleu_s_ph_qbr',
    862: 'MIPS_subq_s_ph',
    863: 'MIPS_subq_s_w',
    864: 'MIPS_mulq_rs_ph',
    865: 'MIPS_addu_ob',
    866: 'MIPS_subu_ob',
    867: 'MIPS_addq_qh',
    868: 'MIPS_addq_pw',
    869: 'MIPS_subq_qh',
    870: 'MIPS_subq_pw',
    871: 'MIPS_addu_s_ob',
    872: 'MIPS_raddu_l_ob',
    873: 'MIPS_muleq_s_pw_qhl',
    874: 'MIPS_subu_s_ob',
    875: 'MIPS_muleq_s_pw_qhr',
    876: 'MIPS_muleu_s_qh_obl',
    877: 'MIPS_addq_s_qh',
    878: 'MIPS_addq_s_pw',
    879: 'MIPS_muleu_s_qh_obr',
    880: 'MIPS_subq_s_qh',
    881: 'MIPS_subq_s_pw',
    882: 'MIPS_mulq_rs_qh',
    883: 'MIPS_cmpu_eq_qb',
    884: 'MIPS_cmp_eq_ph',
    885: 'MIPS_cmpgdu_eq_qb',
    886: 'MIPS_cmpu_lt_qb',
    887: 'MIPS_cmp_lt_ph',
    888: 'MIPS_cmpgdu_lt_qb',
    889: 'MIPS_cmpu_le_qb',
    890: 'MIPS_cmp_le_ph',
    891: 'MIPS_cmpgdu_le_qb',
    892: 'MIPS_pick_qb',
    893: 'MIPS_pick_ph',
    894: 'MIPS_cmpgu_eq_qb',
    895: 'MIPS_precrq_qb_ph',
    896: 'MIPS_precrq_ph_w',
    897: 'MIPS_cmpgu_lt_qb',
    898: 'MIPS_precr_qb_ph',
    899: 'MIPS_precrq_rs_ph_w',
    900: 'MIPS_cmpgu_le_qb',
    901: 'MIPS_packrl_ph',
    902: 'MIPS_precr_sra_ph_w',
    903: 'MIPS_precrqu_s_qb_ph',
    904: 'MIPS_precr_sra_r_ph_w',
    905: 'MIPS_cmpu_eq_ob',
    906: 'MIPS_cmp_eq_qh',
    907: 'MIPS_cmp_eq_pw',
    908: 'MIPS_cmpu_lt_ob',
    909: 'MIPS_cmp_lt_qh',
    910: 'MIPS_cmp_lt_pw',
    911: 'MIPS_cmpu_le_ob',
    912: 'MIPS_cmp_le_qh',
    913: 'MIPS_cmp_le_pw',
    914: 'MIPS_pick_ob',
    915: 'MIPS_pick_qh',
    916: 'MIPS_pick_pw',
    917: 'MIPS_cmpgu_eq_ob',
    918: 'MIPS_precrq_ob_qh',
    919: 'MIPS_precrq_qh_pw',
    920: 'MIPS_precrq_pw_l',
    921: 'MIPS_cmpgu_lt_ob',
    922: 'MIPS_precrq_rs_qh_pw',
    923: 'MIPS_cmpgu_le_ob',
    924: 'MIPS_packrl_pw',
    925: 'MIPS_precrqu_s_ob_qh',
    926: 'MIPS_absq_s_qb',
    927: 'MIPS_absq_s_ph',
    928: 'MIPS_absq_s_w',
    929: 'MIPS_repl_qb',
    930: 'MIPS_repl_ph',
    931: 'MIPS_replv_qb',
    932: 'MIPS_replv_ph',
    933: 'MIPS_bitrev',
    934: 'MIPS_precequ_ph_qbl',
    935: 'MIPS_preceq_w_phl',
    936: 'MIPS_preceu_ph_qbl',
    937: 'MIPS_precequ_ph_qbr',
    938: 'MIPS_preceq_w_phr',
    939: 'MIPS_preceu_ph_qbr',
    940: 'MIPS_precequ_ph_qbla',
    941: 'MIPS_preceu_ph_qbla',
    942: 'MIPS_precequ_ph_qbra',
    943: 'MIPS_preceu_ph_qbra',
    944: 'MIPS_absq_s_qh',
    945: 'MIPS_absq_s_pw',
    946: 'MIPS_repl_ob',
    947: 'MIPS_repl_qh',
    948: 'MIPS_repl_pw',
    949: 'MIPS_replv_ob',
    950: 'MIPS_replv_qh',
    951: 'MIPS_replv_pw',
    952: 'MIPS_precequ_pw_qhl',
    953: 'MIPS_preceq_pw_qhl',
    954: 'MIPS_preceq_s_l_pwl',
    955: 'MIPS_preceu_qh_obl',
    956: 'MIPS_precequ_pw_qhr',
    957: 'MIPS_preceq_pw_qhr',
    958: 'MIPS_preceq_s_l_pwr',
    959: 'MIPS_preceu_qh_obr',
    960: 'MIPS_precequ_pw_qhla',
    961: 'MIPS_preceq_pw_qhla',
    962: 'MIPS_preceu_qh_obla',
    963: 'MIPS_precequ_pw_qhra',
    964: 'MIPS_preceq_pw_qhra',
    965: 'MIPS_preceu_qh_obra',
    966: 'MIPS_shll_qb',
    967: 'MIPS_shll_ph',
    968: 'MIPS_shrl_qb',
    969: 'MIPS_shra_ph',
    970: 'MIPS_shrl_ph',
    971: 'MIPS_shllv_qb',
    972: 'MIPS_shllv_ph',
    973: 'MIPS_shrlv_qb',
    974: 'MIPS_shrav_ph',
    975: 'MIPS_shrlv_ph',
    976: 'MIPS_shra_qb',
    977: 'MIPS_shll_s_ph',
    978: 'MIPS_shll_s_w',
    979: 'MIPS_shra_r_qb',
    980: 'MIPS_shra_r_ph',
    981: 'MIPS_shra_r_w',
    982: 'MIPS_shrav_qb',
    983: 'MIPS_shllv_s_ph',
    984: 'MIPS_shllv_s_w',
    985: 'MIPS_shrav_r_qb',
    986: 'MIPS_shrav_r_ph',
    987: 'MIPS_shrav_r_w',
    988: 'MIPS_shll_ob',
    989: 'MIPS_shll_qh',
    990: 'MIPS_shll_pw',
    991: 'MIPS_shrl_ob',
    992: 'MIPS_shra_qh',
    993: 'MIPS_shra_pw',
    994: 'MIPS_shllv_ob',
    995: 'MIPS_shllv_qh',
    996: 'MIPS_shllv_pw',
    997: 'MIPS_shrlv_ob',
    998: 'MIPS_shrav_qh',
    999: 'MIPS_shrav_pw',
    1000: 'MIPS_shll_s_qh',
    1001: 'MIPS_shll_s_pw',
    1002: 'MIPS_shra_r_qh',
    1003: 'MIPS_shra_r_pw',
    1004: 'MIPS_shllv_s_qh',
    1005: 'MIPS_shllv_s_pw',
    1006: 'MIPS_shrav_r_qh',
    1007: 'MIPS_shrav_r_pw',
    1008: 'MIPS_lwx',
    1009: 'MIPS_ldx',
    1010: 'MIPS_lhx',
    1011: 'MIPS_lbux',
    1012: 'MIPS_dpa_w_ph',
    1013: 'MIPS_dpax_w_ph',
    1014: 'MIPS_maq_sa_w_phl',
    1015: 'MIPS_dpaqx_s_w_ph',
    1016: 'MIPS_dps_w_ph',
    1017: 'MIPS_dpsx_w_ph',
    1018: 'MIPS_dpsqx_s_w_ph',
    1019: 'MIPS_mulsa_w_ph',
    1020: 'MIPS_maq_sa_w_phr',
    1021: 'MIPS_dpaqx_sa_w_ph',
    1022: 'MIPS_dpau_h_qbl',
    1023: 'MIPS_dpsu_h_qbl',
    1024: 'MIPS_dpsqx_sa_w_ph',
    1025: 'MIPS_dpaq_s_w_ph',
    1026: 'MIPS_dpaq_sa_l_w',
    1027: 'MIPS_maq_s_w_phl',
    1028: 'MIPS_dpsq_s_w_ph',
    1029: 'MIPS_dpsq_sa_l_w',
    1030: 'MIPS_mulsaq_s_w_ph',
    1031: 'MIPS_maq_s_w_phr',
    1032: 'MIPS_dpau_h_qbr',
    1033: 'MIPS_dpsu_h_qbr',
    1034: 'MIPS_maq_sa_w_qhll',
    1035: 'MIPS_maq_sa_w_qhlr',
    1036: 'MIPS_dmadd',
    1037: 'MIPS_dmsub',
    1038: 'MIPS_maq_sa_w_qhrl',
    1039: 'MIPS_dpau_h_obl',
    1040: 'MIPS_dpsu_h_obl',
    1041: 'MIPS_maq_sa_w_qhrr',
    1042: 'MIPS_dpaq_s_w_qh',
    1043: 'MIPS_dpaq_sa_l_pw',
    1044: 'MIPS_maq_s_w_qhll',
    1045: 'MIPS_maq_s_l_pwl',
    1046: 'MIPS_dpsq_s_w_qh',
    1047: 'MIPS_dpsq_sa_l_pw',
    1048: 'MIPS_maq_s_w_qhlr',
    1049: 'MIPS_dmaddu',
    1050: 'MIPS_mulsaq_s_w_qh',
    1051: 'MIPS_mulsaq_s_l_pw',
    1052: 'MIPS_maq_s_w_qhrl',
    1053: 'MIPS_maq_s_l_pwr',
    1054: 'MIPS_dpau_h_obr',
    1055: 'MIPS_dpsu_h_obr',
    1056: 'MIPS_maq_s_w_qhrr',
    1057: 'MIPS_dmsubu',
    1058: 'MIPS_extr_w',
    1059: 'MIPS_extrv_w',
    1060: 'MIPS_extp',
    1061: 'MIPS_extpdp',
    1062: 'MIPS_rddsp',
    1063: 'MIPS_shilo',
    1064: 'MIPS_extpv',
    1065: 'MIPS_extpdpv',
    1066: 'MIPS_wrdsp',
    1067: 'MIPS_shilov',
    1068: 'MIPS_extr_r_w',
    1069: 'MIPS_extrv_r_w',
    1070: 'MIPS_extr_rs_w',
    1071: 'MIPS_extr_s_h',
    1072: 'MIPS_extrv_rs_w',
    1073: 'MIPS_extrv_s_h',
    1074: 'MIPS_mthlip',
    1075: 'MIPS_dextr_w',
    1076: 'MIPS_dextr_l',
    1077: 'MIPS_dextrv_w',
    1078: 'MIPS_dextrv_l',
    1079: 'MIPS_dextp',
    1080: 'MIPS_dextpdp',
    1081: 'MIPS_dshilo',
    1082: 'MIPS_dextpv',
    1083: 'MIPS_dextpdpv',
    1084: 'MIPS_dshilov',
    1085: 'MIPS_dextr_r_w',
    1086: 'MIPS_dextr_r_l',
    1087: 'MIPS_dextrv_r_w',
    1088: 'MIPS_dextrv_r_l',
    1089: 'MIPS_dextr_rs_w',
    1090: 'MIPS_dextr_s_h',
    1091: 'MIPS_dextr_rs_l',
    1092: 'MIPS_dextrv_rs_w',
    1093: 'MIPS_dextrv_s_h',
    1094: 'MIPS_dextrv_rs_l',
    1095: 'MIPS_dmthlip',
    1096: 'MIPS_adduh_qb',
    1097: 'MIPS_addqh_ph',
    1098: 'MIPS_addqh_w',
    1099: 'MIPS_subuh_qb',
    1100: 'MIPS_subqh_ph',
    1101: 'MIPS_subqh_w',
    1102: 'MIPS_adduh_r_qb',
    1103: 'MIPS_addqh_r_ph',
    1104: 'MIPS_addqh_r_w',
    1105: 'MIPS_subuh_r_qb',
    1106: 'MIPS_subqh_r_ph',
    1107: 'MIPS_subqh_r_w',
    1108: 'MIPS_mul_ph',
    1109: 'MIPS_mul_s_ph',
    1110: 'MIPS_mulq_s_w',
    1111: 'MIPS_mulq_rs_w',
    1112: 'MIPS_append',
    1113: 'MIPS_balign',
    1114: 'MIPS_prepend',
    1115: 'MIPS_laa',
    1116: 'MIPS_laad',
    1117: 'MIPS_lac',
    1118: 'MIPS_lacd',
    1119: 'MIPS_lad',
    1120: 'MIPS_ladd',
    1121: 'MIPS_lai',
    1122: 'MIPS_laid',
    1123: 'MIPS_las',
    1124: 'MIPS_lasd',
    1125: 'MIPS_law',
    1126: 'MIPS_lawd',
    1127: 'MIPS_lbx',
    1128: 'MIPS_lhux',
    1129: 'MIPS_lwux',
    1130: 'MIPS_qmac_00',
    1131: 'MIPS_qmac_01',
    1132: 'MIPS_qmac_02',
    1133: 'MIPS_qmac_03',
    1134: 'MIPS_qmacs_00',
    1135: 'MIPS_qmacs_01',
    1136: 'MIPS_qmacs_02',
    1137: 'MIPS_qmacs_03',
    1138: 'MIPS_zcb',
    1139: 'MIPS_zcbt',
    1140: 'MIPS_msa_sll_b',
    1141: 'MIPS_msa_sll_h',
    1142: 'MIPS_msa_sll_w',
    1143: 'MIPS_msa_sll_d',
    1144: 'MIPS_msa_slli_b',
    1145: 'MIPS_msa_slli_h',
    1146: 'MIPS_msa_slli_w',
    1147: 'MIPS_msa_slli_d',
    1148: 'MIPS_msa_sra_b',
    1149: 'MIPS_msa_sra_h',
    1150: 'MIPS_msa_sra_w',
    1151: 'MIPS_msa_sra_d',
    1152: 'MIPS_msa_srai_b',
    1153: 'MIPS_msa_srai_h',
    1154: 'MIPS_msa_srai_w',
    1155: 'MIPS_msa_srai_d',
    1156: 'MIPS_msa_srl_b',
    1157: 'MIPS_msa_srl_h',
    1158: 'MIPS_msa_srl_w',
    1159: 'MIPS_msa_srl_d',
    1160: 'MIPS_msa_srli_b',
    1161: 'MIPS_msa_srli_h',
    1162: 'MIPS_msa_srli_w',
    1163: 'MIPS_msa_srli_d',
    1164: 'MIPS_msa_bclr_b',
    1165: 'MIPS_msa_bclr_h',
    1166: 'MIPS_msa_bclr_w',
    1167: 'MIPS_msa_bclr_d',
    1168: 'MIPS_msa_bclri_b',
    1169: 'MIPS_msa_bclri_h',
    1170: 'MIPS_msa_bclri_w',
    1171: 'MIPS_msa_bclri_d',
    1172: 'MIPS_msa_bset_b',
    1173: 'MIPS_msa_bset_h',
    1174: 'MIPS_msa_bset_w',
    1175: 'MIPS_msa_bset_d',
    1176: 'MIPS_msa_bseti_b',
    1177: 'MIPS_msa_bseti_h',
    1178: 'MIPS_msa_bseti_w',
    1179: 'MIPS_msa_bseti_d',
    1180: 'MIPS_msa_bneg_b',
    1181: 'MIPS_msa_bneg_h',
    1182: 'MIPS_msa_bneg_w',
    1183: 'MIPS_msa_bneg_d',
    1184: 'MIPS_msa_bnegi_b',
    1185: 'MIPS_msa_bnegi_h',
    1186: 'MIPS_msa_bnegi_w',
    1187: 'MIPS_msa_bnegi_d',
    1188: 'MIPS_msa_binsl_b',
    1189: 'MIPS_msa_binsl_h',
    1190: 'MIPS_msa_binsl_w',
    1191: 'MIPS_msa_binsl_d',
    1192: 'MIPS_msa_binsli_b',
    1193: 'MIPS_msa_binsli_h',
    1194: 'MIPS_msa_binsli_w',
    1195: 'MIPS_msa_binsli_d',
    1196: 'MIPS_msa_binsr_b',
    1197: 'MIPS_msa_binsr_h',
    1198: 'MIPS_msa_binsr_w',
    1199: 'MIPS_msa_binsr_d',
    1200: 'MIPS_msa_binsri_b',
    1201: 'MIPS_msa_binsri_h',
    1202: 'MIPS_msa_binsri_w',
    1203: 'MIPS_msa_binsri_d',
    1204: 'MIPS_msa_addv_b',
    1205: 'MIPS_msa_addv_h',
    1206: 'MIPS_msa_addv_w',
    1207: 'MIPS_msa_addv_d',
    1208: 'MIPS_msa_addvi_b',
    1209: 'MIPS_msa_addvi_h',
    1210: 'MIPS_msa_addvi_w',
    1211: 'MIPS_msa_addvi_d',
    1212: 'MIPS_msa_subv_b',
    1213: 'MIPS_msa_subv_h',
    1214: 'MIPS_msa_subv_w',
    1215: 'MIPS_msa_subv_d',
    1216: 'MIPS_msa_subvi_b',
    1217: 'MIPS_msa_subvi_h',
    1218: 'MIPS_msa_subvi_w',
    1219: 'MIPS_msa_subvi_d',
    1220: 'MIPS_msa_max_s_b',
    1221: 'MIPS_msa_max_s_h',
    1222: 'MIPS_msa_max_s_w',
    1223: 'MIPS_msa_max_s_d',
    1224: 'MIPS_msa_maxi_s_b',
    1225: 'MIPS_msa_maxi_s_h',
    1226: 'MIPS_msa_maxi_s_w',
    1227: 'MIPS_msa_maxi_s_d',
    1228: 'MIPS_msa_max_u_b',
    1229: 'MIPS_msa_max_u_h',
    1230: 'MIPS_msa_max_u_w',
    1231: 'MIPS_msa_max_u_d',
    1232: 'MIPS_msa_maxi_u_b',
    1233: 'MIPS_msa_maxi_u_h',
    1234: 'MIPS_msa_maxi_u_w',
    1235: 'MIPS_msa_maxi_u_d',
    1236: 'MIPS_msa_min_s_b',
    1237: 'MIPS_msa_min_s_h',
    1238: 'MIPS_msa_min_s_w',
    1239: 'MIPS_msa_min_s_d',
    1240: 'MIPS_msa_mini_s_b',
    1241: 'MIPS_msa_mini_s_h',
    1242: 'MIPS_msa_mini_s_w',
    1243: 'MIPS_msa_mini_s_d',
    1244: 'MIPS_msa_min_u_b',
    1245: 'MIPS_msa_min_u_h',
    1246: 'MIPS_msa_min_u_w',
    1247: 'MIPS_msa_min_u_d',
    1248: 'MIPS_msa_mini_u_b',
    1249: 'MIPS_msa_mini_u_h',
    1250: 'MIPS_msa_mini_u_w',
    1251: 'MIPS_msa_mini_u_d',
    1252: 'MIPS_msa_max_a_b',
    1253: 'MIPS_msa_max_a_h',
    1254: 'MIPS_msa_max_a_w',
    1255: 'MIPS_msa_max_a_d',
    1256: 'MIPS_msa_min_a_b',
    1257: 'MIPS_msa_min_a_h',
    1258: 'MIPS_msa_min_a_w',
    1259: 'MIPS_msa_min_a_d',
    1260: 'MIPS_msa_ceq_b',
    1261: 'MIPS_msa_ceq_h',
    1262: 'MIPS_msa_ceq_w',
    1263: 'MIPS_msa_ceq_d',
    1264: 'MIPS_msa_ceqi_b',
    1265: 'MIPS_msa_ceqi_h',
    1266: 'MIPS_msa_ceqi_w',
    1267: 'MIPS_msa_ceqi_d',
    1268: 'MIPS_msa_clt_s_b',
    1269: 'MIPS_msa_clt_s_h',
    1270: 'MIPS_msa_clt_s_w',
    1271: 'MIPS_msa_clt_s_d',
    1272: 'MIPS_msa_clti_s_b',
    1273: 'MIPS_msa_clti_s_h',
    1274: 'MIPS_msa_clti_s_w',
    1275: 'MIPS_msa_clti_s_d',
    1276: 'MIPS_msa_clt_u_b',
    1277: 'MIPS_msa_clt_u_h',
    1278: 'MIPS_msa_clt_u_w',
    1279: 'MIPS_msa_clt_u_d',
    1280: 'MIPS_msa_clti_u_b',
    1281: 'MIPS_msa_clti_u_h',
    1282: 'MIPS_msa_clti_u_w',
    1283: 'MIPS_msa_clti_u_d',
    1284: 'MIPS_msa_cle_s_b',
    1285: 'MIPS_msa_cle_s_h',
    1286: 'MIPS_msa_cle_s_w',
    1287: 'MIPS_msa_cle_s_d',
    1288: 'MIPS_msa_clei_s_b',
    1289: 'MIPS_msa_clei_s_h',
    1290: 'MIPS_msa_clei_s_w',
    1291: 'MIPS_msa_clei_s_d',
    1292: 'MIPS_msa_cle_u_b',
    1293: 'MIPS_msa_cle_u_h',
    1294: 'MIPS_msa_cle_u_w',
    1295: 'MIPS_msa_cle_u_d',
    1296: 'MIPS_msa_clei_u_b',
    1297: 'MIPS_msa_clei_u_h',
    1298: 'MIPS_msa_clei_u_w',
    1299: 'MIPS_msa_clei_u_d',
    1300: 'MIPS_msa_ld_b',
    1301: 'MIPS_msa_ld_h',
    1302: 'MIPS_msa_ld_w',
    1303: 'MIPS_msa_ld_d',
    1304: 'MIPS_msa_st_b',
    1305: 'MIPS_msa_st_h',
    1306: 'MIPS_msa_st_w',
    1307: 'MIPS_msa_st_d',
    1308: 'MIPS_msa_sat_s_b',
    1309: 'MIPS_msa_sat_s_h',
    1310: 'MIPS_msa_sat_s_w',
    1311: 'MIPS_msa_sat_s_d',
    1312: 'MIPS_msa_sat_u_b',
    1313: 'MIPS_msa_sat_u_h',
    1314: 'MIPS_msa_sat_u_w',
    1315: 'MIPS_msa_sat_u_d',
    1316: 'MIPS_msa_add_a_b',
    1317: 'MIPS_msa_add_a_h',
    1318: 'MIPS_msa_add_a_w',
    1319: 'MIPS_msa_add_a_d',
    1320: 'MIPS_msa_adds_a_b',
    1321: 'MIPS_msa_adds_a_h',
    1322: 'MIPS_msa_adds_a_w',
    1323: 'MIPS_msa_adds_a_d',
    1324: 'MIPS_msa_adds_s_b',
    1325: 'MIPS_msa_adds_s_h',
    1326: 'MIPS_msa_adds_s_w',
    1327: 'MIPS_msa_adds_s_d',
    1328: 'MIPS_msa_adds_u_b',
    1329: 'MIPS_msa_adds_u_h',
    1330: 'MIPS_msa_adds_u_w',
    1331: 'MIPS_msa_adds_u_d',
    1332: 'MIPS_msa_ave_s_b',
    1333: 'MIPS_msa_ave_s_h',
    1334: 'MIPS_msa_ave_s_w',
    1335: 'MIPS_msa_ave_s_d',
    1336: 'MIPS_msa_ave_u_b',
    1337: 'MIPS_msa_ave_u_h',
    1338: 'MIPS_msa_ave_u_w',
    1339: 'MIPS_msa_ave_u_d',
    1340: 'MIPS_msa_aver_s_b',
    1341: 'MIPS_msa_aver_s_h',
    1342: 'MIPS_msa_aver_s_w',
    1343: 'MIPS_msa_aver_s_d',
    1344: 'MIPS_msa_aver_u_b',
    1345: 'MIPS_msa_aver_u_h',
    1346: 'MIPS_msa_aver_u_w',
    1347: 'MIPS_msa_aver_u_d',
    1348: 'MIPS_msa_subs_s_b',
    1349: 'MIPS_msa_subs_s_h',
    1350: 'MIPS_msa_subs_s_w',
    1351: 'MIPS_msa_subs_s_d',
    1352: 'MIPS_msa_subs_u_b',
    1353: 'MIPS_msa_subs_u_h',
    1354: 'MIPS_msa_subs_u_w',
    1355: 'MIPS_msa_subs_u_d',
    1356: 'MIPS_msa_subsus_u_b',
    1357: 'MIPS_msa_subsus_u_h',
    1358: 'MIPS_msa_subsus_u_w',
    1359: 'MIPS_msa_subsus_u_d',
    1360: 'MIPS_msa_subsuu_s_b',
    1361: 'MIPS_msa_subsuu_s_h',
    1362: 'MIPS_msa_subsuu_s_w',
    1363: 'MIPS_msa_subsuu_s_d',
    1364: 'MIPS_msa_asub_s_b',
    1365: 'MIPS_msa_asub_s_h',
    1366: 'MIPS_msa_asub_s_w',
    1367: 'MIPS_msa_asub_s_d',
    1368: 'MIPS_msa_asub_u_b',
    1369: 'MIPS_msa_asub_u_h',
    1370: 'MIPS_msa_asub_u_w',
    1371: 'MIPS_msa_asub_u_d',
    1372: 'MIPS_msa_mulv_b',
    1373: 'MIPS_msa_mulv_h',
    1374: 'MIPS_msa_mulv_w',
    1375: 'MIPS_msa_mulv_d',
    1376: 'MIPS_msa_maddv_b',
    1377: 'MIPS_msa_maddv_h',
    1378: 'MIPS_msa_maddv_w',
    1379: 'MIPS_msa_maddv_d',
    1380: 'MIPS_msa_msubv_b',
    1381: 'MIPS_msa_msubv_h',
    1382: 'MIPS_msa_msubv_w',
    1383: 'MIPS_msa_msubv_d',
    1384: 'MIPS_msa_div_s_b',
    1385: 'MIPS_msa_div_s_h',
    1386: 'MIPS_msa_div_s_w',
    1387: 'MIPS_msa_div_s_d',
    1388: 'MIPS_msa_div_u_b',
    1389: 'MIPS_msa_div_u_h',
    1390: 'MIPS_msa_div_u_w',
    1391: 'MIPS_msa_div_u_d',
    1392: 'MIPS_msa_mod_s_b',
    1393: 'MIPS_msa_mod_s_h',
    1394: 'MIPS_msa_mod_s_w',
    1395: 'MIPS_msa_mod_s_d',
    1396: 'MIPS_msa_mod_u_b',
    1397: 'MIPS_msa_mod_u_h',
    1398: 'MIPS_msa_mod_u_w',
    1399: 'MIPS_msa_mod_u_d',
    1400: 'MIPS_msa_dotp_s_h',
    1401: 'MIPS_msa_dotp_s_w',
    1402: 'MIPS_msa_dotp_s_d',
    1403: 'MIPS_msa_dotp_u_h',
    1404: 'MIPS_msa_dotp_u_w',
    1405: 'MIPS_msa_dotp_u_d',
    1406: 'MIPS_msa_dpadd_s_h',
    1407: 'MIPS_msa_dpadd_s_w',
    1408: 'MIPS_msa_dpadd_s_d',
    1409: 'MIPS_msa_dpadd_u_h',
    1410: 'MIPS_msa_dpadd_u_w',
    1411: 'MIPS_msa_dpadd_u_d',
    1412: 'MIPS_msa_dpsub_s_h',
    1413: 'MIPS_msa_dpsub_s_w',
    1414: 'MIPS_msa_dpsub_s_d',
    1415: 'MIPS_msa_dpsub_u_h',
    1416: 'MIPS_msa_dpsub_u_w',
    1417: 'MIPS_msa_dpsub_u_d',
    1418: 'MIPS_msa_sld_b',
    1419: 'MIPS_msa_sld_h',
    1420: 'MIPS_msa_sld_w',
    1421: 'MIPS_msa_sld_d',
    1422: 'MIPS_msa_sldi_b',
    1423: 'MIPS_msa_sldi_h',
    1424: 'MIPS_msa_sldi_w',
    1425: 'MIPS_msa_sldi_d',
    1426: 'MIPS_msa_splat_b',
    1427: 'MIPS_msa_splat_h',
    1428: 'MIPS_msa_splat_w',
    1429: 'MIPS_msa_splat_d',
    1430: 'MIPS_msa_splati_b',
    1431: 'MIPS_msa_splati_h',
    1432: 'MIPS_msa_splati_w',
    1433: 'MIPS_msa_splati_d',
    1434: 'MIPS_msa_pckev_b',
    1435: 'MIPS_msa_pckev_h',
    1436: 'MIPS_msa_pckev_w',
    1437: 'MIPS_msa_pckev_d',
    1438: 'MIPS_msa_pckod_b',
    1439: 'MIPS_msa_pckod_h',
    1440: 'MIPS_msa_pckod_w',
    1441: 'MIPS_msa_pckod_d',
    1442: 'MIPS_msa_ilvl_b',
    1443: 'MIPS_msa_ilvl_h',
    1444: 'MIPS_msa_ilvl_w',
    1445: 'MIPS_msa_ilvl_d',
    1446: 'MIPS_msa_ilvr_b',
    1447: 'MIPS_msa_ilvr_h',
    1448: 'MIPS_msa_ilvr_w',
    1449: 'MIPS_msa_ilvr_d',
    1450: 'MIPS_msa_ilvev_b',
    1451: 'MIPS_msa_ilvev_h',
    1452: 'MIPS_msa_ilvev_w',
    1453: 'MIPS_msa_ilvev_d',
    1454: 'MIPS_msa_ilvod_b',
    1455: 'MIPS_msa_ilvod_h',
    1456: 'MIPS_msa_ilvod_w',
    1457: 'MIPS_msa_ilvod_d',
    1458: 'MIPS_msa_vshf_b',
    1459: 'MIPS_msa_vshf_h',
    1460: 'MIPS_msa_vshf_w',
    1461: 'MIPS_msa_vshf_d',
    1462: 'MIPS_msa_srar_b',
    1463: 'MIPS_msa_srar_h',
    1464: 'MIPS_msa_srar_w',
    1465: 'MIPS_msa_srar_d',
    1466: 'MIPS_msa_srari_b',
    1467: 'MIPS_msa_srari_h',
    1468: 'MIPS_msa_srari_w',
    1469: 'MIPS_msa_srari_d',
    1470: 'MIPS_msa_srlr_b',
    1471: 'MIPS_msa_srlr_h',
    1472: 'MIPS_msa_srlr_w',
    1473: 'MIPS_msa_srlr_d',
    1474: 'MIPS_msa_srlri_b',
    1475: 'MIPS_msa_srlri_h',
    1476: 'MIPS_msa_srlri_w',
    1477: 'MIPS_msa_srlri_d',
    1478: 'MIPS_msa_hadd_s_h',
    1479: 'MIPS_msa_hadd_s_w',
    1480: 'MIPS_msa_hadd_s_d',
    1481: 'MIPS_msa_hadd_u_h',
    1482: 'MIPS_msa_hadd_u_w',
    1483: 'MIPS_msa_hadd_u_d',
    1484: 'MIPS_msa_hsub_s_h',
    1485: 'MIPS_msa_hsub_s_w',
    1486: 'MIPS_msa_hsub_s_d',
    1487: 'MIPS_msa_hsub_u_h',
    1488: 'MIPS_msa_hsub_u_w',
    1489: 'MIPS_msa_hsub_u_d',
    1490: 'MIPS_msa_and_v',
    1491: 'MIPS_msa_andi_b',
    1492: 'MIPS_msa_or_v',
    1493: 'MIPS_msa_ori_b',
    1494: 'MIPS_msa_nor_v',
    1495: 'MIPS_msa_nori_b',
    1496: 'MIPS_msa_xor_v',
    1497: 'MIPS_msa_xori_b',
    1498: 'MIPS_msa_bmnz_v',
    1499: 'MIPS_msa_bmnzi_b',
    1500: 'MIPS_msa_bmz_v',
    1501: 'MIPS_msa_bmzi_b',
    1502: 'MIPS_msa_bsel_v',
    1503: 'MIPS_msa_bseli_b',
    1504: 'MIPS_msa_shf_b',
    1505: 'MIPS_msa_shf_h',
    1506: 'MIPS_msa_shf_w',
    1507: 'MIPS_msa_bnz_v',
    1508: 'MIPS_msa_bz_v',
    1509: 'MIPS_msa_fill_b',
    1510: 'MIPS_msa_fill_h',
    1511: 'MIPS_msa_fill_w',
    1512: 'MIPS_msa_fill_d',
    1513: 'MIPS_msa_pcnt_b',
    1514: 'MIPS_msa_pcnt_h',
    1515: 'MIPS_msa_pcnt_w',
    1516: 'MIPS_msa_pcnt_d',
    1517: 'MIPS_msa_nloc_b',
    1518: 'MIPS_msa_nloc_h',
    1519: 'MIPS_msa_nloc_w',
    1520: 'MIPS_msa_nloc_d',
    1521: 'MIPS_msa_nlzc_b',
    1522: 'MIPS_msa_nlzc_h',
    1523: 'MIPS_msa_nlzc_w',
    1524: 'MIPS_msa_nlzc_d',
    1525: 'MIPS_msa_copy_s_b',
    1526: 'MIPS_msa_copy_s_h',
    1527: 'MIPS_msa_copy_s_w',
    1528: 'MIPS_msa_copy_s_d',
    1529: 'MIPS_msa_copy_u_b',
    1530: 'MIPS_msa_copy_u_h',
    1531: 'MIPS_msa_copy_u_w',
    1532: 'MIPS_msa_copy_u_d',
    1533: 'MIPS_msa_insert_b',
    1534: 'MIPS_msa_insert_h',
    1535: 'MIPS_msa_insert_w',
    1536: 'MIPS_msa_insert_d',
    1537: 'MIPS_msa_insve_b',
    1538: 'MIPS_msa_insve_h',
    1539: 'MIPS_msa_insve_w',
    1540: 'MIPS_msa_insve_d',
    1541: 'MIPS_msa_bnz_b',
    1542: 'MIPS_msa_bnz_h',
    1543: 'MIPS_msa_bnz_w',
    1544: 'MIPS_msa_bnz_d',
    1545: 'MIPS_msa_bz_b',
    1546: 'MIPS_msa_bz_h',
    1547: 'MIPS_msa_bz_w',
    1548: 'MIPS_msa_bz_d',
    1549: 'MIPS_msa_ldi_b',
    1550: 'MIPS_msa_ldi_h',
    1551: 'MIPS_msa_ldi_w',
    1552: 'MIPS_msa_ldi_d',
    1553: 'MIPS_msa_fcaf_w',
    1554: 'MIPS_msa_fcaf_d',
    1555: 'MIPS_msa_fcun_w',
    1556: 'MIPS_msa_fcun_d',
    1557: 'MIPS_msa_fceq_w',
    1558: 'MIPS_msa_fceq_d',
    1559: 'MIPS_msa_fcueq_w',
    1560: 'MIPS_msa_fcueq_d',
    1561: 'MIPS_msa_fclt_w',
    1562: 'MIPS_msa_fclt_d',
    1563: 'MIPS_msa_fcult_w',
    1564: 'MIPS_msa_fcult_d',
    1565: 'MIPS_msa_fcle_w',
    1566: 'MIPS_msa_fcle_d',
    1567: 'MIPS_msa_fcule_w',
    1568: 'MIPS_msa_fcule_d',
    1569: 'MIPS_msa_fsaf_w',
    1570: 'MIPS_msa_fsaf_d',
    1571: 'MIPS_msa_fsun_w',
    1572: 'MIPS_msa_fsun_d',
    1573: 'MIPS_msa_fseq_w',
    1574: 'MIPS_msa_fseq_d',
    1575: 'MIPS_msa_fsueq_w',
    1576: 'MIPS_msa_fsueq_d',
    1577: 'MIPS_msa_fslt_w',
    1578: 'MIPS_msa_fslt_d',
    1579: 'MIPS_msa_fsult_w',
    1580: 'MIPS_msa_fsult_d',
    1581: 'MIPS_msa_fsle_w',
    1582: 'MIPS_msa_fsle_d',
    1583: 'MIPS_msa_fsule_w',
    1584: 'MIPS_msa_fsule_d',
    1585: 'MIPS_msa_fadd_w',
    1586: 'MIPS_msa_fadd_d',
    1587: 'MIPS_msa_fsub_w',
    1588: 'MIPS_msa_fsub_d',
    1589: 'MIPS_msa_fmul_w',
    1590: 'MIPS_msa_fmul_d',
    1591: 'MIPS_msa_fdiv_w',
    1592: 'MIPS_msa_fdiv_d',
    1593: 'MIPS_msa_fmadd_w',
    1594: 'MIPS_msa_fmadd_d',
    1595: 'MIPS_msa_fmsub_w',
    1596: 'MIPS_msa_fmsub_d',
    1597: 'MIPS_msa_fexp2_w',
    1598: 'MIPS_msa_fexp2_d',
    1599: 'MIPS_msa_fexdo_h',
    1600: 'MIPS_msa_fexdo_w',
    1601: 'MIPS_msa_ftq_h',
    1602: 'MIPS_msa_ftq_w',
    1603: 'MIPS_msa_fmin_w',
    1604: 'MIPS_msa_fmin_d',
    1605: 'MIPS_msa_fmin_a_w',
    1606: 'MIPS_msa_fmin_a_d',
    1607: 'MIPS_msa_fmax_w',
    1608: 'MIPS_msa_fmax_d',
    1609: 'MIPS_msa_fmax_a_w',
    1610: 'MIPS_msa_fmax_a_d',
    1611: 'MIPS_msa_fcor_w',
    1612: 'MIPS_msa_fcor_d',
    1613: 'MIPS_msa_fcune_w',
    1614: 'MIPS_msa_fcune_d',
    1615: 'MIPS_msa_fcne_w',
    1616: 'MIPS_msa_fcne_d',
    1617: 'MIPS_msa_mul_q_h',
    1618: 'MIPS_msa_mul_q_w',
    1619: 'MIPS_msa_madd_q_h',
    1620: 'MIPS_msa_madd_q_w',
    1621: 'MIPS_msa_msub_q_h',
    1622: 'MIPS_msa_msub_q_w',
    1623: 'MIPS_msa_fsor_w',
    1624: 'MIPS_msa_fsor_d',
    1625: 'MIPS_msa_fsune_w',
    1626: 'MIPS_msa_fsune_d',
    1627: 'MIPS_msa_fsne_w',
    1628: 'MIPS_msa_fsne_d',
    1629: 'MIPS_msa_mulr_q_h',
    1630: 'MIPS_msa_mulr_q_w',
    1631: 'MIPS_msa_maddr_q_h',
    1632: 'MIPS_msa_maddr_q_w',
    1633: 'MIPS_msa_msubr_q_h',
    1634: 'MIPS_msa_msubr_q_w',
    1635: 'MIPS_msa_fclass_w',
    1636: 'MIPS_msa_fclass_d',
    1637: 'MIPS_msa_ftrunc_s_w',
    1638: 'MIPS_msa_ftrunc_s_d',
    1639: 'MIPS_msa_ftrunc_u_w',
    1640: 'MIPS_msa_ftrunc_u_d',
    1641: 'MIPS_msa_fsqrt_w',
    1642: 'MIPS_msa_fsqrt_d',
    1643: 'MIPS_msa_frsqrt_w',
    1644: 'MIPS_msa_frsqrt_d',
    1645: 'MIPS_msa_frcp_w',
    1646: 'MIPS_msa_frcp_d',
    1647: 'MIPS_msa_frint_w',
    1648: 'MIPS_msa_frint_d',
    1649: 'MIPS_msa_flog2_w',
    1650: 'MIPS_msa_flog2_d',
    1651: 'MIPS_msa_fexupl_w',
    1652: 'MIPS_msa_fexupl_d',
    1653: 'MIPS_msa_fexupr_w',
    1654: 'MIPS_msa_fexupr_d',
    1655: 'MIPS_msa_ffql_w',
    1656: 'MIPS_msa_ffql_d',
    1657: 'MIPS_msa_ffqr_w',
    1658: 'MIPS_msa_ffqr_d',
    1659: 'MIPS_msa_ftint_s_w',
    1660: 'MIPS_msa_ftint_s_d',
    1661: 'MIPS_msa_ftint_u_w',
    1662: 'MIPS_msa_ftint_u_d',
    1663: 'MIPS_msa_ffint_s_w',
    1664: 'MIPS_msa_ffint_s_d',
    1665: 'MIPS_msa_ffint_u_w',
    1666: 'MIPS_msa_ffint_u_d',
    1667: 'MIPS_msa_ctcmsa',
    1668: 'MIPS_msa_cfcmsa',
    1669: 'MIPS_msa_move_v',
    1670: 'MIPS_lsa',
    1671: 'MIPS_dlsa',
    1672: 'MIPS_lbe',
    1673: 'MIPS_lbue',
    1674: 'MIPS_lhe',
    1675: 'MIPS_lhue',
    1676: 'MIPS_lwe',
    1677: 'MIPS_sbe',
    1678: 'MIPS_she',
    1679: 'MIPS_swe',
    1680: 'MIPS_lle',
    1681: 'MIPS_sce',
    1682: 'MIPS_cachee',
    1683: 'MIPS_prefe',
    1684: 'MIPS_lwle',
    1685: 'MIPS_lwre',
    1686: 'MIPS_swle',
    1687: 'MIPS_swre',
    1688: 'MIPS_movtz',
    1689: 'MIPS_movtn',
    1690: 'MIPS_copyw',
    1691: 'MIPS_ucopyw',
    1692: 'MIPS_last',
}
MIPS_null = 0
MIPS_add = 1
MIPS_addu = 2
MIPS_and = 3
MIPS_dadd = 4
MIPS_daddu = 5
MIPS_dsub = 6
MIPS_dsubu = 7
MIPS_nor = 8
MIPS_or = 9
MIPS_slt = 10
MIPS_sltu = 11
MIPS_sub = 12
MIPS_subu = 13
MIPS_xor = 14
MIPS_dsll = 15
MIPS_dsll32 = 16
MIPS_dsra = 17
MIPS_dsra32 = 18
MIPS_dsrl = 19
MIPS_dsrl32 = 20
MIPS_sll = 21
MIPS_sra = 22
MIPS_srl = 23
MIPS_dsllv = 24
MIPS_dsrav = 25
MIPS_dsrlv = 26
MIPS_sllv = 27
MIPS_srav = 28
MIPS_srlv = 29
MIPS_addi = 30
MIPS_addiu = 31
MIPS_daddi = 32
MIPS_daddiu = 33
MIPS_slti = 34
MIPS_sltiu = 35
MIPS_andi = 36
MIPS_ori = 37
MIPS_xori = 38
MIPS_teq = 39
MIPS_tge = 40
MIPS_tgeu = 41
MIPS_tlt = 42
MIPS_tltu = 43
MIPS_tne = 44
MIPS_cfc1 = 45
MIPS_cfc2 = 46
MIPS_ctc1 = 47
MIPS_ctc2 = 48
MIPS_dmfc0 = 49
MIPS_qmfc2 = 50
MIPS_dmtc0 = 51
MIPS_qmtc2 = 52
MIPS_mfc0 = 53
MIPS_mfc1 = 54
MIPS_mfc2 = 55
MIPS_mtc0 = 56
MIPS_mtc1 = 57
MIPS_mtc2 = 58
MIPS_teqi = 59
MIPS_tgei = 60
MIPS_tgeiu = 61
MIPS_tlti = 62
MIPS_tltiu = 63
MIPS_tnei = 64
MIPS_ddiv = 65
MIPS_ddivu = 66
MIPS_div = 67
MIPS_divu = 68
MIPS_dmult = 69
MIPS_dmultu = 70
MIPS_mult = 71
MIPS_multu = 72
MIPS_mthi = 73
MIPS_mtlo = 74
MIPS_mfhi = 75
MIPS_mflo = 76
MIPS_cop0 = 77
MIPS_cop1 = 78
MIPS_cop2 = 79
MIPS_break = 80
MIPS_syscall = 81
MIPS_bc0f = 82
MIPS_bc1f = 83
MIPS_bc2f = 84
MIPS_bc3f = 85
MIPS_bc0fl = 86
MIPS_bc1fl = 87
MIPS_bc2fl = 88
MIPS_bc3fl = 89
MIPS_bc0t = 90
MIPS_bc1t = 91
MIPS_bc2t = 92
MIPS_bc3t = 93
MIPS_bc0tl = 94
MIPS_bc1tl = 95
MIPS_bc2tl = 96
MIPS_bc3tl = 97
MIPS_bgez = 98
MIPS_bgezal = 99
MIPS_bgezall = 100
MIPS_bgezl = 101
MIPS_bgtz = 102
MIPS_bgtzl = 103
MIPS_blez = 104
MIPS_blezl = 105
MIPS_bltz = 106
MIPS_bltzal = 107
MIPS_bltzall = 108
MIPS_bltzl = 109
MIPS_beq = 110
MIPS_beql = 111
MIPS_bne = 112
MIPS_bnel = 113
MIPS_jalr = 114
MIPS_j = 115
MIPS_jr = 116
MIPS_jal = 117
MIPS_jalx = 118
MIPS_cache = 119
MIPS_lb = 120
MIPS_lbu = 121
MIPS_ldl = 122
MIPS_ldr = 123
MIPS_lwl = 124
MIPS_lwr = 125
MIPS_ld = 126
MIPS_lld = 127
MIPS_ldc1 = 128
MIPS_ldc2 = 129
MIPS_ll = 130
MIPS_lw = 131
MIPS_lwu = 132
MIPS_lh = 133
MIPS_lhu = 134
MIPS_lui = 135
MIPS_lwc1 = 136
MIPS_lwc2 = 137
MIPS_sb = 138
MIPS_sdl = 139
MIPS_sdr = 140
MIPS_swl = 141
MIPS_swr = 142
MIPS_scd = 143
MIPS_sd = 144
MIPS_sdc1 = 145
MIPS_sdc2 = 146
MIPS_sc = 147
MIPS_sw = 148
MIPS_sh = 149
MIPS_swc1 = 150
MIPS_swc2 = 151
MIPS_sync = 152
MIPS_eret = 153
MIPS_tlbp = 154
MIPS_tlbr = 155
MIPS_tlbwi = 156
MIPS_tlbwr = 157
MIPS_fadd = 158
MIPS_fsub = 159
MIPS_fmul = 160
MIPS_fdiv = 161
MIPS_fabs = 162
MIPS_fcvt_s = 163
MIPS_fcvt_d = 164
MIPS_fcvt_w = 165
MIPS_fcvt_l = 166
MIPS_fround_l = 167
MIPS_ftrunc_l = 168
MIPS_fceil_l = 169
MIPS_ffloor_l = 170
MIPS_fround_w = 171
MIPS_ftrunc_w = 172
MIPS_fceil_w = 173
MIPS_ffloor_w = 174
MIPS_fmov = 175
MIPS_fneg = 176
MIPS_fsqrt = 177
MIPS_fc_f = 178
MIPS_fc_un = 179
MIPS_fc_eq = 180
MIPS_fc_ueq = 181
MIPS_fc_olt = 182
MIPS_fc_ult = 183
MIPS_fc_ole = 184
MIPS_fc_ule = 185
MIPS_fc_sf = 186
MIPS_fc_ngle = 187
MIPS_fc_seq = 188
MIPS_fc_ngl = 189
MIPS_fc_lt = 190
MIPS_fc_nge = 191
MIPS_fc_le = 192
MIPS_fc_ngt = 193
MIPS_nop = 194
MIPS_mov = 195
MIPS_neg = 196
MIPS_negu = 197
MIPS_bnez = 198
MIPS_bnezl = 199
MIPS_beqz = 200
MIPS_beqzl = 201
MIPS_b = 202
MIPS_bal = 203
MIPS_li = 204
MIPS_la = 205
MIPS_pref = 206
MIPS_ldxc1 = 207
MIPS_lwxc1 = 208
MIPS_sdxc1 = 209
MIPS_swxc1 = 210
MIPS_madd_s = 211
MIPS_madd_d = 212
MIPS_msub_s = 213
MIPS_msub_d = 214
MIPS_movf = 215
MIPS_movt = 216
MIPS_movn = 217
MIPS_movz = 218
MIPS_fmovf = 219
MIPS_fmovt = 220
MIPS_fmovn = 221
MIPS_fmovz = 222
MIPS_nmadd_s = 223
MIPS_nmadd_d = 224
MIPS_nmsub_s = 225
MIPS_nmsub_d = 226
MIPS_prefx = 227
MIPS_frecip = 228
MIPS_frsqrt = 229
MIPS_lbv = 230
MIPS_lsv = 231
MIPS_llv = 232
MIPS_ldv = 233
MIPS_lqv = 234
MIPS_lrv = 235
MIPS_lpv = 236
MIPS_luv = 237
MIPS_lhv = 238
MIPS_lfv = 239
MIPS_lwv = 240
MIPS_ltv = 241
MIPS_sbv = 242
MIPS_ssv = 243
MIPS_slv = 244
MIPS_sdv = 245
MIPS_sqv = 246
MIPS_srv = 247
MIPS_spv = 248
MIPS_suv = 249
MIPS_shv = 250
MIPS_sfv = 251
MIPS_swv = 252
MIPS_stv = 253
MIPS_vmulf = 254
MIPS_vmacf = 255
MIPS_vmulu = 256
MIPS_vmacu = 257
MIPS_vrndp = 258
MIPS_vrndn = 259
MIPS_vmulq = 260
MIPS_vmacq = 261
MIPS_vmudh = 262
MIPS_vmadh = 263
MIPS_vmudm = 264
MIPS_vmadm = 265
MIPS_vmudn = 266
MIPS_vmadn = 267
MIPS_vmudl = 268
MIPS_vmadl = 269
MIPS_vadd = 270
MIPS_vsub = 271
MIPS_vsut = 272
MIPS_vabs = 273
MIPS_vaddc = 274
MIPS_vsubc = 275
MIPS_vaddb = 276
MIPS_vsubb = 277
MIPS_vaccb = 278
MIPS_vsucb = 279
MIPS_vsad = 280
MIPS_vsac = 281
MIPS_vsum = 282
MIPS_vsaw = 283
MIPS_vlt = 284
MIPS_veq = 285
MIPS_vne = 286
MIPS_vge = 287
MIPS_vcl = 288
MIPS_vch = 289
MIPS_vcr = 290
MIPS_vmrg = 291
MIPS_vand = 292
MIPS_vnand = 293
MIPS_vor = 294
MIPS_vnor = 295
MIPS_vxor = 296
MIPS_vnxor = 297
MIPS_vnoop = 298
MIPS_vmov = 299
MIPS_vrcp = 300
MIPS_vrsq = 301
MIPS_vrcph = 302
MIPS_vrsqh = 303
MIPS_vrcpl = 304
MIPS_vrsql = 305
MIPS_vinst = 306
MIPS_vextt = 307
MIPS_vinsq = 308
MIPS_vextq = 309
MIPS_vinsn = 310
MIPS_vextn = 311
MIPS_cfc0 = 312
MIPS_ctc0 = 313
MIPS_mtsa = 314
MIPS_R5900_first = 314
MIPS_mfsa = 315
MIPS_mtsab = 316
MIPS_mtsah = 317
MIPS_fadda = 318
MIPS_fsuba = 319
MIPS_fmula = 320
MIPS_fmadda = 321
MIPS_fmsuba = 322
MIPS_fmadd = 323
MIPS_fmsub = 324
MIPS_fmax = 325
MIPS_fmin = 326
MIPS_plzcw = 327
MIPS_mthi1 = 328
MIPS_mtlo1 = 329
MIPS_pmthl_lw = 330
MIPS_pmthi = 331
MIPS_pmtlo = 332
MIPS_div1 = 333
MIPS_divu1 = 334
MIPS_pdivw = 335
MIPS_pdivuw = 336
MIPS_pdivbw = 337
MIPS_paddw = 338
MIPS_pmaddw = 339
MIPS_mult1 = 340
MIPS_multu1 = 341
MIPS_madd1 = 342
MIPS_maddu1 = 343
MIPS_pmadduw = 344
MIPS_psubw = 345
MIPS_pcgtw = 346
MIPS_psllvw = 347
MIPS_pceqw = 348
MIPS_pmaxw = 349
MIPS_psrlvw = 350
MIPS_pminw = 351
MIPS_psravw = 352
MIPS_paddh = 353
MIPS_pmsubw = 354
MIPS_padsbh = 355
MIPS_psubh = 356
MIPS_pcgth = 357
MIPS_pceqh = 358
MIPS_pmaxh = 359
MIPS_pminh = 360
MIPS_paddb = 361
MIPS_psubb = 362
MIPS_pcgtb = 363
MIPS_pinth = 364
MIPS_pceqb = 365
MIPS_pintoh = 366
MIPS_pmultw = 367
MIPS_pmultuw = 368
MIPS_pcpyld = 369
MIPS_pcpyud = 370
MIPS_paddsw = 371
MIPS_pmaddh = 372
MIPS_padduw = 373
MIPS_psubsw = 374
MIPS_phmadh = 375
MIPS_psubuw = 376
MIPS_pextlw = 377
MIPS_pand = 378
MIPS_pextuw = 379
MIPS_por = 380
MIPS_ppacw = 381
MIPS_pxor = 382
MIPS_pnor = 383
MIPS_paddsh = 384
MIPS_pmsubh = 385
MIPS_padduh = 386
MIPS_psubsh = 387
MIPS_phmsbh = 388
MIPS_psubuh = 389
MIPS_pextlh = 390
MIPS_pextuh = 391
MIPS_ppach = 392
MIPS_paddsb = 393
MIPS_paddub = 394
MIPS_psubsb = 395
MIPS_psubub = 396
MIPS_pextlb = 397
MIPS_pextub = 398
MIPS_ppacb = 399
MIPS_qfsrv = 400
MIPS_pmulth = 401
MIPS_pabsw = 402
MIPS_pabsh = 403
MIPS_pexoh = 404
MIPS_pexch = 405
MIPS_prevh = 406
MIPS_pcpyh = 407
MIPS_pext5 = 408
MIPS_pexow = 409
MIPS_pexcw = 410
MIPS_ppac5 = 411
MIPS_prot3w = 412
MIPS_psllh = 413
MIPS_psrlh = 414
MIPS_psrah = 415
MIPS_psllw = 416
MIPS_psrlw = 417
MIPS_psraw = 418
MIPS_mfhi1 = 419
MIPS_mflo1 = 420
MIPS_pmfhi = 421
MIPS_pmflo = 422
MIPS_pmfhl = 423
MIPS_lq = 424
MIPS_sq = 425
MIPS_lqc2 = 426
MIPS_sqc2 = 427
MIPS_madd_r5900 = 428
MIPS_maddu_r5900 = 429
MIPS_R5900_last = 429
MIPS_mult3 = 430
MIPS_multu3 = 431
MIPS_bteqz = 439
MIPS_btnez = 440
MIPS_cmp = 441
MIPS_cmpi = 442
MIPS_extend = 458
MIPS_move = 473
MIPS_not = 477
MIPS_dla = 495
MIPS_clo = 498
MIPS_clz = 499
MIPS_madd = 500
MIPS_maddu = 501
MIPS_msub = 502
MIPS_msubu = 503
MIPS_mul = 504
MIPS_sdbbp = 505
MIPS_wait = 506
MIPS_alnv_ps = 507
MIPS_deret = 508
MIPS_di = 509
MIPS_ehb = 510
MIPS_ei = 511
MIPS_ext = 512
MIPS_fcvt_ps = 513
MIPS_fcvt_s_pl = 514
MIPS_fcvt_s_pu = 515
MIPS_ins = 516
MIPS_jalr_hb = 517
MIPS_jr_hb = 518
MIPS_luxc1 = 519
MIPS_madd_ps = 520
MIPS_mfhc1 = 521
MIPS_mfhc2 = 522
MIPS_msub_ps = 523
MIPS_mthc1 = 524
MIPS_mthc2 = 525
MIPS_nmadd_ps = 526
MIPS_nmsub_ps = 527
MIPS_pll = 528
MIPS_plu = 529
MIPS_pul = 530
MIPS_puu = 531
MIPS_rdhwr = 532
MIPS_rdpgpr = 533
MIPS_rotr = 534
MIPS_rotrv = 535
MIPS_seb = 536
MIPS_seh = 537
MIPS_suxc1 = 538
MIPS_synci = 539
MIPS_wrpgpr = 540
MIPS_wsbh = 541
MIPS_dmfc1 = 542
MIPS_dmtc1 = 543
MIPS_save = 544
MIPS_restore = 545
MIPS_jalrc = 546
MIPS_jrc = 547
MIPS_sew = 548
MIPS_zeb = 549
MIPS_zeh = 550
MIPS_zew = 551
MIPS_ssnop = 552
MIPS_li_s = 553
MIPS_li_d = 554
MIPS_dneg = 555
MIPS_dnegu = 556
MIPS_pause = 557
MIPS_dclo = 558
MIPS_dclz = 559
MIPS_dext = 560
MIPS_dextm = 561
MIPS_dextu = 562
MIPS_dins = 563
MIPS_dinsm = 564
MIPS_dinsu = 565
MIPS_dmfc2 = 566
MIPS_dmtc2 = 567
MIPS_drotr = 568
MIPS_drotr32 = 569
MIPS_drotrv = 570
MIPS_dsbh = 571
MIPS_dshd = 572
MIPS_baddu = 573
MIPS_bbit0 = 574
MIPS_bbit032 = 575
MIPS_bbit1 = 576
MIPS_bbit132 = 577
MIPS_cins = 578
MIPS_cins32 = 579
MIPS_dmul = 580
MIPS_dpop = 581
MIPS_exts = 582
MIPS_exts32 = 583
MIPS_mtm0 = 584
MIPS_mtm1 = 585
MIPS_mtm2 = 586
MIPS_mtp0 = 587
MIPS_mtp1 = 588
MIPS_mtp2 = 589
MIPS_pop = 590
MIPS_saa = 591
MIPS_saad = 592
MIPS_seq = 593
MIPS_seqi = 594
MIPS_sne = 595
MIPS_snei = 596
MIPS_synciobdma = 597
MIPS_syncs = 598
MIPS_syncw = 599
MIPS_syncws = 600
MIPS_uld = 601
MIPS_ulw = 602
MIPS_usd = 603
MIPS_usw = 604
MIPS_v3mulu = 605
MIPS_vmm0 = 606
MIPS_vmulu_cn = 607
MIPS_dbreak = 608
MIPS_dret = 609
MIPS_mfdr = 610
MIPS_mtdr = 611
PSP_bitrev = 612
PSP_max = 613
PSP_min = 614
PSP_mfic = 615
PSP_mtic = 616
PSP_wsbw = 617
PSP_sleep = 618
PSP_lv = 619
PSP_lvl = 620
PSP_lvr = 621
PSP_sv = 622
PSP_svl = 623
PSP_svr = 624
PSP_mfv = 625
PSP_mtv = 626
PSP_mfvc = 627
PSP_mtvc = 628
PSP_bvf = 629
PSP_bvt = 630
PSP_bvfl = 631
PSP_bvtl = 632
PSP_vnop = 633
PSP_vflush = 634
PSP_vsync = 635
PSP_vabs = 636
PSP_vadd = 637
PSP_vasin = 638
PSP_vavg = 639
PSP_vbfy1 = 640
PSP_vbfy2 = 641
PSP_vc2i = 642
PSP_vcmovf = 643
PSP_vcmovt = 644
PSP_vcmp = 645
PSP_vcos = 646
PSP_vcrs = 647
PSP_vcrsp = 648
PSP_vcst = 649
PSP_vdet = 650
PSP_vdiv = 651
PSP_vdot = 652
PSP_vexp2 = 653
PSP_vf2h = 654
PSP_vf2id = 655
PSP_vf2in = 656
PSP_vf2iu = 657
PSP_vf2iz = 658
PSP_vfad = 659
PSP_vfim = 660
PSP_vh2f = 661
PSP_vhdp = 662
PSP_vhtfm2 = 663
PSP_vhtfm3 = 664
PSP_vhtfm4 = 665
PSP_vi2c = 666
PSP_vi2f = 667
PSP_vi2s = 668
PSP_vi2uc = 669
PSP_vi2us = 670
PSP_vidt = 671
PSP_viim = 672
PSP_vlgb = 673
PSP_vlog2 = 674
PSP_vmax = 675
PSP_vmfvc = 676
PSP_vmidt = 677
PSP_vmin = 678
PSP_vmmov = 679
PSP_vmmul = 680
PSP_vmone = 681
PSP_vmov = 682
PSP_vmscl = 683
PSP_vmtvc = 684
PSP_vmul = 685
PSP_vmzero = 686
PSP_vneg = 687
PSP_vnrcp = 688
PSP_vnsin = 689
PSP_vocp = 690
PSP_vone = 691
PSP_vpfxd = 692
PSP_vpfxs = 693
PSP_vpfxt = 694
PSP_vqmul = 695
PSP_vrcp = 696
PSP_vrexp2 = 697
PSP_vrndf1 = 698
PSP_vrndf2 = 699
PSP_vrndi = 700
PSP_vrnds = 701
PSP_vrot = 702
PSP_vrsq = 703
PSP_vs2i = 704
PSP_vsat0 = 705
PSP_vsat1 = 706
PSP_vsbn = 707
PSP_vsbz = 708
PSP_vscl = 709
PSP_vscmp = 710
PSP_vsge = 711
PSP_vsgn = 712
PSP_vsin = 713
PSP_vslt = 714
PSP_vsocp = 715
PSP_vsqrt = 716
PSP_vsrt1 = 717
PSP_vsrt2 = 718
PSP_vsrt3 = 719
PSP_vsrt4 = 720
PSP_vsub = 721
PSP_vt4444 = 722
PSP_vt5551 = 723
PSP_vt5650 = 724
PSP_vtfm2 = 725
PSP_vtfm3 = 726
PSP_vtfm4 = 727
PSP_vuc2i = 728
PSP_vus2i = 729
PSP_vwbn = 730
PSP_vzero = 731
PSP_mfvme = 732
PSP_mtvme = 733
MIPS_ac0iu = 734
MIPS_bs1f = 735
MIPS_bfins = 736
MIPS_addmiu = 737
MIPS_sadd = 738
MIPS_ssub = 739
MIPS_btst = 740
MIPS_bclr = 741
MIPS_bset = 742
MIPS_bins = 743
MIPS_bext = 744
MIPS_dive = 745
MIPS_diveu = 746
MIPS_min = 747
MIPS_max = 748
MIPS_madd3 = 749
MIPS_maddu3 = 750
MIPS_msub3 = 751
MIPS_msubu3 = 752
MIPS_dvpe = 753
MIPS_evpe = 754
MIPS_dmt = 755
MIPS_emt = 756
MIPS_fork = 757
MIPS_yield = 758
MIPS_mftr = 759
MIPS_mftc0 = 760
MIPS_mftlo = 761
MIPS_mfthi = 762
MIPS_mftacx = 763
MIPS_mftdsp = 764
MIPS_mfthc1 = 765
MIPS_mftc1 = 766
MIPS_cftc1 = 767
MIPS_mfthc2 = 768
MIPS_mftc2 = 769
MIPS_cftc2 = 770
MIPS_mftgpr = 771
MIPS_mttr = 772
MIPS_mttc0 = 773
MIPS_mttlo = 774
MIPS_mtthi = 775
MIPS_mttacx = 776
MIPS_mttdsp = 777
MIPS_mtthc1 = 778
MIPS_mttc1 = 779
MIPS_cttc1 = 780
MIPS_mtthc2 = 781
MIPS_mttc2 = 782
MIPS_cttc2 = 783
MIPS_mttgpr = 784
MIPS_faddr = 785
MIPS_bc1any2f = 786
MIPS_bc1any2t = 787
MIPS_bc1any4f = 788
MIPS_bc1any4t = 789
MIPS_fcabs_f = 790
MIPS_fcabs_un = 791
MIPS_fcabs_eq = 792
MIPS_fcabs_ueq = 793
MIPS_fcabs_olt = 794
MIPS_fcabs_ult = 795
MIPS_fcabs_ole = 796
MIPS_fcabs_ule = 797
MIPS_fcabs_sf = 798
MIPS_fcabs_ngle = 799
MIPS_fcabs_seq = 800
MIPS_fcabs_ngl = 801
MIPS_fcabs_lt = 802
MIPS_fcabs_nge = 803
MIPS_fcabs_le = 804
MIPS_fcabs_ngt = 805
MIPS_fcvt_pw_ps = 806
MIPS_fcvt_ps_pw = 807
MIPS_fmulr = 808
MIPS_frecip1 = 809
MIPS_frecip2 = 810
MIPS_frsqrt1 = 811
MIPS_frsqrt2 = 812
MIPS_lwxs = 813
MIPS_maddp = 814
MIPS_mflhxu = 815
MIPS_mtlhx = 816
MIPS_multp = 817
MIPS_pperm = 818
MIPS_jals = 819
MIPS_lwp = 820
MIPS_ldp = 821
MIPS_lwm = 822
MIPS_ldm = 823
MIPS_swp = 824
MIPS_sdp = 825
MIPS_swm = 826
MIPS_sdm = 827
MIPS_bnezc = 828
MIPS_bltzals = 829
MIPS_beqzc = 830
MIPS_bgezals = 831
MIPS_jraddiusp = 832
MIPS_jalrs = 833
MIPS_jalrs_hb = 834
MIPS_movep = 835
MIPS_dli = 836
MIPS_insv = 837
MIPS_dinsv = 838
MIPS_bposge32 = 839
MIPS_bposge64 = 840
MIPS_addu_qb = 841
MIPS_addu_ph = 842
MIPS_addsc = 843
MIPS_subu_qb = 844
MIPS_subu_ph = 845
MIPS_addwc = 846
MIPS_addq_ph = 847
MIPS_modsub = 848
MIPS_subq_ph = 849
MIPS_addu_s_qb = 850
MIPS_addu_s_ph = 851
MIPS_raddu_w_qb = 852
MIPS_muleq_s_w_phl = 853
MIPS_subu_s_qb = 854
MIPS_subu_s_ph = 855
MIPS_muleq_s_w_phr = 856
MIPS_muleu_s_ph_qbl = 857
MIPS_addq_s_ph = 858
MIPS_addq_s_w = 859
MIPS_mulq_s_ph = 860
MIPS_muleu_s_ph_qbr = 861
MIPS_subq_s_ph = 862
MIPS_subq_s_w = 863
MIPS_mulq_rs_ph = 864
MIPS_addu_ob = 865
MIPS_subu_ob = 866
MIPS_addq_qh = 867
MIPS_addq_pw = 868
MIPS_subq_qh = 869
MIPS_subq_pw = 870
MIPS_addu_s_ob = 871
MIPS_raddu_l_ob = 872
MIPS_muleq_s_pw_qhl = 873
MIPS_subu_s_ob = 874
MIPS_muleq_s_pw_qhr = 875
MIPS_muleu_s_qh_obl = 876
MIPS_addq_s_qh = 877
MIPS_addq_s_pw = 878
MIPS_muleu_s_qh_obr = 879
MIPS_subq_s_qh = 880
MIPS_subq_s_pw = 881
MIPS_mulq_rs_qh = 882
MIPS_cmpu_eq_qb = 883
MIPS_cmp_eq_ph = 884
MIPS_cmpgdu_eq_qb = 885
MIPS_cmpu_lt_qb = 886
MIPS_cmp_lt_ph = 887
MIPS_cmpgdu_lt_qb = 888
MIPS_cmpu_le_qb = 889
MIPS_cmp_le_ph = 890
MIPS_cmpgdu_le_qb = 891
MIPS_pick_qb = 892
MIPS_pick_ph = 893
MIPS_cmpgu_eq_qb = 894
MIPS_precrq_qb_ph = 895
MIPS_precrq_ph_w = 896
MIPS_cmpgu_lt_qb = 897
MIPS_precr_qb_ph = 898
MIPS_precrq_rs_ph_w = 899
MIPS_cmpgu_le_qb = 900
MIPS_packrl_ph = 901
MIPS_precr_sra_ph_w = 902
MIPS_precrqu_s_qb_ph = 903
MIPS_precr_sra_r_ph_w = 904
MIPS_cmpu_eq_ob = 905
MIPS_cmp_eq_qh = 906
MIPS_cmp_eq_pw = 907
MIPS_cmpu_lt_ob = 908
MIPS_cmp_lt_qh = 909
MIPS_cmp_lt_pw = 910
MIPS_cmpu_le_ob = 911
MIPS_cmp_le_qh = 912
MIPS_cmp_le_pw = 913
MIPS_pick_ob = 914
MIPS_pick_qh = 915
MIPS_pick_pw = 916
MIPS_cmpgu_eq_ob = 917
MIPS_precrq_ob_qh = 918
MIPS_precrq_qh_pw = 919
MIPS_precrq_pw_l = 920
MIPS_cmpgu_lt_ob = 921
MIPS_precrq_rs_qh_pw = 922
MIPS_cmpgu_le_ob = 923
MIPS_packrl_pw = 924
MIPS_precrqu_s_ob_qh = 925
MIPS_absq_s_qb = 926
MIPS_absq_s_ph = 927
MIPS_absq_s_w = 928
MIPS_repl_qb = 929
MIPS_repl_ph = 930
MIPS_replv_qb = 931
MIPS_replv_ph = 932
MIPS_bitrev = 933
MIPS_precequ_ph_qbl = 934
MIPS_preceq_w_phl = 935
MIPS_preceu_ph_qbl = 936
MIPS_precequ_ph_qbr = 937
MIPS_preceq_w_phr = 938
MIPS_preceu_ph_qbr = 939
MIPS_precequ_ph_qbla = 940
MIPS_preceu_ph_qbla = 941
MIPS_precequ_ph_qbra = 942
MIPS_preceu_ph_qbra = 943
MIPS_absq_s_qh = 944
MIPS_absq_s_pw = 945
MIPS_repl_ob = 946
MIPS_repl_qh = 947
MIPS_repl_pw = 948
MIPS_replv_ob = 949
MIPS_replv_qh = 950
MIPS_replv_pw = 951
MIPS_precequ_pw_qhl = 952
MIPS_preceq_pw_qhl = 953
MIPS_preceq_s_l_pwl = 954
MIPS_preceu_qh_obl = 955
MIPS_precequ_pw_qhr = 956
MIPS_preceq_pw_qhr = 957
MIPS_preceq_s_l_pwr = 958
MIPS_preceu_qh_obr = 959
MIPS_precequ_pw_qhla = 960
MIPS_preceq_pw_qhla = 961
MIPS_preceu_qh_obla = 962
MIPS_precequ_pw_qhra = 963
MIPS_preceq_pw_qhra = 964
MIPS_preceu_qh_obra = 965
MIPS_shll_qb = 966
MIPS_shll_ph = 967
MIPS_shrl_qb = 968
MIPS_shra_ph = 969
MIPS_shrl_ph = 970
MIPS_shllv_qb = 971
MIPS_shllv_ph = 972
MIPS_shrlv_qb = 973
MIPS_shrav_ph = 974
MIPS_shrlv_ph = 975
MIPS_shra_qb = 976
MIPS_shll_s_ph = 977
MIPS_shll_s_w = 978
MIPS_shra_r_qb = 979
MIPS_shra_r_ph = 980
MIPS_shra_r_w = 981
MIPS_shrav_qb = 982
MIPS_shllv_s_ph = 983
MIPS_shllv_s_w = 984
MIPS_shrav_r_qb = 985
MIPS_shrav_r_ph = 986
MIPS_shrav_r_w = 987
MIPS_shll_ob = 988
MIPS_shll_qh = 989
MIPS_shll_pw = 990
MIPS_shrl_ob = 991
MIPS_shra_qh = 992
MIPS_shra_pw = 993
MIPS_shllv_ob = 994
MIPS_shllv_qh = 995
MIPS_shllv_pw = 996
MIPS_shrlv_ob = 997
MIPS_shrav_qh = 998
MIPS_shrav_pw = 999
MIPS_shll_s_qh = 1000
MIPS_shll_s_pw = 1001
MIPS_shra_r_qh = 1002
MIPS_shra_r_pw = 1003
MIPS_shllv_s_qh = 1004
MIPS_shllv_s_pw = 1005
MIPS_shrav_r_qh = 1006
MIPS_shrav_r_pw = 1007
MIPS_lwx = 1008
MIPS_ldx = 1009
MIPS_lhx = 1010
MIPS_lbux = 1011
MIPS_dpa_w_ph = 1012
MIPS_dpax_w_ph = 1013
MIPS_maq_sa_w_phl = 1014
MIPS_dpaqx_s_w_ph = 1015
MIPS_dps_w_ph = 1016
MIPS_dpsx_w_ph = 1017
MIPS_dpsqx_s_w_ph = 1018
MIPS_mulsa_w_ph = 1019
MIPS_maq_sa_w_phr = 1020
MIPS_dpaqx_sa_w_ph = 1021
MIPS_dpau_h_qbl = 1022
MIPS_dpsu_h_qbl = 1023
MIPS_dpsqx_sa_w_ph = 1024
MIPS_dpaq_s_w_ph = 1025
MIPS_dpaq_sa_l_w = 1026
MIPS_maq_s_w_phl = 1027
MIPS_dpsq_s_w_ph = 1028
MIPS_dpsq_sa_l_w = 1029
MIPS_mulsaq_s_w_ph = 1030
MIPS_maq_s_w_phr = 1031
MIPS_dpau_h_qbr = 1032
MIPS_dpsu_h_qbr = 1033
MIPS_maq_sa_w_qhll = 1034
MIPS_maq_sa_w_qhlr = 1035
MIPS_dmadd = 1036
MIPS_dmsub = 1037
MIPS_maq_sa_w_qhrl = 1038
MIPS_dpau_h_obl = 1039
MIPS_dpsu_h_obl = 1040
MIPS_maq_sa_w_qhrr = 1041
MIPS_dpaq_s_w_qh = 1042
MIPS_dpaq_sa_l_pw = 1043
MIPS_maq_s_w_qhll = 1044
MIPS_maq_s_l_pwl = 1045
MIPS_dpsq_s_w_qh = 1046
MIPS_dpsq_sa_l_pw = 1047
MIPS_maq_s_w_qhlr = 1048
MIPS_dmaddu = 1049
MIPS_mulsaq_s_w_qh = 1050
MIPS_mulsaq_s_l_pw = 1051
MIPS_maq_s_w_qhrl = 1052
MIPS_maq_s_l_pwr = 1053
MIPS_dpau_h_obr = 1054
MIPS_dpsu_h_obr = 1055
MIPS_maq_s_w_qhrr = 1056
MIPS_dmsubu = 1057
MIPS_extr_w = 1058
MIPS_extrv_w = 1059
MIPS_extp = 1060
MIPS_extpdp = 1061
MIPS_rddsp = 1062
MIPS_shilo = 1063
MIPS_extpv = 1064
MIPS_extpdpv = 1065
MIPS_wrdsp = 1066
MIPS_shilov = 1067
MIPS_extr_r_w = 1068
MIPS_extrv_r_w = 1069
MIPS_extr_rs_w = 1070
MIPS_extr_s_h = 1071
MIPS_extrv_rs_w = 1072
MIPS_extrv_s_h = 1073
MIPS_mthlip = 1074
MIPS_dextr_w = 1075
MIPS_dextr_l = 1076
MIPS_dextrv_w = 1077
MIPS_dextrv_l = 1078
MIPS_dextp = 1079
MIPS_dextpdp = 1080
MIPS_dshilo = 1081
MIPS_dextpv = 1082
MIPS_dextpdpv = 1083
MIPS_dshilov = 1084
MIPS_dextr_r_w = 1085
MIPS_dextr_r_l = 1086
MIPS_dextrv_r_w = 1087
MIPS_dextrv_r_l = 1088
MIPS_dextr_rs_w = 1089
MIPS_dextr_s_h = 1090
MIPS_dextr_rs_l = 1091
MIPS_dextrv_rs_w = 1092
MIPS_dextrv_s_h = 1093
MIPS_dextrv_rs_l = 1094
MIPS_dmthlip = 1095
MIPS_adduh_qb = 1096
MIPS_addqh_ph = 1097
MIPS_addqh_w = 1098
MIPS_subuh_qb = 1099
MIPS_subqh_ph = 1100
MIPS_subqh_w = 1101
MIPS_adduh_r_qb = 1102
MIPS_addqh_r_ph = 1103
MIPS_addqh_r_w = 1104
MIPS_subuh_r_qb = 1105
MIPS_subqh_r_ph = 1106
MIPS_subqh_r_w = 1107
MIPS_mul_ph = 1108
MIPS_mul_s_ph = 1109
MIPS_mulq_s_w = 1110
MIPS_mulq_rs_w = 1111
MIPS_append = 1112
MIPS_balign = 1113
MIPS_prepend = 1114
MIPS_laa = 1115
MIPS_laad = 1116
MIPS_lac = 1117
MIPS_lacd = 1118
MIPS_lad = 1119
MIPS_ladd = 1120
MIPS_lai = 1121
MIPS_laid = 1122
MIPS_las = 1123
MIPS_lasd = 1124
MIPS_law = 1125
MIPS_lawd = 1126
MIPS_lbx = 1127
MIPS_lhux = 1128
MIPS_lwux = 1129
MIPS_qmac_00 = 1130
MIPS_qmac_01 = 1131
MIPS_qmac_02 = 1132
MIPS_qmac_03 = 1133
MIPS_qmacs_00 = 1134
MIPS_qmacs_01 = 1135
MIPS_qmacs_02 = 1136
MIPS_qmacs_03 = 1137
MIPS_zcb = 1138
MIPS_zcbt = 1139
MIPS_msa_sll_b = 1140
MIPS_msa_sll_h = 1141
MIPS_msa_sll_w = 1142
MIPS_msa_sll_d = 1143
MIPS_msa_slli_b = 1144
MIPS_msa_slli_h = 1145
MIPS_msa_slli_w = 1146
MIPS_msa_slli_d = 1147
MIPS_msa_sra_b = 1148
MIPS_msa_sra_h = 1149
MIPS_msa_sra_w = 1150
MIPS_msa_sra_d = 1151
MIPS_msa_srai_b = 1152
MIPS_msa_srai_h = 1153
MIPS_msa_srai_w = 1154
MIPS_msa_srai_d = 1155
MIPS_msa_srl_b = 1156
MIPS_msa_srl_h = 1157
MIPS_msa_srl_w = 1158
MIPS_msa_srl_d = 1159
MIPS_msa_srli_b = 1160
MIPS_msa_srli_h = 1161
MIPS_msa_srli_w = 1162
MIPS_msa_srli_d = 1163
MIPS_msa_bclr_b = 1164
MIPS_msa_bclr_h = 1165
MIPS_msa_bclr_w = 1166
MIPS_msa_bclr_d = 1167
MIPS_msa_bclri_b = 1168
MIPS_msa_bclri_h = 1169
MIPS_msa_bclri_w = 1170
MIPS_msa_bclri_d = 1171
MIPS_msa_bset_b = 1172
MIPS_msa_bset_h = 1173
MIPS_msa_bset_w = 1174
MIPS_msa_bset_d = 1175
MIPS_msa_bseti_b = 1176
MIPS_msa_bseti_h = 1177
MIPS_msa_bseti_w = 1178
MIPS_msa_bseti_d = 1179
MIPS_msa_bneg_b = 1180
MIPS_msa_bneg_h = 1181
MIPS_msa_bneg_w = 1182
MIPS_msa_bneg_d = 1183
MIPS_msa_bnegi_b = 1184
MIPS_msa_bnegi_h = 1185
MIPS_msa_bnegi_w = 1186
MIPS_msa_bnegi_d = 1187
MIPS_msa_binsl_b = 1188
MIPS_msa_binsl_h = 1189
MIPS_msa_binsl_w = 1190
MIPS_msa_binsl_d = 1191
MIPS_msa_binsli_b = 1192
MIPS_msa_binsli_h = 1193
MIPS_msa_binsli_w = 1194
MIPS_msa_binsli_d = 1195
MIPS_msa_binsr_b = 1196
MIPS_msa_binsr_h = 1197
MIPS_msa_binsr_w = 1198
MIPS_msa_binsr_d = 1199
MIPS_msa_binsri_b = 1200
MIPS_msa_binsri_h = 1201
MIPS_msa_binsri_w = 1202
MIPS_msa_binsri_d = 1203
MIPS_msa_addv_b = 1204
MIPS_msa_addv_h = 1205
MIPS_msa_addv_w = 1206
MIPS_msa_addv_d = 1207
MIPS_msa_addvi_b = 1208
MIPS_msa_addvi_h = 1209
MIPS_msa_addvi_w = 1210
MIPS_msa_addvi_d = 1211
MIPS_msa_subv_b = 1212
MIPS_msa_subv_h = 1213
MIPS_msa_subv_w = 1214
MIPS_msa_subv_d = 1215
MIPS_msa_subvi_b = 1216
MIPS_msa_subvi_h = 1217
MIPS_msa_subvi_w = 1218
MIPS_msa_subvi_d = 1219
MIPS_msa_max_s_b = 1220
MIPS_msa_max_s_h = 1221
MIPS_msa_max_s_w = 1222
MIPS_msa_max_s_d = 1223
MIPS_msa_maxi_s_b = 1224
MIPS_msa_maxi_s_h = 1225
MIPS_msa_maxi_s_w = 1226
MIPS_msa_maxi_s_d = 1227
MIPS_msa_max_u_b = 1228
MIPS_msa_max_u_h = 1229
MIPS_msa_max_u_w = 1230
MIPS_msa_max_u_d = 1231
MIPS_msa_maxi_u_b = 1232
MIPS_msa_maxi_u_h = 1233
MIPS_msa_maxi_u_w = 1234
MIPS_msa_maxi_u_d = 1235
MIPS_msa_min_s_b = 1236
MIPS_msa_min_s_h = 1237
MIPS_msa_min_s_w = 1238
MIPS_msa_min_s_d = 1239
MIPS_msa_mini_s_b = 1240
MIPS_msa_mini_s_h = 1241
MIPS_msa_mini_s_w = 1242
MIPS_msa_mini_s_d = 1243
MIPS_msa_min_u_b = 1244
MIPS_msa_min_u_h = 1245
MIPS_msa_min_u_w = 1246
MIPS_msa_min_u_d = 1247
MIPS_msa_mini_u_b = 1248
MIPS_msa_mini_u_h = 1249
MIPS_msa_mini_u_w = 1250
MIPS_msa_mini_u_d = 1251
MIPS_msa_max_a_b = 1252
MIPS_msa_max_a_h = 1253
MIPS_msa_max_a_w = 1254
MIPS_msa_max_a_d = 1255
MIPS_msa_min_a_b = 1256
MIPS_msa_min_a_h = 1257
MIPS_msa_min_a_w = 1258
MIPS_msa_min_a_d = 1259
MIPS_msa_ceq_b = 1260
MIPS_msa_ceq_h = 1261
MIPS_msa_ceq_w = 1262
MIPS_msa_ceq_d = 1263
MIPS_msa_ceqi_b = 1264
MIPS_msa_ceqi_h = 1265
MIPS_msa_ceqi_w = 1266
MIPS_msa_ceqi_d = 1267
MIPS_msa_clt_s_b = 1268
MIPS_msa_clt_s_h = 1269
MIPS_msa_clt_s_w = 1270
MIPS_msa_clt_s_d = 1271
MIPS_msa_clti_s_b = 1272
MIPS_msa_clti_s_h = 1273
MIPS_msa_clti_s_w = 1274
MIPS_msa_clti_s_d = 1275
MIPS_msa_clt_u_b = 1276
MIPS_msa_clt_u_h = 1277
MIPS_msa_clt_u_w = 1278
MIPS_msa_clt_u_d = 1279
MIPS_msa_clti_u_b = 1280
MIPS_msa_clti_u_h = 1281
MIPS_msa_clti_u_w = 1282
MIPS_msa_clti_u_d = 1283
MIPS_msa_cle_s_b = 1284
MIPS_msa_cle_s_h = 1285
MIPS_msa_cle_s_w = 1286
MIPS_msa_cle_s_d = 1287
MIPS_msa_clei_s_b = 1288
MIPS_msa_clei_s_h = 1289
MIPS_msa_clei_s_w = 1290
MIPS_msa_clei_s_d = 1291
MIPS_msa_cle_u_b = 1292
MIPS_msa_cle_u_h = 1293
MIPS_msa_cle_u_w = 1294
MIPS_msa_cle_u_d = 1295
MIPS_msa_clei_u_b = 1296
MIPS_msa_clei_u_h = 1297
MIPS_msa_clei_u_w = 1298
MIPS_msa_clei_u_d = 1299
MIPS_msa_ld_b = 1300
MIPS_msa_ld_h = 1301
MIPS_msa_ld_w = 1302
MIPS_msa_ld_d = 1303
MIPS_msa_st_b = 1304
MIPS_msa_st_h = 1305
MIPS_msa_st_w = 1306
MIPS_msa_st_d = 1307
MIPS_msa_sat_s_b = 1308
MIPS_msa_sat_s_h = 1309
MIPS_msa_sat_s_w = 1310
MIPS_msa_sat_s_d = 1311
MIPS_msa_sat_u_b = 1312
MIPS_msa_sat_u_h = 1313
MIPS_msa_sat_u_w = 1314
MIPS_msa_sat_u_d = 1315
MIPS_msa_add_a_b = 1316
MIPS_msa_add_a_h = 1317
MIPS_msa_add_a_w = 1318
MIPS_msa_add_a_d = 1319
MIPS_msa_adds_a_b = 1320
MIPS_msa_adds_a_h = 1321
MIPS_msa_adds_a_w = 1322
MIPS_msa_adds_a_d = 1323
MIPS_msa_adds_s_b = 1324
MIPS_msa_adds_s_h = 1325
MIPS_msa_adds_s_w = 1326
MIPS_msa_adds_s_d = 1327
MIPS_msa_adds_u_b = 1328
MIPS_msa_adds_u_h = 1329
MIPS_msa_adds_u_w = 1330
MIPS_msa_adds_u_d = 1331
MIPS_msa_ave_s_b = 1332
MIPS_msa_ave_s_h = 1333
MIPS_msa_ave_s_w = 1334
MIPS_msa_ave_s_d = 1335
MIPS_msa_ave_u_b = 1336
MIPS_msa_ave_u_h = 1337
MIPS_msa_ave_u_w = 1338
MIPS_msa_ave_u_d = 1339
MIPS_msa_aver_s_b = 1340
MIPS_msa_aver_s_h = 1341
MIPS_msa_aver_s_w = 1342
MIPS_msa_aver_s_d = 1343
MIPS_msa_aver_u_b = 1344
MIPS_msa_aver_u_h = 1345
MIPS_msa_aver_u_w = 1346
MIPS_msa_aver_u_d = 1347
MIPS_msa_subs_s_b = 1348
MIPS_msa_subs_s_h = 1349
MIPS_msa_subs_s_w = 1350
MIPS_msa_subs_s_d = 1351
MIPS_msa_subs_u_b = 1352
MIPS_msa_subs_u_h = 1353
MIPS_msa_subs_u_w = 1354
MIPS_msa_subs_u_d = 1355
MIPS_msa_subsus_u_b = 1356
MIPS_msa_subsus_u_h = 1357
MIPS_msa_subsus_u_w = 1358
MIPS_msa_subsus_u_d = 1359
MIPS_msa_subsuu_s_b = 1360
MIPS_msa_subsuu_s_h = 1361
MIPS_msa_subsuu_s_w = 1362
MIPS_msa_subsuu_s_d = 1363
MIPS_msa_asub_s_b = 1364
MIPS_msa_asub_s_h = 1365
MIPS_msa_asub_s_w = 1366
MIPS_msa_asub_s_d = 1367
MIPS_msa_asub_u_b = 1368
MIPS_msa_asub_u_h = 1369
MIPS_msa_asub_u_w = 1370
MIPS_msa_asub_u_d = 1371
MIPS_msa_mulv_b = 1372
MIPS_msa_mulv_h = 1373
MIPS_msa_mulv_w = 1374
MIPS_msa_mulv_d = 1375
MIPS_msa_maddv_b = 1376
MIPS_msa_maddv_h = 1377
MIPS_msa_maddv_w = 1378
MIPS_msa_maddv_d = 1379
MIPS_msa_msubv_b = 1380
MIPS_msa_msubv_h = 1381
MIPS_msa_msubv_w = 1382
MIPS_msa_msubv_d = 1383
MIPS_msa_div_s_b = 1384
MIPS_msa_div_s_h = 1385
MIPS_msa_div_s_w = 1386
MIPS_msa_div_s_d = 1387
MIPS_msa_div_u_b = 1388
MIPS_msa_div_u_h = 1389
MIPS_msa_div_u_w = 1390
MIPS_msa_div_u_d = 1391
MIPS_msa_mod_s_b = 1392
MIPS_msa_mod_s_h = 1393
MIPS_msa_mod_s_w = 1394
MIPS_msa_mod_s_d = 1395
MIPS_msa_mod_u_b = 1396
MIPS_msa_mod_u_h = 1397
MIPS_msa_mod_u_w = 1398
MIPS_msa_mod_u_d = 1399
MIPS_msa_dotp_s_h = 1400
MIPS_msa_dotp_s_w = 1401
MIPS_msa_dotp_s_d = 1402
MIPS_msa_dotp_u_h = 1403
MIPS_msa_dotp_u_w = 1404
MIPS_msa_dotp_u_d = 1405
MIPS_msa_dpadd_s_h = 1406
MIPS_msa_dpadd_s_w = 1407
MIPS_msa_dpadd_s_d = 1408
MIPS_msa_dpadd_u_h = 1409
MIPS_msa_dpadd_u_w = 1410
MIPS_msa_dpadd_u_d = 1411
MIPS_msa_dpsub_s_h = 1412
MIPS_msa_dpsub_s_w = 1413
MIPS_msa_dpsub_s_d = 1414
MIPS_msa_dpsub_u_h = 1415
MIPS_msa_dpsub_u_w = 1416
MIPS_msa_dpsub_u_d = 1417
MIPS_msa_sld_b = 1418
MIPS_msa_sld_h = 1419
MIPS_msa_sld_w = 1420
MIPS_msa_sld_d = 1421
MIPS_msa_sldi_b = 1422
MIPS_msa_sldi_h = 1423
MIPS_msa_sldi_w = 1424
MIPS_msa_sldi_d = 1425
MIPS_msa_splat_b = 1426
MIPS_msa_splat_h = 1427
MIPS_msa_splat_w = 1428
MIPS_msa_splat_d = 1429
MIPS_msa_splati_b = 1430
MIPS_msa_splati_h = 1431
MIPS_msa_splati_w = 1432
MIPS_msa_splati_d = 1433
MIPS_msa_pckev_b = 1434
MIPS_msa_pckev_h = 1435
MIPS_msa_pckev_w = 1436
MIPS_msa_pckev_d = 1437
MIPS_msa_pckod_b = 1438
MIPS_msa_pckod_h = 1439
MIPS_msa_pckod_w = 1440
MIPS_msa_pckod_d = 1441
MIPS_msa_ilvl_b = 1442
MIPS_msa_ilvl_h = 1443
MIPS_msa_ilvl_w = 1444
MIPS_msa_ilvl_d = 1445
MIPS_msa_ilvr_b = 1446
MIPS_msa_ilvr_h = 1447
MIPS_msa_ilvr_w = 1448
MIPS_msa_ilvr_d = 1449
MIPS_msa_ilvev_b = 1450
MIPS_msa_ilvev_h = 1451
MIPS_msa_ilvev_w = 1452
MIPS_msa_ilvev_d = 1453
MIPS_msa_ilvod_b = 1454
MIPS_msa_ilvod_h = 1455
MIPS_msa_ilvod_w = 1456
MIPS_msa_ilvod_d = 1457
MIPS_msa_vshf_b = 1458
MIPS_msa_vshf_h = 1459
MIPS_msa_vshf_w = 1460
MIPS_msa_vshf_d = 1461
MIPS_msa_srar_b = 1462
MIPS_msa_srar_h = 1463
MIPS_msa_srar_w = 1464
MIPS_msa_srar_d = 1465
MIPS_msa_srari_b = 1466
MIPS_msa_srari_h = 1467
MIPS_msa_srari_w = 1468
MIPS_msa_srari_d = 1469
MIPS_msa_srlr_b = 1470
MIPS_msa_srlr_h = 1471
MIPS_msa_srlr_w = 1472
MIPS_msa_srlr_d = 1473
MIPS_msa_srlri_b = 1474
MIPS_msa_srlri_h = 1475
MIPS_msa_srlri_w = 1476
MIPS_msa_srlri_d = 1477
MIPS_msa_hadd_s_h = 1478
MIPS_msa_hadd_s_w = 1479
MIPS_msa_hadd_s_d = 1480
MIPS_msa_hadd_u_h = 1481
MIPS_msa_hadd_u_w = 1482
MIPS_msa_hadd_u_d = 1483
MIPS_msa_hsub_s_h = 1484
MIPS_msa_hsub_s_w = 1485
MIPS_msa_hsub_s_d = 1486
MIPS_msa_hsub_u_h = 1487
MIPS_msa_hsub_u_w = 1488
MIPS_msa_hsub_u_d = 1489
MIPS_msa_and_v = 1490
MIPS_msa_andi_b = 1491
MIPS_msa_or_v = 1492
MIPS_msa_ori_b = 1493
MIPS_msa_nor_v = 1494
MIPS_msa_nori_b = 1495
MIPS_msa_xor_v = 1496
MIPS_msa_xori_b = 1497
MIPS_msa_bmnz_v = 1498
MIPS_msa_bmnzi_b = 1499
MIPS_msa_bmz_v = 1500
MIPS_msa_bmzi_b = 1501
MIPS_msa_bsel_v = 1502
MIPS_msa_bseli_b = 1503
MIPS_msa_shf_b = 1504
MIPS_msa_shf_h = 1505
MIPS_msa_shf_w = 1506
MIPS_msa_bnz_v = 1507
MIPS_msa_bz_v = 1508
MIPS_msa_fill_b = 1509
MIPS_msa_fill_h = 1510
MIPS_msa_fill_w = 1511
MIPS_msa_fill_d = 1512
MIPS_msa_pcnt_b = 1513
MIPS_msa_pcnt_h = 1514
MIPS_msa_pcnt_w = 1515
MIPS_msa_pcnt_d = 1516
MIPS_msa_nloc_b = 1517
MIPS_msa_nloc_h = 1518
MIPS_msa_nloc_w = 1519
MIPS_msa_nloc_d = 1520
MIPS_msa_nlzc_b = 1521
MIPS_msa_nlzc_h = 1522
MIPS_msa_nlzc_w = 1523
MIPS_msa_nlzc_d = 1524
MIPS_msa_copy_s_b = 1525
MIPS_msa_copy_s_h = 1526
MIPS_msa_copy_s_w = 1527
MIPS_msa_copy_s_d = 1528
MIPS_msa_copy_u_b = 1529
MIPS_msa_copy_u_h = 1530
MIPS_msa_copy_u_w = 1531
MIPS_msa_copy_u_d = 1532
MIPS_msa_insert_b = 1533
MIPS_msa_insert_h = 1534
MIPS_msa_insert_w = 1535
MIPS_msa_insert_d = 1536
MIPS_msa_insve_b = 1537
MIPS_msa_insve_h = 1538
MIPS_msa_insve_w = 1539
MIPS_msa_insve_d = 1540
MIPS_msa_bnz_b = 1541
MIPS_msa_bnz_h = 1542
MIPS_msa_bnz_w = 1543
MIPS_msa_bnz_d = 1544
MIPS_msa_bz_b = 1545
MIPS_msa_bz_h = 1546
MIPS_msa_bz_w = 1547
MIPS_msa_bz_d = 1548
MIPS_msa_ldi_b = 1549
MIPS_msa_ldi_h = 1550
MIPS_msa_ldi_w = 1551
MIPS_msa_ldi_d = 1552
MIPS_msa_fcaf_w = 1553
MIPS_msa_fcaf_d = 1554
MIPS_msa_fcun_w = 1555
MIPS_msa_fcun_d = 1556
MIPS_msa_fceq_w = 1557
MIPS_msa_fceq_d = 1558
MIPS_msa_fcueq_w = 1559
MIPS_msa_fcueq_d = 1560
MIPS_msa_fclt_w = 1561
MIPS_msa_fclt_d = 1562
MIPS_msa_fcult_w = 1563
MIPS_msa_fcult_d = 1564
MIPS_msa_fcle_w = 1565
MIPS_msa_fcle_d = 1566
MIPS_msa_fcule_w = 1567
MIPS_msa_fcule_d = 1568
MIPS_msa_fsaf_w = 1569
MIPS_msa_fsaf_d = 1570
MIPS_msa_fsun_w = 1571
MIPS_msa_fsun_d = 1572
MIPS_msa_fseq_w = 1573
MIPS_msa_fseq_d = 1574
MIPS_msa_fsueq_w = 1575
MIPS_msa_fsueq_d = 1576
MIPS_msa_fslt_w = 1577
MIPS_msa_fslt_d = 1578
MIPS_msa_fsult_w = 1579
MIPS_msa_fsult_d = 1580
MIPS_msa_fsle_w = 1581
MIPS_msa_fsle_d = 1582
MIPS_msa_fsule_w = 1583
MIPS_msa_fsule_d = 1584
MIPS_msa_fadd_w = 1585
MIPS_msa_fadd_d = 1586
MIPS_msa_fsub_w = 1587
MIPS_msa_fsub_d = 1588
MIPS_msa_fmul_w = 1589
MIPS_msa_fmul_d = 1590
MIPS_msa_fdiv_w = 1591
MIPS_msa_fdiv_d = 1592
MIPS_msa_fmadd_w = 1593
MIPS_msa_fmadd_d = 1594
MIPS_msa_fmsub_w = 1595
MIPS_msa_fmsub_d = 1596
MIPS_msa_fexp2_w = 1597
MIPS_msa_fexp2_d = 1598
MIPS_msa_fexdo_h = 1599
MIPS_msa_fexdo_w = 1600
MIPS_msa_ftq_h = 1601
MIPS_msa_ftq_w = 1602
MIPS_msa_fmin_w = 1603
MIPS_msa_fmin_d = 1604
MIPS_msa_fmin_a_w = 1605
MIPS_msa_fmin_a_d = 1606
MIPS_msa_fmax_w = 1607
MIPS_msa_fmax_d = 1608
MIPS_msa_fmax_a_w = 1609
MIPS_msa_fmax_a_d = 1610
MIPS_msa_fcor_w = 1611
MIPS_msa_fcor_d = 1612
MIPS_msa_fcune_w = 1613
MIPS_msa_fcune_d = 1614
MIPS_msa_fcne_w = 1615
MIPS_msa_fcne_d = 1616
MIPS_msa_mul_q_h = 1617
MIPS_msa_mul_q_w = 1618
MIPS_msa_madd_q_h = 1619
MIPS_msa_madd_q_w = 1620
MIPS_msa_msub_q_h = 1621
MIPS_msa_msub_q_w = 1622
MIPS_msa_fsor_w = 1623
MIPS_msa_fsor_d = 1624
MIPS_msa_fsune_w = 1625
MIPS_msa_fsune_d = 1626
MIPS_msa_fsne_w = 1627
MIPS_msa_fsne_d = 1628
MIPS_msa_mulr_q_h = 1629
MIPS_msa_mulr_q_w = 1630
MIPS_msa_maddr_q_h = 1631
MIPS_msa_maddr_q_w = 1632
MIPS_msa_msubr_q_h = 1633
MIPS_msa_msubr_q_w = 1634
MIPS_msa_fclass_w = 1635
MIPS_msa_fclass_d = 1636
MIPS_msa_ftrunc_s_w = 1637
MIPS_msa_ftrunc_s_d = 1638
MIPS_msa_ftrunc_u_w = 1639
MIPS_msa_ftrunc_u_d = 1640
MIPS_msa_fsqrt_w = 1641
MIPS_msa_fsqrt_d = 1642
MIPS_msa_frsqrt_w = 1643
MIPS_msa_frsqrt_d = 1644
MIPS_msa_frcp_w = 1645
MIPS_msa_frcp_d = 1646
MIPS_msa_frint_w = 1647
MIPS_msa_frint_d = 1648
MIPS_msa_flog2_w = 1649
MIPS_msa_flog2_d = 1650
MIPS_msa_fexupl_w = 1651
MIPS_msa_fexupl_d = 1652
MIPS_msa_fexupr_w = 1653
MIPS_msa_fexupr_d = 1654
MIPS_msa_ffql_w = 1655
MIPS_msa_ffql_d = 1656
MIPS_msa_ffqr_w = 1657
MIPS_msa_ffqr_d = 1658
MIPS_msa_ftint_s_w = 1659
MIPS_msa_ftint_s_d = 1660
MIPS_msa_ftint_u_w = 1661
MIPS_msa_ftint_u_d = 1662
MIPS_msa_ffint_s_w = 1663
MIPS_msa_ffint_s_d = 1664
MIPS_msa_ffint_u_w = 1665
MIPS_msa_ffint_u_d = 1666
MIPS_msa_ctcmsa = 1667
MIPS_msa_cfcmsa = 1668
MIPS_msa_move_v = 1669
MIPS_lsa = 1670
MIPS_dlsa = 1671
MIPS_lbe = 1672
MIPS_lbue = 1673
MIPS_lhe = 1674
MIPS_lhue = 1675
MIPS_lwe = 1676
MIPS_sbe = 1677
MIPS_she = 1678
MIPS_swe = 1679
MIPS_lle = 1680
MIPS_sce = 1681
MIPS_cachee = 1682
MIPS_prefe = 1683
MIPS_lwle = 1684
MIPS_lwre = 1685
MIPS_swle = 1686
MIPS_swre = 1687
MIPS_movtz = 1688
MIPS_movtn = 1689
MIPS_copyw = 1690
MIPS_ucopyw = 1691
MIPS_last = 1692
_49804ECC545513722F7C143297BF37DB = ctypes.c_uint32 # enum

# values for enumeration '_D022F3AE4E10DBCEA33F2A52E330D46E'
_D022F3AE4E10DBCEA33F2A52E330D46E__enumvalues = {
    0: 'H8_null',
    1: 'H8_add',
    2: 'H8_adds',
    3: 'H8_addx',
    4: 'H8_and',
    5: 'H8_andc',
    6: 'H8_band',
    7: 'H8_bra',
    8: 'H8_brn',
    9: 'H8_bhi',
    10: 'H8_bls',
    11: 'H8_bcc',
    12: 'H8_bcs',
    13: 'H8_bne',
    14: 'H8_beq',
    15: 'H8_bvc',
    16: 'H8_bvs',
    17: 'H8_bpl',
    18: 'H8_bmi',
    19: 'H8_bge',
    20: 'H8_blt',
    21: 'H8_bgt',
    22: 'H8_ble',
    23: 'H8_bclr',
    24: 'H8_biand',
    25: 'H8_bild',
    26: 'H8_bior',
    27: 'H8_bist',
    28: 'H8_bixor',
    29: 'H8_bld',
    30: 'H8_bnot',
    31: 'H8_bor',
    32: 'H8_bset',
    33: 'H8_bsr',
    34: 'H8_bst',
    35: 'H8_btst',
    36: 'H8_bxor',
    37: 'H8_clrmac',
    38: 'H8_cmp',
    39: 'H8_daa',
    40: 'H8_das',
    41: 'H8_dec',
    42: 'H8_divxs',
    43: 'H8_divxu',
    44: 'H8_eepmov',
    45: 'H8_exts',
    46: 'H8_extu',
    47: 'H8_inc',
    48: 'H8_jmp',
    49: 'H8_jsr',
    50: 'H8_ldc',
    51: 'H8_ldm',
    52: 'H8_ldmac',
    53: 'H8_mac',
    54: 'H8_mov',
    55: 'H8_movfpe',
    56: 'H8_movtpe',
    57: 'H8_mulxs',
    58: 'H8_mulxu',
    59: 'H8_neg',
    60: 'H8_nop',
    61: 'H8_not',
    62: 'H8_or',
    63: 'H8_orc',
    64: 'H8_pop',
    65: 'H8_push',
    66: 'H8_rotl',
    67: 'H8_rotr',
    68: 'H8_rotxl',
    69: 'H8_rotxr',
    70: 'H8_rte',
    71: 'H8_rts',
    72: 'H8_shal',
    73: 'H8_shar',
    74: 'H8_shll',
    75: 'H8_shlr',
    76: 'H8_sleep',
    77: 'H8_stc',
    78: 'H8_stm',
    79: 'H8_stmac',
    80: 'H8_sub',
    81: 'H8_subs',
    82: 'H8_subx',
    83: 'H8_tas',
    84: 'H8_trapa',
    85: 'H8_xor',
    86: 'H8_xorc',
    87: 'H8_rtel',
    88: 'H8_rtsl',
    89: 'H8_movmd',
    90: 'H8_movsd',
    91: 'H8_bras',
    92: 'H8_movab',
    93: 'H8_movaw',
    94: 'H8_moval',
    95: 'H8_bsetne',
    96: 'H8_bseteq',
    97: 'H8_bclrne',
    98: 'H8_bclreq',
    99: 'H8_bstz',
    100: 'H8_bistz',
    101: 'H8_bfld',
    102: 'H8_bfst',
    103: 'H8_muls',
    104: 'H8_divs',
    105: 'H8_mulu',
    106: 'H8_divu',
    107: 'H8_mulsu',
    108: 'H8_muluu',
    109: 'H8_brabc',
    110: 'H8_brabs',
    111: 'H8_bsrbc',
    112: 'H8_bsrbs',
    113: 'H8_last',
}
H8_null = 0
H8_add = 1
H8_adds = 2
H8_addx = 3
H8_and = 4
H8_andc = 5
H8_band = 6
H8_bra = 7
H8_brn = 8
H8_bhi = 9
H8_bls = 10
H8_bcc = 11
H8_bcs = 12
H8_bne = 13
H8_beq = 14
H8_bvc = 15
H8_bvs = 16
H8_bpl = 17
H8_bmi = 18
H8_bge = 19
H8_blt = 20
H8_bgt = 21
H8_ble = 22
H8_bclr = 23
H8_biand = 24
H8_bild = 25
H8_bior = 26
H8_bist = 27
H8_bixor = 28
H8_bld = 29
H8_bnot = 30
H8_bor = 31
H8_bset = 32
H8_bsr = 33
H8_bst = 34
H8_btst = 35
H8_bxor = 36
H8_clrmac = 37
H8_cmp = 38
H8_daa = 39
H8_das = 40
H8_dec = 41
H8_divxs = 42
H8_divxu = 43
H8_eepmov = 44
H8_exts = 45
H8_extu = 46
H8_inc = 47
H8_jmp = 48
H8_jsr = 49
H8_ldc = 50
H8_ldm = 51
H8_ldmac = 52
H8_mac = 53
H8_mov = 54
H8_movfpe = 55
H8_movtpe = 56
H8_mulxs = 57
H8_mulxu = 58
H8_neg = 59
H8_nop = 60
H8_not = 61
H8_or = 62
H8_orc = 63
H8_pop = 64
H8_push = 65
H8_rotl = 66
H8_rotr = 67
H8_rotxl = 68
H8_rotxr = 69
H8_rte = 70
H8_rts = 71
H8_shal = 72
H8_shar = 73
H8_shll = 74
H8_shlr = 75
H8_sleep = 76
H8_stc = 77
H8_stm = 78
H8_stmac = 79
H8_sub = 80
H8_subs = 81
H8_subx = 82
H8_tas = 83
H8_trapa = 84
H8_xor = 85
H8_xorc = 86
H8_rtel = 87
H8_rtsl = 88
H8_movmd = 89
H8_movsd = 90
H8_bras = 91
H8_movab = 92
H8_movaw = 93
H8_moval = 94
H8_bsetne = 95
H8_bseteq = 96
H8_bclrne = 97
H8_bclreq = 98
H8_bstz = 99
H8_bistz = 100
H8_bfld = 101
H8_bfst = 102
H8_muls = 103
H8_divs = 104
H8_mulu = 105
H8_divu = 106
H8_mulsu = 107
H8_muluu = 108
H8_brabc = 109
H8_brabs = 110
H8_bsrbc = 111
H8_bsrbs = 112
H8_last = 113
_D022F3AE4E10DBCEA33F2A52E330D46E = ctypes.c_uint32 # enum

# values for enumeration '_F151272271FBC1A81AF87B26B979979C'
_F151272271FBC1A81AF87B26B979979C__enumvalues = {
    0: 'PIC_null',
    1: 'PIC_addwf',
    2: 'PIC_andwf',
    3: 'PIC_clrf',
    4: 'PIC_clrw',
    5: 'PIC_comf',
    6: 'PIC_decf',
    7: 'PIC_decfsz',
    8: 'PIC_incf',
    9: 'PIC_incfsz',
    10: 'PIC_iorwf',
    11: 'PIC_movf',
    12: 'PIC_movwf',
    13: 'PIC_nop',
    14: 'PIC_rlf',
    15: 'PIC_rrf',
    16: 'PIC_subwf',
    17: 'PIC_swapf',
    18: 'PIC_xorwf',
    19: 'PIC_bcf',
    20: 'PIC_bsf',
    21: 'PIC_btfsc',
    22: 'PIC_btfss',
    23: 'PIC_addlw',
    24: 'PIC_andlw',
    25: 'PIC_call',
    26: 'PIC_clrwdt',
    27: 'PIC_goto',
    28: 'PIC_iorlw',
    29: 'PIC_movlw',
    30: 'PIC_retfie',
    31: 'PIC_retlw',
    32: 'PIC_return',
    33: 'PIC_sleep',
    34: 'PIC_sublw',
    35: 'PIC_xorlw',
    36: 'PIC_option',
    37: 'PIC_tris',
    38: 'PIC_movfw',
    39: 'PIC_tstf',
    40: 'PIC_negf',
    41: 'PIC_b',
    42: 'PIC_clrc',
    43: 'PIC_clrdc',
    44: 'PIC_clrz',
    45: 'PIC_setc',
    46: 'PIC_setdc',
    47: 'PIC_setz',
    48: 'PIC_skpc',
    49: 'PIC_skpdc',
    50: 'PIC_skpnc',
    51: 'PIC_skpndc',
    52: 'PIC_skpnz',
    53: 'PIC_skpz',
    54: 'PIC_bc',
    55: 'PIC_bdc',
    56: 'PIC_bnc',
    57: 'PIC_bndc',
    58: 'PIC_bnz',
    59: 'PIC_bz',
    60: 'PIC_addcf',
    61: 'PIC_adddcf',
    62: 'PIC_subcf',
    63: 'PIC_addwf3',
    64: 'PIC_addwfc3',
    65: 'PIC_andwf3',
    66: 'PIC_clrf2',
    67: 'PIC_comf3',
    68: 'PIC_cpfseq2',
    69: 'PIC_cpfsgt2',
    70: 'PIC_cpfslt2',
    71: 'PIC_decf3',
    72: 'PIC_decfsz3',
    73: 'PIC_dcfsnz3',
    74: 'PIC_incf3',
    75: 'PIC_incfsz3',
    76: 'PIC_infsnz3',
    77: 'PIC_iorwf3',
    78: 'PIC_movf3',
    79: 'PIC_movff2',
    80: 'PIC_movwf2',
    81: 'PIC_mulwf2',
    82: 'PIC_negf2',
    83: 'PIC_rlcf3',
    84: 'PIC_rlncf3',
    85: 'PIC_rrcf3',
    86: 'PIC_rrncf3',
    87: 'PIC_setf2',
    88: 'PIC_subfwb3',
    89: 'PIC_subwf3',
    90: 'PIC_subwfb3',
    91: 'PIC_swapf3',
    92: 'PIC_tstfsz2',
    93: 'PIC_xorwf3',
    94: 'PIC_bcf3',
    95: 'PIC_bsf3',
    96: 'PIC_btfsc3',
    97: 'PIC_btfss3',
    98: 'PIC_btg3',
    99: 'PIC_bc1',
    100: 'PIC_bn1',
    101: 'PIC_bnc1',
    102: 'PIC_bnn1',
    103: 'PIC_bnov1',
    104: 'PIC_bnz1',
    105: 'PIC_bov1',
    106: 'PIC_bra1',
    107: 'PIC_bz1',
    108: 'PIC_call2',
    109: 'PIC_daw0',
    110: 'PIC_pop0',
    111: 'PIC_push0',
    112: 'PIC_rcall1',
    113: 'PIC_reset0',
    114: 'PIC_retfie1',
    115: 'PIC_return1',
    116: 'PIC_lfsr2',
    117: 'PIC_movlb1',
    118: 'PIC_mullw1',
    119: 'PIC_tblrd0',
    120: 'PIC_tblrd0p',
    121: 'PIC_tblrd0m',
    122: 'PIC_tblrdp0',
    123: 'PIC_tblwt0',
    124: 'PIC_tblwt0p',
    125: 'PIC_tblwt0m',
    126: 'PIC_tblwtp0',
    127: 'PIC_addwfc',
    128: 'PIC_movlp',
    129: 'PIC_movlb',
    130: 'PIC_addfsr',
    131: 'PIC_asrf',
    132: 'PIC_lslf',
    133: 'PIC_lsrf',
    134: 'PIC_subwfb',
    135: 'PIC_bra',
    136: 'PIC_brw',
    137: 'PIC_callw',
    138: 'PIC_reset',
    139: 'PIC_moviw',
    140: 'PIC_movwi',
    141: 'PIC_last',
}
PIC_null = 0
PIC_addwf = 1
PIC_andwf = 2
PIC_clrf = 3
PIC_clrw = 4
PIC_comf = 5
PIC_decf = 6
PIC_decfsz = 7
PIC_incf = 8
PIC_incfsz = 9
PIC_iorwf = 10
PIC_movf = 11
PIC_movwf = 12
PIC_nop = 13
PIC_rlf = 14
PIC_rrf = 15
PIC_subwf = 16
PIC_swapf = 17
PIC_xorwf = 18
PIC_bcf = 19
PIC_bsf = 20
PIC_btfsc = 21
PIC_btfss = 22
PIC_addlw = 23
PIC_andlw = 24
PIC_call = 25
PIC_clrwdt = 26
PIC_goto = 27
PIC_iorlw = 28
PIC_movlw = 29
PIC_retfie = 30
PIC_retlw = 31
PIC_return = 32
PIC_sleep = 33
PIC_sublw = 34
PIC_xorlw = 35
PIC_option = 36
PIC_tris = 37
PIC_movfw = 38
PIC_tstf = 39
PIC_negf = 40
PIC_b = 41
PIC_clrc = 42
PIC_clrdc = 43
PIC_clrz = 44
PIC_setc = 45
PIC_setdc = 46
PIC_setz = 47
PIC_skpc = 48
PIC_skpdc = 49
PIC_skpnc = 50
PIC_skpndc = 51
PIC_skpnz = 52
PIC_skpz = 53
PIC_bc = 54
PIC_bdc = 55
PIC_bnc = 56
PIC_bndc = 57
PIC_bnz = 58
PIC_bz = 59
PIC_addcf = 60
PIC_adddcf = 61
PIC_subcf = 62
PIC_addwf3 = 63
PIC_addwfc3 = 64
PIC_andwf3 = 65
PIC_clrf2 = 66
PIC_comf3 = 67
PIC_cpfseq2 = 68
PIC_cpfsgt2 = 69
PIC_cpfslt2 = 70
PIC_decf3 = 71
PIC_decfsz3 = 72
PIC_dcfsnz3 = 73
PIC_incf3 = 74
PIC_incfsz3 = 75
PIC_infsnz3 = 76
PIC_iorwf3 = 77
PIC_movf3 = 78
PIC_movff2 = 79
PIC_movwf2 = 80
PIC_mulwf2 = 81
PIC_negf2 = 82
PIC_rlcf3 = 83
PIC_rlncf3 = 84
PIC_rrcf3 = 85
PIC_rrncf3 = 86
PIC_setf2 = 87
PIC_subfwb3 = 88
PIC_subwf3 = 89
PIC_subwfb3 = 90
PIC_swapf3 = 91
PIC_tstfsz2 = 92
PIC_xorwf3 = 93
PIC_bcf3 = 94
PIC_bsf3 = 95
PIC_btfsc3 = 96
PIC_btfss3 = 97
PIC_btg3 = 98
PIC_bc1 = 99
PIC_bn1 = 100
PIC_bnc1 = 101
PIC_bnn1 = 102
PIC_bnov1 = 103
PIC_bnz1 = 104
PIC_bov1 = 105
PIC_bra1 = 106
PIC_bz1 = 107
PIC_call2 = 108
PIC_daw0 = 109
PIC_pop0 = 110
PIC_push0 = 111
PIC_rcall1 = 112
PIC_reset0 = 113
PIC_retfie1 = 114
PIC_return1 = 115
PIC_lfsr2 = 116
PIC_movlb1 = 117
PIC_mullw1 = 118
PIC_tblrd0 = 119
PIC_tblrd0p = 120
PIC_tblrd0m = 121
PIC_tblrdp0 = 122
PIC_tblwt0 = 123
PIC_tblwt0p = 124
PIC_tblwt0m = 125
PIC_tblwtp0 = 126
PIC_addwfc = 127
PIC_movlp = 128
PIC_movlb = 129
PIC_addfsr = 130
PIC_asrf = 131
PIC_lslf = 132
PIC_lsrf = 133
PIC_subwfb = 134
PIC_bra = 135
PIC_brw = 136
PIC_callw = 137
PIC_reset = 138
PIC_moviw = 139
PIC_movwi = 140
PIC_last = 141
_F151272271FBC1A81AF87B26B979979C = ctypes.c_uint32 # enum

# values for enumeration '_CCE2416F380A82F561A09BADF43CB67B'
_CCE2416F380A82F561A09BADF43CB67B__enumvalues = {
    0: 'PIC16_null',
    1: 'PIC16_EXCH',
    2: 'PIC16_MOV',
    3: 'PIC16_SWAP',
    4: 'PIC16_TBLRDH',
    5: 'PIC16_TBLRDL',
    6: 'PIC16_TBLWTH',
    7: 'PIC16_TBLWTL',
    8: 'PIC16_MOVPAG',
    9: 'PIC16_ADD',
    10: 'PIC16_ADDC',
    11: 'PIC16_DAWB',
    12: 'PIC16_DEC',
    13: 'PIC16_DEC2',
    14: 'PIC16_DIV',
    15: 'PIC16_INC',
    16: 'PIC16_INC2',
    17: 'PIC16_MUL',
    18: 'PIC16_SE',
    19: 'PIC16_SUB',
    20: 'PIC16_SUBB',
    21: 'PIC16_SUBBR',
    22: 'PIC16_SUBR',
    23: 'PIC16_ZE',
    24: 'PIC16_MULW',
    25: 'PIC16_DIVF',
    26: 'PIC16_AND',
    27: 'PIC16_CLR',
    28: 'PIC16_COM',
    29: 'PIC16_IOR',
    30: 'PIC16_NEG',
    31: 'PIC16_SETM',
    32: 'PIC16_XOR',
    33: 'PIC16_ASR',
    34: 'PIC16_LSR',
    35: 'PIC16_RLC',
    36: 'PIC16_RLNC',
    37: 'PIC16_RRC',
    38: 'PIC16_RRNC',
    39: 'PIC16_SL',
    40: 'PIC16_BCLR',
    41: 'PIC16_BSET',
    42: 'PIC16_BSW',
    43: 'PIC16_BTG',
    44: 'PIC16_BTST',
    45: 'PIC16_BTSTS',
    46: 'PIC16_FBCL',
    47: 'PIC16_FF1L',
    48: 'PIC16_FF1R',
    49: 'PIC16_BTSC',
    50: 'PIC16_BTSS',
    51: 'PIC16_CP',
    52: 'PIC16_CP0',
    53: 'PIC16_CPB',
    54: 'PIC16_CPSEQ',
    55: 'PIC16_CPSGT',
    56: 'PIC16_CPSLT',
    57: 'PIC16_CPSNE',
    58: 'PIC16_CPBEQ',
    59: 'PIC16_CPBNE',
    60: 'PIC16_CPBGT',
    61: 'PIC16_CPBLT',
    62: 'PIC16_BRA',
    63: 'PIC16_CALL',
    64: 'PIC16_GOTO',
    65: 'PIC16_RCALL',
    66: 'PIC16_REPEAT',
    67: 'PIC16_RETFIE',
    68: 'PIC16_RETLW',
    69: 'PIC16_RETURN',
    70: 'PIC16_DO',
    71: 'PIC16_LNK',
    72: 'PIC16_POP',
    73: 'PIC16_PUSH',
    74: 'PIC16_ULNK',
    75: 'PIC16_CLRWDT',
    76: 'PIC16_DISI',
    77: 'PIC16_NOP',
    78: 'PIC16_NOPR',
    79: 'PIC16_PWRSAV',
    80: 'PIC16_RESET',
    81: 'PIC16_LAC',
    82: 'PIC16_SAC',
    83: 'PIC16_SFTAC',
    84: 'PIC16_CLR1',
    85: 'PIC16_ED',
    86: 'PIC16_EDAC',
    87: 'PIC16_MAC',
    88: 'PIC16_MOVSAC',
    89: 'PIC16_MPY',
    90: 'PIC16_MSC',
    91: 'PIC16_BREAK',
    92: 'PIC16_URUN',
    93: 'PIC16_SSTEP',
    94: 'PIC16_FEX',
    95: 'PIC16_last',
}
PIC16_null = 0
PIC16_EXCH = 1
PIC16_MOV = 2
PIC16_SWAP = 3
PIC16_TBLRDH = 4
PIC16_TBLRDL = 5
PIC16_TBLWTH = 6
PIC16_TBLWTL = 7
PIC16_MOVPAG = 8
PIC16_ADD = 9
PIC16_ADDC = 10
PIC16_DAWB = 11
PIC16_DEC = 12
PIC16_DEC2 = 13
PIC16_DIV = 14
PIC16_INC = 15
PIC16_INC2 = 16
PIC16_MUL = 17
PIC16_SE = 18
PIC16_SUB = 19
PIC16_SUBB = 20
PIC16_SUBBR = 21
PIC16_SUBR = 22
PIC16_ZE = 23
PIC16_MULW = 24
PIC16_DIVF = 25
PIC16_AND = 26
PIC16_CLR = 27
PIC16_COM = 28
PIC16_IOR = 29
PIC16_NEG = 30
PIC16_SETM = 31
PIC16_XOR = 32
PIC16_ASR = 33
PIC16_LSR = 34
PIC16_RLC = 35
PIC16_RLNC = 36
PIC16_RRC = 37
PIC16_RRNC = 38
PIC16_SL = 39
PIC16_BCLR = 40
PIC16_BSET = 41
PIC16_BSW = 42
PIC16_BTG = 43
PIC16_BTST = 44
PIC16_BTSTS = 45
PIC16_FBCL = 46
PIC16_FF1L = 47
PIC16_FF1R = 48
PIC16_BTSC = 49
PIC16_BTSS = 50
PIC16_CP = 51
PIC16_CP0 = 52
PIC16_CPB = 53
PIC16_CPSEQ = 54
PIC16_CPSGT = 55
PIC16_CPSLT = 56
PIC16_CPSNE = 57
PIC16_CPBEQ = 58
PIC16_CPBNE = 59
PIC16_CPBGT = 60
PIC16_CPBLT = 61
PIC16_BRA = 62
PIC16_CALL = 63
PIC16_GOTO = 64
PIC16_RCALL = 65
PIC16_REPEAT = 66
PIC16_RETFIE = 67
PIC16_RETLW = 68
PIC16_RETURN = 69
PIC16_DO = 70
PIC16_LNK = 71
PIC16_POP = 72
PIC16_PUSH = 73
PIC16_ULNK = 74
PIC16_CLRWDT = 75
PIC16_DISI = 76
PIC16_NOP = 77
PIC16_NOPR = 78
PIC16_PWRSAV = 79
PIC16_RESET = 80
PIC16_LAC = 81
PIC16_SAC = 82
PIC16_SFTAC = 83
PIC16_CLR1 = 84
PIC16_ED = 85
PIC16_EDAC = 86
PIC16_MAC = 87
PIC16_MOVSAC = 88
PIC16_MPY = 89
PIC16_MSC = 90
PIC16_BREAK = 91
PIC16_URUN = 92
PIC16_SSTEP = 93
PIC16_FEX = 94
PIC16_last = 95
_CCE2416F380A82F561A09BADF43CB67B = ctypes.c_uint32 # enum

# values for enumeration '_EB483C165D7C646D3CFBB5521698A1AE'
_EB483C165D7C646D3CFBB5521698A1AE__enumvalues = {
    0: 'SPARC_null',
    1: 'SPARC_add',
    2: 'SPARC_addcc',
    3: 'SPARC_addc',
    4: 'SPARC_addccc',
    5: 'SPARC_and',
    6: 'SPARC_andcc',
    7: 'SPARC_andn',
    8: 'SPARC_andncc',
    9: 'SPARC_b',
    10: 'SPARC_bp',
    11: 'SPARC_bpr',
    12: 'SPARC_call',
    13: 'SPARC_casa',
    14: 'SPARC_casxa',
    15: 'SPARC_done',
    16: 'SPARC_fabs',
    17: 'SPARC_fadd',
    18: 'SPARC_fbp',
    19: 'SPARC_fb',
    20: 'SPARC_fcmp',
    21: 'SPARC_fcmpe',
    22: 'SPARC_fdiv',
    23: 'SPARC_fdmulq',
    24: 'SPARC_flush',
    25: 'SPARC_flushw',
    26: 'SPARC_fmov',
    27: 'SPARC_fmovcc',
    28: 'SPARC_fmovr',
    29: 'SPARC_fmul',
    30: 'SPARC_fneg',
    31: 'SPARC_fsmuld',
    32: 'SPARC_fsqrt',
    33: 'SPARC_fsub',
    34: 'SPARC_fstox',
    35: 'SPARC_fdtox',
    36: 'SPARC_fqtox',
    37: 'SPARC_fxtos',
    38: 'SPARC_fxtod',
    39: 'SPARC_fxtoq',
    40: 'SPARC_fitos',
    41: 'SPARC_fdtos',
    42: 'SPARC_fqtos',
    43: 'SPARC_fitod',
    44: 'SPARC_fstod',
    45: 'SPARC_fqtod',
    46: 'SPARC_fitoq',
    47: 'SPARC_fstoq',
    48: 'SPARC_fdtoq',
    49: 'SPARC_fstoi',
    50: 'SPARC_fdtoi',
    51: 'SPARC_fqtoi',
    52: 'SPARC_illtrap',
    53: 'SPARC_impdep1',
    54: 'SPARC_impdep2',
    55: 'SPARC_jmpl',
    56: 'SPARC_ldd',
    57: 'SPARC_ldda',
    58: 'SPARC_lddf',
    59: 'SPARC_lddfa',
    60: 'SPARC_ldf',
    61: 'SPARC_ldfa',
    62: 'SPARC_ldfsr',
    63: 'SPARC_ldqf',
    64: 'SPARC_ldqfa',
    65: 'SPARC_ldsb',
    66: 'SPARC_ldsba',
    67: 'SPARC_ldsh',
    68: 'SPARC_ldsha',
    69: 'SPARC_ldstub',
    70: 'SPARC_ldstuba',
    71: 'SPARC_ldsw',
    72: 'SPARC_ldswa',
    73: 'SPARC_ldub',
    74: 'SPARC_lduba',
    75: 'SPARC_lduh',
    76: 'SPARC_lduha',
    77: 'SPARC_lduw',
    78: 'SPARC_lduwa',
    79: 'SPARC_ldx',
    80: 'SPARC_ldxa',
    81: 'SPARC_ldxfsr',
    82: 'SPARC_membar',
    83: 'SPARC_mov',
    84: 'SPARC_movr',
    85: 'SPARC_mulscc',
    86: 'SPARC_mulx',
    87: 'SPARC_nop',
    88: 'SPARC_or',
    89: 'SPARC_orcc',
    90: 'SPARC_orn',
    91: 'SPARC_orncc',
    92: 'SPARC_popc',
    93: 'SPARC_prefetch',
    94: 'SPARC_prefetcha',
    95: 'SPARC_rd',
    96: 'SPARC_rdpr',
    97: 'SPARC_restore',
    98: 'SPARC_restored',
    99: 'SPARC_retry',
    100: 'SPARC_return',
    101: 'SPARC_save',
    102: 'SPARC_saved',
    103: 'SPARC_sdiv',
    104: 'SPARC_sdivcc',
    105: 'SPARC_sdivx',
    106: 'SPARC_sethi',
    107: 'SPARC_sir',
    108: 'SPARC_sll',
    109: 'SPARC_sllx',
    110: 'SPARC_smul',
    111: 'SPARC_smulcc',
    112: 'SPARC_sra',
    113: 'SPARC_srax',
    114: 'SPARC_srl',
    115: 'SPARC_srlx',
    116: 'SPARC_stb',
    117: 'SPARC_stba',
    118: 'SPARC_stbar',
    119: 'SPARC_std',
    120: 'SPARC_stda',
    121: 'SPARC_stdf',
    122: 'SPARC_stdfa',
    123: 'SPARC_stf',
    124: 'SPARC_stfa',
    125: 'SPARC_stfsr',
    126: 'SPARC_sth',
    127: 'SPARC_stha',
    128: 'SPARC_stqf',
    129: 'SPARC_stqfa',
    130: 'SPARC_stw',
    131: 'SPARC_stwa',
    132: 'SPARC_stx',
    133: 'SPARC_stxa',
    134: 'SPARC_stxfsr',
    135: 'SPARC_sub',
    136: 'SPARC_subcc',
    137: 'SPARC_subc',
    138: 'SPARC_subccc',
    139: 'SPARC_swap',
    140: 'SPARC_swapa',
    141: 'SPARC_taddcc',
    142: 'SPARC_taddcctv',
    143: 'SPARC_tsubcc',
    144: 'SPARC_tsubcctv',
    145: 'SPARC_t',
    146: 'SPARC_udiv',
    147: 'SPARC_udivcc',
    148: 'SPARC_udivx',
    149: 'SPARC_umul',
    150: 'SPARC_umulcc',
    151: 'SPARC_wr',
    152: 'SPARC_wrpr',
    153: 'SPARC_xnor',
    154: 'SPARC_xnorcc',
    155: 'SPARC_xor',
    156: 'SPARC_xorcc',
    157: 'SPARC_cmp',
    158: 'SPARC_jmp',
    159: 'SPARC_iprefetch',
    160: 'SPARC_tst',
    161: 'SPARC_ret',
    162: 'SPARC_retl',
    163: 'SPARC_setuw',
    164: 'SPARC_setsw',
    165: 'SPARC_setx',
    166: 'SPARC_signx',
    167: 'SPARC_not',
    168: 'SPARC_neg',
    169: 'SPARC_cas',
    170: 'SPARC_casl',
    171: 'SPARC_casx',
    172: 'SPARC_casxl',
    173: 'SPARC_inc',
    174: 'SPARC_inccc',
    175: 'SPARC_dec',
    176: 'SPARC_deccc',
    177: 'SPARC_btst',
    178: 'SPARC_bset',
    179: 'SPARC_bclr',
    180: 'SPARC_btog',
    181: 'SPARC_clr',
    182: 'SPARC_clrb',
    183: 'SPARC_clrh',
    184: 'SPARC_clrx',
    185: 'SPARC_clruw',
    186: 'SPARC_pseudo_mov',
    187: 'SPARC_alignaddress',
    188: 'SPARC_array',
    189: 'SPARC_edge',
    190: 'SPARC_faligndata',
    191: 'SPARC_fandnot1',
    192: 'SPARC_fandnot2',
    193: 'SPARC_fand',
    194: 'SPARC_fcmpeq',
    195: 'SPARC_fcmpgt',
    196: 'SPARC_fcmple',
    197: 'SPARC_fcmpne',
    198: 'SPARC_fexpand',
    199: 'SPARC_fmul8sux16',
    200: 'SPARC_fmul8ulx16',
    201: 'SPARC_fmul8x16',
    202: 'SPARC_fmul8x16al',
    203: 'SPARC_fmul8x16au',
    204: 'SPARC_fmuld8sux16',
    205: 'SPARC_fmuld8ulx16',
    206: 'SPARC_fnand',
    207: 'SPARC_fnor',
    208: 'SPARC_fnot1',
    209: 'SPARC_fnot2',
    210: 'SPARC_fone',
    211: 'SPARC_fornot1',
    212: 'SPARC_fornot2',
    213: 'SPARC_for',
    214: 'SPARC_fpackfix',
    215: 'SPARC_fpack',
    216: 'SPARC_fpadd',
    217: 'SPARC_fpmerge',
    218: 'SPARC_fpsub',
    219: 'SPARC_fsrc1',
    220: 'SPARC_fsrc2',
    221: 'SPARC_fxnor',
    222: 'SPARC_fxor',
    223: 'SPARC_fzero',
    224: 'SPARC_pdist',
    225: 'SPARC_shutdown',
    226: 'SPARC_rett',
    227: 'SPARC_bmask',
    228: 'SPARC_bshuffle',
    229: 'SPARC_edgen',
    230: 'SPARC_rdhpr',
    231: 'SPARC_wrhpr',
    232: 'SPARC_siam',
    233: 'SPARC_last',
}
SPARC_null = 0
SPARC_add = 1
SPARC_addcc = 2
SPARC_addc = 3
SPARC_addccc = 4
SPARC_and = 5
SPARC_andcc = 6
SPARC_andn = 7
SPARC_andncc = 8
SPARC_b = 9
SPARC_bp = 10
SPARC_bpr = 11
SPARC_call = 12
SPARC_casa = 13
SPARC_casxa = 14
SPARC_done = 15
SPARC_fabs = 16
SPARC_fadd = 17
SPARC_fbp = 18
SPARC_fb = 19
SPARC_fcmp = 20
SPARC_fcmpe = 21
SPARC_fdiv = 22
SPARC_fdmulq = 23
SPARC_flush = 24
SPARC_flushw = 25
SPARC_fmov = 26
SPARC_fmovcc = 27
SPARC_fmovr = 28
SPARC_fmul = 29
SPARC_fneg = 30
SPARC_fsmuld = 31
SPARC_fsqrt = 32
SPARC_fsub = 33
SPARC_fstox = 34
SPARC_fdtox = 35
SPARC_fqtox = 36
SPARC_fxtos = 37
SPARC_fxtod = 38
SPARC_fxtoq = 39
SPARC_fitos = 40
SPARC_fdtos = 41
SPARC_fqtos = 42
SPARC_fitod = 43
SPARC_fstod = 44
SPARC_fqtod = 45
SPARC_fitoq = 46
SPARC_fstoq = 47
SPARC_fdtoq = 48
SPARC_fstoi = 49
SPARC_fdtoi = 50
SPARC_fqtoi = 51
SPARC_illtrap = 52
SPARC_impdep1 = 53
SPARC_impdep2 = 54
SPARC_jmpl = 55
SPARC_ldd = 56
SPARC_ldda = 57
SPARC_lddf = 58
SPARC_lddfa = 59
SPARC_ldf = 60
SPARC_ldfa = 61
SPARC_ldfsr = 62
SPARC_ldqf = 63
SPARC_ldqfa = 64
SPARC_ldsb = 65
SPARC_ldsba = 66
SPARC_ldsh = 67
SPARC_ldsha = 68
SPARC_ldstub = 69
SPARC_ldstuba = 70
SPARC_ldsw = 71
SPARC_ldswa = 72
SPARC_ldub = 73
SPARC_lduba = 74
SPARC_lduh = 75
SPARC_lduha = 76
SPARC_lduw = 77
SPARC_lduwa = 78
SPARC_ldx = 79
SPARC_ldxa = 80
SPARC_ldxfsr = 81
SPARC_membar = 82
SPARC_mov = 83
SPARC_movr = 84
SPARC_mulscc = 85
SPARC_mulx = 86
SPARC_nop = 87
SPARC_or = 88
SPARC_orcc = 89
SPARC_orn = 90
SPARC_orncc = 91
SPARC_popc = 92
SPARC_prefetch = 93
SPARC_prefetcha = 94
SPARC_rd = 95
SPARC_rdpr = 96
SPARC_restore = 97
SPARC_restored = 98
SPARC_retry = 99
SPARC_return = 100
SPARC_save = 101
SPARC_saved = 102
SPARC_sdiv = 103
SPARC_sdivcc = 104
SPARC_sdivx = 105
SPARC_sethi = 106
SPARC_sir = 107
SPARC_sll = 108
SPARC_sllx = 109
SPARC_smul = 110
SPARC_smulcc = 111
SPARC_sra = 112
SPARC_srax = 113
SPARC_srl = 114
SPARC_srlx = 115
SPARC_stb = 116
SPARC_stba = 117
SPARC_stbar = 118
SPARC_std = 119
SPARC_stda = 120
SPARC_stdf = 121
SPARC_stdfa = 122
SPARC_stf = 123
SPARC_stfa = 124
SPARC_stfsr = 125
SPARC_sth = 126
SPARC_stha = 127
SPARC_stqf = 128
SPARC_stqfa = 129
SPARC_stw = 130
SPARC_stwa = 131
SPARC_stx = 132
SPARC_stxa = 133
SPARC_stxfsr = 134
SPARC_sub = 135
SPARC_subcc = 136
SPARC_subc = 137
SPARC_subccc = 138
SPARC_swap = 139
SPARC_swapa = 140
SPARC_taddcc = 141
SPARC_taddcctv = 142
SPARC_tsubcc = 143
SPARC_tsubcctv = 144
SPARC_t = 145
SPARC_udiv = 146
SPARC_udivcc = 147
SPARC_udivx = 148
SPARC_umul = 149
SPARC_umulcc = 150
SPARC_wr = 151
SPARC_wrpr = 152
SPARC_xnor = 153
SPARC_xnorcc = 154
SPARC_xor = 155
SPARC_xorcc = 156
SPARC_cmp = 157
SPARC_jmp = 158
SPARC_iprefetch = 159
SPARC_tst = 160
SPARC_ret = 161
SPARC_retl = 162
SPARC_setuw = 163
SPARC_setsw = 164
SPARC_setx = 165
SPARC_signx = 166
SPARC_not = 167
SPARC_neg = 168
SPARC_cas = 169
SPARC_casl = 170
SPARC_casx = 171
SPARC_casxl = 172
SPARC_inc = 173
SPARC_inccc = 174
SPARC_dec = 175
SPARC_deccc = 176
SPARC_btst = 177
SPARC_bset = 178
SPARC_bclr = 179
SPARC_btog = 180
SPARC_clr = 181
SPARC_clrb = 182
SPARC_clrh = 183
SPARC_clrx = 184
SPARC_clruw = 185
SPARC_pseudo_mov = 186
SPARC_alignaddress = 187
SPARC_array = 188
SPARC_edge = 189
SPARC_faligndata = 190
SPARC_fandnot1 = 191
SPARC_fandnot2 = 192
SPARC_fand = 193
SPARC_fcmpeq = 194
SPARC_fcmpgt = 195
SPARC_fcmple = 196
SPARC_fcmpne = 197
SPARC_fexpand = 198
SPARC_fmul8sux16 = 199
SPARC_fmul8ulx16 = 200
SPARC_fmul8x16 = 201
SPARC_fmul8x16al = 202
SPARC_fmul8x16au = 203
SPARC_fmuld8sux16 = 204
SPARC_fmuld8ulx16 = 205
SPARC_fnand = 206
SPARC_fnor = 207
SPARC_fnot1 = 208
SPARC_fnot2 = 209
SPARC_fone = 210
SPARC_fornot1 = 211
SPARC_fornot2 = 212
SPARC_for = 213
SPARC_fpackfix = 214
SPARC_fpack = 215
SPARC_fpadd = 216
SPARC_fpmerge = 217
SPARC_fpsub = 218
SPARC_fsrc1 = 219
SPARC_fsrc2 = 220
SPARC_fxnor = 221
SPARC_fxor = 222
SPARC_fzero = 223
SPARC_pdist = 224
SPARC_shutdown = 225
SPARC_rett = 226
SPARC_bmask = 227
SPARC_bshuffle = 228
SPARC_edgen = 229
SPARC_rdhpr = 230
SPARC_wrhpr = 231
SPARC_siam = 232
SPARC_last = 233
_EB483C165D7C646D3CFBB5521698A1AE = ctypes.c_uint32 # enum

# values for enumeration '_7A05C346C9B31AF43F590BC77E2CFA64'
_7A05C346C9B31AF43F590BC77E2CFA64__enumvalues = {
    0: 'HPPA_null',
    1: 'HPPA_add',
    2: 'HPPA_addb',
    3: 'HPPA_addi',
    4: 'HPPA_addib',
    5: 'HPPA_addil',
    6: 'HPPA_and',
    7: 'HPPA_andcm',
    8: 'HPPA_b',
    9: 'HPPA_bb',
    10: 'HPPA_be',
    11: 'HPPA_blr',
    12: 'HPPA_break',
    13: 'HPPA_bv',
    14: 'HPPA_bve',
    15: 'HPPA_cldd',
    16: 'HPPA_cldw',
    17: 'HPPA_clrbts',
    18: 'HPPA_cmpb',
    19: 'HPPA_cmpclr',
    20: 'HPPA_cmpib',
    21: 'HPPA_cmpiclr',
    22: 'HPPA_copr',
    23: 'HPPA_cstd',
    24: 'HPPA_cstw',
    25: 'HPPA_dcor',
    26: 'HPPA_depd',
    27: 'HPPA_depdi',
    28: 'HPPA_depw',
    29: 'HPPA_depwi',
    30: 'HPPA_diag',
    31: 'HPPA_ds',
    32: 'HPPA_extrd',
    33: 'HPPA_extrw',
    34: 'HPPA_fdc',
    35: 'HPPA_fdce',
    36: 'HPPA_fic',
    37: 'HPPA_fice',
    38: 'HPPA_hadd',
    39: 'HPPA_havg',
    40: 'HPPA_hshl',
    41: 'HPPA_hshladd',
    42: 'HPPA_hshr',
    43: 'HPPA_hshradd',
    44: 'HPPA_hsub',
    45: 'HPPA_idtlbt',
    46: 'HPPA_iitlbt',
    47: 'HPPA_lci',
    48: 'HPPA_ldb',
    49: 'HPPA_ldcd',
    50: 'HPPA_ldcw',
    51: 'HPPA_ldd',
    52: 'HPPA_ldda',
    53: 'HPPA_ldh',
    54: 'HPPA_ldil',
    55: 'HPPA_ldo',
    56: 'HPPA_ldsid',
    57: 'HPPA_ldw',
    58: 'HPPA_ldwa',
    59: 'HPPA_lpa',
    60: 'HPPA_mfctl',
    61: 'HPPA_mfia',
    62: 'HPPA_mfsp',
    63: 'HPPA_mixh',
    64: 'HPPA_mixw',
    65: 'HPPA_movb',
    66: 'HPPA_movib',
    67: 'HPPA_mtctl',
    68: 'HPPA_mtsarcm',
    69: 'HPPA_mtsm',
    70: 'HPPA_mtsp',
    71: 'HPPA_or',
    72: 'HPPA_pdc',
    73: 'HPPA_pdtlb',
    74: 'HPPA_pdtlbe',
    75: 'HPPA_permh',
    76: 'HPPA_pitlb',
    77: 'HPPA_pitlbe',
    78: 'HPPA_popbts',
    79: 'HPPA_probe',
    80: 'HPPA_probei',
    81: 'HPPA_pushbts',
    82: 'HPPA_pushnom',
    83: 'HPPA_rfi',
    84: 'HPPA_rsm',
    85: 'HPPA_shladd',
    86: 'HPPA_shrpd',
    87: 'HPPA_shrpw',
    88: 'HPPA_spop0',
    89: 'HPPA_spop1',
    90: 'HPPA_spop2',
    91: 'HPPA_spop3',
    92: 'HPPA_ssm',
    93: 'HPPA_stb',
    94: 'HPPA_stby',
    95: 'HPPA_std',
    96: 'HPPA_stda',
    97: 'HPPA_stdby',
    98: 'HPPA_sth',
    99: 'HPPA_stw',
    100: 'HPPA_stwa',
    101: 'HPPA_sub',
    102: 'HPPA_subi',
    103: 'HPPA_sync',
    104: 'HPPA_syncdma',
    105: 'HPPA_uaddcm',
    106: 'HPPA_uxor',
    107: 'HPPA_xor',
    108: 'HPPA_fabs',
    109: 'HPPA_fadd',
    110: 'HPPA_fcmp',
    111: 'HPPA_fcnv',
    112: 'HPPA_fcpy',
    113: 'HPPA_fdiv',
    114: 'HPPA_fid',
    115: 'HPPA_fldd',
    116: 'HPPA_fldw',
    117: 'HPPA_fmpy',
    118: 'HPPA_fmpyadd',
    119: 'HPPA_fmpyfadd',
    120: 'HPPA_fmpynfadd',
    121: 'HPPA_fmpysub',
    122: 'HPPA_fneg',
    123: 'HPPA_fnegabs',
    124: 'HPPA_frem',
    125: 'HPPA_frnd',
    126: 'HPPA_fsqrt',
    127: 'HPPA_fstd',
    128: 'HPPA_fstw',
    129: 'HPPA_fsub',
    130: 'HPPA_ftest',
    131: 'HPPA_xmpyu',
    132: 'HPPA_pmdis',
    133: 'HPPA_pmenb',
    134: 'HPPA_call',
    135: 'HPPA_ret',
    136: 'HPPA_shld',
    137: 'HPPA_shlw',
    138: 'HPPA_shrd',
    139: 'HPPA_shrw',
    140: 'HPPA_ldi',
    141: 'HPPA_copy',
    142: 'HPPA_mtsar',
    143: 'HPPA_nop',
    144: 'HPPA_last',
}
HPPA_null = 0
HPPA_add = 1
HPPA_addb = 2
HPPA_addi = 3
HPPA_addib = 4
HPPA_addil = 5
HPPA_and = 6
HPPA_andcm = 7
HPPA_b = 8
HPPA_bb = 9
HPPA_be = 10
HPPA_blr = 11
HPPA_break = 12
HPPA_bv = 13
HPPA_bve = 14
HPPA_cldd = 15
HPPA_cldw = 16
HPPA_clrbts = 17
HPPA_cmpb = 18
HPPA_cmpclr = 19
HPPA_cmpib = 20
HPPA_cmpiclr = 21
HPPA_copr = 22
HPPA_cstd = 23
HPPA_cstw = 24
HPPA_dcor = 25
HPPA_depd = 26
HPPA_depdi = 27
HPPA_depw = 28
HPPA_depwi = 29
HPPA_diag = 30
HPPA_ds = 31
HPPA_extrd = 32
HPPA_extrw = 33
HPPA_fdc = 34
HPPA_fdce = 35
HPPA_fic = 36
HPPA_fice = 37
HPPA_hadd = 38
HPPA_havg = 39
HPPA_hshl = 40
HPPA_hshladd = 41
HPPA_hshr = 42
HPPA_hshradd = 43
HPPA_hsub = 44
HPPA_idtlbt = 45
HPPA_iitlbt = 46
HPPA_lci = 47
HPPA_ldb = 48
HPPA_ldcd = 49
HPPA_ldcw = 50
HPPA_ldd = 51
HPPA_ldda = 52
HPPA_ldh = 53
HPPA_ldil = 54
HPPA_ldo = 55
HPPA_ldsid = 56
HPPA_ldw = 57
HPPA_ldwa = 58
HPPA_lpa = 59
HPPA_mfctl = 60
HPPA_mfia = 61
HPPA_mfsp = 62
HPPA_mixh = 63
HPPA_mixw = 64
HPPA_movb = 65
HPPA_movib = 66
HPPA_mtctl = 67
HPPA_mtsarcm = 68
HPPA_mtsm = 69
HPPA_mtsp = 70
HPPA_or = 71
HPPA_pdc = 72
HPPA_pdtlb = 73
HPPA_pdtlbe = 74
HPPA_permh = 75
HPPA_pitlb = 76
HPPA_pitlbe = 77
HPPA_popbts = 78
HPPA_probe = 79
HPPA_probei = 80
HPPA_pushbts = 81
HPPA_pushnom = 82
HPPA_rfi = 83
HPPA_rsm = 84
HPPA_shladd = 85
HPPA_shrpd = 86
HPPA_shrpw = 87
HPPA_spop0 = 88
HPPA_spop1 = 89
HPPA_spop2 = 90
HPPA_spop3 = 91
HPPA_ssm = 92
HPPA_stb = 93
HPPA_stby = 94
HPPA_std = 95
HPPA_stda = 96
HPPA_stdby = 97
HPPA_sth = 98
HPPA_stw = 99
HPPA_stwa = 100
HPPA_sub = 101
HPPA_subi = 102
HPPA_sync = 103
HPPA_syncdma = 104
HPPA_uaddcm = 105
HPPA_uxor = 106
HPPA_xor = 107
HPPA_fabs = 108
HPPA_fadd = 109
HPPA_fcmp = 110
HPPA_fcnv = 111
HPPA_fcpy = 112
HPPA_fdiv = 113
HPPA_fid = 114
HPPA_fldd = 115
HPPA_fldw = 116
HPPA_fmpy = 117
HPPA_fmpyadd = 118
HPPA_fmpyfadd = 119
HPPA_fmpynfadd = 120
HPPA_fmpysub = 121
HPPA_fneg = 122
HPPA_fnegabs = 123
HPPA_frem = 124
HPPA_frnd = 125
HPPA_fsqrt = 126
HPPA_fstd = 127
HPPA_fstw = 128
HPPA_fsub = 129
HPPA_ftest = 130
HPPA_xmpyu = 131
HPPA_pmdis = 132
HPPA_pmenb = 133
HPPA_call = 134
HPPA_ret = 135
HPPA_shld = 136
HPPA_shlw = 137
HPPA_shrd = 138
HPPA_shrw = 139
HPPA_ldi = 140
HPPA_copy = 141
HPPA_mtsar = 142
HPPA_nop = 143
HPPA_last = 144
_7A05C346C9B31AF43F590BC77E2CFA64 = ctypes.c_uint32 # enum

# values for enumeration '_5290CBBFB2D2F51A8E6306549769C310'
_5290CBBFB2D2F51A8E6306549769C310__enumvalues = {
    0: 'H8500_null',
    1: 'H8500_mov_g',
    2: 'H8500_mov_e',
    3: 'H8500_mov_i',
    4: 'H8500_mov_f',
    5: 'H8500_mov_l',
    6: 'H8500_mov_s',
    7: 'H8500_ldm',
    8: 'H8500_stm',
    9: 'H8500_xch',
    10: 'H8500_swap',
    11: 'H8500_movtpe',
    12: 'H8500_movfpe',
    13: 'H8500_add_g',
    14: 'H8500_add_q',
    15: 'H8500_sub',
    16: 'H8500_adds',
    17: 'H8500_subs',
    18: 'H8500_addx',
    19: 'H8500_subx',
    20: 'H8500_dadd',
    21: 'H8500_dsub',
    22: 'H8500_mulxu',
    23: 'H8500_divxu',
    24: 'H8500_cmp_g',
    25: 'H8500_cmp_e',
    26: 'H8500_cmp_i',
    27: 'H8500_exts',
    28: 'H8500_extu',
    29: 'H8500_tst',
    30: 'H8500_neg',
    31: 'H8500_clr',
    32: 'H8500_tas',
    33: 'H8500_and',
    34: 'H8500_or',
    35: 'H8500_xor',
    36: 'H8500_not',
    37: 'H8500_shal',
    38: 'H8500_shar',
    39: 'H8500_shll',
    40: 'H8500_shlr',
    41: 'H8500_rotl',
    42: 'H8500_rotr',
    43: 'H8500_rotxl',
    44: 'H8500_rotxr',
    45: 'H8500_bset',
    46: 'H8500_bclr',
    47: 'H8500_bnot',
    48: 'H8500_btst',
    49: 'H8500_bra',
    50: 'H8500_brn',
    51: 'H8500_bhi',
    52: 'H8500_bls',
    53: 'H8500_bcc',
    54: 'H8500_bcs',
    55: 'H8500_bne',
    56: 'H8500_beq',
    57: 'H8500_bvc',
    58: 'H8500_bvs',
    59: 'H8500_bpl',
    60: 'H8500_bmi',
    61: 'H8500_bge',
    62: 'H8500_blt',
    63: 'H8500_bgt',
    64: 'H8500_ble',
    65: 'H8500_jmp',
    66: 'H8500_pjmp',
    67: 'H8500_bsr',
    68: 'H8500_jsr',
    69: 'H8500_pjsr',
    70: 'H8500_rts',
    71: 'H8500_prts',
    72: 'H8500_rtd',
    73: 'H8500_prtd',
    74: 'H8500_scb',
    75: 'H8500_trapa',
    76: 'H8500_trap_vs',
    77: 'H8500_rte',
    78: 'H8500_link',
    79: 'H8500_unlk',
    80: 'H8500_sleep',
    81: 'H8500_ldc',
    82: 'H8500_stc',
    83: 'H8500_andc',
    84: 'H8500_orc',
    85: 'H8500_xorc',
    86: 'H8500_nop',
    87: 'H8500_bpt',
    88: 'H8500_last',
}
H8500_null = 0
H8500_mov_g = 1
H8500_mov_e = 2
H8500_mov_i = 3
H8500_mov_f = 4
H8500_mov_l = 5
H8500_mov_s = 6
H8500_ldm = 7
H8500_stm = 8
H8500_xch = 9
H8500_swap = 10
H8500_movtpe = 11
H8500_movfpe = 12
H8500_add_g = 13
H8500_add_q = 14
H8500_sub = 15
H8500_adds = 16
H8500_subs = 17
H8500_addx = 18
H8500_subx = 19
H8500_dadd = 20
H8500_dsub = 21
H8500_mulxu = 22
H8500_divxu = 23
H8500_cmp_g = 24
H8500_cmp_e = 25
H8500_cmp_i = 26
H8500_exts = 27
H8500_extu = 28
H8500_tst = 29
H8500_neg = 30
H8500_clr = 31
H8500_tas = 32
H8500_and = 33
H8500_or = 34
H8500_xor = 35
H8500_not = 36
H8500_shal = 37
H8500_shar = 38
H8500_shll = 39
H8500_shlr = 40
H8500_rotl = 41
H8500_rotr = 42
H8500_rotxl = 43
H8500_rotxr = 44
H8500_bset = 45
H8500_bclr = 46
H8500_bnot = 47
H8500_btst = 48
H8500_bra = 49
H8500_brn = 50
H8500_bhi = 51
H8500_bls = 52
H8500_bcc = 53
H8500_bcs = 54
H8500_bne = 55
H8500_beq = 56
H8500_bvc = 57
H8500_bvs = 58
H8500_bpl = 59
H8500_bmi = 60
H8500_bge = 61
H8500_blt = 62
H8500_bgt = 63
H8500_ble = 64
H8500_jmp = 65
H8500_pjmp = 66
H8500_bsr = 67
H8500_jsr = 68
H8500_pjsr = 69
H8500_rts = 70
H8500_prts = 71
H8500_rtd = 72
H8500_prtd = 73
H8500_scb = 74
H8500_trapa = 75
H8500_trap_vs = 76
H8500_rte = 77
H8500_link = 78
H8500_unlk = 79
H8500_sleep = 80
H8500_ldc = 81
H8500_stc = 82
H8500_andc = 83
H8500_orc = 84
H8500_xorc = 85
H8500_nop = 86
H8500_bpt = 87
H8500_last = 88
_5290CBBFB2D2F51A8E6306549769C310 = ctypes.c_uint32 # enum

# values for enumeration '_E4383C1113FD321CF432D1650C4C916C'
_E4383C1113FD321CF432D1650C4C916C__enumvalues = {
    0: 'DSP56_null',
    1: 'DSP56_abs',
    2: 'DSP56_adc',
    3: 'DSP56_add',
    4: 'DSP56_addl',
    5: 'DSP56_addr',
    6: 'DSP56_and',
    7: 'DSP56_andi',
    8: 'DSP56_asl',
    9: 'DSP56_asl4',
    10: 'DSP56_asr',
    11: 'DSP56_asr4',
    12: 'DSP56_asr16',
    13: 'DSP56_bfchg',
    14: 'DSP56_bfclr',
    15: 'DSP56_bfset',
    16: 'DSP56_bftsth',
    17: 'DSP56_bftstl',
    18: 'DSP56_bcc',
    19: 'DSP56_bchg',
    20: 'DSP56_bclr',
    21: 'DSP56_bra',
    22: 'DSP56_brclr',
    23: 'DSP56_brkcc',
    24: 'DSP56_brset',
    25: 'DSP56_bscc',
    26: 'DSP56_bsclr',
    27: 'DSP56_bset',
    28: 'DSP56_bsr',
    29: 'DSP56_bsset',
    30: 'DSP56_btst',
    31: 'DSP56_chkaau',
    32: 'DSP56_clb',
    33: 'DSP56_clr',
    34: 'DSP56_clr24',
    35: 'DSP56_cmp',
    36: 'DSP56_cmpm',
    37: 'DSP56_cmpu',
    38: 'DSP56_debug',
    39: 'DSP56_debugcc',
    40: 'DSP56_dec',
    41: 'DSP56_dec24',
    42: 'DSP56_div',
    43: 'DSP56_dmac',
    44: 'DSP56_do',
    45: 'DSP56_do_f',
    46: 'DSP56_dor',
    47: 'DSP56_dor_f',
    48: 'DSP56_enddo',
    49: 'DSP56_eor',
    50: 'DSP56_extract',
    51: 'DSP56_extractu',
    52: 'DSP56_ext',
    53: 'DSP56_ill',
    54: 'DSP56_imac',
    55: 'DSP56_impy',
    56: 'DSP56_inc',
    57: 'DSP56_inc24',
    58: 'DSP56_insert',
    59: 'DSP56_jcc',
    60: 'DSP56_jclr',
    61: 'DSP56_jmp',
    62: 'DSP56_jscc',
    63: 'DSP56_jsclr',
    64: 'DSP56_jset',
    65: 'DSP56_jsr',
    66: 'DSP56_jsset',
    67: 'DSP56_lra',
    68: 'DSP56_lsl',
    69: 'DSP56_lsr',
    70: 'DSP56_lua',
    71: 'DSP56_lea',
    72: 'DSP56_mac',
    73: 'DSP56_maci',
    74: 'DSP56_mac_s_u',
    75: 'DSP56_macr',
    76: 'DSP56_macri',
    77: 'DSP56_max',
    78: 'DSP56_maxm',
    79: 'DSP56_merge',
    80: 'DSP56_move',
    81: 'DSP56_movec',
    82: 'DSP56_movei',
    83: 'DSP56_movem',
    84: 'DSP56_movep',
    85: 'DSP56_moves',
    86: 'DSP56_mpy',
    87: 'DSP56_mpyi',
    88: 'DSP56_mpy_s_u',
    89: 'DSP56_mpyr',
    90: 'DSP56_mpyri',
    91: 'DSP56_neg',
    92: 'DSP56_negc',
    93: 'DSP56_nop',
    94: 'DSP56_norm',
    95: 'DSP56_normf',
    96: 'DSP56_not',
    97: 'DSP56_or',
    98: 'DSP56_ori',
    99: 'DSP56_pflush',
    100: 'DSP56_pflushun',
    101: 'DSP56_pfree',
    102: 'DSP56_plock',
    103: 'DSP56_plockr',
    104: 'DSP56_punlock',
    105: 'DSP56_punlockr',
    106: 'DSP56_rep',
    107: 'DSP56_repcc',
    108: 'DSP56_reset',
    109: 'DSP56_rnd',
    110: 'DSP56_rol',
    111: 'DSP56_ror',
    112: 'DSP56_rti',
    113: 'DSP56_rts',
    114: 'DSP56_sbc',
    115: 'DSP56_stop',
    116: 'DSP56_sub',
    117: 'DSP56_subl',
    118: 'DSP56_subr',
    119: 'DSP56_swap',
    120: 'DSP56_tcc',
    121: 'DSP56_tfr',
    122: 'DSP56_tfr2',
    123: 'DSP56_tfr3',
    124: 'DSP56_trap',
    125: 'DSP56_trapcc',
    126: 'DSP56_tst',
    127: 'DSP56_tst2',
    128: 'DSP56_vsl',
    129: 'DSP56_wait',
    130: 'DSP56_zero',
    131: 'DSP56_swi',
    132: 'DSP56_pmov',
    133: 'DSP56_last',
}
DSP56_null = 0
DSP56_abs = 1
DSP56_adc = 2
DSP56_add = 3
DSP56_addl = 4
DSP56_addr = 5
DSP56_and = 6
DSP56_andi = 7
DSP56_asl = 8
DSP56_asl4 = 9
DSP56_asr = 10
DSP56_asr4 = 11
DSP56_asr16 = 12
DSP56_bfchg = 13
DSP56_bfclr = 14
DSP56_bfset = 15
DSP56_bftsth = 16
DSP56_bftstl = 17
DSP56_bcc = 18
DSP56_bchg = 19
DSP56_bclr = 20
DSP56_bra = 21
DSP56_brclr = 22
DSP56_brkcc = 23
DSP56_brset = 24
DSP56_bscc = 25
DSP56_bsclr = 26
DSP56_bset = 27
DSP56_bsr = 28
DSP56_bsset = 29
DSP56_btst = 30
DSP56_chkaau = 31
DSP56_clb = 32
DSP56_clr = 33
DSP56_clr24 = 34
DSP56_cmp = 35
DSP56_cmpm = 36
DSP56_cmpu = 37
DSP56_debug = 38
DSP56_debugcc = 39
DSP56_dec = 40
DSP56_dec24 = 41
DSP56_div = 42
DSP56_dmac = 43
DSP56_do = 44
DSP56_do_f = 45
DSP56_dor = 46
DSP56_dor_f = 47
DSP56_enddo = 48
DSP56_eor = 49
DSP56_extract = 50
DSP56_extractu = 51
DSP56_ext = 52
DSP56_ill = 53
DSP56_imac = 54
DSP56_impy = 55
DSP56_inc = 56
DSP56_inc24 = 57
DSP56_insert = 58
DSP56_jcc = 59
DSP56_jclr = 60
DSP56_jmp = 61
DSP56_jscc = 62
DSP56_jsclr = 63
DSP56_jset = 64
DSP56_jsr = 65
DSP56_jsset = 66
DSP56_lra = 67
DSP56_lsl = 68
DSP56_lsr = 69
DSP56_lua = 70
DSP56_lea = 71
DSP56_mac = 72
DSP56_maci = 73
DSP56_mac_s_u = 74
DSP56_macr = 75
DSP56_macri = 76
DSP56_max = 77
DSP56_maxm = 78
DSP56_merge = 79
DSP56_move = 80
DSP56_movec = 81
DSP56_movei = 82
DSP56_movem = 83
DSP56_movep = 84
DSP56_moves = 85
DSP56_mpy = 86
DSP56_mpyi = 87
DSP56_mpy_s_u = 88
DSP56_mpyr = 89
DSP56_mpyri = 90
DSP56_neg = 91
DSP56_negc = 92
DSP56_nop = 93
DSP56_norm = 94
DSP56_normf = 95
DSP56_not = 96
DSP56_or = 97
DSP56_ori = 98
DSP56_pflush = 99
DSP56_pflushun = 100
DSP56_pfree = 101
DSP56_plock = 102
DSP56_plockr = 103
DSP56_punlock = 104
DSP56_punlockr = 105
DSP56_rep = 106
DSP56_repcc = 107
DSP56_reset = 108
DSP56_rnd = 109
DSP56_rol = 110
DSP56_ror = 111
DSP56_rti = 112
DSP56_rts = 113
DSP56_sbc = 114
DSP56_stop = 115
DSP56_sub = 116
DSP56_subl = 117
DSP56_subr = 118
DSP56_swap = 119
DSP56_tcc = 120
DSP56_tfr = 121
DSP56_tfr2 = 122
DSP56_tfr3 = 123
DSP56_trap = 124
DSP56_trapcc = 125
DSP56_tst = 126
DSP56_tst2 = 127
DSP56_vsl = 128
DSP56_wait = 129
DSP56_zero = 130
DSP56_swi = 131
DSP56_pmov = 132
DSP56_last = 133
_E4383C1113FD321CF432D1650C4C916C = ctypes.c_uint32 # enum

# values for enumeration '_B5ECD8C1988DEF842E63B55FB8BE92FB'
_B5ECD8C1988DEF842E63B55FB8BE92FB__enumvalues = {
    0: 'DSP96_null',
    1: 'DSP96_abs',
    2: 'DSP96_add',
    3: 'DSP96_addc',
    4: 'DSP96_and',
    5: 'DSP96_andc',
    6: 'DSP96_andi',
    7: 'DSP96_asl',
    8: 'DSP96_asr',
    9: 'DSP96_bcc',
    10: 'DSP96_bccd',
    11: 'DSP96_bchg',
    12: 'DSP96_bclr',
    13: 'DSP96_bfind',
    14: 'DSP96_bra',
    15: 'DSP96_brclr',
    16: 'DSP96_brset',
    17: 'DSP96_bscc',
    18: 'DSP96_bsccd',
    19: 'DSP96_bsclr',
    20: 'DSP96_bset',
    21: 'DSP96_bsr',
    22: 'DSP96_bsrd',
    23: 'DSP96_bsset',
    24: 'DSP96_btst',
    25: 'DSP96_clr',
    26: 'DSP96_cmp',
    27: 'DSP96_cmpg',
    28: 'DSP96_debugcc',
    29: 'DSP96_dec',
    30: 'DSP96_do',
    31: 'DSP96_dor',
    32: 'DSP96_enddo',
    33: 'DSP96_eor',
    34: 'DSP96_ext',
    35: 'DSP96_extb',
    36: 'DSP96_fabs',
    37: 'DSP96_fadd',
    38: 'DSP96_faddsub',
    39: 'DSP96_fbcc',
    40: 'DSP96_fbccd',
    41: 'DSP96_fbscc',
    42: 'DSP96_fbsccd',
    43: 'DSP96_fclr',
    44: 'DSP96_fcmp',
    45: 'DSP96_fcmpg',
    46: 'DSP96_fcmpm',
    47: 'DSP96_fcopys',
    48: 'DSP96_fdebugcc',
    49: 'DSP96_fgetman',
    50: 'DSP96_fint',
    51: 'DSP96_fjcc',
    52: 'DSP96_fjccd',
    53: 'DSP96_fjscc',
    54: 'DSP96_fjsccd',
    55: 'DSP96_float',
    56: 'DSP96_floatu',
    57: 'DSP96_floor',
    58: 'DSP96_fmove',
    59: 'DSP96_fmpyfadd',
    60: 'DSP96_fmpyfaddsub',
    61: 'DSP96_fmpyfsub',
    62: 'DSP96_fmpy',
    63: 'DSP96_fneg',
    64: 'DSP96_fscale',
    65: 'DSP96_fseedd',
    66: 'DSP96_fseedr',
    67: 'DSP96_fsub',
    68: 'DSP96_ftfr',
    69: 'DSP96_ftrapcc',
    70: 'DSP96_ftst',
    71: 'DSP96_getexp',
    72: 'DSP96_illegal',
    73: 'DSP96_inc',
    74: 'DSP96_int',
    75: 'DSP96_intrz',
    76: 'DSP96_intu',
    77: 'DSP96_inturz',
    78: 'DSP96_jcc',
    79: 'DSP96_jccd',
    80: 'DSP96_jclr',
    81: 'DSP96_join',
    82: 'DSP96_joinb',
    83: 'DSP96_jscc',
    84: 'DSP96_jsccd',
    85: 'DSP96_jsclr',
    86: 'DSP96_jset',
    87: 'DSP96_jsset',
    88: 'DSP96_lea',
    89: 'DSP96_lra',
    90: 'DSP96_lsl',
    91: 'DSP96_lsr',
    92: 'DSP96_move',
    93: 'DSP96_movec',
    94: 'DSP96_movei',
    95: 'DSP96_movem',
    96: 'DSP96_movep',
    97: 'DSP96_moves',
    98: 'DSP96_moveta',
    99: 'DSP96_mpys',
    100: 'DSP96_mpyu',
    101: 'DSP96_neg',
    102: 'DSP96_negc',
    103: 'DSP96_nop',
    104: 'DSP96_not',
    105: 'DSP96_or',
    106: 'DSP96_orc',
    107: 'DSP96_ori',
    108: 'DSP96_rep',
    109: 'DSP96_reset',
    110: 'DSP96_rol',
    111: 'DSP96_ror',
    112: 'DSP96_rti',
    113: 'DSP96_rtr',
    114: 'DSP96_rts',
    115: 'DSP96_setw',
    116: 'DSP96_split',
    117: 'DSP96_splitb',
    118: 'DSP96_stop',
    119: 'DSP96_sub',
    120: 'DSP96_subc',
    121: 'DSP96_tfr',
    122: 'DSP96_trapcc',
    123: 'DSP96_tst',
    124: 'DSP96_wait',
    125: 'DSP96_last',
}
DSP96_null = 0
DSP96_abs = 1
DSP96_add = 2
DSP96_addc = 3
DSP96_and = 4
DSP96_andc = 5
DSP96_andi = 6
DSP96_asl = 7
DSP96_asr = 8
DSP96_bcc = 9
DSP96_bccd = 10
DSP96_bchg = 11
DSP96_bclr = 12
DSP96_bfind = 13
DSP96_bra = 14
DSP96_brclr = 15
DSP96_brset = 16
DSP96_bscc = 17
DSP96_bsccd = 18
DSP96_bsclr = 19
DSP96_bset = 20
DSP96_bsr = 21
DSP96_bsrd = 22
DSP96_bsset = 23
DSP96_btst = 24
DSP96_clr = 25
DSP96_cmp = 26
DSP96_cmpg = 27
DSP96_debugcc = 28
DSP96_dec = 29
DSP96_do = 30
DSP96_dor = 31
DSP96_enddo = 32
DSP96_eor = 33
DSP96_ext = 34
DSP96_extb = 35
DSP96_fabs = 36
DSP96_fadd = 37
DSP96_faddsub = 38
DSP96_fbcc = 39
DSP96_fbccd = 40
DSP96_fbscc = 41
DSP96_fbsccd = 42
DSP96_fclr = 43
DSP96_fcmp = 44
DSP96_fcmpg = 45
DSP96_fcmpm = 46
DSP96_fcopys = 47
DSP96_fdebugcc = 48
DSP96_fgetman = 49
DSP96_fint = 50
DSP96_fjcc = 51
DSP96_fjccd = 52
DSP96_fjscc = 53
DSP96_fjsccd = 54
DSP96_float = 55
DSP96_floatu = 56
DSP96_floor = 57
DSP96_fmove = 58
DSP96_fmpyfadd = 59
DSP96_fmpyfaddsub = 60
DSP96_fmpyfsub = 61
DSP96_fmpy = 62
DSP96_fneg = 63
DSP96_fscale = 64
DSP96_fseedd = 65
DSP96_fseedr = 66
DSP96_fsub = 67
DSP96_ftfr = 68
DSP96_ftrapcc = 69
DSP96_ftst = 70
DSP96_getexp = 71
DSP96_illegal = 72
DSP96_inc = 73
DSP96_int = 74
DSP96_intrz = 75
DSP96_intu = 76
DSP96_inturz = 77
DSP96_jcc = 78
DSP96_jccd = 79
DSP96_jclr = 80
DSP96_join = 81
DSP96_joinb = 82
DSP96_jscc = 83
DSP96_jsccd = 84
DSP96_jsclr = 85
DSP96_jset = 86
DSP96_jsset = 87
DSP96_lea = 88
DSP96_lra = 89
DSP96_lsl = 90
DSP96_lsr = 91
DSP96_move = 92
DSP96_movec = 93
DSP96_movei = 94
DSP96_movem = 95
DSP96_movep = 96
DSP96_moves = 97
DSP96_moveta = 98
DSP96_mpys = 99
DSP96_mpyu = 100
DSP96_neg = 101
DSP96_negc = 102
DSP96_nop = 103
DSP96_not = 104
DSP96_or = 105
DSP96_orc = 106
DSP96_ori = 107
DSP96_rep = 108
DSP96_reset = 109
DSP96_rol = 110
DSP96_ror = 111
DSP96_rti = 112
DSP96_rtr = 113
DSP96_rts = 114
DSP96_setw = 115
DSP96_split = 116
DSP96_splitb = 117
DSP96_stop = 118
DSP96_sub = 119
DSP96_subc = 120
DSP96_tfr = 121
DSP96_trapcc = 122
DSP96_tst = 123
DSP96_wait = 124
DSP96_last = 125
_B5ECD8C1988DEF842E63B55FB8BE92FB = ctypes.c_uint32 # enum

# values for enumeration 'PMNum'
PMNum__enumvalues = {
    0: 'PM96_NoMove',
    1: 'PM96_R2R',
    2: 'PM96_Update',
    3: 'PM96_XYMem',
    4: 'PM96_XYmemR',
    5: 'PM96_Long',
    6: 'PM96_XY',
    7: 'PM96_IFcc',
}
PM96_NoMove = 0
PM96_R2R = 1
PM96_Update = 2
PM96_XYMem = 3
PM96_XYmemR = 4
PM96_Long = 5
PM96_XY = 6
PM96_IFcc = 7
PMNum = ctypes.c_uint32 # enum

# values for enumeration '_1038787612D6366BC2D035975A173DB8'
_1038787612D6366BC2D035975A173DB8__enumvalues = {
    0: 'C166_null',
    1: 'C166_add',
    2: 'C166_addb',
    3: 'C166_addc',
    4: 'C166_addcb',
    5: 'C166_and',
    6: 'C166_andb',
    7: 'C166_ashr',
    8: 'C166_atomic',
    9: 'C166_band',
    10: 'C166_bclr',
    11: 'C166_bcmp',
    12: 'C166_bfldh',
    13: 'C166_bfldl',
    14: 'C166_bmov',
    15: 'C166_bmovn',
    16: 'C166_bor',
    17: 'C166_bset',
    18: 'C166_bxor',
    19: 'C166_calla',
    20: 'C166_calli',
    21: 'C166_callr',
    22: 'C166_calls',
    23: 'C166_cmp',
    24: 'C166_cmpb',
    25: 'C166_cmpd1',
    26: 'C166_cmpd2',
    27: 'C166_cmpi1',
    28: 'C166_cmpi2',
    29: 'C166_cpl',
    30: 'C166_cplb',
    31: 'C166_diswdt',
    32: 'C166_div',
    33: 'C166_divl',
    34: 'C166_divlu',
    35: 'C166_divu',
    36: 'C166_einit',
    37: 'C166_extr',
    38: 'C166_extp',
    39: 'C166_extpr',
    40: 'C166_exts',
    41: 'C166_extsr',
    42: 'C166_idle',
    43: 'C166_jb',
    44: 'C166_jbc',
    45: 'C166_jmpa',
    46: 'C166_jmpi',
    47: 'C166_jmpr',
    48: 'C166_jmps',
    49: 'C166_jnb',
    50: 'C166_jnbs',
    51: 'C166_mov',
    52: 'C166_movb',
    53: 'C166_movbs',
    54: 'C166_movbz',
    55: 'C166_mul',
    56: 'C166_mulu',
    57: 'C166_neg',
    58: 'C166_negb',
    59: 'C166_nop',
    60: 'C166_or',
    61: 'C166_orb',
    62: 'C166_pcall',
    63: 'C166_pop',
    64: 'C166_prior',
    65: 'C166_push',
    66: 'C166_pwrdn',
    67: 'C166_ret',
    68: 'C166_reti',
    69: 'C166_retp',
    70: 'C166_rets',
    71: 'C166_rol',
    72: 'C166_ror',
    73: 'C166_scxt',
    74: 'C166_shl',
    75: 'C166_shr',
    76: 'C166_srst',
    77: 'C166_srvwdt',
    78: 'C166_sub',
    79: 'C166_subb',
    80: 'C166_subc',
    81: 'C166_subcb',
    82: 'C166_trap',
    83: 'C166_xor',
    84: 'C166_xorb',
    85: 'ST10_CoABS',
    86: 'ST10_CoADD',
    87: 'ST10_CoASHR',
    88: 'ST10_CoCMP',
    89: 'ST10_CoLOAD',
    90: 'ST10_CoMAC',
    91: 'ST10_CoMACM',
    92: 'ST10_CoMAX',
    93: 'ST10_CoMIN',
    94: 'ST10_CoMOV',
    95: 'ST10_CoMUL',
    96: 'ST10_CoNEG',
    97: 'ST10_CoNOP',
    98: 'ST10_CoRND',
    99: 'ST10_CoSHL',
    100: 'ST10_CoSHR',
    101: 'ST10_CoSTORE',
    102: 'ST10_CoSUB',
    103: 'C166_enwdt',
    104: 'C166_sbrk',
    105: 'C166_last',
}
C166_null = 0
C166_add = 1
C166_addb = 2
C166_addc = 3
C166_addcb = 4
C166_and = 5
C166_andb = 6
C166_ashr = 7
C166_atomic = 8
C166_band = 9
C166_bclr = 10
C166_bcmp = 11
C166_bfldh = 12
C166_bfldl = 13
C166_bmov = 14
C166_bmovn = 15
C166_bor = 16
C166_bset = 17
C166_bxor = 18
C166_calla = 19
C166_calli = 20
C166_callr = 21
C166_calls = 22
C166_cmp = 23
C166_cmpb = 24
C166_cmpd1 = 25
C166_cmpd2 = 26
C166_cmpi1 = 27
C166_cmpi2 = 28
C166_cpl = 29
C166_cplb = 30
C166_diswdt = 31
C166_div = 32
C166_divl = 33
C166_divlu = 34
C166_divu = 35
C166_einit = 36
C166_extr = 37
C166_extp = 38
C166_extpr = 39
C166_exts = 40
C166_extsr = 41
C166_idle = 42
C166_jb = 43
C166_jbc = 44
C166_jmpa = 45
C166_jmpi = 46
C166_jmpr = 47
C166_jmps = 48
C166_jnb = 49
C166_jnbs = 50
C166_mov = 51
C166_movb = 52
C166_movbs = 53
C166_movbz = 54
C166_mul = 55
C166_mulu = 56
C166_neg = 57
C166_negb = 58
C166_nop = 59
C166_or = 60
C166_orb = 61
C166_pcall = 62
C166_pop = 63
C166_prior = 64
C166_push = 65
C166_pwrdn = 66
C166_ret = 67
C166_reti = 68
C166_retp = 69
C166_rets = 70
C166_rol = 71
C166_ror = 72
C166_scxt = 73
C166_shl = 74
C166_shr = 75
C166_srst = 76
C166_srvwdt = 77
C166_sub = 78
C166_subb = 79
C166_subc = 80
C166_subcb = 81
C166_trap = 82
C166_xor = 83
C166_xorb = 84
ST10_CoABS = 85
ST10_CoADD = 86
ST10_CoASHR = 87
ST10_CoCMP = 88
ST10_CoLOAD = 89
ST10_CoMAC = 90
ST10_CoMACM = 91
ST10_CoMAX = 92
ST10_CoMIN = 93
ST10_CoMOV = 94
ST10_CoMUL = 95
ST10_CoNEG = 96
ST10_CoNOP = 97
ST10_CoRND = 98
ST10_CoSHL = 99
ST10_CoSHR = 100
ST10_CoSTORE = 101
ST10_CoSUB = 102
C166_enwdt = 103
C166_sbrk = 104
C166_last = 105
_1038787612D6366BC2D035975A173DB8 = ctypes.c_uint32 # enum

# values for enumeration '_5021FBEADDAE60134152517C8896D9FD'
_5021FBEADDAE60134152517C8896D9FD__enumvalues = {
    0: 'ST20_null',
    1: 'ST20_adc',
    2: 'ST20_add',
    3: 'ST20_addc',
    4: 'ST20_ajw',
    5: 'ST20_and',
    6: 'ST20_arot',
    7: 'ST20_ashr',
    8: 'ST20_biquad',
    9: 'ST20_bitld',
    10: 'ST20_bitmask',
    11: 'ST20_bitst',
    12: 'ST20_breakpoint',
    13: 'ST20_cj',
    14: 'ST20_dequeue',
    15: 'ST20_divstep',
    16: 'ST20_dup',
    17: 'ST20_ecall',
    18: 'ST20_enqueue',
    19: 'ST20_eqc',
    20: 'ST20_eret',
    21: 'ST20_fcall',
    22: 'ST20_gajw',
    23: 'ST20_gt',
    24: 'ST20_gtu',
    25: 'ST20_io',
    26: 'ST20_j',
    27: 'ST20_jab',
    28: 'ST20_lbinc',
    29: 'ST20_ldc',
    30: 'ST20_ldl',
    31: 'ST20_ldlp',
    32: 'ST20_ldnl',
    33: 'ST20_ldnlp',
    34: 'ST20_ldpi',
    35: 'ST20_ldprodid',
    36: 'ST20_ldtdesc',
    37: 'ST20_lsinc',
    38: 'ST20_lsxinc',
    39: 'ST20_lwinc',
    40: 'ST20_mac',
    41: 'ST20_mul',
    42: 'ST20_nfix',
    43: 'ST20_nop',
    44: 'ST20_not',
    45: 'ST20_opr',
    46: 'ST20_or',
    47: 'ST20_order',
    48: 'ST20_orderu',
    49: 'ST20_pfix',
    50: 'ST20_rev',
    51: 'ST20_rmw',
    52: 'ST20_rot',
    53: 'ST20_run',
    54: 'ST20_saturate',
    55: 'ST20_sbinc',
    56: 'ST20_shl',
    57: 'ST20_shr',
    58: 'ST20_signal',
    59: 'ST20_smacinit',
    60: 'ST20_smacloop',
    61: 'ST20_smul',
    62: 'ST20_ssinc',
    63: 'ST20_statusclr',
    64: 'ST20_statusset',
    65: 'ST20_statustst',
    66: 'ST20_stl',
    67: 'ST20_stnl',
    68: 'ST20_stop',
    69: 'ST20_sub',
    70: 'ST20_subc',
    71: 'ST20_swap32',
    72: 'ST20_swinc',
    73: 'ST20_timeslice',
    74: 'ST20_umac',
    75: 'ST20_unsign',
    76: 'ST20_wait',
    77: 'ST20_wsub',
    78: 'ST20_xbword',
    79: 'ST20_xor',
    80: 'ST20_xsword',
    81: 'ST20_alt',
    82: 'ST20_altend',
    83: 'ST20_altwt',
    84: 'ST20_bcnt',
    85: 'ST20_bitcnt',
    86: 'ST20_bitrevnbits',
    87: 'ST20_bitrevword',
    88: 'ST20_bsub',
    89: 'ST20_call',
    90: 'ST20_causeerror',
    91: 'ST20_cb',
    92: 'ST20_cbu',
    93: 'ST20_ccnt1',
    94: 'ST20_cflerr',
    95: 'ST20_cir',
    96: 'ST20_ciru',
    97: 'ST20_clockdis',
    98: 'ST20_clockenb',
    99: 'ST20_clrhalterr',
    100: 'ST20_crcbyte',
    101: 'ST20_crcword',
    102: 'ST20_cs',
    103: 'ST20_csngl',
    104: 'ST20_csu',
    105: 'ST20_csub0',
    106: 'ST20_cword',
    107: 'ST20_devlb',
    108: 'ST20_devls',
    109: 'ST20_devlw',
    110: 'ST20_devmove',
    111: 'ST20_devsb',
    112: 'ST20_devss',
    113: 'ST20_devsw',
    114: 'ST20_diff',
    115: 'ST20_disc',
    116: 'ST20_diss',
    117: 'ST20_dist',
    118: 'ST20_div',
    119: 'ST20_enbc',
    120: 'ST20_enbs',
    121: 'ST20_enbt',
    122: 'ST20_endp',
    123: 'ST20_fmul',
    124: 'ST20_fptesterr',
    125: 'ST20_gcall',
    126: 'ST20_gintdis',
    127: 'ST20_gintenb',
    128: 'ST20_in',
    129: 'ST20_insertqueue',
    130: 'ST20_intdis',
    131: 'ST20_intenb',
    132: 'ST20_iret',
    133: 'ST20_ladd',
    134: 'ST20_lb',
    135: 'ST20_lbx',
    136: 'ST20_ldclock',
    137: 'ST20_lddevid',
    138: 'ST20_ldiff',
    139: 'ST20_ldinf',
    140: 'ST20_ldiv',
    141: 'ST20_ldmemstartval',
    142: 'ST20_ldpri',
    143: 'ST20_ldshadow',
    144: 'ST20_ldtimer',
    145: 'ST20_ldtraph',
    146: 'ST20_ldtrapped',
    147: 'ST20_lend',
    148: 'ST20_lmul',
    149: 'ST20_ls',
    150: 'ST20_lshl',
    151: 'ST20_lshr',
    152: 'ST20_lsub',
    153: 'ST20_lsum',
    154: 'ST20_lsx',
    155: 'ST20_mint',
    156: 'ST20_move',
    157: 'ST20_move2dall',
    158: 'ST20_move2dinit',
    159: 'ST20_move2dnonzero',
    160: 'ST20_move2dzero',
    161: 'ST20_norm',
    162: 'ST20_out',
    163: 'ST20_outbyte',
    164: 'ST20_outword',
    165: 'ST20_pop',
    166: 'ST20_postnormsn',
    167: 'ST20_prod',
    168: 'ST20_reboot',
    169: 'ST20_rem',
    170: 'ST20_resetch',
    171: 'ST20_restart',
    172: 'ST20_ret',
    173: 'ST20_roundsn',
    174: 'ST20_runp',
    175: 'ST20_satadd',
    176: 'ST20_satmul',
    177: 'ST20_satsub',
    178: 'ST20_saveh',
    179: 'ST20_savel',
    180: 'ST20_sb',
    181: 'ST20_seterr',
    182: 'ST20_sethalterr',
    183: 'ST20_settimeslice',
    184: 'ST20_slmul',
    185: 'ST20_ss',
    186: 'ST20_ssub',
    187: 'ST20_startp',
    188: 'ST20_stclock',
    189: 'ST20_sthb',
    190: 'ST20_sthf',
    191: 'ST20_stlb',
    192: 'ST20_stlf',
    193: 'ST20_stoperr',
    194: 'ST20_stopp',
    195: 'ST20_stshadow',
    196: 'ST20_sttimer',
    197: 'ST20_sttraph',
    198: 'ST20_sttrapped',
    199: 'ST20_sulmul',
    200: 'ST20_sum',
    201: 'ST20_swapqueue',
    202: 'ST20_swaptimer',
    203: 'ST20_talt',
    204: 'ST20_taltwt',
    205: 'ST20_testerr',
    206: 'ST20_testhalterr',
    207: 'ST20_testpranal',
    208: 'ST20_tin',
    209: 'ST20_trapdis',
    210: 'ST20_trapenb',
    211: 'ST20_tret',
    212: 'ST20_unpacksn',
    213: 'ST20_wcnt',
    214: 'ST20_wsubdb',
    215: 'ST20_xdble',
    216: 'ST20_xword',
    217: 'ST20_last',
}
ST20_null = 0
ST20_adc = 1
ST20_add = 2
ST20_addc = 3
ST20_ajw = 4
ST20_and = 5
ST20_arot = 6
ST20_ashr = 7
ST20_biquad = 8
ST20_bitld = 9
ST20_bitmask = 10
ST20_bitst = 11
ST20_breakpoint = 12
ST20_cj = 13
ST20_dequeue = 14
ST20_divstep = 15
ST20_dup = 16
ST20_ecall = 17
ST20_enqueue = 18
ST20_eqc = 19
ST20_eret = 20
ST20_fcall = 21
ST20_gajw = 22
ST20_gt = 23
ST20_gtu = 24
ST20_io = 25
ST20_j = 26
ST20_jab = 27
ST20_lbinc = 28
ST20_ldc = 29
ST20_ldl = 30
ST20_ldlp = 31
ST20_ldnl = 32
ST20_ldnlp = 33
ST20_ldpi = 34
ST20_ldprodid = 35
ST20_ldtdesc = 36
ST20_lsinc = 37
ST20_lsxinc = 38
ST20_lwinc = 39
ST20_mac = 40
ST20_mul = 41
ST20_nfix = 42
ST20_nop = 43
ST20_not = 44
ST20_opr = 45
ST20_or = 46
ST20_order = 47
ST20_orderu = 48
ST20_pfix = 49
ST20_rev = 50
ST20_rmw = 51
ST20_rot = 52
ST20_run = 53
ST20_saturate = 54
ST20_sbinc = 55
ST20_shl = 56
ST20_shr = 57
ST20_signal = 58
ST20_smacinit = 59
ST20_smacloop = 60
ST20_smul = 61
ST20_ssinc = 62
ST20_statusclr = 63
ST20_statusset = 64
ST20_statustst = 65
ST20_stl = 66
ST20_stnl = 67
ST20_stop = 68
ST20_sub = 69
ST20_subc = 70
ST20_swap32 = 71
ST20_swinc = 72
ST20_timeslice = 73
ST20_umac = 74
ST20_unsign = 75
ST20_wait = 76
ST20_wsub = 77
ST20_xbword = 78
ST20_xor = 79
ST20_xsword = 80
ST20_alt = 81
ST20_altend = 82
ST20_altwt = 83
ST20_bcnt = 84
ST20_bitcnt = 85
ST20_bitrevnbits = 86
ST20_bitrevword = 87
ST20_bsub = 88
ST20_call = 89
ST20_causeerror = 90
ST20_cb = 91
ST20_cbu = 92
ST20_ccnt1 = 93
ST20_cflerr = 94
ST20_cir = 95
ST20_ciru = 96
ST20_clockdis = 97
ST20_clockenb = 98
ST20_clrhalterr = 99
ST20_crcbyte = 100
ST20_crcword = 101
ST20_cs = 102
ST20_csngl = 103
ST20_csu = 104
ST20_csub0 = 105
ST20_cword = 106
ST20_devlb = 107
ST20_devls = 108
ST20_devlw = 109
ST20_devmove = 110
ST20_devsb = 111
ST20_devss = 112
ST20_devsw = 113
ST20_diff = 114
ST20_disc = 115
ST20_diss = 116
ST20_dist = 117
ST20_div = 118
ST20_enbc = 119
ST20_enbs = 120
ST20_enbt = 121
ST20_endp = 122
ST20_fmul = 123
ST20_fptesterr = 124
ST20_gcall = 125
ST20_gintdis = 126
ST20_gintenb = 127
ST20_in = 128
ST20_insertqueue = 129
ST20_intdis = 130
ST20_intenb = 131
ST20_iret = 132
ST20_ladd = 133
ST20_lb = 134
ST20_lbx = 135
ST20_ldclock = 136
ST20_lddevid = 137
ST20_ldiff = 138
ST20_ldinf = 139
ST20_ldiv = 140
ST20_ldmemstartval = 141
ST20_ldpri = 142
ST20_ldshadow = 143
ST20_ldtimer = 144
ST20_ldtraph = 145
ST20_ldtrapped = 146
ST20_lend = 147
ST20_lmul = 148
ST20_ls = 149
ST20_lshl = 150
ST20_lshr = 151
ST20_lsub = 152
ST20_lsum = 153
ST20_lsx = 154
ST20_mint = 155
ST20_move = 156
ST20_move2dall = 157
ST20_move2dinit = 158
ST20_move2dnonzero = 159
ST20_move2dzero = 160
ST20_norm = 161
ST20_out = 162
ST20_outbyte = 163
ST20_outword = 164
ST20_pop = 165
ST20_postnormsn = 166
ST20_prod = 167
ST20_reboot = 168
ST20_rem = 169
ST20_resetch = 170
ST20_restart = 171
ST20_ret = 172
ST20_roundsn = 173
ST20_runp = 174
ST20_satadd = 175
ST20_satmul = 176
ST20_satsub = 177
ST20_saveh = 178
ST20_savel = 179
ST20_sb = 180
ST20_seterr = 181
ST20_sethalterr = 182
ST20_settimeslice = 183
ST20_slmul = 184
ST20_ss = 185
ST20_ssub = 186
ST20_startp = 187
ST20_stclock = 188
ST20_sthb = 189
ST20_sthf = 190
ST20_stlb = 191
ST20_stlf = 192
ST20_stoperr = 193
ST20_stopp = 194
ST20_stshadow = 195
ST20_sttimer = 196
ST20_sttraph = 197
ST20_sttrapped = 198
ST20_sulmul = 199
ST20_sum = 200
ST20_swapqueue = 201
ST20_swaptimer = 202
ST20_talt = 203
ST20_taltwt = 204
ST20_testerr = 205
ST20_testhalterr = 206
ST20_testpranal = 207
ST20_tin = 208
ST20_trapdis = 209
ST20_trapenb = 210
ST20_tret = 211
ST20_unpacksn = 212
ST20_wcnt = 213
ST20_wsubdb = 214
ST20_xdble = 215
ST20_xword = 216
ST20_last = 217
_5021FBEADDAE60134152517C8896D9FD = ctypes.c_uint32 # enum

# values for enumeration '_FB4308188CC61379A47AE39CE7E9E56B'
_FB4308188CC61379A47AE39CE7E9E56B__enumvalues = {
    0: 'ST7_null',
    1: 'ST7_adc',
    2: 'ST7_add',
    3: 'ST7_and',
    4: 'ST7_bcp',
    5: 'ST7_bres',
    6: 'ST7_bset',
    7: 'ST7_btjf',
    8: 'ST7_btjt',
    9: 'ST7_call',
    10: 'ST7_callr',
    11: 'ST7_clr',
    12: 'ST7_cp',
    13: 'ST7_cpl',
    14: 'ST7_dec',
    15: 'ST7_halt',
    16: 'ST7_iret',
    17: 'ST7_inc',
    18: 'ST7_jp',
    19: 'ST7_jra',
    20: 'ST7_jrt',
    21: 'ST7_jrf',
    22: 'ST7_jrih',
    23: 'ST7_jril',
    24: 'ST7_jrh',
    25: 'ST7_jrnh',
    26: 'ST7_jrm',
    27: 'ST7_jrnm',
    28: 'ST7_jrmi',
    29: 'ST7_jrpl',
    30: 'ST7_jreq',
    31: 'ST7_jrne',
    32: 'ST7_jrc',
    33: 'ST7_jrnc',
    34: 'ST7_jrult',
    35: 'ST7_jruge',
    36: 'ST7_jrugt',
    37: 'ST7_jrule',
    38: 'ST7_ld',
    39: 'ST7_mul',
    40: 'ST7_neg',
    41: 'ST7_nop',
    42: 'ST7_or',
    43: 'ST7_pop',
    44: 'ST7_push',
    45: 'ST7_rcf',
    46: 'ST7_ret',
    47: 'ST7_rim',
    48: 'ST7_rlc',
    49: 'ST7_rrc',
    50: 'ST7_rsp',
    51: 'ST7_sbc',
    52: 'ST7_scf',
    53: 'ST7_sim',
    54: 'ST7_sla',
    55: 'ST7_sll',
    56: 'ST7_srl',
    57: 'ST7_sra',
    58: 'ST7_sub',
    59: 'ST7_swap',
    60: 'ST7_tnz',
    61: 'ST7_trap',
    62: 'ST7_wfi',
    63: 'ST7_xor',
    64: 'ST7_last',
}
ST7_null = 0
ST7_adc = 1
ST7_add = 2
ST7_and = 3
ST7_bcp = 4
ST7_bres = 5
ST7_bset = 6
ST7_btjf = 7
ST7_btjt = 8
ST7_call = 9
ST7_callr = 10
ST7_clr = 11
ST7_cp = 12
ST7_cpl = 13
ST7_dec = 14
ST7_halt = 15
ST7_iret = 16
ST7_inc = 17
ST7_jp = 18
ST7_jra = 19
ST7_jrt = 20
ST7_jrf = 21
ST7_jrih = 22
ST7_jril = 23
ST7_jrh = 24
ST7_jrnh = 25
ST7_jrm = 26
ST7_jrnm = 27
ST7_jrmi = 28
ST7_jrpl = 29
ST7_jreq = 30
ST7_jrne = 31
ST7_jrc = 32
ST7_jrnc = 33
ST7_jrult = 34
ST7_jruge = 35
ST7_jrugt = 36
ST7_jrule = 37
ST7_ld = 38
ST7_mul = 39
ST7_neg = 40
ST7_nop = 41
ST7_or = 42
ST7_pop = 43
ST7_push = 44
ST7_rcf = 45
ST7_ret = 46
ST7_rim = 47
ST7_rlc = 48
ST7_rrc = 49
ST7_rsp = 50
ST7_sbc = 51
ST7_scf = 52
ST7_sim = 53
ST7_sla = 54
ST7_sll = 55
ST7_srl = 56
ST7_sra = 57
ST7_sub = 58
ST7_swap = 59
ST7_tnz = 60
ST7_trap = 61
ST7_wfi = 62
ST7_xor = 63
ST7_last = 64
_FB4308188CC61379A47AE39CE7E9E56B = ctypes.c_uint32 # enum

# values for enumeration '_7D923C96B6ADB4017E6ABB607A3ACE94'
_7D923C96B6ADB4017E6ABB607A3ACE94__enumvalues = {
    0: 'IA64_null',
    1: 'IA64_0',
    2: 'IA64_1',
    3: 'IA64_a',
    4: 'IA64_acq',
    5: 'IA64_add',
    6: 'IA64_addl',
    7: 'IA64_addp4',
    8: 'IA64_adds',
    9: 'IA64_alloc',
    10: 'IA64_and',
    11: 'IA64_andcm',
    12: 'IA64_b',
    13: 'IA64_bias',
    14: 'IA64_br',
    15: 'IA64_break',
    16: 'IA64_brl',
    17: 'IA64_brp',
    18: 'IA64_bsw',
    19: 'IA64_c',
    20: 'IA64_call',
    21: 'IA64_cexit',
    22: 'IA64_chk',
    23: 'IA64_cloop',
    24: 'IA64_clr',
    25: 'IA64_clrrrb',
    26: 'IA64_cmp',
    27: 'IA64_cmp4',
    28: 'IA64_cmpxchg1',
    29: 'IA64_cmpxchg2',
    30: 'IA64_cmpxchg4',
    31: 'IA64_cmpxchg8',
    32: 'IA64_cond',
    33: 'IA64_cover',
    34: 'IA64_ctop',
    35: 'IA64_czx1',
    36: 'IA64_czx2',
    37: 'IA64_d',
    38: 'IA64_dep',
    39: 'IA64_dpnt',
    40: 'IA64_dptk',
    41: 'IA64_e',
    42: 'IA64_epc',
    43: 'IA64_eq',
    44: 'IA64_excl',
    45: 'IA64_exit',
    46: 'IA64_exp',
    47: 'IA64_extr',
    48: 'IA64_f',
    49: 'IA64_fabs',
    50: 'IA64_fadd',
    51: 'IA64_famax',
    52: 'IA64_famin',
    53: 'IA64_fand',
    54: 'IA64_fandcm',
    55: 'IA64_fault',
    56: 'IA64_fc',
    57: 'IA64_fchkf',
    58: 'IA64_fclass',
    59: 'IA64_fclrf',
    60: 'IA64_fcmp',
    61: 'IA64_fcvt',
    62: 'IA64_fetchadd4',
    63: 'IA64_fetchadd8',
    64: 'IA64_few',
    65: 'IA64_fill',
    66: 'IA64_flushrs',
    67: 'IA64_fma',
    68: 'IA64_fmax',
    69: 'IA64_fmerge',
    70: 'IA64_fmin',
    71: 'IA64_fmix',
    72: 'IA64_fmpy',
    73: 'IA64_fms',
    74: 'IA64_fneg',
    75: 'IA64_fnegabs',
    76: 'IA64_fnma',
    77: 'IA64_fnmpy',
    78: 'IA64_fnorm',
    79: 'IA64_for',
    80: 'IA64_fpabs',
    81: 'IA64_fpack',
    82: 'IA64_fpamax',
    83: 'IA64_fpamin',
    84: 'IA64_fpcmp',
    85: 'IA64_fpcvt',
    86: 'IA64_fpma',
    87: 'IA64_fpmax',
    88: 'IA64_fpmerge',
    89: 'IA64_fpmin',
    90: 'IA64_fpmpy',
    91: 'IA64_fpms',
    92: 'IA64_fpneg',
    93: 'IA64_fpnegabs',
    94: 'IA64_fpnma',
    95: 'IA64_fpnmpy',
    96: 'IA64_fprcpa',
    97: 'IA64_fprsqrta',
    98: 'IA64_frcpa',
    99: 'IA64_frsqrta',
    100: 'IA64_fselect',
    101: 'IA64_fsetc',
    102: 'IA64_fsub',
    103: 'IA64_fswap',
    104: 'IA64_fsxt',
    105: 'IA64_fwb',
    106: 'IA64_fx',
    107: 'IA64_fxor',
    108: 'IA64_fxu',
    109: 'IA64_g',
    110: 'IA64_ga',
    111: 'IA64_ge',
    112: 'IA64_getf',
    113: 'IA64_geu',
    114: 'IA64_gt',
    115: 'IA64_gtu',
    116: 'IA64_h',
    117: 'IA64_hu',
    118: 'IA64_i',
    119: 'IA64_ia',
    120: 'IA64_imp',
    121: 'IA64_invala',
    122: 'IA64_itc',
    123: 'IA64_itr',
    124: 'IA64_l',
    125: 'IA64_ld1',
    126: 'IA64_ld2',
    127: 'IA64_ld4',
    128: 'IA64_ld8',
    129: 'IA64_ldf',
    130: 'IA64_ldf8',
    131: 'IA64_ldfd',
    132: 'IA64_ldfe',
    133: 'IA64_ldfp8',
    134: 'IA64_ldfpd',
    135: 'IA64_ldfps',
    136: 'IA64_ldfs',
    137: 'IA64_le',
    138: 'IA64_leu',
    139: 'IA64_lfetch',
    140: 'IA64_loadrs',
    141: 'IA64_loop',
    142: 'IA64_lr',
    143: 'IA64_lt',
    144: 'IA64_ltu',
    145: 'IA64_lu',
    146: 'IA64_m',
    147: 'IA64_many',
    148: 'IA64_mf',
    149: 'IA64_mix1',
    150: 'IA64_mix2',
    151: 'IA64_mix4',
    152: 'IA64_mov',
    153: 'IA64_movl',
    154: 'IA64_mux1',
    155: 'IA64_mux2',
    156: 'IA64_nc',
    157: 'IA64_ne',
    158: 'IA64_neq',
    159: 'IA64_nge',
    160: 'IA64_ngt',
    161: 'IA64_nl',
    162: 'IA64_nle',
    163: 'IA64_nlt',
    164: 'IA64_nm',
    165: 'IA64_nop',
    166: 'IA64_nr',
    167: 'IA64_ns',
    168: 'IA64_nt1',
    169: 'IA64_nt2',
    170: 'IA64_nta',
    171: 'IA64_nz',
    172: 'IA64_or',
    173: 'IA64_orcm',
    174: 'IA64_ord',
    175: 'IA64_pack2',
    176: 'IA64_pack4',
    177: 'IA64_padd1',
    178: 'IA64_padd2',
    179: 'IA64_padd4',
    180: 'IA64_pavg1',
    181: 'IA64_pavg2',
    182: 'IA64_pavgsub1',
    183: 'IA64_pavgsub2',
    184: 'IA64_pcmp1',
    185: 'IA64_pcmp2',
    186: 'IA64_pcmp4',
    187: 'IA64_pmax1',
    188: 'IA64_pmax2',
    189: 'IA64_pmin1',
    190: 'IA64_pmin2',
    191: 'IA64_pmpy2',
    192: 'IA64_pmpyshr2',
    193: 'IA64_popcnt',
    194: 'IA64_pr',
    195: 'IA64_probe',
    196: 'IA64_psad1',
    197: 'IA64_pshl2',
    198: 'IA64_pshl4',
    199: 'IA64_pshladd2',
    200: 'IA64_pshr2',
    201: 'IA64_pshr4',
    202: 'IA64_pshradd2',
    203: 'IA64_psub1',
    204: 'IA64_psub2',
    205: 'IA64_psub4',
    206: 'IA64_ptc',
    207: 'IA64_ptr',
    208: 'IA64_r',
    209: 'IA64_raz',
    210: 'IA64_rel',
    211: 'IA64_ret',
    212: 'IA64_rfi',
    213: 'IA64_rsm',
    214: 'IA64_rum',
    215: 'IA64_rw',
    216: 'IA64_s',
    217: 'IA64_s0',
    218: 'IA64_s1',
    219: 'IA64_s2',
    220: 'IA64_s3',
    221: 'IA64_sa',
    222: 'IA64_se',
    223: 'IA64_setf',
    224: 'IA64_shl',
    225: 'IA64_shladd',
    226: 'IA64_shladdp4',
    227: 'IA64_shr',
    228: 'IA64_shrp',
    229: 'IA64_sig',
    230: 'IA64_spill',
    231: 'IA64_spnt',
    232: 'IA64_sptk',
    233: 'IA64_srlz',
    234: 'IA64_ssm',
    235: 'IA64_sss',
    236: 'IA64_st1',
    237: 'IA64_st2',
    238: 'IA64_st4',
    239: 'IA64_st8',
    240: 'IA64_stf',
    241: 'IA64_stf8',
    242: 'IA64_stfd',
    243: 'IA64_stfe',
    244: 'IA64_stfs',
    245: 'IA64_sub',
    246: 'IA64_sum',
    247: 'IA64_sxt1',
    248: 'IA64_sxt2',
    249: 'IA64_sxt4',
    250: 'IA64_sync',
    251: 'IA64_tak',
    252: 'IA64_tbit',
    253: 'IA64_thash',
    254: 'IA64_tnat',
    255: 'IA64_tpa',
    256: 'IA64_trunc',
    257: 'IA64_ttag',
    258: 'IA64_u',
    259: 'IA64_unc',
    260: 'IA64_unord',
    261: 'IA64_unpack1',
    262: 'IA64_unpack2',
    263: 'IA64_unpack4',
    264: 'IA64_uss',
    265: 'IA64_uus',
    266: 'IA64_uuu',
    267: 'IA64_w',
    268: 'IA64_wexit',
    269: 'IA64_wtop',
    270: 'IA64_x',
    271: 'IA64_xchg1',
    272: 'IA64_xchg2',
    273: 'IA64_xchg4',
    274: 'IA64_xchg8',
    275: 'IA64_xf',
    276: 'IA64_xma',
    277: 'IA64_xmpy',
    278: 'IA64_xor',
    279: 'IA64_xuf',
    280: 'IA64_z',
    281: 'IA64_zxt1',
    282: 'IA64_zxt2',
    283: 'IA64_zxt4',
    284: 'IA64_last',
}
IA64_null = 0
IA64_0 = 1
IA64_1 = 2
IA64_a = 3
IA64_acq = 4
IA64_add = 5
IA64_addl = 6
IA64_addp4 = 7
IA64_adds = 8
IA64_alloc = 9
IA64_and = 10
IA64_andcm = 11
IA64_b = 12
IA64_bias = 13
IA64_br = 14
IA64_break = 15
IA64_brl = 16
IA64_brp = 17
IA64_bsw = 18
IA64_c = 19
IA64_call = 20
IA64_cexit = 21
IA64_chk = 22
IA64_cloop = 23
IA64_clr = 24
IA64_clrrrb = 25
IA64_cmp = 26
IA64_cmp4 = 27
IA64_cmpxchg1 = 28
IA64_cmpxchg2 = 29
IA64_cmpxchg4 = 30
IA64_cmpxchg8 = 31
IA64_cond = 32
IA64_cover = 33
IA64_ctop = 34
IA64_czx1 = 35
IA64_czx2 = 36
IA64_d = 37
IA64_dep = 38
IA64_dpnt = 39
IA64_dptk = 40
IA64_e = 41
IA64_epc = 42
IA64_eq = 43
IA64_excl = 44
IA64_exit = 45
IA64_exp = 46
IA64_extr = 47
IA64_f = 48
IA64_fabs = 49
IA64_fadd = 50
IA64_famax = 51
IA64_famin = 52
IA64_fand = 53
IA64_fandcm = 54
IA64_fault = 55
IA64_fc = 56
IA64_fchkf = 57
IA64_fclass = 58
IA64_fclrf = 59
IA64_fcmp = 60
IA64_fcvt = 61
IA64_fetchadd4 = 62
IA64_fetchadd8 = 63
IA64_few = 64
IA64_fill = 65
IA64_flushrs = 66
IA64_fma = 67
IA64_fmax = 68
IA64_fmerge = 69
IA64_fmin = 70
IA64_fmix = 71
IA64_fmpy = 72
IA64_fms = 73
IA64_fneg = 74
IA64_fnegabs = 75
IA64_fnma = 76
IA64_fnmpy = 77
IA64_fnorm = 78
IA64_for = 79
IA64_fpabs = 80
IA64_fpack = 81
IA64_fpamax = 82
IA64_fpamin = 83
IA64_fpcmp = 84
IA64_fpcvt = 85
IA64_fpma = 86
IA64_fpmax = 87
IA64_fpmerge = 88
IA64_fpmin = 89
IA64_fpmpy = 90
IA64_fpms = 91
IA64_fpneg = 92
IA64_fpnegabs = 93
IA64_fpnma = 94
IA64_fpnmpy = 95
IA64_fprcpa = 96
IA64_fprsqrta = 97
IA64_frcpa = 98
IA64_frsqrta = 99
IA64_fselect = 100
IA64_fsetc = 101
IA64_fsub = 102
IA64_fswap = 103
IA64_fsxt = 104
IA64_fwb = 105
IA64_fx = 106
IA64_fxor = 107
IA64_fxu = 108
IA64_g = 109
IA64_ga = 110
IA64_ge = 111
IA64_getf = 112
IA64_geu = 113
IA64_gt = 114
IA64_gtu = 115
IA64_h = 116
IA64_hu = 117
IA64_i = 118
IA64_ia = 119
IA64_imp = 120
IA64_invala = 121
IA64_itc = 122
IA64_itr = 123
IA64_l = 124
IA64_ld1 = 125
IA64_ld2 = 126
IA64_ld4 = 127
IA64_ld8 = 128
IA64_ldf = 129
IA64_ldf8 = 130
IA64_ldfd = 131
IA64_ldfe = 132
IA64_ldfp8 = 133
IA64_ldfpd = 134
IA64_ldfps = 135
IA64_ldfs = 136
IA64_le = 137
IA64_leu = 138
IA64_lfetch = 139
IA64_loadrs = 140
IA64_loop = 141
IA64_lr = 142
IA64_lt = 143
IA64_ltu = 144
IA64_lu = 145
IA64_m = 146
IA64_many = 147
IA64_mf = 148
IA64_mix1 = 149
IA64_mix2 = 150
IA64_mix4 = 151
IA64_mov = 152
IA64_movl = 153
IA64_mux1 = 154
IA64_mux2 = 155
IA64_nc = 156
IA64_ne = 157
IA64_neq = 158
IA64_nge = 159
IA64_ngt = 160
IA64_nl = 161
IA64_nle = 162
IA64_nlt = 163
IA64_nm = 164
IA64_nop = 165
IA64_nr = 166
IA64_ns = 167
IA64_nt1 = 168
IA64_nt2 = 169
IA64_nta = 170
IA64_nz = 171
IA64_or = 172
IA64_orcm = 173
IA64_ord = 174
IA64_pack2 = 175
IA64_pack4 = 176
IA64_padd1 = 177
IA64_padd2 = 178
IA64_padd4 = 179
IA64_pavg1 = 180
IA64_pavg2 = 181
IA64_pavgsub1 = 182
IA64_pavgsub2 = 183
IA64_pcmp1 = 184
IA64_pcmp2 = 185
IA64_pcmp4 = 186
IA64_pmax1 = 187
IA64_pmax2 = 188
IA64_pmin1 = 189
IA64_pmin2 = 190
IA64_pmpy2 = 191
IA64_pmpyshr2 = 192
IA64_popcnt = 193
IA64_pr = 194
IA64_probe = 195
IA64_psad1 = 196
IA64_pshl2 = 197
IA64_pshl4 = 198
IA64_pshladd2 = 199
IA64_pshr2 = 200
IA64_pshr4 = 201
IA64_pshradd2 = 202
IA64_psub1 = 203
IA64_psub2 = 204
IA64_psub4 = 205
IA64_ptc = 206
IA64_ptr = 207
IA64_r = 208
IA64_raz = 209
IA64_rel = 210
IA64_ret = 211
IA64_rfi = 212
IA64_rsm = 213
IA64_rum = 214
IA64_rw = 215
IA64_s = 216
IA64_s0 = 217
IA64_s1 = 218
IA64_s2 = 219
IA64_s3 = 220
IA64_sa = 221
IA64_se = 222
IA64_setf = 223
IA64_shl = 224
IA64_shladd = 225
IA64_shladdp4 = 226
IA64_shr = 227
IA64_shrp = 228
IA64_sig = 229
IA64_spill = 230
IA64_spnt = 231
IA64_sptk = 232
IA64_srlz = 233
IA64_ssm = 234
IA64_sss = 235
IA64_st1 = 236
IA64_st2 = 237
IA64_st4 = 238
IA64_st8 = 239
IA64_stf = 240
IA64_stf8 = 241
IA64_stfd = 242
IA64_stfe = 243
IA64_stfs = 244
IA64_sub = 245
IA64_sum = 246
IA64_sxt1 = 247
IA64_sxt2 = 248
IA64_sxt4 = 249
IA64_sync = 250
IA64_tak = 251
IA64_tbit = 252
IA64_thash = 253
IA64_tnat = 254
IA64_tpa = 255
IA64_trunc = 256
IA64_ttag = 257
IA64_u = 258
IA64_unc = 259
IA64_unord = 260
IA64_unpack1 = 261
IA64_unpack2 = 262
IA64_unpack4 = 263
IA64_uss = 264
IA64_uus = 265
IA64_uuu = 266
IA64_w = 267
IA64_wexit = 268
IA64_wtop = 269
IA64_x = 270
IA64_xchg1 = 271
IA64_xchg2 = 272
IA64_xchg4 = 273
IA64_xchg8 = 274
IA64_xf = 275
IA64_xma = 276
IA64_xmpy = 277
IA64_xor = 278
IA64_xuf = 279
IA64_z = 280
IA64_zxt1 = 281
IA64_zxt2 = 282
IA64_zxt4 = 283
IA64_last = 284
_7D923C96B6ADB4017E6ABB607A3ACE94 = ctypes.c_uint32 # enum

# values for enumeration '_D932C311951F178400A52260A746C74E'
_D932C311951F178400A52260A746C74E__enumvalues = {
    0: 'NET_null',
    1: 'NET_add',
    2: 'NET_add_ovf',
    3: 'NET_add_ovf_un',
    4: 'NET_and',
    5: 'NET_ann_arg',
    6: 'NET_ann_call',
    7: 'NET_ann_catch',
    8: 'NET_ann_data',
    9: 'NET_ann_data_s',
    10: 'NET_ann_dead',
    11: 'NET_ann_def',
    12: 'NET_ann_hoisted',
    13: 'NET_ann_hoisted_call',
    14: 'NET_ann_lab',
    15: 'NET_ann_live',
    16: 'NET_ann_phi',
    17: 'NET_ann_ref',
    18: 'NET_ann_ref_s',
    19: 'NET_arglist',
    20: 'NET_beq',
    21: 'NET_beq_s',
    22: 'NET_bge',
    23: 'NET_bge_s',
    24: 'NET_bge_un',
    25: 'NET_bge_un_s',
    26: 'NET_bgt',
    27: 'NET_bgt_s',
    28: 'NET_bgt_un',
    29: 'NET_bgt_un_s',
    30: 'NET_ble',
    31: 'NET_ble_s',
    32: 'NET_ble_un',
    33: 'NET_ble_un_s',
    34: 'NET_blt',
    35: 'NET_blt_s',
    36: 'NET_blt_un',
    37: 'NET_blt_un_s',
    38: 'NET_bne_un',
    39: 'NET_bne_un_s',
    40: 'NET_box',
    41: 'NET_br',
    42: 'NET_br_s',
    43: 'NET_break',
    44: 'NET_brfalse',
    45: 'NET_brfalse_s',
    46: 'NET_brtrue',
    47: 'NET_brtrue_s',
    48: 'NET_call',
    49: 'NET_calli',
    50: 'NET_callvirt',
    51: 'NET_castclass',
    52: 'NET_ceq',
    53: 'NET_cgt',
    54: 'NET_cgt_un',
    55: 'NET_ckfinite',
    56: 'NET_clt',
    57: 'NET_clt_un',
    58: 'NET_conv_i',
    59: 'NET_conv_i1',
    60: 'NET_conv_i2',
    61: 'NET_conv_i4',
    62: 'NET_conv_i8',
    63: 'NET_conv_ovf_i',
    64: 'NET_conv_ovf_i1',
    65: 'NET_conv_ovf_i1_un',
    66: 'NET_conv_ovf_i2',
    67: 'NET_conv_ovf_i2_un',
    68: 'NET_conv_ovf_i4',
    69: 'NET_conv_ovf_i4_un',
    70: 'NET_conv_ovf_i8',
    71: 'NET_conv_ovf_i8_un',
    72: 'NET_conv_ovf_i_un',
    73: 'NET_conv_ovf_u',
    74: 'NET_conv_ovf_u1',
    75: 'NET_conv_ovf_u1_un',
    76: 'NET_conv_ovf_u2',
    77: 'NET_conv_ovf_u2_un',
    78: 'NET_conv_ovf_u4',
    79: 'NET_conv_ovf_u4_un',
    80: 'NET_conv_ovf_u8',
    81: 'NET_conv_ovf_u8_un',
    82: 'NET_conv_ovf_u_un',
    83: 'NET_conv_r4',
    84: 'NET_conv_r8',
    85: 'NET_conv_r_un',
    86: 'NET_conv_u',
    87: 'NET_conv_u1',
    88: 'NET_conv_u2',
    89: 'NET_conv_u4',
    90: 'NET_conv_u8',
    91: 'NET_cpblk',
    92: 'NET_cpobj',
    93: 'NET_div',
    94: 'NET_div_un',
    95: 'NET_dup',
    96: 'NET_endfilter',
    97: 'NET_endfinally',
    98: 'NET_initblk',
    99: 'NET_initobj',
    100: 'NET_isinst',
    101: 'NET_jmp',
    102: 'NET_ldarg',
    103: 'NET_ldarg_0',
    104: 'NET_ldarg_1',
    105: 'NET_ldarg_2',
    106: 'NET_ldarg_3',
    107: 'NET_ldarg_s',
    108: 'NET_ldarga',
    109: 'NET_ldarga_s',
    110: 'NET_ldc_i4',
    111: 'NET_ldc_i4_0',
    112: 'NET_ldc_i4_1',
    113: 'NET_ldc_i4_2',
    114: 'NET_ldc_i4_3',
    115: 'NET_ldc_i4_4',
    116: 'NET_ldc_i4_5',
    117: 'NET_ldc_i4_6',
    118: 'NET_ldc_i4_7',
    119: 'NET_ldc_i4_8',
    120: 'NET_ldc_i4_m1',
    121: 'NET_ldc_i4_s',
    122: 'NET_ldc_i8',
    123: 'NET_ldc_r4',
    124: 'NET_ldc_r8',
    125: 'NET_ldelem_i',
    126: 'NET_ldelem_i1',
    127: 'NET_ldelem_i2',
    128: 'NET_ldelem_i4',
    129: 'NET_ldelem_i8',
    130: 'NET_ldelem_r4',
    131: 'NET_ldelem_r8',
    132: 'NET_ldelem_ref',
    133: 'NET_ldelem_u1',
    134: 'NET_ldelem_u2',
    135: 'NET_ldelem_u4',
    136: 'NET_ldelema',
    137: 'NET_ldfld',
    138: 'NET_ldflda',
    139: 'NET_ldftn',
    140: 'NET_ldind_i',
    141: 'NET_ldind_i1',
    142: 'NET_ldind_i2',
    143: 'NET_ldind_i4',
    144: 'NET_ldind_i8',
    145: 'NET_ldind_r4',
    146: 'NET_ldind_r8',
    147: 'NET_ldind_ref',
    148: 'NET_ldind_u1',
    149: 'NET_ldind_u2',
    150: 'NET_ldind_u4',
    151: 'NET_ldlen',
    152: 'NET_ldloc',
    153: 'NET_ldloc_0',
    154: 'NET_ldloc_1',
    155: 'NET_ldloc_2',
    156: 'NET_ldloc_3',
    157: 'NET_ldloc_s',
    158: 'NET_ldloca',
    159: 'NET_ldloca_s',
    160: 'NET_ldnull',
    161: 'NET_ldobj',
    162: 'NET_ldsfld',
    163: 'NET_ldsflda',
    164: 'NET_ldstr',
    165: 'NET_ldtoken',
    166: 'NET_ldvirtftn',
    167: 'NET_leave',
    168: 'NET_leave_s',
    169: 'NET_localloc',
    170: 'NET_mkrefany',
    171: 'NET_mul',
    172: 'NET_mul_ovf',
    173: 'NET_mul_ovf_un',
    174: 'NET_neg',
    175: 'NET_newarr',
    176: 'NET_newobj',
    177: 'NET_nop',
    178: 'NET_not',
    179: 'NET_or',
    180: 'NET_pop',
    181: 'NET_refanytype',
    182: 'NET_refanyval',
    183: 'NET_rem',
    184: 'NET_rem_un',
    185: 'NET_ret',
    186: 'NET_rethrow',
    187: 'NET_shl',
    188: 'NET_shr',
    189: 'NET_shr_un',
    190: 'NET_sizeof',
    191: 'NET_starg',
    192: 'NET_starg_s',
    193: 'NET_stelem_i',
    194: 'NET_stelem_i1',
    195: 'NET_stelem_i2',
    196: 'NET_stelem_i4',
    197: 'NET_stelem_i8',
    198: 'NET_stelem_r4',
    199: 'NET_stelem_r8',
    200: 'NET_stelem_ref',
    201: 'NET_stfld',
    202: 'NET_stind_i',
    203: 'NET_stind_i1',
    204: 'NET_stind_i2',
    205: 'NET_stind_i4',
    206: 'NET_stind_i8',
    207: 'NET_stind_r4',
    208: 'NET_stind_r8',
    209: 'NET_stind_ref',
    210: 'NET_stloc',
    211: 'NET_stloc_0',
    212: 'NET_stloc_1',
    213: 'NET_stloc_2',
    214: 'NET_stloc_3',
    215: 'NET_stloc_s',
    216: 'NET_stobj',
    217: 'NET_stsfld',
    218: 'NET_sub',
    219: 'NET_sub_ovf',
    220: 'NET_sub_ovf_un',
    221: 'NET_switch',
    222: 'NET_tail_',
    223: 'NET_throw',
    224: 'NET_unaligned_',
    225: 'NET_unbox',
    226: 'NET_volatile_',
    227: 'NET_xor',
    228: 'NET_ldelem',
    229: 'NET_stelem',
    230: 'NET_unbox_any',
    231: 'NET_constrained_',
    232: 'NET_no_',
    233: 'NET_readonly_',
    234: 'NET_last',
}
NET_null = 0
NET_add = 1
NET_add_ovf = 2
NET_add_ovf_un = 3
NET_and = 4
NET_ann_arg = 5
NET_ann_call = 6
NET_ann_catch = 7
NET_ann_data = 8
NET_ann_data_s = 9
NET_ann_dead = 10
NET_ann_def = 11
NET_ann_hoisted = 12
NET_ann_hoisted_call = 13
NET_ann_lab = 14
NET_ann_live = 15
NET_ann_phi = 16
NET_ann_ref = 17
NET_ann_ref_s = 18
NET_arglist = 19
NET_beq = 20
NET_beq_s = 21
NET_bge = 22
NET_bge_s = 23
NET_bge_un = 24
NET_bge_un_s = 25
NET_bgt = 26
NET_bgt_s = 27
NET_bgt_un = 28
NET_bgt_un_s = 29
NET_ble = 30
NET_ble_s = 31
NET_ble_un = 32
NET_ble_un_s = 33
NET_blt = 34
NET_blt_s = 35
NET_blt_un = 36
NET_blt_un_s = 37
NET_bne_un = 38
NET_bne_un_s = 39
NET_box = 40
NET_br = 41
NET_br_s = 42
NET_break = 43
NET_brfalse = 44
NET_brfalse_s = 45
NET_brtrue = 46
NET_brtrue_s = 47
NET_call = 48
NET_calli = 49
NET_callvirt = 50
NET_castclass = 51
NET_ceq = 52
NET_cgt = 53
NET_cgt_un = 54
NET_ckfinite = 55
NET_clt = 56
NET_clt_un = 57
NET_conv_i = 58
NET_conv_i1 = 59
NET_conv_i2 = 60
NET_conv_i4 = 61
NET_conv_i8 = 62
NET_conv_ovf_i = 63
NET_conv_ovf_i1 = 64
NET_conv_ovf_i1_un = 65
NET_conv_ovf_i2 = 66
NET_conv_ovf_i2_un = 67
NET_conv_ovf_i4 = 68
NET_conv_ovf_i4_un = 69
NET_conv_ovf_i8 = 70
NET_conv_ovf_i8_un = 71
NET_conv_ovf_i_un = 72
NET_conv_ovf_u = 73
NET_conv_ovf_u1 = 74
NET_conv_ovf_u1_un = 75
NET_conv_ovf_u2 = 76
NET_conv_ovf_u2_un = 77
NET_conv_ovf_u4 = 78
NET_conv_ovf_u4_un = 79
NET_conv_ovf_u8 = 80
NET_conv_ovf_u8_un = 81
NET_conv_ovf_u_un = 82
NET_conv_r4 = 83
NET_conv_r8 = 84
NET_conv_r_un = 85
NET_conv_u = 86
NET_conv_u1 = 87
NET_conv_u2 = 88
NET_conv_u4 = 89
NET_conv_u8 = 90
NET_cpblk = 91
NET_cpobj = 92
NET_div = 93
NET_div_un = 94
NET_dup = 95
NET_endfilter = 96
NET_endfinally = 97
NET_initblk = 98
NET_initobj = 99
NET_isinst = 100
NET_jmp = 101
NET_ldarg = 102
NET_ldarg_0 = 103
NET_ldarg_1 = 104
NET_ldarg_2 = 105
NET_ldarg_3 = 106
NET_ldarg_s = 107
NET_ldarga = 108
NET_ldarga_s = 109
NET_ldc_i4 = 110
NET_ldc_i4_0 = 111
NET_ldc_i4_1 = 112
NET_ldc_i4_2 = 113
NET_ldc_i4_3 = 114
NET_ldc_i4_4 = 115
NET_ldc_i4_5 = 116
NET_ldc_i4_6 = 117
NET_ldc_i4_7 = 118
NET_ldc_i4_8 = 119
NET_ldc_i4_m1 = 120
NET_ldc_i4_s = 121
NET_ldc_i8 = 122
NET_ldc_r4 = 123
NET_ldc_r8 = 124
NET_ldelem_i = 125
NET_ldelem_i1 = 126
NET_ldelem_i2 = 127
NET_ldelem_i4 = 128
NET_ldelem_i8 = 129
NET_ldelem_r4 = 130
NET_ldelem_r8 = 131
NET_ldelem_ref = 132
NET_ldelem_u1 = 133
NET_ldelem_u2 = 134
NET_ldelem_u4 = 135
NET_ldelema = 136
NET_ldfld = 137
NET_ldflda = 138
NET_ldftn = 139
NET_ldind_i = 140
NET_ldind_i1 = 141
NET_ldind_i2 = 142
NET_ldind_i4 = 143
NET_ldind_i8 = 144
NET_ldind_r4 = 145
NET_ldind_r8 = 146
NET_ldind_ref = 147
NET_ldind_u1 = 148
NET_ldind_u2 = 149
NET_ldind_u4 = 150
NET_ldlen = 151
NET_ldloc = 152
NET_ldloc_0 = 153
NET_ldloc_1 = 154
NET_ldloc_2 = 155
NET_ldloc_3 = 156
NET_ldloc_s = 157
NET_ldloca = 158
NET_ldloca_s = 159
NET_ldnull = 160
NET_ldobj = 161
NET_ldsfld = 162
NET_ldsflda = 163
NET_ldstr = 164
NET_ldtoken = 165
NET_ldvirtftn = 166
NET_leave = 167
NET_leave_s = 168
NET_localloc = 169
NET_mkrefany = 170
NET_mul = 171
NET_mul_ovf = 172
NET_mul_ovf_un = 173
NET_neg = 174
NET_newarr = 175
NET_newobj = 176
NET_nop = 177
NET_not = 178
NET_or = 179
NET_pop = 180
NET_refanytype = 181
NET_refanyval = 182
NET_rem = 183
NET_rem_un = 184
NET_ret = 185
NET_rethrow = 186
NET_shl = 187
NET_shr = 188
NET_shr_un = 189
NET_sizeof = 190
NET_starg = 191
NET_starg_s = 192
NET_stelem_i = 193
NET_stelem_i1 = 194
NET_stelem_i2 = 195
NET_stelem_i4 = 196
NET_stelem_i8 = 197
NET_stelem_r4 = 198
NET_stelem_r8 = 199
NET_stelem_ref = 200
NET_stfld = 201
NET_stind_i = 202
NET_stind_i1 = 203
NET_stind_i2 = 204
NET_stind_i4 = 205
NET_stind_i8 = 206
NET_stind_r4 = 207
NET_stind_r8 = 208
NET_stind_ref = 209
NET_stloc = 210
NET_stloc_0 = 211
NET_stloc_1 = 212
NET_stloc_2 = 213
NET_stloc_3 = 214
NET_stloc_s = 215
NET_stobj = 216
NET_stsfld = 217
NET_sub = 218
NET_sub_ovf = 219
NET_sub_ovf_un = 220
NET_switch = 221
NET_tail_ = 222
NET_throw = 223
NET_unaligned_ = 224
NET_unbox = 225
NET_volatile_ = 226
NET_xor = 227
NET_ldelem = 228
NET_stelem = 229
NET_unbox_any = 230
NET_constrained_ = 231
NET_no_ = 232
NET_readonly_ = 233
NET_last = 234
_D932C311951F178400A52260A746C74E = ctypes.c_uint32 # enum

# values for enumeration '_FB1089CAE9F05A3C04D5DA9681E20324'
_FB1089CAE9F05A3C04D5DA9681E20324__enumvalues = {
    0: 'MC12_null',
    1: 'MC12_aba',
    2: 'MC12_abx',
    3: 'MC12_aby',
    4: 'MC12_adca',
    5: 'MC12_adcb',
    6: 'MC12_adda',
    7: 'MC12_addb',
    8: 'MC12_addd',
    9: 'MC12_anda',
    10: 'MC12_andb',
    11: 'MC12_andcc',
    12: 'MC12_asl',
    13: 'MC12_asla',
    14: 'MC12_aslb',
    15: 'MC12_asld',
    16: 'MC12_asr',
    17: 'MC12_asra',
    18: 'MC12_asrb',
    19: 'MC12_bcc',
    20: 'MC12_bclr',
    21: 'MC12_bcs',
    22: 'MC12_beq',
    23: 'MC12_bge',
    24: 'MC12_bgnd',
    25: 'MC12_bgt',
    26: 'MC12_bhi',
    27: 'MC12_bhs',
    28: 'MC12_bita',
    29: 'MC12_bitb',
    30: 'MC12_ble',
    31: 'MC12_blo',
    32: 'MC12_bls',
    33: 'MC12_blt',
    34: 'MC12_bmi',
    35: 'MC12_bne',
    36: 'MC12_bpl',
    37: 'MC12_bra',
    38: 'MC12_brclr',
    39: 'MC12_brn',
    40: 'MC12_brset',
    41: 'MC12_bset',
    42: 'MC12_bsr',
    43: 'MC12_bvc',
    44: 'MC12_bvs',
    45: 'MC12_call',
    46: 'MC12_cba',
    47: 'MC12_clc',
    48: 'MC12_cli',
    49: 'MC12_clr',
    50: 'MC12_clra',
    51: 'MC12_clrb',
    52: 'MC12_clv',
    53: 'MC12_cmpa',
    54: 'MC12_cmpb',
    55: 'MC12_com',
    56: 'MC12_coma',
    57: 'MC12_comb',
    58: 'MC12_cpd',
    59: 'MC12_cps',
    60: 'MC12_cpx',
    61: 'MC12_cpy',
    62: 'MC12_daa',
    63: 'MC12_dbeq',
    64: 'MC12_dbne',
    65: 'MC12_dec',
    66: 'MC12_deca',
    67: 'MC12_decb',
    68: 'MC12_des',
    69: 'MC12_dex',
    70: 'MC12_dey',
    71: 'MC12_ediv',
    72: 'MC12_edivs',
    73: 'MC12_emacs',
    74: 'MC12_emaxd',
    75: 'MC12_emaxm',
    76: 'MC12_emind',
    77: 'MC12_eminm',
    78: 'MC12_emul',
    79: 'MC12_emuls',
    80: 'MC12_eora',
    81: 'MC12_eorb',
    82: 'MC12_etbl',
    83: 'MC12_exg',
    84: 'MC12_fdiv',
    85: 'MC12_ibeq',
    86: 'MC12_ibne',
    87: 'MC12_idiv',
    88: 'MC12_idivs',
    89: 'MC12_inc',
    90: 'MC12_inca',
    91: 'MC12_incb',
    92: 'MC12_ins',
    93: 'MC12_inx',
    94: 'MC12_iny',
    95: 'MC12_jmp',
    96: 'MC12_jsr',
    97: 'MC12_lbcc',
    98: 'MC12_lbcs',
    99: 'MC12_lbeq',
    100: 'MC12_lbge',
    101: 'MC12_lbgt',
    102: 'MC12_lbhi',
    103: 'MC12_lbhs',
    104: 'MC12_lble',
    105: 'MC12_lblo',
    106: 'MC12_lbls',
    107: 'MC12_lblt',
    108: 'MC12_lbmi',
    109: 'MC12_lbne',
    110: 'MC12_lbpl',
    111: 'MC12_lbra',
    112: 'MC12_lbrn',
    113: 'MC12_lbvc',
    114: 'MC12_lbvs',
    115: 'MC12_ldaa',
    116: 'MC12_ldab',
    117: 'MC12_ldd',
    118: 'MC12_lds',
    119: 'MC12_ldx',
    120: 'MC12_ldy',
    121: 'MC12_leas',
    122: 'MC12_leax',
    123: 'MC12_leay',
    124: 'MC12_lsl',
    125: 'MC12_lsla',
    126: 'MC12_lslb',
    127: 'MC12_lsld',
    128: 'MC12_lsr',
    129: 'MC12_lsra',
    130: 'MC12_lsrb',
    131: 'MC12_lsrd',
    132: 'MC12_maxa',
    133: 'MC12_maxm',
    134: 'MC12_mem',
    135: 'MC12_mina',
    136: 'MC12_minm',
    137: 'MC12_movb',
    138: 'MC12_movw',
    139: 'MC12_mul',
    140: 'MC12_neg',
    141: 'MC12_nega',
    142: 'MC12_negb',
    143: 'MC12_nop',
    144: 'MC12_oraa',
    145: 'MC12_orab',
    146: 'MC12_orcc',
    147: 'MC12_psha',
    148: 'MC12_pshb',
    149: 'MC12_pshc',
    150: 'MC12_pshd',
    151: 'MC12_pshx',
    152: 'MC12_pshy',
    153: 'MC12_pula',
    154: 'MC12_pulb',
    155: 'MC12_pulc',
    156: 'MC12_puld',
    157: 'MC12_pulx',
    158: 'MC12_puly',
    159: 'MC12_rev',
    160: 'MC12_revw',
    161: 'MC12_rol',
    162: 'MC12_rola',
    163: 'MC12_rolb',
    164: 'MC12_ror',
    165: 'MC12_rora',
    166: 'MC12_rorb',
    167: 'MC12_rtc',
    168: 'MC12_rti',
    169: 'MC12_rts',
    170: 'MC12_sba',
    171: 'MC12_sbca',
    172: 'MC12_sbcb',
    173: 'MC12_sec',
    174: 'MC12_sei',
    175: 'MC12_sev',
    176: 'MC12_sex',
    177: 'MC12_staa',
    178: 'MC12_stab',
    179: 'MC12_std',
    180: 'MC12_stop',
    181: 'MC12_sts',
    182: 'MC12_stx',
    183: 'MC12_sty',
    184: 'MC12_suba',
    185: 'MC12_subb',
    186: 'MC12_subd',
    187: 'MC12_swi',
    188: 'MC12_tab',
    189: 'MC12_tap',
    190: 'MC12_tba',
    191: 'MC12_tbeq',
    192: 'MC12_tbl',
    193: 'MC12_tbne',
    194: 'MC12_tfr',
    195: 'MC12_tpa',
    196: 'MC12_trap',
    197: 'MC12_tst',
    198: 'MC12_tsta',
    199: 'MC12_tstb',
    200: 'MC12_tsx',
    201: 'MC12_tsy',
    202: 'MC12_txs',
    203: 'MC12_tys',
    204: 'MC12_wai',
    205: 'MC12_wav',
    206: 'MC12_wavr',
    207: 'MC12_xgdx',
    208: 'MC12_xgdy',
    209: 'MC12_skip1',
    210: 'MC12_skip2',
    211: 'MC12X_addx',
    212: 'MC12X_addy',
    213: 'MC12X_aded',
    214: 'MC12X_adex',
    215: 'MC12X_adey',
    216: 'MC12X_andx',
    217: 'MC12X_andy',
    218: 'MC12X_aslw',
    219: 'MC12X_aslx',
    220: 'MC12X_asly',
    221: 'MC12X_asrw',
    222: 'MC12X_asrx',
    223: 'MC12X_asry',
    224: 'MC12X_bitx',
    225: 'MC12X_bity',
    226: 'MC12X_btas',
    227: 'MC12X_clrw',
    228: 'MC12X_clrx',
    229: 'MC12X_clry',
    230: 'MC12X_comw',
    231: 'MC12X_comx',
    232: 'MC12X_comy',
    233: 'MC12X_cped',
    234: 'MC12X_cpes',
    235: 'MC12X_cpex',
    236: 'MC12X_cpey',
    237: 'MC12X_decw',
    238: 'MC12X_decx',
    239: 'MC12X_decy',
    240: 'MC12X_eorx',
    241: 'MC12X_eory',
    242: 'MC12X_gldaa',
    243: 'MC12X_gldab',
    244: 'MC12X_gldd',
    245: 'MC12X_glds',
    246: 'MC12X_gldx',
    247: 'MC12X_gldy',
    248: 'MC12X_gstaa',
    249: 'MC12X_gstab',
    250: 'MC12X_gstd',
    251: 'MC12X_gsts',
    252: 'MC12X_gstx',
    253: 'MC12X_gsty',
    254: 'MC12X_incw',
    255: 'MC12X_incx',
    256: 'MC12X_incy',
    257: 'MC12X_lsrw',
    258: 'MC12X_lsrx',
    259: 'MC12X_lsry',
    260: 'MC12X_negw',
    261: 'MC12X_negx',
    262: 'MC12X_negy',
    263: 'MC12X_orx',
    264: 'MC12X_ory',
    265: 'MC12X_pshcw',
    266: 'MC12X_pulcw',
    267: 'MC12X_rolw',
    268: 'MC12X_rolx',
    269: 'MC12X_roly',
    270: 'MC12X_rorw',
    271: 'MC12X_rorx',
    272: 'MC12X_rory',
    273: 'MC12X_sbed',
    274: 'MC12X_sbex',
    275: 'MC12X_sbey',
    276: 'MC12X_subx',
    277: 'MC12X_suby',
    278: 'MC12X_tstw',
    279: 'MC12X_tstx',
    280: 'MC12X_tsty',
    281: 'MC12X_sys',
    282: 'MC12XGATE_adc',
    283: 'MC12XGATE_add',
    284: 'MC12XGATE_addh',
    285: 'MC12XGATE_addl',
    286: 'MC12XGATE_and',
    287: 'MC12XGATE_andh',
    288: 'MC12XGATE_andl',
    289: 'MC12XGATE_asr',
    290: 'MC12XGATE_bcc',
    291: 'MC12XGATE_bcs',
    292: 'MC12XGATE_beq',
    293: 'MC12XGATE_bfext',
    294: 'MC12XGATE_bffo',
    295: 'MC12XGATE_bfins',
    296: 'MC12XGATE_bfinsi',
    297: 'MC12XGATE_bfinsx',
    298: 'MC12XGATE_bge',
    299: 'MC12XGATE_bgt',
    300: 'MC12XGATE_bhi',
    301: 'MC12XGATE_bhs',
    302: 'MC12XGATE_bith',
    303: 'MC12XGATE_bitl',
    304: 'MC12XGATE_ble',
    305: 'MC12XGATE_blo',
    306: 'MC12XGATE_bls',
    307: 'MC12XGATE_blt',
    308: 'MC12XGATE_bmi',
    309: 'MC12XGATE_bne',
    310: 'MC12XGATE_bpl',
    311: 'MC12XGATE_bra',
    312: 'MC12XGATE_brk',
    313: 'MC12XGATE_bvc',
    314: 'MC12XGATE_bvs',
    315: 'MC12XGATE_cmp',
    316: 'MC12XGATE_cmpl',
    317: 'MC12XGATE_com',
    318: 'MC12XGATE_cpc',
    319: 'MC12XGATE_cpch',
    320: 'MC12XGATE_csem',
    321: 'MC12XGATE_csl',
    322: 'MC12XGATE_csr',
    323: 'MC12XGATE_jal',
    324: 'MC12XGATE_ldb',
    325: 'MC12XGATE_ldh',
    326: 'MC12XGATE_ldl',
    327: 'MC12XGATE_ldw',
    328: 'MC12XGATE_lsl',
    329: 'MC12XGATE_lsr',
    330: 'MC12XGATE_mov',
    331: 'MC12XGATE_neg',
    332: 'MC12XGATE_nop',
    333: 'MC12XGATE_or',
    334: 'MC12XGATE_orh',
    335: 'MC12XGATE_orl',
    336: 'MC12XGATE_par',
    337: 'MC12XGATE_rol',
    338: 'MC12XGATE_ror',
    339: 'MC12XGATE_rts',
    340: 'MC12XGATE_sbc',
    341: 'MC12XGATE_sex',
    342: 'MC12XGATE_sif',
    343: 'MC12XGATE_ssem',
    344: 'MC12XGATE_stb',
    345: 'MC12XGATE_stw',
    346: 'MC12XGATE_sub',
    347: 'MC12XGATE_subh',
    348: 'MC12XGATE_subl',
    349: 'MC12XGATE_tfr',
    350: 'MC12XGATE_tst',
    351: 'MC12XGATE_xnor',
    352: 'MC12XGATE_xnorh',
    353: 'MC12XGATE_xnorl',
    354: 'MC12XGATE_add16',
    355: 'MC12XGATE_and16',
    356: 'MC12XGATE_cmp16',
    357: 'MC12XGATE_ldw16',
    358: 'MC12XGATE_or16',
    359: 'MC12XGATE_sub16',
    360: 'MC12XGATE_xnor16',
    361: 'MC12_last',
}
MC12_null = 0
MC12_aba = 1
MC12_abx = 2
MC12_aby = 3
MC12_adca = 4
MC12_adcb = 5
MC12_adda = 6
MC12_addb = 7
MC12_addd = 8
MC12_anda = 9
MC12_andb = 10
MC12_andcc = 11
MC12_asl = 12
MC12_asla = 13
MC12_aslb = 14
MC12_asld = 15
MC12_asr = 16
MC12_asra = 17
MC12_asrb = 18
MC12_bcc = 19
MC12_bclr = 20
MC12_bcs = 21
MC12_beq = 22
MC12_bge = 23
MC12_bgnd = 24
MC12_bgt = 25
MC12_bhi = 26
MC12_bhs = 27
MC12_bita = 28
MC12_bitb = 29
MC12_ble = 30
MC12_blo = 31
MC12_bls = 32
MC12_blt = 33
MC12_bmi = 34
MC12_bne = 35
MC12_bpl = 36
MC12_bra = 37
MC12_brclr = 38
MC12_brn = 39
MC12_brset = 40
MC12_bset = 41
MC12_bsr = 42
MC12_bvc = 43
MC12_bvs = 44
MC12_call = 45
MC12_cba = 46
MC12_clc = 47
MC12_cli = 48
MC12_clr = 49
MC12_clra = 50
MC12_clrb = 51
MC12_clv = 52
MC12_cmpa = 53
MC12_cmpb = 54
MC12_com = 55
MC12_coma = 56
MC12_comb = 57
MC12_cpd = 58
MC12_cps = 59
MC12_cpx = 60
MC12_cpy = 61
MC12_daa = 62
MC12_dbeq = 63
MC12_dbne = 64
MC12_dec = 65
MC12_deca = 66
MC12_decb = 67
MC12_des = 68
MC12_dex = 69
MC12_dey = 70
MC12_ediv = 71
MC12_edivs = 72
MC12_emacs = 73
MC12_emaxd = 74
MC12_emaxm = 75
MC12_emind = 76
MC12_eminm = 77
MC12_emul = 78
MC12_emuls = 79
MC12_eora = 80
MC12_eorb = 81
MC12_etbl = 82
MC12_exg = 83
MC12_fdiv = 84
MC12_ibeq = 85
MC12_ibne = 86
MC12_idiv = 87
MC12_idivs = 88
MC12_inc = 89
MC12_inca = 90
MC12_incb = 91
MC12_ins = 92
MC12_inx = 93
MC12_iny = 94
MC12_jmp = 95
MC12_jsr = 96
MC12_lbcc = 97
MC12_lbcs = 98
MC12_lbeq = 99
MC12_lbge = 100
MC12_lbgt = 101
MC12_lbhi = 102
MC12_lbhs = 103
MC12_lble = 104
MC12_lblo = 105
MC12_lbls = 106
MC12_lblt = 107
MC12_lbmi = 108
MC12_lbne = 109
MC12_lbpl = 110
MC12_lbra = 111
MC12_lbrn = 112
MC12_lbvc = 113
MC12_lbvs = 114
MC12_ldaa = 115
MC12_ldab = 116
MC12_ldd = 117
MC12_lds = 118
MC12_ldx = 119
MC12_ldy = 120
MC12_leas = 121
MC12_leax = 122
MC12_leay = 123
MC12_lsl = 124
MC12_lsla = 125
MC12_lslb = 126
MC12_lsld = 127
MC12_lsr = 128
MC12_lsra = 129
MC12_lsrb = 130
MC12_lsrd = 131
MC12_maxa = 132
MC12_maxm = 133
MC12_mem = 134
MC12_mina = 135
MC12_minm = 136
MC12_movb = 137
MC12_movw = 138
MC12_mul = 139
MC12_neg = 140
MC12_nega = 141
MC12_negb = 142
MC12_nop = 143
MC12_oraa = 144
MC12_orab = 145
MC12_orcc = 146
MC12_psha = 147
MC12_pshb = 148
MC12_pshc = 149
MC12_pshd = 150
MC12_pshx = 151
MC12_pshy = 152
MC12_pula = 153
MC12_pulb = 154
MC12_pulc = 155
MC12_puld = 156
MC12_pulx = 157
MC12_puly = 158
MC12_rev = 159
MC12_revw = 160
MC12_rol = 161
MC12_rola = 162
MC12_rolb = 163
MC12_ror = 164
MC12_rora = 165
MC12_rorb = 166
MC12_rtc = 167
MC12_rti = 168
MC12_rts = 169
MC12_sba = 170
MC12_sbca = 171
MC12_sbcb = 172
MC12_sec = 173
MC12_sei = 174
MC12_sev = 175
MC12_sex = 176
MC12_staa = 177
MC12_stab = 178
MC12_std = 179
MC12_stop = 180
MC12_sts = 181
MC12_stx = 182
MC12_sty = 183
MC12_suba = 184
MC12_subb = 185
MC12_subd = 186
MC12_swi = 187
MC12_tab = 188
MC12_tap = 189
MC12_tba = 190
MC12_tbeq = 191
MC12_tbl = 192
MC12_tbne = 193
MC12_tfr = 194
MC12_tpa = 195
MC12_trap = 196
MC12_tst = 197
MC12_tsta = 198
MC12_tstb = 199
MC12_tsx = 200
MC12_tsy = 201
MC12_txs = 202
MC12_tys = 203
MC12_wai = 204
MC12_wav = 205
MC12_wavr = 206
MC12_xgdx = 207
MC12_xgdy = 208
MC12_skip1 = 209
MC12_skip2 = 210
MC12X_addx = 211
MC12X_addy = 212
MC12X_aded = 213
MC12X_adex = 214
MC12X_adey = 215
MC12X_andx = 216
MC12X_andy = 217
MC12X_aslw = 218
MC12X_aslx = 219
MC12X_asly = 220
MC12X_asrw = 221
MC12X_asrx = 222
MC12X_asry = 223
MC12X_bitx = 224
MC12X_bity = 225
MC12X_btas = 226
MC12X_clrw = 227
MC12X_clrx = 228
MC12X_clry = 229
MC12X_comw = 230
MC12X_comx = 231
MC12X_comy = 232
MC12X_cped = 233
MC12X_cpes = 234
MC12X_cpex = 235
MC12X_cpey = 236
MC12X_decw = 237
MC12X_decx = 238
MC12X_decy = 239
MC12X_eorx = 240
MC12X_eory = 241
MC12X_gldaa = 242
MC12X_gldab = 243
MC12X_gldd = 244
MC12X_glds = 245
MC12X_gldx = 246
MC12X_gldy = 247
MC12X_gstaa = 248
MC12X_gstab = 249
MC12X_gstd = 250
MC12X_gsts = 251
MC12X_gstx = 252
MC12X_gsty = 253
MC12X_incw = 254
MC12X_incx = 255
MC12X_incy = 256
MC12X_lsrw = 257
MC12X_lsrx = 258
MC12X_lsry = 259
MC12X_negw = 260
MC12X_negx = 261
MC12X_negy = 262
MC12X_orx = 263
MC12X_ory = 264
MC12X_pshcw = 265
MC12X_pulcw = 266
MC12X_rolw = 267
MC12X_rolx = 268
MC12X_roly = 269
MC12X_rorw = 270
MC12X_rorx = 271
MC12X_rory = 272
MC12X_sbed = 273
MC12X_sbex = 274
MC12X_sbey = 275
MC12X_subx = 276
MC12X_suby = 277
MC12X_tstw = 278
MC12X_tstx = 279
MC12X_tsty = 280
MC12X_sys = 281
MC12XGATE_adc = 282
MC12XGATE_add = 283
MC12XGATE_addh = 284
MC12XGATE_addl = 285
MC12XGATE_and = 286
MC12XGATE_andh = 287
MC12XGATE_andl = 288
MC12XGATE_asr = 289
MC12XGATE_bcc = 290
MC12XGATE_bcs = 291
MC12XGATE_beq = 292
MC12XGATE_bfext = 293
MC12XGATE_bffo = 294
MC12XGATE_bfins = 295
MC12XGATE_bfinsi = 296
MC12XGATE_bfinsx = 297
MC12XGATE_bge = 298
MC12XGATE_bgt = 299
MC12XGATE_bhi = 300
MC12XGATE_bhs = 301
MC12XGATE_bith = 302
MC12XGATE_bitl = 303
MC12XGATE_ble = 304
MC12XGATE_blo = 305
MC12XGATE_bls = 306
MC12XGATE_blt = 307
MC12XGATE_bmi = 308
MC12XGATE_bne = 309
MC12XGATE_bpl = 310
MC12XGATE_bra = 311
MC12XGATE_brk = 312
MC12XGATE_bvc = 313
MC12XGATE_bvs = 314
MC12XGATE_cmp = 315
MC12XGATE_cmpl = 316
MC12XGATE_com = 317
MC12XGATE_cpc = 318
MC12XGATE_cpch = 319
MC12XGATE_csem = 320
MC12XGATE_csl = 321
MC12XGATE_csr = 322
MC12XGATE_jal = 323
MC12XGATE_ldb = 324
MC12XGATE_ldh = 325
MC12XGATE_ldl = 326
MC12XGATE_ldw = 327
MC12XGATE_lsl = 328
MC12XGATE_lsr = 329
MC12XGATE_mov = 330
MC12XGATE_neg = 331
MC12XGATE_nop = 332
MC12XGATE_or = 333
MC12XGATE_orh = 334
MC12XGATE_orl = 335
MC12XGATE_par = 336
MC12XGATE_rol = 337
MC12XGATE_ror = 338
MC12XGATE_rts = 339
MC12XGATE_sbc = 340
MC12XGATE_sex = 341
MC12XGATE_sif = 342
MC12XGATE_ssem = 343
MC12XGATE_stb = 344
MC12XGATE_stw = 345
MC12XGATE_sub = 346
MC12XGATE_subh = 347
MC12XGATE_subl = 348
MC12XGATE_tfr = 349
MC12XGATE_tst = 350
MC12XGATE_xnor = 351
MC12XGATE_xnorh = 352
MC12XGATE_xnorl = 353
MC12XGATE_add16 = 354
MC12XGATE_and16 = 355
MC12XGATE_cmp16 = 356
MC12XGATE_ldw16 = 357
MC12XGATE_or16 = 358
MC12XGATE_sub16 = 359
MC12XGATE_xnor16 = 360
MC12_last = 361
_FB1089CAE9F05A3C04D5DA9681E20324 = ctypes.c_uint32 # enum

# values for enumeration '_B5CB1DE07648BCF4F03AB285F94FB747'
_B5CB1DE07648BCF4F03AB285F94FB747__enumvalues = {
    0: 'MC6816_null',
    1: 'MC6816_ldaa',
    2: 'MC6816_ldab',
    3: 'MC6816_ldd',
    4: 'MC6816_lde',
    5: 'MC6816_lded',
    6: 'MC6816_movb',
    7: 'MC6816_movw',
    8: 'MC6816_staa',
    9: 'MC6816_stab',
    10: 'MC6816_std',
    11: 'MC6816_ste',
    12: 'MC6816_sted',
    13: 'MC6816_tab',
    14: 'MC6816_tba',
    15: 'MC6816_tde',
    16: 'MC6816_ted',
    17: 'MC6816_xgab',
    18: 'MC6816_xgde',
    19: 'MC6816_aba',
    20: 'MC6816_adca',
    21: 'MC6816_adcb',
    22: 'MC6816_adcd',
    23: 'MC6816_adce',
    24: 'MC6816_adda',
    25: 'MC6816_addb',
    26: 'MC6816_addd',
    27: 'MC6816_adde',
    28: 'MC6816_ade',
    29: 'MC6816_sba',
    30: 'MC6816_sbca',
    31: 'MC6816_sbcb',
    32: 'MC6816_sbcd',
    33: 'MC6816_sbce',
    34: 'MC6816_sde',
    35: 'MC6816_suba',
    36: 'MC6816_subb',
    37: 'MC6816_subd',
    38: 'MC6816_sube',
    39: 'MC6816_daa',
    40: 'MC6816_sxt',
    41: 'MC6816_cba',
    42: 'MC6816_cmpa',
    43: 'MC6816_cmpb',
    44: 'MC6816_cpd',
    45: 'MC6816_cpe',
    46: 'MC6816_tst',
    47: 'MC6816_tsta',
    48: 'MC6816_tstb',
    49: 'MC6816_tstd',
    50: 'MC6816_tste',
    51: 'MC6816_tstw',
    52: 'MC6816_ediv',
    53: 'MC6816_edivs',
    54: 'MC6816_emul',
    55: 'MC6816_emuls',
    56: 'MC6816_fdiv',
    57: 'MC6816_fmuls',
    58: 'MC6816_idiv',
    59: 'MC6816_mul',
    60: 'MC6816_dec',
    61: 'MC6816_deca',
    62: 'MC6816_decb',
    63: 'MC6816_decw',
    64: 'MC6816_inc',
    65: 'MC6816_inca',
    66: 'MC6816_incb',
    67: 'MC6816_incw',
    68: 'MC6816_clr',
    69: 'MC6816_clra',
    70: 'MC6816_clrb',
    71: 'MC6816_clrd',
    72: 'MC6816_clre',
    73: 'MC6816_clrw',
    74: 'MC6816_com',
    75: 'MC6816_coma',
    76: 'MC6816_comb',
    77: 'MC6816_comd',
    78: 'MC6816_come',
    79: 'MC6816_comw',
    80: 'MC6816_neg',
    81: 'MC6816_nega',
    82: 'MC6816_negb',
    83: 'MC6816_negd',
    84: 'MC6816_nege',
    85: 'MC6816_negw',
    86: 'MC6816_anda',
    87: 'MC6816_andb',
    88: 'MC6816_andd',
    89: 'MC6816_ande',
    90: 'MC6816_eora',
    91: 'MC6816_eorb',
    92: 'MC6816_eord',
    93: 'MC6816_eore',
    94: 'MC6816_oraa',
    95: 'MC6816_orab',
    96: 'MC6816_ord',
    97: 'MC6816_ore',
    98: 'MC6816_bita',
    99: 'MC6816_bitb',
    100: 'MC6816_bclr',
    101: 'MC6816_bclrw',
    102: 'MC6816_bset',
    103: 'MC6816_bsetw',
    104: 'MC6816_lsr',
    105: 'MC6816_lsra',
    106: 'MC6816_lsrb',
    107: 'MC6816_lsrd',
    108: 'MC6816_lsre',
    109: 'MC6816_lsrw',
    110: 'MC6816_asl',
    111: 'MC6816_asla',
    112: 'MC6816_aslb',
    113: 'MC6816_asld',
    114: 'MC6816_asle',
    115: 'MC6816_aslw',
    116: 'MC6816_asr',
    117: 'MC6816_asra',
    118: 'MC6816_asrb',
    119: 'MC6816_asrd',
    120: 'MC6816_asre',
    121: 'MC6816_asrw',
    122: 'MC6816_rol',
    123: 'MC6816_rola',
    124: 'MC6816_rolb',
    125: 'MC6816_rold',
    126: 'MC6816_role',
    127: 'MC6816_rolw',
    128: 'MC6816_ror',
    129: 'MC6816_rora',
    130: 'MC6816_rorb',
    131: 'MC6816_rord',
    132: 'MC6816_rore',
    133: 'MC6816_rorw',
    134: 'MC6816_bra',
    135: 'MC6816_brn',
    136: 'MC6816_bcc',
    137: 'MC6816_bcs',
    138: 'MC6816_beq',
    139: 'MC6816_bmi',
    140: 'MC6816_bne',
    141: 'MC6816_bpl',
    142: 'MC6816_bvc',
    143: 'MC6816_bvs',
    144: 'MC6816_bhi',
    145: 'MC6816_bls',
    146: 'MC6816_bge',
    147: 'MC6816_bgt',
    148: 'MC6816_ble',
    149: 'MC6816_blt',
    150: 'MC6816_lbra',
    151: 'MC6816_lbrn',
    152: 'MC6816_lbcc',
    153: 'MC6816_lbcs',
    154: 'MC6816_lbeq',
    155: 'MC6816_lbev',
    156: 'MC6816_lbmi',
    157: 'MC6816_lbmv',
    158: 'MC6816_lbne',
    159: 'MC6816_lbpl',
    160: 'MC6816_lbvc',
    161: 'MC6816_lbvs',
    162: 'MC6816_lbhi',
    163: 'MC6816_lbls',
    164: 'MC6816_lbge',
    165: 'MC6816_lbgt',
    166: 'MC6816_lble',
    167: 'MC6816_lblt',
    168: 'MC6816_brclr',
    169: 'MC6816_brset',
    170: 'MC6816_jmp',
    171: 'MC6816_bsr',
    172: 'MC6816_jsr',
    173: 'MC6816_lbsr',
    174: 'MC6816_rts',
    175: 'MC6816_rti',
    176: 'MC6816_swi',
    177: 'MC6816_abx',
    178: 'MC6816_aby',
    179: 'MC6816_abz',
    180: 'MC6816_adx',
    181: 'MC6816_ady',
    182: 'MC6816_adz',
    183: 'MC6816_aex',
    184: 'MC6816_aey',
    185: 'MC6816_aez',
    186: 'MC6816_aix',
    187: 'MC6816_aiy',
    188: 'MC6816_aiz',
    189: 'MC6816_cpx',
    190: 'MC6816_cpy',
    191: 'MC6816_cpz',
    192: 'MC6816_ldx',
    193: 'MC6816_ldy',
    194: 'MC6816_ldz',
    195: 'MC6816_stx',
    196: 'MC6816_sty',
    197: 'MC6816_stz',
    198: 'MC6816_tsx',
    199: 'MC6816_tsy',
    200: 'MC6816_tsz',
    201: 'MC6816_txs',
    202: 'MC6816_txy',
    203: 'MC6816_txz',
    204: 'MC6816_tys',
    205: 'MC6816_tyx',
    206: 'MC6816_tyz',
    207: 'MC6816_tzs',
    208: 'MC6816_tzx',
    209: 'MC6816_tzy',
    210: 'MC6816_xgdx',
    211: 'MC6816_xgdy',
    212: 'MC6816_xgdz',
    213: 'MC6816_xgex',
    214: 'MC6816_xgey',
    215: 'MC6816_xgez',
    216: 'MC6816_tbek',
    217: 'MC6816_tbsk',
    218: 'MC6816_tbxk',
    219: 'MC6816_tbyk',
    220: 'MC6816_tbzk',
    221: 'MC6816_tekb',
    222: 'MC6816_tskb',
    223: 'MC6816_txkb',
    224: 'MC6816_tykb',
    225: 'MC6816_tzkb',
    226: 'MC6816_ais',
    227: 'MC6816_cps',
    228: 'MC6816_lds',
    229: 'MC6816_sts',
    230: 'MC6816_psha',
    231: 'MC6816_pshb',
    232: 'MC6816_pshm',
    233: 'MC6816_pula',
    234: 'MC6816_pulb',
    235: 'MC6816_pulm',
    236: 'MC6816_andp',
    237: 'MC6816_orp',
    238: 'MC6816_tap',
    239: 'MC6816_tdp',
    240: 'MC6816_tpa',
    241: 'MC6816_tpd',
    242: 'MC6816_ace',
    243: 'MC6816_aced',
    244: 'MC6816_aslm',
    245: 'MC6816_asrm',
    246: 'MC6816_clrm',
    247: 'MC6816_ldhi',
    248: 'MC6816_mac',
    249: 'MC6816_pshmac',
    250: 'MC6816_pulmac',
    251: 'MC6816_rmac',
    252: 'MC6816_tdmsk',
    253: 'MC6816_tedm',
    254: 'MC6816_tem',
    255: 'MC6816_tmer',
    256: 'MC6816_tmet',
    257: 'MC6816_tmxed',
    258: 'MC6816_lpstop',
    259: 'MC6816_wai',
    260: 'MC6816_bgnd',
    261: 'MC6816_nop',
    262: 'MC6816_last',
}
MC6816_null = 0
MC6816_ldaa = 1
MC6816_ldab = 2
MC6816_ldd = 3
MC6816_lde = 4
MC6816_lded = 5
MC6816_movb = 6
MC6816_movw = 7
MC6816_staa = 8
MC6816_stab = 9
MC6816_std = 10
MC6816_ste = 11
MC6816_sted = 12
MC6816_tab = 13
MC6816_tba = 14
MC6816_tde = 15
MC6816_ted = 16
MC6816_xgab = 17
MC6816_xgde = 18
MC6816_aba = 19
MC6816_adca = 20
MC6816_adcb = 21
MC6816_adcd = 22
MC6816_adce = 23
MC6816_adda = 24
MC6816_addb = 25
MC6816_addd = 26
MC6816_adde = 27
MC6816_ade = 28
MC6816_sba = 29
MC6816_sbca = 30
MC6816_sbcb = 31
MC6816_sbcd = 32
MC6816_sbce = 33
MC6816_sde = 34
MC6816_suba = 35
MC6816_subb = 36
MC6816_subd = 37
MC6816_sube = 38
MC6816_daa = 39
MC6816_sxt = 40
MC6816_cba = 41
MC6816_cmpa = 42
MC6816_cmpb = 43
MC6816_cpd = 44
MC6816_cpe = 45
MC6816_tst = 46
MC6816_tsta = 47
MC6816_tstb = 48
MC6816_tstd = 49
MC6816_tste = 50
MC6816_tstw = 51
MC6816_ediv = 52
MC6816_edivs = 53
MC6816_emul = 54
MC6816_emuls = 55
MC6816_fdiv = 56
MC6816_fmuls = 57
MC6816_idiv = 58
MC6816_mul = 59
MC6816_dec = 60
MC6816_deca = 61
MC6816_decb = 62
MC6816_decw = 63
MC6816_inc = 64
MC6816_inca = 65
MC6816_incb = 66
MC6816_incw = 67
MC6816_clr = 68
MC6816_clra = 69
MC6816_clrb = 70
MC6816_clrd = 71
MC6816_clre = 72
MC6816_clrw = 73
MC6816_com = 74
MC6816_coma = 75
MC6816_comb = 76
MC6816_comd = 77
MC6816_come = 78
MC6816_comw = 79
MC6816_neg = 80
MC6816_nega = 81
MC6816_negb = 82
MC6816_negd = 83
MC6816_nege = 84
MC6816_negw = 85
MC6816_anda = 86
MC6816_andb = 87
MC6816_andd = 88
MC6816_ande = 89
MC6816_eora = 90
MC6816_eorb = 91
MC6816_eord = 92
MC6816_eore = 93
MC6816_oraa = 94
MC6816_orab = 95
MC6816_ord = 96
MC6816_ore = 97
MC6816_bita = 98
MC6816_bitb = 99
MC6816_bclr = 100
MC6816_bclrw = 101
MC6816_bset = 102
MC6816_bsetw = 103
MC6816_lsr = 104
MC6816_lsra = 105
MC6816_lsrb = 106
MC6816_lsrd = 107
MC6816_lsre = 108
MC6816_lsrw = 109
MC6816_asl = 110
MC6816_asla = 111
MC6816_aslb = 112
MC6816_asld = 113
MC6816_asle = 114
MC6816_aslw = 115
MC6816_asr = 116
MC6816_asra = 117
MC6816_asrb = 118
MC6816_asrd = 119
MC6816_asre = 120
MC6816_asrw = 121
MC6816_rol = 122
MC6816_rola = 123
MC6816_rolb = 124
MC6816_rold = 125
MC6816_role = 126
MC6816_rolw = 127
MC6816_ror = 128
MC6816_rora = 129
MC6816_rorb = 130
MC6816_rord = 131
MC6816_rore = 132
MC6816_rorw = 133
MC6816_bra = 134
MC6816_brn = 135
MC6816_bcc = 136
MC6816_bcs = 137
MC6816_beq = 138
MC6816_bmi = 139
MC6816_bne = 140
MC6816_bpl = 141
MC6816_bvc = 142
MC6816_bvs = 143
MC6816_bhi = 144
MC6816_bls = 145
MC6816_bge = 146
MC6816_bgt = 147
MC6816_ble = 148
MC6816_blt = 149
MC6816_lbra = 150
MC6816_lbrn = 151
MC6816_lbcc = 152
MC6816_lbcs = 153
MC6816_lbeq = 154
MC6816_lbev = 155
MC6816_lbmi = 156
MC6816_lbmv = 157
MC6816_lbne = 158
MC6816_lbpl = 159
MC6816_lbvc = 160
MC6816_lbvs = 161
MC6816_lbhi = 162
MC6816_lbls = 163
MC6816_lbge = 164
MC6816_lbgt = 165
MC6816_lble = 166
MC6816_lblt = 167
MC6816_brclr = 168
MC6816_brset = 169
MC6816_jmp = 170
MC6816_bsr = 171
MC6816_jsr = 172
MC6816_lbsr = 173
MC6816_rts = 174
MC6816_rti = 175
MC6816_swi = 176
MC6816_abx = 177
MC6816_aby = 178
MC6816_abz = 179
MC6816_adx = 180
MC6816_ady = 181
MC6816_adz = 182
MC6816_aex = 183
MC6816_aey = 184
MC6816_aez = 185
MC6816_aix = 186
MC6816_aiy = 187
MC6816_aiz = 188
MC6816_cpx = 189
MC6816_cpy = 190
MC6816_cpz = 191
MC6816_ldx = 192
MC6816_ldy = 193
MC6816_ldz = 194
MC6816_stx = 195
MC6816_sty = 196
MC6816_stz = 197
MC6816_tsx = 198
MC6816_tsy = 199
MC6816_tsz = 200
MC6816_txs = 201
MC6816_txy = 202
MC6816_txz = 203
MC6816_tys = 204
MC6816_tyx = 205
MC6816_tyz = 206
MC6816_tzs = 207
MC6816_tzx = 208
MC6816_tzy = 209
MC6816_xgdx = 210
MC6816_xgdy = 211
MC6816_xgdz = 212
MC6816_xgex = 213
MC6816_xgey = 214
MC6816_xgez = 215
MC6816_tbek = 216
MC6816_tbsk = 217
MC6816_tbxk = 218
MC6816_tbyk = 219
MC6816_tbzk = 220
MC6816_tekb = 221
MC6816_tskb = 222
MC6816_txkb = 223
MC6816_tykb = 224
MC6816_tzkb = 225
MC6816_ais = 226
MC6816_cps = 227
MC6816_lds = 228
MC6816_sts = 229
MC6816_psha = 230
MC6816_pshb = 231
MC6816_pshm = 232
MC6816_pula = 233
MC6816_pulb = 234
MC6816_pulm = 235
MC6816_andp = 236
MC6816_orp = 237
MC6816_tap = 238
MC6816_tdp = 239
MC6816_tpa = 240
MC6816_tpd = 241
MC6816_ace = 242
MC6816_aced = 243
MC6816_aslm = 244
MC6816_asrm = 245
MC6816_clrm = 246
MC6816_ldhi = 247
MC6816_mac = 248
MC6816_pshmac = 249
MC6816_pulmac = 250
MC6816_rmac = 251
MC6816_tdmsk = 252
MC6816_tedm = 253
MC6816_tem = 254
MC6816_tmer = 255
MC6816_tmet = 256
MC6816_tmxed = 257
MC6816_lpstop = 258
MC6816_wai = 259
MC6816_bgnd = 260
MC6816_nop = 261
MC6816_last = 262
_B5CB1DE07648BCF4F03AB285F94FB747 = ctypes.c_uint32 # enum

# values for enumeration '_6D0139603382ADA21D037DA823D2B357'
_6D0139603382ADA21D037DA823D2B357__enumvalues = {
    0: 'I960_null',
    1: 'I960_addc',
    2: 'I960_addi',
    3: 'I960_addo',
    4: 'I960_alterbit',
    5: 'I960_and',
    6: 'I960_andnot',
    7: 'I960_atadd',
    8: 'I960_atmod',
    9: 'I960_b',
    10: 'I960_bal',
    11: 'I960_balx',
    12: 'I960_bbc',
    13: 'I960_bbs',
    14: 'I960_bno',
    15: 'I960_bg',
    16: 'I960_be',
    17: 'I960_bge',
    18: 'I960_bl',
    19: 'I960_bne',
    20: 'I960_ble',
    21: 'I960_bo',
    22: 'I960_bx',
    23: 'I960_call',
    24: 'I960_calls',
    25: 'I960_callx',
    26: 'I960_chkbit',
    27: 'I960_clrbit',
    28: 'I960_cmpdeci',
    29: 'I960_cmpdeco',
    30: 'I960_cmpi',
    31: 'I960_cmpibno',
    32: 'I960_cmpibg',
    33: 'I960_cmpibe',
    34: 'I960_cmpibge',
    35: 'I960_cmpibl',
    36: 'I960_cmpibne',
    37: 'I960_cmpible',
    38: 'I960_cmpibo',
    39: 'I960_cmpinci',
    40: 'I960_cmpinco',
    41: 'I960_cmpo',
    42: 'I960_cmpobg',
    43: 'I960_cmpobe',
    44: 'I960_cmpobge',
    45: 'I960_cmpobl',
    46: 'I960_cmpobne',
    47: 'I960_cmpoble',
    48: 'I960_concmpi',
    49: 'I960_concmpo',
    50: 'I960_divi',
    51: 'I960_divo',
    52: 'I960_ediv',
    53: 'I960_emul',
    54: 'I960_eshro',
    55: 'I960_extract',
    56: 'I960_faultno',
    57: 'I960_faultg',
    58: 'I960_faulte',
    59: 'I960_faultge',
    60: 'I960_faultl',
    61: 'I960_faultne',
    62: 'I960_faultle',
    63: 'I960_faulto',
    64: 'I960_flushreg',
    65: 'I960_fmark',
    66: 'I960_ld',
    67: 'I960_lda',
    68: 'I960_ldib',
    69: 'I960_ldis',
    70: 'I960_ldl',
    71: 'I960_ldob',
    72: 'I960_ldos',
    73: 'I960_ldq',
    74: 'I960_ldt',
    75: 'I960_mark',
    76: 'I960_modac',
    77: 'I960_modi',
    78: 'I960_modify',
    79: 'I960_modpc',
    80: 'I960_modtc',
    81: 'I960_mov',
    82: 'I960_movl',
    83: 'I960_movq',
    84: 'I960_movt',
    85: 'I960_muli',
    86: 'I960_mulo',
    87: 'I960_nand',
    88: 'I960_nor',
    89: 'I960_not',
    90: 'I960_notand',
    91: 'I960_notbit',
    92: 'I960_notor',
    93: 'I960_or',
    94: 'I960_ornot',
    95: 'I960_remi',
    96: 'I960_remo',
    97: 'I960_ret',
    98: 'I960_rotate',
    99: 'I960_scanbit',
    100: 'I960_scanbyte',
    101: 'I960_setbit',
    102: 'I960_shli',
    103: 'I960_shlo',
    104: 'I960_shrdi',
    105: 'I960_shri',
    106: 'I960_shro',
    107: 'I960_spanbit',
    108: 'I960_st',
    109: 'I960_stib',
    110: 'I960_stis',
    111: 'I960_stl',
    112: 'I960_stob',
    113: 'I960_stos',
    114: 'I960_stq',
    115: 'I960_stt',
    116: 'I960_subc',
    117: 'I960_subi',
    118: 'I960_subo',
    119: 'I960_syncf',
    120: 'I960_testno',
    121: 'I960_testg',
    122: 'I960_teste',
    123: 'I960_testge',
    124: 'I960_testl',
    125: 'I960_testne',
    126: 'I960_testle',
    127: 'I960_testo',
    128: 'I960_xnor',
    129: 'I960_xor',
    130: 'I960_sdma',
    131: 'I960_sysctl',
    132: 'I960_udma',
    133: 'I960_dcinva',
    134: 'I960_cmpob',
    135: 'I960_cmpib',
    136: 'I960_cmpos',
    137: 'I960_cmpis',
    138: 'I960_bswap',
    139: 'I960_intdis',
    140: 'I960_inten',
    141: 'I960_synmov',
    142: 'I960_synmovl',
    143: 'I960_synmovq',
    144: 'I960_cmpstr',
    145: 'I960_movqstr',
    146: 'I960_movstr',
    147: 'I960_inspacc',
    148: 'I960_ldphy',
    149: 'I960_synld',
    150: 'I960_fill',
    151: 'I960_daddc',
    152: 'I960_dsubc',
    153: 'I960_dmovt',
    154: 'I960_condrec',
    155: 'I960_receive',
    156: 'I960_intctl',
    157: 'I960_icctl',
    158: 'I960_dcctl',
    159: 'I960_halt',
    160: 'I960_send',
    161: 'I960_sendserv',
    162: 'I960_resumprcs',
    163: 'I960_schedprcs',
    164: 'I960_saveprcs',
    165: 'I960_condwait',
    166: 'I960_wait',
    167: 'I960_signal',
    168: 'I960_ldtime',
    169: 'I960_addono',
    170: 'I960_addino',
    171: 'I960_subono',
    172: 'I960_subino',
    173: 'I960_selno',
    174: 'I960_addog',
    175: 'I960_addig',
    176: 'I960_subog',
    177: 'I960_subig',
    178: 'I960_selg',
    179: 'I960_addoe',
    180: 'I960_addie',
    181: 'I960_suboe',
    182: 'I960_subie',
    183: 'I960_sele',
    184: 'I960_addoge',
    185: 'I960_addige',
    186: 'I960_suboge',
    187: 'I960_subige',
    188: 'I960_selge',
    189: 'I960_addol',
    190: 'I960_addil',
    191: 'I960_subol',
    192: 'I960_subil',
    193: 'I960_sell',
    194: 'I960_addone',
    195: 'I960_addine',
    196: 'I960_subone',
    197: 'I960_subine',
    198: 'I960_selne',
    199: 'I960_addole',
    200: 'I960_addile',
    201: 'I960_subole',
    202: 'I960_subile',
    203: 'I960_selle',
    204: 'I960_addoo',
    205: 'I960_addio',
    206: 'I960_suboo',
    207: 'I960_subio',
    208: 'I960_selo',
    209: 'I960_faddr',
    209: 'I960_fp_first',
    210: 'I960_faddrl',
    211: 'I960_fatanr',
    212: 'I960_fatanrl',
    213: 'I960_fclassr',
    214: 'I960_fclassrl',
    215: 'I960_fcmpor',
    216: 'I960_fcmporl',
    217: 'I960_fcmpr',
    218: 'I960_fcmprl',
    219: 'I960_fcosr',
    220: 'I960_fcosrl',
    221: 'I960_fcpyrsre',
    222: 'I960_fcpysre',
    223: 'I960_fcvtilr',
    224: 'I960_fcvtir',
    225: 'I960_fcvtri',
    226: 'I960_fcvtril',
    227: 'I960_fcvtzri',
    228: 'I960_fcvtzril',
    229: 'I960_fdivr',
    230: 'I960_fdivrl',
    231: 'I960_fexpr',
    232: 'I960_fexprl',
    233: 'I960_flogbnr',
    234: 'I960_flogbnrl',
    235: 'I960_flogepr',
    236: 'I960_flogeprl',
    237: 'I960_flogr',
    238: 'I960_flogrl',
    239: 'I960_fmovr',
    240: 'I960_fmovre',
    241: 'I960_fmovrl',
    242: 'I960_fmulr',
    243: 'I960_fmulrl',
    244: 'I960_fremr',
    245: 'I960_fremrl',
    246: 'I960_froundr',
    247: 'I960_froundrl',
    248: 'I960_fscaler',
    249: 'I960_fscalerl',
    250: 'I960_fsinr',
    251: 'I960_fsinrl',
    252: 'I960_fsqrtr',
    253: 'I960_fsqrtrl',
    254: 'I960_fsubr',
    255: 'I960_fsubrl',
    256: 'I960_ftanr',
    257: 'I960_ftanrl',
    257: 'I960_fp_last',
    258: 'I960_last',
}
I960_null = 0
I960_addc = 1
I960_addi = 2
I960_addo = 3
I960_alterbit = 4
I960_and = 5
I960_andnot = 6
I960_atadd = 7
I960_atmod = 8
I960_b = 9
I960_bal = 10
I960_balx = 11
I960_bbc = 12
I960_bbs = 13
I960_bno = 14
I960_bg = 15
I960_be = 16
I960_bge = 17
I960_bl = 18
I960_bne = 19
I960_ble = 20
I960_bo = 21
I960_bx = 22
I960_call = 23
I960_calls = 24
I960_callx = 25
I960_chkbit = 26
I960_clrbit = 27
I960_cmpdeci = 28
I960_cmpdeco = 29
I960_cmpi = 30
I960_cmpibno = 31
I960_cmpibg = 32
I960_cmpibe = 33
I960_cmpibge = 34
I960_cmpibl = 35
I960_cmpibne = 36
I960_cmpible = 37
I960_cmpibo = 38
I960_cmpinci = 39
I960_cmpinco = 40
I960_cmpo = 41
I960_cmpobg = 42
I960_cmpobe = 43
I960_cmpobge = 44
I960_cmpobl = 45
I960_cmpobne = 46
I960_cmpoble = 47
I960_concmpi = 48
I960_concmpo = 49
I960_divi = 50
I960_divo = 51
I960_ediv = 52
I960_emul = 53
I960_eshro = 54
I960_extract = 55
I960_faultno = 56
I960_faultg = 57
I960_faulte = 58
I960_faultge = 59
I960_faultl = 60
I960_faultne = 61
I960_faultle = 62
I960_faulto = 63
I960_flushreg = 64
I960_fmark = 65
I960_ld = 66
I960_lda = 67
I960_ldib = 68
I960_ldis = 69
I960_ldl = 70
I960_ldob = 71
I960_ldos = 72
I960_ldq = 73
I960_ldt = 74
I960_mark = 75
I960_modac = 76
I960_modi = 77
I960_modify = 78
I960_modpc = 79
I960_modtc = 80
I960_mov = 81
I960_movl = 82
I960_movq = 83
I960_movt = 84
I960_muli = 85
I960_mulo = 86
I960_nand = 87
I960_nor = 88
I960_not = 89
I960_notand = 90
I960_notbit = 91
I960_notor = 92
I960_or = 93
I960_ornot = 94
I960_remi = 95
I960_remo = 96
I960_ret = 97
I960_rotate = 98
I960_scanbit = 99
I960_scanbyte = 100
I960_setbit = 101
I960_shli = 102
I960_shlo = 103
I960_shrdi = 104
I960_shri = 105
I960_shro = 106
I960_spanbit = 107
I960_st = 108
I960_stib = 109
I960_stis = 110
I960_stl = 111
I960_stob = 112
I960_stos = 113
I960_stq = 114
I960_stt = 115
I960_subc = 116
I960_subi = 117
I960_subo = 118
I960_syncf = 119
I960_testno = 120
I960_testg = 121
I960_teste = 122
I960_testge = 123
I960_testl = 124
I960_testne = 125
I960_testle = 126
I960_testo = 127
I960_xnor = 128
I960_xor = 129
I960_sdma = 130
I960_sysctl = 131
I960_udma = 132
I960_dcinva = 133
I960_cmpob = 134
I960_cmpib = 135
I960_cmpos = 136
I960_cmpis = 137
I960_bswap = 138
I960_intdis = 139
I960_inten = 140
I960_synmov = 141
I960_synmovl = 142
I960_synmovq = 143
I960_cmpstr = 144
I960_movqstr = 145
I960_movstr = 146
I960_inspacc = 147
I960_ldphy = 148
I960_synld = 149
I960_fill = 150
I960_daddc = 151
I960_dsubc = 152
I960_dmovt = 153
I960_condrec = 154
I960_receive = 155
I960_intctl = 156
I960_icctl = 157
I960_dcctl = 158
I960_halt = 159
I960_send = 160
I960_sendserv = 161
I960_resumprcs = 162
I960_schedprcs = 163
I960_saveprcs = 164
I960_condwait = 165
I960_wait = 166
I960_signal = 167
I960_ldtime = 168
I960_addono = 169
I960_addino = 170
I960_subono = 171
I960_subino = 172
I960_selno = 173
I960_addog = 174
I960_addig = 175
I960_subog = 176
I960_subig = 177
I960_selg = 178
I960_addoe = 179
I960_addie = 180
I960_suboe = 181
I960_subie = 182
I960_sele = 183
I960_addoge = 184
I960_addige = 185
I960_suboge = 186
I960_subige = 187
I960_selge = 188
I960_addol = 189
I960_addil = 190
I960_subol = 191
I960_subil = 192
I960_sell = 193
I960_addone = 194
I960_addine = 195
I960_subone = 196
I960_subine = 197
I960_selne = 198
I960_addole = 199
I960_addile = 200
I960_subole = 201
I960_subile = 202
I960_selle = 203
I960_addoo = 204
I960_addio = 205
I960_suboo = 206
I960_subio = 207
I960_selo = 208
I960_faddr = 209
I960_fp_first = 209
I960_faddrl = 210
I960_fatanr = 211
I960_fatanrl = 212
I960_fclassr = 213
I960_fclassrl = 214
I960_fcmpor = 215
I960_fcmporl = 216
I960_fcmpr = 217
I960_fcmprl = 218
I960_fcosr = 219
I960_fcosrl = 220
I960_fcpyrsre = 221
I960_fcpysre = 222
I960_fcvtilr = 223
I960_fcvtir = 224
I960_fcvtri = 225
I960_fcvtril = 226
I960_fcvtzri = 227
I960_fcvtzril = 228
I960_fdivr = 229
I960_fdivrl = 230
I960_fexpr = 231
I960_fexprl = 232
I960_flogbnr = 233
I960_flogbnrl = 234
I960_flogepr = 235
I960_flogeprl = 236
I960_flogr = 237
I960_flogrl = 238
I960_fmovr = 239
I960_fmovre = 240
I960_fmovrl = 241
I960_fmulr = 242
I960_fmulrl = 243
I960_fremr = 244
I960_fremrl = 245
I960_froundr = 246
I960_froundrl = 247
I960_fscaler = 248
I960_fscalerl = 249
I960_fsinr = 250
I960_fsinrl = 251
I960_fsqrtr = 252
I960_fsqrtrl = 253
I960_fsubr = 254
I960_fsubrl = 255
I960_ftanr = 256
I960_ftanrl = 257
I960_fp_last = 257
I960_last = 258
_6D0139603382ADA21D037DA823D2B357 = ctypes.c_uint32 # enum

# values for enumeration '_8F08DA40ECF14D480DBE0EC84D31330E'
_8F08DA40ECF14D480DBE0EC84D31330E__enumvalues = {
    0: 'F2MC_null',
    1: 'F2MC_mov',
    2: 'F2MC_movn',
    3: 'F2MC_movx',
    4: 'F2MC_xch',
    5: 'F2MC_movw',
    6: 'F2MC_xchw',
    7: 'F2MC_movl',
    8: 'F2MC_add',
    9: 'F2MC_addc1',
    10: 'F2MC_addc2',
    11: 'F2MC_adddc',
    12: 'F2MC_sub',
    13: 'F2MC_subc1',
    14: 'F2MC_subc2',
    15: 'F2MC_subdc',
    16: 'F2MC_addw1',
    17: 'F2MC_addw2',
    18: 'F2MC_addcw',
    19: 'F2MC_subw1',
    20: 'F2MC_subw2',
    21: 'F2MC_subcw',
    22: 'F2MC_addl',
    23: 'F2MC_subl',
    24: 'F2MC_inc',
    25: 'F2MC_dec',
    26: 'F2MC_incw',
    27: 'F2MC_decw',
    28: 'F2MC_incl',
    29: 'F2MC_decl',
    30: 'F2MC_cmp1',
    31: 'F2MC_cmp2',
    32: 'F2MC_cmpw1',
    33: 'F2MC_cmpw2',
    34: 'F2MC_cmpl',
    35: 'F2MC_divu1',
    36: 'F2MC_divu2',
    37: 'F2MC_divuw',
    38: 'F2MC_mulu1',
    39: 'F2MC_mulu2',
    40: 'F2MC_muluw1',
    41: 'F2MC_muluw2',
    42: 'F2MC_div1',
    43: 'F2MC_div2',
    44: 'F2MC_divw',
    45: 'F2MC_mul1',
    46: 'F2MC_mul2',
    47: 'F2MC_mulw1',
    48: 'F2MC_mulw2',
    49: 'F2MC_and',
    50: 'F2MC_or',
    51: 'F2MC_xor',
    52: 'F2MC_not',
    53: 'F2MC_andw1',
    54: 'F2MC_andw2',
    55: 'F2MC_orw1',
    56: 'F2MC_orw2',
    57: 'F2MC_xorw1',
    58: 'F2MC_xorw2',
    59: 'F2MC_notw',
    60: 'F2MC_andl',
    61: 'F2MC_orl',
    62: 'F2MC_xorl',
    63: 'F2MC_neg',
    64: 'F2MC_negw',
    65: 'F2MC_nrml',
    66: 'F2MC_rorc',
    67: 'F2MC_rolc',
    68: 'F2MC_asr',
    69: 'F2MC_lsr',
    70: 'F2MC_lsl',
    71: 'F2MC_asrw1',
    72: 'F2MC_asrw2',
    73: 'F2MC_lsrw1',
    74: 'F2MC_lsrw2',
    75: 'F2MC_lslw1',
    76: 'F2MC_lslw2',
    77: 'F2MC_asrl',
    78: 'F2MC_lsrl',
    79: 'F2MC_lsll',
    80: 'F2MC_bz',
    81: 'F2MC_bnz',
    82: 'F2MC_bc',
    83: 'F2MC_bnc',
    84: 'F2MC_bn',
    85: 'F2MC_bp',
    86: 'F2MC_bv',
    87: 'F2MC_bnv',
    88: 'F2MC_bt',
    89: 'F2MC_bnt',
    90: 'F2MC_blt',
    91: 'F2MC_bge',
    92: 'F2MC_ble',
    93: 'F2MC_bgt',
    94: 'F2MC_bls',
    95: 'F2MC_bhi',
    96: 'F2MC_bra',
    97: 'F2MC_jmp',
    98: 'F2MC_jmpp',
    99: 'F2MC_call',
    100: 'F2MC_callv',
    101: 'F2MC_callp',
    102: 'F2MC_cbne',
    103: 'F2MC_cwbne',
    104: 'F2MC_dbnz',
    105: 'F2MC_dwbnz',
    106: 'F2MC_int',
    107: 'F2MC_intp',
    108: 'F2MC_int9',
    109: 'F2MC_reti',
    110: 'F2MC_link',
    111: 'F2MC_unlink',
    112: 'F2MC_ret',
    113: 'F2MC_retp',
    114: 'F2MC_pushw',
    115: 'F2MC_popw',
    116: 'F2MC_jctx',
    117: 'F2MC_movea',
    118: 'F2MC_addsp',
    119: 'F2MC_nop',
    120: 'F2MC_adb',
    121: 'F2MC_dtb',
    122: 'F2MC_pcb',
    123: 'F2MC_spb',
    124: 'F2MC_ncc',
    125: 'F2MC_cmr',
    126: 'F2MC_movb',
    127: 'F2MC_setb',
    128: 'F2MC_clrb',
    129: 'F2MC_bbc',
    130: 'F2MC_bbs',
    131: 'F2MC_sbbs',
    132: 'F2MC_wbts',
    133: 'F2MC_wbtc',
    134: 'F2MC_swap',
    135: 'F2MC_swapw',
    136: 'F2MC_ext',
    137: 'F2MC_extw',
    138: 'F2MC_zext',
    139: 'F2MC_zextw',
    140: 'F2MC_movsi',
    141: 'F2MC_movsd',
    142: 'F2MC_sceqi',
    143: 'F2MC_sceqd',
    144: 'F2MC_filsi',
    145: 'F2MC_movswi',
    146: 'F2MC_movswd',
    147: 'F2MC_scweqi',
    148: 'F2MC_scweqd',
    149: 'F2MC_filswi',
    150: 'F2MC_bz16',
    151: 'F2MC_bnz16',
    152: 'F2MC_bc16',
    153: 'F2MC_bnc16',
    154: 'F2MC_bn16',
    155: 'F2MC_bp16',
    156: 'F2MC_bv16',
    157: 'F2MC_bnv16',
    158: 'F2MC_bt16',
    159: 'F2MC_bnt16',
    160: 'F2MC_blt16',
    161: 'F2MC_bge16',
    162: 'F2MC_ble16',
    163: 'F2MC_bgt16',
    164: 'F2MC_bls16',
    165: 'F2MC_bhi16',
    166: 'F2MC_cbne16',
    167: 'F2MC_cwbne16',
    168: 'F2MC_dbnz16',
    169: 'F2MC_dwbnz16',
    170: 'F2MC_bbc16',
    171: 'F2MC_bbs16',
    172: 'F2MC_sbbs16',
    173: 'F2MC_last',
}
F2MC_null = 0
F2MC_mov = 1
F2MC_movn = 2
F2MC_movx = 3
F2MC_xch = 4
F2MC_movw = 5
F2MC_xchw = 6
F2MC_movl = 7
F2MC_add = 8
F2MC_addc1 = 9
F2MC_addc2 = 10
F2MC_adddc = 11
F2MC_sub = 12
F2MC_subc1 = 13
F2MC_subc2 = 14
F2MC_subdc = 15
F2MC_addw1 = 16
F2MC_addw2 = 17
F2MC_addcw = 18
F2MC_subw1 = 19
F2MC_subw2 = 20
F2MC_subcw = 21
F2MC_addl = 22
F2MC_subl = 23
F2MC_inc = 24
F2MC_dec = 25
F2MC_incw = 26
F2MC_decw = 27
F2MC_incl = 28
F2MC_decl = 29
F2MC_cmp1 = 30
F2MC_cmp2 = 31
F2MC_cmpw1 = 32
F2MC_cmpw2 = 33
F2MC_cmpl = 34
F2MC_divu1 = 35
F2MC_divu2 = 36
F2MC_divuw = 37
F2MC_mulu1 = 38
F2MC_mulu2 = 39
F2MC_muluw1 = 40
F2MC_muluw2 = 41
F2MC_div1 = 42
F2MC_div2 = 43
F2MC_divw = 44
F2MC_mul1 = 45
F2MC_mul2 = 46
F2MC_mulw1 = 47
F2MC_mulw2 = 48
F2MC_and = 49
F2MC_or = 50
F2MC_xor = 51
F2MC_not = 52
F2MC_andw1 = 53
F2MC_andw2 = 54
F2MC_orw1 = 55
F2MC_orw2 = 56
F2MC_xorw1 = 57
F2MC_xorw2 = 58
F2MC_notw = 59
F2MC_andl = 60
F2MC_orl = 61
F2MC_xorl = 62
F2MC_neg = 63
F2MC_negw = 64
F2MC_nrml = 65
F2MC_rorc = 66
F2MC_rolc = 67
F2MC_asr = 68
F2MC_lsr = 69
F2MC_lsl = 70
F2MC_asrw1 = 71
F2MC_asrw2 = 72
F2MC_lsrw1 = 73
F2MC_lsrw2 = 74
F2MC_lslw1 = 75
F2MC_lslw2 = 76
F2MC_asrl = 77
F2MC_lsrl = 78
F2MC_lsll = 79
F2MC_bz = 80
F2MC_bnz = 81
F2MC_bc = 82
F2MC_bnc = 83
F2MC_bn = 84
F2MC_bp = 85
F2MC_bv = 86
F2MC_bnv = 87
F2MC_bt = 88
F2MC_bnt = 89
F2MC_blt = 90
F2MC_bge = 91
F2MC_ble = 92
F2MC_bgt = 93
F2MC_bls = 94
F2MC_bhi = 95
F2MC_bra = 96
F2MC_jmp = 97
F2MC_jmpp = 98
F2MC_call = 99
F2MC_callv = 100
F2MC_callp = 101
F2MC_cbne = 102
F2MC_cwbne = 103
F2MC_dbnz = 104
F2MC_dwbnz = 105
F2MC_int = 106
F2MC_intp = 107
F2MC_int9 = 108
F2MC_reti = 109
F2MC_link = 110
F2MC_unlink = 111
F2MC_ret = 112
F2MC_retp = 113
F2MC_pushw = 114
F2MC_popw = 115
F2MC_jctx = 116
F2MC_movea = 117
F2MC_addsp = 118
F2MC_nop = 119
F2MC_adb = 120
F2MC_dtb = 121
F2MC_pcb = 122
F2MC_spb = 123
F2MC_ncc = 124
F2MC_cmr = 125
F2MC_movb = 126
F2MC_setb = 127
F2MC_clrb = 128
F2MC_bbc = 129
F2MC_bbs = 130
F2MC_sbbs = 131
F2MC_wbts = 132
F2MC_wbtc = 133
F2MC_swap = 134
F2MC_swapw = 135
F2MC_ext = 136
F2MC_extw = 137
F2MC_zext = 138
F2MC_zextw = 139
F2MC_movsi = 140
F2MC_movsd = 141
F2MC_sceqi = 142
F2MC_sceqd = 143
F2MC_filsi = 144
F2MC_movswi = 145
F2MC_movswd = 146
F2MC_scweqi = 147
F2MC_scweqd = 148
F2MC_filswi = 149
F2MC_bz16 = 150
F2MC_bnz16 = 151
F2MC_bc16 = 152
F2MC_bnc16 = 153
F2MC_bn16 = 154
F2MC_bp16 = 155
F2MC_bv16 = 156
F2MC_bnv16 = 157
F2MC_bt16 = 158
F2MC_bnt16 = 159
F2MC_blt16 = 160
F2MC_bge16 = 161
F2MC_ble16 = 162
F2MC_bgt16 = 163
F2MC_bls16 = 164
F2MC_bhi16 = 165
F2MC_cbne16 = 166
F2MC_cwbne16 = 167
F2MC_dbnz16 = 168
F2MC_dwbnz16 = 169
F2MC_bbc16 = 170
F2MC_bbs16 = 171
F2MC_sbbs16 = 172
F2MC_last = 173
_8F08DA40ECF14D480DBE0EC84D31330E = ctypes.c_uint32 # enum

# values for enumeration '_5D98514AD4CB29C17D57D9341C7849E3'
_5D98514AD4CB29C17D57D9341C7849E3__enumvalues = {
    0: 'TMS320C3X_null',
    1: 'TMS320C3X_ABSF',
    2: 'TMS320C3X_ABSI',
    3: 'TMS320C3X_ADDC',
    4: 'TMS320C3X_ADDF',
    5: 'TMS320C3X_ADDI',
    6: 'TMS320C3X_AND',
    7: 'TMS320C3X_ANDN',
    8: 'TMS320C3X_ASH',
    9: 'TMS320C3X_CMPF',
    10: 'TMS320C3X_CMPI',
    11: 'TMS320C3X_FIX',
    12: 'TMS320C3X_FLOAT',
    13: 'TMS320C3X_IDLE',
    14: 'TMS320C3X_IDLE2',
    15: 'TMS320C3X_LDE',
    16: 'TMS320C3X_LDF',
    17: 'TMS320C3X_LDFI',
    18: 'TMS320C3X_LDI',
    19: 'TMS320C3X_LDII',
    20: 'TMS320C3X_LDM',
    21: 'TMS320C3X_LSH',
    22: 'TMS320C3X_MPYF',
    23: 'TMS320C3X_MPYI',
    24: 'TMS320C3X_NEGB',
    25: 'TMS320C3X_NEGF',
    26: 'TMS320C3X_NEGI',
    27: 'TMS320C3X_NOP',
    28: 'TMS320C3X_NORM',
    29: 'TMS320C3X_NOT',
    30: 'TMS320C3X_POP',
    31: 'TMS320C3X_POPF',
    32: 'TMS320C3X_PUSH',
    33: 'TMS320C3X_PUSHF',
    34: 'TMS320C3X_OR',
    35: 'TMS320C3X_LOPOWER',
    36: 'TMS320C3X_MAXSPEED',
    37: 'TMS320C3X_RND',
    38: 'TMS320C3X_ROL',
    39: 'TMS320C3X_ROLC',
    40: 'TMS320C3X_ROR',
    41: 'TMS320C3X_RORC',
    42: 'TMS320C3X_RPTS',
    43: 'TMS320C3X_STF',
    44: 'TMS320C3X_STFI',
    45: 'TMS320C3X_STI',
    46: 'TMS320C3X_STII',
    47: 'TMS320C3X_SIGI',
    48: 'TMS320C3X_SUBB',
    49: 'TMS320C3X_SUBC',
    50: 'TMS320C3X_SUBF',
    51: 'TMS320C3X_SUBI',
    52: 'TMS320C3X_SUBRB',
    53: 'TMS320C3X_SUBRF',
    54: 'TMS320C3X_SUBRI',
    55: 'TMS320C3X_TSTB',
    56: 'TMS320C3X_XOR',
    57: 'TMS320C3X_IACK',
    58: 'TMS320C3X_ADDC3',
    59: 'TMS320C3X_ADDF3',
    60: 'TMS320C3X_ADDI3',
    61: 'TMS320C3X_AND3',
    62: 'TMS320C3X_ANDN3',
    63: 'TMS320C3X_ASH3',
    64: 'TMS320C3X_CMPF3',
    65: 'TMS320C3X_CMPI3',
    66: 'TMS320C3X_LSH3',
    67: 'TMS320C3X_MPYF3',
    68: 'TMS320C3X_MPYI3',
    69: 'TMS320C3X_OR3',
    70: 'TMS320C3X_SUBB3',
    71: 'TMS320C3X_SUBF3',
    72: 'TMS320C3X_SUBI3',
    73: 'TMS320C3X_TSTB3',
    74: 'TMS320C3X_XOR3',
    75: 'TMS320C3X_LDFcond',
    76: 'TMS320C3X_LDIcond',
    77: 'TMS320C3X_BR',
    78: 'TMS320C3X_BRD',
    79: 'TMS320C3X_CALL',
    80: 'TMS320C3X_RPTB',
    81: 'TMS320C3X_SWI',
    82: 'TMS320C3X_Bcond',
    83: 'TMS320C3X_DBcond',
    84: 'TMS320C3X_CALLcond',
    85: 'TMS320C3X_TRAPcond',
    86: 'TMS320C3X_RETIcond',
    87: 'TMS320C3X_RETScond',
    88: 'TMS320C3X_RETIU',
    89: 'TMS320C3X_RETSU',
    90: 'TMS320C3X_NONE',
    91: 'TMS320C3X_MV_IDX',
    92: 'TMS320C3X_last',
}
TMS320C3X_null = 0
TMS320C3X_ABSF = 1
TMS320C3X_ABSI = 2
TMS320C3X_ADDC = 3
TMS320C3X_ADDF = 4
TMS320C3X_ADDI = 5
TMS320C3X_AND = 6
TMS320C3X_ANDN = 7
TMS320C3X_ASH = 8
TMS320C3X_CMPF = 9
TMS320C3X_CMPI = 10
TMS320C3X_FIX = 11
TMS320C3X_FLOAT = 12
TMS320C3X_IDLE = 13
TMS320C3X_IDLE2 = 14
TMS320C3X_LDE = 15
TMS320C3X_LDF = 16
TMS320C3X_LDFI = 17
TMS320C3X_LDI = 18
TMS320C3X_LDII = 19
TMS320C3X_LDM = 20
TMS320C3X_LSH = 21
TMS320C3X_MPYF = 22
TMS320C3X_MPYI = 23
TMS320C3X_NEGB = 24
TMS320C3X_NEGF = 25
TMS320C3X_NEGI = 26
TMS320C3X_NOP = 27
TMS320C3X_NORM = 28
TMS320C3X_NOT = 29
TMS320C3X_POP = 30
TMS320C3X_POPF = 31
TMS320C3X_PUSH = 32
TMS320C3X_PUSHF = 33
TMS320C3X_OR = 34
TMS320C3X_LOPOWER = 35
TMS320C3X_MAXSPEED = 36
TMS320C3X_RND = 37
TMS320C3X_ROL = 38
TMS320C3X_ROLC = 39
TMS320C3X_ROR = 40
TMS320C3X_RORC = 41
TMS320C3X_RPTS = 42
TMS320C3X_STF = 43
TMS320C3X_STFI = 44
TMS320C3X_STI = 45
TMS320C3X_STII = 46
TMS320C3X_SIGI = 47
TMS320C3X_SUBB = 48
TMS320C3X_SUBC = 49
TMS320C3X_SUBF = 50
TMS320C3X_SUBI = 51
TMS320C3X_SUBRB = 52
TMS320C3X_SUBRF = 53
TMS320C3X_SUBRI = 54
TMS320C3X_TSTB = 55
TMS320C3X_XOR = 56
TMS320C3X_IACK = 57
TMS320C3X_ADDC3 = 58
TMS320C3X_ADDF3 = 59
TMS320C3X_ADDI3 = 60
TMS320C3X_AND3 = 61
TMS320C3X_ANDN3 = 62
TMS320C3X_ASH3 = 63
TMS320C3X_CMPF3 = 64
TMS320C3X_CMPI3 = 65
TMS320C3X_LSH3 = 66
TMS320C3X_MPYF3 = 67
TMS320C3X_MPYI3 = 68
TMS320C3X_OR3 = 69
TMS320C3X_SUBB3 = 70
TMS320C3X_SUBF3 = 71
TMS320C3X_SUBI3 = 72
TMS320C3X_TSTB3 = 73
TMS320C3X_XOR3 = 74
TMS320C3X_LDFcond = 75
TMS320C3X_LDIcond = 76
TMS320C3X_BR = 77
TMS320C3X_BRD = 78
TMS320C3X_CALL = 79
TMS320C3X_RPTB = 80
TMS320C3X_SWI = 81
TMS320C3X_Bcond = 82
TMS320C3X_DBcond = 83
TMS320C3X_CALLcond = 84
TMS320C3X_TRAPcond = 85
TMS320C3X_RETIcond = 86
TMS320C3X_RETScond = 87
TMS320C3X_RETIU = 88
TMS320C3X_RETSU = 89
TMS320C3X_NONE = 90
TMS320C3X_MV_IDX = 91
TMS320C3X_last = 92
_5D98514AD4CB29C17D57D9341C7849E3 = ctypes.c_uint32 # enum

# values for enumeration '_E0BD59A46085D913189C6FE64651B19C'
_E0BD59A46085D913189C6FE64651B19C__enumvalues = {
    0: 'TMS320C54_null',
    1: 'TMS320C54_add1',
    2: 'TMS320C54_add2',
    3: 'TMS320C54_add3',
    4: 'TMS320C54_addc',
    5: 'TMS320C54_addm',
    6: 'TMS320C54_adds',
    7: 'TMS320C54_sub1',
    8: 'TMS320C54_sub2',
    9: 'TMS320C54_sub3',
    10: 'TMS320C54_subb',
    11: 'TMS320C54_subc',
    12: 'TMS320C54_subs',
    13: 'TMS320C54_mpy2',
    14: 'TMS320C54_mpy3',
    15: 'TMS320C54_mpyr2',
    16: 'TMS320C54_mpya',
    17: 'TMS320C54_mpyu',
    18: 'TMS320C54_squr',
    19: 'TMS320C54_mac2',
    20: 'TMS320C54_mac3',
    21: 'TMS320C54_macr2',
    22: 'TMS320C54_macr3',
    23: 'TMS320C54_maca1',
    24: 'TMS320C54_maca2',
    25: 'TMS320C54_maca3',
    26: 'TMS320C54_macar1',
    27: 'TMS320C54_macar2',
    28: 'TMS320C54_macar3',
    29: 'TMS320C54_macd',
    30: 'TMS320C54_macp',
    31: 'TMS320C54_macsu',
    32: 'TMS320C54_mas2',
    33: 'TMS320C54_mas3',
    34: 'TMS320C54_masr2',
    35: 'TMS320C54_masr3',
    36: 'TMS320C54_masa1',
    37: 'TMS320C54_masa2',
    38: 'TMS320C54_masa3',
    39: 'TMS320C54_masar1',
    40: 'TMS320C54_masar2',
    41: 'TMS320C54_masar3',
    42: 'TMS320C54_squra',
    43: 'TMS320C54_squrs',
    44: 'TMS320C54_dadd2',
    45: 'TMS320C54_dadd3',
    46: 'TMS320C54_dadst',
    47: 'TMS320C54_drsub',
    48: 'TMS320C54_dsadt',
    49: 'TMS320C54_dsub',
    50: 'TMS320C54_dsubt',
    51: 'TMS320C54_abdst',
    52: 'TMS320C54_abs1',
    53: 'TMS320C54_abs2',
    54: 'TMS320C54_cmpl1',
    55: 'TMS320C54_cmpl2',
    56: 'TMS320C54_delay',
    57: 'TMS320C54_exp',
    58: 'TMS320C54_firs',
    59: 'TMS320C54_lms',
    60: 'TMS320C54_max',
    61: 'TMS320C54_min',
    62: 'TMS320C54_neg1',
    63: 'TMS320C54_neg2',
    64: 'TMS320C54_norm1',
    65: 'TMS320C54_norm2',
    66: 'TMS320C54_poly',
    67: 'TMS320C54_rnd1',
    68: 'TMS320C54_rnd2',
    69: 'TMS320C54_sat',
    70: 'TMS320C54_sqdst',
    71: 'TMS320C54_and1',
    72: 'TMS320C54_and2',
    73: 'TMS320C54_and3',
    74: 'TMS320C54_andm',
    75: 'TMS320C54_or1',
    76: 'TMS320C54_or2',
    77: 'TMS320C54_or3',
    78: 'TMS320C54_orm',
    79: 'TMS320C54_xor1',
    80: 'TMS320C54_xor2',
    81: 'TMS320C54_xor3',
    82: 'TMS320C54_xorm',
    83: 'TMS320C54_rol',
    84: 'TMS320C54_roltc',
    85: 'TMS320C54_ror',
    86: 'TMS320C54_sfta2',
    87: 'TMS320C54_sfta3',
    88: 'TMS320C54_sftc',
    89: 'TMS320C54_sftl2',
    90: 'TMS320C54_sftl3',
    91: 'TMS320C54_bit',
    92: 'TMS320C54_bitf',
    93: 'TMS320C54_bitt',
    94: 'TMS320C54_cmpm',
    95: 'TMS320C54_cmpr',
    96: 'TMS320C54_b',
    97: 'TMS320C54_bd',
    98: 'TMS320C54_bacc',
    99: 'TMS320C54_baccd',
    100: 'TMS320C54_banz',
    101: 'TMS320C54_banzd',
    102: 'TMS320C54_bc2',
    103: 'TMS320C54_bc3',
    104: 'TMS320C54_bcd2',
    105: 'TMS320C54_bcd3',
    106: 'TMS320C54_fb',
    107: 'TMS320C54_fbd',
    108: 'TMS320C54_fbacc',
    109: 'TMS320C54_fbaccd',
    110: 'TMS320C54_cala',
    111: 'TMS320C54_calad',
    112: 'TMS320C54_call',
    113: 'TMS320C54_calld',
    114: 'TMS320C54_cc2',
    115: 'TMS320C54_cc3',
    116: 'TMS320C54_ccd2',
    117: 'TMS320C54_ccd3',
    118: 'TMS320C54_fcala',
    119: 'TMS320C54_fcalad',
    120: 'TMS320C54_fcall',
    121: 'TMS320C54_fcalld',
    122: 'TMS320C54_intr',
    123: 'TMS320C54_trap',
    124: 'TMS320C54_fret',
    125: 'TMS320C54_fretd',
    126: 'TMS320C54_frete',
    127: 'TMS320C54_freted',
    128: 'TMS320C54_rc1',
    129: 'TMS320C54_rc2',
    130: 'TMS320C54_rc3',
    131: 'TMS320C54_rcd1',
    132: 'TMS320C54_rcd2',
    133: 'TMS320C54_rcd3',
    134: 'TMS320C54_ret',
    135: 'TMS320C54_retd',
    136: 'TMS320C54_rete',
    137: 'TMS320C54_reted',
    138: 'TMS320C54_retf',
    139: 'TMS320C54_retfd',
    140: 'TMS320C54_rpt',
    141: 'TMS320C54_rptb',
    142: 'TMS320C54_rptbd',
    143: 'TMS320C54_rptz',
    144: 'TMS320C54_frame',
    145: 'TMS320C54_popd',
    146: 'TMS320C54_popm',
    147: 'TMS320C54_pshd',
    148: 'TMS320C54_pshm',
    149: 'TMS320C54_idle',
    150: 'TMS320C54_mar',
    151: 'TMS320C54_nop',
    152: 'TMS320C54_reset',
    153: 'TMS320C54_rsbx1',
    154: 'TMS320C54_rsbx2',
    155: 'TMS320C54_ssbx1',
    156: 'TMS320C54_ssbx2',
    157: 'TMS320C54_xc2',
    158: 'TMS320C54_xc3',
    159: 'TMS320C54_dld',
    160: 'TMS320C54_ld1',
    161: 'TMS320C54_ld2',
    162: 'TMS320C54_ld3',
    163: 'TMS320C54_ldm',
    164: 'TMS320C54_ldr',
    165: 'TMS320C54_ldu',
    166: 'TMS320C54_ltd',
    167: 'TMS320C54_dst',
    168: 'TMS320C54_st',
    169: 'TMS320C54_sth2',
    170: 'TMS320C54_sth3',
    171: 'TMS320C54_stl2',
    172: 'TMS320C54_stl3',
    173: 'TMS320C54_stlm',
    174: 'TMS320C54_stm',
    175: 'TMS320C54_cmps',
    176: 'TMS320C54_saccd',
    177: 'TMS320C54_srccd',
    178: 'TMS320C54_strcd',
    179: 'TMS320C54_st_ld',
    180: 'TMS320C54_ld_mac',
    181: 'TMS320C54_ld_macr',
    182: 'TMS320C54_ld_mas',
    183: 'TMS320C54_ld_masr',
    184: 'TMS320C54_st_add',
    185: 'TMS320C54_st_sub',
    186: 'TMS320C54_st_mac',
    187: 'TMS320C54_st_macr',
    188: 'TMS320C54_st_mas',
    189: 'TMS320C54_st_masr',
    190: 'TMS320C54_st_mpy',
    191: 'TMS320C54_mvdd',
    192: 'TMS320C54_mvdk',
    193: 'TMS320C54_mvdm',
    194: 'TMS320C54_mvdp',
    195: 'TMS320C54_mvkd',
    196: 'TMS320C54_mvmd',
    197: 'TMS320C54_mvmm',
    198: 'TMS320C54_mvpd',
    199: 'TMS320C54_portr',
    200: 'TMS320C54_portw',
    201: 'TMS320C54_reada',
    202: 'TMS320C54_writa',
    203: 'TMS320C54_last',
}
TMS320C54_null = 0
TMS320C54_add1 = 1
TMS320C54_add2 = 2
TMS320C54_add3 = 3
TMS320C54_addc = 4
TMS320C54_addm = 5
TMS320C54_adds = 6
TMS320C54_sub1 = 7
TMS320C54_sub2 = 8
TMS320C54_sub3 = 9
TMS320C54_subb = 10
TMS320C54_subc = 11
TMS320C54_subs = 12
TMS320C54_mpy2 = 13
TMS320C54_mpy3 = 14
TMS320C54_mpyr2 = 15
TMS320C54_mpya = 16
TMS320C54_mpyu = 17
TMS320C54_squr = 18
TMS320C54_mac2 = 19
TMS320C54_mac3 = 20
TMS320C54_macr2 = 21
TMS320C54_macr3 = 22
TMS320C54_maca1 = 23
TMS320C54_maca2 = 24
TMS320C54_maca3 = 25
TMS320C54_macar1 = 26
TMS320C54_macar2 = 27
TMS320C54_macar3 = 28
TMS320C54_macd = 29
TMS320C54_macp = 30
TMS320C54_macsu = 31
TMS320C54_mas2 = 32
TMS320C54_mas3 = 33
TMS320C54_masr2 = 34
TMS320C54_masr3 = 35
TMS320C54_masa1 = 36
TMS320C54_masa2 = 37
TMS320C54_masa3 = 38
TMS320C54_masar1 = 39
TMS320C54_masar2 = 40
TMS320C54_masar3 = 41
TMS320C54_squra = 42
TMS320C54_squrs = 43
TMS320C54_dadd2 = 44
TMS320C54_dadd3 = 45
TMS320C54_dadst = 46
TMS320C54_drsub = 47
TMS320C54_dsadt = 48
TMS320C54_dsub = 49
TMS320C54_dsubt = 50
TMS320C54_abdst = 51
TMS320C54_abs1 = 52
TMS320C54_abs2 = 53
TMS320C54_cmpl1 = 54
TMS320C54_cmpl2 = 55
TMS320C54_delay = 56
TMS320C54_exp = 57
TMS320C54_firs = 58
TMS320C54_lms = 59
TMS320C54_max = 60
TMS320C54_min = 61
TMS320C54_neg1 = 62
TMS320C54_neg2 = 63
TMS320C54_norm1 = 64
TMS320C54_norm2 = 65
TMS320C54_poly = 66
TMS320C54_rnd1 = 67
TMS320C54_rnd2 = 68
TMS320C54_sat = 69
TMS320C54_sqdst = 70
TMS320C54_and1 = 71
TMS320C54_and2 = 72
TMS320C54_and3 = 73
TMS320C54_andm = 74
TMS320C54_or1 = 75
TMS320C54_or2 = 76
TMS320C54_or3 = 77
TMS320C54_orm = 78
TMS320C54_xor1 = 79
TMS320C54_xor2 = 80
TMS320C54_xor3 = 81
TMS320C54_xorm = 82
TMS320C54_rol = 83
TMS320C54_roltc = 84
TMS320C54_ror = 85
TMS320C54_sfta2 = 86
TMS320C54_sfta3 = 87
TMS320C54_sftc = 88
TMS320C54_sftl2 = 89
TMS320C54_sftl3 = 90
TMS320C54_bit = 91
TMS320C54_bitf = 92
TMS320C54_bitt = 93
TMS320C54_cmpm = 94
TMS320C54_cmpr = 95
TMS320C54_b = 96
TMS320C54_bd = 97
TMS320C54_bacc = 98
TMS320C54_baccd = 99
TMS320C54_banz = 100
TMS320C54_banzd = 101
TMS320C54_bc2 = 102
TMS320C54_bc3 = 103
TMS320C54_bcd2 = 104
TMS320C54_bcd3 = 105
TMS320C54_fb = 106
TMS320C54_fbd = 107
TMS320C54_fbacc = 108
TMS320C54_fbaccd = 109
TMS320C54_cala = 110
TMS320C54_calad = 111
TMS320C54_call = 112
TMS320C54_calld = 113
TMS320C54_cc2 = 114
TMS320C54_cc3 = 115
TMS320C54_ccd2 = 116
TMS320C54_ccd3 = 117
TMS320C54_fcala = 118
TMS320C54_fcalad = 119
TMS320C54_fcall = 120
TMS320C54_fcalld = 121
TMS320C54_intr = 122
TMS320C54_trap = 123
TMS320C54_fret = 124
TMS320C54_fretd = 125
TMS320C54_frete = 126
TMS320C54_freted = 127
TMS320C54_rc1 = 128
TMS320C54_rc2 = 129
TMS320C54_rc3 = 130
TMS320C54_rcd1 = 131
TMS320C54_rcd2 = 132
TMS320C54_rcd3 = 133
TMS320C54_ret = 134
TMS320C54_retd = 135
TMS320C54_rete = 136
TMS320C54_reted = 137
TMS320C54_retf = 138
TMS320C54_retfd = 139
TMS320C54_rpt = 140
TMS320C54_rptb = 141
TMS320C54_rptbd = 142
TMS320C54_rptz = 143
TMS320C54_frame = 144
TMS320C54_popd = 145
TMS320C54_popm = 146
TMS320C54_pshd = 147
TMS320C54_pshm = 148
TMS320C54_idle = 149
TMS320C54_mar = 150
TMS320C54_nop = 151
TMS320C54_reset = 152
TMS320C54_rsbx1 = 153
TMS320C54_rsbx2 = 154
TMS320C54_ssbx1 = 155
TMS320C54_ssbx2 = 156
TMS320C54_xc2 = 157
TMS320C54_xc3 = 158
TMS320C54_dld = 159
TMS320C54_ld1 = 160
TMS320C54_ld2 = 161
TMS320C54_ld3 = 162
TMS320C54_ldm = 163
TMS320C54_ldr = 164
TMS320C54_ldu = 165
TMS320C54_ltd = 166
TMS320C54_dst = 167
TMS320C54_st = 168
TMS320C54_sth2 = 169
TMS320C54_sth3 = 170
TMS320C54_stl2 = 171
TMS320C54_stl3 = 172
TMS320C54_stlm = 173
TMS320C54_stm = 174
TMS320C54_cmps = 175
TMS320C54_saccd = 176
TMS320C54_srccd = 177
TMS320C54_strcd = 178
TMS320C54_st_ld = 179
TMS320C54_ld_mac = 180
TMS320C54_ld_macr = 181
TMS320C54_ld_mas = 182
TMS320C54_ld_masr = 183
TMS320C54_st_add = 184
TMS320C54_st_sub = 185
TMS320C54_st_mac = 186
TMS320C54_st_macr = 187
TMS320C54_st_mas = 188
TMS320C54_st_masr = 189
TMS320C54_st_mpy = 190
TMS320C54_mvdd = 191
TMS320C54_mvdk = 192
TMS320C54_mvdm = 193
TMS320C54_mvdp = 194
TMS320C54_mvkd = 195
TMS320C54_mvmd = 196
TMS320C54_mvmm = 197
TMS320C54_mvpd = 198
TMS320C54_portr = 199
TMS320C54_portw = 200
TMS320C54_reada = 201
TMS320C54_writa = 202
TMS320C54_last = 203
_E0BD59A46085D913189C6FE64651B19C = ctypes.c_uint32 # enum

# values for enumeration '_E8B3A4BD16D91BFD04BCF73BD6E0E61A'
_E8B3A4BD16D91BFD04BCF73BD6E0E61A__enumvalues = {
    0: 'TMS320C55_null',
    1: 'TMS320C55_abdst',
    2: 'TMS320C55_abs1',
    3: 'TMS320C55_abs2',
    4: 'TMS320C55_add1',
    5: 'TMS320C55_add2',
    6: 'TMS320C55_add3',
    7: 'TMS320C55_add4',
    8: 'TMS320C55_addv1',
    9: 'TMS320C55_addv2',
    10: 'TMS320C55_addrv1',
    11: 'TMS320C55_addrv2',
    12: 'TMS320C55_maxdiff',
    13: 'TMS320C55_dmaxdiff',
    14: 'TMS320C55_mindiff',
    15: 'TMS320C55_dmindiff',
    16: 'TMS320C55_addsubcc4',
    17: 'TMS320C55_addsubcc5',
    18: 'TMS320C55_addsub2cc',
    19: 'TMS320C55_sftcc',
    20: 'TMS320C55_subc2',
    21: 'TMS320C55_subc3',
    22: 'TMS320C55_addsub',
    23: 'TMS320C55_subadd',
    24: 'TMS320C55_mpy_mpy',
    25: 'TMS320C55_mpy_mpyr',
    26: 'TMS320C55_mpy_mpy40',
    27: 'TMS320C55_mpy_mpyr40',
    28: 'TMS320C55_mac_mpy',
    29: 'TMS320C55_macr_mpyr',
    30: 'TMS320C55_mac40_mpy40',
    31: 'TMS320C55_macr40_mpyr40',
    32: 'TMS320C55_mas_mpy',
    33: 'TMS320C55_masr_mpyr',
    34: 'TMS320C55_mas40_mpy40',
    35: 'TMS320C55_masr40_mpyr40',
    36: 'TMS320C55_amar_mpy',
    37: 'TMS320C55_amar_mpyr',
    38: 'TMS320C55_amar_mpy40',
    39: 'TMS320C55_amar_mpyr40',
    40: 'TMS320C55_mac_mac',
    41: 'TMS320C55_macr_macr',
    42: 'TMS320C55_mac40_mac40',
    43: 'TMS320C55_macr40_macr40',
    44: 'TMS320C55_mas_mac',
    45: 'TMS320C55_masr_macr',
    46: 'TMS320C55_mas40_mac40',
    47: 'TMS320C55_masr40_macr40',
    48: 'TMS320C55_amar_mac',
    49: 'TMS320C55_amar_macr',
    50: 'TMS320C55_amar_mac40',
    51: 'TMS320C55_amar_macr40',
    52: 'TMS320C55_mas_mas',
    53: 'TMS320C55_masr_masr',
    54: 'TMS320C55_mas40_mas40',
    55: 'TMS320C55_masr40_masr40',
    56: 'TMS320C55_amar_mas',
    57: 'TMS320C55_amar_masr',
    58: 'TMS320C55_amar_mas40',
    59: 'TMS320C55_amar_masr40',
    60: 'TMS320C55_mpy_mac',
    61: 'TMS320C55_mpyr_macr',
    62: 'TMS320C55_mpy40_mac40',
    63: 'TMS320C55_mpyr40_macr40',
    64: 'TMS320C55_amar3',
    65: 'TMS320C55_firsadd',
    66: 'TMS320C55_firssub',
    67: 'TMS320C55_mpym_mov',
    68: 'TMS320C55_mpymr_mov',
    69: 'TMS320C55_macm_mov',
    70: 'TMS320C55_macmr_mov',
    71: 'TMS320C55_masm_mov',
    72: 'TMS320C55_masmr_mov',
    73: 'TMS320C55_add_mov',
    74: 'TMS320C55_sub_mov',
    75: 'TMS320C55_mov_mov',
    76: 'TMS320C55_mov_aadd',
    77: 'TMS320C55_mov_add',
    78: 'TMS320C55_amar_amar',
    79: 'TMS320C55_add_asub',
    80: 'TMS320C55_btst_mov',
    81: 'TMS320C55_mov_asub',
    82: 'TMS320C55_lms',
    83: 'TMS320C55_max1',
    84: 'TMS320C55_max2',
    85: 'TMS320C55_min1',
    86: 'TMS320C55_min2',
    87: 'TMS320C55_cmp',
    88: 'TMS320C55_cmpu',
    89: 'TMS320C55_aadd',
    90: 'TMS320C55_asub',
    91: 'TMS320C55_amov',
    92: 'TMS320C55_amar1',
    93: 'TMS320C55_sqr1',
    94: 'TMS320C55_sqr2',
    95: 'TMS320C55_sqrr1',
    96: 'TMS320C55_sqrr2',
    97: 'TMS320C55_mpy1',
    98: 'TMS320C55_mpy2',
    99: 'TMS320C55_mpy3',
    100: 'TMS320C55_mpyr1',
    101: 'TMS320C55_mpyr2',
    102: 'TMS320C55_mpyr3',
    103: 'TMS320C55_mpyk2',
    104: 'TMS320C55_mpyk3',
    105: 'TMS320C55_mpykr2',
    106: 'TMS320C55_mpykr3',
    107: 'TMS320C55_mpym2',
    108: 'TMS320C55_mpym3',
    109: 'TMS320C55_mpymr2',
    110: 'TMS320C55_mpymr3',
    111: 'TMS320C55_mpym403',
    112: 'TMS320C55_mpymr403',
    113: 'TMS320C55_mpymu3',
    114: 'TMS320C55_mpymru3',
    115: 'TMS320C55_sqrm',
    116: 'TMS320C55_sqrmr',
    117: 'TMS320C55_mpymk',
    118: 'TMS320C55_mpymkr',
    119: 'TMS320C55_sqa1',
    120: 'TMS320C55_sqa2',
    121: 'TMS320C55_sqar1',
    122: 'TMS320C55_sqar2',
    123: 'TMS320C55_mac3',
    124: 'TMS320C55_mac4',
    125: 'TMS320C55_macr3',
    126: 'TMS320C55_macr4',
    127: 'TMS320C55_mack3',
    128: 'TMS320C55_mack4',
    129: 'TMS320C55_mackr3',
    130: 'TMS320C55_mackr4',
    131: 'TMS320C55_macm2',
    132: 'TMS320C55_macm3',
    133: 'TMS320C55_macm4',
    134: 'TMS320C55_macmr2',
    135: 'TMS320C55_macmr3',
    136: 'TMS320C55_macmr4',
    137: 'TMS320C55_macm403',
    138: 'TMS320C55_macm404',
    139: 'TMS320C55_macmr403',
    140: 'TMS320C55_macmr404',
    141: 'TMS320C55_macmz',
    142: 'TMS320C55_macmrz',
    143: 'TMS320C55_sqam2',
    144: 'TMS320C55_sqam3',
    145: 'TMS320C55_sqamr2',
    146: 'TMS320C55_sqamr3',
    147: 'TMS320C55_macmk3',
    148: 'TMS320C55_macmk4',
    149: 'TMS320C55_macmkr3',
    150: 'TMS320C55_macmkr4',
    151: 'TMS320C55_sqs1',
    152: 'TMS320C55_sqs2',
    153: 'TMS320C55_sqsr1',
    154: 'TMS320C55_sqsr2',
    155: 'TMS320C55_mas2',
    156: 'TMS320C55_mas3',
    157: 'TMS320C55_masr2',
    158: 'TMS320C55_masr3',
    159: 'TMS320C55_masm2',
    160: 'TMS320C55_masm3',
    161: 'TMS320C55_masm4',
    162: 'TMS320C55_masmr2',
    163: 'TMS320C55_masmr3',
    164: 'TMS320C55_masmr4',
    165: 'TMS320C55_masm403',
    166: 'TMS320C55_masm404',
    167: 'TMS320C55_masmr403',
    168: 'TMS320C55_masmr404',
    169: 'TMS320C55_sqsm2',
    170: 'TMS320C55_sqsm3',
    171: 'TMS320C55_sqsmr2',
    172: 'TMS320C55_sqsmr3',
    173: 'TMS320C55_neg1',
    174: 'TMS320C55_neg2',
    175: 'TMS320C55_mant_nexp',
    176: 'TMS320C55_exp',
    177: 'TMS320C55_cmpand',
    178: 'TMS320C55_cmpandu',
    179: 'TMS320C55_cmpor',
    180: 'TMS320C55_cmporu',
    181: 'TMS320C55_round1',
    182: 'TMS320C55_round2',
    183: 'TMS320C55_sat1',
    184: 'TMS320C55_sat2',
    185: 'TMS320C55_satr1',
    186: 'TMS320C55_satr2',
    187: 'TMS320C55_sfts2',
    188: 'TMS320C55_sfts3',
    189: 'TMS320C55_sftsc2',
    190: 'TMS320C55_sftsc3',
    191: 'TMS320C55_sqdst',
    192: 'TMS320C55_sub1',
    193: 'TMS320C55_sub2',
    194: 'TMS320C55_sub3',
    195: 'TMS320C55_sub4',
    196: 'TMS320C55_band',
    197: 'TMS320C55_bfxpa',
    198: 'TMS320C55_bfxtr',
    199: 'TMS320C55_btst',
    200: 'TMS320C55_bnot',
    201: 'TMS320C55_bclr2',
    202: 'TMS320C55_bset2',
    203: 'TMS320C55_btstset',
    204: 'TMS320C55_btstclr',
    205: 'TMS320C55_btstnot',
    206: 'TMS320C55_btstp',
    207: 'TMS320C55_bclr1',
    208: 'TMS320C55_bset1',
    209: 'TMS320C55_amar2',
    210: 'TMS320C55_popboth',
    211: 'TMS320C55_pshboth',
    212: 'TMS320C55_bcnt',
    213: 'TMS320C55_not1',
    214: 'TMS320C55_not2',
    215: 'TMS320C55_and1',
    216: 'TMS320C55_and2',
    217: 'TMS320C55_and3',
    218: 'TMS320C55_or1',
    219: 'TMS320C55_or2',
    220: 'TMS320C55_or3',
    221: 'TMS320C55_xor1',
    222: 'TMS320C55_xor2',
    223: 'TMS320C55_xor3',
    224: 'TMS320C55_sftl2',
    225: 'TMS320C55_sftl3',
    226: 'TMS320C55_rol',
    227: 'TMS320C55_ror',
    228: 'TMS320C55_swap',
    229: 'TMS320C55_swapp',
    230: 'TMS320C55_swap4',
    231: 'TMS320C55_mov2',
    232: 'TMS320C55_mov3',
    233: 'TMS320C55_mov402',
    234: 'TMS320C55_delay',
    235: 'TMS320C55_pop1',
    236: 'TMS320C55_pop2',
    237: 'TMS320C55_psh1',
    238: 'TMS320C55_psh2',
    239: 'TMS320C55_bcc',
    240: 'TMS320C55_bccu',
    241: 'TMS320C55_b',
    242: 'TMS320C55_callcc',
    243: 'TMS320C55_call',
    244: 'TMS320C55_xcc',
    245: 'TMS320C55_xccpart',
    246: 'TMS320C55_idle',
    247: 'TMS320C55_nop',
    248: 'TMS320C55_nop_16',
    249: 'TMS320C55_rptblocal',
    250: 'TMS320C55_rptb',
    251: 'TMS320C55_rptcc',
    252: 'TMS320C55_rpt',
    253: 'TMS320C55_rptadd',
    254: 'TMS320C55_rptsub',
    255: 'TMS320C55_retcc',
    256: 'TMS320C55_ret',
    257: 'TMS320C55_reti',
    258: 'TMS320C55_intr',
    259: 'TMS320C55_reset',
    260: 'TMS320C55_trap',
    261: 'TMS320C55_last',
}
TMS320C55_null = 0
TMS320C55_abdst = 1
TMS320C55_abs1 = 2
TMS320C55_abs2 = 3
TMS320C55_add1 = 4
TMS320C55_add2 = 5
TMS320C55_add3 = 6
TMS320C55_add4 = 7
TMS320C55_addv1 = 8
TMS320C55_addv2 = 9
TMS320C55_addrv1 = 10
TMS320C55_addrv2 = 11
TMS320C55_maxdiff = 12
TMS320C55_dmaxdiff = 13
TMS320C55_mindiff = 14
TMS320C55_dmindiff = 15
TMS320C55_addsubcc4 = 16
TMS320C55_addsubcc5 = 17
TMS320C55_addsub2cc = 18
TMS320C55_sftcc = 19
TMS320C55_subc2 = 20
TMS320C55_subc3 = 21
TMS320C55_addsub = 22
TMS320C55_subadd = 23
TMS320C55_mpy_mpy = 24
TMS320C55_mpy_mpyr = 25
TMS320C55_mpy_mpy40 = 26
TMS320C55_mpy_mpyr40 = 27
TMS320C55_mac_mpy = 28
TMS320C55_macr_mpyr = 29
TMS320C55_mac40_mpy40 = 30
TMS320C55_macr40_mpyr40 = 31
TMS320C55_mas_mpy = 32
TMS320C55_masr_mpyr = 33
TMS320C55_mas40_mpy40 = 34
TMS320C55_masr40_mpyr40 = 35
TMS320C55_amar_mpy = 36
TMS320C55_amar_mpyr = 37
TMS320C55_amar_mpy40 = 38
TMS320C55_amar_mpyr40 = 39
TMS320C55_mac_mac = 40
TMS320C55_macr_macr = 41
TMS320C55_mac40_mac40 = 42
TMS320C55_macr40_macr40 = 43
TMS320C55_mas_mac = 44
TMS320C55_masr_macr = 45
TMS320C55_mas40_mac40 = 46
TMS320C55_masr40_macr40 = 47
TMS320C55_amar_mac = 48
TMS320C55_amar_macr = 49
TMS320C55_amar_mac40 = 50
TMS320C55_amar_macr40 = 51
TMS320C55_mas_mas = 52
TMS320C55_masr_masr = 53
TMS320C55_mas40_mas40 = 54
TMS320C55_masr40_masr40 = 55
TMS320C55_amar_mas = 56
TMS320C55_amar_masr = 57
TMS320C55_amar_mas40 = 58
TMS320C55_amar_masr40 = 59
TMS320C55_mpy_mac = 60
TMS320C55_mpyr_macr = 61
TMS320C55_mpy40_mac40 = 62
TMS320C55_mpyr40_macr40 = 63
TMS320C55_amar3 = 64
TMS320C55_firsadd = 65
TMS320C55_firssub = 66
TMS320C55_mpym_mov = 67
TMS320C55_mpymr_mov = 68
TMS320C55_macm_mov = 69
TMS320C55_macmr_mov = 70
TMS320C55_masm_mov = 71
TMS320C55_masmr_mov = 72
TMS320C55_add_mov = 73
TMS320C55_sub_mov = 74
TMS320C55_mov_mov = 75
TMS320C55_mov_aadd = 76
TMS320C55_mov_add = 77
TMS320C55_amar_amar = 78
TMS320C55_add_asub = 79
TMS320C55_btst_mov = 80
TMS320C55_mov_asub = 81
TMS320C55_lms = 82
TMS320C55_max1 = 83
TMS320C55_max2 = 84
TMS320C55_min1 = 85
TMS320C55_min2 = 86
TMS320C55_cmp = 87
TMS320C55_cmpu = 88
TMS320C55_aadd = 89
TMS320C55_asub = 90
TMS320C55_amov = 91
TMS320C55_amar1 = 92
TMS320C55_sqr1 = 93
TMS320C55_sqr2 = 94
TMS320C55_sqrr1 = 95
TMS320C55_sqrr2 = 96
TMS320C55_mpy1 = 97
TMS320C55_mpy2 = 98
TMS320C55_mpy3 = 99
TMS320C55_mpyr1 = 100
TMS320C55_mpyr2 = 101
TMS320C55_mpyr3 = 102
TMS320C55_mpyk2 = 103
TMS320C55_mpyk3 = 104
TMS320C55_mpykr2 = 105
TMS320C55_mpykr3 = 106
TMS320C55_mpym2 = 107
TMS320C55_mpym3 = 108
TMS320C55_mpymr2 = 109
TMS320C55_mpymr3 = 110
TMS320C55_mpym403 = 111
TMS320C55_mpymr403 = 112
TMS320C55_mpymu3 = 113
TMS320C55_mpymru3 = 114
TMS320C55_sqrm = 115
TMS320C55_sqrmr = 116
TMS320C55_mpymk = 117
TMS320C55_mpymkr = 118
TMS320C55_sqa1 = 119
TMS320C55_sqa2 = 120
TMS320C55_sqar1 = 121
TMS320C55_sqar2 = 122
TMS320C55_mac3 = 123
TMS320C55_mac4 = 124
TMS320C55_macr3 = 125
TMS320C55_macr4 = 126
TMS320C55_mack3 = 127
TMS320C55_mack4 = 128
TMS320C55_mackr3 = 129
TMS320C55_mackr4 = 130
TMS320C55_macm2 = 131
TMS320C55_macm3 = 132
TMS320C55_macm4 = 133
TMS320C55_macmr2 = 134
TMS320C55_macmr3 = 135
TMS320C55_macmr4 = 136
TMS320C55_macm403 = 137
TMS320C55_macm404 = 138
TMS320C55_macmr403 = 139
TMS320C55_macmr404 = 140
TMS320C55_macmz = 141
TMS320C55_macmrz = 142
TMS320C55_sqam2 = 143
TMS320C55_sqam3 = 144
TMS320C55_sqamr2 = 145
TMS320C55_sqamr3 = 146
TMS320C55_macmk3 = 147
TMS320C55_macmk4 = 148
TMS320C55_macmkr3 = 149
TMS320C55_macmkr4 = 150
TMS320C55_sqs1 = 151
TMS320C55_sqs2 = 152
TMS320C55_sqsr1 = 153
TMS320C55_sqsr2 = 154
TMS320C55_mas2 = 155
TMS320C55_mas3 = 156
TMS320C55_masr2 = 157
TMS320C55_masr3 = 158
TMS320C55_masm2 = 159
TMS320C55_masm3 = 160
TMS320C55_masm4 = 161
TMS320C55_masmr2 = 162
TMS320C55_masmr3 = 163
TMS320C55_masmr4 = 164
TMS320C55_masm403 = 165
TMS320C55_masm404 = 166
TMS320C55_masmr403 = 167
TMS320C55_masmr404 = 168
TMS320C55_sqsm2 = 169
TMS320C55_sqsm3 = 170
TMS320C55_sqsmr2 = 171
TMS320C55_sqsmr3 = 172
TMS320C55_neg1 = 173
TMS320C55_neg2 = 174
TMS320C55_mant_nexp = 175
TMS320C55_exp = 176
TMS320C55_cmpand = 177
TMS320C55_cmpandu = 178
TMS320C55_cmpor = 179
TMS320C55_cmporu = 180
TMS320C55_round1 = 181
TMS320C55_round2 = 182
TMS320C55_sat1 = 183
TMS320C55_sat2 = 184
TMS320C55_satr1 = 185
TMS320C55_satr2 = 186
TMS320C55_sfts2 = 187
TMS320C55_sfts3 = 188
TMS320C55_sftsc2 = 189
TMS320C55_sftsc3 = 190
TMS320C55_sqdst = 191
TMS320C55_sub1 = 192
TMS320C55_sub2 = 193
TMS320C55_sub3 = 194
TMS320C55_sub4 = 195
TMS320C55_band = 196
TMS320C55_bfxpa = 197
TMS320C55_bfxtr = 198
TMS320C55_btst = 199
TMS320C55_bnot = 200
TMS320C55_bclr2 = 201
TMS320C55_bset2 = 202
TMS320C55_btstset = 203
TMS320C55_btstclr = 204
TMS320C55_btstnot = 205
TMS320C55_btstp = 206
TMS320C55_bclr1 = 207
TMS320C55_bset1 = 208
TMS320C55_amar2 = 209
TMS320C55_popboth = 210
TMS320C55_pshboth = 211
TMS320C55_bcnt = 212
TMS320C55_not1 = 213
TMS320C55_not2 = 214
TMS320C55_and1 = 215
TMS320C55_and2 = 216
TMS320C55_and3 = 217
TMS320C55_or1 = 218
TMS320C55_or2 = 219
TMS320C55_or3 = 220
TMS320C55_xor1 = 221
TMS320C55_xor2 = 222
TMS320C55_xor3 = 223
TMS320C55_sftl2 = 224
TMS320C55_sftl3 = 225
TMS320C55_rol = 226
TMS320C55_ror = 227
TMS320C55_swap = 228
TMS320C55_swapp = 229
TMS320C55_swap4 = 230
TMS320C55_mov2 = 231
TMS320C55_mov3 = 232
TMS320C55_mov402 = 233
TMS320C55_delay = 234
TMS320C55_pop1 = 235
TMS320C55_pop2 = 236
TMS320C55_psh1 = 237
TMS320C55_psh2 = 238
TMS320C55_bcc = 239
TMS320C55_bccu = 240
TMS320C55_b = 241
TMS320C55_callcc = 242
TMS320C55_call = 243
TMS320C55_xcc = 244
TMS320C55_xccpart = 245
TMS320C55_idle = 246
TMS320C55_nop = 247
TMS320C55_nop_16 = 248
TMS320C55_rptblocal = 249
TMS320C55_rptb = 250
TMS320C55_rptcc = 251
TMS320C55_rpt = 252
TMS320C55_rptadd = 253
TMS320C55_rptsub = 254
TMS320C55_retcc = 255
TMS320C55_ret = 256
TMS320C55_reti = 257
TMS320C55_intr = 258
TMS320C55_reset = 259
TMS320C55_trap = 260
TMS320C55_last = 261
_E8B3A4BD16D91BFD04BCF73BD6E0E61A = ctypes.c_uint32 # enum

# values for enumeration '_EB3E0D64FD1E2D25F11CBF2CB3D02109'
_EB3E0D64FD1E2D25F11CBF2CB3D02109__enumvalues = {
    0: 'TRIMEDIA_null',
    1: 'TRIMEDIA_igtri',
    2: 'TRIMEDIA_igeqi',
    3: 'TRIMEDIA_ilesi',
    4: 'TRIMEDIA_ineqi',
    5: 'TRIMEDIA_ieqli',
    6: 'TRIMEDIA_iaddi',
    7: 'TRIMEDIA_ild16d',
    8: 'TRIMEDIA_ld32d',
    9: 'TRIMEDIA_uld8d',
    10: 'TRIMEDIA_lsri',
    11: 'TRIMEDIA_asri',
    12: 'TRIMEDIA_asli',
    13: 'TRIMEDIA_iadd',
    14: 'TRIMEDIA_isub',
    15: 'TRIMEDIA_igeq',
    16: 'TRIMEDIA_igtr',
    17: 'TRIMEDIA_bitand',
    18: 'TRIMEDIA_bitor',
    19: 'TRIMEDIA_asr',
    20: 'TRIMEDIA_asl',
    21: 'TRIMEDIA_ifloat',
    22: 'TRIMEDIA_ifixrz',
    23: 'TRIMEDIA_fadd',
    24: 'TRIMEDIA_imin',
    25: 'TRIMEDIA_imax',
    26: 'TRIMEDIA_iavgonep',
    27: 'TRIMEDIA_ume8uu',
    28: 'TRIMEDIA_imul',
    29: 'TRIMEDIA_fmul',
    30: 'TRIMEDIA_h_st8d',
    31: 'TRIMEDIA_h_st16d',
    32: 'TRIMEDIA_h_st32d',
    33: 'TRIMEDIA_isubi',
    34: 'TRIMEDIA_ugtr',
    35: 'TRIMEDIA_ugtri',
    36: 'TRIMEDIA_ugeq',
    37: 'TRIMEDIA_ugeqi',
    38: 'TRIMEDIA_ieql',
    39: 'TRIMEDIA_ueqli',
    40: 'TRIMEDIA_ineq',
    41: 'TRIMEDIA_uneqi',
    42: 'TRIMEDIA_ulesi',
    43: 'TRIMEDIA_ileqi',
    44: 'TRIMEDIA_uleqi',
    45: 'TRIMEDIA_h_iabs',
    46: 'TRIMEDIA_carry',
    47: 'TRIMEDIA_izero',
    48: 'TRIMEDIA_inonzero',
    49: 'TRIMEDIA_bitxor',
    50: 'TRIMEDIA_bitandinv',
    51: 'TRIMEDIA_bitinv',
    52: 'TRIMEDIA_sex16',
    53: 'TRIMEDIA_packbytes',
    54: 'TRIMEDIA_pack16lsb',
    55: 'TRIMEDIA_pack16msb',
    56: 'TRIMEDIA_ubytesel',
    57: 'TRIMEDIA_ibytesel',
    58: 'TRIMEDIA_mergelsb',
    59: 'TRIMEDIA_mergemsb',
    60: 'TRIMEDIA_ume8ii',
    61: 'TRIMEDIA_h_dspiabs',
    62: 'TRIMEDIA_dspiadd',
    63: 'TRIMEDIA_dspuadd',
    64: 'TRIMEDIA_dspisub',
    65: 'TRIMEDIA_dspusub',
    66: 'TRIMEDIA_dspidualadd',
    67: 'TRIMEDIA_dspidualsub',
    68: 'TRIMEDIA_h_dspidualabs',
    69: 'TRIMEDIA_quadavg',
    70: 'TRIMEDIA_iclipi',
    71: 'TRIMEDIA_uclipi',
    72: 'TRIMEDIA_uclipu',
    73: 'TRIMEDIA_iflip',
    74: 'TRIMEDIA_dspuquadaddui',
    75: 'TRIMEDIA_quadumin',
    76: 'TRIMEDIA_quadumax',
    77: 'TRIMEDIA_dualiclipi',
    78: 'TRIMEDIA_dualuclipi',
    79: 'TRIMEDIA_quadumulmsb',
    80: 'TRIMEDIA_ufir8uu',
    81: 'TRIMEDIA_ifir8ui',
    82: 'TRIMEDIA_ifir8ii',
    83: 'TRIMEDIA_ifir16',
    84: 'TRIMEDIA_ufir16',
    85: 'TRIMEDIA_dspidualmul',
    86: 'TRIMEDIA_lsr',
    87: 'TRIMEDIA_rol',
    88: 'TRIMEDIA_roli',
    89: 'TRIMEDIA_funshift1',
    90: 'TRIMEDIA_funshift2',
    91: 'TRIMEDIA_funshift3',
    92: 'TRIMEDIA_dualasr',
    93: 'TRIMEDIA_mergedual16lsb',
    94: 'TRIMEDIA_fdiv',
    95: 'TRIMEDIA_fdivflags',
    96: 'TRIMEDIA_fsqrt',
    97: 'TRIMEDIA_fsqrtflags',
    98: 'TRIMEDIA_faddflags',
    99: 'TRIMEDIA_fsub',
    100: 'TRIMEDIA_fsubflags',
    101: 'TRIMEDIA_fabsval',
    102: 'TRIMEDIA_fabsvalflags',
    103: 'TRIMEDIA_ifloatrz',
    104: 'TRIMEDIA_ifloatrzflags',
    105: 'TRIMEDIA_ufloatrz',
    106: 'TRIMEDIA_ufloatrzflags',
    107: 'TRIMEDIA_ifixieee',
    108: 'TRIMEDIA_ifixieeeflags',
    109: 'TRIMEDIA_ufixieee',
    110: 'TRIMEDIA_ufixieeeflags',
    111: 'TRIMEDIA_ufixrz',
    112: 'TRIMEDIA_ufixrzflags',
    113: 'TRIMEDIA_ufloat',
    114: 'TRIMEDIA_ufloatflags',
    115: 'TRIMEDIA_ifixrzflags',
    116: 'TRIMEDIA_ifloatflags',
    117: 'TRIMEDIA_umul',
    118: 'TRIMEDIA_imulm',
    119: 'TRIMEDIA_umulm',
    120: 'TRIMEDIA_dspimul',
    121: 'TRIMEDIA_dspumul',
    122: 'TRIMEDIA_fmulflags',
    123: 'TRIMEDIA_fgtr',
    124: 'TRIMEDIA_fgtrflags',
    125: 'TRIMEDIA_fgeq',
    126: 'TRIMEDIA_fgeqflags',
    127: 'TRIMEDIA_feql',
    128: 'TRIMEDIA_feqlflags',
    129: 'TRIMEDIA_fneq',
    130: 'TRIMEDIA_fneqflags',
    131: 'TRIMEDIA_fsign',
    132: 'TRIMEDIA_fsignflags',
    133: 'TRIMEDIA_cycles',
    134: 'TRIMEDIA_hicycles',
    135: 'TRIMEDIA_readdpc',
    136: 'TRIMEDIA_readspc',
    137: 'TRIMEDIA_readpcsw',
    138: 'TRIMEDIA_writespc',
    139: 'TRIMEDIA_writedpc',
    140: 'TRIMEDIA_writepcsw',
    141: 'TRIMEDIA_curcycles',
    142: 'TRIMEDIA_jmpt',
    143: 'TRIMEDIA_ijmpt',
    144: 'TRIMEDIA_jmpi',
    145: 'TRIMEDIA_ijmpi',
    146: 'TRIMEDIA_jmpf',
    147: 'TRIMEDIA_ijmpf',
    148: 'TRIMEDIA_iclr',
    149: 'TRIMEDIA_uimm',
    150: 'TRIMEDIA_ild8d',
    151: 'TRIMEDIA_ild8r',
    152: 'TRIMEDIA_uld8r',
    153: 'TRIMEDIA_ild16r',
    154: 'TRIMEDIA_ild16x',
    155: 'TRIMEDIA_uld16d',
    156: 'TRIMEDIA_uld16r',
    157: 'TRIMEDIA_uld16x',
    158: 'TRIMEDIA_ld32r',
    159: 'TRIMEDIA_ld32x',
    160: 'TRIMEDIA_rdtag',
    161: 'TRIMEDIA_rdstatus',
    162: 'TRIMEDIA_dcb',
    163: 'TRIMEDIA_dinvalid',
    164: 'TRIMEDIA_prefd',
    165: 'TRIMEDIA_prefr',
    166: 'TRIMEDIA_pref16x',
    167: 'TRIMEDIA_pref32x',
    168: 'TRIMEDIA_allocd',
    169: 'TRIMEDIA_allocr',
    170: 'TRIMEDIA_allocx',
    171: 'TRIMEDIA_nop',
    172: 'TRIMEDIA_alloc',
    173: 'TRIMEDIA_dspiabs',
    174: 'TRIMEDIA_dspidualabs',
    175: 'TRIMEDIA_iabs',
    176: 'TRIMEDIA_ild16',
    177: 'TRIMEDIA_ild8',
    178: 'TRIMEDIA_ineg',
    179: 'TRIMEDIA_ld32',
    180: 'TRIMEDIA_pref',
    181: 'TRIMEDIA_sex8',
    182: 'TRIMEDIA_st16',
    183: 'TRIMEDIA_st16d',
    184: 'TRIMEDIA_st32',
    185: 'TRIMEDIA_st32d',
    186: 'TRIMEDIA_st8',
    187: 'TRIMEDIA_st8d',
    188: 'TRIMEDIA_uld16',
    189: 'TRIMEDIA_uld8',
    190: 'TRIMEDIA_zex16',
    191: 'TRIMEDIA_zex8',
    192: 'TRIMEDIA_ident',
    193: 'TRIMEDIA_iles',
    194: 'TRIMEDIA_ileq',
    195: 'TRIMEDIA_ules',
    196: 'TRIMEDIA_uleq',
    197: 'TRIMEDIA_fles',
    198: 'TRIMEDIA_fleq',
    199: 'TRIMEDIA_ueql',
    200: 'TRIMEDIA_uneq',
    201: 'TRIMEDIA_flesflags',
    202: 'TRIMEDIA_fleqflags',
    203: 'TRIMEDIA_borrow',
    204: 'TRIMEDIA_umin',
    205: 'TRIMEDIA_lsl',
    206: 'TRIMEDIA_lsli',
    207: 'TRIMEDIA_last',
}
TRIMEDIA_null = 0
TRIMEDIA_igtri = 1
TRIMEDIA_igeqi = 2
TRIMEDIA_ilesi = 3
TRIMEDIA_ineqi = 4
TRIMEDIA_ieqli = 5
TRIMEDIA_iaddi = 6
TRIMEDIA_ild16d = 7
TRIMEDIA_ld32d = 8
TRIMEDIA_uld8d = 9
TRIMEDIA_lsri = 10
TRIMEDIA_asri = 11
TRIMEDIA_asli = 12
TRIMEDIA_iadd = 13
TRIMEDIA_isub = 14
TRIMEDIA_igeq = 15
TRIMEDIA_igtr = 16
TRIMEDIA_bitand = 17
TRIMEDIA_bitor = 18
TRIMEDIA_asr = 19
TRIMEDIA_asl = 20
TRIMEDIA_ifloat = 21
TRIMEDIA_ifixrz = 22
TRIMEDIA_fadd = 23
TRIMEDIA_imin = 24
TRIMEDIA_imax = 25
TRIMEDIA_iavgonep = 26
TRIMEDIA_ume8uu = 27
TRIMEDIA_imul = 28
TRIMEDIA_fmul = 29
TRIMEDIA_h_st8d = 30
TRIMEDIA_h_st16d = 31
TRIMEDIA_h_st32d = 32
TRIMEDIA_isubi = 33
TRIMEDIA_ugtr = 34
TRIMEDIA_ugtri = 35
TRIMEDIA_ugeq = 36
TRIMEDIA_ugeqi = 37
TRIMEDIA_ieql = 38
TRIMEDIA_ueqli = 39
TRIMEDIA_ineq = 40
TRIMEDIA_uneqi = 41
TRIMEDIA_ulesi = 42
TRIMEDIA_ileqi = 43
TRIMEDIA_uleqi = 44
TRIMEDIA_h_iabs = 45
TRIMEDIA_carry = 46
TRIMEDIA_izero = 47
TRIMEDIA_inonzero = 48
TRIMEDIA_bitxor = 49
TRIMEDIA_bitandinv = 50
TRIMEDIA_bitinv = 51
TRIMEDIA_sex16 = 52
TRIMEDIA_packbytes = 53
TRIMEDIA_pack16lsb = 54
TRIMEDIA_pack16msb = 55
TRIMEDIA_ubytesel = 56
TRIMEDIA_ibytesel = 57
TRIMEDIA_mergelsb = 58
TRIMEDIA_mergemsb = 59
TRIMEDIA_ume8ii = 60
TRIMEDIA_h_dspiabs = 61
TRIMEDIA_dspiadd = 62
TRIMEDIA_dspuadd = 63
TRIMEDIA_dspisub = 64
TRIMEDIA_dspusub = 65
TRIMEDIA_dspidualadd = 66
TRIMEDIA_dspidualsub = 67
TRIMEDIA_h_dspidualabs = 68
TRIMEDIA_quadavg = 69
TRIMEDIA_iclipi = 70
TRIMEDIA_uclipi = 71
TRIMEDIA_uclipu = 72
TRIMEDIA_iflip = 73
TRIMEDIA_dspuquadaddui = 74
TRIMEDIA_quadumin = 75
TRIMEDIA_quadumax = 76
TRIMEDIA_dualiclipi = 77
TRIMEDIA_dualuclipi = 78
TRIMEDIA_quadumulmsb = 79
TRIMEDIA_ufir8uu = 80
TRIMEDIA_ifir8ui = 81
TRIMEDIA_ifir8ii = 82
TRIMEDIA_ifir16 = 83
TRIMEDIA_ufir16 = 84
TRIMEDIA_dspidualmul = 85
TRIMEDIA_lsr = 86
TRIMEDIA_rol = 87
TRIMEDIA_roli = 88
TRIMEDIA_funshift1 = 89
TRIMEDIA_funshift2 = 90
TRIMEDIA_funshift3 = 91
TRIMEDIA_dualasr = 92
TRIMEDIA_mergedual16lsb = 93
TRIMEDIA_fdiv = 94
TRIMEDIA_fdivflags = 95
TRIMEDIA_fsqrt = 96
TRIMEDIA_fsqrtflags = 97
TRIMEDIA_faddflags = 98
TRIMEDIA_fsub = 99
TRIMEDIA_fsubflags = 100
TRIMEDIA_fabsval = 101
TRIMEDIA_fabsvalflags = 102
TRIMEDIA_ifloatrz = 103
TRIMEDIA_ifloatrzflags = 104
TRIMEDIA_ufloatrz = 105
TRIMEDIA_ufloatrzflags = 106
TRIMEDIA_ifixieee = 107
TRIMEDIA_ifixieeeflags = 108
TRIMEDIA_ufixieee = 109
TRIMEDIA_ufixieeeflags = 110
TRIMEDIA_ufixrz = 111
TRIMEDIA_ufixrzflags = 112
TRIMEDIA_ufloat = 113
TRIMEDIA_ufloatflags = 114
TRIMEDIA_ifixrzflags = 115
TRIMEDIA_ifloatflags = 116
TRIMEDIA_umul = 117
TRIMEDIA_imulm = 118
TRIMEDIA_umulm = 119
TRIMEDIA_dspimul = 120
TRIMEDIA_dspumul = 121
TRIMEDIA_fmulflags = 122
TRIMEDIA_fgtr = 123
TRIMEDIA_fgtrflags = 124
TRIMEDIA_fgeq = 125
TRIMEDIA_fgeqflags = 126
TRIMEDIA_feql = 127
TRIMEDIA_feqlflags = 128
TRIMEDIA_fneq = 129
TRIMEDIA_fneqflags = 130
TRIMEDIA_fsign = 131
TRIMEDIA_fsignflags = 132
TRIMEDIA_cycles = 133
TRIMEDIA_hicycles = 134
TRIMEDIA_readdpc = 135
TRIMEDIA_readspc = 136
TRIMEDIA_readpcsw = 137
TRIMEDIA_writespc = 138
TRIMEDIA_writedpc = 139
TRIMEDIA_writepcsw = 140
TRIMEDIA_curcycles = 141
TRIMEDIA_jmpt = 142
TRIMEDIA_ijmpt = 143
TRIMEDIA_jmpi = 144
TRIMEDIA_ijmpi = 145
TRIMEDIA_jmpf = 146
TRIMEDIA_ijmpf = 147
TRIMEDIA_iclr = 148
TRIMEDIA_uimm = 149
TRIMEDIA_ild8d = 150
TRIMEDIA_ild8r = 151
TRIMEDIA_uld8r = 152
TRIMEDIA_ild16r = 153
TRIMEDIA_ild16x = 154
TRIMEDIA_uld16d = 155
TRIMEDIA_uld16r = 156
TRIMEDIA_uld16x = 157
TRIMEDIA_ld32r = 158
TRIMEDIA_ld32x = 159
TRIMEDIA_rdtag = 160
TRIMEDIA_rdstatus = 161
TRIMEDIA_dcb = 162
TRIMEDIA_dinvalid = 163
TRIMEDIA_prefd = 164
TRIMEDIA_prefr = 165
TRIMEDIA_pref16x = 166
TRIMEDIA_pref32x = 167
TRIMEDIA_allocd = 168
TRIMEDIA_allocr = 169
TRIMEDIA_allocx = 170
TRIMEDIA_nop = 171
TRIMEDIA_alloc = 172
TRIMEDIA_dspiabs = 173
TRIMEDIA_dspidualabs = 174
TRIMEDIA_iabs = 175
TRIMEDIA_ild16 = 176
TRIMEDIA_ild8 = 177
TRIMEDIA_ineg = 178
TRIMEDIA_ld32 = 179
TRIMEDIA_pref = 180
TRIMEDIA_sex8 = 181
TRIMEDIA_st16 = 182
TRIMEDIA_st16d = 183
TRIMEDIA_st32 = 184
TRIMEDIA_st32d = 185
TRIMEDIA_st8 = 186
TRIMEDIA_st8d = 187
TRIMEDIA_uld16 = 188
TRIMEDIA_uld8 = 189
TRIMEDIA_zex16 = 190
TRIMEDIA_zex8 = 191
TRIMEDIA_ident = 192
TRIMEDIA_iles = 193
TRIMEDIA_ileq = 194
TRIMEDIA_ules = 195
TRIMEDIA_uleq = 196
TRIMEDIA_fles = 197
TRIMEDIA_fleq = 198
TRIMEDIA_ueql = 199
TRIMEDIA_uneq = 200
TRIMEDIA_flesflags = 201
TRIMEDIA_fleqflags = 202
TRIMEDIA_borrow = 203
TRIMEDIA_umin = 204
TRIMEDIA_lsl = 205
TRIMEDIA_lsli = 206
TRIMEDIA_last = 207
_EB3E0D64FD1E2D25F11CBF2CB3D02109 = ctypes.c_uint32 # enum

# values for enumeration '_5B6463B381419A9B06110325DC6B6ED4'
_5B6463B381419A9B06110325DC6B6ED4__enumvalues = {
    0: 'NEC_78K_0_null',
    1: 'NEC_78K_0_mov',
    2: 'NEC_78K_0_xch',
    3: 'NEC_78K_0_movw',
    4: 'NEC_78K_0_xchw',
    5: 'NEC_78K_0_add',
    6: 'NEC_78K_0_addc',
    7: 'NEC_78K_0_sub',
    8: 'NEC_78K_0_subc',
    9: 'NEC_78K_0_and',
    10: 'NEC_78K_0_or',
    11: 'NEC_78K_0_xor',
    12: 'NEC_78K_0_cmp',
    13: 'NEC_78K_0_addw',
    14: 'NEC_78K_0_subw',
    15: 'NEC_78K_0_cmpw',
    16: 'NEC_78K_0_mulu',
    17: 'NEC_78K_0_divuw',
    18: 'NEC_78K_0_inc',
    19: 'NEC_78K_0_dec',
    20: 'NEC_78K_0_incw',
    21: 'NEC_78K_0_decw',
    22: 'NEC_78K_0_ror',
    23: 'NEC_78K_0_rol',
    24: 'NEC_78K_0_rorc',
    25: 'NEC_78K_0_rolc',
    26: 'NEC_78K_0_ror4',
    27: 'NEC_78K_0_rol4',
    28: 'NEC_78K_0_adjba',
    29: 'NEC_78K_0_adjbs',
    30: 'NEC_78K_0_mov1',
    31: 'NEC_78K_0_and1',
    32: 'NEC_78K_0_or1',
    33: 'NEC_78K_0_xor1',
    34: 'NEC_78K_0_set1',
    35: 'NEC_78K_0_clr1',
    36: 'NEC_78K_0_not1',
    37: 'NEC_78K_0_call',
    38: 'NEC_78K_0_callf',
    39: 'NEC_78K_0_callt',
    40: 'NEC_78K_0_brk',
    41: 'NEC_78K_0_ret',
    42: 'NEC_78K_0_retb',
    43: 'NEC_78K_0_reti',
    44: 'NEC_78K_0_push',
    45: 'NEC_78K_0_pop',
    46: 'NEC_78K_0_br',
    47: 'NEC_78K_0_bc',
    48: 'NEC_78K_0_bnc',
    49: 'NEC_78K_0_bz',
    50: 'NEC_78K_0_bnz',
    51: 'NEC_78K_0_bt',
    52: 'NEC_78K_0_bf',
    53: 'NEC_78K_0_btclr',
    54: 'NEC_78K_0_dbnz',
    55: 'NEC_78K_0_sel',
    56: 'NEC_78K_0_nop',
    57: 'NEC_78K_0_EI',
    58: 'NEC_78K_0_DI',
    59: 'NEC_78K_0_HALT',
    60: 'NEC_78K_0_STOP',
    61: 'NEC_78K_0_last',
}
NEC_78K_0_null = 0
NEC_78K_0_mov = 1
NEC_78K_0_xch = 2
NEC_78K_0_movw = 3
NEC_78K_0_xchw = 4
NEC_78K_0_add = 5
NEC_78K_0_addc = 6
NEC_78K_0_sub = 7
NEC_78K_0_subc = 8
NEC_78K_0_and = 9
NEC_78K_0_or = 10
NEC_78K_0_xor = 11
NEC_78K_0_cmp = 12
NEC_78K_0_addw = 13
NEC_78K_0_subw = 14
NEC_78K_0_cmpw = 15
NEC_78K_0_mulu = 16
NEC_78K_0_divuw = 17
NEC_78K_0_inc = 18
NEC_78K_0_dec = 19
NEC_78K_0_incw = 20
NEC_78K_0_decw = 21
NEC_78K_0_ror = 22
NEC_78K_0_rol = 23
NEC_78K_0_rorc = 24
NEC_78K_0_rolc = 25
NEC_78K_0_ror4 = 26
NEC_78K_0_rol4 = 27
NEC_78K_0_adjba = 28
NEC_78K_0_adjbs = 29
NEC_78K_0_mov1 = 30
NEC_78K_0_and1 = 31
NEC_78K_0_or1 = 32
NEC_78K_0_xor1 = 33
NEC_78K_0_set1 = 34
NEC_78K_0_clr1 = 35
NEC_78K_0_not1 = 36
NEC_78K_0_call = 37
NEC_78K_0_callf = 38
NEC_78K_0_callt = 39
NEC_78K_0_brk = 40
NEC_78K_0_ret = 41
NEC_78K_0_retb = 42
NEC_78K_0_reti = 43
NEC_78K_0_push = 44
NEC_78K_0_pop = 45
NEC_78K_0_br = 46
NEC_78K_0_bc = 47
NEC_78K_0_bnc = 48
NEC_78K_0_bz = 49
NEC_78K_0_bnz = 50
NEC_78K_0_bt = 51
NEC_78K_0_bf = 52
NEC_78K_0_btclr = 53
NEC_78K_0_dbnz = 54
NEC_78K_0_sel = 55
NEC_78K_0_nop = 56
NEC_78K_0_EI = 57
NEC_78K_0_DI = 58
NEC_78K_0_HALT = 59
NEC_78K_0_STOP = 60
NEC_78K_0_last = 61
_5B6463B381419A9B06110325DC6B6ED4 = ctypes.c_uint32 # enum

# values for enumeration '_C85ED03CB25EDB5A1C1E15779164BD61'
_C85ED03CB25EDB5A1C1E15779164BD61__enumvalues = {
    0: 'NEC_78K_0S_null',
    1: 'NEC_78K_0S_cmp',
    2: 'NEC_78K_0S_xor',
    3: 'NEC_78K_0S_and',
    4: 'NEC_78K_0S_or',
    5: 'NEC_78K_0S_add',
    6: 'NEC_78K_0S_sub',
    7: 'NEC_78K_0S_addc',
    8: 'NEC_78K_0S_subc',
    9: 'NEC_78K_0S_subw',
    10: 'NEC_78K_0S_addw',
    11: 'NEC_78K_0S_cmpw',
    12: 'NEC_78K_0S_inc',
    13: 'NEC_78K_0S_dec',
    14: 'NEC_78K_0S_incw',
    15: 'NEC_78K_0S_decw',
    16: 'NEC_78K_0S_ror',
    17: 'NEC_78K_0S_rol',
    18: 'NEC_78K_0S_rorc',
    19: 'NEC_78K_0S_rolc',
    20: 'NEC_78K_0S_call',
    21: 'NEC_78K_0S_callt',
    22: 'NEC_78K_0S_ret',
    23: 'NEC_78K_0S_reti',
    24: 'NEC_78K_0S_mov',
    25: 'NEC_78K_0S_xch',
    26: 'NEC_78K_0S_xchw',
    27: 'NEC_78K_0S_set1',
    28: 'NEC_78K_0S_clr1',
    29: 'NEC_78K_0S_not1',
    30: 'NEC_78K_0S_push',
    31: 'NEC_78K_0S_pop',
    32: 'NEC_78K_0S_movw',
    33: 'NEC_78K_0S_br',
    34: 'NEC_78K_0S_bc',
    35: 'NEC_78K_0S_bnc',
    36: 'NEC_78K_0S_bz',
    37: 'NEC_78K_0S_bnz',
    38: 'NEC_78K_0S_bt',
    39: 'NEC_78K_0S_bf',
    40: 'NEC_78K_0S_dbnz',
    41: 'NEC_78K_0S_nop',
    42: 'NEC_78K_0S_EI',
    43: 'NEC_78K_0S_DI',
    44: 'NEC_78K_0S_HALT',
    45: 'NEC_78K_0S_STOP',
    46: 'NEC_78K_0S_last',
}
NEC_78K_0S_null = 0
NEC_78K_0S_cmp = 1
NEC_78K_0S_xor = 2
NEC_78K_0S_and = 3
NEC_78K_0S_or = 4
NEC_78K_0S_add = 5
NEC_78K_0S_sub = 6
NEC_78K_0S_addc = 7
NEC_78K_0S_subc = 8
NEC_78K_0S_subw = 9
NEC_78K_0S_addw = 10
NEC_78K_0S_cmpw = 11
NEC_78K_0S_inc = 12
NEC_78K_0S_dec = 13
NEC_78K_0S_incw = 14
NEC_78K_0S_decw = 15
NEC_78K_0S_ror = 16
NEC_78K_0S_rol = 17
NEC_78K_0S_rorc = 18
NEC_78K_0S_rolc = 19
NEC_78K_0S_call = 20
NEC_78K_0S_callt = 21
NEC_78K_0S_ret = 22
NEC_78K_0S_reti = 23
NEC_78K_0S_mov = 24
NEC_78K_0S_xch = 25
NEC_78K_0S_xchw = 26
NEC_78K_0S_set1 = 27
NEC_78K_0S_clr1 = 28
NEC_78K_0S_not1 = 29
NEC_78K_0S_push = 30
NEC_78K_0S_pop = 31
NEC_78K_0S_movw = 32
NEC_78K_0S_br = 33
NEC_78K_0S_bc = 34
NEC_78K_0S_bnc = 35
NEC_78K_0S_bz = 36
NEC_78K_0S_bnz = 37
NEC_78K_0S_bt = 38
NEC_78K_0S_bf = 39
NEC_78K_0S_dbnz = 40
NEC_78K_0S_nop = 41
NEC_78K_0S_EI = 42
NEC_78K_0S_DI = 43
NEC_78K_0S_HALT = 44
NEC_78K_0S_STOP = 45
NEC_78K_0S_last = 46
_C85ED03CB25EDB5A1C1E15779164BD61 = ctypes.c_uint32 # enum

# values for enumeration 'm16c_itype_t'
m16c_itype_t__enumvalues = {
    0: 'M16C_null',
    1: 'M16C_abs',
    2: 'M16C_adc',
    3: 'M16C_adcf',
    4: 'M16C_add',
    5: 'M16C_adjnz',
    6: 'M16C_and',
    7: 'M16C_band',
    8: 'M16C_bclr',
    9: 'M16C_bmcnd',
    10: 'M16C_bmgeu',
    11: 'M16C_bmgtu',
    12: 'M16C_bmeq',
    13: 'M16C_bmn',
    14: 'M16C_bmle',
    15: 'M16C_bmo',
    16: 'M16C_bmge',
    17: 'M16C_bmltu',
    18: 'M16C_bmleu',
    19: 'M16C_bmne',
    20: 'M16C_bmpz',
    21: 'M16C_bmgt',
    22: 'M16C_bmno',
    23: 'M16C_bmlt',
    24: 'M16C_bnand',
    25: 'M16C_bnor',
    26: 'M16C_bnot',
    27: 'M16C_bntst',
    28: 'M16C_bnxor',
    29: 'M16C_bor',
    30: 'M16C_brk',
    31: 'M16C_bset',
    32: 'M16C_btst',
    33: 'M16C_btstc',
    34: 'M16C_btsts',
    35: 'M16C_bxor',
    36: 'M16C_cmp',
    37: 'M16C_dadc',
    38: 'M16C_dadd',
    39: 'M16C_dec',
    40: 'M16C_div',
    41: 'M16C_divu',
    42: 'M16C_divx',
    43: 'M16C_dsbb',
    44: 'M16C_dsub',
    45: 'M16C_enter',
    46: 'M16C_exitd',
    47: 'M16C_exts',
    48: 'M16C_fclr',
    49: 'M16C_fset',
    50: 'M16C_inc',
    51: 'M16C_int',
    52: 'M16C_into',
    53: 'M16C_jcnd',
    54: 'M16C_jgeu',
    55: 'M16C_jgtu',
    56: 'M16C_jeq',
    57: 'M16C_jn',
    58: 'M16C_jle',
    59: 'M16C_jo',
    60: 'M16C_jge',
    61: 'M16C_jltu',
    62: 'M16C_jleu',
    63: 'M16C_jne',
    64: 'M16C_jpz',
    65: 'M16C_jgt',
    66: 'M16C_jno',
    67: 'M16C_jlt',
    68: 'M16C_jmp',
    69: 'M16C_jmpi',
    70: 'M16C_jmps',
    71: 'M16C_jsr',
    72: 'M16C_jsri',
    73: 'M16C_jsrs',
    74: 'M16C_ldc',
    75: 'M16C_ldctx',
    76: 'M16C_lde',
    77: 'M16C_ldintb',
    78: 'M16C_ldipl',
    79: 'M16C_mov',
    80: 'M16C_mova',
    81: 'M16C_movhh',
    82: 'M16C_movhl',
    83: 'M16C_movlh',
    84: 'M16C_movll',
    85: 'M16C_mul',
    86: 'M16C_mulu',
    87: 'M16C_neg',
    88: 'M16C_nop',
    89: 'M16C_not',
    90: 'M16C_or',
    91: 'M16C_pop',
    92: 'M16C_popc',
    93: 'M16C_popm',
    94: 'M16C_push',
    95: 'M16C_pusha',
    96: 'M16C_pushc',
    97: 'M16C_pushm',
    98: 'M16C_reit',
    99: 'M16C_rmpa',
    100: 'M16C_rolc',
    101: 'M16C_rorc',
    102: 'M16C_rot',
    103: 'M16C_rts',
    104: 'M16C_sbb',
    105: 'M16C_sbjnz',
    106: 'M16C_sha',
    107: 'M16C_shl',
    108: 'M16C_smovb',
    109: 'M16C_smovf',
    110: 'M16C_sstr',
    111: 'M16C_stc',
    112: 'M16C_stctx',
    113: 'M16C_ste',
    114: 'M16C_stnz',
    115: 'M16C_stz',
    116: 'M16C_stzx',
    117: 'M16C_sub',
    118: 'M16C_tst',
    119: 'M16C_und',
    120: 'M16C_wait',
    121: 'M16C_xchg',
    122: 'M16C_xor',
    123: 'M16C_addx',
    124: 'M16C_bitindex',
    125: 'M16C_brk2',
    126: 'M16C_clip',
    127: 'M16C_cmpx',
    128: 'M16C_extz',
    129: 'M16C_freit',
    130: 'M16C_indexb',
    131: 'M16C_indexbd',
    132: 'M16C_indexbs',
    133: 'M16C_indexl',
    134: 'M16C_indexld',
    135: 'M16C_indexls',
    136: 'M16C_indexw',
    137: 'M16C_indexwd',
    138: 'M16C_indexws',
    139: 'M16C_max',
    140: 'M16C_min',
    141: 'M16C_movx',
    142: 'M16C_mulex',
    143: 'M16C_sccnd',
    144: 'M16C_scgeu',
    145: 'M16C_scgtu',
    146: 'M16C_sceq',
    147: 'M16C_scn',
    148: 'M16C_scle',
    149: 'M16C_sco',
    150: 'M16C_scge',
    151: 'M16C_scltu',
    152: 'M16C_scleu',
    153: 'M16C_scne',
    154: 'M16C_scpz',
    155: 'M16C_scgt',
    156: 'M16C_scno',
    157: 'M16C_sclt',
    158: 'M16C_scmpu',
    159: 'M16C_sin',
    160: 'M16C_smovu',
    161: 'M16C_sout',
    162: 'M16C_subx',
    163: 'M16C_shanc',
    164: 'M16C_shlnc',
    165: 'M16C_addf',
    166: 'M16C_adsf',
    167: 'M16C_cmpf',
    168: 'M16C_cnvif',
    169: 'M16C_divf',
    170: 'M16C_ediv',
    171: 'M16C_edivu',
    172: 'M16C_edivx',
    173: 'M16C_emul',
    174: 'M16C_emulu',
    175: 'M16C_exiti',
    176: 'M16C_index1',
    177: 'M16C_index2',
    178: 'M16C_mulf',
    179: 'M16C_mulx',
    180: 'M16C_round',
    181: 'M16C_stop',
    182: 'M16C_subf',
    183: 'M16C_suntil',
    184: 'M16C_swhile',
    185: 'M16C_last',
}
M16C_null = 0
M16C_abs = 1
M16C_adc = 2
M16C_adcf = 3
M16C_add = 4
M16C_adjnz = 5
M16C_and = 6
M16C_band = 7
M16C_bclr = 8
M16C_bmcnd = 9
M16C_bmgeu = 10
M16C_bmgtu = 11
M16C_bmeq = 12
M16C_bmn = 13
M16C_bmle = 14
M16C_bmo = 15
M16C_bmge = 16
M16C_bmltu = 17
M16C_bmleu = 18
M16C_bmne = 19
M16C_bmpz = 20
M16C_bmgt = 21
M16C_bmno = 22
M16C_bmlt = 23
M16C_bnand = 24
M16C_bnor = 25
M16C_bnot = 26
M16C_bntst = 27
M16C_bnxor = 28
M16C_bor = 29
M16C_brk = 30
M16C_bset = 31
M16C_btst = 32
M16C_btstc = 33
M16C_btsts = 34
M16C_bxor = 35
M16C_cmp = 36
M16C_dadc = 37
M16C_dadd = 38
M16C_dec = 39
M16C_div = 40
M16C_divu = 41
M16C_divx = 42
M16C_dsbb = 43
M16C_dsub = 44
M16C_enter = 45
M16C_exitd = 46
M16C_exts = 47
M16C_fclr = 48
M16C_fset = 49
M16C_inc = 50
M16C_int = 51
M16C_into = 52
M16C_jcnd = 53
M16C_jgeu = 54
M16C_jgtu = 55
M16C_jeq = 56
M16C_jn = 57
M16C_jle = 58
M16C_jo = 59
M16C_jge = 60
M16C_jltu = 61
M16C_jleu = 62
M16C_jne = 63
M16C_jpz = 64
M16C_jgt = 65
M16C_jno = 66
M16C_jlt = 67
M16C_jmp = 68
M16C_jmpi = 69
M16C_jmps = 70
M16C_jsr = 71
M16C_jsri = 72
M16C_jsrs = 73
M16C_ldc = 74
M16C_ldctx = 75
M16C_lde = 76
M16C_ldintb = 77
M16C_ldipl = 78
M16C_mov = 79
M16C_mova = 80
M16C_movhh = 81
M16C_movhl = 82
M16C_movlh = 83
M16C_movll = 84
M16C_mul = 85
M16C_mulu = 86
M16C_neg = 87
M16C_nop = 88
M16C_not = 89
M16C_or = 90
M16C_pop = 91
M16C_popc = 92
M16C_popm = 93
M16C_push = 94
M16C_pusha = 95
M16C_pushc = 96
M16C_pushm = 97
M16C_reit = 98
M16C_rmpa = 99
M16C_rolc = 100
M16C_rorc = 101
M16C_rot = 102
M16C_rts = 103
M16C_sbb = 104
M16C_sbjnz = 105
M16C_sha = 106
M16C_shl = 107
M16C_smovb = 108
M16C_smovf = 109
M16C_sstr = 110
M16C_stc = 111
M16C_stctx = 112
M16C_ste = 113
M16C_stnz = 114
M16C_stz = 115
M16C_stzx = 116
M16C_sub = 117
M16C_tst = 118
M16C_und = 119
M16C_wait = 120
M16C_xchg = 121
M16C_xor = 122
M16C_addx = 123
M16C_bitindex = 124
M16C_brk2 = 125
M16C_clip = 126
M16C_cmpx = 127
M16C_extz = 128
M16C_freit = 129
M16C_indexb = 130
M16C_indexbd = 131
M16C_indexbs = 132
M16C_indexl = 133
M16C_indexld = 134
M16C_indexls = 135
M16C_indexw = 136
M16C_indexwd = 137
M16C_indexws = 138
M16C_max = 139
M16C_min = 140
M16C_movx = 141
M16C_mulex = 142
M16C_sccnd = 143
M16C_scgeu = 144
M16C_scgtu = 145
M16C_sceq = 146
M16C_scn = 147
M16C_scle = 148
M16C_sco = 149
M16C_scge = 150
M16C_scltu = 151
M16C_scleu = 152
M16C_scne = 153
M16C_scpz = 154
M16C_scgt = 155
M16C_scno = 156
M16C_sclt = 157
M16C_scmpu = 158
M16C_sin = 159
M16C_smovu = 160
M16C_sout = 161
M16C_subx = 162
M16C_shanc = 163
M16C_shlnc = 164
M16C_addf = 165
M16C_adsf = 166
M16C_cmpf = 167
M16C_cnvif = 168
M16C_divf = 169
M16C_ediv = 170
M16C_edivu = 171
M16C_edivx = 172
M16C_emul = 173
M16C_emulu = 174
M16C_exiti = 175
M16C_index1 = 176
M16C_index2 = 177
M16C_mulf = 178
M16C_mulx = 179
M16C_round = 180
M16C_stop = 181
M16C_subf = 182
M16C_suntil = 183
M16C_swhile = 184
M16C_last = 185
m16c_itype_t = ctypes.c_uint32 # enum

# values for enumeration '_7592DA0097C3AE8561024DD32DB398BF'
_7592DA0097C3AE8561024DD32DB398BF__enumvalues = {
    0: 'm32r_null',
    1: 'm32r_add',
    2: 'm32r_add3',
    3: 'm32r_addi',
    4: 'm32r_addv',
    5: 'm32r_addv3',
    6: 'm32r_addx',
    7: 'm32r_and',
    8: 'm32r_and3',
    9: 'm32r_bc',
    10: 'm32r_beq',
    11: 'm32r_beqz',
    12: 'm32r_bgez',
    13: 'm32r_bgtz',
    14: 'm32r_bl',
    15: 'm32r_blez',
    16: 'm32r_bltz',
    17: 'm32r_bnc',
    18: 'm32r_bne',
    19: 'm32r_bnez',
    20: 'm32r_bra',
    21: 'm32r_cmp',
    22: 'm32r_cmpi',
    23: 'm32r_cmpu',
    24: 'm32r_cmpui',
    25: 'm32r_div',
    26: 'm32r_divu',
    27: 'm32r_jl',
    28: 'm32r_jmp',
    29: 'm32r_ld',
    30: 'm32r_ld24',
    31: 'm32r_ldb',
    32: 'm32r_ldh',
    33: 'm32r_ldi',
    34: 'm32r_ldub',
    35: 'm32r_lduh',
    36: 'm32r_lock',
    37: 'm32r_machi',
    38: 'm32r_maclo',
    39: 'm32r_macwhi',
    40: 'm32r_macwlo',
    41: 'm32r_mul',
    42: 'm32r_mulhi',
    43: 'm32r_mullo',
    44: 'm32r_mulwhi',
    45: 'm32r_mulwlo',
    46: 'm32r_mv',
    47: 'm32r_mvfachi',
    48: 'm32r_mvfaclo',
    49: 'm32r_mvfacmi',
    50: 'm32r_mvfc',
    51: 'm32r_mvtachi',
    52: 'm32r_mvtaclo',
    53: 'm32r_mvtc',
    54: 'm32r_neg',
    55: 'm32r_nop',
    56: 'm32r_not',
    57: 'm32r_or',
    58: 'm32r_or3',
    59: 'm32r_push',
    60: 'm32r_pop',
    61: 'm32r_rac',
    62: 'm32r_rach',
    63: 'm32r_rem',
    64: 'm32r_remu',
    65: 'm32r_rte',
    66: 'm32r_seth',
    67: 'm32r_sll',
    68: 'm32r_sll3',
    69: 'm32r_slli',
    70: 'm32r_sra',
    71: 'm32r_sra3',
    72: 'm32r_srai',
    73: 'm32r_srl',
    74: 'm32r_srl3',
    75: 'm32r_srli',
    76: 'm32r_st',
    77: 'm32r_stb',
    78: 'm32r_sth',
    79: 'm32r_sub',
    80: 'm32r_subv',
    81: 'm32r_subx',
    82: 'm32r_trap',
    83: 'm32r_unlock',
    84: 'm32r_xor',
    85: 'm32r_xor3',
    86: 'm32rx_bcl',
    87: 'm32rx_bncl',
    88: 'm32rx_cmpeq',
    89: 'm32rx_cmpz',
    90: 'm32rx_divh',
    91: 'm32rx_jc',
    92: 'm32rx_jnc',
    93: 'm32rx_machi',
    94: 'm32rx_maclo',
    95: 'm32rx_macwhi',
    96: 'm32rx_macwlo',
    97: 'm32rx_mulhi',
    98: 'm32rx_mullo',
    99: 'm32rx_mulwhi',
    100: 'm32rx_mulwlo',
    101: 'm32rx_mvfachi',
    102: 'm32rx_mvfaclo',
    103: 'm32rx_mvfacmi',
    104: 'm32rx_mvtachi',
    105: 'm32rx_mvtaclo',
    106: 'm32rx_rac',
    107: 'm32rx_rach',
    108: 'm32rx_satb',
    109: 'm32rx_sath',
    110: 'm32rx_sat',
    111: 'm32rx_pcmpbz',
    112: 'm32rx_sadd',
    113: 'm32rx_macwu1',
    114: 'm32rx_msblo',
    115: 'm32rx_mulwu1',
    116: 'm32rx_maclh1',
    117: 'm32rx_sc',
    118: 'm32rx_snc',
    119: 'm32r_fadd',
    120: 'm32r_fsub',
    121: 'm32r_fmul',
    122: 'm32r_fdiv',
    123: 'm32r_fmadd',
    124: 'm32r_fmsub',
    125: 'm32r_itof',
    126: 'm32r_utof',
    127: 'm32r_ftoi',
    128: 'm32r_ftos',
    129: 'm32r_fcmp',
    130: 'm32r_fcmpe',
    131: 'm32r_bset',
    132: 'm32r_bclr',
    133: 'm32r_btst',
    134: 'm32r_setpsw',
    135: 'm32r_clrpsw',
    136: 'm32r_last',
}
m32r_null = 0
m32r_add = 1
m32r_add3 = 2
m32r_addi = 3
m32r_addv = 4
m32r_addv3 = 5
m32r_addx = 6
m32r_and = 7
m32r_and3 = 8
m32r_bc = 9
m32r_beq = 10
m32r_beqz = 11
m32r_bgez = 12
m32r_bgtz = 13
m32r_bl = 14
m32r_blez = 15
m32r_bltz = 16
m32r_bnc = 17
m32r_bne = 18
m32r_bnez = 19
m32r_bra = 20
m32r_cmp = 21
m32r_cmpi = 22
m32r_cmpu = 23
m32r_cmpui = 24
m32r_div = 25
m32r_divu = 26
m32r_jl = 27
m32r_jmp = 28
m32r_ld = 29
m32r_ld24 = 30
m32r_ldb = 31
m32r_ldh = 32
m32r_ldi = 33
m32r_ldub = 34
m32r_lduh = 35
m32r_lock = 36
m32r_machi = 37
m32r_maclo = 38
m32r_macwhi = 39
m32r_macwlo = 40
m32r_mul = 41
m32r_mulhi = 42
m32r_mullo = 43
m32r_mulwhi = 44
m32r_mulwlo = 45
m32r_mv = 46
m32r_mvfachi = 47
m32r_mvfaclo = 48
m32r_mvfacmi = 49
m32r_mvfc = 50
m32r_mvtachi = 51
m32r_mvtaclo = 52
m32r_mvtc = 53
m32r_neg = 54
m32r_nop = 55
m32r_not = 56
m32r_or = 57
m32r_or3 = 58
m32r_push = 59
m32r_pop = 60
m32r_rac = 61
m32r_rach = 62
m32r_rem = 63
m32r_remu = 64
m32r_rte = 65
m32r_seth = 66
m32r_sll = 67
m32r_sll3 = 68
m32r_slli = 69
m32r_sra = 70
m32r_sra3 = 71
m32r_srai = 72
m32r_srl = 73
m32r_srl3 = 74
m32r_srli = 75
m32r_st = 76
m32r_stb = 77
m32r_sth = 78
m32r_sub = 79
m32r_subv = 80
m32r_subx = 81
m32r_trap = 82
m32r_unlock = 83
m32r_xor = 84
m32r_xor3 = 85
m32rx_bcl = 86
m32rx_bncl = 87
m32rx_cmpeq = 88
m32rx_cmpz = 89
m32rx_divh = 90
m32rx_jc = 91
m32rx_jnc = 92
m32rx_machi = 93
m32rx_maclo = 94
m32rx_macwhi = 95
m32rx_macwlo = 96
m32rx_mulhi = 97
m32rx_mullo = 98
m32rx_mulwhi = 99
m32rx_mulwlo = 100
m32rx_mvfachi = 101
m32rx_mvfaclo = 102
m32rx_mvfacmi = 103
m32rx_mvtachi = 104
m32rx_mvtaclo = 105
m32rx_rac = 106
m32rx_rach = 107
m32rx_satb = 108
m32rx_sath = 109
m32rx_sat = 110
m32rx_pcmpbz = 111
m32rx_sadd = 112
m32rx_macwu1 = 113
m32rx_msblo = 114
m32rx_mulwu1 = 115
m32rx_maclh1 = 116
m32rx_sc = 117
m32rx_snc = 118
m32r_fadd = 119
m32r_fsub = 120
m32r_fmul = 121
m32r_fdiv = 122
m32r_fmadd = 123
m32r_fmsub = 124
m32r_itof = 125
m32r_utof = 126
m32r_ftoi = 127
m32r_ftos = 128
m32r_fcmp = 129
m32r_fcmpe = 130
m32r_bset = 131
m32r_bclr = 132
m32r_btst = 133
m32r_setpsw = 134
m32r_clrpsw = 135
m32r_last = 136
_7592DA0097C3AE8561024DD32DB398BF = ctypes.c_uint32 # enum

# values for enumeration '_28B773E1B8BE2E4EF6096F078CBAE501'
_28B773E1B8BE2E4EF6096F078CBAE501__enumvalues = {
    0: 'm740_null',
    1: 'm740_adc',
    2: 'm740_and',
    3: 'm740_asl',
    4: 'm740_bbc',
    5: 'm740_bbs',
    6: 'm740_bcc',
    7: 'm740_bcs',
    8: 'm740_beq',
    9: 'm740_bit',
    10: 'm740_bmi',
    11: 'm740_bne',
    12: 'm740_bpl',
    13: 'm740_bra',
    14: 'm740_brk',
    15: 'm740_bvc',
    16: 'm740_bvs',
    17: 'm740_clb',
    18: 'm740_clc',
    19: 'm740_cld',
    20: 'm740_cli',
    21: 'm740_clt',
    22: 'm740_clv',
    23: 'm740_cmp',
    24: 'm740_com',
    25: 'm740_cpx',
    26: 'm740_cpy',
    27: 'm740_dec',
    28: 'm740_dex',
    29: 'm740_dey',
    30: 'm740_div',
    31: 'm740_eor',
    32: 'm740_inc',
    33: 'm740_inx',
    34: 'm740_iny',
    35: 'm740_jmp',
    36: 'm740_jsr',
    37: 'm740_lda',
    38: 'm740_ldm',
    39: 'm740_ldx',
    40: 'm740_ldy',
    41: 'm740_lsr',
    42: 'm740_mul',
    43: 'm740_nop',
    44: 'm740_ora',
    45: 'm740_pha',
    46: 'm740_php',
    47: 'm740_pla',
    48: 'm740_plp',
    49: 'm740_rol',
    50: 'm740_ror',
    51: 'm740_rrf',
    52: 'm740_rti',
    53: 'm740_rts',
    54: 'm740_sbc',
    55: 'm740_seb',
    56: 'm740_sec',
    57: 'm740_sed',
    58: 'm740_sei',
    59: 'm740_set',
    60: 'm740_sta',
    61: 'm740_stp',
    62: 'm740_stx',
    63: 'm740_sty',
    64: 'm740_tax',
    65: 'm740_tay',
    66: 'm740_tst',
    67: 'm740_tsx',
    68: 'm740_txa',
    69: 'm740_txs',
    70: 'm740_tya',
    71: 'm740_wit',
    72: 'm740_last',
}
m740_null = 0
m740_adc = 1
m740_and = 2
m740_asl = 3
m740_bbc = 4
m740_bbs = 5
m740_bcc = 6
m740_bcs = 7
m740_beq = 8
m740_bit = 9
m740_bmi = 10
m740_bne = 11
m740_bpl = 12
m740_bra = 13
m740_brk = 14
m740_bvc = 15
m740_bvs = 16
m740_clb = 17
m740_clc = 18
m740_cld = 19
m740_cli = 20
m740_clt = 21
m740_clv = 22
m740_cmp = 23
m740_com = 24
m740_cpx = 25
m740_cpy = 26
m740_dec = 27
m740_dex = 28
m740_dey = 29
m740_div = 30
m740_eor = 31
m740_inc = 32
m740_inx = 33
m740_iny = 34
m740_jmp = 35
m740_jsr = 36
m740_lda = 37
m740_ldm = 38
m740_ldx = 39
m740_ldy = 40
m740_lsr = 41
m740_mul = 42
m740_nop = 43
m740_ora = 44
m740_pha = 45
m740_php = 46
m740_pla = 47
m740_plp = 48
m740_rol = 49
m740_ror = 50
m740_rrf = 51
m740_rti = 52
m740_rts = 53
m740_sbc = 54
m740_seb = 55
m740_sec = 56
m740_sed = 57
m740_sei = 58
m740_set = 59
m740_sta = 60
m740_stp = 61
m740_stx = 62
m740_sty = 63
m740_tax = 64
m740_tay = 65
m740_tst = 66
m740_tsx = 67
m740_txa = 68
m740_txs = 69
m740_tya = 70
m740_wit = 71
m740_last = 72
_28B773E1B8BE2E4EF6096F078CBAE501 = ctypes.c_uint32 # enum

# values for enumeration '_EDE12DD9CAD2C3BA38E6D4F45B165FDD'
_EDE12DD9CAD2C3BA38E6D4F45B165FDD__enumvalues = {
    0: 'm7700_null',
    1: 'm7700_adc',
    2: 'm7700_and',
    3: 'm7700_asl',
    4: 'm7700_bbc',
    5: 'm7700_bbs',
    6: 'm7700_bcc',
    7: 'm7700_bcs',
    8: 'm7700_beq',
    9: 'm7700_bmi',
    10: 'm7700_bne',
    11: 'm7700_bpl',
    12: 'm7700_bra',
    13: 'm7700_brk',
    14: 'm7700_bvc',
    15: 'm7700_bvs',
    16: 'm7700_clb',
    17: 'm7700_clc',
    18: 'm7700_cli',
    19: 'm7700_clm',
    20: 'm7700_clp',
    21: 'm7700_clv',
    22: 'm7700_cmp',
    23: 'm7700_cpx',
    24: 'm7700_cpy',
    25: 'm7700_dec',
    26: 'm7700_dex',
    27: 'm7700_dey',
    28: 'm7700_div',
    29: 'm7700_eor',
    30: 'm7700_inc',
    31: 'm7700_inx',
    32: 'm7700_iny',
    33: 'm7700_jmp',
    34: 'm7700_jsr',
    35: 'm7700_lda',
    36: 'm7700_ldm',
    37: 'm7700_ldt',
    38: 'm7700_ldx',
    39: 'm7700_ldy',
    40: 'm7700_lsr',
    41: 'm7700_mpy',
    42: 'm7700_mvn',
    43: 'm7700_mvp',
    44: 'm7700_nop',
    45: 'm7700_ora',
    46: 'm7700_pea',
    47: 'm7700_pei',
    48: 'm7700_per',
    49: 'm7700_pha',
    50: 'm7700_phb',
    51: 'm7700_phd',
    52: 'm7700_phg',
    53: 'm7700_php',
    54: 'm7700_pht',
    55: 'm7700_phx',
    56: 'm7700_phy',
    57: 'm7700_pla',
    58: 'm7700_plb',
    59: 'm7700_pld',
    60: 'm7700_plp',
    61: 'm7700_plt',
    62: 'm7700_plx',
    63: 'm7700_ply',
    64: 'm7700_psh',
    65: 'm7700_pul',
    66: 'm7700_rla',
    67: 'm7700_rol',
    68: 'm7700_ror',
    69: 'm7700_rti',
    70: 'm7700_rtl',
    71: 'm7700_rts',
    72: 'm7700_sbc',
    73: 'm7700_seb',
    74: 'm7700_sec',
    75: 'm7700_sei',
    76: 'm7700_sem',
    77: 'm7700_sep',
    78: 'm7700_sta',
    79: 'm7700_stp',
    80: 'm7700_stx',
    81: 'm7700_sty',
    82: 'm7700_tad',
    83: 'm7700_tas',
    84: 'm7700_tax',
    85: 'm7700_tay',
    86: 'm7700_tbd',
    87: 'm7700_tbs',
    88: 'm7700_tbx',
    89: 'm7700_tby',
    90: 'm7700_tda',
    91: 'm7700_tdb',
    92: 'm7700_tsa',
    93: 'm7700_tsb',
    94: 'm7700_tsx',
    95: 'm7700_txa',
    96: 'm7700_txb',
    97: 'm7700_txs',
    98: 'm7700_txy',
    99: 'm7700_tya',
    100: 'm7700_tyb',
    101: 'm7700_tyx',
    102: 'm7700_wit',
    103: 'm7700_xab',
    104: 'm7750_asr',
    105: 'm7750_divs',
    106: 'm7750_exts',
    107: 'm7750_extz',
    108: 'm7750_mpys',
    109: 'm7700_last',
}
m7700_null = 0
m7700_adc = 1
m7700_and = 2
m7700_asl = 3
m7700_bbc = 4
m7700_bbs = 5
m7700_bcc = 6
m7700_bcs = 7
m7700_beq = 8
m7700_bmi = 9
m7700_bne = 10
m7700_bpl = 11
m7700_bra = 12
m7700_brk = 13
m7700_bvc = 14
m7700_bvs = 15
m7700_clb = 16
m7700_clc = 17
m7700_cli = 18
m7700_clm = 19
m7700_clp = 20
m7700_clv = 21
m7700_cmp = 22
m7700_cpx = 23
m7700_cpy = 24
m7700_dec = 25
m7700_dex = 26
m7700_dey = 27
m7700_div = 28
m7700_eor = 29
m7700_inc = 30
m7700_inx = 31
m7700_iny = 32
m7700_jmp = 33
m7700_jsr = 34
m7700_lda = 35
m7700_ldm = 36
m7700_ldt = 37
m7700_ldx = 38
m7700_ldy = 39
m7700_lsr = 40
m7700_mpy = 41
m7700_mvn = 42
m7700_mvp = 43
m7700_nop = 44
m7700_ora = 45
m7700_pea = 46
m7700_pei = 47
m7700_per = 48
m7700_pha = 49
m7700_phb = 50
m7700_phd = 51
m7700_phg = 52
m7700_php = 53
m7700_pht = 54
m7700_phx = 55
m7700_phy = 56
m7700_pla = 57
m7700_plb = 58
m7700_pld = 59
m7700_plp = 60
m7700_plt = 61
m7700_plx = 62
m7700_ply = 63
m7700_psh = 64
m7700_pul = 65
m7700_rla = 66
m7700_rol = 67
m7700_ror = 68
m7700_rti = 69
m7700_rtl = 70
m7700_rts = 71
m7700_sbc = 72
m7700_seb = 73
m7700_sec = 74
m7700_sei = 75
m7700_sem = 76
m7700_sep = 77
m7700_sta = 78
m7700_stp = 79
m7700_stx = 80
m7700_sty = 81
m7700_tad = 82
m7700_tas = 83
m7700_tax = 84
m7700_tay = 85
m7700_tbd = 86
m7700_tbs = 87
m7700_tbx = 88
m7700_tby = 89
m7700_tda = 90
m7700_tdb = 91
m7700_tsa = 92
m7700_tsb = 93
m7700_tsx = 94
m7700_txa = 95
m7700_txb = 96
m7700_txs = 97
m7700_txy = 98
m7700_tya = 99
m7700_tyb = 100
m7700_tyx = 101
m7700_wit = 102
m7700_xab = 103
m7750_asr = 104
m7750_divs = 105
m7750_exts = 106
m7750_extz = 107
m7750_mpys = 108
m7700_last = 109
_EDE12DD9CAD2C3BA38E6D4F45B165FDD = ctypes.c_uint32 # enum

# values for enumeration '_C1D2E47DA2E2EAC5B98337296A36150C'
_C1D2E47DA2E2EAC5B98337296A36150C__enumvalues = {
    0: 'm7900_null',
    1: 'm7900_abs',
    2: 'm7900_absd',
    3: 'm7900_adc',
    4: 'm7900_adcb',
    5: 'm7900_adcd',
    6: 'm7900_add',
    7: 'm7900_addb',
    8: 'm7900_addd',
    9: 'm7900_addm',
    10: 'm7900_addmb',
    11: 'm7900_addmd',
    12: 'm7900_adds',
    13: 'm7900_addx',
    14: 'm7900_addy',
    15: 'm7900_and',
    16: 'm7900_andb',
    17: 'm7900_andm',
    18: 'm7900_andmb',
    19: 'm7900_andmd',
    20: 'm7900_asl',
    21: 'm7900_asln',
    22: 'm7900_asldn',
    23: 'm7900_asr',
    24: 'm7900_asrn',
    25: 'm7900_asrdn',
    26: 'm7900_bbc',
    27: 'm7900_bbcb',
    28: 'm7900_bbs',
    29: 'm7900_bbsb',
    30: 'm7900_bcc',
    31: 'm7900_bcs',
    32: 'm7900_beq',
    33: 'm7900_bge',
    34: 'm7900_bgt',
    35: 'm7900_bgtu',
    36: 'm7900_ble',
    37: 'm7900_bleu',
    38: 'm7900_blt',
    39: 'm7900_bmi',
    40: 'm7900_bne',
    41: 'm7900_bpl',
    42: 'm7900_bra',
    43: 'm7900_bral',
    44: 'm7900_brk',
    45: 'm7900_bsc',
    46: 'm7900_bsr',
    47: 'm7900_bss',
    48: 'm7900_bvc',
    49: 'm7900_bvs',
    50: 'm7900_cbeq',
    51: 'm7900_cbeqb',
    52: 'm7900_cbne',
    53: 'm7900_cbneb',
    54: 'm7900_clc',
    55: 'm7900_cli',
    56: 'm7900_clm',
    57: 'm7900_clp',
    58: 'm7900_clr',
    59: 'm7900_clrb',
    60: 'm7900_clrm',
    61: 'm7900_clrmb',
    62: 'm7900_clrx',
    63: 'm7900_clry',
    64: 'm7900_clv',
    65: 'm7900_cmp',
    66: 'm7900_cmpb',
    67: 'm7900_cmpd',
    68: 'm7900_cmpm',
    69: 'm7900_cmpmb',
    70: 'm7900_cmpmd',
    71: 'm7900_cpx',
    72: 'm7900_cpy',
    73: 'm7900_debne',
    74: 'm7900_dec',
    75: 'm7900_dex',
    76: 'm7900_dey',
    77: 'm7900_div',
    78: 'm7900_divs',
    79: 'm7900_dxbne',
    80: 'm7900_dybne',
    81: 'm7900_eor',
    82: 'm7900_eorb',
    83: 'm7900_eorm',
    84: 'm7900_eormb',
    85: 'm7900_eormd',
    86: 'm7900_exts',
    87: 'm7900_extsd',
    88: 'm7900_extz',
    89: 'm7900_extzd',
    90: 'm7900_inc',
    91: 'm7900_inx',
    92: 'm7900_iny',
    93: 'm7900_jmp',
    94: 'm7900_jmpl',
    95: 'm7900_jsr',
    96: 'm7900_jsrl',
    97: 'm7900_lda',
    98: 'm7900_ldab',
    99: 'm7900_ldad',
    100: 'm7900_lddn',
    101: 'm7900_ldt',
    102: 'm7900_ldx',
    103: 'm7900_ldxb',
    104: 'm7900_ldy',
    105: 'm7900_ldyb',
    106: 'm7900_lsr',
    107: 'm7900_lsrn',
    108: 'm7900_lsrdn',
    109: 'm7900_movm',
    110: 'm7900_movmb',
    111: 'm7900_movr',
    112: 'm7900_movrb',
    113: 'm7900_mpy',
    114: 'm7900_mpys',
    115: 'm7900_mvn',
    116: 'm7900_mvp',
    117: 'm7900_neg',
    118: 'm7900_negd',
    119: 'm7900_nop',
    120: 'm7900_ora',
    121: 'm7900_orab',
    122: 'm7900_oram',
    123: 'm7900_oramb',
    124: 'm7900_oramd',
    125: 'm7900_pea',
    126: 'm7900_pei',
    127: 'm7900_per',
    128: 'm7900_pha',
    129: 'm7900_phb',
    130: 'm7900_phd',
    131: 'm7900_phdn',
    132: 'm7900_phg',
    133: 'm7900_phldn',
    134: 'm7900_php',
    135: 'm7900_pht',
    136: 'm7900_phx',
    137: 'm7900_phy',
    138: 'm7900_pla',
    139: 'm7900_plb',
    140: 'm7900_pld',
    141: 'm7900_pldn',
    142: 'm7900_plp',
    143: 'm7900_plt',
    144: 'm7900_plx',
    145: 'm7900_ply',
    146: 'm7900_psh',
    147: 'm7900_pul',
    148: 'm7900_rla',
    149: 'm7900_rmpa',
    150: 'm7900_rol',
    151: 'm7900_roln',
    152: 'm7900_roldn',
    153: 'm7900_ror',
    154: 'm7900_rorn',
    155: 'm7900_rordn',
    156: 'm7900_rti',
    157: 'm7900_rtl',
    158: 'm7900_rtld',
    159: 'm7900_rts',
    160: 'm7900_rtsdn',
    161: 'm7900_sbc',
    162: 'm7900_sbcb',
    163: 'm7900_sbcd',
    164: 'm7900_sec',
    165: 'm7900_sei',
    166: 'm7900_sem',
    167: 'm7900_sep',
    168: 'm7900_sta',
    169: 'm7900_stab',
    170: 'm7900_stad',
    171: 'm7900_stp',
    172: 'm7900_stx',
    173: 'm7900_sty',
    174: 'm7900_sub',
    175: 'm7900_subb',
    176: 'm7900_subd',
    177: 'm7900_subm',
    178: 'm7900_submb',
    179: 'm7900_submd',
    180: 'm7900_subs',
    181: 'm7900_subx',
    182: 'm7900_suby',
    183: 'm7900_tadn',
    184: 'm7900_tas',
    185: 'm7900_tax',
    186: 'm7900_tay',
    187: 'm7900_tbdn',
    188: 'm7900_tbs',
    189: 'm7900_tbx',
    190: 'm7900_tby',
    191: 'm7900_tdan',
    192: 'm7900_tdbn',
    193: 'm7900_tds',
    194: 'm7900_tsa',
    195: 'm7900_tsb',
    196: 'm7900_tsd',
    197: 'm7900_tsx',
    198: 'm7900_txa',
    199: 'm7900_txb',
    200: 'm7900_txs',
    201: 'm7900_txy',
    202: 'm7900_tya',
    203: 'm7900_tyb',
    204: 'm7900_tyx',
    205: 'm7900_wit',
    206: 'm7900_xab',
    207: 'm7900_last',
}
m7900_null = 0
m7900_abs = 1
m7900_absd = 2
m7900_adc = 3
m7900_adcb = 4
m7900_adcd = 5
m7900_add = 6
m7900_addb = 7
m7900_addd = 8
m7900_addm = 9
m7900_addmb = 10
m7900_addmd = 11
m7900_adds = 12
m7900_addx = 13
m7900_addy = 14
m7900_and = 15
m7900_andb = 16
m7900_andm = 17
m7900_andmb = 18
m7900_andmd = 19
m7900_asl = 20
m7900_asln = 21
m7900_asldn = 22
m7900_asr = 23
m7900_asrn = 24
m7900_asrdn = 25
m7900_bbc = 26
m7900_bbcb = 27
m7900_bbs = 28
m7900_bbsb = 29
m7900_bcc = 30
m7900_bcs = 31
m7900_beq = 32
m7900_bge = 33
m7900_bgt = 34
m7900_bgtu = 35
m7900_ble = 36
m7900_bleu = 37
m7900_blt = 38
m7900_bmi = 39
m7900_bne = 40
m7900_bpl = 41
m7900_bra = 42
m7900_bral = 43
m7900_brk = 44
m7900_bsc = 45
m7900_bsr = 46
m7900_bss = 47
m7900_bvc = 48
m7900_bvs = 49
m7900_cbeq = 50
m7900_cbeqb = 51
m7900_cbne = 52
m7900_cbneb = 53
m7900_clc = 54
m7900_cli = 55
m7900_clm = 56
m7900_clp = 57
m7900_clr = 58
m7900_clrb = 59
m7900_clrm = 60
m7900_clrmb = 61
m7900_clrx = 62
m7900_clry = 63
m7900_clv = 64
m7900_cmp = 65
m7900_cmpb = 66
m7900_cmpd = 67
m7900_cmpm = 68
m7900_cmpmb = 69
m7900_cmpmd = 70
m7900_cpx = 71
m7900_cpy = 72
m7900_debne = 73
m7900_dec = 74
m7900_dex = 75
m7900_dey = 76
m7900_div = 77
m7900_divs = 78
m7900_dxbne = 79
m7900_dybne = 80
m7900_eor = 81
m7900_eorb = 82
m7900_eorm = 83
m7900_eormb = 84
m7900_eormd = 85
m7900_exts = 86
m7900_extsd = 87
m7900_extz = 88
m7900_extzd = 89
m7900_inc = 90
m7900_inx = 91
m7900_iny = 92
m7900_jmp = 93
m7900_jmpl = 94
m7900_jsr = 95
m7900_jsrl = 96
m7900_lda = 97
m7900_ldab = 98
m7900_ldad = 99
m7900_lddn = 100
m7900_ldt = 101
m7900_ldx = 102
m7900_ldxb = 103
m7900_ldy = 104
m7900_ldyb = 105
m7900_lsr = 106
m7900_lsrn = 107
m7900_lsrdn = 108
m7900_movm = 109
m7900_movmb = 110
m7900_movr = 111
m7900_movrb = 112
m7900_mpy = 113
m7900_mpys = 114
m7900_mvn = 115
m7900_mvp = 116
m7900_neg = 117
m7900_negd = 118
m7900_nop = 119
m7900_ora = 120
m7900_orab = 121
m7900_oram = 122
m7900_oramb = 123
m7900_oramd = 124
m7900_pea = 125
m7900_pei = 126
m7900_per = 127
m7900_pha = 128
m7900_phb = 129
m7900_phd = 130
m7900_phdn = 131
m7900_phg = 132
m7900_phldn = 133
m7900_php = 134
m7900_pht = 135
m7900_phx = 136
m7900_phy = 137
m7900_pla = 138
m7900_plb = 139
m7900_pld = 140
m7900_pldn = 141
m7900_plp = 142
m7900_plt = 143
m7900_plx = 144
m7900_ply = 145
m7900_psh = 146
m7900_pul = 147
m7900_rla = 148
m7900_rmpa = 149
m7900_rol = 150
m7900_roln = 151
m7900_roldn = 152
m7900_ror = 153
m7900_rorn = 154
m7900_rordn = 155
m7900_rti = 156
m7900_rtl = 157
m7900_rtld = 158
m7900_rts = 159
m7900_rtsdn = 160
m7900_sbc = 161
m7900_sbcb = 162
m7900_sbcd = 163
m7900_sec = 164
m7900_sei = 165
m7900_sem = 166
m7900_sep = 167
m7900_sta = 168
m7900_stab = 169
m7900_stad = 170
m7900_stp = 171
m7900_stx = 172
m7900_sty = 173
m7900_sub = 174
m7900_subb = 175
m7900_subd = 176
m7900_subm = 177
m7900_submb = 178
m7900_submd = 179
m7900_subs = 180
m7900_subx = 181
m7900_suby = 182
m7900_tadn = 183
m7900_tas = 184
m7900_tax = 185
m7900_tay = 186
m7900_tbdn = 187
m7900_tbs = 188
m7900_tbx = 189
m7900_tby = 190
m7900_tdan = 191
m7900_tdbn = 192
m7900_tds = 193
m7900_tsa = 194
m7900_tsb = 195
m7900_tsd = 196
m7900_tsx = 197
m7900_txa = 198
m7900_txb = 199
m7900_txs = 200
m7900_txy = 201
m7900_tya = 202
m7900_tyb = 203
m7900_tyx = 204
m7900_wit = 205
m7900_xab = 206
m7900_last = 207
_C1D2E47DA2E2EAC5B98337296A36150C = ctypes.c_uint32 # enum

# values for enumeration '_F0E7DCDA850A951FAF4B95795C1FC42C'
_F0E7DCDA850A951FAF4B95795C1FC42C__enumvalues = {
    0: 'st9_null',
    1: 'st9_ld',
    2: 'st9_ldw',
    3: 'st9_ldpp',
    4: 'st9_ldpd',
    5: 'st9_lddp',
    6: 'st9_lddd',
    7: 'st9_add',
    8: 'st9_addw',
    9: 'st9_adc',
    10: 'st9_adcw',
    11: 'st9_sub',
    12: 'st9_subw',
    13: 'st9_sbc',
    14: 'st9_sbcw',
    15: 'st9_and',
    16: 'st9_andw',
    17: 'st9_or',
    18: 'st9_orw',
    19: 'st9_xor',
    20: 'st9_xorw',
    21: 'st9_cp',
    22: 'st9_cpw',
    23: 'st9_tm',
    24: 'st9_tmw',
    25: 'st9_tcm',
    26: 'st9_tcmw',
    27: 'st9_inc',
    28: 'st9_incw',
    29: 'st9_dec',
    30: 'st9_decw',
    31: 'st9_sla',
    32: 'st9_slaw',
    33: 'st9_sra',
    34: 'st9_sraw',
    35: 'st9_rrc',
    36: 'st9_rrcw',
    37: 'st9_rlc',
    38: 'st9_rlcw',
    39: 'st9_ror',
    40: 'st9_rol',
    41: 'st9_clr',
    42: 'st9_cpl',
    43: 'st9_swap',
    44: 'st9_da',
    45: 'st9_push',
    46: 'st9_pushw',
    47: 'st9_pea',
    48: 'st9_pop',
    49: 'st9_popw',
    50: 'st9_pushu',
    51: 'st9_pushuw',
    52: 'st9_peau',
    53: 'st9_popu',
    54: 'st9_popuw',
    55: 'st9_link',
    56: 'st9_unlink',
    57: 'st9_linku',
    58: 'st9_unlinku',
    59: 'st9_mul',
    60: 'st9_div',
    61: 'st9_divws',
    62: 'st9_bset',
    63: 'st9_bres',
    64: 'st9_bcpl',
    65: 'st9_btset',
    66: 'st9_bld',
    67: 'st9_band',
    68: 'st9_bor',
    69: 'st9_bxor',
    70: 'st9_ret',
    71: 'st9_rets',
    72: 'st9_iret',
    73: 'st9_jrcc',
    74: 'st9_jpcc',
    75: 'st9_jp',
    76: 'st9_jps',
    77: 'st9_call',
    78: 'st9_calls',
    79: 'st9_btjf',
    80: 'st9_btjt',
    81: 'st9_djnz',
    82: 'st9_dwjnz',
    83: 'st9_cpjfi',
    84: 'st9_cpjti',
    85: 'st9_xch',
    86: 'st9_srp',
    87: 'st9_srp0',
    88: 'st9_srp1',
    89: 'st9_spp',
    90: 'st9_ext',
    91: 'st9_ei',
    92: 'st9_di',
    93: 'st9_scf',
    94: 'st9_rcf',
    95: 'st9_ccf',
    96: 'st9_spm',
    97: 'st9_sdm',
    98: 'st9_nop',
    99: 'st9_wfi',
    100: 'st9_halt',
    101: 'st9_etrap',
    102: 'st9_eret',
    103: 'st9_ald',
    104: 'st9_aldw',
    105: 'st9_last',
}
st9_null = 0
st9_ld = 1
st9_ldw = 2
st9_ldpp = 3
st9_ldpd = 4
st9_lddp = 5
st9_lddd = 6
st9_add = 7
st9_addw = 8
st9_adc = 9
st9_adcw = 10
st9_sub = 11
st9_subw = 12
st9_sbc = 13
st9_sbcw = 14
st9_and = 15
st9_andw = 16
st9_or = 17
st9_orw = 18
st9_xor = 19
st9_xorw = 20
st9_cp = 21
st9_cpw = 22
st9_tm = 23
st9_tmw = 24
st9_tcm = 25
st9_tcmw = 26
st9_inc = 27
st9_incw = 28
st9_dec = 29
st9_decw = 30
st9_sla = 31
st9_slaw = 32
st9_sra = 33
st9_sraw = 34
st9_rrc = 35
st9_rrcw = 36
st9_rlc = 37
st9_rlcw = 38
st9_ror = 39
st9_rol = 40
st9_clr = 41
st9_cpl = 42
st9_swap = 43
st9_da = 44
st9_push = 45
st9_pushw = 46
st9_pea = 47
st9_pop = 48
st9_popw = 49
st9_pushu = 50
st9_pushuw = 51
st9_peau = 52
st9_popu = 53
st9_popuw = 54
st9_link = 55
st9_unlink = 56
st9_linku = 57
st9_unlinku = 58
st9_mul = 59
st9_div = 60
st9_divws = 61
st9_bset = 62
st9_bres = 63
st9_bcpl = 64
st9_btset = 65
st9_bld = 66
st9_band = 67
st9_bor = 68
st9_bxor = 69
st9_ret = 70
st9_rets = 71
st9_iret = 72
st9_jrcc = 73
st9_jpcc = 74
st9_jp = 75
st9_jps = 76
st9_call = 77
st9_calls = 78
st9_btjf = 79
st9_btjt = 80
st9_djnz = 81
st9_dwjnz = 82
st9_cpjfi = 83
st9_cpjti = 84
st9_xch = 85
st9_srp = 86
st9_srp0 = 87
st9_srp1 = 88
st9_spp = 89
st9_ext = 90
st9_ei = 91
st9_di = 92
st9_scf = 93
st9_rcf = 94
st9_ccf = 95
st9_spm = 96
st9_sdm = 97
st9_nop = 98
st9_wfi = 99
st9_halt = 100
st9_etrap = 101
st9_eret = 102
st9_ald = 103
st9_aldw = 104
st9_last = 105
_F0E7DCDA850A951FAF4B95795C1FC42C = ctypes.c_uint32 # enum

# values for enumeration '_1C028A4CD0C7B57357247010273269CB'
_1C028A4CD0C7B57357247010273269CB__enumvalues = {
    0: 'fr_null',
    1: 'fr_add',
    2: 'fr_add2',
    3: 'fr_addc',
    4: 'fr_addn',
    5: 'fr_addn2',
    6: 'fr_sub',
    7: 'fr_subc',
    8: 'fr_subn',
    9: 'fr_cmp',
    10: 'fr_cmp2',
    11: 'fr_and',
    12: 'fr_andh',
    13: 'fr_andb',
    14: 'fr_or',
    15: 'fr_orh',
    16: 'fr_orb',
    17: 'fr_eor',
    18: 'fr_eorh',
    19: 'fr_eorb',
    20: 'fr_bandl',
    21: 'fr_bandh',
    22: 'fr_borl',
    23: 'fr_borh',
    24: 'fr_beorl',
    25: 'fr_beorh',
    26: 'fr_btstl',
    27: 'fr_btsth',
    28: 'fr_mul',
    29: 'fr_mulu',
    30: 'fr_mulh',
    31: 'fr_muluh',
    32: 'fr_div0s',
    33: 'fr_div0u',
    34: 'fr_div1',
    35: 'fr_div2',
    36: 'fr_div3',
    37: 'fr_div4s',
    38: 'fr_lsl',
    39: 'fr_lsl2',
    40: 'fr_lsr',
    41: 'fr_lsr2',
    42: 'fr_asr',
    43: 'fr_asr2',
    44: 'fr_ldi_32',
    45: 'fr_ldi_20',
    46: 'fr_ldi_8',
    47: 'fr_ld',
    48: 'fr_lduh',
    49: 'fr_ldub',
    50: 'fr_st',
    51: 'fr_sth',
    52: 'fr_stb',
    53: 'fr_mov',
    54: 'fr_jmp',
    55: 'fr_call',
    56: 'fr_ret',
    57: 'fr_int',
    58: 'fr_inte',
    59: 'fr_reti',
    60: 'fr_bra',
    61: 'fr_bno',
    62: 'fr_beq',
    63: 'fr_bne',
    64: 'fr_bc',
    65: 'fr_bnc',
    66: 'fr_bn',
    67: 'fr_bp',
    68: 'fr_bv',
    69: 'fr_bnv',
    70: 'fr_blt',
    71: 'fr_bge',
    72: 'fr_ble',
    73: 'fr_bgt',
    74: 'fr_bls',
    75: 'fr_bhi',
    76: 'fr_dmov',
    77: 'fr_dmovh',
    78: 'fr_dmovb',
    79: 'fr_ldres',
    80: 'fr_stres',
    81: 'fr_copop',
    82: 'fr_copld',
    83: 'fr_copst',
    84: 'fr_copsv',
    85: 'fr_nop',
    86: 'fr_andccr',
    87: 'fr_orccr',
    88: 'fr_stilm',
    89: 'fr_addsp',
    90: 'fr_extsb',
    91: 'fr_extub',
    92: 'fr_extsh',
    93: 'fr_extuh',
    94: 'fr_ldm0',
    95: 'fr_ldm1',
    96: 'fr_stm0',
    97: 'fr_stm1',
    98: 'fr_enter',
    99: 'fr_leave',
    100: 'fr_xchb',
    101: 'fr_last',
}
fr_null = 0
fr_add = 1
fr_add2 = 2
fr_addc = 3
fr_addn = 4
fr_addn2 = 5
fr_sub = 6
fr_subc = 7
fr_subn = 8
fr_cmp = 9
fr_cmp2 = 10
fr_and = 11
fr_andh = 12
fr_andb = 13
fr_or = 14
fr_orh = 15
fr_orb = 16
fr_eor = 17
fr_eorh = 18
fr_eorb = 19
fr_bandl = 20
fr_bandh = 21
fr_borl = 22
fr_borh = 23
fr_beorl = 24
fr_beorh = 25
fr_btstl = 26
fr_btsth = 27
fr_mul = 28
fr_mulu = 29
fr_mulh = 30
fr_muluh = 31
fr_div0s = 32
fr_div0u = 33
fr_div1 = 34
fr_div2 = 35
fr_div3 = 36
fr_div4s = 37
fr_lsl = 38
fr_lsl2 = 39
fr_lsr = 40
fr_lsr2 = 41
fr_asr = 42
fr_asr2 = 43
fr_ldi_32 = 44
fr_ldi_20 = 45
fr_ldi_8 = 46
fr_ld = 47
fr_lduh = 48
fr_ldub = 49
fr_st = 50
fr_sth = 51
fr_stb = 52
fr_mov = 53
fr_jmp = 54
fr_call = 55
fr_ret = 56
fr_int = 57
fr_inte = 58
fr_reti = 59
fr_bra = 60
fr_bno = 61
fr_beq = 62
fr_bne = 63
fr_bc = 64
fr_bnc = 65
fr_bn = 66
fr_bp = 67
fr_bv = 68
fr_bnv = 69
fr_blt = 70
fr_bge = 71
fr_ble = 72
fr_bgt = 73
fr_bls = 74
fr_bhi = 75
fr_dmov = 76
fr_dmovh = 77
fr_dmovb = 78
fr_ldres = 79
fr_stres = 80
fr_copop = 81
fr_copld = 82
fr_copst = 83
fr_copsv = 84
fr_nop = 85
fr_andccr = 86
fr_orccr = 87
fr_stilm = 88
fr_addsp = 89
fr_extsb = 90
fr_extub = 91
fr_extsh = 92
fr_extuh = 93
fr_ldm0 = 94
fr_ldm1 = 95
fr_stm0 = 96
fr_stm1 = 97
fr_enter = 98
fr_leave = 99
fr_xchb = 100
fr_last = 101
_1C028A4CD0C7B57357247010273269CB = ctypes.c_uint32 # enum

# values for enumeration '_9495053A46892065888CD0D59D9ABC73'
_9495053A46892065888CD0D59D9ABC73__enumvalues = {
    0: 'ALPHA_null',
    1: 'ALPHA_addf',
    2: 'ALPHA_addg',
    3: 'ALPHA_addl',
    4: 'ALPHA_addl_v',
    5: 'ALPHA_addq',
    6: 'ALPHA_addq_v',
    7: 'ALPHA_adds',
    8: 'ALPHA_addt',
    9: 'ALPHA_amask',
    10: 'ALPHA_and',
    11: 'ALPHA_beq',
    12: 'ALPHA_bge',
    13: 'ALPHA_bgt',
    14: 'ALPHA_bic',
    15: 'ALPHA_bis',
    16: 'ALPHA_blbc',
    17: 'ALPHA_blbs',
    18: 'ALPHA_ble',
    19: 'ALPHA_blt',
    20: 'ALPHA_bne',
    21: 'ALPHA_br',
    22: 'ALPHA_bsr',
    23: 'ALPHA_call_pal',
    24: 'ALPHA_cmoveq',
    25: 'ALPHA_cmovge',
    26: 'ALPHA_cmovgt',
    27: 'ALPHA_cmovlbc',
    28: 'ALPHA_cmovlbs',
    29: 'ALPHA_cmovle',
    30: 'ALPHA_cmovlt',
    31: 'ALPHA_cmovne',
    32: 'ALPHA_cmpbge',
    33: 'ALPHA_cmpeq',
    34: 'ALPHA_cmpgeq',
    35: 'ALPHA_cmpgle',
    36: 'ALPHA_cmpglt',
    37: 'ALPHA_cmple',
    38: 'ALPHA_cmplt',
    39: 'ALPHA_cmpteq',
    40: 'ALPHA_cmptle',
    41: 'ALPHA_cmptlt',
    42: 'ALPHA_cmptun',
    43: 'ALPHA_cmpule',
    44: 'ALPHA_cmpult',
    45: 'ALPHA_cpys',
    46: 'ALPHA_cpyse',
    47: 'ALPHA_cpysn',
    48: 'ALPHA_ctlz',
    49: 'ALPHA_ctpop',
    50: 'ALPHA_cttz',
    51: 'ALPHA_cvtdg',
    52: 'ALPHA_cvtgd',
    53: 'ALPHA_cvtgf',
    54: 'ALPHA_cvtgq',
    55: 'ALPHA_cvtlq',
    56: 'ALPHA_cvtqf',
    57: 'ALPHA_cvtqg',
    58: 'ALPHA_cvtql',
    59: 'ALPHA_cvtqs',
    60: 'ALPHA_cvtqt',
    61: 'ALPHA_cvtst',
    62: 'ALPHA_cvttq',
    63: 'ALPHA_cvtts',
    64: 'ALPHA_divf',
    65: 'ALPHA_divg',
    66: 'ALPHA_divs',
    67: 'ALPHA_divt',
    68: 'ALPHA_ecb',
    69: 'ALPHA_eqv',
    70: 'ALPHA_excb',
    71: 'ALPHA_extbl',
    72: 'ALPHA_extlh',
    73: 'ALPHA_extll',
    74: 'ALPHA_extqh',
    75: 'ALPHA_extql',
    76: 'ALPHA_extwh',
    77: 'ALPHA_extwl',
    78: 'ALPHA_fbeq',
    79: 'ALPHA_fbge',
    80: 'ALPHA_fbgt',
    81: 'ALPHA_fble',
    82: 'ALPHA_fblt',
    83: 'ALPHA_fbne',
    84: 'ALPHA_fcmoveq',
    85: 'ALPHA_fcmovge',
    86: 'ALPHA_fcmovgt',
    87: 'ALPHA_fcmovle',
    88: 'ALPHA_fcmovlt',
    89: 'ALPHA_fcmovne',
    90: 'ALPHA_fetch',
    91: 'ALPHA_fetch_m',
    92: 'ALPHA_ftois',
    93: 'ALPHA_ftoit',
    94: 'ALPHA_implver',
    95: 'ALPHA_insbl',
    96: 'ALPHA_inslh',
    97: 'ALPHA_insll',
    98: 'ALPHA_insqh',
    99: 'ALPHA_insql',
    100: 'ALPHA_inswh',
    101: 'ALPHA_inswl',
    102: 'ALPHA_itoff',
    103: 'ALPHA_itofs',
    104: 'ALPHA_itoft',
    105: 'ALPHA_jmp',
    106: 'ALPHA_jsr',
    107: 'ALPHA_jsr_coroutine',
    108: 'ALPHA_lda',
    109: 'ALPHA_ldah',
    110: 'ALPHA_ldbu',
    111: 'ALPHA_ldwu',
    112: 'ALPHA_ldf',
    113: 'ALPHA_ldg',
    114: 'ALPHA_ldl',
    115: 'ALPHA_ldl_l',
    116: 'ALPHA_ldq',
    117: 'ALPHA_ldq_l',
    118: 'ALPHA_ldq_u',
    119: 'ALPHA_lds',
    120: 'ALPHA_ldt',
    121: 'ALPHA_maxsb8',
    122: 'ALPHA_maxsw4',
    123: 'ALPHA_maxub8',
    124: 'ALPHA_maxuw4',
    125: 'ALPHA_mb',
    126: 'ALPHA_mf_fpcr',
    127: 'ALPHA_minsb8',
    128: 'ALPHA_minsw4',
    129: 'ALPHA_minub8',
    130: 'ALPHA_minuw4',
    131: 'ALPHA_mskbl',
    132: 'ALPHA_msklh',
    133: 'ALPHA_mskll',
    134: 'ALPHA_mskqh',
    135: 'ALPHA_mskql',
    136: 'ALPHA_mskwh',
    137: 'ALPHA_mskwl',
    138: 'ALPHA_mt_fpcr',
    139: 'ALPHA_mulf',
    140: 'ALPHA_mulg',
    141: 'ALPHA_mull',
    142: 'ALPHA_mull_v',
    143: 'ALPHA_mulq',
    144: 'ALPHA_mulq_v',
    145: 'ALPHA_muls',
    146: 'ALPHA_mult',
    147: 'ALPHA_ornot',
    148: 'ALPHA_perr',
    149: 'ALPHA_pklb',
    150: 'ALPHA_pkwb',
    151: 'ALPHA_rc',
    152: 'ALPHA_ret',
    153: 'ALPHA_rpcc',
    154: 'ALPHA_rs',
    155: 'ALPHA_s4addl',
    156: 'ALPHA_s4addq',
    157: 'ALPHA_s4subl',
    158: 'ALPHA_s4subq',
    159: 'ALPHA_s8addl',
    160: 'ALPHA_s8addq',
    161: 'ALPHA_s8subl',
    162: 'ALPHA_s8subq',
    163: 'ALPHA_sextb',
    164: 'ALPHA_sextw',
    165: 'ALPHA_sll',
    166: 'ALPHA_sqrtf',
    167: 'ALPHA_sqrtg',
    168: 'ALPHA_sqrts',
    169: 'ALPHA_sqrtt',
    170: 'ALPHA_sra',
    171: 'ALPHA_srl',
    172: 'ALPHA_stb',
    173: 'ALPHA_stf',
    174: 'ALPHA_stg',
    175: 'ALPHA_sts',
    176: 'ALPHA_stl',
    177: 'ALPHA_stl_c',
    178: 'ALPHA_stq',
    179: 'ALPHA_stq_c',
    180: 'ALPHA_stq_u',
    181: 'ALPHA_stt',
    182: 'ALPHA_stw',
    183: 'ALPHA_subf',
    184: 'ALPHA_subg',
    185: 'ALPHA_subl',
    186: 'ALPHA_subl_v',
    187: 'ALPHA_subq',
    188: 'ALPHA_subq_v',
    189: 'ALPHA_subs',
    190: 'ALPHA_subt',
    191: 'ALPHA_trapb',
    192: 'ALPHA_umulh',
    193: 'ALPHA_unpkbl',
    194: 'ALPHA_unpkbw',
    195: 'ALPHA_wh64',
    196: 'ALPHA_wmb',
    197: 'ALPHA_xor',
    198: 'ALPHA_zap',
    199: 'ALPHA_zapnot',
    200: 'ALPHA_unop',
    201: 'ALPHA_nop',
    202: 'ALPHA_fnop',
    203: 'ALPHA_clr',
    204: 'ALPHA_fabs',
    205: 'ALPHA_fclr',
    206: 'ALPHA_fmov',
    207: 'ALPHA_fneg',
    208: 'ALPHA_mov',
    209: 'ALPHA_negl',
    210: 'ALPHA_negl_v',
    211: 'ALPHA_negq',
    212: 'ALPHA_negq_v',
    213: 'ALPHA_negf',
    214: 'ALPHA_negg',
    215: 'ALPHA_negs',
    216: 'ALPHA_negt',
    217: 'ALPHA_not',
    218: 'ALPHA_sextl',
    219: 'ALPHA_or',
    220: 'ALPHA_andnot',
    221: 'ALPHA_xornot',
    222: 'ALPHA_br0',
    223: 'ALPHA_last',
}
ALPHA_null = 0
ALPHA_addf = 1
ALPHA_addg = 2
ALPHA_addl = 3
ALPHA_addl_v = 4
ALPHA_addq = 5
ALPHA_addq_v = 6
ALPHA_adds = 7
ALPHA_addt = 8
ALPHA_amask = 9
ALPHA_and = 10
ALPHA_beq = 11
ALPHA_bge = 12
ALPHA_bgt = 13
ALPHA_bic = 14
ALPHA_bis = 15
ALPHA_blbc = 16
ALPHA_blbs = 17
ALPHA_ble = 18
ALPHA_blt = 19
ALPHA_bne = 20
ALPHA_br = 21
ALPHA_bsr = 22
ALPHA_call_pal = 23
ALPHA_cmoveq = 24
ALPHA_cmovge = 25
ALPHA_cmovgt = 26
ALPHA_cmovlbc = 27
ALPHA_cmovlbs = 28
ALPHA_cmovle = 29
ALPHA_cmovlt = 30
ALPHA_cmovne = 31
ALPHA_cmpbge = 32
ALPHA_cmpeq = 33
ALPHA_cmpgeq = 34
ALPHA_cmpgle = 35
ALPHA_cmpglt = 36
ALPHA_cmple = 37
ALPHA_cmplt = 38
ALPHA_cmpteq = 39
ALPHA_cmptle = 40
ALPHA_cmptlt = 41
ALPHA_cmptun = 42
ALPHA_cmpule = 43
ALPHA_cmpult = 44
ALPHA_cpys = 45
ALPHA_cpyse = 46
ALPHA_cpysn = 47
ALPHA_ctlz = 48
ALPHA_ctpop = 49
ALPHA_cttz = 50
ALPHA_cvtdg = 51
ALPHA_cvtgd = 52
ALPHA_cvtgf = 53
ALPHA_cvtgq = 54
ALPHA_cvtlq = 55
ALPHA_cvtqf = 56
ALPHA_cvtqg = 57
ALPHA_cvtql = 58
ALPHA_cvtqs = 59
ALPHA_cvtqt = 60
ALPHA_cvtst = 61
ALPHA_cvttq = 62
ALPHA_cvtts = 63
ALPHA_divf = 64
ALPHA_divg = 65
ALPHA_divs = 66
ALPHA_divt = 67
ALPHA_ecb = 68
ALPHA_eqv = 69
ALPHA_excb = 70
ALPHA_extbl = 71
ALPHA_extlh = 72
ALPHA_extll = 73
ALPHA_extqh = 74
ALPHA_extql = 75
ALPHA_extwh = 76
ALPHA_extwl = 77
ALPHA_fbeq = 78
ALPHA_fbge = 79
ALPHA_fbgt = 80
ALPHA_fble = 81
ALPHA_fblt = 82
ALPHA_fbne = 83
ALPHA_fcmoveq = 84
ALPHA_fcmovge = 85
ALPHA_fcmovgt = 86
ALPHA_fcmovle = 87
ALPHA_fcmovlt = 88
ALPHA_fcmovne = 89
ALPHA_fetch = 90
ALPHA_fetch_m = 91
ALPHA_ftois = 92
ALPHA_ftoit = 93
ALPHA_implver = 94
ALPHA_insbl = 95
ALPHA_inslh = 96
ALPHA_insll = 97
ALPHA_insqh = 98
ALPHA_insql = 99
ALPHA_inswh = 100
ALPHA_inswl = 101
ALPHA_itoff = 102
ALPHA_itofs = 103
ALPHA_itoft = 104
ALPHA_jmp = 105
ALPHA_jsr = 106
ALPHA_jsr_coroutine = 107
ALPHA_lda = 108
ALPHA_ldah = 109
ALPHA_ldbu = 110
ALPHA_ldwu = 111
ALPHA_ldf = 112
ALPHA_ldg = 113
ALPHA_ldl = 114
ALPHA_ldl_l = 115
ALPHA_ldq = 116
ALPHA_ldq_l = 117
ALPHA_ldq_u = 118
ALPHA_lds = 119
ALPHA_ldt = 120
ALPHA_maxsb8 = 121
ALPHA_maxsw4 = 122
ALPHA_maxub8 = 123
ALPHA_maxuw4 = 124
ALPHA_mb = 125
ALPHA_mf_fpcr = 126
ALPHA_minsb8 = 127
ALPHA_minsw4 = 128
ALPHA_minub8 = 129
ALPHA_minuw4 = 130
ALPHA_mskbl = 131
ALPHA_msklh = 132
ALPHA_mskll = 133
ALPHA_mskqh = 134
ALPHA_mskql = 135
ALPHA_mskwh = 136
ALPHA_mskwl = 137
ALPHA_mt_fpcr = 138
ALPHA_mulf = 139
ALPHA_mulg = 140
ALPHA_mull = 141
ALPHA_mull_v = 142
ALPHA_mulq = 143
ALPHA_mulq_v = 144
ALPHA_muls = 145
ALPHA_mult = 146
ALPHA_ornot = 147
ALPHA_perr = 148
ALPHA_pklb = 149
ALPHA_pkwb = 150
ALPHA_rc = 151
ALPHA_ret = 152
ALPHA_rpcc = 153
ALPHA_rs = 154
ALPHA_s4addl = 155
ALPHA_s4addq = 156
ALPHA_s4subl = 157
ALPHA_s4subq = 158
ALPHA_s8addl = 159
ALPHA_s8addq = 160
ALPHA_s8subl = 161
ALPHA_s8subq = 162
ALPHA_sextb = 163
ALPHA_sextw = 164
ALPHA_sll = 165
ALPHA_sqrtf = 166
ALPHA_sqrtg = 167
ALPHA_sqrts = 168
ALPHA_sqrtt = 169
ALPHA_sra = 170
ALPHA_srl = 171
ALPHA_stb = 172
ALPHA_stf = 173
ALPHA_stg = 174
ALPHA_sts = 175
ALPHA_stl = 176
ALPHA_stl_c = 177
ALPHA_stq = 178
ALPHA_stq_c = 179
ALPHA_stq_u = 180
ALPHA_stt = 181
ALPHA_stw = 182
ALPHA_subf = 183
ALPHA_subg = 184
ALPHA_subl = 185
ALPHA_subl_v = 186
ALPHA_subq = 187
ALPHA_subq_v = 188
ALPHA_subs = 189
ALPHA_subt = 190
ALPHA_trapb = 191
ALPHA_umulh = 192
ALPHA_unpkbl = 193
ALPHA_unpkbw = 194
ALPHA_wh64 = 195
ALPHA_wmb = 196
ALPHA_xor = 197
ALPHA_zap = 198
ALPHA_zapnot = 199
ALPHA_unop = 200
ALPHA_nop = 201
ALPHA_fnop = 202
ALPHA_clr = 203
ALPHA_fabs = 204
ALPHA_fclr = 205
ALPHA_fmov = 206
ALPHA_fneg = 207
ALPHA_mov = 208
ALPHA_negl = 209
ALPHA_negl_v = 210
ALPHA_negq = 211
ALPHA_negq_v = 212
ALPHA_negf = 213
ALPHA_negg = 214
ALPHA_negs = 215
ALPHA_negt = 216
ALPHA_not = 217
ALPHA_sextl = 218
ALPHA_or = 219
ALPHA_andnot = 220
ALPHA_xornot = 221
ALPHA_br0 = 222
ALPHA_last = 223
_9495053A46892065888CD0D59D9ABC73 = ctypes.c_uint32 # enum

# values for enumeration '_3533B0089D1D34165233288F4301A5ED'
_3533B0089D1D34165233288F4301A5ED__enumvalues = {
    0: 'KR1878_null',
    1: 'KR1878_mov',
    2: 'KR1878_cmp',
    3: 'KR1878_add',
    4: 'KR1878_sub',
    5: 'KR1878_and',
    6: 'KR1878_or',
    7: 'KR1878_xor',
    8: 'KR1878_movl',
    9: 'KR1878_cmpl',
    10: 'KR1878_addl',
    11: 'KR1878_subl',
    12: 'KR1878_bic',
    13: 'KR1878_bis',
    14: 'KR1878_btg',
    15: 'KR1878_btt',
    16: 'KR1878_swap',
    17: 'KR1878_neg',
    18: 'KR1878_not',
    19: 'KR1878_shl',
    20: 'KR1878_shr',
    21: 'KR1878_shra',
    22: 'KR1878_rlc',
    23: 'KR1878_rrc',
    24: 'KR1878_adc',
    25: 'KR1878_sbc',
    26: 'KR1878_ldr',
    27: 'KR1878_mtpr',
    28: 'KR1878_mfpr',
    29: 'KR1878_push',
    30: 'KR1878_pop',
    31: 'KR1878_sst',
    32: 'KR1878_cst',
    33: 'KR1878_tof',
    34: 'KR1878_tdc',
    35: 'KR1878_jmp',
    36: 'KR1878_jsr',
    37: 'KR1878_jnz',
    38: 'KR1878_jz',
    39: 'KR1878_jns',
    40: 'KR1878_js',
    41: 'KR1878_jnc',
    42: 'KR1878_jc',
    43: 'KR1878_ijmp',
    44: 'KR1878_ijsr',
    45: 'KR1878_rts',
    46: 'KR1878_rtsc',
    47: 'KR1878_rti',
    48: 'KR1878_nop',
    49: 'KR1878_wait',
    50: 'KR1878_stop',
    51: 'KR1878_reset',
    52: 'KR1878_sksp',
    53: 'KR1878_last',
}
KR1878_null = 0
KR1878_mov = 1
KR1878_cmp = 2
KR1878_add = 3
KR1878_sub = 4
KR1878_and = 5
KR1878_or = 6
KR1878_xor = 7
KR1878_movl = 8
KR1878_cmpl = 9
KR1878_addl = 10
KR1878_subl = 11
KR1878_bic = 12
KR1878_bis = 13
KR1878_btg = 14
KR1878_btt = 15
KR1878_swap = 16
KR1878_neg = 17
KR1878_not = 18
KR1878_shl = 19
KR1878_shr = 20
KR1878_shra = 21
KR1878_rlc = 22
KR1878_rrc = 23
KR1878_adc = 24
KR1878_sbc = 25
KR1878_ldr = 26
KR1878_mtpr = 27
KR1878_mfpr = 28
KR1878_push = 29
KR1878_pop = 30
KR1878_sst = 31
KR1878_cst = 32
KR1878_tof = 33
KR1878_tdc = 34
KR1878_jmp = 35
KR1878_jsr = 36
KR1878_jnz = 37
KR1878_jz = 38
KR1878_jns = 39
KR1878_js = 40
KR1878_jnc = 41
KR1878_jc = 42
KR1878_ijmp = 43
KR1878_ijsr = 44
KR1878_rts = 45
KR1878_rtsc = 46
KR1878_rti = 47
KR1878_nop = 48
KR1878_wait = 49
KR1878_stop = 50
KR1878_reset = 51
KR1878_sksp = 52
KR1878_last = 53
_3533B0089D1D34165233288F4301A5ED = ctypes.c_uint32 # enum

# values for enumeration '_C68056E0A34E65469B9AC9E5B5190DBB'
_C68056E0A34E65469B9AC9E5B5190DBB__enumvalues = {
    0: 'AD218X_null',
    1: 'AD218X_amf_01',
    2: 'AD218X_amf_03',
    3: 'AD218X_amf_02',
    4: 'AD218X_amf_04',
    5: 'AD218X_amf_05',
    6: 'AD218X_amf_06',
    7: 'AD218X_amf_07',
    8: 'AD218X_amf_08',
    9: 'AD218X_amf_09',
    10: 'AD218X_amf_0a',
    11: 'AD218X_amf_0b',
    12: 'AD218X_amf_0c',
    13: 'AD218X_amf_0d',
    14: 'AD218X_amf_0e',
    15: 'AD218X_amf_0f',
    16: 'AD218X_amf_10',
    17: 'AD218X_amf_11',
    18: 'AD218X_amf_12',
    19: 'AD218X_amf_13',
    20: 'AD218X_amf_14',
    21: 'AD218X_amf_15',
    22: 'AD218X_amf_16',
    23: 'AD218X_amf_17',
    24: 'AD218X_amf_18',
    25: 'AD218X_amf_19',
    26: 'AD218X_amf_1a',
    27: 'AD218X_amf_1b',
    28: 'AD218X_amf_1c',
    29: 'AD218X_amf_1d',
    30: 'AD218X_amf_1e',
    31: 'AD218X_amf_1f',
    32: 'AD218X_shft_0',
    33: 'AD218X_shft_1',
    34: 'AD218X_shft_2',
    35: 'AD218X_shft_3',
    36: 'AD218X_shft_4',
    37: 'AD218X_shft_5',
    38: 'AD218X_shft_6',
    39: 'AD218X_shft_7',
    40: 'AD218X_shft_8',
    41: 'AD218X_shft_9',
    42: 'AD218X_shft_a',
    43: 'AD218X_shft_b',
    44: 'AD218X_shft_c',
    45: 'AD218X_shft_d',
    46: 'AD218X_shft_e',
    47: 'AD218X_shft_f',
    48: 'AD218X_alu_00',
    49: 'AD218X_alu_01',
    50: 'AD218X_alu_02',
    51: 'AD218X_alu_03',
    52: 'AD218X_alu_04',
    53: 'AD218X_alu_05',
    54: 'AD218X_alu_06',
    55: 'AD218X_alu_07',
    56: 'AD218X_alu_08',
    57: 'AD218X_alu_09',
    58: 'AD218X_alu_0a',
    59: 'AD218X_alu_0b',
    60: 'AD218X_alu_0c',
    61: 'AD218X_alu_0d',
    62: 'AD218X_alu_0e',
    63: 'AD218X_alu_0f',
    64: 'AD218X_alu_10',
    65: 'AD218X_alu_11',
    66: 'AD218X_alu_12',
    67: 'AD218X_alu_13',
    68: 'AD218X_alu_14',
    69: 'AD218X_alu_15',
    70: 'AD218X_alu_16',
    71: 'AD218X_alu_17',
    72: 'AD218X_alu_18',
    73: 'AD218X_alu_19',
    74: 'AD218X_alu_1a',
    75: 'AD218X_alu_1b',
    76: 'AD218X_alu_1c',
    77: 'AD218X_alu_1d',
    78: 'AD218X_mac_0',
    79: 'AD218X_mac_1',
    80: 'AD218X_mac_2',
    81: 'AD218X_mac_3',
    82: 'AD218X_mac_4',
    83: 'AD218X_mac_5',
    84: 'AD218X_mac_6',
    85: 'AD218X_mac_7',
    86: 'AD218X_mac_8',
    87: 'AD218X_mac_9',
    88: 'AD218X_mac_a',
    89: 'AD218X_mac_b',
    90: 'AD218X_amf',
    91: 'AD218X_shft',
    92: 'AD218X_shifter_0',
    93: 'AD218X_shifter_1',
    94: 'AD218X_shifter_2',
    95: 'AD218X_shifter_3',
    96: 'AD218X_shifter_4',
    97: 'AD218X_shifter_5',
    98: 'AD218X_shifter_6',
    99: 'AD218X_shifter_7',
    100: 'AD218X_move_0',
    101: 'AD218X_move_1',
    102: 'AD218X_move_2',
    103: 'AD218X_move_3',
    104: 'AD218X_move_4',
    105: 'AD218X_move_5',
    106: 'AD218X_move_6',
    107: 'AD218X_move_7',
    108: 'AD218X_move_8',
    109: 'AD218X_move_9',
    110: 'AD218X_move_a',
    111: 'AD218X_move_b',
    112: 'AD218X_jump',
    113: 'AD218X_jump_1',
    114: 'AD218X_jump_2',
    115: 'AD218X_jump_3',
    116: 'AD218X_jump_4',
    117: 'AD218X_call',
    118: 'AD218X_call_1',
    119: 'AD218X_call_2',
    120: 'AD218X_rts',
    121: 'AD218X_rts_cond',
    122: 'AD218X_rti',
    123: 'AD218X_rti_cond',
    124: 'AD218X_nop',
    125: 'AD218X_do',
    126: 'AD218X_idle',
    127: 'AD218X_idle_1',
    128: 'AD218X_flag_out',
    129: 'AD218X_stack_ctl',
    130: 'AD218X_mode_ctl',
    131: 'AD218X_tops_w',
    132: 'AD218X_tops_r',
    133: 'AD218X_ints_dis',
    134: 'AD218X_ints_ena',
    135: 'AD218X_modify',
    136: 'AD218X_double_move',
    137: 'AD218X_amf_move_0',
    138: 'AD218X_amf_move_1',
    139: 'AD218X_amf_move_2',
    140: 'AD218X_amf_move_3',
    141: 'AD218X_amf_move_4',
    142: 'AD218X_amf_move_5',
    143: 'AD218X_amf_move_6',
    144: 'AD218X_amf_move_7',
    145: 'AD218X_amf_move_8',
    146: 'AD218X_amf_move_9',
    147: 'AD218X_amf_move_a',
    148: 'AD218X_last',
}
AD218X_null = 0
AD218X_amf_01 = 1
AD218X_amf_03 = 2
AD218X_amf_02 = 3
AD218X_amf_04 = 4
AD218X_amf_05 = 5
AD218X_amf_06 = 6
AD218X_amf_07 = 7
AD218X_amf_08 = 8
AD218X_amf_09 = 9
AD218X_amf_0a = 10
AD218X_amf_0b = 11
AD218X_amf_0c = 12
AD218X_amf_0d = 13
AD218X_amf_0e = 14
AD218X_amf_0f = 15
AD218X_amf_10 = 16
AD218X_amf_11 = 17
AD218X_amf_12 = 18
AD218X_amf_13 = 19
AD218X_amf_14 = 20
AD218X_amf_15 = 21
AD218X_amf_16 = 22
AD218X_amf_17 = 23
AD218X_amf_18 = 24
AD218X_amf_19 = 25
AD218X_amf_1a = 26
AD218X_amf_1b = 27
AD218X_amf_1c = 28
AD218X_amf_1d = 29
AD218X_amf_1e = 30
AD218X_amf_1f = 31
AD218X_shft_0 = 32
AD218X_shft_1 = 33
AD218X_shft_2 = 34
AD218X_shft_3 = 35
AD218X_shft_4 = 36
AD218X_shft_5 = 37
AD218X_shft_6 = 38
AD218X_shft_7 = 39
AD218X_shft_8 = 40
AD218X_shft_9 = 41
AD218X_shft_a = 42
AD218X_shft_b = 43
AD218X_shft_c = 44
AD218X_shft_d = 45
AD218X_shft_e = 46
AD218X_shft_f = 47
AD218X_alu_00 = 48
AD218X_alu_01 = 49
AD218X_alu_02 = 50
AD218X_alu_03 = 51
AD218X_alu_04 = 52
AD218X_alu_05 = 53
AD218X_alu_06 = 54
AD218X_alu_07 = 55
AD218X_alu_08 = 56
AD218X_alu_09 = 57
AD218X_alu_0a = 58
AD218X_alu_0b = 59
AD218X_alu_0c = 60
AD218X_alu_0d = 61
AD218X_alu_0e = 62
AD218X_alu_0f = 63
AD218X_alu_10 = 64
AD218X_alu_11 = 65
AD218X_alu_12 = 66
AD218X_alu_13 = 67
AD218X_alu_14 = 68
AD218X_alu_15 = 69
AD218X_alu_16 = 70
AD218X_alu_17 = 71
AD218X_alu_18 = 72
AD218X_alu_19 = 73
AD218X_alu_1a = 74
AD218X_alu_1b = 75
AD218X_alu_1c = 76
AD218X_alu_1d = 77
AD218X_mac_0 = 78
AD218X_mac_1 = 79
AD218X_mac_2 = 80
AD218X_mac_3 = 81
AD218X_mac_4 = 82
AD218X_mac_5 = 83
AD218X_mac_6 = 84
AD218X_mac_7 = 85
AD218X_mac_8 = 86
AD218X_mac_9 = 87
AD218X_mac_a = 88
AD218X_mac_b = 89
AD218X_amf = 90
AD218X_shft = 91
AD218X_shifter_0 = 92
AD218X_shifter_1 = 93
AD218X_shifter_2 = 94
AD218X_shifter_3 = 95
AD218X_shifter_4 = 96
AD218X_shifter_5 = 97
AD218X_shifter_6 = 98
AD218X_shifter_7 = 99
AD218X_move_0 = 100
AD218X_move_1 = 101
AD218X_move_2 = 102
AD218X_move_3 = 103
AD218X_move_4 = 104
AD218X_move_5 = 105
AD218X_move_6 = 106
AD218X_move_7 = 107
AD218X_move_8 = 108
AD218X_move_9 = 109
AD218X_move_a = 110
AD218X_move_b = 111
AD218X_jump = 112
AD218X_jump_1 = 113
AD218X_jump_2 = 114
AD218X_jump_3 = 115
AD218X_jump_4 = 116
AD218X_call = 117
AD218X_call_1 = 118
AD218X_call_2 = 119
AD218X_rts = 120
AD218X_rts_cond = 121
AD218X_rti = 122
AD218X_rti_cond = 123
AD218X_nop = 124
AD218X_do = 125
AD218X_idle = 126
AD218X_idle_1 = 127
AD218X_flag_out = 128
AD218X_stack_ctl = 129
AD218X_mode_ctl = 130
AD218X_tops_w = 131
AD218X_tops_r = 132
AD218X_ints_dis = 133
AD218X_ints_ena = 134
AD218X_modify = 135
AD218X_double_move = 136
AD218X_amf_move_0 = 137
AD218X_amf_move_1 = 138
AD218X_amf_move_2 = 139
AD218X_amf_move_3 = 140
AD218X_amf_move_4 = 141
AD218X_amf_move_5 = 142
AD218X_amf_move_6 = 143
AD218X_amf_move_7 = 144
AD218X_amf_move_8 = 145
AD218X_amf_move_9 = 146
AD218X_amf_move_a = 147
AD218X_last = 148
_C68056E0A34E65469B9AC9E5B5190DBB = ctypes.c_uint32 # enum

# values for enumeration '_6FF5CD92DCE62DB0AD5B6A8B5D740018'
_6FF5CD92DCE62DB0AD5B6A8B5D740018__enumvalues = {
    0: 'OAK_Dsp_null',
    1: 'OAK_Dsp_proc',
    2: 'OAK_Dsp_or',
    3: 'OAK_Dsp_and',
    4: 'OAK_Dsp_xor',
    5: 'OAK_Dsp_add',
    6: 'OAK_Dsp_alm_tst0',
    7: 'OAK_Dsp_alm_tst1',
    8: 'OAK_Dsp_cmp',
    9: 'OAK_Dsp_sub',
    10: 'OAK_Dsp_alm_msu',
    11: 'OAK_Dsp_addh',
    12: 'OAK_Dsp_addl',
    13: 'OAK_Dsp_subh',
    14: 'OAK_Dsp_subl',
    15: 'OAK_Dsp_sqr',
    16: 'OAK_Dsp_sqra',
    17: 'OAK_Dsp_cmpu',
    18: 'OAK_Dsp_shr',
    19: 'OAK_Dsp_shr4',
    20: 'OAK_Dsp_shl',
    21: 'OAK_Dsp_shl4',
    22: 'OAK_Dsp_ror',
    23: 'OAK_Dsp_rol',
    24: 'OAK_Dsp_clr',
    25: 'OAK_Dsp_mod_reserved',
    26: 'OAK_Dsp_not',
    27: 'OAK_Dsp_neg',
    28: 'OAK_Dsp_rnd',
    29: 'OAK_Dsp_pacr',
    30: 'OAK_Dsp_clrr',
    31: 'OAK_Dsp_inc',
    32: 'OAK_Dsp_dec',
    33: 'OAK_Dsp_copy',
    34: 'OAK_Dsp_norm',
    35: 'OAK_Dsp_divs',
    36: 'OAK_Dsp_set',
    37: 'OAK_Dsp_rst',
    38: 'OAK_Dsp_chng',
    39: 'OAK_Dsp_addv',
    40: 'OAK_Dsp_alb_tst0',
    41: 'OAK_Dsp_alb_tst1',
    42: 'OAK_Dsp_cmpv',
    43: 'OAK_Dsp_subv',
    44: 'OAK_Dsp_maxd',
    45: 'OAK_Dsp_max',
    46: 'OAK_Dsp_min',
    47: 'OAK_Dsp_lim',
    48: 'OAK_Dsp_mpy',
    49: 'OAK_Dsp_mpysu',
    50: 'OAK_Dsp_mac',
    51: 'OAK_Dsp_macus',
    52: 'OAK_Dsp_maa',
    53: 'OAK_Dsp_macuu',
    54: 'OAK_Dsp_macsu',
    55: 'OAK_Dsp_maasu',
    56: 'OAK_Dsp_mpyi',
    57: 'OAK_Dsp_msu',
    58: 'OAK_Dsp_tstb',
    59: 'OAK_Dsp_shfc',
    60: 'OAK_Dsp_shfi',
    61: 'OAK_Dsp_exp',
    62: 'OAK_Dsp_mov',
    63: 'OAK_Dsp_movp',
    64: 'OAK_Dsp_movs',
    65: 'OAK_Dsp_movsi',
    66: 'OAK_Dsp_movr',
    67: 'OAK_Dsp_movd',
    68: 'OAK_Dsp_push',
    69: 'OAK_Dsp_pop',
    70: 'OAK_Dsp_swap',
    71: 'OAK_Dsp_banke',
    72: 'OAK_Dsp_rep',
    73: 'OAK_Dsp_bkrep',
    74: 'OAK_Dsp_break',
    75: 'OAK_Dsp_br',
    76: 'OAK_Dsp_brr',
    77: 'OAK_Dsp_br_u',
    78: 'OAK_Dsp_brr_u',
    79: 'OAK_Dsp_call',
    80: 'OAK_Dsp_callr',
    81: 'OAK_Dsp_calla',
    82: 'OAK_Dsp_ret',
    83: 'OAK_Dsp_ret_u',
    84: 'OAK_Dsp_retd',
    85: 'OAK_Dsp_reti',
    86: 'OAK_Dsp_reti_u',
    87: 'OAK_Dsp_retid',
    88: 'OAK_Dsp_rets',
    89: 'OAK_Dsp_cntx',
    90: 'OAK_Dsp_nop',
    91: 'OAK_Dsp_modr',
    92: 'OAK_Dsp_dint',
    93: 'OAK_Dsp_eint',
    94: 'OAK_Dsp_trap',
    95: 'OAK_Dsp_lpg',
    96: 'OAK_Dsp_load',
    97: 'OAK_Dsp_mov_eu',
    98: 'OAK_Dsp_last',
}
OAK_Dsp_null = 0
OAK_Dsp_proc = 1
OAK_Dsp_or = 2
OAK_Dsp_and = 3
OAK_Dsp_xor = 4
OAK_Dsp_add = 5
OAK_Dsp_alm_tst0 = 6
OAK_Dsp_alm_tst1 = 7
OAK_Dsp_cmp = 8
OAK_Dsp_sub = 9
OAK_Dsp_alm_msu = 10
OAK_Dsp_addh = 11
OAK_Dsp_addl = 12
OAK_Dsp_subh = 13
OAK_Dsp_subl = 14
OAK_Dsp_sqr = 15
OAK_Dsp_sqra = 16
OAK_Dsp_cmpu = 17
OAK_Dsp_shr = 18
OAK_Dsp_shr4 = 19
OAK_Dsp_shl = 20
OAK_Dsp_shl4 = 21
OAK_Dsp_ror = 22
OAK_Dsp_rol = 23
OAK_Dsp_clr = 24
OAK_Dsp_mod_reserved = 25
OAK_Dsp_not = 26
OAK_Dsp_neg = 27
OAK_Dsp_rnd = 28
OAK_Dsp_pacr = 29
OAK_Dsp_clrr = 30
OAK_Dsp_inc = 31
OAK_Dsp_dec = 32
OAK_Dsp_copy = 33
OAK_Dsp_norm = 34
OAK_Dsp_divs = 35
OAK_Dsp_set = 36
OAK_Dsp_rst = 37
OAK_Dsp_chng = 38
OAK_Dsp_addv = 39
OAK_Dsp_alb_tst0 = 40
OAK_Dsp_alb_tst1 = 41
OAK_Dsp_cmpv = 42
OAK_Dsp_subv = 43
OAK_Dsp_maxd = 44
OAK_Dsp_max = 45
OAK_Dsp_min = 46
OAK_Dsp_lim = 47
OAK_Dsp_mpy = 48
OAK_Dsp_mpysu = 49
OAK_Dsp_mac = 50
OAK_Dsp_macus = 51
OAK_Dsp_maa = 52
OAK_Dsp_macuu = 53
OAK_Dsp_macsu = 54
OAK_Dsp_maasu = 55
OAK_Dsp_mpyi = 56
OAK_Dsp_msu = 57
OAK_Dsp_tstb = 58
OAK_Dsp_shfc = 59
OAK_Dsp_shfi = 60
OAK_Dsp_exp = 61
OAK_Dsp_mov = 62
OAK_Dsp_movp = 63
OAK_Dsp_movs = 64
OAK_Dsp_movsi = 65
OAK_Dsp_movr = 66
OAK_Dsp_movd = 67
OAK_Dsp_push = 68
OAK_Dsp_pop = 69
OAK_Dsp_swap = 70
OAK_Dsp_banke = 71
OAK_Dsp_rep = 72
OAK_Dsp_bkrep = 73
OAK_Dsp_break = 74
OAK_Dsp_br = 75
OAK_Dsp_brr = 76
OAK_Dsp_br_u = 77
OAK_Dsp_brr_u = 78
OAK_Dsp_call = 79
OAK_Dsp_callr = 80
OAK_Dsp_calla = 81
OAK_Dsp_ret = 82
OAK_Dsp_ret_u = 83
OAK_Dsp_retd = 84
OAK_Dsp_reti = 85
OAK_Dsp_reti_u = 86
OAK_Dsp_retid = 87
OAK_Dsp_rets = 88
OAK_Dsp_cntx = 89
OAK_Dsp_nop = 90
OAK_Dsp_modr = 91
OAK_Dsp_dint = 92
OAK_Dsp_eint = 93
OAK_Dsp_trap = 94
OAK_Dsp_lpg = 95
OAK_Dsp_load = 96
OAK_Dsp_mov_eu = 97
OAK_Dsp_last = 98
_6FF5CD92DCE62DB0AD5B6A8B5D740018 = ctypes.c_uint32 # enum

# values for enumeration '_7D2E628AE302D35528CA806CA05E5F16'
_7D2E628AE302D35528CA806CA05E5F16__enumvalues = {
    0: 'T900_null',
    1: 'T900_ld',
    2: 'T900_ldw',
    3: 'T900_push',
    4: 'T900_pushw',
    5: 'T900_pop',
    6: 'T900_popw',
    7: 'T900_lda',
    8: 'T900_ldar',
    9: 'T900_ex',
    10: 'T900_mirr',
    11: 'T900_ldi',
    12: 'T900_ldiw',
    13: 'T900_ldir',
    14: 'T900_ldirw',
    15: 'T900_ldd',
    16: 'T900_lddw',
    17: 'T900_lddr',
    18: 'T900_lddrw',
    19: 'T900_cpi',
    20: 'T900_cpir',
    21: 'T900_cpd',
    22: 'T900_cpdr',
    23: 'T900_add',
    24: 'T900_addw',
    25: 'T900_adc',
    26: 'T900_adcw',
    27: 'T900_sub',
    28: 'T900_subw',
    29: 'T900_sbc',
    30: 'T900_sbcw',
    31: 'T900_cp',
    32: 'T900_cpw',
    33: 'T900_inc',
    34: 'T900_incw',
    35: 'T900_dec',
    36: 'T900_decw',
    37: 'T900_neg',
    38: 'T900_extz',
    39: 'T900_exts',
    40: 'T900_daa',
    41: 'T900_paa',
    42: 'T900_cpl',
    43: 'T900_mul',
    44: 'T900_muls',
    45: 'T900_div',
    46: 'T900_divs',
    47: 'T900_mula',
    48: 'T900_minc1',
    49: 'T900_minc2',
    50: 'T900_minc4',
    51: 'T900_mdec1',
    52: 'T900_mdec2',
    53: 'T900_mdec4',
    54: 'T900_and',
    55: 'T900_andw',
    56: 'T900_or',
    57: 'T900_orw',
    58: 'T900_xor',
    59: 'T900_xorw',
    60: 'T900_ldcf',
    61: 'T900_stcf',
    62: 'T900_andcf',
    63: 'T900_orcf',
    64: 'T900_xorcf',
    65: 'T900_rcf',
    66: 'T900_scf',
    67: 'T900_ccf',
    68: 'T900_zcf',
    69: 'T900_bit',
    70: 'T900_res',
    71: 'T900_set',
    72: 'T900_chg',
    73: 'T900_tset',
    74: 'T900_bs1f',
    75: 'T900_bs1b',
    76: 'T900_nop',
    77: 'T900_ei',
    78: 'T900_di',
    79: 'T900_swi',
    80: 'T900_halt',
    81: 'T900_ldc',
    82: 'T900_ldx',
    83: 'T900_link',
    84: 'T900_unlk',
    85: 'T900_ldf',
    86: 'T900_incf',
    87: 'T900_decf',
    88: 'T900_scc',
    89: 'T900_rlc',
    90: 'T900_rlc_mem',
    91: 'T900_rlcw_mem',
    92: 'T900_rrc',
    93: 'T900_rrc_mem',
    94: 'T900_rrcw_mem',
    95: 'T900_rl',
    96: 'T900_rl_mem',
    97: 'T900_rlw_mem',
    98: 'T900_rr',
    99: 'T900_rr_mem',
    100: 'T900_rrw_mem',
    101: 'T900_sla',
    102: 'T900_sla_mem',
    103: 'T900_slaw_mem',
    104: 'T900_sra',
    105: 'T900_sra_mem',
    106: 'T900_sraw_mem',
    107: 'T900_sll',
    108: 'T900_sll_mem',
    109: 'T900_sllw_mem',
    110: 'T900_srl',
    111: 'T900_srl_mem',
    112: 'T900_srlw_mem',
    113: 'T900_rld',
    114: 'T900_rrd',
    115: 'T900_jp',
    116: 'T900_jp_cond',
    117: 'T900_jr',
    118: 'T900_jr_cond',
    119: 'T900_jrl',
    120: 'T900_jrl_cond',
    121: 'T900_call',
    122: 'T900_calr',
    123: 'T900_djnz',
    124: 'T900_ret',
    125: 'T900_ret_cond',
    126: 'T900_retd',
    127: 'T900_reti',
    128: 'T900_max',
    129: 'T900_normal',
    130: 'T900_last',
}
T900_null = 0
T900_ld = 1
T900_ldw = 2
T900_push = 3
T900_pushw = 4
T900_pop = 5
T900_popw = 6
T900_lda = 7
T900_ldar = 8
T900_ex = 9
T900_mirr = 10
T900_ldi = 11
T900_ldiw = 12
T900_ldir = 13
T900_ldirw = 14
T900_ldd = 15
T900_lddw = 16
T900_lddr = 17
T900_lddrw = 18
T900_cpi = 19
T900_cpir = 20
T900_cpd = 21
T900_cpdr = 22
T900_add = 23
T900_addw = 24
T900_adc = 25
T900_adcw = 26
T900_sub = 27
T900_subw = 28
T900_sbc = 29
T900_sbcw = 30
T900_cp = 31
T900_cpw = 32
T900_inc = 33
T900_incw = 34
T900_dec = 35
T900_decw = 36
T900_neg = 37
T900_extz = 38
T900_exts = 39
T900_daa = 40
T900_paa = 41
T900_cpl = 42
T900_mul = 43
T900_muls = 44
T900_div = 45
T900_divs = 46
T900_mula = 47
T900_minc1 = 48
T900_minc2 = 49
T900_minc4 = 50
T900_mdec1 = 51
T900_mdec2 = 52
T900_mdec4 = 53
T900_and = 54
T900_andw = 55
T900_or = 56
T900_orw = 57
T900_xor = 58
T900_xorw = 59
T900_ldcf = 60
T900_stcf = 61
T900_andcf = 62
T900_orcf = 63
T900_xorcf = 64
T900_rcf = 65
T900_scf = 66
T900_ccf = 67
T900_zcf = 68
T900_bit = 69
T900_res = 70
T900_set = 71
T900_chg = 72
T900_tset = 73
T900_bs1f = 74
T900_bs1b = 75
T900_nop = 76
T900_ei = 77
T900_di = 78
T900_swi = 79
T900_halt = 80
T900_ldc = 81
T900_ldx = 82
T900_link = 83
T900_unlk = 84
T900_ldf = 85
T900_incf = 86
T900_decf = 87
T900_scc = 88
T900_rlc = 89
T900_rlc_mem = 90
T900_rlcw_mem = 91
T900_rrc = 92
T900_rrc_mem = 93
T900_rrcw_mem = 94
T900_rl = 95
T900_rl_mem = 96
T900_rlw_mem = 97
T900_rr = 98
T900_rr_mem = 99
T900_rrw_mem = 100
T900_sla = 101
T900_sla_mem = 102
T900_slaw_mem = 103
T900_sra = 104
T900_sra_mem = 105
T900_sraw_mem = 106
T900_sll = 107
T900_sll_mem = 108
T900_sllw_mem = 109
T900_srl = 110
T900_srl_mem = 111
T900_srlw_mem = 112
T900_rld = 113
T900_rrd = 114
T900_jp = 115
T900_jp_cond = 116
T900_jr = 117
T900_jr_cond = 118
T900_jrl = 119
T900_jrl_cond = 120
T900_call = 121
T900_calr = 122
T900_djnz = 123
T900_ret = 124
T900_ret_cond = 125
T900_retd = 126
T900_reti = 127
T900_max = 128
T900_normal = 129
T900_last = 130
_7D2E628AE302D35528CA806CA05E5F16 = ctypes.c_uint32 # enum

# values for enumeration '_639195EAA19AF7270991831C59DF6BBF'
_639195EAA19AF7270991831C59DF6BBF__enumvalues = {
    0: 'C39_null',
    1: 'C39_adc',
    2: 'C39_add',
    3: 'C39_anc',
    4: 'C39_and',
    5: 'C39_ane',
    6: 'C39_arr',
    7: 'C39_asl',
    8: 'C39_asr',
    9: 'C39_bar',
    10: 'C39_bas',
    11: 'C39_bbr',
    12: 'C39_bbs',
    13: 'C39_bcc',
    14: 'C39_bcs',
    15: 'C39_beq',
    16: 'C39_bit',
    17: 'C39_bmi',
    18: 'C39_bne',
    19: 'C39_bpl',
    20: 'C39_bra',
    21: 'C39_brk',
    22: 'C39_bvc',
    23: 'C39_bvs',
    24: 'C39_clc',
    25: 'C39_cld',
    26: 'C39_cli',
    27: 'C39_clv',
    28: 'C39_clw',
    29: 'C39_cmp',
    30: 'C39_cpx',
    31: 'C39_cpy',
    32: 'C39_dcp',
    33: 'C39_dec',
    34: 'C39_dex',
    35: 'C39_dey',
    36: 'C39_eor',
    37: 'C39_exc',
    38: 'C39_inc',
    39: 'C39_ini',
    40: 'C39_inx',
    41: 'C39_iny',
    42: 'C39_isb',
    43: 'C39_jmp',
    44: 'C39_jpi',
    45: 'C39_jsb',
    46: 'C39_jsr',
    47: 'C39_lab',
    48: 'C39_lae',
    49: 'C39_lai',
    50: 'C39_lan',
    51: 'C39_lax',
    52: 'C39_lda',
    53: 'C39_ldx',
    54: 'C39_ldy',
    55: 'C39_lii',
    56: 'C39_lsr',
    57: 'C39_lxa',
    58: 'C39_mpa',
    59: 'C39_mpy',
    60: 'C39_neg',
    61: 'C39_nop',
    62: 'C39_nxt',
    63: 'C39_ora',
    64: 'C39_pha',
    65: 'C39_phi',
    66: 'C39_php',
    67: 'C39_phw',
    68: 'C39_phx',
    69: 'C39_phy',
    70: 'C39_pia',
    71: 'C39_pla',
    72: 'C39_pli',
    73: 'C39_plp',
    74: 'C39_plw',
    75: 'C39_plx',
    76: 'C39_ply',
    77: 'C39_psh',
    78: 'C39_pul',
    79: 'C39_rba',
    80: 'C39_rla',
    81: 'C39_rmb',
    82: 'C39_rnd',
    83: 'C39_rol',
    84: 'C39_ror',
    85: 'C39_rra',
    86: 'C39_rti',
    87: 'C39_rts',
    88: 'C39_sax',
    89: 'C39_sba',
    90: 'C39_sbc',
    91: 'C39_sbx',
    92: 'C39_sec',
    93: 'C39_sed',
    94: 'C39_sei',
    95: 'C39_sha',
    96: 'C39_shs',
    97: 'C39_shx',
    98: 'C39_shy',
    99: 'C39_slo',
    100: 'C39_smb',
    101: 'C39_sre',
    102: 'C39_sta',
    103: 'C39_sti',
    104: 'C39_stx',
    105: 'C39_sty',
    106: 'C39_tax',
    107: 'C39_tay',
    108: 'C39_taw',
    109: 'C39_tip',
    110: 'C39_tsx',
    111: 'C39_twa',
    112: 'C39_txa',
    113: 'C39_txs',
    114: 'C39_tya',
    115: 'C39_last',
}
C39_null = 0
C39_adc = 1
C39_add = 2
C39_anc = 3
C39_and = 4
C39_ane = 5
C39_arr = 6
C39_asl = 7
C39_asr = 8
C39_bar = 9
C39_bas = 10
C39_bbr = 11
C39_bbs = 12
C39_bcc = 13
C39_bcs = 14
C39_beq = 15
C39_bit = 16
C39_bmi = 17
C39_bne = 18
C39_bpl = 19
C39_bra = 20
C39_brk = 21
C39_bvc = 22
C39_bvs = 23
C39_clc = 24
C39_cld = 25
C39_cli = 26
C39_clv = 27
C39_clw = 28
C39_cmp = 29
C39_cpx = 30
C39_cpy = 31
C39_dcp = 32
C39_dec = 33
C39_dex = 34
C39_dey = 35
C39_eor = 36
C39_exc = 37
C39_inc = 38
C39_ini = 39
C39_inx = 40
C39_iny = 41
C39_isb = 42
C39_jmp = 43
C39_jpi = 44
C39_jsb = 45
C39_jsr = 46
C39_lab = 47
C39_lae = 48
C39_lai = 49
C39_lan = 50
C39_lax = 51
C39_lda = 52
C39_ldx = 53
C39_ldy = 54
C39_lii = 55
C39_lsr = 56
C39_lxa = 57
C39_mpa = 58
C39_mpy = 59
C39_neg = 60
C39_nop = 61
C39_nxt = 62
C39_ora = 63
C39_pha = 64
C39_phi = 65
C39_php = 66
C39_phw = 67
C39_phx = 68
C39_phy = 69
C39_pia = 70
C39_pla = 71
C39_pli = 72
C39_plp = 73
C39_plw = 74
C39_plx = 75
C39_ply = 76
C39_psh = 77
C39_pul = 78
C39_rba = 79
C39_rla = 80
C39_rmb = 81
C39_rnd = 82
C39_rol = 83
C39_ror = 84
C39_rra = 85
C39_rti = 86
C39_rts = 87
C39_sax = 88
C39_sba = 89
C39_sbc = 90
C39_sbx = 91
C39_sec = 92
C39_sed = 93
C39_sei = 94
C39_sha = 95
C39_shs = 96
C39_shx = 97
C39_shy = 98
C39_slo = 99
C39_smb = 100
C39_sre = 101
C39_sta = 102
C39_sti = 103
C39_stx = 104
C39_sty = 105
C39_tax = 106
C39_tay = 107
C39_taw = 108
C39_tip = 109
C39_tsx = 110
C39_twa = 111
C39_txa = 112
C39_txs = 113
C39_tya = 114
C39_last = 115
_639195EAA19AF7270991831C59DF6BBF = ctypes.c_uint32 # enum

# values for enumeration '_94A42225DA7B79B57C74D8E69075BD91'
_94A42225DA7B79B57C74D8E69075BD91__enumvalues = {
    0: 'CR16_null',
    1: 'CR16_addb',
    2: 'CR16_addw',
    3: 'CR16_addub',
    4: 'CR16_adduw',
    5: 'CR16_addcb',
    6: 'CR16_addcw',
    7: 'CR16_andb',
    8: 'CR16_andw',
    9: 'CR16_ashub',
    10: 'CR16_ashuw',
    11: 'CR16_beq',
    12: 'CR16_bne',
    13: 'CR16_bcs',
    14: 'CR16_bcc',
    15: 'CR16_bhi',
    16: 'CR16_bls',
    17: 'CR16_bgt',
    18: 'CR16_ble',
    19: 'CR16_bfs',
    20: 'CR16_bfc',
    21: 'CR16_blo',
    22: 'CR16_bhs',
    23: 'CR16_blt',
    24: 'CR16_bge',
    25: 'CR16_br',
    26: 'CR16_bal',
    27: 'CR16_cmpb',
    28: 'CR16_cmpw',
    29: 'CR16_beq1b',
    30: 'CR16_beq1w',
    31: 'CR16_beq0b',
    32: 'CR16_beq0w',
    33: 'CR16_bne1b',
    34: 'CR16_bne1w',
    35: 'CR16_bne0b',
    36: 'CR16_bne0w',
    37: 'CR16_di',
    38: 'CR16_ei',
    39: 'CR16_excp',
    40: 'CR16_jeq',
    41: 'CR16_jne',
    42: 'CR16_jcs',
    43: 'CR16_jcc',
    44: 'CR16_jhi',
    45: 'CR16_jls',
    46: 'CR16_jgt',
    47: 'CR16_jle',
    48: 'CR16_jfs',
    49: 'CR16_jfc',
    50: 'CR16_jlo',
    51: 'CR16_jhs',
    52: 'CR16_jlt',
    53: 'CR16_jge',
    54: 'CR16_jump',
    55: 'CR16_jal',
    56: 'CR16_loadb',
    57: 'CR16_loadw',
    58: 'CR16_loadm',
    59: 'CR16_lpr',
    60: 'CR16_lshb',
    61: 'CR16_lshw',
    62: 'CR16_movb',
    63: 'CR16_movw',
    64: 'CR16_movxb',
    65: 'CR16_movzb',
    66: 'CR16_movd',
    67: 'CR16_mulb',
    68: 'CR16_mulw',
    69: 'CR16_mulsb',
    70: 'CR16_mulsw',
    71: 'CR16_muluw',
    72: 'CR16_nop',
    73: 'CR16_orb',
    74: 'CR16_orw',
    75: 'CR16_push',
    76: 'CR16_pop',
    77: 'CR16_popret',
    78: 'CR16_retx',
    79: 'CR16_seq',
    80: 'CR16_sne',
    81: 'CR16_scs',
    82: 'CR16_scc',
    83: 'CR16_shi',
    84: 'CR16_sls',
    85: 'CR16_sgt',
    86: 'CR16_sle',
    87: 'CR16_sfs',
    88: 'CR16_sfc',
    89: 'CR16_slo',
    90: 'CR16_shs',
    91: 'CR16_slt',
    92: 'CR16_sge',
    93: 'CR16_spr',
    94: 'CR16_storb',
    95: 'CR16_storw',
    96: 'CR16_storm',
    97: 'CR16_subb',
    98: 'CR16_subw',
    99: 'CR16_subcb',
    100: 'CR16_subcw',
    101: 'CR16_tbit',
    102: 'CR16_tbitb',
    103: 'CR16_tbitw',
    104: 'CR16_sbitb',
    105: 'CR16_sbitw',
    106: 'CR16_cbitb',
    107: 'CR16_cbitw',
    108: 'CR16_wait',
    109: 'CR16_eiwait',
    110: 'CR16_xorb',
    111: 'CR16_xorw',
    112: 'CR16_last',
}
CR16_null = 0
CR16_addb = 1
CR16_addw = 2
CR16_addub = 3
CR16_adduw = 4
CR16_addcb = 5
CR16_addcw = 6
CR16_andb = 7
CR16_andw = 8
CR16_ashub = 9
CR16_ashuw = 10
CR16_beq = 11
CR16_bne = 12
CR16_bcs = 13
CR16_bcc = 14
CR16_bhi = 15
CR16_bls = 16
CR16_bgt = 17
CR16_ble = 18
CR16_bfs = 19
CR16_bfc = 20
CR16_blo = 21
CR16_bhs = 22
CR16_blt = 23
CR16_bge = 24
CR16_br = 25
CR16_bal = 26
CR16_cmpb = 27
CR16_cmpw = 28
CR16_beq1b = 29
CR16_beq1w = 30
CR16_beq0b = 31
CR16_beq0w = 32
CR16_bne1b = 33
CR16_bne1w = 34
CR16_bne0b = 35
CR16_bne0w = 36
CR16_di = 37
CR16_ei = 38
CR16_excp = 39
CR16_jeq = 40
CR16_jne = 41
CR16_jcs = 42
CR16_jcc = 43
CR16_jhi = 44
CR16_jls = 45
CR16_jgt = 46
CR16_jle = 47
CR16_jfs = 48
CR16_jfc = 49
CR16_jlo = 50
CR16_jhs = 51
CR16_jlt = 52
CR16_jge = 53
CR16_jump = 54
CR16_jal = 55
CR16_loadb = 56
CR16_loadw = 57
CR16_loadm = 58
CR16_lpr = 59
CR16_lshb = 60
CR16_lshw = 61
CR16_movb = 62
CR16_movw = 63
CR16_movxb = 64
CR16_movzb = 65
CR16_movd = 66
CR16_mulb = 67
CR16_mulw = 68
CR16_mulsb = 69
CR16_mulsw = 70
CR16_muluw = 71
CR16_nop = 72
CR16_orb = 73
CR16_orw = 74
CR16_push = 75
CR16_pop = 76
CR16_popret = 77
CR16_retx = 78
CR16_seq = 79
CR16_sne = 80
CR16_scs = 81
CR16_scc = 82
CR16_shi = 83
CR16_sls = 84
CR16_sgt = 85
CR16_sle = 86
CR16_sfs = 87
CR16_sfc = 88
CR16_slo = 89
CR16_shs = 90
CR16_slt = 91
CR16_sge = 92
CR16_spr = 93
CR16_storb = 94
CR16_storw = 95
CR16_storm = 96
CR16_subb = 97
CR16_subw = 98
CR16_subcb = 99
CR16_subcw = 100
CR16_tbit = 101
CR16_tbitb = 102
CR16_tbitw = 103
CR16_sbitb = 104
CR16_sbitw = 105
CR16_cbitb = 106
CR16_cbitw = 107
CR16_wait = 108
CR16_eiwait = 109
CR16_xorb = 110
CR16_xorw = 111
CR16_last = 112
_94A42225DA7B79B57C74D8E69075BD91 = ctypes.c_uint32 # enum

# values for enumeration '_3FDFCB95F2753C79F6E41FB03999C998'
_3FDFCB95F2753C79F6E41FB03999C998__enumvalues = {
    0: 'mn102_null',
    1: 'mn102_add',
    2: 'mn102_addc',
    3: 'mn102_addnf',
    4: 'mn102_and',
    5: 'mn102_asr',
    6: 'mn102_bcc',
    7: 'mn102_bccx',
    8: 'mn102_bclr',
    9: 'mn102_bcs',
    10: 'mn102_bcsx',
    11: 'mn102_beq',
    12: 'mn102_beqx',
    13: 'mn102_bge',
    14: 'mn102_bgex',
    15: 'mn102_bgt',
    16: 'mn102_bgtx',
    17: 'mn102_bhi',
    18: 'mn102_bhix',
    19: 'mn102_ble',
    20: 'mn102_blex',
    21: 'mn102_bls',
    22: 'mn102_blsx',
    23: 'mn102_blt',
    24: 'mn102_bltx',
    25: 'mn102_bnc',
    26: 'mn102_bncx',
    27: 'mn102_bne',
    28: 'mn102_bnex',
    29: 'mn102_bns',
    30: 'mn102_bnsx',
    31: 'mn102_bra',
    32: 'mn102_bset',
    33: 'mn102_btst',
    34: 'mn102_bvc',
    35: 'mn102_bvcx',
    36: 'mn102_bvs',
    37: 'mn102_bvsx',
    38: 'mn102_cmp',
    39: 'mn102_divu',
    40: 'mn102_ext',
    41: 'mn102_extx',
    42: 'mn102_extxb',
    43: 'mn102_extxbu',
    44: 'mn102_extxu',
    45: 'mn102_jmp',
    46: 'mn102_jsr',
    47: 'mn102_lsr',
    48: 'mn102_mov',
    49: 'mn102_movb',
    50: 'mn102_movbu',
    51: 'mn102_movx',
    52: 'mn102_mul',
    53: 'mn102_mulq',
    54: 'mn102_mulqh',
    55: 'mn102_mulql',
    56: 'mn102_mulu',
    57: 'mn102_nop',
    58: 'mn102_not',
    59: 'mn102_or',
    60: 'mn102_pxst',
    61: 'mn102_rol',
    62: 'mn102_ror',
    63: 'mn102_rti',
    64: 'mn102_rts',
    65: 'mn102_sub',
    66: 'mn102_subc',
    67: 'mn102_tbnz',
    68: 'mn102_tbz',
    69: 'mn102_xor',
    70: 'mn102_last',
}
mn102_null = 0
mn102_add = 1
mn102_addc = 2
mn102_addnf = 3
mn102_and = 4
mn102_asr = 5
mn102_bcc = 6
mn102_bccx = 7
mn102_bclr = 8
mn102_bcs = 9
mn102_bcsx = 10
mn102_beq = 11
mn102_beqx = 12
mn102_bge = 13
mn102_bgex = 14
mn102_bgt = 15
mn102_bgtx = 16
mn102_bhi = 17
mn102_bhix = 18
mn102_ble = 19
mn102_blex = 20
mn102_bls = 21
mn102_blsx = 22
mn102_blt = 23
mn102_bltx = 24
mn102_bnc = 25
mn102_bncx = 26
mn102_bne = 27
mn102_bnex = 28
mn102_bns = 29
mn102_bnsx = 30
mn102_bra = 31
mn102_bset = 32
mn102_btst = 33
mn102_bvc = 34
mn102_bvcx = 35
mn102_bvs = 36
mn102_bvsx = 37
mn102_cmp = 38
mn102_divu = 39
mn102_ext = 40
mn102_extx = 41
mn102_extxb = 42
mn102_extxbu = 43
mn102_extxu = 44
mn102_jmp = 45
mn102_jsr = 46
mn102_lsr = 47
mn102_mov = 48
mn102_movb = 49
mn102_movbu = 50
mn102_movx = 51
mn102_mul = 52
mn102_mulq = 53
mn102_mulqh = 54
mn102_mulql = 55
mn102_mulu = 56
mn102_nop = 57
mn102_not = 58
mn102_or = 59
mn102_pxst = 60
mn102_rol = 61
mn102_ror = 62
mn102_rti = 63
mn102_rts = 64
mn102_sub = 65
mn102_subc = 66
mn102_tbnz = 67
mn102_tbz = 68
mn102_xor = 69
mn102_last = 70
_3FDFCB95F2753C79F6E41FB03999C998 = ctypes.c_uint32 # enum

# values for enumeration '_9AD262722AB1BD11DCBD94EE84EF9EE0'
_9AD262722AB1BD11DCBD94EE84EF9EE0__enumvalues = {
    0: 'PPC_null',
    1: 'PPC_add',
    2: 'PPC_addc',
    3: 'PPC_adde',
    4: 'PPC_addi',
    5: 'PPC_addic',
    6: 'PPC_addis',
    7: 'PPC_addme',
    8: 'PPC_addze',
    9: 'PPC_and',
    10: 'PPC_andc',
    11: 'PPC_andi',
    12: 'PPC_andis',
    13: 'PPC_b',
    14: 'PPC_bc',
    15: 'PPC_bcctr',
    16: 'PPC_bclr',
    17: 'PPC_cmp',
    18: 'PPC_cmpi',
    19: 'PPC_cmpl',
    20: 'PPC_cmpli',
    21: 'PPC_cntlzd',
    22: 'PPC_cntlzw',
    23: 'PPC_crand',
    24: 'PPC_crandc',
    25: 'PPC_creqv',
    26: 'PPC_crnand',
    27: 'PPC_crnor',
    28: 'PPC_cror',
    29: 'PPC_crorc',
    30: 'PPC_crxor',
    31: 'PPC_dcba',
    32: 'PPC_dcbf',
    33: 'PPC_dcbi',
    34: 'PPC_dcbst',
    35: 'PPC_dcbt',
    36: 'PPC_dcbtst',
    37: 'PPC_dcbz',
    38: 'PPC_divd',
    39: 'PPC_divdu',
    40: 'PPC_divw',
    41: 'PPC_divwu',
    42: 'PPC_eciwx',
    43: 'PPC_ecowx',
    44: 'PPC_eieio',
    45: 'PPC_eqv',
    46: 'PPC_extsb',
    47: 'PPC_extsh',
    48: 'PPC_extsw',
    49: 'PPC_fabs',
    50: 'PPC_fadd',
    51: 'PPC_fadds',
    52: 'PPC_fcfid',
    53: 'PPC_fcmpo',
    54: 'PPC_fcmpu',
    55: 'PPC_fctid',
    56: 'PPC_fctidz',
    57: 'PPC_fctiw',
    58: 'PPC_fctiwz',
    59: 'PPC_fdiv',
    60: 'PPC_fdivs',
    61: 'PPC_fmadd',
    62: 'PPC_fmadds',
    63: 'PPC_fmr',
    64: 'PPC_fmsub',
    65: 'PPC_fmsubs',
    66: 'PPC_fmul',
    67: 'PPC_fmuls',
    68: 'PPC_fnabs',
    69: 'PPC_fneg',
    70: 'PPC_fnmadd',
    71: 'PPC_fnmadds',
    72: 'PPC_fnmsub',
    73: 'PPC_fnmsubs',
    74: 'PPC_fres',
    75: 'PPC_frsp',
    76: 'PPC_frsqrte',
    77: 'PPC_fsel',
    78: 'PPC_fsqrt',
    79: 'PPC_fsqrts',
    80: 'PPC_fsub',
    81: 'PPC_fsubs',
    82: 'PPC_icbi',
    83: 'PPC_isync',
    84: 'PPC_lbz',
    85: 'PPC_lbzu',
    86: 'PPC_lbzux',
    87: 'PPC_lbzx',
    88: 'PPC_ld',
    89: 'PPC_ldarx',
    90: 'PPC_ldu',
    91: 'PPC_ldux',
    92: 'PPC_ldx',
    93: 'PPC_lfd',
    94: 'PPC_lfdu',
    95: 'PPC_lfdux',
    96: 'PPC_lfdx',
    97: 'PPC_lfs',
    98: 'PPC_lfsu',
    99: 'PPC_lfsux',
    100: 'PPC_lfsx',
    101: 'PPC_lha',
    102: 'PPC_lhau',
    103: 'PPC_lhaux',
    104: 'PPC_lhax',
    105: 'PPC_lhbrx',
    106: 'PPC_lhz',
    107: 'PPC_lhzu',
    108: 'PPC_lhzux',
    109: 'PPC_lhzx',
    110: 'PPC_lmw',
    111: 'PPC_lswi',
    112: 'PPC_lswx',
    113: 'PPC_lwa',
    114: 'PPC_lwarx',
    115: 'PPC_lwaux',
    116: 'PPC_lwax',
    117: 'PPC_lwbrx',
    118: 'PPC_lwz',
    119: 'PPC_lwzu',
    120: 'PPC_lwzux',
    121: 'PPC_lwzx',
    122: 'PPC_mcrf',
    123: 'PPC_mcrfs',
    124: 'PPC_mcrxr',
    125: 'PPC_mfcr',
    126: 'PPC_mffs',
    127: 'PPC_mfmsr',
    128: 'PPC_mfspr',
    129: 'PPC_mfsr',
    130: 'PPC_mfsrin',
    131: 'PPC_mftb',
    132: 'PPC_mtcrf',
    133: 'PPC_mtfsb0',
    134: 'PPC_mtfsb1',
    135: 'PPC_mtfsf',
    136: 'PPC_mtfsfi',
    137: 'PPC_mtmsr',
    138: 'PPC_mtmsrd',
    139: 'PPC_mtspr',
    140: 'PPC_mtsr',
    141: 'PPC_mtsrd',
    142: 'PPC_mtsrdin',
    143: 'PPC_mtsrin',
    144: 'PPC_mulhd',
    145: 'PPC_mulhdu',
    146: 'PPC_mulhw',
    147: 'PPC_mulhwu',
    148: 'PPC_mulld',
    149: 'PPC_mulli',
    150: 'PPC_mullw',
    151: 'PPC_nand',
    152: 'PPC_neg',
    153: 'PPC_nor',
    154: 'PPC_or',
    155: 'PPC_orc',
    156: 'PPC_ori',
    157: 'PPC_oris',
    158: 'PPC_rfi',
    159: 'PPC_rfid',
    160: 'PPC_rldcl',
    161: 'PPC_rldcr',
    162: 'PPC_rldic',
    163: 'PPC_rldicl',
    164: 'PPC_rldicr',
    165: 'PPC_rldimi',
    166: 'PPC_rlwimi',
    167: 'PPC_rlwinm',
    168: 'PPC_rlwnm',
    169: 'PPC_sc',
    170: 'PPC_slbia',
    171: 'PPC_slbie',
    172: 'PPC_sld',
    173: 'PPC_slw',
    174: 'PPC_srad',
    175: 'PPC_sradi',
    176: 'PPC_sraw',
    177: 'PPC_srawi',
    178: 'PPC_srd',
    179: 'PPC_srw',
    180: 'PPC_stb',
    181: 'PPC_stbu',
    182: 'PPC_stbux',
    183: 'PPC_stbx',
    184: 'PPC_std',
    185: 'PPC_stdcx',
    186: 'PPC_stdu',
    187: 'PPC_stdux',
    188: 'PPC_stdx',
    189: 'PPC_stfd',
    190: 'PPC_stfdu',
    191: 'PPC_stfdux',
    192: 'PPC_stfdx',
    193: 'PPC_stfiwx',
    194: 'PPC_stfs',
    195: 'PPC_stfsu',
    196: 'PPC_stfsux',
    197: 'PPC_stfsx',
    198: 'PPC_sth',
    199: 'PPC_sthbrx',
    200: 'PPC_sthu',
    201: 'PPC_sthux',
    202: 'PPC_sthx',
    203: 'PPC_stmw',
    204: 'PPC_stswi',
    205: 'PPC_stswx',
    206: 'PPC_stw',
    207: 'PPC_stwbrx',
    208: 'PPC_stwcx',
    209: 'PPC_stwu',
    210: 'PPC_stwux',
    211: 'PPC_stwx',
    212: 'PPC_subf',
    213: 'PPC_subfc',
    214: 'PPC_subfe',
    215: 'PPC_subfic',
    216: 'PPC_subfme',
    217: 'PPC_subfze',
    218: 'PPC_sync',
    219: 'PPC_td',
    220: 'PPC_tdi',
    221: 'PPC_tlbia',
    222: 'PPC_tlbie',
    223: 'PPC_tlbsync',
    224: 'PPC_tw',
    225: 'PPC_twi',
    226: 'PPC_xor',
    227: 'PPC_xori',
    228: 'PPC_xoris',
    228: 'PPC_last_basic',
    229: 'PPC_cmpwi',
    230: 'PPC_cmpw',
    231: 'PPC_cmplwi',
    232: 'PPC_cmplw',
    233: 'PPC_cmpdi',
    234: 'PPC_cmpd',
    235: 'PPC_cmpldi',
    236: 'PPC_cmpld',
    237: 'PPC_trap',
    238: 'PPC_trapd',
    239: 'PPC_twlgt',
    240: 'PPC_twllt',
    241: 'PPC_tweq',
    242: 'PPC_twlge',
    243: 'PPC_twlle',
    244: 'PPC_twgt',
    245: 'PPC_twge',
    246: 'PPC_twlt',
    247: 'PPC_twle',
    248: 'PPC_twne',
    249: 'PPC_twlgti',
    250: 'PPC_twllti',
    251: 'PPC_tweqi',
    252: 'PPC_twlgei',
    253: 'PPC_twllei',
    254: 'PPC_twgti',
    255: 'PPC_twgei',
    256: 'PPC_twlti',
    257: 'PPC_twlei',
    258: 'PPC_twnei',
    259: 'PPC_tdlgt',
    260: 'PPC_tdllt',
    261: 'PPC_tdeq',
    262: 'PPC_tdlge',
    263: 'PPC_tdlle',
    264: 'PPC_tdgt',
    265: 'PPC_tdge',
    266: 'PPC_tdlt',
    267: 'PPC_tdle',
    268: 'PPC_tdne',
    269: 'PPC_tdlgti',
    270: 'PPC_tdllti',
    271: 'PPC_tdeqi',
    272: 'PPC_tdlgei',
    273: 'PPC_tdllei',
    274: 'PPC_tdgti',
    275: 'PPC_tdgei',
    276: 'PPC_tdlti',
    277: 'PPC_tdlei',
    278: 'PPC_tdnei',
    279: 'PPC_nop',
    280: 'PPC_not',
    281: 'PPC_mr',
    282: 'PPC_subi',
    283: 'PPC_subic',
    284: 'PPC_subis',
    285: 'PPC_li',
    286: 'PPC_lis',
    287: 'PPC_crset',
    288: 'PPC_crnot',
    289: 'PPC_crmove',
    290: 'PPC_crclr',
    291: 'PPC_mtxer',
    292: 'PPC_mtlr',
    293: 'PPC_mtctr',
    294: 'PPC_mtdsisr',
    295: 'PPC_mtdar',
    296: 'PPC_mtdec',
    297: 'PPC_mtsrr0',
    298: 'PPC_mtsrr1',
    299: 'PPC_mtsprg0',
    300: 'PPC_mtsprg1',
    301: 'PPC_mtsprg2',
    302: 'PPC_mtsprg3',
    303: 'PPC_mttbl',
    304: 'PPC_mttbu',
    305: 'PPC_mfxer',
    306: 'PPC_mflr',
    307: 'PPC_mfctr',
    308: 'PPC_mfdsisr',
    309: 'PPC_mfdar',
    310: 'PPC_mfdec',
    311: 'PPC_mfsrr0',
    312: 'PPC_mfsrr1',
    313: 'PPC_mfsprg0',
    314: 'PPC_mfsprg1',
    315: 'PPC_mfsprg2',
    316: 'PPC_mfsprg3',
    317: 'PPC_mftbl',
    318: 'PPC_mftbu',
    319: 'PPC_mfpvr',
    320: 'PPC_balways',
    321: 'PPC_bt',
    322: 'PPC_bf',
    323: 'PPC_bdnz',
    324: 'PPC_bdnzt',
    325: 'PPC_bdnzf',
    326: 'PPC_bdz',
    327: 'PPC_bdzt',
    328: 'PPC_bdzf',
    329: 'PPC_blt',
    330: 'PPC_ble',
    331: 'PPC_beq',
    332: 'PPC_bge',
    333: 'PPC_bgt',
    334: 'PPC_bne',
    335: 'PPC_bso',
    336: 'PPC_bns',
    337: 'PPC_extlwi',
    338: 'PPC_extrwi',
    339: 'PPC_inslwi',
    340: 'PPC_insrwi',
    341: 'PPC_rotlwi',
    342: 'PPC_rotrwi',
    343: 'PPC_rotlw',
    344: 'PPC_slwi',
    345: 'PPC_srwi',
    346: 'PPC_clrlwi',
    347: 'PPC_clrrwi',
    348: 'PPC_clrlslwi',
    349: 'PPC_dccci',
    350: 'PPC_dcread',
    351: 'PPC_icbt',
    352: 'PPC_iccci',
    353: 'PPC_icread',
    354: 'PPC_mfdcr',
    355: 'PPC_mtdcr',
    356: 'PPC_rfci',
    357: 'PPC_tlbre',
    358: 'PPC_tlbsx',
    359: 'PPC_tlbwe',
    360: 'PPC_wrtee',
    361: 'PPC_wrteei',
    362: 'PPC_abs',
    363: 'PPC_clcs',
    364: 'PPC_clf',
    365: 'PPC_cli',
    366: 'PPC_dclst',
    367: 'PPC_div',
    368: 'PPC_divs',
    369: 'PPC_doz',
    370: 'PPC_dozi',
    371: 'PPC_frsqrtes',
    372: 'PPC_hrfid',
    373: 'PPC_lscbx',
    374: 'PPC_maskg',
    375: 'PPC_maskir',
    376: 'PPC_mfsri',
    377: 'PPC_mul',
    378: 'PPC_nabs',
    379: 'PPC_popcntb',
    380: 'PPC_rac',
    381: 'PPC_rfsvc',
    382: 'PPC_rlmi',
    383: 'PPC_rrib',
    384: 'PPC_slbmfee',
    385: 'PPC_slbmfev',
    386: 'PPC_slbmte',
    387: 'PPC_sle',
    388: 'PPC_sleq',
    389: 'PPC_sliq',
    390: 'PPC_slliq',
    391: 'PPC_sllq',
    392: 'PPC_slq',
    393: 'PPC_sraiq',
    394: 'PPC_sraq',
    395: 'PPC_sre',
    396: 'PPC_srea',
    397: 'PPC_sreq',
    398: 'PPC_sriq',
    399: 'PPC_srliq',
    400: 'PPC_srlq',
    401: 'PPC_srq',
    402: 'PPC_mtocrf',
    403: 'PPC_mfocrf',
    404: 'PPC_isel',
    405: 'PPC_isellt',
    406: 'PPC_iselgt',
    407: 'PPC_iseleq',
    408: 'PPC_dcblc',
    409: 'PPC_dcbtls',
    410: 'PPC_dcbtstls',
    411: 'PPC_icblc',
    412: 'PPC_icbtls',
    413: 'PPC_tlbivax',
    414: 'PPC_rfdi',
    415: 'PPC_tlbld',
    416: 'PPC_tlbli',
    417: 'PPC_brinc',
    418: 'PPC_evabs',
    419: 'PPC_evaddiw',
    420: 'PPC_evaddsmiaaw',
    421: 'PPC_evaddssiaaw',
    422: 'PPC_evaddumiaaw',
    423: 'PPC_evaddusiaaw',
    424: 'PPC_evaddw',
    425: 'PPC_evand',
    426: 'PPC_evandc',
    427: 'PPC_evcmpeq',
    428: 'PPC_evcmpgts',
    429: 'PPC_evcmpgtu',
    430: 'PPC_evcmplts',
    431: 'PPC_evcmpltu',
    432: 'PPC_evcntlsw',
    433: 'PPC_evcntlzw',
    434: 'PPC_evdivws',
    435: 'PPC_evdivwu',
    436: 'PPC_eveqv',
    437: 'PPC_evextsb',
    438: 'PPC_evextsh',
    439: 'PPC_evldd',
    440: 'PPC_evlddx',
    441: 'PPC_evldh',
    442: 'PPC_evldhx',
    443: 'PPC_evldw',
    444: 'PPC_evldwx',
    445: 'PPC_evlhhesplat',
    446: 'PPC_evlhhesplatx',
    447: 'PPC_evlhhossplat',
    448: 'PPC_evlhhossplatx',
    449: 'PPC_evlhhousplat',
    450: 'PPC_evlhhousplatx',
    451: 'PPC_evlwhe',
    452: 'PPC_evlwhex',
    453: 'PPC_evlwhos',
    454: 'PPC_evlwhosx',
    455: 'PPC_evlwhou',
    456: 'PPC_evlwhoux',
    457: 'PPC_evlwhsplat',
    458: 'PPC_evlwhsplatx',
    459: 'PPC_evlwwsplat',
    460: 'PPC_evlwwsplatx',
    461: 'PPC_evmergehi',
    462: 'PPC_evmergehilo',
    463: 'PPC_evmergelo',
    464: 'PPC_evmergelohi',
    465: 'PPC_evmhegsmfaa',
    466: 'PPC_evmhegsmfan',
    467: 'PPC_evmhegsmiaa',
    468: 'PPC_evmhegsmian',
    469: 'PPC_evmhegumiaa',
    470: 'PPC_evmhegumian',
    471: 'PPC_evmhesmf',
    472: 'PPC_evmhesmfa',
    473: 'PPC_evmhesmfaaw',
    474: 'PPC_evmhesmfanw',
    475: 'PPC_evmhesmi',
    476: 'PPC_evmhesmia',
    477: 'PPC_evmhesmiaaw',
    478: 'PPC_evmhesmianw',
    479: 'PPC_evmhessf',
    480: 'PPC_evmhessfa',
    481: 'PPC_evmhessfaaw',
    482: 'PPC_evmhessfanw',
    483: 'PPC_evmhessiaaw',
    484: 'PPC_evmhessianw',
    485: 'PPC_evmheumi',
    486: 'PPC_evmheumia',
    487: 'PPC_evmheumiaaw',
    488: 'PPC_evmheumianw',
    489: 'PPC_evmheusiaaw',
    490: 'PPC_evmheusianw',
    491: 'PPC_evmhogsmfaa',
    492: 'PPC_evmhogsmfan',
    493: 'PPC_evmhogsmiaa',
    494: 'PPC_evmhogsmian',
    495: 'PPC_evmhogumiaa',
    496: 'PPC_evmhogumian',
    497: 'PPC_evmhosmf',
    498: 'PPC_evmhosmfa',
    499: 'PPC_evmhosmfaaw',
    500: 'PPC_evmhosmfanw',
    501: 'PPC_evmhosmi',
    502: 'PPC_evmhosmia',
    503: 'PPC_evmhosmiaaw',
    504: 'PPC_evmhosmianw',
    505: 'PPC_evmhossf',
    506: 'PPC_evmhossfa',
    507: 'PPC_evmhossfaaw',
    508: 'PPC_evmhossfanw',
    509: 'PPC_evmhossiaaw',
    510: 'PPC_evmhossianw',
    511: 'PPC_evmhoumi',
    512: 'PPC_evmhoumia',
    513: 'PPC_evmhoumiaaw',
    514: 'PPC_evmhoumianw',
    515: 'PPC_evmhousiaaw',
    516: 'PPC_evmhousianw',
    517: 'PPC_evmra',
    518: 'PPC_evmwhsmf',
    519: 'PPC_evmwhsmfa',
    520: 'PPC_evmwhsmi',
    521: 'PPC_evmwhsmia',
    522: 'PPC_evmwhssf',
    523: 'PPC_evmwhssfa',
    524: 'PPC_evmwhumi',
    525: 'PPC_evmwhumia',
    526: 'PPC_evmwlsmiaaw',
    527: 'PPC_evmwlsmianw',
    528: 'PPC_evmwlssiaaw',
    529: 'PPC_evmwlssianw',
    530: 'PPC_evmwlumi',
    531: 'PPC_evmwlumia',
    532: 'PPC_evmwlumiaaw',
    533: 'PPC_evmwlumianw',
    534: 'PPC_evmwlusiaaw',
    535: 'PPC_evmwlusianw',
    536: 'PPC_evmwsmf',
    537: 'PPC_evmwsmfa',
    538: 'PPC_evmwsmfaa',
    539: 'PPC_evmwsmfan',
    540: 'PPC_evmwsmi',
    541: 'PPC_evmwsmia',
    542: 'PPC_evmwsmiaa',
    543: 'PPC_evmwsmian',
    544: 'PPC_evmwssf',
    545: 'PPC_evmwssfa',
    546: 'PPC_evmwssfaa',
    547: 'PPC_evmwssfan',
    548: 'PPC_evmwumi',
    549: 'PPC_evmwumia',
    550: 'PPC_evmwumiaa',
    551: 'PPC_evmwumian',
    552: 'PPC_evnand',
    553: 'PPC_evneg',
    554: 'PPC_evnor',
    555: 'PPC_evor',
    556: 'PPC_evorc',
    557: 'PPC_evrlw',
    558: 'PPC_evrlwi',
    559: 'PPC_evrndw',
    560: 'PPC_evsel',
    561: 'PPC_evslw',
    562: 'PPC_evslwi',
    563: 'PPC_evsplatfi',
    564: 'PPC_evsplati',
    565: 'PPC_evsrwis',
    566: 'PPC_evsrwiu',
    567: 'PPC_evsrws',
    568: 'PPC_evsrwu',
    569: 'PPC_evstdd',
    570: 'PPC_evstddx',
    571: 'PPC_evstdh',
    572: 'PPC_evstdhx',
    573: 'PPC_evstdw',
    574: 'PPC_evstdwx',
    575: 'PPC_evstwhe',
    576: 'PPC_evstwhex',
    577: 'PPC_evstwho',
    578: 'PPC_evstwhox',
    579: 'PPC_evstwwe',
    580: 'PPC_evstwwex',
    581: 'PPC_evstwwo',
    582: 'PPC_evstwwox',
    583: 'PPC_evsubfsmiaaw',
    584: 'PPC_evsubfssiaaw',
    585: 'PPC_evsubfumiaaw',
    586: 'PPC_evsubfusiaaw',
    587: 'PPC_evsubfw',
    588: 'PPC_evsubifw',
    589: 'PPC_evxor',
    590: 'PPC_efdabs',
    591: 'PPC_efdadd',
    592: 'PPC_efdcfs',
    593: 'PPC_efdcfsf',
    594: 'PPC_efdcfsi',
    595: 'PPC_efdcfsid',
    596: 'PPC_efdcfuf',
    597: 'PPC_efdcfui',
    598: 'PPC_efdcfuid',
    599: 'PPC_efdcmpeq',
    600: 'PPC_efdcmpgt',
    601: 'PPC_efdcmplt',
    602: 'PPC_efdctsf',
    603: 'PPC_efdctsi',
    604: 'PPC_efdctsidz',
    605: 'PPC_efdctsiz',
    606: 'PPC_efdctuf',
    607: 'PPC_efdctui',
    608: 'PPC_efdctuidz',
    609: 'PPC_efdctuiz',
    610: 'PPC_efddiv',
    611: 'PPC_efdmul',
    612: 'PPC_efdnabs',
    613: 'PPC_efdneg',
    614: 'PPC_efdsub',
    615: 'PPC_efdtsteq',
    616: 'PPC_efdtstgt',
    617: 'PPC_efdtstlt',
    618: 'PPC_efscfd',
    619: 'PPC_efsabs',
    620: 'PPC_efsadd',
    621: 'PPC_efscfsf',
    622: 'PPC_efscfsi',
    623: 'PPC_efscfuf',
    624: 'PPC_efscfui',
    625: 'PPC_efscmpeq',
    626: 'PPC_efscmpgt',
    627: 'PPC_efscmplt',
    628: 'PPC_efsctsf',
    629: 'PPC_efsctsi',
    630: 'PPC_efsctsiz',
    631: 'PPC_efsctuf',
    632: 'PPC_efsctui',
    633: 'PPC_efsctuiz',
    634: 'PPC_efsdiv',
    635: 'PPC_efsmul',
    636: 'PPC_efsnabs',
    637: 'PPC_efsneg',
    638: 'PPC_efssub',
    639: 'PPC_efststeq',
    640: 'PPC_efststgt',
    641: 'PPC_efststlt',
    642: 'PPC_evfsabs',
    643: 'PPC_evfsadd',
    644: 'PPC_evfscfsf',
    645: 'PPC_evfscfsi',
    646: 'PPC_evfscfuf',
    647: 'PPC_evfscfui',
    648: 'PPC_evfscmpeq',
    649: 'PPC_evfscmpgt',
    650: 'PPC_evfscmplt',
    651: 'PPC_evfsctsf',
    652: 'PPC_evfsctsi',
    653: 'PPC_evfsctsiz',
    654: 'PPC_evfsctuf',
    655: 'PPC_evfsctui',
    656: 'PPC_evfsctuiz',
    657: 'PPC_evfsdiv',
    658: 'PPC_evfsmul',
    659: 'PPC_evfsnabs',
    660: 'PPC_evfsneg',
    661: 'PPC_evfssub',
    662: 'PPC_evfststeq',
    663: 'PPC_evfststgt',
    664: 'PPC_evfststlt',
    665: 'PPC_bpermd',
    666: 'PPC_divde',
    667: 'PPC_divdeu',
    668: 'PPC_ldbrx',
    669: 'PPC_prtyd',
    670: 'PPC_stdbrx',
    671: 'PPC_cmpb',
    672: 'PPC_divwe',
    673: 'PPC_divweu',
    674: 'PPC_lbarx',
    675: 'PPC_lharx',
    676: 'PPC_popcntd',
    677: 'PPC_popcntw',
    678: 'PPC_prtyw',
    679: 'PPC_stbcx',
    680: 'PPC_sthcx',
    681: 'PPC_addg6s',
    682: 'PPC_cbcdtd',
    683: 'PPC_cdtbcd',
    684: 'PPC_dadd',
    685: 'PPC_daddq',
    686: 'PPC_dcffix',
    687: 'PPC_dcffixq',
    688: 'PPC_dcmpo',
    689: 'PPC_dcmpoq',
    690: 'PPC_dcmpu',
    691: 'PPC_dcmpuq',
    692: 'PPC_dctdp',
    693: 'PPC_dctfix',
    694: 'PPC_dctfixq',
    695: 'PPC_dctqpq',
    696: 'PPC_ddedpd',
    697: 'PPC_ddedpdq',
    698: 'PPC_ddiv',
    699: 'PPC_ddivq',
    700: 'PPC_denbcd',
    701: 'PPC_denbcdq',
    702: 'PPC_diex',
    703: 'PPC_diexq',
    704: 'PPC_dmul',
    705: 'PPC_dmulq',
    706: 'PPC_dqua',
    707: 'PPC_dquai',
    708: 'PPC_dquaiq',
    709: 'PPC_dquaq',
    710: 'PPC_drdpq',
    711: 'PPC_drintn',
    712: 'PPC_drintnq',
    713: 'PPC_drintx',
    714: 'PPC_drintxq',
    715: 'PPC_drrnd',
    716: 'PPC_drrndq',
    717: 'PPC_drsp',
    718: 'PPC_dscli',
    719: 'PPC_dscliq',
    720: 'PPC_dscri',
    721: 'PPC_dscriq',
    722: 'PPC_dsub',
    723: 'PPC_dsubq',
    724: 'PPC_dtstdc',
    725: 'PPC_dtstdcq',
    726: 'PPC_dtstdg',
    727: 'PPC_dtstdgq',
    728: 'PPC_dtstex',
    729: 'PPC_dtstexq',
    730: 'PPC_dtstsf',
    731: 'PPC_dtstsfq',
    732: 'PPC_dxex',
    733: 'PPC_dxexq',
    734: 'PPC_dsn',
    735: 'PPC_lbdx',
    736: 'PPC_lddx',
    737: 'PPC_lfddx',
    738: 'PPC_lhdx',
    739: 'PPC_lwdx',
    740: 'PPC_stbdx',
    741: 'PPC_stddx',
    742: 'PPC_stfddx',
    743: 'PPC_sthdx',
    744: 'PPC_stwdx',
    745: 'PPC_mbar',
    746: 'PPC_rfmci',
    747: 'PPC_tlbilx',
    748: 'PPC_dci',
    749: 'PPC_ici',
    750: 'PPC_mfdcrux',
    751: 'PPC_mfdcrx',
    752: 'PPC_mtdcrux',
    753: 'PPC_mtdcrx',
    754: 'PPC_dnh',
    755: 'PPC_ehpriv',
    756: 'PPC_rfgi',
    757: 'PPC_msgclr',
    758: 'PPC_msgsnd',
    759: 'PPC_dcbfep',
    760: 'PPC_dcbstep',
    761: 'PPC_dcbtep',
    762: 'PPC_dcbtstep',
    763: 'PPC_dcbzep',
    764: 'PPC_evlddepx',
    765: 'PPC_evstddepx',
    766: 'PPC_icbiep',
    767: 'PPC_lbepx',
    768: 'PPC_lfdepx',
    769: 'PPC_lhepx',
    770: 'PPC_lvepx',
    771: 'PPC_lvepxl',
    772: 'PPC_lwepx',
    773: 'PPC_stbepx',
    774: 'PPC_stfdepx',
    775: 'PPC_sthepx',
    776: 'PPC_stvepx',
    777: 'PPC_stvepxl',
    778: 'PPC_stwepx',
    779: 'PPC_ldepx',
    780: 'PPC_stdepx',
    781: 'PPC_mfpmr',
    782: 'PPC_mtpmr',
    783: 'PPC_mftmr',
    784: 'PPC_mttmr',
    785: 'PPC_tlbsrx',
    786: 'PPC_fcfids',
    787: 'PPC_fcfidu',
    788: 'PPC_fcfidus',
    789: 'PPC_fctidu',
    790: 'PPC_fctiduz',
    791: 'PPC_fctiwu',
    792: 'PPC_fctiwuz',
    793: 'PPC_ftdiv',
    794: 'PPC_ftsqrt',
    795: 'PPC_lfiwax',
    796: 'PPC_lfiwzx',
    797: 'PPC_lfdp',
    798: 'PPC_lfdpx',
    799: 'PPC_stfdp',
    800: 'PPC_stfdpx',
    801: 'PPC_fcpsgn',
    802: 'PPC_fre',
    803: 'PPC_frim',
    804: 'PPC_frin',
    805: 'PPC_frip',
    806: 'PPC_friz',
    807: 'PPC_macchw',
    808: 'PPC_macchws',
    809: 'PPC_macchwsu',
    810: 'PPC_macchwu',
    811: 'PPC_machhw',
    812: 'PPC_machhws',
    813: 'PPC_machhwsu',
    814: 'PPC_machhwu',
    815: 'PPC_maclhw',
    816: 'PPC_maclhws',
    817: 'PPC_maclhwsu',
    818: 'PPC_maclhwu',
    819: 'PPC_mulchw',
    820: 'PPC_mulchwu',
    821: 'PPC_mulhhw',
    822: 'PPC_mulhhwu',
    823: 'PPC_mullhw',
    824: 'PPC_mullhwu',
    825: 'PPC_nmacchw',
    826: 'PPC_nmacchws',
    827: 'PPC_nmachhw',
    828: 'PPC_nmachhws',
    829: 'PPC_nmaclhw',
    830: 'PPC_nmaclhws',
    831: 'PPC_dlmzb',
    832: 'PPC_lq',
    833: 'PPC_stq',
    834: 'PPC_doze',
    835: 'PPC_lbzcix',
    836: 'PPC_ldcix',
    837: 'PPC_lhzcix',
    838: 'PPC_lwzcix',
    839: 'PPC_nap',
    840: 'PPC_rvwinkle',
    841: 'PPC_slbfee',
    842: 'PPC_sleep',
    843: 'PPC_stbcix',
    844: 'PPC_stdcix',
    845: 'PPC_sthcix',
    846: 'PPC_stwcix',
    847: 'PPC_tlbiel',
    848: 'PPC_lvebx',
    849: 'PPC_lvehx',
    850: 'PPC_lvewx',
    851: 'PPC_lvsl',
    852: 'PPC_lvsr',
    853: 'PPC_lvx',
    854: 'PPC_lvxl',
    855: 'PPC_mfvscr',
    856: 'PPC_mtvscr',
    857: 'PPC_stvebx',
    858: 'PPC_stvehx',
    859: 'PPC_stvewx',
    860: 'PPC_stvx',
    861: 'PPC_stvxl',
    862: 'PPC_vaddcuw',
    863: 'PPC_vaddfp',
    864: 'PPC_vaddsbs',
    865: 'PPC_vaddshs',
    866: 'PPC_vaddsws',
    867: 'PPC_vaddubm',
    868: 'PPC_vaddubs',
    869: 'PPC_vadduhm',
    870: 'PPC_vadduhs',
    871: 'PPC_vadduwm',
    872: 'PPC_vadduws',
    873: 'PPC_vand',
    874: 'PPC_vandc',
    875: 'PPC_vavgsb',
    876: 'PPC_vavgsh',
    877: 'PPC_vavgsw',
    878: 'PPC_vavgub',
    879: 'PPC_vavguh',
    880: 'PPC_vavguw',
    881: 'PPC_vcfsx',
    882: 'PPC_vcfux',
    883: 'PPC_vcmpbfp',
    884: 'PPC_vcmpeqfp',
    885: 'PPC_vcmpequb',
    886: 'PPC_vcmpequh',
    887: 'PPC_vcmpequw',
    888: 'PPC_vcmpgefp',
    889: 'PPC_vcmpgtfp',
    890: 'PPC_vcmpgtsb',
    891: 'PPC_vcmpgtsh',
    892: 'PPC_vcmpgtsw',
    893: 'PPC_vcmpgtub',
    894: 'PPC_vcmpgtuh',
    895: 'PPC_vcmpgtuw',
    896: 'PPC_vctsxs',
    897: 'PPC_vctuxs',
    898: 'PPC_vexptefp',
    899: 'PPC_vlogefp',
    900: 'PPC_vmaddfp',
    901: 'PPC_vmaxfp',
    902: 'PPC_vmaxsb',
    903: 'PPC_vmaxsh',
    904: 'PPC_vmaxsw',
    905: 'PPC_vmaxub',
    906: 'PPC_vmaxuh',
    907: 'PPC_vmaxuw',
    908: 'PPC_vmhaddshs',
    909: 'PPC_vmhraddshs',
    910: 'PPC_vminfp',
    911: 'PPC_vminsb',
    912: 'PPC_vminsh',
    913: 'PPC_vminsw',
    914: 'PPC_vminub',
    915: 'PPC_vminuh',
    916: 'PPC_vminuw',
    917: 'PPC_vmladduhm',
    918: 'PPC_vmrghb',
    919: 'PPC_vmrghh',
    920: 'PPC_vmrghw',
    921: 'PPC_vmrglb',
    922: 'PPC_vmrglh',
    923: 'PPC_vmrglw',
    924: 'PPC_vmsummbm',
    925: 'PPC_vmsumshm',
    926: 'PPC_vmsumshs',
    927: 'PPC_vmsumubm',
    928: 'PPC_vmsumuhm',
    929: 'PPC_vmsumuhs',
    930: 'PPC_vmulesb',
    931: 'PPC_vmulesh',
    932: 'PPC_vmuleub',
    933: 'PPC_vmuleuh',
    934: 'PPC_vmulosb',
    935: 'PPC_vmulosh',
    936: 'PPC_vmuloub',
    937: 'PPC_vmulouh',
    938: 'PPC_vnmsubfp',
    939: 'PPC_vnor',
    940: 'PPC_vor',
    941: 'PPC_vperm',
    942: 'PPC_vpkpx',
    943: 'PPC_vpkshss',
    944: 'PPC_vpkshus',
    945: 'PPC_vpkswss',
    946: 'PPC_vpkswus',
    947: 'PPC_vpkuhum',
    948: 'PPC_vpkuhus',
    949: 'PPC_vpkuwum',
    950: 'PPC_vpkuwus',
    951: 'PPC_vrefp',
    952: 'PPC_vrfim',
    953: 'PPC_vrfin',
    954: 'PPC_vrfip',
    955: 'PPC_vrfiz',
    956: 'PPC_vrlb',
    957: 'PPC_vrlh',
    958: 'PPC_vrlw',
    959: 'PPC_vrsqrtefp',
    960: 'PPC_vsel',
    961: 'PPC_vsl',
    962: 'PPC_vslb',
    963: 'PPC_vsldoi',
    964: 'PPC_vslh',
    965: 'PPC_vslo',
    966: 'PPC_vslw',
    967: 'PPC_vspltb',
    968: 'PPC_vsplth',
    969: 'PPC_vspltisb',
    970: 'PPC_vspltish',
    971: 'PPC_vspltisw',
    972: 'PPC_vspltw',
    973: 'PPC_vsr',
    974: 'PPC_vsrab',
    975: 'PPC_vsrah',
    976: 'PPC_vsraw',
    977: 'PPC_vsrb',
    978: 'PPC_vsrh',
    979: 'PPC_vsro',
    980: 'PPC_vsrw',
    981: 'PPC_vsubcuw',
    982: 'PPC_vsubfp',
    983: 'PPC_vsubsbs',
    984: 'PPC_vsubshs',
    985: 'PPC_vsubsws',
    986: 'PPC_vsububm',
    987: 'PPC_vsububs',
    988: 'PPC_vsubuhm',
    989: 'PPC_vsubuhs',
    990: 'PPC_vsubuwm',
    991: 'PPC_vsubuws',
    992: 'PPC_vsum2sws',
    993: 'PPC_vsum4sbs',
    994: 'PPC_vsum4shs',
    995: 'PPC_vsum4ubs',
    996: 'PPC_vsumsws',
    997: 'PPC_vupkhpx',
    998: 'PPC_vupkhsb',
    999: 'PPC_vupkhsh',
    1000: 'PPC_vupklpx',
    1001: 'PPC_vupklsb',
    1002: 'PPC_vupklsh',
    1003: 'PPC_vxor',
    1004: 'PPC_lxsdx',
    1005: 'PPC_lxvd2x',
    1006: 'PPC_lxvdsx',
    1007: 'PPC_lxvw4x',
    1008: 'PPC_stxsdx',
    1009: 'PPC_stxvd2x',
    1010: 'PPC_stxvw4x',
    1011: 'PPC_xsabsdp',
    1012: 'PPC_xsadddp',
    1013: 'PPC_xscmpodp',
    1014: 'PPC_xscmpudp',
    1015: 'PPC_xscpsgndp',
    1016: 'PPC_xscvdpsp',
    1017: 'PPC_xscvdpsxds',
    1018: 'PPC_xscvdpsxws',
    1019: 'PPC_xscvdpuxds',
    1020: 'PPC_xscvdpuxws',
    1021: 'PPC_xscvspdp',
    1022: 'PPC_xscvsxddp',
    1023: 'PPC_xscvuxddp',
    1024: 'PPC_xsdivdp',
    1025: 'PPC_xsmaddadp',
    1026: 'PPC_xsmaddmdp',
    1027: 'PPC_xsmaxdp',
    1028: 'PPC_xsmindp',
    1029: 'PPC_xsmsubadp',
    1030: 'PPC_xsmsubmdp',
    1031: 'PPC_xsmuldp',
    1032: 'PPC_xsnabsdp',
    1033: 'PPC_xsnegdp',
    1034: 'PPC_xsnmaddadp',
    1035: 'PPC_xsnmaddmdp',
    1036: 'PPC_xsnmsubadp',
    1037: 'PPC_xsnmsubmdp',
    1038: 'PPC_xsrdpi',
    1039: 'PPC_xsrdpic',
    1040: 'PPC_xsrdpim',
    1041: 'PPC_xsrdpip',
    1042: 'PPC_xsrdpiz',
    1043: 'PPC_xsredp',
    1044: 'PPC_xsrsqrtedp',
    1045: 'PPC_xssqrtdp',
    1046: 'PPC_xssubdp',
    1047: 'PPC_xstdivdp',
    1048: 'PPC_xstsqrtdp',
    1049: 'PPC_xvabsdp',
    1050: 'PPC_xvabssp',
    1051: 'PPC_xvadddp',
    1052: 'PPC_xvaddsp',
    1053: 'PPC_xvcmpeqdp',
    1054: 'PPC_xvcmpeqsp',
    1055: 'PPC_xvcmpgedp',
    1056: 'PPC_xvcmpgesp',
    1057: 'PPC_xvcmpgtdp',
    1058: 'PPC_xvcmpgtsp',
    1059: 'PPC_xvcpsgndp',
    1060: 'PPC_xvcpsgnsp',
    1061: 'PPC_xvcvdpsp',
    1062: 'PPC_xvcvdpsxds',
    1063: 'PPC_xvcvdpsxws',
    1064: 'PPC_xvcvdpuxds',
    1065: 'PPC_xvcvdpuxws',
    1066: 'PPC_xvcvspdp',
    1067: 'PPC_xvcvspsxds',
    1068: 'PPC_xvcvspsxws',
    1069: 'PPC_xvcvspuxds',
    1070: 'PPC_xvcvspuxws',
    1071: 'PPC_xvcvsxddp',
    1072: 'PPC_xvcvsxdsp',
    1073: 'PPC_xvcvsxwdp',
    1074: 'PPC_xvcvsxwsp',
    1075: 'PPC_xvcvuxddp',
    1076: 'PPC_xvcvuxdsp',
    1077: 'PPC_xvcvuxwdp',
    1078: 'PPC_xvcvuxwsp',
    1079: 'PPC_xvdivdp',
    1080: 'PPC_xvdivsp',
    1081: 'PPC_xvmaddadp',
    1082: 'PPC_xvmaddasp',
    1083: 'PPC_xvmaddmdp',
    1084: 'PPC_xvmaddmsp',
    1085: 'PPC_xvmaxdp',
    1086: 'PPC_xvmaxsp',
    1087: 'PPC_xvmindp',
    1088: 'PPC_xvminsp',
    1089: 'PPC_xvmsubadp',
    1090: 'PPC_xvmsubasp',
    1091: 'PPC_xvmsubmdp',
    1092: 'PPC_xvmsubmsp',
    1093: 'PPC_xvmuldp',
    1094: 'PPC_xvmulsp',
    1095: 'PPC_xvnabsdp',
    1096: 'PPC_xvnabssp',
    1097: 'PPC_xvnegdp',
    1098: 'PPC_xvnegsp',
    1099: 'PPC_xvnmaddadp',
    1100: 'PPC_xvnmaddasp',
    1101: 'PPC_xvnmaddmdp',
    1102: 'PPC_xvnmaddmsp',
    1103: 'PPC_xvnmsubadp',
    1104: 'PPC_xvnmsubasp',
    1105: 'PPC_xvnmsubmdp',
    1106: 'PPC_xvnmsubmsp',
    1107: 'PPC_xvrdpi',
    1108: 'PPC_xvrdpic',
    1109: 'PPC_xvrdpim',
    1110: 'PPC_xvrdpip',
    1111: 'PPC_xvrdpiz',
    1112: 'PPC_xvredp',
    1113: 'PPC_xvresp',
    1114: 'PPC_xvrspi',
    1115: 'PPC_xvrspic',
    1116: 'PPC_xvrspim',
    1117: 'PPC_xvrspip',
    1118: 'PPC_xvrspiz',
    1119: 'PPC_xvrsqrtedp',
    1120: 'PPC_xvrsqrtesp',
    1121: 'PPC_xvsqrtdp',
    1122: 'PPC_xvsqrtsp',
    1123: 'PPC_xvsubdp',
    1124: 'PPC_xvsubsp',
    1125: 'PPC_xvtdivdp',
    1126: 'PPC_xvtdivsp',
    1127: 'PPC_xvtsqrtdp',
    1128: 'PPC_xvtsqrtsp',
    1129: 'PPC_xxland',
    1130: 'PPC_xxlandc',
    1131: 'PPC_xxlnor',
    1132: 'PPC_xxlor',
    1133: 'PPC_xxlxor',
    1134: 'PPC_xxmrghw',
    1135: 'PPC_xxmrglw',
    1136: 'PPC_xxpermdi',
    1137: 'PPC_xxsel',
    1138: 'PPC_xxsldwi',
    1139: 'PPC_xxspltw',
    1140: 'PPC_wait',
    1141: 'PPC_dss',
    1142: 'PPC_dssall',
    1143: 'PPC_dst',
    1144: 'PPC_dstt',
    1145: 'PPC_dstst',
    1146: 'PPC_dststt',
    1147: 'PPC_lvlx',
    1148: 'PPC_lvlxl',
    1149: 'PPC_lvrx',
    1150: 'PPC_lvrxl',
    1151: 'PPC_stvlx',
    1152: 'PPC_stvlxl',
    1153: 'PPC_stvrx',
    1154: 'PPC_stvrxl',
    1155: 'PPC_add16i',
    1156: 'PPC_add2i',
    1157: 'PPC_add2is',
    1158: 'PPC_and2i',
    1159: 'PPC_and2is',
    1160: 'PPC_cmp16i',
    1161: 'PPC_cmph',
    1162: 'PPC_cmph16i',
    1163: 'PPC_cmphl',
    1164: 'PPC_cmphl16i',
    1165: 'PPC_cmpl16i',
    1166: 'PPC_mull2i',
    1167: 'PPC_or2i',
    1168: 'PPC_or2is',
    1169: 'PPC_rlw',
    1170: 'PPC_rlwi',
    1171: 'PPC_bclri',
    1172: 'PPC_bgeni',
    1173: 'PPC_bmaski',
    1174: 'PPC_bseti',
    1175: 'PPC_btsti',
    1176: 'PPC_extzb',
    1177: 'PPC_extzh',
    1178: 'PPC_illegal',
    1179: 'PPC_mfar',
    1180: 'PPC_mtar',
    1181: 'PPC_sub',
    1182: 'PPC_sub16i',
    1183: 'PPC_sub2i',
    1184: 'PPC_sub2is',
    1185: 'PPC_extldi',
    1186: 'PPC_extrdi',
    1187: 'PPC_insrdi',
    1188: 'PPC_rotldi',
    1189: 'PPC_rotrdi',
    1190: 'PPC_rotld',
    1191: 'PPC_sldi',
    1192: 'PPC_srdi',
    1193: 'PPC_clrldi',
    1194: 'PPC_clrrdi',
    1195: 'PPC_clrlsldi',
    1196: 'PPC_xnop',
    1197: 'PPC_hnop',
    1198: 'PPC_dcbfl',
    1199: 'PPC_dcbflp',
    1200: 'PPC_dcbtt',
    1201: 'PPC_dcbtstt',
    1202: 'PPC_lwsync',
    1203: 'PPC_ptesync',
    1204: 'PPC_waitrsv',
    1205: 'PPC_waitimpl',
    1206: 'PPC_evmr',
    1207: 'PPC_evnot',
    1208: 'PPC_mtcr',
    1209: 'PPC_xvmovdp',
    1210: 'PPC_xvmovsp',
    1211: 'PPC_xxspltd',
    1212: 'PPC_xxmrghd',
    1213: 'PPC_xxmrgld',
    1214: 'PPC_xxswapd',
    1215: 'PPC_dcbz128',
    1216: 'PPC_mtmsree',
    1217: 'PPC_vcfpsxws',
    1218: 'PPC_vcfpuxws',
    1219: 'PPC_vcsxwfp',
    1220: 'PPC_vcuxwfp',
    1221: 'PPC_vmaddcfp',
    1222: 'PPC_vmsum3fp',
    1223: 'PPC_vmsum4fp',
    1224: 'PPC_vmulfp',
    1225: 'PPC_vpermwi',
    1226: 'PPC_vpkd3d',
    1227: 'PPC_vrlimi',
    1228: 'PPC_vupkd3d',
    1229: 'PPC_ps_cmpu0',
    1230: 'PPC_psq_lx',
    1231: 'PPC_psq_stx',
    1232: 'PPC_ps_sum0',
    1233: 'PPC_ps_sum1',
    1234: 'PPC_ps_muls0',
    1235: 'PPC_ps_muls1',
    1236: 'PPC_ps_madds0',
    1237: 'PPC_ps_madds1',
    1238: 'PPC_ps_div',
    1239: 'PPC_ps_sub',
    1240: 'PPC_ps_add',
    1241: 'PPC_ps_sel',
    1242: 'PPC_ps_res',
    1243: 'PPC_ps_mul',
    1244: 'PPC_ps_rsqrte',
    1245: 'PPC_ps_msub',
    1246: 'PPC_ps_madd',
    1247: 'PPC_ps_nmsub',
    1248: 'PPC_ps_nmadd',
    1249: 'PPC_ps_cmpo0',
    1250: 'PPC_psq_lux',
    1251: 'PPC_psq_stux',
    1252: 'PPC_ps_neg',
    1253: 'PPC_ps_cmpu1',
    1254: 'PPC_ps_mr',
    1255: 'PPC_ps_cmpo1',
    1256: 'PPC_ps_nabs',
    1257: 'PPC_ps_abs',
    1258: 'PPC_ps_merge00',
    1259: 'PPC_ps_merge01',
    1260: 'PPC_ps_merge10',
    1261: 'PPC_ps_merge11',
    1262: 'PPC_dcbz_l',
    1263: 'PPC_psq_l',
    1264: 'PPC_psq_lu',
    1265: 'PPC_psq_st',
    1266: 'PPC_psq_stu',
    1267: 'PPC_evfsmadd',
    1268: 'PPC_evfsmsub',
    1269: 'PPC_evfssqrt',
    1270: 'PPC_evfsnmadd',
    1271: 'PPC_evfsnmsub',
    1272: 'PPC_evfsmax',
    1273: 'PPC_evfsmin',
    1274: 'PPC_evfsaddsub',
    1275: 'PPC_evfssubadd',
    1276: 'PPC_evfssum',
    1277: 'PPC_evfsdiff',
    1278: 'PPC_evfssumdiff',
    1279: 'PPC_evfsdiffsum',
    1280: 'PPC_evfsaddx',
    1281: 'PPC_evfssubx',
    1282: 'PPC_evfsaddsubx',
    1283: 'PPC_evfssubaddx',
    1284: 'PPC_evfsmulx',
    1285: 'PPC_evfsmule',
    1286: 'PPC_evfsmulo',
    1287: 'PPC_evfscfh',
    1288: 'PPC_evfscth',
    1289: 'PPC_efsmax',
    1290: 'PPC_efsmin',
    1291: 'PPC_efsmadd',
    1292: 'PPC_efsmsub',
    1293: 'PPC_efssqrt',
    1294: 'PPC_efsnmadd',
    1295: 'PPC_efsnmsub',
    1296: 'PPC_efscfh',
    1297: 'PPC_efscth',
    1298: 'PPC_lmvgprw',
    1299: 'PPC_stmvgprw',
    1300: 'PPC_lmvsprw',
    1301: 'PPC_stmvsprw',
    1302: 'PPC_lmvsrrw',
    1303: 'PPC_stmvsrrw',
    1304: 'PPC_lmvcsrrw',
    1305: 'PPC_stmvcsrrw',
    1306: 'PPC_lmvdsrrw',
    1307: 'PPC_stmvdsrrw',
    1308: 'PPC_lmvmcsrrw',
    1309: 'PPC_stmvmcsrrw',
    1310: 'PPC_evdotpwcssi',
    1311: 'PPC_evdotpwcsmi',
    1312: 'PPC_evdotpwcssfr',
    1313: 'PPC_evdotpwcssf',
    1314: 'PPC_evdotpwgasmf',
    1315: 'PPC_evdotpwxgasmf',
    1316: 'PPC_evdotpwgasmfr',
    1317: 'PPC_evdotpwxgasmfr',
    1318: 'PPC_evdotpwgssmf',
    1319: 'PPC_evdotpwxgssmf',
    1320: 'PPC_evdotpwgssmfr',
    1321: 'PPC_evdotpwxgssmfr',
    1322: 'PPC_evdotpwcssiaaw3',
    1323: 'PPC_evdotpwcsmiaaw3',
    1324: 'PPC_evdotpwcssfraaw3',
    1325: 'PPC_evdotpwcssfaaw3',
    1326: 'PPC_evdotpwgasmfaa3',
    1327: 'PPC_evdotpwxgasmfaa3',
    1328: 'PPC_evdotpwgasmfraa3',
    1329: 'PPC_evdotpwxgasmfraa3',
    1330: 'PPC_evdotpwgssmfaa3',
    1331: 'PPC_evdotpwxgssmfaa3',
    1332: 'PPC_evdotpwgssmfraa3',
    1333: 'PPC_evdotpwxgssmfraa3',
    1334: 'PPC_evdotpwcssia',
    1335: 'PPC_evdotpwcsmia',
    1336: 'PPC_evdotpwcssfra',
    1337: 'PPC_evdotpwcssfa',
    1338: 'PPC_evdotpwgasmfa',
    1339: 'PPC_evdotpwxgasmfa',
    1340: 'PPC_evdotpwgasmfra',
    1341: 'PPC_evdotpwxgasmfra',
    1342: 'PPC_evdotpwgssmfa',
    1343: 'PPC_evdotpwxgssmfa',
    1344: 'PPC_evdotpwgssmfra',
    1345: 'PPC_evdotpwxgssmfra',
    1346: 'PPC_evdotpwcssiaaw',
    1347: 'PPC_evdotpwcsmiaaw',
    1348: 'PPC_evdotpwcssfraaw',
    1349: 'PPC_evdotpwcssfaaw',
    1350: 'PPC_evdotpwgasmfaa',
    1351: 'PPC_evdotpwxgasmfaa',
    1352: 'PPC_evdotpwgasmfraa',
    1353: 'PPC_evdotpwxgasmfraa',
    1354: 'PPC_evdotpwgssmfaa',
    1355: 'PPC_evdotpwxgssmfaa',
    1356: 'PPC_evdotpwgssmfraa',
    1357: 'PPC_evdotpwxgssmfraa',
    1358: 'PPC_evdotphihcssi',
    1359: 'PPC_evdotplohcssi',
    1360: 'PPC_evdotphihcssf',
    1361: 'PPC_evdotplohcssf',
    1362: 'PPC_evdotphihcsmi',
    1363: 'PPC_evdotplohcsmi',
    1364: 'PPC_evdotphihcssfr',
    1365: 'PPC_evdotplohcssfr',
    1366: 'PPC_evdotphihcssiaaw3',
    1367: 'PPC_evdotplohcssiaaw3',
    1368: 'PPC_evdotphihcssfaaw3',
    1369: 'PPC_evdotplohcssfaaw3',
    1370: 'PPC_evdotphihcsmiaaw3',
    1371: 'PPC_evdotplohcsmiaaw3',
    1372: 'PPC_evdotphihcssfraaw3',
    1373: 'PPC_evdotplohcssfraaw3',
    1374: 'PPC_evdotphihcssia',
    1375: 'PPC_evdotplohcssia',
    1376: 'PPC_evdotphihcssfa',
    1377: 'PPC_evdotplohcssfa',
    1378: 'PPC_evdotphihcsmia',
    1379: 'PPC_evdotplohcsmia',
    1380: 'PPC_evdotphihcssfra',
    1381: 'PPC_evdotplohcssfra',
    1382: 'PPC_evdotphihcssiaaw',
    1383: 'PPC_evdotplohcssiaaw',
    1384: 'PPC_evdotphihcssfaaw',
    1385: 'PPC_evdotplohcssfaaw',
    1386: 'PPC_evdotphihcsmiaaw',
    1387: 'PPC_evdotplohcsmiaaw',
    1388: 'PPC_evdotphihcssfraaw',
    1389: 'PPC_evdotplohcssfraaw',
    1390: 'PPC_evdotphausi',
    1391: 'PPC_evdotphassi',
    1392: 'PPC_evdotphasusi',
    1393: 'PPC_evdotphassf',
    1394: 'PPC_evdotphsssf',
    1395: 'PPC_evdotphaumi',
    1396: 'PPC_evdotphasmi',
    1397: 'PPC_evdotphasumi',
    1398: 'PPC_evdotphassfr',
    1399: 'PPC_evdotphssmi',
    1400: 'PPC_evdotphsssfr',
    1401: 'PPC_evdotphausiaaw3',
    1402: 'PPC_evdotphassiaaw3',
    1403: 'PPC_evdotphasusiaaw3',
    1404: 'PPC_evdotphassfaaw3',
    1405: 'PPC_evdotphsssiaaw3',
    1406: 'PPC_evdotphsssfaaw3',
    1407: 'PPC_evdotphaumiaaw3',
    1408: 'PPC_evdotphasmiaaw3',
    1409: 'PPC_evdotphasumiaaw3',
    1410: 'PPC_evdotphassfraaw3',
    1411: 'PPC_evdotphssmiaaw3',
    1412: 'PPC_evdotphsssfraaw3',
    1413: 'PPC_evdotphausia',
    1414: 'PPC_evdotphassia',
    1415: 'PPC_evdotphasusia',
    1416: 'PPC_evdotphassfa',
    1417: 'PPC_evdotphsssfa',
    1418: 'PPC_evdotphaumia',
    1419: 'PPC_evdotphasmia',
    1420: 'PPC_evdotphasumia',
    1421: 'PPC_evdotphassfra',
    1422: 'PPC_evdotphssmia',
    1423: 'PPC_evdotphsssfra',
    1424: 'PPC_evdotphausiaaw',
    1425: 'PPC_evdotphassiaaw',
    1426: 'PPC_evdotphasusiaaw',
    1427: 'PPC_evdotphassfaaw',
    1428: 'PPC_evdotphsssiaaw',
    1429: 'PPC_evdotphsssfaaw',
    1430: 'PPC_evdotphaumiaaw',
    1431: 'PPC_evdotphasmiaaw',
    1432: 'PPC_evdotphasumiaaw',
    1433: 'PPC_evdotphassfraaw',
    1434: 'PPC_evdotphssmiaaw',
    1435: 'PPC_evdotphsssfraaw',
    1436: 'PPC_evdotp4hgaumi',
    1437: 'PPC_evdotp4hgasmi',
    1438: 'PPC_evdotp4hgasumi',
    1439: 'PPC_evdotp4hgasmf',
    1440: 'PPC_evdotp4hgssmi',
    1441: 'PPC_evdotp4hgssmf',
    1442: 'PPC_evdotp4hxgasmi',
    1443: 'PPC_evdotp4hxgasmf',
    1444: 'PPC_evdotpbaumi',
    1445: 'PPC_evdotpbasmi',
    1446: 'PPC_evdotpbasumi',
    1447: 'PPC_evdotp4hxgssmi',
    1448: 'PPC_evdotp4hxgssmf',
    1449: 'PPC_evdotp4hgaumiaa3',
    1450: 'PPC_evdotp4hgasmiaa3',
    1451: 'PPC_evdotp4hgasumiaa3',
    1452: 'PPC_evdotp4hgasmfaa3',
    1453: 'PPC_evdotp4hgssmiaa3',
    1454: 'PPC_evdotp4hgssmfaa3',
    1455: 'PPC_evdotp4hxgasmiaa3',
    1456: 'PPC_evdotp4hxgasmfaa3',
    1457: 'PPC_evdotpbaumiaaw3',
    1458: 'PPC_evdotpbasmiaaw3',
    1459: 'PPC_evdotpbasumiaaw3',
    1460: 'PPC_evdotp4hxgssmiaa3',
    1461: 'PPC_evdotp4hxgssmfaa3',
    1462: 'PPC_evdotp4hgaumia',
    1463: 'PPC_evdotp4hgasmia',
    1464: 'PPC_evdotp4hgasumia',
    1465: 'PPC_evdotp4hgasmfa',
    1466: 'PPC_evdotp4hgssmia',
    1467: 'PPC_evdotp4hgssmfa',
    1468: 'PPC_evdotp4hxgasmia',
    1469: 'PPC_evdotp4hxgasmfa',
    1470: 'PPC_evdotpbaumia',
    1471: 'PPC_evdotpbasmia',
    1472: 'PPC_evdotpbasumia',
    1473: 'PPC_evdotp4hxgssmia',
    1474: 'PPC_evdotp4hxgssmfa',
    1475: 'PPC_evdotp4hgaumiaa',
    1476: 'PPC_evdotp4hgasmiaa',
    1477: 'PPC_evdotp4hgasumiaa',
    1478: 'PPC_evdotp4hgasmfaa',
    1479: 'PPC_evdotp4hgssmiaa',
    1480: 'PPC_evdotp4hgssmfaa',
    1481: 'PPC_evdotp4hxgasmiaa',
    1482: 'PPC_evdotp4hxgasmfaa',
    1483: 'PPC_evdotpbaumiaaw',
    1484: 'PPC_evdotpbasmiaaw',
    1485: 'PPC_evdotpbasumiaaw',
    1486: 'PPC_evdotp4hxgssmiaa',
    1487: 'PPC_evdotp4hxgssmfaa',
    1488: 'PPC_evdotpwausi',
    1489: 'PPC_evdotpwassi',
    1490: 'PPC_evdotpwasusi',
    1491: 'PPC_evdotpwaumi',
    1492: 'PPC_evdotpwasmi',
    1493: 'PPC_evdotpwasumi',
    1494: 'PPC_evdotpwssmi',
    1495: 'PPC_evdotpwausiaa3',
    1496: 'PPC_evdotpwassiaa3',
    1497: 'PPC_evdotpwasusiaa3',
    1498: 'PPC_evdotpwsssiaa3',
    1499: 'PPC_evdotpwaumiaa3',
    1500: 'PPC_evdotpwasmiaa3',
    1501: 'PPC_evdotpwasumiaa3',
    1502: 'PPC_evdotpwssmiaa3',
    1503: 'PPC_evdotpwausia',
    1504: 'PPC_evdotpwassia',
    1505: 'PPC_evdotpwasusia',
    1506: 'PPC_evdotpwaumia',
    1507: 'PPC_evdotpwasmia',
    1508: 'PPC_evdotpwasumia',
    1509: 'PPC_evdotpwssmia',
    1510: 'PPC_evdotpwausiaa',
    1511: 'PPC_evdotpwassiaa',
    1512: 'PPC_evdotpwasusiaa',
    1513: 'PPC_evdotpwsssiaa',
    1514: 'PPC_evdotpwaumiaa',
    1515: 'PPC_evdotpwasmiaa',
    1516: 'PPC_evdotpwasumiaa',
    1517: 'PPC_evdotpwssmiaa',
    1518: 'PPC_evaddih',
    1519: 'PPC_evaddib',
    1520: 'PPC_evsubifh',
    1521: 'PPC_evsubifb',
    1522: 'PPC_evabsb',
    1523: 'PPC_evabsh',
    1524: 'PPC_evabsd',
    1525: 'PPC_evabss',
    1526: 'PPC_evabsbs',
    1527: 'PPC_evabshs',
    1528: 'PPC_evabsds',
    1529: 'PPC_evnegwo',
    1530: 'PPC_evnegb',
    1531: 'PPC_evnegbo',
    1532: 'PPC_evnegh',
    1533: 'PPC_evnegho',
    1534: 'PPC_evnegd',
    1535: 'PPC_evnegs',
    1536: 'PPC_evnegwos',
    1537: 'PPC_evnegbs',
    1538: 'PPC_evnegbos',
    1539: 'PPC_evneghs',
    1540: 'PPC_evneghos',
    1541: 'PPC_evnegds',
    1542: 'PPC_evextzb',
    1543: 'PPC_evextsbh',
    1544: 'PPC_evextsw',
    1545: 'PPC_evrndhb',
    1546: 'PPC_evrnddw',
    1547: 'PPC_evrndwhus',
    1548: 'PPC_evrndwhss',
    1549: 'PPC_evrndhbus',
    1550: 'PPC_evrndhbss',
    1551: 'PPC_evrnddwus',
    1552: 'PPC_evrnddwss',
    1553: 'PPC_evrndwnh',
    1554: 'PPC_evrndhnb',
    1555: 'PPC_evrnddnw',
    1556: 'PPC_evrndwnhus',
    1557: 'PPC_evrndwnhss',
    1558: 'PPC_evrndhnbus',
    1559: 'PPC_evrndhnbss',
    1560: 'PPC_evrnddnwus',
    1561: 'PPC_evrnddnwss',
    1562: 'PPC_evcntlzh',
    1563: 'PPC_evcntlsh',
    1564: 'PPC_evpopcntb',
    1565: 'PPC_circinc',
    1566: 'PPC_evunpkhibui',
    1567: 'PPC_evunpkhibsi',
    1568: 'PPC_evunpkhihui',
    1569: 'PPC_evunpkhihsi',
    1570: 'PPC_evunpklobui',
    1571: 'PPC_evunpklobsi',
    1572: 'PPC_evunpklohui',
    1573: 'PPC_evunpklohsi',
    1574: 'PPC_evunpklohf',
    1575: 'PPC_evunpkhihf',
    1576: 'PPC_evunpklowgsf',
    1577: 'PPC_evunpkhiwgsf',
    1578: 'PPC_evsatsduw',
    1579: 'PPC_evsatsdsw',
    1580: 'PPC_evsatshub',
    1581: 'PPC_evsatshsb',
    1582: 'PPC_evsatuwuh',
    1583: 'PPC_evsatswsh',
    1584: 'PPC_evsatswuh',
    1585: 'PPC_evsatuhub',
    1586: 'PPC_evsatuduw',
    1587: 'PPC_evsatuwsw',
    1588: 'PPC_evsatshuh',
    1589: 'PPC_evsatuhsh',
    1590: 'PPC_evsatswuw',
    1591: 'PPC_evsatswgsdf',
    1592: 'PPC_evsatsbub',
    1593: 'PPC_evsatubsb',
    1594: 'PPC_evmaxhpuw',
    1595: 'PPC_evmaxhpsw',
    1596: 'PPC_evmaxbpuh',
    1597: 'PPC_evmaxbpsh',
    1598: 'PPC_evmaxwpud',
    1599: 'PPC_evmaxwpsd',
    1600: 'PPC_evminhpuw',
    1601: 'PPC_evminhpsw',
    1602: 'PPC_evminbpuh',
    1603: 'PPC_evminbpsh',
    1604: 'PPC_evminwpud',
    1605: 'PPC_evminwpsd',
    1606: 'PPC_evmaxmagws',
    1607: 'PPC_evsl',
    1608: 'PPC_evsli',
    1609: 'PPC_evsplatie',
    1610: 'PPC_evsplatib',
    1611: 'PPC_evsplatibe',
    1612: 'PPC_evsplatih',
    1613: 'PPC_evsplatihe',
    1614: 'PPC_evsplatid',
    1615: 'PPC_evsplatia',
    1616: 'PPC_evsplatiea',
    1617: 'PPC_evsplatiba',
    1618: 'PPC_evsplatibea',
    1619: 'PPC_evsplatiha',
    1620: 'PPC_evsplatihea',
    1621: 'PPC_evsplatida',
    1622: 'PPC_evsplatfio',
    1623: 'PPC_evsplatfib',
    1624: 'PPC_evsplatfibo',
    1625: 'PPC_evsplatfih',
    1626: 'PPC_evsplatfiho',
    1627: 'PPC_evsplatfid',
    1628: 'PPC_evsplatfia',
    1629: 'PPC_evsplatfioa',
    1630: 'PPC_evsplatfiba',
    1631: 'PPC_evsplatfiboa',
    1632: 'PPC_evsplatfiha',
    1633: 'PPC_evsplatfihoa',
    1634: 'PPC_evsplatfida',
    1635: 'PPC_evcmpgtdu',
    1636: 'PPC_evcmpgtds',
    1637: 'PPC_evcmpltdu',
    1638: 'PPC_evcmpltds',
    1639: 'PPC_evcmpeqd',
    1640: 'PPC_evswapbhilo',
    1641: 'PPC_evswapblohi',
    1642: 'PPC_evswaphhilo',
    1643: 'PPC_evswaphlohi',
    1644: 'PPC_evswaphe',
    1645: 'PPC_evswaphhi',
    1646: 'PPC_evswaphlo',
    1647: 'PPC_evswapho',
    1648: 'PPC_evinsb',
    1649: 'PPC_evxtrb',
    1650: 'PPC_evsplath',
    1651: 'PPC_evsplatb',
    1652: 'PPC_evinsh',
    1653: 'PPC_evclrbe',
    1654: 'PPC_evclrbo',
    1655: 'PPC_evxtrh',
    1656: 'PPC_evclrh',
    1657: 'PPC_evselbitm0',
    1658: 'PPC_evselbitm1',
    1659: 'PPC_evselbit',
    1660: 'PPC_evperm',
    1661: 'PPC_evperm2',
    1662: 'PPC_evperm3',
    1663: 'PPC_evxtrd',
    1664: 'PPC_evsrbu',
    1665: 'PPC_evsrbs',
    1666: 'PPC_evsrbiu',
    1667: 'PPC_evsrbis',
    1668: 'PPC_evslb',
    1669: 'PPC_evrlb',
    1670: 'PPC_evslbi',
    1671: 'PPC_evrlbi',
    1672: 'PPC_evsrhu',
    1673: 'PPC_evsrhs',
    1674: 'PPC_evsrhiu',
    1675: 'PPC_evsrhis',
    1676: 'PPC_evslh',
    1677: 'PPC_evrlh',
    1678: 'PPC_evslhi',
    1679: 'PPC_evrlhi',
    1680: 'PPC_evsru',
    1681: 'PPC_evsrs',
    1682: 'PPC_evsriu',
    1683: 'PPC_evsris',
    1684: 'PPC_evlvsl',
    1685: 'PPC_evlvsr',
    1686: 'PPC_evsroiu',
    1687: 'PPC_evsloi',
    1688: 'PPC_evsrois',
    1689: 'PPC_evldbx',
    1690: 'PPC_evldb',
    1691: 'PPC_evlhhsplathx',
    1692: 'PPC_evlhhsplath',
    1693: 'PPC_evlwbsplatwx',
    1694: 'PPC_evlwbsplatw',
    1695: 'PPC_evlwhsplatwx',
    1696: 'PPC_evlwhsplatw',
    1697: 'PPC_evlbbsplatbx',
    1698: 'PPC_evlbbsplatb',
    1699: 'PPC_evstdbx',
    1700: 'PPC_evstdb',
    1701: 'PPC_evlwbex',
    1702: 'PPC_evlwbe',
    1703: 'PPC_evlwboux',
    1704: 'PPC_evlwbou',
    1705: 'PPC_evlwbosx',
    1706: 'PPC_evlwbos',
    1707: 'PPC_evstwbex',
    1708: 'PPC_evstwbe',
    1709: 'PPC_evstwbox',
    1710: 'PPC_evstwbo',
    1711: 'PPC_evstwbx',
    1712: 'PPC_evstwb',
    1713: 'PPC_evsthbx',
    1714: 'PPC_evsthb',
    1715: 'PPC_evlddmx',
    1716: 'PPC_evlddu',
    1717: 'PPC_evldwmx',
    1718: 'PPC_evldwu',
    1719: 'PPC_evldhmx',
    1720: 'PPC_evldhu',
    1721: 'PPC_evldbmx',
    1722: 'PPC_evldbu',
    1723: 'PPC_evlhhesplatmx',
    1724: 'PPC_evlhhesplatu',
    1725: 'PPC_evlhhsplathmx',
    1726: 'PPC_evlhhsplathu',
    1727: 'PPC_evlhhousplatmx',
    1728: 'PPC_evlhhousplatu',
    1729: 'PPC_evlhhossplatmx',
    1730: 'PPC_evlhhossplatu',
    1731: 'PPC_evlwhemx',
    1732: 'PPC_evlwheu',
    1733: 'PPC_evlwbsplatwmx',
    1734: 'PPC_evlwbsplatwu',
    1735: 'PPC_evlwhoumx',
    1736: 'PPC_evlwhouu',
    1737: 'PPC_evlwhosmx',
    1738: 'PPC_evlwhosu',
    1739: 'PPC_evlwwsplatmx',
    1740: 'PPC_evlwwsplatu',
    1741: 'PPC_evlwhsplatwmx',
    1742: 'PPC_evlwhsplatwu',
    1743: 'PPC_evlwhsplatmx',
    1744: 'PPC_evlwhsplatu',
    1745: 'PPC_evlbbsplatbmx',
    1746: 'PPC_evlbbsplatbu',
    1747: 'PPC_evstddmx',
    1748: 'PPC_evstddu',
    1749: 'PPC_evstdwmx',
    1750: 'PPC_evstdwu',
    1751: 'PPC_evstdhmx',
    1752: 'PPC_evstdhu',
    1753: 'PPC_evstdbmx',
    1754: 'PPC_evstdbu',
    1755: 'PPC_evlwbemx',
    1756: 'PPC_evlwbeu',
    1757: 'PPC_evlwboumx',
    1758: 'PPC_evlwbouu',
    1759: 'PPC_evlwbosmx',
    1760: 'PPC_evlwbosu',
    1761: 'PPC_evstwhemx',
    1762: 'PPC_evstwheu',
    1763: 'PPC_evstwbemx',
    1764: 'PPC_evstwbeu',
    1765: 'PPC_evstwhomx',
    1766: 'PPC_evstwhou',
    1767: 'PPC_evstwbomx',
    1768: 'PPC_evstwbou',
    1769: 'PPC_evstwwemx',
    1770: 'PPC_evstwweu',
    1771: 'PPC_evstwbmx',
    1772: 'PPC_evstwbu',
    1773: 'PPC_evstwwomx',
    1774: 'PPC_evstwwou',
    1775: 'PPC_evsthbmx',
    1776: 'PPC_evsthbu',
    1777: 'PPC_evmhusi',
    1778: 'PPC_evmhssi',
    1779: 'PPC_evmhsusi',
    1780: 'PPC_evmhssf',
    1781: 'PPC_evmhumi',
    1782: 'PPC_evmhssfr',
    1783: 'PPC_evmhesumi',
    1784: 'PPC_evmhosumi',
    1785: 'PPC_evmbeumi',
    1786: 'PPC_evmbesmi',
    1787: 'PPC_evmbesumi',
    1788: 'PPC_evmboumi',
    1789: 'PPC_evmbosmi',
    1790: 'PPC_evmbosumi',
    1791: 'PPC_evmhesumia',
    1792: 'PPC_evmhosumia',
    1793: 'PPC_evmbeumia',
    1794: 'PPC_evmbesmia',
    1795: 'PPC_evmbesumia',
    1796: 'PPC_evmboumia',
    1797: 'PPC_evmbosmia',
    1798: 'PPC_evmbosumia',
    1799: 'PPC_evmwusiw',
    1800: 'PPC_evmwssiw',
    1801: 'PPC_evmwhssfr',
    1802: 'PPC_evmwehgsmfr',
    1803: 'PPC_evmwehgsmf',
    1804: 'PPC_evmwohgsmfr',
    1805: 'PPC_evmwohgsmf',
    1806: 'PPC_evmwhssfra',
    1807: 'PPC_evmwehgsmfra',
    1808: 'PPC_evmwehgsmfa',
    1809: 'PPC_evmwohgsmfra',
    1810: 'PPC_evmwohgsmfa',
    1811: 'PPC_evaddusiaa',
    1812: 'PPC_evaddssiaa',
    1813: 'PPC_evsubfusiaa',
    1814: 'PPC_evsubfssiaa',
    1815: 'PPC_evaddsmiaa',
    1816: 'PPC_evsubfsmiaa',
    1817: 'PPC_evaddh',
    1818: 'PPC_evaddhss',
    1819: 'PPC_evsubfh',
    1820: 'PPC_evsubfhss',
    1821: 'PPC_evaddhx',
    1822: 'PPC_evaddhxss',
    1823: 'PPC_evsubfhx',
    1824: 'PPC_evsubfhxss',
    1825: 'PPC_evaddd',
    1826: 'PPC_evadddss',
    1827: 'PPC_evsubfd',
    1828: 'PPC_evsubfdss',
    1829: 'PPC_evaddb',
    1830: 'PPC_evaddbss',
    1831: 'PPC_evsubfb',
    1832: 'PPC_evsubfbss',
    1833: 'PPC_evaddsubfh',
    1834: 'PPC_evaddsubfhss',
    1835: 'PPC_evsubfaddh',
    1836: 'PPC_evsubfaddhss',
    1837: 'PPC_evaddsubfhx',
    1838: 'PPC_evaddsubfhxss',
    1839: 'PPC_evsubfaddhx',
    1840: 'PPC_evsubfaddhxss',
    1841: 'PPC_evadddus',
    1842: 'PPC_evaddbus',
    1843: 'PPC_evsubfdus',
    1844: 'PPC_evsubfbus',
    1845: 'PPC_evaddwus',
    1846: 'PPC_evaddwxus',
    1847: 'PPC_evsubfwus',
    1848: 'PPC_evsubfwxus',
    1849: 'PPC_evadd2subf2h',
    1850: 'PPC_evadd2subf2hss',
    1851: 'PPC_evsubf2add2h',
    1852: 'PPC_evsubf2add2hss',
    1853: 'PPC_evaddhus',
    1854: 'PPC_evaddhxus',
    1855: 'PPC_evsubfhus',
    1856: 'PPC_evsubfhxus',
    1857: 'PPC_evaddwss',
    1858: 'PPC_evsubfwss',
    1859: 'PPC_evaddwx',
    1860: 'PPC_evaddwxss',
    1861: 'PPC_evsubfwx',
    1862: 'PPC_evsubfwxss',
    1863: 'PPC_evaddsubfw',
    1864: 'PPC_evaddsubfwss',
    1865: 'PPC_evsubfaddw',
    1866: 'PPC_evsubfaddwss',
    1867: 'PPC_evaddsubfwx',
    1868: 'PPC_evaddsubfwxss',
    1869: 'PPC_evsubfaddwx',
    1870: 'PPC_evsubfaddwxss',
    1871: 'PPC_evmar',
    1872: 'PPC_evsumwu',
    1873: 'PPC_evsumws',
    1874: 'PPC_evsum4bu',
    1875: 'PPC_evsum4bs',
    1876: 'PPC_evsum2hu',
    1877: 'PPC_evsum2hs',
    1878: 'PPC_evdiff2his',
    1879: 'PPC_evsum2his',
    1880: 'PPC_evsumwua',
    1881: 'PPC_evsumwsa',
    1882: 'PPC_evsum4bua',
    1883: 'PPC_evsum4bsa',
    1884: 'PPC_evsum2hua',
    1885: 'PPC_evsum2hsa',
    1886: 'PPC_evdiff2hisa',
    1887: 'PPC_evsum2hisa',
    1888: 'PPC_evsumwuaa',
    1889: 'PPC_evsumwsaa',
    1890: 'PPC_evsum4buaaw',
    1891: 'PPC_evsum4bsaaw',
    1892: 'PPC_evsum2huaaw',
    1893: 'PPC_evsum2hsaaw',
    1894: 'PPC_evdiff2hisaaw',
    1895: 'PPC_evsum2hisaaw',
    1896: 'PPC_evdivwsf',
    1897: 'PPC_evdivwuf',
    1898: 'PPC_evdivs',
    1899: 'PPC_evdivu',
    1900: 'PPC_evaddwegsi',
    1901: 'PPC_evaddwegsf',
    1902: 'PPC_evsubfwegsi',
    1903: 'PPC_evsubfwegsf',
    1904: 'PPC_evaddwogsi',
    1905: 'PPC_evaddwogsf',
    1906: 'PPC_evsubfwogsi',
    1907: 'PPC_evsubfwogsf',
    1908: 'PPC_evaddhhiuw',
    1909: 'PPC_evaddhhisw',
    1910: 'PPC_evsubfhhiuw',
    1911: 'PPC_evsubfhhisw',
    1912: 'PPC_evaddhlouw',
    1913: 'PPC_evaddhlosw',
    1914: 'PPC_evsubfhlouw',
    1915: 'PPC_evsubfhlosw',
    1916: 'PPC_evmhesusiaaw',
    1917: 'PPC_evmhosusiaaw',
    1918: 'PPC_evmhesumiaaw',
    1919: 'PPC_evmhosumiaaw',
    1920: 'PPC_evmbeusiaah',
    1921: 'PPC_evmbessiaah',
    1922: 'PPC_evmbesusiaah',
    1923: 'PPC_evmbousiaah',
    1924: 'PPC_evmbossiaah',
    1925: 'PPC_evmbosusiaah',
    1926: 'PPC_evmbeumiaah',
    1927: 'PPC_evmbesmiaah',
    1928: 'PPC_evmbesumiaah',
    1929: 'PPC_evmboumiaah',
    1930: 'PPC_evmbosmiaah',
    1931: 'PPC_evmbosumiaah',
    1932: 'PPC_evmwlusiaaw3',
    1933: 'PPC_evmwlssiaaw3',
    1934: 'PPC_evmwhssfraaw3',
    1935: 'PPC_evmwhssfaaw3',
    1936: 'PPC_evmwhssfraaw',
    1937: 'PPC_evmwhssfaaw',
    1938: 'PPC_evmwlumiaaw3',
    1939: 'PPC_evmwlsmiaaw3',
    1940: 'PPC_evmwusiaa',
    1941: 'PPC_evmwssiaa',
    1942: 'PPC_evmwehgsmfraa',
    1943: 'PPC_evmwehgsmfaa',
    1944: 'PPC_evmwohgsmfraa',
    1945: 'PPC_evmwohgsmfaa',
    1946: 'PPC_evmhesusianw',
    1947: 'PPC_evmhosusianw',
    1948: 'PPC_evmhesumianw',
    1949: 'PPC_evmhosumianw',
    1950: 'PPC_evmbeusianh',
    1951: 'PPC_evmbessianh',
    1952: 'PPC_evmbesusianh',
    1953: 'PPC_evmbousianh',
    1954: 'PPC_evmbossianh',
    1955: 'PPC_evmbosusianh',
    1956: 'PPC_evmbeumianh',
    1957: 'PPC_evmbesmianh',
    1958: 'PPC_evmbesumianh',
    1959: 'PPC_evmboumianh',
    1960: 'PPC_evmbosmianh',
    1961: 'PPC_evmbosumianh',
    1962: 'PPC_evmwlusianw3',
    1963: 'PPC_evmwlssianw3',
    1964: 'PPC_evmwhssfranw3',
    1965: 'PPC_evmwhssfanw3',
    1966: 'PPC_evmwhssfranw',
    1967: 'PPC_evmwhssfanw',
    1968: 'PPC_evmwlumianw3',
    1969: 'PPC_evmwlsmianw3',
    1970: 'PPC_evmwusian',
    1971: 'PPC_evmwssian',
    1972: 'PPC_evmwehgsmfran',
    1973: 'PPC_evmwehgsmfan',
    1974: 'PPC_evmwohgsmfran',
    1975: 'PPC_evmwohgsmfan',
    1976: 'PPC_evseteqb',
    1977: 'PPC_evseteqh',
    1978: 'PPC_evseteqw',
    1979: 'PPC_evsetgthu',
    1980: 'PPC_evsetgths',
    1981: 'PPC_evsetgtwu',
    1982: 'PPC_evsetgtws',
    1983: 'PPC_evsetgtbu',
    1984: 'PPC_evsetgtbs',
    1985: 'PPC_evsetltbu',
    1986: 'PPC_evsetltbs',
    1987: 'PPC_evsetlthu',
    1988: 'PPC_evsetlths',
    1989: 'PPC_evsetltwu',
    1990: 'PPC_evsetltws',
    1991: 'PPC_evsaduw',
    1992: 'PPC_evsadsw',
    1993: 'PPC_evsad4ub',
    1994: 'PPC_evsad4sb',
    1995: 'PPC_evsad2uh',
    1996: 'PPC_evsad2sh',
    1997: 'PPC_evsaduwa',
    1998: 'PPC_evsadswa',
    1999: 'PPC_evsad4uba',
    2000: 'PPC_evsad4sba',
    2001: 'PPC_evsad2uha',
    2002: 'PPC_evsad2sha',
    2003: 'PPC_evabsdifuw',
    2004: 'PPC_evabsdifsw',
    2005: 'PPC_evabsdifub',
    2006: 'PPC_evabsdifsb',
    2007: 'PPC_evabsdifuh',
    2008: 'PPC_evabsdifsh',
    2009: 'PPC_evsaduwaa',
    2010: 'PPC_evsadswaa',
    2011: 'PPC_evsad4ubaaw',
    2012: 'PPC_evsad4sbaaw',
    2013: 'PPC_evsad2uhaaw',
    2014: 'PPC_evsad2shaaw',
    2015: 'PPC_evpkshubs',
    2016: 'PPC_evpkshsbs',
    2017: 'PPC_evpkswuhs',
    2018: 'PPC_evpkswshs',
    2019: 'PPC_evpkuhubs',
    2020: 'PPC_evpkuwuhs',
    2021: 'PPC_evpkswshilvs',
    2022: 'PPC_evpkswgshefrs',
    2023: 'PPC_evpkswshfrs',
    2024: 'PPC_evpkswshilvfrs',
    2025: 'PPC_evpksdswfrs',
    2026: 'PPC_evpksdshefrs',
    2027: 'PPC_evpkuduws',
    2028: 'PPC_evpksdsws',
    2029: 'PPC_evpkswgswfrs',
    2030: 'PPC_evilveh',
    2031: 'PPC_evilveoh',
    2032: 'PPC_evilvhih',
    2033: 'PPC_evilvhiloh',
    2034: 'PPC_evilvloh',
    2035: 'PPC_evilvlohih',
    2036: 'PPC_evilvoeh',
    2037: 'PPC_evilvoh',
    2038: 'PPC_evdlveb',
    2039: 'PPC_evdlveh',
    2040: 'PPC_evdlveob',
    2041: 'PPC_evdlveoh',
    2042: 'PPC_evdlvob',
    2043: 'PPC_evdlvoh',
    2044: 'PPC_evdlvoeb',
    2045: 'PPC_evdlvoeh',
    2046: 'PPC_evmaxbu',
    2047: 'PPC_evmaxbs',
    2048: 'PPC_evmaxhu',
    2049: 'PPC_evmaxhs',
    2050: 'PPC_evmaxwu',
    2051: 'PPC_evmaxws',
    2052: 'PPC_evmaxdu',
    2053: 'PPC_evmaxds',
    2054: 'PPC_evminbu',
    2055: 'PPC_evminbs',
    2056: 'PPC_evminhu',
    2057: 'PPC_evminhs',
    2058: 'PPC_evminwu',
    2059: 'PPC_evminws',
    2060: 'PPC_evmindu',
    2061: 'PPC_evminds',
    2062: 'PPC_evavgwu',
    2063: 'PPC_evavgws',
    2064: 'PPC_evavgbu',
    2065: 'PPC_evavgbs',
    2066: 'PPC_evavghu',
    2067: 'PPC_evavghs',
    2068: 'PPC_evavgdu',
    2069: 'PPC_evavgds',
    2070: 'PPC_evavgwur',
    2071: 'PPC_evavgwsr',
    2072: 'PPC_evavgbur',
    2073: 'PPC_evavgbsr',
    2074: 'PPC_evavghur',
    2075: 'PPC_evavghsr',
    2076: 'PPC_evavgdur',
    2077: 'PPC_evavgdsr',
    2078: 'PPC_tdui',
    2079: 'PPC_tdu',
    2080: 'PPC_twui',
    2081: 'PPC_twu',
    2082: 'PPC_bctar',
    2083: 'PPC_clrbhrb',
    2084: 'PPC_mfbhrbe',
    2085: 'PPC_mtsle',
    2086: 'PPC_mfvsrd',
    2087: 'PPC_mfvsrwz',
    2088: 'PPC_mtvsrd',
    2089: 'PPC_mtvsrwa',
    2090: 'PPC_mtvsrwz',
    2091: 'PPC_fmrgew',
    2092: 'PPC_fmrgow',
    2093: 'PPC_vpksdss',
    2094: 'PPC_vpksdus',
    2095: 'PPC_vpkudus',
    2096: 'PPC_vpkudum',
    2097: 'PPC_vupkhsw',
    2098: 'PPC_vupklsw',
    2099: 'PPC_vmrgew',
    2100: 'PPC_vmrgow',
    2101: 'PPC_vaddudm',
    2102: 'PPC_vadduqm',
    2103: 'PPC_vaddeuqm',
    2104: 'PPC_vaddcuq',
    2105: 'PPC_vaddecuq',
    2106: 'PPC_vsubudm',
    2107: 'PPC_vsubuqm',
    2108: 'PPC_vsubeuqm',
    2109: 'PPC_vsubcuq',
    2110: 'PPC_vsubecuq',
    2111: 'PPC_vmulesw',
    2112: 'PPC_vmuleuw',
    2113: 'PPC_vmulosw',
    2114: 'PPC_vmulouw',
    2115: 'PPC_vmuluwm',
    2116: 'PPC_vmaxsd',
    2117: 'PPC_vmaxud',
    2118: 'PPC_vminsd',
    2119: 'PPC_vminud',
    2120: 'PPC_vcmpequd',
    2121: 'PPC_vcmpgtsd',
    2122: 'PPC_vcmpgtud',
    2123: 'PPC_veqv',
    2124: 'PPC_vnand',
    2125: 'PPC_vorc',
    2126: 'PPC_vrld',
    2127: 'PPC_vsld',
    2128: 'PPC_vsrd',
    2129: 'PPC_vsrad',
    2130: 'PPC_vcipher',
    2131: 'PPC_vcipherlast',
    2132: 'PPC_vncipher',
    2133: 'PPC_vncipherlast',
    2134: 'PPC_vsbox',
    2135: 'PPC_vshasigmad',
    2136: 'PPC_vshasigmaw',
    2137: 'PPC_vpmsumb',
    2138: 'PPC_vpmsumd',
    2139: 'PPC_vpmsumh',
    2140: 'PPC_vpmsumw',
    2141: 'PPC_vpermxor',
    2142: 'PPC_vgbbd',
    2143: 'PPC_vclzb',
    2144: 'PPC_vclzh',
    2145: 'PPC_vclzw',
    2146: 'PPC_vclzd',
    2147: 'PPC_vpopcntb',
    2148: 'PPC_vpopcntd',
    2149: 'PPC_vpopcnth',
    2150: 'PPC_vpopcntw',
    2151: 'PPC_vbpermq',
    2152: 'PPC_bcdadd',
    2153: 'PPC_bcdsub',
    2154: 'PPC_lxsiwax',
    2155: 'PPC_lxsspx',
    2156: 'PPC_lxsiwzx',
    2157: 'PPC_stxsiwx',
    2158: 'PPC_stxsspx',
    2159: 'PPC_xsaddsp',
    2160: 'PPC_xscvdpspn',
    2161: 'PPC_xscvspdpn',
    2162: 'PPC_xscvsxdsp',
    2163: 'PPC_xscvuxdsp',
    2164: 'PPC_xsdivsp',
    2165: 'PPC_xsmaddasp',
    2166: 'PPC_xsmaddmsp',
    2167: 'PPC_xsmsubasp',
    2168: 'PPC_xsmsubmsp',
    2169: 'PPC_xsmulsp',
    2170: 'PPC_xsnmaddasp',
    2171: 'PPC_xsnmaddmsp',
    2172: 'PPC_xsnmsubasp',
    2173: 'PPC_xsnmsubmsp',
    2174: 'PPC_xsresp',
    2175: 'PPC_xsrsp',
    2176: 'PPC_xsrsqrtesp',
    2177: 'PPC_xssqrtsp',
    2178: 'PPC_xssubsp',
    2179: 'PPC_xxleqv',
    2180: 'PPC_xxlnand',
    2181: 'PPC_xxlorc',
    2182: 'PPC_lqarx',
    2183: 'PPC_stqcx',
    2184: 'PPC_tbegin',
    2185: 'PPC_tend',
    2186: 'PPC_tabort',
    2187: 'PPC_tabortwc',
    2188: 'PPC_tabortwci',
    2189: 'PPC_tabortdc',
    2190: 'PPC_tabortdci',
    2191: 'PPC_tsr',
    2192: 'PPC_tcheck',
    2193: 'PPC_rfebb',
    2194: 'PPC_treclaim',
    2195: 'PPC_trechkpt',
    2196: 'PPC_msgsndp',
    2197: 'PPC_msgclrp',
    2198: 'PPC_dcblq',
    2199: 'PPC_icblq',
    2200: 'PPC_vmr',
    2201: 'PPC_vnot',
    2202: 'PPC_tendall',
    2203: 'PPC_tsuspend',
    2204: 'PPC_tresume',
    2205: 'PPC_mtppr',
    2206: 'PPC_mfppr',
    2207: 'PPC_mtppr32',
    2208: 'PPC_mfppr32',
    2209: 'PPC_mtic',
    2210: 'PPC_mfic',
    2211: 'PPC_mtvtb',
    2212: 'PPC_mfvtb',
    2213: 'PPC_miso',
    2214: 'PPC_mdoio',
    2215: 'PPC_mdoom',
    2216: 'PPC_yield',
    2217: 'PPC_addbss',
    2218: 'PPC_addhss',
    2219: 'PPC_addwss',
    2220: 'PPC_addbus',
    2221: 'PPC_addhus',
    2222: 'PPC_addwus',
    2223: 'PPC_mulhss',
    2224: 'PPC_mulwss',
    2225: 'PPC_mulhus',
    2226: 'PPC_mulwus',
    2227: 'PPC_sat',
    2228: 'PPC_subfbss',
    2229: 'PPC_subfhss',
    2230: 'PPC_subfwss',
    2231: 'PPC_subfbus',
    2232: 'PPC_subfhus',
    2233: 'PPC_subfwus',
    2234: 'PPC_satsbs',
    2235: 'PPC_satubs',
    2236: 'PPC_satsbu',
    2237: 'PPC_satubu',
    2238: 'PPC_abssb',
    2239: 'PPC_absub',
    2240: 'PPC_satshs',
    2241: 'PPC_satuhs',
    2242: 'PPC_satshu',
    2243: 'PPC_satuhu',
    2244: 'PPC_abssh',
    2245: 'PPC_absuh',
    2246: 'PPC_satsws',
    2247: 'PPC_satuws',
    2248: 'PPC_satswu',
    2249: 'PPC_satuwu',
    2250: 'PPC_abssw',
    2251: 'PPC_absuw',
    2252: 'PPC_dni',
    2253: 'PPC_slbieg',
    2254: 'PPC_slbiag',
    2255: 'PPC_slbsync',
    2256: 'PPC_addpcis',
    2257: 'PPC_lnia',
    2258: 'PPC_subpcis',
    2259: 'PPC_cmpeqb',
    2260: 'PPC_cmprb',
    2261: 'PPC_cnttzw',
    2262: 'PPC_cnttzd',
    2263: 'PPC_darn',
    2264: 'PPC_extswsli',
    2265: 'PPC_maddhd',
    2266: 'PPC_maddhdu',
    2267: 'PPC_maddld',
    2268: 'PPC_mcrxrx',
    2269: 'PPC_setb',
    2270: 'PPC_modsd',
    2271: 'PPC_modud',
    2272: 'PPC_modsw',
    2273: 'PPC_moduw',
    2274: 'PPC_mfvsrld',
    2275: 'PPC_mtvsrdd',
    2276: 'PPC_mtvsrws',
    2277: 'PPC_scv',
    2278: 'PPC_rfscv',
    2279: 'PPC_stop',
    2280: 'PPC_copy',
    2281: 'PPC_paste',
    2282: 'PPC_ldat',
    2283: 'PPC_lwat',
    2284: 'PPC_stdat',
    2285: 'PPC_stwat',
    2286: 'PPC_cpabort',
    2287: 'PPC_wait30',
    2288: 'PPC_dtstsfi',
    2289: 'PPC_dtstsfiq',
    2290: 'PPC_bcdcfn',
    2291: 'PPC_bcdcfz',
    2292: 'PPC_bcdctn',
    2293: 'PPC_bcdctz',
    2294: 'PPC_bcdctsq',
    2295: 'PPC_bcdcfsq',
    2296: 'PPC_bcdsetsgn',
    2297: 'PPC_bcdcpsgn',
    2298: 'PPC_bcds',
    2299: 'PPC_bcdus',
    2300: 'PPC_bcdsr',
    2301: 'PPC_bcdtrunc',
    2302: 'PPC_bcdutrunc',
    2303: 'PPC_vabsdub',
    2304: 'PPC_vabsduh',
    2305: 'PPC_vabsduw',
    2306: 'PPC_vbpermd',
    2307: 'PPC_vclzlsbb',
    2308: 'PPC_vctzlsbb',
    2309: 'PPC_vcmpneb',
    2310: 'PPC_vcmpnezb',
    2311: 'PPC_vcmpneh',
    2312: 'PPC_vcmpnezh',
    2313: 'PPC_vcmpnew',
    2314: 'PPC_vcmpnezw',
    2315: 'PPC_vctzb',
    2316: 'PPC_vctzh',
    2317: 'PPC_vctzw',
    2318: 'PPC_vctzd',
    2319: 'PPC_vextractub',
    2320: 'PPC_vextractuh',
    2321: 'PPC_vextractuw',
    2322: 'PPC_vextractd',
    2323: 'PPC_vextsb2w',
    2324: 'PPC_vextsb2d',
    2325: 'PPC_vextsh2w',
    2326: 'PPC_vextsh2d',
    2327: 'PPC_vextsw2d',
    2328: 'PPC_vextublx',
    2329: 'PPC_vextubrx',
    2330: 'PPC_vextuhlx',
    2331: 'PPC_vextuhrx',
    2332: 'PPC_vextuwlx',
    2333: 'PPC_vextuwrx',
    2334: 'PPC_vinsertb',
    2335: 'PPC_vinserth',
    2336: 'PPC_vinsertw',
    2337: 'PPC_vinsertd',
    2338: 'PPC_vmul10uq',
    2339: 'PPC_vmul10euq',
    2340: 'PPC_vmul10cuq',
    2341: 'PPC_vmul10ecuq',
    2342: 'PPC_vnegw',
    2343: 'PPC_vnegd',
    2344: 'PPC_vpermr',
    2345: 'PPC_vprtybw',
    2346: 'PPC_vprtybd',
    2347: 'PPC_vprtybq',
    2348: 'PPC_vrlwnm',
    2349: 'PPC_vrlwmi',
    2350: 'PPC_vrldnm',
    2351: 'PPC_vrldmi',
    2352: 'PPC_vslv',
    2353: 'PPC_vsrv',
    2354: 'PPC_lxsd',
    2355: 'PPC_lxssp',
    2356: 'PPC_lxsibzx',
    2357: 'PPC_lxsihzx',
    2358: 'PPC_lxv',
    2359: 'PPC_lxvb16x',
    2360: 'PPC_lxvh8x',
    2361: 'PPC_lxvl',
    2362: 'PPC_lxvll',
    2363: 'PPC_lxvwsx',
    2364: 'PPC_lxvx',
    2365: 'PPC_stxsd',
    2366: 'PPC_stxsibx',
    2367: 'PPC_stxsihx',
    2368: 'PPC_stxssp',
    2369: 'PPC_stxv',
    2370: 'PPC_stxvb16x',
    2371: 'PPC_stxvh8x',
    2372: 'PPC_stxvl',
    2373: 'PPC_stxvll',
    2374: 'PPC_stxvx',
    2375: 'PPC_xsabsqp',
    2376: 'PPC_xsaddqp',
    2377: 'PPC_xscmpexpqp',
    2378: 'PPC_xscmpoqp',
    2379: 'PPC_xscmpuqp',
    2380: 'PPC_xscpsgnqp',
    2381: 'PPC_xscvdpqp',
    2382: 'PPC_xscvqpdp',
    2383: 'PPC_xscvqpsdz',
    2384: 'PPC_xscvqpswz',
    2385: 'PPC_xscvqpudz',
    2386: 'PPC_xscvqpuwz',
    2387: 'PPC_xscvsdqp',
    2388: 'PPC_xscvudqp',
    2389: 'PPC_xsdivqp',
    2390: 'PPC_xsiexpqp',
    2391: 'PPC_xsmaddqp',
    2392: 'PPC_xsmsubqp',
    2393: 'PPC_xsmulqp',
    2394: 'PPC_xsnabsqp',
    2395: 'PPC_xsnegqp',
    2396: 'PPC_xsnmaddqp',
    2397: 'PPC_xsnmsubqp',
    2398: 'PPC_xssqrtqp',
    2399: 'PPC_xssubqp',
    2400: 'PPC_xsxexpqp',
    2401: 'PPC_xsxsigqp',
    2402: 'PPC_xststdcqp',
    2403: 'PPC_xsrqpxp',
    2404: 'PPC_xsrqpi',
    2405: 'PPC_xscmpeqdp',
    2406: 'PPC_xscmpexpdp',
    2407: 'PPC_xscmpgedp',
    2408: 'PPC_xscmpgtdp',
    2409: 'PPC_xsiexpdp',
    2410: 'PPC_xsmaxcdp',
    2411: 'PPC_xsmaxjdp',
    2412: 'PPC_xsmincdp',
    2413: 'PPC_xsminjdp',
    2414: 'PPC_xviexpdp',
    2415: 'PPC_xviexpsp',
    2416: 'PPC_xxextractuw',
    2417: 'PPC_xxinsertw',
    2418: 'PPC_xxperm',
    2419: 'PPC_xxpermr',
    2420: 'PPC_xxspltib',
    2421: 'PPC_xststdcdp',
    2422: 'PPC_xststdcsp',
    2423: 'PPC_xvtstdcdp',
    2424: 'PPC_xvtstdcsp',
    2425: 'PPC_xsxexpdp',
    2426: 'PPC_xsxsigdp',
    2427: 'PPC_xscvdphp',
    2428: 'PPC_xscvhpdp',
    2429: 'PPC_xvxexpdp',
    2430: 'PPC_xvxexpsp',
    2431: 'PPC_xvxsigdp',
    2432: 'PPC_xvxsigsp',
    2433: 'PPC_xxbrd',
    2434: 'PPC_xxbrh',
    2435: 'PPC_xxbrq',
    2436: 'PPC_xxbrw',
    2437: 'PPC_xvcvhpsp',
    2438: 'PPC_xvcvsphp',
    2439: 'PPC_msgsync',
    2440: 'PPC_addex',
    2441: 'PPC_vmsumudm',
    2442: 'PPC_mffsce',
    2443: 'PPC_mffscdrn',
    2444: 'PPC_mffscdrni',
    2445: 'PPC_mffscrn',
    2446: 'PPC_mffscrni',
    2447: 'PPC_mffsl',
    2448: 'PPC_lbdcbx',
    2449: 'PPC_lhdcbx',
    2450: 'PPC_lwdcbx',
    2451: 'PPC_stbdcbx',
    2452: 'PPC_sthdcbx',
    2453: 'PPC_stwdcbx',
    2454: 'PPC_lbcbx',
    2455: 'PPC_lhcbx',
    2456: 'PPC_lwcbx',
    2457: 'PPC_stbwtx',
    2458: 'PPC_sthwtx',
    2459: 'PPC_stwwtx',
    2460: 'PPC_dsncb',
    2461: 'PPC_ldw',
    2462: 'PPC_stdw',
    2463: 'PPC_lqw',
    2464: 'PPC_stqw',
    2465: 'PPC_ldwcb',
    2466: 'PPC_ldbrw',
    2467: 'PPC_ldwbrw',
    2468: 'PPC_stdwwt',
    2469: 'PPC_stdbrw',
    2470: 'PPC_stdwbrw',
    2471: 'PPC_lqdbrw',
    2472: 'PPC_stqdbrw',
    2473: 'PPC_lwbr',
    2474: 'PPC_lhbr',
    2475: 'PPC_stwbr',
    2476: 'PPC_sthbr',
    2477: 'PPC_ldwar',
    2478: 'PPC_stdwc',
    2479: 'PPC_addb',
    2480: 'PPC_addbu',
    2481: 'PPC_addh',
    2482: 'PPC_addhu',
    2483: 'PPC_subfb',
    2484: 'PPC_subfbu',
    2485: 'PPC_subfh',
    2486: 'PPC_subfhu',
    2487: 'PPC_byterevw',
    2488: 'PPC_byterevh',
    2489: 'PPC_hwaccel',
    2490: 'PPC_hwacceli',
    2491: 'PPC_ordhwaccel',
    2492: 'PPC_ordhwacceli',
    2493: 'PPC_osmcmd',
    2494: 'PPC_mpure',
    2495: 'PPC_mpuwe',
    2496: 'PPC_mpusync',
    2497: 'PPC_efdmax',
    2498: 'PPC_efdmin',
    2499: 'PPC_efdsqrt',
    2500: 'PPC_efdcfh',
    2501: 'PPC_efdcth',
    2502: 'PPC_last',
}
PPC_null = 0
PPC_add = 1
PPC_addc = 2
PPC_adde = 3
PPC_addi = 4
PPC_addic = 5
PPC_addis = 6
PPC_addme = 7
PPC_addze = 8
PPC_and = 9
PPC_andc = 10
PPC_andi = 11
PPC_andis = 12
PPC_b = 13
PPC_bc = 14
PPC_bcctr = 15
PPC_bclr = 16
PPC_cmp = 17
PPC_cmpi = 18
PPC_cmpl = 19
PPC_cmpli = 20
PPC_cntlzd = 21
PPC_cntlzw = 22
PPC_crand = 23
PPC_crandc = 24
PPC_creqv = 25
PPC_crnand = 26
PPC_crnor = 27
PPC_cror = 28
PPC_crorc = 29
PPC_crxor = 30
PPC_dcba = 31
PPC_dcbf = 32
PPC_dcbi = 33
PPC_dcbst = 34
PPC_dcbt = 35
PPC_dcbtst = 36
PPC_dcbz = 37
PPC_divd = 38
PPC_divdu = 39
PPC_divw = 40
PPC_divwu = 41
PPC_eciwx = 42
PPC_ecowx = 43
PPC_eieio = 44
PPC_eqv = 45
PPC_extsb = 46
PPC_extsh = 47
PPC_extsw = 48
PPC_fabs = 49
PPC_fadd = 50
PPC_fadds = 51
PPC_fcfid = 52
PPC_fcmpo = 53
PPC_fcmpu = 54
PPC_fctid = 55
PPC_fctidz = 56
PPC_fctiw = 57
PPC_fctiwz = 58
PPC_fdiv = 59
PPC_fdivs = 60
PPC_fmadd = 61
PPC_fmadds = 62
PPC_fmr = 63
PPC_fmsub = 64
PPC_fmsubs = 65
PPC_fmul = 66
PPC_fmuls = 67
PPC_fnabs = 68
PPC_fneg = 69
PPC_fnmadd = 70
PPC_fnmadds = 71
PPC_fnmsub = 72
PPC_fnmsubs = 73
PPC_fres = 74
PPC_frsp = 75
PPC_frsqrte = 76
PPC_fsel = 77
PPC_fsqrt = 78
PPC_fsqrts = 79
PPC_fsub = 80
PPC_fsubs = 81
PPC_icbi = 82
PPC_isync = 83
PPC_lbz = 84
PPC_lbzu = 85
PPC_lbzux = 86
PPC_lbzx = 87
PPC_ld = 88
PPC_ldarx = 89
PPC_ldu = 90
PPC_ldux = 91
PPC_ldx = 92
PPC_lfd = 93
PPC_lfdu = 94
PPC_lfdux = 95
PPC_lfdx = 96
PPC_lfs = 97
PPC_lfsu = 98
PPC_lfsux = 99
PPC_lfsx = 100
PPC_lha = 101
PPC_lhau = 102
PPC_lhaux = 103
PPC_lhax = 104
PPC_lhbrx = 105
PPC_lhz = 106
PPC_lhzu = 107
PPC_lhzux = 108
PPC_lhzx = 109
PPC_lmw = 110
PPC_lswi = 111
PPC_lswx = 112
PPC_lwa = 113
PPC_lwarx = 114
PPC_lwaux = 115
PPC_lwax = 116
PPC_lwbrx = 117
PPC_lwz = 118
PPC_lwzu = 119
PPC_lwzux = 120
PPC_lwzx = 121
PPC_mcrf = 122
PPC_mcrfs = 123
PPC_mcrxr = 124
PPC_mfcr = 125
PPC_mffs = 126
PPC_mfmsr = 127
PPC_mfspr = 128
PPC_mfsr = 129
PPC_mfsrin = 130
PPC_mftb = 131
PPC_mtcrf = 132
PPC_mtfsb0 = 133
PPC_mtfsb1 = 134
PPC_mtfsf = 135
PPC_mtfsfi = 136
PPC_mtmsr = 137
PPC_mtmsrd = 138
PPC_mtspr = 139
PPC_mtsr = 140
PPC_mtsrd = 141
PPC_mtsrdin = 142
PPC_mtsrin = 143
PPC_mulhd = 144
PPC_mulhdu = 145
PPC_mulhw = 146
PPC_mulhwu = 147
PPC_mulld = 148
PPC_mulli = 149
PPC_mullw = 150
PPC_nand = 151
PPC_neg = 152
PPC_nor = 153
PPC_or = 154
PPC_orc = 155
PPC_ori = 156
PPC_oris = 157
PPC_rfi = 158
PPC_rfid = 159
PPC_rldcl = 160
PPC_rldcr = 161
PPC_rldic = 162
PPC_rldicl = 163
PPC_rldicr = 164
PPC_rldimi = 165
PPC_rlwimi = 166
PPC_rlwinm = 167
PPC_rlwnm = 168
PPC_sc = 169
PPC_slbia = 170
PPC_slbie = 171
PPC_sld = 172
PPC_slw = 173
PPC_srad = 174
PPC_sradi = 175
PPC_sraw = 176
PPC_srawi = 177
PPC_srd = 178
PPC_srw = 179
PPC_stb = 180
PPC_stbu = 181
PPC_stbux = 182
PPC_stbx = 183
PPC_std = 184
PPC_stdcx = 185
PPC_stdu = 186
PPC_stdux = 187
PPC_stdx = 188
PPC_stfd = 189
PPC_stfdu = 190
PPC_stfdux = 191
PPC_stfdx = 192
PPC_stfiwx = 193
PPC_stfs = 194
PPC_stfsu = 195
PPC_stfsux = 196
PPC_stfsx = 197
PPC_sth = 198
PPC_sthbrx = 199
PPC_sthu = 200
PPC_sthux = 201
PPC_sthx = 202
PPC_stmw = 203
PPC_stswi = 204
PPC_stswx = 205
PPC_stw = 206
PPC_stwbrx = 207
PPC_stwcx = 208
PPC_stwu = 209
PPC_stwux = 210
PPC_stwx = 211
PPC_subf = 212
PPC_subfc = 213
PPC_subfe = 214
PPC_subfic = 215
PPC_subfme = 216
PPC_subfze = 217
PPC_sync = 218
PPC_td = 219
PPC_tdi = 220
PPC_tlbia = 221
PPC_tlbie = 222
PPC_tlbsync = 223
PPC_tw = 224
PPC_twi = 225
PPC_xor = 226
PPC_xori = 227
PPC_xoris = 228
PPC_last_basic = 228
PPC_cmpwi = 229
PPC_cmpw = 230
PPC_cmplwi = 231
PPC_cmplw = 232
PPC_cmpdi = 233
PPC_cmpd = 234
PPC_cmpldi = 235
PPC_cmpld = 236
PPC_trap = 237
PPC_trapd = 238
PPC_twlgt = 239
PPC_twllt = 240
PPC_tweq = 241
PPC_twlge = 242
PPC_twlle = 243
PPC_twgt = 244
PPC_twge = 245
PPC_twlt = 246
PPC_twle = 247
PPC_twne = 248
PPC_twlgti = 249
PPC_twllti = 250
PPC_tweqi = 251
PPC_twlgei = 252
PPC_twllei = 253
PPC_twgti = 254
PPC_twgei = 255
PPC_twlti = 256
PPC_twlei = 257
PPC_twnei = 258
PPC_tdlgt = 259
PPC_tdllt = 260
PPC_tdeq = 261
PPC_tdlge = 262
PPC_tdlle = 263
PPC_tdgt = 264
PPC_tdge = 265
PPC_tdlt = 266
PPC_tdle = 267
PPC_tdne = 268
PPC_tdlgti = 269
PPC_tdllti = 270
PPC_tdeqi = 271
PPC_tdlgei = 272
PPC_tdllei = 273
PPC_tdgti = 274
PPC_tdgei = 275
PPC_tdlti = 276
PPC_tdlei = 277
PPC_tdnei = 278
PPC_nop = 279
PPC_not = 280
PPC_mr = 281
PPC_subi = 282
PPC_subic = 283
PPC_subis = 284
PPC_li = 285
PPC_lis = 286
PPC_crset = 287
PPC_crnot = 288
PPC_crmove = 289
PPC_crclr = 290
PPC_mtxer = 291
PPC_mtlr = 292
PPC_mtctr = 293
PPC_mtdsisr = 294
PPC_mtdar = 295
PPC_mtdec = 296
PPC_mtsrr0 = 297
PPC_mtsrr1 = 298
PPC_mtsprg0 = 299
PPC_mtsprg1 = 300
PPC_mtsprg2 = 301
PPC_mtsprg3 = 302
PPC_mttbl = 303
PPC_mttbu = 304
PPC_mfxer = 305
PPC_mflr = 306
PPC_mfctr = 307
PPC_mfdsisr = 308
PPC_mfdar = 309
PPC_mfdec = 310
PPC_mfsrr0 = 311
PPC_mfsrr1 = 312
PPC_mfsprg0 = 313
PPC_mfsprg1 = 314
PPC_mfsprg2 = 315
PPC_mfsprg3 = 316
PPC_mftbl = 317
PPC_mftbu = 318
PPC_mfpvr = 319
PPC_balways = 320
PPC_bt = 321
PPC_bf = 322
PPC_bdnz = 323
PPC_bdnzt = 324
PPC_bdnzf = 325
PPC_bdz = 326
PPC_bdzt = 327
PPC_bdzf = 328
PPC_blt = 329
PPC_ble = 330
PPC_beq = 331
PPC_bge = 332
PPC_bgt = 333
PPC_bne = 334
PPC_bso = 335
PPC_bns = 336
PPC_extlwi = 337
PPC_extrwi = 338
PPC_inslwi = 339
PPC_insrwi = 340
PPC_rotlwi = 341
PPC_rotrwi = 342
PPC_rotlw = 343
PPC_slwi = 344
PPC_srwi = 345
PPC_clrlwi = 346
PPC_clrrwi = 347
PPC_clrlslwi = 348
PPC_dccci = 349
PPC_dcread = 350
PPC_icbt = 351
PPC_iccci = 352
PPC_icread = 353
PPC_mfdcr = 354
PPC_mtdcr = 355
PPC_rfci = 356
PPC_tlbre = 357
PPC_tlbsx = 358
PPC_tlbwe = 359
PPC_wrtee = 360
PPC_wrteei = 361
PPC_abs = 362
PPC_clcs = 363
PPC_clf = 364
PPC_cli = 365
PPC_dclst = 366
PPC_div = 367
PPC_divs = 368
PPC_doz = 369
PPC_dozi = 370
PPC_frsqrtes = 371
PPC_hrfid = 372
PPC_lscbx = 373
PPC_maskg = 374
PPC_maskir = 375
PPC_mfsri = 376
PPC_mul = 377
PPC_nabs = 378
PPC_popcntb = 379
PPC_rac = 380
PPC_rfsvc = 381
PPC_rlmi = 382
PPC_rrib = 383
PPC_slbmfee = 384
PPC_slbmfev = 385
PPC_slbmte = 386
PPC_sle = 387
PPC_sleq = 388
PPC_sliq = 389
PPC_slliq = 390
PPC_sllq = 391
PPC_slq = 392
PPC_sraiq = 393
PPC_sraq = 394
PPC_sre = 395
PPC_srea = 396
PPC_sreq = 397
PPC_sriq = 398
PPC_srliq = 399
PPC_srlq = 400
PPC_srq = 401
PPC_mtocrf = 402
PPC_mfocrf = 403
PPC_isel = 404
PPC_isellt = 405
PPC_iselgt = 406
PPC_iseleq = 407
PPC_dcblc = 408
PPC_dcbtls = 409
PPC_dcbtstls = 410
PPC_icblc = 411
PPC_icbtls = 412
PPC_tlbivax = 413
PPC_rfdi = 414
PPC_tlbld = 415
PPC_tlbli = 416
PPC_brinc = 417
PPC_evabs = 418
PPC_evaddiw = 419
PPC_evaddsmiaaw = 420
PPC_evaddssiaaw = 421
PPC_evaddumiaaw = 422
PPC_evaddusiaaw = 423
PPC_evaddw = 424
PPC_evand = 425
PPC_evandc = 426
PPC_evcmpeq = 427
PPC_evcmpgts = 428
PPC_evcmpgtu = 429
PPC_evcmplts = 430
PPC_evcmpltu = 431
PPC_evcntlsw = 432
PPC_evcntlzw = 433
PPC_evdivws = 434
PPC_evdivwu = 435
PPC_eveqv = 436
PPC_evextsb = 437
PPC_evextsh = 438
PPC_evldd = 439
PPC_evlddx = 440
PPC_evldh = 441
PPC_evldhx = 442
PPC_evldw = 443
PPC_evldwx = 444
PPC_evlhhesplat = 445
PPC_evlhhesplatx = 446
PPC_evlhhossplat = 447
PPC_evlhhossplatx = 448
PPC_evlhhousplat = 449
PPC_evlhhousplatx = 450
PPC_evlwhe = 451
PPC_evlwhex = 452
PPC_evlwhos = 453
PPC_evlwhosx = 454
PPC_evlwhou = 455
PPC_evlwhoux = 456
PPC_evlwhsplat = 457
PPC_evlwhsplatx = 458
PPC_evlwwsplat = 459
PPC_evlwwsplatx = 460
PPC_evmergehi = 461
PPC_evmergehilo = 462
PPC_evmergelo = 463
PPC_evmergelohi = 464
PPC_evmhegsmfaa = 465
PPC_evmhegsmfan = 466
PPC_evmhegsmiaa = 467
PPC_evmhegsmian = 468
PPC_evmhegumiaa = 469
PPC_evmhegumian = 470
PPC_evmhesmf = 471
PPC_evmhesmfa = 472
PPC_evmhesmfaaw = 473
PPC_evmhesmfanw = 474
PPC_evmhesmi = 475
PPC_evmhesmia = 476
PPC_evmhesmiaaw = 477
PPC_evmhesmianw = 478
PPC_evmhessf = 479
PPC_evmhessfa = 480
PPC_evmhessfaaw = 481
PPC_evmhessfanw = 482
PPC_evmhessiaaw = 483
PPC_evmhessianw = 484
PPC_evmheumi = 485
PPC_evmheumia = 486
PPC_evmheumiaaw = 487
PPC_evmheumianw = 488
PPC_evmheusiaaw = 489
PPC_evmheusianw = 490
PPC_evmhogsmfaa = 491
PPC_evmhogsmfan = 492
PPC_evmhogsmiaa = 493
PPC_evmhogsmian = 494
PPC_evmhogumiaa = 495
PPC_evmhogumian = 496
PPC_evmhosmf = 497
PPC_evmhosmfa = 498
PPC_evmhosmfaaw = 499
PPC_evmhosmfanw = 500
PPC_evmhosmi = 501
PPC_evmhosmia = 502
PPC_evmhosmiaaw = 503
PPC_evmhosmianw = 504
PPC_evmhossf = 505
PPC_evmhossfa = 506
PPC_evmhossfaaw = 507
PPC_evmhossfanw = 508
PPC_evmhossiaaw = 509
PPC_evmhossianw = 510
PPC_evmhoumi = 511
PPC_evmhoumia = 512
PPC_evmhoumiaaw = 513
PPC_evmhoumianw = 514
PPC_evmhousiaaw = 515
PPC_evmhousianw = 516
PPC_evmra = 517
PPC_evmwhsmf = 518
PPC_evmwhsmfa = 519
PPC_evmwhsmi = 520
PPC_evmwhsmia = 521
PPC_evmwhssf = 522
PPC_evmwhssfa = 523
PPC_evmwhumi = 524
PPC_evmwhumia = 525
PPC_evmwlsmiaaw = 526
PPC_evmwlsmianw = 527
PPC_evmwlssiaaw = 528
PPC_evmwlssianw = 529
PPC_evmwlumi = 530
PPC_evmwlumia = 531
PPC_evmwlumiaaw = 532
PPC_evmwlumianw = 533
PPC_evmwlusiaaw = 534
PPC_evmwlusianw = 535
PPC_evmwsmf = 536
PPC_evmwsmfa = 537
PPC_evmwsmfaa = 538
PPC_evmwsmfan = 539
PPC_evmwsmi = 540
PPC_evmwsmia = 541
PPC_evmwsmiaa = 542
PPC_evmwsmian = 543
PPC_evmwssf = 544
PPC_evmwssfa = 545
PPC_evmwssfaa = 546
PPC_evmwssfan = 547
PPC_evmwumi = 548
PPC_evmwumia = 549
PPC_evmwumiaa = 550
PPC_evmwumian = 551
PPC_evnand = 552
PPC_evneg = 553
PPC_evnor = 554
PPC_evor = 555
PPC_evorc = 556
PPC_evrlw = 557
PPC_evrlwi = 558
PPC_evrndw = 559
PPC_evsel = 560
PPC_evslw = 561
PPC_evslwi = 562
PPC_evsplatfi = 563
PPC_evsplati = 564
PPC_evsrwis = 565
PPC_evsrwiu = 566
PPC_evsrws = 567
PPC_evsrwu = 568
PPC_evstdd = 569
PPC_evstddx = 570
PPC_evstdh = 571
PPC_evstdhx = 572
PPC_evstdw = 573
PPC_evstdwx = 574
PPC_evstwhe = 575
PPC_evstwhex = 576
PPC_evstwho = 577
PPC_evstwhox = 578
PPC_evstwwe = 579
PPC_evstwwex = 580
PPC_evstwwo = 581
PPC_evstwwox = 582
PPC_evsubfsmiaaw = 583
PPC_evsubfssiaaw = 584
PPC_evsubfumiaaw = 585
PPC_evsubfusiaaw = 586
PPC_evsubfw = 587
PPC_evsubifw = 588
PPC_evxor = 589
PPC_efdabs = 590
PPC_efdadd = 591
PPC_efdcfs = 592
PPC_efdcfsf = 593
PPC_efdcfsi = 594
PPC_efdcfsid = 595
PPC_efdcfuf = 596
PPC_efdcfui = 597
PPC_efdcfuid = 598
PPC_efdcmpeq = 599
PPC_efdcmpgt = 600
PPC_efdcmplt = 601
PPC_efdctsf = 602
PPC_efdctsi = 603
PPC_efdctsidz = 604
PPC_efdctsiz = 605
PPC_efdctuf = 606
PPC_efdctui = 607
PPC_efdctuidz = 608
PPC_efdctuiz = 609
PPC_efddiv = 610
PPC_efdmul = 611
PPC_efdnabs = 612
PPC_efdneg = 613
PPC_efdsub = 614
PPC_efdtsteq = 615
PPC_efdtstgt = 616
PPC_efdtstlt = 617
PPC_efscfd = 618
PPC_efsabs = 619
PPC_efsadd = 620
PPC_efscfsf = 621
PPC_efscfsi = 622
PPC_efscfuf = 623
PPC_efscfui = 624
PPC_efscmpeq = 625
PPC_efscmpgt = 626
PPC_efscmplt = 627
PPC_efsctsf = 628
PPC_efsctsi = 629
PPC_efsctsiz = 630
PPC_efsctuf = 631
PPC_efsctui = 632
PPC_efsctuiz = 633
PPC_efsdiv = 634
PPC_efsmul = 635
PPC_efsnabs = 636
PPC_efsneg = 637
PPC_efssub = 638
PPC_efststeq = 639
PPC_efststgt = 640
PPC_efststlt = 641
PPC_evfsabs = 642
PPC_evfsadd = 643
PPC_evfscfsf = 644
PPC_evfscfsi = 645
PPC_evfscfuf = 646
PPC_evfscfui = 647
PPC_evfscmpeq = 648
PPC_evfscmpgt = 649
PPC_evfscmplt = 650
PPC_evfsctsf = 651
PPC_evfsctsi = 652
PPC_evfsctsiz = 653
PPC_evfsctuf = 654
PPC_evfsctui = 655
PPC_evfsctuiz = 656
PPC_evfsdiv = 657
PPC_evfsmul = 658
PPC_evfsnabs = 659
PPC_evfsneg = 660
PPC_evfssub = 661
PPC_evfststeq = 662
PPC_evfststgt = 663
PPC_evfststlt = 664
PPC_bpermd = 665
PPC_divde = 666
PPC_divdeu = 667
PPC_ldbrx = 668
PPC_prtyd = 669
PPC_stdbrx = 670
PPC_cmpb = 671
PPC_divwe = 672
PPC_divweu = 673
PPC_lbarx = 674
PPC_lharx = 675
PPC_popcntd = 676
PPC_popcntw = 677
PPC_prtyw = 678
PPC_stbcx = 679
PPC_sthcx = 680
PPC_addg6s = 681
PPC_cbcdtd = 682
PPC_cdtbcd = 683
PPC_dadd = 684
PPC_daddq = 685
PPC_dcffix = 686
PPC_dcffixq = 687
PPC_dcmpo = 688
PPC_dcmpoq = 689
PPC_dcmpu = 690
PPC_dcmpuq = 691
PPC_dctdp = 692
PPC_dctfix = 693
PPC_dctfixq = 694
PPC_dctqpq = 695
PPC_ddedpd = 696
PPC_ddedpdq = 697
PPC_ddiv = 698
PPC_ddivq = 699
PPC_denbcd = 700
PPC_denbcdq = 701
PPC_diex = 702
PPC_diexq = 703
PPC_dmul = 704
PPC_dmulq = 705
PPC_dqua = 706
PPC_dquai = 707
PPC_dquaiq = 708
PPC_dquaq = 709
PPC_drdpq = 710
PPC_drintn = 711
PPC_drintnq = 712
PPC_drintx = 713
PPC_drintxq = 714
PPC_drrnd = 715
PPC_drrndq = 716
PPC_drsp = 717
PPC_dscli = 718
PPC_dscliq = 719
PPC_dscri = 720
PPC_dscriq = 721
PPC_dsub = 722
PPC_dsubq = 723
PPC_dtstdc = 724
PPC_dtstdcq = 725
PPC_dtstdg = 726
PPC_dtstdgq = 727
PPC_dtstex = 728
PPC_dtstexq = 729
PPC_dtstsf = 730
PPC_dtstsfq = 731
PPC_dxex = 732
PPC_dxexq = 733
PPC_dsn = 734
PPC_lbdx = 735
PPC_lddx = 736
PPC_lfddx = 737
PPC_lhdx = 738
PPC_lwdx = 739
PPC_stbdx = 740
PPC_stddx = 741
PPC_stfddx = 742
PPC_sthdx = 743
PPC_stwdx = 744
PPC_mbar = 745
PPC_rfmci = 746
PPC_tlbilx = 747
PPC_dci = 748
PPC_ici = 749
PPC_mfdcrux = 750
PPC_mfdcrx = 751
PPC_mtdcrux = 752
PPC_mtdcrx = 753
PPC_dnh = 754
PPC_ehpriv = 755
PPC_rfgi = 756
PPC_msgclr = 757
PPC_msgsnd = 758
PPC_dcbfep = 759
PPC_dcbstep = 760
PPC_dcbtep = 761
PPC_dcbtstep = 762
PPC_dcbzep = 763
PPC_evlddepx = 764
PPC_evstddepx = 765
PPC_icbiep = 766
PPC_lbepx = 767
PPC_lfdepx = 768
PPC_lhepx = 769
PPC_lvepx = 770
PPC_lvepxl = 771
PPC_lwepx = 772
PPC_stbepx = 773
PPC_stfdepx = 774
PPC_sthepx = 775
PPC_stvepx = 776
PPC_stvepxl = 777
PPC_stwepx = 778
PPC_ldepx = 779
PPC_stdepx = 780
PPC_mfpmr = 781
PPC_mtpmr = 782
PPC_mftmr = 783
PPC_mttmr = 784
PPC_tlbsrx = 785
PPC_fcfids = 786
PPC_fcfidu = 787
PPC_fcfidus = 788
PPC_fctidu = 789
PPC_fctiduz = 790
PPC_fctiwu = 791
PPC_fctiwuz = 792
PPC_ftdiv = 793
PPC_ftsqrt = 794
PPC_lfiwax = 795
PPC_lfiwzx = 796
PPC_lfdp = 797
PPC_lfdpx = 798
PPC_stfdp = 799
PPC_stfdpx = 800
PPC_fcpsgn = 801
PPC_fre = 802
PPC_frim = 803
PPC_frin = 804
PPC_frip = 805
PPC_friz = 806
PPC_macchw = 807
PPC_macchws = 808
PPC_macchwsu = 809
PPC_macchwu = 810
PPC_machhw = 811
PPC_machhws = 812
PPC_machhwsu = 813
PPC_machhwu = 814
PPC_maclhw = 815
PPC_maclhws = 816
PPC_maclhwsu = 817
PPC_maclhwu = 818
PPC_mulchw = 819
PPC_mulchwu = 820
PPC_mulhhw = 821
PPC_mulhhwu = 822
PPC_mullhw = 823
PPC_mullhwu = 824
PPC_nmacchw = 825
PPC_nmacchws = 826
PPC_nmachhw = 827
PPC_nmachhws = 828
PPC_nmaclhw = 829
PPC_nmaclhws = 830
PPC_dlmzb = 831
PPC_lq = 832
PPC_stq = 833
PPC_doze = 834
PPC_lbzcix = 835
PPC_ldcix = 836
PPC_lhzcix = 837
PPC_lwzcix = 838
PPC_nap = 839
PPC_rvwinkle = 840
PPC_slbfee = 841
PPC_sleep = 842
PPC_stbcix = 843
PPC_stdcix = 844
PPC_sthcix = 845
PPC_stwcix = 846
PPC_tlbiel = 847
PPC_lvebx = 848
PPC_lvehx = 849
PPC_lvewx = 850
PPC_lvsl = 851
PPC_lvsr = 852
PPC_lvx = 853
PPC_lvxl = 854
PPC_mfvscr = 855
PPC_mtvscr = 856
PPC_stvebx = 857
PPC_stvehx = 858
PPC_stvewx = 859
PPC_stvx = 860
PPC_stvxl = 861
PPC_vaddcuw = 862
PPC_vaddfp = 863
PPC_vaddsbs = 864
PPC_vaddshs = 865
PPC_vaddsws = 866
PPC_vaddubm = 867
PPC_vaddubs = 868
PPC_vadduhm = 869
PPC_vadduhs = 870
PPC_vadduwm = 871
PPC_vadduws = 872
PPC_vand = 873
PPC_vandc = 874
PPC_vavgsb = 875
PPC_vavgsh = 876
PPC_vavgsw = 877
PPC_vavgub = 878
PPC_vavguh = 879
PPC_vavguw = 880
PPC_vcfsx = 881
PPC_vcfux = 882
PPC_vcmpbfp = 883
PPC_vcmpeqfp = 884
PPC_vcmpequb = 885
PPC_vcmpequh = 886
PPC_vcmpequw = 887
PPC_vcmpgefp = 888
PPC_vcmpgtfp = 889
PPC_vcmpgtsb = 890
PPC_vcmpgtsh = 891
PPC_vcmpgtsw = 892
PPC_vcmpgtub = 893
PPC_vcmpgtuh = 894
PPC_vcmpgtuw = 895
PPC_vctsxs = 896
PPC_vctuxs = 897
PPC_vexptefp = 898
PPC_vlogefp = 899
PPC_vmaddfp = 900
PPC_vmaxfp = 901
PPC_vmaxsb = 902
PPC_vmaxsh = 903
PPC_vmaxsw = 904
PPC_vmaxub = 905
PPC_vmaxuh = 906
PPC_vmaxuw = 907
PPC_vmhaddshs = 908
PPC_vmhraddshs = 909
PPC_vminfp = 910
PPC_vminsb = 911
PPC_vminsh = 912
PPC_vminsw = 913
PPC_vminub = 914
PPC_vminuh = 915
PPC_vminuw = 916
PPC_vmladduhm = 917
PPC_vmrghb = 918
PPC_vmrghh = 919
PPC_vmrghw = 920
PPC_vmrglb = 921
PPC_vmrglh = 922
PPC_vmrglw = 923
PPC_vmsummbm = 924
PPC_vmsumshm = 925
PPC_vmsumshs = 926
PPC_vmsumubm = 927
PPC_vmsumuhm = 928
PPC_vmsumuhs = 929
PPC_vmulesb = 930
PPC_vmulesh = 931
PPC_vmuleub = 932
PPC_vmuleuh = 933
PPC_vmulosb = 934
PPC_vmulosh = 935
PPC_vmuloub = 936
PPC_vmulouh = 937
PPC_vnmsubfp = 938
PPC_vnor = 939
PPC_vor = 940
PPC_vperm = 941
PPC_vpkpx = 942
PPC_vpkshss = 943
PPC_vpkshus = 944
PPC_vpkswss = 945
PPC_vpkswus = 946
PPC_vpkuhum = 947
PPC_vpkuhus = 948
PPC_vpkuwum = 949
PPC_vpkuwus = 950
PPC_vrefp = 951
PPC_vrfim = 952
PPC_vrfin = 953
PPC_vrfip = 954
PPC_vrfiz = 955
PPC_vrlb = 956
PPC_vrlh = 957
PPC_vrlw = 958
PPC_vrsqrtefp = 959
PPC_vsel = 960
PPC_vsl = 961
PPC_vslb = 962
PPC_vsldoi = 963
PPC_vslh = 964
PPC_vslo = 965
PPC_vslw = 966
PPC_vspltb = 967
PPC_vsplth = 968
PPC_vspltisb = 969
PPC_vspltish = 970
PPC_vspltisw = 971
PPC_vspltw = 972
PPC_vsr = 973
PPC_vsrab = 974
PPC_vsrah = 975
PPC_vsraw = 976
PPC_vsrb = 977
PPC_vsrh = 978
PPC_vsro = 979
PPC_vsrw = 980
PPC_vsubcuw = 981
PPC_vsubfp = 982
PPC_vsubsbs = 983
PPC_vsubshs = 984
PPC_vsubsws = 985
PPC_vsububm = 986
PPC_vsububs = 987
PPC_vsubuhm = 988
PPC_vsubuhs = 989
PPC_vsubuwm = 990
PPC_vsubuws = 991
PPC_vsum2sws = 992
PPC_vsum4sbs = 993
PPC_vsum4shs = 994
PPC_vsum4ubs = 995
PPC_vsumsws = 996
PPC_vupkhpx = 997
PPC_vupkhsb = 998
PPC_vupkhsh = 999
PPC_vupklpx = 1000
PPC_vupklsb = 1001
PPC_vupklsh = 1002
PPC_vxor = 1003
PPC_lxsdx = 1004
PPC_lxvd2x = 1005
PPC_lxvdsx = 1006
PPC_lxvw4x = 1007
PPC_stxsdx = 1008
PPC_stxvd2x = 1009
PPC_stxvw4x = 1010
PPC_xsabsdp = 1011
PPC_xsadddp = 1012
PPC_xscmpodp = 1013
PPC_xscmpudp = 1014
PPC_xscpsgndp = 1015
PPC_xscvdpsp = 1016
PPC_xscvdpsxds = 1017
PPC_xscvdpsxws = 1018
PPC_xscvdpuxds = 1019
PPC_xscvdpuxws = 1020
PPC_xscvspdp = 1021
PPC_xscvsxddp = 1022
PPC_xscvuxddp = 1023
PPC_xsdivdp = 1024
PPC_xsmaddadp = 1025
PPC_xsmaddmdp = 1026
PPC_xsmaxdp = 1027
PPC_xsmindp = 1028
PPC_xsmsubadp = 1029
PPC_xsmsubmdp = 1030
PPC_xsmuldp = 1031
PPC_xsnabsdp = 1032
PPC_xsnegdp = 1033
PPC_xsnmaddadp = 1034
PPC_xsnmaddmdp = 1035
PPC_xsnmsubadp = 1036
PPC_xsnmsubmdp = 1037
PPC_xsrdpi = 1038
PPC_xsrdpic = 1039
PPC_xsrdpim = 1040
PPC_xsrdpip = 1041
PPC_xsrdpiz = 1042
PPC_xsredp = 1043
PPC_xsrsqrtedp = 1044
PPC_xssqrtdp = 1045
PPC_xssubdp = 1046
PPC_xstdivdp = 1047
PPC_xstsqrtdp = 1048
PPC_xvabsdp = 1049
PPC_xvabssp = 1050
PPC_xvadddp = 1051
PPC_xvaddsp = 1052
PPC_xvcmpeqdp = 1053
PPC_xvcmpeqsp = 1054
PPC_xvcmpgedp = 1055
PPC_xvcmpgesp = 1056
PPC_xvcmpgtdp = 1057
PPC_xvcmpgtsp = 1058
PPC_xvcpsgndp = 1059
PPC_xvcpsgnsp = 1060
PPC_xvcvdpsp = 1061
PPC_xvcvdpsxds = 1062
PPC_xvcvdpsxws = 1063
PPC_xvcvdpuxds = 1064
PPC_xvcvdpuxws = 1065
PPC_xvcvspdp = 1066
PPC_xvcvspsxds = 1067
PPC_xvcvspsxws = 1068
PPC_xvcvspuxds = 1069
PPC_xvcvspuxws = 1070
PPC_xvcvsxddp = 1071
PPC_xvcvsxdsp = 1072
PPC_xvcvsxwdp = 1073
PPC_xvcvsxwsp = 1074
PPC_xvcvuxddp = 1075
PPC_xvcvuxdsp = 1076
PPC_xvcvuxwdp = 1077
PPC_xvcvuxwsp = 1078
PPC_xvdivdp = 1079
PPC_xvdivsp = 1080
PPC_xvmaddadp = 1081
PPC_xvmaddasp = 1082
PPC_xvmaddmdp = 1083
PPC_xvmaddmsp = 1084
PPC_xvmaxdp = 1085
PPC_xvmaxsp = 1086
PPC_xvmindp = 1087
PPC_xvminsp = 1088
PPC_xvmsubadp = 1089
PPC_xvmsubasp = 1090
PPC_xvmsubmdp = 1091
PPC_xvmsubmsp = 1092
PPC_xvmuldp = 1093
PPC_xvmulsp = 1094
PPC_xvnabsdp = 1095
PPC_xvnabssp = 1096
PPC_xvnegdp = 1097
PPC_xvnegsp = 1098
PPC_xvnmaddadp = 1099
PPC_xvnmaddasp = 1100
PPC_xvnmaddmdp = 1101
PPC_xvnmaddmsp = 1102
PPC_xvnmsubadp = 1103
PPC_xvnmsubasp = 1104
PPC_xvnmsubmdp = 1105
PPC_xvnmsubmsp = 1106
PPC_xvrdpi = 1107
PPC_xvrdpic = 1108
PPC_xvrdpim = 1109
PPC_xvrdpip = 1110
PPC_xvrdpiz = 1111
PPC_xvredp = 1112
PPC_xvresp = 1113
PPC_xvrspi = 1114
PPC_xvrspic = 1115
PPC_xvrspim = 1116
PPC_xvrspip = 1117
PPC_xvrspiz = 1118
PPC_xvrsqrtedp = 1119
PPC_xvrsqrtesp = 1120
PPC_xvsqrtdp = 1121
PPC_xvsqrtsp = 1122
PPC_xvsubdp = 1123
PPC_xvsubsp = 1124
PPC_xvtdivdp = 1125
PPC_xvtdivsp = 1126
PPC_xvtsqrtdp = 1127
PPC_xvtsqrtsp = 1128
PPC_xxland = 1129
PPC_xxlandc = 1130
PPC_xxlnor = 1131
PPC_xxlor = 1132
PPC_xxlxor = 1133
PPC_xxmrghw = 1134
PPC_xxmrglw = 1135
PPC_xxpermdi = 1136
PPC_xxsel = 1137
PPC_xxsldwi = 1138
PPC_xxspltw = 1139
PPC_wait = 1140
PPC_dss = 1141
PPC_dssall = 1142
PPC_dst = 1143
PPC_dstt = 1144
PPC_dstst = 1145
PPC_dststt = 1146
PPC_lvlx = 1147
PPC_lvlxl = 1148
PPC_lvrx = 1149
PPC_lvrxl = 1150
PPC_stvlx = 1151
PPC_stvlxl = 1152
PPC_stvrx = 1153
PPC_stvrxl = 1154
PPC_add16i = 1155
PPC_add2i = 1156
PPC_add2is = 1157
PPC_and2i = 1158
PPC_and2is = 1159
PPC_cmp16i = 1160
PPC_cmph = 1161
PPC_cmph16i = 1162
PPC_cmphl = 1163
PPC_cmphl16i = 1164
PPC_cmpl16i = 1165
PPC_mull2i = 1166
PPC_or2i = 1167
PPC_or2is = 1168
PPC_rlw = 1169
PPC_rlwi = 1170
PPC_bclri = 1171
PPC_bgeni = 1172
PPC_bmaski = 1173
PPC_bseti = 1174
PPC_btsti = 1175
PPC_extzb = 1176
PPC_extzh = 1177
PPC_illegal = 1178
PPC_mfar = 1179
PPC_mtar = 1180
PPC_sub = 1181
PPC_sub16i = 1182
PPC_sub2i = 1183
PPC_sub2is = 1184
PPC_extldi = 1185
PPC_extrdi = 1186
PPC_insrdi = 1187
PPC_rotldi = 1188
PPC_rotrdi = 1189
PPC_rotld = 1190
PPC_sldi = 1191
PPC_srdi = 1192
PPC_clrldi = 1193
PPC_clrrdi = 1194
PPC_clrlsldi = 1195
PPC_xnop = 1196
PPC_hnop = 1197
PPC_dcbfl = 1198
PPC_dcbflp = 1199
PPC_dcbtt = 1200
PPC_dcbtstt = 1201
PPC_lwsync = 1202
PPC_ptesync = 1203
PPC_waitrsv = 1204
PPC_waitimpl = 1205
PPC_evmr = 1206
PPC_evnot = 1207
PPC_mtcr = 1208
PPC_xvmovdp = 1209
PPC_xvmovsp = 1210
PPC_xxspltd = 1211
PPC_xxmrghd = 1212
PPC_xxmrgld = 1213
PPC_xxswapd = 1214
PPC_dcbz128 = 1215
PPC_mtmsree = 1216
PPC_vcfpsxws = 1217
PPC_vcfpuxws = 1218
PPC_vcsxwfp = 1219
PPC_vcuxwfp = 1220
PPC_vmaddcfp = 1221
PPC_vmsum3fp = 1222
PPC_vmsum4fp = 1223
PPC_vmulfp = 1224
PPC_vpermwi = 1225
PPC_vpkd3d = 1226
PPC_vrlimi = 1227
PPC_vupkd3d = 1228
PPC_ps_cmpu0 = 1229
PPC_psq_lx = 1230
PPC_psq_stx = 1231
PPC_ps_sum0 = 1232
PPC_ps_sum1 = 1233
PPC_ps_muls0 = 1234
PPC_ps_muls1 = 1235
PPC_ps_madds0 = 1236
PPC_ps_madds1 = 1237
PPC_ps_div = 1238
PPC_ps_sub = 1239
PPC_ps_add = 1240
PPC_ps_sel = 1241
PPC_ps_res = 1242
PPC_ps_mul = 1243
PPC_ps_rsqrte = 1244
PPC_ps_msub = 1245
PPC_ps_madd = 1246
PPC_ps_nmsub = 1247
PPC_ps_nmadd = 1248
PPC_ps_cmpo0 = 1249
PPC_psq_lux = 1250
PPC_psq_stux = 1251
PPC_ps_neg = 1252
PPC_ps_cmpu1 = 1253
PPC_ps_mr = 1254
PPC_ps_cmpo1 = 1255
PPC_ps_nabs = 1256
PPC_ps_abs = 1257
PPC_ps_merge00 = 1258
PPC_ps_merge01 = 1259
PPC_ps_merge10 = 1260
PPC_ps_merge11 = 1261
PPC_dcbz_l = 1262
PPC_psq_l = 1263
PPC_psq_lu = 1264
PPC_psq_st = 1265
PPC_psq_stu = 1266
PPC_evfsmadd = 1267
PPC_evfsmsub = 1268
PPC_evfssqrt = 1269
PPC_evfsnmadd = 1270
PPC_evfsnmsub = 1271
PPC_evfsmax = 1272
PPC_evfsmin = 1273
PPC_evfsaddsub = 1274
PPC_evfssubadd = 1275
PPC_evfssum = 1276
PPC_evfsdiff = 1277
PPC_evfssumdiff = 1278
PPC_evfsdiffsum = 1279
PPC_evfsaddx = 1280
PPC_evfssubx = 1281
PPC_evfsaddsubx = 1282
PPC_evfssubaddx = 1283
PPC_evfsmulx = 1284
PPC_evfsmule = 1285
PPC_evfsmulo = 1286
PPC_evfscfh = 1287
PPC_evfscth = 1288
PPC_efsmax = 1289
PPC_efsmin = 1290
PPC_efsmadd = 1291
PPC_efsmsub = 1292
PPC_efssqrt = 1293
PPC_efsnmadd = 1294
PPC_efsnmsub = 1295
PPC_efscfh = 1296
PPC_efscth = 1297
PPC_lmvgprw = 1298
PPC_stmvgprw = 1299
PPC_lmvsprw = 1300
PPC_stmvsprw = 1301
PPC_lmvsrrw = 1302
PPC_stmvsrrw = 1303
PPC_lmvcsrrw = 1304
PPC_stmvcsrrw = 1305
PPC_lmvdsrrw = 1306
PPC_stmvdsrrw = 1307
PPC_lmvmcsrrw = 1308
PPC_stmvmcsrrw = 1309
PPC_evdotpwcssi = 1310
PPC_evdotpwcsmi = 1311
PPC_evdotpwcssfr = 1312
PPC_evdotpwcssf = 1313
PPC_evdotpwgasmf = 1314
PPC_evdotpwxgasmf = 1315
PPC_evdotpwgasmfr = 1316
PPC_evdotpwxgasmfr = 1317
PPC_evdotpwgssmf = 1318
PPC_evdotpwxgssmf = 1319
PPC_evdotpwgssmfr = 1320
PPC_evdotpwxgssmfr = 1321
PPC_evdotpwcssiaaw3 = 1322
PPC_evdotpwcsmiaaw3 = 1323
PPC_evdotpwcssfraaw3 = 1324
PPC_evdotpwcssfaaw3 = 1325
PPC_evdotpwgasmfaa3 = 1326
PPC_evdotpwxgasmfaa3 = 1327
PPC_evdotpwgasmfraa3 = 1328
PPC_evdotpwxgasmfraa3 = 1329
PPC_evdotpwgssmfaa3 = 1330
PPC_evdotpwxgssmfaa3 = 1331
PPC_evdotpwgssmfraa3 = 1332
PPC_evdotpwxgssmfraa3 = 1333
PPC_evdotpwcssia = 1334
PPC_evdotpwcsmia = 1335
PPC_evdotpwcssfra = 1336
PPC_evdotpwcssfa = 1337
PPC_evdotpwgasmfa = 1338
PPC_evdotpwxgasmfa = 1339
PPC_evdotpwgasmfra = 1340
PPC_evdotpwxgasmfra = 1341
PPC_evdotpwgssmfa = 1342
PPC_evdotpwxgssmfa = 1343
PPC_evdotpwgssmfra = 1344
PPC_evdotpwxgssmfra = 1345
PPC_evdotpwcssiaaw = 1346
PPC_evdotpwcsmiaaw = 1347
PPC_evdotpwcssfraaw = 1348
PPC_evdotpwcssfaaw = 1349
PPC_evdotpwgasmfaa = 1350
PPC_evdotpwxgasmfaa = 1351
PPC_evdotpwgasmfraa = 1352
PPC_evdotpwxgasmfraa = 1353
PPC_evdotpwgssmfaa = 1354
PPC_evdotpwxgssmfaa = 1355
PPC_evdotpwgssmfraa = 1356
PPC_evdotpwxgssmfraa = 1357
PPC_evdotphihcssi = 1358
PPC_evdotplohcssi = 1359
PPC_evdotphihcssf = 1360
PPC_evdotplohcssf = 1361
PPC_evdotphihcsmi = 1362
PPC_evdotplohcsmi = 1363
PPC_evdotphihcssfr = 1364
PPC_evdotplohcssfr = 1365
PPC_evdotphihcssiaaw3 = 1366
PPC_evdotplohcssiaaw3 = 1367
PPC_evdotphihcssfaaw3 = 1368
PPC_evdotplohcssfaaw3 = 1369
PPC_evdotphihcsmiaaw3 = 1370
PPC_evdotplohcsmiaaw3 = 1371
PPC_evdotphihcssfraaw3 = 1372
PPC_evdotplohcssfraaw3 = 1373
PPC_evdotphihcssia = 1374
PPC_evdotplohcssia = 1375
PPC_evdotphihcssfa = 1376
PPC_evdotplohcssfa = 1377
PPC_evdotphihcsmia = 1378
PPC_evdotplohcsmia = 1379
PPC_evdotphihcssfra = 1380
PPC_evdotplohcssfra = 1381
PPC_evdotphihcssiaaw = 1382
PPC_evdotplohcssiaaw = 1383
PPC_evdotphihcssfaaw = 1384
PPC_evdotplohcssfaaw = 1385
PPC_evdotphihcsmiaaw = 1386
PPC_evdotplohcsmiaaw = 1387
PPC_evdotphihcssfraaw = 1388
PPC_evdotplohcssfraaw = 1389
PPC_evdotphausi = 1390
PPC_evdotphassi = 1391
PPC_evdotphasusi = 1392
PPC_evdotphassf = 1393
PPC_evdotphsssf = 1394
PPC_evdotphaumi = 1395
PPC_evdotphasmi = 1396
PPC_evdotphasumi = 1397
PPC_evdotphassfr = 1398
PPC_evdotphssmi = 1399
PPC_evdotphsssfr = 1400
PPC_evdotphausiaaw3 = 1401
PPC_evdotphassiaaw3 = 1402
PPC_evdotphasusiaaw3 = 1403
PPC_evdotphassfaaw3 = 1404
PPC_evdotphsssiaaw3 = 1405
PPC_evdotphsssfaaw3 = 1406
PPC_evdotphaumiaaw3 = 1407
PPC_evdotphasmiaaw3 = 1408
PPC_evdotphasumiaaw3 = 1409
PPC_evdotphassfraaw3 = 1410
PPC_evdotphssmiaaw3 = 1411
PPC_evdotphsssfraaw3 = 1412
PPC_evdotphausia = 1413
PPC_evdotphassia = 1414
PPC_evdotphasusia = 1415
PPC_evdotphassfa = 1416
PPC_evdotphsssfa = 1417
PPC_evdotphaumia = 1418
PPC_evdotphasmia = 1419
PPC_evdotphasumia = 1420
PPC_evdotphassfra = 1421
PPC_evdotphssmia = 1422
PPC_evdotphsssfra = 1423
PPC_evdotphausiaaw = 1424
PPC_evdotphassiaaw = 1425
PPC_evdotphasusiaaw = 1426
PPC_evdotphassfaaw = 1427
PPC_evdotphsssiaaw = 1428
PPC_evdotphsssfaaw = 1429
PPC_evdotphaumiaaw = 1430
PPC_evdotphasmiaaw = 1431
PPC_evdotphasumiaaw = 1432
PPC_evdotphassfraaw = 1433
PPC_evdotphssmiaaw = 1434
PPC_evdotphsssfraaw = 1435
PPC_evdotp4hgaumi = 1436
PPC_evdotp4hgasmi = 1437
PPC_evdotp4hgasumi = 1438
PPC_evdotp4hgasmf = 1439
PPC_evdotp4hgssmi = 1440
PPC_evdotp4hgssmf = 1441
PPC_evdotp4hxgasmi = 1442
PPC_evdotp4hxgasmf = 1443
PPC_evdotpbaumi = 1444
PPC_evdotpbasmi = 1445
PPC_evdotpbasumi = 1446
PPC_evdotp4hxgssmi = 1447
PPC_evdotp4hxgssmf = 1448
PPC_evdotp4hgaumiaa3 = 1449
PPC_evdotp4hgasmiaa3 = 1450
PPC_evdotp4hgasumiaa3 = 1451
PPC_evdotp4hgasmfaa3 = 1452
PPC_evdotp4hgssmiaa3 = 1453
PPC_evdotp4hgssmfaa3 = 1454
PPC_evdotp4hxgasmiaa3 = 1455
PPC_evdotp4hxgasmfaa3 = 1456
PPC_evdotpbaumiaaw3 = 1457
PPC_evdotpbasmiaaw3 = 1458
PPC_evdotpbasumiaaw3 = 1459
PPC_evdotp4hxgssmiaa3 = 1460
PPC_evdotp4hxgssmfaa3 = 1461
PPC_evdotp4hgaumia = 1462
PPC_evdotp4hgasmia = 1463
PPC_evdotp4hgasumia = 1464
PPC_evdotp4hgasmfa = 1465
PPC_evdotp4hgssmia = 1466
PPC_evdotp4hgssmfa = 1467
PPC_evdotp4hxgasmia = 1468
PPC_evdotp4hxgasmfa = 1469
PPC_evdotpbaumia = 1470
PPC_evdotpbasmia = 1471
PPC_evdotpbasumia = 1472
PPC_evdotp4hxgssmia = 1473
PPC_evdotp4hxgssmfa = 1474
PPC_evdotp4hgaumiaa = 1475
PPC_evdotp4hgasmiaa = 1476
PPC_evdotp4hgasumiaa = 1477
PPC_evdotp4hgasmfaa = 1478
PPC_evdotp4hgssmiaa = 1479
PPC_evdotp4hgssmfaa = 1480
PPC_evdotp4hxgasmiaa = 1481
PPC_evdotp4hxgasmfaa = 1482
PPC_evdotpbaumiaaw = 1483
PPC_evdotpbasmiaaw = 1484
PPC_evdotpbasumiaaw = 1485
PPC_evdotp4hxgssmiaa = 1486
PPC_evdotp4hxgssmfaa = 1487
PPC_evdotpwausi = 1488
PPC_evdotpwassi = 1489
PPC_evdotpwasusi = 1490
PPC_evdotpwaumi = 1491
PPC_evdotpwasmi = 1492
PPC_evdotpwasumi = 1493
PPC_evdotpwssmi = 1494
PPC_evdotpwausiaa3 = 1495
PPC_evdotpwassiaa3 = 1496
PPC_evdotpwasusiaa3 = 1497
PPC_evdotpwsssiaa3 = 1498
PPC_evdotpwaumiaa3 = 1499
PPC_evdotpwasmiaa3 = 1500
PPC_evdotpwasumiaa3 = 1501
PPC_evdotpwssmiaa3 = 1502
PPC_evdotpwausia = 1503
PPC_evdotpwassia = 1504
PPC_evdotpwasusia = 1505
PPC_evdotpwaumia = 1506
PPC_evdotpwasmia = 1507
PPC_evdotpwasumia = 1508
PPC_evdotpwssmia = 1509
PPC_evdotpwausiaa = 1510
PPC_evdotpwassiaa = 1511
PPC_evdotpwasusiaa = 1512
PPC_evdotpwsssiaa = 1513
PPC_evdotpwaumiaa = 1514
PPC_evdotpwasmiaa = 1515
PPC_evdotpwasumiaa = 1516
PPC_evdotpwssmiaa = 1517
PPC_evaddih = 1518
PPC_evaddib = 1519
PPC_evsubifh = 1520
PPC_evsubifb = 1521
PPC_evabsb = 1522
PPC_evabsh = 1523
PPC_evabsd = 1524
PPC_evabss = 1525
PPC_evabsbs = 1526
PPC_evabshs = 1527
PPC_evabsds = 1528
PPC_evnegwo = 1529
PPC_evnegb = 1530
PPC_evnegbo = 1531
PPC_evnegh = 1532
PPC_evnegho = 1533
PPC_evnegd = 1534
PPC_evnegs = 1535
PPC_evnegwos = 1536
PPC_evnegbs = 1537
PPC_evnegbos = 1538
PPC_evneghs = 1539
PPC_evneghos = 1540
PPC_evnegds = 1541
PPC_evextzb = 1542
PPC_evextsbh = 1543
PPC_evextsw = 1544
PPC_evrndhb = 1545
PPC_evrnddw = 1546
PPC_evrndwhus = 1547
PPC_evrndwhss = 1548
PPC_evrndhbus = 1549
PPC_evrndhbss = 1550
PPC_evrnddwus = 1551
PPC_evrnddwss = 1552
PPC_evrndwnh = 1553
PPC_evrndhnb = 1554
PPC_evrnddnw = 1555
PPC_evrndwnhus = 1556
PPC_evrndwnhss = 1557
PPC_evrndhnbus = 1558
PPC_evrndhnbss = 1559
PPC_evrnddnwus = 1560
PPC_evrnddnwss = 1561
PPC_evcntlzh = 1562
PPC_evcntlsh = 1563
PPC_evpopcntb = 1564
PPC_circinc = 1565
PPC_evunpkhibui = 1566
PPC_evunpkhibsi = 1567
PPC_evunpkhihui = 1568
PPC_evunpkhihsi = 1569
PPC_evunpklobui = 1570
PPC_evunpklobsi = 1571
PPC_evunpklohui = 1572
PPC_evunpklohsi = 1573
PPC_evunpklohf = 1574
PPC_evunpkhihf = 1575
PPC_evunpklowgsf = 1576
PPC_evunpkhiwgsf = 1577
PPC_evsatsduw = 1578
PPC_evsatsdsw = 1579
PPC_evsatshub = 1580
PPC_evsatshsb = 1581
PPC_evsatuwuh = 1582
PPC_evsatswsh = 1583
PPC_evsatswuh = 1584
PPC_evsatuhub = 1585
PPC_evsatuduw = 1586
PPC_evsatuwsw = 1587
PPC_evsatshuh = 1588
PPC_evsatuhsh = 1589
PPC_evsatswuw = 1590
PPC_evsatswgsdf = 1591
PPC_evsatsbub = 1592
PPC_evsatubsb = 1593
PPC_evmaxhpuw = 1594
PPC_evmaxhpsw = 1595
PPC_evmaxbpuh = 1596
PPC_evmaxbpsh = 1597
PPC_evmaxwpud = 1598
PPC_evmaxwpsd = 1599
PPC_evminhpuw = 1600
PPC_evminhpsw = 1601
PPC_evminbpuh = 1602
PPC_evminbpsh = 1603
PPC_evminwpud = 1604
PPC_evminwpsd = 1605
PPC_evmaxmagws = 1606
PPC_evsl = 1607
PPC_evsli = 1608
PPC_evsplatie = 1609
PPC_evsplatib = 1610
PPC_evsplatibe = 1611
PPC_evsplatih = 1612
PPC_evsplatihe = 1613
PPC_evsplatid = 1614
PPC_evsplatia = 1615
PPC_evsplatiea = 1616
PPC_evsplatiba = 1617
PPC_evsplatibea = 1618
PPC_evsplatiha = 1619
PPC_evsplatihea = 1620
PPC_evsplatida = 1621
PPC_evsplatfio = 1622
PPC_evsplatfib = 1623
PPC_evsplatfibo = 1624
PPC_evsplatfih = 1625
PPC_evsplatfiho = 1626
PPC_evsplatfid = 1627
PPC_evsplatfia = 1628
PPC_evsplatfioa = 1629
PPC_evsplatfiba = 1630
PPC_evsplatfiboa = 1631
PPC_evsplatfiha = 1632
PPC_evsplatfihoa = 1633
PPC_evsplatfida = 1634
PPC_evcmpgtdu = 1635
PPC_evcmpgtds = 1636
PPC_evcmpltdu = 1637
PPC_evcmpltds = 1638
PPC_evcmpeqd = 1639
PPC_evswapbhilo = 1640
PPC_evswapblohi = 1641
PPC_evswaphhilo = 1642
PPC_evswaphlohi = 1643
PPC_evswaphe = 1644
PPC_evswaphhi = 1645
PPC_evswaphlo = 1646
PPC_evswapho = 1647
PPC_evinsb = 1648
PPC_evxtrb = 1649
PPC_evsplath = 1650
PPC_evsplatb = 1651
PPC_evinsh = 1652
PPC_evclrbe = 1653
PPC_evclrbo = 1654
PPC_evxtrh = 1655
PPC_evclrh = 1656
PPC_evselbitm0 = 1657
PPC_evselbitm1 = 1658
PPC_evselbit = 1659
PPC_evperm = 1660
PPC_evperm2 = 1661
PPC_evperm3 = 1662
PPC_evxtrd = 1663
PPC_evsrbu = 1664
PPC_evsrbs = 1665
PPC_evsrbiu = 1666
PPC_evsrbis = 1667
PPC_evslb = 1668
PPC_evrlb = 1669
PPC_evslbi = 1670
PPC_evrlbi = 1671
PPC_evsrhu = 1672
PPC_evsrhs = 1673
PPC_evsrhiu = 1674
PPC_evsrhis = 1675
PPC_evslh = 1676
PPC_evrlh = 1677
PPC_evslhi = 1678
PPC_evrlhi = 1679
PPC_evsru = 1680
PPC_evsrs = 1681
PPC_evsriu = 1682
PPC_evsris = 1683
PPC_evlvsl = 1684
PPC_evlvsr = 1685
PPC_evsroiu = 1686
PPC_evsloi = 1687
PPC_evsrois = 1688
PPC_evldbx = 1689
PPC_evldb = 1690
PPC_evlhhsplathx = 1691
PPC_evlhhsplath = 1692
PPC_evlwbsplatwx = 1693
PPC_evlwbsplatw = 1694
PPC_evlwhsplatwx = 1695
PPC_evlwhsplatw = 1696
PPC_evlbbsplatbx = 1697
PPC_evlbbsplatb = 1698
PPC_evstdbx = 1699
PPC_evstdb = 1700
PPC_evlwbex = 1701
PPC_evlwbe = 1702
PPC_evlwboux = 1703
PPC_evlwbou = 1704
PPC_evlwbosx = 1705
PPC_evlwbos = 1706
PPC_evstwbex = 1707
PPC_evstwbe = 1708
PPC_evstwbox = 1709
PPC_evstwbo = 1710
PPC_evstwbx = 1711
PPC_evstwb = 1712
PPC_evsthbx = 1713
PPC_evsthb = 1714
PPC_evlddmx = 1715
PPC_evlddu = 1716
PPC_evldwmx = 1717
PPC_evldwu = 1718
PPC_evldhmx = 1719
PPC_evldhu = 1720
PPC_evldbmx = 1721
PPC_evldbu = 1722
PPC_evlhhesplatmx = 1723
PPC_evlhhesplatu = 1724
PPC_evlhhsplathmx = 1725
PPC_evlhhsplathu = 1726
PPC_evlhhousplatmx = 1727
PPC_evlhhousplatu = 1728
PPC_evlhhossplatmx = 1729
PPC_evlhhossplatu = 1730
PPC_evlwhemx = 1731
PPC_evlwheu = 1732
PPC_evlwbsplatwmx = 1733
PPC_evlwbsplatwu = 1734
PPC_evlwhoumx = 1735
PPC_evlwhouu = 1736
PPC_evlwhosmx = 1737
PPC_evlwhosu = 1738
PPC_evlwwsplatmx = 1739
PPC_evlwwsplatu = 1740
PPC_evlwhsplatwmx = 1741
PPC_evlwhsplatwu = 1742
PPC_evlwhsplatmx = 1743
PPC_evlwhsplatu = 1744
PPC_evlbbsplatbmx = 1745
PPC_evlbbsplatbu = 1746
PPC_evstddmx = 1747
PPC_evstddu = 1748
PPC_evstdwmx = 1749
PPC_evstdwu = 1750
PPC_evstdhmx = 1751
PPC_evstdhu = 1752
PPC_evstdbmx = 1753
PPC_evstdbu = 1754
PPC_evlwbemx = 1755
PPC_evlwbeu = 1756
PPC_evlwboumx = 1757
PPC_evlwbouu = 1758
PPC_evlwbosmx = 1759
PPC_evlwbosu = 1760
PPC_evstwhemx = 1761
PPC_evstwheu = 1762
PPC_evstwbemx = 1763
PPC_evstwbeu = 1764
PPC_evstwhomx = 1765
PPC_evstwhou = 1766
PPC_evstwbomx = 1767
PPC_evstwbou = 1768
PPC_evstwwemx = 1769
PPC_evstwweu = 1770
PPC_evstwbmx = 1771
PPC_evstwbu = 1772
PPC_evstwwomx = 1773
PPC_evstwwou = 1774
PPC_evsthbmx = 1775
PPC_evsthbu = 1776
PPC_evmhusi = 1777
PPC_evmhssi = 1778
PPC_evmhsusi = 1779
PPC_evmhssf = 1780
PPC_evmhumi = 1781
PPC_evmhssfr = 1782
PPC_evmhesumi = 1783
PPC_evmhosumi = 1784
PPC_evmbeumi = 1785
PPC_evmbesmi = 1786
PPC_evmbesumi = 1787
PPC_evmboumi = 1788
PPC_evmbosmi = 1789
PPC_evmbosumi = 1790
PPC_evmhesumia = 1791
PPC_evmhosumia = 1792
PPC_evmbeumia = 1793
PPC_evmbesmia = 1794
PPC_evmbesumia = 1795
PPC_evmboumia = 1796
PPC_evmbosmia = 1797
PPC_evmbosumia = 1798
PPC_evmwusiw = 1799
PPC_evmwssiw = 1800
PPC_evmwhssfr = 1801
PPC_evmwehgsmfr = 1802
PPC_evmwehgsmf = 1803
PPC_evmwohgsmfr = 1804
PPC_evmwohgsmf = 1805
PPC_evmwhssfra = 1806
PPC_evmwehgsmfra = 1807
PPC_evmwehgsmfa = 1808
PPC_evmwohgsmfra = 1809
PPC_evmwohgsmfa = 1810
PPC_evaddusiaa = 1811
PPC_evaddssiaa = 1812
PPC_evsubfusiaa = 1813
PPC_evsubfssiaa = 1814
PPC_evaddsmiaa = 1815
PPC_evsubfsmiaa = 1816
PPC_evaddh = 1817
PPC_evaddhss = 1818
PPC_evsubfh = 1819
PPC_evsubfhss = 1820
PPC_evaddhx = 1821
PPC_evaddhxss = 1822
PPC_evsubfhx = 1823
PPC_evsubfhxss = 1824
PPC_evaddd = 1825
PPC_evadddss = 1826
PPC_evsubfd = 1827
PPC_evsubfdss = 1828
PPC_evaddb = 1829
PPC_evaddbss = 1830
PPC_evsubfb = 1831
PPC_evsubfbss = 1832
PPC_evaddsubfh = 1833
PPC_evaddsubfhss = 1834
PPC_evsubfaddh = 1835
PPC_evsubfaddhss = 1836
PPC_evaddsubfhx = 1837
PPC_evaddsubfhxss = 1838
PPC_evsubfaddhx = 1839
PPC_evsubfaddhxss = 1840
PPC_evadddus = 1841
PPC_evaddbus = 1842
PPC_evsubfdus = 1843
PPC_evsubfbus = 1844
PPC_evaddwus = 1845
PPC_evaddwxus = 1846
PPC_evsubfwus = 1847
PPC_evsubfwxus = 1848
PPC_evadd2subf2h = 1849
PPC_evadd2subf2hss = 1850
PPC_evsubf2add2h = 1851
PPC_evsubf2add2hss = 1852
PPC_evaddhus = 1853
PPC_evaddhxus = 1854
PPC_evsubfhus = 1855
PPC_evsubfhxus = 1856
PPC_evaddwss = 1857
PPC_evsubfwss = 1858
PPC_evaddwx = 1859
PPC_evaddwxss = 1860
PPC_evsubfwx = 1861
PPC_evsubfwxss = 1862
PPC_evaddsubfw = 1863
PPC_evaddsubfwss = 1864
PPC_evsubfaddw = 1865
PPC_evsubfaddwss = 1866
PPC_evaddsubfwx = 1867
PPC_evaddsubfwxss = 1868
PPC_evsubfaddwx = 1869
PPC_evsubfaddwxss = 1870
PPC_evmar = 1871
PPC_evsumwu = 1872
PPC_evsumws = 1873
PPC_evsum4bu = 1874
PPC_evsum4bs = 1875
PPC_evsum2hu = 1876
PPC_evsum2hs = 1877
PPC_evdiff2his = 1878
PPC_evsum2his = 1879
PPC_evsumwua = 1880
PPC_evsumwsa = 1881
PPC_evsum4bua = 1882
PPC_evsum4bsa = 1883
PPC_evsum2hua = 1884
PPC_evsum2hsa = 1885
PPC_evdiff2hisa = 1886
PPC_evsum2hisa = 1887
PPC_evsumwuaa = 1888
PPC_evsumwsaa = 1889
PPC_evsum4buaaw = 1890
PPC_evsum4bsaaw = 1891
PPC_evsum2huaaw = 1892
PPC_evsum2hsaaw = 1893
PPC_evdiff2hisaaw = 1894
PPC_evsum2hisaaw = 1895
PPC_evdivwsf = 1896
PPC_evdivwuf = 1897
PPC_evdivs = 1898
PPC_evdivu = 1899
PPC_evaddwegsi = 1900
PPC_evaddwegsf = 1901
PPC_evsubfwegsi = 1902
PPC_evsubfwegsf = 1903
PPC_evaddwogsi = 1904
PPC_evaddwogsf = 1905
PPC_evsubfwogsi = 1906
PPC_evsubfwogsf = 1907
PPC_evaddhhiuw = 1908
PPC_evaddhhisw = 1909
PPC_evsubfhhiuw = 1910
PPC_evsubfhhisw = 1911
PPC_evaddhlouw = 1912
PPC_evaddhlosw = 1913
PPC_evsubfhlouw = 1914
PPC_evsubfhlosw = 1915
PPC_evmhesusiaaw = 1916
PPC_evmhosusiaaw = 1917
PPC_evmhesumiaaw = 1918
PPC_evmhosumiaaw = 1919
PPC_evmbeusiaah = 1920
PPC_evmbessiaah = 1921
PPC_evmbesusiaah = 1922
PPC_evmbousiaah = 1923
PPC_evmbossiaah = 1924
PPC_evmbosusiaah = 1925
PPC_evmbeumiaah = 1926
PPC_evmbesmiaah = 1927
PPC_evmbesumiaah = 1928
PPC_evmboumiaah = 1929
PPC_evmbosmiaah = 1930
PPC_evmbosumiaah = 1931
PPC_evmwlusiaaw3 = 1932
PPC_evmwlssiaaw3 = 1933
PPC_evmwhssfraaw3 = 1934
PPC_evmwhssfaaw3 = 1935
PPC_evmwhssfraaw = 1936
PPC_evmwhssfaaw = 1937
PPC_evmwlumiaaw3 = 1938
PPC_evmwlsmiaaw3 = 1939
PPC_evmwusiaa = 1940
PPC_evmwssiaa = 1941
PPC_evmwehgsmfraa = 1942
PPC_evmwehgsmfaa = 1943
PPC_evmwohgsmfraa = 1944
PPC_evmwohgsmfaa = 1945
PPC_evmhesusianw = 1946
PPC_evmhosusianw = 1947
PPC_evmhesumianw = 1948
PPC_evmhosumianw = 1949
PPC_evmbeusianh = 1950
PPC_evmbessianh = 1951
PPC_evmbesusianh = 1952
PPC_evmbousianh = 1953
PPC_evmbossianh = 1954
PPC_evmbosusianh = 1955
PPC_evmbeumianh = 1956
PPC_evmbesmianh = 1957
PPC_evmbesumianh = 1958
PPC_evmboumianh = 1959
PPC_evmbosmianh = 1960
PPC_evmbosumianh = 1961
PPC_evmwlusianw3 = 1962
PPC_evmwlssianw3 = 1963
PPC_evmwhssfranw3 = 1964
PPC_evmwhssfanw3 = 1965
PPC_evmwhssfranw = 1966
PPC_evmwhssfanw = 1967
PPC_evmwlumianw3 = 1968
PPC_evmwlsmianw3 = 1969
PPC_evmwusian = 1970
PPC_evmwssian = 1971
PPC_evmwehgsmfran = 1972
PPC_evmwehgsmfan = 1973
PPC_evmwohgsmfran = 1974
PPC_evmwohgsmfan = 1975
PPC_evseteqb = 1976
PPC_evseteqh = 1977
PPC_evseteqw = 1978
PPC_evsetgthu = 1979
PPC_evsetgths = 1980
PPC_evsetgtwu = 1981
PPC_evsetgtws = 1982
PPC_evsetgtbu = 1983
PPC_evsetgtbs = 1984
PPC_evsetltbu = 1985
PPC_evsetltbs = 1986
PPC_evsetlthu = 1987
PPC_evsetlths = 1988
PPC_evsetltwu = 1989
PPC_evsetltws = 1990
PPC_evsaduw = 1991
PPC_evsadsw = 1992
PPC_evsad4ub = 1993
PPC_evsad4sb = 1994
PPC_evsad2uh = 1995
PPC_evsad2sh = 1996
PPC_evsaduwa = 1997
PPC_evsadswa = 1998
PPC_evsad4uba = 1999
PPC_evsad4sba = 2000
PPC_evsad2uha = 2001
PPC_evsad2sha = 2002
PPC_evabsdifuw = 2003
PPC_evabsdifsw = 2004
PPC_evabsdifub = 2005
PPC_evabsdifsb = 2006
PPC_evabsdifuh = 2007
PPC_evabsdifsh = 2008
PPC_evsaduwaa = 2009
PPC_evsadswaa = 2010
PPC_evsad4ubaaw = 2011
PPC_evsad4sbaaw = 2012
PPC_evsad2uhaaw = 2013
PPC_evsad2shaaw = 2014
PPC_evpkshubs = 2015
PPC_evpkshsbs = 2016
PPC_evpkswuhs = 2017
PPC_evpkswshs = 2018
PPC_evpkuhubs = 2019
PPC_evpkuwuhs = 2020
PPC_evpkswshilvs = 2021
PPC_evpkswgshefrs = 2022
PPC_evpkswshfrs = 2023
PPC_evpkswshilvfrs = 2024
PPC_evpksdswfrs = 2025
PPC_evpksdshefrs = 2026
PPC_evpkuduws = 2027
PPC_evpksdsws = 2028
PPC_evpkswgswfrs = 2029
PPC_evilveh = 2030
PPC_evilveoh = 2031
PPC_evilvhih = 2032
PPC_evilvhiloh = 2033
PPC_evilvloh = 2034
PPC_evilvlohih = 2035
PPC_evilvoeh = 2036
PPC_evilvoh = 2037
PPC_evdlveb = 2038
PPC_evdlveh = 2039
PPC_evdlveob = 2040
PPC_evdlveoh = 2041
PPC_evdlvob = 2042
PPC_evdlvoh = 2043
PPC_evdlvoeb = 2044
PPC_evdlvoeh = 2045
PPC_evmaxbu = 2046
PPC_evmaxbs = 2047
PPC_evmaxhu = 2048
PPC_evmaxhs = 2049
PPC_evmaxwu = 2050
PPC_evmaxws = 2051
PPC_evmaxdu = 2052
PPC_evmaxds = 2053
PPC_evminbu = 2054
PPC_evminbs = 2055
PPC_evminhu = 2056
PPC_evminhs = 2057
PPC_evminwu = 2058
PPC_evminws = 2059
PPC_evmindu = 2060
PPC_evminds = 2061
PPC_evavgwu = 2062
PPC_evavgws = 2063
PPC_evavgbu = 2064
PPC_evavgbs = 2065
PPC_evavghu = 2066
PPC_evavghs = 2067
PPC_evavgdu = 2068
PPC_evavgds = 2069
PPC_evavgwur = 2070
PPC_evavgwsr = 2071
PPC_evavgbur = 2072
PPC_evavgbsr = 2073
PPC_evavghur = 2074
PPC_evavghsr = 2075
PPC_evavgdur = 2076
PPC_evavgdsr = 2077
PPC_tdui = 2078
PPC_tdu = 2079
PPC_twui = 2080
PPC_twu = 2081
PPC_bctar = 2082
PPC_clrbhrb = 2083
PPC_mfbhrbe = 2084
PPC_mtsle = 2085
PPC_mfvsrd = 2086
PPC_mfvsrwz = 2087
PPC_mtvsrd = 2088
PPC_mtvsrwa = 2089
PPC_mtvsrwz = 2090
PPC_fmrgew = 2091
PPC_fmrgow = 2092
PPC_vpksdss = 2093
PPC_vpksdus = 2094
PPC_vpkudus = 2095
PPC_vpkudum = 2096
PPC_vupkhsw = 2097
PPC_vupklsw = 2098
PPC_vmrgew = 2099
PPC_vmrgow = 2100
PPC_vaddudm = 2101
PPC_vadduqm = 2102
PPC_vaddeuqm = 2103
PPC_vaddcuq = 2104
PPC_vaddecuq = 2105
PPC_vsubudm = 2106
PPC_vsubuqm = 2107
PPC_vsubeuqm = 2108
PPC_vsubcuq = 2109
PPC_vsubecuq = 2110
PPC_vmulesw = 2111
PPC_vmuleuw = 2112
PPC_vmulosw = 2113
PPC_vmulouw = 2114
PPC_vmuluwm = 2115
PPC_vmaxsd = 2116
PPC_vmaxud = 2117
PPC_vminsd = 2118
PPC_vminud = 2119
PPC_vcmpequd = 2120
PPC_vcmpgtsd = 2121
PPC_vcmpgtud = 2122
PPC_veqv = 2123
PPC_vnand = 2124
PPC_vorc = 2125
PPC_vrld = 2126
PPC_vsld = 2127
PPC_vsrd = 2128
PPC_vsrad = 2129
PPC_vcipher = 2130
PPC_vcipherlast = 2131
PPC_vncipher = 2132
PPC_vncipherlast = 2133
PPC_vsbox = 2134
PPC_vshasigmad = 2135
PPC_vshasigmaw = 2136
PPC_vpmsumb = 2137
PPC_vpmsumd = 2138
PPC_vpmsumh = 2139
PPC_vpmsumw = 2140
PPC_vpermxor = 2141
PPC_vgbbd = 2142
PPC_vclzb = 2143
PPC_vclzh = 2144
PPC_vclzw = 2145
PPC_vclzd = 2146
PPC_vpopcntb = 2147
PPC_vpopcntd = 2148
PPC_vpopcnth = 2149
PPC_vpopcntw = 2150
PPC_vbpermq = 2151
PPC_bcdadd = 2152
PPC_bcdsub = 2153
PPC_lxsiwax = 2154
PPC_lxsspx = 2155
PPC_lxsiwzx = 2156
PPC_stxsiwx = 2157
PPC_stxsspx = 2158
PPC_xsaddsp = 2159
PPC_xscvdpspn = 2160
PPC_xscvspdpn = 2161
PPC_xscvsxdsp = 2162
PPC_xscvuxdsp = 2163
PPC_xsdivsp = 2164
PPC_xsmaddasp = 2165
PPC_xsmaddmsp = 2166
PPC_xsmsubasp = 2167
PPC_xsmsubmsp = 2168
PPC_xsmulsp = 2169
PPC_xsnmaddasp = 2170
PPC_xsnmaddmsp = 2171
PPC_xsnmsubasp = 2172
PPC_xsnmsubmsp = 2173
PPC_xsresp = 2174
PPC_xsrsp = 2175
PPC_xsrsqrtesp = 2176
PPC_xssqrtsp = 2177
PPC_xssubsp = 2178
PPC_xxleqv = 2179
PPC_xxlnand = 2180
PPC_xxlorc = 2181
PPC_lqarx = 2182
PPC_stqcx = 2183
PPC_tbegin = 2184
PPC_tend = 2185
PPC_tabort = 2186
PPC_tabortwc = 2187
PPC_tabortwci = 2188
PPC_tabortdc = 2189
PPC_tabortdci = 2190
PPC_tsr = 2191
PPC_tcheck = 2192
PPC_rfebb = 2193
PPC_treclaim = 2194
PPC_trechkpt = 2195
PPC_msgsndp = 2196
PPC_msgclrp = 2197
PPC_dcblq = 2198
PPC_icblq = 2199
PPC_vmr = 2200
PPC_vnot = 2201
PPC_tendall = 2202
PPC_tsuspend = 2203
PPC_tresume = 2204
PPC_mtppr = 2205
PPC_mfppr = 2206
PPC_mtppr32 = 2207
PPC_mfppr32 = 2208
PPC_mtic = 2209
PPC_mfic = 2210
PPC_mtvtb = 2211
PPC_mfvtb = 2212
PPC_miso = 2213
PPC_mdoio = 2214
PPC_mdoom = 2215
PPC_yield = 2216
PPC_addbss = 2217
PPC_addhss = 2218
PPC_addwss = 2219
PPC_addbus = 2220
PPC_addhus = 2221
PPC_addwus = 2222
PPC_mulhss = 2223
PPC_mulwss = 2224
PPC_mulhus = 2225
PPC_mulwus = 2226
PPC_sat = 2227
PPC_subfbss = 2228
PPC_subfhss = 2229
PPC_subfwss = 2230
PPC_subfbus = 2231
PPC_subfhus = 2232
PPC_subfwus = 2233
PPC_satsbs = 2234
PPC_satubs = 2235
PPC_satsbu = 2236
PPC_satubu = 2237
PPC_abssb = 2238
PPC_absub = 2239
PPC_satshs = 2240
PPC_satuhs = 2241
PPC_satshu = 2242
PPC_satuhu = 2243
PPC_abssh = 2244
PPC_absuh = 2245
PPC_satsws = 2246
PPC_satuws = 2247
PPC_satswu = 2248
PPC_satuwu = 2249
PPC_abssw = 2250
PPC_absuw = 2251
PPC_dni = 2252
PPC_slbieg = 2253
PPC_slbiag = 2254
PPC_slbsync = 2255
PPC_addpcis = 2256
PPC_lnia = 2257
PPC_subpcis = 2258
PPC_cmpeqb = 2259
PPC_cmprb = 2260
PPC_cnttzw = 2261
PPC_cnttzd = 2262
PPC_darn = 2263
PPC_extswsli = 2264
PPC_maddhd = 2265
PPC_maddhdu = 2266
PPC_maddld = 2267
PPC_mcrxrx = 2268
PPC_setb = 2269
PPC_modsd = 2270
PPC_modud = 2271
PPC_modsw = 2272
PPC_moduw = 2273
PPC_mfvsrld = 2274
PPC_mtvsrdd = 2275
PPC_mtvsrws = 2276
PPC_scv = 2277
PPC_rfscv = 2278
PPC_stop = 2279
PPC_copy = 2280
PPC_paste = 2281
PPC_ldat = 2282
PPC_lwat = 2283
PPC_stdat = 2284
PPC_stwat = 2285
PPC_cpabort = 2286
PPC_wait30 = 2287
PPC_dtstsfi = 2288
PPC_dtstsfiq = 2289
PPC_bcdcfn = 2290
PPC_bcdcfz = 2291
PPC_bcdctn = 2292
PPC_bcdctz = 2293
PPC_bcdctsq = 2294
PPC_bcdcfsq = 2295
PPC_bcdsetsgn = 2296
PPC_bcdcpsgn = 2297
PPC_bcds = 2298
PPC_bcdus = 2299
PPC_bcdsr = 2300
PPC_bcdtrunc = 2301
PPC_bcdutrunc = 2302
PPC_vabsdub = 2303
PPC_vabsduh = 2304
PPC_vabsduw = 2305
PPC_vbpermd = 2306
PPC_vclzlsbb = 2307
PPC_vctzlsbb = 2308
PPC_vcmpneb = 2309
PPC_vcmpnezb = 2310
PPC_vcmpneh = 2311
PPC_vcmpnezh = 2312
PPC_vcmpnew = 2313
PPC_vcmpnezw = 2314
PPC_vctzb = 2315
PPC_vctzh = 2316
PPC_vctzw = 2317
PPC_vctzd = 2318
PPC_vextractub = 2319
PPC_vextractuh = 2320
PPC_vextractuw = 2321
PPC_vextractd = 2322
PPC_vextsb2w = 2323
PPC_vextsb2d = 2324
PPC_vextsh2w = 2325
PPC_vextsh2d = 2326
PPC_vextsw2d = 2327
PPC_vextublx = 2328
PPC_vextubrx = 2329
PPC_vextuhlx = 2330
PPC_vextuhrx = 2331
PPC_vextuwlx = 2332
PPC_vextuwrx = 2333
PPC_vinsertb = 2334
PPC_vinserth = 2335
PPC_vinsertw = 2336
PPC_vinsertd = 2337
PPC_vmul10uq = 2338
PPC_vmul10euq = 2339
PPC_vmul10cuq = 2340
PPC_vmul10ecuq = 2341
PPC_vnegw = 2342
PPC_vnegd = 2343
PPC_vpermr = 2344
PPC_vprtybw = 2345
PPC_vprtybd = 2346
PPC_vprtybq = 2347
PPC_vrlwnm = 2348
PPC_vrlwmi = 2349
PPC_vrldnm = 2350
PPC_vrldmi = 2351
PPC_vslv = 2352
PPC_vsrv = 2353
PPC_lxsd = 2354
PPC_lxssp = 2355
PPC_lxsibzx = 2356
PPC_lxsihzx = 2357
PPC_lxv = 2358
PPC_lxvb16x = 2359
PPC_lxvh8x = 2360
PPC_lxvl = 2361
PPC_lxvll = 2362
PPC_lxvwsx = 2363
PPC_lxvx = 2364
PPC_stxsd = 2365
PPC_stxsibx = 2366
PPC_stxsihx = 2367
PPC_stxssp = 2368
PPC_stxv = 2369
PPC_stxvb16x = 2370
PPC_stxvh8x = 2371
PPC_stxvl = 2372
PPC_stxvll = 2373
PPC_stxvx = 2374
PPC_xsabsqp = 2375
PPC_xsaddqp = 2376
PPC_xscmpexpqp = 2377
PPC_xscmpoqp = 2378
PPC_xscmpuqp = 2379
PPC_xscpsgnqp = 2380
PPC_xscvdpqp = 2381
PPC_xscvqpdp = 2382
PPC_xscvqpsdz = 2383
PPC_xscvqpswz = 2384
PPC_xscvqpudz = 2385
PPC_xscvqpuwz = 2386
PPC_xscvsdqp = 2387
PPC_xscvudqp = 2388
PPC_xsdivqp = 2389
PPC_xsiexpqp = 2390
PPC_xsmaddqp = 2391
PPC_xsmsubqp = 2392
PPC_xsmulqp = 2393
PPC_xsnabsqp = 2394
PPC_xsnegqp = 2395
PPC_xsnmaddqp = 2396
PPC_xsnmsubqp = 2397
PPC_xssqrtqp = 2398
PPC_xssubqp = 2399
PPC_xsxexpqp = 2400
PPC_xsxsigqp = 2401
PPC_xststdcqp = 2402
PPC_xsrqpxp = 2403
PPC_xsrqpi = 2404
PPC_xscmpeqdp = 2405
PPC_xscmpexpdp = 2406
PPC_xscmpgedp = 2407
PPC_xscmpgtdp = 2408
PPC_xsiexpdp = 2409
PPC_xsmaxcdp = 2410
PPC_xsmaxjdp = 2411
PPC_xsmincdp = 2412
PPC_xsminjdp = 2413
PPC_xviexpdp = 2414
PPC_xviexpsp = 2415
PPC_xxextractuw = 2416
PPC_xxinsertw = 2417
PPC_xxperm = 2418
PPC_xxpermr = 2419
PPC_xxspltib = 2420
PPC_xststdcdp = 2421
PPC_xststdcsp = 2422
PPC_xvtstdcdp = 2423
PPC_xvtstdcsp = 2424
PPC_xsxexpdp = 2425
PPC_xsxsigdp = 2426
PPC_xscvdphp = 2427
PPC_xscvhpdp = 2428
PPC_xvxexpdp = 2429
PPC_xvxexpsp = 2430
PPC_xvxsigdp = 2431
PPC_xvxsigsp = 2432
PPC_xxbrd = 2433
PPC_xxbrh = 2434
PPC_xxbrq = 2435
PPC_xxbrw = 2436
PPC_xvcvhpsp = 2437
PPC_xvcvsphp = 2438
PPC_msgsync = 2439
PPC_addex = 2440
PPC_vmsumudm = 2441
PPC_mffsce = 2442
PPC_mffscdrn = 2443
PPC_mffscdrni = 2444
PPC_mffscrn = 2445
PPC_mffscrni = 2446
PPC_mffsl = 2447
PPC_lbdcbx = 2448
PPC_lhdcbx = 2449
PPC_lwdcbx = 2450
PPC_stbdcbx = 2451
PPC_sthdcbx = 2452
PPC_stwdcbx = 2453
PPC_lbcbx = 2454
PPC_lhcbx = 2455
PPC_lwcbx = 2456
PPC_stbwtx = 2457
PPC_sthwtx = 2458
PPC_stwwtx = 2459
PPC_dsncb = 2460
PPC_ldw = 2461
PPC_stdw = 2462
PPC_lqw = 2463
PPC_stqw = 2464
PPC_ldwcb = 2465
PPC_ldbrw = 2466
PPC_ldwbrw = 2467
PPC_stdwwt = 2468
PPC_stdbrw = 2469
PPC_stdwbrw = 2470
PPC_lqdbrw = 2471
PPC_stqdbrw = 2472
PPC_lwbr = 2473
PPC_lhbr = 2474
PPC_stwbr = 2475
PPC_sthbr = 2476
PPC_ldwar = 2477
PPC_stdwc = 2478
PPC_addb = 2479
PPC_addbu = 2480
PPC_addh = 2481
PPC_addhu = 2482
PPC_subfb = 2483
PPC_subfbu = 2484
PPC_subfh = 2485
PPC_subfhu = 2486
PPC_byterevw = 2487
PPC_byterevh = 2488
PPC_hwaccel = 2489
PPC_hwacceli = 2490
PPC_ordhwaccel = 2491
PPC_ordhwacceli = 2492
PPC_osmcmd = 2493
PPC_mpure = 2494
PPC_mpuwe = 2495
PPC_mpusync = 2496
PPC_efdmax = 2497
PPC_efdmin = 2498
PPC_efdsqrt = 2499
PPC_efdcfh = 2500
PPC_efdcth = 2501
PPC_last = 2502
_9AD262722AB1BD11DCBD94EE84EF9EE0 = ctypes.c_uint32 # enum

# values for enumeration 'NEC850_Instructions'
NEC850_Instructions__enumvalues = {
    0: 'NEC850_NULL',
    1: 'NEC850_BREAKPOINT',
    2: 'NEC850_XORI',
    3: 'NEC850_XOR',
    4: 'NEC850_TST1',
    5: 'NEC850_TST',
    6: 'NEC850_TRAP',
    7: 'NEC850_SUBR',
    8: 'NEC850_SUB',
    9: 'NEC850_STSR',
    10: 'NEC850_ST_B',
    11: 'NEC850_ST_H',
    12: 'NEC850_ST_W',
    13: 'NEC850_SST_B',
    14: 'NEC850_SST_H',
    15: 'NEC850_SST_W',
    16: 'NEC850_SLD_B',
    17: 'NEC850_SLD_H',
    18: 'NEC850_SLD_W',
    19: 'NEC850_SHR',
    20: 'NEC850_SHL',
    21: 'NEC850_SET1',
    22: 'NEC850_SETF',
    23: 'NEC850_SATSUBR',
    24: 'NEC850_SATSUBI',
    25: 'NEC850_SATSUB',
    26: 'NEC850_SATADD',
    27: 'NEC850_SAR',
    28: 'NEC850_RETI',
    29: 'NEC850_ORI',
    30: 'NEC850_OR',
    31: 'NEC850_NOT1',
    32: 'NEC850_NOT',
    33: 'NEC850_NOP',
    34: 'NEC850_MULHI',
    35: 'NEC850_MULH',
    36: 'NEC850_MOVHI',
    37: 'NEC850_MOVEA',
    38: 'NEC850_MOV',
    39: 'NEC850_LDSR',
    40: 'NEC850_LD_B',
    41: 'NEC850_LD_H',
    42: 'NEC850_LD_W',
    43: 'NEC850_JR',
    44: 'NEC850_JMP',
    45: 'NEC850_JARL',
    46: 'NEC850_HALT',
    47: 'NEC850_EI',
    48: 'NEC850_DIVH',
    49: 'NEC850_DI',
    50: 'NEC850_CMP',
    51: 'NEC850_CLR1',
    52: 'NEC850_BV',
    53: 'NEC850_BL',
    54: 'NEC850_BZ',
    55: 'NEC850_BNH',
    56: 'NEC850_BN',
    57: 'NEC850_BR',
    58: 'NEC850_BLT',
    59: 'NEC850_BLE',
    60: 'NEC850_BNV',
    61: 'NEC850_BNC',
    62: 'NEC850_BNZ',
    63: 'NEC850_BH',
    64: 'NEC850_BP',
    65: 'NEC850_BSA',
    66: 'NEC850_BGE',
    67: 'NEC850_BGT',
    68: 'NEC850_ANDI',
    69: 'NEC850_AND',
    70: 'NEC850_ADDI',
    71: 'NEC850_ADD',
    72: 'NEC850_SWITCH',
    73: 'NEC850_ZXB',
    74: 'NEC850_SXB',
    75: 'NEC850_ZXH',
    76: 'NEC850_SXH',
    77: 'NEC850_DISPOSE_r0',
    78: 'NEC850_DISPOSE_r',
    79: 'NEC850_CALLT',
    80: 'NEC850_DBTRAP',
    81: 'NEC850_DBRET',
    82: 'NEC850_CTRET',
    83: 'NEC850_SASF',
    84: 'NEC850_PREPARE_sp',
    85: 'NEC850_PREPARE_i',
    86: 'NEC850_MUL',
    87: 'NEC850_MULU',
    88: 'NEC850_DIVH_r3',
    89: 'NEC850_DIVHU',
    90: 'NEC850_DIV',
    91: 'NEC850_DIVU',
    92: 'NEC850_BSW',
    93: 'NEC850_BSH',
    94: 'NEC850_HSW',
    95: 'NEC850_CMOV',
    96: 'NEC850_SLD_BU',
    97: 'NEC850_SLD_HU',
    98: 'NEC850_LD_BU',
    99: 'NEC850_LD_HU',
    100: 'NEC850_ADF',
    101: 'NEC850_HSH',
    102: 'NEC850_MAC',
    103: 'NEC850_MACU',
    104: 'NEC850_SBF',
    105: 'NEC850_SCH0L',
    106: 'NEC850_SCH0R',
    107: 'NEC850_SCH1L',
    108: 'NEC850_SCH1R',
    109: 'NEC850_CAXI',
    110: 'NEC850_DIVQ',
    111: 'NEC850_DIVQU',
    112: 'NEC850_EIRET',
    113: 'NEC850_FERET',
    114: 'NEC850_FETRAP',
    115: 'NEC850_RMTRAP',
    116: 'NEC850_RIE',
    117: 'NEC850_SYNCE',
    118: 'NEC850_SYNCM',
    119: 'NEC850_SYNCP',
    120: 'NEC850_SYSCALL',
    121: 'NEC850_CVT_SW',
    122: 'NEC850_TRNC_SW',
    123: 'NEC850_CVT_WS',
    124: 'NEC850_LDFC',
    125: 'NEC850_LDFF',
    126: 'NEC850_STFC',
    127: 'NEC850_STFF',
    128: 'NEC850_TRFF',
    129: 'NEC850_ABSF_D',
    130: 'NEC850_ABSF_S',
    131: 'NEC850_ADDF_D',
    132: 'NEC850_ADDF_S',
    133: 'NEC850_DIVF_D',
    134: 'NEC850_DIVF_S',
    135: 'NEC850_MAXF_D',
    136: 'NEC850_MAXF_S',
    137: 'NEC850_MINF_D',
    138: 'NEC850_MINF_S',
    139: 'NEC850_MULF_D',
    140: 'NEC850_MULF_S',
    141: 'NEC850_NEGF_D',
    142: 'NEC850_NEGF_S',
    143: 'NEC850_RECIPF_D',
    144: 'NEC850_RECIPF_S',
    145: 'NEC850_RSQRTF_D',
    146: 'NEC850_RSQRTF_S',
    147: 'NEC850_SQRTF_D',
    148: 'NEC850_SQRTF_S',
    149: 'NEC850_SUBF_D',
    150: 'NEC850_SUBF_S',
    151: 'NEC850_MADDF_S',
    152: 'NEC850_MSUBF_S',
    153: 'NEC850_NMADDF_S',
    154: 'NEC850_NMSUBF_S',
    155: 'NEC850_CEILF_DL',
    156: 'NEC850_CEILF_DW',
    157: 'NEC850_CEILF_SL',
    158: 'NEC850_CEILF_SW',
    159: 'NEC850_CEILF_DUL',
    160: 'NEC850_CEILF_DUW',
    161: 'NEC850_CEILF_SUL',
    162: 'NEC850_CEILF_SUW',
    163: 'NEC850_CVTF_DL',
    164: 'NEC850_CVTF_DS',
    165: 'NEC850_CVTF_DUL',
    166: 'NEC850_CVTF_DUW',
    167: 'NEC850_CVTF_DW',
    168: 'NEC850_CVTF_LD',
    169: 'NEC850_CVTF_LS',
    170: 'NEC850_CVTF_SD',
    171: 'NEC850_CVTF_SL',
    172: 'NEC850_CVTF_SUL',
    173: 'NEC850_CVTF_SUW',
    174: 'NEC850_CVTF_SW',
    175: 'NEC850_CVTF_ULD',
    176: 'NEC850_CVTF_ULS',
    177: 'NEC850_CVTF_UWD',
    178: 'NEC850_CVTF_UWS',
    179: 'NEC850_CVTF_WD',
    180: 'NEC850_CVTF_WS',
    181: 'NEC850_FLOORF_DL',
    182: 'NEC850_FLOORF_DW',
    183: 'NEC850_FLOORF_SL',
    184: 'NEC850_FLOORF_SW',
    185: 'NEC850_FLOORF_DUL',
    186: 'NEC850_FLOORF_DUW',
    187: 'NEC850_FLOORF_SUL',
    188: 'NEC850_FLOORF_SUW',
    189: 'NEC850_TRNCF_DL',
    190: 'NEC850_TRNCF_DUL',
    191: 'NEC850_TRNCF_DUW',
    192: 'NEC850_TRNCF_DW',
    193: 'NEC850_TRNCF_SL',
    194: 'NEC850_TRNCF_SUL',
    195: 'NEC850_TRNCF_SUW',
    196: 'NEC850_TRNCF_SW',
    197: 'NEC850_CMPF_S',
    198: 'NEC850_CMPF_D',
    199: 'NEC850_CMOVF_S',
    200: 'NEC850_CMOVF_D',
    201: 'NEC850_TRFSR',
    202: 'NEC850_SYNCI',
    203: 'NEC850_SNOOZE',
    204: 'NEC850_BINS',
    205: 'NEC850_ROTL',
    206: 'NEC850_LOOP',
    207: 'NEC850_LD_DW',
    208: 'NEC850_ST_DW',
    209: 'NEC850_LDL_W',
    210: 'NEC850_STC_W',
    211: 'NEC850_CLL',
    212: 'NEC850_CACHE',
    213: 'NEC850_PREF',
    214: 'NEC850_PUSHSP',
    215: 'NEC850_POPSP',
    216: 'NEC850_CVTF_HS',
    217: 'NEC850_CVTF_SH',
    218: 'NEC850_FMAF_S',
    219: 'NEC850_FMSF_S',
    220: 'NEC850_FNMAF_S',
    221: 'NEC850_FNMSF_S',
    222: 'NEC850_DBPUSH',
    223: 'NEC850_DBCP',
    224: 'NEC850_DBTAG',
    225: 'NEC850_DBHVTRAP',
    226: 'NEC850_EST',
    227: 'NEC850_DST',
    228: 'NEC850_HVTRAP',
    229: 'NEC850_HVCALL',
    230: 'NEC850_LDVC_SR',
    231: 'NEC850_STVC_SR',
    232: 'NEC850_LDTC_GR',
    233: 'NEC850_STTC_GR',
    234: 'NEC850_LDTC_PC',
    235: 'NEC850_STTC_PC',
    236: 'NEC850_LDTC_SR',
    237: 'NEC850_STTC_SR',
    238: 'NEC850_LDTC_VR',
    239: 'NEC850_STTC_VR',
    240: 'NEC850_TLBAI',
    241: 'NEC850_TLBR',
    242: 'NEC850_TLBS',
    243: 'NEC850_TLBVI',
    244: 'NEC850_TLBW',
    245: 'NEC850_LAST_INSTRUCTION',
}
NEC850_NULL = 0
NEC850_BREAKPOINT = 1
NEC850_XORI = 2
NEC850_XOR = 3
NEC850_TST1 = 4
NEC850_TST = 5
NEC850_TRAP = 6
NEC850_SUBR = 7
NEC850_SUB = 8
NEC850_STSR = 9
NEC850_ST_B = 10
NEC850_ST_H = 11
NEC850_ST_W = 12
NEC850_SST_B = 13
NEC850_SST_H = 14
NEC850_SST_W = 15
NEC850_SLD_B = 16
NEC850_SLD_H = 17
NEC850_SLD_W = 18
NEC850_SHR = 19
NEC850_SHL = 20
NEC850_SET1 = 21
NEC850_SETF = 22
NEC850_SATSUBR = 23
NEC850_SATSUBI = 24
NEC850_SATSUB = 25
NEC850_SATADD = 26
NEC850_SAR = 27
NEC850_RETI = 28
NEC850_ORI = 29
NEC850_OR = 30
NEC850_NOT1 = 31
NEC850_NOT = 32
NEC850_NOP = 33
NEC850_MULHI = 34
NEC850_MULH = 35
NEC850_MOVHI = 36
NEC850_MOVEA = 37
NEC850_MOV = 38
NEC850_LDSR = 39
NEC850_LD_B = 40
NEC850_LD_H = 41
NEC850_LD_W = 42
NEC850_JR = 43
NEC850_JMP = 44
NEC850_JARL = 45
NEC850_HALT = 46
NEC850_EI = 47
NEC850_DIVH = 48
NEC850_DI = 49
NEC850_CMP = 50
NEC850_CLR1 = 51
NEC850_BV = 52
NEC850_BL = 53
NEC850_BZ = 54
NEC850_BNH = 55
NEC850_BN = 56
NEC850_BR = 57
NEC850_BLT = 58
NEC850_BLE = 59
NEC850_BNV = 60
NEC850_BNC = 61
NEC850_BNZ = 62
NEC850_BH = 63
NEC850_BP = 64
NEC850_BSA = 65
NEC850_BGE = 66
NEC850_BGT = 67
NEC850_ANDI = 68
NEC850_AND = 69
NEC850_ADDI = 70
NEC850_ADD = 71
NEC850_SWITCH = 72
NEC850_ZXB = 73
NEC850_SXB = 74
NEC850_ZXH = 75
NEC850_SXH = 76
NEC850_DISPOSE_r0 = 77
NEC850_DISPOSE_r = 78
NEC850_CALLT = 79
NEC850_DBTRAP = 80
NEC850_DBRET = 81
NEC850_CTRET = 82
NEC850_SASF = 83
NEC850_PREPARE_sp = 84
NEC850_PREPARE_i = 85
NEC850_MUL = 86
NEC850_MULU = 87
NEC850_DIVH_r3 = 88
NEC850_DIVHU = 89
NEC850_DIV = 90
NEC850_DIVU = 91
NEC850_BSW = 92
NEC850_BSH = 93
NEC850_HSW = 94
NEC850_CMOV = 95
NEC850_SLD_BU = 96
NEC850_SLD_HU = 97
NEC850_LD_BU = 98
NEC850_LD_HU = 99
NEC850_ADF = 100
NEC850_HSH = 101
NEC850_MAC = 102
NEC850_MACU = 103
NEC850_SBF = 104
NEC850_SCH0L = 105
NEC850_SCH0R = 106
NEC850_SCH1L = 107
NEC850_SCH1R = 108
NEC850_CAXI = 109
NEC850_DIVQ = 110
NEC850_DIVQU = 111
NEC850_EIRET = 112
NEC850_FERET = 113
NEC850_FETRAP = 114
NEC850_RMTRAP = 115
NEC850_RIE = 116
NEC850_SYNCE = 117
NEC850_SYNCM = 118
NEC850_SYNCP = 119
NEC850_SYSCALL = 120
NEC850_CVT_SW = 121
NEC850_TRNC_SW = 122
NEC850_CVT_WS = 123
NEC850_LDFC = 124
NEC850_LDFF = 125
NEC850_STFC = 126
NEC850_STFF = 127
NEC850_TRFF = 128
NEC850_ABSF_D = 129
NEC850_ABSF_S = 130
NEC850_ADDF_D = 131
NEC850_ADDF_S = 132
NEC850_DIVF_D = 133
NEC850_DIVF_S = 134
NEC850_MAXF_D = 135
NEC850_MAXF_S = 136
NEC850_MINF_D = 137
NEC850_MINF_S = 138
NEC850_MULF_D = 139
NEC850_MULF_S = 140
NEC850_NEGF_D = 141
NEC850_NEGF_S = 142
NEC850_RECIPF_D = 143
NEC850_RECIPF_S = 144
NEC850_RSQRTF_D = 145
NEC850_RSQRTF_S = 146
NEC850_SQRTF_D = 147
NEC850_SQRTF_S = 148
NEC850_SUBF_D = 149
NEC850_SUBF_S = 150
NEC850_MADDF_S = 151
NEC850_MSUBF_S = 152
NEC850_NMADDF_S = 153
NEC850_NMSUBF_S = 154
NEC850_CEILF_DL = 155
NEC850_CEILF_DW = 156
NEC850_CEILF_SL = 157
NEC850_CEILF_SW = 158
NEC850_CEILF_DUL = 159
NEC850_CEILF_DUW = 160
NEC850_CEILF_SUL = 161
NEC850_CEILF_SUW = 162
NEC850_CVTF_DL = 163
NEC850_CVTF_DS = 164
NEC850_CVTF_DUL = 165
NEC850_CVTF_DUW = 166
NEC850_CVTF_DW = 167
NEC850_CVTF_LD = 168
NEC850_CVTF_LS = 169
NEC850_CVTF_SD = 170
NEC850_CVTF_SL = 171
NEC850_CVTF_SUL = 172
NEC850_CVTF_SUW = 173
NEC850_CVTF_SW = 174
NEC850_CVTF_ULD = 175
NEC850_CVTF_ULS = 176
NEC850_CVTF_UWD = 177
NEC850_CVTF_UWS = 178
NEC850_CVTF_WD = 179
NEC850_CVTF_WS = 180
NEC850_FLOORF_DL = 181
NEC850_FLOORF_DW = 182
NEC850_FLOORF_SL = 183
NEC850_FLOORF_SW = 184
NEC850_FLOORF_DUL = 185
NEC850_FLOORF_DUW = 186
NEC850_FLOORF_SUL = 187
NEC850_FLOORF_SUW = 188
NEC850_TRNCF_DL = 189
NEC850_TRNCF_DUL = 190
NEC850_TRNCF_DUW = 191
NEC850_TRNCF_DW = 192
NEC850_TRNCF_SL = 193
NEC850_TRNCF_SUL = 194
NEC850_TRNCF_SUW = 195
NEC850_TRNCF_SW = 196
NEC850_CMPF_S = 197
NEC850_CMPF_D = 198
NEC850_CMOVF_S = 199
NEC850_CMOVF_D = 200
NEC850_TRFSR = 201
NEC850_SYNCI = 202
NEC850_SNOOZE = 203
NEC850_BINS = 204
NEC850_ROTL = 205
NEC850_LOOP = 206
NEC850_LD_DW = 207
NEC850_ST_DW = 208
NEC850_LDL_W = 209
NEC850_STC_W = 210
NEC850_CLL = 211
NEC850_CACHE = 212
NEC850_PREF = 213
NEC850_PUSHSP = 214
NEC850_POPSP = 215
NEC850_CVTF_HS = 216
NEC850_CVTF_SH = 217
NEC850_FMAF_S = 218
NEC850_FMSF_S = 219
NEC850_FNMAF_S = 220
NEC850_FNMSF_S = 221
NEC850_DBPUSH = 222
NEC850_DBCP = 223
NEC850_DBTAG = 224
NEC850_DBHVTRAP = 225
NEC850_EST = 226
NEC850_DST = 227
NEC850_HVTRAP = 228
NEC850_HVCALL = 229
NEC850_LDVC_SR = 230
NEC850_STVC_SR = 231
NEC850_LDTC_GR = 232
NEC850_STTC_GR = 233
NEC850_LDTC_PC = 234
NEC850_STTC_PC = 235
NEC850_LDTC_SR = 236
NEC850_STTC_SR = 237
NEC850_LDTC_VR = 238
NEC850_STTC_VR = 239
NEC850_TLBAI = 240
NEC850_TLBR = 241
NEC850_TLBS = 242
NEC850_TLBVI = 243
NEC850_TLBW = 244
NEC850_LAST_INSTRUCTION = 245
NEC850_Instructions = ctypes.c_uint32 # enum

# values for enumeration '_16C8DC2CFBF0AAC0932308A6C493011C'
_16C8DC2CFBF0AAC0932308A6C493011C__enumvalues = {
    0: 'TRICORE_null',
    1: 'TRICORE_abs',
    2: 'TRICORE_abs_b',
    3: 'TRICORE_abs_h',
    4: 'TRICORE_absdif',
    5: 'TRICORE_absdif_b',
    6: 'TRICORE_absdif_h',
    7: 'TRICORE_absdifs',
    8: 'TRICORE_absdifs_h',
    9: 'TRICORE_abss',
    10: 'TRICORE_abss_h',
    11: 'TRICORE_add_b',
    12: 'TRICORE_add_f',
    13: 'TRICORE_add_h',
    14: 'TRICORE_add16',
    15: 'TRICORE_add16_a',
    16: 'TRICORE_add32',
    17: 'TRICORE_add32_a',
    18: 'TRICORE_addc',
    19: 'TRICORE_addi',
    20: 'TRICORE_addih',
    21: 'TRICORE_addih_a',
    22: 'TRICORE_adds',
    23: 'TRICORE_adds_h',
    24: 'TRICORE_adds_hu',
    25: 'TRICORE_adds_u',
    26: 'TRICORE_adds16',
    27: 'TRICORE_addsc_at',
    28: 'TRICORE_addsc16_a',
    29: 'TRICORE_addsc32_a',
    30: 'TRICORE_addx',
    31: 'TRICORE_and_and_t',
    32: 'TRICORE_and_andn_t',
    33: 'TRICORE_and_eq',
    34: 'TRICORE_and_ge',
    35: 'TRICORE_and_ge_u',
    36: 'TRICORE_and_lt',
    37: 'TRICORE_and_lt_u',
    38: 'TRICORE_and_ne',
    39: 'TRICORE_and_nor_t',
    40: 'TRICORE_and_or_t',
    41: 'TRICORE_and_t',
    42: 'TRICORE_and16',
    43: 'TRICORE_and32',
    44: 'TRICORE_andn',
    45: 'TRICORE_andn_t',
    46: 'TRICORE_bisr16',
    47: 'TRICORE_bisr32',
    48: 'TRICORE_bmerge',
    49: 'TRICORE_bsplit',
    50: 'TRICORE_cachea_i',
    51: 'TRICORE_cachea_w',
    52: 'TRICORE_cachea_wi',
    53: 'TRICORE_cadd16',
    54: 'TRICORE_cadd32',
    55: 'TRICORE_caddn16',
    56: 'TRICORE_caddn32',
    57: 'TRICORE_call16',
    58: 'TRICORE_call32',
    59: 'TRICORE_calla',
    60: 'TRICORE_calli',
    61: 'TRICORE_clo',
    62: 'TRICORE_clo_h',
    63: 'TRICORE_cls',
    64: 'TRICORE_cls_h',
    65: 'TRICORE_clz',
    66: 'TRICORE_clz_h',
    67: 'TRICORE_cmov16',
    68: 'TRICORE_cmovn16',
    69: 'TRICORE_cmp_f',
    70: 'TRICORE_csub',
    71: 'TRICORE_csubn',
    72: 'TRICORE_debug16',
    73: 'TRICORE_debug32',
    74: 'TRICORE_dextr',
    75: 'TRICORE_disable',
    76: 'TRICORE_div_f',
    77: 'TRICORE_dsync',
    78: 'TRICORE_dvadj',
    79: 'TRICORE_dvinit',
    80: 'TRICORE_dvinit_b',
    81: 'TRICORE_dvinit_bu',
    82: 'TRICORE_dvinit_h',
    83: 'TRICORE_dvinit_hu',
    84: 'TRICORE_dvinit_u',
    85: 'TRICORE_dvstep',
    86: 'TRICORE_dvstep_u',
    87: 'TRICORE_enable',
    88: 'TRICORE_eq_a',
    89: 'TRICORE_eq_b',
    90: 'TRICORE_eq_h',
    91: 'TRICORE_eq_w',
    92: 'TRICORE_eq16',
    93: 'TRICORE_eq32',
    94: 'TRICORE_eqany_b',
    95: 'TRICORE_eqany_h',
    96: 'TRICORE_eqz_a',
    97: 'TRICORE_extr',
    98: 'TRICORE_extr_u',
    99: 'TRICORE_ftoi',
    100: 'TRICORE_ftoq31',
    101: 'TRICORE_ftou',
    102: 'TRICORE_ge',
    103: 'TRICORE_ge_a',
    104: 'TRICORE_ge_u',
    105: 'TRICORE_imask',
    106: 'TRICORE_ins_t',
    107: 'TRICORE_insert',
    108: 'TRICORE_insn_t',
    109: 'TRICORE_isync',
    110: 'TRICORE_itof',
    111: 'TRICORE_ixmax',
    112: 'TRICORE_ixmax_u',
    113: 'TRICORE_ixmin',
    114: 'TRICORE_ixmin_u',
    115: 'TRICORE_j16',
    116: 'TRICORE_j32',
    117: 'TRICORE_ja',
    118: 'TRICORE_jeq_a',
    119: 'TRICORE_jeq16',
    120: 'TRICORE_jeq32',
    121: 'TRICORE_jge',
    122: 'TRICORE_jge_u',
    123: 'TRICORE_jgez16',
    124: 'TRICORE_jgtz16',
    125: 'TRICORE_ji16',
    126: 'TRICORE_ji32',
    127: 'TRICORE_jl',
    128: 'TRICORE_jla',
    129: 'TRICORE_jlez16',
    130: 'TRICORE_jli',
    131: 'TRICORE_jlt',
    132: 'TRICORE_jlt_u',
    133: 'TRICORE_jltz16',
    134: 'TRICORE_jne_a',
    135: 'TRICORE_jne16',
    136: 'TRICORE_jne32',
    137: 'TRICORE_jned',
    138: 'TRICORE_jnei',
    139: 'TRICORE_jnz16',
    140: 'TRICORE_jnz16_a',
    141: 'TRICORE_jnz16_t',
    142: 'TRICORE_jnz32_a',
    143: 'TRICORE_jnz32_t',
    144: 'TRICORE_jz16',
    145: 'TRICORE_jz16_a',
    146: 'TRICORE_jz16_t',
    147: 'TRICORE_jz32_a',
    148: 'TRICORE_jz32_t',
    149: 'TRICORE_ld_b',
    150: 'TRICORE_ld_d',
    151: 'TRICORE_ld_da',
    152: 'TRICORE_ld_hu',
    153: 'TRICORE_ld_q',
    154: 'TRICORE_ld16_a',
    155: 'TRICORE_ld16_bu',
    156: 'TRICORE_ld16_h',
    157: 'TRICORE_ld16_w',
    158: 'TRICORE_ld32_a',
    159: 'TRICORE_ld32_bu',
    160: 'TRICORE_ld32_h',
    161: 'TRICORE_ld32_w',
    162: 'TRICORE_ldlcx',
    163: 'TRICORE_ldmst',
    164: 'TRICORE_lducx',
    165: 'TRICORE_lea',
    166: 'TRICORE_loop16',
    167: 'TRICORE_loop32',
    168: 'TRICORE_loopu',
    169: 'TRICORE_lt_a',
    170: 'TRICORE_lt_b',
    171: 'TRICORE_lt_bu',
    172: 'TRICORE_lt_h',
    173: 'TRICORE_lt_hu',
    174: 'TRICORE_lt_u',
    175: 'TRICORE_lt_w',
    176: 'TRICORE_lt_wu',
    177: 'TRICORE_lt16',
    178: 'TRICORE_lt32',
    179: 'TRICORE_madd',
    180: 'TRICORE_madd_f',
    181: 'TRICORE_madd_h',
    182: 'TRICORE_madd_q',
    183: 'TRICORE_madd_u',
    184: 'TRICORE_maddm_h',
    185: 'TRICORE_maddms_h',
    186: 'TRICORE_maddr_h',
    187: 'TRICORE_maddr_q',
    188: 'TRICORE_maddrs_h',
    189: 'TRICORE_maddrs_q',
    190: 'TRICORE_madds',
    191: 'TRICORE_madds_h',
    192: 'TRICORE_madds_q',
    193: 'TRICORE_madds_u',
    194: 'TRICORE_maddsu_h',
    195: 'TRICORE_maddsum_h',
    196: 'TRICORE_maddsums_h',
    197: 'TRICORE_maddsur_h',
    198: 'TRICORE_maddsurs_h',
    199: 'TRICORE_maddsus_h',
    200: 'TRICORE_max',
    201: 'TRICORE_max_b',
    202: 'TRICORE_max_bu',
    203: 'TRICORE_max_h',
    204: 'TRICORE_max_hu',
    205: 'TRICORE_max_u',
    206: 'TRICORE_mfcr',
    207: 'TRICORE_min',
    208: 'TRICORE_min_b',
    209: 'TRICORE_min_bu',
    210: 'TRICORE_min_h',
    211: 'TRICORE_min_hu',
    212: 'TRICORE_min_u',
    213: 'TRICORE_mov_u',
    214: 'TRICORE_mov16',
    215: 'TRICORE_mov16_a',
    216: 'TRICORE_mov16_aa',
    217: 'TRICORE_mov16_d',
    218: 'TRICORE_mov32',
    219: 'TRICORE_mov32_a',
    220: 'TRICORE_mov32_aa',
    221: 'TRICORE_mov32_d',
    222: 'TRICORE_movh',
    223: 'TRICORE_movh_a',
    224: 'TRICORE_msub',
    225: 'TRICORE_msub_f',
    226: 'TRICORE_msub_h',
    227: 'TRICORE_msub_q',
    228: 'TRICORE_msub_u',
    229: 'TRICORE_msubad_h',
    230: 'TRICORE_msubadm_h',
    231: 'TRICORE_msubadms_h',
    232: 'TRICORE_msubadr_h',
    233: 'TRICORE_msubadrs_h',
    234: 'TRICORE_msubads_h',
    235: 'TRICORE_msubm_h',
    236: 'TRICORE_msubms_h',
    237: 'TRICORE_msubr_h',
    238: 'TRICORE_msubr_q',
    239: 'TRICORE_msubrs_h',
    240: 'TRICORE_msubrs_q',
    241: 'TRICORE_msubs',
    242: 'TRICORE_msubs_h',
    243: 'TRICORE_msubs_q',
    244: 'TRICORE_msubs_u',
    245: 'TRICORE_mtcr',
    246: 'TRICORE_mul_f',
    247: 'TRICORE_mul_h',
    248: 'TRICORE_mul_q',
    249: 'TRICORE_mul_u',
    250: 'TRICORE_mul16',
    251: 'TRICORE_mul32',
    252: 'TRICORE_mulm_h',
    253: 'TRICORE_mulms_h',
    254: 'TRICORE_mulr_h',
    255: 'TRICORE_mulr_q',
    256: 'TRICORE_muls',
    257: 'TRICORE_muls_u',
    258: 'TRICORE_nand',
    259: 'TRICORE_nand_t',
    260: 'TRICORE_ne',
    261: 'TRICORE_ne_a',
    262: 'TRICORE_nez_a',
    263: 'TRICORE_nop16',
    264: 'TRICORE_nop32',
    265: 'TRICORE_nor_t',
    266: 'TRICORE_nor16',
    267: 'TRICORE_nor32',
    268: 'TRICORE_or_and_t',
    269: 'TRICORE_or_andn_t',
    270: 'TRICORE_or_eq',
    271: 'TRICORE_or_ge',
    272: 'TRICORE_or_ge_u',
    273: 'TRICORE_or_lt',
    274: 'TRICORE_or_lt_u',
    275: 'TRICORE_or_ne',
    276: 'TRICORE_or_nor_t',
    277: 'TRICORE_or_or_t',
    278: 'TRICORE_or_t',
    279: 'TRICORE_or16',
    280: 'TRICORE_or32',
    281: 'TRICORE_orn',
    282: 'TRICORE_orn_t',
    283: 'TRICORE_pack',
    284: 'TRICORE_parity',
    285: 'TRICORE_q31tof',
    286: 'TRICORE_qseed_f',
    287: 'TRICORE_ret16',
    288: 'TRICORE_ret32',
    289: 'TRICORE_rfe16',
    290: 'TRICORE_rfe32',
    291: 'TRICORE_rfm',
    292: 'TRICORE_rslcx',
    293: 'TRICORE_rstv',
    294: 'TRICORE_rsub16',
    295: 'TRICORE_rsub32',
    296: 'TRICORE_rsubs',
    297: 'TRICORE_rsubs_u',
    298: 'TRICORE_sat16_b',
    299: 'TRICORE_sat16_bu',
    300: 'TRICORE_sat16_h',
    301: 'TRICORE_sat16_hu',
    302: 'TRICORE_sat32_b',
    303: 'TRICORE_sat32_bu',
    304: 'TRICORE_sat32_h',
    305: 'TRICORE_sat32_hu',
    306: 'TRICORE_sel',
    307: 'TRICORE_seln',
    308: 'TRICORE_sh_and_t',
    309: 'TRICORE_sh_andn_t',
    310: 'TRICORE_sh_eq',
    311: 'TRICORE_sh_ge',
    312: 'TRICORE_sh_ge_u',
    313: 'TRICORE_sh_h',
    314: 'TRICORE_sh_lt',
    315: 'TRICORE_sh_lt_u',
    316: 'TRICORE_sh_nand_t',
    317: 'TRICORE_sh_ne',
    318: 'TRICORE_sh_nor_t',
    319: 'TRICORE_sh_or_t',
    320: 'TRICORE_sh_orn_t',
    321: 'TRICORE_sh_xnor_t',
    322: 'TRICORE_sh_xor_t',
    323: 'TRICORE_sh16',
    324: 'TRICORE_sh32',
    325: 'TRICORE_sha_h',
    326: 'TRICORE_sha16',
    327: 'TRICORE_sha32',
    328: 'TRICORE_shas',
    329: 'TRICORE_st_d',
    330: 'TRICORE_st_da',
    331: 'TRICORE_st_q',
    332: 'TRICORE_st_t',
    333: 'TRICORE_st16_a',
    334: 'TRICORE_st16_b',
    335: 'TRICORE_st16_h',
    336: 'TRICORE_st16_w',
    337: 'TRICORE_st32_a',
    338: 'TRICORE_st32_b',
    339: 'TRICORE_st32_h',
    340: 'TRICORE_st32_w',
    341: 'TRICORE_stlcx',
    342: 'TRICORE_stucx',
    343: 'TRICORE_sub_b',
    344: 'TRICORE_sub_f',
    345: 'TRICORE_sub_h',
    346: 'TRICORE_sub16',
    347: 'TRICORE_sub16_a',
    348: 'TRICORE_sub32',
    349: 'TRICORE_sub32_a',
    350: 'TRICORE_subc',
    351: 'TRICORE_subs_h',
    352: 'TRICORE_subs_hu',
    353: 'TRICORE_subs_u',
    354: 'TRICORE_subs16',
    355: 'TRICORE_subs32',
    356: 'TRICORE_subx',
    357: 'TRICORE_svlcx',
    358: 'TRICORE_swap_w',
    359: 'TRICORE_syscall',
    360: 'TRICORE_tlbdemap',
    361: 'TRICORE_tlbflush_a',
    362: 'TRICORE_tlbflush_b',
    363: 'TRICORE_tlbmap',
    364: 'TRICORE_tlbprobe_a',
    365: 'TRICORE_tlbprobe_i',
    366: 'TRICORE_trapsv',
    367: 'TRICORE_trapv',
    368: 'TRICORE_unpack',
    369: 'TRICORE_updfl',
    370: 'TRICORE_utof',
    371: 'TRICORE_xnor',
    372: 'TRICORE_xnor_t',
    373: 'TRICORE_xor_eq',
    374: 'TRICORE_xor_ge',
    375: 'TRICORE_xor_ge_u',
    376: 'TRICORE_xor_lt',
    377: 'TRICORE_xor_lt_u',
    378: 'TRICORE_xor_ne',
    379: 'TRICORE_xor_t',
    380: 'TRICORE_xor16',
    381: 'TRICORE_xor32',
    382: 'TRICORE_cachei_i',
    383: 'TRICORE_cachei_w',
    384: 'TRICORE_cachei_wi',
    385: 'TRICORE_div',
    386: 'TRICORE_div_u',
    387: 'TRICORE_fcall',
    388: 'TRICORE_fcalla',
    389: 'TRICORE_fcalli',
    390: 'TRICORE_fret16',
    391: 'TRICORE_fret32',
    392: 'TRICORE_ftoiz',
    393: 'TRICORE_ftoq31z',
    394: 'TRICORE_ftouz',
    395: 'TRICORE_restore',
    396: 'TRICORE_crc32',
    397: 'TRICORE_wait',
    398: 'TRICORE_cmpswap_w',
    399: 'TRICORE_swapmsk_w',
    400: 'TRICORE_crc32_b',
    401: 'TRICORE_crc32l_w',
    402: 'TRICORE_crcn',
    403: 'TRICORE_shuffle',
    404: 'TRICORE_popcnt_w',
    405: 'TRICORE_lha',
    406: 'TRICORE_last',
}
TRICORE_null = 0
TRICORE_abs = 1
TRICORE_abs_b = 2
TRICORE_abs_h = 3
TRICORE_absdif = 4
TRICORE_absdif_b = 5
TRICORE_absdif_h = 6
TRICORE_absdifs = 7
TRICORE_absdifs_h = 8
TRICORE_abss = 9
TRICORE_abss_h = 10
TRICORE_add_b = 11
TRICORE_add_f = 12
TRICORE_add_h = 13
TRICORE_add16 = 14
TRICORE_add16_a = 15
TRICORE_add32 = 16
TRICORE_add32_a = 17
TRICORE_addc = 18
TRICORE_addi = 19
TRICORE_addih = 20
TRICORE_addih_a = 21
TRICORE_adds = 22
TRICORE_adds_h = 23
TRICORE_adds_hu = 24
TRICORE_adds_u = 25
TRICORE_adds16 = 26
TRICORE_addsc_at = 27
TRICORE_addsc16_a = 28
TRICORE_addsc32_a = 29
TRICORE_addx = 30
TRICORE_and_and_t = 31
TRICORE_and_andn_t = 32
TRICORE_and_eq = 33
TRICORE_and_ge = 34
TRICORE_and_ge_u = 35
TRICORE_and_lt = 36
TRICORE_and_lt_u = 37
TRICORE_and_ne = 38
TRICORE_and_nor_t = 39
TRICORE_and_or_t = 40
TRICORE_and_t = 41
TRICORE_and16 = 42
TRICORE_and32 = 43
TRICORE_andn = 44
TRICORE_andn_t = 45
TRICORE_bisr16 = 46
TRICORE_bisr32 = 47
TRICORE_bmerge = 48
TRICORE_bsplit = 49
TRICORE_cachea_i = 50
TRICORE_cachea_w = 51
TRICORE_cachea_wi = 52
TRICORE_cadd16 = 53
TRICORE_cadd32 = 54
TRICORE_caddn16 = 55
TRICORE_caddn32 = 56
TRICORE_call16 = 57
TRICORE_call32 = 58
TRICORE_calla = 59
TRICORE_calli = 60
TRICORE_clo = 61
TRICORE_clo_h = 62
TRICORE_cls = 63
TRICORE_cls_h = 64
TRICORE_clz = 65
TRICORE_clz_h = 66
TRICORE_cmov16 = 67
TRICORE_cmovn16 = 68
TRICORE_cmp_f = 69
TRICORE_csub = 70
TRICORE_csubn = 71
TRICORE_debug16 = 72
TRICORE_debug32 = 73
TRICORE_dextr = 74
TRICORE_disable = 75
TRICORE_div_f = 76
TRICORE_dsync = 77
TRICORE_dvadj = 78
TRICORE_dvinit = 79
TRICORE_dvinit_b = 80
TRICORE_dvinit_bu = 81
TRICORE_dvinit_h = 82
TRICORE_dvinit_hu = 83
TRICORE_dvinit_u = 84
TRICORE_dvstep = 85
TRICORE_dvstep_u = 86
TRICORE_enable = 87
TRICORE_eq_a = 88
TRICORE_eq_b = 89
TRICORE_eq_h = 90
TRICORE_eq_w = 91
TRICORE_eq16 = 92
TRICORE_eq32 = 93
TRICORE_eqany_b = 94
TRICORE_eqany_h = 95
TRICORE_eqz_a = 96
TRICORE_extr = 97
TRICORE_extr_u = 98
TRICORE_ftoi = 99
TRICORE_ftoq31 = 100
TRICORE_ftou = 101
TRICORE_ge = 102
TRICORE_ge_a = 103
TRICORE_ge_u = 104
TRICORE_imask = 105
TRICORE_ins_t = 106
TRICORE_insert = 107
TRICORE_insn_t = 108
TRICORE_isync = 109
TRICORE_itof = 110
TRICORE_ixmax = 111
TRICORE_ixmax_u = 112
TRICORE_ixmin = 113
TRICORE_ixmin_u = 114
TRICORE_j16 = 115
TRICORE_j32 = 116
TRICORE_ja = 117
TRICORE_jeq_a = 118
TRICORE_jeq16 = 119
TRICORE_jeq32 = 120
TRICORE_jge = 121
TRICORE_jge_u = 122
TRICORE_jgez16 = 123
TRICORE_jgtz16 = 124
TRICORE_ji16 = 125
TRICORE_ji32 = 126
TRICORE_jl = 127
TRICORE_jla = 128
TRICORE_jlez16 = 129
TRICORE_jli = 130
TRICORE_jlt = 131
TRICORE_jlt_u = 132
TRICORE_jltz16 = 133
TRICORE_jne_a = 134
TRICORE_jne16 = 135
TRICORE_jne32 = 136
TRICORE_jned = 137
TRICORE_jnei = 138
TRICORE_jnz16 = 139
TRICORE_jnz16_a = 140
TRICORE_jnz16_t = 141
TRICORE_jnz32_a = 142
TRICORE_jnz32_t = 143
TRICORE_jz16 = 144
TRICORE_jz16_a = 145
TRICORE_jz16_t = 146
TRICORE_jz32_a = 147
TRICORE_jz32_t = 148
TRICORE_ld_b = 149
TRICORE_ld_d = 150
TRICORE_ld_da = 151
TRICORE_ld_hu = 152
TRICORE_ld_q = 153
TRICORE_ld16_a = 154
TRICORE_ld16_bu = 155
TRICORE_ld16_h = 156
TRICORE_ld16_w = 157
TRICORE_ld32_a = 158
TRICORE_ld32_bu = 159
TRICORE_ld32_h = 160
TRICORE_ld32_w = 161
TRICORE_ldlcx = 162
TRICORE_ldmst = 163
TRICORE_lducx = 164
TRICORE_lea = 165
TRICORE_loop16 = 166
TRICORE_loop32 = 167
TRICORE_loopu = 168
TRICORE_lt_a = 169
TRICORE_lt_b = 170
TRICORE_lt_bu = 171
TRICORE_lt_h = 172
TRICORE_lt_hu = 173
TRICORE_lt_u = 174
TRICORE_lt_w = 175
TRICORE_lt_wu = 176
TRICORE_lt16 = 177
TRICORE_lt32 = 178
TRICORE_madd = 179
TRICORE_madd_f = 180
TRICORE_madd_h = 181
TRICORE_madd_q = 182
TRICORE_madd_u = 183
TRICORE_maddm_h = 184
TRICORE_maddms_h = 185
TRICORE_maddr_h = 186
TRICORE_maddr_q = 187
TRICORE_maddrs_h = 188
TRICORE_maddrs_q = 189
TRICORE_madds = 190
TRICORE_madds_h = 191
TRICORE_madds_q = 192
TRICORE_madds_u = 193
TRICORE_maddsu_h = 194
TRICORE_maddsum_h = 195
TRICORE_maddsums_h = 196
TRICORE_maddsur_h = 197
TRICORE_maddsurs_h = 198
TRICORE_maddsus_h = 199
TRICORE_max = 200
TRICORE_max_b = 201
TRICORE_max_bu = 202
TRICORE_max_h = 203
TRICORE_max_hu = 204
TRICORE_max_u = 205
TRICORE_mfcr = 206
TRICORE_min = 207
TRICORE_min_b = 208
TRICORE_min_bu = 209
TRICORE_min_h = 210
TRICORE_min_hu = 211
TRICORE_min_u = 212
TRICORE_mov_u = 213
TRICORE_mov16 = 214
TRICORE_mov16_a = 215
TRICORE_mov16_aa = 216
TRICORE_mov16_d = 217
TRICORE_mov32 = 218
TRICORE_mov32_a = 219
TRICORE_mov32_aa = 220
TRICORE_mov32_d = 221
TRICORE_movh = 222
TRICORE_movh_a = 223
TRICORE_msub = 224
TRICORE_msub_f = 225
TRICORE_msub_h = 226
TRICORE_msub_q = 227
TRICORE_msub_u = 228
TRICORE_msubad_h = 229
TRICORE_msubadm_h = 230
TRICORE_msubadms_h = 231
TRICORE_msubadr_h = 232
TRICORE_msubadrs_h = 233
TRICORE_msubads_h = 234
TRICORE_msubm_h = 235
TRICORE_msubms_h = 236
TRICORE_msubr_h = 237
TRICORE_msubr_q = 238
TRICORE_msubrs_h = 239
TRICORE_msubrs_q = 240
TRICORE_msubs = 241
TRICORE_msubs_h = 242
TRICORE_msubs_q = 243
TRICORE_msubs_u = 244
TRICORE_mtcr = 245
TRICORE_mul_f = 246
TRICORE_mul_h = 247
TRICORE_mul_q = 248
TRICORE_mul_u = 249
TRICORE_mul16 = 250
TRICORE_mul32 = 251
TRICORE_mulm_h = 252
TRICORE_mulms_h = 253
TRICORE_mulr_h = 254
TRICORE_mulr_q = 255
TRICORE_muls = 256
TRICORE_muls_u = 257
TRICORE_nand = 258
TRICORE_nand_t = 259
TRICORE_ne = 260
TRICORE_ne_a = 261
TRICORE_nez_a = 262
TRICORE_nop16 = 263
TRICORE_nop32 = 264
TRICORE_nor_t = 265
TRICORE_nor16 = 266
TRICORE_nor32 = 267
TRICORE_or_and_t = 268
TRICORE_or_andn_t = 269
TRICORE_or_eq = 270
TRICORE_or_ge = 271
TRICORE_or_ge_u = 272
TRICORE_or_lt = 273
TRICORE_or_lt_u = 274
TRICORE_or_ne = 275
TRICORE_or_nor_t = 276
TRICORE_or_or_t = 277
TRICORE_or_t = 278
TRICORE_or16 = 279
TRICORE_or32 = 280
TRICORE_orn = 281
TRICORE_orn_t = 282
TRICORE_pack = 283
TRICORE_parity = 284
TRICORE_q31tof = 285
TRICORE_qseed_f = 286
TRICORE_ret16 = 287
TRICORE_ret32 = 288
TRICORE_rfe16 = 289
TRICORE_rfe32 = 290
TRICORE_rfm = 291
TRICORE_rslcx = 292
TRICORE_rstv = 293
TRICORE_rsub16 = 294
TRICORE_rsub32 = 295
TRICORE_rsubs = 296
TRICORE_rsubs_u = 297
TRICORE_sat16_b = 298
TRICORE_sat16_bu = 299
TRICORE_sat16_h = 300
TRICORE_sat16_hu = 301
TRICORE_sat32_b = 302
TRICORE_sat32_bu = 303
TRICORE_sat32_h = 304
TRICORE_sat32_hu = 305
TRICORE_sel = 306
TRICORE_seln = 307
TRICORE_sh_and_t = 308
TRICORE_sh_andn_t = 309
TRICORE_sh_eq = 310
TRICORE_sh_ge = 311
TRICORE_sh_ge_u = 312
TRICORE_sh_h = 313
TRICORE_sh_lt = 314
TRICORE_sh_lt_u = 315
TRICORE_sh_nand_t = 316
TRICORE_sh_ne = 317
TRICORE_sh_nor_t = 318
TRICORE_sh_or_t = 319
TRICORE_sh_orn_t = 320
TRICORE_sh_xnor_t = 321
TRICORE_sh_xor_t = 322
TRICORE_sh16 = 323
TRICORE_sh32 = 324
TRICORE_sha_h = 325
TRICORE_sha16 = 326
TRICORE_sha32 = 327
TRICORE_shas = 328
TRICORE_st_d = 329
TRICORE_st_da = 330
TRICORE_st_q = 331
TRICORE_st_t = 332
TRICORE_st16_a = 333
TRICORE_st16_b = 334
TRICORE_st16_h = 335
TRICORE_st16_w = 336
TRICORE_st32_a = 337
TRICORE_st32_b = 338
TRICORE_st32_h = 339
TRICORE_st32_w = 340
TRICORE_stlcx = 341
TRICORE_stucx = 342
TRICORE_sub_b = 343
TRICORE_sub_f = 344
TRICORE_sub_h = 345
TRICORE_sub16 = 346
TRICORE_sub16_a = 347
TRICORE_sub32 = 348
TRICORE_sub32_a = 349
TRICORE_subc = 350
TRICORE_subs_h = 351
TRICORE_subs_hu = 352
TRICORE_subs_u = 353
TRICORE_subs16 = 354
TRICORE_subs32 = 355
TRICORE_subx = 356
TRICORE_svlcx = 357
TRICORE_swap_w = 358
TRICORE_syscall = 359
TRICORE_tlbdemap = 360
TRICORE_tlbflush_a = 361
TRICORE_tlbflush_b = 362
TRICORE_tlbmap = 363
TRICORE_tlbprobe_a = 364
TRICORE_tlbprobe_i = 365
TRICORE_trapsv = 366
TRICORE_trapv = 367
TRICORE_unpack = 368
TRICORE_updfl = 369
TRICORE_utof = 370
TRICORE_xnor = 371
TRICORE_xnor_t = 372
TRICORE_xor_eq = 373
TRICORE_xor_ge = 374
TRICORE_xor_ge_u = 375
TRICORE_xor_lt = 376
TRICORE_xor_lt_u = 377
TRICORE_xor_ne = 378
TRICORE_xor_t = 379
TRICORE_xor16 = 380
TRICORE_xor32 = 381
TRICORE_cachei_i = 382
TRICORE_cachei_w = 383
TRICORE_cachei_wi = 384
TRICORE_div = 385
TRICORE_div_u = 386
TRICORE_fcall = 387
TRICORE_fcalla = 388
TRICORE_fcalli = 389
TRICORE_fret16 = 390
TRICORE_fret32 = 391
TRICORE_ftoiz = 392
TRICORE_ftoq31z = 393
TRICORE_ftouz = 394
TRICORE_restore = 395
TRICORE_crc32 = 396
TRICORE_wait = 397
TRICORE_cmpswap_w = 398
TRICORE_swapmsk_w = 399
TRICORE_crc32_b = 400
TRICORE_crc32l_w = 401
TRICORE_crcn = 402
TRICORE_shuffle = 403
TRICORE_popcnt_w = 404
TRICORE_lha = 405
TRICORE_last = 406
_16C8DC2CFBF0AAC0932308A6C493011C = ctypes.c_uint32 # enum

# values for enumeration '_2B42920CFE7D5F7B46449B0399BA2C05'
_2B42920CFE7D5F7B46449B0399BA2C05__enumvalues = {
    0: 'ARC_null',
    1: 'ARC_ld',
    2: 'ARC_lr',
    3: 'ARC_st',
    4: 'ARC_sr',
    4: 'ARC_store_instructions',
    5: 'ARC_flag',
    6: 'ARC_asr',
    7: 'ARC_lsr',
    8: 'ARC_sexb',
    9: 'ARC_sexw',
    9: 'ARC_sexh',
    10: 'ARC_extb',
    11: 'ARC_extw',
    11: 'ARC_exth',
    12: 'ARC_ror',
    13: 'ARC_rrc',
    14: 'ARC_b',
    15: 'ARC_bl',
    16: 'ARC_lp',
    17: 'ARC_j',
    18: 'ARC_jl',
    19: 'ARC_add',
    20: 'ARC_adc',
    21: 'ARC_sub',
    22: 'ARC_sbc',
    23: 'ARC_and',
    24: 'ARC_or',
    25: 'ARC_bic',
    26: 'ARC_xor',
    27: 'ARC_mov',
    28: 'ARC_nop',
    29: 'ARC_lsl',
    30: 'ARC_rlc',
    31: 'ARC_brk',
    32: 'ARC_sleep',
    33: 'ARC_swi',
    34: 'ARC_asl',
    35: 'ARC_mul64',
    36: 'ARC_mulu64',
    37: 'ARC_max',
    38: 'ARC_min',
    39: 'ARC_swap',
    40: 'ARC_norm',
    41: 'ARC_bbit0',
    42: 'ARC_bbit1',
    43: 'ARC_br',
    44: 'ARC_pop',
    45: 'ARC_push',
    46: 'ARC_abs',
    47: 'ARC_add1',
    48: 'ARC_add2',
    49: 'ARC_add3',
    50: 'ARC_bclr',
    51: 'ARC_bmsk',
    52: 'ARC_bset',
    53: 'ARC_btst',
    54: 'ARC_bxor',
    55: 'ARC_cmp',
    56: 'ARC_ex',
    57: 'ARC_mpy',
    58: 'ARC_mpyh',
    58: 'ARC_mpym',
    59: 'ARC_mpyhu',
    59: 'ARC_mpyhm',
    60: 'ARC_mpyu',
    61: 'ARC_neg',
    62: 'ARC_not',
    63: 'ARC_rcmp',
    64: 'ARC_rsub',
    65: 'ARC_rtie',
    66: 'ARC_sub1',
    67: 'ARC_sub2',
    68: 'ARC_sub3',
    69: 'ARC_sync',
    70: 'ARC_trap',
    71: 'ARC_tst',
    72: 'ARC_unimp',
    73: 'ARC_abss',
    74: 'ARC_abssw',
    74: 'ARC_abssh',
    75: 'ARC_adds',
    76: 'ARC_addsdw',
    77: 'ARC_asls',
    78: 'ARC_asrs',
    79: 'ARC_divaw',
    80: 'ARC_negs',
    81: 'ARC_negsw',
    81: 'ARC_negsh',
    82: 'ARC_normw',
    82: 'ARC_normh',
    83: 'ARC_rnd16',
    83: 'ARC_rndh',
    84: 'ARC_sat16',
    84: 'ARC_sath',
    85: 'ARC_subs',
    86: 'ARC_subsdw',
    87: 'ARC_muldw',
    88: 'ARC_muludw',
    89: 'ARC_mulrdw',
    90: 'ARC_macdw',
    91: 'ARC_macudw',
    92: 'ARC_macrdw',
    93: 'ARC_msubdw',
    94: 'ARC_mululw',
    95: 'ARC_mullw',
    96: 'ARC_mulflw',
    97: 'ARC_maclw',
    98: 'ARC_macflw',
    99: 'ARC_machulw',
    100: 'ARC_machlw',
    101: 'ARC_machflw',
    102: 'ARC_mulhlw',
    103: 'ARC_mulhflw',
    104: 'ARC_acm',
    105: 'ARC_addqbs',
    106: 'ARC_avgqb',
    107: 'ARC_clamp',
    108: 'ARC_daddh11',
    109: 'ARC_daddh12',
    110: 'ARC_daddh21',
    111: 'ARC_daddh22',
    112: 'ARC_dexcl1',
    113: 'ARC_dexcl2',
    114: 'ARC_dmulh11',
    115: 'ARC_dmulh12',
    116: 'ARC_dmulh21',
    117: 'ARC_dmulh22',
    118: 'ARC_dsubh11',
    119: 'ARC_dsubh12',
    120: 'ARC_dsubh21',
    121: 'ARC_dsubh22',
    122: 'ARC_drsubh11',
    123: 'ARC_drsubh12',
    124: 'ARC_drsubh21',
    125: 'ARC_drsubh22',
    126: 'ARC_fadd',
    126: 'ARC_fsadd',
    127: 'ARC_fmul',
    127: 'ARC_fsmul',
    128: 'ARC_fsub',
    128: 'ARC_fssub',
    129: 'ARC_fxtr',
    130: 'ARC_iaddr',
    131: 'ARC_mpyqb',
    132: 'ARC_sfxtr',
    133: 'ARC_pkqb',
    134: 'ARC_upkqb',
    135: 'ARC_xpkqb',
    136: 'ARC_mpyw',
    137: 'ARC_mpyuw',
    138: 'ARC_bi',
    139: 'ARC_bih',
    140: 'ARC_ldi',
    141: 'ARC_aex',
    142: 'ARC_bmskn',
    143: 'ARC_seteq',
    144: 'ARC_setne',
    145: 'ARC_setlt',
    146: 'ARC_setge',
    147: 'ARC_setlo',
    148: 'ARC_seths',
    149: 'ARC_setle',
    150: 'ARC_setgt',
    151: 'ARC_rol',
    152: 'ARC_llock',
    153: 'ARC_scond',
    154: 'ARC_seti',
    155: 'ARC_clri',
    156: 'ARC_enter',
    157: 'ARC_leave',
    158: 'ARC_div',
    159: 'ARC_divu',
    160: 'ARC_rem',
    161: 'ARC_remu',
    162: 'ARC_asrsr',
    163: 'ARC_valgn2h',
    164: 'ARC_setacc',
    165: 'ARC_mac',
    166: 'ARC_macu',
    167: 'ARC_dmpyh',
    168: 'ARC_dmpyhu',
    169: 'ARC_dmach',
    170: 'ARC_dmachu',
    171: 'ARC_vadd2h',
    172: 'ARC_vadds2h',
    173: 'ARC_vsub2h',
    174: 'ARC_vsubs2h',
    175: 'ARC_vaddsub2h',
    176: 'ARC_vaddsubs2h',
    177: 'ARC_vsubadd2h',
    178: 'ARC_vsubadds2h',
    179: 'ARC_mpyd',
    180: 'ARC_mpydu',
    181: 'ARC_macd',
    182: 'ARC_macdu',
    183: 'ARC_vmpy2h',
    184: 'ARC_vmpy2hf',
    185: 'ARC_vmpy2hu',
    186: 'ARC_vmpy2hfr',
    187: 'ARC_vmac2h',
    188: 'ARC_vmac2hf',
    189: 'ARC_vmac2hu',
    190: 'ARC_vmac2hfr',
    191: 'ARC_vmpy2hwf',
    192: 'ARC_vasl2h',
    193: 'ARC_vasls2h',
    194: 'ARC_vasr2h',
    195: 'ARC_vasrs2h',
    196: 'ARC_vlsr2h',
    197: 'ARC_vasrsr2h',
    198: 'ARC_vadd4b',
    199: 'ARC_vmax2h',
    200: 'ARC_vsub4b',
    201: 'ARC_vmin2h',
    202: 'ARC_adcs',
    203: 'ARC_sbcs',
    204: 'ARC_dmpyhwf',
    205: 'ARC_vpack2hl',
    206: 'ARC_vpack2hm',
    207: 'ARC_dmpyhf',
    208: 'ARC_dmpyhfr',
    209: 'ARC_dmachf',
    210: 'ARC_dmachfr',
    211: 'ARC_vperm',
    212: 'ARC_bspush',
    213: 'ARC_swape',
    214: 'ARC_lsl16',
    215: 'ARC_lsr16',
    216: 'ARC_asr16',
    217: 'ARC_asr8',
    218: 'ARC_lsr8',
    219: 'ARC_lsl8',
    220: 'ARC_rol8',
    221: 'ARC_ror8',
    222: 'ARC_ffs',
    223: 'ARC_fls',
    224: 'ARC_getacc',
    225: 'ARC_normacc',
    226: 'ARC_satf',
    227: 'ARC_vpack2hbl',
    228: 'ARC_vpack2hbm',
    229: 'ARC_vpack2hblf',
    230: 'ARC_vpack2hbmf',
    231: 'ARC_vext2bhlf',
    232: 'ARC_vext2bhmf',
    233: 'ARC_vrep2hl',
    234: 'ARC_vrep2hm',
    235: 'ARC_vext2bhl',
    236: 'ARC_vext2bhm',
    237: 'ARC_vsext2bhl',
    238: 'ARC_vsext2bhm',
    239: 'ARC_vabs2h',
    240: 'ARC_vabss2h',
    241: 'ARC_vneg2h',
    242: 'ARC_vnegs2h',
    243: 'ARC_vnorm2h',
    244: 'ARC_bspeek',
    245: 'ARC_bspop',
    246: 'ARC_sqrt',
    247: 'ARC_sqrtf',
    248: 'ARC_aslacc',
    249: 'ARC_aslsacc',
    250: 'ARC_flagacc',
    251: 'ARC_modif',
    252: 'ARC_cmpyhnfr',
    253: 'ARC_cmpyhfr',
    254: 'ARC_cmpychfr',
    255: 'ARC_vmsub2hf',
    256: 'ARC_vmsub2hfr',
    257: 'ARC_cmpychnfr',
    258: 'ARC_cmachnfr',
    259: 'ARC_cmachfr',
    260: 'ARC_cmacchnfr',
    261: 'ARC_cmacchfr',
    262: 'ARC_mpyf',
    263: 'ARC_mpyfr',
    264: 'ARC_macf',
    265: 'ARC_macfr',
    266: 'ARC_msubf',
    267: 'ARC_msubfr',
    268: 'ARC_divf',
    269: 'ARC_vmac2hnfr',
    270: 'ARC_vmsub2hnfr',
    271: 'ARC_mpydf',
    272: 'ARC_macdf',
    273: 'ARC_msubwhfl',
    274: 'ARC_msubdf',
    275: 'ARC_dmpyhbl',
    276: 'ARC_dmpyhbm',
    277: 'ARC_dmachbl',
    278: 'ARC_dmachbm',
    279: 'ARC_msubwhflr',
    280: 'ARC_cmpyhfmr',
    281: 'ARC_cbflyhf0r',
    282: 'ARC_mpywhl',
    283: 'ARC_macwhl',
    284: 'ARC_mpywhul',
    285: 'ARC_macwhul',
    286: 'ARC_mpywhfm',
    287: 'ARC_mpywhfmr',
    288: 'ARC_macwhfm',
    289: 'ARC_macwhfmr',
    290: 'ARC_mpywhfl',
    291: 'ARC_mpywhflr',
    292: 'ARC_macwhfl',
    293: 'ARC_macwhflr',
    294: 'ARC_macwhkl',
    295: 'ARC_macwhkul',
    296: 'ARC_mpywhkl',
    297: 'ARC_mpywhkul',
    298: 'ARC_msubwhfm',
    299: 'ARC_msubwhfmr',
    300: 'ARC_cbflyhf1r',
    301: 'ARC_fscmp',
    302: 'ARC_fscmpf',
    303: 'ARC_fsmadd',
    304: 'ARC_fsmsub',
    305: 'ARC_fsdiv',
    306: 'ARC_fcvt32',
    307: 'ARC_fssqrt',
    308: 'ARC_jli',
    309: 'ARC_ei',
    310: 'ARC_kflag',
    311: 'ARC_wevt',
    312: 'ARC_last',
}
ARC_null = 0
ARC_ld = 1
ARC_lr = 2
ARC_st = 3
ARC_sr = 4
ARC_store_instructions = 4
ARC_flag = 5
ARC_asr = 6
ARC_lsr = 7
ARC_sexb = 8
ARC_sexw = 9
ARC_sexh = 9
ARC_extb = 10
ARC_extw = 11
ARC_exth = 11
ARC_ror = 12
ARC_rrc = 13
ARC_b = 14
ARC_bl = 15
ARC_lp = 16
ARC_j = 17
ARC_jl = 18
ARC_add = 19
ARC_adc = 20
ARC_sub = 21
ARC_sbc = 22
ARC_and = 23
ARC_or = 24
ARC_bic = 25
ARC_xor = 26
ARC_mov = 27
ARC_nop = 28
ARC_lsl = 29
ARC_rlc = 30
ARC_brk = 31
ARC_sleep = 32
ARC_swi = 33
ARC_asl = 34
ARC_mul64 = 35
ARC_mulu64 = 36
ARC_max = 37
ARC_min = 38
ARC_swap = 39
ARC_norm = 40
ARC_bbit0 = 41
ARC_bbit1 = 42
ARC_br = 43
ARC_pop = 44
ARC_push = 45
ARC_abs = 46
ARC_add1 = 47
ARC_add2 = 48
ARC_add3 = 49
ARC_bclr = 50
ARC_bmsk = 51
ARC_bset = 52
ARC_btst = 53
ARC_bxor = 54
ARC_cmp = 55
ARC_ex = 56
ARC_mpy = 57
ARC_mpyh = 58
ARC_mpym = 58
ARC_mpyhu = 59
ARC_mpyhm = 59
ARC_mpyu = 60
ARC_neg = 61
ARC_not = 62
ARC_rcmp = 63
ARC_rsub = 64
ARC_rtie = 65
ARC_sub1 = 66
ARC_sub2 = 67
ARC_sub3 = 68
ARC_sync = 69
ARC_trap = 70
ARC_tst = 71
ARC_unimp = 72
ARC_abss = 73
ARC_abssw = 74
ARC_abssh = 74
ARC_adds = 75
ARC_addsdw = 76
ARC_asls = 77
ARC_asrs = 78
ARC_divaw = 79
ARC_negs = 80
ARC_negsw = 81
ARC_negsh = 81
ARC_normw = 82
ARC_normh = 82
ARC_rnd16 = 83
ARC_rndh = 83
ARC_sat16 = 84
ARC_sath = 84
ARC_subs = 85
ARC_subsdw = 86
ARC_muldw = 87
ARC_muludw = 88
ARC_mulrdw = 89
ARC_macdw = 90
ARC_macudw = 91
ARC_macrdw = 92
ARC_msubdw = 93
ARC_mululw = 94
ARC_mullw = 95
ARC_mulflw = 96
ARC_maclw = 97
ARC_macflw = 98
ARC_machulw = 99
ARC_machlw = 100
ARC_machflw = 101
ARC_mulhlw = 102
ARC_mulhflw = 103
ARC_acm = 104
ARC_addqbs = 105
ARC_avgqb = 106
ARC_clamp = 107
ARC_daddh11 = 108
ARC_daddh12 = 109
ARC_daddh21 = 110
ARC_daddh22 = 111
ARC_dexcl1 = 112
ARC_dexcl2 = 113
ARC_dmulh11 = 114
ARC_dmulh12 = 115
ARC_dmulh21 = 116
ARC_dmulh22 = 117
ARC_dsubh11 = 118
ARC_dsubh12 = 119
ARC_dsubh21 = 120
ARC_dsubh22 = 121
ARC_drsubh11 = 122
ARC_drsubh12 = 123
ARC_drsubh21 = 124
ARC_drsubh22 = 125
ARC_fadd = 126
ARC_fsadd = 126
ARC_fmul = 127
ARC_fsmul = 127
ARC_fsub = 128
ARC_fssub = 128
ARC_fxtr = 129
ARC_iaddr = 130
ARC_mpyqb = 131
ARC_sfxtr = 132
ARC_pkqb = 133
ARC_upkqb = 134
ARC_xpkqb = 135
ARC_mpyw = 136
ARC_mpyuw = 137
ARC_bi = 138
ARC_bih = 139
ARC_ldi = 140
ARC_aex = 141
ARC_bmskn = 142
ARC_seteq = 143
ARC_setne = 144
ARC_setlt = 145
ARC_setge = 146
ARC_setlo = 147
ARC_seths = 148
ARC_setle = 149
ARC_setgt = 150
ARC_rol = 151
ARC_llock = 152
ARC_scond = 153
ARC_seti = 154
ARC_clri = 155
ARC_enter = 156
ARC_leave = 157
ARC_div = 158
ARC_divu = 159
ARC_rem = 160
ARC_remu = 161
ARC_asrsr = 162
ARC_valgn2h = 163
ARC_setacc = 164
ARC_mac = 165
ARC_macu = 166
ARC_dmpyh = 167
ARC_dmpyhu = 168
ARC_dmach = 169
ARC_dmachu = 170
ARC_vadd2h = 171
ARC_vadds2h = 172
ARC_vsub2h = 173
ARC_vsubs2h = 174
ARC_vaddsub2h = 175
ARC_vaddsubs2h = 176
ARC_vsubadd2h = 177
ARC_vsubadds2h = 178
ARC_mpyd = 179
ARC_mpydu = 180
ARC_macd = 181
ARC_macdu = 182
ARC_vmpy2h = 183
ARC_vmpy2hf = 184
ARC_vmpy2hu = 185
ARC_vmpy2hfr = 186
ARC_vmac2h = 187
ARC_vmac2hf = 188
ARC_vmac2hu = 189
ARC_vmac2hfr = 190
ARC_vmpy2hwf = 191
ARC_vasl2h = 192
ARC_vasls2h = 193
ARC_vasr2h = 194
ARC_vasrs2h = 195
ARC_vlsr2h = 196
ARC_vasrsr2h = 197
ARC_vadd4b = 198
ARC_vmax2h = 199
ARC_vsub4b = 200
ARC_vmin2h = 201
ARC_adcs = 202
ARC_sbcs = 203
ARC_dmpyhwf = 204
ARC_vpack2hl = 205
ARC_vpack2hm = 206
ARC_dmpyhf = 207
ARC_dmpyhfr = 208
ARC_dmachf = 209
ARC_dmachfr = 210
ARC_vperm = 211
ARC_bspush = 212
ARC_swape = 213
ARC_lsl16 = 214
ARC_lsr16 = 215
ARC_asr16 = 216
ARC_asr8 = 217
ARC_lsr8 = 218
ARC_lsl8 = 219
ARC_rol8 = 220
ARC_ror8 = 221
ARC_ffs = 222
ARC_fls = 223
ARC_getacc = 224
ARC_normacc = 225
ARC_satf = 226
ARC_vpack2hbl = 227
ARC_vpack2hbm = 228
ARC_vpack2hblf = 229
ARC_vpack2hbmf = 230
ARC_vext2bhlf = 231
ARC_vext2bhmf = 232
ARC_vrep2hl = 233
ARC_vrep2hm = 234
ARC_vext2bhl = 235
ARC_vext2bhm = 236
ARC_vsext2bhl = 237
ARC_vsext2bhm = 238
ARC_vabs2h = 239
ARC_vabss2h = 240
ARC_vneg2h = 241
ARC_vnegs2h = 242
ARC_vnorm2h = 243
ARC_bspeek = 244
ARC_bspop = 245
ARC_sqrt = 246
ARC_sqrtf = 247
ARC_aslacc = 248
ARC_aslsacc = 249
ARC_flagacc = 250
ARC_modif = 251
ARC_cmpyhnfr = 252
ARC_cmpyhfr = 253
ARC_cmpychfr = 254
ARC_vmsub2hf = 255
ARC_vmsub2hfr = 256
ARC_cmpychnfr = 257
ARC_cmachnfr = 258
ARC_cmachfr = 259
ARC_cmacchnfr = 260
ARC_cmacchfr = 261
ARC_mpyf = 262
ARC_mpyfr = 263
ARC_macf = 264
ARC_macfr = 265
ARC_msubf = 266
ARC_msubfr = 267
ARC_divf = 268
ARC_vmac2hnfr = 269
ARC_vmsub2hnfr = 270
ARC_mpydf = 271
ARC_macdf = 272
ARC_msubwhfl = 273
ARC_msubdf = 274
ARC_dmpyhbl = 275
ARC_dmpyhbm = 276
ARC_dmachbl = 277
ARC_dmachbm = 278
ARC_msubwhflr = 279
ARC_cmpyhfmr = 280
ARC_cbflyhf0r = 281
ARC_mpywhl = 282
ARC_macwhl = 283
ARC_mpywhul = 284
ARC_macwhul = 285
ARC_mpywhfm = 286
ARC_mpywhfmr = 287
ARC_macwhfm = 288
ARC_macwhfmr = 289
ARC_mpywhfl = 290
ARC_mpywhflr = 291
ARC_macwhfl = 292
ARC_macwhflr = 293
ARC_macwhkl = 294
ARC_macwhkul = 295
ARC_mpywhkl = 296
ARC_mpywhkul = 297
ARC_msubwhfm = 298
ARC_msubwhfmr = 299
ARC_cbflyhf1r = 300
ARC_fscmp = 301
ARC_fscmpf = 302
ARC_fsmadd = 303
ARC_fsmsub = 304
ARC_fsdiv = 305
ARC_fcvt32 = 306
ARC_fssqrt = 307
ARC_jli = 308
ARC_ei = 309
ARC_kflag = 310
ARC_wevt = 311
ARC_last = 312
_2B42920CFE7D5F7B46449B0399BA2C05 = ctypes.c_uint32 # enum

# values for enumeration '_2C93FDADBFB653BF4322BBCDC7CB0EE1'
_2C93FDADBFB653BF4322BBCDC7CB0EE1__enumvalues = {
    0: 'TMS28_null',
    1: 'TMS28_aborti',
    2: 'TMS28_abs',
    3: 'TMS28_abstc',
    4: 'TMS28_add',
    5: 'TMS28_addb',
    6: 'TMS28_addcl',
    7: 'TMS28_addcu',
    8: 'TMS28_addl',
    9: 'TMS28_addu',
    10: 'TMS28_addul',
    11: 'TMS28_adrk',
    12: 'TMS28_and',
    13: 'TMS28_andb',
    14: 'TMS28_asp',
    15: 'TMS28_asr',
    16: 'TMS28_asr64',
    17: 'TMS28_asrl',
    18: 'TMS28_b',
    19: 'TMS28_banz',
    20: 'TMS28_bar',
    21: 'TMS28_bf',
    22: 'TMS28_c27map',
    23: 'TMS28_c27obj',
    24: 'TMS28_c28addr',
    25: 'TMS28_c28map',
    26: 'TMS28_c28obj',
    27: 'TMS28_clrc',
    28: 'TMS28_cmp',
    29: 'TMS28_cmp64',
    30: 'TMS28_cmpb',
    31: 'TMS28_cmpl',
    32: 'TMS28_cmpr',
    33: 'TMS28_csb',
    34: 'TMS28_dec',
    35: 'TMS28_dint',
    36: 'TMS28_dmac',
    37: 'TMS28_dmov',
    38: 'TMS28_eallow',
    39: 'TMS28_edis',
    40: 'TMS28_eint',
    41: 'TMS28_estop0',
    42: 'TMS28_estop1',
    43: 'TMS28_ffc',
    44: 'TMS28_flip',
    45: 'TMS28_iack',
    46: 'TMS28_idle',
    47: 'TMS28_imacl',
    48: 'TMS28_impyal',
    49: 'TMS28_impyl',
    50: 'TMS28_impysl',
    51: 'TMS28_impyxul',
    52: 'TMS28_in',
    53: 'TMS28_inc',
    54: 'TMS28_intr',
    55: 'TMS28_iret',
    56: 'TMS28_lb',
    57: 'TMS28_lc',
    58: 'TMS28_lcr',
    59: 'TMS28_loopnz',
    60: 'TMS28_loopz',
    61: 'TMS28_lpaddr',
    62: 'TMS28_lret',
    63: 'TMS28_lrete',
    64: 'TMS28_lretr',
    65: 'TMS28_lsl',
    66: 'TMS28_lsl64',
    67: 'TMS28_lsll',
    68: 'TMS28_lsr',
    69: 'TMS28_lsr64',
    70: 'TMS28_lsrl',
    71: 'TMS28_mac',
    72: 'TMS28_max',
    73: 'TMS28_maxcul',
    74: 'TMS28_maxl',
    75: 'TMS28_min',
    76: 'TMS28_mincul',
    77: 'TMS28_minl',
    78: 'TMS28_mov',
    79: 'TMS28_mova',
    80: 'TMS28_movad',
    81: 'TMS28_movb',
    82: 'TMS28_movdl',
    83: 'TMS28_movh',
    84: 'TMS28_movl',
    85: 'TMS28_movp',
    86: 'TMS28_movs',
    87: 'TMS28_movu',
    88: 'TMS28_movw',
    89: 'TMS28_movx',
    90: 'TMS28_movz',
    91: 'TMS28_mpy',
    92: 'TMS28_mpya',
    93: 'TMS28_mpyb',
    94: 'TMS28_mpys',
    95: 'TMS28_mpyu',
    96: 'TMS28_mpyxu',
    97: 'TMS28_nasp',
    98: 'TMS28_neg',
    99: 'TMS28_neg64',
    100: 'TMS28_negtc',
    101: 'TMS28_nop',
    102: 'TMS28_norm',
    103: 'TMS28_not',
    104: 'TMS28_or',
    105: 'TMS28_orb',
    106: 'TMS28_out',
    107: 'TMS28_pop',
    108: 'TMS28_pread',
    109: 'TMS28_push',
    110: 'TMS28_pwrite',
    111: 'TMS28_qmacl',
    112: 'TMS28_qmpyal',
    113: 'TMS28_qmpyl',
    114: 'TMS28_qmpysl',
    115: 'TMS28_qmpyul',
    116: 'TMS28_qmpyxul',
    117: 'TMS28_rol',
    118: 'TMS28_ror',
    119: 'TMS28_rpt',
    120: 'TMS28_sat',
    121: 'TMS28_sat64',
    122: 'TMS28_sb',
    123: 'TMS28_sbbu',
    124: 'TMS28_sbf',
    125: 'TMS28_sbrk',
    126: 'TMS28_setc',
    127: 'TMS28_sfr',
    128: 'TMS28_spm',
    129: 'TMS28_sqra',
    130: 'TMS28_sqrs',
    131: 'TMS28_sub',
    132: 'TMS28_subb',
    133: 'TMS28_subbl',
    134: 'TMS28_subcu',
    135: 'TMS28_subcul',
    136: 'TMS28_subl',
    137: 'TMS28_subr',
    138: 'TMS28_subrl',
    139: 'TMS28_subu',
    140: 'TMS28_subul',
    141: 'TMS28_sxtb',
    142: 'TMS28_tbit',
    143: 'TMS28_tclr',
    144: 'TMS28_test',
    145: 'TMS28_trap',
    146: 'TMS28_tset',
    147: 'TMS28_uout',
    148: 'TMS28_xb',
    149: 'TMS28_xbanz',
    150: 'TMS28_xcall',
    151: 'TMS28_xmac',
    152: 'TMS28_xmacd',
    153: 'TMS28_xor',
    154: 'TMS28_xorb',
    155: 'TMS28_xpread',
    156: 'TMS28_xpwrite',
    157: 'TMS28_xret',
    158: 'TMS28_xretc',
    159: 'TMS28_zalr',
    160: 'TMS28_zap',
    161: 'TMS28_zapa',
    162: 'TMS28_last',
}
TMS28_null = 0
TMS28_aborti = 1
TMS28_abs = 2
TMS28_abstc = 3
TMS28_add = 4
TMS28_addb = 5
TMS28_addcl = 6
TMS28_addcu = 7
TMS28_addl = 8
TMS28_addu = 9
TMS28_addul = 10
TMS28_adrk = 11
TMS28_and = 12
TMS28_andb = 13
TMS28_asp = 14
TMS28_asr = 15
TMS28_asr64 = 16
TMS28_asrl = 17
TMS28_b = 18
TMS28_banz = 19
TMS28_bar = 20
TMS28_bf = 21
TMS28_c27map = 22
TMS28_c27obj = 23
TMS28_c28addr = 24
TMS28_c28map = 25
TMS28_c28obj = 26
TMS28_clrc = 27
TMS28_cmp = 28
TMS28_cmp64 = 29
TMS28_cmpb = 30
TMS28_cmpl = 31
TMS28_cmpr = 32
TMS28_csb = 33
TMS28_dec = 34
TMS28_dint = 35
TMS28_dmac = 36
TMS28_dmov = 37
TMS28_eallow = 38
TMS28_edis = 39
TMS28_eint = 40
TMS28_estop0 = 41
TMS28_estop1 = 42
TMS28_ffc = 43
TMS28_flip = 44
TMS28_iack = 45
TMS28_idle = 46
TMS28_imacl = 47
TMS28_impyal = 48
TMS28_impyl = 49
TMS28_impysl = 50
TMS28_impyxul = 51
TMS28_in = 52
TMS28_inc = 53
TMS28_intr = 54
TMS28_iret = 55
TMS28_lb = 56
TMS28_lc = 57
TMS28_lcr = 58
TMS28_loopnz = 59
TMS28_loopz = 60
TMS28_lpaddr = 61
TMS28_lret = 62
TMS28_lrete = 63
TMS28_lretr = 64
TMS28_lsl = 65
TMS28_lsl64 = 66
TMS28_lsll = 67
TMS28_lsr = 68
TMS28_lsr64 = 69
TMS28_lsrl = 70
TMS28_mac = 71
TMS28_max = 72
TMS28_maxcul = 73
TMS28_maxl = 74
TMS28_min = 75
TMS28_mincul = 76
TMS28_minl = 77
TMS28_mov = 78
TMS28_mova = 79
TMS28_movad = 80
TMS28_movb = 81
TMS28_movdl = 82
TMS28_movh = 83
TMS28_movl = 84
TMS28_movp = 85
TMS28_movs = 86
TMS28_movu = 87
TMS28_movw = 88
TMS28_movx = 89
TMS28_movz = 90
TMS28_mpy = 91
TMS28_mpya = 92
TMS28_mpyb = 93
TMS28_mpys = 94
TMS28_mpyu = 95
TMS28_mpyxu = 96
TMS28_nasp = 97
TMS28_neg = 98
TMS28_neg64 = 99
TMS28_negtc = 100
TMS28_nop = 101
TMS28_norm = 102
TMS28_not = 103
TMS28_or = 104
TMS28_orb = 105
TMS28_out = 106
TMS28_pop = 107
TMS28_pread = 108
TMS28_push = 109
TMS28_pwrite = 110
TMS28_qmacl = 111
TMS28_qmpyal = 112
TMS28_qmpyl = 113
TMS28_qmpysl = 114
TMS28_qmpyul = 115
TMS28_qmpyxul = 116
TMS28_rol = 117
TMS28_ror = 118
TMS28_rpt = 119
TMS28_sat = 120
TMS28_sat64 = 121
TMS28_sb = 122
TMS28_sbbu = 123
TMS28_sbf = 124
TMS28_sbrk = 125
TMS28_setc = 126
TMS28_sfr = 127
TMS28_spm = 128
TMS28_sqra = 129
TMS28_sqrs = 130
TMS28_sub = 131
TMS28_subb = 132
TMS28_subbl = 133
TMS28_subcu = 134
TMS28_subcul = 135
TMS28_subl = 136
TMS28_subr = 137
TMS28_subrl = 138
TMS28_subu = 139
TMS28_subul = 140
TMS28_sxtb = 141
TMS28_tbit = 142
TMS28_tclr = 143
TMS28_test = 144
TMS28_trap = 145
TMS28_tset = 146
TMS28_uout = 147
TMS28_xb = 148
TMS28_xbanz = 149
TMS28_xcall = 150
TMS28_xmac = 151
TMS28_xmacd = 152
TMS28_xor = 153
TMS28_xorb = 154
TMS28_xpread = 155
TMS28_xpwrite = 156
TMS28_xret = 157
TMS28_xretc = 158
TMS28_zalr = 159
TMS28_zap = 160
TMS28_zapa = 161
TMS28_last = 162
_2C93FDADBFB653BF4322BBCDC7CB0EE1 = ctypes.c_uint32 # enum

# values for enumeration '_246AA8CB468DD99C5C77ABEC7AED7257'
_246AA8CB468DD99C5C77ABEC7AED7257__enumvalues = {
    0: 'UNSP_null',
    1: 'UNSP_add',
    2: 'UNSP_adc',
    3: 'UNSP_sub',
    4: 'UNSP_sbc',
    5: 'UNSP_cmp',
    6: 'UNSP_cmpc',
    7: 'UNSP_neg',
    8: 'UNSP_negc',
    9: 'UNSP_xor',
    10: 'UNSP_load',
    11: 'UNSP_or',
    12: 'UNSP_and',
    13: 'UNSP_test',
    14: 'UNSP_store',
    15: 'UNSP_add_s',
    16: 'UNSP_adc_s',
    17: 'UNSP_sub_s',
    18: 'UNSP_sbc_s',
    19: 'UNSP_cmp_s',
    20: 'UNSP_cmpc_s',
    21: 'UNSP_neg_s',
    22: 'UNSP_negc_s',
    23: 'UNSP_xor_s',
    24: 'UNSP_load_s',
    25: 'UNSP_or_s',
    26: 'UNSP_and_s',
    27: 'UNSP_test_s',
    28: 'UNSP_store_s',
    29: 'UNSP_retf',
    30: 'UNSP_reti',
    31: 'UNSP_pop',
    32: 'UNSP_push',
    33: 'UNSP_call',
    34: 'UNSP_goto',
    35: 'UNSP_nop',
    36: 'UNSP_exp',
    37: 'UNSP_jb',
    38: 'UNSP_jae',
    39: 'UNSP_jge',
    40: 'UNSP_jl',
    41: 'UNSP_jne',
    42: 'UNSP_je',
    43: 'UNSP_jpl',
    44: 'UNSP_jmi',
    45: 'UNSP_jbe',
    46: 'UNSP_ja',
    47: 'UNSP_jle',
    48: 'UNSP_jg',
    49: 'UNSP_jvc',
    50: 'UNSP_jvs',
    51: 'UNSP_jmp',
    52: 'UNSP_mulss',
    53: 'UNSP_mulus',
    54: 'UNSP_muluu',
    55: 'UNSP_divs',
    56: 'UNSP_divq',
    57: 'UNSP_int1',
    58: 'UNSP_int2',
    59: 'UNSP_fir_mov',
    60: 'UNSP_fraction',
    61: 'UNSP_irq',
    62: 'UNSP_secbank',
    63: 'UNSP_fiq',
    64: 'UNSP_irqnest',
    65: 'UNSP_break',
    66: 'UNSP_asr',
    67: 'UNSP_asror',
    68: 'UNSP_lsl',
    69: 'UNSP_lslor',
    70: 'UNSP_lsr',
    71: 'UNSP_lsror',
    72: 'UNSP_rol',
    73: 'UNSP_ror',
    74: 'UNSP_tstb',
    75: 'UNSP_setb',
    76: 'UNSP_clrb',
    77: 'UNSP_invb',
    78: 'UNSP_last',
}
UNSP_null = 0
UNSP_add = 1
UNSP_adc = 2
UNSP_sub = 3
UNSP_sbc = 4
UNSP_cmp = 5
UNSP_cmpc = 6
UNSP_neg = 7
UNSP_negc = 8
UNSP_xor = 9
UNSP_load = 10
UNSP_or = 11
UNSP_and = 12
UNSP_test = 13
UNSP_store = 14
UNSP_add_s = 15
UNSP_adc_s = 16
UNSP_sub_s = 17
UNSP_sbc_s = 18
UNSP_cmp_s = 19
UNSP_cmpc_s = 20
UNSP_neg_s = 21
UNSP_negc_s = 22
UNSP_xor_s = 23
UNSP_load_s = 24
UNSP_or_s = 25
UNSP_and_s = 26
UNSP_test_s = 27
UNSP_store_s = 28
UNSP_retf = 29
UNSP_reti = 30
UNSP_pop = 31
UNSP_push = 32
UNSP_call = 33
UNSP_goto = 34
UNSP_nop = 35
UNSP_exp = 36
UNSP_jb = 37
UNSP_jae = 38
UNSP_jge = 39
UNSP_jl = 40
UNSP_jne = 41
UNSP_je = 42
UNSP_jpl = 43
UNSP_jmi = 44
UNSP_jbe = 45
UNSP_ja = 46
UNSP_jle = 47
UNSP_jg = 48
UNSP_jvc = 49
UNSP_jvs = 50
UNSP_jmp = 51
UNSP_mulss = 52
UNSP_mulus = 53
UNSP_muluu = 54
UNSP_divs = 55
UNSP_divq = 56
UNSP_int1 = 57
UNSP_int2 = 58
UNSP_fir_mov = 59
UNSP_fraction = 60
UNSP_irq = 61
UNSP_secbank = 62
UNSP_fiq = 63
UNSP_irqnest = 64
UNSP_break = 65
UNSP_asr = 66
UNSP_asror = 67
UNSP_lsl = 68
UNSP_lslor = 69
UNSP_lsr = 70
UNSP_lsror = 71
UNSP_rol = 72
UNSP_ror = 73
UNSP_tstb = 74
UNSP_setb = 75
UNSP_clrb = 76
UNSP_invb = 77
UNSP_last = 78
_246AA8CB468DD99C5C77ABEC7AED7257 = ctypes.c_uint32 # enum

# values for enumeration '_7F86040BB27194B4B6B6A2B46CC5F6D4'
_7F86040BB27194B4B6B6A2B46CC5F6D4__enumvalues = {
    0: 'DALVIK_UNUSED',
    1: 'DALVIK_NOP',
    2: 'DALVIK_MOVE',
    3: 'DALVIK_MOVE_FROM16',
    4: 'DALVIK_MOVE_16',
    5: 'DALVIK_MOVE_WIDE',
    6: 'DALVIK_MOVE_WIDE_FROM16',
    7: 'DALVIK_MOVE_WIDE_16',
    8: 'DALVIK_MOVE_OBJECT',
    9: 'DALVIK_MOVE_OBJECT_FROM16',
    10: 'DALVIK_MOVE_OBJECT_16',
    11: 'DALVIK_MOVE_RESULT',
    12: 'DALVIK_MOVE_RESULT_WIDE',
    13: 'DALVIK_MOVE_RESULT_OBJECT',
    14: 'DALVIK_MOVE_EXCEPTION',
    15: 'DALVIK_RETURN_VOID',
    16: 'DALVIK_RETURN',
    17: 'DALVIK_RETURN_WIDE',
    18: 'DALVIK_RETURN_OBJECT',
    19: 'DALVIK_CONST_4',
    20: 'DALVIK_CONST_16',
    21: 'DALVIK_CONST',
    22: 'DALVIK_CONST_HIGH16',
    23: 'DALVIK_CONST_WIDE_16',
    24: 'DALVIK_CONST_WIDE_32',
    25: 'DALVIK_CONST_WIDE',
    26: 'DALVIK_CONST_WIDE_HIGH16',
    27: 'DALVIK_CONST_STRING',
    28: 'DALVIK_CONST_STRING_JUMBO',
    29: 'DALVIK_CONST_CLASS',
    30: 'DALVIK_MONITOR_ENTER',
    31: 'DALVIK_MONITOR_EXIT',
    32: 'DALVIK_CHECK_CAST',
    33: 'DALVIK_INSTANCE_OF',
    34: 'DALVIK_ARRAY_LENGTH',
    35: 'DALVIK_NEW_INSTANCE',
    36: 'DALVIK_NEW_ARRAY',
    37: 'DALVIK_FILLED_NEW_ARRAY',
    38: 'DALVIK_FILLED_NEW_ARRAY_RANGE',
    39: 'DALVIK_FILL_ARRAY_DATA',
    40: 'DALVIK_THROW',
    41: 'DALVIK_GOTO',
    42: 'DALVIK_GOTO_16',
    43: 'DALVIK_GOTO_32',
    44: 'DALVIK_PACKED_SWITCH',
    45: 'DALVIK_SPARSE_SWITCH',
    46: 'DALVIK_CMPL_FLOAT',
    47: 'DALVIK_CMPG_FLOAT',
    48: 'DALVIK_CMPL_DOUBLE',
    49: 'DALVIK_CMPG_DOUBLE',
    50: 'DALVIK_CMP_LONG',
    51: 'DALVIK_IF_EQ',
    52: 'DALVIK_IF_NE',
    53: 'DALVIK_IF_LT',
    54: 'DALVIK_IF_GE',
    55: 'DALVIK_IF_GT',
    56: 'DALVIK_IF_LE',
    57: 'DALVIK_IF_EQZ',
    58: 'DALVIK_IF_NEZ',
    59: 'DALVIK_IF_LTZ',
    60: 'DALVIK_IF_GEZ',
    61: 'DALVIK_IF_GTZ',
    62: 'DALVIK_IF_LEZ',
    63: 'DALVIK_AGET',
    64: 'DALVIK_AGET_WIDE',
    65: 'DALVIK_AGET_OBJECT',
    66: 'DALVIK_AGET_BOOLEAN',
    67: 'DALVIK_AGET_BYTE',
    68: 'DALVIK_AGET_CHAR',
    69: 'DALVIK_AGET_SHORT',
    70: 'DALVIK_APUT',
    71: 'DALVIK_APUT_WIDE',
    72: 'DALVIK_APUT_OBJECT',
    73: 'DALVIK_APUT_BOOLEAN',
    74: 'DALVIK_APUT_BYTE',
    75: 'DALVIK_APUT_CHAR',
    76: 'DALVIK_APUT_SHORT',
    77: 'DALVIK_IGET',
    78: 'DALVIK_IGET_WIDE',
    79: 'DALVIK_IGET_OBJECT',
    80: 'DALVIK_IGET_BOOLEAN',
    81: 'DALVIK_IGET_BYTE',
    82: 'DALVIK_IGET_CHAR',
    83: 'DALVIK_IGET_SHORT',
    84: 'DALVIK_IPUT',
    85: 'DALVIK_IPUT_WIDE',
    86: 'DALVIK_IPUT_OBJECT',
    87: 'DALVIK_IPUT_BOOLEAN',
    88: 'DALVIK_IPUT_BYTE',
    89: 'DALVIK_IPUT_CHAR',
    90: 'DALVIK_IPUT_SHORT',
    91: 'DALVIK_SGET',
    92: 'DALVIK_SGET_WIDE',
    93: 'DALVIK_SGET_OBJECT',
    94: 'DALVIK_SGET_BOOLEAN',
    95: 'DALVIK_SGET_BYTE',
    96: 'DALVIK_SGET_CHAR',
    97: 'DALVIK_SGET_SHORT',
    98: 'DALVIK_SPUT',
    99: 'DALVIK_SPUT_WIDE',
    100: 'DALVIK_SPUT_OBJECT',
    101: 'DALVIK_SPUT_BOOLEAN',
    102: 'DALVIK_SPUT_BYTE',
    103: 'DALVIK_SPUT_CHAR',
    104: 'DALVIK_SPUT_SHORT',
    105: 'DALVIK_INVOKE_VIRTUAL',
    106: 'DALVIK_INVOKE_SUPER',
    107: 'DALVIK_INVOKE_DIRECT',
    108: 'DALVIK_INVOKE_STATIC',
    109: 'DALVIK_INVOKE_INTERFACE',
    110: 'DALVIK_INVOKE_VIRTUAL_RANGE',
    111: 'DALVIK_INVOKE_SUPER_RANGE',
    112: 'DALVIK_INVOKE_DIRECT_RANGE',
    113: 'DALVIK_INVOKE_STATIC_RANGE',
    114: 'DALVIK_INVOKE_INTERFACE_RANGE',
    115: 'DALVIK_NEG_INT',
    116: 'DALVIK_NOT_INT',
    117: 'DALVIK_NEG_LONG',
    118: 'DALVIK_NOT_LONG',
    119: 'DALVIK_NEG_FLOAT',
    120: 'DALVIK_NEG_DOUBLE',
    121: 'DALVIK_INT_TO_LONG',
    122: 'DALVIK_INT_TO_FLOAT',
    123: 'DALVIK_INT_TO_DOUBLE',
    124: 'DALVIK_LONG_TO_INT',
    125: 'DALVIK_LONG_TO_FLOAT',
    126: 'DALVIK_LONG_TO_DOUBLE',
    127: 'DALVIK_FLOAT_TO_INT',
    128: 'DALVIK_FLOAT_TO_LONG',
    129: 'DALVIK_FLOAT_TO_DOUBLE',
    130: 'DALVIK_DOUBLE_TO_INT',
    131: 'DALVIK_DOUBLE_TO_LONG',
    132: 'DALVIK_DOUBLE_TO_FLOAT',
    133: 'DALVIK_INT_TO_BYTE',
    134: 'DALVIK_INT_TO_CHAR',
    135: 'DALVIK_INT_TO_SHORT',
    136: 'DALVIK_ADD_INT',
    137: 'DALVIK_SUB_INT',
    138: 'DALVIK_MUL_INT',
    139: 'DALVIK_DIV_INT',
    140: 'DALVIK_REM_INT',
    141: 'DALVIK_AND_INT',
    142: 'DALVIK_OR_INT',
    143: 'DALVIK_XOR_INT',
    144: 'DALVIK_SHL_INT',
    145: 'DALVIK_SHR_INT',
    146: 'DALVIK_USHR_INT',
    147: 'DALVIK_ADD_LONG',
    148: 'DALVIK_SUB_LONG',
    149: 'DALVIK_MUL_LONG',
    150: 'DALVIK_DIV_LONG',
    151: 'DALVIK_REM_LONG',
    152: 'DALVIK_AND_LONG',
    153: 'DALVIK_OR_LONG',
    154: 'DALVIK_XOR_LONG',
    155: 'DALVIK_SHL_LONG',
    156: 'DALVIK_SHR_LONG',
    157: 'DALVIK_USHR_LONG',
    158: 'DALVIK_ADD_FLOAT',
    159: 'DALVIK_SUB_FLOAT',
    160: 'DALVIK_MUL_FLOAT',
    161: 'DALVIK_DIV_FLOAT',
    162: 'DALVIK_REM_FLOAT',
    163: 'DALVIK_ADD_DOUBLE',
    164: 'DALVIK_SUB_DOUBLE',
    165: 'DALVIK_MUL_DOUBLE',
    166: 'DALVIK_DIV_DOUBLE',
    167: 'DALVIK_REM_DOUBLE',
    168: 'DALVIK_ADD_INT_2ADDR',
    169: 'DALVIK_SUB_INT_2ADDR',
    170: 'DALVIK_MUL_INT_2ADDR',
    171: 'DALVIK_DIV_INT_2ADDR',
    172: 'DALVIK_REM_INT_2ADDR',
    173: 'DALVIK_AND_INT_2ADDR',
    174: 'DALVIK_OR_INT_2ADDR',
    175: 'DALVIK_XOR_INT_2ADDR',
    176: 'DALVIK_SHL_INT_2ADDR',
    177: 'DALVIK_SHR_INT_2ADDR',
    178: 'DALVIK_USHR_INT_2ADDR',
    179: 'DALVIK_ADD_LONG_2ADDR',
    180: 'DALVIK_SUB_LONG_2ADDR',
    181: 'DALVIK_MUL_LONG_2ADDR',
    182: 'DALVIK_DIV_LONG_2ADDR',
    183: 'DALVIK_REM_LONG_2ADDR',
    184: 'DALVIK_AND_LONG_2ADDR',
    185: 'DALVIK_OR_LONG_2ADDR',
    186: 'DALVIK_XOR_LONG_2ADDR',
    187: 'DALVIK_SHL_LONG_2ADDR',
    188: 'DALVIK_SHR_LONG_2ADDR',
    189: 'DALVIK_USHR_LONG_2ADDR',
    190: 'DALVIK_ADD_FLOAT_2ADDR',
    191: 'DALVIK_SUB_FLOAT_2ADDR',
    192: 'DALVIK_MUL_FLOAT_2ADDR',
    193: 'DALVIK_DIV_FLOAT_2ADDR',
    194: 'DALVIK_REM_FLOAT_2ADDR',
    195: 'DALVIK_ADD_DOUBLE_2ADDR',
    196: 'DALVIK_SUB_DOUBLE_2ADDR',
    197: 'DALVIK_MUL_DOUBLE_2ADDR',
    198: 'DALVIK_DIV_DOUBLE_2ADDR',
    199: 'DALVIK_REM_DOUBLE_2ADDR',
    200: 'DALVIK_ADD_INT_LIT16',
    201: 'DALVIK_RSUB_INT',
    202: 'DALVIK_MUL_INT_LIT16',
    203: 'DALVIK_DIV_INT_LIT16',
    204: 'DALVIK_REM_INT_LIT16',
    205: 'DALVIK_AND_INT_LIT16',
    206: 'DALVIK_OR_INT_LIT16',
    207: 'DALVIK_XOR_INT_LIT16',
    208: 'DALVIK_ADD_INT_LIT8',
    209: 'DALVIK_RSUB_INT_LIT8',
    210: 'DALVIK_MUL_INT_LIT8',
    211: 'DALVIK_DIV_INT_LIT8',
    212: 'DALVIK_REM_INT_LIT8',
    213: 'DALVIK_AND_INT_LIT8',
    214: 'DALVIK_OR_INT_LIT8',
    215: 'DALVIK_XOR_INT_LIT8',
    216: 'DALVIK_SHL_INT_LIT8',
    217: 'DALVIK_SHR_INT_LIT8',
    218: 'DALVIK_USHR_INT_LIT8',
    219: 'DALVIK_IGET_VOLATILE',
    220: 'DALVIK_IPUT_VOLATILE',
    221: 'DALVIK_SGET_VOLATILE',
    222: 'DALVIK_SPUT_VOLATILE',
    223: 'DALVIK_IGET_OBJECT_VOLATILE',
    224: 'DALVIK_IGET_WIDE_VOLATILE',
    225: 'DALVIK_IPUT_WIDE_VOLATILE',
    226: 'DALVIK_SGET_WIDE_VOLATILE',
    227: 'DALVIK_SPUT_WIDE_VOLATILE',
    228: 'DALVIK_BREAKPOINT',
    229: 'DALVIK_THROW_VERIFICATION_ERROR',
    230: 'DALVIK_EXECUTE_INLINE',
    231: 'DALVIK_EXECUTE_INLINE_RANGE',
    232: 'DALVIK_INVOKE_DIRECT_EMPTY',
    233: 'DALVIK_RETURN_VOID_BARRIER',
    234: 'DALVIK_IGET_QUICK',
    235: 'DALVIK_IGET_WIDE_QUICK',
    236: 'DALVIK_IGET_OBJECT_QUICK',
    237: 'DALVIK_IPUT_QUICK',
    238: 'DALVIK_IPUT_WIDE_QUICK',
    239: 'DALVIK_IPUT_OBJECT_QUICK',
    240: 'DALVIK_INVOKE_VIRTUAL_QUICK',
    241: 'DALVIK_INVOKE_VIRTUAL_QUICK_RANGE',
    242: 'DALVIK_INVOKE_SUPER_QUICK',
    243: 'DALVIK_INVOKE_SUPER_QUICK_RANGE',
    244: 'DALVIK_IPUT_OBJECT_VOLATILE',
    245: 'DALVIK_SGET_OBJECT_VOLATILE',
    246: 'DALVIK_SPUT_OBJECT_VOLATILE',
    247: 'DALVIK_INVOKE_POLYMORPHIC',
    248: 'DALVIK_INVOKE_POLYMORPHIC_RANGE',
    249: 'DALVIK_INVOKE_CUSTOM',
    250: 'DALVIK_INVOKE_CUSTOM_RANGE',
    251: 'DALVIK_LAST',
}
DALVIK_UNUSED = 0
DALVIK_NOP = 1
DALVIK_MOVE = 2
DALVIK_MOVE_FROM16 = 3
DALVIK_MOVE_16 = 4
DALVIK_MOVE_WIDE = 5
DALVIK_MOVE_WIDE_FROM16 = 6
DALVIK_MOVE_WIDE_16 = 7
DALVIK_MOVE_OBJECT = 8
DALVIK_MOVE_OBJECT_FROM16 = 9
DALVIK_MOVE_OBJECT_16 = 10
DALVIK_MOVE_RESULT = 11
DALVIK_MOVE_RESULT_WIDE = 12
DALVIK_MOVE_RESULT_OBJECT = 13
DALVIK_MOVE_EXCEPTION = 14
DALVIK_RETURN_VOID = 15
DALVIK_RETURN = 16
DALVIK_RETURN_WIDE = 17
DALVIK_RETURN_OBJECT = 18
DALVIK_CONST_4 = 19
DALVIK_CONST_16 = 20
DALVIK_CONST = 21
DALVIK_CONST_HIGH16 = 22
DALVIK_CONST_WIDE_16 = 23
DALVIK_CONST_WIDE_32 = 24
DALVIK_CONST_WIDE = 25
DALVIK_CONST_WIDE_HIGH16 = 26
DALVIK_CONST_STRING = 27
DALVIK_CONST_STRING_JUMBO = 28
DALVIK_CONST_CLASS = 29
DALVIK_MONITOR_ENTER = 30
DALVIK_MONITOR_EXIT = 31
DALVIK_CHECK_CAST = 32
DALVIK_INSTANCE_OF = 33
DALVIK_ARRAY_LENGTH = 34
DALVIK_NEW_INSTANCE = 35
DALVIK_NEW_ARRAY = 36
DALVIK_FILLED_NEW_ARRAY = 37
DALVIK_FILLED_NEW_ARRAY_RANGE = 38
DALVIK_FILL_ARRAY_DATA = 39
DALVIK_THROW = 40
DALVIK_GOTO = 41
DALVIK_GOTO_16 = 42
DALVIK_GOTO_32 = 43
DALVIK_PACKED_SWITCH = 44
DALVIK_SPARSE_SWITCH = 45
DALVIK_CMPL_FLOAT = 46
DALVIK_CMPG_FLOAT = 47
DALVIK_CMPL_DOUBLE = 48
DALVIK_CMPG_DOUBLE = 49
DALVIK_CMP_LONG = 50
DALVIK_IF_EQ = 51
DALVIK_IF_NE = 52
DALVIK_IF_LT = 53
DALVIK_IF_GE = 54
DALVIK_IF_GT = 55
DALVIK_IF_LE = 56
DALVIK_IF_EQZ = 57
DALVIK_IF_NEZ = 58
DALVIK_IF_LTZ = 59
DALVIK_IF_GEZ = 60
DALVIK_IF_GTZ = 61
DALVIK_IF_LEZ = 62
DALVIK_AGET = 63
DALVIK_AGET_WIDE = 64
DALVIK_AGET_OBJECT = 65
DALVIK_AGET_BOOLEAN = 66
DALVIK_AGET_BYTE = 67
DALVIK_AGET_CHAR = 68
DALVIK_AGET_SHORT = 69
DALVIK_APUT = 70
DALVIK_APUT_WIDE = 71
DALVIK_APUT_OBJECT = 72
DALVIK_APUT_BOOLEAN = 73
DALVIK_APUT_BYTE = 74
DALVIK_APUT_CHAR = 75
DALVIK_APUT_SHORT = 76
DALVIK_IGET = 77
DALVIK_IGET_WIDE = 78
DALVIK_IGET_OBJECT = 79
DALVIK_IGET_BOOLEAN = 80
DALVIK_IGET_BYTE = 81
DALVIK_IGET_CHAR = 82
DALVIK_IGET_SHORT = 83
DALVIK_IPUT = 84
DALVIK_IPUT_WIDE = 85
DALVIK_IPUT_OBJECT = 86
DALVIK_IPUT_BOOLEAN = 87
DALVIK_IPUT_BYTE = 88
DALVIK_IPUT_CHAR = 89
DALVIK_IPUT_SHORT = 90
DALVIK_SGET = 91
DALVIK_SGET_WIDE = 92
DALVIK_SGET_OBJECT = 93
DALVIK_SGET_BOOLEAN = 94
DALVIK_SGET_BYTE = 95
DALVIK_SGET_CHAR = 96
DALVIK_SGET_SHORT = 97
DALVIK_SPUT = 98
DALVIK_SPUT_WIDE = 99
DALVIK_SPUT_OBJECT = 100
DALVIK_SPUT_BOOLEAN = 101
DALVIK_SPUT_BYTE = 102
DALVIK_SPUT_CHAR = 103
DALVIK_SPUT_SHORT = 104
DALVIK_INVOKE_VIRTUAL = 105
DALVIK_INVOKE_SUPER = 106
DALVIK_INVOKE_DIRECT = 107
DALVIK_INVOKE_STATIC = 108
DALVIK_INVOKE_INTERFACE = 109
DALVIK_INVOKE_VIRTUAL_RANGE = 110
DALVIK_INVOKE_SUPER_RANGE = 111
DALVIK_INVOKE_DIRECT_RANGE = 112
DALVIK_INVOKE_STATIC_RANGE = 113
DALVIK_INVOKE_INTERFACE_RANGE = 114
DALVIK_NEG_INT = 115
DALVIK_NOT_INT = 116
DALVIK_NEG_LONG = 117
DALVIK_NOT_LONG = 118
DALVIK_NEG_FLOAT = 119
DALVIK_NEG_DOUBLE = 120
DALVIK_INT_TO_LONG = 121
DALVIK_INT_TO_FLOAT = 122
DALVIK_INT_TO_DOUBLE = 123
DALVIK_LONG_TO_INT = 124
DALVIK_LONG_TO_FLOAT = 125
DALVIK_LONG_TO_DOUBLE = 126
DALVIK_FLOAT_TO_INT = 127
DALVIK_FLOAT_TO_LONG = 128
DALVIK_FLOAT_TO_DOUBLE = 129
DALVIK_DOUBLE_TO_INT = 130
DALVIK_DOUBLE_TO_LONG = 131
DALVIK_DOUBLE_TO_FLOAT = 132
DALVIK_INT_TO_BYTE = 133
DALVIK_INT_TO_CHAR = 134
DALVIK_INT_TO_SHORT = 135
DALVIK_ADD_INT = 136
DALVIK_SUB_INT = 137
DALVIK_MUL_INT = 138
DALVIK_DIV_INT = 139
DALVIK_REM_INT = 140
DALVIK_AND_INT = 141
DALVIK_OR_INT = 142
DALVIK_XOR_INT = 143
DALVIK_SHL_INT = 144
DALVIK_SHR_INT = 145
DALVIK_USHR_INT = 146
DALVIK_ADD_LONG = 147
DALVIK_SUB_LONG = 148
DALVIK_MUL_LONG = 149
DALVIK_DIV_LONG = 150
DALVIK_REM_LONG = 151
DALVIK_AND_LONG = 152
DALVIK_OR_LONG = 153
DALVIK_XOR_LONG = 154
DALVIK_SHL_LONG = 155
DALVIK_SHR_LONG = 156
DALVIK_USHR_LONG = 157
DALVIK_ADD_FLOAT = 158
DALVIK_SUB_FLOAT = 159
DALVIK_MUL_FLOAT = 160
DALVIK_DIV_FLOAT = 161
DALVIK_REM_FLOAT = 162
DALVIK_ADD_DOUBLE = 163
DALVIK_SUB_DOUBLE = 164
DALVIK_MUL_DOUBLE = 165
DALVIK_DIV_DOUBLE = 166
DALVIK_REM_DOUBLE = 167
DALVIK_ADD_INT_2ADDR = 168
DALVIK_SUB_INT_2ADDR = 169
DALVIK_MUL_INT_2ADDR = 170
DALVIK_DIV_INT_2ADDR = 171
DALVIK_REM_INT_2ADDR = 172
DALVIK_AND_INT_2ADDR = 173
DALVIK_OR_INT_2ADDR = 174
DALVIK_XOR_INT_2ADDR = 175
DALVIK_SHL_INT_2ADDR = 176
DALVIK_SHR_INT_2ADDR = 177
DALVIK_USHR_INT_2ADDR = 178
DALVIK_ADD_LONG_2ADDR = 179
DALVIK_SUB_LONG_2ADDR = 180
DALVIK_MUL_LONG_2ADDR = 181
DALVIK_DIV_LONG_2ADDR = 182
DALVIK_REM_LONG_2ADDR = 183
DALVIK_AND_LONG_2ADDR = 184
DALVIK_OR_LONG_2ADDR = 185
DALVIK_XOR_LONG_2ADDR = 186
DALVIK_SHL_LONG_2ADDR = 187
DALVIK_SHR_LONG_2ADDR = 188
DALVIK_USHR_LONG_2ADDR = 189
DALVIK_ADD_FLOAT_2ADDR = 190
DALVIK_SUB_FLOAT_2ADDR = 191
DALVIK_MUL_FLOAT_2ADDR = 192
DALVIK_DIV_FLOAT_2ADDR = 193
DALVIK_REM_FLOAT_2ADDR = 194
DALVIK_ADD_DOUBLE_2ADDR = 195
DALVIK_SUB_DOUBLE_2ADDR = 196
DALVIK_MUL_DOUBLE_2ADDR = 197
DALVIK_DIV_DOUBLE_2ADDR = 198
DALVIK_REM_DOUBLE_2ADDR = 199
DALVIK_ADD_INT_LIT16 = 200
DALVIK_RSUB_INT = 201
DALVIK_MUL_INT_LIT16 = 202
DALVIK_DIV_INT_LIT16 = 203
DALVIK_REM_INT_LIT16 = 204
DALVIK_AND_INT_LIT16 = 205
DALVIK_OR_INT_LIT16 = 206
DALVIK_XOR_INT_LIT16 = 207
DALVIK_ADD_INT_LIT8 = 208
DALVIK_RSUB_INT_LIT8 = 209
DALVIK_MUL_INT_LIT8 = 210
DALVIK_DIV_INT_LIT8 = 211
DALVIK_REM_INT_LIT8 = 212
DALVIK_AND_INT_LIT8 = 213
DALVIK_OR_INT_LIT8 = 214
DALVIK_XOR_INT_LIT8 = 215
DALVIK_SHL_INT_LIT8 = 216
DALVIK_SHR_INT_LIT8 = 217
DALVIK_USHR_INT_LIT8 = 218
DALVIK_IGET_VOLATILE = 219
DALVIK_IPUT_VOLATILE = 220
DALVIK_SGET_VOLATILE = 221
DALVIK_SPUT_VOLATILE = 222
DALVIK_IGET_OBJECT_VOLATILE = 223
DALVIK_IGET_WIDE_VOLATILE = 224
DALVIK_IPUT_WIDE_VOLATILE = 225
DALVIK_SGET_WIDE_VOLATILE = 226
DALVIK_SPUT_WIDE_VOLATILE = 227
DALVIK_BREAKPOINT = 228
DALVIK_THROW_VERIFICATION_ERROR = 229
DALVIK_EXECUTE_INLINE = 230
DALVIK_EXECUTE_INLINE_RANGE = 231
DALVIK_INVOKE_DIRECT_EMPTY = 232
DALVIK_RETURN_VOID_BARRIER = 233
DALVIK_IGET_QUICK = 234
DALVIK_IGET_WIDE_QUICK = 235
DALVIK_IGET_OBJECT_QUICK = 236
DALVIK_IPUT_QUICK = 237
DALVIK_IPUT_WIDE_QUICK = 238
DALVIK_IPUT_OBJECT_QUICK = 239
DALVIK_INVOKE_VIRTUAL_QUICK = 240
DALVIK_INVOKE_VIRTUAL_QUICK_RANGE = 241
DALVIK_INVOKE_SUPER_QUICK = 242
DALVIK_INVOKE_SUPER_QUICK_RANGE = 243
DALVIK_IPUT_OBJECT_VOLATILE = 244
DALVIK_SGET_OBJECT_VOLATILE = 245
DALVIK_SPUT_OBJECT_VOLATILE = 246
DALVIK_INVOKE_POLYMORPHIC = 247
DALVIK_INVOKE_POLYMORPHIC_RANGE = 248
DALVIK_INVOKE_CUSTOM = 249
DALVIK_INVOKE_CUSTOM_RANGE = 250
DALVIK_LAST = 251
_7F86040BB27194B4B6B6A2B46CC5F6D4 = ctypes.c_uint32 # enum

# values for enumeration '_3E426F96F68C120BD73661AAC99B228D'
_3E426F96F68C120BD73661AAC99B228D__enumvalues = {
    0: 's39_null',
    1: 's39_a',
    2: 's39_ad',
    3: 's39_adb',
    4: 's39_adbr',
    5: 's39_adr',
    6: 's39_adtr',
    7: 's39_adtra',
    8: 's39_ae',
    9: 's39_aeb',
    10: 's39_aebr',
    11: 's39_aer',
    12: 's39_afi',
    13: 's39_ag',
    14: 's39_agf',
    15: 's39_agfi',
    16: 's39_agfr',
    17: 's39_agh',
    18: 's39_aghi',
    19: 's39_aghik',
    20: 's39_agr',
    21: 's39_agrk',
    22: 's39_agsi',
    23: 's39_ah',
    24: 's39_ahhhr',
    25: 's39_ahhlr',
    26: 's39_ahi',
    27: 's39_ahik',
    28: 's39_ahy',
    29: 's39_aih',
    30: 's39_al',
    31: 's39_alc',
    32: 's39_alcg',
    33: 's39_alcgr',
    34: 's39_alcr',
    35: 's39_alfi',
    36: 's39_alg',
    37: 's39_algf',
    38: 's39_algfi',
    39: 's39_algfr',
    40: 's39_alghsik',
    41: 's39_algr',
    42: 's39_algrk',
    43: 's39_algsi',
    44: 's39_alhhhr',
    45: 's39_alhhlr',
    46: 's39_alhsik',
    47: 's39_alr',
    48: 's39_alrk',
    49: 's39_alsi',
    50: 's39_alsih',
    51: 's39_alsihn',
    52: 's39_aly',
    53: 's39_ap',
    54: 's39_ar',
    55: 's39_ark',
    56: 's39_asi',
    57: 's39_au',
    58: 's39_aur',
    59: 's39_aw',
    60: 's39_awr',
    61: 's39_axbr',
    62: 's39_axr',
    63: 's39_axtr',
    64: 's39_axtra',
    65: 's39_ay',
    66: 's39_b',
    67: 's39_bo',
    68: 's39_bh',
    69: 's39_bnle',
    70: 's39_bl',
    71: 's39_bnhe',
    72: 's39_blh',
    73: 's39_bne',
    74: 's39_be',
    75: 's39_bnlh',
    76: 's39_bhe',
    77: 's39_bnl',
    78: 's39_ble',
    79: 's39_bnh',
    80: 's39_bno',
    81: 's39_bor',
    82: 's39_bhr',
    83: 's39_bnler',
    84: 's39_blr',
    85: 's39_bnher',
    86: 's39_blhr',
    87: 's39_bner',
    88: 's39_ber',
    89: 's39_bnlhr',
    90: 's39_bher',
    91: 's39_bnlr',
    92: 's39_bler',
    93: 's39_bnhr',
    94: 's39_bnor',
    95: 's39_bakr',
    96: 's39_bal',
    97: 's39_balr',
    98: 's39_bas',
    99: 's39_basr',
    100: 's39_bassm',
    101: 's39_bc',
    102: 's39_bcr',
    103: 's39_bct',
    104: 's39_bctg',
    105: 's39_bctgr',
    106: 's39_bctr',
    107: 's39_bi',
    108: 's39_bio',
    109: 's39_bih',
    110: 's39_binle',
    111: 's39_bil',
    112: 's39_binhe',
    113: 's39_bilh',
    114: 's39_bine',
    115: 's39_bie',
    116: 's39_binlh',
    117: 's39_bihe',
    118: 's39_binl',
    119: 's39_bile',
    120: 's39_binh',
    121: 's39_bino',
    122: 's39_bic',
    123: 's39_bpp',
    124: 's39_bprp',
    125: 's39_br',
    126: 's39_bras',
    127: 's39_brasl',
    128: 's39_brc',
    129: 's39_brcl',
    130: 's39_brct',
    131: 's39_brctg',
    132: 's39_brcth',
    133: 's39_brxh',
    134: 's39_brxhg',
    135: 's39_brxle',
    136: 's39_brxlg',
    137: 's39_bsa',
    138: 's39_bsg',
    139: 's39_bsm',
    140: 's39_bxh',
    141: 's39_bxhg',
    142: 's39_bxle',
    143: 's39_bxleg',
    144: 's39_c',
    145: 's39_cd',
    146: 's39_cdb',
    147: 's39_cdbr',
    148: 's39_cdfbr',
    149: 's39_cdfbra',
    150: 's39_cdfr',
    151: 's39_cdftr',
    152: 's39_cdgbr',
    153: 's39_cdgbra',
    154: 's39_cdgr',
    155: 's39_cdgtr',
    156: 's39_cdgtra',
    157: 's39_cdlfbr',
    158: 's39_cdlftr',
    159: 's39_cdlgbr',
    160: 's39_cdlgtr',
    161: 's39_cdpt',
    162: 's39_cdr',
    163: 's39_cds',
    164: 's39_cdsg',
    165: 's39_cdstr',
    166: 's39_cdsy',
    167: 's39_cdtr',
    168: 's39_cdutr',
    169: 's39_cdzt',
    170: 's39_ce',
    171: 's39_ceb',
    172: 's39_cebr',
    173: 's39_cedtr',
    174: 's39_cefbr',
    175: 's39_cefbra',
    176: 's39_cefr',
    177: 's39_cegbr',
    178: 's39_cegbra',
    179: 's39_cegr',
    180: 's39_celfbr',
    181: 's39_celgbr',
    182: 's39_cer',
    183: 's39_cextr',
    184: 's39_cfc',
    185: 's39_cfdbr',
    186: 's39_cfdbra',
    187: 's39_cfdr',
    188: 's39_cfdtr',
    189: 's39_cfebr',
    190: 's39_cfebra',
    191: 's39_cfer',
    192: 's39_cfi',
    193: 's39_cfxbr',
    194: 's39_cfxbra',
    195: 's39_cfxr',
    196: 's39_cfxtr',
    197: 's39_cg',
    198: 's39_cgdbr',
    199: 's39_cgdbra',
    200: 's39_cgdr',
    201: 's39_cgdtr',
    202: 's39_cgdtra',
    203: 's39_cgebr',
    204: 's39_cgebra',
    205: 's39_cger',
    206: 's39_cgf',
    207: 's39_cgfi',
    208: 's39_cgfr',
    209: 's39_cgfrl',
    210: 's39_cgh',
    211: 's39_cghi',
    212: 's39_cghrl',
    213: 's39_cghsi',
    214: 's39_cgib',
    215: 's39_cgibh',
    216: 's39_cgibnhe',
    217: 's39_cgiblh',
    218: 's39_cgibnlh',
    219: 's39_cgibnl',
    220: 's39_cgible',
    221: 's39_cgij',
    222: 's39_cgijh',
    223: 's39_cgijnhe',
    224: 's39_cgijlh',
    225: 's39_cgijnlh',
    226: 's39_cgijnl',
    227: 's39_cgijle',
    228: 's39_cgit',
    229: 's39_cgith',
    230: 's39_cgitnhe',
    231: 's39_cgitlh',
    232: 's39_cgitnlh',
    233: 's39_cgitnl',
    234: 's39_cgitle',
    235: 's39_cgr',
    236: 's39_cgrb',
    237: 's39_cgrbh',
    238: 's39_cgrbnhe',
    239: 's39_cgrblh',
    240: 's39_cgrbnlh',
    241: 's39_cgrbnl',
    242: 's39_cgrble',
    243: 's39_cgrj',
    244: 's39_cgrjh',
    245: 's39_cgrjnhe',
    246: 's39_cgrjlh',
    247: 's39_cgrjnlh',
    248: 's39_cgrjnl',
    249: 's39_cgrjle',
    250: 's39_cgrl',
    251: 's39_cgrt',
    252: 's39_cgrth',
    253: 's39_cgrtnhe',
    254: 's39_cgrtlh',
    255: 's39_cgrtnlh',
    256: 's39_cgrtnl',
    257: 's39_cgrtle',
    258: 's39_cgxbr',
    259: 's39_cgxbra',
    260: 's39_cgxr',
    261: 's39_cgxtr',
    262: 's39_cgxtra',
    263: 's39_ch',
    264: 's39_chf',
    265: 's39_chhr',
    266: 's39_chhsi',
    267: 's39_chi',
    268: 's39_chlr',
    269: 's39_chrl',
    270: 's39_chsi',
    271: 's39_chy',
    272: 's39_cib',
    273: 's39_cibh',
    274: 's39_cibnhe',
    275: 's39_ciblh',
    276: 's39_cibnlh',
    277: 's39_cibnl',
    278: 's39_cible',
    279: 's39_cih',
    280: 's39_cij',
    281: 's39_cijh',
    282: 's39_cijnhe',
    283: 's39_cijlh',
    284: 's39_cijnlh',
    285: 's39_cijnl',
    286: 's39_cijle',
    287: 's39_cit',
    288: 's39_cith',
    289: 's39_citnhe',
    290: 's39_citlh',
    291: 's39_citnlh',
    292: 's39_citnl',
    293: 's39_citle',
    294: 's39_cksm',
    295: 's39_cl',
    296: 's39_clc',
    297: 's39_clcl',
    298: 's39_clcle',
    299: 's39_clclu',
    300: 's39_clfdbr',
    301: 's39_clfdtr',
    302: 's39_clfebr',
    303: 's39_clfhsi',
    304: 's39_clfi',
    305: 's39_clfit',
    306: 's39_clfith',
    307: 's39_clfitnhe',
    308: 's39_clfitlh',
    309: 's39_clfitnlh',
    310: 's39_clfitnl',
    311: 's39_clfitle',
    312: 's39_clfxbr',
    313: 's39_clfxtr',
    314: 's39_clg',
    315: 's39_clgdbr',
    316: 's39_clgdtr',
    317: 's39_clgebr',
    318: 's39_clgf',
    319: 's39_clgfi',
    320: 's39_clgfr',
    321: 's39_clgfrl',
    322: 's39_clghrl',
    323: 's39_clghsi',
    324: 's39_clgib',
    325: 's39_clgibh',
    326: 's39_clgibnhe',
    327: 's39_clgiblh',
    328: 's39_clgibnlh',
    329: 's39_clgibnl',
    330: 's39_clgible',
    331: 's39_clgij',
    332: 's39_clgijh',
    333: 's39_clgijnhe',
    334: 's39_clgijlh',
    335: 's39_clgijnlh',
    336: 's39_clgijnl',
    337: 's39_clgijle',
    338: 's39_clgit',
    339: 's39_clgith',
    340: 's39_clgitnhe',
    341: 's39_clgitlh',
    342: 's39_clgitnlh',
    343: 's39_clgitnl',
    344: 's39_clgitle',
    345: 's39_clgr',
    346: 's39_clgrb',
    347: 's39_clgrbh',
    348: 's39_clgrbnhe',
    349: 's39_clgrblh',
    350: 's39_clgrbnlh',
    351: 's39_clgrbnl',
    352: 's39_clgrble',
    353: 's39_clgrj',
    354: 's39_clgrjh',
    355: 's39_clgrjnhe',
    356: 's39_clgrjlh',
    357: 's39_clgrjnlh',
    358: 's39_clgrjnl',
    359: 's39_clgrjle',
    360: 's39_clgrl',
    361: 's39_clgrt',
    362: 's39_clgrth',
    363: 's39_clgrtnhe',
    364: 's39_clgrtlh',
    365: 's39_clgrtnlh',
    366: 's39_clgrtnl',
    367: 's39_clgrtle',
    368: 's39_clgt',
    369: 's39_clgth',
    370: 's39_clgtnhe',
    371: 's39_clgtlh',
    372: 's39_clgtnlh',
    373: 's39_clgtnl',
    374: 's39_clgtle',
    375: 's39_clgxbr',
    376: 's39_clgxtr',
    377: 's39_clhf',
    378: 's39_clhhr',
    379: 's39_clhhsi',
    380: 's39_clhlr',
    381: 's39_clhrl',
    382: 's39_cli',
    383: 's39_clib',
    384: 's39_clibh',
    385: 's39_clibnhe',
    386: 's39_cliblh',
    387: 's39_clibnlh',
    388: 's39_clibnl',
    389: 's39_clible',
    390: 's39_clih',
    391: 's39_clij',
    392: 's39_clijh',
    393: 's39_clijnhe',
    394: 's39_clijlh',
    395: 's39_clijnlh',
    396: 's39_clijnl',
    397: 's39_clijle',
    398: 's39_cliy',
    399: 's39_clm',
    400: 's39_clmh',
    401: 's39_clmy',
    402: 's39_clr',
    403: 's39_clrb',
    404: 's39_clrbh',
    405: 's39_clrbnhe',
    406: 's39_clrblh',
    407: 's39_clrbnlh',
    408: 's39_clrbnl',
    409: 's39_clrble',
    410: 's39_clrj',
    411: 's39_clrjh',
    412: 's39_clrjnhe',
    413: 's39_clrjlh',
    414: 's39_clrjnlh',
    415: 's39_clrjnl',
    416: 's39_clrjle',
    417: 's39_clrl',
    418: 's39_clrt',
    419: 's39_clrth',
    420: 's39_clrtnhe',
    421: 's39_clrtlh',
    422: 's39_clrtnlh',
    423: 's39_clrtnl',
    424: 's39_clrtle',
    425: 's39_clst',
    426: 's39_clt',
    427: 's39_clth',
    428: 's39_cltnhe',
    429: 's39_cltlh',
    430: 's39_cltnlh',
    431: 's39_cltnl',
    432: 's39_cltle',
    433: 's39_cly',
    434: 's39_cmpsc',
    435: 's39_cp',
    436: 's39_cpdt',
    437: 's39_cpsdr',
    438: 's39_cpxt',
    439: 's39_cpya',
    440: 's39_cr',
    441: 's39_crb',
    442: 's39_crbh',
    443: 's39_crbnhe',
    444: 's39_crblh',
    445: 's39_crbnlh',
    446: 's39_crbnl',
    447: 's39_crble',
    448: 's39_crdte',
    449: 's39_crj',
    450: 's39_crjh',
    451: 's39_crjnhe',
    452: 's39_crjlh',
    453: 's39_crjnlh',
    454: 's39_crjnl',
    455: 's39_crjle',
    456: 's39_crl',
    457: 's39_crt',
    458: 's39_crth',
    459: 's39_crtnhe',
    460: 's39_crtlh',
    461: 's39_crtnlh',
    462: 's39_crtnl',
    463: 's39_crtle',
    464: 's39_cs',
    465: 's39_csch',
    466: 's39_csdtr',
    467: 's39_csg',
    468: 's39_csp',
    469: 's39_cspg',
    470: 's39_csst',
    471: 's39_csxtr',
    472: 's39_csy',
    473: 's39_cu12',
    474: 's39_cu14',
    475: 's39_cu21',
    476: 's39_cu24',
    477: 's39_cu41',
    478: 's39_cu42',
    479: 's39_cudtr',
    480: 's39_cuse',
    481: 's39_cutfu',
    482: 's39_cuutf',
    483: 's39_cuxtr',
    484: 's39_cvb',
    485: 's39_cvbg',
    486: 's39_cvby',
    487: 's39_cvd',
    488: 's39_cvdg',
    489: 's39_cvdy',
    490: 's39_cxbr',
    491: 's39_cxfbr',
    492: 's39_cxfbra',
    493: 's39_cxfr',
    494: 's39_cxftr',
    495: 's39_cxgbr',
    496: 's39_cxgbra',
    497: 's39_cxgr',
    498: 's39_cxgtr',
    499: 's39_cxgtra',
    500: 's39_cxlfbr',
    501: 's39_cxlftr',
    502: 's39_cxlgbr',
    503: 's39_cxlgtr',
    504: 's39_cxpt',
    505: 's39_cxr',
    506: 's39_cxstr',
    507: 's39_cxtr',
    508: 's39_cxutr',
    509: 's39_cxzt',
    510: 's39_cy',
    511: 's39_czdt',
    512: 's39_czxt',
    513: 's39_d',
    514: 's39_dd',
    515: 's39_ddb',
    516: 's39_ddbr',
    517: 's39_ddr',
    518: 's39_ddtr',
    519: 's39_ddtra',
    520: 's39_de',
    521: 's39_deb',
    522: 's39_debr',
    523: 's39_der',
    524: 's39_dfltcc',
    525: 's39_diag',
    526: 's39_didbr',
    527: 's39_diebr',
    528: 's39_dl',
    529: 's39_dlg',
    530: 's39_dlgr',
    531: 's39_dlr',
    532: 's39_dp',
    533: 's39_dr',
    534: 's39_dsg',
    535: 's39_dsgf',
    536: 's39_dsgfr',
    537: 's39_dsgr',
    538: 's39_dxbr',
    539: 's39_dxr',
    540: 's39_dxtr',
    541: 's39_dxtra',
    542: 's39_ear',
    543: 's39_ecag',
    544: 's39_ecctr',
    545: 's39_ecpga',
    546: 's39_ectg',
    547: 's39_ed',
    548: 's39_edmk',
    549: 's39_eedtr',
    550: 's39_eextr',
    551: 's39_efpc',
    552: 's39_epair',
    553: 's39_epar',
    554: 's39_epctr',
    555: 's39_epsw',
    556: 's39_ereg',
    557: 's39_eregg',
    558: 's39_esair',
    559: 's39_esar',
    560: 's39_esdtr',
    561: 's39_esea',
    562: 's39_esta',
    563: 's39_esxtr',
    564: 's39_etnd',
    565: 's39_ex',
    566: 's39_exrl',
    567: 's39_fidbr',
    568: 's39_fidbra',
    569: 's39_fidr',
    570: 's39_fidtr',
    571: 's39_fiebr',
    572: 's39_fiebra',
    573: 's39_fier',
    574: 's39_fixbr',
    575: 's39_fixbra',
    576: 's39_fixr',
    577: 's39_fixtr',
    578: 's39_flogr',
    579: 's39_hdr',
    580: 's39_her',
    581: 's39_hsch',
    582: 's39_iac',
    583: 's39_ic',
    584: 's39_icm',
    585: 's39_icmh',
    586: 's39_icmy',
    587: 's39_icy',
    588: 's39_idte',
    589: 's39_iedtr',
    590: 's39_iextr',
    591: 's39_iihf',
    592: 's39_iihh',
    593: 's39_iihl',
    594: 's39_iilf',
    595: 's39_iilh',
    596: 's39_iill',
    597: 's39_ipk',
    598: 's39_ipm',
    599: 's39_ipte',
    600: 's39_irbm',
    601: 's39_iske',
    602: 's39_ivsk',
    603: 's39_j',
    604: 's39_jo',
    605: 's39_jh',
    606: 's39_jnle',
    607: 's39_jl',
    608: 's39_jnhe',
    609: 's39_jlh',
    610: 's39_jne',
    611: 's39_je',
    612: 's39_jnlh',
    613: 's39_jhe',
    614: 's39_jnl',
    615: 's39_jle',
    616: 's39_jnh',
    617: 's39_jno',
    618: 's39_jg',
    619: 's39_jgo',
    620: 's39_jgh',
    621: 's39_jgnle',
    622: 's39_jgl',
    623: 's39_jgnhe',
    624: 's39_jglh',
    625: 's39_jgne',
    626: 's39_jge',
    627: 's39_jgnlh',
    628: 's39_jghe',
    629: 's39_jgnl',
    630: 's39_jgle',
    631: 's39_jgnh',
    632: 's39_jgno',
    633: 's39_kdb',
    634: 's39_kdbr',
    635: 's39_kdsa',
    636: 's39_kdtr',
    637: 's39_keb',
    638: 's39_kebr',
    639: 's39_kimd',
    640: 's39_klmd',
    641: 's39_km',
    642: 's39_kma',
    643: 's39_kmac',
    644: 's39_kmc',
    645: 's39_kmctr',
    646: 's39_kmf',
    647: 's39_kmo',
    648: 's39_kxbr',
    649: 's39_kxtr',
    650: 's39_l',
    651: 's39_la',
    652: 's39_laa',
    653: 's39_laag',
    654: 's39_laal',
    655: 's39_laalg',
    656: 's39_lae',
    657: 's39_laey',
    658: 's39_lam',
    659: 's39_lamy',
    660: 's39_lan',
    661: 's39_lang',
    662: 's39_lao',
    663: 's39_laog',
    664: 's39_larl',
    665: 's39_lasp',
    666: 's39_lat',
    667: 's39_lax',
    668: 's39_laxg',
    669: 's39_lay',
    670: 's39_lb',
    671: 's39_lbh',
    672: 's39_lbr',
    673: 's39_lcbb',
    674: 's39_lcctl',
    675: 's39_lcdbr',
    676: 's39_lcdfr',
    677: 's39_lcdr',
    678: 's39_lcebr',
    679: 's39_lcer',
    680: 's39_lcgfr',
    681: 's39_lcgr',
    682: 's39_lcr',
    683: 's39_lctl',
    684: 's39_lctlg',
    685: 's39_lcxbr',
    686: 's39_lcxr',
    687: 's39_ld',
    688: 's39_lde',
    689: 's39_ldeb',
    690: 's39_ldebr',
    691: 's39_lder',
    692: 's39_ldetr',
    693: 's39_ldgr',
    694: 's39_ldr',
    695: 's39_ldrv',
    696: 's39_ldxbr',
    697: 's39_ldxbra',
    698: 's39_ldxr',
    699: 's39_ldxtr',
    700: 's39_ldy',
    701: 's39_le',
    702: 's39_ledbr',
    703: 's39_ledbra',
    704: 's39_ledr',
    705: 's39_ledtr',
    706: 's39_ler',
    707: 's39_lerv',
    708: 's39_lexbr',
    709: 's39_lexbra',
    710: 's39_lexr',
    711: 's39_ley',
    712: 's39_lfas',
    713: 's39_lfh',
    714: 's39_lfhat',
    715: 's39_lfpc',
    716: 's39_lg',
    717: 's39_lgat',
    718: 's39_lgb',
    719: 's39_lgbr',
    720: 's39_lgdr',
    721: 's39_lgf',
    722: 's39_lgfi',
    723: 's39_lgfr',
    724: 's39_lgfrl',
    725: 's39_lgg',
    726: 's39_lgh',
    727: 's39_lghi',
    728: 's39_lghr',
    729: 's39_lghrl',
    730: 's39_lgr',
    731: 's39_lgrl',
    732: 's39_lgsc',
    733: 's39_lh',
    734: 's39_lhh',
    735: 's39_lhi',
    736: 's39_lhr',
    737: 's39_lhrl',
    738: 's39_lhy',
    739: 's39_llc',
    740: 's39_llch',
    741: 's39_llcr',
    742: 's39_llgc',
    743: 's39_llgcr',
    744: 's39_llgf',
    745: 's39_llgfat',
    746: 's39_llgfr',
    747: 's39_llgfrl',
    748: 's39_llgfsg',
    749: 's39_llgh',
    750: 's39_llghr',
    751: 's39_llghrl',
    752: 's39_llgt',
    753: 's39_llgtat',
    754: 's39_llgtr',
    755: 's39_llh',
    756: 's39_llhh',
    757: 's39_llhr',
    758: 's39_llhrl',
    759: 's39_llihf',
    760: 's39_llihh',
    761: 's39_llihl',
    762: 's39_llilf',
    763: 's39_llilh',
    764: 's39_llill',
    765: 's39_llzrgf',
    766: 's39_lm',
    767: 's39_lmd',
    768: 's39_lmg',
    769: 's39_lmh',
    770: 's39_lmy',
    771: 's39_lndbr',
    772: 's39_lndfr',
    773: 's39_lndr',
    774: 's39_lnebr',
    775: 's39_lner',
    776: 's39_lngfr',
    777: 's39_lngr',
    778: 's39_lnr',
    779: 's39_lnxbr',
    780: 's39_lnxr',
    781: 's39_loc',
    782: 's39_loco',
    783: 's39_loch',
    784: 's39_locnle',
    785: 's39_locl',
    786: 's39_locnhe',
    787: 's39_loclh',
    788: 's39_locne',
    789: 's39_loce',
    790: 's39_locnlh',
    791: 's39_loche',
    792: 's39_locnl',
    793: 's39_locle',
    794: 's39_locnh',
    795: 's39_locno',
    796: 's39_locfh',
    797: 's39_locfho',
    798: 's39_locfhh',
    799: 's39_locfhnle',
    800: 's39_locfhl',
    801: 's39_locfhnhe',
    802: 's39_locfhlh',
    803: 's39_locfhne',
    804: 's39_locfhe',
    805: 's39_locfhnlh',
    806: 's39_locfhhe',
    807: 's39_locfhnl',
    808: 's39_locfhle',
    809: 's39_locfhnh',
    810: 's39_locfhno',
    811: 's39_locfhr',
    812: 's39_locfhro',
    813: 's39_locfhrh',
    814: 's39_locfhrnle',
    815: 's39_locfhrl',
    816: 's39_locfhrnhe',
    817: 's39_locfhrlh',
    818: 's39_locfhrne',
    819: 's39_locfhre',
    820: 's39_locfhrnlh',
    821: 's39_locfhrhe',
    822: 's39_locfhrnl',
    823: 's39_locfhrle',
    824: 's39_locfhrnh',
    825: 's39_locfhrno',
    826: 's39_locg',
    827: 's39_locgo',
    828: 's39_locgh',
    829: 's39_locgnle',
    830: 's39_locgl',
    831: 's39_locgnhe',
    832: 's39_locglh',
    833: 's39_locgne',
    834: 's39_locge',
    835: 's39_locgnlh',
    836: 's39_locghe',
    837: 's39_locgnl',
    838: 's39_locgle',
    839: 's39_locgnh',
    840: 's39_locgno',
    841: 's39_locghi',
    842: 's39_locghio',
    843: 's39_locghih',
    844: 's39_locghinle',
    845: 's39_locghil',
    846: 's39_locghinhe',
    847: 's39_locghilh',
    848: 's39_locghine',
    849: 's39_locghie',
    850: 's39_locghinlh',
    851: 's39_locghihe',
    852: 's39_locghinl',
    853: 's39_locghile',
    854: 's39_locghinh',
    855: 's39_locghino',
    856: 's39_locgr',
    857: 's39_locgro',
    858: 's39_locgrh',
    859: 's39_locgrnle',
    860: 's39_locgrl',
    861: 's39_locgrnhe',
    862: 's39_locgrlh',
    863: 's39_locgrne',
    864: 's39_locgre',
    865: 's39_locgrnlh',
    866: 's39_locgrhe',
    867: 's39_locgrnl',
    868: 's39_locgrle',
    869: 's39_locgrnh',
    870: 's39_locgrno',
    871: 's39_lochhi',
    872: 's39_lochhio',
    873: 's39_lochhih',
    874: 's39_lochhinle',
    875: 's39_lochhil',
    876: 's39_lochhinhe',
    877: 's39_lochhilh',
    878: 's39_lochhine',
    879: 's39_lochhie',
    880: 's39_lochhinlh',
    881: 's39_lochhihe',
    882: 's39_lochhinl',
    883: 's39_lochhile',
    884: 's39_lochhinh',
    885: 's39_lochhino',
    886: 's39_lochi',
    887: 's39_lochio',
    888: 's39_lochih',
    889: 's39_lochinle',
    890: 's39_lochil',
    891: 's39_lochinhe',
    892: 's39_lochilh',
    893: 's39_lochine',
    894: 's39_lochie',
    895: 's39_lochinlh',
    896: 's39_lochihe',
    897: 's39_lochinl',
    898: 's39_lochile',
    899: 's39_lochinh',
    900: 's39_lochino',
    901: 's39_locr',
    902: 's39_locro',
    903: 's39_locrh',
    904: 's39_locrnle',
    905: 's39_locrl',
    906: 's39_locrnhe',
    907: 's39_locrlh',
    908: 's39_locrne',
    909: 's39_locre',
    910: 's39_locrnlh',
    911: 's39_locrhe',
    912: 's39_locrnl',
    913: 's39_locrle',
    914: 's39_locrnh',
    915: 's39_locrno',
    916: 's39_lpctl',
    917: 's39_lpd',
    918: 's39_lpdbr',
    919: 's39_lpdfr',
    920: 's39_lpdg',
    921: 's39_lpdr',
    922: 's39_lpebr',
    923: 's39_lper',
    924: 's39_lpgfr',
    925: 's39_lpgr',
    926: 's39_lpp',
    927: 's39_lpq',
    928: 's39_lpr',
    929: 's39_lpsw',
    930: 's39_lpswe',
    931: 's39_lptea',
    932: 's39_lpxbr',
    933: 's39_lpxr',
    934: 's39_lr',
    935: 's39_lra',
    936: 's39_lrag',
    937: 's39_lray',
    938: 's39_lrdr',
    939: 's39_lrer',
    940: 's39_lrl',
    941: 's39_lrv',
    942: 's39_lrvg',
    943: 's39_lrvgr',
    944: 's39_lrvh',
    945: 's39_lrvr',
    946: 's39_lsctl',
    947: 's39_lt',
    948: 's39_ltdbr',
    949: 's39_ltdr',
    950: 's39_ltdtr',
    951: 's39_ltebr',
    952: 's39_lter',
    953: 's39_ltg',
    954: 's39_ltgf',
    955: 's39_ltgfr',
    956: 's39_ltgr',
    957: 's39_ltr',
    958: 's39_ltxbr',
    959: 's39_ltxr',
    960: 's39_ltxtr',
    961: 's39_lura',
    962: 's39_lurag',
    963: 's39_lxd',
    964: 's39_lxdb',
    965: 's39_lxdbr',
    966: 's39_lxdr',
    967: 's39_lxdtr',
    968: 's39_lxe',
    969: 's39_lxeb',
    970: 's39_lxebr',
    971: 's39_lxer',
    972: 's39_lxr',
    973: 's39_ly',
    974: 's39_lzdr',
    975: 's39_lzer',
    976: 's39_lzrf',
    977: 's39_lzrg',
    978: 's39_lzxr',
    979: 's39_m',
    980: 's39_mad',
    981: 's39_madb',
    982: 's39_madbr',
    983: 's39_madr',
    984: 's39_mae',
    985: 's39_maeb',
    986: 's39_maebr',
    987: 's39_maer',
    988: 's39_may',
    989: 's39_mayh',
    990: 's39_mayhr',
    991: 's39_mayl',
    992: 's39_maylr',
    993: 's39_mayr',
    994: 's39_mc',
    995: 's39_md',
    996: 's39_mdb',
    997: 's39_mdbr',
    998: 's39_mde',
    999: 's39_mdeb',
    1000: 's39_mdebr',
    1001: 's39_mder',
    1002: 's39_mdr',
    1003: 's39_mdtr',
    1004: 's39_mdtra',
    1005: 's39_me',
    1006: 's39_mee',
    1007: 's39_meeb',
    1008: 's39_meebr',
    1009: 's39_meer',
    1010: 's39_mer',
    1011: 's39_mfy',
    1012: 's39_mg',
    1013: 's39_mgh',
    1014: 's39_mghi',
    1015: 's39_mgrk',
    1016: 's39_mh',
    1017: 's39_mhi',
    1018: 's39_mhy',
    1019: 's39_ml',
    1020: 's39_mlg',
    1021: 's39_mlgr',
    1022: 's39_mlr',
    1023: 's39_mp',
    1024: 's39_mr',
    1025: 's39_ms',
    1026: 's39_msc',
    1027: 's39_msch',
    1028: 's39_msd',
    1029: 's39_msdb',
    1030: 's39_msdbr',
    1031: 's39_msdr',
    1032: 's39_mse',
    1033: 's39_mseb',
    1034: 's39_msebr',
    1035: 's39_mser',
    1036: 's39_msfi',
    1037: 's39_msg',
    1038: 's39_msgc',
    1039: 's39_msgf',
    1040: 's39_msgfi',
    1041: 's39_msgfr',
    1042: 's39_msgr',
    1043: 's39_msgrkc',
    1044: 's39_msr',
    1045: 's39_msrkc',
    1046: 's39_msta',
    1047: 's39_msy',
    1048: 's39_mvc',
    1049: 's39_mvcdk',
    1050: 's39_mvcin',
    1051: 's39_mvck',
    1052: 's39_mvcl',
    1053: 's39_mvcle',
    1054: 's39_mvclu',
    1055: 's39_mvcos',
    1056: 's39_mvcp',
    1057: 's39_mvcrl',
    1058: 's39_mvcs',
    1059: 's39_mvcsk',
    1060: 's39_mvghi',
    1061: 's39_mvhhi',
    1062: 's39_mvhi',
    1063: 's39_mvi',
    1064: 's39_mviy',
    1065: 's39_mvn',
    1066: 's39_mvo',
    1067: 's39_mvpg',
    1068: 's39_mvst',
    1069: 's39_mvz',
    1070: 's39_mxbr',
    1071: 's39_mxd',
    1072: 's39_mxdb',
    1073: 's39_mxdbr',
    1074: 's39_mxdr',
    1075: 's39_mxr',
    1076: 's39_mxtr',
    1077: 's39_mxtra',
    1078: 's39_my',
    1079: 's39_myh',
    1080: 's39_myhr',
    1081: 's39_myl',
    1082: 's39_mylr',
    1083: 's39_myr',
    1084: 's39_n',
    1085: 's39_nc',
    1086: 's39_ncgrk',
    1087: 's39_ncrk',
    1088: 's39_ng',
    1089: 's39_ngr',
    1090: 's39_ngrk',
    1091: 's39_ni',
    1092: 's39_niai',
    1093: 's39_nihf',
    1094: 's39_nihh',
    1095: 's39_nihl',
    1096: 's39_nilf',
    1097: 's39_nilh',
    1098: 's39_nill',
    1099: 's39_niy',
    1100: 's39_nngrk',
    1101: 's39_nnrk',
    1102: 's39_nogrk',
    1103: 's39_nop',
    1104: 's39_nopr',
    1105: 's39_nork',
    1106: 's39_nr',
    1107: 's39_nrk',
    1108: 's39_ntstg',
    1109: 's39_nxgrk',
    1110: 's39_nxrk',
    1111: 's39_ny',
    1112: 's39_o',
    1113: 's39_oc',
    1114: 's39_ocgrk',
    1115: 's39_ocrk',
    1116: 's39_og',
    1117: 's39_ogr',
    1118: 's39_ogrk',
    1119: 's39_oi',
    1120: 's39_oihf',
    1121: 's39_oihh',
    1122: 's39_oihl',
    1123: 's39_oilf',
    1124: 's39_oilh',
    1125: 's39_oill',
    1126: 's39_oiy',
    1127: 's39_or',
    1128: 's39_ork',
    1129: 's39_oy',
    1130: 's39_pack',
    1131: 's39_palb',
    1132: 's39_pc',
    1133: 's39_pcc',
    1134: 's39_pckmo',
    1135: 's39_pfd',
    1136: 's39_pfdrl',
    1137: 's39_pfmf',
    1138: 's39_pfpo',
    1139: 's39_pgin',
    1140: 's39_pgout',
    1141: 's39_pka',
    1142: 's39_pku',
    1143: 's39_plo',
    1144: 's39_popcnt',
    1145: 's39_ppa',
    1146: 's39_ppno',
    1147: 's39_pr',
    1148: 's39_prno',
    1149: 's39_pt',
    1150: 's39_ptf',
    1151: 's39_ptff',
    1152: 's39_pti',
    1153: 's39_ptlb',
    1154: 's39_qadtr',
    1155: 's39_qaxtr',
    1156: 's39_qctri',
    1157: 's39_qsi',
    1158: 's39_rchp',
    1159: 's39_risbg',
    1160: 's39_risbgn',
    1161: 's39_risbhg',
    1162: 's39_risblg',
    1163: 's39_rll',
    1164: 's39_rllg',
    1165: 's39_rnsbg',
    1166: 's39_rosbg',
    1167: 's39_rp',
    1168: 's39_rrbe',
    1169: 's39_rrbm',
    1170: 's39_rrdtr',
    1171: 's39_rrxtr',
    1172: 's39_rsch',
    1173: 's39_rxsbg',
    1174: 's39_s',
    1175: 's39_sac',
    1176: 's39_sacf',
    1177: 's39_sal',
    1178: 's39_sam24',
    1179: 's39_sam31',
    1180: 's39_sam64',
    1181: 's39_sar',
    1182: 's39_scctr',
    1183: 's39_schm',
    1184: 's39_sck',
    1185: 's39_sckc',
    1186: 's39_sckpf',
    1187: 's39_sd',
    1188: 's39_sdb',
    1189: 's39_sdbr',
    1190: 's39_sdr',
    1191: 's39_sdtr',
    1192: 's39_sdtra',
    1193: 's39_se',
    1194: 's39_seb',
    1195: 's39_sebr',
    1196: 's39_selgr',
    1197: 's39_selgro',
    1198: 's39_selgrh',
    1199: 's39_selgrnle',
    1200: 's39_selgrl',
    1201: 's39_selgrnhe',
    1202: 's39_selgrlh',
    1203: 's39_selgrne',
    1204: 's39_selgre',
    1205: 's39_selgrnlh',
    1206: 's39_selgrhe',
    1207: 's39_selgrnl',
    1208: 's39_selgrle',
    1209: 's39_selgrnh',
    1210: 's39_selgrno',
    1211: 's39_selhhhr',
    1212: 's39_selhhhro',
    1213: 's39_selhhhrh',
    1214: 's39_selhhhrnle',
    1215: 's39_selhhhrl',
    1216: 's39_selhhhrnhe',
    1217: 's39_selhhhrlh',
    1218: 's39_selhhhrne',
    1219: 's39_selhhhre',
    1220: 's39_selhhhrnlh',
    1221: 's39_selhhhrhe',
    1222: 's39_selhhhrnl',
    1223: 's39_selhhhrle',
    1224: 's39_selhhhrnh',
    1225: 's39_selhhhrno',
    1226: 's39_selr',
    1227: 's39_selro',
    1228: 's39_selrh',
    1229: 's39_selrnle',
    1230: 's39_selrl',
    1231: 's39_selrnhe',
    1232: 's39_selrlh',
    1233: 's39_selrne',
    1234: 's39_selre',
    1235: 's39_selrnlh',
    1236: 's39_selrhe',
    1237: 's39_selrnl',
    1238: 's39_selrle',
    1239: 's39_selrnh',
    1240: 's39_selrno',
    1241: 's39_ser',
    1242: 's39_sfasr',
    1243: 's39_sfpc',
    1244: 's39_sg',
    1245: 's39_sgf',
    1246: 's39_sgfr',
    1247: 's39_sgh',
    1248: 's39_sgr',
    1249: 's39_sgrk',
    1250: 's39_sh',
    1251: 's39_shhhr',
    1252: 's39_shhlr',
    1253: 's39_shy',
    1254: 's39_sie',
    1255: 's39_siga',
    1256: 's39_sigp',
    1257: 's39_sl',
    1258: 's39_sla',
    1259: 's39_slag',
    1260: 's39_slak',
    1261: 's39_slb',
    1262: 's39_slbg',
    1263: 's39_slbgr',
    1264: 's39_slbr',
    1265: 's39_slda',
    1266: 's39_sldl',
    1267: 's39_sldt',
    1268: 's39_slfi',
    1269: 's39_slg',
    1270: 's39_slgf',
    1271: 's39_slgfi',
    1272: 's39_slgfr',
    1273: 's39_slgr',
    1274: 's39_slgrk',
    1275: 's39_slhhhr',
    1276: 's39_slhhlr',
    1277: 's39_sll',
    1278: 's39_sllg',
    1279: 's39_sllk',
    1280: 's39_slr',
    1281: 's39_slrk',
    1282: 's39_slxt',
    1283: 's39_sly',
    1284: 's39_sortl',
    1285: 's39_sp',
    1286: 's39_spctr',
    1287: 's39_spka',
    1288: 's39_spm',
    1289: 's39_spt',
    1290: 's39_spx',
    1291: 's39_sqd',
    1292: 's39_sqdb',
    1293: 's39_sqdbr',
    1294: 's39_sqdr',
    1295: 's39_sqe',
    1296: 's39_sqeb',
    1297: 's39_sqebr',
    1298: 's39_sqer',
    1299: 's39_sqxbr',
    1300: 's39_sqxr',
    1301: 's39_sr',
    1302: 's39_sra',
    1303: 's39_srag',
    1304: 's39_srak',
    1305: 's39_srda',
    1306: 's39_srdl',
    1307: 's39_srdt',
    1308: 's39_srk',
    1309: 's39_srl',
    1310: 's39_srlg',
    1311: 's39_srlk',
    1312: 's39_srnm',
    1313: 's39_srnmb',
    1314: 's39_srnmt',
    1315: 's39_srp',
    1316: 's39_srst',
    1317: 's39_srstu',
    1318: 's39_srxt',
    1319: 's39_ssair',
    1320: 's39_ssar',
    1321: 's39_ssch',
    1322: 's39_sske',
    1323: 's39_ssm',
    1324: 's39_st',
    1325: 's39_stam',
    1326: 's39_stamy',
    1327: 's39_stap',
    1328: 's39_stc',
    1329: 's39_stch',
    1330: 's39_stck',
    1331: 's39_stckc',
    1332: 's39_stcke',
    1333: 's39_stckf',
    1334: 's39_stcm',
    1335: 's39_stcmh',
    1336: 's39_stcmy',
    1337: 's39_stcps',
    1338: 's39_stcrw',
    1339: 's39_stctg',
    1340: 's39_stctl',
    1341: 's39_stcy',
    1342: 's39_std',
    1343: 's39_stdrv',
    1344: 's39_stdy',
    1345: 's39_ste',
    1346: 's39_sterv',
    1347: 's39_stey',
    1348: 's39_stfh',
    1349: 's39_stfl',
    1350: 's39_stfle',
    1351: 's39_stfpc',
    1352: 's39_stg',
    1353: 's39_stgrl',
    1354: 's39_stgsc',
    1355: 's39_sth',
    1356: 's39_sthh',
    1357: 's39_sthrl',
    1358: 's39_sthy',
    1359: 's39_stidp',
    1360: 's39_stm',
    1361: 's39_stmg',
    1362: 's39_stmh',
    1363: 's39_stmy',
    1364: 's39_stnsm',
    1365: 's39_stoc',
    1366: 's39_stoco',
    1367: 's39_stoch',
    1368: 's39_stocnle',
    1369: 's39_stocl',
    1370: 's39_stocnhe',
    1371: 's39_stoclh',
    1372: 's39_stocne',
    1373: 's39_stoce',
    1374: 's39_stocnlh',
    1375: 's39_stoche',
    1376: 's39_stocnl',
    1377: 's39_stocle',
    1378: 's39_stocnh',
    1379: 's39_stocno',
    1380: 's39_stocfh',
    1381: 's39_stocfho',
    1382: 's39_stocfhh',
    1383: 's39_stocfhnle',
    1384: 's39_stocfhl',
    1385: 's39_stocfhnhe',
    1386: 's39_stocfhlh',
    1387: 's39_stocfhne',
    1388: 's39_stocfhe',
    1389: 's39_stocfhnlh',
    1390: 's39_stocfhhe',
    1391: 's39_stocfhnl',
    1392: 's39_stocfhle',
    1393: 's39_stocfhnh',
    1394: 's39_stocfhno',
    1395: 's39_stocg',
    1396: 's39_stocgo',
    1397: 's39_stocgh',
    1398: 's39_stocgnle',
    1399: 's39_stocgl',
    1400: 's39_stocgnhe',
    1401: 's39_stocglh',
    1402: 's39_stocgne',
    1403: 's39_stocge',
    1404: 's39_stocgnlh',
    1405: 's39_stocghe',
    1406: 's39_stocgnl',
    1407: 's39_stocgle',
    1408: 's39_stocgnh',
    1409: 's39_stocgno',
    1410: 's39_stosm',
    1411: 's39_stpq',
    1412: 's39_stpt',
    1413: 's39_stpx',
    1414: 's39_strag',
    1415: 's39_strl',
    1416: 's39_strv',
    1417: 's39_strvg',
    1418: 's39_strvh',
    1419: 's39_stsch',
    1420: 's39_stsi',
    1421: 's39_stura',
    1422: 's39_sturg',
    1423: 's39_sty',
    1424: 's39_su',
    1425: 's39_sur',
    1426: 's39_svc',
    1427: 's39_sw',
    1428: 's39_swr',
    1429: 's39_sxbr',
    1430: 's39_sxr',
    1431: 's39_sxtr',
    1432: 's39_sxtra',
    1433: 's39_sy',
    1434: 's39_tabort',
    1435: 's39_tam',
    1436: 's39_tar',
    1437: 's39_tb',
    1438: 's39_tbdr',
    1439: 's39_tbedr',
    1440: 's39_tbegin',
    1441: 's39_tbeginc',
    1442: 's39_tcdb',
    1443: 's39_tceb',
    1444: 's39_tcxb',
    1445: 's39_tdcdt',
    1446: 's39_tdcet',
    1447: 's39_tdcxt',
    1448: 's39_tdgdt',
    1449: 's39_tdget',
    1450: 's39_tdgxt',
    1451: 's39_tend',
    1452: 's39_thder',
    1453: 's39_thdr',
    1454: 's39_tm',
    1455: 's39_tmhh',
    1456: 's39_tmhl',
    1457: 's39_tmlh',
    1458: 's39_tmll',
    1459: 's39_tmy',
    1460: 's39_tp',
    1461: 's39_tpei',
    1462: 's39_tpi',
    1463: 's39_tprot',
    1464: 's39_tr',
    1465: 's39_trace',
    1466: 's39_tracg',
    1467: 's39_trap2',
    1468: 's39_trap4',
    1469: 's39_tre',
    1470: 's39_troo',
    1471: 's39_trot',
    1472: 's39_trt',
    1473: 's39_trte',
    1474: 's39_trto',
    1475: 's39_trtr',
    1476: 's39_trtre',
    1477: 's39_trtt',
    1478: 's39_ts',
    1479: 's39_tsch',
    1480: 's39_unpk',
    1481: 's39_unpka',
    1482: 's39_unpku',
    1483: 's39_upt',
    1484: 's39_va',
    1485: 's39_vab',
    1486: 's39_vac',
    1487: 's39_vacc',
    1488: 's39_vaccb',
    1489: 's39_vaccc',
    1490: 's39_vacccq',
    1491: 's39_vaccf',
    1492: 's39_vaccg',
    1493: 's39_vacch',
    1494: 's39_vaccq',
    1495: 's39_vacq',
    1496: 's39_vaf',
    1497: 's39_vag',
    1498: 's39_vah',
    1499: 's39_vap',
    1500: 's39_vaq',
    1501: 's39_vavg',
    1502: 's39_vavgb',
    1503: 's39_vavgf',
    1504: 's39_vavgg',
    1505: 's39_vavgh',
    1506: 's39_vavgl',
    1507: 's39_vavglb',
    1508: 's39_vavglf',
    1509: 's39_vavglg',
    1510: 's39_vavglh',
    1511: 's39_vbperm',
    1512: 's39_vcdg',
    1513: 's39_vcdgb',
    1514: 's39_vcdlg',
    1515: 's39_vcdlgb',
    1516: 's39_vcefb',
    1517: 's39_vcelfb',
    1518: 's39_vceq',
    1519: 's39_vceqb',
    1520: 's39_vceqbs',
    1521: 's39_vceqf',
    1522: 's39_vceqfs',
    1523: 's39_vceqg',
    1524: 's39_vceqgs',
    1525: 's39_vceqh',
    1526: 's39_vceqhs',
    1527: 's39_vcfeb',
    1528: 's39_vcfpl',
    1529: 's39_vcfps',
    1530: 's39_vcgd',
    1531: 's39_vcgdb',
    1532: 's39_vch',
    1533: 's39_vchb',
    1534: 's39_vchbs',
    1535: 's39_vchf',
    1536: 's39_vchfs',
    1537: 's39_vchg',
    1538: 's39_vchgs',
    1539: 's39_vchh',
    1540: 's39_vchhs',
    1541: 's39_vchl',
    1542: 's39_vchlb',
    1543: 's39_vchlbs',
    1544: 's39_vchlf',
    1545: 's39_vchlfs',
    1546: 's39_vchlg',
    1547: 's39_vchlgs',
    1548: 's39_vchlh',
    1549: 's39_vchlhs',
    1550: 's39_vcksm',
    1551: 's39_vclfeb',
    1552: 's39_vclfp',
    1553: 's39_vclgd',
    1554: 's39_vclgdb',
    1555: 's39_vclz',
    1556: 's39_vclzb',
    1557: 's39_vclzf',
    1558: 's39_vclzg',
    1559: 's39_vclzh',
    1560: 's39_vcp',
    1561: 's39_vcsfp',
    1562: 's39_vctz',
    1563: 's39_vctzb',
    1564: 's39_vctzf',
    1565: 's39_vctzg',
    1566: 's39_vctzh',
    1567: 's39_vcvb',
    1568: 's39_vcvbg',
    1569: 's39_vcvd',
    1570: 's39_vcvdg',
    1571: 's39_vdp',
    1572: 's39_vec',
    1573: 's39_vecb',
    1574: 's39_vecf',
    1575: 's39_vecg',
    1576: 's39_vech',
    1577: 's39_vecl',
    1578: 's39_veclb',
    1579: 's39_veclf',
    1580: 's39_veclg',
    1581: 's39_veclh',
    1582: 's39_verim',
    1583: 's39_verimb',
    1584: 's39_verimf',
    1585: 's39_verimg',
    1586: 's39_verimh',
    1587: 's39_verll',
    1588: 's39_verllb',
    1589: 's39_verllf',
    1590: 's39_verllg',
    1591: 's39_verllh',
    1592: 's39_verllv',
    1593: 's39_verllvb',
    1594: 's39_verllvf',
    1595: 's39_verllvg',
    1596: 's39_verllvh',
    1597: 's39_vesl',
    1598: 's39_veslb',
    1599: 's39_veslf',
    1600: 's39_veslg',
    1601: 's39_veslh',
    1602: 's39_veslv',
    1603: 's39_veslvb',
    1604: 's39_veslvf',
    1605: 's39_veslvg',
    1606: 's39_veslvh',
    1607: 's39_vesra',
    1608: 's39_vesrab',
    1609: 's39_vesraf',
    1610: 's39_vesrag',
    1611: 's39_vesrah',
    1612: 's39_vesrav',
    1613: 's39_vesravb',
    1614: 's39_vesravf',
    1615: 's39_vesravg',
    1616: 's39_vesravh',
    1617: 's39_vesrl',
    1618: 's39_vesrlb',
    1619: 's39_vesrlf',
    1620: 's39_vesrlg',
    1621: 's39_vesrlh',
    1622: 's39_vesrlv',
    1623: 's39_vesrlvb',
    1624: 's39_vesrlvf',
    1625: 's39_vesrlvg',
    1626: 's39_vesrlvh',
    1627: 's39_vfa',
    1628: 's39_vfadb',
    1629: 's39_vfae',
    1630: 's39_vfaeb',
    1631: 's39_vfaebs',
    1632: 's39_vfaef',
    1633: 's39_vfaefs',
    1634: 's39_vfaeh',
    1635: 's39_vfaehs',
    1636: 's39_vfaezb',
    1637: 's39_vfaezbs',
    1638: 's39_vfaezf',
    1639: 's39_vfaezfs',
    1640: 's39_vfaezh',
    1641: 's39_vfaezhs',
    1642: 's39_vfasb',
    1643: 's39_vfce',
    1644: 's39_vfcedb',
    1645: 's39_vfcedbs',
    1646: 's39_vfcesb',
    1647: 's39_vfcesbs',
    1648: 's39_vfch',
    1649: 's39_vfchdb',
    1650: 's39_vfchdbs',
    1651: 's39_vfche',
    1652: 's39_vfchedb',
    1653: 's39_vfchedbs',
    1654: 's39_vfchesb',
    1655: 's39_vfchesbs',
    1656: 's39_vfchsb',
    1657: 's39_vfchsbs',
    1658: 's39_vfd',
    1659: 's39_vfddb',
    1660: 's39_vfdsb',
    1661: 's39_vfee',
    1662: 's39_vfeeb',
    1663: 's39_vfeebs',
    1664: 's39_vfeef',
    1665: 's39_vfeefs',
    1666: 's39_vfeeh',
    1667: 's39_vfeehs',
    1668: 's39_vfeezb',
    1669: 's39_vfeezbs',
    1670: 's39_vfeezf',
    1671: 's39_vfeezfs',
    1672: 's39_vfeezh',
    1673: 's39_vfeezhs',
    1674: 's39_vfene',
    1675: 's39_vfeneb',
    1676: 's39_vfenebs',
    1677: 's39_vfenef',
    1678: 's39_vfenefs',
    1679: 's39_vfeneh',
    1680: 's39_vfenehs',
    1681: 's39_vfenezb',
    1682: 's39_vfenezbs',
    1683: 's39_vfenezf',
    1684: 's39_vfenezfs',
    1685: 's39_vfenezh',
    1686: 's39_vfenezhs',
    1687: 's39_vfi',
    1688: 's39_vfidb',
    1689: 's39_vfisb',
    1690: 's39_vfkedb',
    1691: 's39_vfkedbs',
    1692: 's39_vfkesb',
    1693: 's39_vfkesbs',
    1694: 's39_vfkhdb',
    1695: 's39_vfkhdbs',
    1696: 's39_vfkhedb',
    1697: 's39_vfkhedbs',
    1698: 's39_vfkhesb',
    1699: 's39_vfkhesbs',
    1700: 's39_vfkhsb',
    1701: 's39_vfkhsbs',
    1702: 's39_vflcdb',
    1703: 's39_vflcsb',
    1704: 's39_vfll',
    1705: 's39_vflls',
    1706: 's39_vflndb',
    1707: 's39_vflnsb',
    1708: 's39_vflpdb',
    1709: 's39_vflpsb',
    1710: 's39_vflr',
    1711: 's39_vflrd',
    1712: 's39_vfm',
    1713: 's39_vfma',
    1714: 's39_vfmadb',
    1715: 's39_vfmasb',
    1716: 's39_vfmax',
    1717: 's39_vfmaxdb',
    1718: 's39_vfmaxsb',
    1719: 's39_vfmdb',
    1720: 's39_vfmin',
    1721: 's39_vfmindb',
    1722: 's39_vfminsb',
    1723: 's39_vfms',
    1724: 's39_vfmsb',
    1725: 's39_vfmsdb',
    1726: 's39_vfmssb',
    1727: 's39_vfnma',
    1728: 's39_vfnmadb',
    1729: 's39_vfnmasb',
    1730: 's39_vfnms',
    1731: 's39_vfnmsdb',
    1732: 's39_vfnmssb',
    1733: 's39_vfpso',
    1734: 's39_vfpsodb',
    1735: 's39_vfpsosb',
    1736: 's39_vfs',
    1737: 's39_vfsdb',
    1738: 's39_vfsq',
    1739: 's39_vfsqdb',
    1740: 's39_vfsqsb',
    1741: 's39_vfssb',
    1742: 's39_vftci',
    1743: 's39_vftcidb',
    1744: 's39_vftcisb',
    1745: 's39_vgbm',
    1746: 's39_vgef',
    1747: 's39_vgeg',
    1748: 's39_vgfm',
    1749: 's39_vgfma',
    1750: 's39_vgfmab',
    1751: 's39_vgfmaf',
    1752: 's39_vgfmag',
    1753: 's39_vgfmah',
    1754: 's39_vgfmb',
    1755: 's39_vgfmf',
    1756: 's39_vgfmg',
    1757: 's39_vgfmh',
    1758: 's39_vgm',
    1759: 's39_vgmb',
    1760: 's39_vgmf',
    1761: 's39_vgmg',
    1762: 's39_vgmh',
    1763: 's39_vistr',
    1764: 's39_vistrb',
    1765: 's39_vistrbs',
    1766: 's39_vistrf',
    1767: 's39_vistrfs',
    1768: 's39_vistrh',
    1769: 's39_vistrhs',
    1770: 's39_vl',
    1771: 's39_vlbb',
    1772: 's39_vlbr',
    1773: 's39_vlbrf',
    1774: 's39_vlbrg',
    1775: 's39_vlbrh',
    1776: 's39_vlbrq',
    1777: 's39_vlbrrep',
    1778: 's39_vlbrrepf',
    1779: 's39_vlbrrepg',
    1780: 's39_vlbrreph',
    1781: 's39_vlc',
    1782: 's39_vlcb',
    1783: 's39_vlcf',
    1784: 's39_vlcg',
    1785: 's39_vlch',
    1786: 's39_vlde',
    1787: 's39_vldeb',
    1788: 's39_vleb',
    1789: 's39_vlebrf',
    1790: 's39_vlebrg',
    1791: 's39_vlebrh',
    1792: 's39_vled',
    1793: 's39_vledb',
    1794: 's39_vlef',
    1795: 's39_vleg',
    1796: 's39_vleh',
    1797: 's39_vleib',
    1798: 's39_vleif',
    1799: 's39_vleig',
    1800: 's39_vleih',
    1801: 's39_vler',
    1802: 's39_vlerf',
    1803: 's39_vlerg',
    1804: 's39_vlerh',
    1805: 's39_vlgv',
    1806: 's39_vlgvb',
    1807: 's39_vlgvf',
    1808: 's39_vlgvg',
    1809: 's39_vlgvh',
    1810: 's39_vlip',
    1811: 's39_vll',
    1812: 's39_vllebrz',
    1813: 's39_vllebrze',
    1814: 's39_vllebrzf',
    1815: 's39_vllebrzg',
    1816: 's39_vllebrzh',
    1817: 's39_vllez',
    1818: 's39_vllezb',
    1819: 's39_vllezf',
    1820: 's39_vllezg',
    1821: 's39_vllezh',
    1822: 's39_vllezlf',
    1823: 's39_vlm',
    1824: 's39_vlp',
    1825: 's39_vlpb',
    1826: 's39_vlpf',
    1827: 's39_vlpg',
    1828: 's39_vlph',
    1829: 's39_vlr',
    1830: 's39_vlrep',
    1831: 's39_vlrepb',
    1832: 's39_vlrepf',
    1833: 's39_vlrepg',
    1834: 's39_vlreph',
    1835: 's39_vlrl',
    1836: 's39_vlrlr',
    1837: 's39_vlvg',
    1838: 's39_vlvgb',
    1839: 's39_vlvgf',
    1840: 's39_vlvgg',
    1841: 's39_vlvgh',
    1842: 's39_vlvgp',
    1843: 's39_vmae',
    1844: 's39_vmaeb',
    1845: 's39_vmaef',
    1846: 's39_vmaeh',
    1847: 's39_vmah',
    1848: 's39_vmahb',
    1849: 's39_vmahf',
    1850: 's39_vmahh',
    1851: 's39_vmal',
    1852: 's39_vmalb',
    1853: 's39_vmale',
    1854: 's39_vmaleb',
    1855: 's39_vmalef',
    1856: 's39_vmaleh',
    1857: 's39_vmalf',
    1858: 's39_vmalh',
    1859: 's39_vmalhb',
    1860: 's39_vmalhf',
    1861: 's39_vmalhh',
    1862: 's39_vmalhw',
    1863: 's39_vmalo',
    1864: 's39_vmalob',
    1865: 's39_vmalof',
    1866: 's39_vmaloh',
    1867: 's39_vmao',
    1868: 's39_vmaob',
    1869: 's39_vmaof',
    1870: 's39_vmaoh',
    1871: 's39_vme',
    1872: 's39_vmeb',
    1873: 's39_vmef',
    1874: 's39_vmeh',
    1875: 's39_vmh',
    1876: 's39_vmhb',
    1877: 's39_vmhf',
    1878: 's39_vmhh',
    1879: 's39_vml',
    1880: 's39_vmlb',
    1881: 's39_vmle',
    1882: 's39_vmleb',
    1883: 's39_vmlef',
    1884: 's39_vmleh',
    1885: 's39_vmlf',
    1886: 's39_vmlh',
    1887: 's39_vmlhb',
    1888: 's39_vmlhf',
    1889: 's39_vmlhh',
    1890: 's39_vmlhw',
    1891: 's39_vmlo',
    1892: 's39_vmlob',
    1893: 's39_vmlof',
    1894: 's39_vmloh',
    1895: 's39_vmn',
    1896: 's39_vmnb',
    1897: 's39_vmnf',
    1898: 's39_vmng',
    1899: 's39_vmnh',
    1900: 's39_vmnl',
    1901: 's39_vmnlb',
    1902: 's39_vmnlf',
    1903: 's39_vmnlg',
    1904: 's39_vmnlh',
    1905: 's39_vmo',
    1906: 's39_vmob',
    1907: 's39_vmof',
    1908: 's39_vmoh',
    1909: 's39_vmp',
    1910: 's39_vmrh',
    1911: 's39_vmrhb',
    1912: 's39_vmrhf',
    1913: 's39_vmrhg',
    1914: 's39_vmrhh',
    1915: 's39_vmrl',
    1916: 's39_vmrlb',
    1917: 's39_vmrlf',
    1918: 's39_vmrlg',
    1919: 's39_vmrlh',
    1920: 's39_vmsl',
    1921: 's39_vmslg',
    1922: 's39_vmsp',
    1923: 's39_vmx',
    1924: 's39_vmxb',
    1925: 's39_vmxf',
    1926: 's39_vmxg',
    1927: 's39_vmxh',
    1928: 's39_vmxl',
    1929: 's39_vmxlb',
    1930: 's39_vmxlf',
    1931: 's39_vmxlg',
    1932: 's39_vmxlh',
    1933: 's39_vn',
    1934: 's39_vnc',
    1935: 's39_vnn',
    1936: 's39_vno',
    1937: 's39_vnot',
    1938: 's39_vnx',
    1939: 's39_vo',
    1940: 's39_voc',
    1941: 's39_vone',
    1942: 's39_vpdi',
    1943: 's39_vperm',
    1944: 's39_vpk',
    1945: 's39_vpkf',
    1946: 's39_vpkg',
    1947: 's39_vpkh',
    1948: 's39_vpkls',
    1949: 's39_vpklsf',
    1950: 's39_vpklsfs',
    1951: 's39_vpklsg',
    1952: 's39_vpklsgs',
    1953: 's39_vpklsh',
    1954: 's39_vpklshs',
    1955: 's39_vpks',
    1956: 's39_vpksf',
    1957: 's39_vpksfs',
    1958: 's39_vpksg',
    1959: 's39_vpksgs',
    1960: 's39_vpksh',
    1961: 's39_vpkshs',
    1962: 's39_vpkz',
    1963: 's39_vpopct',
    1964: 's39_vpopctb',
    1965: 's39_vpopctf',
    1966: 's39_vpopctg',
    1967: 's39_vpopcth',
    1968: 's39_vpsop',
    1969: 's39_vrep',
    1970: 's39_vrepb',
    1971: 's39_vrepf',
    1972: 's39_vrepg',
    1973: 's39_vreph',
    1974: 's39_vrepi',
    1975: 's39_vrepib',
    1976: 's39_vrepif',
    1977: 's39_vrepig',
    1978: 's39_vrepih',
    1979: 's39_vrp',
    1980: 's39_vs',
    1981: 's39_vsb',
    1982: 's39_vsbcbi',
    1983: 's39_vsbcbiq',
    1984: 's39_vsbi',
    1985: 's39_vsbiq',
    1986: 's39_vscbi',
    1987: 's39_vscbib',
    1988: 's39_vscbif',
    1989: 's39_vscbig',
    1990: 's39_vscbih',
    1991: 's39_vscbiq',
    1992: 's39_vscef',
    1993: 's39_vsceg',
    1994: 's39_vsdp',
    1995: 's39_vseg',
    1996: 's39_vsegb',
    1997: 's39_vsegf',
    1998: 's39_vsegh',
    1999: 's39_vsel',
    2000: 's39_vsf',
    2001: 's39_vsg',
    2002: 's39_vsh',
    2003: 's39_vsl',
    2004: 's39_vslb',
    2005: 's39_vsld',
    2006: 's39_vsldb',
    2007: 's39_vsp',
    2008: 's39_vsq',
    2009: 's39_vsra',
    2010: 's39_vsrab',
    2011: 's39_vsrd',
    2012: 's39_vsrl',
    2013: 's39_vsrlb',
    2014: 's39_vsrp',
    2015: 's39_vst',
    2016: 's39_vstbr',
    2017: 's39_vstbrf',
    2018: 's39_vstbrg',
    2019: 's39_vstbrh',
    2020: 's39_vstbrq',
    2021: 's39_vsteb',
    2022: 's39_vstebrf',
    2023: 's39_vstebrg',
    2024: 's39_vstebrh',
    2025: 's39_vstef',
    2026: 's39_vsteg',
    2027: 's39_vsteh',
    2028: 's39_vster',
    2029: 's39_vsterf',
    2030: 's39_vsterg',
    2031: 's39_vsterh',
    2032: 's39_vstl',
    2033: 's39_vstm',
    2034: 's39_vstrc',
    2035: 's39_vstrcb',
    2036: 's39_vstrcbs',
    2037: 's39_vstrcf',
    2038: 's39_vstrcfs',
    2039: 's39_vstrch',
    2040: 's39_vstrchs',
    2041: 's39_vstrczb',
    2042: 's39_vstrczbs',
    2043: 's39_vstrczf',
    2044: 's39_vstrczfs',
    2045: 's39_vstrczh',
    2046: 's39_vstrczhs',
    2047: 's39_vstrl',
    2048: 's39_vstrlr',
    2049: 's39_vstrs',
    2050: 's39_vstrsb',
    2051: 's39_vstrsf',
    2052: 's39_vstrsh',
    2053: 's39_vstrszb',
    2054: 's39_vstrszf',
    2055: 's39_vstrszh',
    2056: 's39_vsum',
    2057: 's39_vsumb',
    2058: 's39_vsumg',
    2059: 's39_vsumgf',
    2060: 's39_vsumgh',
    2061: 's39_vsumh',
    2062: 's39_vsumq',
    2063: 's39_vsumqf',
    2064: 's39_vsumqg',
    2065: 's39_vtm',
    2066: 's39_vtp',
    2067: 's39_vuph',
    2068: 's39_vuphb',
    2069: 's39_vuphf',
    2070: 's39_vuphh',
    2071: 's39_vupkz',
    2072: 's39_vupl',
    2073: 's39_vuplb',
    2074: 's39_vuplf',
    2075: 's39_vuplh',
    2076: 's39_vuplhb',
    2077: 's39_vuplhf',
    2078: 's39_vuplhh',
    2079: 's39_vuplhw',
    2080: 's39_vupll',
    2081: 's39_vupllb',
    2082: 's39_vupllf',
    2083: 's39_vupllh',
    2084: 's39_vzero',
    2085: 's39_wcdgb',
    2086: 's39_wcdlgb',
    2087: 's39_wcefb',
    2088: 's39_wcelfb',
    2089: 's39_wcfeb',
    2090: 's39_wcgdb',
    2091: 's39_wclfeb',
    2092: 's39_wclgdb',
    2093: 's39_wfadb',
    2094: 's39_wfasb',
    2095: 's39_wfaxb',
    2096: 's39_wfc',
    2097: 's39_wfcdb',
    2098: 's39_wfcedb',
    2099: 's39_wfcedbs',
    2100: 's39_wfcesb',
    2101: 's39_wfcesbs',
    2102: 's39_wfcexb',
    2103: 's39_wfcexbs',
    2104: 's39_wfchdb',
    2105: 's39_wfchdbs',
    2106: 's39_wfchedb',
    2107: 's39_wfchedbs',
    2108: 's39_wfchesb',
    2109: 's39_wfchesbs',
    2110: 's39_wfchexb',
    2111: 's39_wfchexbs',
    2112: 's39_wfchsb',
    2113: 's39_wfchsbs',
    2114: 's39_wfchxb',
    2115: 's39_wfchxbs',
    2116: 's39_wfcsb',
    2117: 's39_wfcxb',
    2118: 's39_wfddb',
    2119: 's39_wfdsb',
    2120: 's39_wfdxb',
    2121: 's39_wfidb',
    2122: 's39_wfisb',
    2123: 's39_wfixb',
    2124: 's39_wfk',
    2125: 's39_wfkdb',
    2126: 's39_wfkedb',
    2127: 's39_wfkedbs',
    2128: 's39_wfkesb',
    2129: 's39_wfkesbs',
    2130: 's39_wfkexb',
    2131: 's39_wfkexbs',
    2132: 's39_wfkhdb',
    2133: 's39_wfkhdbs',
    2134: 's39_wfkhedb',
    2135: 's39_wfkhedbs',
    2136: 's39_wfkhesb',
    2137: 's39_wfkhesbs',
    2138: 's39_wfkhexb',
    2139: 's39_wfkhexbs',
    2140: 's39_wfkhsb',
    2141: 's39_wfkhsbs',
    2142: 's39_wfkhxb',
    2143: 's39_wfkhxbs',
    2144: 's39_wfksb',
    2145: 's39_wfkxb',
    2146: 's39_wflcdb',
    2147: 's39_wflcsb',
    2148: 's39_wflcxb',
    2149: 's39_wflld',
    2150: 's39_wflls',
    2151: 's39_wflndb',
    2152: 's39_wflnsb',
    2153: 's39_wflnxb',
    2154: 's39_wflpdb',
    2155: 's39_wflpsb',
    2156: 's39_wflpxb',
    2157: 's39_wflrd',
    2158: 's39_wflrx',
    2159: 's39_wfmadb',
    2160: 's39_wfmasb',
    2161: 's39_wfmaxb',
    2162: 's39_wfmaxdb',
    2163: 's39_wfmaxsb',
    2164: 's39_wfmaxxb',
    2165: 's39_wfmdb',
    2166: 's39_wfmindb',
    2167: 's39_wfminsb',
    2168: 's39_wfminxb',
    2169: 's39_wfmsb',
    2170: 's39_wfmsdb',
    2171: 's39_wfmssb',
    2172: 's39_wfmsxb',
    2173: 's39_wfmxb',
    2174: 's39_wfnmadb',
    2175: 's39_wfnmasb',
    2176: 's39_wfnmaxb',
    2177: 's39_wfnmsdb',
    2178: 's39_wfnmssb',
    2179: 's39_wfnmsxb',
    2180: 's39_wfpsodb',
    2181: 's39_wfpsosb',
    2182: 's39_wfpsoxb',
    2183: 's39_wfsdb',
    2184: 's39_wfsqdb',
    2185: 's39_wfsqsb',
    2186: 's39_wfsqxb',
    2187: 's39_wfssb',
    2188: 's39_wfsxb',
    2189: 's39_wftcidb',
    2190: 's39_wftcisb',
    2191: 's39_wftcixb',
    2192: 's39_wldeb',
    2193: 's39_wledb',
    2194: 's39_x',
    2195: 's39_xc',
    2196: 's39_xg',
    2197: 's39_xgr',
    2198: 's39_xgrk',
    2199: 's39_xi',
    2200: 's39_xihf',
    2201: 's39_xilf',
    2202: 's39_xiy',
    2203: 's39_xr',
    2204: 's39_xrk',
    2205: 's39_xsch',
    2206: 's39_xy',
    2207: 's39_zap',
    2208: 's39_vx',
    2209: 's39_last',
}
s39_null = 0
s39_a = 1
s39_ad = 2
s39_adb = 3
s39_adbr = 4
s39_adr = 5
s39_adtr = 6
s39_adtra = 7
s39_ae = 8
s39_aeb = 9
s39_aebr = 10
s39_aer = 11
s39_afi = 12
s39_ag = 13
s39_agf = 14
s39_agfi = 15
s39_agfr = 16
s39_agh = 17
s39_aghi = 18
s39_aghik = 19
s39_agr = 20
s39_agrk = 21
s39_agsi = 22
s39_ah = 23
s39_ahhhr = 24
s39_ahhlr = 25
s39_ahi = 26
s39_ahik = 27
s39_ahy = 28
s39_aih = 29
s39_al = 30
s39_alc = 31
s39_alcg = 32
s39_alcgr = 33
s39_alcr = 34
s39_alfi = 35
s39_alg = 36
s39_algf = 37
s39_algfi = 38
s39_algfr = 39
s39_alghsik = 40
s39_algr = 41
s39_algrk = 42
s39_algsi = 43
s39_alhhhr = 44
s39_alhhlr = 45
s39_alhsik = 46
s39_alr = 47
s39_alrk = 48
s39_alsi = 49
s39_alsih = 50
s39_alsihn = 51
s39_aly = 52
s39_ap = 53
s39_ar = 54
s39_ark = 55
s39_asi = 56
s39_au = 57
s39_aur = 58
s39_aw = 59
s39_awr = 60
s39_axbr = 61
s39_axr = 62
s39_axtr = 63
s39_axtra = 64
s39_ay = 65
s39_b = 66
s39_bo = 67
s39_bh = 68
s39_bnle = 69
s39_bl = 70
s39_bnhe = 71
s39_blh = 72
s39_bne = 73
s39_be = 74
s39_bnlh = 75
s39_bhe = 76
s39_bnl = 77
s39_ble = 78
s39_bnh = 79
s39_bno = 80
s39_bor = 81
s39_bhr = 82
s39_bnler = 83
s39_blr = 84
s39_bnher = 85
s39_blhr = 86
s39_bner = 87
s39_ber = 88
s39_bnlhr = 89
s39_bher = 90
s39_bnlr = 91
s39_bler = 92
s39_bnhr = 93
s39_bnor = 94
s39_bakr = 95
s39_bal = 96
s39_balr = 97
s39_bas = 98
s39_basr = 99
s39_bassm = 100
s39_bc = 101
s39_bcr = 102
s39_bct = 103
s39_bctg = 104
s39_bctgr = 105
s39_bctr = 106
s39_bi = 107
s39_bio = 108
s39_bih = 109
s39_binle = 110
s39_bil = 111
s39_binhe = 112
s39_bilh = 113
s39_bine = 114
s39_bie = 115
s39_binlh = 116
s39_bihe = 117
s39_binl = 118
s39_bile = 119
s39_binh = 120
s39_bino = 121
s39_bic = 122
s39_bpp = 123
s39_bprp = 124
s39_br = 125
s39_bras = 126
s39_brasl = 127
s39_brc = 128
s39_brcl = 129
s39_brct = 130
s39_brctg = 131
s39_brcth = 132
s39_brxh = 133
s39_brxhg = 134
s39_brxle = 135
s39_brxlg = 136
s39_bsa = 137
s39_bsg = 138
s39_bsm = 139
s39_bxh = 140
s39_bxhg = 141
s39_bxle = 142
s39_bxleg = 143
s39_c = 144
s39_cd = 145
s39_cdb = 146
s39_cdbr = 147
s39_cdfbr = 148
s39_cdfbra = 149
s39_cdfr = 150
s39_cdftr = 151
s39_cdgbr = 152
s39_cdgbra = 153
s39_cdgr = 154
s39_cdgtr = 155
s39_cdgtra = 156
s39_cdlfbr = 157
s39_cdlftr = 158
s39_cdlgbr = 159
s39_cdlgtr = 160
s39_cdpt = 161
s39_cdr = 162
s39_cds = 163
s39_cdsg = 164
s39_cdstr = 165
s39_cdsy = 166
s39_cdtr = 167
s39_cdutr = 168
s39_cdzt = 169
s39_ce = 170
s39_ceb = 171
s39_cebr = 172
s39_cedtr = 173
s39_cefbr = 174
s39_cefbra = 175
s39_cefr = 176
s39_cegbr = 177
s39_cegbra = 178
s39_cegr = 179
s39_celfbr = 180
s39_celgbr = 181
s39_cer = 182
s39_cextr = 183
s39_cfc = 184
s39_cfdbr = 185
s39_cfdbra = 186
s39_cfdr = 187
s39_cfdtr = 188
s39_cfebr = 189
s39_cfebra = 190
s39_cfer = 191
s39_cfi = 192
s39_cfxbr = 193
s39_cfxbra = 194
s39_cfxr = 195
s39_cfxtr = 196
s39_cg = 197
s39_cgdbr = 198
s39_cgdbra = 199
s39_cgdr = 200
s39_cgdtr = 201
s39_cgdtra = 202
s39_cgebr = 203
s39_cgebra = 204
s39_cger = 205
s39_cgf = 206
s39_cgfi = 207
s39_cgfr = 208
s39_cgfrl = 209
s39_cgh = 210
s39_cghi = 211
s39_cghrl = 212
s39_cghsi = 213
s39_cgib = 214
s39_cgibh = 215
s39_cgibnhe = 216
s39_cgiblh = 217
s39_cgibnlh = 218
s39_cgibnl = 219
s39_cgible = 220
s39_cgij = 221
s39_cgijh = 222
s39_cgijnhe = 223
s39_cgijlh = 224
s39_cgijnlh = 225
s39_cgijnl = 226
s39_cgijle = 227
s39_cgit = 228
s39_cgith = 229
s39_cgitnhe = 230
s39_cgitlh = 231
s39_cgitnlh = 232
s39_cgitnl = 233
s39_cgitle = 234
s39_cgr = 235
s39_cgrb = 236
s39_cgrbh = 237
s39_cgrbnhe = 238
s39_cgrblh = 239
s39_cgrbnlh = 240
s39_cgrbnl = 241
s39_cgrble = 242
s39_cgrj = 243
s39_cgrjh = 244
s39_cgrjnhe = 245
s39_cgrjlh = 246
s39_cgrjnlh = 247
s39_cgrjnl = 248
s39_cgrjle = 249
s39_cgrl = 250
s39_cgrt = 251
s39_cgrth = 252
s39_cgrtnhe = 253
s39_cgrtlh = 254
s39_cgrtnlh = 255
s39_cgrtnl = 256
s39_cgrtle = 257
s39_cgxbr = 258
s39_cgxbra = 259
s39_cgxr = 260
s39_cgxtr = 261
s39_cgxtra = 262
s39_ch = 263
s39_chf = 264
s39_chhr = 265
s39_chhsi = 266
s39_chi = 267
s39_chlr = 268
s39_chrl = 269
s39_chsi = 270
s39_chy = 271
s39_cib = 272
s39_cibh = 273
s39_cibnhe = 274
s39_ciblh = 275
s39_cibnlh = 276
s39_cibnl = 277
s39_cible = 278
s39_cih = 279
s39_cij = 280
s39_cijh = 281
s39_cijnhe = 282
s39_cijlh = 283
s39_cijnlh = 284
s39_cijnl = 285
s39_cijle = 286
s39_cit = 287
s39_cith = 288
s39_citnhe = 289
s39_citlh = 290
s39_citnlh = 291
s39_citnl = 292
s39_citle = 293
s39_cksm = 294
s39_cl = 295
s39_clc = 296
s39_clcl = 297
s39_clcle = 298
s39_clclu = 299
s39_clfdbr = 300
s39_clfdtr = 301
s39_clfebr = 302
s39_clfhsi = 303
s39_clfi = 304
s39_clfit = 305
s39_clfith = 306
s39_clfitnhe = 307
s39_clfitlh = 308
s39_clfitnlh = 309
s39_clfitnl = 310
s39_clfitle = 311
s39_clfxbr = 312
s39_clfxtr = 313
s39_clg = 314
s39_clgdbr = 315
s39_clgdtr = 316
s39_clgebr = 317
s39_clgf = 318
s39_clgfi = 319
s39_clgfr = 320
s39_clgfrl = 321
s39_clghrl = 322
s39_clghsi = 323
s39_clgib = 324
s39_clgibh = 325
s39_clgibnhe = 326
s39_clgiblh = 327
s39_clgibnlh = 328
s39_clgibnl = 329
s39_clgible = 330
s39_clgij = 331
s39_clgijh = 332
s39_clgijnhe = 333
s39_clgijlh = 334
s39_clgijnlh = 335
s39_clgijnl = 336
s39_clgijle = 337
s39_clgit = 338
s39_clgith = 339
s39_clgitnhe = 340
s39_clgitlh = 341
s39_clgitnlh = 342
s39_clgitnl = 343
s39_clgitle = 344
s39_clgr = 345
s39_clgrb = 346
s39_clgrbh = 347
s39_clgrbnhe = 348
s39_clgrblh = 349
s39_clgrbnlh = 350
s39_clgrbnl = 351
s39_clgrble = 352
s39_clgrj = 353
s39_clgrjh = 354
s39_clgrjnhe = 355
s39_clgrjlh = 356
s39_clgrjnlh = 357
s39_clgrjnl = 358
s39_clgrjle = 359
s39_clgrl = 360
s39_clgrt = 361
s39_clgrth = 362
s39_clgrtnhe = 363
s39_clgrtlh = 364
s39_clgrtnlh = 365
s39_clgrtnl = 366
s39_clgrtle = 367
s39_clgt = 368
s39_clgth = 369
s39_clgtnhe = 370
s39_clgtlh = 371
s39_clgtnlh = 372
s39_clgtnl = 373
s39_clgtle = 374
s39_clgxbr = 375
s39_clgxtr = 376
s39_clhf = 377
s39_clhhr = 378
s39_clhhsi = 379
s39_clhlr = 380
s39_clhrl = 381
s39_cli = 382
s39_clib = 383
s39_clibh = 384
s39_clibnhe = 385
s39_cliblh = 386
s39_clibnlh = 387
s39_clibnl = 388
s39_clible = 389
s39_clih = 390
s39_clij = 391
s39_clijh = 392
s39_clijnhe = 393
s39_clijlh = 394
s39_clijnlh = 395
s39_clijnl = 396
s39_clijle = 397
s39_cliy = 398
s39_clm = 399
s39_clmh = 400
s39_clmy = 401
s39_clr = 402
s39_clrb = 403
s39_clrbh = 404
s39_clrbnhe = 405
s39_clrblh = 406
s39_clrbnlh = 407
s39_clrbnl = 408
s39_clrble = 409
s39_clrj = 410
s39_clrjh = 411
s39_clrjnhe = 412
s39_clrjlh = 413
s39_clrjnlh = 414
s39_clrjnl = 415
s39_clrjle = 416
s39_clrl = 417
s39_clrt = 418
s39_clrth = 419
s39_clrtnhe = 420
s39_clrtlh = 421
s39_clrtnlh = 422
s39_clrtnl = 423
s39_clrtle = 424
s39_clst = 425
s39_clt = 426
s39_clth = 427
s39_cltnhe = 428
s39_cltlh = 429
s39_cltnlh = 430
s39_cltnl = 431
s39_cltle = 432
s39_cly = 433
s39_cmpsc = 434
s39_cp = 435
s39_cpdt = 436
s39_cpsdr = 437
s39_cpxt = 438
s39_cpya = 439
s39_cr = 440
s39_crb = 441
s39_crbh = 442
s39_crbnhe = 443
s39_crblh = 444
s39_crbnlh = 445
s39_crbnl = 446
s39_crble = 447
s39_crdte = 448
s39_crj = 449
s39_crjh = 450
s39_crjnhe = 451
s39_crjlh = 452
s39_crjnlh = 453
s39_crjnl = 454
s39_crjle = 455
s39_crl = 456
s39_crt = 457
s39_crth = 458
s39_crtnhe = 459
s39_crtlh = 460
s39_crtnlh = 461
s39_crtnl = 462
s39_crtle = 463
s39_cs = 464
s39_csch = 465
s39_csdtr = 466
s39_csg = 467
s39_csp = 468
s39_cspg = 469
s39_csst = 470
s39_csxtr = 471
s39_csy = 472
s39_cu12 = 473
s39_cu14 = 474
s39_cu21 = 475
s39_cu24 = 476
s39_cu41 = 477
s39_cu42 = 478
s39_cudtr = 479
s39_cuse = 480
s39_cutfu = 481
s39_cuutf = 482
s39_cuxtr = 483
s39_cvb = 484
s39_cvbg = 485
s39_cvby = 486
s39_cvd = 487
s39_cvdg = 488
s39_cvdy = 489
s39_cxbr = 490
s39_cxfbr = 491
s39_cxfbra = 492
s39_cxfr = 493
s39_cxftr = 494
s39_cxgbr = 495
s39_cxgbra = 496
s39_cxgr = 497
s39_cxgtr = 498
s39_cxgtra = 499
s39_cxlfbr = 500
s39_cxlftr = 501
s39_cxlgbr = 502
s39_cxlgtr = 503
s39_cxpt = 504
s39_cxr = 505
s39_cxstr = 506
s39_cxtr = 507
s39_cxutr = 508
s39_cxzt = 509
s39_cy = 510
s39_czdt = 511
s39_czxt = 512
s39_d = 513
s39_dd = 514
s39_ddb = 515
s39_ddbr = 516
s39_ddr = 517
s39_ddtr = 518
s39_ddtra = 519
s39_de = 520
s39_deb = 521
s39_debr = 522
s39_der = 523
s39_dfltcc = 524
s39_diag = 525
s39_didbr = 526
s39_diebr = 527
s39_dl = 528
s39_dlg = 529
s39_dlgr = 530
s39_dlr = 531
s39_dp = 532
s39_dr = 533
s39_dsg = 534
s39_dsgf = 535
s39_dsgfr = 536
s39_dsgr = 537
s39_dxbr = 538
s39_dxr = 539
s39_dxtr = 540
s39_dxtra = 541
s39_ear = 542
s39_ecag = 543
s39_ecctr = 544
s39_ecpga = 545
s39_ectg = 546
s39_ed = 547
s39_edmk = 548
s39_eedtr = 549
s39_eextr = 550
s39_efpc = 551
s39_epair = 552
s39_epar = 553
s39_epctr = 554
s39_epsw = 555
s39_ereg = 556
s39_eregg = 557
s39_esair = 558
s39_esar = 559
s39_esdtr = 560
s39_esea = 561
s39_esta = 562
s39_esxtr = 563
s39_etnd = 564
s39_ex = 565
s39_exrl = 566
s39_fidbr = 567
s39_fidbra = 568
s39_fidr = 569
s39_fidtr = 570
s39_fiebr = 571
s39_fiebra = 572
s39_fier = 573
s39_fixbr = 574
s39_fixbra = 575
s39_fixr = 576
s39_fixtr = 577
s39_flogr = 578
s39_hdr = 579
s39_her = 580
s39_hsch = 581
s39_iac = 582
s39_ic = 583
s39_icm = 584
s39_icmh = 585
s39_icmy = 586
s39_icy = 587
s39_idte = 588
s39_iedtr = 589
s39_iextr = 590
s39_iihf = 591
s39_iihh = 592
s39_iihl = 593
s39_iilf = 594
s39_iilh = 595
s39_iill = 596
s39_ipk = 597
s39_ipm = 598
s39_ipte = 599
s39_irbm = 600
s39_iske = 601
s39_ivsk = 602
s39_j = 603
s39_jo = 604
s39_jh = 605
s39_jnle = 606
s39_jl = 607
s39_jnhe = 608
s39_jlh = 609
s39_jne = 610
s39_je = 611
s39_jnlh = 612
s39_jhe = 613
s39_jnl = 614
s39_jle = 615
s39_jnh = 616
s39_jno = 617
s39_jg = 618
s39_jgo = 619
s39_jgh = 620
s39_jgnle = 621
s39_jgl = 622
s39_jgnhe = 623
s39_jglh = 624
s39_jgne = 625
s39_jge = 626
s39_jgnlh = 627
s39_jghe = 628
s39_jgnl = 629
s39_jgle = 630
s39_jgnh = 631
s39_jgno = 632
s39_kdb = 633
s39_kdbr = 634
s39_kdsa = 635
s39_kdtr = 636
s39_keb = 637
s39_kebr = 638
s39_kimd = 639
s39_klmd = 640
s39_km = 641
s39_kma = 642
s39_kmac = 643
s39_kmc = 644
s39_kmctr = 645
s39_kmf = 646
s39_kmo = 647
s39_kxbr = 648
s39_kxtr = 649
s39_l = 650
s39_la = 651
s39_laa = 652
s39_laag = 653
s39_laal = 654
s39_laalg = 655
s39_lae = 656
s39_laey = 657
s39_lam = 658
s39_lamy = 659
s39_lan = 660
s39_lang = 661
s39_lao = 662
s39_laog = 663
s39_larl = 664
s39_lasp = 665
s39_lat = 666
s39_lax = 667
s39_laxg = 668
s39_lay = 669
s39_lb = 670
s39_lbh = 671
s39_lbr = 672
s39_lcbb = 673
s39_lcctl = 674
s39_lcdbr = 675
s39_lcdfr = 676
s39_lcdr = 677
s39_lcebr = 678
s39_lcer = 679
s39_lcgfr = 680
s39_lcgr = 681
s39_lcr = 682
s39_lctl = 683
s39_lctlg = 684
s39_lcxbr = 685
s39_lcxr = 686
s39_ld = 687
s39_lde = 688
s39_ldeb = 689
s39_ldebr = 690
s39_lder = 691
s39_ldetr = 692
s39_ldgr = 693
s39_ldr = 694
s39_ldrv = 695
s39_ldxbr = 696
s39_ldxbra = 697
s39_ldxr = 698
s39_ldxtr = 699
s39_ldy = 700
s39_le = 701
s39_ledbr = 702
s39_ledbra = 703
s39_ledr = 704
s39_ledtr = 705
s39_ler = 706
s39_lerv = 707
s39_lexbr = 708
s39_lexbra = 709
s39_lexr = 710
s39_ley = 711
s39_lfas = 712
s39_lfh = 713
s39_lfhat = 714
s39_lfpc = 715
s39_lg = 716
s39_lgat = 717
s39_lgb = 718
s39_lgbr = 719
s39_lgdr = 720
s39_lgf = 721
s39_lgfi = 722
s39_lgfr = 723
s39_lgfrl = 724
s39_lgg = 725
s39_lgh = 726
s39_lghi = 727
s39_lghr = 728
s39_lghrl = 729
s39_lgr = 730
s39_lgrl = 731
s39_lgsc = 732
s39_lh = 733
s39_lhh = 734
s39_lhi = 735
s39_lhr = 736
s39_lhrl = 737
s39_lhy = 738
s39_llc = 739
s39_llch = 740
s39_llcr = 741
s39_llgc = 742
s39_llgcr = 743
s39_llgf = 744
s39_llgfat = 745
s39_llgfr = 746
s39_llgfrl = 747
s39_llgfsg = 748
s39_llgh = 749
s39_llghr = 750
s39_llghrl = 751
s39_llgt = 752
s39_llgtat = 753
s39_llgtr = 754
s39_llh = 755
s39_llhh = 756
s39_llhr = 757
s39_llhrl = 758
s39_llihf = 759
s39_llihh = 760
s39_llihl = 761
s39_llilf = 762
s39_llilh = 763
s39_llill = 764
s39_llzrgf = 765
s39_lm = 766
s39_lmd = 767
s39_lmg = 768
s39_lmh = 769
s39_lmy = 770
s39_lndbr = 771
s39_lndfr = 772
s39_lndr = 773
s39_lnebr = 774
s39_lner = 775
s39_lngfr = 776
s39_lngr = 777
s39_lnr = 778
s39_lnxbr = 779
s39_lnxr = 780
s39_loc = 781
s39_loco = 782
s39_loch = 783
s39_locnle = 784
s39_locl = 785
s39_locnhe = 786
s39_loclh = 787
s39_locne = 788
s39_loce = 789
s39_locnlh = 790
s39_loche = 791
s39_locnl = 792
s39_locle = 793
s39_locnh = 794
s39_locno = 795
s39_locfh = 796
s39_locfho = 797
s39_locfhh = 798
s39_locfhnle = 799
s39_locfhl = 800
s39_locfhnhe = 801
s39_locfhlh = 802
s39_locfhne = 803
s39_locfhe = 804
s39_locfhnlh = 805
s39_locfhhe = 806
s39_locfhnl = 807
s39_locfhle = 808
s39_locfhnh = 809
s39_locfhno = 810
s39_locfhr = 811
s39_locfhro = 812
s39_locfhrh = 813
s39_locfhrnle = 814
s39_locfhrl = 815
s39_locfhrnhe = 816
s39_locfhrlh = 817
s39_locfhrne = 818
s39_locfhre = 819
s39_locfhrnlh = 820
s39_locfhrhe = 821
s39_locfhrnl = 822
s39_locfhrle = 823
s39_locfhrnh = 824
s39_locfhrno = 825
s39_locg = 826
s39_locgo = 827
s39_locgh = 828
s39_locgnle = 829
s39_locgl = 830
s39_locgnhe = 831
s39_locglh = 832
s39_locgne = 833
s39_locge = 834
s39_locgnlh = 835
s39_locghe = 836
s39_locgnl = 837
s39_locgle = 838
s39_locgnh = 839
s39_locgno = 840
s39_locghi = 841
s39_locghio = 842
s39_locghih = 843
s39_locghinle = 844
s39_locghil = 845
s39_locghinhe = 846
s39_locghilh = 847
s39_locghine = 848
s39_locghie = 849
s39_locghinlh = 850
s39_locghihe = 851
s39_locghinl = 852
s39_locghile = 853
s39_locghinh = 854
s39_locghino = 855
s39_locgr = 856
s39_locgro = 857
s39_locgrh = 858
s39_locgrnle = 859
s39_locgrl = 860
s39_locgrnhe = 861
s39_locgrlh = 862
s39_locgrne = 863
s39_locgre = 864
s39_locgrnlh = 865
s39_locgrhe = 866
s39_locgrnl = 867
s39_locgrle = 868
s39_locgrnh = 869
s39_locgrno = 870
s39_lochhi = 871
s39_lochhio = 872
s39_lochhih = 873
s39_lochhinle = 874
s39_lochhil = 875
s39_lochhinhe = 876
s39_lochhilh = 877
s39_lochhine = 878
s39_lochhie = 879
s39_lochhinlh = 880
s39_lochhihe = 881
s39_lochhinl = 882
s39_lochhile = 883
s39_lochhinh = 884
s39_lochhino = 885
s39_lochi = 886
s39_lochio = 887
s39_lochih = 888
s39_lochinle = 889
s39_lochil = 890
s39_lochinhe = 891
s39_lochilh = 892
s39_lochine = 893
s39_lochie = 894
s39_lochinlh = 895
s39_lochihe = 896
s39_lochinl = 897
s39_lochile = 898
s39_lochinh = 899
s39_lochino = 900
s39_locr = 901
s39_locro = 902
s39_locrh = 903
s39_locrnle = 904
s39_locrl = 905
s39_locrnhe = 906
s39_locrlh = 907
s39_locrne = 908
s39_locre = 909
s39_locrnlh = 910
s39_locrhe = 911
s39_locrnl = 912
s39_locrle = 913
s39_locrnh = 914
s39_locrno = 915
s39_lpctl = 916
s39_lpd = 917
s39_lpdbr = 918
s39_lpdfr = 919
s39_lpdg = 920
s39_lpdr = 921
s39_lpebr = 922
s39_lper = 923
s39_lpgfr = 924
s39_lpgr = 925
s39_lpp = 926
s39_lpq = 927
s39_lpr = 928
s39_lpsw = 929
s39_lpswe = 930
s39_lptea = 931
s39_lpxbr = 932
s39_lpxr = 933
s39_lr = 934
s39_lra = 935
s39_lrag = 936
s39_lray = 937
s39_lrdr = 938
s39_lrer = 939
s39_lrl = 940
s39_lrv = 941
s39_lrvg = 942
s39_lrvgr = 943
s39_lrvh = 944
s39_lrvr = 945
s39_lsctl = 946
s39_lt = 947
s39_ltdbr = 948
s39_ltdr = 949
s39_ltdtr = 950
s39_ltebr = 951
s39_lter = 952
s39_ltg = 953
s39_ltgf = 954
s39_ltgfr = 955
s39_ltgr = 956
s39_ltr = 957
s39_ltxbr = 958
s39_ltxr = 959
s39_ltxtr = 960
s39_lura = 961
s39_lurag = 962
s39_lxd = 963
s39_lxdb = 964
s39_lxdbr = 965
s39_lxdr = 966
s39_lxdtr = 967
s39_lxe = 968
s39_lxeb = 969
s39_lxebr = 970
s39_lxer = 971
s39_lxr = 972
s39_ly = 973
s39_lzdr = 974
s39_lzer = 975
s39_lzrf = 976
s39_lzrg = 977
s39_lzxr = 978
s39_m = 979
s39_mad = 980
s39_madb = 981
s39_madbr = 982
s39_madr = 983
s39_mae = 984
s39_maeb = 985
s39_maebr = 986
s39_maer = 987
s39_may = 988
s39_mayh = 989
s39_mayhr = 990
s39_mayl = 991
s39_maylr = 992
s39_mayr = 993
s39_mc = 994
s39_md = 995
s39_mdb = 996
s39_mdbr = 997
s39_mde = 998
s39_mdeb = 999
s39_mdebr = 1000
s39_mder = 1001
s39_mdr = 1002
s39_mdtr = 1003
s39_mdtra = 1004
s39_me = 1005
s39_mee = 1006
s39_meeb = 1007
s39_meebr = 1008
s39_meer = 1009
s39_mer = 1010
s39_mfy = 1011
s39_mg = 1012
s39_mgh = 1013
s39_mghi = 1014
s39_mgrk = 1015
s39_mh = 1016
s39_mhi = 1017
s39_mhy = 1018
s39_ml = 1019
s39_mlg = 1020
s39_mlgr = 1021
s39_mlr = 1022
s39_mp = 1023
s39_mr = 1024
s39_ms = 1025
s39_msc = 1026
s39_msch = 1027
s39_msd = 1028
s39_msdb = 1029
s39_msdbr = 1030
s39_msdr = 1031
s39_mse = 1032
s39_mseb = 1033
s39_msebr = 1034
s39_mser = 1035
s39_msfi = 1036
s39_msg = 1037
s39_msgc = 1038
s39_msgf = 1039
s39_msgfi = 1040
s39_msgfr = 1041
s39_msgr = 1042
s39_msgrkc = 1043
s39_msr = 1044
s39_msrkc = 1045
s39_msta = 1046
s39_msy = 1047
s39_mvc = 1048
s39_mvcdk = 1049
s39_mvcin = 1050
s39_mvck = 1051
s39_mvcl = 1052
s39_mvcle = 1053
s39_mvclu = 1054
s39_mvcos = 1055
s39_mvcp = 1056
s39_mvcrl = 1057
s39_mvcs = 1058
s39_mvcsk = 1059
s39_mvghi = 1060
s39_mvhhi = 1061
s39_mvhi = 1062
s39_mvi = 1063
s39_mviy = 1064
s39_mvn = 1065
s39_mvo = 1066
s39_mvpg = 1067
s39_mvst = 1068
s39_mvz = 1069
s39_mxbr = 1070
s39_mxd = 1071
s39_mxdb = 1072
s39_mxdbr = 1073
s39_mxdr = 1074
s39_mxr = 1075
s39_mxtr = 1076
s39_mxtra = 1077
s39_my = 1078
s39_myh = 1079
s39_myhr = 1080
s39_myl = 1081
s39_mylr = 1082
s39_myr = 1083
s39_n = 1084
s39_nc = 1085
s39_ncgrk = 1086
s39_ncrk = 1087
s39_ng = 1088
s39_ngr = 1089
s39_ngrk = 1090
s39_ni = 1091
s39_niai = 1092
s39_nihf = 1093
s39_nihh = 1094
s39_nihl = 1095
s39_nilf = 1096
s39_nilh = 1097
s39_nill = 1098
s39_niy = 1099
s39_nngrk = 1100
s39_nnrk = 1101
s39_nogrk = 1102
s39_nop = 1103
s39_nopr = 1104
s39_nork = 1105
s39_nr = 1106
s39_nrk = 1107
s39_ntstg = 1108
s39_nxgrk = 1109
s39_nxrk = 1110
s39_ny = 1111
s39_o = 1112
s39_oc = 1113
s39_ocgrk = 1114
s39_ocrk = 1115
s39_og = 1116
s39_ogr = 1117
s39_ogrk = 1118
s39_oi = 1119
s39_oihf = 1120
s39_oihh = 1121
s39_oihl = 1122
s39_oilf = 1123
s39_oilh = 1124
s39_oill = 1125
s39_oiy = 1126
s39_or = 1127
s39_ork = 1128
s39_oy = 1129
s39_pack = 1130
s39_palb = 1131
s39_pc = 1132
s39_pcc = 1133
s39_pckmo = 1134
s39_pfd = 1135
s39_pfdrl = 1136
s39_pfmf = 1137
s39_pfpo = 1138
s39_pgin = 1139
s39_pgout = 1140
s39_pka = 1141
s39_pku = 1142
s39_plo = 1143
s39_popcnt = 1144
s39_ppa = 1145
s39_ppno = 1146
s39_pr = 1147
s39_prno = 1148
s39_pt = 1149
s39_ptf = 1150
s39_ptff = 1151
s39_pti = 1152
s39_ptlb = 1153
s39_qadtr = 1154
s39_qaxtr = 1155
s39_qctri = 1156
s39_qsi = 1157
s39_rchp = 1158
s39_risbg = 1159
s39_risbgn = 1160
s39_risbhg = 1161
s39_risblg = 1162
s39_rll = 1163
s39_rllg = 1164
s39_rnsbg = 1165
s39_rosbg = 1166
s39_rp = 1167
s39_rrbe = 1168
s39_rrbm = 1169
s39_rrdtr = 1170
s39_rrxtr = 1171
s39_rsch = 1172
s39_rxsbg = 1173
s39_s = 1174
s39_sac = 1175
s39_sacf = 1176
s39_sal = 1177
s39_sam24 = 1178
s39_sam31 = 1179
s39_sam64 = 1180
s39_sar = 1181
s39_scctr = 1182
s39_schm = 1183
s39_sck = 1184
s39_sckc = 1185
s39_sckpf = 1186
s39_sd = 1187
s39_sdb = 1188
s39_sdbr = 1189
s39_sdr = 1190
s39_sdtr = 1191
s39_sdtra = 1192
s39_se = 1193
s39_seb = 1194
s39_sebr = 1195
s39_selgr = 1196
s39_selgro = 1197
s39_selgrh = 1198
s39_selgrnle = 1199
s39_selgrl = 1200
s39_selgrnhe = 1201
s39_selgrlh = 1202
s39_selgrne = 1203
s39_selgre = 1204
s39_selgrnlh = 1205
s39_selgrhe = 1206
s39_selgrnl = 1207
s39_selgrle = 1208
s39_selgrnh = 1209
s39_selgrno = 1210
s39_selhhhr = 1211
s39_selhhhro = 1212
s39_selhhhrh = 1213
s39_selhhhrnle = 1214
s39_selhhhrl = 1215
s39_selhhhrnhe = 1216
s39_selhhhrlh = 1217
s39_selhhhrne = 1218
s39_selhhhre = 1219
s39_selhhhrnlh = 1220
s39_selhhhrhe = 1221
s39_selhhhrnl = 1222
s39_selhhhrle = 1223
s39_selhhhrnh = 1224
s39_selhhhrno = 1225
s39_selr = 1226
s39_selro = 1227
s39_selrh = 1228
s39_selrnle = 1229
s39_selrl = 1230
s39_selrnhe = 1231
s39_selrlh = 1232
s39_selrne = 1233
s39_selre = 1234
s39_selrnlh = 1235
s39_selrhe = 1236
s39_selrnl = 1237
s39_selrle = 1238
s39_selrnh = 1239
s39_selrno = 1240
s39_ser = 1241
s39_sfasr = 1242
s39_sfpc = 1243
s39_sg = 1244
s39_sgf = 1245
s39_sgfr = 1246
s39_sgh = 1247
s39_sgr = 1248
s39_sgrk = 1249
s39_sh = 1250
s39_shhhr = 1251
s39_shhlr = 1252
s39_shy = 1253
s39_sie = 1254
s39_siga = 1255
s39_sigp = 1256
s39_sl = 1257
s39_sla = 1258
s39_slag = 1259
s39_slak = 1260
s39_slb = 1261
s39_slbg = 1262
s39_slbgr = 1263
s39_slbr = 1264
s39_slda = 1265
s39_sldl = 1266
s39_sldt = 1267
s39_slfi = 1268
s39_slg = 1269
s39_slgf = 1270
s39_slgfi = 1271
s39_slgfr = 1272
s39_slgr = 1273
s39_slgrk = 1274
s39_slhhhr = 1275
s39_slhhlr = 1276
s39_sll = 1277
s39_sllg = 1278
s39_sllk = 1279
s39_slr = 1280
s39_slrk = 1281
s39_slxt = 1282
s39_sly = 1283
s39_sortl = 1284
s39_sp = 1285
s39_spctr = 1286
s39_spka = 1287
s39_spm = 1288
s39_spt = 1289
s39_spx = 1290
s39_sqd = 1291
s39_sqdb = 1292
s39_sqdbr = 1293
s39_sqdr = 1294
s39_sqe = 1295
s39_sqeb = 1296
s39_sqebr = 1297
s39_sqer = 1298
s39_sqxbr = 1299
s39_sqxr = 1300
s39_sr = 1301
s39_sra = 1302
s39_srag = 1303
s39_srak = 1304
s39_srda = 1305
s39_srdl = 1306
s39_srdt = 1307
s39_srk = 1308
s39_srl = 1309
s39_srlg = 1310
s39_srlk = 1311
s39_srnm = 1312
s39_srnmb = 1313
s39_srnmt = 1314
s39_srp = 1315
s39_srst = 1316
s39_srstu = 1317
s39_srxt = 1318
s39_ssair = 1319
s39_ssar = 1320
s39_ssch = 1321
s39_sske = 1322
s39_ssm = 1323
s39_st = 1324
s39_stam = 1325
s39_stamy = 1326
s39_stap = 1327
s39_stc = 1328
s39_stch = 1329
s39_stck = 1330
s39_stckc = 1331
s39_stcke = 1332
s39_stckf = 1333
s39_stcm = 1334
s39_stcmh = 1335
s39_stcmy = 1336
s39_stcps = 1337
s39_stcrw = 1338
s39_stctg = 1339
s39_stctl = 1340
s39_stcy = 1341
s39_std = 1342
s39_stdrv = 1343
s39_stdy = 1344
s39_ste = 1345
s39_sterv = 1346
s39_stey = 1347
s39_stfh = 1348
s39_stfl = 1349
s39_stfle = 1350
s39_stfpc = 1351
s39_stg = 1352
s39_stgrl = 1353
s39_stgsc = 1354
s39_sth = 1355
s39_sthh = 1356
s39_sthrl = 1357
s39_sthy = 1358
s39_stidp = 1359
s39_stm = 1360
s39_stmg = 1361
s39_stmh = 1362
s39_stmy = 1363
s39_stnsm = 1364
s39_stoc = 1365
s39_stoco = 1366
s39_stoch = 1367
s39_stocnle = 1368
s39_stocl = 1369
s39_stocnhe = 1370
s39_stoclh = 1371
s39_stocne = 1372
s39_stoce = 1373
s39_stocnlh = 1374
s39_stoche = 1375
s39_stocnl = 1376
s39_stocle = 1377
s39_stocnh = 1378
s39_stocno = 1379
s39_stocfh = 1380
s39_stocfho = 1381
s39_stocfhh = 1382
s39_stocfhnle = 1383
s39_stocfhl = 1384
s39_stocfhnhe = 1385
s39_stocfhlh = 1386
s39_stocfhne = 1387
s39_stocfhe = 1388
s39_stocfhnlh = 1389
s39_stocfhhe = 1390
s39_stocfhnl = 1391
s39_stocfhle = 1392
s39_stocfhnh = 1393
s39_stocfhno = 1394
s39_stocg = 1395
s39_stocgo = 1396
s39_stocgh = 1397
s39_stocgnle = 1398
s39_stocgl = 1399
s39_stocgnhe = 1400
s39_stocglh = 1401
s39_stocgne = 1402
s39_stocge = 1403
s39_stocgnlh = 1404
s39_stocghe = 1405
s39_stocgnl = 1406
s39_stocgle = 1407
s39_stocgnh = 1408
s39_stocgno = 1409
s39_stosm = 1410
s39_stpq = 1411
s39_stpt = 1412
s39_stpx = 1413
s39_strag = 1414
s39_strl = 1415
s39_strv = 1416
s39_strvg = 1417
s39_strvh = 1418
s39_stsch = 1419
s39_stsi = 1420
s39_stura = 1421
s39_sturg = 1422
s39_sty = 1423
s39_su = 1424
s39_sur = 1425
s39_svc = 1426
s39_sw = 1427
s39_swr = 1428
s39_sxbr = 1429
s39_sxr = 1430
s39_sxtr = 1431
s39_sxtra = 1432
s39_sy = 1433
s39_tabort = 1434
s39_tam = 1435
s39_tar = 1436
s39_tb = 1437
s39_tbdr = 1438
s39_tbedr = 1439
s39_tbegin = 1440
s39_tbeginc = 1441
s39_tcdb = 1442
s39_tceb = 1443
s39_tcxb = 1444
s39_tdcdt = 1445
s39_tdcet = 1446
s39_tdcxt = 1447
s39_tdgdt = 1448
s39_tdget = 1449
s39_tdgxt = 1450
s39_tend = 1451
s39_thder = 1452
s39_thdr = 1453
s39_tm = 1454
s39_tmhh = 1455
s39_tmhl = 1456
s39_tmlh = 1457
s39_tmll = 1458
s39_tmy = 1459
s39_tp = 1460
s39_tpei = 1461
s39_tpi = 1462
s39_tprot = 1463
s39_tr = 1464
s39_trace = 1465
s39_tracg = 1466
s39_trap2 = 1467
s39_trap4 = 1468
s39_tre = 1469
s39_troo = 1470
s39_trot = 1471
s39_trt = 1472
s39_trte = 1473
s39_trto = 1474
s39_trtr = 1475
s39_trtre = 1476
s39_trtt = 1477
s39_ts = 1478
s39_tsch = 1479
s39_unpk = 1480
s39_unpka = 1481
s39_unpku = 1482
s39_upt = 1483
s39_va = 1484
s39_vab = 1485
s39_vac = 1486
s39_vacc = 1487
s39_vaccb = 1488
s39_vaccc = 1489
s39_vacccq = 1490
s39_vaccf = 1491
s39_vaccg = 1492
s39_vacch = 1493
s39_vaccq = 1494
s39_vacq = 1495
s39_vaf = 1496
s39_vag = 1497
s39_vah = 1498
s39_vap = 1499
s39_vaq = 1500
s39_vavg = 1501
s39_vavgb = 1502
s39_vavgf = 1503
s39_vavgg = 1504
s39_vavgh = 1505
s39_vavgl = 1506
s39_vavglb = 1507
s39_vavglf = 1508
s39_vavglg = 1509
s39_vavglh = 1510
s39_vbperm = 1511
s39_vcdg = 1512
s39_vcdgb = 1513
s39_vcdlg = 1514
s39_vcdlgb = 1515
s39_vcefb = 1516
s39_vcelfb = 1517
s39_vceq = 1518
s39_vceqb = 1519
s39_vceqbs = 1520
s39_vceqf = 1521
s39_vceqfs = 1522
s39_vceqg = 1523
s39_vceqgs = 1524
s39_vceqh = 1525
s39_vceqhs = 1526
s39_vcfeb = 1527
s39_vcfpl = 1528
s39_vcfps = 1529
s39_vcgd = 1530
s39_vcgdb = 1531
s39_vch = 1532
s39_vchb = 1533
s39_vchbs = 1534
s39_vchf = 1535
s39_vchfs = 1536
s39_vchg = 1537
s39_vchgs = 1538
s39_vchh = 1539
s39_vchhs = 1540
s39_vchl = 1541
s39_vchlb = 1542
s39_vchlbs = 1543
s39_vchlf = 1544
s39_vchlfs = 1545
s39_vchlg = 1546
s39_vchlgs = 1547
s39_vchlh = 1548
s39_vchlhs = 1549
s39_vcksm = 1550
s39_vclfeb = 1551
s39_vclfp = 1552
s39_vclgd = 1553
s39_vclgdb = 1554
s39_vclz = 1555
s39_vclzb = 1556
s39_vclzf = 1557
s39_vclzg = 1558
s39_vclzh = 1559
s39_vcp = 1560
s39_vcsfp = 1561
s39_vctz = 1562
s39_vctzb = 1563
s39_vctzf = 1564
s39_vctzg = 1565
s39_vctzh = 1566
s39_vcvb = 1567
s39_vcvbg = 1568
s39_vcvd = 1569
s39_vcvdg = 1570
s39_vdp = 1571
s39_vec = 1572
s39_vecb = 1573
s39_vecf = 1574
s39_vecg = 1575
s39_vech = 1576
s39_vecl = 1577
s39_veclb = 1578
s39_veclf = 1579
s39_veclg = 1580
s39_veclh = 1581
s39_verim = 1582
s39_verimb = 1583
s39_verimf = 1584
s39_verimg = 1585
s39_verimh = 1586
s39_verll = 1587
s39_verllb = 1588
s39_verllf = 1589
s39_verllg = 1590
s39_verllh = 1591
s39_verllv = 1592
s39_verllvb = 1593
s39_verllvf = 1594
s39_verllvg = 1595
s39_verllvh = 1596
s39_vesl = 1597
s39_veslb = 1598
s39_veslf = 1599
s39_veslg = 1600
s39_veslh = 1601
s39_veslv = 1602
s39_veslvb = 1603
s39_veslvf = 1604
s39_veslvg = 1605
s39_veslvh = 1606
s39_vesra = 1607
s39_vesrab = 1608
s39_vesraf = 1609
s39_vesrag = 1610
s39_vesrah = 1611
s39_vesrav = 1612
s39_vesravb = 1613
s39_vesravf = 1614
s39_vesravg = 1615
s39_vesravh = 1616
s39_vesrl = 1617
s39_vesrlb = 1618
s39_vesrlf = 1619
s39_vesrlg = 1620
s39_vesrlh = 1621
s39_vesrlv = 1622
s39_vesrlvb = 1623
s39_vesrlvf = 1624
s39_vesrlvg = 1625
s39_vesrlvh = 1626
s39_vfa = 1627
s39_vfadb = 1628
s39_vfae = 1629
s39_vfaeb = 1630
s39_vfaebs = 1631
s39_vfaef = 1632
s39_vfaefs = 1633
s39_vfaeh = 1634
s39_vfaehs = 1635
s39_vfaezb = 1636
s39_vfaezbs = 1637
s39_vfaezf = 1638
s39_vfaezfs = 1639
s39_vfaezh = 1640
s39_vfaezhs = 1641
s39_vfasb = 1642
s39_vfce = 1643
s39_vfcedb = 1644
s39_vfcedbs = 1645
s39_vfcesb = 1646
s39_vfcesbs = 1647
s39_vfch = 1648
s39_vfchdb = 1649
s39_vfchdbs = 1650
s39_vfche = 1651
s39_vfchedb = 1652
s39_vfchedbs = 1653
s39_vfchesb = 1654
s39_vfchesbs = 1655
s39_vfchsb = 1656
s39_vfchsbs = 1657
s39_vfd = 1658
s39_vfddb = 1659
s39_vfdsb = 1660
s39_vfee = 1661
s39_vfeeb = 1662
s39_vfeebs = 1663
s39_vfeef = 1664
s39_vfeefs = 1665
s39_vfeeh = 1666
s39_vfeehs = 1667
s39_vfeezb = 1668
s39_vfeezbs = 1669
s39_vfeezf = 1670
s39_vfeezfs = 1671
s39_vfeezh = 1672
s39_vfeezhs = 1673
s39_vfene = 1674
s39_vfeneb = 1675
s39_vfenebs = 1676
s39_vfenef = 1677
s39_vfenefs = 1678
s39_vfeneh = 1679
s39_vfenehs = 1680
s39_vfenezb = 1681
s39_vfenezbs = 1682
s39_vfenezf = 1683
s39_vfenezfs = 1684
s39_vfenezh = 1685
s39_vfenezhs = 1686
s39_vfi = 1687
s39_vfidb = 1688
s39_vfisb = 1689
s39_vfkedb = 1690
s39_vfkedbs = 1691
s39_vfkesb = 1692
s39_vfkesbs = 1693
s39_vfkhdb = 1694
s39_vfkhdbs = 1695
s39_vfkhedb = 1696
s39_vfkhedbs = 1697
s39_vfkhesb = 1698
s39_vfkhesbs = 1699
s39_vfkhsb = 1700
s39_vfkhsbs = 1701
s39_vflcdb = 1702
s39_vflcsb = 1703
s39_vfll = 1704
s39_vflls = 1705
s39_vflndb = 1706
s39_vflnsb = 1707
s39_vflpdb = 1708
s39_vflpsb = 1709
s39_vflr = 1710
s39_vflrd = 1711
s39_vfm = 1712
s39_vfma = 1713
s39_vfmadb = 1714
s39_vfmasb = 1715
s39_vfmax = 1716
s39_vfmaxdb = 1717
s39_vfmaxsb = 1718
s39_vfmdb = 1719
s39_vfmin = 1720
s39_vfmindb = 1721
s39_vfminsb = 1722
s39_vfms = 1723
s39_vfmsb = 1724
s39_vfmsdb = 1725
s39_vfmssb = 1726
s39_vfnma = 1727
s39_vfnmadb = 1728
s39_vfnmasb = 1729
s39_vfnms = 1730
s39_vfnmsdb = 1731
s39_vfnmssb = 1732
s39_vfpso = 1733
s39_vfpsodb = 1734
s39_vfpsosb = 1735
s39_vfs = 1736
s39_vfsdb = 1737
s39_vfsq = 1738
s39_vfsqdb = 1739
s39_vfsqsb = 1740
s39_vfssb = 1741
s39_vftci = 1742
s39_vftcidb = 1743
s39_vftcisb = 1744
s39_vgbm = 1745
s39_vgef = 1746
s39_vgeg = 1747
s39_vgfm = 1748
s39_vgfma = 1749
s39_vgfmab = 1750
s39_vgfmaf = 1751
s39_vgfmag = 1752
s39_vgfmah = 1753
s39_vgfmb = 1754
s39_vgfmf = 1755
s39_vgfmg = 1756
s39_vgfmh = 1757
s39_vgm = 1758
s39_vgmb = 1759
s39_vgmf = 1760
s39_vgmg = 1761
s39_vgmh = 1762
s39_vistr = 1763
s39_vistrb = 1764
s39_vistrbs = 1765
s39_vistrf = 1766
s39_vistrfs = 1767
s39_vistrh = 1768
s39_vistrhs = 1769
s39_vl = 1770
s39_vlbb = 1771
s39_vlbr = 1772
s39_vlbrf = 1773
s39_vlbrg = 1774
s39_vlbrh = 1775
s39_vlbrq = 1776
s39_vlbrrep = 1777
s39_vlbrrepf = 1778
s39_vlbrrepg = 1779
s39_vlbrreph = 1780
s39_vlc = 1781
s39_vlcb = 1782
s39_vlcf = 1783
s39_vlcg = 1784
s39_vlch = 1785
s39_vlde = 1786
s39_vldeb = 1787
s39_vleb = 1788
s39_vlebrf = 1789
s39_vlebrg = 1790
s39_vlebrh = 1791
s39_vled = 1792
s39_vledb = 1793
s39_vlef = 1794
s39_vleg = 1795
s39_vleh = 1796
s39_vleib = 1797
s39_vleif = 1798
s39_vleig = 1799
s39_vleih = 1800
s39_vler = 1801
s39_vlerf = 1802
s39_vlerg = 1803
s39_vlerh = 1804
s39_vlgv = 1805
s39_vlgvb = 1806
s39_vlgvf = 1807
s39_vlgvg = 1808
s39_vlgvh = 1809
s39_vlip = 1810
s39_vll = 1811
s39_vllebrz = 1812
s39_vllebrze = 1813
s39_vllebrzf = 1814
s39_vllebrzg = 1815
s39_vllebrzh = 1816
s39_vllez = 1817
s39_vllezb = 1818
s39_vllezf = 1819
s39_vllezg = 1820
s39_vllezh = 1821
s39_vllezlf = 1822
s39_vlm = 1823
s39_vlp = 1824
s39_vlpb = 1825
s39_vlpf = 1826
s39_vlpg = 1827
s39_vlph = 1828
s39_vlr = 1829
s39_vlrep = 1830
s39_vlrepb = 1831
s39_vlrepf = 1832
s39_vlrepg = 1833
s39_vlreph = 1834
s39_vlrl = 1835
s39_vlrlr = 1836
s39_vlvg = 1837
s39_vlvgb = 1838
s39_vlvgf = 1839
s39_vlvgg = 1840
s39_vlvgh = 1841
s39_vlvgp = 1842
s39_vmae = 1843
s39_vmaeb = 1844
s39_vmaef = 1845
s39_vmaeh = 1846
s39_vmah = 1847
s39_vmahb = 1848
s39_vmahf = 1849
s39_vmahh = 1850
s39_vmal = 1851
s39_vmalb = 1852
s39_vmale = 1853
s39_vmaleb = 1854
s39_vmalef = 1855
s39_vmaleh = 1856
s39_vmalf = 1857
s39_vmalh = 1858
s39_vmalhb = 1859
s39_vmalhf = 1860
s39_vmalhh = 1861
s39_vmalhw = 1862
s39_vmalo = 1863
s39_vmalob = 1864
s39_vmalof = 1865
s39_vmaloh = 1866
s39_vmao = 1867
s39_vmaob = 1868
s39_vmaof = 1869
s39_vmaoh = 1870
s39_vme = 1871
s39_vmeb = 1872
s39_vmef = 1873
s39_vmeh = 1874
s39_vmh = 1875
s39_vmhb = 1876
s39_vmhf = 1877
s39_vmhh = 1878
s39_vml = 1879
s39_vmlb = 1880
s39_vmle = 1881
s39_vmleb = 1882
s39_vmlef = 1883
s39_vmleh = 1884
s39_vmlf = 1885
s39_vmlh = 1886
s39_vmlhb = 1887
s39_vmlhf = 1888
s39_vmlhh = 1889
s39_vmlhw = 1890
s39_vmlo = 1891
s39_vmlob = 1892
s39_vmlof = 1893
s39_vmloh = 1894
s39_vmn = 1895
s39_vmnb = 1896
s39_vmnf = 1897
s39_vmng = 1898
s39_vmnh = 1899
s39_vmnl = 1900
s39_vmnlb = 1901
s39_vmnlf = 1902
s39_vmnlg = 1903
s39_vmnlh = 1904
s39_vmo = 1905
s39_vmob = 1906
s39_vmof = 1907
s39_vmoh = 1908
s39_vmp = 1909
s39_vmrh = 1910
s39_vmrhb = 1911
s39_vmrhf = 1912
s39_vmrhg = 1913
s39_vmrhh = 1914
s39_vmrl = 1915
s39_vmrlb = 1916
s39_vmrlf = 1917
s39_vmrlg = 1918
s39_vmrlh = 1919
s39_vmsl = 1920
s39_vmslg = 1921
s39_vmsp = 1922
s39_vmx = 1923
s39_vmxb = 1924
s39_vmxf = 1925
s39_vmxg = 1926
s39_vmxh = 1927
s39_vmxl = 1928
s39_vmxlb = 1929
s39_vmxlf = 1930
s39_vmxlg = 1931
s39_vmxlh = 1932
s39_vn = 1933
s39_vnc = 1934
s39_vnn = 1935
s39_vno = 1936
s39_vnot = 1937
s39_vnx = 1938
s39_vo = 1939
s39_voc = 1940
s39_vone = 1941
s39_vpdi = 1942
s39_vperm = 1943
s39_vpk = 1944
s39_vpkf = 1945
s39_vpkg = 1946
s39_vpkh = 1947
s39_vpkls = 1948
s39_vpklsf = 1949
s39_vpklsfs = 1950
s39_vpklsg = 1951
s39_vpklsgs = 1952
s39_vpklsh = 1953
s39_vpklshs = 1954
s39_vpks = 1955
s39_vpksf = 1956
s39_vpksfs = 1957
s39_vpksg = 1958
s39_vpksgs = 1959
s39_vpksh = 1960
s39_vpkshs = 1961
s39_vpkz = 1962
s39_vpopct = 1963
s39_vpopctb = 1964
s39_vpopctf = 1965
s39_vpopctg = 1966
s39_vpopcth = 1967
s39_vpsop = 1968
s39_vrep = 1969
s39_vrepb = 1970
s39_vrepf = 1971
s39_vrepg = 1972
s39_vreph = 1973
s39_vrepi = 1974
s39_vrepib = 1975
s39_vrepif = 1976
s39_vrepig = 1977
s39_vrepih = 1978
s39_vrp = 1979
s39_vs = 1980
s39_vsb = 1981
s39_vsbcbi = 1982
s39_vsbcbiq = 1983
s39_vsbi = 1984
s39_vsbiq = 1985
s39_vscbi = 1986
s39_vscbib = 1987
s39_vscbif = 1988
s39_vscbig = 1989
s39_vscbih = 1990
s39_vscbiq = 1991
s39_vscef = 1992
s39_vsceg = 1993
s39_vsdp = 1994
s39_vseg = 1995
s39_vsegb = 1996
s39_vsegf = 1997
s39_vsegh = 1998
s39_vsel = 1999
s39_vsf = 2000
s39_vsg = 2001
s39_vsh = 2002
s39_vsl = 2003
s39_vslb = 2004
s39_vsld = 2005
s39_vsldb = 2006
s39_vsp = 2007
s39_vsq = 2008
s39_vsra = 2009
s39_vsrab = 2010
s39_vsrd = 2011
s39_vsrl = 2012
s39_vsrlb = 2013
s39_vsrp = 2014
s39_vst = 2015
s39_vstbr = 2016
s39_vstbrf = 2017
s39_vstbrg = 2018
s39_vstbrh = 2019
s39_vstbrq = 2020
s39_vsteb = 2021
s39_vstebrf = 2022
s39_vstebrg = 2023
s39_vstebrh = 2024
s39_vstef = 2025
s39_vsteg = 2026
s39_vsteh = 2027
s39_vster = 2028
s39_vsterf = 2029
s39_vsterg = 2030
s39_vsterh = 2031
s39_vstl = 2032
s39_vstm = 2033
s39_vstrc = 2034
s39_vstrcb = 2035
s39_vstrcbs = 2036
s39_vstrcf = 2037
s39_vstrcfs = 2038
s39_vstrch = 2039
s39_vstrchs = 2040
s39_vstrczb = 2041
s39_vstrczbs = 2042
s39_vstrczf = 2043
s39_vstrczfs = 2044
s39_vstrczh = 2045
s39_vstrczhs = 2046
s39_vstrl = 2047
s39_vstrlr = 2048
s39_vstrs = 2049
s39_vstrsb = 2050
s39_vstrsf = 2051
s39_vstrsh = 2052
s39_vstrszb = 2053
s39_vstrszf = 2054
s39_vstrszh = 2055
s39_vsum = 2056
s39_vsumb = 2057
s39_vsumg = 2058
s39_vsumgf = 2059
s39_vsumgh = 2060
s39_vsumh = 2061
s39_vsumq = 2062
s39_vsumqf = 2063
s39_vsumqg = 2064
s39_vtm = 2065
s39_vtp = 2066
s39_vuph = 2067
s39_vuphb = 2068
s39_vuphf = 2069
s39_vuphh = 2070
s39_vupkz = 2071
s39_vupl = 2072
s39_vuplb = 2073
s39_vuplf = 2074
s39_vuplh = 2075
s39_vuplhb = 2076
s39_vuplhf = 2077
s39_vuplhh = 2078
s39_vuplhw = 2079
s39_vupll = 2080
s39_vupllb = 2081
s39_vupllf = 2082
s39_vupllh = 2083
s39_vzero = 2084
s39_wcdgb = 2085
s39_wcdlgb = 2086
s39_wcefb = 2087
s39_wcelfb = 2088
s39_wcfeb = 2089
s39_wcgdb = 2090
s39_wclfeb = 2091
s39_wclgdb = 2092
s39_wfadb = 2093
s39_wfasb = 2094
s39_wfaxb = 2095
s39_wfc = 2096
s39_wfcdb = 2097
s39_wfcedb = 2098
s39_wfcedbs = 2099
s39_wfcesb = 2100
s39_wfcesbs = 2101
s39_wfcexb = 2102
s39_wfcexbs = 2103
s39_wfchdb = 2104
s39_wfchdbs = 2105
s39_wfchedb = 2106
s39_wfchedbs = 2107
s39_wfchesb = 2108
s39_wfchesbs = 2109
s39_wfchexb = 2110
s39_wfchexbs = 2111
s39_wfchsb = 2112
s39_wfchsbs = 2113
s39_wfchxb = 2114
s39_wfchxbs = 2115
s39_wfcsb = 2116
s39_wfcxb = 2117
s39_wfddb = 2118
s39_wfdsb = 2119
s39_wfdxb = 2120
s39_wfidb = 2121
s39_wfisb = 2122
s39_wfixb = 2123
s39_wfk = 2124
s39_wfkdb = 2125
s39_wfkedb = 2126
s39_wfkedbs = 2127
s39_wfkesb = 2128
s39_wfkesbs = 2129
s39_wfkexb = 2130
s39_wfkexbs = 2131
s39_wfkhdb = 2132
s39_wfkhdbs = 2133
s39_wfkhedb = 2134
s39_wfkhedbs = 2135
s39_wfkhesb = 2136
s39_wfkhesbs = 2137
s39_wfkhexb = 2138
s39_wfkhexbs = 2139
s39_wfkhsb = 2140
s39_wfkhsbs = 2141
s39_wfkhxb = 2142
s39_wfkhxbs = 2143
s39_wfksb = 2144
s39_wfkxb = 2145
s39_wflcdb = 2146
s39_wflcsb = 2147
s39_wflcxb = 2148
s39_wflld = 2149
s39_wflls = 2150
s39_wflndb = 2151
s39_wflnsb = 2152
s39_wflnxb = 2153
s39_wflpdb = 2154
s39_wflpsb = 2155
s39_wflpxb = 2156
s39_wflrd = 2157
s39_wflrx = 2158
s39_wfmadb = 2159
s39_wfmasb = 2160
s39_wfmaxb = 2161
s39_wfmaxdb = 2162
s39_wfmaxsb = 2163
s39_wfmaxxb = 2164
s39_wfmdb = 2165
s39_wfmindb = 2166
s39_wfminsb = 2167
s39_wfminxb = 2168
s39_wfmsb = 2169
s39_wfmsdb = 2170
s39_wfmssb = 2171
s39_wfmsxb = 2172
s39_wfmxb = 2173
s39_wfnmadb = 2174
s39_wfnmasb = 2175
s39_wfnmaxb = 2176
s39_wfnmsdb = 2177
s39_wfnmssb = 2178
s39_wfnmsxb = 2179
s39_wfpsodb = 2180
s39_wfpsosb = 2181
s39_wfpsoxb = 2182
s39_wfsdb = 2183
s39_wfsqdb = 2184
s39_wfsqsb = 2185
s39_wfsqxb = 2186
s39_wfssb = 2187
s39_wfsxb = 2188
s39_wftcidb = 2189
s39_wftcisb = 2190
s39_wftcixb = 2191
s39_wldeb = 2192
s39_wledb = 2193
s39_x = 2194
s39_xc = 2195
s39_xg = 2196
s39_xgr = 2197
s39_xgrk = 2198
s39_xi = 2199
s39_xihf = 2200
s39_xilf = 2201
s39_xiy = 2202
s39_xr = 2203
s39_xrk = 2204
s39_xsch = 2205
s39_xy = 2206
s39_zap = 2207
s39_vx = 2208
s39_last = 2209
_3E426F96F68C120BD73661AAC99B228D = ctypes.c_uint32 # enum

# values for enumeration '_A2DB697AD6D9D37E30232284EFAA35E7'
_A2DB697AD6D9D37E30232284EFAA35E7__enumvalues = {
    0: 'RISCV_null',
    1: 'RISCV_lui',
    2: 'RISCV_auipc',
    3: 'RISCV_jal',
    4: 'RISCV_jalr',
    5: 'RISCV_beq',
    6: 'RISCV_bne',
    7: 'RISCV_blt',
    8: 'RISCV_bge',
    9: 'RISCV_bltu',
    10: 'RISCV_bgeu',
    11: 'RISCV_lb',
    12: 'RISCV_lh',
    13: 'RISCV_lw',
    14: 'RISCV_lbu',
    15: 'RISCV_lhu',
    16: 'RISCV_sb',
    17: 'RISCV_sh',
    18: 'RISCV_sw',
    19: 'RISCV_addi',
    20: 'RISCV_slti',
    21: 'RISCV_sltiu',
    22: 'RISCV_xori',
    23: 'RISCV_ori',
    24: 'RISCV_andi',
    25: 'RISCV_slli',
    26: 'RISCV_srli',
    27: 'RISCV_srai',
    28: 'RISCV_add',
    29: 'RISCV_sub',
    30: 'RISCV_sll',
    31: 'RISCV_slt',
    32: 'RISCV_sltu',
    33: 'RISCV_xor',
    34: 'RISCV_srl',
    35: 'RISCV_sra',
    36: 'RISCV_or',
    37: 'RISCV_and',
    38: 'RISCV_fence',
    39: 'RISCV_ecall',
    40: 'RISCV_ebreak',
    41: 'RISCV_uret',
    42: 'RISCV_sret',
    43: 'RISCV_mret',
    44: 'RISCV_wfi',
    45: 'RISCV_sfence',
    46: 'RISCV_hfenceb',
    47: 'RISCV_hfenceg',
    48: 'RISCV_lwu',
    49: 'RISCV_ld',
    50: 'RISCV_sd',
    51: 'RISCV_addiw',
    52: 'RISCV_slliw',
    53: 'RISCV_srliw',
    54: 'RISCV_sraiw',
    55: 'RISCV_addw',
    56: 'RISCV_subw',
    57: 'RISCV_sllw',
    58: 'RISCV_sltw',
    59: 'RISCV_srlw',
    60: 'RISCV_sraw',
    61: 'RISCV_fencei',
    62: 'RISCV_csrrw',
    63: 'RISCV_csrrs',
    64: 'RISCV_csrrc',
    65: 'RISCV_csrrwi',
    66: 'RISCV_csrrsi',
    67: 'RISCV_csrrci',
    68: 'RISCV_mul',
    69: 'RISCV_mulh',
    70: 'RISCV_mulhsu',
    71: 'RISCV_mulhu',
    72: 'RISCV_div',
    73: 'RISCV_divu',
    74: 'RISCV_rem',
    75: 'RISCV_remu',
    76: 'RISCV_mulw',
    77: 'RISCV_divw',
    78: 'RISCV_divuw',
    79: 'RISCV_remw',
    80: 'RISCV_remuw',
    81: 'RISCV_lr',
    82: 'RISCV_sc',
    83: 'RISCV_amoswap',
    84: 'RISCV_amoadd',
    85: 'RISCV_amoxor',
    86: 'RISCV_amoand',
    87: 'RISCV_amoor',
    88: 'RISCV_amomin',
    89: 'RISCV_amomax',
    90: 'RISCV_amominu',
    91: 'RISCV_amomaxu',
    92: 'RISCV_flw',
    93: 'RISCV_fsw',
    94: 'RISCV_fmadd',
    95: 'RISCV_fmsub',
    96: 'RISCV_fnmsub',
    97: 'RISCV_fnmadd',
    98: 'RISCV_fadd',
    99: 'RISCV_fsub',
    100: 'RISCV_fmul',
    101: 'RISCV_fdiv',
    102: 'RISCV_fsqrt',
    103: 'RISCV_fsgnj',
    104: 'RISCV_fsgnjn',
    105: 'RISCV_fsgnjx',
    106: 'RISCV_fmin',
    107: 'RISCV_fmax',
    108: 'RISCV_fcvtf2f',
    109: 'RISCV_fcvtf2i',
    110: 'RISCV_fcvti2f',
    111: 'RISCV_fmv',
    112: 'RISCV_feq',
    113: 'RISCV_flt',
    114: 'RISCV_fle',
    115: 'RISCV_fclass',
    116: 'RISCV_fld',
    117: 'RISCV_fsd',
    118: 'RISCV_flq',
    119: 'RISCV_fsq',
    120: 'RISCV_nop',
    121: 'RISCV_li',
    122: 'RISCV_mv',
    123: 'RISCV_not',
    124: 'RISCV_neg',
    125: 'RISCV_negw',
    126: 'RISCV_sext',
    127: 'RISCV_seqz',
    128: 'RISCV_snez',
    129: 'RISCV_sltz',
    130: 'RISCV_sgtz',
    131: 'RISCV_fabs',
    132: 'RISCV_fneg',
    133: 'RISCV_beqz',
    134: 'RISCV_bnez',
    135: 'RISCV_blez',
    136: 'RISCV_bgez',
    137: 'RISCV_bltz',
    138: 'RISCV_bgtz',
    139: 'RISCV_j',
    140: 'RISCV_jr',
    141: 'RISCV_ret',
    142: 'RISCV_rdinstret',
    143: 'RISCV_rdcycle',
    144: 'RISCV_rdtime',
    145: 'RISCV_rdinstreth',
    146: 'RISCV_rdcycleh',
    147: 'RISCV_rdtimeh',
    148: 'RISCV_csrr',
    149: 'RISCV_csrw',
    150: 'RISCV_csrs',
    151: 'RISCV_csrc',
    152: 'RISCV_csrwi',
    153: 'RISCV_csrsi',
    154: 'RISCV_csrci',
    155: 'RISCV_frcsr',
    156: 'RISCV_fscsr',
    157: 'RISCV_frrm',
    158: 'RISCV_fsrm',
    159: 'RISCV_frflags',
    160: 'RISCV_fsflags',
    161: 'RISCV_la',
    162: 'RISCV_call',
    163: 'RISCV_tail',
    164: 'RISCV_jump',
    165: 'RISCV_last',
}
RISCV_null = 0
RISCV_lui = 1
RISCV_auipc = 2
RISCV_jal = 3
RISCV_jalr = 4
RISCV_beq = 5
RISCV_bne = 6
RISCV_blt = 7
RISCV_bge = 8
RISCV_bltu = 9
RISCV_bgeu = 10
RISCV_lb = 11
RISCV_lh = 12
RISCV_lw = 13
RISCV_lbu = 14
RISCV_lhu = 15
RISCV_sb = 16
RISCV_sh = 17
RISCV_sw = 18
RISCV_addi = 19
RISCV_slti = 20
RISCV_sltiu = 21
RISCV_xori = 22
RISCV_ori = 23
RISCV_andi = 24
RISCV_slli = 25
RISCV_srli = 26
RISCV_srai = 27
RISCV_add = 28
RISCV_sub = 29
RISCV_sll = 30
RISCV_slt = 31
RISCV_sltu = 32
RISCV_xor = 33
RISCV_srl = 34
RISCV_sra = 35
RISCV_or = 36
RISCV_and = 37
RISCV_fence = 38
RISCV_ecall = 39
RISCV_ebreak = 40
RISCV_uret = 41
RISCV_sret = 42
RISCV_mret = 43
RISCV_wfi = 44
RISCV_sfence = 45
RISCV_hfenceb = 46
RISCV_hfenceg = 47
RISCV_lwu = 48
RISCV_ld = 49
RISCV_sd = 50
RISCV_addiw = 51
RISCV_slliw = 52
RISCV_srliw = 53
RISCV_sraiw = 54
RISCV_addw = 55
RISCV_subw = 56
RISCV_sllw = 57
RISCV_sltw = 58
RISCV_srlw = 59
RISCV_sraw = 60
RISCV_fencei = 61
RISCV_csrrw = 62
RISCV_csrrs = 63
RISCV_csrrc = 64
RISCV_csrrwi = 65
RISCV_csrrsi = 66
RISCV_csrrci = 67
RISCV_mul = 68
RISCV_mulh = 69
RISCV_mulhsu = 70
RISCV_mulhu = 71
RISCV_div = 72
RISCV_divu = 73
RISCV_rem = 74
RISCV_remu = 75
RISCV_mulw = 76
RISCV_divw = 77
RISCV_divuw = 78
RISCV_remw = 79
RISCV_remuw = 80
RISCV_lr = 81
RISCV_sc = 82
RISCV_amoswap = 83
RISCV_amoadd = 84
RISCV_amoxor = 85
RISCV_amoand = 86
RISCV_amoor = 87
RISCV_amomin = 88
RISCV_amomax = 89
RISCV_amominu = 90
RISCV_amomaxu = 91
RISCV_flw = 92
RISCV_fsw = 93
RISCV_fmadd = 94
RISCV_fmsub = 95
RISCV_fnmsub = 96
RISCV_fnmadd = 97
RISCV_fadd = 98
RISCV_fsub = 99
RISCV_fmul = 100
RISCV_fdiv = 101
RISCV_fsqrt = 102
RISCV_fsgnj = 103
RISCV_fsgnjn = 104
RISCV_fsgnjx = 105
RISCV_fmin = 106
RISCV_fmax = 107
RISCV_fcvtf2f = 108
RISCV_fcvtf2i = 109
RISCV_fcvti2f = 110
RISCV_fmv = 111
RISCV_feq = 112
RISCV_flt = 113
RISCV_fle = 114
RISCV_fclass = 115
RISCV_fld = 116
RISCV_fsd = 117
RISCV_flq = 118
RISCV_fsq = 119
RISCV_nop = 120
RISCV_li = 121
RISCV_mv = 122
RISCV_not = 123
RISCV_neg = 124
RISCV_negw = 125
RISCV_sext = 126
RISCV_seqz = 127
RISCV_snez = 128
RISCV_sltz = 129
RISCV_sgtz = 130
RISCV_fabs = 131
RISCV_fneg = 132
RISCV_beqz = 133
RISCV_bnez = 134
RISCV_blez = 135
RISCV_bgez = 136
RISCV_bltz = 137
RISCV_bgtz = 138
RISCV_j = 139
RISCV_jr = 140
RISCV_ret = 141
RISCV_rdinstret = 142
RISCV_rdcycle = 143
RISCV_rdtime = 144
RISCV_rdinstreth = 145
RISCV_rdcycleh = 146
RISCV_rdtimeh = 147
RISCV_csrr = 148
RISCV_csrw = 149
RISCV_csrs = 150
RISCV_csrc = 151
RISCV_csrwi = 152
RISCV_csrsi = 153
RISCV_csrci = 154
RISCV_frcsr = 155
RISCV_fscsr = 156
RISCV_frrm = 157
RISCV_fsrm = 158
RISCV_frflags = 159
RISCV_fsflags = 160
RISCV_la = 161
RISCV_call = 162
RISCV_tail = 163
RISCV_jump = 164
RISCV_last = 165
_A2DB697AD6D9D37E30232284EFAA35E7 = ctypes.c_uint32 # enum

# values for enumeration '_F38E503CBA2F570685D3BDA361855189'
_F38E503CBA2F570685D3BDA361855189__enumvalues = {
    0: 'RL78_null',
    1: 'RL78_subw',
    2: 'RL78_movw',
    3: 'RL78_call',
    4: 'RL78_clrw',
    5: 'RL78_addw',
    6: 'RL78_ret',
    7: 'RL78_sel',
    8: 'RL78_push',
    9: 'RL78_onew',
    10: 'RL78_incw',
    11: 'RL78_cmpw',
    12: 'RL78_bnz',
    13: 'RL78_clrb',
    14: 'RL78_and',
    15: 'RL78_or',
    16: 'RL78_br',
    17: 'RL78_pop',
    18: 'RL78_cmp',
    19: 'RL78_decw',
    20: 'RL78_inc',
    21: 'RL78_bz',
    22: 'RL78_sknz',
    23: 'RL78_sknh',
    24: 'RL78_skh',
    25: 'RL78_xor1',
    26: 'RL78_or1',
    27: 'RL78_and1',
    28: 'RL78_mov1',
    29: 'RL78_clr1',
    30: 'RL78_set1',
    31: 'RL78_not1',
    32: 'RL78_skc',
    33: 'RL78_sknc',
    34: 'RL78_skz',
    35: 'RL78_mov',
    36: 'RL78_btclr',
    37: 'RL78_bt',
    38: 'RL78_bf',
    39: 'RL78_shl',
    40: 'RL78_shr',
    41: 'RL78_sar',
    42: 'RL78_shlw',
    43: 'RL78_shrw',
    44: 'RL78_sarw',
    45: 'RL78_bc',
    46: 'RL78_bnc',
    47: 'RL78_bh',
    48: 'RL78_bnh',
    49: 'RL78_add',
    50: 'RL78_addc',
    51: 'RL78_sub',
    52: 'RL78_subc',
    53: 'RL78_xor',
    54: 'RL78_xch',
    55: 'RL78_dec',
    56: 'RL78_rolwc',
    57: 'RL78_xchw',
    58: 'RL78_cmps',
    59: 'RL78_movs',
    60: 'RL78_halt',
    61: 'RL78_cmp0',
    62: 'RL78_mulu',
    63: 'RL78_oneb',
    64: 'RL78_ror',
    65: 'RL78_rol',
    66: 'RL78_rorc',
    67: 'RL78_rolc',
    68: 'RL78_brk',
    69: 'RL78_retb',
    70: 'RL78_reti',
    71: 'RL78_stop',
    72: 'RL78_nop',
    73: 'RL78_callt',
    74: 'RL78_mulhu',
    75: 'RL78_mulh',
    76: 'RL78_divhu',
    77: 'RL78_divwu',
    78: 'RL78_machu',
    79: 'RL78_mach',
    80: 'RL78_last',
}
RL78_null = 0
RL78_subw = 1
RL78_movw = 2
RL78_call = 3
RL78_clrw = 4
RL78_addw = 5
RL78_ret = 6
RL78_sel = 7
RL78_push = 8
RL78_onew = 9
RL78_incw = 10
RL78_cmpw = 11
RL78_bnz = 12
RL78_clrb = 13
RL78_and = 14
RL78_or = 15
RL78_br = 16
RL78_pop = 17
RL78_cmp = 18
RL78_decw = 19
RL78_inc = 20
RL78_bz = 21
RL78_sknz = 22
RL78_sknh = 23
RL78_skh = 24
RL78_xor1 = 25
RL78_or1 = 26
RL78_and1 = 27
RL78_mov1 = 28
RL78_clr1 = 29
RL78_set1 = 30
RL78_not1 = 31
RL78_skc = 32
RL78_sknc = 33
RL78_skz = 34
RL78_mov = 35
RL78_btclr = 36
RL78_bt = 37
RL78_bf = 38
RL78_shl = 39
RL78_shr = 40
RL78_sar = 41
RL78_shlw = 42
RL78_shrw = 43
RL78_sarw = 44
RL78_bc = 45
RL78_bnc = 46
RL78_bh = 47
RL78_bnh = 48
RL78_add = 49
RL78_addc = 50
RL78_sub = 51
RL78_subc = 52
RL78_xor = 53
RL78_xch = 54
RL78_dec = 55
RL78_rolwc = 56
RL78_xchw = 57
RL78_cmps = 58
RL78_movs = 59
RL78_halt = 60
RL78_cmp0 = 61
RL78_mulu = 62
RL78_oneb = 63
RL78_ror = 64
RL78_rol = 65
RL78_rorc = 66
RL78_rolc = 67
RL78_brk = 68
RL78_retb = 69
RL78_reti = 70
RL78_stop = 71
RL78_nop = 72
RL78_callt = 73
RL78_mulhu = 74
RL78_mulh = 75
RL78_divhu = 76
RL78_divwu = 77
RL78_machu = 78
RL78_mach = 79
RL78_last = 80
_F38E503CBA2F570685D3BDA361855189 = ctypes.c_uint32 # enum

# values for enumeration '_843ED0767DD041B1C1206079A348FC2D'
_843ED0767DD041B1C1206079A348FC2D__enumvalues = {
    0: 'RX_null',
    1: 'RX_abs',
    2: 'RX_adc',
    3: 'RX_add',
    4: 'RX_and',
    5: 'RX_bra',
    6: 'RX_brk',
    7: 'RX_bclr',
    8: 'RX_bfmov',
    9: 'RX_bfmovz',
    10: 'RX_beq',
    11: 'RX_bne',
    12: 'RX_bgeu',
    13: 'RX_bltu',
    14: 'RX_bgtu',
    15: 'RX_bleu',
    16: 'RX_bpz',
    17: 'RX_bn',
    18: 'RX_bge',
    19: 'RX_blt',
    20: 'RX_bgt',
    21: 'RX_ble',
    22: 'RX_bo',
    23: 'RX_bno',
    24: 'RX_bmeq',
    25: 'RX_bmne',
    26: 'RX_bmgeu',
    27: 'RX_bmltu',
    28: 'RX_bmgtu',
    29: 'RX_bmleu',
    30: 'RX_bmpz',
    31: 'RX_bmn',
    32: 'RX_bmge',
    33: 'RX_bmlt',
    34: 'RX_bmgt',
    35: 'RX_bmle',
    36: 'RX_bmo',
    37: 'RX_bmno',
    38: 'RX_bnot',
    39: 'RX_bset',
    40: 'RX_bsr',
    41: 'RX_btst',
    42: 'RX_clrpsw',
    43: 'RX_cmp',
    44: 'RX_div',
    45: 'RX_divu',
    46: 'RX_emaca',
    47: 'RX_emsba',
    48: 'RX_emula',
    49: 'RX_emul',
    50: 'RX_emulu',
    51: 'RX_fadd',
    52: 'RX_fcmp',
    53: 'RX_fdiv',
    54: 'RX_fmul',
    55: 'RX_fsqrt',
    56: 'RX_fsub',
    57: 'RX_ftoi',
    58: 'RX_ftou',
    59: 'RX_int',
    60: 'RX_itof',
    61: 'RX_jmp',
    62: 'RX_jsr',
    63: 'RX_machi',
    64: 'RX_maclo',
    65: 'RX_maclh',
    66: 'RX_max',
    67: 'RX_min',
    68: 'RX_mov',
    69: 'RX_movco',
    70: 'RX_movli',
    71: 'RX_movu',
    72: 'RX_msbhi',
    73: 'RX_msblo',
    74: 'RX_msblh',
    75: 'RX_mul',
    76: 'RX_mulhi',
    77: 'RX_mullo',
    78: 'RX_mullh',
    79: 'RX_mvfachi',
    80: 'RX_mvfaclo',
    81: 'RX_mvfacmi',
    82: 'RX_mvfacgu',
    83: 'RX_mvfc',
    84: 'RX_mvtacgu',
    85: 'RX_mvtachi',
    86: 'RX_mvtaclo',
    87: 'RX_mvtc',
    88: 'RX_mvtipl',
    89: 'RX_neg',
    90: 'RX_nop',
    91: 'RX_not',
    92: 'RX_or',
    93: 'RX_pop',
    94: 'RX_popc',
    95: 'RX_popm',
    96: 'RX_push',
    97: 'RX_pushc',
    98: 'RX_pushm',
    99: 'RX_racl',
    100: 'RX_rdacl',
    101: 'RX_racw',
    102: 'RX_rdacw',
    103: 'RX_revl',
    104: 'RX_revw',
    105: 'RX_rmpa',
    106: 'RX_rolc',
    107: 'RX_rorc',
    108: 'RX_rotl',
    109: 'RX_rotr',
    110: 'RX_round',
    111: 'RX_rstr',
    112: 'RX_rte',
    113: 'RX_rtfi',
    114: 'RX_rts',
    115: 'RX_rtsd',
    116: 'RX_sat',
    117: 'RX_satr',
    118: 'RX_save',
    119: 'RX_sbb',
    120: 'RX_sceq',
    121: 'RX_scne',
    122: 'RX_scgeu',
    123: 'RX_scltu',
    124: 'RX_scgtu',
    125: 'RX_scleu',
    126: 'RX_scpz',
    127: 'RX_scn',
    128: 'RX_scge',
    129: 'RX_sclt',
    130: 'RX_scgt',
    131: 'RX_scle',
    132: 'RX_sco',
    133: 'RX_scno',
    134: 'RX_scmpu',
    135: 'RX_setpsw',
    136: 'RX_shar',
    137: 'RX_shll',
    138: 'RX_shlr',
    139: 'RX_smovb',
    140: 'RX_smovf',
    141: 'RX_smovu',
    142: 'RX_sstr',
    143: 'RX_stnz',
    144: 'RX_stz',
    145: 'RX_sub',
    146: 'RX_suntil',
    147: 'RX_swhile',
    148: 'RX_tst',
    149: 'RX_utof',
    150: 'RX_wait',
    151: 'RX_xchg',
    152: 'RX_xor',
    153: 'RX_dabs',
    154: 'RX_dadd',
    155: 'RX_dcmpun',
    156: 'RX_dcmpeq',
    157: 'RX_dcmplt',
    158: 'RX_dcmple',
    159: 'RX_ddiv',
    160: 'RX_dmov',
    161: 'RX_dmul',
    162: 'RX_dneg',
    163: 'RX_dpopm',
    164: 'RX_dpushm',
    165: 'RX_dround',
    166: 'RX_dsqrt',
    167: 'RX_dsub',
    168: 'RX_dtof',
    169: 'RX_dtoi',
    170: 'RX_dtou',
    171: 'RX_ftod',
    172: 'RX_itod',
    173: 'RX_mvfdc',
    174: 'RX_mvfdr',
    175: 'RX_mvtdc',
    176: 'RX_utod',
    177: 'RX_last',
}
RX_null = 0
RX_abs = 1
RX_adc = 2
RX_add = 3
RX_and = 4
RX_bra = 5
RX_brk = 6
RX_bclr = 7
RX_bfmov = 8
RX_bfmovz = 9
RX_beq = 10
RX_bne = 11
RX_bgeu = 12
RX_bltu = 13
RX_bgtu = 14
RX_bleu = 15
RX_bpz = 16
RX_bn = 17
RX_bge = 18
RX_blt = 19
RX_bgt = 20
RX_ble = 21
RX_bo = 22
RX_bno = 23
RX_bmeq = 24
RX_bmne = 25
RX_bmgeu = 26
RX_bmltu = 27
RX_bmgtu = 28
RX_bmleu = 29
RX_bmpz = 30
RX_bmn = 31
RX_bmge = 32
RX_bmlt = 33
RX_bmgt = 34
RX_bmle = 35
RX_bmo = 36
RX_bmno = 37
RX_bnot = 38
RX_bset = 39
RX_bsr = 40
RX_btst = 41
RX_clrpsw = 42
RX_cmp = 43
RX_div = 44
RX_divu = 45
RX_emaca = 46
RX_emsba = 47
RX_emula = 48
RX_emul = 49
RX_emulu = 50
RX_fadd = 51
RX_fcmp = 52
RX_fdiv = 53
RX_fmul = 54
RX_fsqrt = 55
RX_fsub = 56
RX_ftoi = 57
RX_ftou = 58
RX_int = 59
RX_itof = 60
RX_jmp = 61
RX_jsr = 62
RX_machi = 63
RX_maclo = 64
RX_maclh = 65
RX_max = 66
RX_min = 67
RX_mov = 68
RX_movco = 69
RX_movli = 70
RX_movu = 71
RX_msbhi = 72
RX_msblo = 73
RX_msblh = 74
RX_mul = 75
RX_mulhi = 76
RX_mullo = 77
RX_mullh = 78
RX_mvfachi = 79
RX_mvfaclo = 80
RX_mvfacmi = 81
RX_mvfacgu = 82
RX_mvfc = 83
RX_mvtacgu = 84
RX_mvtachi = 85
RX_mvtaclo = 86
RX_mvtc = 87
RX_mvtipl = 88
RX_neg = 89
RX_nop = 90
RX_not = 91
RX_or = 92
RX_pop = 93
RX_popc = 94
RX_popm = 95
RX_push = 96
RX_pushc = 97
RX_pushm = 98
RX_racl = 99
RX_rdacl = 100
RX_racw = 101
RX_rdacw = 102
RX_revl = 103
RX_revw = 104
RX_rmpa = 105
RX_rolc = 106
RX_rorc = 107
RX_rotl = 108
RX_rotr = 109
RX_round = 110
RX_rstr = 111
RX_rte = 112
RX_rtfi = 113
RX_rts = 114
RX_rtsd = 115
RX_sat = 116
RX_satr = 117
RX_save = 118
RX_sbb = 119
RX_sceq = 120
RX_scne = 121
RX_scgeu = 122
RX_scltu = 123
RX_scgtu = 124
RX_scleu = 125
RX_scpz = 126
RX_scn = 127
RX_scge = 128
RX_sclt = 129
RX_scgt = 130
RX_scle = 131
RX_sco = 132
RX_scno = 133
RX_scmpu = 134
RX_setpsw = 135
RX_shar = 136
RX_shll = 137
RX_shlr = 138
RX_smovb = 139
RX_smovf = 140
RX_smovu = 141
RX_sstr = 142
RX_stnz = 143
RX_stz = 144
RX_sub = 145
RX_suntil = 146
RX_swhile = 147
RX_tst = 148
RX_utof = 149
RX_wait = 150
RX_xchg = 151
RX_xor = 152
RX_dabs = 153
RX_dadd = 154
RX_dcmpun = 155
RX_dcmpeq = 156
RX_dcmplt = 157
RX_dcmple = 158
RX_ddiv = 159
RX_dmov = 160
RX_dmul = 161
RX_dneg = 162
RX_dpopm = 163
RX_dpushm = 164
RX_dround = 165
RX_dsqrt = 166
RX_dsub = 167
RX_dtof = 168
RX_dtoi = 169
RX_dtou = 170
RX_ftod = 171
RX_itod = 172
RX_mvfdc = 173
RX_mvfdr = 174
RX_mvtdc = 175
RX_utod = 176
RX_last = 177
_843ED0767DD041B1C1206079A348FC2D = ctypes.c_uint32 # enum

# values for enumeration '_E48B04531105C4BF04A8F99B593AFF02'
_E48B04531105C4BF04A8F99B593AFF02__enumvalues = {
    0: 'XTENSA_null',
    1: 'XTENSA_abs',
    2: 'XTENSA_add',
    3: 'XTENSA_addi',
    4: 'XTENSA_addmi',
    5: 'XTENSA_addx2',
    6: 'XTENSA_addx4',
    7: 'XTENSA_addx8',
    8: 'XTENSA_and',
    9: 'XTENSA_ball',
    10: 'XTENSA_bany',
    11: 'XTENSA_bbc',
    12: 'XTENSA_bbs',
    13: 'XTENSA_bbci',
    14: 'XTENSA_bbsi',
    15: 'XTENSA_beq',
    16: 'XTENSA_beqi',
    17: 'XTENSA_beqz',
    18: 'XTENSA_bge',
    19: 'XTENSA_bgei',
    20: 'XTENSA_bgeu',
    21: 'XTENSA_bgeui',
    22: 'XTENSA_bgez',
    23: 'XTENSA_blt',
    24: 'XTENSA_blti',
    25: 'XTENSA_bltu',
    26: 'XTENSA_bltui',
    27: 'XTENSA_bltz',
    28: 'XTENSA_bnall',
    29: 'XTENSA_bnone',
    30: 'XTENSA_bne',
    31: 'XTENSA_bnei',
    32: 'XTENSA_bnez',
    33: 'XTENSA_break',
    34: 'XTENSA_call0',
    35: 'XTENSA_call4',
    36: 'XTENSA_call8',
    37: 'XTENSA_call12',
    38: 'XTENSA_callx0',
    39: 'XTENSA_callx4',
    40: 'XTENSA_callx8',
    41: 'XTENSA_callx12',
    42: 'XTENSA_dsync',
    43: 'XTENSA_entry',
    44: 'XTENSA_esync',
    45: 'XTENSA_excw',
    46: 'XTENSA_extui',
    47: 'XTENSA_extw',
    48: 'XTENSA_isync',
    49: 'XTENSA_j',
    50: 'XTENSA_jx',
    51: 'XTENSA_loop',
    52: 'XTENSA_loopgtz',
    53: 'XTENSA_loopnez',
    54: 'XTENSA_lsi',
    55: 'XTENSA_lsx',
    56: 'XTENSA_l8ui',
    57: 'XTENSA_l16si',
    58: 'XTENSA_l16ui',
    59: 'XTENSA_l32i',
    60: 'XTENSA_l32r',
    61: 'XTENSA_max',
    62: 'XTENSA_maxu',
    63: 'XTENSA_memw',
    64: 'XTENSA_min',
    65: 'XTENSA_minu',
    66: 'XTENSA_mov',
    67: 'XTENSA_moveqz',
    68: 'XTENSA_movgez',
    69: 'XTENSA_movi',
    70: 'XTENSA_movltz',
    71: 'XTENSA_movnez',
    72: 'XTENSA_mul16s',
    73: 'XTENSA_mul16u',
    74: 'XTENSA_mull',
    75: 'XTENSA_neg',
    76: 'XTENSA_nsa',
    77: 'XTENSA_nsau',
    78: 'XTENSA_nop',
    79: 'XTENSA_or',
    80: 'XTENSA_ret',
    81: 'XTENSA_retw',
    82: 'XTENSA_rfe',
    83: 'XTENSA_rfi',
    84: 'XTENSA_rsil',
    85: 'XTENSA_rsr',
    86: 'XTENSA_rsync',
    87: 'XTENSA_s8i',
    88: 'XTENSA_s16i',
    89: 'XTENSA_s32i',
    90: 'XTENSA_s32ri',
    91: 'XTENSA_sext',
    92: 'XTENSA_sll',
    93: 'XTENSA_slli',
    94: 'XTENSA_sra',
    95: 'XTENSA_srai',
    96: 'XTENSA_src',
    97: 'XTENSA_srl',
    98: 'XTENSA_srli',
    99: 'XTENSA_ssa8b',
    100: 'XTENSA_ssa8l',
    101: 'XTENSA_ssai',
    102: 'XTENSA_ssl',
    103: 'XTENSA_ssr',
    104: 'XTENSA_sub',
    105: 'XTENSA_subx2',
    106: 'XTENSA_subx4',
    107: 'XTENSA_subx8',
    108: 'XTENSA_waiti',
    109: 'XTENSA_wdtlb',
    110: 'XTENSA_witlb',
    111: 'XTENSA_wsr',
    112: 'XTENSA_xor',
    113: 'XTENSA_xsr',
    114: 'XTENSA_last',
}
XTENSA_null = 0
XTENSA_abs = 1
XTENSA_add = 2
XTENSA_addi = 3
XTENSA_addmi = 4
XTENSA_addx2 = 5
XTENSA_addx4 = 6
XTENSA_addx8 = 7
XTENSA_and = 8
XTENSA_ball = 9
XTENSA_bany = 10
XTENSA_bbc = 11
XTENSA_bbs = 12
XTENSA_bbci = 13
XTENSA_bbsi = 14
XTENSA_beq = 15
XTENSA_beqi = 16
XTENSA_beqz = 17
XTENSA_bge = 18
XTENSA_bgei = 19
XTENSA_bgeu = 20
XTENSA_bgeui = 21
XTENSA_bgez = 22
XTENSA_blt = 23
XTENSA_blti = 24
XTENSA_bltu = 25
XTENSA_bltui = 26
XTENSA_bltz = 27
XTENSA_bnall = 28
XTENSA_bnone = 29
XTENSA_bne = 30
XTENSA_bnei = 31
XTENSA_bnez = 32
XTENSA_break = 33
XTENSA_call0 = 34
XTENSA_call4 = 35
XTENSA_call8 = 36
XTENSA_call12 = 37
XTENSA_callx0 = 38
XTENSA_callx4 = 39
XTENSA_callx8 = 40
XTENSA_callx12 = 41
XTENSA_dsync = 42
XTENSA_entry = 43
XTENSA_esync = 44
XTENSA_excw = 45
XTENSA_extui = 46
XTENSA_extw = 47
XTENSA_isync = 48
XTENSA_j = 49
XTENSA_jx = 50
XTENSA_loop = 51
XTENSA_loopgtz = 52
XTENSA_loopnez = 53
XTENSA_lsi = 54
XTENSA_lsx = 55
XTENSA_l8ui = 56
XTENSA_l16si = 57
XTENSA_l16ui = 58
XTENSA_l32i = 59
XTENSA_l32r = 60
XTENSA_max = 61
XTENSA_maxu = 62
XTENSA_memw = 63
XTENSA_min = 64
XTENSA_minu = 65
XTENSA_mov = 66
XTENSA_moveqz = 67
XTENSA_movgez = 68
XTENSA_movi = 69
XTENSA_movltz = 70
XTENSA_movnez = 71
XTENSA_mul16s = 72
XTENSA_mul16u = 73
XTENSA_mull = 74
XTENSA_neg = 75
XTENSA_nsa = 76
XTENSA_nsau = 77
XTENSA_nop = 78
XTENSA_or = 79
XTENSA_ret = 80
XTENSA_retw = 81
XTENSA_rfe = 82
XTENSA_rfi = 83
XTENSA_rsil = 84
XTENSA_rsr = 85
XTENSA_rsync = 86
XTENSA_s8i = 87
XTENSA_s16i = 88
XTENSA_s32i = 89
XTENSA_s32ri = 90
XTENSA_sext = 91
XTENSA_sll = 92
XTENSA_slli = 93
XTENSA_sra = 94
XTENSA_srai = 95
XTENSA_src = 96
XTENSA_srl = 97
XTENSA_srli = 98
XTENSA_ssa8b = 99
XTENSA_ssa8l = 100
XTENSA_ssai = 101
XTENSA_ssl = 102
XTENSA_ssr = 103
XTENSA_sub = 104
XTENSA_subx2 = 105
XTENSA_subx4 = 106
XTENSA_subx8 = 107
XTENSA_waiti = 108
XTENSA_wdtlb = 109
XTENSA_witlb = 110
XTENSA_wsr = 111
XTENSA_xor = 112
XTENSA_xsr = 113
XTENSA_last = 114
_E48B04531105C4BF04A8F99B593AFF02 = ctypes.c_uint32 # enum
regnum_t = ctypes.c_int16

# values for enumeration 'RegNo'
RegNo__enumvalues = {
    4294967295: 'R_none',
    0: 'R_ax',
    1: 'R_cx',
    2: 'R_dx',
    3: 'R_bx',
    4: 'R_sp',
    5: 'R_bp',
    6: 'R_si',
    7: 'R_di',
    8: 'R_r8',
    9: 'R_r9',
    10: 'R_r10',
    11: 'R_r11',
    12: 'R_r12',
    13: 'R_r13',
    14: 'R_r14',
    15: 'R_r15',
    16: 'R_al',
    17: 'R_cl',
    18: 'R_dl',
    19: 'R_bl',
    20: 'R_ah',
    21: 'R_ch',
    22: 'R_dh',
    23: 'R_bh',
    24: 'R_spl',
    25: 'R_bpl',
    26: 'R_sil',
    27: 'R_dil',
    28: 'R_ip',
    29: 'R_es',
    30: 'R_cs',
    31: 'R_ss',
    32: 'R_ds',
    33: 'R_fs',
    34: 'R_gs',
    35: 'R_cf',
    36: 'R_zf',
    37: 'R_sf',
    38: 'R_of',
    39: 'R_pf',
    40: 'R_af',
    41: 'R_tf',
    42: 'R_if',
    43: 'R_df',
    44: 'R_efl',
    45: 'R_st0',
    46: 'R_st1',
    47: 'R_st2',
    48: 'R_st3',
    49: 'R_st4',
    50: 'R_st5',
    51: 'R_st6',
    52: 'R_st7',
    53: 'R_fpctrl',
    54: 'R_fpstat',
    55: 'R_fptags',
    56: 'R_mm0',
    57: 'R_mm1',
    58: 'R_mm2',
    59: 'R_mm3',
    60: 'R_mm4',
    61: 'R_mm5',
    62: 'R_mm6',
    63: 'R_mm7',
    64: 'R_xmm0',
    65: 'R_xmm1',
    66: 'R_xmm2',
    67: 'R_xmm3',
    68: 'R_xmm4',
    69: 'R_xmm5',
    70: 'R_xmm6',
    71: 'R_xmm7',
    72: 'R_xmm8',
    73: 'R_xmm9',
    74: 'R_xmm10',
    75: 'R_xmm11',
    76: 'R_xmm12',
    77: 'R_xmm13',
    78: 'R_xmm14',
    79: 'R_xmm15',
    80: 'R_mxcsr',
    81: 'R_ymm0',
    82: 'R_ymm1',
    83: 'R_ymm2',
    84: 'R_ymm3',
    85: 'R_ymm4',
    86: 'R_ymm5',
    87: 'R_ymm6',
    88: 'R_ymm7',
    89: 'R_ymm8',
    90: 'R_ymm9',
    91: 'R_ymm10',
    92: 'R_ymm11',
    93: 'R_ymm12',
    94: 'R_ymm13',
    95: 'R_ymm14',
    96: 'R_ymm15',
    97: 'R_bnd0',
    98: 'R_bnd1',
    99: 'R_bnd2',
    100: 'R_bnd3',
    101: 'R_xmm16',
    102: 'R_xmm17',
    103: 'R_xmm18',
    104: 'R_xmm19',
    105: 'R_xmm20',
    106: 'R_xmm21',
    107: 'R_xmm22',
    108: 'R_xmm23',
    109: 'R_xmm24',
    110: 'R_xmm25',
    111: 'R_xmm26',
    112: 'R_xmm27',
    113: 'R_xmm28',
    114: 'R_xmm29',
    115: 'R_xmm30',
    116: 'R_xmm31',
    117: 'R_ymm16',
    118: 'R_ymm17',
    119: 'R_ymm18',
    120: 'R_ymm19',
    121: 'R_ymm20',
    122: 'R_ymm21',
    123: 'R_ymm22',
    124: 'R_ymm23',
    125: 'R_ymm24',
    126: 'R_ymm25',
    127: 'R_ymm26',
    128: 'R_ymm27',
    129: 'R_ymm28',
    130: 'R_ymm29',
    131: 'R_ymm30',
    132: 'R_ymm31',
    133: 'R_zmm0',
    134: 'R_zmm1',
    135: 'R_zmm2',
    136: 'R_zmm3',
    137: 'R_zmm4',
    138: 'R_zmm5',
    139: 'R_zmm6',
    140: 'R_zmm7',
    141: 'R_zmm8',
    142: 'R_zmm9',
    143: 'R_zmm10',
    144: 'R_zmm11',
    145: 'R_zmm12',
    146: 'R_zmm13',
    147: 'R_zmm14',
    148: 'R_zmm15',
    149: 'R_zmm16',
    150: 'R_zmm17',
    151: 'R_zmm18',
    152: 'R_zmm19',
    153: 'R_zmm20',
    154: 'R_zmm21',
    155: 'R_zmm22',
    156: 'R_zmm23',
    157: 'R_zmm24',
    158: 'R_zmm25',
    159: 'R_zmm26',
    160: 'R_zmm27',
    161: 'R_zmm28',
    162: 'R_zmm29',
    163: 'R_zmm30',
    164: 'R_zmm31',
    165: 'R_k0',
    166: 'R_k1',
    167: 'R_k2',
    168: 'R_k3',
    169: 'R_k4',
    170: 'R_k5',
    171: 'R_k6',
    172: 'R_k7',
    173: 'R_last',
}
R_none = 4294967295
R_ax = 0
R_cx = 1
R_dx = 2
R_bx = 3
R_sp = 4
R_bp = 5
R_si = 6
R_di = 7
R_r8 = 8
R_r9 = 9
R_r10 = 10
R_r11 = 11
R_r12 = 12
R_r13 = 13
R_r14 = 14
R_r15 = 15
R_al = 16
R_cl = 17
R_dl = 18
R_bl = 19
R_ah = 20
R_ch = 21
R_dh = 22
R_bh = 23
R_spl = 24
R_bpl = 25
R_sil = 26
R_dil = 27
R_ip = 28
R_es = 29
R_cs = 30
R_ss = 31
R_ds = 32
R_fs = 33
R_gs = 34
R_cf = 35
R_zf = 36
R_sf = 37
R_of = 38
R_pf = 39
R_af = 40
R_tf = 41
R_if = 42
R_df = 43
R_efl = 44
R_st0 = 45
R_st1 = 46
R_st2 = 47
R_st3 = 48
R_st4 = 49
R_st5 = 50
R_st6 = 51
R_st7 = 52
R_fpctrl = 53
R_fpstat = 54
R_fptags = 55
R_mm0 = 56
R_mm1 = 57
R_mm2 = 58
R_mm3 = 59
R_mm4 = 60
R_mm5 = 61
R_mm6 = 62
R_mm7 = 63
R_xmm0 = 64
R_xmm1 = 65
R_xmm2 = 66
R_xmm3 = 67
R_xmm4 = 68
R_xmm5 = 69
R_xmm6 = 70
R_xmm7 = 71
R_xmm8 = 72
R_xmm9 = 73
R_xmm10 = 74
R_xmm11 = 75
R_xmm12 = 76
R_xmm13 = 77
R_xmm14 = 78
R_xmm15 = 79
R_mxcsr = 80
R_ymm0 = 81
R_ymm1 = 82
R_ymm2 = 83
R_ymm3 = 84
R_ymm4 = 85
R_ymm5 = 86
R_ymm6 = 87
R_ymm7 = 88
R_ymm8 = 89
R_ymm9 = 90
R_ymm10 = 91
R_ymm11 = 92
R_ymm12 = 93
R_ymm13 = 94
R_ymm14 = 95
R_ymm15 = 96
R_bnd0 = 97
R_bnd1 = 98
R_bnd2 = 99
R_bnd3 = 100
R_xmm16 = 101
R_xmm17 = 102
R_xmm18 = 103
R_xmm19 = 104
R_xmm20 = 105
R_xmm21 = 106
R_xmm22 = 107
R_xmm23 = 108
R_xmm24 = 109
R_xmm25 = 110
R_xmm26 = 111
R_xmm27 = 112
R_xmm28 = 113
R_xmm29 = 114
R_xmm30 = 115
R_xmm31 = 116
R_ymm16 = 117
R_ymm17 = 118
R_ymm18 = 119
R_ymm19 = 120
R_ymm20 = 121
R_ymm21 = 122
R_ymm22 = 123
R_ymm23 = 124
R_ymm24 = 125
R_ymm25 = 126
R_ymm26 = 127
R_ymm27 = 128
R_ymm28 = 129
R_ymm29 = 130
R_ymm30 = 131
R_ymm31 = 132
R_zmm0 = 133
R_zmm1 = 134
R_zmm2 = 135
R_zmm3 = 136
R_zmm4 = 137
R_zmm5 = 138
R_zmm6 = 139
R_zmm7 = 140
R_zmm8 = 141
R_zmm9 = 142
R_zmm10 = 143
R_zmm11 = 144
R_zmm12 = 145
R_zmm13 = 146
R_zmm14 = 147
R_zmm15 = 148
R_zmm16 = 149
R_zmm17 = 150
R_zmm18 = 151
R_zmm19 = 152
R_zmm20 = 153
R_zmm21 = 154
R_zmm22 = 155
R_zmm23 = 156
R_zmm24 = 157
R_zmm25 = 158
R_zmm26 = 159
R_zmm27 = 160
R_zmm28 = 161
R_zmm29 = 162
R_zmm30 = 163
R_zmm31 = 164
R_k0 = 165
R_k1 = 166
R_k2 = 167
R_k3 = 168
R_k4 = 169
R_k5 = 170
R_k6 = 171
R_k7 = 172
R_last = 173
RegNo = ctypes.c_uint32 # enum
class struct_fbase_reg_t(Structure):
    pass

struct_fbase_reg_t._pack_ = 1 # source:False
struct_fbase_reg_t._fields_ = [
    ('value', ctypes.c_uint64),
    ('minea', ctypes.c_uint64),
    ('reg', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

class struct_pushreg_t(Structure):
    pass

struct_pushreg_t._pack_ = 1 # source:False
struct_pushreg_t._fields_ = [
    ('ea', ctypes.c_uint64),
    ('off', ctypes.c_int64),
    ('width', ctypes.c_int64),
    ('reg', ctypes.c_int16),
    ('flags', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_qvector_pushreg_t_(Structure):
    pass

struct_qvector_pushreg_t_._pack_ = 1 # source:False
struct_qvector_pushreg_t_._fields_ = [
    ('array', ctypes.POINTER(struct_pushreg_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

class struct_qvector_qvector_unsigned_long_long__(Structure):
    pass

struct_qvector_qvector_unsigned_long_long__._pack_ = 1 # source:False
struct_qvector_qvector_unsigned_long_long__._fields_ = [
    ('array', ctypes.POINTER(struct_qvector_unsigned_long_long_)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

pushinfo_t__pop_info_t = struct_qvector_qvector_unsigned_long_long__
class struct_pushinfo_t(Structure):
    pass

struct_pushinfo_t._pack_ = 1 # source:False
struct_pushinfo_t._fields_ = [
    ('flags', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('psi', struct_qvector_pushreg_t_),
    ('bpidx', ctypes.c_int64),
    ('spoiled', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('prolog_insns', eavec_t),
    ('pops', pushinfo_t__pop_info_t),
    ('eh_type', ctypes.c_int32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('eh_info', ctypes.c_uint64),
    ('xmm_stkoff', ctypes.c_int64),
    ('reg_stkoff', ctypes.c_int64),
    ('xmm_nsaved', ctypes.c_int32),
    ('reg_nsaved', ctypes.c_int32),
    ('cb', ctypes.c_int32),
    ('PADDING_3', ctypes.c_ubyte * 4),
]

qvector_pushreg_t___iterator = ctypes.POINTER(struct_pushreg_t)
qvector_pushreg_t___const_iterator = ctypes.POINTER(struct_pushreg_t)
qvector_qvector_unsigned_long_long____iterator = ctypes.POINTER(struct_qvector_unsigned_long_long_)
qvector_qvector_unsigned_long_long____const_iterator = ctypes.POINTER(struct_qvector_unsigned_long_long_)

# values for enumeration 'spec_func_type_t'
spec_func_type_t__enumvalues = {
    0: 'SF_NONE',
    1: 'SF_EH_PROLOG',
    2: 'SF_SEH_PROLOG',
    3: 'SF_SEH_EPILOG',
    4: 'SF_ALLOCA',
    5: 'SF_CHK',
    6: 'SF_SYSINIT',
    7: 'SF_EH_EPILOG',
    8: 'SF_LSTRCATN',
}
SF_NONE = 0
SF_EH_PROLOG = 1
SF_SEH_PROLOG = 2
SF_SEH_EPILOG = 3
SF_ALLOCA = 4
SF_CHK = 5
SF_SYSINIT = 6
SF_EH_EPILOG = 7
SF_LSTRCATN = 8
spec_func_type_t = ctypes.c_uint32 # enum
_5DC973CEB2655A80446E64E85C580C7E = ctypes.CFUNCTYPE(ctypes.POINTER(struct_regval_t), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_regval_t))
class struct_mmtype_t(Structure):
    pass

struct_mmtype_t._pack_ = 1 # source:False
struct_mmtype_t._fields_ = [
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('type', ctypes.POINTER(ctypes.c_ubyte)),
    ('fields', ctypes.POINTER(ctypes.c_ubyte)),
    ('tif', struct_tinfo_t),
    ('PADDING_0', ctypes.c_ubyte * 4),
]


# values for enumeration 'pc_module_t__event_codes_t'
pc_module_t__event_codes_t__enumvalues = {
    3000: 'ev_set_difbase',
    3001: 'ev_restore_pushinfo',
    3002: 'ev_save_pushinfo',
    3003: 'ev_prolog_analyzed',
    3004: 'ev_verify_epilog',
    3005: 'obsolete_ev_find_reg_value',
    3006: 'ev_dbgtools_path',
    3007: 'ev_is_get_pc_thunk',
    3008: 'ev_vxd_loaded',
    3009: 'ev_get_borland_template_node',
    3010: 'ev_clear_borland_template_node',
    3011: 'ev_borland_template',
    3012: 'ev_get_segval',
    3013: 'ev_get_idpflags',
    3014: 'ev_get_ret_target',
    3015: 'ev_set_ret_target',
    3016: 'ev_del_ret_target',
}
ev_set_difbase = 3000
ev_restore_pushinfo = 3001
ev_save_pushinfo = 3002
ev_prolog_analyzed = 3003
ev_verify_epilog = 3004
obsolete_ev_find_reg_value = 3005
ev_dbgtools_path = 3006
ev_is_get_pc_thunk = 3007
ev_vxd_loaded = 3008
ev_get_borland_template_node = 3009
ev_clear_borland_template_node = 3010
ev_borland_template = 3011
ev_get_segval = 3012
ev_get_idpflags = 3013
ev_get_ret_target = 3014
ev_set_ret_target = 3015
ev_del_ret_target = 3016
pc_module_t__event_codes_t = ctypes.c_uint32 # enum
class struct__EBEF71244791381780396B181B40BFD1(Structure):
    pass

struct__EBEF71244791381780396B181B40BFD1._pack_ = 1 # source:False
struct__EBEF71244791381780396B181B40BFD1._fields_ = [
    ('ptr', ctypes.CFUNCTYPE(ctypes.c_char)),
    ('adj', ctypes.c_uint64),
]

jump_pattern_t__check_insn_t = struct__EBEF71244791381780396B181B40BFD1
class struct_qvector_op_t_(Structure):
    pass

struct_qvector_op_t_._pack_ = 1 # source:False
struct_qvector_op_t_._fields_ = [
    ('array', ctypes.POINTER(struct_op_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

tracked_regs_t = struct_qvector_op_t_
class struct_jump_pattern_t(Structure):
    pass

struct_jump_pattern_t._pack_ = 1 # source:False
struct_jump_pattern_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_jump_pattern_t_vtbl)),
    ('modifying_r32_spoils_r64', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
    ('insn', struct_insn_t),
    ('si', ctypes.POINTER(struct_switch_info_t)),
    ('eas', ctypes.c_uint64 * 16),
    ('skip', ctypes.c_char * 16),
    ('non_spoiled_reg', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('check', struct__EBEF71244791381780396B181B40BFD1 * 16),
    ('stop_matching', ctypes.c_char),
    ('in_linear_flow', ctypes.c_char),
    ('PADDING_2', ctypes.c_ubyte * 6),
    ('block_end', ctypes.c_uint64),
    ('depends', ctypes.POINTER(ctypes.c_char * 4)),
    ('remote_code', eavec_t),
    ('extra_insn_eas', eavec_t),
    ('regs', tracked_regs_t),
]

qvector_op_t___iterator = ctypes.POINTER(struct_op_t)
qvector_op_t___const_iterator = ctypes.POINTER(struct_op_t)

# values for enumeration '_94D4D585A38CDA12BD4A7F760DAFD340'
_94D4D585A38CDA12BD4A7F760DAFD340__enumvalues = {
    0: 'JT_NONE',
    1: 'JT_SWITCH',
    2: 'JT_CALL',
}
JT_NONE = 0
JT_SWITCH = 1
JT_CALL = 2
_94D4D585A38CDA12BD4A7F760DAFD340 = ctypes.c_uint32 # enum
is_pattern_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_switch_info_t), ctypes.POINTER(struct_insn_t), ctypes.POINTER(struct_procmod_t))
table_checker_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_switch_info_t), ctypes.c_uint64, ctypes.c_int32, ctypes.POINTER(struct_procmod_t))
class struct_no_regs_t(Structure):
    pass

class struct_std__less_unsigned_long_long_(Structure):
    pass

class struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__(Structure):
    pass

class struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_(Structure):
    pass

class struct_std__pair_const_unsigned_long_long__unsigned_long_long_(Structure):
    pass

struct_std__pair_const_unsigned_long_long__unsigned_long_long_._pack_ = 1 # source:False
struct_std__pair_const_unsigned_long_long__unsigned_long_long_._fields_ = [
    ('first', ctypes.c_uint64),
    ('second', ctypes.c_uint64),
]

std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_._pack_ = 1 # source:False
struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_._fields_ = [
    ('_Left', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)),
    ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)),
    ('_Right', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)),
    ('_Color', ctypes.c_char),
    ('_Isnil', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 6),
    ('_Myval', std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___value_type),
]

std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____Node = struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_
std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____size_type = ctypes.c_uint64
std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____size_type = ctypes.c_uint64
class struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___(struct_std___Container_base0):
    pass

struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___._pack_ = 1 # source:False
struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___._fields_ = [
    ('_Myhead', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)),
    ('_Mysize', ctypes.c_uint64),
]

class struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true_(struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___),
     ]

class struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true___true_(struct_std__less_unsigned_long_long_):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true_),
     ]

class struct_std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false__(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Mypair', struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true___true_),
     ]

class struct_std__map_unsigned_long_long__unsigned_long_long_(struct_std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false__):
    pass

backward_flow_iterator_t_State__Ctrl___visited_t = struct_std__map_unsigned_long_long__unsigned_long_long_
class struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__(Structure):
    pass

class struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_(Structure):
    pass

class struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_(Structure):
    pass

class struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t(Structure):
    pass

struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t._pack_ = 1 # source:False
struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t._fields_ = [
    ('regs', struct_no_regs_t),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('insn_cnt', ctypes.c_uint32),
]

struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_._pack_ = 1 # source:False
struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_._fields_ = [
    ('first', ctypes.c_uint64),
    ('second', struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t),
]

std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_._pack_ = 1 # source:False
struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_._fields_ = [
    ('_Left', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)),
    ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)),
    ('_Right', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)),
    ('_Color', ctypes.c_char),
    ('_Isnil', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 6),
    ('_Myval', std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___value_type),
]

std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____Node = struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_
std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____size_type = ctypes.c_uint64
std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____size_type = ctypes.c_uint64
class struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___(struct_std___Container_base0):
    pass

struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___._pack_ = 1 # source:False
struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___._fields_ = [
    ('_Myhead', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)),
    ('_Mysize', ctypes.c_uint64),
]

class struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true_(struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___),
     ]

class struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true___true_(struct_std__less_unsigned_long_long_):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true_),
     ]

class struct_std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false__(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Mypair', struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true___true_),
     ]

class struct_std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_(struct_std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false__):
    pass

backward_flow_iterator_t_no_regs_t__simple_bfi_t___waiting_t = struct_std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
class struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t_(Structure):
    pass

class struct_simple_bfi_t(Structure):
    pass

struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t_._pack_ = 1 # source:False
struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t_._fields_ = [
    ('cur_ea', ctypes.c_uint64),
    ('regs', ctypes.POINTER(struct_no_regs_t)),
    ('ctrl', ctypes.POINTER(struct_simple_bfi_t)),
    ('only_near', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('max_insn_cnt', ctypes.c_uint32),
    ('pfn', ctypes.POINTER(struct_func_t)),
    ('seg', ctypes.POINTER(struct_segment_t)),
    ('start_ea', ctypes.c_uint64),
    ('cur_end', ctypes.c_uint64),
    ('insn_cnt', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('visited', backward_flow_iterator_t_State__Ctrl___visited_t),
    ('waiting', backward_flow_iterator_t_no_regs_t__simple_bfi_t___waiting_t),
]

std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___key_compare = struct_std__less_unsigned_long_long_
std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____key_compare = struct_std__less_unsigned_long_long_
class struct_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long__(Structure):
    pass

std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___allocator_type = struct_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long__
std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____allocator_type = struct_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long__
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
class struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____(struct_std___Iterator_base0):
    pass

struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____._pack_ = 1 # source:False
struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____._fields_ = [
    ('_Ptr', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)),
]

class struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____(struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____):
    pass

class struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____(struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____):
    pass

std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__ = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____
class struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___P_(Structure):
    pass

struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___P_._pack_ = 1 # source:False
struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___P_._fields_ = [
    ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)),
    ('_Child', std___Tree_child),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____const_pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____const_pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
class struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____(struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____):
    pass

std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____iterator = struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____
std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____const_iterator = struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____
std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Unchecked_iterator = struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____
std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____
class struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____),
     ]

std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ = ctypes.c_int64
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______difference_type = ctypes.c_int64
std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____reverse_iterator = struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____
class struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____),
     ]

std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ = ctypes.c_int64
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______difference_type = ctypes.c_int64
std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____const_reverse_iterator = struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____
std___Default_allocator_traits_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long_____size_type = ctypes.c_uint64
std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____size_type = ctypes.c_uint64
class struct_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_compare(Structure):
    pass

std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____value_compare = struct_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_compare
std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
class struct_std__initializer_list_std__pair_const_unsigned_long_long__unsigned_long_long__(Structure):
    pass

struct_std__initializer_list_std__pair_const_unsigned_long_long__unsigned_long_long__._pack_ = 1 # source:False
struct_std__initializer_list_std__pair_const_unsigned_long_long__unsigned_long_long__._fields_ = [
    ('_First', ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)),
    ('_Last', ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)),
]

std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____value_type = struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_
std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_____value_type = struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_
std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_____pointer = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___key_type = ctypes.c_uint64
std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____key_type = ctypes.c_uint64
class struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('first', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____),
    ('second', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____),
     ]

class struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('first', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____),
    ('second', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____),
     ]

std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Alnode = struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__
std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Scary_val = struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___
std__map_unsigned_long_long__unsigned_long_long___allocator_type = struct_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long__
std__map_unsigned_long_long__unsigned_long_long___key_compare = struct_std__less_unsigned_long_long_
std__map_unsigned_long_long__unsigned_long_long___mapped_type = ctypes.c_uint64
std__map_unsigned_long_long__unsigned_long_long___key_type = ctypes.c_uint64
std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___key_compare = struct_std__less_unsigned_long_long_
std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____key_compare = struct_std__less_unsigned_long_long_
class struct_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__(Structure):
    pass

std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___allocator_type = struct_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__
std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____allocator_type = struct_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
class struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____(struct_std___Iterator_base0):
    pass

struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____._pack_ = 1 # source:False
struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____._fields_ = [
    ('_Ptr', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)),
]

class struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____(struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____):
    pass

class struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____(struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____):
    pass

std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__ = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____
class struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___P_(Structure):
    pass

struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___P_._pack_ = 1 # source:False
struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___P_._fields_ = [
    ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)),
    ('_Child', std___Tree_child),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____const_pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____const_pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
class struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____(struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____):
    pass

std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____iterator = struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____
std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____const_iterator = struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____
std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Unchecked_iterator = struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____
std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____
class struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____),
     ]

std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ = ctypes.c_int64
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______difference_type = ctypes.c_int64
std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____reverse_iterator = struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____
class struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____),
     ]

std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ = ctypes.c_int64
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______difference_type = ctypes.c_int64
std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____const_reverse_iterator = struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____
std___Default_allocator_traits_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____size_type = ctypes.c_uint64
std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____size_type = ctypes.c_uint64
class struct_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_compare(Structure):
    pass

std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____value_compare = struct_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_compare
std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
class struct_std__initializer_list_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__(Structure):
    pass

struct_std__initializer_list_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__._pack_ = 1 # source:False
struct_std__initializer_list_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__._fields_ = [
    ('_First', ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)),
    ('_Last', ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)),
]

std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____value_type = struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_
std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_____value_type = struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_
std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_____pointer = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___key_type = ctypes.c_uint64
std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____key_type = ctypes.c_uint64
class struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('first', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____),
    ('second', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____),
     ]

class struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('first', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____),
    ('second', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____),
     ]

std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Alnode = struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__
std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Scary_val = struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___
std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___allocator_type = struct_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__
std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___key_compare = struct_std__less_unsigned_long_long_
std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___mapped_type = struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t
std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___key_type = ctypes.c_uint64
class struct_ida_movable_type_token_t_(Structure):
    pass

lx_resolver_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_lexer_t), ctypes.POINTER(None), ctypes.POINTER(struct_token_t), ctypes.POINTER(ctypes.c_int64))
class struct_cast_t(Structure):
    pass

struct_cast_t._pack_ = 1 # source:False
struct_cast_t._fields_ = [
    ('is_unsigned', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('size', ctypes.c_int32),
]

class union_lex_value_t___511FB7214E5937D85C36537DA5D3C419(Union):
    pass

union_lex_value_t___511FB7214E5937D85C36537DA5D3C419._pack_ = 1 # source:False
union_lex_value_t___511FB7214E5937D85C36537DA5D3C419._fields_ = [
    ('val', ctypes.c_int64),
    ('uval', ctypes.c_uint64),
]

class struct_lex_value_t(Structure):
    pass

class union_lex_value_t_0(Union):
    pass

union_lex_value_t_0._pack_ = 1 # source:False
union_lex_value_t_0._fields_ = [
    ('val', ctypes.c_int64),
    ('uval', ctypes.c_uint64),
]

struct_lex_value_t._pack_ = 1 # source:False
struct_lex_value_t._anonymous_ = ('_0',)
struct_lex_value_t._fields_ = [
    ('is_unsigned', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
    ('_0', union_lex_value_t_0),
]

lx_parse_cast_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_cast_t), ctypes.POINTER(struct_token_t))
_AF4ED28A64411848F4EED41572FA4CE1 = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), ctypes.POINTER(ctypes.c_char), ctypes.c_int32, ctypes.POINTER(ctypes.c_char))
_223DCB884574D5DE586AD2D6B7376847 = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), ctypes.POINTER(ctypes.c_char))
_2C0E99206E7908236DCABCB2B91A8D4F = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.c_int32, ctypes.c_char, ctypes.c_char)
class struct_qvector_token_t_(Structure):
    pass

struct_qvector_token_t_._pack_ = 1 # source:False
struct_qvector_token_t_._fields_ = [
    ('array', ctypes.POINTER(struct_token_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

class struct_qstack_token_t_(struct_qvector_token_t_):
    pass

qvector_token_t___iterator = ctypes.POINTER(struct_token_t)
qvector_token_t___const_iterator = ctypes.POINTER(struct_token_t)
tokenstack_t = struct_qstack_token_t_
class struct_loader_t(Structure):
    pass

struct_loader_t._pack_ = 1 # source:False
struct_loader_t._fields_ = [
    ('version', ctypes.c_uint32),
    ('flags', ctypes.c_uint32),
    ('accept_file', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(struct_linput_t), ctypes.POINTER(ctypes.c_char))),
    ('load_file', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_linput_t), ctypes.c_uint16, ctypes.POINTER(ctypes.c_char))),
    ('save_file', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__iobuf), ctypes.POINTER(ctypes.c_char))),
    ('move_segm', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(ctypes.c_char))),
    ('process_archive', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(struct_linput_t), ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(ctypes.c_uint16), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct__qstring_char_))),
]

class struct_ida_movable_type_load_info_t_(Structure):
    pass


# values for enumeration 'ofile_type_t'
ofile_type_t__enumvalues = {
    0: 'OFILE_MAP',
    1: 'OFILE_EXE',
    2: 'OFILE_IDC',
    3: 'OFILE_LST',
    4: 'OFILE_ASM',
    5: 'OFILE_DIF',
}
OFILE_MAP = 0
OFILE_EXE = 1
OFILE_IDC = 2
OFILE_LST = 3
OFILE_ASM = 4
OFILE_DIF = 5
ofile_type_t = ctypes.c_uint32 # enum
class struct_impinfo_t(Structure):
    pass

struct_impinfo_t._pack_ = 1 # source:False
struct_impinfo_t._fields_ = [
    ('dllname', ctypes.POINTER(ctypes.c_char)),
    ('func', ctypes.CFUNCTYPE(None, ctypes.c_uint64, ctypes.POINTER(ctypes.c_char), ctypes.c_uint64)),
    ('node', ctypes.c_uint64),
]

_C30EB94D24F7ADA96604ED228E11FEED = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_linput_t), ctypes.POINTER(struct_impinfo_t))
class struct_idadll_t(Structure):
    pass

struct_idadll_t._pack_ = 1 # source:False
struct_idadll_t._fields_ = [
    ('dllinfo', ctypes.POINTER(None) * 10),
    ('entry', ctypes.POINTER(None)),
]

class struct_idp_name_t(Structure):
    pass

struct_idp_name_t._pack_ = 1 # source:False
struct_idp_name_t._fields_ = [
    ('lname', qstring),
    ('sname', qstring),
    ('hidden', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

class struct_ida_movable_type_idp_name_t_(Structure):
    pass

class struct_qvector_idp_name_t_(Structure):
    pass

struct_qvector_idp_name_t_._pack_ = 1 # source:False
struct_qvector_idp_name_t_._fields_ = [
    ('array', ctypes.POINTER(struct_idp_name_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_idp_name_t___iterator = ctypes.POINTER(struct_idp_name_t)
qvector_idp_name_t___const_iterator = ctypes.POINTER(struct_idp_name_t)
idp_names_t = struct_qvector_idp_name_t_
class struct_idp_desc_t(Structure):
    pass

struct_idp_desc_t._pack_ = 1 # source:False
struct_idp_desc_t._fields_ = [
    ('path', qstring),
    ('mtime', ctypes.c_int64),
    ('family', qstring),
    ('names', idp_names_t),
    ('is_script', ctypes.c_char),
    ('checked', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

class struct_ida_movable_type_idp_desc_t_(Structure):
    pass

class struct_qvector_idp_desc_t_(Structure):
    pass

struct_qvector_idp_desc_t_._pack_ = 1 # source:False
struct_qvector_idp_desc_t_._fields_ = [
    ('array', ctypes.POINTER(struct_idp_desc_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_idp_desc_t___iterator = ctypes.POINTER(struct_idp_desc_t)
qvector_idp_desc_t___const_iterator = ctypes.POINTER(struct_idp_desc_t)
idp_descs_t = struct_qvector_idp_desc_t_
class struct_plugin_info_t(Structure):
    pass

struct_plugin_info_t._pack_ = 1 # source:False
struct_plugin_info_t._fields_ = [
    ('next', ctypes.POINTER(struct_plugin_info_t)),
    ('path', ctypes.POINTER(ctypes.c_char)),
    ('org_name', ctypes.POINTER(ctypes.c_char)),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('org_hotkey', ctypes.c_uint16),
    ('hotkey', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('arg', ctypes.c_uint64),
    ('entry', ctypes.POINTER(struct_plugin_t)),
    ('dllmem', struct_idadll_t),
    ('flags', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('comment', ctypes.POINTER(ctypes.c_char)),
]

class struct_dbg_info_t(Structure):
    pass

struct_dbg_info_t._pack_ = 1 # source:False
struct_dbg_info_t._fields_ = [
    ('pi', ctypes.POINTER(struct_plugin_info_t)),
    ('dbg', ctypes.POINTER(struct_debugger_t)),
]

class struct_ida_movable_type_dbg_info_t_(Structure):
    pass

qvector_snapshot_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_snapshot_t))
qvector_snapshot_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_snapshot_t))
class struct_ida_movable_type_snapshot_t_(Structure):
    pass


# values for enumeration 'path_type_t'
path_type_t__enumvalues = {
    0: 'PATH_TYPE_CMD',
    1: 'PATH_TYPE_IDB',
    2: 'PATH_TYPE_ID0',
}
PATH_TYPE_CMD = 0
PATH_TYPE_IDB = 1
PATH_TYPE_ID0 = 2
path_type_t = ctypes.c_uint32 # enum
class struct_MD5Context(Structure):
    pass

struct_MD5Context._pack_ = 1 # source:False
struct_MD5Context._fields_ = [
    ('buf', ctypes.c_uint32 * 4),
    ('bits', ctypes.c_uint32 * 2),
    ('in', ctypes.c_ubyte * 64),
]

class struct_ida_movable_type_segm_move_info_t_(Structure):
    pass

qvector_segm_move_info_t___iterator = ctypes.POINTER(struct_segm_move_info_t)
qvector_segm_move_info_t___const_iterator = ctypes.POINTER(struct_segm_move_info_t)
class struct_lochist_t(Structure):
    pass

struct_lochist_t._pack_ = 1 # source:False
struct_lochist_t._fields_ = [
    ('ud', ctypes.POINTER(None)),
    ('cur', struct_lochist_entry_t),
    ('node', struct_netnode),
    ('flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_expanded_area_t(Structure):
    pass

class struct_ida_movable_type_lochist_entry_t_(Structure):
    pass

class struct_qvector_lochist_entry_t_(Structure):
    pass

struct_qvector_lochist_entry_t_._pack_ = 1 # source:False
struct_qvector_lochist_entry_t_._fields_ = [
    ('array', ctypes.POINTER(struct_lochist_entry_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_lochist_entry_t___iterator = ctypes.POINTER(struct_lochist_entry_t)
qvector_lochist_entry_t___const_iterator = ctypes.POINTER(struct_lochist_entry_t)
lochist_entry_vec_t = struct_qvector_lochist_entry_t_
class struct_ida_movable_type_lochist_t_(Structure):
    pass

class struct_bookmarks_t(Structure):
    pass


# values for enumeration '_EXCEPTION_DISPOSITION'
_EXCEPTION_DISPOSITION__enumvalues = {
    0: 'ExceptionContinueExecution',
    1: 'ExceptionContinueSearch',
    2: 'ExceptionNestedException',
    3: 'ExceptionCollidedUnwind',
}
ExceptionContinueExecution = 0
ExceptionContinueSearch = 1
ExceptionNestedException = 2
ExceptionCollidedUnwind = 3
_EXCEPTION_DISPOSITION = ctypes.c_uint32 # enum
EXCEPTION_DISPOSITION = _EXCEPTION_DISPOSITION
EXCEPTION_DISPOSITION__enumvalues = _EXCEPTION_DISPOSITION__enumvalues
DWORD = ctypes.c_uint32
PVOID = ctypes.POINTER(None)
ULONG_PTR = ctypes.c_uint64
DWORD64 = ctypes.c_uint64
WORD = ctypes.c_uint16
BYTE = ctypes.c_ubyte
ULONGLONG = ctypes.c_uint64
LONGLONG = ctypes.c_int64
class struct__M128A(Structure):
    pass

struct__M128A._pack_ = 1 # source:False
struct__M128A._fields_ = [
    ('Low', ctypes.c_uint64),
    ('High', ctypes.c_int64),
]

M128A = struct__M128A
class struct__XSAVE_FORMAT(Structure):
    pass

struct__XSAVE_FORMAT._pack_ = 1 # source:False
struct__XSAVE_FORMAT._fields_ = [
    ('ControlWord', ctypes.c_uint16),
    ('StatusWord', ctypes.c_uint16),
    ('TagWord', ctypes.c_ubyte),
    ('Reserved1', ctypes.c_ubyte),
    ('ErrorOpcode', ctypes.c_uint16),
    ('ErrorOffset', ctypes.c_uint32),
    ('ErrorSelector', ctypes.c_uint16),
    ('Reserved2', ctypes.c_uint16),
    ('DataOffset', ctypes.c_uint32),
    ('DataSelector', ctypes.c_uint16),
    ('Reserved3', ctypes.c_uint16),
    ('MxCsr', ctypes.c_uint32),
    ('MxCsr_Mask', ctypes.c_uint32),
    ('FloatRegisters', struct__M128A * 8),
    ('XmmRegisters', struct__M128A * 16),
    ('Reserved4', ctypes.c_ubyte * 96),
]

XSAVE_FORMAT = struct__XSAVE_FORMAT
XMM_SAVE_AREA32 = struct__XSAVE_FORMAT
class struct__8B3A610AEB0C47756C1D570CE19BF51D(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Header', struct__M128A * 2),
    ('Legacy', struct__M128A * 8),
    ('Xmm0', M128A),
    ('Xmm1', M128A),
    ('Xmm2', M128A),
    ('Xmm3', M128A),
    ('Xmm4', M128A),
    ('Xmm5', M128A),
    ('Xmm6', M128A),
    ('Xmm7', M128A),
    ('Xmm8', M128A),
    ('Xmm9', M128A),
    ('Xmm10', M128A),
    ('Xmm11', M128A),
    ('Xmm12', M128A),
    ('Xmm13', M128A),
    ('Xmm14', M128A),
    ('Xmm15', M128A),
     ]

class union__CONTEXT___8025DFDFE77BC942FFD833580971BF6A(Union):
    pass

class struct__CONTEXT___8025DFDFE77BC942FFD833580971BF6A_0(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Header', struct__M128A * 2),
    ('Legacy', struct__M128A * 8),
    ('Xmm0', M128A),
    ('Xmm1', M128A),
    ('Xmm2', M128A),
    ('Xmm3', M128A),
    ('Xmm4', M128A),
    ('Xmm5', M128A),
    ('Xmm6', M128A),
    ('Xmm7', M128A),
    ('Xmm8', M128A),
    ('Xmm9', M128A),
    ('Xmm10', M128A),
    ('Xmm11', M128A),
    ('Xmm12', M128A),
    ('Xmm13', M128A),
    ('Xmm14', M128A),
    ('Xmm15', M128A),
     ]

union__CONTEXT___8025DFDFE77BC942FFD833580971BF6A._pack_ = 1 # source:False
union__CONTEXT___8025DFDFE77BC942FFD833580971BF6A._anonymous_ = ('_0',)
union__CONTEXT___8025DFDFE77BC942FFD833580971BF6A._fields_ = [
    ('FltSave', XMM_SAVE_AREA32),
    ('_0', struct__CONTEXT___8025DFDFE77BC942FFD833580971BF6A_0),
    ('PADDING_0', ctypes.c_ubyte * 96),
]

class struct__CONTEXT_0_0(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Header', struct__M128A * 2),
    ('Legacy', struct__M128A * 8),
    ('Xmm0', M128A),
    ('Xmm1', M128A),
    ('Xmm2', M128A),
    ('Xmm3', M128A),
    ('Xmm4', M128A),
    ('Xmm5', M128A),
    ('Xmm6', M128A),
    ('Xmm7', M128A),
    ('Xmm8', M128A),
    ('Xmm9', M128A),
    ('Xmm10', M128A),
    ('Xmm11', M128A),
    ('Xmm12', M128A),
    ('Xmm13', M128A),
    ('Xmm14', M128A),
    ('Xmm15', M128A),
     ]

class union__CONTEXT_0(Union):
    pass

union__CONTEXT_0._pack_ = 1 # source:False
union__CONTEXT_0._anonymous_ = ('_0',)
union__CONTEXT_0._fields_ = [
    ('FltSave', XMM_SAVE_AREA32),
    ('_0', struct__CONTEXT_0_0),
    ('PADDING_0', ctypes.c_ubyte * 96),
]

class struct__IMAGE_RUNTIME_FUNCTION_ENTRY(Structure):
    pass

PRUNTIME_FUNCTION = ctypes.POINTER(struct__IMAGE_RUNTIME_FUNCTION_ENTRY)
PEXCEPTION_ROUTINE = ctypes.CFUNCTYPE(_EXCEPTION_DISPOSITION, ctypes.POINTER(struct__EXCEPTION_RECORD), ctypes.POINTER(None), ctypes.POINTER(struct__CONTEXT), ctypes.POINTER(None))
class struct__UNWIND_HISTORY_TABLE(Structure):
    pass

PUNWIND_HISTORY_TABLE = ctypes.POINTER(struct__UNWIND_HISTORY_TABLE)
class struct__DISPATCHER_CONTEXT(Structure):
    pass

struct__DISPATCHER_CONTEXT._pack_ = 1 # source:False
struct__DISPATCHER_CONTEXT._fields_ = [
    ('ControlPc', ctypes.c_uint64),
    ('ImageBase', ctypes.c_uint64),
    ('FunctionEntry', ctypes.POINTER(struct__IMAGE_RUNTIME_FUNCTION_ENTRY)),
    ('EstablisherFrame', ctypes.c_uint64),
    ('TargetIp', ctypes.c_uint64),
    ('ContextRecord', ctypes.POINTER(struct__CONTEXT)),
    ('LanguageHandler', ctypes.CFUNCTYPE(_EXCEPTION_DISPOSITION, ctypes.POINTER(struct__EXCEPTION_RECORD), ctypes.POINTER(None), ctypes.POINTER(struct__CONTEXT), ctypes.POINTER(None))),
    ('HandlerData', ctypes.POINTER(None)),
    ('HistoryTable', ctypes.POINTER(struct__UNWIND_HISTORY_TABLE)),
    ('ScopeIndex', ctypes.c_uint32),
    ('Fill0', ctypes.c_uint32),
]

ULONG = ctypes.c_uint32
PULONG = ctypes.POINTER(ctypes.c_uint32)
USHORT = ctypes.c_uint16
PUSHORT = ctypes.POINTER(ctypes.c_uint16)
UCHAR = ctypes.c_ubyte
PUCHAR = ctypes.POINTER(ctypes.c_ubyte)
PSZ = ctypes.POINTER(ctypes.c_char)
BOOL = ctypes.c_int32
FLOAT = ctypes.c_float
PFLOAT = ctypes.POINTER(ctypes.c_float)
PBOOL = ctypes.POINTER(ctypes.c_int32)
LPBOOL = ctypes.POINTER(ctypes.c_int32)
PBYTE = ctypes.POINTER(ctypes.c_ubyte)
LPBYTE = ctypes.POINTER(ctypes.c_ubyte)
PINT = ctypes.POINTER(ctypes.c_int32)
LPINT = ctypes.POINTER(ctypes.c_int32)
PWORD = ctypes.POINTER(ctypes.c_uint16)
LPWORD = ctypes.POINTER(ctypes.c_uint16)
LPLONG = ctypes.POINTER(ctypes.c_int32)
PDWORD = ctypes.POINTER(ctypes.c_uint32)
LPDWORD = ctypes.POINTER(ctypes.c_uint32)
LPVOID = ctypes.POINTER(None)
LPCVOID = ctypes.POINTER(None)
INT = ctypes.c_int32
UINT = ctypes.c_uint32
PUINT = ctypes.POINTER(ctypes.c_uint32)
POINTER_64_INT = ctypes.c_uint64
INT8 = ctypes.c_char
PINT8 = ctypes.POINTER(ctypes.c_char)
INT16 = ctypes.c_int16
PINT16 = ctypes.POINTER(ctypes.c_int16)
INT32 = ctypes.c_int32
PINT32 = ctypes.POINTER(ctypes.c_int32)
INT64 = ctypes.c_int64
PINT64 = ctypes.POINTER(ctypes.c_int64)
UINT8 = ctypes.c_ubyte
PUINT8 = ctypes.POINTER(ctypes.c_ubyte)
UINT16 = ctypes.c_uint16
PUINT16 = ctypes.POINTER(ctypes.c_uint16)
UINT32 = ctypes.c_uint32
PUINT32 = ctypes.POINTER(ctypes.c_uint32)
UINT64 = ctypes.c_uint64
PUINT64 = ctypes.POINTER(ctypes.c_uint64)
LONG32 = ctypes.c_int32
PLONG32 = ctypes.POINTER(ctypes.c_int32)
ULONG32 = ctypes.c_uint32
PULONG32 = ctypes.POINTER(ctypes.c_uint32)
DWORD32 = ctypes.c_uint32
PDWORD32 = ctypes.POINTER(ctypes.c_uint32)
INT_PTR = ctypes.c_int64
PINT_PTR = ctypes.POINTER(ctypes.c_int64)
UINT_PTR = ctypes.c_uint64
PUINT_PTR = ctypes.POINTER(ctypes.c_uint64)
LONG_PTR = ctypes.c_int64
PLONG_PTR = ctypes.POINTER(ctypes.c_int64)
PULONG_PTR = ctypes.POINTER(ctypes.c_uint64)
SHANDLE_PTR = ctypes.c_int64
HANDLE_PTR = ctypes.c_uint64
UHALF_PTR = ctypes.c_uint32
PUHALF_PTR = ctypes.POINTER(ctypes.c_uint32)
HALF_PTR = ctypes.c_int32
PHALF_PTR = ctypes.POINTER(ctypes.c_int32)
SIZE_T = ctypes.c_uint64
PSIZE_T = ctypes.POINTER(ctypes.c_uint64)
SSIZE_T = ctypes.c_int64
PSSIZE_T = ctypes.POINTER(ctypes.c_int64)
DWORD_PTR = ctypes.c_uint64
PDWORD_PTR = ctypes.POINTER(ctypes.c_uint64)
LONG64 = ctypes.c_int64
PLONG64 = ctypes.POINTER(ctypes.c_int64)
ULONG64 = ctypes.c_uint64
PULONG64 = ctypes.POINTER(ctypes.c_uint64)
PDWORD64 = ctypes.POINTER(ctypes.c_uint64)
KAFFINITY = ctypes.c_uint64
PKAFFINITY = ctypes.POINTER(ctypes.c_uint64)
_1C570C147E8FD4E17AEC961E98942760 = ctypes.POINTER(None)
CHAR = ctypes.c_char
SHORT = ctypes.c_int16
LONG = ctypes.c_int32
WCHAR = ctypes.c_int16
PWCHAR = ctypes.POINTER(ctypes.c_int16)
LPWCH = ctypes.POINTER(ctypes.c_int16)
PWCH = ctypes.POINTER(ctypes.c_int16)
LPCWCH = ctypes.POINTER(ctypes.c_int16)
PCWCH = ctypes.POINTER(ctypes.c_int16)
NWPSTR = ctypes.POINTER(ctypes.c_int16)
LPWSTR = ctypes.POINTER(ctypes.c_int16)
PWSTR = ctypes.POINTER(ctypes.c_int16)
PZPWSTR = ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))
PCZPWSTR = ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))
LPUWSTR = ctypes.POINTER(ctypes.c_int16)
PUWSTR = ctypes.POINTER(ctypes.c_int16)
LPCWSTR = ctypes.POINTER(ctypes.c_int16)
PCWSTR = ctypes.POINTER(ctypes.c_int16)
PZPCWSTR = ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))
PCZPCWSTR = ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))
LPCUWSTR = ctypes.POINTER(ctypes.c_int16)
PCUWSTR = ctypes.POINTER(ctypes.c_int16)
PZZWSTR = ctypes.POINTER(ctypes.c_int16)
PCZZWSTR = ctypes.POINTER(ctypes.c_int16)
PUZZWSTR = ctypes.POINTER(ctypes.c_int16)
PCUZZWSTR = ctypes.POINTER(ctypes.c_int16)
PNZWCH = ctypes.POINTER(ctypes.c_int16)
PCNZWCH = ctypes.POINTER(ctypes.c_int16)
PUNZWCH = ctypes.POINTER(ctypes.c_int16)
PCUNZWCH = ctypes.POINTER(ctypes.c_int16)
LPCWCHAR = ctypes.POINTER(ctypes.c_int16)
PCWCHAR = ctypes.POINTER(ctypes.c_int16)
LPCUWCHAR = ctypes.POINTER(ctypes.c_int16)
PCUWCHAR = ctypes.POINTER(ctypes.c_int16)
UCSCHAR = ctypes.c_uint32
PUCSCHAR = ctypes.POINTER(ctypes.c_uint32)
PCUCSCHAR = ctypes.POINTER(ctypes.c_uint32)
PUCSSTR = ctypes.POINTER(ctypes.c_uint32)
PUUCSSTR = ctypes.POINTER(ctypes.c_uint32)
PCUCSSTR = ctypes.POINTER(ctypes.c_uint32)
PCUUCSSTR = ctypes.POINTER(ctypes.c_uint32)
PUUCSCHAR = ctypes.POINTER(ctypes.c_uint32)
PCUUCSCHAR = ctypes.POINTER(ctypes.c_uint32)
PCHAR = ctypes.POINTER(ctypes.c_char)
LPCH = ctypes.POINTER(ctypes.c_char)
PCH = ctypes.POINTER(ctypes.c_char)
LPCCH = ctypes.POINTER(ctypes.c_char)
PCCH = ctypes.POINTER(ctypes.c_char)
NPSTR = ctypes.POINTER(ctypes.c_char)
LPSTR = ctypes.POINTER(ctypes.c_char)
PSTR = ctypes.POINTER(ctypes.c_char)
PZPSTR = ctypes.POINTER(ctypes.POINTER(ctypes.c_char))
PCZPSTR = ctypes.POINTER(ctypes.POINTER(ctypes.c_char))
LPCSTR = ctypes.POINTER(ctypes.c_char)
PCSTR = ctypes.POINTER(ctypes.c_char)
PZPCSTR = ctypes.POINTER(ctypes.POINTER(ctypes.c_char))
PCZPCSTR = ctypes.POINTER(ctypes.POINTER(ctypes.c_char))
PZZSTR = ctypes.POINTER(ctypes.c_char)
PCZZSTR = ctypes.POINTER(ctypes.c_char)
PNZCH = ctypes.POINTER(ctypes.c_char)
PCNZCH = ctypes.POINTER(ctypes.c_char)
TCHAR = ctypes.c_char
PTCHAR = ctypes.POINTER(ctypes.c_char)
TBYTE = ctypes.c_ubyte
PTBYTE = ctypes.POINTER(ctypes.c_ubyte)
LPTCH = ctypes.POINTER(ctypes.c_char)
PTCH = ctypes.POINTER(ctypes.c_char)
LPCTCH = ctypes.POINTER(ctypes.c_char)
PCTCH = ctypes.POINTER(ctypes.c_char)
PTSTR = ctypes.POINTER(ctypes.c_char)
LPTSTR = ctypes.POINTER(ctypes.c_char)
PUTSTR = ctypes.POINTER(ctypes.c_char)
LPUTSTR = ctypes.POINTER(ctypes.c_char)
PCTSTR = ctypes.POINTER(ctypes.c_char)
LPCTSTR = ctypes.POINTER(ctypes.c_char)
PCUTSTR = ctypes.POINTER(ctypes.c_char)
LPCUTSTR = ctypes.POINTER(ctypes.c_char)
PZZTSTR = ctypes.POINTER(ctypes.c_char)
PUZZTSTR = ctypes.POINTER(ctypes.c_char)
PCZZTSTR = ctypes.POINTER(ctypes.c_char)
PCUZZTSTR = ctypes.POINTER(ctypes.c_char)
PZPTSTR = ctypes.POINTER(ctypes.POINTER(ctypes.c_char))
PNZTCH = ctypes.POINTER(ctypes.c_char)
PUNZTCH = ctypes.POINTER(ctypes.c_char)
PCNZTCH = ctypes.POINTER(ctypes.c_char)
PCUNZTCH = ctypes.POINTER(ctypes.c_char)
PSHORT = ctypes.POINTER(ctypes.c_int16)
PLONG = ctypes.POINTER(ctypes.c_int32)
class struct__PROCESSOR_NUMBER(Structure):
    pass

struct__PROCESSOR_NUMBER._pack_ = 1 # source:False
struct__PROCESSOR_NUMBER._fields_ = [
    ('Group', ctypes.c_uint16),
    ('Number', ctypes.c_ubyte),
    ('Reserved', ctypes.c_ubyte),
]

PROCESSOR_NUMBER = struct__PROCESSOR_NUMBER
PPROCESSOR_NUMBER = ctypes.POINTER(struct__PROCESSOR_NUMBER)
class struct__GROUP_AFFINITY(Structure):
    pass

struct__GROUP_AFFINITY._pack_ = 1 # source:False
struct__GROUP_AFFINITY._fields_ = [
    ('Mask', ctypes.c_uint64),
    ('Group', ctypes.c_uint16),
    ('Reserved', ctypes.c_uint16 * 3),
]

GROUP_AFFINITY = struct__GROUP_AFFINITY
PGROUP_AFFINITY = ctypes.POINTER(struct__GROUP_AFFINITY)
HANDLE = ctypes.POINTER(None)
PHANDLE = ctypes.POINTER(ctypes.POINTER(None))
FCHAR = ctypes.c_ubyte
FSHORT = ctypes.c_uint16
FLONG = ctypes.c_uint32
HRESULT = ctypes.c_int32
CCHAR = ctypes.c_char
LCID = ctypes.c_uint32
PLCID = ctypes.POINTER(ctypes.c_uint32)
LANGID = ctypes.c_uint16

# values for enumeration 'COMPARTMENT_ID'
COMPARTMENT_ID__enumvalues = {
    0: 'UNSPECIFIED_COMPARTMENT_ID',
    1: 'DEFAULT_COMPARTMENT_ID',
}
UNSPECIFIED_COMPARTMENT_ID = 0
DEFAULT_COMPARTMENT_ID = 1
COMPARTMENT_ID = ctypes.c_uint32 # enum
PCOMPARTMENT_ID = ctypes.POINTER(COMPARTMENT_ID)
class struct__FLOAT128(Structure):
    pass

struct__FLOAT128._pack_ = 1 # source:False
struct__FLOAT128._fields_ = [
    ('LowPart', ctypes.c_int64),
    ('HighPart', ctypes.c_int64),
]

FLOAT128 = struct__FLOAT128
PFLOAT128 = ctypes.POINTER(struct__FLOAT128)
PLONGLONG = ctypes.POINTER(ctypes.c_int64)
PULONGLONG = ctypes.POINTER(ctypes.c_uint64)
USN = ctypes.c_int64
class struct__LARGE_INTEGER___0B914BD3CE83B8CFCF233613356AE5AB(Structure):
    pass

struct__LARGE_INTEGER___0B914BD3CE83B8CFCF233613356AE5AB._pack_ = 1 # source:False
struct__LARGE_INTEGER___0B914BD3CE83B8CFCF233613356AE5AB._fields_ = [
    ('LowPart', ctypes.c_uint32),
    ('HighPart', ctypes.c_int32),
]

class union__LARGE_INTEGER(Union):
    pass

class struct__LARGE_INTEGER_0(Structure):
    pass

struct__LARGE_INTEGER_0._pack_ = 1 # source:False
struct__LARGE_INTEGER_0._fields_ = [
    ('LowPart', ctypes.c_uint32),
    ('HighPart', ctypes.c_int32),
]

union__LARGE_INTEGER._pack_ = 1 # source:False
union__LARGE_INTEGER._anonymous_ = ('_0',)
union__LARGE_INTEGER._fields_ = [
    ('_0', struct__LARGE_INTEGER_0),
    ('u', struct__LARGE_INTEGER___0B914BD3CE83B8CFCF233613356AE5AB),
    ('QuadPart', ctypes.c_int64),
]

LARGE_INTEGER = union__LARGE_INTEGER
PLARGE_INTEGER = ctypes.POINTER(union__LARGE_INTEGER)
class struct__ULARGE_INTEGER___295194D6FDE9D459FF51E3106CEEE6CC(Structure):
    pass

struct__ULARGE_INTEGER___295194D6FDE9D459FF51E3106CEEE6CC._pack_ = 1 # source:False
struct__ULARGE_INTEGER___295194D6FDE9D459FF51E3106CEEE6CC._fields_ = [
    ('LowPart', ctypes.c_uint32),
    ('HighPart', ctypes.c_uint32),
]

class union__ULARGE_INTEGER(Union):
    pass

class struct__ULARGE_INTEGER_0(Structure):
    pass

struct__ULARGE_INTEGER_0._pack_ = 1 # source:False
struct__ULARGE_INTEGER_0._fields_ = [
    ('LowPart', ctypes.c_uint32),
    ('HighPart', ctypes.c_uint32),
]

union__ULARGE_INTEGER._pack_ = 1 # source:False
union__ULARGE_INTEGER._anonymous_ = ('_0',)
union__ULARGE_INTEGER._fields_ = [
    ('_0', struct__ULARGE_INTEGER_0),
    ('u', struct__ULARGE_INTEGER___295194D6FDE9D459FF51E3106CEEE6CC),
    ('QuadPart', ctypes.c_uint64),
]

ULARGE_INTEGER = union__ULARGE_INTEGER
PULARGE_INTEGER = ctypes.POINTER(union__ULARGE_INTEGER)
RTL_REFERENCE_COUNT = ctypes.c_int64
PRTL_REFERENCE_COUNT = ctypes.POINTER(ctypes.c_int64)
RTL_REFERENCE_COUNT32 = ctypes.c_int32
PRTL_REFERENCE_COUNT32 = ctypes.POINTER(ctypes.c_int32)
class struct__LUID(Structure):
    pass

struct__LUID._pack_ = 1 # source:False
struct__LUID._fields_ = [
    ('LowPart', ctypes.c_uint32),
    ('HighPart', ctypes.c_int32),
]

LUID = struct__LUID
PLUID = ctypes.POINTER(struct__LUID)
DWORDLONG = ctypes.c_uint64
PDWORDLONG = ctypes.POINTER(ctypes.c_uint64)
BOOLEAN = ctypes.c_ubyte
PBOOLEAN = ctypes.POINTER(ctypes.c_ubyte)
class struct__LIST_ENTRY(Structure):
    pass

struct__LIST_ENTRY._pack_ = 1 # source:False
struct__LIST_ENTRY._fields_ = [
    ('Flink', ctypes.POINTER(struct__LIST_ENTRY)),
    ('Blink', ctypes.POINTER(struct__LIST_ENTRY)),
]

LIST_ENTRY = struct__LIST_ENTRY
PLIST_ENTRY = ctypes.POINTER(struct__LIST_ENTRY)
PRLIST_ENTRY = ctypes.POINTER(struct__LIST_ENTRY)
class struct__SINGLE_LIST_ENTRY(Structure):
    pass

struct__SINGLE_LIST_ENTRY._pack_ = 1 # source:False
struct__SINGLE_LIST_ENTRY._fields_ = [
    ('Next', ctypes.POINTER(struct__SINGLE_LIST_ENTRY)),
]

SINGLE_LIST_ENTRY = struct__SINGLE_LIST_ENTRY
PSINGLE_LIST_ENTRY = ctypes.POINTER(struct__SINGLE_LIST_ENTRY)
class struct_LIST_ENTRY32(Structure):
    pass

struct_LIST_ENTRY32._pack_ = 1 # source:False
struct_LIST_ENTRY32._fields_ = [
    ('Flink', ctypes.c_uint32),
    ('Blink', ctypes.c_uint32),
]

PLIST_ENTRY32 = ctypes.POINTER(struct_LIST_ENTRY32)
class struct_LIST_ENTRY64(Structure):
    pass

struct_LIST_ENTRY64._pack_ = 1 # source:False
struct_LIST_ENTRY64._fields_ = [
    ('Flink', ctypes.c_uint64),
    ('Blink', ctypes.c_uint64),
]

PLIST_ENTRY64 = ctypes.POINTER(struct_LIST_ENTRY64)
class struct__GUID(Structure):
    pass

struct__GUID._pack_ = 1 # source:False
struct__GUID._fields_ = [
    ('Data1', ctypes.c_uint32),
    ('Data2', ctypes.c_uint16),
    ('Data3', ctypes.c_uint16),
    ('Data4', ctypes.c_ubyte * 8),
]

GUID = struct__GUID
LPGUID = ctypes.POINTER(struct__GUID)
LPCGUID = ctypes.POINTER(struct__GUID)
IID = struct__GUID
LPIID = ctypes.POINTER(struct__GUID)
CLSID = struct__GUID
LPCLSID = ctypes.POINTER(struct__GUID)
FMTID = struct__GUID
LPFMTID = ctypes.POINTER(struct__GUID)
class struct__OBJECTID(Structure):
    pass

struct__OBJECTID._pack_ = 1 # source:False
struct__OBJECTID._fields_ = [
    ('Lineage', GUID),
    ('Uniquifier', ctypes.c_uint32),
]

OBJECTID = struct__OBJECTID
_EE06435D791A7D0585A3F5F131982D64 = ctypes.CFUNCTYPE(_EXCEPTION_DISPOSITION, ctypes.POINTER(struct__EXCEPTION_RECORD), ctypes.POINTER(None), ctypes.POINTER(struct__CONTEXT), ctypes.POINTER(None))
class struct__ENUM_FLAG_INTEGER_FOR_SIZE_1_(Structure):
    pass

class struct__ENUM_FLAG_INTEGER_FOR_SIZE_2_(Structure):
    pass

class struct__ENUM_FLAG_INTEGER_FOR_SIZE_4_(Structure):
    pass

class struct__ENUM_FLAG_INTEGER_FOR_SIZE_8_(Structure):
    pass

KSPIN_LOCK = ctypes.c_uint64
PKSPIN_LOCK = ctypes.POINTER(ctypes.c_uint64)
PM128A = ctypes.POINTER(struct__M128A)
PXSAVE_FORMAT = ctypes.POINTER(struct__XSAVE_FORMAT)
class struct__XSAVE_CET_U_FORMAT(Structure):
    pass

struct__XSAVE_CET_U_FORMAT._pack_ = 1 # source:False
struct__XSAVE_CET_U_FORMAT._fields_ = [
    ('Ia32CetUMsr', ctypes.c_uint64),
    ('Ia32Pl3SspMsr', ctypes.c_uint64),
]

XSAVE_CET_U_FORMAT = struct__XSAVE_CET_U_FORMAT
PXSAVE_CET_U_FORMAT = ctypes.POINTER(struct__XSAVE_CET_U_FORMAT)
class struct__XSAVE_AREA_HEADER(Structure):
    pass

struct__XSAVE_AREA_HEADER._pack_ = 1 # source:False
struct__XSAVE_AREA_HEADER._fields_ = [
    ('Mask', ctypes.c_uint64),
    ('CompactionMask', ctypes.c_uint64),
    ('Reserved2', ctypes.c_uint64 * 6),
]

XSAVE_AREA_HEADER = struct__XSAVE_AREA_HEADER
PXSAVE_AREA_HEADER = ctypes.POINTER(struct__XSAVE_AREA_HEADER)
class struct__XSAVE_AREA(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('LegacyState', XSAVE_FORMAT),
    ('Header', XSAVE_AREA_HEADER),
     ]

XSAVE_AREA = struct__XSAVE_AREA
PXSAVE_AREA = ctypes.POINTER(struct__XSAVE_AREA)
class struct__XSTATE_CONTEXT(Structure):
    pass

struct__XSTATE_CONTEXT._pack_ = 1 # source:False
struct__XSTATE_CONTEXT._fields_ = [
    ('Mask', ctypes.c_uint64),
    ('Length', ctypes.c_uint32),
    ('Reserved1', ctypes.c_uint32),
    ('Area', ctypes.POINTER(struct__XSAVE_AREA)),
    ('Buffer', ctypes.POINTER(None)),
]

XSTATE_CONTEXT = struct__XSTATE_CONTEXT
PXSTATE_CONTEXT = ctypes.POINTER(struct__XSTATE_CONTEXT)
class struct__SCOPE_TABLE_AMD64___AEBEF9CF03D90DA9BD5BAD919F892283(Structure):
    pass

struct__SCOPE_TABLE_AMD64___AEBEF9CF03D90DA9BD5BAD919F892283._pack_ = 1 # source:False
struct__SCOPE_TABLE_AMD64___AEBEF9CF03D90DA9BD5BAD919F892283._fields_ = [
    ('BeginAddress', ctypes.c_uint32),
    ('EndAddress', ctypes.c_uint32),
    ('HandlerAddress', ctypes.c_uint32),
    ('JumpTarget', ctypes.c_uint32),
]

class struct__SCOPE_TABLE_AMD64(Structure):
    pass

struct__SCOPE_TABLE_AMD64._pack_ = 1 # source:False
struct__SCOPE_TABLE_AMD64._fields_ = [
    ('Count', ctypes.c_uint32),
    ('ScopeRecord', struct__SCOPE_TABLE_AMD64___AEBEF9CF03D90DA9BD5BAD919F892283 * 1),
]

SCOPE_TABLE_AMD64 = struct__SCOPE_TABLE_AMD64
PSCOPE_TABLE_AMD64 = ctypes.POINTER(struct__SCOPE_TABLE_AMD64)
PXMM_SAVE_AREA32 = ctypes.POINTER(struct__XSAVE_FORMAT)
struct__CONTEXT._pack_ = 1 # source:False
struct__CONTEXT._anonymous_ = ('_0',)
struct__CONTEXT._fields_ = [
    ('P1Home', ctypes.c_uint64),
    ('P2Home', ctypes.c_uint64),
    ('P3Home', ctypes.c_uint64),
    ('P4Home', ctypes.c_uint64),
    ('P5Home', ctypes.c_uint64),
    ('P6Home', ctypes.c_uint64),
    ('ContextFlags', ctypes.c_uint32),
    ('MxCsr', ctypes.c_uint32),
    ('SegCs', ctypes.c_uint16),
    ('SegDs', ctypes.c_uint16),
    ('SegEs', ctypes.c_uint16),
    ('SegFs', ctypes.c_uint16),
    ('SegGs', ctypes.c_uint16),
    ('SegSs', ctypes.c_uint16),
    ('EFlags', ctypes.c_uint32),
    ('Dr0', ctypes.c_uint64),
    ('Dr1', ctypes.c_uint64),
    ('Dr2', ctypes.c_uint64),
    ('Dr3', ctypes.c_uint64),
    ('Dr6', ctypes.c_uint64),
    ('Dr7', ctypes.c_uint64),
    ('Rax', ctypes.c_uint64),
    ('Rcx', ctypes.c_uint64),
    ('Rdx', ctypes.c_uint64),
    ('Rbx', ctypes.c_uint64),
    ('Rsp', ctypes.c_uint64),
    ('Rbp', ctypes.c_uint64),
    ('Rsi', ctypes.c_uint64),
    ('Rdi', ctypes.c_uint64),
    ('R8', ctypes.c_uint64),
    ('R9', ctypes.c_uint64),
    ('R10', ctypes.c_uint64),
    ('R11', ctypes.c_uint64),
    ('R12', ctypes.c_uint64),
    ('R13', ctypes.c_uint64),
    ('R14', ctypes.c_uint64),
    ('R15', ctypes.c_uint64),
    ('Rip', ctypes.c_uint64),
    ('_0', union__CONTEXT_0),
    ('VectorRegister', struct__M128A * 26),
    ('VectorControl', ctypes.c_uint64),
    ('DebugControl', ctypes.c_uint64),
    ('LastBranchToRip', ctypes.c_uint64),
    ('LastBranchFromRip', ctypes.c_uint64),
    ('LastExceptionToRip', ctypes.c_uint64),
    ('LastExceptionFromRip', ctypes.c_uint64),
]

CONTEXT = struct__CONTEXT
class union__IMAGE_RUNTIME_FUNCTION_ENTRY___8E0A60A2DAA7D27352B4BE14956F6EAE(Union):
    pass

union__IMAGE_RUNTIME_FUNCTION_ENTRY___8E0A60A2DAA7D27352B4BE14956F6EAE._pack_ = 1 # source:False
union__IMAGE_RUNTIME_FUNCTION_ENTRY___8E0A60A2DAA7D27352B4BE14956F6EAE._fields_ = [
    ('UnwindInfoAddress', ctypes.c_uint32),
    ('UnwindData', ctypes.c_uint32),
]

class union__IMAGE_RUNTIME_FUNCTION_ENTRY_0(Union):
    pass

union__IMAGE_RUNTIME_FUNCTION_ENTRY_0._pack_ = 1 # source:False
union__IMAGE_RUNTIME_FUNCTION_ENTRY_0._fields_ = [
    ('UnwindInfoAddress', ctypes.c_uint32),
    ('UnwindData', ctypes.c_uint32),
]

struct__IMAGE_RUNTIME_FUNCTION_ENTRY._pack_ = 1 # source:False
struct__IMAGE_RUNTIME_FUNCTION_ENTRY._anonymous_ = ('_0',)
struct__IMAGE_RUNTIME_FUNCTION_ENTRY._fields_ = [
    ('BeginAddress', ctypes.c_uint32),
    ('EndAddress', ctypes.c_uint32),
    ('_0', union__IMAGE_RUNTIME_FUNCTION_ENTRY_0),
]

RUNTIME_FUNCTION = struct__IMAGE_RUNTIME_FUNCTION_ENTRY
SCOPE_TABLE = struct__SCOPE_TABLE_AMD64
PSCOPE_TABLE = ctypes.POINTER(struct__SCOPE_TABLE_AMD64)
class struct__UNWIND_HISTORY_TABLE_ENTRY(Structure):
    pass

struct__UNWIND_HISTORY_TABLE_ENTRY._pack_ = 1 # source:False
struct__UNWIND_HISTORY_TABLE_ENTRY._fields_ = [
    ('ImageBase', ctypes.c_uint64),
    ('FunctionEntry', ctypes.POINTER(struct__IMAGE_RUNTIME_FUNCTION_ENTRY)),
]

UNWIND_HISTORY_TABLE_ENTRY = struct__UNWIND_HISTORY_TABLE_ENTRY
PUNWIND_HISTORY_TABLE_ENTRY = ctypes.POINTER(struct__UNWIND_HISTORY_TABLE_ENTRY)
struct__UNWIND_HISTORY_TABLE._pack_ = 1 # source:False
struct__UNWIND_HISTORY_TABLE._fields_ = [
    ('Count', ctypes.c_uint32),
    ('LocalHint', ctypes.c_ubyte),
    ('GlobalHint', ctypes.c_ubyte),
    ('Search', ctypes.c_ubyte),
    ('Once', ctypes.c_ubyte),
    ('LowAddress', ctypes.c_uint64),
    ('HighAddress', ctypes.c_uint64),
    ('Entry', struct__UNWIND_HISTORY_TABLE_ENTRY * 12),
]

UNWIND_HISTORY_TABLE = struct__UNWIND_HISTORY_TABLE
GET_RUNTIME_FUNCTION_CALLBACK = ctypes.CFUNCTYPE(ctypes.POINTER(struct__IMAGE_RUNTIME_FUNCTION_ENTRY), ctypes.c_uint64, ctypes.POINTER(None))
PGET_RUNTIME_FUNCTION_CALLBACK = ctypes.CFUNCTYPE(ctypes.POINTER(struct__IMAGE_RUNTIME_FUNCTION_ENTRY), ctypes.c_uint64, ctypes.POINTER(None))
OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.POINTER(struct__IMAGE_RUNTIME_FUNCTION_ENTRY)))
POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), ctypes.POINTER(ctypes.POINTER(struct__IMAGE_RUNTIME_FUNCTION_ENTRY)))
DISPATCHER_CONTEXT = struct__DISPATCHER_CONTEXT
PDISPATCHER_CONTEXT = ctypes.POINTER(struct__DISPATCHER_CONTEXT)
PEXCEPTION_FILTER = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__EXCEPTION_POINTERS), ctypes.POINTER(None))
PTERMINATION_HANDLER = ctypes.CFUNCTYPE(None, ctypes.c_ubyte, ctypes.POINTER(None))
class struct__5813CBACEBCD7EB2D1A50052721CB338(Structure):
    pass

struct__5813CBACEBCD7EB2D1A50052721CB338._pack_ = 1 # source:False
struct__5813CBACEBCD7EB2D1A50052721CB338._fields_ = [
    ('Xmm0', ctypes.POINTER(struct__M128A)),
    ('Xmm1', ctypes.POINTER(struct__M128A)),
    ('Xmm2', ctypes.POINTER(struct__M128A)),
    ('Xmm3', ctypes.POINTER(struct__M128A)),
    ('Xmm4', ctypes.POINTER(struct__M128A)),
    ('Xmm5', ctypes.POINTER(struct__M128A)),
    ('Xmm6', ctypes.POINTER(struct__M128A)),
    ('Xmm7', ctypes.POINTER(struct__M128A)),
    ('Xmm8', ctypes.POINTER(struct__M128A)),
    ('Xmm9', ctypes.POINTER(struct__M128A)),
    ('Xmm10', ctypes.POINTER(struct__M128A)),
    ('Xmm11', ctypes.POINTER(struct__M128A)),
    ('Xmm12', ctypes.POINTER(struct__M128A)),
    ('Xmm13', ctypes.POINTER(struct__M128A)),
    ('Xmm14', ctypes.POINTER(struct__M128A)),
    ('Xmm15', ctypes.POINTER(struct__M128A)),
]

class union__KNONVOLATILE_CONTEXT_POINTERS___4C940C1D04ED6E0FA4259925A0783C75(Union):
    pass

class struct__KNONVOLATILE_CONTEXT_POINTERS___4C940C1D04ED6E0FA4259925A0783C75_0(Structure):
    pass

struct__KNONVOLATILE_CONTEXT_POINTERS___4C940C1D04ED6E0FA4259925A0783C75_0._pack_ = 1 # source:False
struct__KNONVOLATILE_CONTEXT_POINTERS___4C940C1D04ED6E0FA4259925A0783C75_0._fields_ = [
    ('Xmm0', ctypes.POINTER(struct__M128A)),
    ('Xmm1', ctypes.POINTER(struct__M128A)),
    ('Xmm2', ctypes.POINTER(struct__M128A)),
    ('Xmm3', ctypes.POINTER(struct__M128A)),
    ('Xmm4', ctypes.POINTER(struct__M128A)),
    ('Xmm5', ctypes.POINTER(struct__M128A)),
    ('Xmm6', ctypes.POINTER(struct__M128A)),
    ('Xmm7', ctypes.POINTER(struct__M128A)),
    ('Xmm8', ctypes.POINTER(struct__M128A)),
    ('Xmm9', ctypes.POINTER(struct__M128A)),
    ('Xmm10', ctypes.POINTER(struct__M128A)),
    ('Xmm11', ctypes.POINTER(struct__M128A)),
    ('Xmm12', ctypes.POINTER(struct__M128A)),
    ('Xmm13', ctypes.POINTER(struct__M128A)),
    ('Xmm14', ctypes.POINTER(struct__M128A)),
    ('Xmm15', ctypes.POINTER(struct__M128A)),
]

union__KNONVOLATILE_CONTEXT_POINTERS___4C940C1D04ED6E0FA4259925A0783C75._pack_ = 1 # source:False
union__KNONVOLATILE_CONTEXT_POINTERS___4C940C1D04ED6E0FA4259925A0783C75._anonymous_ = ('_0',)
union__KNONVOLATILE_CONTEXT_POINTERS___4C940C1D04ED6E0FA4259925A0783C75._fields_ = [
    ('FloatingContext', ctypes.POINTER(struct__M128A) * 16),
    ('_0', struct__KNONVOLATILE_CONTEXT_POINTERS___4C940C1D04ED6E0FA4259925A0783C75_0),
]

class struct__FAEAD0B6DE8C3E663F9C84A0EA317232(Structure):
    pass

struct__FAEAD0B6DE8C3E663F9C84A0EA317232._pack_ = 1 # source:False
struct__FAEAD0B6DE8C3E663F9C84A0EA317232._fields_ = [
    ('Rax', ctypes.POINTER(ctypes.c_uint64)),
    ('Rcx', ctypes.POINTER(ctypes.c_uint64)),
    ('Rdx', ctypes.POINTER(ctypes.c_uint64)),
    ('Rbx', ctypes.POINTER(ctypes.c_uint64)),
    ('Rsp', ctypes.POINTER(ctypes.c_uint64)),
    ('Rbp', ctypes.POINTER(ctypes.c_uint64)),
    ('Rsi', ctypes.POINTER(ctypes.c_uint64)),
    ('Rdi', ctypes.POINTER(ctypes.c_uint64)),
    ('R8', ctypes.POINTER(ctypes.c_uint64)),
    ('R9', ctypes.POINTER(ctypes.c_uint64)),
    ('R10', ctypes.POINTER(ctypes.c_uint64)),
    ('R11', ctypes.POINTER(ctypes.c_uint64)),
    ('R12', ctypes.POINTER(ctypes.c_uint64)),
    ('R13', ctypes.POINTER(ctypes.c_uint64)),
    ('R14', ctypes.POINTER(ctypes.c_uint64)),
    ('R15', ctypes.POINTER(ctypes.c_uint64)),
]

class union__KNONVOLATILE_CONTEXT_POINTERS___FA2959FC6C6AC532662CCE355387EAC6(Union):
    pass

class struct__KNONVOLATILE_CONTEXT_POINTERS___FA2959FC6C6AC532662CCE355387EAC6_0(Structure):
    pass

struct__KNONVOLATILE_CONTEXT_POINTERS___FA2959FC6C6AC532662CCE355387EAC6_0._pack_ = 1 # source:False
struct__KNONVOLATILE_CONTEXT_POINTERS___FA2959FC6C6AC532662CCE355387EAC6_0._fields_ = [
    ('Rax', ctypes.POINTER(ctypes.c_uint64)),
    ('Rcx', ctypes.POINTER(ctypes.c_uint64)),
    ('Rdx', ctypes.POINTER(ctypes.c_uint64)),
    ('Rbx', ctypes.POINTER(ctypes.c_uint64)),
    ('Rsp', ctypes.POINTER(ctypes.c_uint64)),
    ('Rbp', ctypes.POINTER(ctypes.c_uint64)),
    ('Rsi', ctypes.POINTER(ctypes.c_uint64)),
    ('Rdi', ctypes.POINTER(ctypes.c_uint64)),
    ('R8', ctypes.POINTER(ctypes.c_uint64)),
    ('R9', ctypes.POINTER(ctypes.c_uint64)),
    ('R10', ctypes.POINTER(ctypes.c_uint64)),
    ('R11', ctypes.POINTER(ctypes.c_uint64)),
    ('R12', ctypes.POINTER(ctypes.c_uint64)),
    ('R13', ctypes.POINTER(ctypes.c_uint64)),
    ('R14', ctypes.POINTER(ctypes.c_uint64)),
    ('R15', ctypes.POINTER(ctypes.c_uint64)),
]

union__KNONVOLATILE_CONTEXT_POINTERS___FA2959FC6C6AC532662CCE355387EAC6._pack_ = 1 # source:False
union__KNONVOLATILE_CONTEXT_POINTERS___FA2959FC6C6AC532662CCE355387EAC6._anonymous_ = ('_0',)
union__KNONVOLATILE_CONTEXT_POINTERS___FA2959FC6C6AC532662CCE355387EAC6._fields_ = [
    ('IntegerContext', ctypes.POINTER(ctypes.c_uint64) * 16),
    ('_0', struct__KNONVOLATILE_CONTEXT_POINTERS___FA2959FC6C6AC532662CCE355387EAC6_0),
]

class struct__KNONVOLATILE_CONTEXT_POINTERS(Structure):
    pass

class union__KNONVOLATILE_CONTEXT_POINTERS_0(Union):
    pass

class struct__KNONVOLATILE_CONTEXT_POINTERS_0_0(Structure):
    pass

struct__KNONVOLATILE_CONTEXT_POINTERS_0_0._pack_ = 1 # source:False
struct__KNONVOLATILE_CONTEXT_POINTERS_0_0._fields_ = [
    ('Xmm0', ctypes.POINTER(struct__M128A)),
    ('Xmm1', ctypes.POINTER(struct__M128A)),
    ('Xmm2', ctypes.POINTER(struct__M128A)),
    ('Xmm3', ctypes.POINTER(struct__M128A)),
    ('Xmm4', ctypes.POINTER(struct__M128A)),
    ('Xmm5', ctypes.POINTER(struct__M128A)),
    ('Xmm6', ctypes.POINTER(struct__M128A)),
    ('Xmm7', ctypes.POINTER(struct__M128A)),
    ('Xmm8', ctypes.POINTER(struct__M128A)),
    ('Xmm9', ctypes.POINTER(struct__M128A)),
    ('Xmm10', ctypes.POINTER(struct__M128A)),
    ('Xmm11', ctypes.POINTER(struct__M128A)),
    ('Xmm12', ctypes.POINTER(struct__M128A)),
    ('Xmm13', ctypes.POINTER(struct__M128A)),
    ('Xmm14', ctypes.POINTER(struct__M128A)),
    ('Xmm15', ctypes.POINTER(struct__M128A)),
]

union__KNONVOLATILE_CONTEXT_POINTERS_0._pack_ = 1 # source:False
union__KNONVOLATILE_CONTEXT_POINTERS_0._anonymous_ = ('_0',)
union__KNONVOLATILE_CONTEXT_POINTERS_0._fields_ = [
    ('FloatingContext', ctypes.POINTER(struct__M128A) * 16),
    ('_0', struct__KNONVOLATILE_CONTEXT_POINTERS_0_0),
]

class union__KNONVOLATILE_CONTEXT_POINTERS_1(Union):
    pass

class struct__KNONVOLATILE_CONTEXT_POINTERS_1_0(Structure):
    pass

struct__KNONVOLATILE_CONTEXT_POINTERS_1_0._pack_ = 1 # source:False
struct__KNONVOLATILE_CONTEXT_POINTERS_1_0._fields_ = [
    ('Rax', ctypes.POINTER(ctypes.c_uint64)),
    ('Rcx', ctypes.POINTER(ctypes.c_uint64)),
    ('Rdx', ctypes.POINTER(ctypes.c_uint64)),
    ('Rbx', ctypes.POINTER(ctypes.c_uint64)),
    ('Rsp', ctypes.POINTER(ctypes.c_uint64)),
    ('Rbp', ctypes.POINTER(ctypes.c_uint64)),
    ('Rsi', ctypes.POINTER(ctypes.c_uint64)),
    ('Rdi', ctypes.POINTER(ctypes.c_uint64)),
    ('R8', ctypes.POINTER(ctypes.c_uint64)),
    ('R9', ctypes.POINTER(ctypes.c_uint64)),
    ('R10', ctypes.POINTER(ctypes.c_uint64)),
    ('R11', ctypes.POINTER(ctypes.c_uint64)),
    ('R12', ctypes.POINTER(ctypes.c_uint64)),
    ('R13', ctypes.POINTER(ctypes.c_uint64)),
    ('R14', ctypes.POINTER(ctypes.c_uint64)),
    ('R15', ctypes.POINTER(ctypes.c_uint64)),
]

union__KNONVOLATILE_CONTEXT_POINTERS_1._pack_ = 1 # source:False
union__KNONVOLATILE_CONTEXT_POINTERS_1._anonymous_ = ('_0',)
union__KNONVOLATILE_CONTEXT_POINTERS_1._fields_ = [
    ('IntegerContext', ctypes.POINTER(ctypes.c_uint64) * 16),
    ('_0', struct__KNONVOLATILE_CONTEXT_POINTERS_1_0),
]

struct__KNONVOLATILE_CONTEXT_POINTERS._pack_ = 1 # source:False
struct__KNONVOLATILE_CONTEXT_POINTERS._anonymous_ = ('_0', '_1',)
struct__KNONVOLATILE_CONTEXT_POINTERS._fields_ = [
    ('_0', union__KNONVOLATILE_CONTEXT_POINTERS_0),
    ('_1', union__KNONVOLATILE_CONTEXT_POINTERS_1),
]

KNONVOLATILE_CONTEXT_POINTERS = struct__KNONVOLATILE_CONTEXT_POINTERS
PKNONVOLATILE_CONTEXT_POINTERS = ctypes.POINTER(struct__KNONVOLATILE_CONTEXT_POINTERS)
class struct__SCOPE_TABLE_ARM___AEBEF9CF03D90DA9BD5BAD919F892283(Structure):
    pass

struct__SCOPE_TABLE_ARM___AEBEF9CF03D90DA9BD5BAD919F892283._pack_ = 1 # source:False
struct__SCOPE_TABLE_ARM___AEBEF9CF03D90DA9BD5BAD919F892283._fields_ = [
    ('BeginAddress', ctypes.c_uint32),
    ('EndAddress', ctypes.c_uint32),
    ('HandlerAddress', ctypes.c_uint32),
    ('JumpTarget', ctypes.c_uint32),
]

class struct__SCOPE_TABLE_ARM(Structure):
    pass

struct__SCOPE_TABLE_ARM._pack_ = 1 # source:False
struct__SCOPE_TABLE_ARM._fields_ = [
    ('Count', ctypes.c_uint32),
    ('ScopeRecord', struct__SCOPE_TABLE_ARM___AEBEF9CF03D90DA9BD5BAD919F892283 * 1),
]

SCOPE_TABLE_ARM = struct__SCOPE_TABLE_ARM
PSCOPE_TABLE_ARM = ctypes.POINTER(struct__SCOPE_TABLE_ARM)
class struct__SCOPE_TABLE_ARM64___AEBEF9CF03D90DA9BD5BAD919F892283(Structure):
    pass

struct__SCOPE_TABLE_ARM64___AEBEF9CF03D90DA9BD5BAD919F892283._pack_ = 1 # source:False
struct__SCOPE_TABLE_ARM64___AEBEF9CF03D90DA9BD5BAD919F892283._fields_ = [
    ('BeginAddress', ctypes.c_uint32),
    ('EndAddress', ctypes.c_uint32),
    ('HandlerAddress', ctypes.c_uint32),
    ('JumpTarget', ctypes.c_uint32),
]

class struct__SCOPE_TABLE_ARM64(Structure):
    pass

struct__SCOPE_TABLE_ARM64._pack_ = 1 # source:False
struct__SCOPE_TABLE_ARM64._fields_ = [
    ('Count', ctypes.c_uint32),
    ('ScopeRecord', struct__SCOPE_TABLE_ARM64___AEBEF9CF03D90DA9BD5BAD919F892283 * 1),
]

SCOPE_TABLE_ARM64 = struct__SCOPE_TABLE_ARM64
PSCOPE_TABLE_ARM64 = ctypes.POINTER(struct__SCOPE_TABLE_ARM64)
class struct__KNONVOLATILE_CONTEXT_POINTERS_ARM64(Structure):
    pass

struct__KNONVOLATILE_CONTEXT_POINTERS_ARM64._pack_ = 1 # source:False
struct__KNONVOLATILE_CONTEXT_POINTERS_ARM64._fields_ = [
    ('X19', ctypes.POINTER(ctypes.c_uint64)),
    ('X20', ctypes.POINTER(ctypes.c_uint64)),
    ('X21', ctypes.POINTER(ctypes.c_uint64)),
    ('X22', ctypes.POINTER(ctypes.c_uint64)),
    ('X23', ctypes.POINTER(ctypes.c_uint64)),
    ('X24', ctypes.POINTER(ctypes.c_uint64)),
    ('X25', ctypes.POINTER(ctypes.c_uint64)),
    ('X26', ctypes.POINTER(ctypes.c_uint64)),
    ('X27', ctypes.POINTER(ctypes.c_uint64)),
    ('X28', ctypes.POINTER(ctypes.c_uint64)),
    ('Fp', ctypes.POINTER(ctypes.c_uint64)),
    ('Lr', ctypes.POINTER(ctypes.c_uint64)),
    ('D8', ctypes.POINTER(ctypes.c_uint64)),
    ('D9', ctypes.POINTER(ctypes.c_uint64)),
    ('D10', ctypes.POINTER(ctypes.c_uint64)),
    ('D11', ctypes.POINTER(ctypes.c_uint64)),
    ('D12', ctypes.POINTER(ctypes.c_uint64)),
    ('D13', ctypes.POINTER(ctypes.c_uint64)),
    ('D14', ctypes.POINTER(ctypes.c_uint64)),
    ('D15', ctypes.POINTER(ctypes.c_uint64)),
]

KNONVOLATILE_CONTEXT_POINTERS_ARM64 = struct__KNONVOLATILE_CONTEXT_POINTERS_ARM64
PKNONVOLATILE_CONTEXT_POINTERS_ARM64 = ctypes.POINTER(struct__KNONVOLATILE_CONTEXT_POINTERS_ARM64)
class struct__AE2973057922CF8FEA1D3B09D0719A51(Structure):
    pass

struct__AE2973057922CF8FEA1D3B09D0719A51._pack_ = 1 # source:False
struct__AE2973057922CF8FEA1D3B09D0719A51._fields_ = [
    ('BaseMid', ctypes.c_ubyte),
    ('Flags1', ctypes.c_ubyte),
    ('Flags2', ctypes.c_ubyte),
    ('BaseHi', ctypes.c_ubyte),
]

class struct__A3BAC9569453E46653D4C53B8339026E(Structure):
    pass

struct__A3BAC9569453E46653D4C53B8339026E._pack_ = 1 # source:False
struct__A3BAC9569453E46653D4C53B8339026E._fields_ = [
    ('BaseMid', ctypes.c_uint32, 8),
    ('Type', ctypes.c_uint32, 5),
    ('Dpl', ctypes.c_uint32, 2),
    ('Pres', ctypes.c_uint32, 1),
    ('LimitHi', ctypes.c_uint32, 4),
    ('Sys', ctypes.c_uint32, 1),
    ('Reserved_0', ctypes.c_uint32, 1),
    ('Default_Big', ctypes.c_uint32, 1),
    ('Granularity', ctypes.c_uint32, 1),
    ('BaseHi', ctypes.c_uint32, 8),
]

class union__LDT_ENTRY___4A55B64DEEFB63B09A05523A0EA37EAD(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Bytes', struct__AE2973057922CF8FEA1D3B09D0719A51),
    ('Bits', struct__A3BAC9569453E46653D4C53B8339026E),
     ]

class struct__LDT_ENTRY(Structure):
    pass

struct__LDT_ENTRY._pack_ = 1 # source:False
struct__LDT_ENTRY._fields_ = [
    ('LimitLow', ctypes.c_uint16),
    ('BaseLow', ctypes.c_uint16),
    ('HighWord', union__LDT_ENTRY___4A55B64DEEFB63B09A05523A0EA37EAD),
]

LDT_ENTRY = struct__LDT_ENTRY
PLDT_ENTRY = ctypes.POINTER(struct__LDT_ENTRY)
class struct__WOW64_FLOATING_SAVE_AREA(Structure):
    pass

struct__WOW64_FLOATING_SAVE_AREA._pack_ = 1 # source:False
struct__WOW64_FLOATING_SAVE_AREA._fields_ = [
    ('ControlWord', ctypes.c_uint32),
    ('StatusWord', ctypes.c_uint32),
    ('TagWord', ctypes.c_uint32),
    ('ErrorOffset', ctypes.c_uint32),
    ('ErrorSelector', ctypes.c_uint32),
    ('DataOffset', ctypes.c_uint32),
    ('DataSelector', ctypes.c_uint32),
    ('RegisterArea', ctypes.c_ubyte * 80),
    ('Cr0NpxState', ctypes.c_uint32),
]

WOW64_FLOATING_SAVE_AREA = struct__WOW64_FLOATING_SAVE_AREA
PWOW64_FLOATING_SAVE_AREA = ctypes.POINTER(struct__WOW64_FLOATING_SAVE_AREA)
class struct__WOW64_CONTEXT(Structure):
    pass

struct__WOW64_CONTEXT._pack_ = 1 # source:False
struct__WOW64_CONTEXT._fields_ = [
    ('ContextFlags', ctypes.c_uint32),
    ('Dr0', ctypes.c_uint32),
    ('Dr1', ctypes.c_uint32),
    ('Dr2', ctypes.c_uint32),
    ('Dr3', ctypes.c_uint32),
    ('Dr6', ctypes.c_uint32),
    ('Dr7', ctypes.c_uint32),
    ('FloatSave', WOW64_FLOATING_SAVE_AREA),
    ('SegGs', ctypes.c_uint32),
    ('SegFs', ctypes.c_uint32),
    ('SegEs', ctypes.c_uint32),
    ('SegDs', ctypes.c_uint32),
    ('Edi', ctypes.c_uint32),
    ('Esi', ctypes.c_uint32),
    ('Ebx', ctypes.c_uint32),
    ('Edx', ctypes.c_uint32),
    ('Ecx', ctypes.c_uint32),
    ('Eax', ctypes.c_uint32),
    ('Ebp', ctypes.c_uint32),
    ('Eip', ctypes.c_uint32),
    ('SegCs', ctypes.c_uint32),
    ('EFlags', ctypes.c_uint32),
    ('Esp', ctypes.c_uint32),
    ('SegSs', ctypes.c_uint32),
    ('ExtendedRegisters', ctypes.c_ubyte * 512),
]

WOW64_CONTEXT = struct__WOW64_CONTEXT
PWOW64_CONTEXT = ctypes.POINTER(struct__WOW64_CONTEXT)
class union__WOW64_LDT_ENTRY___4A55B64DEEFB63B09A05523A0EA37EAD(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Bytes', struct__AE2973057922CF8FEA1D3B09D0719A51),
    ('Bits', struct__A3BAC9569453E46653D4C53B8339026E),
     ]

class struct__WOW64_LDT_ENTRY(Structure):
    pass

struct__WOW64_LDT_ENTRY._pack_ = 1 # source:False
struct__WOW64_LDT_ENTRY._fields_ = [
    ('LimitLow', ctypes.c_uint16),
    ('BaseLow', ctypes.c_uint16),
    ('HighWord', union__WOW64_LDT_ENTRY___4A55B64DEEFB63B09A05523A0EA37EAD),
]

WOW64_LDT_ENTRY = struct__WOW64_LDT_ENTRY
PWOW64_LDT_ENTRY = ctypes.POINTER(struct__WOW64_LDT_ENTRY)
class struct__WOW64_DESCRIPTOR_TABLE_ENTRY(Structure):
    pass

struct__WOW64_DESCRIPTOR_TABLE_ENTRY._pack_ = 1 # source:False
struct__WOW64_DESCRIPTOR_TABLE_ENTRY._fields_ = [
    ('Selector', ctypes.c_uint32),
    ('Descriptor', WOW64_LDT_ENTRY),
]

WOW64_DESCRIPTOR_TABLE_ENTRY = struct__WOW64_DESCRIPTOR_TABLE_ENTRY
PWOW64_DESCRIPTOR_TABLE_ENTRY = ctypes.POINTER(struct__WOW64_DESCRIPTOR_TABLE_ENTRY)
class struct__EXCEPTION_RECORD32(Structure):
    pass

struct__EXCEPTION_RECORD32._pack_ = 1 # source:False
struct__EXCEPTION_RECORD32._fields_ = [
    ('ExceptionCode', ctypes.c_uint32),
    ('ExceptionFlags', ctypes.c_uint32),
    ('ExceptionRecord', ctypes.c_uint32),
    ('ExceptionAddress', ctypes.c_uint32),
    ('NumberParameters', ctypes.c_uint32),
    ('ExceptionInformation', ctypes.c_uint32 * 15),
]

EXCEPTION_RECORD32 = struct__EXCEPTION_RECORD32
PEXCEPTION_RECORD32 = ctypes.POINTER(struct__EXCEPTION_RECORD32)
class struct__EXCEPTION_RECORD64(Structure):
    pass

struct__EXCEPTION_RECORD64._pack_ = 1 # source:False
struct__EXCEPTION_RECORD64._fields_ = [
    ('ExceptionCode', ctypes.c_uint32),
    ('ExceptionFlags', ctypes.c_uint32),
    ('ExceptionRecord', ctypes.c_uint64),
    ('ExceptionAddress', ctypes.c_uint64),
    ('NumberParameters', ctypes.c_uint32),
    ('__unusedAlignment', ctypes.c_uint32),
    ('ExceptionInformation', ctypes.c_uint64 * 15),
]

EXCEPTION_RECORD64 = struct__EXCEPTION_RECORD64
PEXCEPTION_RECORD64 = ctypes.POINTER(struct__EXCEPTION_RECORD64)
EXCEPTION_POINTERS = struct__EXCEPTION_POINTERS
PEXCEPTION_POINTERS = ctypes.POINTER(struct__EXCEPTION_POINTERS)
PACCESS_TOKEN = ctypes.POINTER(None)
PSECURITY_DESCRIPTOR = ctypes.POINTER(None)
PSID = ctypes.POINTER(None)
PCLAIMS_BLOB = ctypes.POINTER(None)
ACCESS_MASK = ctypes.c_uint32
PACCESS_MASK = ctypes.POINTER(ctypes.c_uint32)
class struct__GENERIC_MAPPING(Structure):
    pass

struct__GENERIC_MAPPING._pack_ = 1 # source:False
struct__GENERIC_MAPPING._fields_ = [
    ('GenericRead', ctypes.c_uint32),
    ('GenericWrite', ctypes.c_uint32),
    ('GenericExecute', ctypes.c_uint32),
    ('GenericAll', ctypes.c_uint32),
]

GENERIC_MAPPING = struct__GENERIC_MAPPING
PGENERIC_MAPPING = ctypes.POINTER(struct__GENERIC_MAPPING)
class struct__LUID_AND_ATTRIBUTES(Structure):
    pass

struct__LUID_AND_ATTRIBUTES._pack_ = 1 # source:False
struct__LUID_AND_ATTRIBUTES._fields_ = [
    ('Luid', LUID),
    ('Attributes', ctypes.c_uint32),
]

LUID_AND_ATTRIBUTES = struct__LUID_AND_ATTRIBUTES
PLUID_AND_ATTRIBUTES = ctypes.POINTER(struct__LUID_AND_ATTRIBUTES)
LUID_AND_ATTRIBUTES_ARRAY = struct__LUID_AND_ATTRIBUTES * 1
PLUID_AND_ATTRIBUTES_ARRAY = ctypes.POINTER(struct__LUID_AND_ATTRIBUTES * 1)
class struct__SID_IDENTIFIER_AUTHORITY(Structure):
    pass

struct__SID_IDENTIFIER_AUTHORITY._pack_ = 1 # source:False
struct__SID_IDENTIFIER_AUTHORITY._fields_ = [
    ('Value', ctypes.c_ubyte * 6),
]

SID_IDENTIFIER_AUTHORITY = struct__SID_IDENTIFIER_AUTHORITY
PSID_IDENTIFIER_AUTHORITY = ctypes.POINTER(struct__SID_IDENTIFIER_AUTHORITY)
class struct__SID(Structure):
    pass

struct__SID._pack_ = 1 # source:False
struct__SID._fields_ = [
    ('Revision', ctypes.c_ubyte),
    ('SubAuthorityCount', ctypes.c_ubyte),
    ('IdentifierAuthority', SID_IDENTIFIER_AUTHORITY),
    ('SubAuthority', ctypes.c_uint32 * 1),
]

SID = struct__SID
PISID = ctypes.POINTER(struct__SID)
class union__SE_SID(Union):
    pass

union__SE_SID._pack_ = 1 # source:False
union__SE_SID._fields_ = [
    ('Sid', SID),
    ('Buffer', ctypes.c_ubyte * 68),
]

SE_SID = union__SE_SID
PSE_SID = ctypes.POINTER(union__SE_SID)

# values for enumeration '_SID_NAME_USE'
_SID_NAME_USE__enumvalues = {
    1: 'SidTypeUser',
    2: 'SidTypeGroup',
    3: 'SidTypeDomain',
    4: 'SidTypeAlias',
    5: 'SidTypeWellKnownGroup',
    6: 'SidTypeDeletedAccount',
    7: 'SidTypeInvalid',
    8: 'SidTypeUnknown',
    9: 'SidTypeComputer',
    10: 'SidTypeLabel',
    11: 'SidTypeLogonSession',
}
SidTypeUser = 1
SidTypeGroup = 2
SidTypeDomain = 3
SidTypeAlias = 4
SidTypeWellKnownGroup = 5
SidTypeDeletedAccount = 6
SidTypeInvalid = 7
SidTypeUnknown = 8
SidTypeComputer = 9
SidTypeLabel = 10
SidTypeLogonSession = 11
_SID_NAME_USE = ctypes.c_uint32 # enum
SID_NAME_USE = _SID_NAME_USE
SID_NAME_USE__enumvalues = _SID_NAME_USE__enumvalues
PSID_NAME_USE = ctypes.POINTER(_SID_NAME_USE)
class struct__SID_AND_ATTRIBUTES(Structure):
    pass

struct__SID_AND_ATTRIBUTES._pack_ = 1 # source:False
struct__SID_AND_ATTRIBUTES._fields_ = [
    ('Sid', ctypes.POINTER(None)),
    ('Attributes', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

SID_AND_ATTRIBUTES = struct__SID_AND_ATTRIBUTES
PSID_AND_ATTRIBUTES = ctypes.POINTER(struct__SID_AND_ATTRIBUTES)
SID_AND_ATTRIBUTES_ARRAY = struct__SID_AND_ATTRIBUTES * 1
PSID_AND_ATTRIBUTES_ARRAY = ctypes.POINTER(struct__SID_AND_ATTRIBUTES * 1)
SID_HASH_ENTRY = ctypes.c_uint64
PSID_HASH_ENTRY = ctypes.POINTER(ctypes.c_uint64)
class struct__SID_AND_ATTRIBUTES_HASH(Structure):
    pass

struct__SID_AND_ATTRIBUTES_HASH._pack_ = 1 # source:False
struct__SID_AND_ATTRIBUTES_HASH._fields_ = [
    ('SidCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('SidAttr', ctypes.POINTER(struct__SID_AND_ATTRIBUTES)),
    ('Hash', ctypes.c_uint64 * 32),
]

SID_AND_ATTRIBUTES_HASH = struct__SID_AND_ATTRIBUTES_HASH
PSID_AND_ATTRIBUTES_HASH = ctypes.POINTER(struct__SID_AND_ATTRIBUTES_HASH)

# values for enumeration 'WELL_KNOWN_SID_TYPE'
WELL_KNOWN_SID_TYPE__enumvalues = {
    0: 'WinNullSid',
    1: 'WinWorldSid',
    2: 'WinLocalSid',
    3: 'WinCreatorOwnerSid',
    4: 'WinCreatorGroupSid',
    5: 'WinCreatorOwnerServerSid',
    6: 'WinCreatorGroupServerSid',
    7: 'WinNtAuthoritySid',
    8: 'WinDialupSid',
    9: 'WinNetworkSid',
    10: 'WinBatchSid',
    11: 'WinInteractiveSid',
    12: 'WinServiceSid',
    13: 'WinAnonymousSid',
    14: 'WinProxySid',
    15: 'WinEnterpriseControllersSid',
    16: 'WinSelfSid',
    17: 'WinAuthenticatedUserSid',
    18: 'WinRestrictedCodeSid',
    19: 'WinTerminalServerSid',
    20: 'WinRemoteLogonIdSid',
    21: 'WinLogonIdsSid',
    22: 'WinLocalSystemSid',
    23: 'WinLocalServiceSid',
    24: 'WinNetworkServiceSid',
    25: 'WinBuiltinDomainSid',
    26: 'WinBuiltinAdministratorsSid',
    27: 'WinBuiltinUsersSid',
    28: 'WinBuiltinGuestsSid',
    29: 'WinBuiltinPowerUsersSid',
    30: 'WinBuiltinAccountOperatorsSid',
    31: 'WinBuiltinSystemOperatorsSid',
    32: 'WinBuiltinPrintOperatorsSid',
    33: 'WinBuiltinBackupOperatorsSid',
    34: 'WinBuiltinReplicatorSid',
    35: 'WinBuiltinPreWindows2000CompatibleAccessSid',
    36: 'WinBuiltinRemoteDesktopUsersSid',
    37: 'WinBuiltinNetworkConfigurationOperatorsSid',
    38: 'WinAccountAdministratorSid',
    39: 'WinAccountGuestSid',
    40: 'WinAccountKrbtgtSid',
    41: 'WinAccountDomainAdminsSid',
    42: 'WinAccountDomainUsersSid',
    43: 'WinAccountDomainGuestsSid',
    44: 'WinAccountComputersSid',
    45: 'WinAccountControllersSid',
    46: 'WinAccountCertAdminsSid',
    47: 'WinAccountSchemaAdminsSid',
    48: 'WinAccountEnterpriseAdminsSid',
    49: 'WinAccountPolicyAdminsSid',
    50: 'WinAccountRasAndIasServersSid',
    51: 'WinNTLMAuthenticationSid',
    52: 'WinDigestAuthenticationSid',
    53: 'WinSChannelAuthenticationSid',
    54: 'WinThisOrganizationSid',
    55: 'WinOtherOrganizationSid',
    56: 'WinBuiltinIncomingForestTrustBuildersSid',
    57: 'WinBuiltinPerfMonitoringUsersSid',
    58: 'WinBuiltinPerfLoggingUsersSid',
    59: 'WinBuiltinAuthorizationAccessSid',
    60: 'WinBuiltinTerminalServerLicenseServersSid',
    61: 'WinBuiltinDCOMUsersSid',
    62: 'WinBuiltinIUsersSid',
    63: 'WinIUserSid',
    64: 'WinBuiltinCryptoOperatorsSid',
    65: 'WinUntrustedLabelSid',
    66: 'WinLowLabelSid',
    67: 'WinMediumLabelSid',
    68: 'WinHighLabelSid',
    69: 'WinSystemLabelSid',
    70: 'WinWriteRestrictedCodeSid',
    71: 'WinCreatorOwnerRightsSid',
    72: 'WinCacheablePrincipalsGroupSid',
    73: 'WinNonCacheablePrincipalsGroupSid',
    74: 'WinEnterpriseReadonlyControllersSid',
    75: 'WinAccountReadonlyControllersSid',
    76: 'WinBuiltinEventLogReadersGroup',
    77: 'WinNewEnterpriseReadonlyControllersSid',
    78: 'WinBuiltinCertSvcDComAccessGroup',
    79: 'WinMediumPlusLabelSid',
    80: 'WinLocalLogonSid',
    81: 'WinConsoleLogonSid',
    82: 'WinThisOrganizationCertificateSid',
    83: 'WinApplicationPackageAuthoritySid',
    84: 'WinBuiltinAnyPackageSid',
    85: 'WinCapabilityInternetClientSid',
    86: 'WinCapabilityInternetClientServerSid',
    87: 'WinCapabilityPrivateNetworkClientServerSid',
    88: 'WinCapabilityPicturesLibrarySid',
    89: 'WinCapabilityVideosLibrarySid',
    90: 'WinCapabilityMusicLibrarySid',
    91: 'WinCapabilityDocumentsLibrarySid',
    92: 'WinCapabilitySharedUserCertificatesSid',
    93: 'WinCapabilityEnterpriseAuthenticationSid',
    94: 'WinCapabilityRemovableStorageSid',
    95: 'WinBuiltinRDSRemoteAccessServersSid',
    96: 'WinBuiltinRDSEndpointServersSid',
    97: 'WinBuiltinRDSManagementServersSid',
    98: 'WinUserModeDriversSid',
    99: 'WinBuiltinHyperVAdminsSid',
    100: 'WinAccountCloneableControllersSid',
    101: 'WinBuiltinAccessControlAssistanceOperatorsSid',
    102: 'WinBuiltinRemoteManagementUsersSid',
    103: 'WinAuthenticationAuthorityAssertedSid',
    104: 'WinAuthenticationServiceAssertedSid',
    105: 'WinLocalAccountSid',
    106: 'WinLocalAccountAndAdministratorSid',
    107: 'WinAccountProtectedUsersSid',
    108: 'WinCapabilityAppointmentsSid',
    109: 'WinCapabilityContactsSid',
    110: 'WinAccountDefaultSystemManagedSid',
    111: 'WinBuiltinDefaultSystemManagedGroupSid',
    112: 'WinBuiltinStorageReplicaAdminsSid',
    113: 'WinAccountKeyAdminsSid',
    114: 'WinAccountEnterpriseKeyAdminsSid',
    115: 'WinAuthenticationKeyTrustSid',
    116: 'WinAuthenticationKeyPropertyMFASid',
    117: 'WinAuthenticationKeyPropertyAttestationSid',
    118: 'WinAuthenticationFreshKeyAuthSid',
    119: 'WinBuiltinDeviceOwnersSid',
}
WinNullSid = 0
WinWorldSid = 1
WinLocalSid = 2
WinCreatorOwnerSid = 3
WinCreatorGroupSid = 4
WinCreatorOwnerServerSid = 5
WinCreatorGroupServerSid = 6
WinNtAuthoritySid = 7
WinDialupSid = 8
WinNetworkSid = 9
WinBatchSid = 10
WinInteractiveSid = 11
WinServiceSid = 12
WinAnonymousSid = 13
WinProxySid = 14
WinEnterpriseControllersSid = 15
WinSelfSid = 16
WinAuthenticatedUserSid = 17
WinRestrictedCodeSid = 18
WinTerminalServerSid = 19
WinRemoteLogonIdSid = 20
WinLogonIdsSid = 21
WinLocalSystemSid = 22
WinLocalServiceSid = 23
WinNetworkServiceSid = 24
WinBuiltinDomainSid = 25
WinBuiltinAdministratorsSid = 26
WinBuiltinUsersSid = 27
WinBuiltinGuestsSid = 28
WinBuiltinPowerUsersSid = 29
WinBuiltinAccountOperatorsSid = 30
WinBuiltinSystemOperatorsSid = 31
WinBuiltinPrintOperatorsSid = 32
WinBuiltinBackupOperatorsSid = 33
WinBuiltinReplicatorSid = 34
WinBuiltinPreWindows2000CompatibleAccessSid = 35
WinBuiltinRemoteDesktopUsersSid = 36
WinBuiltinNetworkConfigurationOperatorsSid = 37
WinAccountAdministratorSid = 38
WinAccountGuestSid = 39
WinAccountKrbtgtSid = 40
WinAccountDomainAdminsSid = 41
WinAccountDomainUsersSid = 42
WinAccountDomainGuestsSid = 43
WinAccountComputersSid = 44
WinAccountControllersSid = 45
WinAccountCertAdminsSid = 46
WinAccountSchemaAdminsSid = 47
WinAccountEnterpriseAdminsSid = 48
WinAccountPolicyAdminsSid = 49
WinAccountRasAndIasServersSid = 50
WinNTLMAuthenticationSid = 51
WinDigestAuthenticationSid = 52
WinSChannelAuthenticationSid = 53
WinThisOrganizationSid = 54
WinOtherOrganizationSid = 55
WinBuiltinIncomingForestTrustBuildersSid = 56
WinBuiltinPerfMonitoringUsersSid = 57
WinBuiltinPerfLoggingUsersSid = 58
WinBuiltinAuthorizationAccessSid = 59
WinBuiltinTerminalServerLicenseServersSid = 60
WinBuiltinDCOMUsersSid = 61
WinBuiltinIUsersSid = 62
WinIUserSid = 63
WinBuiltinCryptoOperatorsSid = 64
WinUntrustedLabelSid = 65
WinLowLabelSid = 66
WinMediumLabelSid = 67
WinHighLabelSid = 68
WinSystemLabelSid = 69
WinWriteRestrictedCodeSid = 70
WinCreatorOwnerRightsSid = 71
WinCacheablePrincipalsGroupSid = 72
WinNonCacheablePrincipalsGroupSid = 73
WinEnterpriseReadonlyControllersSid = 74
WinAccountReadonlyControllersSid = 75
WinBuiltinEventLogReadersGroup = 76
WinNewEnterpriseReadonlyControllersSid = 77
WinBuiltinCertSvcDComAccessGroup = 78
WinMediumPlusLabelSid = 79
WinLocalLogonSid = 80
WinConsoleLogonSid = 81
WinThisOrganizationCertificateSid = 82
WinApplicationPackageAuthoritySid = 83
WinBuiltinAnyPackageSid = 84
WinCapabilityInternetClientSid = 85
WinCapabilityInternetClientServerSid = 86
WinCapabilityPrivateNetworkClientServerSid = 87
WinCapabilityPicturesLibrarySid = 88
WinCapabilityVideosLibrarySid = 89
WinCapabilityMusicLibrarySid = 90
WinCapabilityDocumentsLibrarySid = 91
WinCapabilitySharedUserCertificatesSid = 92
WinCapabilityEnterpriseAuthenticationSid = 93
WinCapabilityRemovableStorageSid = 94
WinBuiltinRDSRemoteAccessServersSid = 95
WinBuiltinRDSEndpointServersSid = 96
WinBuiltinRDSManagementServersSid = 97
WinUserModeDriversSid = 98
WinBuiltinHyperVAdminsSid = 99
WinAccountCloneableControllersSid = 100
WinBuiltinAccessControlAssistanceOperatorsSid = 101
WinBuiltinRemoteManagementUsersSid = 102
WinAuthenticationAuthorityAssertedSid = 103
WinAuthenticationServiceAssertedSid = 104
WinLocalAccountSid = 105
WinLocalAccountAndAdministratorSid = 106
WinAccountProtectedUsersSid = 107
WinCapabilityAppointmentsSid = 108
WinCapabilityContactsSid = 109
WinAccountDefaultSystemManagedSid = 110
WinBuiltinDefaultSystemManagedGroupSid = 111
WinBuiltinStorageReplicaAdminsSid = 112
WinAccountKeyAdminsSid = 113
WinAccountEnterpriseKeyAdminsSid = 114
WinAuthenticationKeyTrustSid = 115
WinAuthenticationKeyPropertyMFASid = 116
WinAuthenticationKeyPropertyAttestationSid = 117
WinAuthenticationFreshKeyAuthSid = 118
WinBuiltinDeviceOwnersSid = 119
WELL_KNOWN_SID_TYPE = ctypes.c_uint32 # enum
class struct__ACL(Structure):
    pass

struct__ACL._pack_ = 1 # source:False
struct__ACL._fields_ = [
    ('AclRevision', ctypes.c_ubyte),
    ('Sbz1', ctypes.c_ubyte),
    ('AclSize', ctypes.c_uint16),
    ('AceCount', ctypes.c_uint16),
    ('Sbz2', ctypes.c_uint16),
]

ACL = struct__ACL
PACL = ctypes.POINTER(struct__ACL)
class struct__ACE_HEADER(Structure):
    pass

struct__ACE_HEADER._pack_ = 1 # source:False
struct__ACE_HEADER._fields_ = [
    ('AceType', ctypes.c_ubyte),
    ('AceFlags', ctypes.c_ubyte),
    ('AceSize', ctypes.c_uint16),
]

ACE_HEADER = struct__ACE_HEADER
PACE_HEADER = ctypes.POINTER(struct__ACE_HEADER)
class struct__ACCESS_ALLOWED_ACE(Structure):
    pass

struct__ACCESS_ALLOWED_ACE._pack_ = 1 # source:False
struct__ACCESS_ALLOWED_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('SidStart', ctypes.c_uint32),
]

ACCESS_ALLOWED_ACE = struct__ACCESS_ALLOWED_ACE
PACCESS_ALLOWED_ACE = ctypes.POINTER(struct__ACCESS_ALLOWED_ACE)
class struct__ACCESS_DENIED_ACE(Structure):
    pass

struct__ACCESS_DENIED_ACE._pack_ = 1 # source:False
struct__ACCESS_DENIED_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('SidStart', ctypes.c_uint32),
]

ACCESS_DENIED_ACE = struct__ACCESS_DENIED_ACE
PACCESS_DENIED_ACE = ctypes.POINTER(struct__ACCESS_DENIED_ACE)
class struct__SYSTEM_AUDIT_ACE(Structure):
    pass

struct__SYSTEM_AUDIT_ACE._pack_ = 1 # source:False
struct__SYSTEM_AUDIT_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('SidStart', ctypes.c_uint32),
]

SYSTEM_AUDIT_ACE = struct__SYSTEM_AUDIT_ACE
PSYSTEM_AUDIT_ACE = ctypes.POINTER(struct__SYSTEM_AUDIT_ACE)
class struct__SYSTEM_ALARM_ACE(Structure):
    pass

struct__SYSTEM_ALARM_ACE._pack_ = 1 # source:False
struct__SYSTEM_ALARM_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('SidStart', ctypes.c_uint32),
]

SYSTEM_ALARM_ACE = struct__SYSTEM_ALARM_ACE
PSYSTEM_ALARM_ACE = ctypes.POINTER(struct__SYSTEM_ALARM_ACE)
class struct__SYSTEM_RESOURCE_ATTRIBUTE_ACE(Structure):
    pass

struct__SYSTEM_RESOURCE_ATTRIBUTE_ACE._pack_ = 1 # source:False
struct__SYSTEM_RESOURCE_ATTRIBUTE_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('SidStart', ctypes.c_uint32),
]

SYSTEM_RESOURCE_ATTRIBUTE_ACE = struct__SYSTEM_RESOURCE_ATTRIBUTE_ACE
PSYSTEM_RESOURCE_ATTRIBUTE_ACE = ctypes.POINTER(struct__SYSTEM_RESOURCE_ATTRIBUTE_ACE)
class struct__SYSTEM_SCOPED_POLICY_ID_ACE(Structure):
    pass

struct__SYSTEM_SCOPED_POLICY_ID_ACE._pack_ = 1 # source:False
struct__SYSTEM_SCOPED_POLICY_ID_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('SidStart', ctypes.c_uint32),
]

SYSTEM_SCOPED_POLICY_ID_ACE = struct__SYSTEM_SCOPED_POLICY_ID_ACE
PSYSTEM_SCOPED_POLICY_ID_ACE = ctypes.POINTER(struct__SYSTEM_SCOPED_POLICY_ID_ACE)
class struct__SYSTEM_MANDATORY_LABEL_ACE(Structure):
    pass

struct__SYSTEM_MANDATORY_LABEL_ACE._pack_ = 1 # source:False
struct__SYSTEM_MANDATORY_LABEL_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('SidStart', ctypes.c_uint32),
]

SYSTEM_MANDATORY_LABEL_ACE = struct__SYSTEM_MANDATORY_LABEL_ACE
PSYSTEM_MANDATORY_LABEL_ACE = ctypes.POINTER(struct__SYSTEM_MANDATORY_LABEL_ACE)
class struct__SYSTEM_PROCESS_TRUST_LABEL_ACE(Structure):
    pass

struct__SYSTEM_PROCESS_TRUST_LABEL_ACE._pack_ = 1 # source:False
struct__SYSTEM_PROCESS_TRUST_LABEL_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('SidStart', ctypes.c_uint32),
]

SYSTEM_PROCESS_TRUST_LABEL_ACE = struct__SYSTEM_PROCESS_TRUST_LABEL_ACE
PSYSTEM_PROCESS_TRUST_LABEL_ACE = ctypes.POINTER(struct__SYSTEM_PROCESS_TRUST_LABEL_ACE)
class struct__SYSTEM_ACCESS_FILTER_ACE(Structure):
    pass

struct__SYSTEM_ACCESS_FILTER_ACE._pack_ = 1 # source:False
struct__SYSTEM_ACCESS_FILTER_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('SidStart', ctypes.c_uint32),
]

SYSTEM_ACCESS_FILTER_ACE = struct__SYSTEM_ACCESS_FILTER_ACE
PSYSTEM_ACCESS_FILTER_ACE = ctypes.POINTER(struct__SYSTEM_ACCESS_FILTER_ACE)
class struct__ACCESS_ALLOWED_OBJECT_ACE(Structure):
    pass

struct__ACCESS_ALLOWED_OBJECT_ACE._pack_ = 1 # source:False
struct__ACCESS_ALLOWED_OBJECT_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('ObjectType', GUID),
    ('InheritedObjectType', GUID),
    ('SidStart', ctypes.c_uint32),
]

ACCESS_ALLOWED_OBJECT_ACE = struct__ACCESS_ALLOWED_OBJECT_ACE
PACCESS_ALLOWED_OBJECT_ACE = ctypes.POINTER(struct__ACCESS_ALLOWED_OBJECT_ACE)
class struct__ACCESS_DENIED_OBJECT_ACE(Structure):
    pass

struct__ACCESS_DENIED_OBJECT_ACE._pack_ = 1 # source:False
struct__ACCESS_DENIED_OBJECT_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('ObjectType', GUID),
    ('InheritedObjectType', GUID),
    ('SidStart', ctypes.c_uint32),
]

ACCESS_DENIED_OBJECT_ACE = struct__ACCESS_DENIED_OBJECT_ACE
PACCESS_DENIED_OBJECT_ACE = ctypes.POINTER(struct__ACCESS_DENIED_OBJECT_ACE)
class struct__SYSTEM_AUDIT_OBJECT_ACE(Structure):
    pass

struct__SYSTEM_AUDIT_OBJECT_ACE._pack_ = 1 # source:False
struct__SYSTEM_AUDIT_OBJECT_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('ObjectType', GUID),
    ('InheritedObjectType', GUID),
    ('SidStart', ctypes.c_uint32),
]

SYSTEM_AUDIT_OBJECT_ACE = struct__SYSTEM_AUDIT_OBJECT_ACE
PSYSTEM_AUDIT_OBJECT_ACE = ctypes.POINTER(struct__SYSTEM_AUDIT_OBJECT_ACE)
class struct__SYSTEM_ALARM_OBJECT_ACE(Structure):
    pass

struct__SYSTEM_ALARM_OBJECT_ACE._pack_ = 1 # source:False
struct__SYSTEM_ALARM_OBJECT_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('ObjectType', GUID),
    ('InheritedObjectType', GUID),
    ('SidStart', ctypes.c_uint32),
]

SYSTEM_ALARM_OBJECT_ACE = struct__SYSTEM_ALARM_OBJECT_ACE
PSYSTEM_ALARM_OBJECT_ACE = ctypes.POINTER(struct__SYSTEM_ALARM_OBJECT_ACE)
class struct__ACCESS_ALLOWED_CALLBACK_ACE(Structure):
    pass

struct__ACCESS_ALLOWED_CALLBACK_ACE._pack_ = 1 # source:False
struct__ACCESS_ALLOWED_CALLBACK_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('SidStart', ctypes.c_uint32),
]

ACCESS_ALLOWED_CALLBACK_ACE = struct__ACCESS_ALLOWED_CALLBACK_ACE
PACCESS_ALLOWED_CALLBACK_ACE = ctypes.POINTER(struct__ACCESS_ALLOWED_CALLBACK_ACE)
class struct__ACCESS_DENIED_CALLBACK_ACE(Structure):
    pass

struct__ACCESS_DENIED_CALLBACK_ACE._pack_ = 1 # source:False
struct__ACCESS_DENIED_CALLBACK_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('SidStart', ctypes.c_uint32),
]

ACCESS_DENIED_CALLBACK_ACE = struct__ACCESS_DENIED_CALLBACK_ACE
PACCESS_DENIED_CALLBACK_ACE = ctypes.POINTER(struct__ACCESS_DENIED_CALLBACK_ACE)
class struct__SYSTEM_AUDIT_CALLBACK_ACE(Structure):
    pass

struct__SYSTEM_AUDIT_CALLBACK_ACE._pack_ = 1 # source:False
struct__SYSTEM_AUDIT_CALLBACK_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('SidStart', ctypes.c_uint32),
]

SYSTEM_AUDIT_CALLBACK_ACE = struct__SYSTEM_AUDIT_CALLBACK_ACE
PSYSTEM_AUDIT_CALLBACK_ACE = ctypes.POINTER(struct__SYSTEM_AUDIT_CALLBACK_ACE)
class struct__SYSTEM_ALARM_CALLBACK_ACE(Structure):
    pass

struct__SYSTEM_ALARM_CALLBACK_ACE._pack_ = 1 # source:False
struct__SYSTEM_ALARM_CALLBACK_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('SidStart', ctypes.c_uint32),
]

SYSTEM_ALARM_CALLBACK_ACE = struct__SYSTEM_ALARM_CALLBACK_ACE
PSYSTEM_ALARM_CALLBACK_ACE = ctypes.POINTER(struct__SYSTEM_ALARM_CALLBACK_ACE)
class struct__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE(Structure):
    pass

struct__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE._pack_ = 1 # source:False
struct__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('ObjectType', GUID),
    ('InheritedObjectType', GUID),
    ('SidStart', ctypes.c_uint32),
]

ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = struct__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
PACCESS_ALLOWED_CALLBACK_OBJECT_ACE = ctypes.POINTER(struct__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE)
class struct__ACCESS_DENIED_CALLBACK_OBJECT_ACE(Structure):
    pass

struct__ACCESS_DENIED_CALLBACK_OBJECT_ACE._pack_ = 1 # source:False
struct__ACCESS_DENIED_CALLBACK_OBJECT_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('ObjectType', GUID),
    ('InheritedObjectType', GUID),
    ('SidStart', ctypes.c_uint32),
]

ACCESS_DENIED_CALLBACK_OBJECT_ACE = struct__ACCESS_DENIED_CALLBACK_OBJECT_ACE
PACCESS_DENIED_CALLBACK_OBJECT_ACE = ctypes.POINTER(struct__ACCESS_DENIED_CALLBACK_OBJECT_ACE)
class struct__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE(Structure):
    pass

struct__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE._pack_ = 1 # source:False
struct__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('ObjectType', GUID),
    ('InheritedObjectType', GUID),
    ('SidStart', ctypes.c_uint32),
]

SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = struct__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = ctypes.POINTER(struct__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE)
class struct__SYSTEM_ALARM_CALLBACK_OBJECT_ACE(Structure):
    pass

struct__SYSTEM_ALARM_CALLBACK_OBJECT_ACE._pack_ = 1 # source:False
struct__SYSTEM_ALARM_CALLBACK_OBJECT_ACE._fields_ = [
    ('Header', ACE_HEADER),
    ('Mask', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('ObjectType', GUID),
    ('InheritedObjectType', GUID),
    ('SidStart', ctypes.c_uint32),
]

SYSTEM_ALARM_CALLBACK_OBJECT_ACE = struct__SYSTEM_ALARM_CALLBACK_OBJECT_ACE
PSYSTEM_ALARM_CALLBACK_OBJECT_ACE = ctypes.POINTER(struct__SYSTEM_ALARM_CALLBACK_OBJECT_ACE)

# values for enumeration '_ACL_INFORMATION_CLASS'
_ACL_INFORMATION_CLASS__enumvalues = {
    1: 'AclRevisionInformation',
    2: 'AclSizeInformation',
}
AclRevisionInformation = 1
AclSizeInformation = 2
_ACL_INFORMATION_CLASS = ctypes.c_uint32 # enum
ACL_INFORMATION_CLASS = _ACL_INFORMATION_CLASS
ACL_INFORMATION_CLASS__enumvalues = _ACL_INFORMATION_CLASS__enumvalues
class struct__ACL_REVISION_INFORMATION(Structure):
    pass

struct__ACL_REVISION_INFORMATION._pack_ = 1 # source:False
struct__ACL_REVISION_INFORMATION._fields_ = [
    ('AclRevision', ctypes.c_uint32),
]

ACL_REVISION_INFORMATION = struct__ACL_REVISION_INFORMATION
PACL_REVISION_INFORMATION = ctypes.POINTER(struct__ACL_REVISION_INFORMATION)
class struct__ACL_SIZE_INFORMATION(Structure):
    pass

struct__ACL_SIZE_INFORMATION._pack_ = 1 # source:False
struct__ACL_SIZE_INFORMATION._fields_ = [
    ('AceCount', ctypes.c_uint32),
    ('AclBytesInUse', ctypes.c_uint32),
    ('AclBytesFree', ctypes.c_uint32),
]

ACL_SIZE_INFORMATION = struct__ACL_SIZE_INFORMATION
PACL_SIZE_INFORMATION = ctypes.POINTER(struct__ACL_SIZE_INFORMATION)
SECURITY_DESCRIPTOR_CONTROL = ctypes.c_uint16
PSECURITY_DESCRIPTOR_CONTROL = ctypes.POINTER(ctypes.c_uint16)
class struct__SECURITY_DESCRIPTOR_RELATIVE(Structure):
    pass

struct__SECURITY_DESCRIPTOR_RELATIVE._pack_ = 1 # source:False
struct__SECURITY_DESCRIPTOR_RELATIVE._fields_ = [
    ('Revision', ctypes.c_ubyte),
    ('Sbz1', ctypes.c_ubyte),
    ('Control', ctypes.c_uint16),
    ('Owner', ctypes.c_uint32),
    ('Group', ctypes.c_uint32),
    ('Sacl', ctypes.c_uint32),
    ('Dacl', ctypes.c_uint32),
]

SECURITY_DESCRIPTOR_RELATIVE = struct__SECURITY_DESCRIPTOR_RELATIVE
PISECURITY_DESCRIPTOR_RELATIVE = ctypes.POINTER(struct__SECURITY_DESCRIPTOR_RELATIVE)
class struct__SECURITY_DESCRIPTOR(Structure):
    pass

struct__SECURITY_DESCRIPTOR._pack_ = 1 # source:False
struct__SECURITY_DESCRIPTOR._fields_ = [
    ('Revision', ctypes.c_ubyte),
    ('Sbz1', ctypes.c_ubyte),
    ('Control', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('Owner', ctypes.POINTER(None)),
    ('Group', ctypes.POINTER(None)),
    ('Sacl', ctypes.POINTER(struct__ACL)),
    ('Dacl', ctypes.POINTER(struct__ACL)),
]

SECURITY_DESCRIPTOR = struct__SECURITY_DESCRIPTOR
PISECURITY_DESCRIPTOR = ctypes.POINTER(struct__SECURITY_DESCRIPTOR)
class struct__SECURITY_OBJECT_AI_PARAMS(Structure):
    pass

struct__SECURITY_OBJECT_AI_PARAMS._pack_ = 1 # source:False
struct__SECURITY_OBJECT_AI_PARAMS._fields_ = [
    ('Size', ctypes.c_uint32),
    ('ConstraintMask', ctypes.c_uint32),
]

SECURITY_OBJECT_AI_PARAMS = struct__SECURITY_OBJECT_AI_PARAMS
PSECURITY_OBJECT_AI_PARAMS = ctypes.POINTER(struct__SECURITY_OBJECT_AI_PARAMS)
class struct__OBJECT_TYPE_LIST(Structure):
    pass

struct__OBJECT_TYPE_LIST._pack_ = 1 # source:False
struct__OBJECT_TYPE_LIST._fields_ = [
    ('Level', ctypes.c_uint16),
    ('Sbz', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ObjectType', ctypes.POINTER(struct__GUID)),
]

OBJECT_TYPE_LIST = struct__OBJECT_TYPE_LIST
POBJECT_TYPE_LIST = ctypes.POINTER(struct__OBJECT_TYPE_LIST)

# values for enumeration '_AUDIT_EVENT_TYPE'
_AUDIT_EVENT_TYPE__enumvalues = {
    0: 'AuditEventObjectAccess',
    1: 'AuditEventDirectoryServiceAccess',
}
AuditEventObjectAccess = 0
AuditEventDirectoryServiceAccess = 1
_AUDIT_EVENT_TYPE = ctypes.c_uint32 # enum
AUDIT_EVENT_TYPE = _AUDIT_EVENT_TYPE
AUDIT_EVENT_TYPE__enumvalues = _AUDIT_EVENT_TYPE__enumvalues
PAUDIT_EVENT_TYPE = ctypes.POINTER(_AUDIT_EVENT_TYPE)
class struct__PRIVILEGE_SET(Structure):
    pass

struct__PRIVILEGE_SET._pack_ = 1 # source:False
struct__PRIVILEGE_SET._fields_ = [
    ('PrivilegeCount', ctypes.c_uint32),
    ('Control', ctypes.c_uint32),
    ('Privilege', struct__LUID_AND_ATTRIBUTES * 1),
]

PRIVILEGE_SET = struct__PRIVILEGE_SET
PPRIVILEGE_SET = ctypes.POINTER(struct__PRIVILEGE_SET)

# values for enumeration '_ACCESS_REASON_TYPE'
_ACCESS_REASON_TYPE__enumvalues = {
    0: 'AccessReasonNone',
    65536: 'AccessReasonAllowedAce',
    131072: 'AccessReasonDeniedAce',
    196608: 'AccessReasonAllowedParentAce',
    262144: 'AccessReasonDeniedParentAce',
    327680: 'AccessReasonNotGrantedByCape',
    393216: 'AccessReasonNotGrantedByParentCape',
    458752: 'AccessReasonNotGrantedToAppContainer',
    1048576: 'AccessReasonMissingPrivilege',
    2097152: 'AccessReasonFromPrivilege',
    3145728: 'AccessReasonIntegrityLevel',
    4194304: 'AccessReasonOwnership',
    5242880: 'AccessReasonNullDacl',
    6291456: 'AccessReasonEmptyDacl',
    7340032: 'AccessReasonNoSD',
    8388608: 'AccessReasonNoGrant',
    9437184: 'AccessReasonTrustLabel',
    10485760: 'AccessReasonFilterAce',
}
AccessReasonNone = 0
AccessReasonAllowedAce = 65536
AccessReasonDeniedAce = 131072
AccessReasonAllowedParentAce = 196608
AccessReasonDeniedParentAce = 262144
AccessReasonNotGrantedByCape = 327680
AccessReasonNotGrantedByParentCape = 393216
AccessReasonNotGrantedToAppContainer = 458752
AccessReasonMissingPrivilege = 1048576
AccessReasonFromPrivilege = 2097152
AccessReasonIntegrityLevel = 3145728
AccessReasonOwnership = 4194304
AccessReasonNullDacl = 5242880
AccessReasonEmptyDacl = 6291456
AccessReasonNoSD = 7340032
AccessReasonNoGrant = 8388608
AccessReasonTrustLabel = 9437184
AccessReasonFilterAce = 10485760
_ACCESS_REASON_TYPE = ctypes.c_uint32 # enum
ACCESS_REASON_TYPE = _ACCESS_REASON_TYPE
ACCESS_REASON_TYPE__enumvalues = _ACCESS_REASON_TYPE__enumvalues
ACCESS_REASON = ctypes.c_uint32
class struct__ACCESS_REASONS(Structure):
    pass

struct__ACCESS_REASONS._pack_ = 1 # source:False
struct__ACCESS_REASONS._fields_ = [
    ('Data', ctypes.c_uint32 * 32),
]

ACCESS_REASONS = struct__ACCESS_REASONS
PACCESS_REASONS = ctypes.POINTER(struct__ACCESS_REASONS)
class struct__SE_SECURITY_DESCRIPTOR(Structure):
    pass

struct__SE_SECURITY_DESCRIPTOR._pack_ = 1 # source:False
struct__SE_SECURITY_DESCRIPTOR._fields_ = [
    ('Size', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('SecurityDescriptor', ctypes.POINTER(None)),
]

SE_SECURITY_DESCRIPTOR = struct__SE_SECURITY_DESCRIPTOR
PSE_SECURITY_DESCRIPTOR = ctypes.POINTER(struct__SE_SECURITY_DESCRIPTOR)
class struct__SE_ACCESS_REQUEST(Structure):
    pass

struct__SE_ACCESS_REQUEST._pack_ = 1 # source:False
struct__SE_ACCESS_REQUEST._fields_ = [
    ('Size', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('SeSecurityDescriptor', ctypes.POINTER(struct__SE_SECURITY_DESCRIPTOR)),
    ('DesiredAccess', ctypes.c_uint32),
    ('PreviouslyGrantedAccess', ctypes.c_uint32),
    ('PrincipalSelfSid', ctypes.POINTER(None)),
    ('GenericMapping', ctypes.POINTER(struct__GENERIC_MAPPING)),
    ('ObjectTypeListCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('ObjectTypeList', ctypes.POINTER(struct__OBJECT_TYPE_LIST)),
]

SE_ACCESS_REQUEST = struct__SE_ACCESS_REQUEST
PSE_ACCESS_REQUEST = ctypes.POINTER(struct__SE_ACCESS_REQUEST)
class struct__SE_ACCESS_REPLY(Structure):
    pass

struct__SE_ACCESS_REPLY._pack_ = 1 # source:False
struct__SE_ACCESS_REPLY._fields_ = [
    ('Size', ctypes.c_uint32),
    ('ResultListCount', ctypes.c_uint32),
    ('GrantedAccess', ctypes.POINTER(ctypes.c_uint32)),
    ('AccessStatus', ctypes.POINTER(ctypes.c_uint32)),
    ('AccessReason', ctypes.POINTER(struct__ACCESS_REASONS)),
    ('Privileges', ctypes.POINTER(ctypes.POINTER(struct__PRIVILEGE_SET))),
]

SE_ACCESS_REPLY = struct__SE_ACCESS_REPLY
PSE_ACCESS_REPLY = ctypes.POINTER(struct__SE_ACCESS_REPLY)

# values for enumeration '_SECURITY_IMPERSONATION_LEVEL'
_SECURITY_IMPERSONATION_LEVEL__enumvalues = {
    0: 'SecurityAnonymous',
    1: 'SecurityIdentification',
    2: 'SecurityImpersonation',
    3: 'SecurityDelegation',
}
SecurityAnonymous = 0
SecurityIdentification = 1
SecurityImpersonation = 2
SecurityDelegation = 3
_SECURITY_IMPERSONATION_LEVEL = ctypes.c_uint32 # enum
SECURITY_IMPERSONATION_LEVEL = _SECURITY_IMPERSONATION_LEVEL
SECURITY_IMPERSONATION_LEVEL__enumvalues = _SECURITY_IMPERSONATION_LEVEL__enumvalues
PSECURITY_IMPERSONATION_LEVEL = ctypes.POINTER(_SECURITY_IMPERSONATION_LEVEL)

# values for enumeration '_TOKEN_TYPE'
_TOKEN_TYPE__enumvalues = {
    1: 'TokenPrimary',
    2: 'TokenImpersonation',
}
TokenPrimary = 1
TokenImpersonation = 2
_TOKEN_TYPE = ctypes.c_uint32 # enum
TOKEN_TYPE = _TOKEN_TYPE
TOKEN_TYPE__enumvalues = _TOKEN_TYPE__enumvalues
PTOKEN_TYPE = ctypes.POINTER(_TOKEN_TYPE)

# values for enumeration '_TOKEN_ELEVATION_TYPE'
_TOKEN_ELEVATION_TYPE__enumvalues = {
    1: 'TokenElevationTypeDefault',
    2: 'TokenElevationTypeFull',
    3: 'TokenElevationTypeLimited',
}
TokenElevationTypeDefault = 1
TokenElevationTypeFull = 2
TokenElevationTypeLimited = 3
_TOKEN_ELEVATION_TYPE = ctypes.c_uint32 # enum
TOKEN_ELEVATION_TYPE = _TOKEN_ELEVATION_TYPE
TOKEN_ELEVATION_TYPE__enumvalues = _TOKEN_ELEVATION_TYPE__enumvalues
PTOKEN_ELEVATION_TYPE = ctypes.POINTER(_TOKEN_ELEVATION_TYPE)

# values for enumeration '_TOKEN_INFORMATION_CLASS'
_TOKEN_INFORMATION_CLASS__enumvalues = {
    1: 'TokenUser',
    2: 'TokenGroups',
    3: 'TokenPrivileges',
    4: 'TokenOwner',
    5: 'TokenPrimaryGroup',
    6: 'TokenDefaultDacl',
    7: 'TokenSource',
    8: 'TokenType',
    9: 'TokenImpersonationLevel',
    10: 'TokenStatistics',
    11: 'TokenRestrictedSids',
    12: 'TokenSessionId',
    13: 'TokenGroupsAndPrivileges',
    14: 'TokenSessionReference',
    15: 'TokenSandBoxInert',
    16: 'TokenAuditPolicy',
    17: 'TokenOrigin',
    18: 'TokenElevationType',
    19: 'TokenLinkedToken',
    20: 'TokenElevation',
    21: 'TokenHasRestrictions',
    22: 'TokenAccessInformation',
    23: 'TokenVirtualizationAllowed',
    24: 'TokenVirtualizationEnabled',
    25: 'TokenIntegrityLevel',
    26: 'TokenUIAccess',
    27: 'TokenMandatoryPolicy',
    28: 'TokenLogonSid',
    29: 'TokenIsAppContainer',
    30: 'TokenCapabilities',
    31: 'TokenAppContainerSid',
    32: 'TokenAppContainerNumber',
    33: 'TokenUserClaimAttributes',
    34: 'TokenDeviceClaimAttributes',
    35: 'TokenRestrictedUserClaimAttributes',
    36: 'TokenRestrictedDeviceClaimAttributes',
    37: 'TokenDeviceGroups',
    38: 'TokenRestrictedDeviceGroups',
    39: 'TokenSecurityAttributes',
    40: 'TokenIsRestricted',
    41: 'TokenProcessTrustLevel',
    42: 'TokenPrivateNameSpace',
    43: 'TokenSingletonAttributes',
    44: 'TokenBnoIsolation',
    45: 'TokenChildProcessFlags',
    46: 'TokenIsLessPrivilegedAppContainer',
    47: 'TokenIsSandboxed',
    48: 'TokenOriginatingProcessTrustLevel',
    49: 'MaxTokenInfoClass',
}
TokenUser = 1
TokenGroups = 2
TokenPrivileges = 3
TokenOwner = 4
TokenPrimaryGroup = 5
TokenDefaultDacl = 6
TokenSource = 7
TokenType = 8
TokenImpersonationLevel = 9
TokenStatistics = 10
TokenRestrictedSids = 11
TokenSessionId = 12
TokenGroupsAndPrivileges = 13
TokenSessionReference = 14
TokenSandBoxInert = 15
TokenAuditPolicy = 16
TokenOrigin = 17
TokenElevationType = 18
TokenLinkedToken = 19
TokenElevation = 20
TokenHasRestrictions = 21
TokenAccessInformation = 22
TokenVirtualizationAllowed = 23
TokenVirtualizationEnabled = 24
TokenIntegrityLevel = 25
TokenUIAccess = 26
TokenMandatoryPolicy = 27
TokenLogonSid = 28
TokenIsAppContainer = 29
TokenCapabilities = 30
TokenAppContainerSid = 31
TokenAppContainerNumber = 32
TokenUserClaimAttributes = 33
TokenDeviceClaimAttributes = 34
TokenRestrictedUserClaimAttributes = 35
TokenRestrictedDeviceClaimAttributes = 36
TokenDeviceGroups = 37
TokenRestrictedDeviceGroups = 38
TokenSecurityAttributes = 39
TokenIsRestricted = 40
TokenProcessTrustLevel = 41
TokenPrivateNameSpace = 42
TokenSingletonAttributes = 43
TokenBnoIsolation = 44
TokenChildProcessFlags = 45
TokenIsLessPrivilegedAppContainer = 46
TokenIsSandboxed = 47
TokenOriginatingProcessTrustLevel = 48
MaxTokenInfoClass = 49
_TOKEN_INFORMATION_CLASS = ctypes.c_uint32 # enum
TOKEN_INFORMATION_CLASS = _TOKEN_INFORMATION_CLASS
TOKEN_INFORMATION_CLASS__enumvalues = _TOKEN_INFORMATION_CLASS__enumvalues
PTOKEN_INFORMATION_CLASS = ctypes.POINTER(_TOKEN_INFORMATION_CLASS)
class struct__TOKEN_USER(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('User', SID_AND_ATTRIBUTES),
     ]

TOKEN_USER = struct__TOKEN_USER
PTOKEN_USER = ctypes.POINTER(struct__TOKEN_USER)
class union__SE_TOKEN_USER___F5E98B4F76FAACF7031760F1DEA230FC(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('TokenUser', TOKEN_USER),
    ('User', SID_AND_ATTRIBUTES),
     ]

class union__SE_TOKEN_USER___5CA11C7D954FC986D58E1B423D36FFDC(Union):
    pass

union__SE_TOKEN_USER___5CA11C7D954FC986D58E1B423D36FFDC._pack_ = 1 # source:False
union__SE_TOKEN_USER___5CA11C7D954FC986D58E1B423D36FFDC._fields_ = [
    ('Sid', SID),
    ('Buffer', ctypes.c_ubyte * 68),
]

class struct__SE_TOKEN_USER(Structure):
    pass

class union__SE_TOKEN_USER_1(Union):
    pass

union__SE_TOKEN_USER_1._pack_ = 1 # source:False
union__SE_TOKEN_USER_1._fields_ = [
    ('Sid', SID),
    ('Buffer', ctypes.c_ubyte * 68),
]

class union__SE_TOKEN_USER_0(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('TokenUser', TOKEN_USER),
    ('User', SID_AND_ATTRIBUTES),
     ]

struct__SE_TOKEN_USER._pack_ = 1 # source:False
struct__SE_TOKEN_USER._anonymous_ = ('_0', '_1',)
struct__SE_TOKEN_USER._fields_ = [
    ('_0', union__SE_TOKEN_USER_0),
    ('_1', union__SE_TOKEN_USER_1),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

SE_TOKEN_USER = struct__SE_TOKEN_USER
PSE_TOKEN_USER = struct__SE_TOKEN_USER
class struct__TOKEN_GROUPS(Structure):
    pass

struct__TOKEN_GROUPS._pack_ = 1 # source:False
struct__TOKEN_GROUPS._fields_ = [
    ('GroupCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('Groups', struct__SID_AND_ATTRIBUTES * 1),
]

TOKEN_GROUPS = struct__TOKEN_GROUPS
PTOKEN_GROUPS = ctypes.POINTER(struct__TOKEN_GROUPS)
class struct__TOKEN_PRIVILEGES(Structure):
    pass

struct__TOKEN_PRIVILEGES._pack_ = 1 # source:False
struct__TOKEN_PRIVILEGES._fields_ = [
    ('PrivilegeCount', ctypes.c_uint32),
    ('Privileges', struct__LUID_AND_ATTRIBUTES * 1),
]

TOKEN_PRIVILEGES = struct__TOKEN_PRIVILEGES
PTOKEN_PRIVILEGES = ctypes.POINTER(struct__TOKEN_PRIVILEGES)
class struct__TOKEN_OWNER(Structure):
    pass

struct__TOKEN_OWNER._pack_ = 1 # source:False
struct__TOKEN_OWNER._fields_ = [
    ('Owner', ctypes.POINTER(None)),
]

TOKEN_OWNER = struct__TOKEN_OWNER
PTOKEN_OWNER = ctypes.POINTER(struct__TOKEN_OWNER)
class struct__TOKEN_PRIMARY_GROUP(Structure):
    pass

struct__TOKEN_PRIMARY_GROUP._pack_ = 1 # source:False
struct__TOKEN_PRIMARY_GROUP._fields_ = [
    ('PrimaryGroup', ctypes.POINTER(None)),
]

TOKEN_PRIMARY_GROUP = struct__TOKEN_PRIMARY_GROUP
PTOKEN_PRIMARY_GROUP = ctypes.POINTER(struct__TOKEN_PRIMARY_GROUP)
class struct__TOKEN_DEFAULT_DACL(Structure):
    pass

struct__TOKEN_DEFAULT_DACL._pack_ = 1 # source:False
struct__TOKEN_DEFAULT_DACL._fields_ = [
    ('DefaultDacl', ctypes.POINTER(struct__ACL)),
]

TOKEN_DEFAULT_DACL = struct__TOKEN_DEFAULT_DACL
PTOKEN_DEFAULT_DACL = ctypes.POINTER(struct__TOKEN_DEFAULT_DACL)
class struct__TOKEN_USER_CLAIMS(Structure):
    pass

struct__TOKEN_USER_CLAIMS._pack_ = 1 # source:False
struct__TOKEN_USER_CLAIMS._fields_ = [
    ('UserClaims', ctypes.POINTER(None)),
]

TOKEN_USER_CLAIMS = struct__TOKEN_USER_CLAIMS
PTOKEN_USER_CLAIMS = ctypes.POINTER(struct__TOKEN_USER_CLAIMS)
class struct__TOKEN_DEVICE_CLAIMS(Structure):
    pass

struct__TOKEN_DEVICE_CLAIMS._pack_ = 1 # source:False
struct__TOKEN_DEVICE_CLAIMS._fields_ = [
    ('DeviceClaims', ctypes.POINTER(None)),
]

TOKEN_DEVICE_CLAIMS = struct__TOKEN_DEVICE_CLAIMS
PTOKEN_DEVICE_CLAIMS = ctypes.POINTER(struct__TOKEN_DEVICE_CLAIMS)
class struct__TOKEN_GROUPS_AND_PRIVILEGES(Structure):
    pass

struct__TOKEN_GROUPS_AND_PRIVILEGES._pack_ = 1 # source:False
struct__TOKEN_GROUPS_AND_PRIVILEGES._fields_ = [
    ('SidCount', ctypes.c_uint32),
    ('SidLength', ctypes.c_uint32),
    ('Sids', ctypes.POINTER(struct__SID_AND_ATTRIBUTES)),
    ('RestrictedSidCount', ctypes.c_uint32),
    ('RestrictedSidLength', ctypes.c_uint32),
    ('RestrictedSids', ctypes.POINTER(struct__SID_AND_ATTRIBUTES)),
    ('PrivilegeCount', ctypes.c_uint32),
    ('PrivilegeLength', ctypes.c_uint32),
    ('Privileges', ctypes.POINTER(struct__LUID_AND_ATTRIBUTES)),
    ('AuthenticationId', LUID),
]

TOKEN_GROUPS_AND_PRIVILEGES = struct__TOKEN_GROUPS_AND_PRIVILEGES
PTOKEN_GROUPS_AND_PRIVILEGES = ctypes.POINTER(struct__TOKEN_GROUPS_AND_PRIVILEGES)
class struct__TOKEN_LINKED_TOKEN(Structure):
    pass

struct__TOKEN_LINKED_TOKEN._pack_ = 1 # source:False
struct__TOKEN_LINKED_TOKEN._fields_ = [
    ('LinkedToken', ctypes.POINTER(None)),
]

TOKEN_LINKED_TOKEN = struct__TOKEN_LINKED_TOKEN
PTOKEN_LINKED_TOKEN = ctypes.POINTER(struct__TOKEN_LINKED_TOKEN)
class struct__TOKEN_ELEVATION(Structure):
    pass

struct__TOKEN_ELEVATION._pack_ = 1 # source:False
struct__TOKEN_ELEVATION._fields_ = [
    ('TokenIsElevated', ctypes.c_uint32),
]

TOKEN_ELEVATION = struct__TOKEN_ELEVATION
PTOKEN_ELEVATION = ctypes.POINTER(struct__TOKEN_ELEVATION)
class struct__TOKEN_MANDATORY_LABEL(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Label', SID_AND_ATTRIBUTES),
     ]

TOKEN_MANDATORY_LABEL = struct__TOKEN_MANDATORY_LABEL
PTOKEN_MANDATORY_LABEL = ctypes.POINTER(struct__TOKEN_MANDATORY_LABEL)
class struct__TOKEN_MANDATORY_POLICY(Structure):
    pass

struct__TOKEN_MANDATORY_POLICY._pack_ = 1 # source:False
struct__TOKEN_MANDATORY_POLICY._fields_ = [
    ('Policy', ctypes.c_uint32),
]

TOKEN_MANDATORY_POLICY = struct__TOKEN_MANDATORY_POLICY
PTOKEN_MANDATORY_POLICY = ctypes.POINTER(struct__TOKEN_MANDATORY_POLICY)
PSECURITY_ATTRIBUTES_OPAQUE = ctypes.POINTER(None)
class struct__TOKEN_ACCESS_INFORMATION(Structure):
    pass

struct__TOKEN_ACCESS_INFORMATION._pack_ = 1 # source:False
struct__TOKEN_ACCESS_INFORMATION._fields_ = [
    ('SidHash', ctypes.POINTER(struct__SID_AND_ATTRIBUTES_HASH)),
    ('RestrictedSidHash', ctypes.POINTER(struct__SID_AND_ATTRIBUTES_HASH)),
    ('Privileges', ctypes.POINTER(struct__TOKEN_PRIVILEGES)),
    ('AuthenticationId', LUID),
    ('TokenType', TOKEN_TYPE),
    ('ImpersonationLevel', SECURITY_IMPERSONATION_LEVEL),
    ('MandatoryPolicy', TOKEN_MANDATORY_POLICY),
    ('Flags', ctypes.c_uint32),
    ('AppContainerNumber', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('PackageSid', ctypes.POINTER(None)),
    ('CapabilitiesHash', ctypes.POINTER(struct__SID_AND_ATTRIBUTES_HASH)),
    ('TrustLevelSid', ctypes.POINTER(None)),
    ('SecurityAttributes', ctypes.POINTER(None)),
]

TOKEN_ACCESS_INFORMATION = struct__TOKEN_ACCESS_INFORMATION
PTOKEN_ACCESS_INFORMATION = ctypes.POINTER(struct__TOKEN_ACCESS_INFORMATION)
class struct__TOKEN_AUDIT_POLICY(Structure):
    pass

struct__TOKEN_AUDIT_POLICY._pack_ = 1 # source:False
struct__TOKEN_AUDIT_POLICY._fields_ = [
    ('PerUserPolicy', ctypes.c_ubyte * 30),
]

TOKEN_AUDIT_POLICY = struct__TOKEN_AUDIT_POLICY
PTOKEN_AUDIT_POLICY = ctypes.POINTER(struct__TOKEN_AUDIT_POLICY)
class struct__TOKEN_SOURCE(Structure):
    pass

struct__TOKEN_SOURCE._pack_ = 1 # source:False
struct__TOKEN_SOURCE._fields_ = [
    ('SourceName', ctypes.c_char * 8),
    ('SourceIdentifier', LUID),
]

TOKEN_SOURCE = struct__TOKEN_SOURCE
PTOKEN_SOURCE = ctypes.POINTER(struct__TOKEN_SOURCE)
class struct__TOKEN_STATISTICS(Structure):
    pass

struct__TOKEN_STATISTICS._pack_ = 1 # source:False
struct__TOKEN_STATISTICS._fields_ = [
    ('TokenId', LUID),
    ('AuthenticationId', LUID),
    ('ExpirationTime', LARGE_INTEGER),
    ('TokenType', TOKEN_TYPE),
    ('ImpersonationLevel', SECURITY_IMPERSONATION_LEVEL),
    ('DynamicCharged', ctypes.c_uint32),
    ('DynamicAvailable', ctypes.c_uint32),
    ('GroupCount', ctypes.c_uint32),
    ('PrivilegeCount', ctypes.c_uint32),
    ('ModifiedId', LUID),
]

TOKEN_STATISTICS = struct__TOKEN_STATISTICS
PTOKEN_STATISTICS = ctypes.POINTER(struct__TOKEN_STATISTICS)
class struct__TOKEN_CONTROL(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('TokenId', LUID),
    ('AuthenticationId', LUID),
    ('ModifiedId', LUID),
    ('TokenSource', TOKEN_SOURCE),
     ]

TOKEN_CONTROL = struct__TOKEN_CONTROL
PTOKEN_CONTROL = ctypes.POINTER(struct__TOKEN_CONTROL)
class struct__TOKEN_ORIGIN(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('OriginatingLogonSession', LUID),
     ]

TOKEN_ORIGIN = struct__TOKEN_ORIGIN
PTOKEN_ORIGIN = ctypes.POINTER(struct__TOKEN_ORIGIN)

# values for enumeration '_MANDATORY_LEVEL'
_MANDATORY_LEVEL__enumvalues = {
    0: 'MandatoryLevelUntrusted',
    1: 'MandatoryLevelLow',
    2: 'MandatoryLevelMedium',
    3: 'MandatoryLevelHigh',
    4: 'MandatoryLevelSystem',
    5: 'MandatoryLevelSecureProcess',
    6: 'MandatoryLevelCount',
}
MandatoryLevelUntrusted = 0
MandatoryLevelLow = 1
MandatoryLevelMedium = 2
MandatoryLevelHigh = 3
MandatoryLevelSystem = 4
MandatoryLevelSecureProcess = 5
MandatoryLevelCount = 6
_MANDATORY_LEVEL = ctypes.c_uint32 # enum
MANDATORY_LEVEL = _MANDATORY_LEVEL
MANDATORY_LEVEL__enumvalues = _MANDATORY_LEVEL__enumvalues
PMANDATORY_LEVEL = ctypes.POINTER(_MANDATORY_LEVEL)
class struct__TOKEN_APPCONTAINER_INFORMATION(Structure):
    pass

struct__TOKEN_APPCONTAINER_INFORMATION._pack_ = 1 # source:False
struct__TOKEN_APPCONTAINER_INFORMATION._fields_ = [
    ('TokenAppContainer', ctypes.POINTER(None)),
]

TOKEN_APPCONTAINER_INFORMATION = struct__TOKEN_APPCONTAINER_INFORMATION
PTOKEN_APPCONTAINER_INFORMATION = ctypes.POINTER(struct__TOKEN_APPCONTAINER_INFORMATION)
class struct__TOKEN_SID_INFORMATION(Structure):
    pass

struct__TOKEN_SID_INFORMATION._pack_ = 1 # source:False
struct__TOKEN_SID_INFORMATION._fields_ = [
    ('Sid', ctypes.POINTER(None)),
]

TOKEN_SID_INFORMATION = struct__TOKEN_SID_INFORMATION
PTOKEN_SID_INFORMATION = ctypes.POINTER(struct__TOKEN_SID_INFORMATION)
class struct__TOKEN_BNO_ISOLATION_INFORMATION(Structure):
    pass

struct__TOKEN_BNO_ISOLATION_INFORMATION._pack_ = 1 # source:False
struct__TOKEN_BNO_ISOLATION_INFORMATION._fields_ = [
    ('IsolationPrefix', ctypes.POINTER(ctypes.c_int16)),
    ('IsolationEnabled', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

TOKEN_BNO_ISOLATION_INFORMATION = struct__TOKEN_BNO_ISOLATION_INFORMATION
PTOKEN_BNO_ISOLATION_INFORMATION = ctypes.POINTER(struct__TOKEN_BNO_ISOLATION_INFORMATION)
class struct__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE(Structure):
    pass

struct__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE._pack_ = 1 # source:False
struct__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE._fields_ = [
    ('Version', ctypes.c_uint64),
    ('Name', ctypes.POINTER(ctypes.c_int16)),
]

CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = struct__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = ctypes.POINTER(struct__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE)
class struct__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE(Structure):
    pass

struct__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE._pack_ = 1 # source:False
struct__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE._fields_ = [
    ('pValue', ctypes.POINTER(None)),
    ('ValueLength', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = struct__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = ctypes.POINTER(struct__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE)
class union__CLAIM_SECURITY_ATTRIBUTE_V1___9D06E66596D2F403644E74768BC21264(Union):
    pass

union__CLAIM_SECURITY_ATTRIBUTE_V1___9D06E66596D2F403644E74768BC21264._pack_ = 1 # source:False
union__CLAIM_SECURITY_ATTRIBUTE_V1___9D06E66596D2F403644E74768BC21264._fields_ = [
    ('pInt64', ctypes.POINTER(ctypes.c_int64)),
    ('pUint64', ctypes.POINTER(ctypes.c_uint64)),
    ('ppString', ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))),
    ('pFqbn', ctypes.POINTER(struct__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE)),
    ('pOctetString', ctypes.POINTER(struct__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE)),
]

class struct__CLAIM_SECURITY_ATTRIBUTE_V1(Structure):
    pass

struct__CLAIM_SECURITY_ATTRIBUTE_V1._pack_ = 1 # source:False
struct__CLAIM_SECURITY_ATTRIBUTE_V1._fields_ = [
    ('Name', ctypes.POINTER(ctypes.c_int16)),
    ('ValueType', ctypes.c_uint16),
    ('Reserved', ctypes.c_uint16),
    ('Flags', ctypes.c_uint32),
    ('ValueCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('Values', union__CLAIM_SECURITY_ATTRIBUTE_V1___9D06E66596D2F403644E74768BC21264),
]

CLAIM_SECURITY_ATTRIBUTE_V1 = struct__CLAIM_SECURITY_ATTRIBUTE_V1
PCLAIM_SECURITY_ATTRIBUTE_V1 = ctypes.POINTER(struct__CLAIM_SECURITY_ATTRIBUTE_V1)
class union__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1___980039CADE3C96E6EA936992968C6F5C(Union):
    pass

union__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1___980039CADE3C96E6EA936992968C6F5C._pack_ = 1 # source:False
union__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1___980039CADE3C96E6EA936992968C6F5C._fields_ = [
    ('pInt64', ctypes.c_uint32 * 1),
    ('pUint64', ctypes.c_uint32 * 1),
    ('ppString', ctypes.c_uint32 * 1),
    ('pFqbn', ctypes.c_uint32 * 1),
    ('pOctetString', ctypes.c_uint32 * 1),
]

class struct__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1(Structure):
    pass

struct__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1._pack_ = 1 # source:False
struct__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1._fields_ = [
    ('Name', ctypes.c_uint32),
    ('ValueType', ctypes.c_uint16),
    ('Reserved', ctypes.c_uint16),
    ('Flags', ctypes.c_uint32),
    ('ValueCount', ctypes.c_uint32),
    ('Values', union__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1___980039CADE3C96E6EA936992968C6F5C),
]

CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = struct__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = ctypes.POINTER(struct__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1)
class union__CLAIM_SECURITY_ATTRIBUTES_INFORMATION___A782A26146F232936242A16156D893CD(Union):
    pass

union__CLAIM_SECURITY_ATTRIBUTES_INFORMATION___A782A26146F232936242A16156D893CD._pack_ = 1 # source:False
union__CLAIM_SECURITY_ATTRIBUTES_INFORMATION___A782A26146F232936242A16156D893CD._fields_ = [
    ('pAttributeV1', ctypes.POINTER(struct__CLAIM_SECURITY_ATTRIBUTE_V1)),
]

class struct__CLAIM_SECURITY_ATTRIBUTES_INFORMATION(Structure):
    pass

struct__CLAIM_SECURITY_ATTRIBUTES_INFORMATION._pack_ = 1 # source:False
struct__CLAIM_SECURITY_ATTRIBUTES_INFORMATION._fields_ = [
    ('Version', ctypes.c_uint16),
    ('Reserved', ctypes.c_uint16),
    ('AttributeCount', ctypes.c_uint32),
    ('Attribute', union__CLAIM_SECURITY_ATTRIBUTES_INFORMATION___A782A26146F232936242A16156D893CD),
]

CLAIM_SECURITY_ATTRIBUTES_INFORMATION = struct__CLAIM_SECURITY_ATTRIBUTES_INFORMATION
PCLAIM_SECURITY_ATTRIBUTES_INFORMATION = ctypes.POINTER(struct__CLAIM_SECURITY_ATTRIBUTES_INFORMATION)
SECURITY_CONTEXT_TRACKING_MODE = ctypes.c_ubyte
PSECURITY_CONTEXT_TRACKING_MODE = ctypes.POINTER(ctypes.c_ubyte)
class struct__SECURITY_QUALITY_OF_SERVICE(Structure):
    pass

struct__SECURITY_QUALITY_OF_SERVICE._pack_ = 1 # source:False
struct__SECURITY_QUALITY_OF_SERVICE._fields_ = [
    ('Length', ctypes.c_uint32),
    ('ImpersonationLevel', SECURITY_IMPERSONATION_LEVEL),
    ('ContextTrackingMode', ctypes.c_ubyte),
    ('EffectiveOnly', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

SECURITY_QUALITY_OF_SERVICE = struct__SECURITY_QUALITY_OF_SERVICE
PSECURITY_QUALITY_OF_SERVICE = ctypes.POINTER(struct__SECURITY_QUALITY_OF_SERVICE)
class struct__SE_IMPERSONATION_STATE(Structure):
    pass

struct__SE_IMPERSONATION_STATE._pack_ = 1 # source:False
struct__SE_IMPERSONATION_STATE._fields_ = [
    ('Token', ctypes.POINTER(None)),
    ('CopyOnOpen', ctypes.c_ubyte),
    ('EffectiveOnly', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('Level', SECURITY_IMPERSONATION_LEVEL),
]

SE_IMPERSONATION_STATE = struct__SE_IMPERSONATION_STATE
PSE_IMPERSONATION_STATE = ctypes.POINTER(struct__SE_IMPERSONATION_STATE)
SECURITY_INFORMATION = ctypes.c_uint32
PSECURITY_INFORMATION = ctypes.POINTER(ctypes.c_uint32)
SE_SIGNING_LEVEL = ctypes.c_ubyte
PSE_SIGNING_LEVEL = ctypes.POINTER(ctypes.c_ubyte)

# values for enumeration '_SE_IMAGE_SIGNATURE_TYPE'
_SE_IMAGE_SIGNATURE_TYPE__enumvalues = {
    0: 'SeImageSignatureNone',
    1: 'SeImageSignatureEmbedded',
    2: 'SeImageSignatureCache',
    3: 'SeImageSignatureCatalogCached',
    4: 'SeImageSignatureCatalogNotCached',
    5: 'SeImageSignatureCatalogHint',
    6: 'SeImageSignaturePackageCatalog',
}
SeImageSignatureNone = 0
SeImageSignatureEmbedded = 1
SeImageSignatureCache = 2
SeImageSignatureCatalogCached = 3
SeImageSignatureCatalogNotCached = 4
SeImageSignatureCatalogHint = 5
SeImageSignaturePackageCatalog = 6
_SE_IMAGE_SIGNATURE_TYPE = ctypes.c_uint32 # enum
SE_IMAGE_SIGNATURE_TYPE = _SE_IMAGE_SIGNATURE_TYPE
SE_IMAGE_SIGNATURE_TYPE__enumvalues = _SE_IMAGE_SIGNATURE_TYPE__enumvalues
PSE_IMAGE_SIGNATURE_TYPE = ctypes.POINTER(_SE_IMAGE_SIGNATURE_TYPE)

# values for enumeration '_SE_LEARNING_MODE_DATA_TYPE'
_SE_LEARNING_MODE_DATA_TYPE__enumvalues = {
    0: 'SeLearningModeInvalidType',
    1: 'SeLearningModeSettings',
    2: 'SeLearningModeMax',
}
SeLearningModeInvalidType = 0
SeLearningModeSettings = 1
SeLearningModeMax = 2
_SE_LEARNING_MODE_DATA_TYPE = ctypes.c_uint32 # enum
SE_LEARNING_MODE_DATA_TYPE = _SE_LEARNING_MODE_DATA_TYPE
SE_LEARNING_MODE_DATA_TYPE__enumvalues = _SE_LEARNING_MODE_DATA_TYPE__enumvalues
class struct__SECURITY_CAPABILITIES(Structure):
    pass

struct__SECURITY_CAPABILITIES._pack_ = 1 # source:False
struct__SECURITY_CAPABILITIES._fields_ = [
    ('AppContainerSid', ctypes.POINTER(None)),
    ('Capabilities', ctypes.POINTER(struct__SID_AND_ATTRIBUTES)),
    ('CapabilityCount', ctypes.c_uint32),
    ('Reserved', ctypes.c_uint32),
]

SECURITY_CAPABILITIES = struct__SECURITY_CAPABILITIES
PSECURITY_CAPABILITIES = ctypes.POINTER(struct__SECURITY_CAPABILITIES)
LPSECURITY_CAPABILITIES = ctypes.POINTER(struct__SECURITY_CAPABILITIES)
class struct__JOB_SET_ARRAY(Structure):
    pass

struct__JOB_SET_ARRAY._pack_ = 1 # source:False
struct__JOB_SET_ARRAY._fields_ = [
    ('JobHandle', ctypes.POINTER(None)),
    ('MemberLevel', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
]

JOB_SET_ARRAY = struct__JOB_SET_ARRAY
PJOB_SET_ARRAY = ctypes.POINTER(struct__JOB_SET_ARRAY)
class struct__EXCEPTION_REGISTRATION_RECORD(Structure):
    pass

struct__EXCEPTION_REGISTRATION_RECORD._pack_ = 1 # source:False
struct__EXCEPTION_REGISTRATION_RECORD._fields_ = [
    ('Next', ctypes.POINTER(struct__EXCEPTION_REGISTRATION_RECORD)),
    ('Handler', ctypes.CFUNCTYPE(_EXCEPTION_DISPOSITION, ctypes.POINTER(struct__EXCEPTION_RECORD), ctypes.POINTER(None), ctypes.POINTER(struct__CONTEXT), ctypes.POINTER(None))),
]

EXCEPTION_REGISTRATION_RECORD = struct__EXCEPTION_REGISTRATION_RECORD
PEXCEPTION_REGISTRATION_RECORD = ctypes.POINTER(struct__EXCEPTION_REGISTRATION_RECORD)
class union__NT_TIB___4F592BB387BBBAD2B76D6EEE6EFB58F3(Union):
    pass

union__NT_TIB___4F592BB387BBBAD2B76D6EEE6EFB58F3._pack_ = 1 # source:False
union__NT_TIB___4F592BB387BBBAD2B76D6EEE6EFB58F3._fields_ = [
    ('FiberData', ctypes.POINTER(None)),
    ('Version', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct__NT_TIB(Structure):
    pass

class union__NT_TIB_0(Union):
    pass

union__NT_TIB_0._pack_ = 1 # source:False
union__NT_TIB_0._fields_ = [
    ('FiberData', ctypes.POINTER(None)),
    ('Version', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

struct__NT_TIB._pack_ = 1 # source:False
struct__NT_TIB._anonymous_ = ('_0',)
struct__NT_TIB._fields_ = [
    ('ExceptionList', ctypes.POINTER(struct__EXCEPTION_REGISTRATION_RECORD)),
    ('StackBase', ctypes.POINTER(None)),
    ('StackLimit', ctypes.POINTER(None)),
    ('SubSystemTib', ctypes.POINTER(None)),
    ('_0', union__NT_TIB_0),
    ('ArbitraryUserPointer', ctypes.POINTER(None)),
    ('Self', ctypes.POINTER(struct__NT_TIB)),
]

NT_TIB = struct__NT_TIB
PNT_TIB = ctypes.POINTER(struct__NT_TIB)
class union__NT_TIB32___36B74FAB262AB83958B69319F9AD6700(Union):
    pass

union__NT_TIB32___36B74FAB262AB83958B69319F9AD6700._pack_ = 1 # source:False
union__NT_TIB32___36B74FAB262AB83958B69319F9AD6700._fields_ = [
    ('FiberData', ctypes.c_uint32),
    ('Version', ctypes.c_uint32),
]

class struct__NT_TIB32(Structure):
    pass

class union__NT_TIB32_0(Union):
    pass

union__NT_TIB32_0._pack_ = 1 # source:False
union__NT_TIB32_0._fields_ = [
    ('FiberData', ctypes.c_uint32),
    ('Version', ctypes.c_uint32),
]

struct__NT_TIB32._pack_ = 1 # source:False
struct__NT_TIB32._anonymous_ = ('_0',)
struct__NT_TIB32._fields_ = [
    ('ExceptionList', ctypes.c_uint32),
    ('StackBase', ctypes.c_uint32),
    ('StackLimit', ctypes.c_uint32),
    ('SubSystemTib', ctypes.c_uint32),
    ('_0', union__NT_TIB32_0),
    ('ArbitraryUserPointer', ctypes.c_uint32),
    ('Self', ctypes.c_uint32),
]

NT_TIB32 = struct__NT_TIB32
PNT_TIB32 = ctypes.POINTER(struct__NT_TIB32)
class union__NT_TIB64___A58BD77A585D2445D581DF07685A0FEF(Union):
    pass

union__NT_TIB64___A58BD77A585D2445D581DF07685A0FEF._pack_ = 1 # source:False
union__NT_TIB64___A58BD77A585D2445D581DF07685A0FEF._fields_ = [
    ('FiberData', ctypes.c_uint64),
    ('Version', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct__NT_TIB64(Structure):
    pass

class union__NT_TIB64_0(Union):
    pass

union__NT_TIB64_0._pack_ = 1 # source:False
union__NT_TIB64_0._fields_ = [
    ('FiberData', ctypes.c_uint64),
    ('Version', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

struct__NT_TIB64._pack_ = 1 # source:False
struct__NT_TIB64._anonymous_ = ('_0',)
struct__NT_TIB64._fields_ = [
    ('ExceptionList', ctypes.c_uint64),
    ('StackBase', ctypes.c_uint64),
    ('StackLimit', ctypes.c_uint64),
    ('SubSystemTib', ctypes.c_uint64),
    ('_0', union__NT_TIB64_0),
    ('ArbitraryUserPointer', ctypes.c_uint64),
    ('Self', ctypes.c_uint64),
]

NT_TIB64 = struct__NT_TIB64
PNT_TIB64 = ctypes.POINTER(struct__NT_TIB64)
class struct__UMS_CREATE_THREAD_ATTRIBUTES(Structure):
    pass

struct__UMS_CREATE_THREAD_ATTRIBUTES._pack_ = 1 # source:False
struct__UMS_CREATE_THREAD_ATTRIBUTES._fields_ = [
    ('UmsVersion', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('UmsContext', ctypes.POINTER(None)),
    ('UmsCompletionList', ctypes.POINTER(None)),
]

UMS_CREATE_THREAD_ATTRIBUTES = struct__UMS_CREATE_THREAD_ATTRIBUTES
PUMS_CREATE_THREAD_ATTRIBUTES = ctypes.POINTER(struct__UMS_CREATE_THREAD_ATTRIBUTES)
class struct__WOW64_ARCHITECTURE_INFORMATION(Structure):
    pass

struct__WOW64_ARCHITECTURE_INFORMATION._pack_ = 1 # source:False
struct__WOW64_ARCHITECTURE_INFORMATION._fields_ = [
    ('Machine', ctypes.c_uint32, 16),
    ('KernelMode', ctypes.c_uint32, 1),
    ('UserMode', ctypes.c_uint32, 1),
    ('Native', ctypes.c_uint32, 1),
    ('Process', ctypes.c_uint32, 1),
    ('ReservedZero0', ctypes.c_uint32, 12),
]

WOW64_ARCHITECTURE_INFORMATION = struct__WOW64_ARCHITECTURE_INFORMATION
class struct__PROCESS_DYNAMIC_EH_CONTINUATION_TARGET(Structure):
    pass

struct__PROCESS_DYNAMIC_EH_CONTINUATION_TARGET._pack_ = 1 # source:False
struct__PROCESS_DYNAMIC_EH_CONTINUATION_TARGET._fields_ = [
    ('TargetAddress', ctypes.c_uint64),
    ('Flags', ctypes.c_uint64),
]

PROCESS_DYNAMIC_EH_CONTINUATION_TARGET = struct__PROCESS_DYNAMIC_EH_CONTINUATION_TARGET
PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET = ctypes.POINTER(struct__PROCESS_DYNAMIC_EH_CONTINUATION_TARGET)
class struct__PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION(Structure):
    pass

struct__PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION._pack_ = 1 # source:False
struct__PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION._fields_ = [
    ('NumberOfTargets', ctypes.c_uint16),
    ('Reserved', ctypes.c_uint16),
    ('Reserved2', ctypes.c_uint32),
    ('Targets', ctypes.POINTER(struct__PROCESS_DYNAMIC_EH_CONTINUATION_TARGET)),
]

PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION = struct__PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION
PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION = ctypes.POINTER(struct__PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION)
class struct__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE(Structure):
    pass

struct__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE._pack_ = 1 # source:False
struct__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE._fields_ = [
    ('BaseAddress', ctypes.c_uint64),
    ('Size', ctypes.c_uint64),
    ('Flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = struct__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE
PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = ctypes.POINTER(struct__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE)
class struct__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION(Structure):
    pass

struct__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION._pack_ = 1 # source:False
struct__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION._fields_ = [
    ('NumberOfRanges', ctypes.c_uint16),
    ('Reserved', ctypes.c_uint16),
    ('Reserved2', ctypes.c_uint32),
    ('Ranges', ctypes.POINTER(struct__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE)),
]

PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION = struct__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION
PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION = ctypes.POINTER(struct__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION)
class struct__QUOTA_LIMITS(Structure):
    pass

struct__QUOTA_LIMITS._pack_ = 1 # source:False
struct__QUOTA_LIMITS._fields_ = [
    ('PagedPoolLimit', ctypes.c_uint64),
    ('NonPagedPoolLimit', ctypes.c_uint64),
    ('MinimumWorkingSetSize', ctypes.c_uint64),
    ('MaximumWorkingSetSize', ctypes.c_uint64),
    ('PagefileLimit', ctypes.c_uint64),
    ('TimeLimit', LARGE_INTEGER),
]

QUOTA_LIMITS = struct__QUOTA_LIMITS
PQUOTA_LIMITS = ctypes.POINTER(struct__QUOTA_LIMITS)
class struct__RATE_QUOTA_LIMIT___79FA692AF2D868318B7516C685A0638E(Structure):
    pass

struct__RATE_QUOTA_LIMIT___79FA692AF2D868318B7516C685A0638E._pack_ = 1 # source:False
struct__RATE_QUOTA_LIMIT___79FA692AF2D868318B7516C685A0638E._fields_ = [
    ('RatePercent', ctypes.c_uint32, 7),
    ('Reserved0', ctypes.c_uint32, 25),
]

class union__RATE_QUOTA_LIMIT(Union):
    pass

class struct__RATE_QUOTA_LIMIT_0(Structure):
    pass

struct__RATE_QUOTA_LIMIT_0._pack_ = 1 # source:False
struct__RATE_QUOTA_LIMIT_0._fields_ = [
    ('RatePercent', ctypes.c_uint32, 7),
    ('Reserved0', ctypes.c_uint32, 25),
]

union__RATE_QUOTA_LIMIT._pack_ = 1 # source:False
union__RATE_QUOTA_LIMIT._anonymous_ = ('_0',)
union__RATE_QUOTA_LIMIT._fields_ = [
    ('RateData', ctypes.c_uint32),
    ('_0', struct__RATE_QUOTA_LIMIT_0),
]

RATE_QUOTA_LIMIT = union__RATE_QUOTA_LIMIT
PRATE_QUOTA_LIMIT = ctypes.POINTER(union__RATE_QUOTA_LIMIT)
class struct__QUOTA_LIMITS_EX(Structure):
    pass

struct__QUOTA_LIMITS_EX._pack_ = 1 # source:False
struct__QUOTA_LIMITS_EX._fields_ = [
    ('PagedPoolLimit', ctypes.c_uint64),
    ('NonPagedPoolLimit', ctypes.c_uint64),
    ('MinimumWorkingSetSize', ctypes.c_uint64),
    ('MaximumWorkingSetSize', ctypes.c_uint64),
    ('PagefileLimit', ctypes.c_uint64),
    ('TimeLimit', LARGE_INTEGER),
    ('WorkingSetLimit', ctypes.c_uint64),
    ('Reserved2', ctypes.c_uint64),
    ('Reserved3', ctypes.c_uint64),
    ('Reserved4', ctypes.c_uint64),
    ('Flags', ctypes.c_uint32),
    ('CpuRateLimit', RATE_QUOTA_LIMIT),
]

QUOTA_LIMITS_EX = struct__QUOTA_LIMITS_EX
PQUOTA_LIMITS_EX = ctypes.POINTER(struct__QUOTA_LIMITS_EX)
class struct__IO_COUNTERS(Structure):
    pass

struct__IO_COUNTERS._pack_ = 1 # source:False
struct__IO_COUNTERS._fields_ = [
    ('ReadOperationCount', ctypes.c_uint64),
    ('WriteOperationCount', ctypes.c_uint64),
    ('OtherOperationCount', ctypes.c_uint64),
    ('ReadTransferCount', ctypes.c_uint64),
    ('WriteTransferCount', ctypes.c_uint64),
    ('OtherTransferCount', ctypes.c_uint64),
]

IO_COUNTERS = struct__IO_COUNTERS
PIO_COUNTERS = ctypes.POINTER(struct__IO_COUNTERS)

# values for enumeration '_HARDWARE_COUNTER_TYPE'
_HARDWARE_COUNTER_TYPE__enumvalues = {
    0: 'PMCCounter',
    1: 'MaxHardwareCounterType',
}
PMCCounter = 0
MaxHardwareCounterType = 1
_HARDWARE_COUNTER_TYPE = ctypes.c_uint32 # enum
HARDWARE_COUNTER_TYPE = _HARDWARE_COUNTER_TYPE
HARDWARE_COUNTER_TYPE__enumvalues = _HARDWARE_COUNTER_TYPE__enumvalues
PHARDWARE_COUNTER_TYPE = ctypes.POINTER(_HARDWARE_COUNTER_TYPE)

# values for enumeration '_PROCESS_MITIGATION_POLICY'
_PROCESS_MITIGATION_POLICY__enumvalues = {
    0: 'ProcessDEPPolicy',
    1: 'ProcessASLRPolicy',
    2: 'ProcessDynamicCodePolicy',
    3: 'ProcessStrictHandleCheckPolicy',
    4: 'ProcessSystemCallDisablePolicy',
    5: 'ProcessMitigationOptionsMask',
    6: 'ProcessExtensionPointDisablePolicy',
    7: 'ProcessControlFlowGuardPolicy',
    8: 'ProcessSignaturePolicy',
    9: 'ProcessFontDisablePolicy',
    10: 'ProcessImageLoadPolicy',
    11: 'ProcessSystemCallFilterPolicy',
    12: 'ProcessPayloadRestrictionPolicy',
    13: 'ProcessChildProcessPolicy',
    14: 'ProcessSideChannelIsolationPolicy',
    15: 'ProcessUserShadowStackPolicy',
    16: 'MaxProcessMitigationPolicy',
}
ProcessDEPPolicy = 0
ProcessASLRPolicy = 1
ProcessDynamicCodePolicy = 2
ProcessStrictHandleCheckPolicy = 3
ProcessSystemCallDisablePolicy = 4
ProcessMitigationOptionsMask = 5
ProcessExtensionPointDisablePolicy = 6
ProcessControlFlowGuardPolicy = 7
ProcessSignaturePolicy = 8
ProcessFontDisablePolicy = 9
ProcessImageLoadPolicy = 10
ProcessSystemCallFilterPolicy = 11
ProcessPayloadRestrictionPolicy = 12
ProcessChildProcessPolicy = 13
ProcessSideChannelIsolationPolicy = 14
ProcessUserShadowStackPolicy = 15
MaxProcessMitigationPolicy = 16
_PROCESS_MITIGATION_POLICY = ctypes.c_uint32 # enum
PROCESS_MITIGATION_POLICY = _PROCESS_MITIGATION_POLICY
PROCESS_MITIGATION_POLICY__enumvalues = _PROCESS_MITIGATION_POLICY__enumvalues
PPROCESS_MITIGATION_POLICY = ctypes.POINTER(_PROCESS_MITIGATION_POLICY)
class struct__5FDB0C128CAE6B510A580B0DF7449C28(Structure):
    pass

struct__5FDB0C128CAE6B510A580B0DF7449C28._pack_ = 1 # source:False
struct__5FDB0C128CAE6B510A580B0DF7449C28._fields_ = [
    ('EnableBottomUpRandomization', ctypes.c_uint32, 1),
    ('EnableForceRelocateImages', ctypes.c_uint32, 1),
    ('EnableHighEntropy', ctypes.c_uint32, 1),
    ('DisallowStrippedImages', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 28),
]

class union__PROCESS_MITIGATION_ASLR_POLICY___EF23D35D4AFD2CAFE17C817A6832F69D(Union):
    pass

class struct__PROCESS_MITIGATION_ASLR_POLICY___EF23D35D4AFD2CAFE17C817A6832F69D_0(Structure):
    pass

struct__PROCESS_MITIGATION_ASLR_POLICY___EF23D35D4AFD2CAFE17C817A6832F69D_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_ASLR_POLICY___EF23D35D4AFD2CAFE17C817A6832F69D_0._fields_ = [
    ('EnableBottomUpRandomization', ctypes.c_uint32, 1),
    ('EnableForceRelocateImages', ctypes.c_uint32, 1),
    ('EnableHighEntropy', ctypes.c_uint32, 1),
    ('DisallowStrippedImages', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 28),
]

union__PROCESS_MITIGATION_ASLR_POLICY___EF23D35D4AFD2CAFE17C817A6832F69D._pack_ = 1 # source:False
union__PROCESS_MITIGATION_ASLR_POLICY___EF23D35D4AFD2CAFE17C817A6832F69D._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_ASLR_POLICY___EF23D35D4AFD2CAFE17C817A6832F69D._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_ASLR_POLICY___EF23D35D4AFD2CAFE17C817A6832F69D_0),
]

class struct__PROCESS_MITIGATION_ASLR_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_ASLR_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_ASLR_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_ASLR_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_ASLR_POLICY_0_0._fields_ = [
    ('EnableBottomUpRandomization', ctypes.c_uint32, 1),
    ('EnableForceRelocateImages', ctypes.c_uint32, 1),
    ('EnableHighEntropy', ctypes.c_uint32, 1),
    ('DisallowStrippedImages', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 28),
]

union__PROCESS_MITIGATION_ASLR_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_ASLR_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_ASLR_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_ASLR_POLICY_0_0),
]

struct__PROCESS_MITIGATION_ASLR_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_ASLR_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_ASLR_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_ASLR_POLICY_0),
]

PROCESS_MITIGATION_ASLR_POLICY = struct__PROCESS_MITIGATION_ASLR_POLICY
PPROCESS_MITIGATION_ASLR_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_ASLR_POLICY)
class struct__7C60618F8DDAB6C9415DCB902B86CBEA(Structure):
    pass

struct__7C60618F8DDAB6C9415DCB902B86CBEA._pack_ = 1 # source:False
struct__7C60618F8DDAB6C9415DCB902B86CBEA._fields_ = [
    ('Enable', ctypes.c_uint32, 1),
    ('DisableAtlThunkEmulation', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 30),
]

class union__PROCESS_MITIGATION_DEP_POLICY___FD136180483B4938AC5BD93E37872B76(Union):
    pass

class struct__PROCESS_MITIGATION_DEP_POLICY___FD136180483B4938AC5BD93E37872B76_0(Structure):
    pass

struct__PROCESS_MITIGATION_DEP_POLICY___FD136180483B4938AC5BD93E37872B76_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_DEP_POLICY___FD136180483B4938AC5BD93E37872B76_0._fields_ = [
    ('Enable', ctypes.c_uint32, 1),
    ('DisableAtlThunkEmulation', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 30),
]

union__PROCESS_MITIGATION_DEP_POLICY___FD136180483B4938AC5BD93E37872B76._pack_ = 1 # source:False
union__PROCESS_MITIGATION_DEP_POLICY___FD136180483B4938AC5BD93E37872B76._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_DEP_POLICY___FD136180483B4938AC5BD93E37872B76._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_DEP_POLICY___FD136180483B4938AC5BD93E37872B76_0),
]

class struct__PROCESS_MITIGATION_DEP_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_DEP_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_DEP_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_DEP_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_DEP_POLICY_0_0._fields_ = [
    ('Enable', ctypes.c_uint32, 1),
    ('DisableAtlThunkEmulation', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 30),
]

union__PROCESS_MITIGATION_DEP_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_DEP_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_DEP_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_DEP_POLICY_0_0),
]

struct__PROCESS_MITIGATION_DEP_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_DEP_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_DEP_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_DEP_POLICY_0),
    ('Permanent', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

PROCESS_MITIGATION_DEP_POLICY = struct__PROCESS_MITIGATION_DEP_POLICY
PPROCESS_MITIGATION_DEP_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_DEP_POLICY)
class struct__E68E69178BF9C90E9AD3136A5DA83667(Structure):
    pass

struct__E68E69178BF9C90E9AD3136A5DA83667._pack_ = 1 # source:False
struct__E68E69178BF9C90E9AD3136A5DA83667._fields_ = [
    ('RaiseExceptionOnInvalidHandleReference', ctypes.c_uint32, 1),
    ('HandleExceptionsPermanentlyEnabled', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 30),
]

class union__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY___FD33BDC57BCEB8233764351EEFC4E5C6(Union):
    pass

class struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY___FD33BDC57BCEB8233764351EEFC4E5C6_0(Structure):
    pass

struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY___FD33BDC57BCEB8233764351EEFC4E5C6_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY___FD33BDC57BCEB8233764351EEFC4E5C6_0._fields_ = [
    ('RaiseExceptionOnInvalidHandleReference', ctypes.c_uint32, 1),
    ('HandleExceptionsPermanentlyEnabled', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 30),
]

union__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY___FD33BDC57BCEB8233764351EEFC4E5C6._pack_ = 1 # source:False
union__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY___FD33BDC57BCEB8233764351EEFC4E5C6._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY___FD33BDC57BCEB8233764351EEFC4E5C6._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY___FD33BDC57BCEB8233764351EEFC4E5C6_0),
]

class struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_0_0._fields_ = [
    ('RaiseExceptionOnInvalidHandleReference', ctypes.c_uint32, 1),
    ('HandleExceptionsPermanentlyEnabled', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 30),
]

union__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_0_0),
]

struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_0),
]

PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY)
class struct__ECCC25BC343ABE0853F526697984729A(Structure):
    pass

struct__ECCC25BC343ABE0853F526697984729A._pack_ = 1 # source:False
struct__ECCC25BC343ABE0853F526697984729A._fields_ = [
    ('DisallowWin32kSystemCalls', ctypes.c_uint32, 1),
    ('AuditDisallowWin32kSystemCalls', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 30),
]

class union__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY___AD9536122EB431DA68DD4C2B47022529(Union):
    pass

class struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY___AD9536122EB431DA68DD4C2B47022529_0(Structure):
    pass

struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY___AD9536122EB431DA68DD4C2B47022529_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY___AD9536122EB431DA68DD4C2B47022529_0._fields_ = [
    ('DisallowWin32kSystemCalls', ctypes.c_uint32, 1),
    ('AuditDisallowWin32kSystemCalls', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 30),
]

union__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY___AD9536122EB431DA68DD4C2B47022529._pack_ = 1 # source:False
union__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY___AD9536122EB431DA68DD4C2B47022529._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY___AD9536122EB431DA68DD4C2B47022529._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY___AD9536122EB431DA68DD4C2B47022529_0),
]

class struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_0_0._fields_ = [
    ('DisallowWin32kSystemCalls', ctypes.c_uint32, 1),
    ('AuditDisallowWin32kSystemCalls', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 30),
]

union__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_0_0),
]

struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_0),
]

PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY)
class struct__19436C2F0C0C306A8BFD7B32BBC2825D(Structure):
    pass

struct__19436C2F0C0C306A8BFD7B32BBC2825D._pack_ = 1 # source:False
struct__19436C2F0C0C306A8BFD7B32BBC2825D._fields_ = [
    ('DisableExtensionPoints', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 31),
]

class union__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY___33429AB7D8029A757D69069187804440(Union):
    pass

class struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY___33429AB7D8029A757D69069187804440_0(Structure):
    pass

struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY___33429AB7D8029A757D69069187804440_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY___33429AB7D8029A757D69069187804440_0._fields_ = [
    ('DisableExtensionPoints', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 31),
]

union__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY___33429AB7D8029A757D69069187804440._pack_ = 1 # source:False
union__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY___33429AB7D8029A757D69069187804440._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY___33429AB7D8029A757D69069187804440._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY___33429AB7D8029A757D69069187804440_0),
]

class struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_0_0._fields_ = [
    ('DisableExtensionPoints', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 31),
]

union__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_0_0),
]

struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_0),
]

PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY)
class struct__5FAD416589472B5F3944026CEEE6AAA8(Structure):
    pass

struct__5FAD416589472B5F3944026CEEE6AAA8._pack_ = 1 # source:False
struct__5FAD416589472B5F3944026CEEE6AAA8._fields_ = [
    ('ProhibitDynamicCode', ctypes.c_uint32, 1),
    ('AllowThreadOptOut', ctypes.c_uint32, 1),
    ('AllowRemoteDowngrade', ctypes.c_uint32, 1),
    ('AuditProhibitDynamicCode', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 28),
]

class union__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY___B4E19A71168CE34C20DDB8F98D338030(Union):
    pass

class struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY___B4E19A71168CE34C20DDB8F98D338030_0(Structure):
    pass

struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY___B4E19A71168CE34C20DDB8F98D338030_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY___B4E19A71168CE34C20DDB8F98D338030_0._fields_ = [
    ('ProhibitDynamicCode', ctypes.c_uint32, 1),
    ('AllowThreadOptOut', ctypes.c_uint32, 1),
    ('AllowRemoteDowngrade', ctypes.c_uint32, 1),
    ('AuditProhibitDynamicCode', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 28),
]

union__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY___B4E19A71168CE34C20DDB8F98D338030._pack_ = 1 # source:False
union__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY___B4E19A71168CE34C20DDB8F98D338030._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY___B4E19A71168CE34C20DDB8F98D338030._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY___B4E19A71168CE34C20DDB8F98D338030_0),
]

class struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_0_0._fields_ = [
    ('ProhibitDynamicCode', ctypes.c_uint32, 1),
    ('AllowThreadOptOut', ctypes.c_uint32, 1),
    ('AllowRemoteDowngrade', ctypes.c_uint32, 1),
    ('AuditProhibitDynamicCode', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 28),
]

union__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_0_0),
]

struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_0),
]

PROCESS_MITIGATION_DYNAMIC_CODE_POLICY = struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY
PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY)
class struct__A8AB85F54C41EDC76E4CA93812102570(Structure):
    pass

struct__A8AB85F54C41EDC76E4CA93812102570._pack_ = 1 # source:False
struct__A8AB85F54C41EDC76E4CA93812102570._fields_ = [
    ('EnableControlFlowGuard', ctypes.c_uint32, 1),
    ('EnableExportSuppression', ctypes.c_uint32, 1),
    ('StrictMode', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 29),
]

class union__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY___2FA0893F5F94738320789EE0A61135E4(Union):
    pass

class struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY___2FA0893F5F94738320789EE0A61135E4_0(Structure):
    pass

struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY___2FA0893F5F94738320789EE0A61135E4_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY___2FA0893F5F94738320789EE0A61135E4_0._fields_ = [
    ('EnableControlFlowGuard', ctypes.c_uint32, 1),
    ('EnableExportSuppression', ctypes.c_uint32, 1),
    ('StrictMode', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 29),
]

union__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY___2FA0893F5F94738320789EE0A61135E4._pack_ = 1 # source:False
union__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY___2FA0893F5F94738320789EE0A61135E4._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY___2FA0893F5F94738320789EE0A61135E4._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY___2FA0893F5F94738320789EE0A61135E4_0),
]

class struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_0_0._fields_ = [
    ('EnableControlFlowGuard', ctypes.c_uint32, 1),
    ('EnableExportSuppression', ctypes.c_uint32, 1),
    ('StrictMode', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 29),
]

union__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_0_0),
]

struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_0),
]

PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY
PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY)
class struct__0F0214169AB7574E621E68810485F6AA(Structure):
    pass

struct__0F0214169AB7574E621E68810485F6AA._pack_ = 1 # source:False
struct__0F0214169AB7574E621E68810485F6AA._fields_ = [
    ('MicrosoftSignedOnly', ctypes.c_uint32, 1),
    ('StoreSignedOnly', ctypes.c_uint32, 1),
    ('MitigationOptIn', ctypes.c_uint32, 1),
    ('AuditMicrosoftSignedOnly', ctypes.c_uint32, 1),
    ('AuditStoreSignedOnly', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 27),
]

class union__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY___70C6A6FD2FD0CF4EFFD8E31632FF14D1(Union):
    pass

class struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY___70C6A6FD2FD0CF4EFFD8E31632FF14D1_0(Structure):
    pass

struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY___70C6A6FD2FD0CF4EFFD8E31632FF14D1_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY___70C6A6FD2FD0CF4EFFD8E31632FF14D1_0._fields_ = [
    ('MicrosoftSignedOnly', ctypes.c_uint32, 1),
    ('StoreSignedOnly', ctypes.c_uint32, 1),
    ('MitigationOptIn', ctypes.c_uint32, 1),
    ('AuditMicrosoftSignedOnly', ctypes.c_uint32, 1),
    ('AuditStoreSignedOnly', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 27),
]

union__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY___70C6A6FD2FD0CF4EFFD8E31632FF14D1._pack_ = 1 # source:False
union__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY___70C6A6FD2FD0CF4EFFD8E31632FF14D1._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY___70C6A6FD2FD0CF4EFFD8E31632FF14D1._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY___70C6A6FD2FD0CF4EFFD8E31632FF14D1_0),
]

class struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_0_0._fields_ = [
    ('MicrosoftSignedOnly', ctypes.c_uint32, 1),
    ('StoreSignedOnly', ctypes.c_uint32, 1),
    ('MitigationOptIn', ctypes.c_uint32, 1),
    ('AuditMicrosoftSignedOnly', ctypes.c_uint32, 1),
    ('AuditStoreSignedOnly', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 27),
]

union__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_0_0),
]

struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_0),
]

PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY
PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY)
class struct__7B9E08C8598B8FD88043C3528403CCC6(Structure):
    pass

struct__7B9E08C8598B8FD88043C3528403CCC6._pack_ = 1 # source:False
struct__7B9E08C8598B8FD88043C3528403CCC6._fields_ = [
    ('DisableNonSystemFonts', ctypes.c_uint32, 1),
    ('AuditNonSystemFontLoading', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 30),
]

class union__PROCESS_MITIGATION_FONT_DISABLE_POLICY___A466DDF007E94507B09CD23EE821B6F2(Union):
    pass

class struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY___A466DDF007E94507B09CD23EE821B6F2_0(Structure):
    pass

struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY___A466DDF007E94507B09CD23EE821B6F2_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY___A466DDF007E94507B09CD23EE821B6F2_0._fields_ = [
    ('DisableNonSystemFonts', ctypes.c_uint32, 1),
    ('AuditNonSystemFontLoading', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 30),
]

union__PROCESS_MITIGATION_FONT_DISABLE_POLICY___A466DDF007E94507B09CD23EE821B6F2._pack_ = 1 # source:False
union__PROCESS_MITIGATION_FONT_DISABLE_POLICY___A466DDF007E94507B09CD23EE821B6F2._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_FONT_DISABLE_POLICY___A466DDF007E94507B09CD23EE821B6F2._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY___A466DDF007E94507B09CD23EE821B6F2_0),
]

class struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_FONT_DISABLE_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY_0_0._fields_ = [
    ('DisableNonSystemFonts', ctypes.c_uint32, 1),
    ('AuditNonSystemFontLoading', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 30),
]

union__PROCESS_MITIGATION_FONT_DISABLE_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_FONT_DISABLE_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_FONT_DISABLE_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY_0_0),
]

struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_FONT_DISABLE_POLICY_0),
]

PROCESS_MITIGATION_FONT_DISABLE_POLICY = struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY
PPROCESS_MITIGATION_FONT_DISABLE_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY)
class struct__9CBE11374487F3865B332FC10B1917E9(Structure):
    pass

struct__9CBE11374487F3865B332FC10B1917E9._pack_ = 1 # source:False
struct__9CBE11374487F3865B332FC10B1917E9._fields_ = [
    ('NoRemoteImages', ctypes.c_uint32, 1),
    ('NoLowMandatoryLabelImages', ctypes.c_uint32, 1),
    ('PreferSystem32Images', ctypes.c_uint32, 1),
    ('AuditNoRemoteImages', ctypes.c_uint32, 1),
    ('AuditNoLowMandatoryLabelImages', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 27),
]

class union__PROCESS_MITIGATION_IMAGE_LOAD_POLICY___F1DB64D83105ED650921E8060312C7D8(Union):
    pass

class struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY___F1DB64D83105ED650921E8060312C7D8_0(Structure):
    pass

struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY___F1DB64D83105ED650921E8060312C7D8_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY___F1DB64D83105ED650921E8060312C7D8_0._fields_ = [
    ('NoRemoteImages', ctypes.c_uint32, 1),
    ('NoLowMandatoryLabelImages', ctypes.c_uint32, 1),
    ('PreferSystem32Images', ctypes.c_uint32, 1),
    ('AuditNoRemoteImages', ctypes.c_uint32, 1),
    ('AuditNoLowMandatoryLabelImages', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 27),
]

union__PROCESS_MITIGATION_IMAGE_LOAD_POLICY___F1DB64D83105ED650921E8060312C7D8._pack_ = 1 # source:False
union__PROCESS_MITIGATION_IMAGE_LOAD_POLICY___F1DB64D83105ED650921E8060312C7D8._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_IMAGE_LOAD_POLICY___F1DB64D83105ED650921E8060312C7D8._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY___F1DB64D83105ED650921E8060312C7D8_0),
]

class struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_IMAGE_LOAD_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY_0_0._fields_ = [
    ('NoRemoteImages', ctypes.c_uint32, 1),
    ('NoLowMandatoryLabelImages', ctypes.c_uint32, 1),
    ('PreferSystem32Images', ctypes.c_uint32, 1),
    ('AuditNoRemoteImages', ctypes.c_uint32, 1),
    ('AuditNoLowMandatoryLabelImages', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 27),
]

union__PROCESS_MITIGATION_IMAGE_LOAD_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_IMAGE_LOAD_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_IMAGE_LOAD_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY_0_0),
]

struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_IMAGE_LOAD_POLICY_0),
]

PROCESS_MITIGATION_IMAGE_LOAD_POLICY = struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY
PPROCESS_MITIGATION_IMAGE_LOAD_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY)
class struct__EB76E570FF9173CCCE9422B212669AE9(Structure):
    pass

struct__EB76E570FF9173CCCE9422B212669AE9._pack_ = 1 # source:False
struct__EB76E570FF9173CCCE9422B212669AE9._fields_ = [
    ('FilterId', ctypes.c_uint32, 4),
    ('ReservedFlags', ctypes.c_uint32, 28),
]

class union__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY___4A990042AB6F435BCDDE2B1E73AF4442(Union):
    pass

class struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY___4A990042AB6F435BCDDE2B1E73AF4442_0(Structure):
    pass

struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY___4A990042AB6F435BCDDE2B1E73AF4442_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY___4A990042AB6F435BCDDE2B1E73AF4442_0._fields_ = [
    ('FilterId', ctypes.c_uint32, 4),
    ('ReservedFlags', ctypes.c_uint32, 28),
]

union__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY___4A990042AB6F435BCDDE2B1E73AF4442._pack_ = 1 # source:False
union__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY___4A990042AB6F435BCDDE2B1E73AF4442._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY___4A990042AB6F435BCDDE2B1E73AF4442._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY___4A990042AB6F435BCDDE2B1E73AF4442_0),
]

class struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_0_0._fields_ = [
    ('FilterId', ctypes.c_uint32, 4),
    ('ReservedFlags', ctypes.c_uint32, 28),
]

union__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_0_0),
]

struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_0),
]

PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY = struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY
PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY)
class struct__EE101F0F638C26522B1A81AB53DEE5B5(Structure):
    pass

struct__EE101F0F638C26522B1A81AB53DEE5B5._pack_ = 1 # source:False
struct__EE101F0F638C26522B1A81AB53DEE5B5._fields_ = [
    ('EnableExportAddressFilter', ctypes.c_uint32, 1),
    ('AuditExportAddressFilter', ctypes.c_uint32, 1),
    ('EnableExportAddressFilterPlus', ctypes.c_uint32, 1),
    ('AuditExportAddressFilterPlus', ctypes.c_uint32, 1),
    ('EnableImportAddressFilter', ctypes.c_uint32, 1),
    ('AuditImportAddressFilter', ctypes.c_uint32, 1),
    ('EnableRopStackPivot', ctypes.c_uint32, 1),
    ('AuditRopStackPivot', ctypes.c_uint32, 1),
    ('EnableRopCallerCheck', ctypes.c_uint32, 1),
    ('AuditRopCallerCheck', ctypes.c_uint32, 1),
    ('EnableRopSimExec', ctypes.c_uint32, 1),
    ('AuditRopSimExec', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 20),
]

class union__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY___662A0C451AAED41D63A8BDF38CF1AF82(Union):
    pass

class struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY___662A0C451AAED41D63A8BDF38CF1AF82_0(Structure):
    pass

struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY___662A0C451AAED41D63A8BDF38CF1AF82_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY___662A0C451AAED41D63A8BDF38CF1AF82_0._fields_ = [
    ('EnableExportAddressFilter', ctypes.c_uint32, 1),
    ('AuditExportAddressFilter', ctypes.c_uint32, 1),
    ('EnableExportAddressFilterPlus', ctypes.c_uint32, 1),
    ('AuditExportAddressFilterPlus', ctypes.c_uint32, 1),
    ('EnableImportAddressFilter', ctypes.c_uint32, 1),
    ('AuditImportAddressFilter', ctypes.c_uint32, 1),
    ('EnableRopStackPivot', ctypes.c_uint32, 1),
    ('AuditRopStackPivot', ctypes.c_uint32, 1),
    ('EnableRopCallerCheck', ctypes.c_uint32, 1),
    ('AuditRopCallerCheck', ctypes.c_uint32, 1),
    ('EnableRopSimExec', ctypes.c_uint32, 1),
    ('AuditRopSimExec', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 20),
]

union__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY___662A0C451AAED41D63A8BDF38CF1AF82._pack_ = 1 # source:False
union__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY___662A0C451AAED41D63A8BDF38CF1AF82._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY___662A0C451AAED41D63A8BDF38CF1AF82._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY___662A0C451AAED41D63A8BDF38CF1AF82_0),
]

class struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_0_0._fields_ = [
    ('EnableExportAddressFilter', ctypes.c_uint32, 1),
    ('AuditExportAddressFilter', ctypes.c_uint32, 1),
    ('EnableExportAddressFilterPlus', ctypes.c_uint32, 1),
    ('AuditExportAddressFilterPlus', ctypes.c_uint32, 1),
    ('EnableImportAddressFilter', ctypes.c_uint32, 1),
    ('AuditImportAddressFilter', ctypes.c_uint32, 1),
    ('EnableRopStackPivot', ctypes.c_uint32, 1),
    ('AuditRopStackPivot', ctypes.c_uint32, 1),
    ('EnableRopCallerCheck', ctypes.c_uint32, 1),
    ('AuditRopCallerCheck', ctypes.c_uint32, 1),
    ('EnableRopSimExec', ctypes.c_uint32, 1),
    ('AuditRopSimExec', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 20),
]

union__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_0_0),
]

struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_0),
]

PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY = struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY
PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY)
class struct__E26BF190AEDEAEBDFA1411F4A18494DD(Structure):
    pass

struct__E26BF190AEDEAEBDFA1411F4A18494DD._pack_ = 1 # source:False
struct__E26BF190AEDEAEBDFA1411F4A18494DD._fields_ = [
    ('NoChildProcessCreation', ctypes.c_uint32, 1),
    ('AuditNoChildProcessCreation', ctypes.c_uint32, 1),
    ('AllowSecureProcessCreation', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 29),
]

class union__PROCESS_MITIGATION_CHILD_PROCESS_POLICY___1A60AB6814E02BE900E9811249F44F13(Union):
    pass

class struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY___1A60AB6814E02BE900E9811249F44F13_0(Structure):
    pass

struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY___1A60AB6814E02BE900E9811249F44F13_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY___1A60AB6814E02BE900E9811249F44F13_0._fields_ = [
    ('NoChildProcessCreation', ctypes.c_uint32, 1),
    ('AuditNoChildProcessCreation', ctypes.c_uint32, 1),
    ('AllowSecureProcessCreation', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 29),
]

union__PROCESS_MITIGATION_CHILD_PROCESS_POLICY___1A60AB6814E02BE900E9811249F44F13._pack_ = 1 # source:False
union__PROCESS_MITIGATION_CHILD_PROCESS_POLICY___1A60AB6814E02BE900E9811249F44F13._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_CHILD_PROCESS_POLICY___1A60AB6814E02BE900E9811249F44F13._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY___1A60AB6814E02BE900E9811249F44F13_0),
]

class struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_CHILD_PROCESS_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY_0_0._fields_ = [
    ('NoChildProcessCreation', ctypes.c_uint32, 1),
    ('AuditNoChildProcessCreation', ctypes.c_uint32, 1),
    ('AllowSecureProcessCreation', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 29),
]

union__PROCESS_MITIGATION_CHILD_PROCESS_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_CHILD_PROCESS_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_CHILD_PROCESS_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY_0_0),
]

struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_CHILD_PROCESS_POLICY_0),
]

PROCESS_MITIGATION_CHILD_PROCESS_POLICY = struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY
PPROCESS_MITIGATION_CHILD_PROCESS_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY)
class struct__C0C2FE754DCA8EA4F7B2DAD88EA93C70(Structure):
    pass

struct__C0C2FE754DCA8EA4F7B2DAD88EA93C70._pack_ = 1 # source:False
struct__C0C2FE754DCA8EA4F7B2DAD88EA93C70._fields_ = [
    ('SmtBranchTargetIsolation', ctypes.c_uint32, 1),
    ('IsolateSecurityDomain', ctypes.c_uint32, 1),
    ('DisablePageCombine', ctypes.c_uint32, 1),
    ('SpeculativeStoreBypassDisable', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 28),
]

class union__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY___B3E481CD684705DFC321378EBAD5261E(Union):
    pass

class struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY___B3E481CD684705DFC321378EBAD5261E_0(Structure):
    pass

struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY___B3E481CD684705DFC321378EBAD5261E_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY___B3E481CD684705DFC321378EBAD5261E_0._fields_ = [
    ('SmtBranchTargetIsolation', ctypes.c_uint32, 1),
    ('IsolateSecurityDomain', ctypes.c_uint32, 1),
    ('DisablePageCombine', ctypes.c_uint32, 1),
    ('SpeculativeStoreBypassDisable', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 28),
]

union__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY___B3E481CD684705DFC321378EBAD5261E._pack_ = 1 # source:False
union__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY___B3E481CD684705DFC321378EBAD5261E._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY___B3E481CD684705DFC321378EBAD5261E._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY___B3E481CD684705DFC321378EBAD5261E_0),
]

class struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY_0_0._fields_ = [
    ('SmtBranchTargetIsolation', ctypes.c_uint32, 1),
    ('IsolateSecurityDomain', ctypes.c_uint32, 1),
    ('DisablePageCombine', ctypes.c_uint32, 1),
    ('SpeculativeStoreBypassDisable', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 28),
]

union__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY_0_0),
]

struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY_0),
]

PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY = struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY
PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY)
class struct__EF94547E2C3C64E7F73C980C5BD2F5D8(Structure):
    pass

struct__EF94547E2C3C64E7F73C980C5BD2F5D8._pack_ = 1 # source:False
struct__EF94547E2C3C64E7F73C980C5BD2F5D8._fields_ = [
    ('EnableUserShadowStack', ctypes.c_uint32, 1),
    ('AuditUserShadowStack', ctypes.c_uint32, 1),
    ('SetContextIpValidation', ctypes.c_uint32, 1),
    ('AuditSetContextIpValidation', ctypes.c_uint32, 1),
    ('EnableUserShadowStackStrictMode', ctypes.c_uint32, 1),
    ('BlockNonCetBinaries', ctypes.c_uint32, 1),
    ('BlockNonCetBinariesNonEhcont', ctypes.c_uint32, 1),
    ('AuditBlockNonCetBinaries', ctypes.c_uint32, 1),
    ('CetDynamicApisOutOfProcOnly', ctypes.c_uint32, 1),
    ('SetContextIpValidationRelaxedMode', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 22),
]

class union__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY___5D8775A7512CE1BF8AA67C836AC34CF6(Union):
    pass

class struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY___5D8775A7512CE1BF8AA67C836AC34CF6_0(Structure):
    pass

struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY___5D8775A7512CE1BF8AA67C836AC34CF6_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY___5D8775A7512CE1BF8AA67C836AC34CF6_0._fields_ = [
    ('EnableUserShadowStack', ctypes.c_uint32, 1),
    ('AuditUserShadowStack', ctypes.c_uint32, 1),
    ('SetContextIpValidation', ctypes.c_uint32, 1),
    ('AuditSetContextIpValidation', ctypes.c_uint32, 1),
    ('EnableUserShadowStackStrictMode', ctypes.c_uint32, 1),
    ('BlockNonCetBinaries', ctypes.c_uint32, 1),
    ('BlockNonCetBinariesNonEhcont', ctypes.c_uint32, 1),
    ('AuditBlockNonCetBinaries', ctypes.c_uint32, 1),
    ('CetDynamicApisOutOfProcOnly', ctypes.c_uint32, 1),
    ('SetContextIpValidationRelaxedMode', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 22),
]

union__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY___5D8775A7512CE1BF8AA67C836AC34CF6._pack_ = 1 # source:False
union__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY___5D8775A7512CE1BF8AA67C836AC34CF6._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY___5D8775A7512CE1BF8AA67C836AC34CF6._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY___5D8775A7512CE1BF8AA67C836AC34CF6_0),
]

class struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY(Structure):
    pass

class union__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY_0(Union):
    pass

class struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY_0_0(Structure):
    pass

struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY_0_0._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY_0_0._fields_ = [
    ('EnableUserShadowStack', ctypes.c_uint32, 1),
    ('AuditUserShadowStack', ctypes.c_uint32, 1),
    ('SetContextIpValidation', ctypes.c_uint32, 1),
    ('AuditSetContextIpValidation', ctypes.c_uint32, 1),
    ('EnableUserShadowStackStrictMode', ctypes.c_uint32, 1),
    ('BlockNonCetBinaries', ctypes.c_uint32, 1),
    ('BlockNonCetBinariesNonEhcont', ctypes.c_uint32, 1),
    ('AuditBlockNonCetBinaries', ctypes.c_uint32, 1),
    ('CetDynamicApisOutOfProcOnly', ctypes.c_uint32, 1),
    ('SetContextIpValidationRelaxedMode', ctypes.c_uint32, 1),
    ('ReservedFlags', ctypes.c_uint32, 22),
]

union__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY_0._pack_ = 1 # source:False
union__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY_0._anonymous_ = ('_0',)
union__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY_0_0),
]

struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY._pack_ = 1 # source:False
struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY._anonymous_ = ('_0',)
struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY._fields_ = [
    ('_0', union__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY_0),
]

PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY = struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY
PPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY = ctypes.POINTER(struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY)
class struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION(Structure):
    pass

struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION._pack_ = 1 # source:False
struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION._fields_ = [
    ('TotalUserTime', LARGE_INTEGER),
    ('TotalKernelTime', LARGE_INTEGER),
    ('ThisPeriodTotalUserTime', LARGE_INTEGER),
    ('ThisPeriodTotalKernelTime', LARGE_INTEGER),
    ('TotalPageFaultCount', ctypes.c_uint32),
    ('TotalProcesses', ctypes.c_uint32),
    ('ActiveProcesses', ctypes.c_uint32),
    ('TotalTerminatedProcesses', ctypes.c_uint32),
]

JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = ctypes.POINTER(struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION)
class struct__JOBOBJECT_BASIC_LIMIT_INFORMATION(Structure):
    pass

struct__JOBOBJECT_BASIC_LIMIT_INFORMATION._pack_ = 1 # source:False
struct__JOBOBJECT_BASIC_LIMIT_INFORMATION._fields_ = [
    ('PerProcessUserTimeLimit', LARGE_INTEGER),
    ('PerJobUserTimeLimit', LARGE_INTEGER),
    ('LimitFlags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('MinimumWorkingSetSize', ctypes.c_uint64),
    ('MaximumWorkingSetSize', ctypes.c_uint64),
    ('ActiveProcessLimit', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('Affinity', ctypes.c_uint64),
    ('PriorityClass', ctypes.c_uint32),
    ('SchedulingClass', ctypes.c_uint32),
]

JOBOBJECT_BASIC_LIMIT_INFORMATION = struct__JOBOBJECT_BASIC_LIMIT_INFORMATION
PJOBOBJECT_BASIC_LIMIT_INFORMATION = ctypes.POINTER(struct__JOBOBJECT_BASIC_LIMIT_INFORMATION)
class struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION(Structure):
    pass

struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION._pack_ = 1 # source:False
struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION._fields_ = [
    ('BasicLimitInformation', JOBOBJECT_BASIC_LIMIT_INFORMATION),
    ('IoInfo', IO_COUNTERS),
    ('ProcessMemoryLimit', ctypes.c_uint64),
    ('JobMemoryLimit', ctypes.c_uint64),
    ('PeakProcessMemoryUsed', ctypes.c_uint64),
    ('PeakJobMemoryUsed', ctypes.c_uint64),
]

JOBOBJECT_EXTENDED_LIMIT_INFORMATION = struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION
PJOBOBJECT_EXTENDED_LIMIT_INFORMATION = ctypes.POINTER(struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION)
class struct__JOBOBJECT_BASIC_PROCESS_ID_LIST(Structure):
    pass

struct__JOBOBJECT_BASIC_PROCESS_ID_LIST._pack_ = 1 # source:False
struct__JOBOBJECT_BASIC_PROCESS_ID_LIST._fields_ = [
    ('NumberOfAssignedProcesses', ctypes.c_uint32),
    ('NumberOfProcessIdsInList', ctypes.c_uint32),
    ('ProcessIdList', ctypes.c_uint64 * 1),
]

JOBOBJECT_BASIC_PROCESS_ID_LIST = struct__JOBOBJECT_BASIC_PROCESS_ID_LIST
PJOBOBJECT_BASIC_PROCESS_ID_LIST = ctypes.POINTER(struct__JOBOBJECT_BASIC_PROCESS_ID_LIST)
class struct__JOBOBJECT_BASIC_UI_RESTRICTIONS(Structure):
    pass

struct__JOBOBJECT_BASIC_UI_RESTRICTIONS._pack_ = 1 # source:False
struct__JOBOBJECT_BASIC_UI_RESTRICTIONS._fields_ = [
    ('UIRestrictionsClass', ctypes.c_uint32),
]

JOBOBJECT_BASIC_UI_RESTRICTIONS = struct__JOBOBJECT_BASIC_UI_RESTRICTIONS
PJOBOBJECT_BASIC_UI_RESTRICTIONS = ctypes.POINTER(struct__JOBOBJECT_BASIC_UI_RESTRICTIONS)
class struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION(Structure):
    pass

struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION._pack_ = 1 # source:False
struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION._fields_ = [
    ('SecurityLimitFlags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('JobToken', ctypes.POINTER(None)),
    ('SidsToDisable', ctypes.POINTER(struct__TOKEN_GROUPS)),
    ('PrivilegesToDelete', ctypes.POINTER(struct__TOKEN_PRIVILEGES)),
    ('RestrictedSids', ctypes.POINTER(struct__TOKEN_GROUPS)),
]

JOBOBJECT_SECURITY_LIMIT_INFORMATION = struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION
PJOBOBJECT_SECURITY_LIMIT_INFORMATION = ctypes.POINTER(struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION)
class struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION(Structure):
    pass

struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION._pack_ = 1 # source:False
struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION._fields_ = [
    ('EndOfJobTimeAction', ctypes.c_uint32),
]

JOBOBJECT_END_OF_JOB_TIME_INFORMATION = struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION
PJOBOBJECT_END_OF_JOB_TIME_INFORMATION = ctypes.POINTER(struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION)
class struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT(Structure):
    pass

struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT._pack_ = 1 # source:False
struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT._fields_ = [
    ('CompletionKey', ctypes.POINTER(None)),
    ('CompletionPort', ctypes.POINTER(None)),
]

JOBOBJECT_ASSOCIATE_COMPLETION_PORT = struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT
PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = ctypes.POINTER(struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT)
class struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('BasicInfo', JOBOBJECT_BASIC_ACCOUNTING_INFORMATION),
    ('IoInfo', IO_COUNTERS),
     ]

JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = ctypes.POINTER(struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION)
class struct__JOBOBJECT_JOBSET_INFORMATION(Structure):
    pass

struct__JOBOBJECT_JOBSET_INFORMATION._pack_ = 1 # source:False
struct__JOBOBJECT_JOBSET_INFORMATION._fields_ = [
    ('MemberLevel', ctypes.c_uint32),
]

JOBOBJECT_JOBSET_INFORMATION = struct__JOBOBJECT_JOBSET_INFORMATION
PJOBOBJECT_JOBSET_INFORMATION = ctypes.POINTER(struct__JOBOBJECT_JOBSET_INFORMATION)

# values for enumeration '_JOBOBJECT_RATE_CONTROL_TOLERANCE'
_JOBOBJECT_RATE_CONTROL_TOLERANCE__enumvalues = {
    1: 'ToleranceLow',
    2: 'ToleranceMedium',
    3: 'ToleranceHigh',
}
ToleranceLow = 1
ToleranceMedium = 2
ToleranceHigh = 3
_JOBOBJECT_RATE_CONTROL_TOLERANCE = ctypes.c_uint32 # enum
JOBOBJECT_RATE_CONTROL_TOLERANCE = _JOBOBJECT_RATE_CONTROL_TOLERANCE
JOBOBJECT_RATE_CONTROL_TOLERANCE__enumvalues = _JOBOBJECT_RATE_CONTROL_TOLERANCE__enumvalues
PJOBOBJECT_RATE_CONTROL_TOLERANCE = ctypes.POINTER(_JOBOBJECT_RATE_CONTROL_TOLERANCE)

# values for enumeration '_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL'
_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL__enumvalues = {
    1: 'ToleranceIntervalShort',
    2: 'ToleranceIntervalMedium',
    3: 'ToleranceIntervalLong',
}
ToleranceIntervalShort = 1
ToleranceIntervalMedium = 2
ToleranceIntervalLong = 3
_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = ctypes.c_uint32 # enum
JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL__enumvalues = _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL__enumvalues
PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = ctypes.POINTER(_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL)
class struct__JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION(Structure):
    pass

struct__JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION._pack_ = 1 # source:False
struct__JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION._fields_ = [
    ('IoReadBytesLimit', ctypes.c_uint64),
    ('IoWriteBytesLimit', ctypes.c_uint64),
    ('PerJobUserTimeLimit', LARGE_INTEGER),
    ('JobMemoryLimit', ctypes.c_uint64),
    ('RateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
    ('RateControlToleranceInterval', JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL),
    ('LimitFlags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = struct__JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = ctypes.POINTER(struct__JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION)
class union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2___24D5DC675E3913B8B06B55B4E2DB0C90(Union):
    pass

union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2___24D5DC675E3913B8B06B55B4E2DB0C90._pack_ = 1 # source:False
union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2___24D5DC675E3913B8B06B55B4E2DB0C90._fields_ = [
    ('JobHighMemoryLimit', ctypes.c_uint64),
    ('JobMemoryLimit', ctypes.c_uint64),
]

class union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2___7F0F891057759C60E9CD030D0A5BE1F8(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('RateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
    ('CpuRateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
     ]

class union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2___6DB75D7626B6ECEE1E30DEEE34E471B9(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('RateControlToleranceInterval', JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL),
    ('CpuRateControlToleranceInterval', JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL),
     ]

class struct_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2(Structure):
    pass

class union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2_0(Union):
    pass

union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2_0._pack_ = 1 # source:False
union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2_0._fields_ = [
    ('JobHighMemoryLimit', ctypes.c_uint64),
    ('JobMemoryLimit', ctypes.c_uint64),
]

class union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2_1(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('RateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
    ('CpuRateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
     ]

class union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2_2(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('RateControlToleranceInterval', JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL),
    ('CpuRateControlToleranceInterval', JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL),
     ]

struct_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2._pack_ = 1 # source:False
struct_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2._anonymous_ = ('_0', '_1', '_2',)
struct_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2._fields_ = [
    ('IoReadBytesLimit', ctypes.c_uint64),
    ('IoWriteBytesLimit', ctypes.c_uint64),
    ('PerJobUserTimeLimit', LARGE_INTEGER),
    ('_0', union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2_0),
    ('_1', union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2_1),
    ('_2', union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2_2),
    ('LimitFlags', ctypes.c_uint32),
    ('IoRateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
    ('JobLowMemoryLimit', ctypes.c_uint64),
    ('IoRateControlToleranceInterval', JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL),
    ('NetRateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
    ('NetRateControlToleranceInterval', JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct__JOBOBJECT_LIMIT_VIOLATION_INFORMATION(Structure):
    pass

struct__JOBOBJECT_LIMIT_VIOLATION_INFORMATION._pack_ = 1 # source:False
struct__JOBOBJECT_LIMIT_VIOLATION_INFORMATION._fields_ = [
    ('LimitFlags', ctypes.c_uint32),
    ('ViolationLimitFlags', ctypes.c_uint32),
    ('IoReadBytes', ctypes.c_uint64),
    ('IoReadBytesLimit', ctypes.c_uint64),
    ('IoWriteBytes', ctypes.c_uint64),
    ('IoWriteBytesLimit', ctypes.c_uint64),
    ('PerJobUserTime', LARGE_INTEGER),
    ('PerJobUserTimeLimit', LARGE_INTEGER),
    ('JobMemory', ctypes.c_uint64),
    ('JobMemoryLimit', ctypes.c_uint64),
    ('RateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
    ('RateControlToleranceLimit', JOBOBJECT_RATE_CONTROL_TOLERANCE),
]

JOBOBJECT_LIMIT_VIOLATION_INFORMATION = struct__JOBOBJECT_LIMIT_VIOLATION_INFORMATION
PJOBOBJECT_LIMIT_VIOLATION_INFORMATION = ctypes.POINTER(struct__JOBOBJECT_LIMIT_VIOLATION_INFORMATION)
class union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2___24D5DC675E3913B8B06B55B4E2DB0C90(Union):
    pass

union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2___24D5DC675E3913B8B06B55B4E2DB0C90._pack_ = 1 # source:False
union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2___24D5DC675E3913B8B06B55B4E2DB0C90._fields_ = [
    ('JobHighMemoryLimit', ctypes.c_uint64),
    ('JobMemoryLimit', ctypes.c_uint64),
]

class union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2___7F0F891057759C60E9CD030D0A5BE1F8(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('RateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
    ('CpuRateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
     ]

class union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2___2A64B77520F2A34D7924D1A56C664C3F(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('RateControlToleranceLimit', JOBOBJECT_RATE_CONTROL_TOLERANCE),
    ('CpuRateControlToleranceLimit', JOBOBJECT_RATE_CONTROL_TOLERANCE),
     ]

class struct_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2(Structure):
    pass

class union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2_0(Union):
    pass

union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2_0._pack_ = 1 # source:False
union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2_0._fields_ = [
    ('JobHighMemoryLimit', ctypes.c_uint64),
    ('JobMemoryLimit', ctypes.c_uint64),
]

class union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2_2(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('RateControlToleranceLimit', JOBOBJECT_RATE_CONTROL_TOLERANCE),
    ('CpuRateControlToleranceLimit', JOBOBJECT_RATE_CONTROL_TOLERANCE),
     ]

class union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2_1(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('RateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
    ('CpuRateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
     ]

struct_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2._pack_ = 1 # source:False
struct_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2._anonymous_ = ('_0', '_1', '_2',)
struct_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2._fields_ = [
    ('LimitFlags', ctypes.c_uint32),
    ('ViolationLimitFlags', ctypes.c_uint32),
    ('IoReadBytes', ctypes.c_uint64),
    ('IoReadBytesLimit', ctypes.c_uint64),
    ('IoWriteBytes', ctypes.c_uint64),
    ('IoWriteBytesLimit', ctypes.c_uint64),
    ('PerJobUserTime', LARGE_INTEGER),
    ('PerJobUserTimeLimit', LARGE_INTEGER),
    ('JobMemory', ctypes.c_uint64),
    ('_0', union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2_0),
    ('_1', union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2_1),
    ('_2', union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2_2),
    ('JobLowMemoryLimit', ctypes.c_uint64),
    ('IoRateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
    ('IoRateControlToleranceLimit', JOBOBJECT_RATE_CONTROL_TOLERANCE),
    ('NetRateControlTolerance', JOBOBJECT_RATE_CONTROL_TOLERANCE),
    ('NetRateControlToleranceLimit', JOBOBJECT_RATE_CONTROL_TOLERANCE),
]

class struct__0C012E7FB514E07FED75904D822698CF(Structure):
    pass

struct__0C012E7FB514E07FED75904D822698CF._pack_ = 1 # source:False
struct__0C012E7FB514E07FED75904D822698CF._fields_ = [
    ('MinRate', ctypes.c_uint16),
    ('MaxRate', ctypes.c_uint16),
]

class union__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION___0A78906577EB6A018A7D48DE378D86E6(Union):
    pass

class struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION___0A78906577EB6A018A7D48DE378D86E6_0(Structure):
    pass

struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION___0A78906577EB6A018A7D48DE378D86E6_0._pack_ = 1 # source:False
struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION___0A78906577EB6A018A7D48DE378D86E6_0._fields_ = [
    ('MinRate', ctypes.c_uint16),
    ('MaxRate', ctypes.c_uint16),
]

union__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION___0A78906577EB6A018A7D48DE378D86E6._pack_ = 1 # source:False
union__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION___0A78906577EB6A018A7D48DE378D86E6._anonymous_ = ('_0',)
union__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION___0A78906577EB6A018A7D48DE378D86E6._fields_ = [
    ('CpuRate', ctypes.c_uint32),
    ('Weight', ctypes.c_uint32),
    ('_0', struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION___0A78906577EB6A018A7D48DE378D86E6_0),
]

class struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION(Structure):
    pass

class union__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_0(Union):
    pass

class struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_0_0(Structure):
    pass

struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_0_0._pack_ = 1 # source:False
struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_0_0._fields_ = [
    ('MinRate', ctypes.c_uint16),
    ('MaxRate', ctypes.c_uint16),
]

union__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_0._pack_ = 1 # source:False
union__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_0._anonymous_ = ('_0',)
union__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_0._fields_ = [
    ('CpuRate', ctypes.c_uint32),
    ('Weight', ctypes.c_uint32),
    ('_0', struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_0_0),
]

struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION._pack_ = 1 # source:False
struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION._anonymous_ = ('_0',)
struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION._fields_ = [
    ('ControlFlags', ctypes.c_uint32),
    ('_0', union__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_0),
]

JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION = ctypes.POINTER(struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION)

# values for enumeration 'JOB_OBJECT_NET_RATE_CONTROL_FLAGS'
JOB_OBJECT_NET_RATE_CONTROL_FLAGS__enumvalues = {
    1: 'JOB_OBJECT_NET_RATE_CONTROL_ENABLE',
    2: 'JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH',
    4: 'JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG',
    7: 'JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS',
}
JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1
JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2
JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4
JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7
JOB_OBJECT_NET_RATE_CONTROL_FLAGS = ctypes.c_uint32 # enum
__C_ASSERT__ = ctypes.c_char * 1
class struct_JOBOBJECT_NET_RATE_CONTROL_INFORMATION(Structure):
    pass

struct_JOBOBJECT_NET_RATE_CONTROL_INFORMATION._pack_ = 1 # source:False
struct_JOBOBJECT_NET_RATE_CONTROL_INFORMATION._fields_ = [
    ('MaxBandwidth', ctypes.c_uint64),
    ('ControlFlags', JOB_OBJECT_NET_RATE_CONTROL_FLAGS),
    ('DscpTag', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]


# values for enumeration 'JOB_OBJECT_IO_RATE_CONTROL_FLAGS'
JOB_OBJECT_IO_RATE_CONTROL_FLAGS__enumvalues = {
    1: 'JOB_OBJECT_IO_RATE_CONTROL_ENABLE',
    2: 'JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME',
    4: 'JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL',
    8: 'JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP',
    15: 'JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS',
}
JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1
JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2
JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4
JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8
JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15
JOB_OBJECT_IO_RATE_CONTROL_FLAGS = ctypes.c_uint32 # enum
class struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE(Structure):
    pass

struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE._pack_ = 1 # source:False
struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE._fields_ = [
    ('MaxIops', ctypes.c_int64),
    ('MaxBandwidth', ctypes.c_int64),
    ('ReservationIops', ctypes.c_int64),
    ('VolumeName', ctypes.POINTER(ctypes.c_int16)),
    ('BaseIoSize', ctypes.c_uint32),
    ('ControlFlags', JOB_OBJECT_IO_RATE_CONTROL_FLAGS),
    ('VolumeNameLength', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1 = struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE
class struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2(Structure):
    pass

struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2._pack_ = 1 # source:False
struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2._fields_ = [
    ('MaxIops', ctypes.c_int64),
    ('MaxBandwidth', ctypes.c_int64),
    ('ReservationIops', ctypes.c_int64),
    ('VolumeName', ctypes.POINTER(ctypes.c_int16)),
    ('BaseIoSize', ctypes.c_uint32),
    ('ControlFlags', JOB_OBJECT_IO_RATE_CONTROL_FLAGS),
    ('VolumeNameLength', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 6),
    ('CriticalReservationIops', ctypes.c_int64),
    ('ReservationBandwidth', ctypes.c_int64),
    ('CriticalReservationBandwidth', ctypes.c_int64),
    ('MaxTimePercent', ctypes.c_int64),
    ('ReservationTimePercent', ctypes.c_int64),
    ('CriticalReservationTimePercent', ctypes.c_int64),
]

class struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3(Structure):
    pass

struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3._pack_ = 1 # source:False
struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3._fields_ = [
    ('MaxIops', ctypes.c_int64),
    ('MaxBandwidth', ctypes.c_int64),
    ('ReservationIops', ctypes.c_int64),
    ('VolumeName', ctypes.POINTER(ctypes.c_int16)),
    ('BaseIoSize', ctypes.c_uint32),
    ('ControlFlags', JOB_OBJECT_IO_RATE_CONTROL_FLAGS),
    ('VolumeNameLength', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 6),
    ('CriticalReservationIops', ctypes.c_int64),
    ('ReservationBandwidth', ctypes.c_int64),
    ('CriticalReservationBandwidth', ctypes.c_int64),
    ('MaxTimePercent', ctypes.c_int64),
    ('ReservationTimePercent', ctypes.c_int64),
    ('CriticalReservationTimePercent', ctypes.c_int64),
    ('SoftMaxIops', ctypes.c_int64),
    ('SoftMaxBandwidth', ctypes.c_int64),
    ('SoftMaxTimePercent', ctypes.c_int64),
    ('LimitExcessNotifyIops', ctypes.c_int64),
    ('LimitExcessNotifyBandwidth', ctypes.c_int64),
    ('LimitExcessNotifyTimePercent', ctypes.c_int64),
]


# values for enumeration 'JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS'
JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS__enumvalues = {
    1: 'JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE',
    2: 'JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE',
    3: 'JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS',
}
JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 1
JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 2
JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 3
JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = ctypes.c_uint32 # enum
class struct__JOBOBJECT_IO_ATTRIBUTION_STATS(Structure):
    pass

struct__JOBOBJECT_IO_ATTRIBUTION_STATS._pack_ = 1 # source:False
struct__JOBOBJECT_IO_ATTRIBUTION_STATS._fields_ = [
    ('IoCount', ctypes.c_uint64),
    ('TotalNonOverlappedQueueTime', ctypes.c_uint64),
    ('TotalNonOverlappedServiceTime', ctypes.c_uint64),
    ('TotalSize', ctypes.c_uint64),
]

JOBOBJECT_IO_ATTRIBUTION_STATS = struct__JOBOBJECT_IO_ATTRIBUTION_STATS
PJOBOBJECT_IO_ATTRIBUTION_STATS = ctypes.POINTER(struct__JOBOBJECT_IO_ATTRIBUTION_STATS)
class struct__JOBOBJECT_IO_ATTRIBUTION_INFORMATION(Structure):
    pass

struct__JOBOBJECT_IO_ATTRIBUTION_INFORMATION._pack_ = 1 # source:False
struct__JOBOBJECT_IO_ATTRIBUTION_INFORMATION._fields_ = [
    ('ControlFlags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ReadStats', JOBOBJECT_IO_ATTRIBUTION_STATS),
    ('WriteStats', JOBOBJECT_IO_ATTRIBUTION_STATS),
]

JOBOBJECT_IO_ATTRIBUTION_INFORMATION = struct__JOBOBJECT_IO_ATTRIBUTION_INFORMATION
PJOBOBJECT_IO_ATTRIBUTION_INFORMATION = ctypes.POINTER(struct__JOBOBJECT_IO_ATTRIBUTION_INFORMATION)

# values for enumeration '_JOBOBJECTINFOCLASS'
_JOBOBJECTINFOCLASS__enumvalues = {
    1: 'JobObjectBasicAccountingInformation',
    2: 'JobObjectBasicLimitInformation',
    3: 'JobObjectBasicProcessIdList',
    4: 'JobObjectBasicUIRestrictions',
    5: 'JobObjectSecurityLimitInformation',
    6: 'JobObjectEndOfJobTimeInformation',
    7: 'JobObjectAssociateCompletionPortInformation',
    8: 'JobObjectBasicAndIoAccountingInformation',
    9: 'JobObjectExtendedLimitInformation',
    10: 'JobObjectJobSetInformation',
    11: 'JobObjectGroupInformation',
    12: 'JobObjectNotificationLimitInformation',
    13: 'JobObjectLimitViolationInformation',
    14: 'JobObjectGroupInformationEx',
    15: 'JobObjectCpuRateControlInformation',
    16: 'JobObjectCompletionFilter',
    17: 'JobObjectCompletionCounter',
    18: 'JobObjectReserved1Information',
    19: 'JobObjectReserved2Information',
    20: 'JobObjectReserved3Information',
    21: 'JobObjectReserved4Information',
    22: 'JobObjectReserved5Information',
    23: 'JobObjectReserved6Information',
    24: 'JobObjectReserved7Information',
    25: 'JobObjectReserved8Information',
    26: 'JobObjectReserved9Information',
    27: 'JobObjectReserved10Information',
    28: 'JobObjectReserved11Information',
    29: 'JobObjectReserved12Information',
    30: 'JobObjectReserved13Information',
    31: 'JobObjectReserved14Information',
    32: 'JobObjectNetRateControlInformation',
    33: 'JobObjectNotificationLimitInformation2',
    34: 'JobObjectLimitViolationInformation2',
    35: 'JobObjectCreateSilo',
    36: 'JobObjectSiloBasicInformation',
    37: 'JobObjectReserved15Information',
    38: 'JobObjectReserved16Information',
    39: 'JobObjectReserved17Information',
    40: 'JobObjectReserved18Information',
    41: 'JobObjectReserved19Information',
    42: 'JobObjectReserved20Information',
    43: 'JobObjectReserved21Information',
    44: 'JobObjectReserved22Information',
    45: 'JobObjectReserved23Information',
    46: 'JobObjectReserved24Information',
    47: 'JobObjectReserved25Information',
    48: 'MaxJobObjectInfoClass',
}
JobObjectBasicAccountingInformation = 1
JobObjectBasicLimitInformation = 2
JobObjectBasicProcessIdList = 3
JobObjectBasicUIRestrictions = 4
JobObjectSecurityLimitInformation = 5
JobObjectEndOfJobTimeInformation = 6
JobObjectAssociateCompletionPortInformation = 7
JobObjectBasicAndIoAccountingInformation = 8
JobObjectExtendedLimitInformation = 9
JobObjectJobSetInformation = 10
JobObjectGroupInformation = 11
JobObjectNotificationLimitInformation = 12
JobObjectLimitViolationInformation = 13
JobObjectGroupInformationEx = 14
JobObjectCpuRateControlInformation = 15
JobObjectCompletionFilter = 16
JobObjectCompletionCounter = 17
JobObjectReserved1Information = 18
JobObjectReserved2Information = 19
JobObjectReserved3Information = 20
JobObjectReserved4Information = 21
JobObjectReserved5Information = 22
JobObjectReserved6Information = 23
JobObjectReserved7Information = 24
JobObjectReserved8Information = 25
JobObjectReserved9Information = 26
JobObjectReserved10Information = 27
JobObjectReserved11Information = 28
JobObjectReserved12Information = 29
JobObjectReserved13Information = 30
JobObjectReserved14Information = 31
JobObjectNetRateControlInformation = 32
JobObjectNotificationLimitInformation2 = 33
JobObjectLimitViolationInformation2 = 34
JobObjectCreateSilo = 35
JobObjectSiloBasicInformation = 36
JobObjectReserved15Information = 37
JobObjectReserved16Information = 38
JobObjectReserved17Information = 39
JobObjectReserved18Information = 40
JobObjectReserved19Information = 41
JobObjectReserved20Information = 42
JobObjectReserved21Information = 43
JobObjectReserved22Information = 44
JobObjectReserved23Information = 45
JobObjectReserved24Information = 46
JobObjectReserved25Information = 47
MaxJobObjectInfoClass = 48
_JOBOBJECTINFOCLASS = ctypes.c_uint32 # enum
JOBOBJECTINFOCLASS = _JOBOBJECTINFOCLASS
JOBOBJECTINFOCLASS__enumvalues = _JOBOBJECTINFOCLASS__enumvalues
class struct__SILOOBJECT_BASIC_INFORMATION(Structure):
    pass

struct__SILOOBJECT_BASIC_INFORMATION._pack_ = 1 # source:False
struct__SILOOBJECT_BASIC_INFORMATION._fields_ = [
    ('SiloId', ctypes.c_uint32),
    ('SiloParentId', ctypes.c_uint32),
    ('NumberOfProcesses', ctypes.c_uint32),
    ('IsInServerSilo', ctypes.c_ubyte),
    ('Reserved', ctypes.c_ubyte * 3),
]

SILOOBJECT_BASIC_INFORMATION = struct__SILOOBJECT_BASIC_INFORMATION
PSILOOBJECT_BASIC_INFORMATION = ctypes.POINTER(struct__SILOOBJECT_BASIC_INFORMATION)

# values for enumeration '_SERVERSILO_STATE'
_SERVERSILO_STATE__enumvalues = {
    0: 'SERVERSILO_INITING',
    1: 'SERVERSILO_STARTED',
    2: 'SERVERSILO_SHUTTING_DOWN',
    3: 'SERVERSILO_TERMINATING',
    4: 'SERVERSILO_TERMINATED',
}
SERVERSILO_INITING = 0
SERVERSILO_STARTED = 1
SERVERSILO_SHUTTING_DOWN = 2
SERVERSILO_TERMINATING = 3
SERVERSILO_TERMINATED = 4
_SERVERSILO_STATE = ctypes.c_uint32 # enum
SERVERSILO_STATE = _SERVERSILO_STATE
SERVERSILO_STATE__enumvalues = _SERVERSILO_STATE__enumvalues
PSERVERSILO_STATE = ctypes.POINTER(_SERVERSILO_STATE)
class struct__SERVERSILO_BASIC_INFORMATION(Structure):
    pass

struct__SERVERSILO_BASIC_INFORMATION._pack_ = 1 # source:False
struct__SERVERSILO_BASIC_INFORMATION._fields_ = [
    ('ServiceSessionId', ctypes.c_uint32),
    ('State', SERVERSILO_STATE),
    ('ExitStatus', ctypes.c_uint32),
    ('IsDownlevelContainer', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('ApiSetSchema', ctypes.POINTER(None)),
    ('HostApiSetSchema', ctypes.POINTER(None)),
]

SERVERSILO_BASIC_INFORMATION = struct__SERVERSILO_BASIC_INFORMATION
PSERVERSILO_BASIC_INFORMATION = ctypes.POINTER(struct__SERVERSILO_BASIC_INFORMATION)

# values for enumeration '_FIRMWARE_TYPE'
_FIRMWARE_TYPE__enumvalues = {
    0: 'FirmwareTypeUnknown',
    1: 'FirmwareTypeBios',
    2: 'FirmwareTypeUefi',
    3: 'FirmwareTypeMax',
}
FirmwareTypeUnknown = 0
FirmwareTypeBios = 1
FirmwareTypeUefi = 2
FirmwareTypeMax = 3
_FIRMWARE_TYPE = ctypes.c_uint32 # enum
FIRMWARE_TYPE = _FIRMWARE_TYPE
FIRMWARE_TYPE__enumvalues = _FIRMWARE_TYPE__enumvalues
PFIRMWARE_TYPE = ctypes.POINTER(_FIRMWARE_TYPE)

# values for enumeration '_LOGICAL_PROCESSOR_RELATIONSHIP'
_LOGICAL_PROCESSOR_RELATIONSHIP__enumvalues = {
    0: 'RelationProcessorCore',
    1: 'RelationNumaNode',
    2: 'RelationCache',
    3: 'RelationProcessorPackage',
    4: 'RelationGroup',
    65535: 'RelationAll',
}
RelationProcessorCore = 0
RelationNumaNode = 1
RelationCache = 2
RelationProcessorPackage = 3
RelationGroup = 4
RelationAll = 65535
_LOGICAL_PROCESSOR_RELATIONSHIP = ctypes.c_uint32 # enum
LOGICAL_PROCESSOR_RELATIONSHIP = _LOGICAL_PROCESSOR_RELATIONSHIP
LOGICAL_PROCESSOR_RELATIONSHIP__enumvalues = _LOGICAL_PROCESSOR_RELATIONSHIP__enumvalues

# values for enumeration '_PROCESSOR_CACHE_TYPE'
_PROCESSOR_CACHE_TYPE__enumvalues = {
    0: 'CacheUnified',
    1: 'CacheInstruction',
    2: 'CacheData',
    3: 'CacheTrace',
}
CacheUnified = 0
CacheInstruction = 1
CacheData = 2
CacheTrace = 3
_PROCESSOR_CACHE_TYPE = ctypes.c_uint32 # enum
PROCESSOR_CACHE_TYPE = _PROCESSOR_CACHE_TYPE
PROCESSOR_CACHE_TYPE__enumvalues = _PROCESSOR_CACHE_TYPE__enumvalues
class struct__CACHE_DESCRIPTOR(Structure):
    pass

struct__CACHE_DESCRIPTOR._pack_ = 1 # source:False
struct__CACHE_DESCRIPTOR._fields_ = [
    ('Level', ctypes.c_ubyte),
    ('Associativity', ctypes.c_ubyte),
    ('LineSize', ctypes.c_uint16),
    ('Size', ctypes.c_uint32),
    ('Type', PROCESSOR_CACHE_TYPE),
]

CACHE_DESCRIPTOR = struct__CACHE_DESCRIPTOR
PCACHE_DESCRIPTOR = ctypes.POINTER(struct__CACHE_DESCRIPTOR)
class struct__91BE8B12E17010F0620FEFDE5E6D353E(Structure):
    pass

struct__91BE8B12E17010F0620FEFDE5E6D353E._pack_ = 1 # source:False
struct__91BE8B12E17010F0620FEFDE5E6D353E._fields_ = [
    ('Flags', ctypes.c_ubyte),
]

class struct__3CDD4E41B95D6674BCA9CBF95BB4D431(Structure):
    pass

struct__3CDD4E41B95D6674BCA9CBF95BB4D431._pack_ = 1 # source:False
struct__3CDD4E41B95D6674BCA9CBF95BB4D431._fields_ = [
    ('NodeNumber', ctypes.c_uint32),
]

class union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION___A72591C6312B90667A3E1A9E7D6F3CE1(Union):
    pass

union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION___A72591C6312B90667A3E1A9E7D6F3CE1._pack_ = 1 # source:False
union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION___A72591C6312B90667A3E1A9E7D6F3CE1._fields_ = [
    ('ProcessorCore', struct__91BE8B12E17010F0620FEFDE5E6D353E),
    ('NumaNode', struct__3CDD4E41B95D6674BCA9CBF95BB4D431),
    ('Cache', CACHE_DESCRIPTOR),
    ('Reserved', ctypes.c_uint64 * 2),
]

class struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION(Structure):
    pass

class union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_0(Union):
    pass

union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_0._pack_ = 1 # source:False
union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_0._fields_ = [
    ('ProcessorCore', struct__91BE8B12E17010F0620FEFDE5E6D353E),
    ('NumaNode', struct__3CDD4E41B95D6674BCA9CBF95BB4D431),
    ('Cache', CACHE_DESCRIPTOR),
    ('Reserved', ctypes.c_uint64 * 2),
]

struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION._pack_ = 1 # source:False
struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION._anonymous_ = ('_0',)
struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION._fields_ = [
    ('ProcessorMask', ctypes.c_uint64),
    ('Relationship', LOGICAL_PROCESSOR_RELATIONSHIP),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('_0', union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_0),
]

SYSTEM_LOGICAL_PROCESSOR_INFORMATION = struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION
PSYSTEM_LOGICAL_PROCESSOR_INFORMATION = ctypes.POINTER(struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION)
class struct__PROCESSOR_RELATIONSHIP(Structure):
    pass

struct__PROCESSOR_RELATIONSHIP._pack_ = 1 # source:False
struct__PROCESSOR_RELATIONSHIP._fields_ = [
    ('Flags', ctypes.c_ubyte),
    ('EfficiencyClass', ctypes.c_ubyte),
    ('Reserved', ctypes.c_ubyte * 20),
    ('GroupCount', ctypes.c_uint16),
    ('GroupMask', struct__GROUP_AFFINITY * 1),
]

PROCESSOR_RELATIONSHIP = struct__PROCESSOR_RELATIONSHIP
PPROCESSOR_RELATIONSHIP = ctypes.POINTER(struct__PROCESSOR_RELATIONSHIP)
class struct__NUMA_NODE_RELATIONSHIP(Structure):
    pass

struct__NUMA_NODE_RELATIONSHIP._pack_ = 1 # source:False
struct__NUMA_NODE_RELATIONSHIP._fields_ = [
    ('NodeNumber', ctypes.c_uint32),
    ('Reserved', ctypes.c_ubyte * 20),
    ('GroupMask', GROUP_AFFINITY),
]

NUMA_NODE_RELATIONSHIP = struct__NUMA_NODE_RELATIONSHIP
PNUMA_NODE_RELATIONSHIP = ctypes.POINTER(struct__NUMA_NODE_RELATIONSHIP)
class struct__CACHE_RELATIONSHIP(Structure):
    pass

struct__CACHE_RELATIONSHIP._pack_ = 1 # source:False
struct__CACHE_RELATIONSHIP._fields_ = [
    ('Level', ctypes.c_ubyte),
    ('Associativity', ctypes.c_ubyte),
    ('LineSize', ctypes.c_uint16),
    ('CacheSize', ctypes.c_uint32),
    ('Type', PROCESSOR_CACHE_TYPE),
    ('Reserved', ctypes.c_ubyte * 20),
    ('GroupMask', GROUP_AFFINITY),
]

CACHE_RELATIONSHIP = struct__CACHE_RELATIONSHIP
PCACHE_RELATIONSHIP = ctypes.POINTER(struct__CACHE_RELATIONSHIP)
class struct__PROCESSOR_GROUP_INFO(Structure):
    pass

struct__PROCESSOR_GROUP_INFO._pack_ = 1 # source:False
struct__PROCESSOR_GROUP_INFO._fields_ = [
    ('MaximumProcessorCount', ctypes.c_ubyte),
    ('ActiveProcessorCount', ctypes.c_ubyte),
    ('Reserved', ctypes.c_ubyte * 38),
    ('ActiveProcessorMask', ctypes.c_uint64),
]

PROCESSOR_GROUP_INFO = struct__PROCESSOR_GROUP_INFO
PPROCESSOR_GROUP_INFO = ctypes.POINTER(struct__PROCESSOR_GROUP_INFO)
class struct__GROUP_RELATIONSHIP(Structure):
    pass

struct__GROUP_RELATIONSHIP._pack_ = 1 # source:False
struct__GROUP_RELATIONSHIP._fields_ = [
    ('MaximumGroupCount', ctypes.c_uint16),
    ('ActiveGroupCount', ctypes.c_uint16),
    ('Reserved', ctypes.c_ubyte * 20),
    ('GroupInfo', struct__PROCESSOR_GROUP_INFO * 1),
]

GROUP_RELATIONSHIP = struct__GROUP_RELATIONSHIP
PGROUP_RELATIONSHIP = ctypes.POINTER(struct__GROUP_RELATIONSHIP)
class union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX___197D4A2D4E66A1B805F54436C362DBE8(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Processor', PROCESSOR_RELATIONSHIP),
    ('NumaNode', NUMA_NODE_RELATIONSHIP),
    ('Cache', CACHE_RELATIONSHIP),
    ('Group', GROUP_RELATIONSHIP),
     ]

class struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX(Structure):
    pass

class union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX_0(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Processor', PROCESSOR_RELATIONSHIP),
    ('NumaNode', NUMA_NODE_RELATIONSHIP),
    ('Cache', CACHE_RELATIONSHIP),
    ('Group', GROUP_RELATIONSHIP),
     ]

struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX._pack_ = 1 # source:False
struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX._anonymous_ = ('_0',)
struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX._fields_ = [
    ('Relationship', LOGICAL_PROCESSOR_RELATIONSHIP),
    ('Size', ctypes.c_uint32),
    ('_0', union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX_0),
]

SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = ctypes.POINTER(struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX)

# values for enumeration '_CPU_SET_INFORMATION_TYPE'
_CPU_SET_INFORMATION_TYPE__enumvalues = {
    0: 'CpuSetInformation',
}
CpuSetInformation = 0
_CPU_SET_INFORMATION_TYPE = ctypes.c_uint32 # enum
CPU_SET_INFORMATION_TYPE = _CPU_SET_INFORMATION_TYPE
CPU_SET_INFORMATION_TYPE__enumvalues = _CPU_SET_INFORMATION_TYPE__enumvalues
PCPU_SET_INFORMATION_TYPE = ctypes.POINTER(_CPU_SET_INFORMATION_TYPE)
class struct__E2FC796E7F2D840DF2C457E32E2CE7FB(Structure):
    pass

struct__E2FC796E7F2D840DF2C457E32E2CE7FB._pack_ = 1 # source:False
struct__E2FC796E7F2D840DF2C457E32E2CE7FB._fields_ = [
    ('Parked', ctypes.c_ubyte, 1),
    ('Allocated', ctypes.c_ubyte, 1),
    ('AllocatedToTargetProcess', ctypes.c_ubyte, 1),
    ('RealTime', ctypes.c_ubyte, 1),
    ('ReservedFlags', ctypes.c_ubyte, 4),
]

class union__657BB06EF05633356CF4CD431076EE5F(Union):
    pass

class struct__657BB06EF05633356CF4CD431076EE5F_0(Structure):
    pass

struct__657BB06EF05633356CF4CD431076EE5F_0._pack_ = 1 # source:False
struct__657BB06EF05633356CF4CD431076EE5F_0._fields_ = [
    ('Parked', ctypes.c_ubyte, 1),
    ('Allocated', ctypes.c_ubyte, 1),
    ('AllocatedToTargetProcess', ctypes.c_ubyte, 1),
    ('RealTime', ctypes.c_ubyte, 1),
    ('ReservedFlags', ctypes.c_ubyte, 4),
]

union__657BB06EF05633356CF4CD431076EE5F._pack_ = 1 # source:False
union__657BB06EF05633356CF4CD431076EE5F._anonymous_ = ('_0',)
union__657BB06EF05633356CF4CD431076EE5F._fields_ = [
    ('AllFlags', ctypes.c_ubyte),
    ('_0', struct__657BB06EF05633356CF4CD431076EE5F_0),
]

class union__737796C66F638B60D7AE7CF23E72B833(Union):
    pass

union__737796C66F638B60D7AE7CF23E72B833._pack_ = 1 # source:False
union__737796C66F638B60D7AE7CF23E72B833._fields_ = [
    ('Reserved', ctypes.c_uint32),
    ('SchedulingClass', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

class struct__F655080F086C2BFA46941FA1A6DAACEC(Structure):
    pass

class union__F655080F086C2BFA46941FA1A6DAACEC_0(Union):
    pass

class struct__F655080F086C2BFA46941FA1A6DAACEC_0_0(Structure):
    pass

struct__F655080F086C2BFA46941FA1A6DAACEC_0_0._pack_ = 1 # source:False
struct__F655080F086C2BFA46941FA1A6DAACEC_0_0._fields_ = [
    ('Parked', ctypes.c_ubyte, 1),
    ('Allocated', ctypes.c_ubyte, 1),
    ('AllocatedToTargetProcess', ctypes.c_ubyte, 1),
    ('RealTime', ctypes.c_ubyte, 1),
    ('ReservedFlags', ctypes.c_ubyte, 4),
]

union__F655080F086C2BFA46941FA1A6DAACEC_0._pack_ = 1 # source:False
union__F655080F086C2BFA46941FA1A6DAACEC_0._anonymous_ = ('_0',)
union__F655080F086C2BFA46941FA1A6DAACEC_0._fields_ = [
    ('AllFlags', ctypes.c_ubyte),
    ('_0', struct__F655080F086C2BFA46941FA1A6DAACEC_0_0),
]

class union__F655080F086C2BFA46941FA1A6DAACEC_1(Union):
    pass

union__F655080F086C2BFA46941FA1A6DAACEC_1._pack_ = 1 # source:False
union__F655080F086C2BFA46941FA1A6DAACEC_1._fields_ = [
    ('Reserved', ctypes.c_uint32),
    ('SchedulingClass', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

struct__F655080F086C2BFA46941FA1A6DAACEC._pack_ = 1 # source:False
struct__F655080F086C2BFA46941FA1A6DAACEC._anonymous_ = ('_0', '_1',)
struct__F655080F086C2BFA46941FA1A6DAACEC._fields_ = [
    ('Id', ctypes.c_uint32),
    ('Group', ctypes.c_uint16),
    ('LogicalProcessorIndex', ctypes.c_ubyte),
    ('CoreIndex', ctypes.c_ubyte),
    ('LastLevelCacheIndex', ctypes.c_ubyte),
    ('NumaNodeIndex', ctypes.c_ubyte),
    ('EfficiencyClass', ctypes.c_ubyte),
    ('_0', union__F655080F086C2BFA46941FA1A6DAACEC_0),
    ('_1', union__F655080F086C2BFA46941FA1A6DAACEC_1),
    ('AllocationTag', ctypes.c_uint64),
]

class union__SYSTEM_CPU_SET_INFORMATION___4C07F9F4DAD68F59647F76D6630D6FCA(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('CpuSet', struct__F655080F086C2BFA46941FA1A6DAACEC),
     ]

class struct__SYSTEM_CPU_SET_INFORMATION(Structure):
    pass

class union__SYSTEM_CPU_SET_INFORMATION_0(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('CpuSet', struct__F655080F086C2BFA46941FA1A6DAACEC),
     ]

struct__SYSTEM_CPU_SET_INFORMATION._pack_ = 1 # source:False
struct__SYSTEM_CPU_SET_INFORMATION._anonymous_ = ('_0',)
struct__SYSTEM_CPU_SET_INFORMATION._fields_ = [
    ('Size', ctypes.c_uint32),
    ('Type', CPU_SET_INFORMATION_TYPE),
    ('_0', union__SYSTEM_CPU_SET_INFORMATION_0),
]

SYSTEM_CPU_SET_INFORMATION = struct__SYSTEM_CPU_SET_INFORMATION
PSYSTEM_CPU_SET_INFORMATION = ctypes.POINTER(struct__SYSTEM_CPU_SET_INFORMATION)
class struct__SYSTEM_POOL_ZEROING_INFORMATION(Structure):
    pass

struct__SYSTEM_POOL_ZEROING_INFORMATION._pack_ = 1 # source:False
struct__SYSTEM_POOL_ZEROING_INFORMATION._fields_ = [
    ('PoolZeroingSupportPresent', ctypes.c_ubyte),
]

SYSTEM_POOL_ZEROING_INFORMATION = struct__SYSTEM_POOL_ZEROING_INFORMATION
PSYSTEM_POOL_ZEROING_INFORMATION = ctypes.POINTER(struct__SYSTEM_POOL_ZEROING_INFORMATION)
class struct__SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION(Structure):
    pass

struct__SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION._pack_ = 1 # source:False
struct__SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION._fields_ = [
    ('CycleTime', ctypes.c_uint64),
]

SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = struct__SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = ctypes.POINTER(struct__SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION)
class struct__XSTATE_FEATURE(Structure):
    pass

struct__XSTATE_FEATURE._pack_ = 1 # source:False
struct__XSTATE_FEATURE._fields_ = [
    ('Offset', ctypes.c_uint32),
    ('Size', ctypes.c_uint32),
]

XSTATE_FEATURE = struct__XSTATE_FEATURE
PXSTATE_FEATURE = ctypes.POINTER(struct__XSTATE_FEATURE)
class struct__62654262369868C0312B20411168132E(Structure):
    pass

struct__62654262369868C0312B20411168132E._pack_ = 1 # source:False
struct__62654262369868C0312B20411168132E._fields_ = [
    ('OptimizedSave', ctypes.c_uint32, 1),
    ('CompactionEnabled', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 30),
]

class union__XSTATE_CONFIGURATION___0E174CAD3789465778ACEBD04EE85B1A(Union):
    pass

class struct__XSTATE_CONFIGURATION___0E174CAD3789465778ACEBD04EE85B1A_0(Structure):
    pass

struct__XSTATE_CONFIGURATION___0E174CAD3789465778ACEBD04EE85B1A_0._pack_ = 1 # source:False
struct__XSTATE_CONFIGURATION___0E174CAD3789465778ACEBD04EE85B1A_0._fields_ = [
    ('OptimizedSave', ctypes.c_uint32, 1),
    ('CompactionEnabled', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 30),
]

union__XSTATE_CONFIGURATION___0E174CAD3789465778ACEBD04EE85B1A._pack_ = 1 # source:False
union__XSTATE_CONFIGURATION___0E174CAD3789465778ACEBD04EE85B1A._anonymous_ = ('_0',)
union__XSTATE_CONFIGURATION___0E174CAD3789465778ACEBD04EE85B1A._fields_ = [
    ('ControlFlags', ctypes.c_uint32),
    ('_0', struct__XSTATE_CONFIGURATION___0E174CAD3789465778ACEBD04EE85B1A_0),
]

class struct__XSTATE_CONFIGURATION(Structure):
    pass

class union__XSTATE_CONFIGURATION_0(Union):
    pass

class struct__XSTATE_CONFIGURATION_0_0(Structure):
    pass

struct__XSTATE_CONFIGURATION_0_0._pack_ = 1 # source:False
struct__XSTATE_CONFIGURATION_0_0._fields_ = [
    ('OptimizedSave', ctypes.c_uint32, 1),
    ('CompactionEnabled', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 30),
]

union__XSTATE_CONFIGURATION_0._pack_ = 1 # source:False
union__XSTATE_CONFIGURATION_0._anonymous_ = ('_0',)
union__XSTATE_CONFIGURATION_0._fields_ = [
    ('ControlFlags', ctypes.c_uint32),
    ('_0', struct__XSTATE_CONFIGURATION_0_0),
]

struct__XSTATE_CONFIGURATION._pack_ = 1 # source:False
struct__XSTATE_CONFIGURATION._anonymous_ = ('_0',)
struct__XSTATE_CONFIGURATION._fields_ = [
    ('EnabledFeatures', ctypes.c_uint64),
    ('EnabledVolatileFeatures', ctypes.c_uint64),
    ('Size', ctypes.c_uint32),
    ('_0', union__XSTATE_CONFIGURATION_0),
    ('Features', struct__XSTATE_FEATURE * 64),
    ('EnabledSupervisorFeatures', ctypes.c_uint64),
    ('AlignedFeatures', ctypes.c_uint64),
    ('AllFeatureSize', ctypes.c_uint32),
    ('AllFeatures', ctypes.c_uint32 * 64),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('EnabledUserVisibleSupervisorFeatures', ctypes.c_uint64),
]

XSTATE_CONFIGURATION = struct__XSTATE_CONFIGURATION
PXSTATE_CONFIGURATION = ctypes.POINTER(struct__XSTATE_CONFIGURATION)
class struct__MEMORY_BASIC_INFORMATION(Structure):
    pass

struct__MEMORY_BASIC_INFORMATION._pack_ = 1 # source:False
struct__MEMORY_BASIC_INFORMATION._fields_ = [
    ('BaseAddress', ctypes.POINTER(None)),
    ('AllocationBase', ctypes.POINTER(None)),
    ('AllocationProtect', ctypes.c_uint32),
    ('PartitionId', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('RegionSize', ctypes.c_uint64),
    ('State', ctypes.c_uint32),
    ('Protect', ctypes.c_uint32),
    ('Type', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

MEMORY_BASIC_INFORMATION = struct__MEMORY_BASIC_INFORMATION
PMEMORY_BASIC_INFORMATION = ctypes.POINTER(struct__MEMORY_BASIC_INFORMATION)
class struct__MEMORY_BASIC_INFORMATION32(Structure):
    pass

struct__MEMORY_BASIC_INFORMATION32._pack_ = 1 # source:False
struct__MEMORY_BASIC_INFORMATION32._fields_ = [
    ('BaseAddress', ctypes.c_uint32),
    ('AllocationBase', ctypes.c_uint32),
    ('AllocationProtect', ctypes.c_uint32),
    ('RegionSize', ctypes.c_uint32),
    ('State', ctypes.c_uint32),
    ('Protect', ctypes.c_uint32),
    ('Type', ctypes.c_uint32),
]

MEMORY_BASIC_INFORMATION32 = struct__MEMORY_BASIC_INFORMATION32
PMEMORY_BASIC_INFORMATION32 = ctypes.POINTER(struct__MEMORY_BASIC_INFORMATION32)
class struct__MEMORY_BASIC_INFORMATION64(Structure):
    pass

struct__MEMORY_BASIC_INFORMATION64._pack_ = 1 # source:False
struct__MEMORY_BASIC_INFORMATION64._fields_ = [
    ('BaseAddress', ctypes.c_uint64),
    ('AllocationBase', ctypes.c_uint64),
    ('AllocationProtect', ctypes.c_uint32),
    ('__alignment1', ctypes.c_uint32),
    ('RegionSize', ctypes.c_uint64),
    ('State', ctypes.c_uint32),
    ('Protect', ctypes.c_uint32),
    ('Type', ctypes.c_uint32),
    ('__alignment2', ctypes.c_uint32),
]

MEMORY_BASIC_INFORMATION64 = struct__MEMORY_BASIC_INFORMATION64
PMEMORY_BASIC_INFORMATION64 = ctypes.POINTER(struct__MEMORY_BASIC_INFORMATION64)
class struct__CFG_CALL_TARGET_INFO(Structure):
    pass

struct__CFG_CALL_TARGET_INFO._pack_ = 1 # source:False
struct__CFG_CALL_TARGET_INFO._fields_ = [
    ('Offset', ctypes.c_uint64),
    ('Flags', ctypes.c_uint64),
]

CFG_CALL_TARGET_INFO = struct__CFG_CALL_TARGET_INFO
PCFG_CALL_TARGET_INFO = ctypes.POINTER(struct__CFG_CALL_TARGET_INFO)
class struct__MEM_ADDRESS_REQUIREMENTS(Structure):
    pass

struct__MEM_ADDRESS_REQUIREMENTS._pack_ = 1 # source:False
struct__MEM_ADDRESS_REQUIREMENTS._fields_ = [
    ('LowestStartingAddress', ctypes.POINTER(None)),
    ('HighestEndingAddress', ctypes.POINTER(None)),
    ('Alignment', ctypes.c_uint64),
]

MEM_ADDRESS_REQUIREMENTS = struct__MEM_ADDRESS_REQUIREMENTS
PMEM_ADDRESS_REQUIREMENTS = ctypes.POINTER(struct__MEM_ADDRESS_REQUIREMENTS)

# values for enumeration 'MEM_EXTENDED_PARAMETER_TYPE'
MEM_EXTENDED_PARAMETER_TYPE__enumvalues = {
    0: 'MemExtendedParameterInvalidType',
    1: 'MemExtendedParameterAddressRequirements',
    2: 'MemExtendedParameterNumaNode',
    3: 'MemExtendedParameterPartitionHandle',
    4: 'MemExtendedParameterUserPhysicalHandle',
    5: 'MemExtendedParameterAttributeFlags',
    6: 'MemExtendedParameterMax',
}
MemExtendedParameterInvalidType = 0
MemExtendedParameterAddressRequirements = 1
MemExtendedParameterNumaNode = 2
MemExtendedParameterPartitionHandle = 3
MemExtendedParameterUserPhysicalHandle = 4
MemExtendedParameterAttributeFlags = 5
MemExtendedParameterMax = 6
MEM_EXTENDED_PARAMETER_TYPE = ctypes.c_uint32 # enum
PMEM_EXTENDED_PARAMETER_TYPE = ctypes.POINTER(MEM_EXTENDED_PARAMETER_TYPE)
class struct_MEM_EXTENDED_PARAMETER___373F0C482CA2C07D4A7B2B94C5EA8081(Structure):
    pass

struct_MEM_EXTENDED_PARAMETER___373F0C482CA2C07D4A7B2B94C5EA8081._pack_ = 1 # source:False
struct_MEM_EXTENDED_PARAMETER___373F0C482CA2C07D4A7B2B94C5EA8081._fields_ = [
    ('Type', ctypes.c_uint64, 8),
    ('Reserved', ctypes.c_uint64, 56),
]

class union_MEM_EXTENDED_PARAMETER___A0403279FD043597B1263DCA6F7108AC(Union):
    pass

union_MEM_EXTENDED_PARAMETER___A0403279FD043597B1263DCA6F7108AC._pack_ = 1 # source:False
union_MEM_EXTENDED_PARAMETER___A0403279FD043597B1263DCA6F7108AC._fields_ = [
    ('ULong64', ctypes.c_uint64),
    ('Pointer', ctypes.POINTER(None)),
    ('Size', ctypes.c_uint64),
    ('Handle', ctypes.POINTER(None)),
    ('ULong', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_MEM_EXTENDED_PARAMETER(Structure):
    pass

class union_MEM_EXTENDED_PARAMETER_1(Union):
    pass

union_MEM_EXTENDED_PARAMETER_1._pack_ = 1 # source:False
union_MEM_EXTENDED_PARAMETER_1._fields_ = [
    ('ULong64', ctypes.c_uint64),
    ('Pointer', ctypes.POINTER(None)),
    ('Size', ctypes.c_uint64),
    ('Handle', ctypes.POINTER(None)),
    ('ULong', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_MEM_EXTENDED_PARAMETER_0(Structure):
    pass

struct_MEM_EXTENDED_PARAMETER_0._pack_ = 1 # source:False
struct_MEM_EXTENDED_PARAMETER_0._fields_ = [
    ('Type', ctypes.c_uint64, 8),
    ('Reserved', ctypes.c_uint64, 56),
]

struct_MEM_EXTENDED_PARAMETER._pack_ = 1 # source:False
struct_MEM_EXTENDED_PARAMETER._anonymous_ = ('_0', '_1',)
struct_MEM_EXTENDED_PARAMETER._fields_ = [
    ('_0', struct_MEM_EXTENDED_PARAMETER_0),
    ('_1', union_MEM_EXTENDED_PARAMETER_1),
]

PMEM_EXTENDED_PARAMETER = ctypes.POINTER(struct_MEM_EXTENDED_PARAMETER)

# values for enumeration 'MEM_SECTION_EXTENDED_PARAMETER_TYPE'
MEM_SECTION_EXTENDED_PARAMETER_TYPE__enumvalues = {
    0: 'MemSectionExtendedParameterInvalidType',
    1: 'MemSectionExtendedParameterUserPhysicalFlags',
    2: 'MemSectionExtendedParameterNumaNode',
    3: 'MemSectionExtendedParameterMax',
}
MemSectionExtendedParameterInvalidType = 0
MemSectionExtendedParameterUserPhysicalFlags = 1
MemSectionExtendedParameterNumaNode = 2
MemSectionExtendedParameterMax = 3
MEM_SECTION_EXTENDED_PARAMETER_TYPE = ctypes.c_uint32 # enum
PMEM_SECTION_EXTENDED_PARAMETER_TYPE = ctypes.POINTER(MEM_SECTION_EXTENDED_PARAMETER_TYPE)
class struct__ENCLAVE_CREATE_INFO_SGX(Structure):
    pass

struct__ENCLAVE_CREATE_INFO_SGX._pack_ = 1 # source:False
struct__ENCLAVE_CREATE_INFO_SGX._fields_ = [
    ('Secs', ctypes.c_ubyte * 4096),
]

ENCLAVE_CREATE_INFO_SGX = struct__ENCLAVE_CREATE_INFO_SGX
PENCLAVE_CREATE_INFO_SGX = ctypes.POINTER(struct__ENCLAVE_CREATE_INFO_SGX)
class struct__ENCLAVE_INIT_INFO_SGX(Structure):
    pass

struct__ENCLAVE_INIT_INFO_SGX._pack_ = 1 # source:False
struct__ENCLAVE_INIT_INFO_SGX._fields_ = [
    ('SigStruct', ctypes.c_ubyte * 1808),
    ('Reserved1', ctypes.c_ubyte * 240),
    ('EInitToken', ctypes.c_ubyte * 304),
    ('Reserved2', ctypes.c_ubyte * 1744),
]

ENCLAVE_INIT_INFO_SGX = struct__ENCLAVE_INIT_INFO_SGX
PENCLAVE_INIT_INFO_SGX = ctypes.POINTER(struct__ENCLAVE_INIT_INFO_SGX)
class struct__ENCLAVE_CREATE_INFO_VBS(Structure):
    pass

struct__ENCLAVE_CREATE_INFO_VBS._pack_ = 1 # source:False
struct__ENCLAVE_CREATE_INFO_VBS._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('OwnerID', ctypes.c_ubyte * 32),
]

ENCLAVE_CREATE_INFO_VBS = struct__ENCLAVE_CREATE_INFO_VBS
PENCLAVE_CREATE_INFO_VBS = ctypes.POINTER(struct__ENCLAVE_CREATE_INFO_VBS)
class struct__ENCLAVE_CREATE_INFO_VBS_BASIC(Structure):
    pass

struct__ENCLAVE_CREATE_INFO_VBS_BASIC._pack_ = 1 # source:False
struct__ENCLAVE_CREATE_INFO_VBS_BASIC._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('OwnerID', ctypes.c_ubyte * 32),
]

ENCLAVE_CREATE_INFO_VBS_BASIC = struct__ENCLAVE_CREATE_INFO_VBS_BASIC
PENCLAVE_CREATE_INFO_VBS_BASIC = ctypes.POINTER(struct__ENCLAVE_CREATE_INFO_VBS_BASIC)
class struct__ENCLAVE_LOAD_DATA_VBS_BASIC(Structure):
    pass

struct__ENCLAVE_LOAD_DATA_VBS_BASIC._pack_ = 1 # source:False
struct__ENCLAVE_LOAD_DATA_VBS_BASIC._fields_ = [
    ('PageType', ctypes.c_uint32),
]

ENCLAVE_LOAD_DATA_VBS_BASIC = struct__ENCLAVE_LOAD_DATA_VBS_BASIC
PENCLAVE_LOAD_DATA_VBS_BASIC = ctypes.POINTER(struct__ENCLAVE_LOAD_DATA_VBS_BASIC)
class union__ENCLAVE_INIT_INFO_VBS_BASIC___E986470CD2C6DC02ADF7706A4698918A(Union):
    pass

union__ENCLAVE_INIT_INFO_VBS_BASIC___E986470CD2C6DC02ADF7706A4698918A._pack_ = 1 # source:False
union__ENCLAVE_INIT_INFO_VBS_BASIC___E986470CD2C6DC02ADF7706A4698918A._fields_ = [
    ('SignatureInfoHandle', ctypes.POINTER(None)),
    ('Unused', ctypes.c_uint64),
]

class struct__ENCLAVE_INIT_INFO_VBS_BASIC(Structure):
    pass

class union__ENCLAVE_INIT_INFO_VBS_BASIC_0(Union):
    pass

union__ENCLAVE_INIT_INFO_VBS_BASIC_0._pack_ = 1 # source:False
union__ENCLAVE_INIT_INFO_VBS_BASIC_0._fields_ = [
    ('SignatureInfoHandle', ctypes.POINTER(None)),
    ('Unused', ctypes.c_uint64),
]

struct__ENCLAVE_INIT_INFO_VBS_BASIC._pack_ = 1 # source:False
struct__ENCLAVE_INIT_INFO_VBS_BASIC._anonymous_ = ('_0',)
struct__ENCLAVE_INIT_INFO_VBS_BASIC._fields_ = [
    ('FamilyId', ctypes.c_ubyte * 16),
    ('ImageId', ctypes.c_ubyte * 16),
    ('EnclaveSize', ctypes.c_uint64),
    ('EnclaveSvn', ctypes.c_uint32),
    ('Reserved', ctypes.c_uint32),
    ('_0', union__ENCLAVE_INIT_INFO_VBS_BASIC_0),
]

ENCLAVE_INIT_INFO_VBS_BASIC = struct__ENCLAVE_INIT_INFO_VBS_BASIC
PENCLAVE_INIT_INFO_VBS_BASIC = ctypes.POINTER(struct__ENCLAVE_INIT_INFO_VBS_BASIC)
class struct__ENCLAVE_INIT_INFO_VBS(Structure):
    pass

struct__ENCLAVE_INIT_INFO_VBS._pack_ = 1 # source:False
struct__ENCLAVE_INIT_INFO_VBS._fields_ = [
    ('Length', ctypes.c_uint32),
    ('ThreadCount', ctypes.c_uint32),
]

ENCLAVE_INIT_INFO_VBS = struct__ENCLAVE_INIT_INFO_VBS
PENCLAVE_INIT_INFO_VBS = ctypes.POINTER(struct__ENCLAVE_INIT_INFO_VBS)
ENCLAVE_TARGET_FUNCTION = ctypes.CFUNCTYPE(ctypes.POINTER(None), ctypes.POINTER(None))
PENCLAVE_TARGET_FUNCTION = ctypes.CFUNCTYPE(ctypes.POINTER(None), ctypes.POINTER(None))
LPENCLAVE_TARGET_FUNCTION = ctypes.CFUNCTYPE(ctypes.POINTER(None), ctypes.POINTER(None))
class struct__FILE_ID_128(Structure):
    pass

struct__FILE_ID_128._pack_ = 1 # source:False
struct__FILE_ID_128._fields_ = [
    ('Identifier', ctypes.c_ubyte * 16),
]

FILE_ID_128 = struct__FILE_ID_128
PFILE_ID_128 = ctypes.POINTER(struct__FILE_ID_128)
class struct__FILE_NOTIFY_INFORMATION(Structure):
    pass

struct__FILE_NOTIFY_INFORMATION._pack_ = 1 # source:False
struct__FILE_NOTIFY_INFORMATION._fields_ = [
    ('NextEntryOffset', ctypes.c_uint32),
    ('Action', ctypes.c_uint32),
    ('FileNameLength', ctypes.c_uint32),
    ('FileName', ctypes.c_int16 * 1),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

FILE_NOTIFY_INFORMATION = struct__FILE_NOTIFY_INFORMATION
PFILE_NOTIFY_INFORMATION = ctypes.POINTER(struct__FILE_NOTIFY_INFORMATION)
class struct__FILE_NOTIFY_EXTENDED_INFORMATION(Structure):
    pass

struct__FILE_NOTIFY_EXTENDED_INFORMATION._pack_ = 1 # source:False
struct__FILE_NOTIFY_EXTENDED_INFORMATION._fields_ = [
    ('NextEntryOffset', ctypes.c_uint32),
    ('Action', ctypes.c_uint32),
    ('CreationTime', LARGE_INTEGER),
    ('LastModificationTime', LARGE_INTEGER),
    ('LastChangeTime', LARGE_INTEGER),
    ('LastAccessTime', LARGE_INTEGER),
    ('AllocatedLength', LARGE_INTEGER),
    ('FileSize', LARGE_INTEGER),
    ('FileAttributes', ctypes.c_uint32),
    ('ReparsePointTag', ctypes.c_uint32),
    ('FileId', LARGE_INTEGER),
    ('ParentFileId', LARGE_INTEGER),
    ('FileNameLength', ctypes.c_uint32),
    ('FileName', ctypes.c_int16 * 1),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

FILE_NOTIFY_EXTENDED_INFORMATION = struct__FILE_NOTIFY_EXTENDED_INFORMATION
PFILE_NOTIFY_EXTENDED_INFORMATION = ctypes.POINTER(struct__FILE_NOTIFY_EXTENDED_INFORMATION)
class union__FILE_SEGMENT_ELEMENT(Union):
    pass

union__FILE_SEGMENT_ELEMENT._pack_ = 1 # source:False
union__FILE_SEGMENT_ELEMENT._fields_ = [
    ('Buffer', ctypes.POINTER(None)),
    ('Alignment', ctypes.c_uint64),
]

FILE_SEGMENT_ELEMENT = union__FILE_SEGMENT_ELEMENT
PFILE_SEGMENT_ELEMENT = ctypes.POINTER(union__FILE_SEGMENT_ELEMENT)
class struct__REPARSE_GUID_DATA_BUFFER___4C09336C782BA41E0611EC60EFCB5A31(Structure):
    pass

struct__REPARSE_GUID_DATA_BUFFER___4C09336C782BA41E0611EC60EFCB5A31._pack_ = 1 # source:False
struct__REPARSE_GUID_DATA_BUFFER___4C09336C782BA41E0611EC60EFCB5A31._fields_ = [
    ('DataBuffer', ctypes.c_ubyte * 1),
]

class struct__REPARSE_GUID_DATA_BUFFER(Structure):
    pass

struct__REPARSE_GUID_DATA_BUFFER._pack_ = 1 # source:False
struct__REPARSE_GUID_DATA_BUFFER._fields_ = [
    ('ReparseTag', ctypes.c_uint32),
    ('ReparseDataLength', ctypes.c_uint16),
    ('Reserved', ctypes.c_uint16),
    ('ReparseGuid', GUID),
    ('GenericReparseBuffer', struct__REPARSE_GUID_DATA_BUFFER___4C09336C782BA41E0611EC60EFCB5A31),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

REPARSE_GUID_DATA_BUFFER = struct__REPARSE_GUID_DATA_BUFFER
PREPARSE_GUID_DATA_BUFFER = ctypes.POINTER(struct__REPARSE_GUID_DATA_BUFFER)
class struct__SCRUB_DATA_INPUT(Structure):
    pass

struct__SCRUB_DATA_INPUT._pack_ = 1 # source:False
struct__SCRUB_DATA_INPUT._fields_ = [
    ('Size', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('MaximumIos', ctypes.c_uint32),
    ('ObjectId', ctypes.c_uint32 * 4),
    ('Reserved', ctypes.c_uint32 * 25),
    ('ResumeContext', ctypes.c_ubyte * 816),
]

SCRUB_DATA_INPUT = struct__SCRUB_DATA_INPUT
PSCRUB_DATA_INPUT = ctypes.POINTER(struct__SCRUB_DATA_INPUT)
class struct__SCRUB_PARITY_EXTENT(Structure):
    pass

struct__SCRUB_PARITY_EXTENT._pack_ = 1 # source:False
struct__SCRUB_PARITY_EXTENT._fields_ = [
    ('Offset', ctypes.c_int64),
    ('Length', ctypes.c_uint64),
]

SCRUB_PARITY_EXTENT = struct__SCRUB_PARITY_EXTENT
PSCRUB_PARITY_EXTENT = ctypes.POINTER(struct__SCRUB_PARITY_EXTENT)
class struct__SCRUB_PARITY_EXTENT_DATA(Structure):
    pass

struct__SCRUB_PARITY_EXTENT_DATA._pack_ = 1 # source:False
struct__SCRUB_PARITY_EXTENT_DATA._fields_ = [
    ('Size', ctypes.c_uint16),
    ('Flags', ctypes.c_uint16),
    ('NumberOfParityExtents', ctypes.c_uint16),
    ('MaximumNumberOfParityExtents', ctypes.c_uint16),
    ('ParityExtents', struct__SCRUB_PARITY_EXTENT * 1),
]

SCRUB_PARITY_EXTENT_DATA = struct__SCRUB_PARITY_EXTENT_DATA
PSCRUB_PARITY_EXTENT_DATA = ctypes.POINTER(struct__SCRUB_PARITY_EXTENT_DATA)
class struct__SCRUB_DATA_OUTPUT(Structure):
    pass

struct__SCRUB_DATA_OUTPUT._pack_ = 1 # source:False
struct__SCRUB_DATA_OUTPUT._fields_ = [
    ('Size', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('Status', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ErrorFileOffset', ctypes.c_uint64),
    ('ErrorLength', ctypes.c_uint64),
    ('NumberOfBytesRepaired', ctypes.c_uint64),
    ('NumberOfBytesFailed', ctypes.c_uint64),
    ('InternalFileReference', ctypes.c_uint64),
    ('ResumeContextLength', ctypes.c_uint16),
    ('ParityExtentDataOffset', ctypes.c_uint16),
    ('Reserved', ctypes.c_uint32 * 9),
    ('NumberOfMetadataBytesProcessed', ctypes.c_uint64),
    ('NumberOfDataBytesProcessed', ctypes.c_uint64),
    ('TotalNumberOfMetadataBytesInUse', ctypes.c_uint64),
    ('TotalNumberOfDataBytesInUse', ctypes.c_uint64),
    ('ResumeContext', ctypes.c_ubyte * 816),
]

SCRUB_DATA_OUTPUT = struct__SCRUB_DATA_OUTPUT
PSCRUB_DATA_OUTPUT = ctypes.POINTER(struct__SCRUB_DATA_OUTPUT)

# values for enumeration '_SharedVirtualDiskSupportType'
_SharedVirtualDiskSupportType__enumvalues = {
    0: 'SharedVirtualDisksUnsupported',
    1: 'SharedVirtualDisksSupported',
    3: 'SharedVirtualDiskSnapshotsSupported',
    7: 'SharedVirtualDiskCDPSnapshotsSupported',
}
SharedVirtualDisksUnsupported = 0
SharedVirtualDisksSupported = 1
SharedVirtualDiskSnapshotsSupported = 3
SharedVirtualDiskCDPSnapshotsSupported = 7
_SharedVirtualDiskSupportType = ctypes.c_uint32 # enum
SharedVirtualDiskSupportType = _SharedVirtualDiskSupportType
SharedVirtualDiskSupportType__enumvalues = _SharedVirtualDiskSupportType__enumvalues

# values for enumeration '_SharedVirtualDiskHandleState'
_SharedVirtualDiskHandleState__enumvalues = {
    0: 'SharedVirtualDiskHandleStateNone',
    1: 'SharedVirtualDiskHandleStateFileShared',
    3: 'SharedVirtualDiskHandleStateHandleShared',
}
SharedVirtualDiskHandleStateNone = 0
SharedVirtualDiskHandleStateFileShared = 1
SharedVirtualDiskHandleStateHandleShared = 3
_SharedVirtualDiskHandleState = ctypes.c_uint32 # enum
SharedVirtualDiskHandleState = _SharedVirtualDiskHandleState
SharedVirtualDiskHandleState__enumvalues = _SharedVirtualDiskHandleState__enumvalues
class struct__SHARED_VIRTUAL_DISK_SUPPORT(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('SharedVirtualDiskSupport', SharedVirtualDiskSupportType),
    ('HandleState', SharedVirtualDiskHandleState),
     ]

SHARED_VIRTUAL_DISK_SUPPORT = struct__SHARED_VIRTUAL_DISK_SUPPORT
PSHARED_VIRTUAL_DISK_SUPPORT = ctypes.POINTER(struct__SHARED_VIRTUAL_DISK_SUPPORT)
class struct__REARRANGE_FILE_DATA(Structure):
    pass

struct__REARRANGE_FILE_DATA._pack_ = 1 # source:False
struct__REARRANGE_FILE_DATA._fields_ = [
    ('SourceStartingOffset', ctypes.c_uint64),
    ('TargetOffset', ctypes.c_uint64),
    ('SourceFileHandle', ctypes.POINTER(None)),
    ('Length', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
]

REARRANGE_FILE_DATA = struct__REARRANGE_FILE_DATA
PREARRANGE_FILE_DATA = ctypes.POINTER(struct__REARRANGE_FILE_DATA)
class struct__REARRANGE_FILE_DATA32(Structure):
    pass

struct__REARRANGE_FILE_DATA32._pack_ = 1 # source:False
struct__REARRANGE_FILE_DATA32._fields_ = [
    ('SourceStartingOffset', ctypes.c_uint64),
    ('TargetOffset', ctypes.c_uint64),
    ('SourceFileHandle', ctypes.c_uint32),
    ('Length', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

REARRANGE_FILE_DATA32 = struct__REARRANGE_FILE_DATA32
PREARRANGE_FILE_DATA32 = ctypes.POINTER(struct__REARRANGE_FILE_DATA32)
class struct__SHUFFLE_FILE_DATA(Structure):
    pass

struct__SHUFFLE_FILE_DATA._pack_ = 1 # source:False
struct__SHUFFLE_FILE_DATA._fields_ = [
    ('StartingOffset', ctypes.c_int64),
    ('Length', ctypes.c_int64),
    ('Flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

SHUFFLE_FILE_DATA = struct__SHUFFLE_FILE_DATA
PSHUFFLE_FILE_DATA = ctypes.POINTER(struct__SHUFFLE_FILE_DATA)
class struct__NETWORK_APP_INSTANCE_EA(Structure):
    pass

struct__NETWORK_APP_INSTANCE_EA._pack_ = 1 # source:False
struct__NETWORK_APP_INSTANCE_EA._fields_ = [
    ('AppInstanceID', GUID),
    ('CsvFlags', ctypes.c_uint32),
]

NETWORK_APP_INSTANCE_EA = struct__NETWORK_APP_INSTANCE_EA
PNETWORK_APP_INSTANCE_EA = ctypes.POINTER(struct__NETWORK_APP_INSTANCE_EA)

# values for enumeration '_SYSTEM_POWER_STATE'
_SYSTEM_POWER_STATE__enumvalues = {
    0: 'PowerSystemUnspecified',
    1: 'PowerSystemWorking',
    2: 'PowerSystemSleeping1',
    3: 'PowerSystemSleeping2',
    4: 'PowerSystemSleeping3',
    5: 'PowerSystemHibernate',
    6: 'PowerSystemShutdown',
    7: 'PowerSystemMaximum',
}
PowerSystemUnspecified = 0
PowerSystemWorking = 1
PowerSystemSleeping1 = 2
PowerSystemSleeping2 = 3
PowerSystemSleeping3 = 4
PowerSystemHibernate = 5
PowerSystemShutdown = 6
PowerSystemMaximum = 7
_SYSTEM_POWER_STATE = ctypes.c_uint32 # enum
SYSTEM_POWER_STATE = _SYSTEM_POWER_STATE
SYSTEM_POWER_STATE__enumvalues = _SYSTEM_POWER_STATE__enumvalues
PSYSTEM_POWER_STATE = ctypes.POINTER(_SYSTEM_POWER_STATE)

# values for enumeration 'POWER_ACTION'
POWER_ACTION__enumvalues = {
    0: 'PowerActionNone',
    1: 'PowerActionReserved',
    2: 'PowerActionSleep',
    3: 'PowerActionHibernate',
    4: 'PowerActionShutdown',
    5: 'PowerActionShutdownReset',
    6: 'PowerActionShutdownOff',
    7: 'PowerActionWarmEject',
    8: 'PowerActionDisplayOff',
}
PowerActionNone = 0
PowerActionReserved = 1
PowerActionSleep = 2
PowerActionHibernate = 3
PowerActionShutdown = 4
PowerActionShutdownReset = 5
PowerActionShutdownOff = 6
PowerActionWarmEject = 7
PowerActionDisplayOff = 8
POWER_ACTION = ctypes.c_uint32 # enum
PPOWER_ACTION = ctypes.POINTER(POWER_ACTION)

# values for enumeration '_DEVICE_POWER_STATE'
_DEVICE_POWER_STATE__enumvalues = {
    0: 'PowerDeviceUnspecified',
    1: 'PowerDeviceD0',
    2: 'PowerDeviceD1',
    3: 'PowerDeviceD2',
    4: 'PowerDeviceD3',
    5: 'PowerDeviceMaximum',
}
PowerDeviceUnspecified = 0
PowerDeviceD0 = 1
PowerDeviceD1 = 2
PowerDeviceD2 = 3
PowerDeviceD3 = 4
PowerDeviceMaximum = 5
_DEVICE_POWER_STATE = ctypes.c_uint32 # enum
DEVICE_POWER_STATE = _DEVICE_POWER_STATE
DEVICE_POWER_STATE__enumvalues = _DEVICE_POWER_STATE__enumvalues
PDEVICE_POWER_STATE = ctypes.POINTER(_DEVICE_POWER_STATE)

# values for enumeration '_MONITOR_DISPLAY_STATE'
_MONITOR_DISPLAY_STATE__enumvalues = {
    0: 'PowerMonitorOff',
    1: 'PowerMonitorOn',
    2: 'PowerMonitorDim',
}
PowerMonitorOff = 0
PowerMonitorOn = 1
PowerMonitorDim = 2
_MONITOR_DISPLAY_STATE = ctypes.c_uint32 # enum
MONITOR_DISPLAY_STATE = _MONITOR_DISPLAY_STATE
MONITOR_DISPLAY_STATE__enumvalues = _MONITOR_DISPLAY_STATE__enumvalues
PMONITOR_DISPLAY_STATE = ctypes.POINTER(_MONITOR_DISPLAY_STATE)

# values for enumeration '_USER_ACTIVITY_PRESENCE'
_USER_ACTIVITY_PRESENCE__enumvalues = {
    0: 'PowerUserPresent',
    1: 'PowerUserNotPresent',
    2: 'PowerUserInactive',
    3: 'PowerUserMaximum',
    3: 'PowerUserInvalid',
}
PowerUserPresent = 0
PowerUserNotPresent = 1
PowerUserInactive = 2
PowerUserMaximum = 3
PowerUserInvalid = 3
_USER_ACTIVITY_PRESENCE = ctypes.c_uint32 # enum
USER_ACTIVITY_PRESENCE = _USER_ACTIVITY_PRESENCE
USER_ACTIVITY_PRESENCE__enumvalues = _USER_ACTIVITY_PRESENCE__enumvalues
PUSER_ACTIVITY_PRESENCE = ctypes.POINTER(_USER_ACTIVITY_PRESENCE)
EXECUTION_STATE = ctypes.c_uint32
PEXECUTION_STATE = ctypes.POINTER(ctypes.c_uint32)

# values for enumeration 'LATENCY_TIME'
LATENCY_TIME__enumvalues = {
    0: 'LT_DONT_CARE',
    1: 'LT_LOWEST_LATENCY',
}
LT_DONT_CARE = 0
LT_LOWEST_LATENCY = 1
LATENCY_TIME = ctypes.c_uint32 # enum

# values for enumeration '_POWER_REQUEST_TYPE'
_POWER_REQUEST_TYPE__enumvalues = {
    0: 'PowerRequestDisplayRequired',
    1: 'PowerRequestSystemRequired',
    2: 'PowerRequestAwayModeRequired',
    3: 'PowerRequestExecutionRequired',
}
PowerRequestDisplayRequired = 0
PowerRequestSystemRequired = 1
PowerRequestAwayModeRequired = 2
PowerRequestExecutionRequired = 3
_POWER_REQUEST_TYPE = ctypes.c_uint32 # enum
POWER_REQUEST_TYPE = _POWER_REQUEST_TYPE
POWER_REQUEST_TYPE__enumvalues = _POWER_REQUEST_TYPE__enumvalues
PPOWER_REQUEST_TYPE = ctypes.POINTER(_POWER_REQUEST_TYPE)
class struct_CM_Power_Data_s(Structure):
    pass

struct_CM_Power_Data_s._pack_ = 1 # source:False
struct_CM_Power_Data_s._fields_ = [
    ('PD_Size', ctypes.c_uint32),
    ('PD_MostRecentPowerState', DEVICE_POWER_STATE),
    ('PD_Capabilities', ctypes.c_uint32),
    ('PD_D1Latency', ctypes.c_uint32),
    ('PD_D2Latency', ctypes.c_uint32),
    ('PD_D3Latency', ctypes.c_uint32),
    ('PD_PowerStateMapping', _DEVICE_POWER_STATE * 7),
    ('PD_DeepestSystemWake', SYSTEM_POWER_STATE),
]

CM_POWER_DATA = struct_CM_Power_Data_s
PCM_POWER_DATA = ctypes.POINTER(struct_CM_Power_Data_s)

# values for enumeration 'POWER_INFORMATION_LEVEL'
POWER_INFORMATION_LEVEL__enumvalues = {
    0: 'SystemPowerPolicyAc',
    1: 'SystemPowerPolicyDc',
    2: 'VerifySystemPolicyAc',
    3: 'VerifySystemPolicyDc',
    4: 'SystemPowerCapabilities',
    5: 'SystemBatteryState',
    6: 'SystemPowerStateHandler',
    7: 'ProcessorStateHandler',
    8: 'SystemPowerPolicyCurrent',
    9: 'AdministratorPowerPolicy',
    10: 'SystemReserveHiberFile',
    11: 'ProcessorInformation',
    12: 'SystemPowerInformation',
    13: 'ProcessorStateHandler2',
    14: 'LastWakeTime',
    15: 'LastSleepTime',
    16: 'SystemExecutionState',
    17: 'SystemPowerStateNotifyHandler',
    18: 'ProcessorPowerPolicyAc',
    19: 'ProcessorPowerPolicyDc',
    20: 'VerifyProcessorPowerPolicyAc',
    21: 'VerifyProcessorPowerPolicyDc',
    22: 'ProcessorPowerPolicyCurrent',
    23: 'SystemPowerStateLogging',
    24: 'SystemPowerLoggingEntry',
    25: 'SetPowerSettingValue',
    26: 'NotifyUserPowerSetting',
    27: 'PowerInformationLevelUnused0',
    28: 'SystemMonitorHiberBootPowerOff',
    29: 'SystemVideoState',
    30: 'TraceApplicationPowerMessage',
    31: 'TraceApplicationPowerMessageEnd',
    32: 'ProcessorPerfStates',
    33: 'ProcessorIdleStates',
    34: 'ProcessorCap',
    35: 'SystemWakeSource',
    36: 'SystemHiberFileInformation',
    37: 'TraceServicePowerMessage',
    38: 'ProcessorLoad',
    39: 'PowerShutdownNotification',
    40: 'MonitorCapabilities',
    41: 'SessionPowerInit',
    42: 'SessionDisplayState',
    43: 'PowerRequestCreate',
    44: 'PowerRequestAction',
    45: 'GetPowerRequestList',
    46: 'ProcessorInformationEx',
    47: 'NotifyUserModeLegacyPowerEvent',
    48: 'GroupPark',
    49: 'ProcessorIdleDomains',
    50: 'WakeTimerList',
    51: 'SystemHiberFileSize',
    52: 'ProcessorIdleStatesHv',
    53: 'ProcessorPerfStatesHv',
    54: 'ProcessorPerfCapHv',
    55: 'ProcessorSetIdle',
    56: 'LogicalProcessorIdling',
    57: 'UserPresence',
    58: 'PowerSettingNotificationName',
    59: 'GetPowerSettingValue',
    60: 'IdleResiliency',
    61: 'SessionRITState',
    62: 'SessionConnectNotification',
    63: 'SessionPowerCleanup',
    64: 'SessionLockState',
    65: 'SystemHiberbootState',
    66: 'PlatformInformation',
    67: 'PdcInvocation',
    68: 'MonitorInvocation',
    69: 'FirmwareTableInformationRegistered',
    70: 'SetShutdownSelectedTime',
    71: 'SuspendResumeInvocation',
    72: 'PlmPowerRequestCreate',
    73: 'ScreenOff',
    74: 'CsDeviceNotification',
    75: 'PlatformRole',
    76: 'LastResumePerformance',
    77: 'DisplayBurst',
    78: 'ExitLatencySamplingPercentage',
    79: 'RegisterSpmPowerSettings',
    80: 'PlatformIdleStates',
    81: 'ProcessorIdleVeto',
    82: 'PlatformIdleVeto',
    83: 'SystemBatteryStatePrecise',
    84: 'ThermalEvent',
    85: 'PowerRequestActionInternal',
    86: 'BatteryDeviceState',
    87: 'PowerInformationInternal',
    88: 'ThermalStandby',
    89: 'SystemHiberFileType',
    90: 'PhysicalPowerButtonPress',
    91: 'QueryPotentialDripsConstraint',
    92: 'EnergyTrackerCreate',
    93: 'EnergyTrackerQuery',
    94: 'UpdateBlackBoxRecorder',
    95: 'SessionAllowExternalDmaDevices',
    96: 'PowerInformationLevelMaximum',
}
SystemPowerPolicyAc = 0
SystemPowerPolicyDc = 1
VerifySystemPolicyAc = 2
VerifySystemPolicyDc = 3
SystemPowerCapabilities = 4
SystemBatteryState = 5
SystemPowerStateHandler = 6
ProcessorStateHandler = 7
SystemPowerPolicyCurrent = 8
AdministratorPowerPolicy = 9
SystemReserveHiberFile = 10
ProcessorInformation = 11
SystemPowerInformation = 12
ProcessorStateHandler2 = 13
LastWakeTime = 14
LastSleepTime = 15
SystemExecutionState = 16
SystemPowerStateNotifyHandler = 17
ProcessorPowerPolicyAc = 18
ProcessorPowerPolicyDc = 19
VerifyProcessorPowerPolicyAc = 20
VerifyProcessorPowerPolicyDc = 21
ProcessorPowerPolicyCurrent = 22
SystemPowerStateLogging = 23
SystemPowerLoggingEntry = 24
SetPowerSettingValue = 25
NotifyUserPowerSetting = 26
PowerInformationLevelUnused0 = 27
SystemMonitorHiberBootPowerOff = 28
SystemVideoState = 29
TraceApplicationPowerMessage = 30
TraceApplicationPowerMessageEnd = 31
ProcessorPerfStates = 32
ProcessorIdleStates = 33
ProcessorCap = 34
SystemWakeSource = 35
SystemHiberFileInformation = 36
TraceServicePowerMessage = 37
ProcessorLoad = 38
PowerShutdownNotification = 39
MonitorCapabilities = 40
SessionPowerInit = 41
SessionDisplayState = 42
PowerRequestCreate = 43
PowerRequestAction = 44
GetPowerRequestList = 45
ProcessorInformationEx = 46
NotifyUserModeLegacyPowerEvent = 47
GroupPark = 48
ProcessorIdleDomains = 49
WakeTimerList = 50
SystemHiberFileSize = 51
ProcessorIdleStatesHv = 52
ProcessorPerfStatesHv = 53
ProcessorPerfCapHv = 54
ProcessorSetIdle = 55
LogicalProcessorIdling = 56
UserPresence = 57
PowerSettingNotificationName = 58
GetPowerSettingValue = 59
IdleResiliency = 60
SessionRITState = 61
SessionConnectNotification = 62
SessionPowerCleanup = 63
SessionLockState = 64
SystemHiberbootState = 65
PlatformInformation = 66
PdcInvocation = 67
MonitorInvocation = 68
FirmwareTableInformationRegistered = 69
SetShutdownSelectedTime = 70
SuspendResumeInvocation = 71
PlmPowerRequestCreate = 72
ScreenOff = 73
CsDeviceNotification = 74
PlatformRole = 75
LastResumePerformance = 76
DisplayBurst = 77
ExitLatencySamplingPercentage = 78
RegisterSpmPowerSettings = 79
PlatformIdleStates = 80
ProcessorIdleVeto = 81
PlatformIdleVeto = 82
SystemBatteryStatePrecise = 83
ThermalEvent = 84
PowerRequestActionInternal = 85
BatteryDeviceState = 86
PowerInformationInternal = 87
ThermalStandby = 88
SystemHiberFileType = 89
PhysicalPowerButtonPress = 90
QueryPotentialDripsConstraint = 91
EnergyTrackerCreate = 92
EnergyTrackerQuery = 93
UpdateBlackBoxRecorder = 94
SessionAllowExternalDmaDevices = 95
PowerInformationLevelMaximum = 96
POWER_INFORMATION_LEVEL = ctypes.c_uint32 # enum

# values for enumeration 'POWER_USER_PRESENCE_TYPE'
POWER_USER_PRESENCE_TYPE__enumvalues = {
    0: 'UserNotPresent',
    1: 'UserPresent',
    255: 'UserUnknown',
}
UserNotPresent = 0
UserPresent = 1
UserUnknown = 255
POWER_USER_PRESENCE_TYPE = ctypes.c_uint32 # enum
PPOWER_USER_PRESENCE_TYPE = ctypes.POINTER(POWER_USER_PRESENCE_TYPE)
class struct__POWER_USER_PRESENCE(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('UserPresence', POWER_USER_PRESENCE_TYPE),
     ]

POWER_USER_PRESENCE = struct__POWER_USER_PRESENCE
PPOWER_USER_PRESENCE = ctypes.POINTER(struct__POWER_USER_PRESENCE)
class struct__POWER_SESSION_CONNECT(Structure):
    pass

struct__POWER_SESSION_CONNECT._pack_ = 1 # source:False
struct__POWER_SESSION_CONNECT._fields_ = [
    ('Connected', ctypes.c_ubyte),
    ('Console', ctypes.c_ubyte),
]

POWER_SESSION_CONNECT = struct__POWER_SESSION_CONNECT
PPOWER_SESSION_CONNECT = ctypes.POINTER(struct__POWER_SESSION_CONNECT)
class struct__POWER_SESSION_TIMEOUTS(Structure):
    pass

struct__POWER_SESSION_TIMEOUTS._pack_ = 1 # source:False
struct__POWER_SESSION_TIMEOUTS._fields_ = [
    ('InputTimeout', ctypes.c_uint32),
    ('DisplayTimeout', ctypes.c_uint32),
]

POWER_SESSION_TIMEOUTS = struct__POWER_SESSION_TIMEOUTS
PPOWER_SESSION_TIMEOUTS = ctypes.POINTER(struct__POWER_SESSION_TIMEOUTS)
class struct__POWER_SESSION_RIT_STATE(Structure):
    pass

struct__POWER_SESSION_RIT_STATE._pack_ = 1 # source:False
struct__POWER_SESSION_RIT_STATE._fields_ = [
    ('Active', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('LastInputTime', ctypes.c_uint32),
]

POWER_SESSION_RIT_STATE = struct__POWER_SESSION_RIT_STATE
PPOWER_SESSION_RIT_STATE = ctypes.POINTER(struct__POWER_SESSION_RIT_STATE)
class struct__POWER_SESSION_WINLOGON(Structure):
    pass

struct__POWER_SESSION_WINLOGON._pack_ = 1 # source:False
struct__POWER_SESSION_WINLOGON._fields_ = [
    ('SessionId', ctypes.c_uint32),
    ('Console', ctypes.c_ubyte),
    ('Locked', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

POWER_SESSION_WINLOGON = struct__POWER_SESSION_WINLOGON
PPOWER_SESSION_WINLOGON = ctypes.POINTER(struct__POWER_SESSION_WINLOGON)
class struct__POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES(Structure):
    pass

struct__POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES._pack_ = 1 # source:False
struct__POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES._fields_ = [
    ('IsAllowed', ctypes.c_ubyte),
]

POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES = struct__POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES
PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES = ctypes.POINTER(struct__POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES)
class struct__POWER_IDLE_RESILIENCY(Structure):
    pass

struct__POWER_IDLE_RESILIENCY._pack_ = 1 # source:False
struct__POWER_IDLE_RESILIENCY._fields_ = [
    ('CoalescingTimeout', ctypes.c_uint32),
    ('IdleResiliencyPeriod', ctypes.c_uint32),
]

POWER_IDLE_RESILIENCY = struct__POWER_IDLE_RESILIENCY
PPOWER_IDLE_RESILIENCY = ctypes.POINTER(struct__POWER_IDLE_RESILIENCY)

# values for enumeration 'POWER_MONITOR_REQUEST_REASON'
POWER_MONITOR_REQUEST_REASON__enumvalues = {
    0: 'MonitorRequestReasonUnknown',
    1: 'MonitorRequestReasonPowerButton',
    2: 'MonitorRequestReasonRemoteConnection',
    3: 'MonitorRequestReasonScMonitorpower',
    4: 'MonitorRequestReasonUserInput',
    5: 'MonitorRequestReasonAcDcDisplayBurst',
    6: 'MonitorRequestReasonUserDisplayBurst',
    7: 'MonitorRequestReasonPoSetSystemState',
    8: 'MonitorRequestReasonSetThreadExecutionState',
    9: 'MonitorRequestReasonFullWake',
    10: 'MonitorRequestReasonSessionUnlock',
    11: 'MonitorRequestReasonScreenOffRequest',
    12: 'MonitorRequestReasonIdleTimeout',
    13: 'MonitorRequestReasonPolicyChange',
    14: 'MonitorRequestReasonSleepButton',
    15: 'MonitorRequestReasonLid',
    16: 'MonitorRequestReasonBatteryCountChange',
    17: 'MonitorRequestReasonGracePeriod',
    18: 'MonitorRequestReasonPnP',
    19: 'MonitorRequestReasonDP',
    20: 'MonitorRequestReasonSxTransition',
    21: 'MonitorRequestReasonSystemIdle',
    22: 'MonitorRequestReasonNearProximity',
    23: 'MonitorRequestReasonThermalStandby',
    24: 'MonitorRequestReasonResumePdc',
    25: 'MonitorRequestReasonResumeS4',
    26: 'MonitorRequestReasonTerminal',
    27: 'MonitorRequestReasonPdcSignal',
    28: 'MonitorRequestReasonAcDcDisplayBurstSuppressed',
    29: 'MonitorRequestReasonSystemStateEntered',
    30: 'MonitorRequestReasonWinrt',
    31: 'MonitorRequestReasonUserInputKeyboard',
    32: 'MonitorRequestReasonUserInputMouse',
    33: 'MonitorRequestReasonUserInputTouch',
    34: 'MonitorRequestReasonUserInputPen',
    35: 'MonitorRequestReasonUserInputAccelerometer',
    36: 'MonitorRequestReasonUserInputHid',
    37: 'MonitorRequestReasonUserInputPoUserPresent',
    38: 'MonitorRequestReasonUserInputSessionSwitch',
    39: 'MonitorRequestReasonUserInputInitialization',
    40: 'MonitorRequestReasonPdcSignalWindowsMobilePwrNotif',
    41: 'MonitorRequestReasonPdcSignalWindowsMobileShell',
    42: 'MonitorRequestReasonPdcSignalHeyCortana',
    43: 'MonitorRequestReasonPdcSignalHolographicShell',
    44: 'MonitorRequestReasonPdcSignalFingerprint',
    45: 'MonitorRequestReasonDirectedDrips',
    46: 'MonitorRequestReasonDim',
    47: 'MonitorRequestReasonBuiltinPanel',
    48: 'MonitorRequestReasonDisplayRequiredUnDim',
    49: 'MonitorRequestReasonBatteryCountChangeSuppressed',
    50: 'MonitorRequestReasonResumeModernStandby',
    51: 'MonitorRequestReasonMax',
}
MonitorRequestReasonUnknown = 0
MonitorRequestReasonPowerButton = 1
MonitorRequestReasonRemoteConnection = 2
MonitorRequestReasonScMonitorpower = 3
MonitorRequestReasonUserInput = 4
MonitorRequestReasonAcDcDisplayBurst = 5
MonitorRequestReasonUserDisplayBurst = 6
MonitorRequestReasonPoSetSystemState = 7
MonitorRequestReasonSetThreadExecutionState = 8
MonitorRequestReasonFullWake = 9
MonitorRequestReasonSessionUnlock = 10
MonitorRequestReasonScreenOffRequest = 11
MonitorRequestReasonIdleTimeout = 12
MonitorRequestReasonPolicyChange = 13
MonitorRequestReasonSleepButton = 14
MonitorRequestReasonLid = 15
MonitorRequestReasonBatteryCountChange = 16
MonitorRequestReasonGracePeriod = 17
MonitorRequestReasonPnP = 18
MonitorRequestReasonDP = 19
MonitorRequestReasonSxTransition = 20
MonitorRequestReasonSystemIdle = 21
MonitorRequestReasonNearProximity = 22
MonitorRequestReasonThermalStandby = 23
MonitorRequestReasonResumePdc = 24
MonitorRequestReasonResumeS4 = 25
MonitorRequestReasonTerminal = 26
MonitorRequestReasonPdcSignal = 27
MonitorRequestReasonAcDcDisplayBurstSuppressed = 28
MonitorRequestReasonSystemStateEntered = 29
MonitorRequestReasonWinrt = 30
MonitorRequestReasonUserInputKeyboard = 31
MonitorRequestReasonUserInputMouse = 32
MonitorRequestReasonUserInputTouch = 33
MonitorRequestReasonUserInputPen = 34
MonitorRequestReasonUserInputAccelerometer = 35
MonitorRequestReasonUserInputHid = 36
MonitorRequestReasonUserInputPoUserPresent = 37
MonitorRequestReasonUserInputSessionSwitch = 38
MonitorRequestReasonUserInputInitialization = 39
MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 40
MonitorRequestReasonPdcSignalWindowsMobileShell = 41
MonitorRequestReasonPdcSignalHeyCortana = 42
MonitorRequestReasonPdcSignalHolographicShell = 43
MonitorRequestReasonPdcSignalFingerprint = 44
MonitorRequestReasonDirectedDrips = 45
MonitorRequestReasonDim = 46
MonitorRequestReasonBuiltinPanel = 47
MonitorRequestReasonDisplayRequiredUnDim = 48
MonitorRequestReasonBatteryCountChangeSuppressed = 49
MonitorRequestReasonResumeModernStandby = 50
MonitorRequestReasonMax = 51
POWER_MONITOR_REQUEST_REASON = ctypes.c_uint32 # enum

# values for enumeration '_POWER_MONITOR_REQUEST_TYPE'
_POWER_MONITOR_REQUEST_TYPE__enumvalues = {
    0: 'MonitorRequestTypeOff',
    1: 'MonitorRequestTypeOnAndPresent',
    2: 'MonitorRequestTypeToggleOn',
}
MonitorRequestTypeOff = 0
MonitorRequestTypeOnAndPresent = 1
MonitorRequestTypeToggleOn = 2
_POWER_MONITOR_REQUEST_TYPE = ctypes.c_uint32 # enum
POWER_MONITOR_REQUEST_TYPE = _POWER_MONITOR_REQUEST_TYPE
POWER_MONITOR_REQUEST_TYPE__enumvalues = _POWER_MONITOR_REQUEST_TYPE__enumvalues
class struct__POWER_MONITOR_INVOCATION(Structure):
    pass

struct__POWER_MONITOR_INVOCATION._pack_ = 1 # source:False
struct__POWER_MONITOR_INVOCATION._fields_ = [
    ('Console', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('RequestReason', POWER_MONITOR_REQUEST_REASON),
]

POWER_MONITOR_INVOCATION = struct__POWER_MONITOR_INVOCATION
PPOWER_MONITOR_INVOCATION = ctypes.POINTER(struct__POWER_MONITOR_INVOCATION)
class struct__RESUME_PERFORMANCE(Structure):
    pass

struct__RESUME_PERFORMANCE._pack_ = 1 # source:False
struct__RESUME_PERFORMANCE._fields_ = [
    ('PostTimeMs', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('TotalResumeTimeMs', ctypes.c_uint64),
    ('ResumeCompleteTimestamp', ctypes.c_uint64),
]

RESUME_PERFORMANCE = struct__RESUME_PERFORMANCE
PRESUME_PERFORMANCE = ctypes.POINTER(struct__RESUME_PERFORMANCE)

# values for enumeration 'SYSTEM_POWER_CONDITION'
SYSTEM_POWER_CONDITION__enumvalues = {
    0: 'PoAc',
    1: 'PoDc',
    2: 'PoHot',
    3: 'PoConditionMaximum',
}
PoAc = 0
PoDc = 1
PoHot = 2
PoConditionMaximum = 3
SYSTEM_POWER_CONDITION = ctypes.c_uint32 # enum
class struct_SET_POWER_SETTING_VALUE(Structure):
    pass

struct_SET_POWER_SETTING_VALUE._pack_ = 1 # source:False
struct_SET_POWER_SETTING_VALUE._fields_ = [
    ('Version', ctypes.c_uint32),
    ('Guid', GUID),
    ('PowerCondition', SYSTEM_POWER_CONDITION),
    ('DataLength', ctypes.c_uint32),
    ('Data', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

PSET_POWER_SETTING_VALUE = ctypes.POINTER(struct_SET_POWER_SETTING_VALUE)
class struct_NOTIFY_USER_POWER_SETTING(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Guid', GUID),
     ]

PNOTIFY_USER_POWER_SETTING = ctypes.POINTER(struct_NOTIFY_USER_POWER_SETTING)
class struct__APPLICATIONLAUNCH_SETTING_VALUE(Structure):
    pass

struct__APPLICATIONLAUNCH_SETTING_VALUE._pack_ = 1 # source:False
struct__APPLICATIONLAUNCH_SETTING_VALUE._fields_ = [
    ('ActivationTime', LARGE_INTEGER),
    ('Flags', ctypes.c_uint32),
    ('ButtonInstanceID', ctypes.c_uint32),
]

APPLICATIONLAUNCH_SETTING_VALUE = struct__APPLICATIONLAUNCH_SETTING_VALUE
PAPPLICATIONLAUNCH_SETTING_VALUE = ctypes.POINTER(struct__APPLICATIONLAUNCH_SETTING_VALUE)

# values for enumeration '_POWER_PLATFORM_ROLE'
_POWER_PLATFORM_ROLE__enumvalues = {
    0: 'PlatformRoleUnspecified',
    1: 'PlatformRoleDesktop',
    2: 'PlatformRoleMobile',
    3: 'PlatformRoleWorkstation',
    4: 'PlatformRoleEnterpriseServer',
    5: 'PlatformRoleSOHOServer',
    6: 'PlatformRoleAppliancePC',
    7: 'PlatformRolePerformanceServer',
    8: 'PlatformRoleSlate',
    9: 'PlatformRoleMaximum',
}
PlatformRoleUnspecified = 0
PlatformRoleDesktop = 1
PlatformRoleMobile = 2
PlatformRoleWorkstation = 3
PlatformRoleEnterpriseServer = 4
PlatformRoleSOHOServer = 5
PlatformRoleAppliancePC = 6
PlatformRolePerformanceServer = 7
PlatformRoleSlate = 8
PlatformRoleMaximum = 9
_POWER_PLATFORM_ROLE = ctypes.c_uint32 # enum
POWER_PLATFORM_ROLE = _POWER_PLATFORM_ROLE
POWER_PLATFORM_ROLE__enumvalues = _POWER_PLATFORM_ROLE__enumvalues
PPOWER_PLATFORM_ROLE = ctypes.POINTER(_POWER_PLATFORM_ROLE)
class struct__POWER_PLATFORM_INFORMATION(Structure):
    pass

struct__POWER_PLATFORM_INFORMATION._pack_ = 1 # source:False
struct__POWER_PLATFORM_INFORMATION._fields_ = [
    ('AoAc', ctypes.c_ubyte),
]

POWER_PLATFORM_INFORMATION = struct__POWER_PLATFORM_INFORMATION
PPOWER_PLATFORM_INFORMATION = ctypes.POINTER(struct__POWER_PLATFORM_INFORMATION)
class struct_BATTERY_REPORTING_SCALE(Structure):
    pass

struct_BATTERY_REPORTING_SCALE._pack_ = 1 # source:False
struct_BATTERY_REPORTING_SCALE._fields_ = [
    ('Granularity', ctypes.c_uint32),
    ('Capacity', ctypes.c_uint32),
]

PBATTERY_REPORTING_SCALE = ctypes.POINTER(struct_BATTERY_REPORTING_SCALE)
class struct_PPM_WMI_LEGACY_PERFSTATE(Structure):
    pass

struct_PPM_WMI_LEGACY_PERFSTATE._pack_ = 1 # source:False
struct_PPM_WMI_LEGACY_PERFSTATE._fields_ = [
    ('Frequency', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('PercentFrequency', ctypes.c_uint32),
]

PPPM_WMI_LEGACY_PERFSTATE = ctypes.POINTER(struct_PPM_WMI_LEGACY_PERFSTATE)
class struct_PPM_WMI_IDLE_STATE(Structure):
    pass

struct_PPM_WMI_IDLE_STATE._pack_ = 1 # source:False
struct_PPM_WMI_IDLE_STATE._fields_ = [
    ('Latency', ctypes.c_uint32),
    ('Power', ctypes.c_uint32),
    ('TimeCheck', ctypes.c_uint32),
    ('PromotePercent', ctypes.c_ubyte),
    ('DemotePercent', ctypes.c_ubyte),
    ('StateType', ctypes.c_ubyte),
    ('Reserved', ctypes.c_ubyte),
    ('StateFlags', ctypes.c_uint32),
    ('Context', ctypes.c_uint32),
    ('IdleHandler', ctypes.c_uint32),
    ('Reserved1', ctypes.c_uint32),
]

PPPM_WMI_IDLE_STATE = ctypes.POINTER(struct_PPM_WMI_IDLE_STATE)
class struct_PPM_WMI_IDLE_STATES(Structure):
    pass

struct_PPM_WMI_IDLE_STATES._pack_ = 1 # source:False
struct_PPM_WMI_IDLE_STATES._fields_ = [
    ('Type', ctypes.c_uint32),
    ('Count', ctypes.c_uint32),
    ('TargetState', ctypes.c_uint32),
    ('OldState', ctypes.c_uint32),
    ('TargetProcessors', ctypes.c_uint64),
    ('State', struct_PPM_WMI_IDLE_STATE * 1),
]

PPPM_WMI_IDLE_STATES = ctypes.POINTER(struct_PPM_WMI_IDLE_STATES)
class struct_PPM_WMI_IDLE_STATES_EX(Structure):
    pass

struct_PPM_WMI_IDLE_STATES_EX._pack_ = 1 # source:False
struct_PPM_WMI_IDLE_STATES_EX._fields_ = [
    ('Type', ctypes.c_uint32),
    ('Count', ctypes.c_uint32),
    ('TargetState', ctypes.c_uint32),
    ('OldState', ctypes.c_uint32),
    ('TargetProcessors', ctypes.POINTER(None)),
    ('State', struct_PPM_WMI_IDLE_STATE * 1),
]

PPPM_WMI_IDLE_STATES_EX = ctypes.POINTER(struct_PPM_WMI_IDLE_STATES_EX)
class struct_PPM_WMI_PERF_STATE(Structure):
    pass

struct_PPM_WMI_PERF_STATE._pack_ = 1 # source:False
struct_PPM_WMI_PERF_STATE._fields_ = [
    ('Frequency', ctypes.c_uint32),
    ('Power', ctypes.c_uint32),
    ('PercentFrequency', ctypes.c_ubyte),
    ('IncreaseLevel', ctypes.c_ubyte),
    ('DecreaseLevel', ctypes.c_ubyte),
    ('Type', ctypes.c_ubyte),
    ('IncreaseTime', ctypes.c_uint32),
    ('DecreaseTime', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('Control', ctypes.c_uint64),
    ('Status', ctypes.c_uint64),
    ('HitCount', ctypes.c_uint32),
    ('Reserved1', ctypes.c_uint32),
    ('Reserved2', ctypes.c_uint64),
    ('Reserved3', ctypes.c_uint64),
]

PPPM_WMI_PERF_STATE = ctypes.POINTER(struct_PPM_WMI_PERF_STATE)
class struct_PPM_WMI_PERF_STATES(Structure):
    pass

struct_PPM_WMI_PERF_STATES._pack_ = 1 # source:False
struct_PPM_WMI_PERF_STATES._fields_ = [
    ('Count', ctypes.c_uint32),
    ('MaxFrequency', ctypes.c_uint32),
    ('CurrentState', ctypes.c_uint32),
    ('MaxPerfState', ctypes.c_uint32),
    ('MinPerfState', ctypes.c_uint32),
    ('LowestPerfState', ctypes.c_uint32),
    ('ThermalConstraint', ctypes.c_uint32),
    ('BusyAdjThreshold', ctypes.c_ubyte),
    ('PolicyType', ctypes.c_ubyte),
    ('Type', ctypes.c_ubyte),
    ('Reserved', ctypes.c_ubyte),
    ('TimerInterval', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('TargetProcessors', ctypes.c_uint64),
    ('PStateHandler', ctypes.c_uint32),
    ('PStateContext', ctypes.c_uint32),
    ('TStateHandler', ctypes.c_uint32),
    ('TStateContext', ctypes.c_uint32),
    ('FeedbackHandler', ctypes.c_uint32),
    ('Reserved1', ctypes.c_uint32),
    ('Reserved2', ctypes.c_uint64),
    ('State', struct_PPM_WMI_PERF_STATE * 1),
]

PPPM_WMI_PERF_STATES = ctypes.POINTER(struct_PPM_WMI_PERF_STATES)
class struct_PPM_WMI_PERF_STATES_EX(Structure):
    pass

struct_PPM_WMI_PERF_STATES_EX._pack_ = 1 # source:False
struct_PPM_WMI_PERF_STATES_EX._fields_ = [
    ('Count', ctypes.c_uint32),
    ('MaxFrequency', ctypes.c_uint32),
    ('CurrentState', ctypes.c_uint32),
    ('MaxPerfState', ctypes.c_uint32),
    ('MinPerfState', ctypes.c_uint32),
    ('LowestPerfState', ctypes.c_uint32),
    ('ThermalConstraint', ctypes.c_uint32),
    ('BusyAdjThreshold', ctypes.c_ubyte),
    ('PolicyType', ctypes.c_ubyte),
    ('Type', ctypes.c_ubyte),
    ('Reserved', ctypes.c_ubyte),
    ('TimerInterval', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('TargetProcessors', ctypes.POINTER(None)),
    ('PStateHandler', ctypes.c_uint32),
    ('PStateContext', ctypes.c_uint32),
    ('TStateHandler', ctypes.c_uint32),
    ('TStateContext', ctypes.c_uint32),
    ('FeedbackHandler', ctypes.c_uint32),
    ('Reserved1', ctypes.c_uint32),
    ('Reserved2', ctypes.c_uint64),
    ('State', struct_PPM_WMI_PERF_STATE * 1),
]

PPPM_WMI_PERF_STATES_EX = ctypes.POINTER(struct_PPM_WMI_PERF_STATES_EX)
class struct_PPM_IDLE_STATE_ACCOUNTING(Structure):
    pass

struct_PPM_IDLE_STATE_ACCOUNTING._pack_ = 1 # source:False
struct_PPM_IDLE_STATE_ACCOUNTING._fields_ = [
    ('IdleTransitions', ctypes.c_uint32),
    ('FailedTransitions', ctypes.c_uint32),
    ('InvalidBucketIndex', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('TotalTime', ctypes.c_uint64),
    ('IdleTimeBuckets', ctypes.c_uint32 * 6),
]

PPPM_IDLE_STATE_ACCOUNTING = ctypes.POINTER(struct_PPM_IDLE_STATE_ACCOUNTING)
class struct_PPM_IDLE_ACCOUNTING(Structure):
    pass

struct_PPM_IDLE_ACCOUNTING._pack_ = 1 # source:False
struct_PPM_IDLE_ACCOUNTING._fields_ = [
    ('StateCount', ctypes.c_uint32),
    ('TotalTransitions', ctypes.c_uint32),
    ('ResetCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('StartTime', ctypes.c_uint64),
    ('State', struct_PPM_IDLE_STATE_ACCOUNTING * 1),
]

PPPM_IDLE_ACCOUNTING = ctypes.POINTER(struct_PPM_IDLE_ACCOUNTING)
class struct_PPM_IDLE_STATE_BUCKET_EX(Structure):
    pass

struct_PPM_IDLE_STATE_BUCKET_EX._pack_ = 1 # source:False
struct_PPM_IDLE_STATE_BUCKET_EX._fields_ = [
    ('TotalTimeUs', ctypes.c_uint64),
    ('MinTimeUs', ctypes.c_uint32),
    ('MaxTimeUs', ctypes.c_uint32),
    ('Count', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

PPPM_IDLE_STATE_BUCKET_EX = ctypes.POINTER(struct_PPM_IDLE_STATE_BUCKET_EX)
class struct_PPM_IDLE_STATE_ACCOUNTING_EX(Structure):
    pass

struct_PPM_IDLE_STATE_ACCOUNTING_EX._pack_ = 1 # source:False
struct_PPM_IDLE_STATE_ACCOUNTING_EX._fields_ = [
    ('TotalTime', ctypes.c_uint64),
    ('IdleTransitions', ctypes.c_uint32),
    ('FailedTransitions', ctypes.c_uint32),
    ('InvalidBucketIndex', ctypes.c_uint32),
    ('MinTimeUs', ctypes.c_uint32),
    ('MaxTimeUs', ctypes.c_uint32),
    ('CancelledTransitions', ctypes.c_uint32),
    ('IdleTimeBuckets', struct_PPM_IDLE_STATE_BUCKET_EX * 16),
]

PPPM_IDLE_STATE_ACCOUNTING_EX = ctypes.POINTER(struct_PPM_IDLE_STATE_ACCOUNTING_EX)
class struct_PPM_IDLE_ACCOUNTING_EX(Structure):
    pass

struct_PPM_IDLE_ACCOUNTING_EX._pack_ = 1 # source:False
struct_PPM_IDLE_ACCOUNTING_EX._fields_ = [
    ('StateCount', ctypes.c_uint32),
    ('TotalTransitions', ctypes.c_uint32),
    ('ResetCount', ctypes.c_uint32),
    ('AbortCount', ctypes.c_uint32),
    ('StartTime', ctypes.c_uint64),
    ('State', struct_PPM_IDLE_STATE_ACCOUNTING_EX * 1),
]

PPPM_IDLE_ACCOUNTING_EX = ctypes.POINTER(struct_PPM_IDLE_ACCOUNTING_EX)
class struct_PPM_PERFSTATE_EVENT(Structure):
    pass

struct_PPM_PERFSTATE_EVENT._pack_ = 1 # source:False
struct_PPM_PERFSTATE_EVENT._fields_ = [
    ('State', ctypes.c_uint32),
    ('Status', ctypes.c_uint32),
    ('Latency', ctypes.c_uint32),
    ('Speed', ctypes.c_uint32),
    ('Processor', ctypes.c_uint32),
]

PPPM_PERFSTATE_EVENT = ctypes.POINTER(struct_PPM_PERFSTATE_EVENT)
class struct_PPM_PERFSTATE_DOMAIN_EVENT(Structure):
    pass

struct_PPM_PERFSTATE_DOMAIN_EVENT._pack_ = 1 # source:False
struct_PPM_PERFSTATE_DOMAIN_EVENT._fields_ = [
    ('State', ctypes.c_uint32),
    ('Latency', ctypes.c_uint32),
    ('Speed', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('Processors', ctypes.c_uint64),
]

PPPM_PERFSTATE_DOMAIN_EVENT = ctypes.POINTER(struct_PPM_PERFSTATE_DOMAIN_EVENT)
class struct_PPM_IDLESTATE_EVENT(Structure):
    pass

struct_PPM_IDLESTATE_EVENT._pack_ = 1 # source:False
struct_PPM_IDLESTATE_EVENT._fields_ = [
    ('NewState', ctypes.c_uint32),
    ('OldState', ctypes.c_uint32),
    ('Processors', ctypes.c_uint64),
]

PPPM_IDLESTATE_EVENT = ctypes.POINTER(struct_PPM_IDLESTATE_EVENT)
class struct_PPM_THERMALCHANGE_EVENT(Structure):
    pass

struct_PPM_THERMALCHANGE_EVENT._pack_ = 1 # source:False
struct_PPM_THERMALCHANGE_EVENT._fields_ = [
    ('ThermalConstraint', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('Processors', ctypes.c_uint64),
]

PPPM_THERMALCHANGE_EVENT = ctypes.POINTER(struct_PPM_THERMALCHANGE_EVENT)
class struct_PPM_THERMAL_POLICY_EVENT(Structure):
    pass

struct_PPM_THERMAL_POLICY_EVENT._pack_ = 1 # source:False
struct_PPM_THERMAL_POLICY_EVENT._fields_ = [
    ('Mode', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
    ('Processors', ctypes.c_uint64),
]

PPPM_THERMAL_POLICY_EVENT = ctypes.POINTER(struct_PPM_THERMAL_POLICY_EVENT)
class struct_POWER_ACTION_POLICY(Structure):
    pass

struct_POWER_ACTION_POLICY._pack_ = 1 # source:False
struct_POWER_ACTION_POLICY._fields_ = [
    ('Action', POWER_ACTION),
    ('Flags', ctypes.c_uint32),
    ('EventCode', ctypes.c_uint32),
]

PPOWER_ACTION_POLICY = ctypes.POINTER(struct_POWER_ACTION_POLICY)
class struct_SYSTEM_POWER_LEVEL(Structure):
    pass

struct_SYSTEM_POWER_LEVEL._pack_ = 1 # source:False
struct_SYSTEM_POWER_LEVEL._fields_ = [
    ('Enable', ctypes.c_ubyte),
    ('Spare', ctypes.c_ubyte * 3),
    ('BatteryLevel', ctypes.c_uint32),
    ('PowerPolicy', struct_POWER_ACTION_POLICY),
    ('MinSystemState', SYSTEM_POWER_STATE),
]

PSYSTEM_POWER_LEVEL = ctypes.POINTER(struct_SYSTEM_POWER_LEVEL)
class struct__SYSTEM_POWER_POLICY(Structure):
    pass

struct__SYSTEM_POWER_POLICY._pack_ = 1 # source:False
struct__SYSTEM_POWER_POLICY._fields_ = [
    ('Revision', ctypes.c_uint32),
    ('PowerButton', struct_POWER_ACTION_POLICY),
    ('SleepButton', struct_POWER_ACTION_POLICY),
    ('LidClose', struct_POWER_ACTION_POLICY),
    ('LidOpenWake', SYSTEM_POWER_STATE),
    ('Reserved', ctypes.c_uint32),
    ('Idle', struct_POWER_ACTION_POLICY),
    ('IdleTimeout', ctypes.c_uint32),
    ('IdleSensitivity', ctypes.c_ubyte),
    ('DynamicThrottle', ctypes.c_ubyte),
    ('Spare2', ctypes.c_ubyte * 2),
    ('MinSleep', SYSTEM_POWER_STATE),
    ('MaxSleep', SYSTEM_POWER_STATE),
    ('ReducedLatencySleep', SYSTEM_POWER_STATE),
    ('WinLogonFlags', ctypes.c_uint32),
    ('Spare3', ctypes.c_uint32),
    ('DozeS4Timeout', ctypes.c_uint32),
    ('BroadcastCapacityResolution', ctypes.c_uint32),
    ('DischargePolicy', struct_SYSTEM_POWER_LEVEL * 4),
    ('VideoTimeout', ctypes.c_uint32),
    ('VideoDimDisplay', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('VideoReserved', ctypes.c_uint32 * 3),
    ('SpindownTimeout', ctypes.c_uint32),
    ('OptimizeForPower', ctypes.c_ubyte),
    ('FanThrottleTolerance', ctypes.c_ubyte),
    ('ForcedThrottle', ctypes.c_ubyte),
    ('MinThrottle', ctypes.c_ubyte),
    ('OverThrottled', struct_POWER_ACTION_POLICY),
]

SYSTEM_POWER_POLICY = struct__SYSTEM_POWER_POLICY
PSYSTEM_POWER_POLICY = ctypes.POINTER(struct__SYSTEM_POWER_POLICY)
class struct_PROCESSOR_IDLESTATE_INFO(Structure):
    pass

struct_PROCESSOR_IDLESTATE_INFO._pack_ = 1 # source:False
struct_PROCESSOR_IDLESTATE_INFO._fields_ = [
    ('TimeCheck', ctypes.c_uint32),
    ('DemotePercent', ctypes.c_ubyte),
    ('PromotePercent', ctypes.c_ubyte),
    ('Spare', ctypes.c_ubyte * 2),
]

PPROCESSOR_IDLESTATE_INFO = ctypes.POINTER(struct_PROCESSOR_IDLESTATE_INFO)
class struct__12EDD93CAC4208332C3108DBB4839320(Structure):
    pass

struct__12EDD93CAC4208332C3108DBB4839320._pack_ = 1 # source:False
struct__12EDD93CAC4208332C3108DBB4839320._fields_ = [
    ('AllowScaling', ctypes.c_uint16, 1),
    ('Disabled', ctypes.c_uint16, 1),
    ('Reserved', ctypes.c_uint16, 14),
]

class union_PROCESSOR_IDLESTATE_POLICY___92CEA922AA6C5711F3A617A61DD3E595(Union):
    pass

class struct_PROCESSOR_IDLESTATE_POLICY___92CEA922AA6C5711F3A617A61DD3E595_0(Structure):
    pass

struct_PROCESSOR_IDLESTATE_POLICY___92CEA922AA6C5711F3A617A61DD3E595_0._pack_ = 1 # source:False
struct_PROCESSOR_IDLESTATE_POLICY___92CEA922AA6C5711F3A617A61DD3E595_0._fields_ = [
    ('AllowScaling', ctypes.c_uint16, 1),
    ('Disabled', ctypes.c_uint16, 1),
    ('Reserved', ctypes.c_uint16, 14),
]

union_PROCESSOR_IDLESTATE_POLICY___92CEA922AA6C5711F3A617A61DD3E595._pack_ = 1 # source:False
union_PROCESSOR_IDLESTATE_POLICY___92CEA922AA6C5711F3A617A61DD3E595._anonymous_ = ('_0',)
union_PROCESSOR_IDLESTATE_POLICY___92CEA922AA6C5711F3A617A61DD3E595._fields_ = [
    ('AsWORD', ctypes.c_uint16),
    ('_0', struct_PROCESSOR_IDLESTATE_POLICY___92CEA922AA6C5711F3A617A61DD3E595_0),
]

class struct_PROCESSOR_IDLESTATE_POLICY(Structure):
    pass

struct_PROCESSOR_IDLESTATE_POLICY._pack_ = 1 # source:False
struct_PROCESSOR_IDLESTATE_POLICY._fields_ = [
    ('Revision', ctypes.c_uint16),
    ('Flags', union_PROCESSOR_IDLESTATE_POLICY___92CEA922AA6C5711F3A617A61DD3E595),
    ('PolicyCount', ctypes.c_uint32),
    ('Policy', struct_PROCESSOR_IDLESTATE_INFO * 3),
]

PPROCESSOR_IDLESTATE_POLICY = ctypes.POINTER(struct_PROCESSOR_IDLESTATE_POLICY)
class struct__PROCESSOR_POWER_POLICY_INFO(Structure):
    pass

struct__PROCESSOR_POWER_POLICY_INFO._pack_ = 1 # source:False
struct__PROCESSOR_POWER_POLICY_INFO._fields_ = [
    ('TimeCheck', ctypes.c_uint32),
    ('DemoteLimit', ctypes.c_uint32),
    ('PromoteLimit', ctypes.c_uint32),
    ('DemotePercent', ctypes.c_ubyte),
    ('PromotePercent', ctypes.c_ubyte),
    ('Spare', ctypes.c_ubyte * 2),
    ('AllowDemotion', ctypes.c_uint32, 1),
    ('AllowPromotion', ctypes.c_uint32, 1),
    ('Reserved', ctypes.c_uint32, 30),
]

PROCESSOR_POWER_POLICY_INFO = struct__PROCESSOR_POWER_POLICY_INFO
PPROCESSOR_POWER_POLICY_INFO = ctypes.POINTER(struct__PROCESSOR_POWER_POLICY_INFO)
class struct__PROCESSOR_POWER_POLICY(Structure):
    pass

struct__PROCESSOR_POWER_POLICY._pack_ = 1 # source:False
struct__PROCESSOR_POWER_POLICY._fields_ = [
    ('Revision', ctypes.c_uint32),
    ('DynamicThrottle', ctypes.c_ubyte),
    ('Spare', ctypes.c_ubyte * 3),
    ('DisableCStates', ctypes.c_uint32, 1),
    ('Reserved', ctypes.c_uint32, 31),
    ('PolicyCount', ctypes.c_uint32),
    ('Policy', struct__PROCESSOR_POWER_POLICY_INFO * 3),
]

PROCESSOR_POWER_POLICY = struct__PROCESSOR_POWER_POLICY
PPROCESSOR_POWER_POLICY = ctypes.POINTER(struct__PROCESSOR_POWER_POLICY)
class struct__006192E8E41FD8F2EA1B27D51D7CA475(Structure):
    pass

struct__006192E8E41FD8F2EA1B27D51D7CA475._pack_ = 1 # source:False
struct__006192E8E41FD8F2EA1B27D51D7CA475._fields_ = [
    ('NoDomainAccounting', ctypes.c_ubyte, 1),
    ('IncreasePolicy', ctypes.c_ubyte, 2),
    ('DecreasePolicy', ctypes.c_ubyte, 2),
    ('Reserved', ctypes.c_ubyte, 3),
]

class union__CDD487EB51D46C5701426B2D522638C3(Union):
    pass

class struct__CDD487EB51D46C5701426B2D522638C3_0(Structure):
    pass

struct__CDD487EB51D46C5701426B2D522638C3_0._pack_ = 1 # source:False
struct__CDD487EB51D46C5701426B2D522638C3_0._fields_ = [
    ('NoDomainAccounting', ctypes.c_ubyte, 1),
    ('IncreasePolicy', ctypes.c_ubyte, 2),
    ('DecreasePolicy', ctypes.c_ubyte, 2),
    ('Reserved', ctypes.c_ubyte, 3),
]

union__CDD487EB51D46C5701426B2D522638C3._pack_ = 1 # source:False
union__CDD487EB51D46C5701426B2D522638C3._anonymous_ = ('_0',)
union__CDD487EB51D46C5701426B2D522638C3._fields_ = [
    ('AsBYTE', ctypes.c_ubyte),
    ('_0', struct__CDD487EB51D46C5701426B2D522638C3_0),
]

class union_PROCESSOR_PERFSTATE_POLICY___023BDF5A3E405C5FDBB98FDB10D7DC6F(Union):
    pass

union_PROCESSOR_PERFSTATE_POLICY___023BDF5A3E405C5FDBB98FDB10D7DC6F._pack_ = 1 # source:False
union_PROCESSOR_PERFSTATE_POLICY___023BDF5A3E405C5FDBB98FDB10D7DC6F._fields_ = [
    ('Spare', ctypes.c_ubyte),
    ('Flags', union__CDD487EB51D46C5701426B2D522638C3),
]

class struct_PROCESSOR_PERFSTATE_POLICY(Structure):
    pass

class union_PROCESSOR_PERFSTATE_POLICY_0(Union):
    pass

union_PROCESSOR_PERFSTATE_POLICY_0._pack_ = 1 # source:False
union_PROCESSOR_PERFSTATE_POLICY_0._fields_ = [
    ('Spare', ctypes.c_ubyte),
    ('Flags', union__CDD487EB51D46C5701426B2D522638C3),
]

struct_PROCESSOR_PERFSTATE_POLICY._pack_ = 1 # source:False
struct_PROCESSOR_PERFSTATE_POLICY._anonymous_ = ('_0',)
struct_PROCESSOR_PERFSTATE_POLICY._fields_ = [
    ('Revision', ctypes.c_uint32),
    ('MaxThrottle', ctypes.c_ubyte),
    ('MinThrottle', ctypes.c_ubyte),
    ('BusyAdjThreshold', ctypes.c_ubyte),
    ('_0', union_PROCESSOR_PERFSTATE_POLICY_0),
    ('TimeCheck', ctypes.c_uint32),
    ('IncreaseTime', ctypes.c_uint32),
    ('DecreaseTime', ctypes.c_uint32),
    ('IncreasePercent', ctypes.c_uint32),
    ('DecreasePercent', ctypes.c_uint32),
]

PPROCESSOR_PERFSTATE_POLICY = ctypes.POINTER(struct_PROCESSOR_PERFSTATE_POLICY)
class struct__ADMINISTRATOR_POWER_POLICY(Structure):
    pass

struct__ADMINISTRATOR_POWER_POLICY._pack_ = 1 # source:False
struct__ADMINISTRATOR_POWER_POLICY._fields_ = [
    ('MinSleep', SYSTEM_POWER_STATE),
    ('MaxSleep', SYSTEM_POWER_STATE),
    ('MinVideoTimeout', ctypes.c_uint32),
    ('MaxVideoTimeout', ctypes.c_uint32),
    ('MinSpindownTimeout', ctypes.c_uint32),
    ('MaxSpindownTimeout', ctypes.c_uint32),
]

ADMINISTRATOR_POWER_POLICY = struct__ADMINISTRATOR_POWER_POLICY
PADMINISTRATOR_POWER_POLICY = ctypes.POINTER(struct__ADMINISTRATOR_POWER_POLICY)

# values for enumeration '_HIBERFILE_BUCKET_SIZE'
_HIBERFILE_BUCKET_SIZE__enumvalues = {
    0: 'HiberFileBucket1GB',
    1: 'HiberFileBucket2GB',
    2: 'HiberFileBucket4GB',
    3: 'HiberFileBucket8GB',
    4: 'HiberFileBucket16GB',
    5: 'HiberFileBucket32GB',
    6: 'HiberFileBucketUnlimited',
    7: 'HiberFileBucketMax',
}
HiberFileBucket1GB = 0
HiberFileBucket2GB = 1
HiberFileBucket4GB = 2
HiberFileBucket8GB = 3
HiberFileBucket16GB = 4
HiberFileBucket32GB = 5
HiberFileBucketUnlimited = 6
HiberFileBucketMax = 7
_HIBERFILE_BUCKET_SIZE = ctypes.c_uint32 # enum
HIBERFILE_BUCKET_SIZE = _HIBERFILE_BUCKET_SIZE
HIBERFILE_BUCKET_SIZE__enumvalues = _HIBERFILE_BUCKET_SIZE__enumvalues
PHIBERFILE_BUCKET_SIZE = ctypes.POINTER(_HIBERFILE_BUCKET_SIZE)
class struct__HIBERFILE_BUCKET(Structure):
    pass

struct__HIBERFILE_BUCKET._pack_ = 1 # source:False
struct__HIBERFILE_BUCKET._fields_ = [
    ('MaxPhysicalMemory', ctypes.c_uint64),
    ('PhysicalMemoryPercent', ctypes.c_uint32 * 3),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

HIBERFILE_BUCKET = struct__HIBERFILE_BUCKET
PHIBERFILE_BUCKET = ctypes.POINTER(struct__HIBERFILE_BUCKET)
class struct_SYSTEM_POWER_CAPABILITIES(Structure):
    pass

struct_SYSTEM_POWER_CAPABILITIES._pack_ = 1 # source:False
struct_SYSTEM_POWER_CAPABILITIES._fields_ = [
    ('PowerButtonPresent', ctypes.c_ubyte),
    ('SleepButtonPresent', ctypes.c_ubyte),
    ('LidPresent', ctypes.c_ubyte),
    ('SystemS1', ctypes.c_ubyte),
    ('SystemS2', ctypes.c_ubyte),
    ('SystemS3', ctypes.c_ubyte),
    ('SystemS4', ctypes.c_ubyte),
    ('SystemS5', ctypes.c_ubyte),
    ('HiberFilePresent', ctypes.c_ubyte),
    ('FullWake', ctypes.c_ubyte),
    ('VideoDimPresent', ctypes.c_ubyte),
    ('ApmPresent', ctypes.c_ubyte),
    ('UpsPresent', ctypes.c_ubyte),
    ('ThermalControl', ctypes.c_ubyte),
    ('ProcessorThrottle', ctypes.c_ubyte),
    ('ProcessorMinThrottle', ctypes.c_ubyte),
    ('ProcessorMaxThrottle', ctypes.c_ubyte),
    ('FastSystemS4', ctypes.c_ubyte),
    ('Hiberboot', ctypes.c_ubyte),
    ('WakeAlarmPresent', ctypes.c_ubyte),
    ('AoAc', ctypes.c_ubyte),
    ('DiskSpinDown', ctypes.c_ubyte),
    ('HiberFileType', ctypes.c_ubyte),
    ('AoAcConnectivitySupported', ctypes.c_ubyte),
    ('spare3', ctypes.c_ubyte * 6),
    ('SystemBatteriesPresent', ctypes.c_ubyte),
    ('BatteriesAreShortTerm', ctypes.c_ubyte),
    ('BatteryScale', struct_BATTERY_REPORTING_SCALE * 3),
    ('AcOnLineWake', SYSTEM_POWER_STATE),
    ('SoftLidWake', SYSTEM_POWER_STATE),
    ('RtcWake', SYSTEM_POWER_STATE),
    ('MinDeviceWakeState', SYSTEM_POWER_STATE),
    ('DefaultLowLatencyWake', SYSTEM_POWER_STATE),
]

PSYSTEM_POWER_CAPABILITIES = ctypes.POINTER(struct_SYSTEM_POWER_CAPABILITIES)
class struct_SYSTEM_BATTERY_STATE(Structure):
    pass

struct_SYSTEM_BATTERY_STATE._pack_ = 1 # source:False
struct_SYSTEM_BATTERY_STATE._fields_ = [
    ('AcOnLine', ctypes.c_ubyte),
    ('BatteryPresent', ctypes.c_ubyte),
    ('Charging', ctypes.c_ubyte),
    ('Discharging', ctypes.c_ubyte),
    ('Spare1', ctypes.c_ubyte * 3),
    ('Tag', ctypes.c_ubyte),
    ('MaxCapacity', ctypes.c_uint32),
    ('RemainingCapacity', ctypes.c_uint32),
    ('Rate', ctypes.c_uint32),
    ('EstimatedTime', ctypes.c_uint32),
    ('DefaultAlert1', ctypes.c_uint32),
    ('DefaultAlert2', ctypes.c_uint32),
]

PSYSTEM_BATTERY_STATE = ctypes.POINTER(struct_SYSTEM_BATTERY_STATE)
class struct__IMAGE_DOS_HEADER(Structure):
    pass

struct__IMAGE_DOS_HEADER._pack_ = 1 # source:False
struct__IMAGE_DOS_HEADER._fields_ = [
    ('e_magic', ctypes.c_uint16),
    ('e_cblp', ctypes.c_uint16),
    ('e_cp', ctypes.c_uint16),
    ('e_crlc', ctypes.c_uint16),
    ('e_cparhdr', ctypes.c_uint16),
    ('e_minalloc', ctypes.c_uint16),
    ('e_maxalloc', ctypes.c_uint16),
    ('e_ss', ctypes.c_uint16),
    ('e_sp', ctypes.c_uint16),
    ('e_csum', ctypes.c_uint16),
    ('e_ip', ctypes.c_uint16),
    ('e_cs', ctypes.c_uint16),
    ('e_lfarlc', ctypes.c_uint16),
    ('e_ovno', ctypes.c_uint16),
    ('e_res', ctypes.c_uint16 * 4),
    ('e_oemid', ctypes.c_uint16),
    ('e_oeminfo', ctypes.c_uint16),
    ('e_res2', ctypes.c_uint16 * 10),
    ('e_lfanew', ctypes.c_int32),
]

IMAGE_DOS_HEADER = struct__IMAGE_DOS_HEADER
PIMAGE_DOS_HEADER = ctypes.POINTER(struct__IMAGE_DOS_HEADER)
class struct__IMAGE_OS2_HEADER(Structure):
    pass

struct__IMAGE_OS2_HEADER._pack_ = 1 # source:False
struct__IMAGE_OS2_HEADER._fields_ = [
    ('ne_magic', ctypes.c_uint16),
    ('ne_ver', ctypes.c_char),
    ('ne_rev', ctypes.c_char),
    ('ne_enttab', ctypes.c_uint16),
    ('ne_cbenttab', ctypes.c_uint16),
    ('ne_crc', ctypes.c_int32),
    ('ne_flags', ctypes.c_uint16),
    ('ne_autodata', ctypes.c_uint16),
    ('ne_heap', ctypes.c_uint16),
    ('ne_stack', ctypes.c_uint16),
    ('ne_csip', ctypes.c_int32),
    ('ne_sssp', ctypes.c_int32),
    ('ne_cseg', ctypes.c_uint16),
    ('ne_cmod', ctypes.c_uint16),
    ('ne_cbnrestab', ctypes.c_uint16),
    ('ne_segtab', ctypes.c_uint16),
    ('ne_rsrctab', ctypes.c_uint16),
    ('ne_restab', ctypes.c_uint16),
    ('ne_modtab', ctypes.c_uint16),
    ('ne_imptab', ctypes.c_uint16),
    ('ne_nrestab', ctypes.c_int32),
    ('ne_cmovent', ctypes.c_uint16),
    ('ne_align', ctypes.c_uint16),
    ('ne_cres', ctypes.c_uint16),
    ('ne_exetyp', ctypes.c_ubyte),
    ('ne_flagsothers', ctypes.c_ubyte),
    ('ne_pretthunks', ctypes.c_uint16),
    ('ne_psegrefbytes', ctypes.c_uint16),
    ('ne_swaparea', ctypes.c_uint16),
    ('ne_expver', ctypes.c_uint16),
]

IMAGE_OS2_HEADER = struct__IMAGE_OS2_HEADER
PIMAGE_OS2_HEADER = ctypes.POINTER(struct__IMAGE_OS2_HEADER)
class struct__IMAGE_VXD_HEADER(Structure):
    pass

struct__IMAGE_VXD_HEADER._pack_ = 1 # source:False
struct__IMAGE_VXD_HEADER._fields_ = [
    ('e32_magic', ctypes.c_uint16),
    ('e32_border', ctypes.c_ubyte),
    ('e32_worder', ctypes.c_ubyte),
    ('e32_level', ctypes.c_uint32),
    ('e32_cpu', ctypes.c_uint16),
    ('e32_os', ctypes.c_uint16),
    ('e32_ver', ctypes.c_uint32),
    ('e32_mflags', ctypes.c_uint32),
    ('e32_mpages', ctypes.c_uint32),
    ('e32_startobj', ctypes.c_uint32),
    ('e32_eip', ctypes.c_uint32),
    ('e32_stackobj', ctypes.c_uint32),
    ('e32_esp', ctypes.c_uint32),
    ('e32_pagesize', ctypes.c_uint32),
    ('e32_lastpagesize', ctypes.c_uint32),
    ('e32_fixupsize', ctypes.c_uint32),
    ('e32_fixupsum', ctypes.c_uint32),
    ('e32_ldrsize', ctypes.c_uint32),
    ('e32_ldrsum', ctypes.c_uint32),
    ('e32_objtab', ctypes.c_uint32),
    ('e32_objcnt', ctypes.c_uint32),
    ('e32_objmap', ctypes.c_uint32),
    ('e32_itermap', ctypes.c_uint32),
    ('e32_rsrctab', ctypes.c_uint32),
    ('e32_rsrccnt', ctypes.c_uint32),
    ('e32_restab', ctypes.c_uint32),
    ('e32_enttab', ctypes.c_uint32),
    ('e32_dirtab', ctypes.c_uint32),
    ('e32_dircnt', ctypes.c_uint32),
    ('e32_fpagetab', ctypes.c_uint32),
    ('e32_frectab', ctypes.c_uint32),
    ('e32_impmod', ctypes.c_uint32),
    ('e32_impmodcnt', ctypes.c_uint32),
    ('e32_impproc', ctypes.c_uint32),
    ('e32_pagesum', ctypes.c_uint32),
    ('e32_datapage', ctypes.c_uint32),
    ('e32_preload', ctypes.c_uint32),
    ('e32_nrestab', ctypes.c_uint32),
    ('e32_cbnrestab', ctypes.c_uint32),
    ('e32_nressum', ctypes.c_uint32),
    ('e32_autodata', ctypes.c_uint32),
    ('e32_debuginfo', ctypes.c_uint32),
    ('e32_debuglen', ctypes.c_uint32),
    ('e32_instpreload', ctypes.c_uint32),
    ('e32_instdemand', ctypes.c_uint32),
    ('e32_heapsize', ctypes.c_uint32),
    ('e32_res3', ctypes.c_ubyte * 12),
    ('e32_winresoff', ctypes.c_uint32),
    ('e32_winreslen', ctypes.c_uint32),
    ('e32_devid', ctypes.c_uint16),
    ('e32_ddkver', ctypes.c_uint16),
]

IMAGE_VXD_HEADER = struct__IMAGE_VXD_HEADER
PIMAGE_VXD_HEADER = ctypes.POINTER(struct__IMAGE_VXD_HEADER)
class struct__IMAGE_FILE_HEADER(Structure):
    pass

struct__IMAGE_FILE_HEADER._pack_ = 1 # source:False
struct__IMAGE_FILE_HEADER._fields_ = [
    ('Machine', ctypes.c_uint16),
    ('NumberOfSections', ctypes.c_uint16),
    ('TimeDateStamp', ctypes.c_uint32),
    ('PointerToSymbolTable', ctypes.c_uint32),
    ('NumberOfSymbols', ctypes.c_uint32),
    ('SizeOfOptionalHeader', ctypes.c_uint16),
    ('Characteristics', ctypes.c_uint16),
]

IMAGE_FILE_HEADER = struct__IMAGE_FILE_HEADER
PIMAGE_FILE_HEADER = ctypes.POINTER(struct__IMAGE_FILE_HEADER)
class struct__IMAGE_DATA_DIRECTORY(Structure):
    pass

struct__IMAGE_DATA_DIRECTORY._pack_ = 1 # source:False
struct__IMAGE_DATA_DIRECTORY._fields_ = [
    ('VirtualAddress', ctypes.c_uint32),
    ('Size', ctypes.c_uint32),
]

IMAGE_DATA_DIRECTORY = struct__IMAGE_DATA_DIRECTORY
PIMAGE_DATA_DIRECTORY = ctypes.POINTER(struct__IMAGE_DATA_DIRECTORY)
class struct__IMAGE_OPTIONAL_HEADER(Structure):
    pass

struct__IMAGE_OPTIONAL_HEADER._pack_ = 1 # source:False
struct__IMAGE_OPTIONAL_HEADER._fields_ = [
    ('Magic', ctypes.c_uint16),
    ('MajorLinkerVersion', ctypes.c_ubyte),
    ('MinorLinkerVersion', ctypes.c_ubyte),
    ('SizeOfCode', ctypes.c_uint32),
    ('SizeOfInitializedData', ctypes.c_uint32),
    ('SizeOfUninitializedData', ctypes.c_uint32),
    ('AddressOfEntryPoint', ctypes.c_uint32),
    ('BaseOfCode', ctypes.c_uint32),
    ('BaseOfData', ctypes.c_uint32),
    ('ImageBase', ctypes.c_uint32),
    ('SectionAlignment', ctypes.c_uint32),
    ('FileAlignment', ctypes.c_uint32),
    ('MajorOperatingSystemVersion', ctypes.c_uint16),
    ('MinorOperatingSystemVersion', ctypes.c_uint16),
    ('MajorImageVersion', ctypes.c_uint16),
    ('MinorImageVersion', ctypes.c_uint16),
    ('MajorSubsystemVersion', ctypes.c_uint16),
    ('MinorSubsystemVersion', ctypes.c_uint16),
    ('Win32VersionValue', ctypes.c_uint32),
    ('SizeOfImage', ctypes.c_uint32),
    ('SizeOfHeaders', ctypes.c_uint32),
    ('CheckSum', ctypes.c_uint32),
    ('Subsystem', ctypes.c_uint16),
    ('DllCharacteristics', ctypes.c_uint16),
    ('SizeOfStackReserve', ctypes.c_uint32),
    ('SizeOfStackCommit', ctypes.c_uint32),
    ('SizeOfHeapReserve', ctypes.c_uint32),
    ('SizeOfHeapCommit', ctypes.c_uint32),
    ('LoaderFlags', ctypes.c_uint32),
    ('NumberOfRvaAndSizes', ctypes.c_uint32),
    ('DataDirectory', struct__IMAGE_DATA_DIRECTORY * 16),
]

IMAGE_OPTIONAL_HEADER32 = struct__IMAGE_OPTIONAL_HEADER
PIMAGE_OPTIONAL_HEADER32 = ctypes.POINTER(struct__IMAGE_OPTIONAL_HEADER)
class struct__IMAGE_ROM_OPTIONAL_HEADER(Structure):
    pass

struct__IMAGE_ROM_OPTIONAL_HEADER._pack_ = 1 # source:False
struct__IMAGE_ROM_OPTIONAL_HEADER._fields_ = [
    ('Magic', ctypes.c_uint16),
    ('MajorLinkerVersion', ctypes.c_ubyte),
    ('MinorLinkerVersion', ctypes.c_ubyte),
    ('SizeOfCode', ctypes.c_uint32),
    ('SizeOfInitializedData', ctypes.c_uint32),
    ('SizeOfUninitializedData', ctypes.c_uint32),
    ('AddressOfEntryPoint', ctypes.c_uint32),
    ('BaseOfCode', ctypes.c_uint32),
    ('BaseOfData', ctypes.c_uint32),
    ('BaseOfBss', ctypes.c_uint32),
    ('GprMask', ctypes.c_uint32),
    ('CprMask', ctypes.c_uint32 * 4),
    ('GpValue', ctypes.c_uint32),
]

IMAGE_ROM_OPTIONAL_HEADER = struct__IMAGE_ROM_OPTIONAL_HEADER
PIMAGE_ROM_OPTIONAL_HEADER = ctypes.POINTER(struct__IMAGE_ROM_OPTIONAL_HEADER)
class struct__IMAGE_OPTIONAL_HEADER64(Structure):
    pass

struct__IMAGE_OPTIONAL_HEADER64._pack_ = 1 # source:False
struct__IMAGE_OPTIONAL_HEADER64._fields_ = [
    ('Magic', ctypes.c_uint16),
    ('MajorLinkerVersion', ctypes.c_ubyte),
    ('MinorLinkerVersion', ctypes.c_ubyte),
    ('SizeOfCode', ctypes.c_uint32),
    ('SizeOfInitializedData', ctypes.c_uint32),
    ('SizeOfUninitializedData', ctypes.c_uint32),
    ('AddressOfEntryPoint', ctypes.c_uint32),
    ('BaseOfCode', ctypes.c_uint32),
    ('ImageBase', ctypes.c_uint64),
    ('SectionAlignment', ctypes.c_uint32),
    ('FileAlignment', ctypes.c_uint32),
    ('MajorOperatingSystemVersion', ctypes.c_uint16),
    ('MinorOperatingSystemVersion', ctypes.c_uint16),
    ('MajorImageVersion', ctypes.c_uint16),
    ('MinorImageVersion', ctypes.c_uint16),
    ('MajorSubsystemVersion', ctypes.c_uint16),
    ('MinorSubsystemVersion', ctypes.c_uint16),
    ('Win32VersionValue', ctypes.c_uint32),
    ('SizeOfImage', ctypes.c_uint32),
    ('SizeOfHeaders', ctypes.c_uint32),
    ('CheckSum', ctypes.c_uint32),
    ('Subsystem', ctypes.c_uint16),
    ('DllCharacteristics', ctypes.c_uint16),
    ('SizeOfStackReserve', ctypes.c_uint64),
    ('SizeOfStackCommit', ctypes.c_uint64),
    ('SizeOfHeapReserve', ctypes.c_uint64),
    ('SizeOfHeapCommit', ctypes.c_uint64),
    ('LoaderFlags', ctypes.c_uint32),
    ('NumberOfRvaAndSizes', ctypes.c_uint32),
    ('DataDirectory', struct__IMAGE_DATA_DIRECTORY * 16),
]

IMAGE_OPTIONAL_HEADER64 = struct__IMAGE_OPTIONAL_HEADER64
PIMAGE_OPTIONAL_HEADER64 = ctypes.POINTER(struct__IMAGE_OPTIONAL_HEADER64)
IMAGE_OPTIONAL_HEADER = struct__IMAGE_OPTIONAL_HEADER64
PIMAGE_OPTIONAL_HEADER = ctypes.POINTER(struct__IMAGE_OPTIONAL_HEADER64)
class struct__IMAGE_NT_HEADERS64(Structure):
    pass

struct__IMAGE_NT_HEADERS64._pack_ = 1 # source:False
struct__IMAGE_NT_HEADERS64._fields_ = [
    ('Signature', ctypes.c_uint32),
    ('FileHeader', IMAGE_FILE_HEADER),
    ('OptionalHeader', IMAGE_OPTIONAL_HEADER64),
]

IMAGE_NT_HEADERS64 = struct__IMAGE_NT_HEADERS64
PIMAGE_NT_HEADERS64 = ctypes.POINTER(struct__IMAGE_NT_HEADERS64)
class struct__IMAGE_NT_HEADERS(Structure):
    pass

struct__IMAGE_NT_HEADERS._pack_ = 1 # source:False
struct__IMAGE_NT_HEADERS._fields_ = [
    ('Signature', ctypes.c_uint32),
    ('FileHeader', IMAGE_FILE_HEADER),
    ('OptionalHeader', IMAGE_OPTIONAL_HEADER32),
]

IMAGE_NT_HEADERS32 = struct__IMAGE_NT_HEADERS
PIMAGE_NT_HEADERS32 = ctypes.POINTER(struct__IMAGE_NT_HEADERS)
class struct__IMAGE_ROM_HEADERS(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('FileHeader', IMAGE_FILE_HEADER),
    ('OptionalHeader', IMAGE_ROM_OPTIONAL_HEADER),
     ]

IMAGE_ROM_HEADERS = struct__IMAGE_ROM_HEADERS
PIMAGE_ROM_HEADERS = ctypes.POINTER(struct__IMAGE_ROM_HEADERS)
IMAGE_NT_HEADERS = struct__IMAGE_NT_HEADERS64
PIMAGE_NT_HEADERS = ctypes.POINTER(struct__IMAGE_NT_HEADERS64)
class struct_ANON_OBJECT_HEADER(Structure):
    pass

struct_ANON_OBJECT_HEADER._pack_ = 1 # source:False
struct_ANON_OBJECT_HEADER._fields_ = [
    ('Sig1', ctypes.c_uint16),
    ('Sig2', ctypes.c_uint16),
    ('Version', ctypes.c_uint16),
    ('Machine', ctypes.c_uint16),
    ('TimeDateStamp', ctypes.c_uint32),
    ('ClassID', CLSID),
    ('SizeOfData', ctypes.c_uint32),
]

class struct_ANON_OBJECT_HEADER_V2(Structure):
    pass

struct_ANON_OBJECT_HEADER_V2._pack_ = 1 # source:False
struct_ANON_OBJECT_HEADER_V2._fields_ = [
    ('Sig1', ctypes.c_uint16),
    ('Sig2', ctypes.c_uint16),
    ('Version', ctypes.c_uint16),
    ('Machine', ctypes.c_uint16),
    ('TimeDateStamp', ctypes.c_uint32),
    ('ClassID', CLSID),
    ('SizeOfData', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('MetaDataSize', ctypes.c_uint32),
    ('MetaDataOffset', ctypes.c_uint32),
]

class struct_ANON_OBJECT_HEADER_BIGOBJ(Structure):
    pass

struct_ANON_OBJECT_HEADER_BIGOBJ._pack_ = 1 # source:False
struct_ANON_OBJECT_HEADER_BIGOBJ._fields_ = [
    ('Sig1', ctypes.c_uint16),
    ('Sig2', ctypes.c_uint16),
    ('Version', ctypes.c_uint16),
    ('Machine', ctypes.c_uint16),
    ('TimeDateStamp', ctypes.c_uint32),
    ('ClassID', CLSID),
    ('SizeOfData', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('MetaDataSize', ctypes.c_uint32),
    ('MetaDataOffset', ctypes.c_uint32),
    ('NumberOfSections', ctypes.c_uint32),
    ('PointerToSymbolTable', ctypes.c_uint32),
    ('NumberOfSymbols', ctypes.c_uint32),
]

class union__IMAGE_SECTION_HEADER___B20B6FDCB4F1775194C54A2EDD59D5CE(Union):
    pass

union__IMAGE_SECTION_HEADER___B20B6FDCB4F1775194C54A2EDD59D5CE._pack_ = 1 # source:False
union__IMAGE_SECTION_HEADER___B20B6FDCB4F1775194C54A2EDD59D5CE._fields_ = [
    ('PhysicalAddress', ctypes.c_uint32),
    ('VirtualSize', ctypes.c_uint32),
]

class struct__IMAGE_SECTION_HEADER(Structure):
    pass

struct__IMAGE_SECTION_HEADER._pack_ = 1 # source:False
struct__IMAGE_SECTION_HEADER._fields_ = [
    ('Name', ctypes.c_ubyte * 8),
    ('Misc', union__IMAGE_SECTION_HEADER___B20B6FDCB4F1775194C54A2EDD59D5CE),
    ('VirtualAddress', ctypes.c_uint32),
    ('SizeOfRawData', ctypes.c_uint32),
    ('PointerToRawData', ctypes.c_uint32),
    ('PointerToRelocations', ctypes.c_uint32),
    ('PointerToLinenumbers', ctypes.c_uint32),
    ('NumberOfRelocations', ctypes.c_uint16),
    ('NumberOfLinenumbers', ctypes.c_uint16),
    ('Characteristics', ctypes.c_uint32),
]

IMAGE_SECTION_HEADER = struct__IMAGE_SECTION_HEADER
PIMAGE_SECTION_HEADER = ctypes.POINTER(struct__IMAGE_SECTION_HEADER)
class struct__971F672DC66B184EF61B29BB35386FAB(Structure):
    pass

struct__971F672DC66B184EF61B29BB35386FAB._pack_ = 1 # source:False
struct__971F672DC66B184EF61B29BB35386FAB._fields_ = [
    ('Short', ctypes.c_uint32),
    ('Long', ctypes.c_uint32),
]

class union__IMAGE_SYMBOL___DE3AFBD7AC8D9D18ABFE421162305292(Union):
    pass

union__IMAGE_SYMBOL___DE3AFBD7AC8D9D18ABFE421162305292._pack_ = 1 # source:False
union__IMAGE_SYMBOL___DE3AFBD7AC8D9D18ABFE421162305292._fields_ = [
    ('ShortName', ctypes.c_ubyte * 8),
    ('Name', struct__971F672DC66B184EF61B29BB35386FAB),
    ('LongName', ctypes.c_uint32 * 2),
]

class struct__IMAGE_SYMBOL(Structure):
    pass

struct__IMAGE_SYMBOL._pack_ = 1 # source:False
struct__IMAGE_SYMBOL._fields_ = [
    ('N', union__IMAGE_SYMBOL___DE3AFBD7AC8D9D18ABFE421162305292),
    ('Value', ctypes.c_uint32),
    ('SectionNumber', ctypes.c_int16),
    ('Type', ctypes.c_uint16),
    ('StorageClass', ctypes.c_ubyte),
    ('NumberOfAuxSymbols', ctypes.c_ubyte),
]

IMAGE_SYMBOL = struct__IMAGE_SYMBOL
PIMAGE_SYMBOL = ctypes.POINTER(struct__IMAGE_SYMBOL)
class union__IMAGE_SYMBOL_EX___DE3AFBD7AC8D9D18ABFE421162305292(Union):
    pass

union__IMAGE_SYMBOL_EX___DE3AFBD7AC8D9D18ABFE421162305292._pack_ = 1 # source:False
union__IMAGE_SYMBOL_EX___DE3AFBD7AC8D9D18ABFE421162305292._fields_ = [
    ('ShortName', ctypes.c_ubyte * 8),
    ('Name', struct__971F672DC66B184EF61B29BB35386FAB),
    ('LongName', ctypes.c_uint32 * 2),
]

class struct__IMAGE_SYMBOL_EX(Structure):
    pass

struct__IMAGE_SYMBOL_EX._pack_ = 1 # source:False
struct__IMAGE_SYMBOL_EX._fields_ = [
    ('N', union__IMAGE_SYMBOL_EX___DE3AFBD7AC8D9D18ABFE421162305292),
    ('Value', ctypes.c_uint32),
    ('SectionNumber', ctypes.c_int32),
    ('Type', ctypes.c_uint16),
    ('StorageClass', ctypes.c_ubyte),
    ('NumberOfAuxSymbols', ctypes.c_ubyte),
]

IMAGE_SYMBOL_EX = struct__IMAGE_SYMBOL_EX
PIMAGE_SYMBOL_EX = ctypes.POINTER(struct__IMAGE_SYMBOL_EX)
class struct_IMAGE_AUX_SYMBOL_TOKEN_DEF(Structure):
    pass

struct_IMAGE_AUX_SYMBOL_TOKEN_DEF._pack_ = 1 # source:False
struct_IMAGE_AUX_SYMBOL_TOKEN_DEF._fields_ = [
    ('bAuxType', ctypes.c_ubyte),
    ('bReserved', ctypes.c_ubyte),
    ('SymbolTableIndex', ctypes.c_uint32),
    ('rgbReserved', ctypes.c_ubyte * 12),
]

PIMAGE_AUX_SYMBOL_TOKEN_DEF = ctypes.POINTER(struct_IMAGE_AUX_SYMBOL_TOKEN_DEF)
class struct__F8A07DB83731266CE981FF5BAD62F05F(Structure):
    pass

struct__F8A07DB83731266CE981FF5BAD62F05F._pack_ = 1 # source:False
struct__F8A07DB83731266CE981FF5BAD62F05F._fields_ = [
    ('Linenumber', ctypes.c_uint16),
    ('Size', ctypes.c_uint16),
]

class union__1180E8A9723E3D60053FF928AEC5AEC6(Union):
    pass

union__1180E8A9723E3D60053FF928AEC5AEC6._pack_ = 1 # source:False
union__1180E8A9723E3D60053FF928AEC5AEC6._fields_ = [
    ('LnSz', struct__F8A07DB83731266CE981FF5BAD62F05F),
    ('TotalSize', ctypes.c_uint32),
]

class struct__7E853AFA19D46F1D1426A7C4ACE93405(Structure):
    pass

struct__7E853AFA19D46F1D1426A7C4ACE93405._pack_ = 1 # source:False
struct__7E853AFA19D46F1D1426A7C4ACE93405._fields_ = [
    ('PointerToLinenumber', ctypes.c_uint32),
    ('PointerToNextFunction', ctypes.c_uint32),
]

class struct__8FB65F16DAE9F8292AA06E665C2A880E(Structure):
    pass

struct__8FB65F16DAE9F8292AA06E665C2A880E._pack_ = 1 # source:False
struct__8FB65F16DAE9F8292AA06E665C2A880E._fields_ = [
    ('Dimension', ctypes.c_uint16 * 4),
]

class union__9960A4B9B2F8A839702CFE4E98B853A5(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Function', struct__7E853AFA19D46F1D1426A7C4ACE93405),
    ('Array', struct__8FB65F16DAE9F8292AA06E665C2A880E),
     ]

class struct__IMAGE_AUX_SYMBOL___99A09626C0B327B801309162952BF118(Structure):
    pass

struct__IMAGE_AUX_SYMBOL___99A09626C0B327B801309162952BF118._pack_ = 1 # source:False
struct__IMAGE_AUX_SYMBOL___99A09626C0B327B801309162952BF118._fields_ = [
    ('TagIndex', ctypes.c_uint32),
    ('Misc', union__1180E8A9723E3D60053FF928AEC5AEC6),
    ('FcnAry', union__9960A4B9B2F8A839702CFE4E98B853A5),
    ('TvIndex', ctypes.c_uint16),
]

class struct__IMAGE_AUX_SYMBOL___E31B0C8FAB087F6C1EB948B5A6818D63(Structure):
    pass

struct__IMAGE_AUX_SYMBOL___E31B0C8FAB087F6C1EB948B5A6818D63._pack_ = 1 # source:False
struct__IMAGE_AUX_SYMBOL___E31B0C8FAB087F6C1EB948B5A6818D63._fields_ = [
    ('Name', ctypes.c_ubyte * 18),
]

class struct__IMAGE_AUX_SYMBOL___7C6297ADB1522AE012833A8C9F9B34B5(Structure):
    pass

struct__IMAGE_AUX_SYMBOL___7C6297ADB1522AE012833A8C9F9B34B5._pack_ = 1 # source:False
struct__IMAGE_AUX_SYMBOL___7C6297ADB1522AE012833A8C9F9B34B5._fields_ = [
    ('Length', ctypes.c_uint32),
    ('NumberOfRelocations', ctypes.c_uint16),
    ('NumberOfLinenumbers', ctypes.c_uint16),
    ('CheckSum', ctypes.c_uint32),
    ('Number', ctypes.c_int16),
    ('Selection', ctypes.c_ubyte),
    ('bReserved', ctypes.c_ubyte),
    ('HighNumber', ctypes.c_int16),
]

class struct__IMAGE_AUX_SYMBOL___3AD4DEB8505F041CB6DF52E290B0756F(Structure):
    pass

struct__IMAGE_AUX_SYMBOL___3AD4DEB8505F041CB6DF52E290B0756F._pack_ = 1 # source:False
struct__IMAGE_AUX_SYMBOL___3AD4DEB8505F041CB6DF52E290B0756F._fields_ = [
    ('crc', ctypes.c_uint32),
    ('rgbReserved', ctypes.c_ubyte * 14),
]

class union__IMAGE_AUX_SYMBOL(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Sym', struct__IMAGE_AUX_SYMBOL___99A09626C0B327B801309162952BF118),
    ('File', struct__IMAGE_AUX_SYMBOL___E31B0C8FAB087F6C1EB948B5A6818D63),
    ('Section', struct__IMAGE_AUX_SYMBOL___7C6297ADB1522AE012833A8C9F9B34B5),
    ('TokenDef', struct_IMAGE_AUX_SYMBOL_TOKEN_DEF),
    ('CRC', struct__IMAGE_AUX_SYMBOL___3AD4DEB8505F041CB6DF52E290B0756F),
     ]

IMAGE_AUX_SYMBOL = union__IMAGE_AUX_SYMBOL
PIMAGE_AUX_SYMBOL = ctypes.POINTER(union__IMAGE_AUX_SYMBOL)
class struct__IMAGE_AUX_SYMBOL_EX___7E1D480B97423AA8E833650CEF32C85E(Structure):
    pass

struct__IMAGE_AUX_SYMBOL_EX___7E1D480B97423AA8E833650CEF32C85E._pack_ = 1 # source:False
struct__IMAGE_AUX_SYMBOL_EX___7E1D480B97423AA8E833650CEF32C85E._fields_ = [
    ('WeakDefaultSymIndex', ctypes.c_uint32),
    ('WeakSearchType', ctypes.c_uint32),
    ('rgbReserved', ctypes.c_ubyte * 12),
]

class struct__IMAGE_AUX_SYMBOL_EX___7F2A680108A16A6223B29324A81F8BAB(Structure):
    pass

struct__IMAGE_AUX_SYMBOL_EX___7F2A680108A16A6223B29324A81F8BAB._pack_ = 1 # source:False
struct__IMAGE_AUX_SYMBOL_EX___7F2A680108A16A6223B29324A81F8BAB._fields_ = [
    ('Name', ctypes.c_ubyte * 20),
]

class struct__IMAGE_AUX_SYMBOL_EX___3527ECF91F93989322DD305E5AF9CF65(Structure):
    pass

struct__IMAGE_AUX_SYMBOL_EX___3527ECF91F93989322DD305E5AF9CF65._pack_ = 1 # source:False
struct__IMAGE_AUX_SYMBOL_EX___3527ECF91F93989322DD305E5AF9CF65._fields_ = [
    ('Length', ctypes.c_uint32),
    ('NumberOfRelocations', ctypes.c_uint16),
    ('NumberOfLinenumbers', ctypes.c_uint16),
    ('CheckSum', ctypes.c_uint32),
    ('Number', ctypes.c_int16),
    ('Selection', ctypes.c_ubyte),
    ('bReserved', ctypes.c_ubyte),
    ('HighNumber', ctypes.c_int16),
    ('rgbReserved', ctypes.c_ubyte * 2),
]

class struct__IMAGE_AUX_SYMBOL_EX___F5EEF4289C9728E28354AD824FFA2064(Structure):
    pass

struct__IMAGE_AUX_SYMBOL_EX___F5EEF4289C9728E28354AD824FFA2064._pack_ = 1 # source:False
struct__IMAGE_AUX_SYMBOL_EX___F5EEF4289C9728E28354AD824FFA2064._fields_ = [
    ('TokenDef', struct_IMAGE_AUX_SYMBOL_TOKEN_DEF),
    ('rgbReserved', ctypes.c_ubyte * 2),
]

class struct__IMAGE_AUX_SYMBOL_EX___A98B7E4D8FC2E1BB0BA4A96D48F8B6DC(Structure):
    pass

struct__IMAGE_AUX_SYMBOL_EX___A98B7E4D8FC2E1BB0BA4A96D48F8B6DC._pack_ = 1 # source:False
struct__IMAGE_AUX_SYMBOL_EX___A98B7E4D8FC2E1BB0BA4A96D48F8B6DC._fields_ = [
    ('crc', ctypes.c_uint32),
    ('rgbReserved', ctypes.c_ubyte * 16),
]

class union__IMAGE_AUX_SYMBOL_EX(Union):
    pass

class struct__IMAGE_AUX_SYMBOL_EX_0(Structure):
    pass

struct__IMAGE_AUX_SYMBOL_EX_0._pack_ = 1 # source:False
struct__IMAGE_AUX_SYMBOL_EX_0._fields_ = [
    ('TokenDef', struct_IMAGE_AUX_SYMBOL_TOKEN_DEF),
    ('rgbReserved', ctypes.c_ubyte * 2),
]

union__IMAGE_AUX_SYMBOL_EX._pack_ = 1 # source:False
union__IMAGE_AUX_SYMBOL_EX._anonymous_ = ('_0',)
union__IMAGE_AUX_SYMBOL_EX._fields_ = [
    ('Sym', struct__IMAGE_AUX_SYMBOL_EX___7E1D480B97423AA8E833650CEF32C85E),
    ('File', struct__IMAGE_AUX_SYMBOL_EX___7F2A680108A16A6223B29324A81F8BAB),
    ('Section', struct__IMAGE_AUX_SYMBOL_EX___3527ECF91F93989322DD305E5AF9CF65),
    ('_0', struct__IMAGE_AUX_SYMBOL_EX_0),
    ('CRC', struct__IMAGE_AUX_SYMBOL_EX___A98B7E4D8FC2E1BB0BA4A96D48F8B6DC),
]

IMAGE_AUX_SYMBOL_EX = union__IMAGE_AUX_SYMBOL_EX
PIMAGE_AUX_SYMBOL_EX = ctypes.POINTER(union__IMAGE_AUX_SYMBOL_EX)

# values for enumeration 'IMAGE_AUX_SYMBOL_TYPE'
IMAGE_AUX_SYMBOL_TYPE__enumvalues = {
    1: 'IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF',
}
IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
IMAGE_AUX_SYMBOL_TYPE = ctypes.c_uint32 # enum
class union__IMAGE_RELOCATION___2EB1567E979FC6E3EBD596876A027ED1(Union):
    pass

union__IMAGE_RELOCATION___2EB1567E979FC6E3EBD596876A027ED1._pack_ = 1 # source:False
union__IMAGE_RELOCATION___2EB1567E979FC6E3EBD596876A027ED1._fields_ = [
    ('VirtualAddress', ctypes.c_uint32),
    ('RelocCount', ctypes.c_uint32),
]

class struct__IMAGE_RELOCATION(Structure):
    pass

class union__IMAGE_RELOCATION_0(Union):
    pass

union__IMAGE_RELOCATION_0._pack_ = 1 # source:False
union__IMAGE_RELOCATION_0._fields_ = [
    ('VirtualAddress', ctypes.c_uint32),
    ('RelocCount', ctypes.c_uint32),
]

struct__IMAGE_RELOCATION._pack_ = 1 # source:False
struct__IMAGE_RELOCATION._anonymous_ = ('_0',)
struct__IMAGE_RELOCATION._fields_ = [
    ('_0', union__IMAGE_RELOCATION_0),
    ('SymbolTableIndex', ctypes.c_uint32),
    ('Type', ctypes.c_uint16),
]

IMAGE_RELOCATION = struct__IMAGE_RELOCATION
PIMAGE_RELOCATION = ctypes.POINTER(struct__IMAGE_RELOCATION)
class union__IMAGE_LINENUMBER___DA78A16261B4BEF6A303D7389260D886(Union):
    pass

union__IMAGE_LINENUMBER___DA78A16261B4BEF6A303D7389260D886._pack_ = 1 # source:False
union__IMAGE_LINENUMBER___DA78A16261B4BEF6A303D7389260D886._fields_ = [
    ('SymbolTableIndex', ctypes.c_uint32),
    ('VirtualAddress', ctypes.c_uint32),
]

class struct__IMAGE_LINENUMBER(Structure):
    pass

struct__IMAGE_LINENUMBER._pack_ = 1 # source:False
struct__IMAGE_LINENUMBER._fields_ = [
    ('Type', union__IMAGE_LINENUMBER___DA78A16261B4BEF6A303D7389260D886),
    ('Linenumber', ctypes.c_uint16),
]

IMAGE_LINENUMBER = struct__IMAGE_LINENUMBER
PIMAGE_LINENUMBER = ctypes.POINTER(struct__IMAGE_LINENUMBER)
class struct__IMAGE_BASE_RELOCATION(Structure):
    pass

struct__IMAGE_BASE_RELOCATION._pack_ = 1 # source:False
struct__IMAGE_BASE_RELOCATION._fields_ = [
    ('VirtualAddress', ctypes.c_uint32),
    ('SizeOfBlock', ctypes.c_uint32),
]

IMAGE_BASE_RELOCATION = struct__IMAGE_BASE_RELOCATION
PIMAGE_BASE_RELOCATION = ctypes.POINTER(struct__IMAGE_BASE_RELOCATION)
class struct__IMAGE_ARCHIVE_MEMBER_HEADER(Structure):
    pass

struct__IMAGE_ARCHIVE_MEMBER_HEADER._pack_ = 1 # source:False
struct__IMAGE_ARCHIVE_MEMBER_HEADER._fields_ = [
    ('Name', ctypes.c_ubyte * 16),
    ('Date', ctypes.c_ubyte * 12),
    ('UserID', ctypes.c_ubyte * 6),
    ('GroupID', ctypes.c_ubyte * 6),
    ('Mode', ctypes.c_ubyte * 8),
    ('Size', ctypes.c_ubyte * 10),
    ('EndHeader', ctypes.c_ubyte * 2),
]

IMAGE_ARCHIVE_MEMBER_HEADER = struct__IMAGE_ARCHIVE_MEMBER_HEADER
PIMAGE_ARCHIVE_MEMBER_HEADER = ctypes.POINTER(struct__IMAGE_ARCHIVE_MEMBER_HEADER)
class struct__IMAGE_EXPORT_DIRECTORY(Structure):
    pass

struct__IMAGE_EXPORT_DIRECTORY._pack_ = 1 # source:False
struct__IMAGE_EXPORT_DIRECTORY._fields_ = [
    ('Characteristics', ctypes.c_uint32),
    ('TimeDateStamp', ctypes.c_uint32),
    ('MajorVersion', ctypes.c_uint16),
    ('MinorVersion', ctypes.c_uint16),
    ('Name', ctypes.c_uint32),
    ('Base', ctypes.c_uint32),
    ('NumberOfFunctions', ctypes.c_uint32),
    ('NumberOfNames', ctypes.c_uint32),
    ('AddressOfFunctions', ctypes.c_uint32),
    ('AddressOfNames', ctypes.c_uint32),
    ('AddressOfNameOrdinals', ctypes.c_uint32),
]

IMAGE_EXPORT_DIRECTORY = struct__IMAGE_EXPORT_DIRECTORY
PIMAGE_EXPORT_DIRECTORY = ctypes.POINTER(struct__IMAGE_EXPORT_DIRECTORY)
class struct__IMAGE_IMPORT_BY_NAME(Structure):
    pass

struct__IMAGE_IMPORT_BY_NAME._pack_ = 1 # source:False
struct__IMAGE_IMPORT_BY_NAME._fields_ = [
    ('Hint', ctypes.c_uint16),
    ('Name', ctypes.c_char * 1),
    ('PADDING_0', ctypes.c_ubyte),
]

IMAGE_IMPORT_BY_NAME = struct__IMAGE_IMPORT_BY_NAME
PIMAGE_IMPORT_BY_NAME = ctypes.POINTER(struct__IMAGE_IMPORT_BY_NAME)
class union__IMAGE_THUNK_DATA64___A353DE2894FC33A63C1ED01FD652CC1F(Union):
    pass

union__IMAGE_THUNK_DATA64___A353DE2894FC33A63C1ED01FD652CC1F._pack_ = 1 # source:False
union__IMAGE_THUNK_DATA64___A353DE2894FC33A63C1ED01FD652CC1F._fields_ = [
    ('ForwarderString', ctypes.c_uint64),
    ('Function', ctypes.c_uint64),
    ('Ordinal', ctypes.c_uint64),
    ('AddressOfData', ctypes.c_uint64),
]

class struct__IMAGE_THUNK_DATA64(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('u1', union__IMAGE_THUNK_DATA64___A353DE2894FC33A63C1ED01FD652CC1F),
     ]

IMAGE_THUNK_DATA64 = struct__IMAGE_THUNK_DATA64
PIMAGE_THUNK_DATA64 = ctypes.POINTER(struct__IMAGE_THUNK_DATA64)
class union__IMAGE_THUNK_DATA32___D4D343E3E3F3D59BBD61641B4D60CB2A(Union):
    pass

union__IMAGE_THUNK_DATA32___D4D343E3E3F3D59BBD61641B4D60CB2A._pack_ = 1 # source:False
union__IMAGE_THUNK_DATA32___D4D343E3E3F3D59BBD61641B4D60CB2A._fields_ = [
    ('ForwarderString', ctypes.c_uint32),
    ('Function', ctypes.c_uint32),
    ('Ordinal', ctypes.c_uint32),
    ('AddressOfData', ctypes.c_uint32),
]

class struct__IMAGE_THUNK_DATA32(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('u1', union__IMAGE_THUNK_DATA32___D4D343E3E3F3D59BBD61641B4D60CB2A),
     ]

IMAGE_THUNK_DATA32 = struct__IMAGE_THUNK_DATA32
PIMAGE_THUNK_DATA32 = ctypes.POINTER(struct__IMAGE_THUNK_DATA32)
PIMAGE_TLS_CALLBACK = ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.c_uint32, ctypes.POINTER(None))
class struct__C95BA7EA5F85079EC657DF089F04F24D(Structure):
    pass

struct__C95BA7EA5F85079EC657DF089F04F24D._pack_ = 1 # source:False
struct__C95BA7EA5F85079EC657DF089F04F24D._fields_ = [
    ('Reserved0', ctypes.c_uint32, 20),
    ('Alignment', ctypes.c_uint32, 4),
    ('Reserved1', ctypes.c_uint32, 8),
]

class union__IMAGE_TLS_DIRECTORY64___3BFF79CBF6517510E85FD75955602401(Union):
    pass

class struct__IMAGE_TLS_DIRECTORY64___3BFF79CBF6517510E85FD75955602401_0(Structure):
    pass

struct__IMAGE_TLS_DIRECTORY64___3BFF79CBF6517510E85FD75955602401_0._pack_ = 1 # source:False
struct__IMAGE_TLS_DIRECTORY64___3BFF79CBF6517510E85FD75955602401_0._fields_ = [
    ('Reserved0', ctypes.c_uint32, 20),
    ('Alignment', ctypes.c_uint32, 4),
    ('Reserved1', ctypes.c_uint32, 8),
]

union__IMAGE_TLS_DIRECTORY64___3BFF79CBF6517510E85FD75955602401._pack_ = 1 # source:False
union__IMAGE_TLS_DIRECTORY64___3BFF79CBF6517510E85FD75955602401._anonymous_ = ('_0',)
union__IMAGE_TLS_DIRECTORY64___3BFF79CBF6517510E85FD75955602401._fields_ = [
    ('Characteristics', ctypes.c_uint32),
    ('_0', struct__IMAGE_TLS_DIRECTORY64___3BFF79CBF6517510E85FD75955602401_0),
]

class struct__IMAGE_TLS_DIRECTORY64(Structure):
    pass

class union__IMAGE_TLS_DIRECTORY64_0(Union):
    pass

class struct__IMAGE_TLS_DIRECTORY64_0_0(Structure):
    pass

struct__IMAGE_TLS_DIRECTORY64_0_0._pack_ = 1 # source:False
struct__IMAGE_TLS_DIRECTORY64_0_0._fields_ = [
    ('Reserved0', ctypes.c_uint32, 20),
    ('Alignment', ctypes.c_uint32, 4),
    ('Reserved1', ctypes.c_uint32, 8),
]

union__IMAGE_TLS_DIRECTORY64_0._pack_ = 1 # source:False
union__IMAGE_TLS_DIRECTORY64_0._anonymous_ = ('_0',)
union__IMAGE_TLS_DIRECTORY64_0._fields_ = [
    ('Characteristics', ctypes.c_uint32),
    ('_0', struct__IMAGE_TLS_DIRECTORY64_0_0),
]

struct__IMAGE_TLS_DIRECTORY64._pack_ = 1 # source:False
struct__IMAGE_TLS_DIRECTORY64._anonymous_ = ('_0',)
struct__IMAGE_TLS_DIRECTORY64._fields_ = [
    ('StartAddressOfRawData', ctypes.c_uint64),
    ('EndAddressOfRawData', ctypes.c_uint64),
    ('AddressOfIndex', ctypes.c_uint64),
    ('AddressOfCallBacks', ctypes.c_uint64),
    ('SizeOfZeroFill', ctypes.c_uint32),
    ('_0', union__IMAGE_TLS_DIRECTORY64_0),
]

IMAGE_TLS_DIRECTORY64 = struct__IMAGE_TLS_DIRECTORY64
PIMAGE_TLS_DIRECTORY64 = ctypes.POINTER(struct__IMAGE_TLS_DIRECTORY64)
class union__IMAGE_TLS_DIRECTORY32___3BFF79CBF6517510E85FD75955602401(Union):
    pass

class struct__IMAGE_TLS_DIRECTORY32___3BFF79CBF6517510E85FD75955602401_0(Structure):
    pass

struct__IMAGE_TLS_DIRECTORY32___3BFF79CBF6517510E85FD75955602401_0._pack_ = 1 # source:False
struct__IMAGE_TLS_DIRECTORY32___3BFF79CBF6517510E85FD75955602401_0._fields_ = [
    ('Reserved0', ctypes.c_uint32, 20),
    ('Alignment', ctypes.c_uint32, 4),
    ('Reserved1', ctypes.c_uint32, 8),
]

union__IMAGE_TLS_DIRECTORY32___3BFF79CBF6517510E85FD75955602401._pack_ = 1 # source:False
union__IMAGE_TLS_DIRECTORY32___3BFF79CBF6517510E85FD75955602401._anonymous_ = ('_0',)
union__IMAGE_TLS_DIRECTORY32___3BFF79CBF6517510E85FD75955602401._fields_ = [
    ('Characteristics', ctypes.c_uint32),
    ('_0', struct__IMAGE_TLS_DIRECTORY32___3BFF79CBF6517510E85FD75955602401_0),
]

class struct__IMAGE_TLS_DIRECTORY32(Structure):
    pass

class union__IMAGE_TLS_DIRECTORY32_0(Union):
    pass

class struct__IMAGE_TLS_DIRECTORY32_0_0(Structure):
    pass

struct__IMAGE_TLS_DIRECTORY32_0_0._pack_ = 1 # source:False
struct__IMAGE_TLS_DIRECTORY32_0_0._fields_ = [
    ('Reserved0', ctypes.c_uint32, 20),
    ('Alignment', ctypes.c_uint32, 4),
    ('Reserved1', ctypes.c_uint32, 8),
]

union__IMAGE_TLS_DIRECTORY32_0._pack_ = 1 # source:False
union__IMAGE_TLS_DIRECTORY32_0._anonymous_ = ('_0',)
union__IMAGE_TLS_DIRECTORY32_0._fields_ = [
    ('Characteristics', ctypes.c_uint32),
    ('_0', struct__IMAGE_TLS_DIRECTORY32_0_0),
]

struct__IMAGE_TLS_DIRECTORY32._pack_ = 1 # source:False
struct__IMAGE_TLS_DIRECTORY32._anonymous_ = ('_0',)
struct__IMAGE_TLS_DIRECTORY32._fields_ = [
    ('StartAddressOfRawData', ctypes.c_uint32),
    ('EndAddressOfRawData', ctypes.c_uint32),
    ('AddressOfIndex', ctypes.c_uint32),
    ('AddressOfCallBacks', ctypes.c_uint32),
    ('SizeOfZeroFill', ctypes.c_uint32),
    ('_0', union__IMAGE_TLS_DIRECTORY32_0),
]

IMAGE_TLS_DIRECTORY32 = struct__IMAGE_TLS_DIRECTORY32
PIMAGE_TLS_DIRECTORY32 = ctypes.POINTER(struct__IMAGE_TLS_DIRECTORY32)
IMAGE_THUNK_DATA = struct__IMAGE_THUNK_DATA64
PIMAGE_THUNK_DATA = ctypes.POINTER(struct__IMAGE_THUNK_DATA64)
IMAGE_TLS_DIRECTORY = struct__IMAGE_TLS_DIRECTORY64
PIMAGE_TLS_DIRECTORY = ctypes.POINTER(struct__IMAGE_TLS_DIRECTORY64)
class union__IMAGE_IMPORT_DESCRIPTOR___C8792122BD3539A55438287892A93E11(Union):
    pass

union__IMAGE_IMPORT_DESCRIPTOR___C8792122BD3539A55438287892A93E11._pack_ = 1 # source:False
union__IMAGE_IMPORT_DESCRIPTOR___C8792122BD3539A55438287892A93E11._fields_ = [
    ('Characteristics', ctypes.c_uint32),
    ('OriginalFirstThunk', ctypes.c_uint32),
]

class struct__IMAGE_IMPORT_DESCRIPTOR(Structure):
    pass

class union__IMAGE_IMPORT_DESCRIPTOR_0(Union):
    pass

union__IMAGE_IMPORT_DESCRIPTOR_0._pack_ = 1 # source:False
union__IMAGE_IMPORT_DESCRIPTOR_0._fields_ = [
    ('Characteristics', ctypes.c_uint32),
    ('OriginalFirstThunk', ctypes.c_uint32),
]

struct__IMAGE_IMPORT_DESCRIPTOR._pack_ = 1 # source:False
struct__IMAGE_IMPORT_DESCRIPTOR._anonymous_ = ('_0',)
struct__IMAGE_IMPORT_DESCRIPTOR._fields_ = [
    ('_0', union__IMAGE_IMPORT_DESCRIPTOR_0),
    ('TimeDateStamp', ctypes.c_uint32),
    ('ForwarderChain', ctypes.c_uint32),
    ('Name', ctypes.c_uint32),
    ('FirstThunk', ctypes.c_uint32),
]

IMAGE_IMPORT_DESCRIPTOR = struct__IMAGE_IMPORT_DESCRIPTOR
PIMAGE_IMPORT_DESCRIPTOR = ctypes.POINTER(struct__IMAGE_IMPORT_DESCRIPTOR)
class struct__IMAGE_BOUND_IMPORT_DESCRIPTOR(Structure):
    pass

struct__IMAGE_BOUND_IMPORT_DESCRIPTOR._pack_ = 1 # source:False
struct__IMAGE_BOUND_IMPORT_DESCRIPTOR._fields_ = [
    ('TimeDateStamp', ctypes.c_uint32),
    ('OffsetModuleName', ctypes.c_uint16),
    ('NumberOfModuleForwarderRefs', ctypes.c_uint16),
]

IMAGE_BOUND_IMPORT_DESCRIPTOR = struct__IMAGE_BOUND_IMPORT_DESCRIPTOR
PIMAGE_BOUND_IMPORT_DESCRIPTOR = ctypes.POINTER(struct__IMAGE_BOUND_IMPORT_DESCRIPTOR)
class struct__IMAGE_BOUND_FORWARDER_REF(Structure):
    pass

struct__IMAGE_BOUND_FORWARDER_REF._pack_ = 1 # source:False
struct__IMAGE_BOUND_FORWARDER_REF._fields_ = [
    ('TimeDateStamp', ctypes.c_uint32),
    ('OffsetModuleName', ctypes.c_uint16),
    ('Reserved', ctypes.c_uint16),
]

IMAGE_BOUND_FORWARDER_REF = struct__IMAGE_BOUND_FORWARDER_REF
PIMAGE_BOUND_FORWARDER_REF = ctypes.POINTER(struct__IMAGE_BOUND_FORWARDER_REF)
class struct__B7274AF74BBCA74F18F23DF8227DBA49(Structure):
    pass

struct__B7274AF74BBCA74F18F23DF8227DBA49._pack_ = 1 # source:False
struct__B7274AF74BBCA74F18F23DF8227DBA49._fields_ = [
    ('RvaBased', ctypes.c_uint32, 1),
    ('ReservedAttributes', ctypes.c_uint32, 31),
]

class union__IMAGE_DELAYLOAD_DESCRIPTOR___9046E4C7D059E43F244FD172AEF6AF0D(Union):
    pass

class struct__IMAGE_DELAYLOAD_DESCRIPTOR___9046E4C7D059E43F244FD172AEF6AF0D_0(Structure):
    pass

struct__IMAGE_DELAYLOAD_DESCRIPTOR___9046E4C7D059E43F244FD172AEF6AF0D_0._pack_ = 1 # source:False
struct__IMAGE_DELAYLOAD_DESCRIPTOR___9046E4C7D059E43F244FD172AEF6AF0D_0._fields_ = [
    ('RvaBased', ctypes.c_uint32, 1),
    ('ReservedAttributes', ctypes.c_uint32, 31),
]

union__IMAGE_DELAYLOAD_DESCRIPTOR___9046E4C7D059E43F244FD172AEF6AF0D._pack_ = 1 # source:False
union__IMAGE_DELAYLOAD_DESCRIPTOR___9046E4C7D059E43F244FD172AEF6AF0D._anonymous_ = ('_0',)
union__IMAGE_DELAYLOAD_DESCRIPTOR___9046E4C7D059E43F244FD172AEF6AF0D._fields_ = [
    ('AllAttributes', ctypes.c_uint32),
    ('_0', struct__IMAGE_DELAYLOAD_DESCRIPTOR___9046E4C7D059E43F244FD172AEF6AF0D_0),
]

class struct__IMAGE_DELAYLOAD_DESCRIPTOR(Structure):
    pass

struct__IMAGE_DELAYLOAD_DESCRIPTOR._pack_ = 1 # source:False
struct__IMAGE_DELAYLOAD_DESCRIPTOR._fields_ = [
    ('Attributes', union__IMAGE_DELAYLOAD_DESCRIPTOR___9046E4C7D059E43F244FD172AEF6AF0D),
    ('DllNameRVA', ctypes.c_uint32),
    ('ModuleHandleRVA', ctypes.c_uint32),
    ('ImportAddressTableRVA', ctypes.c_uint32),
    ('ImportNameTableRVA', ctypes.c_uint32),
    ('BoundImportAddressTableRVA', ctypes.c_uint32),
    ('UnloadInformationTableRVA', ctypes.c_uint32),
    ('TimeDateStamp', ctypes.c_uint32),
]

IMAGE_DELAYLOAD_DESCRIPTOR = struct__IMAGE_DELAYLOAD_DESCRIPTOR
PIMAGE_DELAYLOAD_DESCRIPTOR = ctypes.POINTER(struct__IMAGE_DELAYLOAD_DESCRIPTOR)
PCIMAGE_DELAYLOAD_DESCRIPTOR = ctypes.POINTER(struct__IMAGE_DELAYLOAD_DESCRIPTOR)
class struct__IMAGE_RESOURCE_DIRECTORY(Structure):
    pass

struct__IMAGE_RESOURCE_DIRECTORY._pack_ = 1 # source:False
struct__IMAGE_RESOURCE_DIRECTORY._fields_ = [
    ('Characteristics', ctypes.c_uint32),
    ('TimeDateStamp', ctypes.c_uint32),
    ('MajorVersion', ctypes.c_uint16),
    ('MinorVersion', ctypes.c_uint16),
    ('NumberOfNamedEntries', ctypes.c_uint16),
    ('NumberOfIdEntries', ctypes.c_uint16),
]

IMAGE_RESOURCE_DIRECTORY = struct__IMAGE_RESOURCE_DIRECTORY
PIMAGE_RESOURCE_DIRECTORY = ctypes.POINTER(struct__IMAGE_RESOURCE_DIRECTORY)
class struct__F1340E5351F3949C7FFEE8AEB0584375(Structure):
    pass

struct__F1340E5351F3949C7FFEE8AEB0584375._pack_ = 1 # source:False
struct__F1340E5351F3949C7FFEE8AEB0584375._fields_ = [
    ('NameOffset', ctypes.c_uint32, 31),
    ('NameIsString', ctypes.c_uint32, 1),
]

class union__IMAGE_RESOURCE_DIRECTORY_ENTRY___A0A516DD47125A4E74292661543AC098(Union):
    pass

class struct__IMAGE_RESOURCE_DIRECTORY_ENTRY___A0A516DD47125A4E74292661543AC098_0(Structure):
    pass

struct__IMAGE_RESOURCE_DIRECTORY_ENTRY___A0A516DD47125A4E74292661543AC098_0._pack_ = 1 # source:False
struct__IMAGE_RESOURCE_DIRECTORY_ENTRY___A0A516DD47125A4E74292661543AC098_0._fields_ = [
    ('NameOffset', ctypes.c_uint32, 31),
    ('NameIsString', ctypes.c_uint32, 1),
]

union__IMAGE_RESOURCE_DIRECTORY_ENTRY___A0A516DD47125A4E74292661543AC098._pack_ = 1 # source:False
union__IMAGE_RESOURCE_DIRECTORY_ENTRY___A0A516DD47125A4E74292661543AC098._anonymous_ = ('_0',)
union__IMAGE_RESOURCE_DIRECTORY_ENTRY___A0A516DD47125A4E74292661543AC098._fields_ = [
    ('_0', struct__IMAGE_RESOURCE_DIRECTORY_ENTRY___A0A516DD47125A4E74292661543AC098_0),
    ('Name', ctypes.c_uint32),
    ('Id', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

class struct__547C47D15293E95249DF75F7BF757526(Structure):
    pass

struct__547C47D15293E95249DF75F7BF757526._pack_ = 1 # source:False
struct__547C47D15293E95249DF75F7BF757526._fields_ = [
    ('OffsetToDirectory', ctypes.c_uint32, 31),
    ('DataIsDirectory', ctypes.c_uint32, 1),
]

class union__IMAGE_RESOURCE_DIRECTORY_ENTRY___D318A949D2AEB9EBF3E43D786E93C450(Union):
    pass

class struct__IMAGE_RESOURCE_DIRECTORY_ENTRY___D318A949D2AEB9EBF3E43D786E93C450_0(Structure):
    pass

struct__IMAGE_RESOURCE_DIRECTORY_ENTRY___D318A949D2AEB9EBF3E43D786E93C450_0._pack_ = 1 # source:False
struct__IMAGE_RESOURCE_DIRECTORY_ENTRY___D318A949D2AEB9EBF3E43D786E93C450_0._fields_ = [
    ('OffsetToDirectory', ctypes.c_uint32, 31),
    ('DataIsDirectory', ctypes.c_uint32, 1),
]

union__IMAGE_RESOURCE_DIRECTORY_ENTRY___D318A949D2AEB9EBF3E43D786E93C450._pack_ = 1 # source:False
union__IMAGE_RESOURCE_DIRECTORY_ENTRY___D318A949D2AEB9EBF3E43D786E93C450._anonymous_ = ('_0',)
union__IMAGE_RESOURCE_DIRECTORY_ENTRY___D318A949D2AEB9EBF3E43D786E93C450._fields_ = [
    ('OffsetToData', ctypes.c_uint32),
    ('_0', struct__IMAGE_RESOURCE_DIRECTORY_ENTRY___D318A949D2AEB9EBF3E43D786E93C450_0),
]

class struct__IMAGE_RESOURCE_DIRECTORY_ENTRY(Structure):
    pass

class union__IMAGE_RESOURCE_DIRECTORY_ENTRY_0(Union):
    pass

class struct__IMAGE_RESOURCE_DIRECTORY_ENTRY_0_0(Structure):
    pass

struct__IMAGE_RESOURCE_DIRECTORY_ENTRY_0_0._pack_ = 1 # source:False
struct__IMAGE_RESOURCE_DIRECTORY_ENTRY_0_0._fields_ = [
    ('NameOffset', ctypes.c_uint32, 31),
    ('NameIsString', ctypes.c_uint32, 1),
]

union__IMAGE_RESOURCE_DIRECTORY_ENTRY_0._pack_ = 1 # source:False
union__IMAGE_RESOURCE_DIRECTORY_ENTRY_0._anonymous_ = ('_0',)
union__IMAGE_RESOURCE_DIRECTORY_ENTRY_0._fields_ = [
    ('_0', struct__IMAGE_RESOURCE_DIRECTORY_ENTRY_0_0),
    ('Name', ctypes.c_uint32),
    ('Id', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

class union__IMAGE_RESOURCE_DIRECTORY_ENTRY_1(Union):
    pass

class struct__IMAGE_RESOURCE_DIRECTORY_ENTRY_1_0(Structure):
    pass

struct__IMAGE_RESOURCE_DIRECTORY_ENTRY_1_0._pack_ = 1 # source:False
struct__IMAGE_RESOURCE_DIRECTORY_ENTRY_1_0._fields_ = [
    ('OffsetToDirectory', ctypes.c_uint32, 31),
    ('DataIsDirectory', ctypes.c_uint32, 1),
]

union__IMAGE_RESOURCE_DIRECTORY_ENTRY_1._pack_ = 1 # source:False
union__IMAGE_RESOURCE_DIRECTORY_ENTRY_1._anonymous_ = ('_0',)
union__IMAGE_RESOURCE_DIRECTORY_ENTRY_1._fields_ = [
    ('OffsetToData', ctypes.c_uint32),
    ('_0', struct__IMAGE_RESOURCE_DIRECTORY_ENTRY_1_0),
]

struct__IMAGE_RESOURCE_DIRECTORY_ENTRY._pack_ = 1 # source:False
struct__IMAGE_RESOURCE_DIRECTORY_ENTRY._anonymous_ = ('_0', '_1',)
struct__IMAGE_RESOURCE_DIRECTORY_ENTRY._fields_ = [
    ('_0', union__IMAGE_RESOURCE_DIRECTORY_ENTRY_0),
    ('_1', union__IMAGE_RESOURCE_DIRECTORY_ENTRY_1),
]

IMAGE_RESOURCE_DIRECTORY_ENTRY = struct__IMAGE_RESOURCE_DIRECTORY_ENTRY
PIMAGE_RESOURCE_DIRECTORY_ENTRY = ctypes.POINTER(struct__IMAGE_RESOURCE_DIRECTORY_ENTRY)
class struct__IMAGE_RESOURCE_DIRECTORY_STRING(Structure):
    pass

struct__IMAGE_RESOURCE_DIRECTORY_STRING._pack_ = 1 # source:False
struct__IMAGE_RESOURCE_DIRECTORY_STRING._fields_ = [
    ('Length', ctypes.c_uint16),
    ('NameString', ctypes.c_char * 1),
    ('PADDING_0', ctypes.c_ubyte),
]

IMAGE_RESOURCE_DIRECTORY_STRING = struct__IMAGE_RESOURCE_DIRECTORY_STRING
PIMAGE_RESOURCE_DIRECTORY_STRING = ctypes.POINTER(struct__IMAGE_RESOURCE_DIRECTORY_STRING)
class struct__IMAGE_RESOURCE_DIR_STRING_U(Structure):
    pass

struct__IMAGE_RESOURCE_DIR_STRING_U._pack_ = 1 # source:False
struct__IMAGE_RESOURCE_DIR_STRING_U._fields_ = [
    ('Length', ctypes.c_uint16),
    ('NameString', ctypes.c_int16 * 1),
]

IMAGE_RESOURCE_DIR_STRING_U = struct__IMAGE_RESOURCE_DIR_STRING_U
PIMAGE_RESOURCE_DIR_STRING_U = ctypes.POINTER(struct__IMAGE_RESOURCE_DIR_STRING_U)
class struct__IMAGE_RESOURCE_DATA_ENTRY(Structure):
    pass

struct__IMAGE_RESOURCE_DATA_ENTRY._pack_ = 1 # source:False
struct__IMAGE_RESOURCE_DATA_ENTRY._fields_ = [
    ('OffsetToData', ctypes.c_uint32),
    ('Size', ctypes.c_uint32),
    ('CodePage', ctypes.c_uint32),
    ('Reserved', ctypes.c_uint32),
]

IMAGE_RESOURCE_DATA_ENTRY = struct__IMAGE_RESOURCE_DATA_ENTRY
PIMAGE_RESOURCE_DATA_ENTRY = ctypes.POINTER(struct__IMAGE_RESOURCE_DATA_ENTRY)
class struct__IMAGE_LOAD_CONFIG_CODE_INTEGRITY(Structure):
    pass

struct__IMAGE_LOAD_CONFIG_CODE_INTEGRITY._pack_ = 1 # source:False
struct__IMAGE_LOAD_CONFIG_CODE_INTEGRITY._fields_ = [
    ('Flags', ctypes.c_uint16),
    ('Catalog', ctypes.c_uint16),
    ('CatalogOffset', ctypes.c_uint32),
    ('Reserved', ctypes.c_uint32),
]

IMAGE_LOAD_CONFIG_CODE_INTEGRITY = struct__IMAGE_LOAD_CONFIG_CODE_INTEGRITY
PIMAGE_LOAD_CONFIG_CODE_INTEGRITY = ctypes.POINTER(struct__IMAGE_LOAD_CONFIG_CODE_INTEGRITY)
class struct__IMAGE_DYNAMIC_RELOCATION_TABLE(Structure):
    pass

struct__IMAGE_DYNAMIC_RELOCATION_TABLE._pack_ = 1 # source:False
struct__IMAGE_DYNAMIC_RELOCATION_TABLE._fields_ = [
    ('Version', ctypes.c_uint32),
    ('Size', ctypes.c_uint32),
]

IMAGE_DYNAMIC_RELOCATION_TABLE = struct__IMAGE_DYNAMIC_RELOCATION_TABLE
PIMAGE_DYNAMIC_RELOCATION_TABLE = ctypes.POINTER(struct__IMAGE_DYNAMIC_RELOCATION_TABLE)
class struct__IMAGE_DYNAMIC_RELOCATION32(Structure):
    pass

struct__IMAGE_DYNAMIC_RELOCATION32._pack_ = 1 # source:False
struct__IMAGE_DYNAMIC_RELOCATION32._fields_ = [
    ('Symbol', ctypes.c_uint32),
    ('BaseRelocSize', ctypes.c_uint32),
]

IMAGE_DYNAMIC_RELOCATION32 = struct__IMAGE_DYNAMIC_RELOCATION32
PIMAGE_DYNAMIC_RELOCATION32 = ctypes.POINTER(struct__IMAGE_DYNAMIC_RELOCATION32)
class struct__IMAGE_DYNAMIC_RELOCATION64(Structure):
    pass

struct__IMAGE_DYNAMIC_RELOCATION64._pack_ = 1 # source:False
struct__IMAGE_DYNAMIC_RELOCATION64._fields_ = [
    ('Symbol', ctypes.c_uint64),
    ('BaseRelocSize', ctypes.c_uint32),
]

IMAGE_DYNAMIC_RELOCATION64 = struct__IMAGE_DYNAMIC_RELOCATION64
PIMAGE_DYNAMIC_RELOCATION64 = ctypes.POINTER(struct__IMAGE_DYNAMIC_RELOCATION64)
class struct__IMAGE_DYNAMIC_RELOCATION32_V2(Structure):
    pass

struct__IMAGE_DYNAMIC_RELOCATION32_V2._pack_ = 1 # source:False
struct__IMAGE_DYNAMIC_RELOCATION32_V2._fields_ = [
    ('HeaderSize', ctypes.c_uint32),
    ('FixupInfoSize', ctypes.c_uint32),
    ('Symbol', ctypes.c_uint32),
    ('SymbolGroup', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
]

IMAGE_DYNAMIC_RELOCATION32_V2 = struct__IMAGE_DYNAMIC_RELOCATION32_V2
PIMAGE_DYNAMIC_RELOCATION32_V2 = ctypes.POINTER(struct__IMAGE_DYNAMIC_RELOCATION32_V2)
class struct__IMAGE_DYNAMIC_RELOCATION64_V2(Structure):
    pass

struct__IMAGE_DYNAMIC_RELOCATION64_V2._pack_ = 1 # source:False
struct__IMAGE_DYNAMIC_RELOCATION64_V2._fields_ = [
    ('HeaderSize', ctypes.c_uint32),
    ('FixupInfoSize', ctypes.c_uint32),
    ('Symbol', ctypes.c_uint64),
    ('SymbolGroup', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
]

IMAGE_DYNAMIC_RELOCATION64_V2 = struct__IMAGE_DYNAMIC_RELOCATION64_V2
PIMAGE_DYNAMIC_RELOCATION64_V2 = ctypes.POINTER(struct__IMAGE_DYNAMIC_RELOCATION64_V2)
IMAGE_DYNAMIC_RELOCATION = struct__IMAGE_DYNAMIC_RELOCATION64
PIMAGE_DYNAMIC_RELOCATION = ctypes.POINTER(struct__IMAGE_DYNAMIC_RELOCATION64)
IMAGE_DYNAMIC_RELOCATION_V2 = struct__IMAGE_DYNAMIC_RELOCATION64_V2
PIMAGE_DYNAMIC_RELOCATION_V2 = ctypes.POINTER(struct__IMAGE_DYNAMIC_RELOCATION64_V2)
class struct__IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER(Structure):
    pass

struct__IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER._pack_ = 1 # source:False
struct__IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER._fields_ = [
    ('PrologueByteCount', ctypes.c_ubyte),
]

IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = struct__IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER
PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = ctypes.POINTER(struct__IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER)
class struct__IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER(Structure):
    pass

struct__IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER._pack_ = 1 # source:False
struct__IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER._fields_ = [
    ('EpilogueCount', ctypes.c_uint32),
    ('EpilogueByteCount', ctypes.c_ubyte),
    ('BranchDescriptorElementSize', ctypes.c_ubyte),
    ('BranchDescriptorCount', ctypes.c_uint16),
]

IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = struct__IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER
PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = ctypes.POINTER(struct__IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER)
class struct__IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION(Structure):
    pass

struct__IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION._pack_ = 1 # source:False
struct__IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION._fields_ = [
    ('PageRelativeOffset', ctypes.c_uint32, 12),
    ('IndirectCall', ctypes.c_uint32, 1),
    ('IATIndex', ctypes.c_uint32, 19),
]

IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION = struct__IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION
PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION = ctypes.POINTER(struct__IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION)
class struct__IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION(Structure):
    pass

struct__IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION._pack_ = 1 # source:False
struct__IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION._fields_ = [
    ('PageRelativeOffset', ctypes.c_uint16, 12),
    ('IndirectCall', ctypes.c_uint16, 1),
    ('RexWPrefix', ctypes.c_uint16, 1),
    ('CfgCheck', ctypes.c_uint16, 1),
    ('Reserved', ctypes.c_uint16, 1),
]

IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION = struct__IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION
PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION = ctypes.POINTER(struct__IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION)
class struct__IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION(Structure):
    pass

struct__IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION._pack_ = 1 # source:False
struct__IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION._fields_ = [
    ('PageRelativeOffset', ctypes.c_uint16, 12),
    ('RegisterNumber', ctypes.c_uint16, 4),
]

IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = struct__IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION
PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = ctypes.POINTER(struct__IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION)
class struct__IMAGE_LOAD_CONFIG_DIRECTORY32(Structure):
    pass

struct__IMAGE_LOAD_CONFIG_DIRECTORY32._pack_ = 1 # source:False
struct__IMAGE_LOAD_CONFIG_DIRECTORY32._fields_ = [
    ('Size', ctypes.c_uint32),
    ('TimeDateStamp', ctypes.c_uint32),
    ('MajorVersion', ctypes.c_uint16),
    ('MinorVersion', ctypes.c_uint16),
    ('GlobalFlagsClear', ctypes.c_uint32),
    ('GlobalFlagsSet', ctypes.c_uint32),
    ('CriticalSectionDefaultTimeout', ctypes.c_uint32),
    ('DeCommitFreeBlockThreshold', ctypes.c_uint32),
    ('DeCommitTotalFreeThreshold', ctypes.c_uint32),
    ('LockPrefixTable', ctypes.c_uint32),
    ('MaximumAllocationSize', ctypes.c_uint32),
    ('VirtualMemoryThreshold', ctypes.c_uint32),
    ('ProcessHeapFlags', ctypes.c_uint32),
    ('ProcessAffinityMask', ctypes.c_uint32),
    ('CSDVersion', ctypes.c_uint16),
    ('DependentLoadFlags', ctypes.c_uint16),
    ('EditList', ctypes.c_uint32),
    ('SecurityCookie', ctypes.c_uint32),
    ('SEHandlerTable', ctypes.c_uint32),
    ('SEHandlerCount', ctypes.c_uint32),
    ('GuardCFCheckFunctionPointer', ctypes.c_uint32),
    ('GuardCFDispatchFunctionPointer', ctypes.c_uint32),
    ('GuardCFFunctionTable', ctypes.c_uint32),
    ('GuardCFFunctionCount', ctypes.c_uint32),
    ('GuardFlags', ctypes.c_uint32),
    ('CodeIntegrity', IMAGE_LOAD_CONFIG_CODE_INTEGRITY),
    ('GuardAddressTakenIatEntryTable', ctypes.c_uint32),
    ('GuardAddressTakenIatEntryCount', ctypes.c_uint32),
    ('GuardLongJumpTargetTable', ctypes.c_uint32),
    ('GuardLongJumpTargetCount', ctypes.c_uint32),
    ('DynamicValueRelocTable', ctypes.c_uint32),
    ('CHPEMetadataPointer', ctypes.c_uint32),
    ('GuardRFFailureRoutine', ctypes.c_uint32),
    ('GuardRFFailureRoutineFunctionPointer', ctypes.c_uint32),
    ('DynamicValueRelocTableOffset', ctypes.c_uint32),
    ('DynamicValueRelocTableSection', ctypes.c_uint16),
    ('Reserved2', ctypes.c_uint16),
    ('GuardRFVerifyStackPointerFunctionPointer', ctypes.c_uint32),
    ('HotPatchTableOffset', ctypes.c_uint32),
    ('Reserved3', ctypes.c_uint32),
    ('EnclaveConfigurationPointer', ctypes.c_uint32),
    ('VolatileMetadataPointer', ctypes.c_uint32),
    ('GuardEHContinuationTable', ctypes.c_uint32),
    ('GuardEHContinuationCount', ctypes.c_uint32),
]

IMAGE_LOAD_CONFIG_DIRECTORY32 = struct__IMAGE_LOAD_CONFIG_DIRECTORY32
PIMAGE_LOAD_CONFIG_DIRECTORY32 = ctypes.POINTER(struct__IMAGE_LOAD_CONFIG_DIRECTORY32)
class struct__IMAGE_LOAD_CONFIG_DIRECTORY64(Structure):
    pass

struct__IMAGE_LOAD_CONFIG_DIRECTORY64._pack_ = 1 # source:False
struct__IMAGE_LOAD_CONFIG_DIRECTORY64._fields_ = [
    ('Size', ctypes.c_uint32),
    ('TimeDateStamp', ctypes.c_uint32),
    ('MajorVersion', ctypes.c_uint16),
    ('MinorVersion', ctypes.c_uint16),
    ('GlobalFlagsClear', ctypes.c_uint32),
    ('GlobalFlagsSet', ctypes.c_uint32),
    ('CriticalSectionDefaultTimeout', ctypes.c_uint32),
    ('DeCommitFreeBlockThreshold', ctypes.c_uint64),
    ('DeCommitTotalFreeThreshold', ctypes.c_uint64),
    ('LockPrefixTable', ctypes.c_uint64),
    ('MaximumAllocationSize', ctypes.c_uint64),
    ('VirtualMemoryThreshold', ctypes.c_uint64),
    ('ProcessAffinityMask', ctypes.c_uint64),
    ('ProcessHeapFlags', ctypes.c_uint32),
    ('CSDVersion', ctypes.c_uint16),
    ('DependentLoadFlags', ctypes.c_uint16),
    ('EditList', ctypes.c_uint64),
    ('SecurityCookie', ctypes.c_uint64),
    ('SEHandlerTable', ctypes.c_uint64),
    ('SEHandlerCount', ctypes.c_uint64),
    ('GuardCFCheckFunctionPointer', ctypes.c_uint64),
    ('GuardCFDispatchFunctionPointer', ctypes.c_uint64),
    ('GuardCFFunctionTable', ctypes.c_uint64),
    ('GuardCFFunctionCount', ctypes.c_uint64),
    ('GuardFlags', ctypes.c_uint32),
    ('CodeIntegrity', IMAGE_LOAD_CONFIG_CODE_INTEGRITY),
    ('GuardAddressTakenIatEntryTable', ctypes.c_uint64),
    ('GuardAddressTakenIatEntryCount', ctypes.c_uint64),
    ('GuardLongJumpTargetTable', ctypes.c_uint64),
    ('GuardLongJumpTargetCount', ctypes.c_uint64),
    ('DynamicValueRelocTable', ctypes.c_uint64),
    ('CHPEMetadataPointer', ctypes.c_uint64),
    ('GuardRFFailureRoutine', ctypes.c_uint64),
    ('GuardRFFailureRoutineFunctionPointer', ctypes.c_uint64),
    ('DynamicValueRelocTableOffset', ctypes.c_uint32),
    ('DynamicValueRelocTableSection', ctypes.c_uint16),
    ('Reserved2', ctypes.c_uint16),
    ('GuardRFVerifyStackPointerFunctionPointer', ctypes.c_uint64),
    ('HotPatchTableOffset', ctypes.c_uint32),
    ('Reserved3', ctypes.c_uint32),
    ('EnclaveConfigurationPointer', ctypes.c_uint64),
    ('VolatileMetadataPointer', ctypes.c_uint64),
    ('GuardEHContinuationTable', ctypes.c_uint64),
    ('GuardEHContinuationCount', ctypes.c_uint64),
]

IMAGE_LOAD_CONFIG_DIRECTORY64 = struct__IMAGE_LOAD_CONFIG_DIRECTORY64
PIMAGE_LOAD_CONFIG_DIRECTORY64 = ctypes.POINTER(struct__IMAGE_LOAD_CONFIG_DIRECTORY64)
IMAGE_LOAD_CONFIG_DIRECTORY = struct__IMAGE_LOAD_CONFIG_DIRECTORY64
PIMAGE_LOAD_CONFIG_DIRECTORY = ctypes.POINTER(struct__IMAGE_LOAD_CONFIG_DIRECTORY64)
class struct__IMAGE_HOT_PATCH_INFO(Structure):
    pass

struct__IMAGE_HOT_PATCH_INFO._pack_ = 1 # source:False
struct__IMAGE_HOT_PATCH_INFO._fields_ = [
    ('Version', ctypes.c_uint32),
    ('Size', ctypes.c_uint32),
    ('SequenceNumber', ctypes.c_uint32),
    ('BaseImageList', ctypes.c_uint32),
    ('BaseImageCount', ctypes.c_uint32),
    ('BufferOffset', ctypes.c_uint32),
    ('ExtraPatchSize', ctypes.c_uint32),
]

IMAGE_HOT_PATCH_INFO = struct__IMAGE_HOT_PATCH_INFO
PIMAGE_HOT_PATCH_INFO = ctypes.POINTER(struct__IMAGE_HOT_PATCH_INFO)
class struct__IMAGE_HOT_PATCH_BASE(Structure):
    pass

struct__IMAGE_HOT_PATCH_BASE._pack_ = 1 # source:False
struct__IMAGE_HOT_PATCH_BASE._fields_ = [
    ('SequenceNumber', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('OriginalTimeDateStamp', ctypes.c_uint32),
    ('OriginalCheckSum', ctypes.c_uint32),
    ('CodeIntegrityInfo', ctypes.c_uint32),
    ('CodeIntegritySize', ctypes.c_uint32),
    ('PatchTable', ctypes.c_uint32),
    ('BufferOffset', ctypes.c_uint32),
]

IMAGE_HOT_PATCH_BASE = struct__IMAGE_HOT_PATCH_BASE
PIMAGE_HOT_PATCH_BASE = ctypes.POINTER(struct__IMAGE_HOT_PATCH_BASE)
class struct__IMAGE_HOT_PATCH_HASHES(Structure):
    pass

struct__IMAGE_HOT_PATCH_HASHES._pack_ = 1 # source:False
struct__IMAGE_HOT_PATCH_HASHES._fields_ = [
    ('SHA256', ctypes.c_ubyte * 32),
    ('SHA1', ctypes.c_ubyte * 20),
]

IMAGE_HOT_PATCH_HASHES = struct__IMAGE_HOT_PATCH_HASHES
PIMAGE_HOT_PATCH_HASHES = ctypes.POINTER(struct__IMAGE_HOT_PATCH_HASHES)
class struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY(Structure):
    pass

struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY._pack_ = 1 # source:False
struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY._fields_ = [
    ('FuncStart', ctypes.c_uint32),
    ('PrologLen', ctypes.c_uint32, 8),
    ('FuncLen', ctypes.c_uint32, 22),
    ('ThirtyTwoBit', ctypes.c_uint32, 1),
    ('ExceptionFlag', ctypes.c_uint32, 1),
]

IMAGE_CE_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY
PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = ctypes.POINTER(struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY)
class struct__F914DF356338B35978CCEA78F97B3D4F(Structure):
    pass

struct__F914DF356338B35978CCEA78F97B3D4F._pack_ = 1 # source:False
struct__F914DF356338B35978CCEA78F97B3D4F._fields_ = [
    ('Flag', ctypes.c_uint32, 2),
    ('FunctionLength', ctypes.c_uint32, 11),
    ('Ret', ctypes.c_uint32, 2),
    ('H', ctypes.c_uint32, 1),
    ('Reg', ctypes.c_uint32, 3),
    ('R', ctypes.c_uint32, 1),
    ('L', ctypes.c_uint32, 1),
    ('C', ctypes.c_uint32, 1),
    ('StackAdjust', ctypes.c_uint32, 10),
]

class union__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY___40EF8B5EADD7A1EA5B4C64A8F5FEAC1B(Union):
    pass

class struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY___40EF8B5EADD7A1EA5B4C64A8F5FEAC1B_0(Structure):
    pass

struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY___40EF8B5EADD7A1EA5B4C64A8F5FEAC1B_0._pack_ = 1 # source:False
struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY___40EF8B5EADD7A1EA5B4C64A8F5FEAC1B_0._fields_ = [
    ('Flag', ctypes.c_uint32, 2),
    ('FunctionLength', ctypes.c_uint32, 11),
    ('Ret', ctypes.c_uint32, 2),
    ('H', ctypes.c_uint32, 1),
    ('Reg', ctypes.c_uint32, 3),
    ('R', ctypes.c_uint32, 1),
    ('L', ctypes.c_uint32, 1),
    ('C', ctypes.c_uint32, 1),
    ('StackAdjust', ctypes.c_uint32, 10),
]

union__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY___40EF8B5EADD7A1EA5B4C64A8F5FEAC1B._pack_ = 1 # source:False
union__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY___40EF8B5EADD7A1EA5B4C64A8F5FEAC1B._anonymous_ = ('_0',)
union__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY___40EF8B5EADD7A1EA5B4C64A8F5FEAC1B._fields_ = [
    ('UnwindData', ctypes.c_uint32),
    ('_0', struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY___40EF8B5EADD7A1EA5B4C64A8F5FEAC1B_0),
]

class struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY(Structure):
    pass

class union__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_0(Union):
    pass

class struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_0_0(Structure):
    pass

struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_0_0._pack_ = 1 # source:False
struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_0_0._fields_ = [
    ('Flag', ctypes.c_uint32, 2),
    ('FunctionLength', ctypes.c_uint32, 11),
    ('Ret', ctypes.c_uint32, 2),
    ('H', ctypes.c_uint32, 1),
    ('Reg', ctypes.c_uint32, 3),
    ('R', ctypes.c_uint32, 1),
    ('L', ctypes.c_uint32, 1),
    ('C', ctypes.c_uint32, 1),
    ('StackAdjust', ctypes.c_uint32, 10),
]

union__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_0._pack_ = 1 # source:False
union__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_0._anonymous_ = ('_0',)
union__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_0._fields_ = [
    ('UnwindData', ctypes.c_uint32),
    ('_0', struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_0_0),
]

struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY._pack_ = 1 # source:False
struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY._anonymous_ = ('_0',)
struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY._fields_ = [
    ('BeginAddress', ctypes.c_uint32),
    ('_0', union__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_0),
]

IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY
PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY = ctypes.POINTER(struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY)

# values for enumeration 'ARM64_FNPDATA_FLAGS'
ARM64_FNPDATA_FLAGS__enumvalues = {
    0: 'PdataRefToFullXdata',
    1: 'PdataPackedUnwindFunction',
    2: 'PdataPackedUnwindFragment',
}
PdataRefToFullXdata = 0
PdataPackedUnwindFunction = 1
PdataPackedUnwindFragment = 2
ARM64_FNPDATA_FLAGS = ctypes.c_uint32 # enum

# values for enumeration 'ARM64_FNPDATA_CR'
ARM64_FNPDATA_CR__enumvalues = {
    0: 'PdataCrUnchained',
    1: 'PdataCrUnchainedSavedLr',
    2: 'PdataCrChainedWithPac',
    3: 'PdataCrChained',
}
PdataCrUnchained = 0
PdataCrUnchainedSavedLr = 1
PdataCrChainedWithPac = 2
PdataCrChained = 3
ARM64_FNPDATA_CR = ctypes.c_uint32 # enum
class struct__E4A7DBD5A253E3617D685B674E63E69E(Structure):
    pass

struct__E4A7DBD5A253E3617D685B674E63E69E._pack_ = 1 # source:False
struct__E4A7DBD5A253E3617D685B674E63E69E._fields_ = [
    ('Flag', ctypes.c_uint32, 2),
    ('FunctionLength', ctypes.c_uint32, 11),
    ('RegF', ctypes.c_uint32, 3),
    ('RegI', ctypes.c_uint32, 4),
    ('H', ctypes.c_uint32, 1),
    ('CR', ctypes.c_uint32, 2),
    ('FrameSize', ctypes.c_uint32, 9),
]

class union__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY___753D12A4F228928B8D07C64DF63FE1B7(Union):
    pass

class struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY___753D12A4F228928B8D07C64DF63FE1B7_0(Structure):
    pass

struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY___753D12A4F228928B8D07C64DF63FE1B7_0._pack_ = 1 # source:False
struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY___753D12A4F228928B8D07C64DF63FE1B7_0._fields_ = [
    ('Flag', ctypes.c_uint32, 2),
    ('FunctionLength', ctypes.c_uint32, 11),
    ('RegF', ctypes.c_uint32, 3),
    ('RegI', ctypes.c_uint32, 4),
    ('H', ctypes.c_uint32, 1),
    ('CR', ctypes.c_uint32, 2),
    ('FrameSize', ctypes.c_uint32, 9),
]

union__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY___753D12A4F228928B8D07C64DF63FE1B7._pack_ = 1 # source:False
union__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY___753D12A4F228928B8D07C64DF63FE1B7._anonymous_ = ('_0',)
union__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY___753D12A4F228928B8D07C64DF63FE1B7._fields_ = [
    ('UnwindData', ctypes.c_uint32),
    ('_0', struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY___753D12A4F228928B8D07C64DF63FE1B7_0),
]

class struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY(Structure):
    pass

class union__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_0(Union):
    pass

class struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_0_0(Structure):
    pass

struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_0_0._pack_ = 1 # source:False
struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_0_0._fields_ = [
    ('Flag', ctypes.c_uint32, 2),
    ('FunctionLength', ctypes.c_uint32, 11),
    ('RegF', ctypes.c_uint32, 3),
    ('RegI', ctypes.c_uint32, 4),
    ('H', ctypes.c_uint32, 1),
    ('CR', ctypes.c_uint32, 2),
    ('FrameSize', ctypes.c_uint32, 9),
]

union__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_0._pack_ = 1 # source:False
union__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_0._anonymous_ = ('_0',)
union__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_0._fields_ = [
    ('UnwindData', ctypes.c_uint32),
    ('_0', struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_0_0),
]

struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY._pack_ = 1 # source:False
struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY._anonymous_ = ('_0',)
struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY._fields_ = [
    ('BeginAddress', ctypes.c_uint32),
    ('_0', union__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_0),
]

IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY
PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = ctypes.POINTER(struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY)
class struct_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA___E3D3C95A7B50C509F6DC3E4A33151861(Structure):
    pass

struct_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA___E3D3C95A7B50C509F6DC3E4A33151861._pack_ = 1 # source:False
struct_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA___E3D3C95A7B50C509F6DC3E4A33151861._fields_ = [
    ('FunctionLength', ctypes.c_uint32, 18),
    ('Version', ctypes.c_uint32, 2),
    ('ExceptionDataPresent', ctypes.c_uint32, 1),
    ('EpilogInHeader', ctypes.c_uint32, 1),
    ('EpilogCount', ctypes.c_uint32, 5),
    ('CodeWords', ctypes.c_uint32, 5),
]

class union_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA(Union):
    pass

class struct_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_0(Structure):
    pass

struct_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_0._pack_ = 1 # source:False
struct_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_0._fields_ = [
    ('FunctionLength', ctypes.c_uint32, 18),
    ('Version', ctypes.c_uint32, 2),
    ('ExceptionDataPresent', ctypes.c_uint32, 1),
    ('EpilogInHeader', ctypes.c_uint32, 1),
    ('EpilogCount', ctypes.c_uint32, 5),
    ('CodeWords', ctypes.c_uint32, 5),
]

union_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA._pack_ = 1 # source:False
union_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA._anonymous_ = ('_0',)
union_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA._fields_ = [
    ('HeaderData', ctypes.c_uint32),
    ('_0', struct_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_0),
]

class struct__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY(Structure):
    pass

struct__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY._pack_ = 1 # source:False
struct__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY._fields_ = [
    ('BeginAddress', ctypes.c_uint64),
    ('EndAddress', ctypes.c_uint64),
    ('ExceptionHandler', ctypes.c_uint64),
    ('HandlerData', ctypes.c_uint64),
    ('PrologEndAddress', ctypes.c_uint64),
]

IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = ctypes.POINTER(struct__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY)
class struct__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY(Structure):
    pass

struct__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY._pack_ = 1 # source:False
struct__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY._fields_ = [
    ('BeginAddress', ctypes.c_uint32),
    ('EndAddress', ctypes.c_uint32),
    ('ExceptionHandler', ctypes.c_uint32),
    ('HandlerData', ctypes.c_uint32),
    ('PrologEndAddress', ctypes.c_uint32),
]

IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = ctypes.POINTER(struct__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY)
_PIMAGE_RUNTIME_FUNCTION_ENTRY = ctypes.POINTER(struct__IMAGE_RUNTIME_FUNCTION_ENTRY)
IMAGE_IA64_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_RUNTIME_FUNCTION_ENTRY
PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY = ctypes.POINTER(struct__IMAGE_RUNTIME_FUNCTION_ENTRY)
IMAGE_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_RUNTIME_FUNCTION_ENTRY
PIMAGE_RUNTIME_FUNCTION_ENTRY = ctypes.POINTER(struct__IMAGE_RUNTIME_FUNCTION_ENTRY)
class struct__IMAGE_ENCLAVE_CONFIG32(Structure):
    pass

struct__IMAGE_ENCLAVE_CONFIG32._pack_ = 1 # source:False
struct__IMAGE_ENCLAVE_CONFIG32._fields_ = [
    ('Size', ctypes.c_uint32),
    ('MinimumRequiredConfigSize', ctypes.c_uint32),
    ('PolicyFlags', ctypes.c_uint32),
    ('NumberOfImports', ctypes.c_uint32),
    ('ImportList', ctypes.c_uint32),
    ('ImportEntrySize', ctypes.c_uint32),
    ('FamilyID', ctypes.c_ubyte * 16),
    ('ImageID', ctypes.c_ubyte * 16),
    ('ImageVersion', ctypes.c_uint32),
    ('SecurityVersion', ctypes.c_uint32),
    ('EnclaveSize', ctypes.c_uint32),
    ('NumberOfThreads', ctypes.c_uint32),
    ('EnclaveFlags', ctypes.c_uint32),
]

IMAGE_ENCLAVE_CONFIG32 = struct__IMAGE_ENCLAVE_CONFIG32
PIMAGE_ENCLAVE_CONFIG32 = ctypes.POINTER(struct__IMAGE_ENCLAVE_CONFIG32)
class struct__IMAGE_ENCLAVE_CONFIG64(Structure):
    pass

struct__IMAGE_ENCLAVE_CONFIG64._pack_ = 1 # source:False
struct__IMAGE_ENCLAVE_CONFIG64._fields_ = [
    ('Size', ctypes.c_uint32),
    ('MinimumRequiredConfigSize', ctypes.c_uint32),
    ('PolicyFlags', ctypes.c_uint32),
    ('NumberOfImports', ctypes.c_uint32),
    ('ImportList', ctypes.c_uint32),
    ('ImportEntrySize', ctypes.c_uint32),
    ('FamilyID', ctypes.c_ubyte * 16),
    ('ImageID', ctypes.c_ubyte * 16),
    ('ImageVersion', ctypes.c_uint32),
    ('SecurityVersion', ctypes.c_uint32),
    ('EnclaveSize', ctypes.c_uint64),
    ('NumberOfThreads', ctypes.c_uint32),
    ('EnclaveFlags', ctypes.c_uint32),
]

IMAGE_ENCLAVE_CONFIG64 = struct__IMAGE_ENCLAVE_CONFIG64
PIMAGE_ENCLAVE_CONFIG64 = ctypes.POINTER(struct__IMAGE_ENCLAVE_CONFIG64)
IMAGE_ENCLAVE_CONFIG = struct__IMAGE_ENCLAVE_CONFIG64
PIMAGE_ENCLAVE_CONFIG = ctypes.POINTER(struct__IMAGE_ENCLAVE_CONFIG64)
class struct__IMAGE_ENCLAVE_IMPORT(Structure):
    pass

struct__IMAGE_ENCLAVE_IMPORT._pack_ = 1 # source:False
struct__IMAGE_ENCLAVE_IMPORT._fields_ = [
    ('MatchType', ctypes.c_uint32),
    ('MinimumSecurityVersion', ctypes.c_uint32),
    ('UniqueOrAuthorID', ctypes.c_ubyte * 32),
    ('FamilyID', ctypes.c_ubyte * 16),
    ('ImageID', ctypes.c_ubyte * 16),
    ('ImportName', ctypes.c_uint32),
    ('Reserved', ctypes.c_uint32),
]

IMAGE_ENCLAVE_IMPORT = struct__IMAGE_ENCLAVE_IMPORT
PIMAGE_ENCLAVE_IMPORT = ctypes.POINTER(struct__IMAGE_ENCLAVE_IMPORT)
class struct__IMAGE_DEBUG_DIRECTORY(Structure):
    pass

struct__IMAGE_DEBUG_DIRECTORY._pack_ = 1 # source:False
struct__IMAGE_DEBUG_DIRECTORY._fields_ = [
    ('Characteristics', ctypes.c_uint32),
    ('TimeDateStamp', ctypes.c_uint32),
    ('MajorVersion', ctypes.c_uint16),
    ('MinorVersion', ctypes.c_uint16),
    ('Type', ctypes.c_uint32),
    ('SizeOfData', ctypes.c_uint32),
    ('AddressOfRawData', ctypes.c_uint32),
    ('PointerToRawData', ctypes.c_uint32),
]

IMAGE_DEBUG_DIRECTORY = struct__IMAGE_DEBUG_DIRECTORY
PIMAGE_DEBUG_DIRECTORY = ctypes.POINTER(struct__IMAGE_DEBUG_DIRECTORY)
class struct__IMAGE_COFF_SYMBOLS_HEADER(Structure):
    pass

struct__IMAGE_COFF_SYMBOLS_HEADER._pack_ = 1 # source:False
struct__IMAGE_COFF_SYMBOLS_HEADER._fields_ = [
    ('NumberOfSymbols', ctypes.c_uint32),
    ('LvaToFirstSymbol', ctypes.c_uint32),
    ('NumberOfLinenumbers', ctypes.c_uint32),
    ('LvaToFirstLinenumber', ctypes.c_uint32),
    ('RvaToFirstByteOfCode', ctypes.c_uint32),
    ('RvaToLastByteOfCode', ctypes.c_uint32),
    ('RvaToFirstByteOfData', ctypes.c_uint32),
    ('RvaToLastByteOfData', ctypes.c_uint32),
]

IMAGE_COFF_SYMBOLS_HEADER = struct__IMAGE_COFF_SYMBOLS_HEADER
PIMAGE_COFF_SYMBOLS_HEADER = ctypes.POINTER(struct__IMAGE_COFF_SYMBOLS_HEADER)
class struct__FPO_DATA(Structure):
    pass

struct__FPO_DATA._pack_ = 1 # source:False
struct__FPO_DATA._fields_ = [
    ('ulOffStart', ctypes.c_uint32),
    ('cbProcSize', ctypes.c_uint32),
    ('cdwLocals', ctypes.c_uint32),
    ('cdwParams', ctypes.c_uint16),
    ('cbProlog', ctypes.c_uint16, 8),
    ('cbRegs', ctypes.c_uint16, 3),
    ('fHasSEH', ctypes.c_uint16, 1),
    ('fUseBP', ctypes.c_uint16, 1),
    ('reserved', ctypes.c_uint16, 1),
    ('cbFrame', ctypes.c_uint16, 2),
]

FPO_DATA = struct__FPO_DATA
PFPO_DATA = ctypes.POINTER(struct__FPO_DATA)
class struct__IMAGE_DEBUG_MISC(Structure):
    pass

struct__IMAGE_DEBUG_MISC._pack_ = 1 # source:False
struct__IMAGE_DEBUG_MISC._fields_ = [
    ('DataType', ctypes.c_uint32),
    ('Length', ctypes.c_uint32),
    ('Unicode', ctypes.c_ubyte),
    ('Reserved', ctypes.c_ubyte * 3),
    ('Data', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

IMAGE_DEBUG_MISC = struct__IMAGE_DEBUG_MISC
PIMAGE_DEBUG_MISC = ctypes.POINTER(struct__IMAGE_DEBUG_MISC)
class struct__IMAGE_FUNCTION_ENTRY(Structure):
    pass

struct__IMAGE_FUNCTION_ENTRY._pack_ = 1 # source:False
struct__IMAGE_FUNCTION_ENTRY._fields_ = [
    ('StartingAddress', ctypes.c_uint32),
    ('EndingAddress', ctypes.c_uint32),
    ('EndOfPrologue', ctypes.c_uint32),
]

IMAGE_FUNCTION_ENTRY = struct__IMAGE_FUNCTION_ENTRY
PIMAGE_FUNCTION_ENTRY = ctypes.POINTER(struct__IMAGE_FUNCTION_ENTRY)
class union__IMAGE_FUNCTION_ENTRY64___3D77D7EA71DF37DBAEF11B4582D443AA(Union):
    pass

union__IMAGE_FUNCTION_ENTRY64___3D77D7EA71DF37DBAEF11B4582D443AA._pack_ = 1 # source:False
union__IMAGE_FUNCTION_ENTRY64___3D77D7EA71DF37DBAEF11B4582D443AA._fields_ = [
    ('EndOfPrologue', ctypes.c_uint64),
    ('UnwindInfoAddress', ctypes.c_uint64),
]

class struct__IMAGE_FUNCTION_ENTRY64(Structure):
    pass

class union__IMAGE_FUNCTION_ENTRY64_0(Union):
    pass

union__IMAGE_FUNCTION_ENTRY64_0._pack_ = 1 # source:False
union__IMAGE_FUNCTION_ENTRY64_0._fields_ = [
    ('EndOfPrologue', ctypes.c_uint64),
    ('UnwindInfoAddress', ctypes.c_uint64),
]

struct__IMAGE_FUNCTION_ENTRY64._pack_ = 1 # source:False
struct__IMAGE_FUNCTION_ENTRY64._anonymous_ = ('_0',)
struct__IMAGE_FUNCTION_ENTRY64._fields_ = [
    ('StartingAddress', ctypes.c_uint64),
    ('EndingAddress', ctypes.c_uint64),
    ('_0', union__IMAGE_FUNCTION_ENTRY64_0),
]

IMAGE_FUNCTION_ENTRY64 = struct__IMAGE_FUNCTION_ENTRY64
PIMAGE_FUNCTION_ENTRY64 = ctypes.POINTER(struct__IMAGE_FUNCTION_ENTRY64)
class struct__IMAGE_SEPARATE_DEBUG_HEADER(Structure):
    pass

struct__IMAGE_SEPARATE_DEBUG_HEADER._pack_ = 1 # source:False
struct__IMAGE_SEPARATE_DEBUG_HEADER._fields_ = [
    ('Signature', ctypes.c_uint16),
    ('Flags', ctypes.c_uint16),
    ('Machine', ctypes.c_uint16),
    ('Characteristics', ctypes.c_uint16),
    ('TimeDateStamp', ctypes.c_uint32),
    ('CheckSum', ctypes.c_uint32),
    ('ImageBase', ctypes.c_uint32),
    ('SizeOfImage', ctypes.c_uint32),
    ('NumberOfSections', ctypes.c_uint32),
    ('ExportedNamesSize', ctypes.c_uint32),
    ('DebugDirectorySize', ctypes.c_uint32),
    ('SectionAlignment', ctypes.c_uint32),
    ('Reserved', ctypes.c_uint32 * 2),
]

IMAGE_SEPARATE_DEBUG_HEADER = struct__IMAGE_SEPARATE_DEBUG_HEADER
PIMAGE_SEPARATE_DEBUG_HEADER = ctypes.POINTER(struct__IMAGE_SEPARATE_DEBUG_HEADER)
class struct__NON_PAGED_DEBUG_INFO(Structure):
    pass

struct__NON_PAGED_DEBUG_INFO._pack_ = 1 # source:False
struct__NON_PAGED_DEBUG_INFO._fields_ = [
    ('Signature', ctypes.c_uint16),
    ('Flags', ctypes.c_uint16),
    ('Size', ctypes.c_uint32),
    ('Machine', ctypes.c_uint16),
    ('Characteristics', ctypes.c_uint16),
    ('TimeDateStamp', ctypes.c_uint32),
    ('CheckSum', ctypes.c_uint32),
    ('SizeOfImage', ctypes.c_uint32),
    ('ImageBase', ctypes.c_uint64),
]

NON_PAGED_DEBUG_INFO = struct__NON_PAGED_DEBUG_INFO
PNON_PAGED_DEBUG_INFO = ctypes.POINTER(struct__NON_PAGED_DEBUG_INFO)
class struct__ImageArchitectureHeader(Structure):
    pass

struct__ImageArchitectureHeader._pack_ = 1 # source:False
struct__ImageArchitectureHeader._fields_ = [
    ('AmaskValue', ctypes.c_uint32, 1),
    ('_1', ctypes.c_uint32, 7),
    ('AmaskShift', ctypes.c_uint32, 8),
    ('_3', ctypes.c_uint32, 16),
    ('FirstEntryRVA', ctypes.c_uint32),
]

IMAGE_ARCHITECTURE_HEADER = struct__ImageArchitectureHeader
PIMAGE_ARCHITECTURE_HEADER = ctypes.POINTER(struct__ImageArchitectureHeader)
class struct__ImageArchitectureEntry(Structure):
    pass

struct__ImageArchitectureEntry._pack_ = 1 # source:False
struct__ImageArchitectureEntry._fields_ = [
    ('FixupInstRVA', ctypes.c_uint32),
    ('NewInst', ctypes.c_uint32),
]

IMAGE_ARCHITECTURE_ENTRY = struct__ImageArchitectureEntry
PIMAGE_ARCHITECTURE_ENTRY = ctypes.POINTER(struct__ImageArchitectureEntry)
class union_IMPORT_OBJECT_HEADER___F13446938FF52D319F41757B924F73DA(Union):
    pass

union_IMPORT_OBJECT_HEADER___F13446938FF52D319F41757B924F73DA._pack_ = 1 # source:False
union_IMPORT_OBJECT_HEADER___F13446938FF52D319F41757B924F73DA._fields_ = [
    ('Ordinal', ctypes.c_uint16),
    ('Hint', ctypes.c_uint16),
]

class struct_IMPORT_OBJECT_HEADER(Structure):
    pass

class union_IMPORT_OBJECT_HEADER_0(Union):
    pass

union_IMPORT_OBJECT_HEADER_0._pack_ = 1 # source:False
union_IMPORT_OBJECT_HEADER_0._fields_ = [
    ('Ordinal', ctypes.c_uint16),
    ('Hint', ctypes.c_uint16),
]

struct_IMPORT_OBJECT_HEADER._pack_ = 1 # source:False
struct_IMPORT_OBJECT_HEADER._anonymous_ = ('_0',)
struct_IMPORT_OBJECT_HEADER._fields_ = [
    ('Sig1', ctypes.c_uint16),
    ('Sig2', ctypes.c_uint16),
    ('Version', ctypes.c_uint16),
    ('Machine', ctypes.c_uint16),
    ('TimeDateStamp', ctypes.c_uint32),
    ('SizeOfData', ctypes.c_uint32),
    ('_0', union_IMPORT_OBJECT_HEADER_0),
    ('Type', ctypes.c_uint16, 2),
    ('NameType', ctypes.c_uint16, 3),
    ('Reserved', ctypes.c_uint16, 11),
]


# values for enumeration 'IMPORT_OBJECT_TYPE'
IMPORT_OBJECT_TYPE__enumvalues = {
    0: 'IMPORT_OBJECT_CODE',
    1: 'IMPORT_OBJECT_DATA',
    2: 'IMPORT_OBJECT_CONST',
}
IMPORT_OBJECT_CODE = 0
IMPORT_OBJECT_DATA = 1
IMPORT_OBJECT_CONST = 2
IMPORT_OBJECT_TYPE = ctypes.c_uint32 # enum

# values for enumeration 'IMPORT_OBJECT_NAME_TYPE'
IMPORT_OBJECT_NAME_TYPE__enumvalues = {
    0: 'IMPORT_OBJECT_ORDINAL',
    1: 'IMPORT_OBJECT_NAME',
    2: 'IMPORT_OBJECT_NAME_NO_PREFIX',
    3: 'IMPORT_OBJECT_NAME_UNDECORATE',
    4: 'IMPORT_OBJECT_NAME_EXPORTAS',
}
IMPORT_OBJECT_ORDINAL = 0
IMPORT_OBJECT_NAME = 1
IMPORT_OBJECT_NAME_NO_PREFIX = 2
IMPORT_OBJECT_NAME_UNDECORATE = 3
IMPORT_OBJECT_NAME_EXPORTAS = 4
IMPORT_OBJECT_NAME_TYPE = ctypes.c_uint32 # enum

# values for enumeration 'ReplacesCorHdrNumericDefines'
ReplacesCorHdrNumericDefines__enumvalues = {
    1: 'COMIMAGE_FLAGS_ILONLY',
    2: 'COMIMAGE_FLAGS_32BITREQUIRED',
    4: 'COMIMAGE_FLAGS_IL_LIBRARY',
    8: 'COMIMAGE_FLAGS_STRONGNAMESIGNED',
    16: 'COMIMAGE_FLAGS_NATIVE_ENTRYPOINT',
    65536: 'COMIMAGE_FLAGS_TRACKDEBUGDATA',
    131072: 'COMIMAGE_FLAGS_32BITPREFERRED',
    2: 'COR_VERSION_MAJOR_V2',
    2: 'COR_VERSION_MAJOR',
    5: 'COR_VERSION_MINOR',
    8: 'COR_DELETED_NAME_LENGTH',
    8: 'COR_VTABLEGAP_NAME_LENGTH',
    1: 'NATIVE_TYPE_MAX_CB',
    255: 'COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE',
    1: 'IMAGE_COR_MIH_METHODRVA',
    2: 'IMAGE_COR_MIH_EHRVA',
    8: 'IMAGE_COR_MIH_BASICBLOCK',
    1: 'COR_VTABLE_32BIT',
    2: 'COR_VTABLE_64BIT',
    4: 'COR_VTABLE_FROM_UNMANAGED',
    8: 'COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN',
    16: 'COR_VTABLE_CALL_MOST_DERIVED',
    32: 'IMAGE_COR_EATJ_THUNK_SIZE',
    1024: 'MAX_CLASS_NAME',
    1024: 'MAX_PACKAGE_NAME',
}
COMIMAGE_FLAGS_ILONLY = 1
COMIMAGE_FLAGS_32BITREQUIRED = 2
COMIMAGE_FLAGS_IL_LIBRARY = 4
COMIMAGE_FLAGS_STRONGNAMESIGNED = 8
COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16
COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536
COMIMAGE_FLAGS_32BITPREFERRED = 131072
COR_VERSION_MAJOR_V2 = 2
COR_VERSION_MAJOR = 2
COR_VERSION_MINOR = 5
COR_DELETED_NAME_LENGTH = 8
COR_VTABLEGAP_NAME_LENGTH = 8
NATIVE_TYPE_MAX_CB = 1
COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255
IMAGE_COR_MIH_METHODRVA = 1
IMAGE_COR_MIH_EHRVA = 2
IMAGE_COR_MIH_BASICBLOCK = 8
COR_VTABLE_32BIT = 1
COR_VTABLE_64BIT = 2
COR_VTABLE_FROM_UNMANAGED = 4
COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8
COR_VTABLE_CALL_MOST_DERIVED = 16
IMAGE_COR_EATJ_THUNK_SIZE = 32
MAX_CLASS_NAME = 1024
MAX_PACKAGE_NAME = 1024
ReplacesCorHdrNumericDefines = ctypes.c_uint32 # enum
class union_IMAGE_COR20_HEADER___E1FE6205D93F2F82192FEC2E33E07792(Union):
    pass

union_IMAGE_COR20_HEADER___E1FE6205D93F2F82192FEC2E33E07792._pack_ = 1 # source:False
union_IMAGE_COR20_HEADER___E1FE6205D93F2F82192FEC2E33E07792._fields_ = [
    ('EntryPointToken', ctypes.c_uint32),
    ('EntryPointRVA', ctypes.c_uint32),
]

class struct_IMAGE_COR20_HEADER(Structure):
    pass

class union_IMAGE_COR20_HEADER_0(Union):
    pass

union_IMAGE_COR20_HEADER_0._pack_ = 1 # source:False
union_IMAGE_COR20_HEADER_0._fields_ = [
    ('EntryPointToken', ctypes.c_uint32),
    ('EntryPointRVA', ctypes.c_uint32),
]

struct_IMAGE_COR20_HEADER._pack_ = 1 # source:False
struct_IMAGE_COR20_HEADER._anonymous_ = ('_0',)
struct_IMAGE_COR20_HEADER._fields_ = [
    ('cb', ctypes.c_uint32),
    ('MajorRuntimeVersion', ctypes.c_uint16),
    ('MinorRuntimeVersion', ctypes.c_uint16),
    ('MetaData', IMAGE_DATA_DIRECTORY),
    ('Flags', ctypes.c_uint32),
    ('_0', union_IMAGE_COR20_HEADER_0),
    ('Resources', IMAGE_DATA_DIRECTORY),
    ('StrongNameSignature', IMAGE_DATA_DIRECTORY),
    ('CodeManagerTable', IMAGE_DATA_DIRECTORY),
    ('VTableFixups', IMAGE_DATA_DIRECTORY),
    ('ExportAddressTableJumps', IMAGE_DATA_DIRECTORY),
    ('ManagedNativeHeader', IMAGE_DATA_DIRECTORY),
]

PIMAGE_COR20_HEADER = ctypes.POINTER(struct_IMAGE_COR20_HEADER)
class struct__SLIST_ENTRY(Structure):
    pass

struct__SLIST_ENTRY._pack_ = 1 # source:False
struct__SLIST_ENTRY._fields_ = [
    ('Next', ctypes.POINTER(struct__SLIST_ENTRY)),
]

SLIST_ENTRY = struct__SLIST_ENTRY
PSLIST_ENTRY = ctypes.POINTER(struct__SLIST_ENTRY)
class struct__SLIST_HEADER___58A6F92BB08CDF4126C396F1D5AF624E(Structure):
    pass

struct__SLIST_HEADER___58A6F92BB08CDF4126C396F1D5AF624E._pack_ = 1 # source:False
struct__SLIST_HEADER___58A6F92BB08CDF4126C396F1D5AF624E._fields_ = [
    ('Alignment', ctypes.c_uint64),
    ('Region', ctypes.c_uint64),
]

class struct__SLIST_HEADER___F9F9EB832D628D73E611400623F67F2B(Structure):
    pass

struct__SLIST_HEADER___F9F9EB832D628D73E611400623F67F2B._pack_ = 1 # source:False
struct__SLIST_HEADER___F9F9EB832D628D73E611400623F67F2B._fields_ = [
    ('Depth', ctypes.c_uint64, 16),
    ('Sequence', ctypes.c_uint64, 48),
    ('Reserved', ctypes.c_uint64, 4),
    ('NextEntry', ctypes.c_uint64, 60),
]

class union__SLIST_HEADER(Union):
    pass

class struct__SLIST_HEADER_0(Structure):
    pass

struct__SLIST_HEADER_0._pack_ = 1 # source:False
struct__SLIST_HEADER_0._fields_ = [
    ('Alignment', ctypes.c_uint64),
    ('Region', ctypes.c_uint64),
]

union__SLIST_HEADER._pack_ = 1 # source:False
union__SLIST_HEADER._anonymous_ = ('_0',)
union__SLIST_HEADER._fields_ = [
    ('_0', struct__SLIST_HEADER_0),
    ('HeaderX64', struct__SLIST_HEADER___F9F9EB832D628D73E611400623F67F2B),
]

SLIST_HEADER = union__SLIST_HEADER
PSLIST_HEADER = ctypes.POINTER(union__SLIST_HEADER)
class union__RTL_RUN_ONCE(Union):
    pass

union__RTL_RUN_ONCE._pack_ = 1 # source:False
union__RTL_RUN_ONCE._fields_ = [
    ('Ptr', ctypes.POINTER(None)),
]

RTL_RUN_ONCE = union__RTL_RUN_ONCE
PRTL_RUN_ONCE = ctypes.POINTER(union__RTL_RUN_ONCE)
class struct__RTL_BARRIER(Structure):
    pass

struct__RTL_BARRIER._pack_ = 1 # source:False
struct__RTL_BARRIER._fields_ = [
    ('Reserved1', ctypes.c_uint32),
    ('Reserved2', ctypes.c_uint32),
    ('Reserved3', ctypes.c_uint64 * 2),
    ('Reserved4', ctypes.c_uint32),
    ('Reserved5', ctypes.c_uint32),
]

RTL_BARRIER = struct__RTL_BARRIER
PRTL_BARRIER = ctypes.POINTER(struct__RTL_BARRIER)
class struct__MESSAGE_RESOURCE_ENTRY(Structure):
    pass

struct__MESSAGE_RESOURCE_ENTRY._pack_ = 1 # source:False
struct__MESSAGE_RESOURCE_ENTRY._fields_ = [
    ('Length', ctypes.c_uint16),
    ('Flags', ctypes.c_uint16),
    ('Text', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte),
]

MESSAGE_RESOURCE_ENTRY = struct__MESSAGE_RESOURCE_ENTRY
PMESSAGE_RESOURCE_ENTRY = ctypes.POINTER(struct__MESSAGE_RESOURCE_ENTRY)
class struct__MESSAGE_RESOURCE_BLOCK(Structure):
    pass

struct__MESSAGE_RESOURCE_BLOCK._pack_ = 1 # source:False
struct__MESSAGE_RESOURCE_BLOCK._fields_ = [
    ('LowId', ctypes.c_uint32),
    ('HighId', ctypes.c_uint32),
    ('OffsetToEntries', ctypes.c_uint32),
]

MESSAGE_RESOURCE_BLOCK = struct__MESSAGE_RESOURCE_BLOCK
PMESSAGE_RESOURCE_BLOCK = ctypes.POINTER(struct__MESSAGE_RESOURCE_BLOCK)
class struct__MESSAGE_RESOURCE_DATA(Structure):
    pass

struct__MESSAGE_RESOURCE_DATA._pack_ = 1 # source:False
struct__MESSAGE_RESOURCE_DATA._fields_ = [
    ('NumberOfBlocks', ctypes.c_uint32),
    ('Blocks', struct__MESSAGE_RESOURCE_BLOCK * 1),
]

MESSAGE_RESOURCE_DATA = struct__MESSAGE_RESOURCE_DATA
PMESSAGE_RESOURCE_DATA = ctypes.POINTER(struct__MESSAGE_RESOURCE_DATA)
class struct__OSVERSIONINFOA(Structure):
    pass

struct__OSVERSIONINFOA._pack_ = 1 # source:False
struct__OSVERSIONINFOA._fields_ = [
    ('dwOSVersionInfoSize', ctypes.c_uint32),
    ('dwMajorVersion', ctypes.c_uint32),
    ('dwMinorVersion', ctypes.c_uint32),
    ('dwBuildNumber', ctypes.c_uint32),
    ('dwPlatformId', ctypes.c_uint32),
    ('szCSDVersion', ctypes.c_char * 128),
]

OSVERSIONINFOA = struct__OSVERSIONINFOA
POSVERSIONINFOA = ctypes.POINTER(struct__OSVERSIONINFOA)
LPOSVERSIONINFOA = ctypes.POINTER(struct__OSVERSIONINFOA)
class struct__OSVERSIONINFOW(Structure):
    pass

struct__OSVERSIONINFOW._pack_ = 1 # source:False
struct__OSVERSIONINFOW._fields_ = [
    ('dwOSVersionInfoSize', ctypes.c_uint32),
    ('dwMajorVersion', ctypes.c_uint32),
    ('dwMinorVersion', ctypes.c_uint32),
    ('dwBuildNumber', ctypes.c_uint32),
    ('dwPlatformId', ctypes.c_uint32),
    ('szCSDVersion', ctypes.c_int16 * 128),
]

OSVERSIONINFOW = struct__OSVERSIONINFOW
POSVERSIONINFOW = ctypes.POINTER(struct__OSVERSIONINFOW)
LPOSVERSIONINFOW = ctypes.POINTER(struct__OSVERSIONINFOW)
RTL_OSVERSIONINFOW = struct__OSVERSIONINFOW
PRTL_OSVERSIONINFOW = ctypes.POINTER(struct__OSVERSIONINFOW)
OSVERSIONINFO = struct__OSVERSIONINFOA
POSVERSIONINFO = ctypes.POINTER(struct__OSVERSIONINFOA)
LPOSVERSIONINFO = ctypes.POINTER(struct__OSVERSIONINFOA)
class struct__OSVERSIONINFOEXA(Structure):
    pass

struct__OSVERSIONINFOEXA._pack_ = 1 # source:False
struct__OSVERSIONINFOEXA._fields_ = [
    ('dwOSVersionInfoSize', ctypes.c_uint32),
    ('dwMajorVersion', ctypes.c_uint32),
    ('dwMinorVersion', ctypes.c_uint32),
    ('dwBuildNumber', ctypes.c_uint32),
    ('dwPlatformId', ctypes.c_uint32),
    ('szCSDVersion', ctypes.c_char * 128),
    ('wServicePackMajor', ctypes.c_uint16),
    ('wServicePackMinor', ctypes.c_uint16),
    ('wSuiteMask', ctypes.c_uint16),
    ('wProductType', ctypes.c_ubyte),
    ('wReserved', ctypes.c_ubyte),
]

OSVERSIONINFOEXA = struct__OSVERSIONINFOEXA
POSVERSIONINFOEXA = ctypes.POINTER(struct__OSVERSIONINFOEXA)
LPOSVERSIONINFOEXA = ctypes.POINTER(struct__OSVERSIONINFOEXA)
class struct__OSVERSIONINFOEXW(Structure):
    pass

struct__OSVERSIONINFOEXW._pack_ = 1 # source:False
struct__OSVERSIONINFOEXW._fields_ = [
    ('dwOSVersionInfoSize', ctypes.c_uint32),
    ('dwMajorVersion', ctypes.c_uint32),
    ('dwMinorVersion', ctypes.c_uint32),
    ('dwBuildNumber', ctypes.c_uint32),
    ('dwPlatformId', ctypes.c_uint32),
    ('szCSDVersion', ctypes.c_int16 * 128),
    ('wServicePackMajor', ctypes.c_uint16),
    ('wServicePackMinor', ctypes.c_uint16),
    ('wSuiteMask', ctypes.c_uint16),
    ('wProductType', ctypes.c_ubyte),
    ('wReserved', ctypes.c_ubyte),
]

OSVERSIONINFOEXW = struct__OSVERSIONINFOEXW
POSVERSIONINFOEXW = ctypes.POINTER(struct__OSVERSIONINFOEXW)
LPOSVERSIONINFOEXW = ctypes.POINTER(struct__OSVERSIONINFOEXW)
RTL_OSVERSIONINFOEXW = struct__OSVERSIONINFOEXW
PRTL_OSVERSIONINFOEXW = ctypes.POINTER(struct__OSVERSIONINFOEXW)
OSVERSIONINFOEX = struct__OSVERSIONINFOEXA
POSVERSIONINFOEX = ctypes.POINTER(struct__OSVERSIONINFOEXA)
LPOSVERSIONINFOEX = ctypes.POINTER(struct__OSVERSIONINFOEXA)

# values for enumeration '_RTL_UMS_THREAD_INFO_CLASS'
_RTL_UMS_THREAD_INFO_CLASS__enumvalues = {
    0: 'UmsThreadInvalidInfoClass',
    1: 'UmsThreadUserContext',
    2: 'UmsThreadPriority',
    3: 'UmsThreadAffinity',
    4: 'UmsThreadTeb',
    5: 'UmsThreadIsSuspended',
    6: 'UmsThreadIsTerminated',
    7: 'UmsThreadMaxInfoClass',
}
UmsThreadInvalidInfoClass = 0
UmsThreadUserContext = 1
UmsThreadPriority = 2
UmsThreadAffinity = 3
UmsThreadTeb = 4
UmsThreadIsSuspended = 5
UmsThreadIsTerminated = 6
UmsThreadMaxInfoClass = 7
_RTL_UMS_THREAD_INFO_CLASS = ctypes.c_uint32 # enum
RTL_UMS_THREAD_INFO_CLASS = _RTL_UMS_THREAD_INFO_CLASS
RTL_UMS_THREAD_INFO_CLASS__enumvalues = _RTL_UMS_THREAD_INFO_CLASS__enumvalues
PRTL_UMS_THREAD_INFO_CLASS = ctypes.POINTER(_RTL_UMS_THREAD_INFO_CLASS)

# values for enumeration '_RTL_UMS_SCHEDULER_REASON'
_RTL_UMS_SCHEDULER_REASON__enumvalues = {
    0: 'UmsSchedulerStartup',
    1: 'UmsSchedulerThreadBlocked',
    2: 'UmsSchedulerThreadYield',
}
UmsSchedulerStartup = 0
UmsSchedulerThreadBlocked = 1
UmsSchedulerThreadYield = 2
_RTL_UMS_SCHEDULER_REASON = ctypes.c_uint32 # enum
RTL_UMS_SCHEDULER_REASON = _RTL_UMS_SCHEDULER_REASON
RTL_UMS_SCHEDULER_REASON__enumvalues = _RTL_UMS_SCHEDULER_REASON__enumvalues
PRTL_UMS_SCHEDULER_REASON = ctypes.POINTER(_RTL_UMS_SCHEDULER_REASON)
_E937256249A7FF14986945CD2F539EE0 = ctypes.CFUNCTYPE(None, _RTL_UMS_SCHEDULER_REASON, ctypes.c_uint64, ctypes.POINTER(None))
PRTL_UMS_SCHEDULER_ENTRY_POINT = ctypes.CFUNCTYPE(None, _RTL_UMS_SCHEDULER_REASON, ctypes.c_uint64, ctypes.POINTER(None))

# values for enumeration '_OS_DEPLOYEMENT_STATE_VALUES'
_OS_DEPLOYEMENT_STATE_VALUES__enumvalues = {
    1: 'OS_DEPLOYMENT_STANDARD',
    2: 'OS_DEPLOYMENT_COMPACT',
}
OS_DEPLOYMENT_STANDARD = 1
OS_DEPLOYMENT_COMPACT = 2
_OS_DEPLOYEMENT_STATE_VALUES = ctypes.c_uint32 # enum
OS_DEPLOYEMENT_STATE_VALUES = _OS_DEPLOYEMENT_STATE_VALUES
OS_DEPLOYEMENT_STATE_VALUES__enumvalues = _OS_DEPLOYEMENT_STATE_VALUES__enumvalues
class struct__NV_MEMORY_RANGE(Structure):
    pass

struct__NV_MEMORY_RANGE._pack_ = 1 # source:False
struct__NV_MEMORY_RANGE._fields_ = [
    ('BaseAddress', ctypes.POINTER(None)),
    ('Length', ctypes.c_uint64),
]

NV_MEMORY_RANGE = struct__NV_MEMORY_RANGE
PNV_MEMORY_RANGE = ctypes.POINTER(struct__NV_MEMORY_RANGE)
class struct_CORRELATION_VECTOR(Structure):
    pass

struct_CORRELATION_VECTOR._pack_ = 1 # source:False
struct_CORRELATION_VECTOR._fields_ = [
    ('Version', ctypes.c_char),
    ('Vector', ctypes.c_char * 129),
]

PCORRELATION_VECTOR = ctypes.POINTER(struct_CORRELATION_VECTOR)
class struct__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG(Structure):
    pass

struct__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG._pack_ = 1 # source:False
struct__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG._fields_ = [
    ('Size', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('TriggerId', ctypes.POINTER(ctypes.c_int16)),
]

CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = struct__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = ctypes.POINTER(struct__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG)

# values for enumeration '_IMAGE_POLICY_ENTRY_TYPE'
_IMAGE_POLICY_ENTRY_TYPE__enumvalues = {
    0: 'ImagePolicyEntryTypeNone',
    1: 'ImagePolicyEntryTypeBool',
    2: 'ImagePolicyEntryTypeInt8',
    3: 'ImagePolicyEntryTypeUInt8',
    4: 'ImagePolicyEntryTypeInt16',
    5: 'ImagePolicyEntryTypeUInt16',
    6: 'ImagePolicyEntryTypeInt32',
    7: 'ImagePolicyEntryTypeUInt32',
    8: 'ImagePolicyEntryTypeInt64',
    9: 'ImagePolicyEntryTypeUInt64',
    10: 'ImagePolicyEntryTypeAnsiString',
    11: 'ImagePolicyEntryTypeUnicodeString',
    12: 'ImagePolicyEntryTypeOverride',
    13: 'ImagePolicyEntryTypeMaximum',
}
ImagePolicyEntryTypeNone = 0
ImagePolicyEntryTypeBool = 1
ImagePolicyEntryTypeInt8 = 2
ImagePolicyEntryTypeUInt8 = 3
ImagePolicyEntryTypeInt16 = 4
ImagePolicyEntryTypeUInt16 = 5
ImagePolicyEntryTypeInt32 = 6
ImagePolicyEntryTypeUInt32 = 7
ImagePolicyEntryTypeInt64 = 8
ImagePolicyEntryTypeUInt64 = 9
ImagePolicyEntryTypeAnsiString = 10
ImagePolicyEntryTypeUnicodeString = 11
ImagePolicyEntryTypeOverride = 12
ImagePolicyEntryTypeMaximum = 13
_IMAGE_POLICY_ENTRY_TYPE = ctypes.c_uint32 # enum
IMAGE_POLICY_ENTRY_TYPE = _IMAGE_POLICY_ENTRY_TYPE
IMAGE_POLICY_ENTRY_TYPE__enumvalues = _IMAGE_POLICY_ENTRY_TYPE__enumvalues

# values for enumeration '_IMAGE_POLICY_ID'
_IMAGE_POLICY_ID__enumvalues = {
    0: 'ImagePolicyIdNone',
    1: 'ImagePolicyIdEtw',
    2: 'ImagePolicyIdDebug',
    3: 'ImagePolicyIdCrashDump',
    4: 'ImagePolicyIdCrashDumpKey',
    5: 'ImagePolicyIdCrashDumpKeyGuid',
    6: 'ImagePolicyIdParentSd',
    7: 'ImagePolicyIdParentSdRev',
    8: 'ImagePolicyIdSvn',
    9: 'ImagePolicyIdDeviceId',
    10: 'ImagePolicyIdCapability',
    11: 'ImagePolicyIdScenarioId',
    12: 'ImagePolicyIdMaximum',
}
ImagePolicyIdNone = 0
ImagePolicyIdEtw = 1
ImagePolicyIdDebug = 2
ImagePolicyIdCrashDump = 3
ImagePolicyIdCrashDumpKey = 4
ImagePolicyIdCrashDumpKeyGuid = 5
ImagePolicyIdParentSd = 6
ImagePolicyIdParentSdRev = 7
ImagePolicyIdSvn = 8
ImagePolicyIdDeviceId = 9
ImagePolicyIdCapability = 10
ImagePolicyIdScenarioId = 11
ImagePolicyIdMaximum = 12
_IMAGE_POLICY_ID = ctypes.c_uint32 # enum
IMAGE_POLICY_ID = _IMAGE_POLICY_ID
IMAGE_POLICY_ID__enumvalues = _IMAGE_POLICY_ID__enumvalues
class union__IMAGE_POLICY_ENTRY___3C333738E8F6485347B0F0631B642D30(Union):
    pass

union__IMAGE_POLICY_ENTRY___3C333738E8F6485347B0F0631B642D30._pack_ = 1 # source:False
union__IMAGE_POLICY_ENTRY___3C333738E8F6485347B0F0631B642D30._fields_ = [
    ('None', ctypes.POINTER(None)),
    ('BoolValue', ctypes.c_ubyte),
    ('Int8Value', ctypes.c_char),
    ('UInt8Value', ctypes.c_ubyte),
    ('Int16Value', ctypes.c_int16),
    ('UInt16Value', ctypes.c_uint16),
    ('Int32Value', ctypes.c_int32),
    ('UInt32Value', ctypes.c_uint32),
    ('Int64Value', ctypes.c_int64),
    ('UInt64Value', ctypes.c_uint64),
    ('AnsiStringValue', ctypes.POINTER(ctypes.c_char)),
    ('UnicodeStringValue', ctypes.POINTER(ctypes.c_int16)),
]

class struct__IMAGE_POLICY_ENTRY(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Type', IMAGE_POLICY_ENTRY_TYPE),
    ('PolicyId', IMAGE_POLICY_ID),
    ('u', union__IMAGE_POLICY_ENTRY___3C333738E8F6485347B0F0631B642D30),
     ]

IMAGE_POLICY_ENTRY = struct__IMAGE_POLICY_ENTRY
PCIMAGE_POLICY_ENTRY = ctypes.POINTER(struct__IMAGE_POLICY_ENTRY)
class struct__IMAGE_POLICY_METADATA(Structure):
    pass

struct__IMAGE_POLICY_METADATA._pack_ = 1 # source:False
struct__IMAGE_POLICY_METADATA._fields_ = [
    ('Version', ctypes.c_ubyte),
    ('Reserved0', ctypes.c_ubyte * 7),
    ('ApplicationId', ctypes.c_uint64),
]

IMAGE_POLICY_METADATA = struct__IMAGE_POLICY_METADATA
PCIMAGE_POLICY_METADATA = ctypes.POINTER(struct__IMAGE_POLICY_METADATA)
class struct__RTL_CRITICAL_SECTION_DEBUG(Structure):
    pass

class struct__RTL_CRITICAL_SECTION(Structure):
    pass

struct__RTL_CRITICAL_SECTION_DEBUG._pack_ = 1 # source:False
struct__RTL_CRITICAL_SECTION_DEBUG._fields_ = [
    ('Type', ctypes.c_uint16),
    ('CreatorBackTraceIndex', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('CriticalSection', ctypes.POINTER(struct__RTL_CRITICAL_SECTION)),
    ('ProcessLocksList', LIST_ENTRY),
    ('EntryCount', ctypes.c_uint32),
    ('ContentionCount', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('CreatorBackTraceIndexHigh', ctypes.c_uint16),
    ('SpareWORD', ctypes.c_uint16),
]

PRTL_CRITICAL_SECTION_DEBUG = ctypes.POINTER(struct__RTL_CRITICAL_SECTION_DEBUG)
RTL_CRITICAL_SECTION_DEBUG = struct__RTL_CRITICAL_SECTION_DEBUG
RTL_RESOURCE_DEBUG = struct__RTL_CRITICAL_SECTION_DEBUG
PRTL_RESOURCE_DEBUG = ctypes.POINTER(struct__RTL_CRITICAL_SECTION_DEBUG)
struct__RTL_CRITICAL_SECTION._pack_ = 1 # source:False
struct__RTL_CRITICAL_SECTION._fields_ = [
    ('DebugInfo', ctypes.POINTER(struct__RTL_CRITICAL_SECTION_DEBUG)),
    ('LockCount', ctypes.c_int32),
    ('RecursionCount', ctypes.c_int32),
    ('OwningThread', ctypes.POINTER(None)),
    ('LockSemaphore', ctypes.POINTER(None)),
    ('SpinCount', ctypes.c_uint64),
]

RTL_CRITICAL_SECTION = struct__RTL_CRITICAL_SECTION
PRTL_CRITICAL_SECTION = ctypes.POINTER(struct__RTL_CRITICAL_SECTION)
class struct__RTL_SRWLOCK(Structure):
    pass

struct__RTL_SRWLOCK._pack_ = 1 # source:False
struct__RTL_SRWLOCK._fields_ = [
    ('Ptr', ctypes.POINTER(None)),
]

RTL_SRWLOCK = struct__RTL_SRWLOCK
PRTL_SRWLOCK = ctypes.POINTER(struct__RTL_SRWLOCK)
class struct__RTL_CONDITION_VARIABLE(Structure):
    pass

struct__RTL_CONDITION_VARIABLE._pack_ = 1 # source:False
struct__RTL_CONDITION_VARIABLE._fields_ = [
    ('Ptr', ctypes.POINTER(None)),
]

RTL_CONDITION_VARIABLE = struct__RTL_CONDITION_VARIABLE
PRTL_CONDITION_VARIABLE = ctypes.POINTER(struct__RTL_CONDITION_VARIABLE)
PAPCFUNC = ctypes.CFUNCTYPE(None, ctypes.c_uint64)
PVECTORED_EXCEPTION_HANDLER = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__EXCEPTION_POINTERS))

# values for enumeration '_HEAP_INFORMATION_CLASS'
_HEAP_INFORMATION_CLASS__enumvalues = {
    0: 'HeapCompatibilityInformation',
    1: 'HeapEnableTerminationOnCorruption',
    3: 'HeapOptimizeResources',
}
HeapCompatibilityInformation = 0
HeapEnableTerminationOnCorruption = 1
HeapOptimizeResources = 3
_HEAP_INFORMATION_CLASS = ctypes.c_uint32 # enum
HEAP_INFORMATION_CLASS = _HEAP_INFORMATION_CLASS
HEAP_INFORMATION_CLASS__enumvalues = _HEAP_INFORMATION_CLASS__enumvalues
class struct__HEAP_OPTIMIZE_RESOURCES_INFORMATION(Structure):
    pass

struct__HEAP_OPTIMIZE_RESOURCES_INFORMATION._pack_ = 1 # source:False
struct__HEAP_OPTIMIZE_RESOURCES_INFORMATION._fields_ = [
    ('Version', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
]

HEAP_OPTIMIZE_RESOURCES_INFORMATION = struct__HEAP_OPTIMIZE_RESOURCES_INFORMATION
PHEAP_OPTIMIZE_RESOURCES_INFORMATION = ctypes.POINTER(struct__HEAP_OPTIMIZE_RESOURCES_INFORMATION)
WAITORTIMERCALLBACKFUNC = ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.c_ubyte)
WORKERCALLBACKFUNC = ctypes.CFUNCTYPE(None, ctypes.POINTER(None))
APC_CALLBACK_FUNCTION = ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(None))
WAITORTIMERCALLBACK = ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.c_ubyte)
PFLS_CALLBACK_FUNCTION = ctypes.CFUNCTYPE(None, ctypes.POINTER(None))
PSECURE_MEMORY_CACHE_CALLBACK = ctypes.CFUNCTYPE(ctypes.c_ubyte, ctypes.POINTER(None), ctypes.c_uint64)

# values for enumeration '_ACTIVATION_CONTEXT_INFO_CLASS'
_ACTIVATION_CONTEXT_INFO_CLASS__enumvalues = {
    1: 'ActivationContextBasicInformation',
    2: 'ActivationContextDetailedInformation',
    3: 'AssemblyDetailedInformationInActivationContext',
    4: 'FileInformationInAssemblyOfAssemblyInActivationContext',
    5: 'RunlevelInformationInActivationContext',
    6: 'CompatibilityInformationInActivationContext',
    7: 'ActivationContextManifestResourceName',
    8: 'MaxActivationContextInfoClass',
    3: 'AssemblyDetailedInformationInActivationContxt',
    4: 'FileInformationInAssemblyOfAssemblyInActivationContxt',
}
ActivationContextBasicInformation = 1
ActivationContextDetailedInformation = 2
AssemblyDetailedInformationInActivationContext = 3
FileInformationInAssemblyOfAssemblyInActivationContext = 4
RunlevelInformationInActivationContext = 5
CompatibilityInformationInActivationContext = 6
ActivationContextManifestResourceName = 7
MaxActivationContextInfoClass = 8
AssemblyDetailedInformationInActivationContxt = 3
FileInformationInAssemblyOfAssemblyInActivationContxt = 4
_ACTIVATION_CONTEXT_INFO_CLASS = ctypes.c_uint32 # enum
ACTIVATION_CONTEXT_INFO_CLASS = _ACTIVATION_CONTEXT_INFO_CLASS
ACTIVATION_CONTEXT_INFO_CLASS__enumvalues = _ACTIVATION_CONTEXT_INFO_CLASS__enumvalues
class struct__ACTIVATION_CONTEXT_QUERY_INDEX(Structure):
    pass

struct__ACTIVATION_CONTEXT_QUERY_INDEX._pack_ = 1 # source:False
struct__ACTIVATION_CONTEXT_QUERY_INDEX._fields_ = [
    ('ulAssemblyIndex', ctypes.c_uint32),
    ('ulFileIndexInAssembly', ctypes.c_uint32),
]

ACTIVATION_CONTEXT_QUERY_INDEX = struct__ACTIVATION_CONTEXT_QUERY_INDEX
PACTIVATION_CONTEXT_QUERY_INDEX = ctypes.POINTER(struct__ACTIVATION_CONTEXT_QUERY_INDEX)
PCACTIVATION_CONTEXT_QUERY_INDEX = ctypes.POINTER(struct__ACTIVATION_CONTEXT_QUERY_INDEX)
class struct__ASSEMBLY_FILE_DETAILED_INFORMATION(Structure):
    pass

struct__ASSEMBLY_FILE_DETAILED_INFORMATION._pack_ = 1 # source:False
struct__ASSEMBLY_FILE_DETAILED_INFORMATION._fields_ = [
    ('ulFlags', ctypes.c_uint32),
    ('ulFilenameLength', ctypes.c_uint32),
    ('ulPathLength', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpFileName', ctypes.POINTER(ctypes.c_int16)),
    ('lpFilePath', ctypes.POINTER(ctypes.c_int16)),
]

ASSEMBLY_FILE_DETAILED_INFORMATION = struct__ASSEMBLY_FILE_DETAILED_INFORMATION
PASSEMBLY_FILE_DETAILED_INFORMATION = ctypes.POINTER(struct__ASSEMBLY_FILE_DETAILED_INFORMATION)
PCASSEMBLY_FILE_DETAILED_INFORMATION = ctypes.POINTER(struct__ASSEMBLY_FILE_DETAILED_INFORMATION)
class struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION(Structure):
    pass

struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION._pack_ = 1 # source:False
struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION._fields_ = [
    ('ulFlags', ctypes.c_uint32),
    ('ulEncodedAssemblyIdentityLength', ctypes.c_uint32),
    ('ulManifestPathType', ctypes.c_uint32),
    ('ulManifestPathLength', ctypes.c_uint32),
    ('liManifestLastWriteTime', LARGE_INTEGER),
    ('ulPolicyPathType', ctypes.c_uint32),
    ('ulPolicyPathLength', ctypes.c_uint32),
    ('liPolicyLastWriteTime', LARGE_INTEGER),
    ('ulMetadataSatelliteRosterIndex', ctypes.c_uint32),
    ('ulManifestVersionMajor', ctypes.c_uint32),
    ('ulManifestVersionMinor', ctypes.c_uint32),
    ('ulPolicyVersionMajor', ctypes.c_uint32),
    ('ulPolicyVersionMinor', ctypes.c_uint32),
    ('ulAssemblyDirectoryNameLength', ctypes.c_uint32),
    ('lpAssemblyEncodedAssemblyIdentity', ctypes.POINTER(ctypes.c_int16)),
    ('lpAssemblyManifestPath', ctypes.POINTER(ctypes.c_int16)),
    ('lpAssemblyPolicyPath', ctypes.POINTER(ctypes.c_int16)),
    ('lpAssemblyDirectoryName', ctypes.POINTER(ctypes.c_int16)),
    ('ulFileCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = ctypes.POINTER(struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION)
PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = ctypes.POINTER(struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION)

# values for enumeration 'ACTCTX_REQUESTED_RUN_LEVEL'
ACTCTX_REQUESTED_RUN_LEVEL__enumvalues = {
    0: 'ACTCTX_RUN_LEVEL_UNSPECIFIED',
    1: 'ACTCTX_RUN_LEVEL_AS_INVOKER',
    2: 'ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE',
    3: 'ACTCTX_RUN_LEVEL_REQUIRE_ADMIN',
    4: 'ACTCTX_RUN_LEVEL_NUMBERS',
}
ACTCTX_RUN_LEVEL_UNSPECIFIED = 0
ACTCTX_RUN_LEVEL_AS_INVOKER = 1
ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2
ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 3
ACTCTX_RUN_LEVEL_NUMBERS = 4
ACTCTX_REQUESTED_RUN_LEVEL = ctypes.c_uint32 # enum
class struct__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION(Structure):
    pass

struct__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION._pack_ = 1 # source:False
struct__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION._fields_ = [
    ('ulFlags', ctypes.c_uint32),
    ('RunLevel', ACTCTX_REQUESTED_RUN_LEVEL),
    ('UiAccess', ctypes.c_uint32),
]

ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = struct__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = ctypes.POINTER(struct__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION)
PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = ctypes.POINTER(struct__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION)

# values for enumeration 'ACTCTX_COMPATIBILITY_ELEMENT_TYPE'
ACTCTX_COMPATIBILITY_ELEMENT_TYPE__enumvalues = {
    0: 'ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN',
    1: 'ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS',
    2: 'ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION',
    3: 'ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED',
}
ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0
ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 1
ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2
ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED = 3
ACTCTX_COMPATIBILITY_ELEMENT_TYPE = ctypes.c_uint32 # enum
class struct__COMPATIBILITY_CONTEXT_ELEMENT(Structure):
    pass

struct__COMPATIBILITY_CONTEXT_ELEMENT._pack_ = 1 # source:False
struct__COMPATIBILITY_CONTEXT_ELEMENT._fields_ = [
    ('Id', GUID),
    ('Type', ACTCTX_COMPATIBILITY_ELEMENT_TYPE),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('MaxVersionTested', ctypes.c_uint64),
]

COMPATIBILITY_CONTEXT_ELEMENT = struct__COMPATIBILITY_CONTEXT_ELEMENT
PCOMPATIBILITY_CONTEXT_ELEMENT = ctypes.POINTER(struct__COMPATIBILITY_CONTEXT_ELEMENT)
PCCOMPATIBILITY_CONTEXT_ELEMENT = ctypes.POINTER(struct__COMPATIBILITY_CONTEXT_ELEMENT)
class struct__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION(Structure):
    pass

struct__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION._pack_ = 1 # source:False
struct__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION._fields_ = [
    ('ElementCount', ctypes.c_uint32),
]

ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = struct__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = ctypes.POINTER(struct__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION)
PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = ctypes.POINTER(struct__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION)
class struct__SUPPORTED_OS_INFO(Structure):
    pass

struct__SUPPORTED_OS_INFO._pack_ = 1 # source:False
struct__SUPPORTED_OS_INFO._fields_ = [
    ('MajorVersion', ctypes.c_uint16),
    ('MinorVersion', ctypes.c_uint16),
]

SUPPORTED_OS_INFO = struct__SUPPORTED_OS_INFO
PSUPPORTED_OS_INFO = ctypes.POINTER(struct__SUPPORTED_OS_INFO)
class struct__MAXVERSIONTESTED_INFO(Structure):
    pass

struct__MAXVERSIONTESTED_INFO._pack_ = 1 # source:False
struct__MAXVERSIONTESTED_INFO._fields_ = [
    ('MaxVersionTested', ctypes.c_uint64),
]

MAXVERSIONTESTED_INFO = struct__MAXVERSIONTESTED_INFO
PMAXVERSIONTESTED_INFO = ctypes.POINTER(struct__MAXVERSIONTESTED_INFO)
class struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION(Structure):
    pass

struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION._pack_ = 1 # source:False
struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION._fields_ = [
    ('dwFlags', ctypes.c_uint32),
    ('ulFormatVersion', ctypes.c_uint32),
    ('ulAssemblyCount', ctypes.c_uint32),
    ('ulRootManifestPathType', ctypes.c_uint32),
    ('ulRootManifestPathChars', ctypes.c_uint32),
    ('ulRootConfigurationPathType', ctypes.c_uint32),
    ('ulRootConfigurationPathChars', ctypes.c_uint32),
    ('ulAppDirPathType', ctypes.c_uint32),
    ('ulAppDirPathChars', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpRootManifestPath', ctypes.POINTER(ctypes.c_int16)),
    ('lpRootConfigurationPath', ctypes.POINTER(ctypes.c_int16)),
    ('lpAppDirPath', ctypes.POINTER(ctypes.c_int16)),
]

ACTIVATION_CONTEXT_DETAILED_INFORMATION = struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION
PACTIVATION_CONTEXT_DETAILED_INFORMATION = ctypes.POINTER(struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION)
PCACTIVATION_CONTEXT_DETAILED_INFORMATION = ctypes.POINTER(struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION)
class struct__HARDWARE_COUNTER_DATA(Structure):
    pass

struct__HARDWARE_COUNTER_DATA._pack_ = 1 # source:False
struct__HARDWARE_COUNTER_DATA._fields_ = [
    ('Type', HARDWARE_COUNTER_TYPE),
    ('Reserved', ctypes.c_uint32),
    ('Value', ctypes.c_uint64),
]

HARDWARE_COUNTER_DATA = struct__HARDWARE_COUNTER_DATA
PHARDWARE_COUNTER_DATA = ctypes.POINTER(struct__HARDWARE_COUNTER_DATA)
class struct__PERFORMANCE_DATA(Structure):
    pass

struct__PERFORMANCE_DATA._pack_ = 1 # source:False
struct__PERFORMANCE_DATA._fields_ = [
    ('Size', ctypes.c_uint16),
    ('Version', ctypes.c_ubyte),
    ('HwCountersCount', ctypes.c_ubyte),
    ('ContextSwitchCount', ctypes.c_uint32),
    ('WaitReasonBitMap', ctypes.c_uint64),
    ('CycleTime', ctypes.c_uint64),
    ('RetryCount', ctypes.c_uint32),
    ('Reserved', ctypes.c_uint32),
    ('HwCounters', struct__HARDWARE_COUNTER_DATA * 16),
]

PERFORMANCE_DATA = struct__PERFORMANCE_DATA
PPERFORMANCE_DATA = ctypes.POINTER(struct__PERFORMANCE_DATA)
class struct__EVENTLOGRECORD(Structure):
    pass

struct__EVENTLOGRECORD._pack_ = 1 # source:False
struct__EVENTLOGRECORD._fields_ = [
    ('Length', ctypes.c_uint32),
    ('Reserved', ctypes.c_uint32),
    ('RecordNumber', ctypes.c_uint32),
    ('TimeGenerated', ctypes.c_uint32),
    ('TimeWritten', ctypes.c_uint32),
    ('EventID', ctypes.c_uint32),
    ('EventType', ctypes.c_uint16),
    ('NumStrings', ctypes.c_uint16),
    ('EventCategory', ctypes.c_uint16),
    ('ReservedFlags', ctypes.c_uint16),
    ('ClosingRecordNumber', ctypes.c_uint32),
    ('StringOffset', ctypes.c_uint32),
    ('UserSidLength', ctypes.c_uint32),
    ('UserSidOffset', ctypes.c_uint32),
    ('DataLength', ctypes.c_uint32),
    ('DataOffset', ctypes.c_uint32),
]

EVENTLOGRECORD = struct__EVENTLOGRECORD
PEVENTLOGRECORD = ctypes.POINTER(struct__EVENTLOGRECORD)
class struct__EVENTSFORLOGFILE(Structure):
    pass

struct__EVENTSFORLOGFILE._pack_ = 1 # source:False
struct__EVENTSFORLOGFILE._fields_ = [
    ('ulSize', ctypes.c_uint32),
    ('szLogicalLogFile', ctypes.c_int16 * 256),
    ('ulNumRecords', ctypes.c_uint32),
]

EVENTSFORLOGFILE = struct__EVENTSFORLOGFILE
PEVENTSFORLOGFILE = ctypes.POINTER(struct__EVENTSFORLOGFILE)
class struct__PACKEDEVENTINFO(Structure):
    pass

struct__PACKEDEVENTINFO._pack_ = 1 # source:False
struct__PACKEDEVENTINFO._fields_ = [
    ('ulSize', ctypes.c_uint32),
    ('ulNumEventsForLogFile', ctypes.c_uint32),
]

PACKEDEVENTINFO = struct__PACKEDEVENTINFO
PPACKEDEVENTINFO = ctypes.POINTER(struct__PACKEDEVENTINFO)

# values for enumeration '_CM_SERVICE_NODE_TYPE'
_CM_SERVICE_NODE_TYPE__enumvalues = {
    1: 'DriverType',
    2: 'FileSystemType',
    16: 'Win32ServiceOwnProcess',
    32: 'Win32ServiceShareProcess',
    4: 'AdapterType',
    8: 'RecognizerType',
}
DriverType = 1
FileSystemType = 2
Win32ServiceOwnProcess = 16
Win32ServiceShareProcess = 32
AdapterType = 4
RecognizerType = 8
_CM_SERVICE_NODE_TYPE = ctypes.c_uint32 # enum
SERVICE_NODE_TYPE = _CM_SERVICE_NODE_TYPE
SERVICE_NODE_TYPE__enumvalues = _CM_SERVICE_NODE_TYPE__enumvalues

# values for enumeration '_CM_SERVICE_LOAD_TYPE'
_CM_SERVICE_LOAD_TYPE__enumvalues = {
    0: 'BootLoad',
    1: 'SystemLoad',
    2: 'AutoLoad',
    3: 'DemandLoad',
    4: 'DisableLoad',
}
BootLoad = 0
SystemLoad = 1
AutoLoad = 2
DemandLoad = 3
DisableLoad = 4
_CM_SERVICE_LOAD_TYPE = ctypes.c_uint32 # enum
SERVICE_LOAD_TYPE = _CM_SERVICE_LOAD_TYPE
SERVICE_LOAD_TYPE__enumvalues = _CM_SERVICE_LOAD_TYPE__enumvalues

# values for enumeration '_CM_ERROR_CONTROL_TYPE'
_CM_ERROR_CONTROL_TYPE__enumvalues = {
    0: 'IgnoreError',
    1: 'NormalError',
    2: 'SevereError',
    3: 'CriticalError',
}
IgnoreError = 0
NormalError = 1
SevereError = 2
CriticalError = 3
_CM_ERROR_CONTROL_TYPE = ctypes.c_uint32 # enum
SERVICE_ERROR_TYPE = _CM_ERROR_CONTROL_TYPE
SERVICE_ERROR_TYPE__enumvalues = _CM_ERROR_CONTROL_TYPE__enumvalues
class struct__TAPE_ERASE(Structure):
    pass

struct__TAPE_ERASE._pack_ = 1 # source:False
struct__TAPE_ERASE._fields_ = [
    ('Type', ctypes.c_uint32),
    ('Immediate', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

TAPE_ERASE = struct__TAPE_ERASE
PTAPE_ERASE = ctypes.POINTER(struct__TAPE_ERASE)
class struct__TAPE_PREPARE(Structure):
    pass

struct__TAPE_PREPARE._pack_ = 1 # source:False
struct__TAPE_PREPARE._fields_ = [
    ('Operation', ctypes.c_uint32),
    ('Immediate', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

TAPE_PREPARE = struct__TAPE_PREPARE
PTAPE_PREPARE = ctypes.POINTER(struct__TAPE_PREPARE)
class struct__TAPE_WRITE_MARKS(Structure):
    pass

struct__TAPE_WRITE_MARKS._pack_ = 1 # source:False
struct__TAPE_WRITE_MARKS._fields_ = [
    ('Type', ctypes.c_uint32),
    ('Count', ctypes.c_uint32),
    ('Immediate', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

TAPE_WRITE_MARKS = struct__TAPE_WRITE_MARKS
PTAPE_WRITE_MARKS = ctypes.POINTER(struct__TAPE_WRITE_MARKS)
class struct__TAPE_GET_POSITION(Structure):
    pass

struct__TAPE_GET_POSITION._pack_ = 1 # source:False
struct__TAPE_GET_POSITION._fields_ = [
    ('Type', ctypes.c_uint32),
    ('Partition', ctypes.c_uint32),
    ('Offset', LARGE_INTEGER),
]

TAPE_GET_POSITION = struct__TAPE_GET_POSITION
PTAPE_GET_POSITION = ctypes.POINTER(struct__TAPE_GET_POSITION)
class struct__TAPE_SET_POSITION(Structure):
    pass

struct__TAPE_SET_POSITION._pack_ = 1 # source:False
struct__TAPE_SET_POSITION._fields_ = [
    ('Method', ctypes.c_uint32),
    ('Partition', ctypes.c_uint32),
    ('Offset', LARGE_INTEGER),
    ('Immediate', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

TAPE_SET_POSITION = struct__TAPE_SET_POSITION
PTAPE_SET_POSITION = ctypes.POINTER(struct__TAPE_SET_POSITION)
class struct__TAPE_GET_DRIVE_PARAMETERS(Structure):
    pass

struct__TAPE_GET_DRIVE_PARAMETERS._pack_ = 1 # source:False
struct__TAPE_GET_DRIVE_PARAMETERS._fields_ = [
    ('ECC', ctypes.c_ubyte),
    ('Compression', ctypes.c_ubyte),
    ('DataPadding', ctypes.c_ubyte),
    ('ReportSetmarks', ctypes.c_ubyte),
    ('DefaultBlockSize', ctypes.c_uint32),
    ('MaximumBlockSize', ctypes.c_uint32),
    ('MinimumBlockSize', ctypes.c_uint32),
    ('MaximumPartitionCount', ctypes.c_uint32),
    ('FeaturesLow', ctypes.c_uint32),
    ('FeaturesHigh', ctypes.c_uint32),
    ('EOTWarningZoneSize', ctypes.c_uint32),
]

TAPE_GET_DRIVE_PARAMETERS = struct__TAPE_GET_DRIVE_PARAMETERS
PTAPE_GET_DRIVE_PARAMETERS = ctypes.POINTER(struct__TAPE_GET_DRIVE_PARAMETERS)
class struct__TAPE_SET_DRIVE_PARAMETERS(Structure):
    pass

struct__TAPE_SET_DRIVE_PARAMETERS._pack_ = 1 # source:False
struct__TAPE_SET_DRIVE_PARAMETERS._fields_ = [
    ('ECC', ctypes.c_ubyte),
    ('Compression', ctypes.c_ubyte),
    ('DataPadding', ctypes.c_ubyte),
    ('ReportSetmarks', ctypes.c_ubyte),
    ('EOTWarningZoneSize', ctypes.c_uint32),
]

TAPE_SET_DRIVE_PARAMETERS = struct__TAPE_SET_DRIVE_PARAMETERS
PTAPE_SET_DRIVE_PARAMETERS = ctypes.POINTER(struct__TAPE_SET_DRIVE_PARAMETERS)
class struct__TAPE_GET_MEDIA_PARAMETERS(Structure):
    pass

struct__TAPE_GET_MEDIA_PARAMETERS._pack_ = 1 # source:False
struct__TAPE_GET_MEDIA_PARAMETERS._fields_ = [
    ('Capacity', LARGE_INTEGER),
    ('Remaining', LARGE_INTEGER),
    ('BlockSize', ctypes.c_uint32),
    ('PartitionCount', ctypes.c_uint32),
    ('WriteProtected', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

TAPE_GET_MEDIA_PARAMETERS = struct__TAPE_GET_MEDIA_PARAMETERS
PTAPE_GET_MEDIA_PARAMETERS = ctypes.POINTER(struct__TAPE_GET_MEDIA_PARAMETERS)
class struct__TAPE_SET_MEDIA_PARAMETERS(Structure):
    pass

struct__TAPE_SET_MEDIA_PARAMETERS._pack_ = 1 # source:False
struct__TAPE_SET_MEDIA_PARAMETERS._fields_ = [
    ('BlockSize', ctypes.c_uint32),
]

TAPE_SET_MEDIA_PARAMETERS = struct__TAPE_SET_MEDIA_PARAMETERS
PTAPE_SET_MEDIA_PARAMETERS = ctypes.POINTER(struct__TAPE_SET_MEDIA_PARAMETERS)
class struct__TAPE_CREATE_PARTITION(Structure):
    pass

struct__TAPE_CREATE_PARTITION._pack_ = 1 # source:False
struct__TAPE_CREATE_PARTITION._fields_ = [
    ('Method', ctypes.c_uint32),
    ('Count', ctypes.c_uint32),
    ('Size', ctypes.c_uint32),
]

TAPE_CREATE_PARTITION = struct__TAPE_CREATE_PARTITION
PTAPE_CREATE_PARTITION = ctypes.POINTER(struct__TAPE_CREATE_PARTITION)
class struct__TAPE_WMI_OPERATIONS(Structure):
    pass

struct__TAPE_WMI_OPERATIONS._pack_ = 1 # source:False
struct__TAPE_WMI_OPERATIONS._fields_ = [
    ('Method', ctypes.c_uint32),
    ('DataBufferSize', ctypes.c_uint32),
    ('DataBuffer', ctypes.POINTER(None)),
]

TAPE_WMI_OPERATIONS = struct__TAPE_WMI_OPERATIONS
PTAPE_WMI_OPERATIONS = ctypes.POINTER(struct__TAPE_WMI_OPERATIONS)

# values for enumeration '_TAPE_DRIVE_PROBLEM_TYPE'
_TAPE_DRIVE_PROBLEM_TYPE__enumvalues = {
    0: 'TapeDriveProblemNone',
    1: 'TapeDriveReadWriteWarning',
    2: 'TapeDriveReadWriteError',
    3: 'TapeDriveReadWarning',
    4: 'TapeDriveWriteWarning',
    5: 'TapeDriveReadError',
    6: 'TapeDriveWriteError',
    7: 'TapeDriveHardwareError',
    8: 'TapeDriveUnsupportedMedia',
    9: 'TapeDriveScsiConnectionError',
    10: 'TapeDriveTimetoClean',
    11: 'TapeDriveCleanDriveNow',
    12: 'TapeDriveMediaLifeExpired',
    13: 'TapeDriveSnappedTape',
}
TapeDriveProblemNone = 0
TapeDriveReadWriteWarning = 1
TapeDriveReadWriteError = 2
TapeDriveReadWarning = 3
TapeDriveWriteWarning = 4
TapeDriveReadError = 5
TapeDriveWriteError = 6
TapeDriveHardwareError = 7
TapeDriveUnsupportedMedia = 8
TapeDriveScsiConnectionError = 9
TapeDriveTimetoClean = 10
TapeDriveCleanDriveNow = 11
TapeDriveMediaLifeExpired = 12
TapeDriveSnappedTape = 13
_TAPE_DRIVE_PROBLEM_TYPE = ctypes.c_uint32 # enum
TAPE_DRIVE_PROBLEM_TYPE = _TAPE_DRIVE_PROBLEM_TYPE
TAPE_DRIVE_PROBLEM_TYPE__enumvalues = _TAPE_DRIVE_PROBLEM_TYPE__enumvalues
UOW = struct__GUID
PUOW = ctypes.POINTER(struct__GUID)
CRM_PROTOCOL_ID = struct__GUID
PCRM_PROTOCOL_ID = ctypes.POINTER(struct__GUID)
NOTIFICATION_MASK = ctypes.c_uint32
class struct__TRANSACTION_NOTIFICATION(Structure):
    pass

struct__TRANSACTION_NOTIFICATION._pack_ = 1 # source:False
struct__TRANSACTION_NOTIFICATION._fields_ = [
    ('TransactionKey', ctypes.POINTER(None)),
    ('TransactionNotification', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('TmVirtualClock', LARGE_INTEGER),
    ('ArgumentLength', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

TRANSACTION_NOTIFICATION = struct__TRANSACTION_NOTIFICATION
PTRANSACTION_NOTIFICATION = ctypes.POINTER(struct__TRANSACTION_NOTIFICATION)
class struct__TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('EnlistmentId', GUID),
    ('UOW', UOW),
     ]

TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = struct__TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = ctypes.POINTER(struct__TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT)
class struct__TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT(Structure):
    pass

struct__TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT._pack_ = 1 # source:False
struct__TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT._fields_ = [
    ('TmIdentity', GUID),
    ('Flags', ctypes.c_uint32),
]

TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = struct__TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = ctypes.POINTER(struct__TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT)
SAVEPOINT_ID = ctypes.c_uint32
PSAVEPOINT_ID = ctypes.POINTER(ctypes.c_uint32)
class struct__TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT(Structure):
    pass

struct__TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT._pack_ = 1 # source:False
struct__TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT._fields_ = [
    ('SavepointId', ctypes.c_uint32),
]

TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = struct__TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = ctypes.POINTER(struct__TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT)
class struct__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT(Structure):
    pass

struct__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT._pack_ = 1 # source:False
struct__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT._fields_ = [
    ('PropagationCookie', ctypes.c_uint32),
    ('UOW', GUID),
    ('TmIdentity', GUID),
    ('BufferLength', ctypes.c_uint32),
]

TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = struct__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = ctypes.POINTER(struct__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT)
class struct__TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT(Structure):
    pass

struct__TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT._pack_ = 1 # source:False
struct__TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT._fields_ = [
    ('MarshalCookie', ctypes.c_uint32),
    ('UOW', GUID),
]

TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = struct__TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = ctypes.POINTER(struct__TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT)
TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = struct__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = ctypes.POINTER(struct__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT)
class struct__KCRM_MARSHAL_HEADER(Structure):
    pass

struct__KCRM_MARSHAL_HEADER._pack_ = 1 # source:False
struct__KCRM_MARSHAL_HEADER._fields_ = [
    ('VersionMajor', ctypes.c_uint32),
    ('VersionMinor', ctypes.c_uint32),
    ('NumProtocols', ctypes.c_uint32),
    ('Unused', ctypes.c_uint32),
]

KCRM_MARSHAL_HEADER = struct__KCRM_MARSHAL_HEADER
PKCRM_MARSHAL_HEADER = ctypes.POINTER(struct__KCRM_MARSHAL_HEADER)
PRKCRM_MARSHAL_HEADER = ctypes.POINTER(struct__KCRM_MARSHAL_HEADER)
class struct__KCRM_TRANSACTION_BLOB(Structure):
    pass

struct__KCRM_TRANSACTION_BLOB._pack_ = 1 # source:False
struct__KCRM_TRANSACTION_BLOB._fields_ = [
    ('UOW', UOW),
    ('TmIdentity', GUID),
    ('IsolationLevel', ctypes.c_uint32),
    ('IsolationFlags', ctypes.c_uint32),
    ('Timeout', ctypes.c_uint32),
    ('Description', ctypes.c_int16 * 64),
]

KCRM_TRANSACTION_BLOB = struct__KCRM_TRANSACTION_BLOB
PKCRM_TRANSACTION_BLOB = ctypes.POINTER(struct__KCRM_TRANSACTION_BLOB)
PRKCRM_TRANSACTION_BLOB = ctypes.POINTER(struct__KCRM_TRANSACTION_BLOB)
class struct__KCRM_PROTOCOL_BLOB(Structure):
    pass

struct__KCRM_PROTOCOL_BLOB._pack_ = 1 # source:False
struct__KCRM_PROTOCOL_BLOB._fields_ = [
    ('ProtocolId', CRM_PROTOCOL_ID),
    ('StaticInfoLength', ctypes.c_uint32),
    ('TransactionIdInfoLength', ctypes.c_uint32),
    ('Unused1', ctypes.c_uint32),
    ('Unused2', ctypes.c_uint32),
]

KCRM_PROTOCOL_BLOB = struct__KCRM_PROTOCOL_BLOB
PKCRM_PROTOCOL_BLOB = ctypes.POINTER(struct__KCRM_PROTOCOL_BLOB)
PRKCRM_PROTOCOL_BLOB = ctypes.POINTER(struct__KCRM_PROTOCOL_BLOB)

# values for enumeration '_TRANSACTION_OUTCOME'
_TRANSACTION_OUTCOME__enumvalues = {
    1: 'TransactionOutcomeUndetermined',
    2: 'TransactionOutcomeCommitted',
    3: 'TransactionOutcomeAborted',
}
TransactionOutcomeUndetermined = 1
TransactionOutcomeCommitted = 2
TransactionOutcomeAborted = 3
_TRANSACTION_OUTCOME = ctypes.c_uint32 # enum
TRANSACTION_OUTCOME = _TRANSACTION_OUTCOME
TRANSACTION_OUTCOME__enumvalues = _TRANSACTION_OUTCOME__enumvalues

# values for enumeration '_TRANSACTION_STATE'
_TRANSACTION_STATE__enumvalues = {
    1: 'TransactionStateNormal',
    2: 'TransactionStateIndoubt',
    3: 'TransactionStateCommittedNotify',
}
TransactionStateNormal = 1
TransactionStateIndoubt = 2
TransactionStateCommittedNotify = 3
_TRANSACTION_STATE = ctypes.c_uint32 # enum
TRANSACTION_STATE = _TRANSACTION_STATE
TRANSACTION_STATE__enumvalues = _TRANSACTION_STATE__enumvalues
class struct__TRANSACTION_BASIC_INFORMATION(Structure):
    pass

struct__TRANSACTION_BASIC_INFORMATION._pack_ = 1 # source:False
struct__TRANSACTION_BASIC_INFORMATION._fields_ = [
    ('TransactionId', GUID),
    ('State', ctypes.c_uint32),
    ('Outcome', ctypes.c_uint32),
]

TRANSACTION_BASIC_INFORMATION = struct__TRANSACTION_BASIC_INFORMATION
PTRANSACTION_BASIC_INFORMATION = ctypes.POINTER(struct__TRANSACTION_BASIC_INFORMATION)
class struct__TRANSACTIONMANAGER_BASIC_INFORMATION(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('TmIdentity', GUID),
    ('VirtualClock', LARGE_INTEGER),
     ]

TRANSACTIONMANAGER_BASIC_INFORMATION = struct__TRANSACTIONMANAGER_BASIC_INFORMATION
PTRANSACTIONMANAGER_BASIC_INFORMATION = ctypes.POINTER(struct__TRANSACTIONMANAGER_BASIC_INFORMATION)
class struct__TRANSACTIONMANAGER_LOG_INFORMATION(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('LogIdentity', GUID),
     ]

TRANSACTIONMANAGER_LOG_INFORMATION = struct__TRANSACTIONMANAGER_LOG_INFORMATION
PTRANSACTIONMANAGER_LOG_INFORMATION = ctypes.POINTER(struct__TRANSACTIONMANAGER_LOG_INFORMATION)
class struct__TRANSACTIONMANAGER_LOGPATH_INFORMATION(Structure):
    pass

struct__TRANSACTIONMANAGER_LOGPATH_INFORMATION._pack_ = 1 # source:False
struct__TRANSACTIONMANAGER_LOGPATH_INFORMATION._fields_ = [
    ('LogPathLength', ctypes.c_uint32),
    ('LogPath', ctypes.c_int16 * 1),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

TRANSACTIONMANAGER_LOGPATH_INFORMATION = struct__TRANSACTIONMANAGER_LOGPATH_INFORMATION
PTRANSACTIONMANAGER_LOGPATH_INFORMATION = ctypes.POINTER(struct__TRANSACTIONMANAGER_LOGPATH_INFORMATION)
class struct__TRANSACTIONMANAGER_RECOVERY_INFORMATION(Structure):
    pass

struct__TRANSACTIONMANAGER_RECOVERY_INFORMATION._pack_ = 1 # source:False
struct__TRANSACTIONMANAGER_RECOVERY_INFORMATION._fields_ = [
    ('LastRecoveredLsn', ctypes.c_uint64),
]

TRANSACTIONMANAGER_RECOVERY_INFORMATION = struct__TRANSACTIONMANAGER_RECOVERY_INFORMATION
PTRANSACTIONMANAGER_RECOVERY_INFORMATION = ctypes.POINTER(struct__TRANSACTIONMANAGER_RECOVERY_INFORMATION)
class struct__TRANSACTIONMANAGER_OLDEST_INFORMATION(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('OldestTransactionGuid', GUID),
     ]

TRANSACTIONMANAGER_OLDEST_INFORMATION = struct__TRANSACTIONMANAGER_OLDEST_INFORMATION
PTRANSACTIONMANAGER_OLDEST_INFORMATION = ctypes.POINTER(struct__TRANSACTIONMANAGER_OLDEST_INFORMATION)
class struct__TRANSACTION_PROPERTIES_INFORMATION(Structure):
    pass

struct__TRANSACTION_PROPERTIES_INFORMATION._pack_ = 1 # source:False
struct__TRANSACTION_PROPERTIES_INFORMATION._fields_ = [
    ('IsolationLevel', ctypes.c_uint32),
    ('IsolationFlags', ctypes.c_uint32),
    ('Timeout', LARGE_INTEGER),
    ('Outcome', ctypes.c_uint32),
    ('DescriptionLength', ctypes.c_uint32),
    ('Description', ctypes.c_int16 * 1),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

TRANSACTION_PROPERTIES_INFORMATION = struct__TRANSACTION_PROPERTIES_INFORMATION
PTRANSACTION_PROPERTIES_INFORMATION = ctypes.POINTER(struct__TRANSACTION_PROPERTIES_INFORMATION)
class struct__TRANSACTION_BIND_INFORMATION(Structure):
    pass

struct__TRANSACTION_BIND_INFORMATION._pack_ = 1 # source:False
struct__TRANSACTION_BIND_INFORMATION._fields_ = [
    ('TmHandle', ctypes.POINTER(None)),
]

TRANSACTION_BIND_INFORMATION = struct__TRANSACTION_BIND_INFORMATION
PTRANSACTION_BIND_INFORMATION = ctypes.POINTER(struct__TRANSACTION_BIND_INFORMATION)
class struct__TRANSACTION_ENLISTMENT_PAIR(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('EnlistmentId', GUID),
    ('ResourceManagerId', GUID),
     ]

TRANSACTION_ENLISTMENT_PAIR = struct__TRANSACTION_ENLISTMENT_PAIR
PTRANSACTION_ENLISTMENT_PAIR = ctypes.POINTER(struct__TRANSACTION_ENLISTMENT_PAIR)
class struct__TRANSACTION_ENLISTMENTS_INFORMATION(Structure):
    pass

struct__TRANSACTION_ENLISTMENTS_INFORMATION._pack_ = 1 # source:False
struct__TRANSACTION_ENLISTMENTS_INFORMATION._fields_ = [
    ('NumberOfEnlistments', ctypes.c_uint32),
    ('EnlistmentPair', struct__TRANSACTION_ENLISTMENT_PAIR * 1),
]

TRANSACTION_ENLISTMENTS_INFORMATION = struct__TRANSACTION_ENLISTMENTS_INFORMATION
PTRANSACTION_ENLISTMENTS_INFORMATION = ctypes.POINTER(struct__TRANSACTION_ENLISTMENTS_INFORMATION)
class struct__TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('SuperiorEnlistmentPair', TRANSACTION_ENLISTMENT_PAIR),
     ]

TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = struct__TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = ctypes.POINTER(struct__TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION)
class struct__RESOURCEMANAGER_BASIC_INFORMATION(Structure):
    pass

struct__RESOURCEMANAGER_BASIC_INFORMATION._pack_ = 1 # source:False
struct__RESOURCEMANAGER_BASIC_INFORMATION._fields_ = [
    ('ResourceManagerId', GUID),
    ('DescriptionLength', ctypes.c_uint32),
    ('Description', ctypes.c_int16 * 1),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

RESOURCEMANAGER_BASIC_INFORMATION = struct__RESOURCEMANAGER_BASIC_INFORMATION
PRESOURCEMANAGER_BASIC_INFORMATION = ctypes.POINTER(struct__RESOURCEMANAGER_BASIC_INFORMATION)
class struct__RESOURCEMANAGER_COMPLETION_INFORMATION(Structure):
    pass

struct__RESOURCEMANAGER_COMPLETION_INFORMATION._pack_ = 1 # source:False
struct__RESOURCEMANAGER_COMPLETION_INFORMATION._fields_ = [
    ('IoCompletionPortHandle', ctypes.POINTER(None)),
    ('CompletionKey', ctypes.c_uint64),
]

RESOURCEMANAGER_COMPLETION_INFORMATION = struct__RESOURCEMANAGER_COMPLETION_INFORMATION
PRESOURCEMANAGER_COMPLETION_INFORMATION = ctypes.POINTER(struct__RESOURCEMANAGER_COMPLETION_INFORMATION)

# values for enumeration '_TRANSACTION_INFORMATION_CLASS'
_TRANSACTION_INFORMATION_CLASS__enumvalues = {
    0: 'TransactionBasicInformation',
    1: 'TransactionPropertiesInformation',
    2: 'TransactionEnlistmentInformation',
    3: 'TransactionSuperiorEnlistmentInformation',
    4: 'TransactionBindInformation',
    5: 'TransactionDTCPrivateInformation',
}
TransactionBasicInformation = 0
TransactionPropertiesInformation = 1
TransactionEnlistmentInformation = 2
TransactionSuperiorEnlistmentInformation = 3
TransactionBindInformation = 4
TransactionDTCPrivateInformation = 5
_TRANSACTION_INFORMATION_CLASS = ctypes.c_uint32 # enum
TRANSACTION_INFORMATION_CLASS = _TRANSACTION_INFORMATION_CLASS
TRANSACTION_INFORMATION_CLASS__enumvalues = _TRANSACTION_INFORMATION_CLASS__enumvalues

# values for enumeration '_TRANSACTIONMANAGER_INFORMATION_CLASS'
_TRANSACTIONMANAGER_INFORMATION_CLASS__enumvalues = {
    0: 'TransactionManagerBasicInformation',
    1: 'TransactionManagerLogInformation',
    2: 'TransactionManagerLogPathInformation',
    4: 'TransactionManagerRecoveryInformation',
    3: 'TransactionManagerOnlineProbeInformation',
    5: 'TransactionManagerOldestTransactionInformation',
}
TransactionManagerBasicInformation = 0
TransactionManagerLogInformation = 1
TransactionManagerLogPathInformation = 2
TransactionManagerRecoveryInformation = 4
TransactionManagerOnlineProbeInformation = 3
TransactionManagerOldestTransactionInformation = 5
_TRANSACTIONMANAGER_INFORMATION_CLASS = ctypes.c_uint32 # enum
TRANSACTIONMANAGER_INFORMATION_CLASS = _TRANSACTIONMANAGER_INFORMATION_CLASS
TRANSACTIONMANAGER_INFORMATION_CLASS__enumvalues = _TRANSACTIONMANAGER_INFORMATION_CLASS__enumvalues

# values for enumeration '_RESOURCEMANAGER_INFORMATION_CLASS'
_RESOURCEMANAGER_INFORMATION_CLASS__enumvalues = {
    0: 'ResourceManagerBasicInformation',
    1: 'ResourceManagerCompletionInformation',
}
ResourceManagerBasicInformation = 0
ResourceManagerCompletionInformation = 1
_RESOURCEMANAGER_INFORMATION_CLASS = ctypes.c_uint32 # enum
RESOURCEMANAGER_INFORMATION_CLASS = _RESOURCEMANAGER_INFORMATION_CLASS
RESOURCEMANAGER_INFORMATION_CLASS__enumvalues = _RESOURCEMANAGER_INFORMATION_CLASS__enumvalues
class struct__ENLISTMENT_BASIC_INFORMATION(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('EnlistmentId', GUID),
    ('TransactionId', GUID),
    ('ResourceManagerId', GUID),
     ]

ENLISTMENT_BASIC_INFORMATION = struct__ENLISTMENT_BASIC_INFORMATION
PENLISTMENT_BASIC_INFORMATION = ctypes.POINTER(struct__ENLISTMENT_BASIC_INFORMATION)
class struct__ENLISTMENT_CRM_INFORMATION(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('CrmTransactionManagerId', GUID),
    ('CrmResourceManagerId', GUID),
    ('CrmEnlistmentId', GUID),
     ]

ENLISTMENT_CRM_INFORMATION = struct__ENLISTMENT_CRM_INFORMATION
PENLISTMENT_CRM_INFORMATION = ctypes.POINTER(struct__ENLISTMENT_CRM_INFORMATION)

# values for enumeration '_ENLISTMENT_INFORMATION_CLASS'
_ENLISTMENT_INFORMATION_CLASS__enumvalues = {
    0: 'EnlistmentBasicInformation',
    1: 'EnlistmentRecoveryInformation',
    2: 'EnlistmentCrmInformation',
}
EnlistmentBasicInformation = 0
EnlistmentRecoveryInformation = 1
EnlistmentCrmInformation = 2
_ENLISTMENT_INFORMATION_CLASS = ctypes.c_uint32 # enum
ENLISTMENT_INFORMATION_CLASS = _ENLISTMENT_INFORMATION_CLASS
ENLISTMENT_INFORMATION_CLASS__enumvalues = _ENLISTMENT_INFORMATION_CLASS__enumvalues
class struct__TRANSACTION_LIST_ENTRY(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('UOW', UOW),
     ]

TRANSACTION_LIST_ENTRY = struct__TRANSACTION_LIST_ENTRY
PTRANSACTION_LIST_ENTRY = ctypes.POINTER(struct__TRANSACTION_LIST_ENTRY)
class struct__TRANSACTION_LIST_INFORMATION(Structure):
    pass

struct__TRANSACTION_LIST_INFORMATION._pack_ = 1 # source:False
struct__TRANSACTION_LIST_INFORMATION._fields_ = [
    ('NumberOfTransactions', ctypes.c_uint32),
    ('TransactionInformation', struct__TRANSACTION_LIST_ENTRY * 1),
]

TRANSACTION_LIST_INFORMATION = struct__TRANSACTION_LIST_INFORMATION
PTRANSACTION_LIST_INFORMATION = ctypes.POINTER(struct__TRANSACTION_LIST_INFORMATION)

# values for enumeration '_KTMOBJECT_TYPE'
_KTMOBJECT_TYPE__enumvalues = {
    0: 'KTMOBJECT_TRANSACTION',
    1: 'KTMOBJECT_TRANSACTION_MANAGER',
    2: 'KTMOBJECT_RESOURCE_MANAGER',
    3: 'KTMOBJECT_ENLISTMENT',
    4: 'KTMOBJECT_INVALID',
}
KTMOBJECT_TRANSACTION = 0
KTMOBJECT_TRANSACTION_MANAGER = 1
KTMOBJECT_RESOURCE_MANAGER = 2
KTMOBJECT_ENLISTMENT = 3
KTMOBJECT_INVALID = 4
_KTMOBJECT_TYPE = ctypes.c_uint32 # enum
KTMOBJECT_TYPE = _KTMOBJECT_TYPE
KTMOBJECT_TYPE__enumvalues = _KTMOBJECT_TYPE__enumvalues
PKTMOBJECT_TYPE = ctypes.POINTER(_KTMOBJECT_TYPE)
class struct__KTMOBJECT_CURSOR(Structure):
    pass

struct__KTMOBJECT_CURSOR._pack_ = 1 # source:False
struct__KTMOBJECT_CURSOR._fields_ = [
    ('LastQuery', GUID),
    ('ObjectIdCount', ctypes.c_uint32),
    ('ObjectIds', struct__GUID * 1),
]

KTMOBJECT_CURSOR = struct__KTMOBJECT_CURSOR
PKTMOBJECT_CURSOR = ctypes.POINTER(struct__KTMOBJECT_CURSOR)
TP_VERSION = ctypes.c_uint32
PTP_VERSION = ctypes.POINTER(ctypes.c_uint32)
class struct__TP_CALLBACK_INSTANCE(Structure):
    pass

TP_CALLBACK_INSTANCE = struct__TP_CALLBACK_INSTANCE
PTP_CALLBACK_INSTANCE = ctypes.POINTER(struct__TP_CALLBACK_INSTANCE)
PTP_SIMPLE_CALLBACK = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct__TP_CALLBACK_INSTANCE), ctypes.POINTER(None))
class struct__TP_POOL(Structure):
    pass

TP_POOL = struct__TP_POOL
PTP_POOL = ctypes.POINTER(struct__TP_POOL)

# values for enumeration '_TP_CALLBACK_PRIORITY'
_TP_CALLBACK_PRIORITY__enumvalues = {
    0: 'TP_CALLBACK_PRIORITY_HIGH',
    1: 'TP_CALLBACK_PRIORITY_NORMAL',
    2: 'TP_CALLBACK_PRIORITY_LOW',
    3: 'TP_CALLBACK_PRIORITY_INVALID',
    3: 'TP_CALLBACK_PRIORITY_COUNT',
}
TP_CALLBACK_PRIORITY_HIGH = 0
TP_CALLBACK_PRIORITY_NORMAL = 1
TP_CALLBACK_PRIORITY_LOW = 2
TP_CALLBACK_PRIORITY_INVALID = 3
TP_CALLBACK_PRIORITY_COUNT = 3
_TP_CALLBACK_PRIORITY = ctypes.c_uint32 # enum
TP_CALLBACK_PRIORITY = _TP_CALLBACK_PRIORITY
TP_CALLBACK_PRIORITY__enumvalues = _TP_CALLBACK_PRIORITY__enumvalues
class struct__TP_POOL_STACK_INFORMATION(Structure):
    pass

struct__TP_POOL_STACK_INFORMATION._pack_ = 1 # source:False
struct__TP_POOL_STACK_INFORMATION._fields_ = [
    ('StackReserve', ctypes.c_uint64),
    ('StackCommit', ctypes.c_uint64),
]

TP_POOL_STACK_INFORMATION = struct__TP_POOL_STACK_INFORMATION
PTP_POOL_STACK_INFORMATION = ctypes.POINTER(struct__TP_POOL_STACK_INFORMATION)
class struct__TP_CLEANUP_GROUP(Structure):
    pass

TP_CLEANUP_GROUP = struct__TP_CLEANUP_GROUP
PTP_CLEANUP_GROUP = ctypes.POINTER(struct__TP_CLEANUP_GROUP)
PTP_CLEANUP_GROUP_CANCEL_CALLBACK = ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.POINTER(None))
class struct__ACTIVATION_CONTEXT(Structure):
    pass

class struct__8C32E5D3ED1763EA38B94549972C5F20(Structure):
    pass

struct__8C32E5D3ED1763EA38B94549972C5F20._pack_ = 1 # source:False
struct__8C32E5D3ED1763EA38B94549972C5F20._fields_ = [
    ('LongFunction', ctypes.c_uint32, 1),
    ('Persistent', ctypes.c_uint32, 1),
    ('Private', ctypes.c_uint32, 30),
]

class union__TP_CALLBACK_ENVIRON_V3___34B3E5F5CB73BCB2FAADC1B6818ABE8D(Union):
    pass

union__TP_CALLBACK_ENVIRON_V3___34B3E5F5CB73BCB2FAADC1B6818ABE8D._pack_ = 1 # source:False
union__TP_CALLBACK_ENVIRON_V3___34B3E5F5CB73BCB2FAADC1B6818ABE8D._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('s', struct__8C32E5D3ED1763EA38B94549972C5F20),
]

class struct__TP_CALLBACK_ENVIRON_V3(Structure):
    pass

struct__TP_CALLBACK_ENVIRON_V3._pack_ = 1 # source:False
struct__TP_CALLBACK_ENVIRON_V3._fields_ = [
    ('Version', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('Pool', ctypes.POINTER(struct__TP_POOL)),
    ('CleanupGroup', ctypes.POINTER(struct__TP_CLEANUP_GROUP)),
    ('CleanupGroupCancelCallback', ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.POINTER(None))),
    ('RaceDll', ctypes.POINTER(None)),
    ('ActivationContext', ctypes.POINTER(struct__ACTIVATION_CONTEXT)),
    ('FinalizationCallback', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct__TP_CALLBACK_INSTANCE), ctypes.POINTER(None))),
    ('u', union__TP_CALLBACK_ENVIRON_V3___34B3E5F5CB73BCB2FAADC1B6818ABE8D),
    ('CallbackPriority', TP_CALLBACK_PRIORITY),
    ('Size', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

TP_CALLBACK_ENVIRON_V3 = struct__TP_CALLBACK_ENVIRON_V3
TP_CALLBACK_ENVIRON = struct__TP_CALLBACK_ENVIRON_V3
PTP_CALLBACK_ENVIRON = ctypes.POINTER(struct__TP_CALLBACK_ENVIRON_V3)
class struct__TP_WORK(Structure):
    pass

TP_WORK = struct__TP_WORK
PTP_WORK = ctypes.POINTER(struct__TP_WORK)
PTP_WORK_CALLBACK = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct__TP_CALLBACK_INSTANCE), ctypes.POINTER(None), ctypes.POINTER(struct__TP_WORK))
class struct__TP_TIMER(Structure):
    pass

TP_TIMER = struct__TP_TIMER
PTP_TIMER = ctypes.POINTER(struct__TP_TIMER)
PTP_TIMER_CALLBACK = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct__TP_CALLBACK_INSTANCE), ctypes.POINTER(None), ctypes.POINTER(struct__TP_TIMER))
TP_WAIT_RESULT = ctypes.c_uint32
class struct__TP_WAIT(Structure):
    pass

TP_WAIT = struct__TP_WAIT
PTP_WAIT = ctypes.POINTER(struct__TP_WAIT)
PTP_WAIT_CALLBACK = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct__TP_CALLBACK_INSTANCE), ctypes.POINTER(None), ctypes.POINTER(struct__TP_WAIT), ctypes.c_uint32)
class struct__TP_IO(Structure):
    pass

TP_IO = struct__TP_IO
PTP_IO = ctypes.POINTER(struct__TP_IO)
class struct__TEB(Structure):
    pass

WPARAM = ctypes.c_uint64
LPARAM = ctypes.c_int64
LRESULT = ctypes.c_int64
SPHANDLE = ctypes.POINTER(ctypes.POINTER(None))
LPHANDLE = ctypes.POINTER(ctypes.POINTER(None))
HGLOBAL = ctypes.POINTER(None)
HLOCAL = ctypes.POINTER(None)
GLOBALHANDLE = ctypes.POINTER(None)
LOCALHANDLE = ctypes.POINTER(None)
FARPROC = ctypes.CFUNCTYPE(ctypes.c_int64)
NEARPROC = ctypes.CFUNCTYPE(ctypes.c_int64)
PROC = ctypes.CFUNCTYPE(ctypes.c_int64)
ATOM = ctypes.c_uint16
class struct_HKEY__(Structure):
    pass

struct_HKEY__._pack_ = 1 # source:False
struct_HKEY__._fields_ = [
    ('unused', ctypes.c_int32),
]

HKEY = ctypes.POINTER(struct_HKEY__)
PHKEY = ctypes.POINTER(ctypes.POINTER(struct_HKEY__))
class struct_HMETAFILE__(Structure):
    pass

struct_HMETAFILE__._pack_ = 1 # source:False
struct_HMETAFILE__._fields_ = [
    ('unused', ctypes.c_int32),
]

HMETAFILE = ctypes.POINTER(struct_HMETAFILE__)
class struct_HINSTANCE__(Structure):
    pass

struct_HINSTANCE__._pack_ = 1 # source:False
struct_HINSTANCE__._fields_ = [
    ('unused', ctypes.c_int32),
]

HINSTANCE = ctypes.POINTER(struct_HINSTANCE__)
HMODULE = ctypes.POINTER(struct_HINSTANCE__)
class struct_HRGN__(Structure):
    pass

struct_HRGN__._pack_ = 1 # source:False
struct_HRGN__._fields_ = [
    ('unused', ctypes.c_int32),
]

HRGN = ctypes.POINTER(struct_HRGN__)
class struct_HRSRC__(Structure):
    pass

struct_HRSRC__._pack_ = 1 # source:False
struct_HRSRC__._fields_ = [
    ('unused', ctypes.c_int32),
]

HRSRC = ctypes.POINTER(struct_HRSRC__)
class struct_HSPRITE__(Structure):
    pass

struct_HSPRITE__._pack_ = 1 # source:False
struct_HSPRITE__._fields_ = [
    ('unused', ctypes.c_int32),
]

HSPRITE = ctypes.POINTER(struct_HSPRITE__)
class struct_HLSURF__(Structure):
    pass

struct_HLSURF__._pack_ = 1 # source:False
struct_HLSURF__._fields_ = [
    ('unused', ctypes.c_int32),
]

HLSURF = ctypes.POINTER(struct_HLSURF__)
class struct_HSTR__(Structure):
    pass

struct_HSTR__._pack_ = 1 # source:False
struct_HSTR__._fields_ = [
    ('unused', ctypes.c_int32),
]

HSTR = ctypes.POINTER(struct_HSTR__)
class struct_HTASK__(Structure):
    pass

struct_HTASK__._pack_ = 1 # source:False
struct_HTASK__._fields_ = [
    ('unused', ctypes.c_int32),
]

HTASK = ctypes.POINTER(struct_HTASK__)
class struct_HWINSTA__(Structure):
    pass

struct_HWINSTA__._pack_ = 1 # source:False
struct_HWINSTA__._fields_ = [
    ('unused', ctypes.c_int32),
]

HWINSTA = ctypes.POINTER(struct_HWINSTA__)
class struct_HKL__(Structure):
    pass

struct_HKL__._pack_ = 1 # source:False
struct_HKL__._fields_ = [
    ('unused', ctypes.c_int32),
]

HKL = ctypes.POINTER(struct_HKL__)
HFILE = ctypes.c_int32
class struct__FILETIME(Structure):
    pass

struct__FILETIME._pack_ = 1 # source:False
struct__FILETIME._fields_ = [
    ('dwLowDateTime', ctypes.c_uint32),
    ('dwHighDateTime', ctypes.c_uint32),
]

FILETIME = struct__FILETIME
PFILETIME = ctypes.POINTER(struct__FILETIME)
LPFILETIME = ctypes.POINTER(struct__FILETIME)
class struct_HWND__(Structure):
    pass

struct_HWND__._pack_ = 1 # source:False
struct_HWND__._fields_ = [
    ('unused', ctypes.c_int32),
]

HWND = ctypes.POINTER(struct_HWND__)
class struct_HHOOK__(Structure):
    pass

struct_HHOOK__._pack_ = 1 # source:False
struct_HHOOK__._fields_ = [
    ('unused', ctypes.c_int32),
]

HHOOK = ctypes.POINTER(struct_HHOOK__)
HGDIOBJ = ctypes.POINTER(None)
class struct_HACCEL__(Structure):
    pass

struct_HACCEL__._pack_ = 1 # source:False
struct_HACCEL__._fields_ = [
    ('unused', ctypes.c_int32),
]

HACCEL = ctypes.POINTER(struct_HACCEL__)
class struct_HBITMAP__(Structure):
    pass

struct_HBITMAP__._pack_ = 1 # source:False
struct_HBITMAP__._fields_ = [
    ('unused', ctypes.c_int32),
]

HBITMAP = ctypes.POINTER(struct_HBITMAP__)
class struct_HBRUSH__(Structure):
    pass

struct_HBRUSH__._pack_ = 1 # source:False
struct_HBRUSH__._fields_ = [
    ('unused', ctypes.c_int32),
]

HBRUSH = ctypes.POINTER(struct_HBRUSH__)
class struct_HCOLORSPACE__(Structure):
    pass

struct_HCOLORSPACE__._pack_ = 1 # source:False
struct_HCOLORSPACE__._fields_ = [
    ('unused', ctypes.c_int32),
]

HCOLORSPACE = ctypes.POINTER(struct_HCOLORSPACE__)
class struct_HDC__(Structure):
    pass

struct_HDC__._pack_ = 1 # source:False
struct_HDC__._fields_ = [
    ('unused', ctypes.c_int32),
]

HDC = ctypes.POINTER(struct_HDC__)
class struct_HGLRC__(Structure):
    pass

struct_HGLRC__._pack_ = 1 # source:False
struct_HGLRC__._fields_ = [
    ('unused', ctypes.c_int32),
]

HGLRC = ctypes.POINTER(struct_HGLRC__)
class struct_HDESK__(Structure):
    pass

struct_HDESK__._pack_ = 1 # source:False
struct_HDESK__._fields_ = [
    ('unused', ctypes.c_int32),
]

HDESK = ctypes.POINTER(struct_HDESK__)
class struct_HENHMETAFILE__(Structure):
    pass

struct_HENHMETAFILE__._pack_ = 1 # source:False
struct_HENHMETAFILE__._fields_ = [
    ('unused', ctypes.c_int32),
]

HENHMETAFILE = ctypes.POINTER(struct_HENHMETAFILE__)
class struct_HFONT__(Structure):
    pass

struct_HFONT__._pack_ = 1 # source:False
struct_HFONT__._fields_ = [
    ('unused', ctypes.c_int32),
]

HFONT = ctypes.POINTER(struct_HFONT__)
class struct_HICON__(Structure):
    pass

struct_HICON__._pack_ = 1 # source:False
struct_HICON__._fields_ = [
    ('unused', ctypes.c_int32),
]

HICON = ctypes.POINTER(struct_HICON__)
class struct_HMENU__(Structure):
    pass

struct_HMENU__._pack_ = 1 # source:False
struct_HMENU__._fields_ = [
    ('unused', ctypes.c_int32),
]

HMENU = ctypes.POINTER(struct_HMENU__)
class struct_HPALETTE__(Structure):
    pass

struct_HPALETTE__._pack_ = 1 # source:False
struct_HPALETTE__._fields_ = [
    ('unused', ctypes.c_int32),
]

HPALETTE = ctypes.POINTER(struct_HPALETTE__)
class struct_HPEN__(Structure):
    pass

struct_HPEN__._pack_ = 1 # source:False
struct_HPEN__._fields_ = [
    ('unused', ctypes.c_int32),
]

HPEN = ctypes.POINTER(struct_HPEN__)
class struct_HWINEVENTHOOK__(Structure):
    pass

struct_HWINEVENTHOOK__._pack_ = 1 # source:False
struct_HWINEVENTHOOK__._fields_ = [
    ('unused', ctypes.c_int32),
]

HWINEVENTHOOK = ctypes.POINTER(struct_HWINEVENTHOOK__)
class struct_HMONITOR__(Structure):
    pass

struct_HMONITOR__._pack_ = 1 # source:False
struct_HMONITOR__._fields_ = [
    ('unused', ctypes.c_int32),
]

HMONITOR = ctypes.POINTER(struct_HMONITOR__)
class struct_HUMPD__(Structure):
    pass

struct_HUMPD__._pack_ = 1 # source:False
struct_HUMPD__._fields_ = [
    ('unused', ctypes.c_int32),
]

HUMPD = ctypes.POINTER(struct_HUMPD__)
HCURSOR = ctypes.POINTER(struct_HICON__)
COLORREF = ctypes.c_uint32
LPCOLORREF = ctypes.POINTER(ctypes.c_uint32)
class struct_tagRECT(Structure):
    pass

struct_tagRECT._pack_ = 1 # source:False
struct_tagRECT._fields_ = [
    ('left', ctypes.c_int32),
    ('top', ctypes.c_int32),
    ('right', ctypes.c_int32),
    ('bottom', ctypes.c_int32),
]

RECT = struct_tagRECT
PRECT = ctypes.POINTER(struct_tagRECT)
NPRECT = ctypes.POINTER(struct_tagRECT)
LPRECT = ctypes.POINTER(struct_tagRECT)
LPCRECT = ctypes.POINTER(struct_tagRECT)
class struct__RECTL(Structure):
    pass

struct__RECTL._pack_ = 1 # source:False
struct__RECTL._fields_ = [
    ('left', ctypes.c_int32),
    ('top', ctypes.c_int32),
    ('right', ctypes.c_int32),
    ('bottom', ctypes.c_int32),
]

RECTL = struct__RECTL
PRECTL = ctypes.POINTER(struct__RECTL)
LPRECTL = ctypes.POINTER(struct__RECTL)
LPCRECTL = ctypes.POINTER(struct__RECTL)
class struct_tagPOINT(Structure):
    pass

struct_tagPOINT._pack_ = 1 # source:False
struct_tagPOINT._fields_ = [
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
]

POINT = struct_tagPOINT
PPOINT = ctypes.POINTER(struct_tagPOINT)
NPPOINT = ctypes.POINTER(struct_tagPOINT)
LPPOINT = ctypes.POINTER(struct_tagPOINT)
class struct__POINTL(Structure):
    pass

struct__POINTL._pack_ = 1 # source:False
struct__POINTL._fields_ = [
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
]

POINTL = struct__POINTL
PPOINTL = ctypes.POINTER(struct__POINTL)
class struct_tagSIZE(Structure):
    pass

struct_tagSIZE._pack_ = 1 # source:False
struct_tagSIZE._fields_ = [
    ('cx', ctypes.c_int32),
    ('cy', ctypes.c_int32),
]

SIZE = struct_tagSIZE
PSIZE = ctypes.POINTER(struct_tagSIZE)
LPSIZE = ctypes.POINTER(struct_tagSIZE)
SIZEL = struct_tagSIZE
PSIZEL = ctypes.POINTER(struct_tagSIZE)
LPSIZEL = ctypes.POINTER(struct_tagSIZE)
class struct_tagPOINTS(Structure):
    pass

struct_tagPOINTS._pack_ = 1 # source:False
struct_tagPOINTS._fields_ = [
    ('x', ctypes.c_int16),
    ('y', ctypes.c_int16),
]

POINTS = struct_tagPOINTS
PPOINTS = ctypes.POINTER(struct_tagPOINTS)
LPPOINTS = ctypes.POINTER(struct_tagPOINTS)
class struct_APP_LOCAL_DEVICE_ID(Structure):
    pass

struct_APP_LOCAL_DEVICE_ID._pack_ = 1 # source:False
struct_APP_LOCAL_DEVICE_ID._fields_ = [
    ('value', ctypes.c_ubyte * 32),
]

class struct_DPI_AWARENESS_CONTEXT__(Structure):
    pass

struct_DPI_AWARENESS_CONTEXT__._pack_ = 1 # source:False
struct_DPI_AWARENESS_CONTEXT__._fields_ = [
    ('unused', ctypes.c_int32),
]

DPI_AWARENESS_CONTEXT = ctypes.POINTER(struct_DPI_AWARENESS_CONTEXT__)

# values for enumeration 'DPI_AWARENESS'
DPI_AWARENESS__enumvalues = {
    4294967295: 'DPI_AWARENESS_INVALID',
    0: 'DPI_AWARENESS_UNAWARE',
    1: 'DPI_AWARENESS_SYSTEM_AWARE',
    2: 'DPI_AWARENESS_PER_MONITOR_AWARE',
}
DPI_AWARENESS_INVALID = 4294967295
DPI_AWARENESS_UNAWARE = 0
DPI_AWARENESS_SYSTEM_AWARE = 1
DPI_AWARENESS_PER_MONITOR_AWARE = 2
DPI_AWARENESS = ctypes.c_uint32 # enum

# values for enumeration 'DPI_HOSTING_BEHAVIOR'
DPI_HOSTING_BEHAVIOR__enumvalues = {
    4294967295: 'DPI_HOSTING_BEHAVIOR_INVALID',
    0: 'DPI_HOSTING_BEHAVIOR_DEFAULT',
    1: 'DPI_HOSTING_BEHAVIOR_MIXED',
}
DPI_HOSTING_BEHAVIOR_INVALID = 4294967295
DPI_HOSTING_BEHAVIOR_DEFAULT = 0
DPI_HOSTING_BEHAVIOR_MIXED = 1
DPI_HOSTING_BEHAVIOR = ctypes.c_uint32 # enum
class struct__SECURITY_ATTRIBUTES(Structure):
    pass

struct__SECURITY_ATTRIBUTES._pack_ = 1 # source:False
struct__SECURITY_ATTRIBUTES._fields_ = [
    ('nLength', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpSecurityDescriptor', ctypes.POINTER(None)),
    ('bInheritHandle', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

SECURITY_ATTRIBUTES = struct__SECURITY_ATTRIBUTES
PSECURITY_ATTRIBUTES = ctypes.POINTER(struct__SECURITY_ATTRIBUTES)
LPSECURITY_ATTRIBUTES = ctypes.POINTER(struct__SECURITY_ATTRIBUTES)
class struct__886A00C7AD3FD5ED6211727A2251497A(Structure):
    pass

struct__886A00C7AD3FD5ED6211727A2251497A._pack_ = 1 # source:False
struct__886A00C7AD3FD5ED6211727A2251497A._fields_ = [
    ('Offset', ctypes.c_uint32),
    ('OffsetHigh', ctypes.c_uint32),
]

class union__OVERLAPPED___6E7EFA1536A982BE75506BE32C556979(Union):
    pass

class struct__OVERLAPPED___6E7EFA1536A982BE75506BE32C556979_0(Structure):
    pass

struct__OVERLAPPED___6E7EFA1536A982BE75506BE32C556979_0._pack_ = 1 # source:False
struct__OVERLAPPED___6E7EFA1536A982BE75506BE32C556979_0._fields_ = [
    ('Offset', ctypes.c_uint32),
    ('OffsetHigh', ctypes.c_uint32),
]

union__OVERLAPPED___6E7EFA1536A982BE75506BE32C556979._pack_ = 1 # source:False
union__OVERLAPPED___6E7EFA1536A982BE75506BE32C556979._anonymous_ = ('_0',)
union__OVERLAPPED___6E7EFA1536A982BE75506BE32C556979._fields_ = [
    ('_0', struct__OVERLAPPED___6E7EFA1536A982BE75506BE32C556979_0),
    ('Pointer', ctypes.POINTER(None)),
]

class struct__OVERLAPPED(Structure):
    pass

class union__OVERLAPPED_0(Union):
    pass

class struct__OVERLAPPED_0_0(Structure):
    pass

struct__OVERLAPPED_0_0._pack_ = 1 # source:False
struct__OVERLAPPED_0_0._fields_ = [
    ('Offset', ctypes.c_uint32),
    ('OffsetHigh', ctypes.c_uint32),
]

union__OVERLAPPED_0._pack_ = 1 # source:False
union__OVERLAPPED_0._anonymous_ = ('_0',)
union__OVERLAPPED_0._fields_ = [
    ('_0', struct__OVERLAPPED_0_0),
    ('Pointer', ctypes.POINTER(None)),
]

struct__OVERLAPPED._pack_ = 1 # source:False
struct__OVERLAPPED._anonymous_ = ('_0',)
struct__OVERLAPPED._fields_ = [
    ('Internal', ctypes.c_uint64),
    ('InternalHigh', ctypes.c_uint64),
    ('_0', union__OVERLAPPED_0),
    ('hEvent', ctypes.POINTER(None)),
]

OVERLAPPED = struct__OVERLAPPED
LPOVERLAPPED = ctypes.POINTER(struct__OVERLAPPED)
class struct__OVERLAPPED_ENTRY(Structure):
    pass

struct__OVERLAPPED_ENTRY._pack_ = 1 # source:False
struct__OVERLAPPED_ENTRY._fields_ = [
    ('lpCompletionKey', ctypes.c_uint64),
    ('lpOverlapped', ctypes.POINTER(struct__OVERLAPPED)),
    ('Internal', ctypes.c_uint64),
    ('dwNumberOfBytesTransferred', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

OVERLAPPED_ENTRY = struct__OVERLAPPED_ENTRY
LPOVERLAPPED_ENTRY = ctypes.POINTER(struct__OVERLAPPED_ENTRY)
class struct__SYSTEMTIME(Structure):
    pass

struct__SYSTEMTIME._pack_ = 1 # source:False
struct__SYSTEMTIME._fields_ = [
    ('wYear', ctypes.c_uint16),
    ('wMonth', ctypes.c_uint16),
    ('wDayOfWeek', ctypes.c_uint16),
    ('wDay', ctypes.c_uint16),
    ('wHour', ctypes.c_uint16),
    ('wMinute', ctypes.c_uint16),
    ('wSecond', ctypes.c_uint16),
    ('wMilliseconds', ctypes.c_uint16),
]

SYSTEMTIME = struct__SYSTEMTIME
PSYSTEMTIME = ctypes.POINTER(struct__SYSTEMTIME)
LPSYSTEMTIME = ctypes.POINTER(struct__SYSTEMTIME)
class struct__WIN32_FIND_DATAA(Structure):
    pass

struct__WIN32_FIND_DATAA._pack_ = 1 # source:False
struct__WIN32_FIND_DATAA._fields_ = [
    ('dwFileAttributes', ctypes.c_uint32),
    ('ftCreationTime', FILETIME),
    ('ftLastAccessTime', FILETIME),
    ('ftLastWriteTime', FILETIME),
    ('nFileSizeHigh', ctypes.c_uint32),
    ('nFileSizeLow', ctypes.c_uint32),
    ('dwReserved0', ctypes.c_uint32),
    ('dwReserved1', ctypes.c_uint32),
    ('cFileName', ctypes.c_char * 260),
    ('cAlternateFileName', ctypes.c_char * 14),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

WIN32_FIND_DATAA = struct__WIN32_FIND_DATAA
PWIN32_FIND_DATAA = ctypes.POINTER(struct__WIN32_FIND_DATAA)
LPWIN32_FIND_DATAA = ctypes.POINTER(struct__WIN32_FIND_DATAA)
class struct__WIN32_FIND_DATAW(Structure):
    pass

struct__WIN32_FIND_DATAW._pack_ = 1 # source:False
struct__WIN32_FIND_DATAW._fields_ = [
    ('dwFileAttributes', ctypes.c_uint32),
    ('ftCreationTime', FILETIME),
    ('ftLastAccessTime', FILETIME),
    ('ftLastWriteTime', FILETIME),
    ('nFileSizeHigh', ctypes.c_uint32),
    ('nFileSizeLow', ctypes.c_uint32),
    ('dwReserved0', ctypes.c_uint32),
    ('dwReserved1', ctypes.c_uint32),
    ('cFileName', ctypes.c_int16 * 260),
    ('cAlternateFileName', ctypes.c_int16 * 14),
]

WIN32_FIND_DATAW = struct__WIN32_FIND_DATAW
PWIN32_FIND_DATAW = ctypes.POINTER(struct__WIN32_FIND_DATAW)
LPWIN32_FIND_DATAW = ctypes.POINTER(struct__WIN32_FIND_DATAW)
WIN32_FIND_DATA = struct__WIN32_FIND_DATAA
PWIN32_FIND_DATA = ctypes.POINTER(struct__WIN32_FIND_DATAA)
LPWIN32_FIND_DATA = ctypes.POINTER(struct__WIN32_FIND_DATAA)

# values for enumeration '_FINDEX_INFO_LEVELS'
_FINDEX_INFO_LEVELS__enumvalues = {
    0: 'FindExInfoStandard',
    1: 'FindExInfoBasic',
    2: 'FindExInfoMaxInfoLevel',
}
FindExInfoStandard = 0
FindExInfoBasic = 1
FindExInfoMaxInfoLevel = 2
_FINDEX_INFO_LEVELS = ctypes.c_uint32 # enum
FINDEX_INFO_LEVELS = _FINDEX_INFO_LEVELS
FINDEX_INFO_LEVELS__enumvalues = _FINDEX_INFO_LEVELS__enumvalues

# values for enumeration '_FINDEX_SEARCH_OPS'
_FINDEX_SEARCH_OPS__enumvalues = {
    0: 'FindExSearchNameMatch',
    1: 'FindExSearchLimitToDirectories',
    2: 'FindExSearchLimitToDevices',
    3: 'FindExSearchMaxSearchOp',
}
FindExSearchNameMatch = 0
FindExSearchLimitToDirectories = 1
FindExSearchLimitToDevices = 2
FindExSearchMaxSearchOp = 3
_FINDEX_SEARCH_OPS = ctypes.c_uint32 # enum
FINDEX_SEARCH_OPS = _FINDEX_SEARCH_OPS
FINDEX_SEARCH_OPS__enumvalues = _FINDEX_SEARCH_OPS__enumvalues

# values for enumeration '_READ_DIRECTORY_NOTIFY_INFORMATION_CLASS'
_READ_DIRECTORY_NOTIFY_INFORMATION_CLASS__enumvalues = {
    1: 'ReadDirectoryNotifyInformation',
    2: 'ReadDirectoryNotifyExtendedInformation',
}
ReadDirectoryNotifyInformation = 1
ReadDirectoryNotifyExtendedInformation = 2
_READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = ctypes.c_uint32 # enum
READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS
READ_DIRECTORY_NOTIFY_INFORMATION_CLASS__enumvalues = _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS__enumvalues
PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS = ctypes.POINTER(_READ_DIRECTORY_NOTIFY_INFORMATION_CLASS)

# values for enumeration '_GET_FILEEX_INFO_LEVELS'
_GET_FILEEX_INFO_LEVELS__enumvalues = {
    0: 'GetFileExInfoStandard',
    1: 'GetFileExMaxInfoLevel',
}
GetFileExInfoStandard = 0
GetFileExMaxInfoLevel = 1
_GET_FILEEX_INFO_LEVELS = ctypes.c_uint32 # enum
GET_FILEEX_INFO_LEVELS = _GET_FILEEX_INFO_LEVELS
GET_FILEEX_INFO_LEVELS__enumvalues = _GET_FILEEX_INFO_LEVELS__enumvalues

# values for enumeration '_FILE_INFO_BY_HANDLE_CLASS'
_FILE_INFO_BY_HANDLE_CLASS__enumvalues = {
    0: 'FileBasicInfo',
    1: 'FileStandardInfo',
    2: 'FileNameInfo',
    3: 'FileRenameInfo',
    4: 'FileDispositionInfo',
    5: 'FileAllocationInfo',
    6: 'FileEndOfFileInfo',
    7: 'FileStreamInfo',
    8: 'FileCompressionInfo',
    9: 'FileAttributeTagInfo',
    10: 'FileIdBothDirectoryInfo',
    11: 'FileIdBothDirectoryRestartInfo',
    12: 'FileIoPriorityHintInfo',
    13: 'FileRemoteProtocolInfo',
    14: 'FileFullDirectoryInfo',
    15: 'FileFullDirectoryRestartInfo',
    16: 'FileStorageInfo',
    17: 'FileAlignmentInfo',
    18: 'FileIdInfo',
    19: 'FileIdExtdDirectoryInfo',
    20: 'FileIdExtdDirectoryRestartInfo',
    21: 'FileDispositionInfoEx',
    22: 'FileRenameInfoEx',
    23: 'FileCaseSensitiveInfo',
    24: 'FileNormalizedNameInfo',
    25: 'MaximumFileInfoByHandleClass',
}
FileBasicInfo = 0
FileStandardInfo = 1
FileNameInfo = 2
FileRenameInfo = 3
FileDispositionInfo = 4
FileAllocationInfo = 5
FileEndOfFileInfo = 6
FileStreamInfo = 7
FileCompressionInfo = 8
FileAttributeTagInfo = 9
FileIdBothDirectoryInfo = 10
FileIdBothDirectoryRestartInfo = 11
FileIoPriorityHintInfo = 12
FileRemoteProtocolInfo = 13
FileFullDirectoryInfo = 14
FileFullDirectoryRestartInfo = 15
FileStorageInfo = 16
FileAlignmentInfo = 17
FileIdInfo = 18
FileIdExtdDirectoryInfo = 19
FileIdExtdDirectoryRestartInfo = 20
FileDispositionInfoEx = 21
FileRenameInfoEx = 22
FileCaseSensitiveInfo = 23
FileNormalizedNameInfo = 24
MaximumFileInfoByHandleClass = 25
_FILE_INFO_BY_HANDLE_CLASS = ctypes.c_uint32 # enum
FILE_INFO_BY_HANDLE_CLASS = _FILE_INFO_BY_HANDLE_CLASS
FILE_INFO_BY_HANDLE_CLASS__enumvalues = _FILE_INFO_BY_HANDLE_CLASS__enumvalues
PFILE_INFO_BY_HANDLE_CLASS = ctypes.POINTER(_FILE_INFO_BY_HANDLE_CLASS)
CRITICAL_SECTION = struct__RTL_CRITICAL_SECTION
PCRITICAL_SECTION = ctypes.POINTER(struct__RTL_CRITICAL_SECTION)
LPCRITICAL_SECTION = ctypes.POINTER(struct__RTL_CRITICAL_SECTION)
CRITICAL_SECTION_DEBUG = struct__RTL_CRITICAL_SECTION_DEBUG
PCRITICAL_SECTION_DEBUG = ctypes.POINTER(struct__RTL_CRITICAL_SECTION_DEBUG)
LPCRITICAL_SECTION_DEBUG = ctypes.POINTER(struct__RTL_CRITICAL_SECTION_DEBUG)
LPOVERLAPPED_COMPLETION_ROUTINE = ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct__OVERLAPPED))
class struct__B9BB00CEA97BDADE89FFFB3C7975CC01(Structure):
    pass

struct__B9BB00CEA97BDADE89FFFB3C7975CC01._pack_ = 1 # source:False
struct__B9BB00CEA97BDADE89FFFB3C7975CC01._fields_ = [
    ('hMem', ctypes.POINTER(None)),
    ('dwReserved', ctypes.c_uint32 * 3),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct__691F71A9C2F82EA661D68B88C7ECA40D(Structure):
    pass

struct__691F71A9C2F82EA661D68B88C7ECA40D._pack_ = 1 # source:False
struct__691F71A9C2F82EA661D68B88C7ECA40D._fields_ = [
    ('dwCommittedSize', ctypes.c_uint32),
    ('dwUnCommittedSize', ctypes.c_uint32),
    ('lpFirstBlock', ctypes.POINTER(None)),
    ('lpLastBlock', ctypes.POINTER(None)),
]

class union__PROCESS_HEAP_ENTRY___FFEE264ECE09353B104F318C8E03795B(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Block', struct__B9BB00CEA97BDADE89FFFB3C7975CC01),
    ('Region', struct__691F71A9C2F82EA661D68B88C7ECA40D),
     ]

class struct__PROCESS_HEAP_ENTRY(Structure):
    pass

class union__PROCESS_HEAP_ENTRY_0(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Block', struct__B9BB00CEA97BDADE89FFFB3C7975CC01),
    ('Region', struct__691F71A9C2F82EA661D68B88C7ECA40D),
     ]

struct__PROCESS_HEAP_ENTRY._pack_ = 1 # source:False
struct__PROCESS_HEAP_ENTRY._anonymous_ = ('_0',)
struct__PROCESS_HEAP_ENTRY._fields_ = [
    ('lpData', ctypes.POINTER(None)),
    ('cbData', ctypes.c_uint32),
    ('cbOverhead', ctypes.c_ubyte),
    ('iRegionIndex', ctypes.c_ubyte),
    ('wFlags', ctypes.c_uint16),
    ('_0', union__PROCESS_HEAP_ENTRY_0),
]

PROCESS_HEAP_ENTRY = struct__PROCESS_HEAP_ENTRY
LPPROCESS_HEAP_ENTRY = ctypes.POINTER(struct__PROCESS_HEAP_ENTRY)
PPROCESS_HEAP_ENTRY = ctypes.POINTER(struct__PROCESS_HEAP_ENTRY)
class struct__5CBA49B7A25A0EA2C39238CAAE52EFD4(Structure):
    pass

struct__5CBA49B7A25A0EA2C39238CAAE52EFD4._pack_ = 1 # source:False
struct__5CBA49B7A25A0EA2C39238CAAE52EFD4._fields_ = [
    ('LocalizedReasonModule', ctypes.POINTER(struct_HINSTANCE__)),
    ('LocalizedReasonId', ctypes.c_uint32),
    ('ReasonStringCount', ctypes.c_uint32),
    ('ReasonStrings', ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))),
]

class union__REASON_CONTEXT___07FAF44D955D57A82DC73DBC6D1E4962(Union):
    pass

union__REASON_CONTEXT___07FAF44D955D57A82DC73DBC6D1E4962._pack_ = 1 # source:False
union__REASON_CONTEXT___07FAF44D955D57A82DC73DBC6D1E4962._fields_ = [
    ('Detailed', struct__5CBA49B7A25A0EA2C39238CAAE52EFD4),
    ('SimpleReasonString', ctypes.POINTER(ctypes.c_int16)),
    ('PADDING_0', ctypes.c_ubyte * 16),
]

class struct__REASON_CONTEXT(Structure):
    pass

struct__REASON_CONTEXT._pack_ = 1 # source:False
struct__REASON_CONTEXT._fields_ = [
    ('Version', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('Reason', union__REASON_CONTEXT___07FAF44D955D57A82DC73DBC6D1E4962),
]

REASON_CONTEXT = struct__REASON_CONTEXT
PREASON_CONTEXT = ctypes.POINTER(struct__REASON_CONTEXT)
PTHREAD_START_ROUTINE = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None))
LPTHREAD_START_ROUTINE = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None))
PENCLAVE_ROUTINE = ctypes.CFUNCTYPE(ctypes.POINTER(None), ctypes.POINTER(None))
LPENCLAVE_ROUTINE = ctypes.CFUNCTYPE(ctypes.POINTER(None), ctypes.POINTER(None))
class struct__EXCEPTION_DEBUG_INFO(Structure):
    pass

struct__EXCEPTION_DEBUG_INFO._pack_ = 1 # source:False
struct__EXCEPTION_DEBUG_INFO._fields_ = [
    ('ExceptionRecord', EXCEPTION_RECORD),
    ('dwFirstChance', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

EXCEPTION_DEBUG_INFO = struct__EXCEPTION_DEBUG_INFO
LPEXCEPTION_DEBUG_INFO = ctypes.POINTER(struct__EXCEPTION_DEBUG_INFO)
class struct__CREATE_THREAD_DEBUG_INFO(Structure):
    pass

struct__CREATE_THREAD_DEBUG_INFO._pack_ = 1 # source:False
struct__CREATE_THREAD_DEBUG_INFO._fields_ = [
    ('hThread', ctypes.POINTER(None)),
    ('lpThreadLocalBase', ctypes.POINTER(None)),
    ('lpStartAddress', ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None))),
]

CREATE_THREAD_DEBUG_INFO = struct__CREATE_THREAD_DEBUG_INFO
LPCREATE_THREAD_DEBUG_INFO = ctypes.POINTER(struct__CREATE_THREAD_DEBUG_INFO)
class struct__CREATE_PROCESS_DEBUG_INFO(Structure):
    pass

struct__CREATE_PROCESS_DEBUG_INFO._pack_ = 1 # source:False
struct__CREATE_PROCESS_DEBUG_INFO._fields_ = [
    ('hFile', ctypes.POINTER(None)),
    ('hProcess', ctypes.POINTER(None)),
    ('hThread', ctypes.POINTER(None)),
    ('lpBaseOfImage', ctypes.POINTER(None)),
    ('dwDebugInfoFileOffset', ctypes.c_uint32),
    ('nDebugInfoSize', ctypes.c_uint32),
    ('lpThreadLocalBase', ctypes.POINTER(None)),
    ('lpStartAddress', ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None))),
    ('lpImageName', ctypes.POINTER(None)),
    ('fUnicode', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

CREATE_PROCESS_DEBUG_INFO = struct__CREATE_PROCESS_DEBUG_INFO
LPCREATE_PROCESS_DEBUG_INFO = ctypes.POINTER(struct__CREATE_PROCESS_DEBUG_INFO)
class struct__EXIT_THREAD_DEBUG_INFO(Structure):
    pass

struct__EXIT_THREAD_DEBUG_INFO._pack_ = 1 # source:False
struct__EXIT_THREAD_DEBUG_INFO._fields_ = [
    ('dwExitCode', ctypes.c_uint32),
]

EXIT_THREAD_DEBUG_INFO = struct__EXIT_THREAD_DEBUG_INFO
LPEXIT_THREAD_DEBUG_INFO = ctypes.POINTER(struct__EXIT_THREAD_DEBUG_INFO)
class struct__EXIT_PROCESS_DEBUG_INFO(Structure):
    pass

struct__EXIT_PROCESS_DEBUG_INFO._pack_ = 1 # source:False
struct__EXIT_PROCESS_DEBUG_INFO._fields_ = [
    ('dwExitCode', ctypes.c_uint32),
]

EXIT_PROCESS_DEBUG_INFO = struct__EXIT_PROCESS_DEBUG_INFO
LPEXIT_PROCESS_DEBUG_INFO = ctypes.POINTER(struct__EXIT_PROCESS_DEBUG_INFO)
class struct__LOAD_DLL_DEBUG_INFO(Structure):
    pass

struct__LOAD_DLL_DEBUG_INFO._pack_ = 1 # source:False
struct__LOAD_DLL_DEBUG_INFO._fields_ = [
    ('hFile', ctypes.POINTER(None)),
    ('lpBaseOfDll', ctypes.POINTER(None)),
    ('dwDebugInfoFileOffset', ctypes.c_uint32),
    ('nDebugInfoSize', ctypes.c_uint32),
    ('lpImageName', ctypes.POINTER(None)),
    ('fUnicode', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

LOAD_DLL_DEBUG_INFO = struct__LOAD_DLL_DEBUG_INFO
LPLOAD_DLL_DEBUG_INFO = ctypes.POINTER(struct__LOAD_DLL_DEBUG_INFO)
class struct__UNLOAD_DLL_DEBUG_INFO(Structure):
    pass

struct__UNLOAD_DLL_DEBUG_INFO._pack_ = 1 # source:False
struct__UNLOAD_DLL_DEBUG_INFO._fields_ = [
    ('lpBaseOfDll', ctypes.POINTER(None)),
]

UNLOAD_DLL_DEBUG_INFO = struct__UNLOAD_DLL_DEBUG_INFO
LPUNLOAD_DLL_DEBUG_INFO = ctypes.POINTER(struct__UNLOAD_DLL_DEBUG_INFO)
class struct__OUTPUT_DEBUG_STRING_INFO(Structure):
    pass

struct__OUTPUT_DEBUG_STRING_INFO._pack_ = 1 # source:False
struct__OUTPUT_DEBUG_STRING_INFO._fields_ = [
    ('lpDebugStringData', ctypes.POINTER(ctypes.c_char)),
    ('fUnicode', ctypes.c_uint16),
    ('nDebugStringLength', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

OUTPUT_DEBUG_STRING_INFO = struct__OUTPUT_DEBUG_STRING_INFO
LPOUTPUT_DEBUG_STRING_INFO = ctypes.POINTER(struct__OUTPUT_DEBUG_STRING_INFO)
class struct__RIP_INFO(Structure):
    pass

struct__RIP_INFO._pack_ = 1 # source:False
struct__RIP_INFO._fields_ = [
    ('dwError', ctypes.c_uint32),
    ('dwType', ctypes.c_uint32),
]

RIP_INFO = struct__RIP_INFO
LPRIP_INFO = ctypes.POINTER(struct__RIP_INFO)
class union__DEBUG_EVENT___0BAA10E6C7131A6C8731CA0719364B74(Union):
    pass

union__DEBUG_EVENT___0BAA10E6C7131A6C8731CA0719364B74._pack_ = 1 # source:False
union__DEBUG_EVENT___0BAA10E6C7131A6C8731CA0719364B74._fields_ = [
    ('Exception', EXCEPTION_DEBUG_INFO),
    ('CreateThread', CREATE_THREAD_DEBUG_INFO),
    ('CreateProcessInfo', CREATE_PROCESS_DEBUG_INFO),
    ('ExitThread', EXIT_THREAD_DEBUG_INFO),
    ('ExitProcess', EXIT_PROCESS_DEBUG_INFO),
    ('LoadDll', LOAD_DLL_DEBUG_INFO),
    ('UnloadDll', UNLOAD_DLL_DEBUG_INFO),
    ('DebugString', OUTPUT_DEBUG_STRING_INFO),
    ('RipInfo', RIP_INFO),
    ('PADDING_0', ctypes.c_ubyte * 152),
]

class struct__DEBUG_EVENT(Structure):
    pass

struct__DEBUG_EVENT._pack_ = 1 # source:False
struct__DEBUG_EVENT._fields_ = [
    ('dwDebugEventCode', ctypes.c_uint32),
    ('dwProcessId', ctypes.c_uint32),
    ('dwThreadId', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('u', union__DEBUG_EVENT___0BAA10E6C7131A6C8731CA0719364B74),
]

DEBUG_EVENT = struct__DEBUG_EVENT
LPDEBUG_EVENT = ctypes.POINTER(struct__DEBUG_EVENT)
LPCONTEXT = ctypes.POINTER(struct__CONTEXT)
class struct_DISK_SPACE_INFORMATION(Structure):
    pass

struct_DISK_SPACE_INFORMATION._pack_ = 1 # source:False
struct_DISK_SPACE_INFORMATION._fields_ = [
    ('ActualTotalAllocationUnits', ctypes.c_uint64),
    ('ActualAvailableAllocationUnits', ctypes.c_uint64),
    ('ActualPoolUnavailableAllocationUnits', ctypes.c_uint64),
    ('CallerTotalAllocationUnits', ctypes.c_uint64),
    ('CallerAvailableAllocationUnits', ctypes.c_uint64),
    ('CallerPoolUnavailableAllocationUnits', ctypes.c_uint64),
    ('UsedAllocationUnits', ctypes.c_uint64),
    ('TotalReservedAllocationUnits', ctypes.c_uint64),
    ('VolumeStorageReserveAllocationUnits', ctypes.c_uint64),
    ('AvailableCommittedAllocationUnits', ctypes.c_uint64),
    ('PoolAvailableAllocationUnits', ctypes.c_uint64),
    ('SectorsPerAllocationUnit', ctypes.c_uint32),
    ('BytesPerSector', ctypes.c_uint32),
]

class struct__WIN32_FILE_ATTRIBUTE_DATA(Structure):
    pass

struct__WIN32_FILE_ATTRIBUTE_DATA._pack_ = 1 # source:False
struct__WIN32_FILE_ATTRIBUTE_DATA._fields_ = [
    ('dwFileAttributes', ctypes.c_uint32),
    ('ftCreationTime', FILETIME),
    ('ftLastAccessTime', FILETIME),
    ('ftLastWriteTime', FILETIME),
    ('nFileSizeHigh', ctypes.c_uint32),
    ('nFileSizeLow', ctypes.c_uint32),
]

WIN32_FILE_ATTRIBUTE_DATA = struct__WIN32_FILE_ATTRIBUTE_DATA
LPWIN32_FILE_ATTRIBUTE_DATA = ctypes.POINTER(struct__WIN32_FILE_ATTRIBUTE_DATA)
class struct__BY_HANDLE_FILE_INFORMATION(Structure):
    pass

struct__BY_HANDLE_FILE_INFORMATION._pack_ = 1 # source:False
struct__BY_HANDLE_FILE_INFORMATION._fields_ = [
    ('dwFileAttributes', ctypes.c_uint32),
    ('ftCreationTime', FILETIME),
    ('ftLastAccessTime', FILETIME),
    ('ftLastWriteTime', FILETIME),
    ('dwVolumeSerialNumber', ctypes.c_uint32),
    ('nFileSizeHigh', ctypes.c_uint32),
    ('nFileSizeLow', ctypes.c_uint32),
    ('nNumberOfLinks', ctypes.c_uint32),
    ('nFileIndexHigh', ctypes.c_uint32),
    ('nFileIndexLow', ctypes.c_uint32),
]

BY_HANDLE_FILE_INFORMATION = struct__BY_HANDLE_FILE_INFORMATION
PBY_HANDLE_FILE_INFORMATION = ctypes.POINTER(struct__BY_HANDLE_FILE_INFORMATION)
LPBY_HANDLE_FILE_INFORMATION = ctypes.POINTER(struct__BY_HANDLE_FILE_INFORMATION)
class struct__CREATEFILE2_EXTENDED_PARAMETERS(Structure):
    pass

struct__CREATEFILE2_EXTENDED_PARAMETERS._pack_ = 1 # source:False
struct__CREATEFILE2_EXTENDED_PARAMETERS._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('dwFileAttributes', ctypes.c_uint32),
    ('dwFileFlags', ctypes.c_uint32),
    ('dwSecurityQosFlags', ctypes.c_uint32),
    ('lpSecurityAttributes', ctypes.POINTER(struct__SECURITY_ATTRIBUTES)),
    ('hTemplateFile', ctypes.POINTER(None)),
]

CREATEFILE2_EXTENDED_PARAMETERS = struct__CREATEFILE2_EXTENDED_PARAMETERS
PCREATEFILE2_EXTENDED_PARAMETERS = ctypes.POINTER(struct__CREATEFILE2_EXTENDED_PARAMETERS)
LPCREATEFILE2_EXTENDED_PARAMETERS = ctypes.POINTER(struct__CREATEFILE2_EXTENDED_PARAMETERS)

# values for enumeration '_STREAM_INFO_LEVELS'
_STREAM_INFO_LEVELS__enumvalues = {
    0: 'FindStreamInfoStandard',
    1: 'FindStreamInfoMaxInfoLevel',
}
FindStreamInfoStandard = 0
FindStreamInfoMaxInfoLevel = 1
_STREAM_INFO_LEVELS = ctypes.c_uint32 # enum
STREAM_INFO_LEVELS = _STREAM_INFO_LEVELS
STREAM_INFO_LEVELS__enumvalues = _STREAM_INFO_LEVELS__enumvalues
class struct__WIN32_FIND_STREAM_DATA(Structure):
    pass

struct__WIN32_FIND_STREAM_DATA._pack_ = 1 # source:False
struct__WIN32_FIND_STREAM_DATA._fields_ = [
    ('StreamSize', LARGE_INTEGER),
    ('cStreamName', ctypes.c_int16 * 296),
]

WIN32_FIND_STREAM_DATA = struct__WIN32_FIND_STREAM_DATA
PWIN32_FIND_STREAM_DATA = ctypes.POINTER(struct__WIN32_FIND_STREAM_DATA)
PTOP_LEVEL_EXCEPTION_FILTER = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__EXCEPTION_POINTERS))
LPTOP_LEVEL_EXCEPTION_FILTER = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__EXCEPTION_POINTERS))
class struct__HEAP_SUMMARY(Structure):
    pass

struct__HEAP_SUMMARY._pack_ = 1 # source:False
struct__HEAP_SUMMARY._fields_ = [
    ('cb', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('cbAllocated', ctypes.c_uint64),
    ('cbCommitted', ctypes.c_uint64),
    ('cbReserved', ctypes.c_uint64),
    ('cbMaxReserve', ctypes.c_uint64),
]

HEAP_SUMMARY = struct__HEAP_SUMMARY
PHEAP_SUMMARY = ctypes.POINTER(struct__HEAP_SUMMARY)
LPHEAP_SUMMARY = ctypes.POINTER(struct__HEAP_SUMMARY)
SRWLOCK = struct__RTL_SRWLOCK
PSRWLOCK = ctypes.POINTER(struct__RTL_SRWLOCK)
INIT_ONCE = union__RTL_RUN_ONCE
PINIT_ONCE = ctypes.POINTER(union__RTL_RUN_ONCE)
LPINIT_ONCE = ctypes.POINTER(union__RTL_RUN_ONCE)
PINIT_ONCE_FN = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(union__RTL_RUN_ONCE), ctypes.POINTER(None), ctypes.POINTER(ctypes.POINTER(None)))
CONDITION_VARIABLE = struct__RTL_CONDITION_VARIABLE
PCONDITION_VARIABLE = ctypes.POINTER(struct__RTL_CONDITION_VARIABLE)
PTIMERAPCROUTINE = ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.c_uint32, ctypes.c_uint32)
SYNCHRONIZATION_BARRIER = struct__RTL_BARRIER
PSYNCHRONIZATION_BARRIER = ctypes.POINTER(struct__RTL_BARRIER)
LPSYNCHRONIZATION_BARRIER = ctypes.POINTER(struct__RTL_BARRIER)
class struct__PROCESS_INFORMATION(Structure):
    pass

struct__PROCESS_INFORMATION._pack_ = 1 # source:False
struct__PROCESS_INFORMATION._fields_ = [
    ('hProcess', ctypes.POINTER(None)),
    ('hThread', ctypes.POINTER(None)),
    ('dwProcessId', ctypes.c_uint32),
    ('dwThreadId', ctypes.c_uint32),
]

PROCESS_INFORMATION = struct__PROCESS_INFORMATION
PPROCESS_INFORMATION = ctypes.POINTER(struct__PROCESS_INFORMATION)
LPPROCESS_INFORMATION = ctypes.POINTER(struct__PROCESS_INFORMATION)
class struct__STARTUPINFOA(Structure):
    pass

struct__STARTUPINFOA._pack_ = 1 # source:False
struct__STARTUPINFOA._fields_ = [
    ('cb', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpReserved', ctypes.POINTER(ctypes.c_char)),
    ('lpDesktop', ctypes.POINTER(ctypes.c_char)),
    ('lpTitle', ctypes.POINTER(ctypes.c_char)),
    ('dwX', ctypes.c_uint32),
    ('dwY', ctypes.c_uint32),
    ('dwXSize', ctypes.c_uint32),
    ('dwYSize', ctypes.c_uint32),
    ('dwXCountChars', ctypes.c_uint32),
    ('dwYCountChars', ctypes.c_uint32),
    ('dwFillAttribute', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('wShowWindow', ctypes.c_uint16),
    ('cbReserved2', ctypes.c_uint16),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpReserved2', ctypes.POINTER(ctypes.c_ubyte)),
    ('hStdInput', ctypes.POINTER(None)),
    ('hStdOutput', ctypes.POINTER(None)),
    ('hStdError', ctypes.POINTER(None)),
]

STARTUPINFOA = struct__STARTUPINFOA
LPSTARTUPINFOA = ctypes.POINTER(struct__STARTUPINFOA)
class struct__STARTUPINFOW(Structure):
    pass

struct__STARTUPINFOW._pack_ = 1 # source:False
struct__STARTUPINFOW._fields_ = [
    ('cb', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpReserved', ctypes.POINTER(ctypes.c_int16)),
    ('lpDesktop', ctypes.POINTER(ctypes.c_int16)),
    ('lpTitle', ctypes.POINTER(ctypes.c_int16)),
    ('dwX', ctypes.c_uint32),
    ('dwY', ctypes.c_uint32),
    ('dwXSize', ctypes.c_uint32),
    ('dwYSize', ctypes.c_uint32),
    ('dwXCountChars', ctypes.c_uint32),
    ('dwYCountChars', ctypes.c_uint32),
    ('dwFillAttribute', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('wShowWindow', ctypes.c_uint16),
    ('cbReserved2', ctypes.c_uint16),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpReserved2', ctypes.POINTER(ctypes.c_ubyte)),
    ('hStdInput', ctypes.POINTER(None)),
    ('hStdOutput', ctypes.POINTER(None)),
    ('hStdError', ctypes.POINTER(None)),
]

STARTUPINFOW = struct__STARTUPINFOW
LPSTARTUPINFOW = ctypes.POINTER(struct__STARTUPINFOW)
STARTUPINFO = struct__STARTUPINFOA
LPSTARTUPINFO = ctypes.POINTER(struct__STARTUPINFOA)
class struct__PROC_THREAD_ATTRIBUTE_LIST(Structure):
    pass

PPROC_THREAD_ATTRIBUTE_LIST = ctypes.POINTER(struct__PROC_THREAD_ATTRIBUTE_LIST)
LPPROC_THREAD_ATTRIBUTE_LIST = ctypes.POINTER(struct__PROC_THREAD_ATTRIBUTE_LIST)

# values for enumeration '_THREAD_INFORMATION_CLASS'
_THREAD_INFORMATION_CLASS__enumvalues = {
    0: 'ThreadMemoryPriority',
    1: 'ThreadAbsoluteCpuPriority',
    2: 'ThreadDynamicCodePolicy',
    3: 'ThreadPowerThrottling',
    4: 'ThreadInformationClassMax',
}
ThreadMemoryPriority = 0
ThreadAbsoluteCpuPriority = 1
ThreadDynamicCodePolicy = 2
ThreadPowerThrottling = 3
ThreadInformationClassMax = 4
_THREAD_INFORMATION_CLASS = ctypes.c_uint32 # enum
THREAD_INFORMATION_CLASS = _THREAD_INFORMATION_CLASS
THREAD_INFORMATION_CLASS__enumvalues = _THREAD_INFORMATION_CLASS__enumvalues
class struct__MEMORY_PRIORITY_INFORMATION(Structure):
    pass

struct__MEMORY_PRIORITY_INFORMATION._pack_ = 1 # source:False
struct__MEMORY_PRIORITY_INFORMATION._fields_ = [
    ('MemoryPriority', ctypes.c_uint32),
]

MEMORY_PRIORITY_INFORMATION = struct__MEMORY_PRIORITY_INFORMATION
PMEMORY_PRIORITY_INFORMATION = ctypes.POINTER(struct__MEMORY_PRIORITY_INFORMATION)
class struct__THREAD_POWER_THROTTLING_STATE(Structure):
    pass

struct__THREAD_POWER_THROTTLING_STATE._pack_ = 1 # source:False
struct__THREAD_POWER_THROTTLING_STATE._fields_ = [
    ('Version', ctypes.c_uint32),
    ('ControlMask', ctypes.c_uint32),
    ('StateMask', ctypes.c_uint32),
]

THREAD_POWER_THROTTLING_STATE = struct__THREAD_POWER_THROTTLING_STATE

# values for enumeration '_PROCESS_INFORMATION_CLASS'
_PROCESS_INFORMATION_CLASS__enumvalues = {
    0: 'ProcessMemoryPriority',
    1: 'ProcessMemoryExhaustionInfo',
    2: 'ProcessAppMemoryInfo',
    3: 'ProcessInPrivateInfo',
    4: 'ProcessPowerThrottling',
    5: 'ProcessReservedValue1',
    6: 'ProcessTelemetryCoverageInfo',
    7: 'ProcessProtectionLevelInfo',
    8: 'ProcessLeapSecondInfo',
    9: 'ProcessInformationClassMax',
}
ProcessMemoryPriority = 0
ProcessMemoryExhaustionInfo = 1
ProcessAppMemoryInfo = 2
ProcessInPrivateInfo = 3
ProcessPowerThrottling = 4
ProcessReservedValue1 = 5
ProcessTelemetryCoverageInfo = 6
ProcessProtectionLevelInfo = 7
ProcessLeapSecondInfo = 8
ProcessInformationClassMax = 9
_PROCESS_INFORMATION_CLASS = ctypes.c_uint32 # enum
PROCESS_INFORMATION_CLASS = _PROCESS_INFORMATION_CLASS
PROCESS_INFORMATION_CLASS__enumvalues = _PROCESS_INFORMATION_CLASS__enumvalues
class struct__APP_MEMORY_INFORMATION(Structure):
    pass

struct__APP_MEMORY_INFORMATION._pack_ = 1 # source:False
struct__APP_MEMORY_INFORMATION._fields_ = [
    ('AvailableCommit', ctypes.c_uint64),
    ('PrivateCommitUsage', ctypes.c_uint64),
    ('PeakPrivateCommitUsage', ctypes.c_uint64),
    ('TotalCommitUsage', ctypes.c_uint64),
]

APP_MEMORY_INFORMATION = struct__APP_MEMORY_INFORMATION
PAPP_MEMORY_INFORMATION = ctypes.POINTER(struct__APP_MEMORY_INFORMATION)

# values for enumeration '_PROCESS_MEMORY_EXHAUSTION_TYPE'
_PROCESS_MEMORY_EXHAUSTION_TYPE__enumvalues = {
    0: 'PMETypeFailFastOnCommitFailure',
    1: 'PMETypeMax',
}
PMETypeFailFastOnCommitFailure = 0
PMETypeMax = 1
_PROCESS_MEMORY_EXHAUSTION_TYPE = ctypes.c_uint32 # enum
PROCESS_MEMORY_EXHAUSTION_TYPE = _PROCESS_MEMORY_EXHAUSTION_TYPE
PROCESS_MEMORY_EXHAUSTION_TYPE__enumvalues = _PROCESS_MEMORY_EXHAUSTION_TYPE__enumvalues
PPROCESS_MEMORY_EXHAUSTION_TYPE = ctypes.POINTER(_PROCESS_MEMORY_EXHAUSTION_TYPE)
class struct__PROCESS_MEMORY_EXHAUSTION_INFO(Structure):
    pass

struct__PROCESS_MEMORY_EXHAUSTION_INFO._pack_ = 1 # source:False
struct__PROCESS_MEMORY_EXHAUSTION_INFO._fields_ = [
    ('Version', ctypes.c_uint16),
    ('Reserved', ctypes.c_uint16),
    ('Type', PROCESS_MEMORY_EXHAUSTION_TYPE),
    ('Value', ctypes.c_uint64),
]

PROCESS_MEMORY_EXHAUSTION_INFO = struct__PROCESS_MEMORY_EXHAUSTION_INFO
PPROCESS_MEMORY_EXHAUSTION_INFO = ctypes.POINTER(struct__PROCESS_MEMORY_EXHAUSTION_INFO)
class struct__PROCESS_POWER_THROTTLING_STATE(Structure):
    pass

struct__PROCESS_POWER_THROTTLING_STATE._pack_ = 1 # source:False
struct__PROCESS_POWER_THROTTLING_STATE._fields_ = [
    ('Version', ctypes.c_uint32),
    ('ControlMask', ctypes.c_uint32),
    ('StateMask', ctypes.c_uint32),
]

PROCESS_POWER_THROTTLING_STATE = struct__PROCESS_POWER_THROTTLING_STATE
PPROCESS_POWER_THROTTLING_STATE = ctypes.POINTER(struct__PROCESS_POWER_THROTTLING_STATE)
class struct_PROCESS_PROTECTION_LEVEL_INFORMATION(Structure):
    pass

struct_PROCESS_PROTECTION_LEVEL_INFORMATION._pack_ = 1 # source:False
struct_PROCESS_PROTECTION_LEVEL_INFORMATION._fields_ = [
    ('ProtectionLevel', ctypes.c_uint32),
]

class struct__PROCESS_LEAP_SECOND_INFO(Structure):
    pass

struct__PROCESS_LEAP_SECOND_INFO._pack_ = 1 # source:False
struct__PROCESS_LEAP_SECOND_INFO._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('Reserved', ctypes.c_uint32),
]

PROCESS_LEAP_SECOND_INFO = struct__PROCESS_LEAP_SECOND_INFO
PPROCESS_LEAP_SECOND_INFO = ctypes.POINTER(struct__PROCESS_LEAP_SECOND_INFO)
class struct__304AECCFA8C31E57CAA9E04956196E4C(Structure):
    pass

struct__304AECCFA8C31E57CAA9E04956196E4C._pack_ = 1 # source:False
struct__304AECCFA8C31E57CAA9E04956196E4C._fields_ = [
    ('wProcessorArchitecture', ctypes.c_uint16),
    ('wReserved', ctypes.c_uint16),
]

class union__SYSTEM_INFO___5384D611651B5BF37083DC1389C27803(Union):
    pass

class struct__SYSTEM_INFO___5384D611651B5BF37083DC1389C27803_0(Structure):
    pass

struct__SYSTEM_INFO___5384D611651B5BF37083DC1389C27803_0._pack_ = 1 # source:False
struct__SYSTEM_INFO___5384D611651B5BF37083DC1389C27803_0._fields_ = [
    ('wProcessorArchitecture', ctypes.c_uint16),
    ('wReserved', ctypes.c_uint16),
]

union__SYSTEM_INFO___5384D611651B5BF37083DC1389C27803._pack_ = 1 # source:False
union__SYSTEM_INFO___5384D611651B5BF37083DC1389C27803._anonymous_ = ('_0',)
union__SYSTEM_INFO___5384D611651B5BF37083DC1389C27803._fields_ = [
    ('dwOemId', ctypes.c_uint32),
    ('_0', struct__SYSTEM_INFO___5384D611651B5BF37083DC1389C27803_0),
]

class struct__SYSTEM_INFO(Structure):
    pass

class union__SYSTEM_INFO_0(Union):
    pass

class struct__SYSTEM_INFO_0_0(Structure):
    pass

struct__SYSTEM_INFO_0_0._pack_ = 1 # source:False
struct__SYSTEM_INFO_0_0._fields_ = [
    ('wProcessorArchitecture', ctypes.c_uint16),
    ('wReserved', ctypes.c_uint16),
]

union__SYSTEM_INFO_0._pack_ = 1 # source:False
union__SYSTEM_INFO_0._anonymous_ = ('_0',)
union__SYSTEM_INFO_0._fields_ = [
    ('dwOemId', ctypes.c_uint32),
    ('_0', struct__SYSTEM_INFO_0_0),
]

struct__SYSTEM_INFO._pack_ = 1 # source:False
struct__SYSTEM_INFO._anonymous_ = ('_0',)
struct__SYSTEM_INFO._fields_ = [
    ('_0', union__SYSTEM_INFO_0),
    ('dwPageSize', ctypes.c_uint32),
    ('lpMinimumApplicationAddress', ctypes.POINTER(None)),
    ('lpMaximumApplicationAddress', ctypes.POINTER(None)),
    ('dwActiveProcessorMask', ctypes.c_uint64),
    ('dwNumberOfProcessors', ctypes.c_uint32),
    ('dwProcessorType', ctypes.c_uint32),
    ('dwAllocationGranularity', ctypes.c_uint32),
    ('wProcessorLevel', ctypes.c_uint16),
    ('wProcessorRevision', ctypes.c_uint16),
]

SYSTEM_INFO = struct__SYSTEM_INFO
LPSYSTEM_INFO = ctypes.POINTER(struct__SYSTEM_INFO)
class struct__MEMORYSTATUSEX(Structure):
    pass

struct__MEMORYSTATUSEX._pack_ = 1 # source:False
struct__MEMORYSTATUSEX._fields_ = [
    ('dwLength', ctypes.c_uint32),
    ('dwMemoryLoad', ctypes.c_uint32),
    ('ullTotalPhys', ctypes.c_uint64),
    ('ullAvailPhys', ctypes.c_uint64),
    ('ullTotalPageFile', ctypes.c_uint64),
    ('ullAvailPageFile', ctypes.c_uint64),
    ('ullTotalVirtual', ctypes.c_uint64),
    ('ullAvailVirtual', ctypes.c_uint64),
    ('ullAvailExtendedVirtual', ctypes.c_uint64),
]

MEMORYSTATUSEX = struct__MEMORYSTATUSEX
LPMEMORYSTATUSEX = ctypes.POINTER(struct__MEMORYSTATUSEX)

# values for enumeration '_COMPUTER_NAME_FORMAT'
_COMPUTER_NAME_FORMAT__enumvalues = {
    0: 'ComputerNameNetBIOS',
    1: 'ComputerNameDnsHostname',
    2: 'ComputerNameDnsDomain',
    3: 'ComputerNameDnsFullyQualified',
    4: 'ComputerNamePhysicalNetBIOS',
    5: 'ComputerNamePhysicalDnsHostname',
    6: 'ComputerNamePhysicalDnsDomain',
    7: 'ComputerNamePhysicalDnsFullyQualified',
    8: 'ComputerNameMax',
}
ComputerNameNetBIOS = 0
ComputerNameDnsHostname = 1
ComputerNameDnsDomain = 2
ComputerNameDnsFullyQualified = 3
ComputerNamePhysicalNetBIOS = 4
ComputerNamePhysicalDnsHostname = 5
ComputerNamePhysicalDnsDomain = 6
ComputerNamePhysicalDnsFullyQualified = 7
ComputerNameMax = 8
_COMPUTER_NAME_FORMAT = ctypes.c_uint32 # enum
COMPUTER_NAME_FORMAT = _COMPUTER_NAME_FORMAT
COMPUTER_NAME_FORMAT__enumvalues = _COMPUTER_NAME_FORMAT__enumvalues

# values for enumeration '_MEMORY_RESOURCE_NOTIFICATION_TYPE'
_MEMORY_RESOURCE_NOTIFICATION_TYPE__enumvalues = {
    0: 'LowMemoryResourceNotification',
    1: 'HighMemoryResourceNotification',
}
LowMemoryResourceNotification = 0
HighMemoryResourceNotification = 1
_MEMORY_RESOURCE_NOTIFICATION_TYPE = ctypes.c_uint32 # enum
MEMORY_RESOURCE_NOTIFICATION_TYPE = _MEMORY_RESOURCE_NOTIFICATION_TYPE
MEMORY_RESOURCE_NOTIFICATION_TYPE__enumvalues = _MEMORY_RESOURCE_NOTIFICATION_TYPE__enumvalues
class struct__WIN32_MEMORY_RANGE_ENTRY(Structure):
    pass

struct__WIN32_MEMORY_RANGE_ENTRY._pack_ = 1 # source:False
struct__WIN32_MEMORY_RANGE_ENTRY._fields_ = [
    ('VirtualAddress', ctypes.POINTER(None)),
    ('NumberOfBytes', ctypes.c_uint64),
]

WIN32_MEMORY_RANGE_ENTRY = struct__WIN32_MEMORY_RANGE_ENTRY
PWIN32_MEMORY_RANGE_ENTRY = ctypes.POINTER(struct__WIN32_MEMORY_RANGE_ENTRY)
_28F56E9CE247C373C820ED5BC94460F2 = ctypes.CFUNCTYPE(None)
PBAD_MEMORY_CALLBACK_ROUTINE = ctypes.CFUNCTYPE(None)

# values for enumeration 'OFFER_PRIORITY'
OFFER_PRIORITY__enumvalues = {
    1: 'VmOfferPriorityVeryLow',
    2: 'VmOfferPriorityLow',
    3: 'VmOfferPriorityBelowNormal',
    4: 'VmOfferPriorityNormal',
}
VmOfferPriorityVeryLow = 1
VmOfferPriorityLow = 2
VmOfferPriorityBelowNormal = 3
VmOfferPriorityNormal = 4
OFFER_PRIORITY = ctypes.c_uint32 # enum

# values for enumeration 'WIN32_MEMORY_INFORMATION_CLASS'
WIN32_MEMORY_INFORMATION_CLASS__enumvalues = {
    0: 'MemoryRegionInfo',
}
MemoryRegionInfo = 0
WIN32_MEMORY_INFORMATION_CLASS = ctypes.c_uint32 # enum
class struct__11D9C8BE61E6EE013C3CCB3B9B8E2958(Structure):
    pass

struct__11D9C8BE61E6EE013C3CCB3B9B8E2958._pack_ = 1 # source:False
struct__11D9C8BE61E6EE013C3CCB3B9B8E2958._fields_ = [
    ('Private', ctypes.c_uint32, 1),
    ('MappedDataFile', ctypes.c_uint32, 1),
    ('MappedImage', ctypes.c_uint32, 1),
    ('MappedPageFile', ctypes.c_uint32, 1),
    ('MappedPhysical', ctypes.c_uint32, 1),
    ('DirectMapped', ctypes.c_uint32, 1),
    ('Reserved', ctypes.c_uint32, 26),
]

class union_WIN32_MEMORY_REGION_INFORMATION___D9148D26D5024FAA6F599B7E87F7CC62(Union):
    pass

class struct_WIN32_MEMORY_REGION_INFORMATION___D9148D26D5024FAA6F599B7E87F7CC62_0(Structure):
    pass

struct_WIN32_MEMORY_REGION_INFORMATION___D9148D26D5024FAA6F599B7E87F7CC62_0._pack_ = 1 # source:False
struct_WIN32_MEMORY_REGION_INFORMATION___D9148D26D5024FAA6F599B7E87F7CC62_0._fields_ = [
    ('Private', ctypes.c_uint32, 1),
    ('MappedDataFile', ctypes.c_uint32, 1),
    ('MappedImage', ctypes.c_uint32, 1),
    ('MappedPageFile', ctypes.c_uint32, 1),
    ('MappedPhysical', ctypes.c_uint32, 1),
    ('DirectMapped', ctypes.c_uint32, 1),
    ('Reserved', ctypes.c_uint32, 26),
]

union_WIN32_MEMORY_REGION_INFORMATION___D9148D26D5024FAA6F599B7E87F7CC62._pack_ = 1 # source:False
union_WIN32_MEMORY_REGION_INFORMATION___D9148D26D5024FAA6F599B7E87F7CC62._anonymous_ = ('_0',)
union_WIN32_MEMORY_REGION_INFORMATION___D9148D26D5024FAA6F599B7E87F7CC62._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct_WIN32_MEMORY_REGION_INFORMATION___D9148D26D5024FAA6F599B7E87F7CC62_0),
]

class struct_WIN32_MEMORY_REGION_INFORMATION(Structure):
    pass

class union_WIN32_MEMORY_REGION_INFORMATION_0(Union):
    pass

class struct_WIN32_MEMORY_REGION_INFORMATION_0_0(Structure):
    pass

struct_WIN32_MEMORY_REGION_INFORMATION_0_0._pack_ = 1 # source:False
struct_WIN32_MEMORY_REGION_INFORMATION_0_0._fields_ = [
    ('Private', ctypes.c_uint32, 1),
    ('MappedDataFile', ctypes.c_uint32, 1),
    ('MappedImage', ctypes.c_uint32, 1),
    ('MappedPageFile', ctypes.c_uint32, 1),
    ('MappedPhysical', ctypes.c_uint32, 1),
    ('DirectMapped', ctypes.c_uint32, 1),
    ('Reserved', ctypes.c_uint32, 26),
]

union_WIN32_MEMORY_REGION_INFORMATION_0._pack_ = 1 # source:False
union_WIN32_MEMORY_REGION_INFORMATION_0._anonymous_ = ('_0',)
union_WIN32_MEMORY_REGION_INFORMATION_0._fields_ = [
    ('Flags', ctypes.c_uint32),
    ('_0', struct_WIN32_MEMORY_REGION_INFORMATION_0_0),
]

struct_WIN32_MEMORY_REGION_INFORMATION._pack_ = 1 # source:False
struct_WIN32_MEMORY_REGION_INFORMATION._anonymous_ = ('_0',)
struct_WIN32_MEMORY_REGION_INFORMATION._fields_ = [
    ('AllocationBase', ctypes.POINTER(None)),
    ('AllocationProtect', ctypes.c_uint32),
    ('_0', union_WIN32_MEMORY_REGION_INFORMATION_0),
    ('RegionSize', ctypes.c_uint64),
    ('CommitSize', ctypes.c_uint64),
]

PTP_WIN32_IO_CALLBACK = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct__TP_CALLBACK_INSTANCE), ctypes.POINTER(None), ctypes.POINTER(None), ctypes.c_uint32, ctypes.c_uint64, ctypes.POINTER(struct__TP_IO))
class struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION(Structure):
    pass

struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION._pack_ = 1 # source:False
struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION._fields_ = [
    ('MaxIops', ctypes.c_int64),
    ('MaxBandwidth', ctypes.c_int64),
    ('ReservationIops', ctypes.c_int64),
    ('VolumeName', ctypes.POINTER(ctypes.c_int16)),
    ('BaseIoSize', ctypes.c_uint32),
    ('ControlFlags', ctypes.c_uint32),
]

class struct_tagENUMUILANG(Structure):
    pass

struct_tagENUMUILANG._pack_ = 1 # source:False
struct_tagENUMUILANG._fields_ = [
    ('NumOfEnumUILang', ctypes.c_uint32),
    ('SizeOfEnumUIBuffer', ctypes.c_uint32),
    ('pEnumUIBuffer', ctypes.POINTER(ctypes.c_uint16)),
]

ENUMUILANG = struct_tagENUMUILANG
PENUMUILANG = ctypes.POINTER(struct_tagENUMUILANG)
ENUMRESLANGPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HINSTANCE__), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.c_uint16, ctypes.c_int64)
ENUMRESLANGPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HINSTANCE__), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.c_uint16, ctypes.c_int64)
ENUMRESNAMEPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HINSTANCE__), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.c_int64)
ENUMRESNAMEPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HINSTANCE__), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.c_int64)
ENUMRESTYPEPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HINSTANCE__), ctypes.POINTER(ctypes.c_char), ctypes.c_int64)
ENUMRESTYPEPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HINSTANCE__), ctypes.POINTER(ctypes.c_int16), ctypes.c_int64)
PGET_MODULE_HANDLE_EXA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.POINTER(struct_HINSTANCE__)))
PGET_MODULE_HANDLE_EXW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(struct_HINSTANCE__)))
class struct__REDIRECTION_FUNCTION_DESCRIPTOR(Structure):
    pass

struct__REDIRECTION_FUNCTION_DESCRIPTOR._pack_ = 1 # source:False
struct__REDIRECTION_FUNCTION_DESCRIPTOR._fields_ = [
    ('DllName', ctypes.POINTER(ctypes.c_char)),
    ('FunctionName', ctypes.POINTER(ctypes.c_char)),
    ('RedirectionTarget', ctypes.POINTER(None)),
]

REDIRECTION_FUNCTION_DESCRIPTOR = struct__REDIRECTION_FUNCTION_DESCRIPTOR
PREDIRECTION_FUNCTION_DESCRIPTOR = ctypes.POINTER(struct__REDIRECTION_FUNCTION_DESCRIPTOR)
PCREDIRECTION_FUNCTION_DESCRIPTOR = ctypes.POINTER(struct__REDIRECTION_FUNCTION_DESCRIPTOR)
class struct__REDIRECTION_DESCRIPTOR(Structure):
    pass

struct__REDIRECTION_DESCRIPTOR._pack_ = 1 # source:False
struct__REDIRECTION_DESCRIPTOR._fields_ = [
    ('Version', ctypes.c_uint32),
    ('FunctionCount', ctypes.c_uint32),
    ('Redirections', ctypes.POINTER(struct__REDIRECTION_FUNCTION_DESCRIPTOR)),
]

REDIRECTION_DESCRIPTOR = struct__REDIRECTION_DESCRIPTOR
PREDIRECTION_DESCRIPTOR = ctypes.POINTER(struct__REDIRECTION_DESCRIPTOR)
PCREDIRECTION_DESCRIPTOR = ctypes.POINTER(struct__REDIRECTION_DESCRIPTOR)
DLL_DIRECTORY_COOKIE = ctypes.POINTER(None)
PDLL_DIRECTORY_COOKIE = ctypes.POINTER(ctypes.POINTER(None))
PFIBER_START_ROUTINE = ctypes.CFUNCTYPE(None, ctypes.POINTER(None))
LPFIBER_START_ROUTINE = ctypes.CFUNCTYPE(None, ctypes.POINTER(None))
PFIBER_CALLOUT_ROUTINE = ctypes.CFUNCTYPE(ctypes.POINTER(None), ctypes.POINTER(None))
LPLDT_ENTRY = ctypes.POINTER(None)
class struct__COMMPROP(Structure):
    pass

struct__COMMPROP._pack_ = 1 # source:False
struct__COMMPROP._fields_ = [
    ('wPacketLength', ctypes.c_uint16),
    ('wPacketVersion', ctypes.c_uint16),
    ('dwServiceMask', ctypes.c_uint32),
    ('dwReserved1', ctypes.c_uint32),
    ('dwMaxTxQueue', ctypes.c_uint32),
    ('dwMaxRxQueue', ctypes.c_uint32),
    ('dwMaxBaud', ctypes.c_uint32),
    ('dwProvSubType', ctypes.c_uint32),
    ('dwProvCapabilities', ctypes.c_uint32),
    ('dwSettableParams', ctypes.c_uint32),
    ('dwSettableBaud', ctypes.c_uint32),
    ('wSettableData', ctypes.c_uint16),
    ('wSettableStopParity', ctypes.c_uint16),
    ('dwCurrentTxQueue', ctypes.c_uint32),
    ('dwCurrentRxQueue', ctypes.c_uint32),
    ('dwProvSpec1', ctypes.c_uint32),
    ('dwProvSpec2', ctypes.c_uint32),
    ('wcProvChar', ctypes.c_int16 * 1),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

COMMPROP = struct__COMMPROP
LPCOMMPROP = ctypes.POINTER(struct__COMMPROP)
class struct__COMSTAT(Structure):
    pass

struct__COMSTAT._pack_ = 1 # source:False
struct__COMSTAT._fields_ = [
    ('fCtsHold', ctypes.c_uint32, 1),
    ('fDsrHold', ctypes.c_uint32, 1),
    ('fRlsdHold', ctypes.c_uint32, 1),
    ('fXoffHold', ctypes.c_uint32, 1),
    ('fXoffSent', ctypes.c_uint32, 1),
    ('fEof', ctypes.c_uint32, 1),
    ('fTxim', ctypes.c_uint32, 1),
    ('fReserved', ctypes.c_uint32, 25),
    ('cbInQue', ctypes.c_uint32),
    ('cbOutQue', ctypes.c_uint32),
]

COMSTAT = struct__COMSTAT
LPCOMSTAT = ctypes.POINTER(struct__COMSTAT)
class struct__DCB(Structure):
    pass

struct__DCB._pack_ = 1 # source:False
struct__DCB._fields_ = [
    ('DCBlength', ctypes.c_uint32),
    ('BaudRate', ctypes.c_uint32),
    ('fBinary', ctypes.c_uint32, 1),
    ('fParity', ctypes.c_uint32, 1),
    ('fOutxCtsFlow', ctypes.c_uint32, 1),
    ('fOutxDsrFlow', ctypes.c_uint32, 1),
    ('fDtrControl', ctypes.c_uint32, 2),
    ('fDsrSensitivity', ctypes.c_uint32, 1),
    ('fTXContinueOnXoff', ctypes.c_uint32, 1),
    ('fOutX', ctypes.c_uint32, 1),
    ('fInX', ctypes.c_uint32, 1),
    ('fErrorChar', ctypes.c_uint32, 1),
    ('fNull', ctypes.c_uint32, 1),
    ('fRtsControl', ctypes.c_uint32, 2),
    ('fAbortOnError', ctypes.c_uint32, 1),
    ('fDummy2', ctypes.c_uint32, 17),
    ('wReserved', ctypes.c_uint16),
    ('XonLim', ctypes.c_uint16),
    ('XoffLim', ctypes.c_uint16),
    ('ByteSize', ctypes.c_ubyte),
    ('Parity', ctypes.c_ubyte),
    ('StopBits', ctypes.c_ubyte),
    ('XonChar', ctypes.c_char),
    ('XoffChar', ctypes.c_char),
    ('ErrorChar', ctypes.c_char),
    ('EofChar', ctypes.c_char),
    ('EvtChar', ctypes.c_char),
    ('wReserved1', ctypes.c_uint16),
]

DCB = struct__DCB
LPDCB = ctypes.POINTER(struct__DCB)
class struct__COMMTIMEOUTS(Structure):
    pass

struct__COMMTIMEOUTS._pack_ = 1 # source:False
struct__COMMTIMEOUTS._fields_ = [
    ('ReadIntervalTimeout', ctypes.c_uint32),
    ('ReadTotalTimeoutMultiplier', ctypes.c_uint32),
    ('ReadTotalTimeoutConstant', ctypes.c_uint32),
    ('WriteTotalTimeoutMultiplier', ctypes.c_uint32),
    ('WriteTotalTimeoutConstant', ctypes.c_uint32),
]

COMMTIMEOUTS = struct__COMMTIMEOUTS
LPCOMMTIMEOUTS = ctypes.POINTER(struct__COMMTIMEOUTS)
class struct__COMMCONFIG(Structure):
    pass

struct__COMMCONFIG._pack_ = 1 # source:False
struct__COMMCONFIG._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('wVersion', ctypes.c_uint16),
    ('wReserved', ctypes.c_uint16),
    ('dcb', DCB),
    ('dwProviderSubType', ctypes.c_uint32),
    ('dwProviderOffset', ctypes.c_uint32),
    ('dwProviderSize', ctypes.c_uint32),
    ('wcProviderData', ctypes.c_int16 * 1),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

COMMCONFIG = struct__COMMCONFIG
LPCOMMCONFIG = ctypes.POINTER(struct__COMMCONFIG)
class struct__MEMORYSTATUS(Structure):
    pass

struct__MEMORYSTATUS._pack_ = 1 # source:False
struct__MEMORYSTATUS._fields_ = [
    ('dwLength', ctypes.c_uint32),
    ('dwMemoryLoad', ctypes.c_uint32),
    ('dwTotalPhys', ctypes.c_uint64),
    ('dwAvailPhys', ctypes.c_uint64),
    ('dwTotalPageFile', ctypes.c_uint64),
    ('dwAvailPageFile', ctypes.c_uint64),
    ('dwTotalVirtual', ctypes.c_uint64),
    ('dwAvailVirtual', ctypes.c_uint64),
]

MEMORYSTATUS = struct__MEMORYSTATUS
LPMEMORYSTATUS = ctypes.POINTER(struct__MEMORYSTATUS)
class struct__JIT_DEBUG_INFO(Structure):
    pass

struct__JIT_DEBUG_INFO._pack_ = 1 # source:False
struct__JIT_DEBUG_INFO._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('dwProcessorArchitecture', ctypes.c_uint32),
    ('dwThreadID', ctypes.c_uint32),
    ('dwReserved0', ctypes.c_uint32),
    ('lpExceptionAddress', ctypes.c_uint64),
    ('lpExceptionRecord', ctypes.c_uint64),
    ('lpContextRecord', ctypes.c_uint64),
]

JIT_DEBUG_INFO = struct__JIT_DEBUG_INFO
LPJIT_DEBUG_INFO = ctypes.POINTER(struct__JIT_DEBUG_INFO)
JIT_DEBUG_INFO32 = struct__JIT_DEBUG_INFO
LPJIT_DEBUG_INFO32 = ctypes.POINTER(struct__JIT_DEBUG_INFO)
JIT_DEBUG_INFO64 = struct__JIT_DEBUG_INFO
LPJIT_DEBUG_INFO64 = ctypes.POINTER(struct__JIT_DEBUG_INFO)
LPEXCEPTION_RECORD = ctypes.POINTER(struct__EXCEPTION_RECORD)
LPEXCEPTION_POINTERS = ctypes.POINTER(struct__EXCEPTION_POINTERS)
class struct__OFSTRUCT(Structure):
    pass

struct__OFSTRUCT._pack_ = 1 # source:False
struct__OFSTRUCT._fields_ = [
    ('cBytes', ctypes.c_ubyte),
    ('fFixedDisk', ctypes.c_ubyte),
    ('nErrCode', ctypes.c_uint16),
    ('Reserved1', ctypes.c_uint16),
    ('Reserved2', ctypes.c_uint16),
    ('szPathName', ctypes.c_char * 128),
]

OFSTRUCT = struct__OFSTRUCT
LPOFSTRUCT = ctypes.POINTER(struct__OFSTRUCT)
POFSTRUCT = ctypes.POINTER(struct__OFSTRUCT)
PUMS_CONTEXT = ctypes.POINTER(None)
PUMS_COMPLETION_LIST = ctypes.POINTER(None)
UMS_THREAD_INFO_CLASS = _RTL_UMS_THREAD_INFO_CLASS
UMS_THREAD_INFO_CLASS__enumvalues = _RTL_UMS_THREAD_INFO_CLASS__enumvalues
PUMS_THREAD_INFO_CLASS = ctypes.POINTER(_RTL_UMS_THREAD_INFO_CLASS)
UMS_SCHEDULER_REASON = _RTL_UMS_SCHEDULER_REASON
UMS_SCHEDULER_REASON__enumvalues = _RTL_UMS_SCHEDULER_REASON__enumvalues
PUMS_SCHEDULER_ENTRY_POINT = ctypes.CFUNCTYPE(None, _RTL_UMS_SCHEDULER_REASON, ctypes.c_uint64, ctypes.POINTER(None))
class struct__UMS_SCHEDULER_STARTUP_INFO(Structure):
    pass

struct__UMS_SCHEDULER_STARTUP_INFO._pack_ = 1 # source:False
struct__UMS_SCHEDULER_STARTUP_INFO._fields_ = [
    ('UmsVersion', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('CompletionList', ctypes.POINTER(None)),
    ('SchedulerProc', ctypes.CFUNCTYPE(None, _RTL_UMS_SCHEDULER_REASON, ctypes.c_uint64, ctypes.POINTER(None))),
    ('SchedulerParam', ctypes.POINTER(None)),
]

UMS_SCHEDULER_STARTUP_INFO = struct__UMS_SCHEDULER_STARTUP_INFO
PUMS_SCHEDULER_STARTUP_INFO = ctypes.POINTER(struct__UMS_SCHEDULER_STARTUP_INFO)
class struct__D44EEF9BD0742DBE20D87C837DCD5E88(Structure):
    pass

struct__D44EEF9BD0742DBE20D87C837DCD5E88._pack_ = 1 # source:False
struct__D44EEF9BD0742DBE20D87C837DCD5E88._fields_ = [
    ('IsUmsSchedulerThread', ctypes.c_uint32, 1),
    ('IsUmsWorkerThread', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 30),
]

class union__UMS_SYSTEM_THREAD_INFORMATION___A39E9D10E6C6FC3307A25E827527C5A0(Union):
    pass

class struct__UMS_SYSTEM_THREAD_INFORMATION___A39E9D10E6C6FC3307A25E827527C5A0_0(Structure):
    pass

struct__UMS_SYSTEM_THREAD_INFORMATION___A39E9D10E6C6FC3307A25E827527C5A0_0._pack_ = 1 # source:False
struct__UMS_SYSTEM_THREAD_INFORMATION___A39E9D10E6C6FC3307A25E827527C5A0_0._fields_ = [
    ('IsUmsSchedulerThread', ctypes.c_uint32, 1),
    ('IsUmsWorkerThread', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 30),
]

union__UMS_SYSTEM_THREAD_INFORMATION___A39E9D10E6C6FC3307A25E827527C5A0._pack_ = 1 # source:False
union__UMS_SYSTEM_THREAD_INFORMATION___A39E9D10E6C6FC3307A25E827527C5A0._anonymous_ = ('_0',)
union__UMS_SYSTEM_THREAD_INFORMATION___A39E9D10E6C6FC3307A25E827527C5A0._fields_ = [
    ('_0', struct__UMS_SYSTEM_THREAD_INFORMATION___A39E9D10E6C6FC3307A25E827527C5A0_0),
    ('ThreadUmsFlags', ctypes.c_uint32),
]

class struct__UMS_SYSTEM_THREAD_INFORMATION(Structure):
    pass

class union__UMS_SYSTEM_THREAD_INFORMATION_0(Union):
    pass

class struct__UMS_SYSTEM_THREAD_INFORMATION_0_0(Structure):
    pass

struct__UMS_SYSTEM_THREAD_INFORMATION_0_0._pack_ = 1 # source:False
struct__UMS_SYSTEM_THREAD_INFORMATION_0_0._fields_ = [
    ('IsUmsSchedulerThread', ctypes.c_uint32, 1),
    ('IsUmsWorkerThread', ctypes.c_uint32, 1),
    ('PADDING_0', ctypes.c_uint32, 30),
]

union__UMS_SYSTEM_THREAD_INFORMATION_0._pack_ = 1 # source:False
union__UMS_SYSTEM_THREAD_INFORMATION_0._anonymous_ = ('_0',)
union__UMS_SYSTEM_THREAD_INFORMATION_0._fields_ = [
    ('_0', struct__UMS_SYSTEM_THREAD_INFORMATION_0_0),
    ('ThreadUmsFlags', ctypes.c_uint32),
]

struct__UMS_SYSTEM_THREAD_INFORMATION._pack_ = 1 # source:False
struct__UMS_SYSTEM_THREAD_INFORMATION._anonymous_ = ('_0',)
struct__UMS_SYSTEM_THREAD_INFORMATION._fields_ = [
    ('UmsVersion', ctypes.c_uint32),
    ('_0', union__UMS_SYSTEM_THREAD_INFORMATION_0),
]

UMS_SYSTEM_THREAD_INFORMATION = struct__UMS_SYSTEM_THREAD_INFORMATION
PUMS_SYSTEM_THREAD_INFORMATION = ctypes.POINTER(struct__UMS_SYSTEM_THREAD_INFORMATION)
POWER_REQUEST_CONTEXT = struct__REASON_CONTEXT
PPOWER_REQUEST_CONTEXT = ctypes.POINTER(struct__REASON_CONTEXT)
LPPOWER_REQUEST_CONTEXT = ctypes.POINTER(struct__REASON_CONTEXT)

# values for enumeration '_DEP_SYSTEM_POLICY_TYPE'
_DEP_SYSTEM_POLICY_TYPE__enumvalues = {
    0: 'DEPPolicyAlwaysOff',
    1: 'DEPPolicyAlwaysOn',
    2: 'DEPPolicyOptIn',
    3: 'DEPPolicyOptOut',
    4: 'DEPTotalPolicyCount',
}
DEPPolicyAlwaysOff = 0
DEPPolicyAlwaysOn = 1
DEPPolicyOptIn = 2
DEPPolicyOptOut = 3
DEPTotalPolicyCount = 4
_DEP_SYSTEM_POLICY_TYPE = ctypes.c_uint32 # enum
DEP_SYSTEM_POLICY_TYPE = _DEP_SYSTEM_POLICY_TYPE
DEP_SYSTEM_POLICY_TYPE__enumvalues = _DEP_SYSTEM_POLICY_TYPE__enumvalues
PFE_EXPORT_FUNC = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(ctypes.c_ubyte), ctypes.POINTER(None), ctypes.c_uint32)
PFE_IMPORT_FUNC = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(ctypes.c_ubyte), ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32))
class struct__WIN32_STREAM_ID(Structure):
    pass

struct__WIN32_STREAM_ID._pack_ = 1 # source:False
struct__WIN32_STREAM_ID._fields_ = [
    ('dwStreamId', ctypes.c_uint32),
    ('dwStreamAttributes', ctypes.c_uint32),
    ('Size', LARGE_INTEGER),
    ('dwStreamNameSize', ctypes.c_uint32),
    ('cStreamName', ctypes.c_int16 * 1),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

WIN32_STREAM_ID = struct__WIN32_STREAM_ID
LPWIN32_STREAM_ID = ctypes.POINTER(struct__WIN32_STREAM_ID)
class struct__STARTUPINFOEXA(Structure):
    pass

struct__STARTUPINFOEXA._pack_ = 1 # source:False
struct__STARTUPINFOEXA._fields_ = [
    ('StartupInfo', STARTUPINFOA),
    ('lpAttributeList', ctypes.POINTER(struct__PROC_THREAD_ATTRIBUTE_LIST)),
]

STARTUPINFOEXA = struct__STARTUPINFOEXA
LPSTARTUPINFOEXA = ctypes.POINTER(struct__STARTUPINFOEXA)
class struct__STARTUPINFOEXW(Structure):
    pass

struct__STARTUPINFOEXW._pack_ = 1 # source:False
struct__STARTUPINFOEXW._fields_ = [
    ('StartupInfo', STARTUPINFOW),
    ('lpAttributeList', ctypes.POINTER(struct__PROC_THREAD_ATTRIBUTE_LIST)),
]

STARTUPINFOEXW = struct__STARTUPINFOEXW
LPSTARTUPINFOEXW = ctypes.POINTER(struct__STARTUPINFOEXW)
STARTUPINFOEX = struct__STARTUPINFOEXA
LPSTARTUPINFOEX = ctypes.POINTER(struct__STARTUPINFOEXA)

# values for enumeration '_PROC_THREAD_ATTRIBUTE_NUM'
_PROC_THREAD_ATTRIBUTE_NUM__enumvalues = {
    0: 'ProcThreadAttributeParentProcess',
    2: 'ProcThreadAttributeHandleList',
    3: 'ProcThreadAttributeGroupAffinity',
    4: 'ProcThreadAttributePreferredNode',
    5: 'ProcThreadAttributeIdealProcessor',
    6: 'ProcThreadAttributeUmsThread',
    7: 'ProcThreadAttributeMitigationPolicy',
    9: 'ProcThreadAttributeSecurityCapabilities',
    11: 'ProcThreadAttributeProtectionLevel',
    13: 'ProcThreadAttributeJobList',
    14: 'ProcThreadAttributeChildProcessPolicy',
    15: 'ProcThreadAttributeAllApplicationPackagesPolicy',
    16: 'ProcThreadAttributeWin32kFilter',
    17: 'ProcThreadAttributeSafeOpenPromptOriginClaim',
    18: 'ProcThreadAttributeDesktopAppPolicy',
    22: 'ProcThreadAttributePseudoConsole',
    24: 'ProcThreadAttributeMitigationAuditPolicy',
}
ProcThreadAttributeParentProcess = 0
ProcThreadAttributeHandleList = 2
ProcThreadAttributeGroupAffinity = 3
ProcThreadAttributePreferredNode = 4
ProcThreadAttributeIdealProcessor = 5
ProcThreadAttributeUmsThread = 6
ProcThreadAttributeMitigationPolicy = 7
ProcThreadAttributeSecurityCapabilities = 9
ProcThreadAttributeProtectionLevel = 11
ProcThreadAttributeJobList = 13
ProcThreadAttributeChildProcessPolicy = 14
ProcThreadAttributeAllApplicationPackagesPolicy = 15
ProcThreadAttributeWin32kFilter = 16
ProcThreadAttributeSafeOpenPromptOriginClaim = 17
ProcThreadAttributeDesktopAppPolicy = 18
ProcThreadAttributePseudoConsole = 22
ProcThreadAttributeMitigationAuditPolicy = 24
_PROC_THREAD_ATTRIBUTE_NUM = ctypes.c_uint32 # enum
PROC_THREAD_ATTRIBUTE_NUM = _PROC_THREAD_ATTRIBUTE_NUM
PROC_THREAD_ATTRIBUTE_NUM__enumvalues = _PROC_THREAD_ATTRIBUTE_NUM__enumvalues
PGET_SYSTEM_WOW64_DIRECTORY_A = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(ctypes.c_char), ctypes.c_uint32)
PGET_SYSTEM_WOW64_DIRECTORY_W = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(ctypes.c_int16), ctypes.c_uint32)
LPPROGRESS_ROUTINE = ctypes.CFUNCTYPE(ctypes.c_uint32, union__LARGE_INTEGER, union__LARGE_INTEGER, union__LARGE_INTEGER, union__LARGE_INTEGER, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(None))

# values for enumeration '_COPYFILE2_MESSAGE_TYPE'
_COPYFILE2_MESSAGE_TYPE__enumvalues = {
    0: 'COPYFILE2_CALLBACK_NONE',
    1: 'COPYFILE2_CALLBACK_CHUNK_STARTED',
    2: 'COPYFILE2_CALLBACK_CHUNK_FINISHED',
    3: 'COPYFILE2_CALLBACK_STREAM_STARTED',
    4: 'COPYFILE2_CALLBACK_STREAM_FINISHED',
    5: 'COPYFILE2_CALLBACK_POLL_CONTINUE',
    6: 'COPYFILE2_CALLBACK_ERROR',
    7: 'COPYFILE2_CALLBACK_MAX',
}
COPYFILE2_CALLBACK_NONE = 0
COPYFILE2_CALLBACK_CHUNK_STARTED = 1
COPYFILE2_CALLBACK_CHUNK_FINISHED = 2
COPYFILE2_CALLBACK_STREAM_STARTED = 3
COPYFILE2_CALLBACK_STREAM_FINISHED = 4
COPYFILE2_CALLBACK_POLL_CONTINUE = 5
COPYFILE2_CALLBACK_ERROR = 6
COPYFILE2_CALLBACK_MAX = 7
_COPYFILE2_MESSAGE_TYPE = ctypes.c_uint32 # enum
COPYFILE2_MESSAGE_TYPE = _COPYFILE2_MESSAGE_TYPE
COPYFILE2_MESSAGE_TYPE__enumvalues = _COPYFILE2_MESSAGE_TYPE__enumvalues

# values for enumeration '_COPYFILE2_MESSAGE_ACTION'
_COPYFILE2_MESSAGE_ACTION__enumvalues = {
    0: 'COPYFILE2_PROGRESS_CONTINUE',
    1: 'COPYFILE2_PROGRESS_CANCEL',
    2: 'COPYFILE2_PROGRESS_STOP',
    3: 'COPYFILE2_PROGRESS_QUIET',
    4: 'COPYFILE2_PROGRESS_PAUSE',
}
COPYFILE2_PROGRESS_CONTINUE = 0
COPYFILE2_PROGRESS_CANCEL = 1
COPYFILE2_PROGRESS_STOP = 2
COPYFILE2_PROGRESS_QUIET = 3
COPYFILE2_PROGRESS_PAUSE = 4
_COPYFILE2_MESSAGE_ACTION = ctypes.c_uint32 # enum
COPYFILE2_MESSAGE_ACTION = _COPYFILE2_MESSAGE_ACTION
COPYFILE2_MESSAGE_ACTION__enumvalues = _COPYFILE2_MESSAGE_ACTION__enumvalues

# values for enumeration '_COPYFILE2_COPY_PHASE'
_COPYFILE2_COPY_PHASE__enumvalues = {
    0: 'COPYFILE2_PHASE_NONE',
    1: 'COPYFILE2_PHASE_PREPARE_SOURCE',
    2: 'COPYFILE2_PHASE_PREPARE_DEST',
    3: 'COPYFILE2_PHASE_READ_SOURCE',
    4: 'COPYFILE2_PHASE_WRITE_DESTINATION',
    5: 'COPYFILE2_PHASE_SERVER_COPY',
    6: 'COPYFILE2_PHASE_NAMEGRAFT_COPY',
    7: 'COPYFILE2_PHASE_MAX',
}
COPYFILE2_PHASE_NONE = 0
COPYFILE2_PHASE_PREPARE_SOURCE = 1
COPYFILE2_PHASE_PREPARE_DEST = 2
COPYFILE2_PHASE_READ_SOURCE = 3
COPYFILE2_PHASE_WRITE_DESTINATION = 4
COPYFILE2_PHASE_SERVER_COPY = 5
COPYFILE2_PHASE_NAMEGRAFT_COPY = 6
COPYFILE2_PHASE_MAX = 7
_COPYFILE2_COPY_PHASE = ctypes.c_uint32 # enum
COPYFILE2_COPY_PHASE = _COPYFILE2_COPY_PHASE
COPYFILE2_COPY_PHASE__enumvalues = _COPYFILE2_COPY_PHASE__enumvalues
class struct__5777CF876D10E8036D834038A6EF48F9(Structure):
    pass

struct__5777CF876D10E8036D834038A6EF48F9._pack_ = 1 # source:False
struct__5777CF876D10E8036D834038A6EF48F9._fields_ = [
    ('dwStreamNumber', ctypes.c_uint32),
    ('dwReserved', ctypes.c_uint32),
    ('hSourceFile', ctypes.POINTER(None)),
    ('hDestinationFile', ctypes.POINTER(None)),
    ('uliChunkNumber', ULARGE_INTEGER),
    ('uliChunkSize', ULARGE_INTEGER),
    ('uliStreamSize', ULARGE_INTEGER),
    ('uliTotalFileSize', ULARGE_INTEGER),
]

class struct__E992A59DE776EA4CB6EFF8EBB7345C5E(Structure):
    pass

struct__E992A59DE776EA4CB6EFF8EBB7345C5E._pack_ = 1 # source:False
struct__E992A59DE776EA4CB6EFF8EBB7345C5E._fields_ = [
    ('dwStreamNumber', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('hSourceFile', ctypes.POINTER(None)),
    ('hDestinationFile', ctypes.POINTER(None)),
    ('uliChunkNumber', ULARGE_INTEGER),
    ('uliChunkSize', ULARGE_INTEGER),
    ('uliStreamSize', ULARGE_INTEGER),
    ('uliStreamBytesTransferred', ULARGE_INTEGER),
    ('uliTotalFileSize', ULARGE_INTEGER),
    ('uliTotalBytesTransferred', ULARGE_INTEGER),
]

class struct__5BBFE38D397EB168C4922E80DFABA463(Structure):
    pass

struct__5BBFE38D397EB168C4922E80DFABA463._pack_ = 1 # source:False
struct__5BBFE38D397EB168C4922E80DFABA463._fields_ = [
    ('dwStreamNumber', ctypes.c_uint32),
    ('dwReserved', ctypes.c_uint32),
    ('hSourceFile', ctypes.POINTER(None)),
    ('hDestinationFile', ctypes.POINTER(None)),
    ('uliStreamSize', ULARGE_INTEGER),
    ('uliTotalFileSize', ULARGE_INTEGER),
]

class struct__D5D81F448FDBA1CEB8B2FBEA063976CD(Structure):
    pass

struct__D5D81F448FDBA1CEB8B2FBEA063976CD._pack_ = 1 # source:False
struct__D5D81F448FDBA1CEB8B2FBEA063976CD._fields_ = [
    ('dwStreamNumber', ctypes.c_uint32),
    ('dwReserved', ctypes.c_uint32),
    ('hSourceFile', ctypes.POINTER(None)),
    ('hDestinationFile', ctypes.POINTER(None)),
    ('uliStreamSize', ULARGE_INTEGER),
    ('uliStreamBytesTransferred', ULARGE_INTEGER),
    ('uliTotalFileSize', ULARGE_INTEGER),
    ('uliTotalBytesTransferred', ULARGE_INTEGER),
]

class struct__368C7D4AF4E90F16CD36F8E21C470A79(Structure):
    pass

struct__368C7D4AF4E90F16CD36F8E21C470A79._pack_ = 1 # source:False
struct__368C7D4AF4E90F16CD36F8E21C470A79._fields_ = [
    ('dwReserved', ctypes.c_uint32),
]

class struct__0C5D68A923626F87375DD95B3AA1763F(Structure):
    pass

struct__0C5D68A923626F87375DD95B3AA1763F._pack_ = 1 # source:False
struct__0C5D68A923626F87375DD95B3AA1763F._fields_ = [
    ('CopyPhase', COPYFILE2_COPY_PHASE),
    ('dwStreamNumber', ctypes.c_uint32),
    ('hrFailure', ctypes.c_int32),
    ('dwReserved', ctypes.c_uint32),
    ('uliChunkNumber', ULARGE_INTEGER),
    ('uliStreamSize', ULARGE_INTEGER),
    ('uliStreamBytesTransferred', ULARGE_INTEGER),
    ('uliTotalFileSize', ULARGE_INTEGER),
    ('uliTotalBytesTransferred', ULARGE_INTEGER),
]

class union_COPYFILE2_MESSAGE___2BC58A2C9DBA44DF3EF418C4A17194B7(Union):
    pass

union_COPYFILE2_MESSAGE___2BC58A2C9DBA44DF3EF418C4A17194B7._pack_ = 1 # source:False
union_COPYFILE2_MESSAGE___2BC58A2C9DBA44DF3EF418C4A17194B7._fields_ = [
    ('ChunkStarted', struct__5777CF876D10E8036D834038A6EF48F9),
    ('ChunkFinished', struct__E992A59DE776EA4CB6EFF8EBB7345C5E),
    ('StreamStarted', struct__5BBFE38D397EB168C4922E80DFABA463),
    ('StreamFinished', struct__D5D81F448FDBA1CEB8B2FBEA063976CD),
    ('PollContinue', struct__368C7D4AF4E90F16CD36F8E21C470A79),
    ('Error', struct__0C5D68A923626F87375DD95B3AA1763F),
    ('PADDING_0', ctypes.c_ubyte * 16),
]

class struct_COPYFILE2_MESSAGE(Structure):
    pass

struct_COPYFILE2_MESSAGE._pack_ = 1 # source:False
struct_COPYFILE2_MESSAGE._fields_ = [
    ('Type', COPYFILE2_MESSAGE_TYPE),
    ('dwPadding', ctypes.c_uint32),
    ('Info', union_COPYFILE2_MESSAGE___2BC58A2C9DBA44DF3EF418C4A17194B7),
]

PCOPYFILE2_PROGRESS_ROUTINE = ctypes.CFUNCTYPE(_COPYFILE2_MESSAGE_ACTION, ctypes.POINTER(struct_COPYFILE2_MESSAGE), ctypes.POINTER(None))
class struct_COPYFILE2_EXTENDED_PARAMETERS(Structure):
    pass

struct_COPYFILE2_EXTENDED_PARAMETERS._pack_ = 1 # source:False
struct_COPYFILE2_EXTENDED_PARAMETERS._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('dwCopyFlags', ctypes.c_uint32),
    ('pfCancel', ctypes.POINTER(ctypes.c_int32)),
    ('pProgressRoutine', ctypes.CFUNCTYPE(_COPYFILE2_MESSAGE_ACTION, ctypes.POINTER(struct_COPYFILE2_MESSAGE), ctypes.POINTER(None))),
    ('pvCallbackContext', ctypes.POINTER(None)),
]

class struct__EVENTLOG_FULL_INFORMATION(Structure):
    pass

struct__EVENTLOG_FULL_INFORMATION._pack_ = 1 # source:False
struct__EVENTLOG_FULL_INFORMATION._fields_ = [
    ('dwFull', ctypes.c_uint32),
]

EVENTLOG_FULL_INFORMATION = struct__EVENTLOG_FULL_INFORMATION
LPEVENTLOG_FULL_INFORMATION = ctypes.POINTER(struct__EVENTLOG_FULL_INFORMATION)
OPERATION_ID = ctypes.c_uint32
class struct__OPERATION_START_PARAMETERS(Structure):
    pass

struct__OPERATION_START_PARAMETERS._pack_ = 1 # source:False
struct__OPERATION_START_PARAMETERS._fields_ = [
    ('Version', ctypes.c_uint32),
    ('OperationId', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
]

OPERATION_START_PARAMETERS = struct__OPERATION_START_PARAMETERS
POPERATION_START_PARAMETERS = ctypes.POINTER(struct__OPERATION_START_PARAMETERS)
class struct__OPERATION_END_PARAMETERS(Structure):
    pass

struct__OPERATION_END_PARAMETERS._pack_ = 1 # source:False
struct__OPERATION_END_PARAMETERS._fields_ = [
    ('Version', ctypes.c_uint32),
    ('OperationId', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
]

OPERATION_END_PARAMETERS = struct__OPERATION_END_PARAMETERS
POPERATION_END_PARAMETERS = ctypes.POINTER(struct__OPERATION_END_PARAMETERS)
class struct_tagHW_PROFILE_INFOA(Structure):
    pass

struct_tagHW_PROFILE_INFOA._pack_ = 1 # source:False
struct_tagHW_PROFILE_INFOA._fields_ = [
    ('dwDockInfo', ctypes.c_uint32),
    ('szHwProfileGuid', ctypes.c_char * 39),
    ('szHwProfileName', ctypes.c_char * 80),
    ('PADDING_0', ctypes.c_ubyte),
]

HW_PROFILE_INFOA = struct_tagHW_PROFILE_INFOA
LPHW_PROFILE_INFOA = ctypes.POINTER(struct_tagHW_PROFILE_INFOA)
class struct_tagHW_PROFILE_INFOW(Structure):
    pass

struct_tagHW_PROFILE_INFOW._pack_ = 1 # source:False
struct_tagHW_PROFILE_INFOW._fields_ = [
    ('dwDockInfo', ctypes.c_uint32),
    ('szHwProfileGuid', ctypes.c_int16 * 39),
    ('szHwProfileName', ctypes.c_int16 * 80),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

HW_PROFILE_INFOW = struct_tagHW_PROFILE_INFOW
LPHW_PROFILE_INFOW = ctypes.POINTER(struct_tagHW_PROFILE_INFOW)
HW_PROFILE_INFO = struct_tagHW_PROFILE_INFOA
LPHW_PROFILE_INFO = ctypes.POINTER(struct_tagHW_PROFILE_INFOA)
class struct__TIME_ZONE_INFORMATION(Structure):
    pass

struct__TIME_ZONE_INFORMATION._pack_ = 1 # source:False
struct__TIME_ZONE_INFORMATION._fields_ = [
    ('Bias', ctypes.c_int32),
    ('StandardName', ctypes.c_int16 * 32),
    ('StandardDate', SYSTEMTIME),
    ('StandardBias', ctypes.c_int32),
    ('DaylightName', ctypes.c_int16 * 32),
    ('DaylightDate', SYSTEMTIME),
    ('DaylightBias', ctypes.c_int32),
]

TIME_ZONE_INFORMATION = struct__TIME_ZONE_INFORMATION
PTIME_ZONE_INFORMATION = ctypes.POINTER(struct__TIME_ZONE_INFORMATION)
LPTIME_ZONE_INFORMATION = ctypes.POINTER(struct__TIME_ZONE_INFORMATION)
class struct__TIME_DYNAMIC_ZONE_INFORMATION(Structure):
    pass

struct__TIME_DYNAMIC_ZONE_INFORMATION._pack_ = 1 # source:False
struct__TIME_DYNAMIC_ZONE_INFORMATION._fields_ = [
    ('Bias', ctypes.c_int32),
    ('StandardName', ctypes.c_int16 * 32),
    ('StandardDate', SYSTEMTIME),
    ('StandardBias', ctypes.c_int32),
    ('DaylightName', ctypes.c_int16 * 32),
    ('DaylightDate', SYSTEMTIME),
    ('DaylightBias', ctypes.c_int32),
    ('TimeZoneKeyName', ctypes.c_int16 * 128),
    ('DynamicDaylightTimeDisabled', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

DYNAMIC_TIME_ZONE_INFORMATION = struct__TIME_DYNAMIC_ZONE_INFORMATION
PDYNAMIC_TIME_ZONE_INFORMATION = ctypes.POINTER(struct__TIME_DYNAMIC_ZONE_INFORMATION)
class struct__SYSTEM_POWER_STATUS(Structure):
    pass

struct__SYSTEM_POWER_STATUS._pack_ = 1 # source:False
struct__SYSTEM_POWER_STATUS._fields_ = [
    ('ACLineStatus', ctypes.c_ubyte),
    ('BatteryFlag', ctypes.c_ubyte),
    ('BatteryLifePercent', ctypes.c_ubyte),
    ('SystemStatusFlag', ctypes.c_ubyte),
    ('BatteryLifeTime', ctypes.c_uint32),
    ('BatteryFullLifeTime', ctypes.c_uint32),
]

SYSTEM_POWER_STATUS = struct__SYSTEM_POWER_STATUS
LPSYSTEM_POWER_STATUS = ctypes.POINTER(struct__SYSTEM_POWER_STATUS)
class struct_tagACTCTXA(Structure):
    pass

struct_tagACTCTXA._pack_ = 1 # source:False
struct_tagACTCTXA._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('lpSource', ctypes.POINTER(ctypes.c_char)),
    ('wProcessorArchitecture', ctypes.c_uint16),
    ('wLangId', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpAssemblyDirectory', ctypes.POINTER(ctypes.c_char)),
    ('lpResourceName', ctypes.POINTER(ctypes.c_char)),
    ('lpApplicationName', ctypes.POINTER(ctypes.c_char)),
    ('hModule', ctypes.POINTER(struct_HINSTANCE__)),
]

ACTCTXA = struct_tagACTCTXA
PACTCTXA = ctypes.POINTER(struct_tagACTCTXA)
class struct_tagACTCTXW(Structure):
    pass

struct_tagACTCTXW._pack_ = 1 # source:False
struct_tagACTCTXW._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('lpSource', ctypes.POINTER(ctypes.c_int16)),
    ('wProcessorArchitecture', ctypes.c_uint16),
    ('wLangId', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpAssemblyDirectory', ctypes.POINTER(ctypes.c_int16)),
    ('lpResourceName', ctypes.POINTER(ctypes.c_int16)),
    ('lpApplicationName', ctypes.POINTER(ctypes.c_int16)),
    ('hModule', ctypes.POINTER(struct_HINSTANCE__)),
]

ACTCTXW = struct_tagACTCTXW
PACTCTXW = ctypes.POINTER(struct_tagACTCTXW)
ACTCTX = struct_tagACTCTXA
PACTCTX = ctypes.POINTER(struct_tagACTCTXA)
PCACTCTXA = ctypes.POINTER(struct_tagACTCTXA)
PCACTCTXW = ctypes.POINTER(struct_tagACTCTXW)
PCACTCTX = ctypes.POINTER(struct_tagACTCTXA)
class struct_tagACTCTX_SECTION_KEYED_DATA_2600(Structure):
    pass

struct_tagACTCTX_SECTION_KEYED_DATA_2600._pack_ = 1 # source:False
struct_tagACTCTX_SECTION_KEYED_DATA_2600._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('ulDataFormatVersion', ctypes.c_uint32),
    ('lpData', ctypes.POINTER(None)),
    ('ulLength', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpSectionGlobalData', ctypes.POINTER(None)),
    ('ulSectionGlobalDataLength', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpSectionBase', ctypes.POINTER(None)),
    ('ulSectionTotalLength', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('hActCtx', ctypes.POINTER(None)),
    ('ulAssemblyRosterIndex', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
]

ACTCTX_SECTION_KEYED_DATA_2600 = struct_tagACTCTX_SECTION_KEYED_DATA_2600
PACTCTX_SECTION_KEYED_DATA_2600 = ctypes.POINTER(struct_tagACTCTX_SECTION_KEYED_DATA_2600)
PCACTCTX_SECTION_KEYED_DATA_2600 = ctypes.POINTER(struct_tagACTCTX_SECTION_KEYED_DATA_2600)
class struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA(Structure):
    pass

struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA._pack_ = 1 # source:False
struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA._fields_ = [
    ('lpInformation', ctypes.POINTER(None)),
    ('lpSectionBase', ctypes.POINTER(None)),
    ('ulSectionLength', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpSectionGlobalDataBase', ctypes.POINTER(None)),
    ('ulSectionGlobalDataLength', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = ctypes.POINTER(struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA)
PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = ctypes.POINTER(struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA)
class struct_tagACTCTX_SECTION_KEYED_DATA(Structure):
    pass

struct_tagACTCTX_SECTION_KEYED_DATA._pack_ = 1 # source:False
struct_tagACTCTX_SECTION_KEYED_DATA._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('ulDataFormatVersion', ctypes.c_uint32),
    ('lpData', ctypes.POINTER(None)),
    ('ulLength', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpSectionGlobalData', ctypes.POINTER(None)),
    ('ulSectionGlobalDataLength', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpSectionBase', ctypes.POINTER(None)),
    ('ulSectionTotalLength', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('hActCtx', ctypes.POINTER(None)),
    ('ulAssemblyRosterIndex', ctypes.c_uint32),
    ('ulFlags', ctypes.c_uint32),
    ('AssemblyMetadata', ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA),
]

ACTCTX_SECTION_KEYED_DATA = struct_tagACTCTX_SECTION_KEYED_DATA
PACTCTX_SECTION_KEYED_DATA = ctypes.POINTER(struct_tagACTCTX_SECTION_KEYED_DATA)
PCACTCTX_SECTION_KEYED_DATA = ctypes.POINTER(struct_tagACTCTX_SECTION_KEYED_DATA)
class struct__ACTIVATION_CONTEXT_BASIC_INFORMATION(Structure):
    pass

struct__ACTIVATION_CONTEXT_BASIC_INFORMATION._pack_ = 1 # source:False
struct__ACTIVATION_CONTEXT_BASIC_INFORMATION._fields_ = [
    ('hActCtx', ctypes.POINTER(None)),
    ('dwFlags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

ACTIVATION_CONTEXT_BASIC_INFORMATION = struct__ACTIVATION_CONTEXT_BASIC_INFORMATION
PACTIVATION_CONTEXT_BASIC_INFORMATION = ctypes.POINTER(struct__ACTIVATION_CONTEXT_BASIC_INFORMATION)
PCACTIVATION_CONTEXT_BASIC_INFORMATION = ctypes.POINTER(struct__ACTIVATION_CONTEXT_BASIC_INFORMATION)
PQUERYACTCTXW_FUNC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(None), ctypes.c_uint32, ctypes.POINTER(None), ctypes.c_uint64, ctypes.POINTER(ctypes.c_uint64))
APPLICATION_RECOVERY_CALLBACK = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None))
class struct__FILE_BASIC_INFO(Structure):
    pass

struct__FILE_BASIC_INFO._pack_ = 1 # source:False
struct__FILE_BASIC_INFO._fields_ = [
    ('CreationTime', LARGE_INTEGER),
    ('LastAccessTime', LARGE_INTEGER),
    ('LastWriteTime', LARGE_INTEGER),
    ('ChangeTime', LARGE_INTEGER),
    ('FileAttributes', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

FILE_BASIC_INFO = struct__FILE_BASIC_INFO
PFILE_BASIC_INFO = ctypes.POINTER(struct__FILE_BASIC_INFO)
class struct__FILE_STANDARD_INFO(Structure):
    pass

struct__FILE_STANDARD_INFO._pack_ = 1 # source:False
struct__FILE_STANDARD_INFO._fields_ = [
    ('AllocationSize', LARGE_INTEGER),
    ('EndOfFile', LARGE_INTEGER),
    ('NumberOfLinks', ctypes.c_uint32),
    ('DeletePending', ctypes.c_ubyte),
    ('Directory', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

FILE_STANDARD_INFO = struct__FILE_STANDARD_INFO
PFILE_STANDARD_INFO = ctypes.POINTER(struct__FILE_STANDARD_INFO)
class struct__FILE_NAME_INFO(Structure):
    pass

struct__FILE_NAME_INFO._pack_ = 1 # source:False
struct__FILE_NAME_INFO._fields_ = [
    ('FileNameLength', ctypes.c_uint32),
    ('FileName', ctypes.c_int16 * 1),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

FILE_NAME_INFO = struct__FILE_NAME_INFO
PFILE_NAME_INFO = ctypes.POINTER(struct__FILE_NAME_INFO)
class struct__FILE_CASE_SENSITIVE_INFO(Structure):
    pass

struct__FILE_CASE_SENSITIVE_INFO._pack_ = 1 # source:False
struct__FILE_CASE_SENSITIVE_INFO._fields_ = [
    ('Flags', ctypes.c_uint32),
]

FILE_CASE_SENSITIVE_INFO = struct__FILE_CASE_SENSITIVE_INFO
PFILE_CASE_SENSITIVE_INFO = ctypes.POINTER(struct__FILE_CASE_SENSITIVE_INFO)
class union__FILE_RENAME_INFO___204296FCB7589B91A70F8DC5DCC63ECC(Union):
    pass

union__FILE_RENAME_INFO___204296FCB7589B91A70F8DC5DCC63ECC._pack_ = 1 # source:False
union__FILE_RENAME_INFO___204296FCB7589B91A70F8DC5DCC63ECC._fields_ = [
    ('ReplaceIfExists', ctypes.c_ubyte),
    ('Flags', ctypes.c_uint32),
]

class struct__FILE_RENAME_INFO(Structure):
    pass

class union__FILE_RENAME_INFO_0(Union):
    pass

union__FILE_RENAME_INFO_0._pack_ = 1 # source:False
union__FILE_RENAME_INFO_0._fields_ = [
    ('ReplaceIfExists', ctypes.c_ubyte),
    ('Flags', ctypes.c_uint32),
]

struct__FILE_RENAME_INFO._pack_ = 1 # source:False
struct__FILE_RENAME_INFO._anonymous_ = ('_0',)
struct__FILE_RENAME_INFO._fields_ = [
    ('_0', union__FILE_RENAME_INFO_0),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('RootDirectory', ctypes.POINTER(None)),
    ('FileNameLength', ctypes.c_uint32),
    ('FileName', ctypes.c_int16 * 1),
    ('PADDING_1', ctypes.c_ubyte * 2),
]

FILE_RENAME_INFO = struct__FILE_RENAME_INFO
PFILE_RENAME_INFO = ctypes.POINTER(struct__FILE_RENAME_INFO)
class struct__FILE_ALLOCATION_INFO(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('AllocationSize', LARGE_INTEGER),
     ]

FILE_ALLOCATION_INFO = struct__FILE_ALLOCATION_INFO
PFILE_ALLOCATION_INFO = ctypes.POINTER(struct__FILE_ALLOCATION_INFO)
class struct__FILE_END_OF_FILE_INFO(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('EndOfFile', LARGE_INTEGER),
     ]

FILE_END_OF_FILE_INFO = struct__FILE_END_OF_FILE_INFO
PFILE_END_OF_FILE_INFO = ctypes.POINTER(struct__FILE_END_OF_FILE_INFO)
class struct__FILE_STREAM_INFO(Structure):
    pass

struct__FILE_STREAM_INFO._pack_ = 1 # source:False
struct__FILE_STREAM_INFO._fields_ = [
    ('NextEntryOffset', ctypes.c_uint32),
    ('StreamNameLength', ctypes.c_uint32),
    ('StreamSize', LARGE_INTEGER),
    ('StreamAllocationSize', LARGE_INTEGER),
    ('StreamName', ctypes.c_int16 * 1),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

FILE_STREAM_INFO = struct__FILE_STREAM_INFO
PFILE_STREAM_INFO = ctypes.POINTER(struct__FILE_STREAM_INFO)
class struct__FILE_COMPRESSION_INFO(Structure):
    pass

struct__FILE_COMPRESSION_INFO._pack_ = 1 # source:False
struct__FILE_COMPRESSION_INFO._fields_ = [
    ('CompressedFileSize', LARGE_INTEGER),
    ('CompressionFormat', ctypes.c_uint16),
    ('CompressionUnitShift', ctypes.c_ubyte),
    ('ChunkShift', ctypes.c_ubyte),
    ('ClusterShift', ctypes.c_ubyte),
    ('Reserved', ctypes.c_ubyte * 3),
]

FILE_COMPRESSION_INFO = struct__FILE_COMPRESSION_INFO
PFILE_COMPRESSION_INFO = ctypes.POINTER(struct__FILE_COMPRESSION_INFO)
class struct__FILE_ATTRIBUTE_TAG_INFO(Structure):
    pass

struct__FILE_ATTRIBUTE_TAG_INFO._pack_ = 1 # source:False
struct__FILE_ATTRIBUTE_TAG_INFO._fields_ = [
    ('FileAttributes', ctypes.c_uint32),
    ('ReparseTag', ctypes.c_uint32),
]

FILE_ATTRIBUTE_TAG_INFO = struct__FILE_ATTRIBUTE_TAG_INFO
PFILE_ATTRIBUTE_TAG_INFO = ctypes.POINTER(struct__FILE_ATTRIBUTE_TAG_INFO)
class struct__FILE_DISPOSITION_INFO(Structure):
    pass

struct__FILE_DISPOSITION_INFO._pack_ = 1 # source:False
struct__FILE_DISPOSITION_INFO._fields_ = [
    ('DeleteFileA', ctypes.c_ubyte),
]

FILE_DISPOSITION_INFO = struct__FILE_DISPOSITION_INFO
PFILE_DISPOSITION_INFO = ctypes.POINTER(struct__FILE_DISPOSITION_INFO)
class struct__FILE_DISPOSITION_INFO_EX(Structure):
    pass

struct__FILE_DISPOSITION_INFO_EX._pack_ = 1 # source:False
struct__FILE_DISPOSITION_INFO_EX._fields_ = [
    ('Flags', ctypes.c_uint32),
]

FILE_DISPOSITION_INFO_EX = struct__FILE_DISPOSITION_INFO_EX
PFILE_DISPOSITION_INFO_EX = ctypes.POINTER(struct__FILE_DISPOSITION_INFO_EX)
class struct__FILE_ID_BOTH_DIR_INFO(Structure):
    pass

struct__FILE_ID_BOTH_DIR_INFO._pack_ = 1 # source:False
struct__FILE_ID_BOTH_DIR_INFO._fields_ = [
    ('NextEntryOffset', ctypes.c_uint32),
    ('FileIndex', ctypes.c_uint32),
    ('CreationTime', LARGE_INTEGER),
    ('LastAccessTime', LARGE_INTEGER),
    ('LastWriteTime', LARGE_INTEGER),
    ('ChangeTime', LARGE_INTEGER),
    ('EndOfFile', LARGE_INTEGER),
    ('AllocationSize', LARGE_INTEGER),
    ('FileAttributes', ctypes.c_uint32),
    ('FileNameLength', ctypes.c_uint32),
    ('EaSize', ctypes.c_uint32),
    ('ShortNameLength', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte),
    ('ShortName', ctypes.c_int16 * 12),
    ('PADDING_1', ctypes.c_ubyte * 2),
    ('FileId', LARGE_INTEGER),
    ('FileName', ctypes.c_int16 * 1),
    ('PADDING_2', ctypes.c_ubyte * 6),
]

FILE_ID_BOTH_DIR_INFO = struct__FILE_ID_BOTH_DIR_INFO
PFILE_ID_BOTH_DIR_INFO = ctypes.POINTER(struct__FILE_ID_BOTH_DIR_INFO)
class struct__FILE_FULL_DIR_INFO(Structure):
    pass

struct__FILE_FULL_DIR_INFO._pack_ = 1 # source:False
struct__FILE_FULL_DIR_INFO._fields_ = [
    ('NextEntryOffset', ctypes.c_uint32),
    ('FileIndex', ctypes.c_uint32),
    ('CreationTime', LARGE_INTEGER),
    ('LastAccessTime', LARGE_INTEGER),
    ('LastWriteTime', LARGE_INTEGER),
    ('ChangeTime', LARGE_INTEGER),
    ('EndOfFile', LARGE_INTEGER),
    ('AllocationSize', LARGE_INTEGER),
    ('FileAttributes', ctypes.c_uint32),
    ('FileNameLength', ctypes.c_uint32),
    ('EaSize', ctypes.c_uint32),
    ('FileName', ctypes.c_int16 * 1),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

FILE_FULL_DIR_INFO = struct__FILE_FULL_DIR_INFO
PFILE_FULL_DIR_INFO = ctypes.POINTER(struct__FILE_FULL_DIR_INFO)

# values for enumeration '_PRIORITY_HINT'
_PRIORITY_HINT__enumvalues = {
    0: 'IoPriorityHintVeryLow',
    1: 'IoPriorityHintLow',
    2: 'IoPriorityHintNormal',
    3: 'MaximumIoPriorityHintType',
}
IoPriorityHintVeryLow = 0
IoPriorityHintLow = 1
IoPriorityHintNormal = 2
MaximumIoPriorityHintType = 3
_PRIORITY_HINT = ctypes.c_uint32 # enum
PRIORITY_HINT = _PRIORITY_HINT
PRIORITY_HINT__enumvalues = _PRIORITY_HINT__enumvalues
class struct__FILE_IO_PRIORITY_HINT_INFO(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('PriorityHint', PRIORITY_HINT),
     ]

FILE_IO_PRIORITY_HINT_INFO = struct__FILE_IO_PRIORITY_HINT_INFO
PFILE_IO_PRIORITY_HINT_INFO = ctypes.POINTER(struct__FILE_IO_PRIORITY_HINT_INFO)
class struct__FILE_ALIGNMENT_INFO(Structure):
    pass

struct__FILE_ALIGNMENT_INFO._pack_ = 1 # source:False
struct__FILE_ALIGNMENT_INFO._fields_ = [
    ('AlignmentRequirement', ctypes.c_uint32),
]

FILE_ALIGNMENT_INFO = struct__FILE_ALIGNMENT_INFO
PFILE_ALIGNMENT_INFO = ctypes.POINTER(struct__FILE_ALIGNMENT_INFO)
class struct__FILE_STORAGE_INFO(Structure):
    pass

struct__FILE_STORAGE_INFO._pack_ = 1 # source:False
struct__FILE_STORAGE_INFO._fields_ = [
    ('LogicalBytesPerSector', ctypes.c_uint32),
    ('PhysicalBytesPerSectorForAtomicity', ctypes.c_uint32),
    ('PhysicalBytesPerSectorForPerformance', ctypes.c_uint32),
    ('FileSystemEffectivePhysicalBytesPerSectorForAtomicity', ctypes.c_uint32),
    ('Flags', ctypes.c_uint32),
    ('ByteOffsetForSectorAlignment', ctypes.c_uint32),
    ('ByteOffsetForPartitionAlignment', ctypes.c_uint32),
]

FILE_STORAGE_INFO = struct__FILE_STORAGE_INFO
PFILE_STORAGE_INFO = ctypes.POINTER(struct__FILE_STORAGE_INFO)
class struct__FILE_ID_INFO(Structure):
    pass

struct__FILE_ID_INFO._pack_ = 1 # source:False
struct__FILE_ID_INFO._fields_ = [
    ('VolumeSerialNumber', ctypes.c_uint64),
    ('FileId', FILE_ID_128),
]

FILE_ID_INFO = struct__FILE_ID_INFO
PFILE_ID_INFO = ctypes.POINTER(struct__FILE_ID_INFO)
class struct__FILE_ID_EXTD_DIR_INFO(Structure):
    pass

struct__FILE_ID_EXTD_DIR_INFO._pack_ = 1 # source:False
struct__FILE_ID_EXTD_DIR_INFO._fields_ = [
    ('NextEntryOffset', ctypes.c_uint32),
    ('FileIndex', ctypes.c_uint32),
    ('CreationTime', LARGE_INTEGER),
    ('LastAccessTime', LARGE_INTEGER),
    ('LastWriteTime', LARGE_INTEGER),
    ('ChangeTime', LARGE_INTEGER),
    ('EndOfFile', LARGE_INTEGER),
    ('AllocationSize', LARGE_INTEGER),
    ('FileAttributes', ctypes.c_uint32),
    ('FileNameLength', ctypes.c_uint32),
    ('EaSize', ctypes.c_uint32),
    ('ReparsePointTag', ctypes.c_uint32),
    ('FileId', FILE_ID_128),
    ('FileName', ctypes.c_int16 * 1),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

FILE_ID_EXTD_DIR_INFO = struct__FILE_ID_EXTD_DIR_INFO
PFILE_ID_EXTD_DIR_INFO = ctypes.POINTER(struct__FILE_ID_EXTD_DIR_INFO)
class struct__FILE_REMOTE_PROTOCOL_INFO___37429236F9BFAE17F3D399B911E9C242(Structure):
    pass

struct__FILE_REMOTE_PROTOCOL_INFO___37429236F9BFAE17F3D399B911E9C242._pack_ = 1 # source:False
struct__FILE_REMOTE_PROTOCOL_INFO___37429236F9BFAE17F3D399B911E9C242._fields_ = [
    ('Reserved', ctypes.c_uint32 * 8),
]

class struct__0129B05177E31069DD1C2B224CCB89A0(Structure):
    pass

struct__0129B05177E31069DD1C2B224CCB89A0._pack_ = 1 # source:False
struct__0129B05177E31069DD1C2B224CCB89A0._fields_ = [
    ('Capabilities', ctypes.c_uint32),
]

class struct__3EACACF26E2CA95170F36F128BAC7767(Structure):
    pass

struct__3EACACF26E2CA95170F36F128BAC7767._pack_ = 1 # source:False
struct__3EACACF26E2CA95170F36F128BAC7767._fields_ = [
    ('Capabilities', ctypes.c_uint32),
    ('CachingFlags', ctypes.c_uint32),
]

class struct__FBCF7DE66C864CA9F22E8AAD63C2CD4B(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Server', struct__0129B05177E31069DD1C2B224CCB89A0),
    ('Share', struct__3EACACF26E2CA95170F36F128BAC7767),
     ]

class union__FILE_REMOTE_PROTOCOL_INFO___EE68D4708CE0036909D2CBEE6610F96A(Union):
    pass

union__FILE_REMOTE_PROTOCOL_INFO___EE68D4708CE0036909D2CBEE6610F96A._pack_ = 1 # source:False
union__FILE_REMOTE_PROTOCOL_INFO___EE68D4708CE0036909D2CBEE6610F96A._fields_ = [
    ('Smb2', struct__FBCF7DE66C864CA9F22E8AAD63C2CD4B),
    ('Reserved', ctypes.c_uint32 * 16),
]

class struct__FILE_REMOTE_PROTOCOL_INFO(Structure):
    pass

struct__FILE_REMOTE_PROTOCOL_INFO._pack_ = 1 # source:False
struct__FILE_REMOTE_PROTOCOL_INFO._fields_ = [
    ('StructureVersion', ctypes.c_uint16),
    ('StructureSize', ctypes.c_uint16),
    ('Protocol', ctypes.c_uint32),
    ('ProtocolMajorVersion', ctypes.c_uint16),
    ('ProtocolMinorVersion', ctypes.c_uint16),
    ('ProtocolRevision', ctypes.c_uint16),
    ('Reserved', ctypes.c_uint16),
    ('Flags', ctypes.c_uint32),
    ('GenericReserved', struct__FILE_REMOTE_PROTOCOL_INFO___37429236F9BFAE17F3D399B911E9C242),
    ('ProtocolSpecific', union__FILE_REMOTE_PROTOCOL_INFO___EE68D4708CE0036909D2CBEE6610F96A),
]

FILE_REMOTE_PROTOCOL_INFO = struct__FILE_REMOTE_PROTOCOL_INFO
PFILE_REMOTE_PROTOCOL_INFO = ctypes.POINTER(struct__FILE_REMOTE_PROTOCOL_INFO)

# values for enumeration '_FILE_ID_TYPE'
_FILE_ID_TYPE__enumvalues = {
    0: 'FileIdType',
    1: 'ObjectIdType',
    2: 'ExtendedFileIdType',
    3: 'MaximumFileIdType',
}
FileIdType = 0
ObjectIdType = 1
ExtendedFileIdType = 2
MaximumFileIdType = 3
_FILE_ID_TYPE = ctypes.c_uint32 # enum
FILE_ID_TYPE = _FILE_ID_TYPE
FILE_ID_TYPE__enumvalues = _FILE_ID_TYPE__enumvalues
PFILE_ID_TYPE = ctypes.POINTER(_FILE_ID_TYPE)
class union_FILE_ID_DESCRIPTOR___8E49B83756FA870B89867F74A9FED542(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('FileId', LARGE_INTEGER),
    ('ObjectId', GUID),
    ('ExtendedFileId', FILE_ID_128),
     ]

class struct_FILE_ID_DESCRIPTOR(Structure):
    pass

class union_FILE_ID_DESCRIPTOR_0(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('FileId', LARGE_INTEGER),
    ('ObjectId', GUID),
    ('ExtendedFileId', FILE_ID_128),
     ]

struct_FILE_ID_DESCRIPTOR._pack_ = 1 # source:False
struct_FILE_ID_DESCRIPTOR._anonymous_ = ('_0',)
struct_FILE_ID_DESCRIPTOR._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('Type', FILE_ID_TYPE),
    ('_0', union_FILE_ID_DESCRIPTOR_0),
]

LPFILE_ID_DESCRIPTOR = ctypes.POINTER(struct_FILE_ID_DESCRIPTOR)
class struct__DRAWPATRECT(Structure):
    pass

struct__DRAWPATRECT._pack_ = 1 # source:False
struct__DRAWPATRECT._fields_ = [
    ('ptPosition', POINT),
    ('ptSize', POINT),
    ('wStyle', ctypes.c_uint16),
    ('wPattern', ctypes.c_uint16),
]

DRAWPATRECT = struct__DRAWPATRECT
PDRAWPATRECT = ctypes.POINTER(struct__DRAWPATRECT)
class struct__PSINJECTDATA(Structure):
    pass

struct__PSINJECTDATA._pack_ = 1 # source:False
struct__PSINJECTDATA._fields_ = [
    ('DataBytes', ctypes.c_uint32),
    ('InjectionPoint', ctypes.c_uint16),
    ('PageNumber', ctypes.c_uint16),
]

PSINJECTDATA = struct__PSINJECTDATA
PPSINJECTDATA = ctypes.POINTER(struct__PSINJECTDATA)
class struct__PSFEATURE_OUTPUT(Structure):
    pass

struct__PSFEATURE_OUTPUT._pack_ = 1 # source:False
struct__PSFEATURE_OUTPUT._fields_ = [
    ('bPageIndependent', ctypes.c_int32),
    ('bSetPageDevice', ctypes.c_int32),
]

PSFEATURE_OUTPUT = struct__PSFEATURE_OUTPUT
PPSFEATURE_OUTPUT = ctypes.POINTER(struct__PSFEATURE_OUTPUT)
class struct__PSFEATURE_CUSTPAPER(Structure):
    pass

struct__PSFEATURE_CUSTPAPER._pack_ = 1 # source:False
struct__PSFEATURE_CUSTPAPER._fields_ = [
    ('lOrientation', ctypes.c_int32),
    ('lWidth', ctypes.c_int32),
    ('lHeight', ctypes.c_int32),
    ('lWidthOffset', ctypes.c_int32),
    ('lHeightOffset', ctypes.c_int32),
]

PSFEATURE_CUSTPAPER = struct__PSFEATURE_CUSTPAPER
PPSFEATURE_CUSTPAPER = ctypes.POINTER(struct__PSFEATURE_CUSTPAPER)
class struct_tagXFORM(Structure):
    pass

struct_tagXFORM._pack_ = 1 # source:False
struct_tagXFORM._fields_ = [
    ('eM11', ctypes.c_float),
    ('eM12', ctypes.c_float),
    ('eM21', ctypes.c_float),
    ('eM22', ctypes.c_float),
    ('eDx', ctypes.c_float),
    ('eDy', ctypes.c_float),
]

XFORM = struct_tagXFORM
PXFORM = ctypes.POINTER(struct_tagXFORM)
LPXFORM = ctypes.POINTER(struct_tagXFORM)
class struct_tagBITMAP(Structure):
    pass

struct_tagBITMAP._pack_ = 1 # source:False
struct_tagBITMAP._fields_ = [
    ('bmType', ctypes.c_int32),
    ('bmWidth', ctypes.c_int32),
    ('bmHeight', ctypes.c_int32),
    ('bmWidthBytes', ctypes.c_int32),
    ('bmPlanes', ctypes.c_uint16),
    ('bmBitsPixel', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('bmBits', ctypes.POINTER(None)),
]

BITMAP = struct_tagBITMAP
PBITMAP = ctypes.POINTER(struct_tagBITMAP)
NPBITMAP = ctypes.POINTER(struct_tagBITMAP)
LPBITMAP = ctypes.POINTER(struct_tagBITMAP)
class struct_tagRGBTRIPLE(Structure):
    pass

struct_tagRGBTRIPLE._pack_ = 1 # source:False
struct_tagRGBTRIPLE._fields_ = [
    ('rgbtBlue', ctypes.c_ubyte),
    ('rgbtGreen', ctypes.c_ubyte),
    ('rgbtRed', ctypes.c_ubyte),
]

RGBTRIPLE = struct_tagRGBTRIPLE
PRGBTRIPLE = ctypes.POINTER(struct_tagRGBTRIPLE)
NPRGBTRIPLE = ctypes.POINTER(struct_tagRGBTRIPLE)
LPRGBTRIPLE = ctypes.POINTER(struct_tagRGBTRIPLE)
class struct_tagRGBQUAD(Structure):
    pass

struct_tagRGBQUAD._pack_ = 1 # source:False
struct_tagRGBQUAD._fields_ = [
    ('rgbBlue', ctypes.c_ubyte),
    ('rgbGreen', ctypes.c_ubyte),
    ('rgbRed', ctypes.c_ubyte),
    ('rgbReserved', ctypes.c_ubyte),
]

RGBQUAD = struct_tagRGBQUAD
LPRGBQUAD = ctypes.POINTER(struct_tagRGBQUAD)
LCSCSTYPE = ctypes.c_int32
LCSGAMUTMATCH = ctypes.c_int32
FXPT16DOT16 = ctypes.c_int32
LPFXPT16DOT16 = ctypes.POINTER(ctypes.c_int32)
FXPT2DOT30 = ctypes.c_int32
LPFXPT2DOT30 = ctypes.POINTER(ctypes.c_int32)
class struct_tagCIEXYZ(Structure):
    pass

struct_tagCIEXYZ._pack_ = 1 # source:False
struct_tagCIEXYZ._fields_ = [
    ('ciexyzX', ctypes.c_int32),
    ('ciexyzY', ctypes.c_int32),
    ('ciexyzZ', ctypes.c_int32),
]

CIEXYZ = struct_tagCIEXYZ
LPCIEXYZ = ctypes.POINTER(struct_tagCIEXYZ)
class struct_tagICEXYZTRIPLE(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('ciexyzRed', CIEXYZ),
    ('ciexyzGreen', CIEXYZ),
    ('ciexyzBlue', CIEXYZ),
     ]

CIEXYZTRIPLE = struct_tagICEXYZTRIPLE
LPCIEXYZTRIPLE = ctypes.POINTER(struct_tagICEXYZTRIPLE)
class struct_tagLOGCOLORSPACEA(Structure):
    pass

struct_tagLOGCOLORSPACEA._pack_ = 1 # source:False
struct_tagLOGCOLORSPACEA._fields_ = [
    ('lcsSignature', ctypes.c_uint32),
    ('lcsVersion', ctypes.c_uint32),
    ('lcsSize', ctypes.c_uint32),
    ('lcsCSType', ctypes.c_int32),
    ('lcsIntent', ctypes.c_int32),
    ('lcsEndpoints', CIEXYZTRIPLE),
    ('lcsGammaRed', ctypes.c_uint32),
    ('lcsGammaGreen', ctypes.c_uint32),
    ('lcsGammaBlue', ctypes.c_uint32),
    ('lcsFilename', ctypes.c_char * 260),
]

LOGCOLORSPACEA = struct_tagLOGCOLORSPACEA
LPLOGCOLORSPACEA = ctypes.POINTER(struct_tagLOGCOLORSPACEA)
class struct_tagLOGCOLORSPACEW(Structure):
    pass

struct_tagLOGCOLORSPACEW._pack_ = 1 # source:False
struct_tagLOGCOLORSPACEW._fields_ = [
    ('lcsSignature', ctypes.c_uint32),
    ('lcsVersion', ctypes.c_uint32),
    ('lcsSize', ctypes.c_uint32),
    ('lcsCSType', ctypes.c_int32),
    ('lcsIntent', ctypes.c_int32),
    ('lcsEndpoints', CIEXYZTRIPLE),
    ('lcsGammaRed', ctypes.c_uint32),
    ('lcsGammaGreen', ctypes.c_uint32),
    ('lcsGammaBlue', ctypes.c_uint32),
    ('lcsFilename', ctypes.c_int16 * 260),
]

LOGCOLORSPACEW = struct_tagLOGCOLORSPACEW
LPLOGCOLORSPACEW = ctypes.POINTER(struct_tagLOGCOLORSPACEW)
LOGCOLORSPACE = struct_tagLOGCOLORSPACEA
LPLOGCOLORSPACE = ctypes.POINTER(struct_tagLOGCOLORSPACEA)
class struct_tagBITMAPCOREHEADER(Structure):
    pass

struct_tagBITMAPCOREHEADER._pack_ = 1 # source:False
struct_tagBITMAPCOREHEADER._fields_ = [
    ('bcSize', ctypes.c_uint32),
    ('bcWidth', ctypes.c_uint16),
    ('bcHeight', ctypes.c_uint16),
    ('bcPlanes', ctypes.c_uint16),
    ('bcBitCount', ctypes.c_uint16),
]

BITMAPCOREHEADER = struct_tagBITMAPCOREHEADER
LPBITMAPCOREHEADER = ctypes.POINTER(struct_tagBITMAPCOREHEADER)
PBITMAPCOREHEADER = ctypes.POINTER(struct_tagBITMAPCOREHEADER)
class struct_tagBITMAPINFOHEADER(Structure):
    pass

struct_tagBITMAPINFOHEADER._pack_ = 1 # source:False
struct_tagBITMAPINFOHEADER._fields_ = [
    ('biSize', ctypes.c_uint32),
    ('biWidth', ctypes.c_int32),
    ('biHeight', ctypes.c_int32),
    ('biPlanes', ctypes.c_uint16),
    ('biBitCount', ctypes.c_uint16),
    ('biCompression', ctypes.c_uint32),
    ('biSizeImage', ctypes.c_uint32),
    ('biXPelsPerMeter', ctypes.c_int32),
    ('biYPelsPerMeter', ctypes.c_int32),
    ('biClrUsed', ctypes.c_uint32),
    ('biClrImportant', ctypes.c_uint32),
]

BITMAPINFOHEADER = struct_tagBITMAPINFOHEADER
LPBITMAPINFOHEADER = ctypes.POINTER(struct_tagBITMAPINFOHEADER)
PBITMAPINFOHEADER = ctypes.POINTER(struct_tagBITMAPINFOHEADER)
class struct_BITMAPV4HEADER(Structure):
    pass

struct_BITMAPV4HEADER._pack_ = 1 # source:False
struct_BITMAPV4HEADER._fields_ = [
    ('bV4Size', ctypes.c_uint32),
    ('bV4Width', ctypes.c_int32),
    ('bV4Height', ctypes.c_int32),
    ('bV4Planes', ctypes.c_uint16),
    ('bV4BitCount', ctypes.c_uint16),
    ('bV4V4Compression', ctypes.c_uint32),
    ('bV4SizeImage', ctypes.c_uint32),
    ('bV4XPelsPerMeter', ctypes.c_int32),
    ('bV4YPelsPerMeter', ctypes.c_int32),
    ('bV4ClrUsed', ctypes.c_uint32),
    ('bV4ClrImportant', ctypes.c_uint32),
    ('bV4RedMask', ctypes.c_uint32),
    ('bV4GreenMask', ctypes.c_uint32),
    ('bV4BlueMask', ctypes.c_uint32),
    ('bV4AlphaMask', ctypes.c_uint32),
    ('bV4CSType', ctypes.c_uint32),
    ('bV4Endpoints', CIEXYZTRIPLE),
    ('bV4GammaRed', ctypes.c_uint32),
    ('bV4GammaGreen', ctypes.c_uint32),
    ('bV4GammaBlue', ctypes.c_uint32),
]

LPBITMAPV4HEADER = ctypes.POINTER(struct_BITMAPV4HEADER)
PBITMAPV4HEADER = ctypes.POINTER(struct_BITMAPV4HEADER)
class struct_BITMAPV5HEADER(Structure):
    pass

struct_BITMAPV5HEADER._pack_ = 1 # source:False
struct_BITMAPV5HEADER._fields_ = [
    ('bV5Size', ctypes.c_uint32),
    ('bV5Width', ctypes.c_int32),
    ('bV5Height', ctypes.c_int32),
    ('bV5Planes', ctypes.c_uint16),
    ('bV5BitCount', ctypes.c_uint16),
    ('bV5Compression', ctypes.c_uint32),
    ('bV5SizeImage', ctypes.c_uint32),
    ('bV5XPelsPerMeter', ctypes.c_int32),
    ('bV5YPelsPerMeter', ctypes.c_int32),
    ('bV5ClrUsed', ctypes.c_uint32),
    ('bV5ClrImportant', ctypes.c_uint32),
    ('bV5RedMask', ctypes.c_uint32),
    ('bV5GreenMask', ctypes.c_uint32),
    ('bV5BlueMask', ctypes.c_uint32),
    ('bV5AlphaMask', ctypes.c_uint32),
    ('bV5CSType', ctypes.c_uint32),
    ('bV5Endpoints', CIEXYZTRIPLE),
    ('bV5GammaRed', ctypes.c_uint32),
    ('bV5GammaGreen', ctypes.c_uint32),
    ('bV5GammaBlue', ctypes.c_uint32),
    ('bV5Intent', ctypes.c_uint32),
    ('bV5ProfileData', ctypes.c_uint32),
    ('bV5ProfileSize', ctypes.c_uint32),
    ('bV5Reserved', ctypes.c_uint32),
]

LPBITMAPV5HEADER = ctypes.POINTER(struct_BITMAPV5HEADER)
PBITMAPV5HEADER = ctypes.POINTER(struct_BITMAPV5HEADER)
class struct_tagBITMAPINFO(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('bmiHeader', BITMAPINFOHEADER),
    ('bmiColors', struct_tagRGBQUAD * 1),
     ]

BITMAPINFO = struct_tagBITMAPINFO
LPBITMAPINFO = ctypes.POINTER(struct_tagBITMAPINFO)
PBITMAPINFO = ctypes.POINTER(struct_tagBITMAPINFO)
class struct_tagBITMAPCOREINFO(Structure):
    pass

struct_tagBITMAPCOREINFO._pack_ = 1 # source:False
struct_tagBITMAPCOREINFO._fields_ = [
    ('bmciHeader', BITMAPCOREHEADER),
    ('bmciColors', struct_tagRGBTRIPLE * 1),
    ('PADDING_0', ctypes.c_ubyte),
]

BITMAPCOREINFO = struct_tagBITMAPCOREINFO
LPBITMAPCOREINFO = ctypes.POINTER(struct_tagBITMAPCOREINFO)
PBITMAPCOREINFO = ctypes.POINTER(struct_tagBITMAPCOREINFO)
class struct_tagBITMAPFILEHEADER(Structure):
    pass

struct_tagBITMAPFILEHEADER._pack_ = 1 # source:False
struct_tagBITMAPFILEHEADER._fields_ = [
    ('bfType', ctypes.c_uint16),
    ('bfSize', ctypes.c_uint32),
    ('bfReserved1', ctypes.c_uint16),
    ('bfReserved2', ctypes.c_uint16),
    ('bfOffBits', ctypes.c_uint32),
]

BITMAPFILEHEADER = struct_tagBITMAPFILEHEADER
LPBITMAPFILEHEADER = ctypes.POINTER(struct_tagBITMAPFILEHEADER)
PBITMAPFILEHEADER = ctypes.POINTER(struct_tagBITMAPFILEHEADER)
class struct_tagFONTSIGNATURE(Structure):
    pass

struct_tagFONTSIGNATURE._pack_ = 1 # source:False
struct_tagFONTSIGNATURE._fields_ = [
    ('fsUsb', ctypes.c_uint32 * 4),
    ('fsCsb', ctypes.c_uint32 * 2),
]

FONTSIGNATURE = struct_tagFONTSIGNATURE
PFONTSIGNATURE = ctypes.POINTER(struct_tagFONTSIGNATURE)
LPFONTSIGNATURE = ctypes.POINTER(struct_tagFONTSIGNATURE)
class struct_tagCHARSETINFO(Structure):
    pass

struct_tagCHARSETINFO._pack_ = 1 # source:False
struct_tagCHARSETINFO._fields_ = [
    ('ciCharset', ctypes.c_uint32),
    ('ciACP', ctypes.c_uint32),
    ('fs', FONTSIGNATURE),
]

CHARSETINFO = struct_tagCHARSETINFO
PCHARSETINFO = ctypes.POINTER(struct_tagCHARSETINFO)
NPCHARSETINFO = ctypes.POINTER(struct_tagCHARSETINFO)
LPCHARSETINFO = ctypes.POINTER(struct_tagCHARSETINFO)
class struct_tagLOCALESIGNATURE(Structure):
    pass

struct_tagLOCALESIGNATURE._pack_ = 1 # source:False
struct_tagLOCALESIGNATURE._fields_ = [
    ('lsUsb', ctypes.c_uint32 * 4),
    ('lsCsbDefault', ctypes.c_uint32 * 2),
    ('lsCsbSupported', ctypes.c_uint32 * 2),
]

LOCALESIGNATURE = struct_tagLOCALESIGNATURE
PLOCALESIGNATURE = ctypes.POINTER(struct_tagLOCALESIGNATURE)
LPLOCALESIGNATURE = ctypes.POINTER(struct_tagLOCALESIGNATURE)
class struct_tagHANDLETABLE(Structure):
    pass

struct_tagHANDLETABLE._pack_ = 1 # source:False
struct_tagHANDLETABLE._fields_ = [
    ('objectHandle', ctypes.POINTER(None) * 1),
]

HANDLETABLE = struct_tagHANDLETABLE
PHANDLETABLE = ctypes.POINTER(struct_tagHANDLETABLE)
LPHANDLETABLE = ctypes.POINTER(struct_tagHANDLETABLE)
class struct_tagMETARECORD(Structure):
    pass

struct_tagMETARECORD._pack_ = 1 # source:False
struct_tagMETARECORD._fields_ = [
    ('rdSize', ctypes.c_uint32),
    ('rdFunction', ctypes.c_uint16),
    ('rdParm', ctypes.c_uint16 * 1),
]

METARECORD = struct_tagMETARECORD
PMETARECORD = ctypes.POINTER(struct_tagMETARECORD)
LPMETARECORD = ctypes.POINTER(struct_tagMETARECORD)
class struct_tagMETAFILEPICT(Structure):
    pass

struct_tagMETAFILEPICT._pack_ = 1 # source:False
struct_tagMETAFILEPICT._fields_ = [
    ('mm', ctypes.c_int32),
    ('xExt', ctypes.c_int32),
    ('yExt', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hMF', ctypes.POINTER(struct_HMETAFILE__)),
]

METAFILEPICT = struct_tagMETAFILEPICT
LPMETAFILEPICT = ctypes.POINTER(struct_tagMETAFILEPICT)
class struct_tagMETAHEADER(Structure):
    pass

struct_tagMETAHEADER._pack_ = 1 # source:False
struct_tagMETAHEADER._fields_ = [
    ('mtType', ctypes.c_uint16),
    ('mtHeaderSize', ctypes.c_uint16),
    ('mtVersion', ctypes.c_uint16),
    ('mtSize', ctypes.c_uint32),
    ('mtNoObjects', ctypes.c_uint16),
    ('mtMaxRecord', ctypes.c_uint32),
    ('mtNoParameters', ctypes.c_uint16),
]

METAHEADER = struct_tagMETAHEADER
PMETAHEADER = ctypes.POINTER(struct_tagMETAHEADER)
LPMETAHEADER = ctypes.POINTER(struct_tagMETAHEADER)
class struct_tagENHMETARECORD(Structure):
    pass

struct_tagENHMETARECORD._pack_ = 1 # source:False
struct_tagENHMETARECORD._fields_ = [
    ('iType', ctypes.c_uint32),
    ('nSize', ctypes.c_uint32),
    ('dParm', ctypes.c_uint32 * 1),
]

ENHMETARECORD = struct_tagENHMETARECORD
PENHMETARECORD = ctypes.POINTER(struct_tagENHMETARECORD)
LPENHMETARECORD = ctypes.POINTER(struct_tagENHMETARECORD)
class struct_tagENHMETAHEADER(Structure):
    pass

struct_tagENHMETAHEADER._pack_ = 1 # source:False
struct_tagENHMETAHEADER._fields_ = [
    ('iType', ctypes.c_uint32),
    ('nSize', ctypes.c_uint32),
    ('rclBounds', RECTL),
    ('rclFrame', RECTL),
    ('dSignature', ctypes.c_uint32),
    ('nVersion', ctypes.c_uint32),
    ('nBytes', ctypes.c_uint32),
    ('nRecords', ctypes.c_uint32),
    ('nHandles', ctypes.c_uint16),
    ('sReserved', ctypes.c_uint16),
    ('nDescription', ctypes.c_uint32),
    ('offDescription', ctypes.c_uint32),
    ('nPalEntries', ctypes.c_uint32),
    ('szlDevice', SIZEL),
    ('szlMillimeters', SIZEL),
    ('cbPixelFormat', ctypes.c_uint32),
    ('offPixelFormat', ctypes.c_uint32),
    ('bOpenGL', ctypes.c_uint32),
    ('szlMicrometers', SIZEL),
]

ENHMETAHEADER = struct_tagENHMETAHEADER
PENHMETAHEADER = ctypes.POINTER(struct_tagENHMETAHEADER)
LPENHMETAHEADER = ctypes.POINTER(struct_tagENHMETAHEADER)
BCHAR = ctypes.c_ubyte
class struct_tagTEXTMETRICA(Structure):
    pass

struct_tagTEXTMETRICA._pack_ = 1 # source:False
struct_tagTEXTMETRICA._fields_ = [
    ('tmHeight', ctypes.c_int32),
    ('tmAscent', ctypes.c_int32),
    ('tmDescent', ctypes.c_int32),
    ('tmInternalLeading', ctypes.c_int32),
    ('tmExternalLeading', ctypes.c_int32),
    ('tmAveCharWidth', ctypes.c_int32),
    ('tmMaxCharWidth', ctypes.c_int32),
    ('tmWeight', ctypes.c_int32),
    ('tmOverhang', ctypes.c_int32),
    ('tmDigitizedAspectX', ctypes.c_int32),
    ('tmDigitizedAspectY', ctypes.c_int32),
    ('tmFirstChar', ctypes.c_ubyte),
    ('tmLastChar', ctypes.c_ubyte),
    ('tmDefaultChar', ctypes.c_ubyte),
    ('tmBreakChar', ctypes.c_ubyte),
    ('tmItalic', ctypes.c_ubyte),
    ('tmUnderlined', ctypes.c_ubyte),
    ('tmStruckOut', ctypes.c_ubyte),
    ('tmPitchAndFamily', ctypes.c_ubyte),
    ('tmCharSet', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

TEXTMETRICA = struct_tagTEXTMETRICA
PTEXTMETRICA = ctypes.POINTER(struct_tagTEXTMETRICA)
NPTEXTMETRICA = ctypes.POINTER(struct_tagTEXTMETRICA)
LPTEXTMETRICA = ctypes.POINTER(struct_tagTEXTMETRICA)
class struct_tagTEXTMETRICW(Structure):
    pass

struct_tagTEXTMETRICW._pack_ = 1 # source:False
struct_tagTEXTMETRICW._fields_ = [
    ('tmHeight', ctypes.c_int32),
    ('tmAscent', ctypes.c_int32),
    ('tmDescent', ctypes.c_int32),
    ('tmInternalLeading', ctypes.c_int32),
    ('tmExternalLeading', ctypes.c_int32),
    ('tmAveCharWidth', ctypes.c_int32),
    ('tmMaxCharWidth', ctypes.c_int32),
    ('tmWeight', ctypes.c_int32),
    ('tmOverhang', ctypes.c_int32),
    ('tmDigitizedAspectX', ctypes.c_int32),
    ('tmDigitizedAspectY', ctypes.c_int32),
    ('tmFirstChar', ctypes.c_int16),
    ('tmLastChar', ctypes.c_int16),
    ('tmDefaultChar', ctypes.c_int16),
    ('tmBreakChar', ctypes.c_int16),
    ('tmItalic', ctypes.c_ubyte),
    ('tmUnderlined', ctypes.c_ubyte),
    ('tmStruckOut', ctypes.c_ubyte),
    ('tmPitchAndFamily', ctypes.c_ubyte),
    ('tmCharSet', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

TEXTMETRICW = struct_tagTEXTMETRICW
PTEXTMETRICW = ctypes.POINTER(struct_tagTEXTMETRICW)
NPTEXTMETRICW = ctypes.POINTER(struct_tagTEXTMETRICW)
LPTEXTMETRICW = ctypes.POINTER(struct_tagTEXTMETRICW)
TEXTMETRIC = struct_tagTEXTMETRICA
PTEXTMETRIC = ctypes.POINTER(struct_tagTEXTMETRICA)
NPTEXTMETRIC = ctypes.POINTER(struct_tagTEXTMETRICA)
LPTEXTMETRIC = ctypes.POINTER(struct_tagTEXTMETRICA)
class struct_tagNEWTEXTMETRICA(Structure):
    pass

struct_tagNEWTEXTMETRICA._pack_ = 1 # source:False
struct_tagNEWTEXTMETRICA._fields_ = [
    ('tmHeight', ctypes.c_int32),
    ('tmAscent', ctypes.c_int32),
    ('tmDescent', ctypes.c_int32),
    ('tmInternalLeading', ctypes.c_int32),
    ('tmExternalLeading', ctypes.c_int32),
    ('tmAveCharWidth', ctypes.c_int32),
    ('tmMaxCharWidth', ctypes.c_int32),
    ('tmWeight', ctypes.c_int32),
    ('tmOverhang', ctypes.c_int32),
    ('tmDigitizedAspectX', ctypes.c_int32),
    ('tmDigitizedAspectY', ctypes.c_int32),
    ('tmFirstChar', ctypes.c_ubyte),
    ('tmLastChar', ctypes.c_ubyte),
    ('tmDefaultChar', ctypes.c_ubyte),
    ('tmBreakChar', ctypes.c_ubyte),
    ('tmItalic', ctypes.c_ubyte),
    ('tmUnderlined', ctypes.c_ubyte),
    ('tmStruckOut', ctypes.c_ubyte),
    ('tmPitchAndFamily', ctypes.c_ubyte),
    ('tmCharSet', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('ntmFlags', ctypes.c_uint32),
    ('ntmSizeEM', ctypes.c_uint32),
    ('ntmCellHeight', ctypes.c_uint32),
    ('ntmAvgWidth', ctypes.c_uint32),
]

NEWTEXTMETRICA = struct_tagNEWTEXTMETRICA
PNEWTEXTMETRICA = ctypes.POINTER(struct_tagNEWTEXTMETRICA)
NPNEWTEXTMETRICA = ctypes.POINTER(struct_tagNEWTEXTMETRICA)
LPNEWTEXTMETRICA = ctypes.POINTER(struct_tagNEWTEXTMETRICA)
class struct_tagNEWTEXTMETRICW(Structure):
    pass

struct_tagNEWTEXTMETRICW._pack_ = 1 # source:False
struct_tagNEWTEXTMETRICW._fields_ = [
    ('tmHeight', ctypes.c_int32),
    ('tmAscent', ctypes.c_int32),
    ('tmDescent', ctypes.c_int32),
    ('tmInternalLeading', ctypes.c_int32),
    ('tmExternalLeading', ctypes.c_int32),
    ('tmAveCharWidth', ctypes.c_int32),
    ('tmMaxCharWidth', ctypes.c_int32),
    ('tmWeight', ctypes.c_int32),
    ('tmOverhang', ctypes.c_int32),
    ('tmDigitizedAspectX', ctypes.c_int32),
    ('tmDigitizedAspectY', ctypes.c_int32),
    ('tmFirstChar', ctypes.c_int16),
    ('tmLastChar', ctypes.c_int16),
    ('tmDefaultChar', ctypes.c_int16),
    ('tmBreakChar', ctypes.c_int16),
    ('tmItalic', ctypes.c_ubyte),
    ('tmUnderlined', ctypes.c_ubyte),
    ('tmStruckOut', ctypes.c_ubyte),
    ('tmPitchAndFamily', ctypes.c_ubyte),
    ('tmCharSet', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('ntmFlags', ctypes.c_uint32),
    ('ntmSizeEM', ctypes.c_uint32),
    ('ntmCellHeight', ctypes.c_uint32),
    ('ntmAvgWidth', ctypes.c_uint32),
]

NEWTEXTMETRICW = struct_tagNEWTEXTMETRICW
PNEWTEXTMETRICW = ctypes.POINTER(struct_tagNEWTEXTMETRICW)
NPNEWTEXTMETRICW = ctypes.POINTER(struct_tagNEWTEXTMETRICW)
LPNEWTEXTMETRICW = ctypes.POINTER(struct_tagNEWTEXTMETRICW)
NEWTEXTMETRIC = struct_tagNEWTEXTMETRICA
PNEWTEXTMETRIC = ctypes.POINTER(struct_tagNEWTEXTMETRICA)
NPNEWTEXTMETRIC = ctypes.POINTER(struct_tagNEWTEXTMETRICA)
LPNEWTEXTMETRIC = ctypes.POINTER(struct_tagNEWTEXTMETRICA)
class struct_tagNEWTEXTMETRICEXA(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('ntmTm', NEWTEXTMETRICA),
    ('ntmFontSig', FONTSIGNATURE),
     ]

NEWTEXTMETRICEXA = struct_tagNEWTEXTMETRICEXA
class struct_tagNEWTEXTMETRICEXW(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('ntmTm', NEWTEXTMETRICW),
    ('ntmFontSig', FONTSIGNATURE),
     ]

NEWTEXTMETRICEXW = struct_tagNEWTEXTMETRICEXW
NEWTEXTMETRICEX = struct_tagNEWTEXTMETRICEXA
class struct_tagPELARRAY(Structure):
    pass

struct_tagPELARRAY._pack_ = 1 # source:False
struct_tagPELARRAY._fields_ = [
    ('paXCount', ctypes.c_int32),
    ('paYCount', ctypes.c_int32),
    ('paXExt', ctypes.c_int32),
    ('paYExt', ctypes.c_int32),
    ('paRGBs', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

PELARRAY = struct_tagPELARRAY
PPELARRAY = ctypes.POINTER(struct_tagPELARRAY)
NPPELARRAY = ctypes.POINTER(struct_tagPELARRAY)
LPPELARRAY = ctypes.POINTER(struct_tagPELARRAY)
class struct_tagLOGBRUSH(Structure):
    pass

struct_tagLOGBRUSH._pack_ = 1 # source:False
struct_tagLOGBRUSH._fields_ = [
    ('lbStyle', ctypes.c_uint32),
    ('lbColor', ctypes.c_uint32),
    ('lbHatch', ctypes.c_uint64),
]

LOGBRUSH = struct_tagLOGBRUSH
PLOGBRUSH = ctypes.POINTER(struct_tagLOGBRUSH)
NPLOGBRUSH = ctypes.POINTER(struct_tagLOGBRUSH)
LPLOGBRUSH = ctypes.POINTER(struct_tagLOGBRUSH)
class struct_tagLOGBRUSH32(Structure):
    pass

struct_tagLOGBRUSH32._pack_ = 1 # source:False
struct_tagLOGBRUSH32._fields_ = [
    ('lbStyle', ctypes.c_uint32),
    ('lbColor', ctypes.c_uint32),
    ('lbHatch', ctypes.c_uint32),
]

LOGBRUSH32 = struct_tagLOGBRUSH32
PLOGBRUSH32 = ctypes.POINTER(struct_tagLOGBRUSH32)
NPLOGBRUSH32 = ctypes.POINTER(struct_tagLOGBRUSH32)
LPLOGBRUSH32 = ctypes.POINTER(struct_tagLOGBRUSH32)
PATTERN = struct_tagLOGBRUSH
PPATTERN = ctypes.POINTER(struct_tagLOGBRUSH)
NPPATTERN = ctypes.POINTER(struct_tagLOGBRUSH)
LPPATTERN = ctypes.POINTER(struct_tagLOGBRUSH)
class struct_tagLOGPEN(Structure):
    pass

struct_tagLOGPEN._pack_ = 1 # source:False
struct_tagLOGPEN._fields_ = [
    ('lopnStyle', ctypes.c_uint32),
    ('lopnWidth', POINT),
    ('lopnColor', ctypes.c_uint32),
]

LOGPEN = struct_tagLOGPEN
PLOGPEN = ctypes.POINTER(struct_tagLOGPEN)
NPLOGPEN = ctypes.POINTER(struct_tagLOGPEN)
LPLOGPEN = ctypes.POINTER(struct_tagLOGPEN)
class struct_tagEXTLOGPEN(Structure):
    pass

struct_tagEXTLOGPEN._pack_ = 1 # source:False
struct_tagEXTLOGPEN._fields_ = [
    ('elpPenStyle', ctypes.c_uint32),
    ('elpWidth', ctypes.c_uint32),
    ('elpBrushStyle', ctypes.c_uint32),
    ('elpColor', ctypes.c_uint32),
    ('elpHatch', ctypes.c_uint64),
    ('elpNumEntries', ctypes.c_uint32),
    ('elpStyleEntry', ctypes.c_uint32 * 1),
]

EXTLOGPEN = struct_tagEXTLOGPEN
PEXTLOGPEN = ctypes.POINTER(struct_tagEXTLOGPEN)
NPEXTLOGPEN = ctypes.POINTER(struct_tagEXTLOGPEN)
LPEXTLOGPEN = ctypes.POINTER(struct_tagEXTLOGPEN)
class struct_tagEXTLOGPEN32(Structure):
    pass

struct_tagEXTLOGPEN32._pack_ = 1 # source:False
struct_tagEXTLOGPEN32._fields_ = [
    ('elpPenStyle', ctypes.c_uint32),
    ('elpWidth', ctypes.c_uint32),
    ('elpBrushStyle', ctypes.c_uint32),
    ('elpColor', ctypes.c_uint32),
    ('elpHatch', ctypes.c_uint32),
    ('elpNumEntries', ctypes.c_uint32),
    ('elpStyleEntry', ctypes.c_uint32 * 1),
]

EXTLOGPEN32 = struct_tagEXTLOGPEN32
PEXTLOGPEN32 = ctypes.POINTER(struct_tagEXTLOGPEN32)
NPEXTLOGPEN32 = ctypes.POINTER(struct_tagEXTLOGPEN32)
LPEXTLOGPEN32 = ctypes.POINTER(struct_tagEXTLOGPEN32)
class struct_tagPALETTEENTRY(Structure):
    pass

struct_tagPALETTEENTRY._pack_ = 1 # source:False
struct_tagPALETTEENTRY._fields_ = [
    ('peRed', ctypes.c_ubyte),
    ('peGreen', ctypes.c_ubyte),
    ('peBlue', ctypes.c_ubyte),
    ('peFlags', ctypes.c_ubyte),
]

PALETTEENTRY = struct_tagPALETTEENTRY
PPALETTEENTRY = ctypes.POINTER(struct_tagPALETTEENTRY)
LPPALETTEENTRY = ctypes.POINTER(struct_tagPALETTEENTRY)
class struct_tagLOGPALETTE(Structure):
    pass

struct_tagLOGPALETTE._pack_ = 1 # source:False
struct_tagLOGPALETTE._fields_ = [
    ('palVersion', ctypes.c_uint16),
    ('palNumEntries', ctypes.c_uint16),
    ('palPalEntry', struct_tagPALETTEENTRY * 1),
]

LOGPALETTE = struct_tagLOGPALETTE
PLOGPALETTE = ctypes.POINTER(struct_tagLOGPALETTE)
NPLOGPALETTE = ctypes.POINTER(struct_tagLOGPALETTE)
LPLOGPALETTE = ctypes.POINTER(struct_tagLOGPALETTE)
class struct_tagLOGFONTA(Structure):
    pass

struct_tagLOGFONTA._pack_ = 1 # source:False
struct_tagLOGFONTA._fields_ = [
    ('lfHeight', ctypes.c_int32),
    ('lfWidth', ctypes.c_int32),
    ('lfEscapement', ctypes.c_int32),
    ('lfOrientation', ctypes.c_int32),
    ('lfWeight', ctypes.c_int32),
    ('lfItalic', ctypes.c_ubyte),
    ('lfUnderline', ctypes.c_ubyte),
    ('lfStrikeOut', ctypes.c_ubyte),
    ('lfCharSet', ctypes.c_ubyte),
    ('lfOutPrecision', ctypes.c_ubyte),
    ('lfClipPrecision', ctypes.c_ubyte),
    ('lfQuality', ctypes.c_ubyte),
    ('lfPitchAndFamily', ctypes.c_ubyte),
    ('lfFaceName', ctypes.c_char * 32),
]

LOGFONTA = struct_tagLOGFONTA
PLOGFONTA = ctypes.POINTER(struct_tagLOGFONTA)
NPLOGFONTA = ctypes.POINTER(struct_tagLOGFONTA)
LPLOGFONTA = ctypes.POINTER(struct_tagLOGFONTA)
class struct_tagLOGFONTW(Structure):
    pass

struct_tagLOGFONTW._pack_ = 1 # source:False
struct_tagLOGFONTW._fields_ = [
    ('lfHeight', ctypes.c_int32),
    ('lfWidth', ctypes.c_int32),
    ('lfEscapement', ctypes.c_int32),
    ('lfOrientation', ctypes.c_int32),
    ('lfWeight', ctypes.c_int32),
    ('lfItalic', ctypes.c_ubyte),
    ('lfUnderline', ctypes.c_ubyte),
    ('lfStrikeOut', ctypes.c_ubyte),
    ('lfCharSet', ctypes.c_ubyte),
    ('lfOutPrecision', ctypes.c_ubyte),
    ('lfClipPrecision', ctypes.c_ubyte),
    ('lfQuality', ctypes.c_ubyte),
    ('lfPitchAndFamily', ctypes.c_ubyte),
    ('lfFaceName', ctypes.c_int16 * 32),
]

LOGFONTW = struct_tagLOGFONTW
PLOGFONTW = ctypes.POINTER(struct_tagLOGFONTW)
NPLOGFONTW = ctypes.POINTER(struct_tagLOGFONTW)
LPLOGFONTW = ctypes.POINTER(struct_tagLOGFONTW)
LOGFONT = struct_tagLOGFONTA
PLOGFONT = ctypes.POINTER(struct_tagLOGFONTA)
NPLOGFONT = ctypes.POINTER(struct_tagLOGFONTA)
LPLOGFONT = ctypes.POINTER(struct_tagLOGFONTA)
class struct_tagENUMLOGFONTA(Structure):
    pass

struct_tagENUMLOGFONTA._pack_ = 1 # source:False
struct_tagENUMLOGFONTA._fields_ = [
    ('elfLogFont', LOGFONTA),
    ('elfFullName', ctypes.c_ubyte * 64),
    ('elfStyle', ctypes.c_ubyte * 32),
]

ENUMLOGFONTA = struct_tagENUMLOGFONTA
LPENUMLOGFONTA = ctypes.POINTER(struct_tagENUMLOGFONTA)
class struct_tagENUMLOGFONTW(Structure):
    pass

struct_tagENUMLOGFONTW._pack_ = 1 # source:False
struct_tagENUMLOGFONTW._fields_ = [
    ('elfLogFont', LOGFONTW),
    ('elfFullName', ctypes.c_int16 * 64),
    ('elfStyle', ctypes.c_int16 * 32),
]

ENUMLOGFONTW = struct_tagENUMLOGFONTW
LPENUMLOGFONTW = ctypes.POINTER(struct_tagENUMLOGFONTW)
ENUMLOGFONT = struct_tagENUMLOGFONTA
LPENUMLOGFONT = ctypes.POINTER(struct_tagENUMLOGFONTA)
class struct_tagENUMLOGFONTEXA(Structure):
    pass

struct_tagENUMLOGFONTEXA._pack_ = 1 # source:False
struct_tagENUMLOGFONTEXA._fields_ = [
    ('elfLogFont', LOGFONTA),
    ('elfFullName', ctypes.c_ubyte * 64),
    ('elfStyle', ctypes.c_ubyte * 32),
    ('elfScript', ctypes.c_ubyte * 32),
]

ENUMLOGFONTEXA = struct_tagENUMLOGFONTEXA
LPENUMLOGFONTEXA = ctypes.POINTER(struct_tagENUMLOGFONTEXA)
class struct_tagENUMLOGFONTEXW(Structure):
    pass

struct_tagENUMLOGFONTEXW._pack_ = 1 # source:False
struct_tagENUMLOGFONTEXW._fields_ = [
    ('elfLogFont', LOGFONTW),
    ('elfFullName', ctypes.c_int16 * 64),
    ('elfStyle', ctypes.c_int16 * 32),
    ('elfScript', ctypes.c_int16 * 32),
]

ENUMLOGFONTEXW = struct_tagENUMLOGFONTEXW
LPENUMLOGFONTEXW = ctypes.POINTER(struct_tagENUMLOGFONTEXW)
ENUMLOGFONTEX = struct_tagENUMLOGFONTEXA
LPENUMLOGFONTEX = ctypes.POINTER(struct_tagENUMLOGFONTEXA)
class struct_tagPANOSE(Structure):
    pass

struct_tagPANOSE._pack_ = 1 # source:False
struct_tagPANOSE._fields_ = [
    ('bFamilyType', ctypes.c_ubyte),
    ('bSerifStyle', ctypes.c_ubyte),
    ('bWeight', ctypes.c_ubyte),
    ('bProportion', ctypes.c_ubyte),
    ('bContrast', ctypes.c_ubyte),
    ('bStrokeVariation', ctypes.c_ubyte),
    ('bArmStyle', ctypes.c_ubyte),
    ('bLetterform', ctypes.c_ubyte),
    ('bMidline', ctypes.c_ubyte),
    ('bXHeight', ctypes.c_ubyte),
]

PANOSE = struct_tagPANOSE
LPPANOSE = ctypes.POINTER(struct_tagPANOSE)
class struct_tagEXTLOGFONTA(Structure):
    pass

struct_tagEXTLOGFONTA._pack_ = 1 # source:False
struct_tagEXTLOGFONTA._fields_ = [
    ('elfLogFont', LOGFONTA),
    ('elfFullName', ctypes.c_ubyte * 64),
    ('elfStyle', ctypes.c_ubyte * 32),
    ('elfVersion', ctypes.c_uint32),
    ('elfStyleSize', ctypes.c_uint32),
    ('elfMatch', ctypes.c_uint32),
    ('elfReserved', ctypes.c_uint32),
    ('elfVendorId', ctypes.c_ubyte * 4),
    ('elfCulture', ctypes.c_uint32),
    ('elfPanose', PANOSE),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

EXTLOGFONTA = struct_tagEXTLOGFONTA
PEXTLOGFONTA = ctypes.POINTER(struct_tagEXTLOGFONTA)
NPEXTLOGFONTA = ctypes.POINTER(struct_tagEXTLOGFONTA)
LPEXTLOGFONTA = ctypes.POINTER(struct_tagEXTLOGFONTA)
class struct_tagEXTLOGFONTW(Structure):
    pass

struct_tagEXTLOGFONTW._pack_ = 1 # source:False
struct_tagEXTLOGFONTW._fields_ = [
    ('elfLogFont', LOGFONTW),
    ('elfFullName', ctypes.c_int16 * 64),
    ('elfStyle', ctypes.c_int16 * 32),
    ('elfVersion', ctypes.c_uint32),
    ('elfStyleSize', ctypes.c_uint32),
    ('elfMatch', ctypes.c_uint32),
    ('elfReserved', ctypes.c_uint32),
    ('elfVendorId', ctypes.c_ubyte * 4),
    ('elfCulture', ctypes.c_uint32),
    ('elfPanose', PANOSE),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

EXTLOGFONTW = struct_tagEXTLOGFONTW
PEXTLOGFONTW = ctypes.POINTER(struct_tagEXTLOGFONTW)
NPEXTLOGFONTW = ctypes.POINTER(struct_tagEXTLOGFONTW)
LPEXTLOGFONTW = ctypes.POINTER(struct_tagEXTLOGFONTW)
EXTLOGFONT = struct_tagEXTLOGFONTA
PEXTLOGFONT = ctypes.POINTER(struct_tagEXTLOGFONTA)
NPEXTLOGFONT = ctypes.POINTER(struct_tagEXTLOGFONTA)
LPEXTLOGFONT = ctypes.POINTER(struct_tagEXTLOGFONTA)
class struct__A4EE175A7532F35C00DA5CAD042934DF(Structure):
    pass

struct__A4EE175A7532F35C00DA5CAD042934DF._pack_ = 1 # source:False
struct__A4EE175A7532F35C00DA5CAD042934DF._fields_ = [
    ('dmOrientation', ctypes.c_int16),
    ('dmPaperSize', ctypes.c_int16),
    ('dmPaperLength', ctypes.c_int16),
    ('dmPaperWidth', ctypes.c_int16),
    ('dmScale', ctypes.c_int16),
    ('dmCopies', ctypes.c_int16),
    ('dmDefaultSource', ctypes.c_int16),
    ('dmPrintQuality', ctypes.c_int16),
]

class struct__486F79855E687F113A063916C94BB5B8(Structure):
    pass

struct__486F79855E687F113A063916C94BB5B8._pack_ = 1 # source:False
struct__486F79855E687F113A063916C94BB5B8._fields_ = [
    ('dmPosition', POINTL),
    ('dmDisplayOrientation', ctypes.c_uint32),
    ('dmDisplayFixedOutput', ctypes.c_uint32),
]

class union__devicemodeA___EE3F7634911691A91B39D1F433B0CE04(Union):
    pass

class struct__devicemodeA___EE3F7634911691A91B39D1F433B0CE04_1(Structure):
    pass

struct__devicemodeA___EE3F7634911691A91B39D1F433B0CE04_1._pack_ = 1 # source:False
struct__devicemodeA___EE3F7634911691A91B39D1F433B0CE04_1._fields_ = [
    ('dmPosition', POINTL),
    ('dmDisplayOrientation', ctypes.c_uint32),
    ('dmDisplayFixedOutput', ctypes.c_uint32),
]

class struct__devicemodeA___EE3F7634911691A91B39D1F433B0CE04_0(Structure):
    pass

struct__devicemodeA___EE3F7634911691A91B39D1F433B0CE04_0._pack_ = 1 # source:False
struct__devicemodeA___EE3F7634911691A91B39D1F433B0CE04_0._fields_ = [
    ('dmOrientation', ctypes.c_int16),
    ('dmPaperSize', ctypes.c_int16),
    ('dmPaperLength', ctypes.c_int16),
    ('dmPaperWidth', ctypes.c_int16),
    ('dmScale', ctypes.c_int16),
    ('dmCopies', ctypes.c_int16),
    ('dmDefaultSource', ctypes.c_int16),
    ('dmPrintQuality', ctypes.c_int16),
]

union__devicemodeA___EE3F7634911691A91B39D1F433B0CE04._pack_ = 1 # source:False
union__devicemodeA___EE3F7634911691A91B39D1F433B0CE04._anonymous_ = ('_0', '_1',)
union__devicemodeA___EE3F7634911691A91B39D1F433B0CE04._fields_ = [
    ('_0', struct__devicemodeA___EE3F7634911691A91B39D1F433B0CE04_0),
    ('_1', struct__devicemodeA___EE3F7634911691A91B39D1F433B0CE04_1),
]

class union__devicemodeA___391FF029AC41787D2EB74613AC39F8F9(Union):
    pass

union__devicemodeA___391FF029AC41787D2EB74613AC39F8F9._pack_ = 1 # source:False
union__devicemodeA___391FF029AC41787D2EB74613AC39F8F9._fields_ = [
    ('dmDisplayFlags', ctypes.c_uint32),
    ('dmNup', ctypes.c_uint32),
]

class struct__devicemodeA(Structure):
    pass

class union__devicemodeA_0(Union):
    pass

class struct__devicemodeA_0_1(Structure):
    pass

struct__devicemodeA_0_1._pack_ = 1 # source:False
struct__devicemodeA_0_1._fields_ = [
    ('dmPosition', POINTL),
    ('dmDisplayOrientation', ctypes.c_uint32),
    ('dmDisplayFixedOutput', ctypes.c_uint32),
]

class struct__devicemodeA_0_0(Structure):
    pass

struct__devicemodeA_0_0._pack_ = 1 # source:False
struct__devicemodeA_0_0._fields_ = [
    ('dmOrientation', ctypes.c_int16),
    ('dmPaperSize', ctypes.c_int16),
    ('dmPaperLength', ctypes.c_int16),
    ('dmPaperWidth', ctypes.c_int16),
    ('dmScale', ctypes.c_int16),
    ('dmCopies', ctypes.c_int16),
    ('dmDefaultSource', ctypes.c_int16),
    ('dmPrintQuality', ctypes.c_int16),
]

union__devicemodeA_0._pack_ = 1 # source:False
union__devicemodeA_0._anonymous_ = ('_0', '_1',)
union__devicemodeA_0._fields_ = [
    ('_0', struct__devicemodeA_0_0),
    ('_1', struct__devicemodeA_0_1),
]

class union__devicemodeA_1(Union):
    pass

union__devicemodeA_1._pack_ = 1 # source:False
union__devicemodeA_1._fields_ = [
    ('dmDisplayFlags', ctypes.c_uint32),
    ('dmNup', ctypes.c_uint32),
]

struct__devicemodeA._pack_ = 1 # source:False
struct__devicemodeA._anonymous_ = ('_0', '_1',)
struct__devicemodeA._fields_ = [
    ('dmDeviceName', ctypes.c_ubyte * 32),
    ('dmSpecVersion', ctypes.c_uint16),
    ('dmDriverVersion', ctypes.c_uint16),
    ('dmSize', ctypes.c_uint16),
    ('dmDriverExtra', ctypes.c_uint16),
    ('dmFields', ctypes.c_uint32),
    ('_0', union__devicemodeA_0),
    ('dmColor', ctypes.c_int16),
    ('dmDuplex', ctypes.c_int16),
    ('dmYResolution', ctypes.c_int16),
    ('dmTTOption', ctypes.c_int16),
    ('dmCollate', ctypes.c_int16),
    ('dmFormName', ctypes.c_ubyte * 32),
    ('dmLogPixels', ctypes.c_uint16),
    ('dmBitsPerPel', ctypes.c_uint32),
    ('dmPelsWidth', ctypes.c_uint32),
    ('dmPelsHeight', ctypes.c_uint32),
    ('_1', union__devicemodeA_1),
    ('dmDisplayFrequency', ctypes.c_uint32),
    ('dmICMMethod', ctypes.c_uint32),
    ('dmICMIntent', ctypes.c_uint32),
    ('dmMediaType', ctypes.c_uint32),
    ('dmDitherType', ctypes.c_uint32),
    ('dmReserved1', ctypes.c_uint32),
    ('dmReserved2', ctypes.c_uint32),
    ('dmPanningWidth', ctypes.c_uint32),
    ('dmPanningHeight', ctypes.c_uint32),
]

DEVMODEA = struct__devicemodeA
PDEVMODEA = ctypes.POINTER(struct__devicemodeA)
NPDEVMODEA = ctypes.POINTER(struct__devicemodeA)
LPDEVMODEA = ctypes.POINTER(struct__devicemodeA)
class union__devicemodeW___EE3F7634911691A91B39D1F433B0CE04(Union):
    pass

class struct__devicemodeW___EE3F7634911691A91B39D1F433B0CE04_0(Structure):
    pass

struct__devicemodeW___EE3F7634911691A91B39D1F433B0CE04_0._pack_ = 1 # source:False
struct__devicemodeW___EE3F7634911691A91B39D1F433B0CE04_0._fields_ = [
    ('dmOrientation', ctypes.c_int16),
    ('dmPaperSize', ctypes.c_int16),
    ('dmPaperLength', ctypes.c_int16),
    ('dmPaperWidth', ctypes.c_int16),
    ('dmScale', ctypes.c_int16),
    ('dmCopies', ctypes.c_int16),
    ('dmDefaultSource', ctypes.c_int16),
    ('dmPrintQuality', ctypes.c_int16),
]

class struct__devicemodeW___EE3F7634911691A91B39D1F433B0CE04_1(Structure):
    pass

struct__devicemodeW___EE3F7634911691A91B39D1F433B0CE04_1._pack_ = 1 # source:False
struct__devicemodeW___EE3F7634911691A91B39D1F433B0CE04_1._fields_ = [
    ('dmPosition', POINTL),
    ('dmDisplayOrientation', ctypes.c_uint32),
    ('dmDisplayFixedOutput', ctypes.c_uint32),
]

union__devicemodeW___EE3F7634911691A91B39D1F433B0CE04._pack_ = 1 # source:False
union__devicemodeW___EE3F7634911691A91B39D1F433B0CE04._anonymous_ = ('_0', '_1',)
union__devicemodeW___EE3F7634911691A91B39D1F433B0CE04._fields_ = [
    ('_0', struct__devicemodeW___EE3F7634911691A91B39D1F433B0CE04_0),
    ('_1', struct__devicemodeW___EE3F7634911691A91B39D1F433B0CE04_1),
]

class union__devicemodeW___391FF029AC41787D2EB74613AC39F8F9(Union):
    pass

union__devicemodeW___391FF029AC41787D2EB74613AC39F8F9._pack_ = 1 # source:False
union__devicemodeW___391FF029AC41787D2EB74613AC39F8F9._fields_ = [
    ('dmDisplayFlags', ctypes.c_uint32),
    ('dmNup', ctypes.c_uint32),
]

class struct__devicemodeW(Structure):
    pass

class union__devicemodeW_0(Union):
    pass

class struct__devicemodeW_0_1(Structure):
    pass

struct__devicemodeW_0_1._pack_ = 1 # source:False
struct__devicemodeW_0_1._fields_ = [
    ('dmPosition', POINTL),
    ('dmDisplayOrientation', ctypes.c_uint32),
    ('dmDisplayFixedOutput', ctypes.c_uint32),
]

class struct__devicemodeW_0_0(Structure):
    pass

struct__devicemodeW_0_0._pack_ = 1 # source:False
struct__devicemodeW_0_0._fields_ = [
    ('dmOrientation', ctypes.c_int16),
    ('dmPaperSize', ctypes.c_int16),
    ('dmPaperLength', ctypes.c_int16),
    ('dmPaperWidth', ctypes.c_int16),
    ('dmScale', ctypes.c_int16),
    ('dmCopies', ctypes.c_int16),
    ('dmDefaultSource', ctypes.c_int16),
    ('dmPrintQuality', ctypes.c_int16),
]

union__devicemodeW_0._pack_ = 1 # source:False
union__devicemodeW_0._anonymous_ = ('_0', '_1',)
union__devicemodeW_0._fields_ = [
    ('_0', struct__devicemodeW_0_0),
    ('_1', struct__devicemodeW_0_1),
]

class union__devicemodeW_1(Union):
    pass

union__devicemodeW_1._pack_ = 1 # source:False
union__devicemodeW_1._fields_ = [
    ('dmDisplayFlags', ctypes.c_uint32),
    ('dmNup', ctypes.c_uint32),
]

struct__devicemodeW._pack_ = 1 # source:False
struct__devicemodeW._anonymous_ = ('_0', '_1',)
struct__devicemodeW._fields_ = [
    ('dmDeviceName', ctypes.c_int16 * 32),
    ('dmSpecVersion', ctypes.c_uint16),
    ('dmDriverVersion', ctypes.c_uint16),
    ('dmSize', ctypes.c_uint16),
    ('dmDriverExtra', ctypes.c_uint16),
    ('dmFields', ctypes.c_uint32),
    ('_0', union__devicemodeW_0),
    ('dmColor', ctypes.c_int16),
    ('dmDuplex', ctypes.c_int16),
    ('dmYResolution', ctypes.c_int16),
    ('dmTTOption', ctypes.c_int16),
    ('dmCollate', ctypes.c_int16),
    ('dmFormName', ctypes.c_int16 * 32),
    ('dmLogPixels', ctypes.c_uint16),
    ('dmBitsPerPel', ctypes.c_uint32),
    ('dmPelsWidth', ctypes.c_uint32),
    ('dmPelsHeight', ctypes.c_uint32),
    ('_1', union__devicemodeW_1),
    ('dmDisplayFrequency', ctypes.c_uint32),
    ('dmICMMethod', ctypes.c_uint32),
    ('dmICMIntent', ctypes.c_uint32),
    ('dmMediaType', ctypes.c_uint32),
    ('dmDitherType', ctypes.c_uint32),
    ('dmReserved1', ctypes.c_uint32),
    ('dmReserved2', ctypes.c_uint32),
    ('dmPanningWidth', ctypes.c_uint32),
    ('dmPanningHeight', ctypes.c_uint32),
]

DEVMODEW = struct__devicemodeW
PDEVMODEW = ctypes.POINTER(struct__devicemodeW)
NPDEVMODEW = ctypes.POINTER(struct__devicemodeW)
LPDEVMODEW = ctypes.POINTER(struct__devicemodeW)
DEVMODE = struct__devicemodeA
PDEVMODE = ctypes.POINTER(struct__devicemodeA)
NPDEVMODE = ctypes.POINTER(struct__devicemodeA)
LPDEVMODE = ctypes.POINTER(struct__devicemodeA)
class struct__DISPLAY_DEVICEA(Structure):
    pass

struct__DISPLAY_DEVICEA._pack_ = 1 # source:False
struct__DISPLAY_DEVICEA._fields_ = [
    ('cb', ctypes.c_uint32),
    ('DeviceName', ctypes.c_char * 32),
    ('DeviceString', ctypes.c_char * 128),
    ('StateFlags', ctypes.c_uint32),
    ('DeviceID', ctypes.c_char * 128),
    ('DeviceKey', ctypes.c_char * 128),
]

DISPLAY_DEVICEA = struct__DISPLAY_DEVICEA
PDISPLAY_DEVICEA = ctypes.POINTER(struct__DISPLAY_DEVICEA)
LPDISPLAY_DEVICEA = ctypes.POINTER(struct__DISPLAY_DEVICEA)
class struct__DISPLAY_DEVICEW(Structure):
    pass

struct__DISPLAY_DEVICEW._pack_ = 1 # source:False
struct__DISPLAY_DEVICEW._fields_ = [
    ('cb', ctypes.c_uint32),
    ('DeviceName', ctypes.c_int16 * 32),
    ('DeviceString', ctypes.c_int16 * 128),
    ('StateFlags', ctypes.c_uint32),
    ('DeviceID', ctypes.c_int16 * 128),
    ('DeviceKey', ctypes.c_int16 * 128),
]

DISPLAY_DEVICEW = struct__DISPLAY_DEVICEW
PDISPLAY_DEVICEW = ctypes.POINTER(struct__DISPLAY_DEVICEW)
LPDISPLAY_DEVICEW = ctypes.POINTER(struct__DISPLAY_DEVICEW)
DISPLAY_DEVICE = struct__DISPLAY_DEVICEA
PDISPLAY_DEVICE = ctypes.POINTER(struct__DISPLAY_DEVICEA)
LPDISPLAY_DEVICE = ctypes.POINTER(struct__DISPLAY_DEVICEA)
class struct_DISPLAYCONFIG_RATIONAL(Structure):
    pass

struct_DISPLAYCONFIG_RATIONAL._pack_ = 1 # source:False
struct_DISPLAYCONFIG_RATIONAL._fields_ = [
    ('Numerator', ctypes.c_uint32),
    ('Denominator', ctypes.c_uint32),
]


# values for enumeration 'DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY'
DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY__enumvalues = {
    4294967295: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER',
    0: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15',
    1: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO',
    2: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO',
    3: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO',
    4: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI',
    5: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI',
    6: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS',
    8: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN',
    9: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI',
    10: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL',
    11: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED',
    12: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL',
    13: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED',
    14: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE',
    15: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST',
    16: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED',
    17: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL',
    2147483648: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL',
    4294967295: 'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32',
}
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = 4294967295
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 17
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = 2147483648
DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = 4294967295
DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = ctypes.c_uint32 # enum

# values for enumeration 'DISPLAYCONFIG_SCANLINE_ORDERING'
DISPLAYCONFIG_SCANLINE_ORDERING__enumvalues = {
    0: 'DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED',
    1: 'DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE',
    2: 'DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED',
    2: 'DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST',
    3: 'DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST',
    4294967295: 'DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32',
}
DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0
DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1
DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2
DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2
DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3
DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 4294967295
DISPLAYCONFIG_SCANLINE_ORDERING = ctypes.c_uint32 # enum
class struct_DISPLAYCONFIG_2DREGION(Structure):
    pass

struct_DISPLAYCONFIG_2DREGION._pack_ = 1 # source:False
struct_DISPLAYCONFIG_2DREGION._fields_ = [
    ('cx', ctypes.c_uint32),
    ('cy', ctypes.c_uint32),
]

class struct__384A0D2752004B0844262A4FDB8DFA08(Structure):
    pass

struct__384A0D2752004B0844262A4FDB8DFA08._pack_ = 1 # source:False
struct__384A0D2752004B0844262A4FDB8DFA08._fields_ = [
    ('videoStandard', ctypes.c_uint32, 16),
    ('vSyncFreqDivider', ctypes.c_uint32, 6),
    ('reserved', ctypes.c_uint32, 10),
]

class union_DISPLAYCONFIG_VIDEO_SIGNAL_INFO___02DB0BCC62B9453EF0457B26FA75659A(Union):
    pass

union_DISPLAYCONFIG_VIDEO_SIGNAL_INFO___02DB0BCC62B9453EF0457B26FA75659A._pack_ = 1 # source:False
union_DISPLAYCONFIG_VIDEO_SIGNAL_INFO___02DB0BCC62B9453EF0457B26FA75659A._fields_ = [
    ('AdditionalSignalInfo', struct__384A0D2752004B0844262A4FDB8DFA08),
    ('videoStandard', ctypes.c_uint32),
]

class struct_DISPLAYCONFIG_VIDEO_SIGNAL_INFO(Structure):
    pass

class union_DISPLAYCONFIG_VIDEO_SIGNAL_INFO_0(Union):
    pass

union_DISPLAYCONFIG_VIDEO_SIGNAL_INFO_0._pack_ = 1 # source:False
union_DISPLAYCONFIG_VIDEO_SIGNAL_INFO_0._fields_ = [
    ('AdditionalSignalInfo', struct__384A0D2752004B0844262A4FDB8DFA08),
    ('videoStandard', ctypes.c_uint32),
]

struct_DISPLAYCONFIG_VIDEO_SIGNAL_INFO._pack_ = 1 # source:False
struct_DISPLAYCONFIG_VIDEO_SIGNAL_INFO._anonymous_ = ('_0',)
struct_DISPLAYCONFIG_VIDEO_SIGNAL_INFO._fields_ = [
    ('pixelRate', ctypes.c_uint64),
    ('hSyncFreq', struct_DISPLAYCONFIG_RATIONAL),
    ('vSyncFreq', struct_DISPLAYCONFIG_RATIONAL),
    ('activeSize', struct_DISPLAYCONFIG_2DREGION),
    ('totalSize', struct_DISPLAYCONFIG_2DREGION),
    ('_0', union_DISPLAYCONFIG_VIDEO_SIGNAL_INFO_0),
    ('scanLineOrdering', DISPLAYCONFIG_SCANLINE_ORDERING),
]


# values for enumeration 'DISPLAYCONFIG_SCALING'
DISPLAYCONFIG_SCALING__enumvalues = {
    1: 'DISPLAYCONFIG_SCALING_IDENTITY',
    2: 'DISPLAYCONFIG_SCALING_CENTERED',
    3: 'DISPLAYCONFIG_SCALING_STRETCHED',
    4: 'DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX',
    5: 'DISPLAYCONFIG_SCALING_CUSTOM',
    128: 'DISPLAYCONFIG_SCALING_PREFERRED',
    4294967295: 'DISPLAYCONFIG_SCALING_FORCE_UINT32',
}
DISPLAYCONFIG_SCALING_IDENTITY = 1
DISPLAYCONFIG_SCALING_CENTERED = 2
DISPLAYCONFIG_SCALING_STRETCHED = 3
DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4
DISPLAYCONFIG_SCALING_CUSTOM = 5
DISPLAYCONFIG_SCALING_PREFERRED = 128
DISPLAYCONFIG_SCALING_FORCE_UINT32 = 4294967295
DISPLAYCONFIG_SCALING = ctypes.c_uint32 # enum

# values for enumeration 'DISPLAYCONFIG_ROTATION'
DISPLAYCONFIG_ROTATION__enumvalues = {
    1: 'DISPLAYCONFIG_ROTATION_IDENTITY',
    2: 'DISPLAYCONFIG_ROTATION_ROTATE90',
    3: 'DISPLAYCONFIG_ROTATION_ROTATE180',
    4: 'DISPLAYCONFIG_ROTATION_ROTATE270',
    4294967295: 'DISPLAYCONFIG_ROTATION_FORCE_UINT32',
}
DISPLAYCONFIG_ROTATION_IDENTITY = 1
DISPLAYCONFIG_ROTATION_ROTATE90 = 2
DISPLAYCONFIG_ROTATION_ROTATE180 = 3
DISPLAYCONFIG_ROTATION_ROTATE270 = 4
DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 4294967295
DISPLAYCONFIG_ROTATION = ctypes.c_uint32 # enum

# values for enumeration 'DISPLAYCONFIG_MODE_INFO_TYPE'
DISPLAYCONFIG_MODE_INFO_TYPE__enumvalues = {
    1: 'DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE',
    2: 'DISPLAYCONFIG_MODE_INFO_TYPE_TARGET',
    3: 'DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE',
    4294967295: 'DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32',
}
DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1
DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2
DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3
DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 4294967295
DISPLAYCONFIG_MODE_INFO_TYPE = ctypes.c_uint32 # enum

# values for enumeration 'DISPLAYCONFIG_PIXELFORMAT'
DISPLAYCONFIG_PIXELFORMAT__enumvalues = {
    1: 'DISPLAYCONFIG_PIXELFORMAT_8BPP',
    2: 'DISPLAYCONFIG_PIXELFORMAT_16BPP',
    3: 'DISPLAYCONFIG_PIXELFORMAT_24BPP',
    4: 'DISPLAYCONFIG_PIXELFORMAT_32BPP',
    5: 'DISPLAYCONFIG_PIXELFORMAT_NONGDI',
    4294967295: 'DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32',
}
DISPLAYCONFIG_PIXELFORMAT_8BPP = 1
DISPLAYCONFIG_PIXELFORMAT_16BPP = 2
DISPLAYCONFIG_PIXELFORMAT_24BPP = 3
DISPLAYCONFIG_PIXELFORMAT_32BPP = 4
DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5
DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 4294967295
DISPLAYCONFIG_PIXELFORMAT = ctypes.c_uint32 # enum
class struct_DISPLAYCONFIG_SOURCE_MODE(Structure):
    pass

struct_DISPLAYCONFIG_SOURCE_MODE._pack_ = 1 # source:False
struct_DISPLAYCONFIG_SOURCE_MODE._fields_ = [
    ('width', ctypes.c_uint32),
    ('height', ctypes.c_uint32),
    ('pixelFormat', DISPLAYCONFIG_PIXELFORMAT),
    ('position', POINTL),
]

class struct_DISPLAYCONFIG_TARGET_MODE(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('targetVideoSignalInfo', struct_DISPLAYCONFIG_VIDEO_SIGNAL_INFO),
     ]

class struct_DISPLAYCONFIG_DESKTOP_IMAGE_INFO(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('PathSourceSize', POINTL),
    ('DesktopImageRegion', RECTL),
    ('DesktopImageClip', RECTL),
     ]

class union_DISPLAYCONFIG_MODE_INFO___C7CF589F1BDAE095827AC382B7F00856(Union):
    pass

union_DISPLAYCONFIG_MODE_INFO___C7CF589F1BDAE095827AC382B7F00856._pack_ = 1 # source:False
union_DISPLAYCONFIG_MODE_INFO___C7CF589F1BDAE095827AC382B7F00856._fields_ = [
    ('targetMode', struct_DISPLAYCONFIG_TARGET_MODE),
    ('sourceMode', struct_DISPLAYCONFIG_SOURCE_MODE),
    ('desktopImageInfo', struct_DISPLAYCONFIG_DESKTOP_IMAGE_INFO),
    ('PADDING_0', ctypes.c_ubyte * 8),
]

class struct_DISPLAYCONFIG_MODE_INFO(Structure):
    pass

class union_DISPLAYCONFIG_MODE_INFO_0(Union):
    pass

union_DISPLAYCONFIG_MODE_INFO_0._pack_ = 1 # source:False
union_DISPLAYCONFIG_MODE_INFO_0._fields_ = [
    ('targetMode', struct_DISPLAYCONFIG_TARGET_MODE),
    ('sourceMode', struct_DISPLAYCONFIG_SOURCE_MODE),
    ('desktopImageInfo', struct_DISPLAYCONFIG_DESKTOP_IMAGE_INFO),
    ('PADDING_0', ctypes.c_ubyte * 8),
]

struct_DISPLAYCONFIG_MODE_INFO._pack_ = 1 # source:False
struct_DISPLAYCONFIG_MODE_INFO._anonymous_ = ('_0',)
struct_DISPLAYCONFIG_MODE_INFO._fields_ = [
    ('infoType', DISPLAYCONFIG_MODE_INFO_TYPE),
    ('id', ctypes.c_uint32),
    ('adapterId', LUID),
    ('_0', union_DISPLAYCONFIG_MODE_INFO_0),
]

class struct__A030FD3B32E4F891E79E2284E8F158BA(Structure):
    pass

struct__A030FD3B32E4F891E79E2284E8F158BA._pack_ = 1 # source:False
struct__A030FD3B32E4F891E79E2284E8F158BA._fields_ = [
    ('cloneGroupId', ctypes.c_uint32, 16),
    ('sourceModeInfoIdx', ctypes.c_uint32, 16),
]

class union_DISPLAYCONFIG_PATH_SOURCE_INFO___61AC9E76C5182660D462789AB8034D76(Union):
    pass

class struct_DISPLAYCONFIG_PATH_SOURCE_INFO___61AC9E76C5182660D462789AB8034D76_0(Structure):
    pass

struct_DISPLAYCONFIG_PATH_SOURCE_INFO___61AC9E76C5182660D462789AB8034D76_0._pack_ = 1 # source:False
struct_DISPLAYCONFIG_PATH_SOURCE_INFO___61AC9E76C5182660D462789AB8034D76_0._fields_ = [
    ('cloneGroupId', ctypes.c_uint32, 16),
    ('sourceModeInfoIdx', ctypes.c_uint32, 16),
]

union_DISPLAYCONFIG_PATH_SOURCE_INFO___61AC9E76C5182660D462789AB8034D76._pack_ = 1 # source:False
union_DISPLAYCONFIG_PATH_SOURCE_INFO___61AC9E76C5182660D462789AB8034D76._anonymous_ = ('_0',)
union_DISPLAYCONFIG_PATH_SOURCE_INFO___61AC9E76C5182660D462789AB8034D76._fields_ = [
    ('modeInfoIdx', ctypes.c_uint32),
    ('_0', struct_DISPLAYCONFIG_PATH_SOURCE_INFO___61AC9E76C5182660D462789AB8034D76_0),
]

class struct_DISPLAYCONFIG_PATH_SOURCE_INFO(Structure):
    pass

class union_DISPLAYCONFIG_PATH_SOURCE_INFO_0(Union):
    pass

class struct_DISPLAYCONFIG_PATH_SOURCE_INFO_0_0(Structure):
    pass

struct_DISPLAYCONFIG_PATH_SOURCE_INFO_0_0._pack_ = 1 # source:False
struct_DISPLAYCONFIG_PATH_SOURCE_INFO_0_0._fields_ = [
    ('cloneGroupId', ctypes.c_uint32, 16),
    ('sourceModeInfoIdx', ctypes.c_uint32, 16),
]

union_DISPLAYCONFIG_PATH_SOURCE_INFO_0._pack_ = 1 # source:False
union_DISPLAYCONFIG_PATH_SOURCE_INFO_0._anonymous_ = ('_0',)
union_DISPLAYCONFIG_PATH_SOURCE_INFO_0._fields_ = [
    ('modeInfoIdx', ctypes.c_uint32),
    ('_0', struct_DISPLAYCONFIG_PATH_SOURCE_INFO_0_0),
]

struct_DISPLAYCONFIG_PATH_SOURCE_INFO._pack_ = 1 # source:False
struct_DISPLAYCONFIG_PATH_SOURCE_INFO._anonymous_ = ('_0',)
struct_DISPLAYCONFIG_PATH_SOURCE_INFO._fields_ = [
    ('adapterId', LUID),
    ('id', ctypes.c_uint32),
    ('_0', union_DISPLAYCONFIG_PATH_SOURCE_INFO_0),
    ('statusFlags', ctypes.c_uint32),
]

class struct__0444EE5E7824138600A60EA9ABBD0023(Structure):
    pass

struct__0444EE5E7824138600A60EA9ABBD0023._pack_ = 1 # source:False
struct__0444EE5E7824138600A60EA9ABBD0023._fields_ = [
    ('desktopModeInfoIdx', ctypes.c_uint32, 16),
    ('targetModeInfoIdx', ctypes.c_uint32, 16),
]

class union_DISPLAYCONFIG_PATH_TARGET_INFO___B261276D3FD515915541A20464F2F9DB(Union):
    pass

class struct_DISPLAYCONFIG_PATH_TARGET_INFO___B261276D3FD515915541A20464F2F9DB_0(Structure):
    pass

struct_DISPLAYCONFIG_PATH_TARGET_INFO___B261276D3FD515915541A20464F2F9DB_0._pack_ = 1 # source:False
struct_DISPLAYCONFIG_PATH_TARGET_INFO___B261276D3FD515915541A20464F2F9DB_0._fields_ = [
    ('desktopModeInfoIdx', ctypes.c_uint32, 16),
    ('targetModeInfoIdx', ctypes.c_uint32, 16),
]

union_DISPLAYCONFIG_PATH_TARGET_INFO___B261276D3FD515915541A20464F2F9DB._pack_ = 1 # source:False
union_DISPLAYCONFIG_PATH_TARGET_INFO___B261276D3FD515915541A20464F2F9DB._anonymous_ = ('_0',)
union_DISPLAYCONFIG_PATH_TARGET_INFO___B261276D3FD515915541A20464F2F9DB._fields_ = [
    ('modeInfoIdx', ctypes.c_uint32),
    ('_0', struct_DISPLAYCONFIG_PATH_TARGET_INFO___B261276D3FD515915541A20464F2F9DB_0),
]

class struct_DISPLAYCONFIG_PATH_TARGET_INFO(Structure):
    pass

class union_DISPLAYCONFIG_PATH_TARGET_INFO_0(Union):
    pass

class struct_DISPLAYCONFIG_PATH_TARGET_INFO_0_0(Structure):
    pass

struct_DISPLAYCONFIG_PATH_TARGET_INFO_0_0._pack_ = 1 # source:False
struct_DISPLAYCONFIG_PATH_TARGET_INFO_0_0._fields_ = [
    ('desktopModeInfoIdx', ctypes.c_uint32, 16),
    ('targetModeInfoIdx', ctypes.c_uint32, 16),
]

union_DISPLAYCONFIG_PATH_TARGET_INFO_0._pack_ = 1 # source:False
union_DISPLAYCONFIG_PATH_TARGET_INFO_0._anonymous_ = ('_0',)
union_DISPLAYCONFIG_PATH_TARGET_INFO_0._fields_ = [
    ('modeInfoIdx', ctypes.c_uint32),
    ('_0', struct_DISPLAYCONFIG_PATH_TARGET_INFO_0_0),
]

struct_DISPLAYCONFIG_PATH_TARGET_INFO._pack_ = 1 # source:False
struct_DISPLAYCONFIG_PATH_TARGET_INFO._anonymous_ = ('_0',)
struct_DISPLAYCONFIG_PATH_TARGET_INFO._fields_ = [
    ('adapterId', LUID),
    ('id', ctypes.c_uint32),
    ('_0', union_DISPLAYCONFIG_PATH_TARGET_INFO_0),
    ('outputTechnology', DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY),
    ('rotation', DISPLAYCONFIG_ROTATION),
    ('scaling', DISPLAYCONFIG_SCALING),
    ('refreshRate', struct_DISPLAYCONFIG_RATIONAL),
    ('scanLineOrdering', DISPLAYCONFIG_SCANLINE_ORDERING),
    ('targetAvailable', ctypes.c_int32),
    ('statusFlags', ctypes.c_uint32),
]

class struct_DISPLAYCONFIG_PATH_INFO(Structure):
    pass

struct_DISPLAYCONFIG_PATH_INFO._pack_ = 1 # source:False
struct_DISPLAYCONFIG_PATH_INFO._fields_ = [
    ('sourceInfo', struct_DISPLAYCONFIG_PATH_SOURCE_INFO),
    ('targetInfo', struct_DISPLAYCONFIG_PATH_TARGET_INFO),
    ('flags', ctypes.c_uint32),
]


# values for enumeration 'DISPLAYCONFIG_TOPOLOGY_ID'
DISPLAYCONFIG_TOPOLOGY_ID__enumvalues = {
    1: 'DISPLAYCONFIG_TOPOLOGY_INTERNAL',
    2: 'DISPLAYCONFIG_TOPOLOGY_CLONE',
    4: 'DISPLAYCONFIG_TOPOLOGY_EXTEND',
    8: 'DISPLAYCONFIG_TOPOLOGY_EXTERNAL',
    4294967295: 'DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32',
}
DISPLAYCONFIG_TOPOLOGY_INTERNAL = 1
DISPLAYCONFIG_TOPOLOGY_CLONE = 2
DISPLAYCONFIG_TOPOLOGY_EXTEND = 4
DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 8
DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 4294967295
DISPLAYCONFIG_TOPOLOGY_ID = ctypes.c_uint32 # enum

# values for enumeration 'DISPLAYCONFIG_DEVICE_INFO_TYPE'
DISPLAYCONFIG_DEVICE_INFO_TYPE__enumvalues = {
    1: 'DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME',
    2: 'DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME',
    3: 'DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE',
    4: 'DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME',
    5: 'DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE',
    6: 'DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE',
    7: 'DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION',
    8: 'DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION',
    9: 'DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO',
    10: 'DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE',
    11: 'DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL',
    4294967295: 'DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32',
}
DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1
DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2
DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3
DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4
DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5
DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6
DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7
DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8
DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9
DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10
DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 11
DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = 4294967295
DISPLAYCONFIG_DEVICE_INFO_TYPE = ctypes.c_uint32 # enum
class struct_DISPLAYCONFIG_DEVICE_INFO_HEADER(Structure):
    pass

struct_DISPLAYCONFIG_DEVICE_INFO_HEADER._pack_ = 1 # source:False
struct_DISPLAYCONFIG_DEVICE_INFO_HEADER._fields_ = [
    ('type', DISPLAYCONFIG_DEVICE_INFO_TYPE),
    ('size', ctypes.c_uint32),
    ('adapterId', LUID),
    ('id', ctypes.c_uint32),
]

class struct_DISPLAYCONFIG_SOURCE_DEVICE_NAME(Structure):
    pass

struct_DISPLAYCONFIG_SOURCE_DEVICE_NAME._pack_ = 1 # source:False
struct_DISPLAYCONFIG_SOURCE_DEVICE_NAME._fields_ = [
    ('header', struct_DISPLAYCONFIG_DEVICE_INFO_HEADER),
    ('viewGdiDeviceName', ctypes.c_int16 * 32),
]

class struct__63D8AC276564BEA69DF63EBD86FDB811(Structure):
    pass

struct__63D8AC276564BEA69DF63EBD86FDB811._pack_ = 1 # source:False
struct__63D8AC276564BEA69DF63EBD86FDB811._fields_ = [
    ('friendlyNameFromEdid', ctypes.c_uint32, 1),
    ('friendlyNameForced', ctypes.c_uint32, 1),
    ('edidIdsValid', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 29),
]

class union_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS___3212247FCB36E76CDA904B8EF1794EF2(Union):
    pass

class struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS___3212247FCB36E76CDA904B8EF1794EF2_0(Structure):
    pass

struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS___3212247FCB36E76CDA904B8EF1794EF2_0._pack_ = 1 # source:False
struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS___3212247FCB36E76CDA904B8EF1794EF2_0._fields_ = [
    ('friendlyNameFromEdid', ctypes.c_uint32, 1),
    ('friendlyNameForced', ctypes.c_uint32, 1),
    ('edidIdsValid', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 29),
]

union_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS___3212247FCB36E76CDA904B8EF1794EF2._pack_ = 1 # source:False
union_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS___3212247FCB36E76CDA904B8EF1794EF2._anonymous_ = ('_0',)
union_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS___3212247FCB36E76CDA904B8EF1794EF2._fields_ = [
    ('_0', struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS___3212247FCB36E76CDA904B8EF1794EF2_0),
    ('value', ctypes.c_uint32),
]

class struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS(Structure):
    pass

class union_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS_0(Union):
    pass

class struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS_0_0(Structure):
    pass

struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS_0_0._pack_ = 1 # source:False
struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS_0_0._fields_ = [
    ('friendlyNameFromEdid', ctypes.c_uint32, 1),
    ('friendlyNameForced', ctypes.c_uint32, 1),
    ('edidIdsValid', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 29),
]

union_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS_0._pack_ = 1 # source:False
union_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS_0._anonymous_ = ('_0',)
union_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS_0._fields_ = [
    ('_0', struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS_0_0),
    ('value', ctypes.c_uint32),
]

struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS._pack_ = 1 # source:False
struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS._anonymous_ = ('_0',)
struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS._fields_ = [
    ('_0', union_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS_0),
]

class struct_DISPLAYCONFIG_TARGET_DEVICE_NAME(Structure):
    pass

struct_DISPLAYCONFIG_TARGET_DEVICE_NAME._pack_ = 1 # source:False
struct_DISPLAYCONFIG_TARGET_DEVICE_NAME._fields_ = [
    ('header', struct_DISPLAYCONFIG_DEVICE_INFO_HEADER),
    ('flags', struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS),
    ('outputTechnology', DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY),
    ('edidManufactureId', ctypes.c_uint16),
    ('edidProductCodeId', ctypes.c_uint16),
    ('connectorInstance', ctypes.c_uint32),
    ('monitorFriendlyDeviceName', ctypes.c_int16 * 64),
    ('monitorDevicePath', ctypes.c_int16 * 128),
]

class struct_DISPLAYCONFIG_TARGET_PREFERRED_MODE(Structure):
    pass

struct_DISPLAYCONFIG_TARGET_PREFERRED_MODE._pack_ = 1 # source:False
struct_DISPLAYCONFIG_TARGET_PREFERRED_MODE._fields_ = [
    ('header', struct_DISPLAYCONFIG_DEVICE_INFO_HEADER),
    ('width', ctypes.c_uint32),
    ('height', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('targetMode', struct_DISPLAYCONFIG_TARGET_MODE),
]

class struct_DISPLAYCONFIG_ADAPTER_NAME(Structure):
    pass

struct_DISPLAYCONFIG_ADAPTER_NAME._pack_ = 1 # source:False
struct_DISPLAYCONFIG_ADAPTER_NAME._fields_ = [
    ('header', struct_DISPLAYCONFIG_DEVICE_INFO_HEADER),
    ('adapterDevicePath', ctypes.c_int16 * 128),
]

class struct_DISPLAYCONFIG_TARGET_BASE_TYPE(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('header', struct_DISPLAYCONFIG_DEVICE_INFO_HEADER),
    ('baseOutputTechnology', DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY),
     ]

class struct__1570E6E652654060C308A778ED15CE16(Structure):
    pass

struct__1570E6E652654060C308A778ED15CE16._pack_ = 1 # source:False
struct__1570E6E652654060C308A778ED15CE16._fields_ = [
    ('bootPersistenceOn', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 31),
]

class union_DISPLAYCONFIG_SET_TARGET_PERSISTENCE___355D109C8B4E4AEF84271C7784D7E191(Union):
    pass

class struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE___355D109C8B4E4AEF84271C7784D7E191_0(Structure):
    pass

struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE___355D109C8B4E4AEF84271C7784D7E191_0._pack_ = 1 # source:False
struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE___355D109C8B4E4AEF84271C7784D7E191_0._fields_ = [
    ('bootPersistenceOn', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 31),
]

union_DISPLAYCONFIG_SET_TARGET_PERSISTENCE___355D109C8B4E4AEF84271C7784D7E191._pack_ = 1 # source:False
union_DISPLAYCONFIG_SET_TARGET_PERSISTENCE___355D109C8B4E4AEF84271C7784D7E191._anonymous_ = ('_0',)
union_DISPLAYCONFIG_SET_TARGET_PERSISTENCE___355D109C8B4E4AEF84271C7784D7E191._fields_ = [
    ('_0', struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE___355D109C8B4E4AEF84271C7784D7E191_0),
    ('value', ctypes.c_uint32),
]

class struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE(Structure):
    pass

class union_DISPLAYCONFIG_SET_TARGET_PERSISTENCE_0(Union):
    pass

class struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE_0_0(Structure):
    pass

struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE_0_0._pack_ = 1 # source:False
struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE_0_0._fields_ = [
    ('bootPersistenceOn', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 31),
]

union_DISPLAYCONFIG_SET_TARGET_PERSISTENCE_0._pack_ = 1 # source:False
union_DISPLAYCONFIG_SET_TARGET_PERSISTENCE_0._anonymous_ = ('_0',)
union_DISPLAYCONFIG_SET_TARGET_PERSISTENCE_0._fields_ = [
    ('_0', struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE_0_0),
    ('value', ctypes.c_uint32),
]

struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE._pack_ = 1 # source:False
struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE._anonymous_ = ('_0',)
struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE._fields_ = [
    ('header', struct_DISPLAYCONFIG_DEVICE_INFO_HEADER),
    ('_0', union_DISPLAYCONFIG_SET_TARGET_PERSISTENCE_0),
]

class struct__D47918EF7649E51E527D85F826FB453E(Structure):
    pass

struct__D47918EF7649E51E527D85F826FB453E._pack_ = 1 # source:False
struct__D47918EF7649E51E527D85F826FB453E._fields_ = [
    ('disableMonitorVirtualResolution', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 31),
]

class union_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION___F2BD161A31B09014C59BCA8CDC8BCA06(Union):
    pass

class struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION___F2BD161A31B09014C59BCA8CDC8BCA06_0(Structure):
    pass

struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION___F2BD161A31B09014C59BCA8CDC8BCA06_0._pack_ = 1 # source:False
struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION___F2BD161A31B09014C59BCA8CDC8BCA06_0._fields_ = [
    ('disableMonitorVirtualResolution', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 31),
]

union_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION___F2BD161A31B09014C59BCA8CDC8BCA06._pack_ = 1 # source:False
union_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION___F2BD161A31B09014C59BCA8CDC8BCA06._anonymous_ = ('_0',)
union_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION___F2BD161A31B09014C59BCA8CDC8BCA06._fields_ = [
    ('_0', struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION___F2BD161A31B09014C59BCA8CDC8BCA06_0),
    ('value', ctypes.c_uint32),
]

class struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION(Structure):
    pass

class union_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION_0(Union):
    pass

class struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION_0_0(Structure):
    pass

struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION_0_0._pack_ = 1 # source:False
struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION_0_0._fields_ = [
    ('disableMonitorVirtualResolution', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 31),
]

union_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION_0._pack_ = 1 # source:False
union_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION_0._anonymous_ = ('_0',)
union_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION_0._fields_ = [
    ('_0', struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION_0_0),
    ('value', ctypes.c_uint32),
]

struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION._pack_ = 1 # source:False
struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION._anonymous_ = ('_0',)
struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION._fields_ = [
    ('header', struct_DISPLAYCONFIG_DEVICE_INFO_HEADER),
    ('_0', union_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION_0),
]


# values for enumeration '_DISPLAYCONFIG_COLOR_ENCODING'
_DISPLAYCONFIG_COLOR_ENCODING__enumvalues = {
    0: 'DISPLAYCONFIG_COLOR_ENCODING_RGB',
    1: 'DISPLAYCONFIG_COLOR_ENCODING_YCBCR444',
    2: 'DISPLAYCONFIG_COLOR_ENCODING_YCBCR422',
    3: 'DISPLAYCONFIG_COLOR_ENCODING_YCBCR420',
    4: 'DISPLAYCONFIG_COLOR_ENCODING_INTENSITY',
    4294967295: 'DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32',
}
DISPLAYCONFIG_COLOR_ENCODING_RGB = 0
DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1
DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2
DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3
DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4
DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = 4294967295
_DISPLAYCONFIG_COLOR_ENCODING = ctypes.c_uint32 # enum
DISPLAYCONFIG_COLOR_ENCODING = _DISPLAYCONFIG_COLOR_ENCODING
DISPLAYCONFIG_COLOR_ENCODING__enumvalues = _DISPLAYCONFIG_COLOR_ENCODING__enumvalues
class struct__721AF010CD3505050C324F97F48C6CA8(Structure):
    pass

struct__721AF010CD3505050C324F97F48C6CA8._pack_ = 1 # source:False
struct__721AF010CD3505050C324F97F48C6CA8._fields_ = [
    ('advancedColorSupported', ctypes.c_uint32, 1),
    ('advancedColorEnabled', ctypes.c_uint32, 1),
    ('wideColorEnforced', ctypes.c_uint32, 1),
    ('advancedColorForceDisabled', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 28),
]

class union__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO___D1ED48533BBC5D15418F532CAE9A0A65(Union):
    pass

class struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO___D1ED48533BBC5D15418F532CAE9A0A65_0(Structure):
    pass

struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO___D1ED48533BBC5D15418F532CAE9A0A65_0._pack_ = 1 # source:False
struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO___D1ED48533BBC5D15418F532CAE9A0A65_0._fields_ = [
    ('advancedColorSupported', ctypes.c_uint32, 1),
    ('advancedColorEnabled', ctypes.c_uint32, 1),
    ('wideColorEnforced', ctypes.c_uint32, 1),
    ('advancedColorForceDisabled', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 28),
]

union__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO___D1ED48533BBC5D15418F532CAE9A0A65._pack_ = 1 # source:False
union__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO___D1ED48533BBC5D15418F532CAE9A0A65._anonymous_ = ('_0',)
union__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO___D1ED48533BBC5D15418F532CAE9A0A65._fields_ = [
    ('_0', struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO___D1ED48533BBC5D15418F532CAE9A0A65_0),
    ('value', ctypes.c_uint32),
]

class struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO(Structure):
    pass

class union__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_0(Union):
    pass

class struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_0_0(Structure):
    pass

struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_0_0._pack_ = 1 # source:False
struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_0_0._fields_ = [
    ('advancedColorSupported', ctypes.c_uint32, 1),
    ('advancedColorEnabled', ctypes.c_uint32, 1),
    ('wideColorEnforced', ctypes.c_uint32, 1),
    ('advancedColorForceDisabled', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 28),
]

union__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_0._pack_ = 1 # source:False
union__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_0._anonymous_ = ('_0',)
union__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_0._fields_ = [
    ('_0', struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_0_0),
    ('value', ctypes.c_uint32),
]

struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO._pack_ = 1 # source:False
struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO._anonymous_ = ('_0',)
struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO._fields_ = [
    ('header', struct_DISPLAYCONFIG_DEVICE_INFO_HEADER),
    ('_0', union__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_0),
    ('colorEncoding', DISPLAYCONFIG_COLOR_ENCODING),
    ('bitsPerColorChannel', ctypes.c_uint32),
]

DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO = struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO
class struct__23D9D9C136A579E5510A962A603B8CB7(Structure):
    pass

struct__23D9D9C136A579E5510A962A603B8CB7._pack_ = 1 # source:False
struct__23D9D9C136A579E5510A962A603B8CB7._fields_ = [
    ('enableAdvancedColor', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 31),
]

class union__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE___04E95D2921E0D60839C4D595B69CF99E(Union):
    pass

class struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE___04E95D2921E0D60839C4D595B69CF99E_0(Structure):
    pass

struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE___04E95D2921E0D60839C4D595B69CF99E_0._pack_ = 1 # source:False
struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE___04E95D2921E0D60839C4D595B69CF99E_0._fields_ = [
    ('enableAdvancedColor', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 31),
]

union__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE___04E95D2921E0D60839C4D595B69CF99E._pack_ = 1 # source:False
union__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE___04E95D2921E0D60839C4D595B69CF99E._anonymous_ = ('_0',)
union__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE___04E95D2921E0D60839C4D595B69CF99E._fields_ = [
    ('_0', struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE___04E95D2921E0D60839C4D595B69CF99E_0),
    ('value', ctypes.c_uint32),
]

class struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE(Structure):
    pass

class union__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_0(Union):
    pass

class struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_0_0(Structure):
    pass

struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_0_0._pack_ = 1 # source:False
struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_0_0._fields_ = [
    ('enableAdvancedColor', ctypes.c_uint32, 1),
    ('reserved', ctypes.c_uint32, 31),
]

union__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_0._pack_ = 1 # source:False
union__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_0._anonymous_ = ('_0',)
union__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_0._fields_ = [
    ('_0', struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_0_0),
    ('value', ctypes.c_uint32),
]

struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE._pack_ = 1 # source:False
struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE._anonymous_ = ('_0',)
struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE._fields_ = [
    ('header', struct_DISPLAYCONFIG_DEVICE_INFO_HEADER),
    ('_0', union__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_0),
]

DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE = struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE
class struct__DISPLAYCONFIG_SDR_WHITE_LEVEL(Structure):
    pass

struct__DISPLAYCONFIG_SDR_WHITE_LEVEL._pack_ = 1 # source:False
struct__DISPLAYCONFIG_SDR_WHITE_LEVEL._fields_ = [
    ('header', struct_DISPLAYCONFIG_DEVICE_INFO_HEADER),
    ('SDRWhiteLevel', ctypes.c_uint32),
]

DISPLAYCONFIG_SDR_WHITE_LEVEL = struct__DISPLAYCONFIG_SDR_WHITE_LEVEL
class struct__RGNDATAHEADER(Structure):
    pass

struct__RGNDATAHEADER._pack_ = 1 # source:False
struct__RGNDATAHEADER._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('iType', ctypes.c_uint32),
    ('nCount', ctypes.c_uint32),
    ('nRgnSize', ctypes.c_uint32),
    ('rcBound', RECT),
]

RGNDATAHEADER = struct__RGNDATAHEADER
PRGNDATAHEADER = ctypes.POINTER(struct__RGNDATAHEADER)
class struct__RGNDATA(Structure):
    pass

struct__RGNDATA._pack_ = 1 # source:False
struct__RGNDATA._fields_ = [
    ('rdh', RGNDATAHEADER),
    ('Buffer', ctypes.c_char * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

RGNDATA = struct__RGNDATA
PRGNDATA = ctypes.POINTER(struct__RGNDATA)
NPRGNDATA = ctypes.POINTER(struct__RGNDATA)
LPRGNDATA = ctypes.POINTER(struct__RGNDATA)
class struct__ABC(Structure):
    pass

struct__ABC._pack_ = 1 # source:False
struct__ABC._fields_ = [
    ('abcA', ctypes.c_int32),
    ('abcB', ctypes.c_uint32),
    ('abcC', ctypes.c_int32),
]

ABC = struct__ABC
PABC = ctypes.POINTER(struct__ABC)
NPABC = ctypes.POINTER(struct__ABC)
LPABC = ctypes.POINTER(struct__ABC)
class struct__ABCFLOAT(Structure):
    pass

struct__ABCFLOAT._pack_ = 1 # source:False
struct__ABCFLOAT._fields_ = [
    ('abcfA', ctypes.c_float),
    ('abcfB', ctypes.c_float),
    ('abcfC', ctypes.c_float),
]

ABCFLOAT = struct__ABCFLOAT
PABCFLOAT = ctypes.POINTER(struct__ABCFLOAT)
NPABCFLOAT = ctypes.POINTER(struct__ABCFLOAT)
LPABCFLOAT = ctypes.POINTER(struct__ABCFLOAT)
class struct__OUTLINETEXTMETRICA(Structure):
    pass

struct__OUTLINETEXTMETRICA._pack_ = 1 # source:False
struct__OUTLINETEXTMETRICA._fields_ = [
    ('otmSize', ctypes.c_uint32),
    ('otmTextMetrics', TEXTMETRICA),
    ('otmFiller', ctypes.c_ubyte),
    ('otmPanoseNumber', PANOSE),
    ('PADDING_0', ctypes.c_ubyte),
    ('otmfsSelection', ctypes.c_uint32),
    ('otmfsType', ctypes.c_uint32),
    ('otmsCharSlopeRise', ctypes.c_int32),
    ('otmsCharSlopeRun', ctypes.c_int32),
    ('otmItalicAngle', ctypes.c_int32),
    ('otmEMSquare', ctypes.c_uint32),
    ('otmAscent', ctypes.c_int32),
    ('otmDescent', ctypes.c_int32),
    ('otmLineGap', ctypes.c_uint32),
    ('otmsCapEmHeight', ctypes.c_uint32),
    ('otmsXHeight', ctypes.c_uint32),
    ('otmrcFontBox', RECT),
    ('otmMacAscent', ctypes.c_int32),
    ('otmMacDescent', ctypes.c_int32),
    ('otmMacLineGap', ctypes.c_uint32),
    ('otmusMinimumPPEM', ctypes.c_uint32),
    ('otmptSubscriptSize', POINT),
    ('otmptSubscriptOffset', POINT),
    ('otmptSuperscriptSize', POINT),
    ('otmptSuperscriptOffset', POINT),
    ('otmsStrikeoutSize', ctypes.c_uint32),
    ('otmsStrikeoutPosition', ctypes.c_int32),
    ('otmsUnderscoreSize', ctypes.c_int32),
    ('otmsUnderscorePosition', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('otmpFamilyName', ctypes.POINTER(ctypes.c_char)),
    ('otmpFaceName', ctypes.POINTER(ctypes.c_char)),
    ('otmpStyleName', ctypes.POINTER(ctypes.c_char)),
    ('otmpFullName', ctypes.POINTER(ctypes.c_char)),
]

OUTLINETEXTMETRICA = struct__OUTLINETEXTMETRICA
POUTLINETEXTMETRICA = ctypes.POINTER(struct__OUTLINETEXTMETRICA)
NPOUTLINETEXTMETRICA = ctypes.POINTER(struct__OUTLINETEXTMETRICA)
LPOUTLINETEXTMETRICA = ctypes.POINTER(struct__OUTLINETEXTMETRICA)
class struct__OUTLINETEXTMETRICW(Structure):
    pass

struct__OUTLINETEXTMETRICW._pack_ = 1 # source:False
struct__OUTLINETEXTMETRICW._fields_ = [
    ('otmSize', ctypes.c_uint32),
    ('otmTextMetrics', TEXTMETRICW),
    ('otmFiller', ctypes.c_ubyte),
    ('otmPanoseNumber', PANOSE),
    ('PADDING_0', ctypes.c_ubyte),
    ('otmfsSelection', ctypes.c_uint32),
    ('otmfsType', ctypes.c_uint32),
    ('otmsCharSlopeRise', ctypes.c_int32),
    ('otmsCharSlopeRun', ctypes.c_int32),
    ('otmItalicAngle', ctypes.c_int32),
    ('otmEMSquare', ctypes.c_uint32),
    ('otmAscent', ctypes.c_int32),
    ('otmDescent', ctypes.c_int32),
    ('otmLineGap', ctypes.c_uint32),
    ('otmsCapEmHeight', ctypes.c_uint32),
    ('otmsXHeight', ctypes.c_uint32),
    ('otmrcFontBox', RECT),
    ('otmMacAscent', ctypes.c_int32),
    ('otmMacDescent', ctypes.c_int32),
    ('otmMacLineGap', ctypes.c_uint32),
    ('otmusMinimumPPEM', ctypes.c_uint32),
    ('otmptSubscriptSize', POINT),
    ('otmptSubscriptOffset', POINT),
    ('otmptSuperscriptSize', POINT),
    ('otmptSuperscriptOffset', POINT),
    ('otmsStrikeoutSize', ctypes.c_uint32),
    ('otmsStrikeoutPosition', ctypes.c_int32),
    ('otmsUnderscoreSize', ctypes.c_int32),
    ('otmsUnderscorePosition', ctypes.c_int32),
    ('otmpFamilyName', ctypes.POINTER(ctypes.c_char)),
    ('otmpFaceName', ctypes.POINTER(ctypes.c_char)),
    ('otmpStyleName', ctypes.POINTER(ctypes.c_char)),
    ('otmpFullName', ctypes.POINTER(ctypes.c_char)),
]

OUTLINETEXTMETRICW = struct__OUTLINETEXTMETRICW
POUTLINETEXTMETRICW = ctypes.POINTER(struct__OUTLINETEXTMETRICW)
NPOUTLINETEXTMETRICW = ctypes.POINTER(struct__OUTLINETEXTMETRICW)
LPOUTLINETEXTMETRICW = ctypes.POINTER(struct__OUTLINETEXTMETRICW)
OUTLINETEXTMETRIC = struct__OUTLINETEXTMETRICA
POUTLINETEXTMETRIC = ctypes.POINTER(struct__OUTLINETEXTMETRICA)
NPOUTLINETEXTMETRIC = ctypes.POINTER(struct__OUTLINETEXTMETRICA)
LPOUTLINETEXTMETRIC = ctypes.POINTER(struct__OUTLINETEXTMETRICA)
class struct_tagPOLYTEXTA(Structure):
    pass

struct_tagPOLYTEXTA._pack_ = 1 # source:False
struct_tagPOLYTEXTA._fields_ = [
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('n', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpstr', ctypes.POINTER(ctypes.c_char)),
    ('uiFlags', ctypes.c_uint32),
    ('rcl', RECT),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pdx', ctypes.POINTER(ctypes.c_int32)),
]

POLYTEXTA = struct_tagPOLYTEXTA
PPOLYTEXTA = ctypes.POINTER(struct_tagPOLYTEXTA)
NPPOLYTEXTA = ctypes.POINTER(struct_tagPOLYTEXTA)
LPPOLYTEXTA = ctypes.POINTER(struct_tagPOLYTEXTA)
class struct_tagPOLYTEXTW(Structure):
    pass

struct_tagPOLYTEXTW._pack_ = 1 # source:False
struct_tagPOLYTEXTW._fields_ = [
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('n', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpstr', ctypes.POINTER(ctypes.c_int16)),
    ('uiFlags', ctypes.c_uint32),
    ('rcl', RECT),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pdx', ctypes.POINTER(ctypes.c_int32)),
]

POLYTEXTW = struct_tagPOLYTEXTW
PPOLYTEXTW = ctypes.POINTER(struct_tagPOLYTEXTW)
NPPOLYTEXTW = ctypes.POINTER(struct_tagPOLYTEXTW)
LPPOLYTEXTW = ctypes.POINTER(struct_tagPOLYTEXTW)
POLYTEXT = struct_tagPOLYTEXTA
PPOLYTEXT = ctypes.POINTER(struct_tagPOLYTEXTA)
NPPOLYTEXT = ctypes.POINTER(struct_tagPOLYTEXTA)
LPPOLYTEXT = ctypes.POINTER(struct_tagPOLYTEXTA)
class struct__FIXED(Structure):
    pass

struct__FIXED._pack_ = 1 # source:False
struct__FIXED._fields_ = [
    ('fract', ctypes.c_uint16),
    ('value', ctypes.c_int16),
]

FIXED = struct__FIXED
class struct__MAT2(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('eM11', FIXED),
    ('eM12', FIXED),
    ('eM21', FIXED),
    ('eM22', FIXED),
     ]

MAT2 = struct__MAT2
LPMAT2 = ctypes.POINTER(struct__MAT2)
class struct__GLYPHMETRICS(Structure):
    pass

struct__GLYPHMETRICS._pack_ = 1 # source:False
struct__GLYPHMETRICS._fields_ = [
    ('gmBlackBoxX', ctypes.c_uint32),
    ('gmBlackBoxY', ctypes.c_uint32),
    ('gmptGlyphOrigin', POINT),
    ('gmCellIncX', ctypes.c_int16),
    ('gmCellIncY', ctypes.c_int16),
]

GLYPHMETRICS = struct__GLYPHMETRICS
LPGLYPHMETRICS = ctypes.POINTER(struct__GLYPHMETRICS)
class struct_tagPOINTFX(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('x', FIXED),
    ('y', FIXED),
     ]

POINTFX = struct_tagPOINTFX
LPPOINTFX = ctypes.POINTER(struct_tagPOINTFX)
class struct_tagTTPOLYCURVE(Structure):
    pass

struct_tagTTPOLYCURVE._pack_ = 1 # source:False
struct_tagTTPOLYCURVE._fields_ = [
    ('wType', ctypes.c_uint16),
    ('cpfx', ctypes.c_uint16),
    ('apfx', struct_tagPOINTFX * 1),
]

TTPOLYCURVE = struct_tagTTPOLYCURVE
LPTTPOLYCURVE = ctypes.POINTER(struct_tagTTPOLYCURVE)
class struct_tagTTPOLYGONHEADER(Structure):
    pass

struct_tagTTPOLYGONHEADER._pack_ = 1 # source:False
struct_tagTTPOLYGONHEADER._fields_ = [
    ('cb', ctypes.c_uint32),
    ('dwType', ctypes.c_uint32),
    ('pfxStart', POINTFX),
]

TTPOLYGONHEADER = struct_tagTTPOLYGONHEADER
LPTTPOLYGONHEADER = ctypes.POINTER(struct_tagTTPOLYGONHEADER)
class struct_tagGCP_RESULTSA(Structure):
    pass

struct_tagGCP_RESULTSA._pack_ = 1 # source:False
struct_tagGCP_RESULTSA._fields_ = [
    ('lStructSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpOutString', ctypes.POINTER(ctypes.c_char)),
    ('lpOrder', ctypes.POINTER(ctypes.c_uint32)),
    ('lpDx', ctypes.POINTER(ctypes.c_int32)),
    ('lpCaretPos', ctypes.POINTER(ctypes.c_int32)),
    ('lpClass', ctypes.POINTER(ctypes.c_char)),
    ('lpGlyphs', ctypes.POINTER(ctypes.c_int16)),
    ('nGlyphs', ctypes.c_uint32),
    ('nMaxFit', ctypes.c_int32),
]

GCP_RESULTSA = struct_tagGCP_RESULTSA
LPGCP_RESULTSA = ctypes.POINTER(struct_tagGCP_RESULTSA)
class struct_tagGCP_RESULTSW(Structure):
    pass

struct_tagGCP_RESULTSW._pack_ = 1 # source:False
struct_tagGCP_RESULTSW._fields_ = [
    ('lStructSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpOutString', ctypes.POINTER(ctypes.c_int16)),
    ('lpOrder', ctypes.POINTER(ctypes.c_uint32)),
    ('lpDx', ctypes.POINTER(ctypes.c_int32)),
    ('lpCaretPos', ctypes.POINTER(ctypes.c_int32)),
    ('lpClass', ctypes.POINTER(ctypes.c_char)),
    ('lpGlyphs', ctypes.POINTER(ctypes.c_int16)),
    ('nGlyphs', ctypes.c_uint32),
    ('nMaxFit', ctypes.c_int32),
]

GCP_RESULTSW = struct_tagGCP_RESULTSW
LPGCP_RESULTSW = ctypes.POINTER(struct_tagGCP_RESULTSW)
GCP_RESULTS = struct_tagGCP_RESULTSA
LPGCP_RESULTS = ctypes.POINTER(struct_tagGCP_RESULTSA)
class struct__RASTERIZER_STATUS(Structure):
    pass

struct__RASTERIZER_STATUS._pack_ = 1 # source:False
struct__RASTERIZER_STATUS._fields_ = [
    ('nSize', ctypes.c_int16),
    ('wFlags', ctypes.c_int16),
    ('nLanguageID', ctypes.c_int16),
]

RASTERIZER_STATUS = struct__RASTERIZER_STATUS
LPRASTERIZER_STATUS = ctypes.POINTER(struct__RASTERIZER_STATUS)
class struct_tagPIXELFORMATDESCRIPTOR(Structure):
    pass

struct_tagPIXELFORMATDESCRIPTOR._pack_ = 1 # source:False
struct_tagPIXELFORMATDESCRIPTOR._fields_ = [
    ('nSize', ctypes.c_uint16),
    ('nVersion', ctypes.c_uint16),
    ('dwFlags', ctypes.c_uint32),
    ('iPixelType', ctypes.c_ubyte),
    ('cColorBits', ctypes.c_ubyte),
    ('cRedBits', ctypes.c_ubyte),
    ('cRedShift', ctypes.c_ubyte),
    ('cGreenBits', ctypes.c_ubyte),
    ('cGreenShift', ctypes.c_ubyte),
    ('cBlueBits', ctypes.c_ubyte),
    ('cBlueShift', ctypes.c_ubyte),
    ('cAlphaBits', ctypes.c_ubyte),
    ('cAlphaShift', ctypes.c_ubyte),
    ('cAccumBits', ctypes.c_ubyte),
    ('cAccumRedBits', ctypes.c_ubyte),
    ('cAccumGreenBits', ctypes.c_ubyte),
    ('cAccumBlueBits', ctypes.c_ubyte),
    ('cAccumAlphaBits', ctypes.c_ubyte),
    ('cDepthBits', ctypes.c_ubyte),
    ('cStencilBits', ctypes.c_ubyte),
    ('cAuxBuffers', ctypes.c_ubyte),
    ('iLayerType', ctypes.c_ubyte),
    ('bReserved', ctypes.c_ubyte),
    ('dwLayerMask', ctypes.c_uint32),
    ('dwVisibleMask', ctypes.c_uint32),
    ('dwDamageMask', ctypes.c_uint32),
]

PIXELFORMATDESCRIPTOR = struct_tagPIXELFORMATDESCRIPTOR
PPIXELFORMATDESCRIPTOR = ctypes.POINTER(struct_tagPIXELFORMATDESCRIPTOR)
LPPIXELFORMATDESCRIPTOR = ctypes.POINTER(struct_tagPIXELFORMATDESCRIPTOR)
OLDFONTENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_tagLOGFONTA), ctypes.POINTER(struct_tagTEXTMETRICA), ctypes.c_uint32, ctypes.c_int64)
OLDFONTENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_tagLOGFONTW), ctypes.POINTER(struct_tagTEXTMETRICW), ctypes.c_uint32, ctypes.c_int64)
FONTENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_tagLOGFONTA), ctypes.POINTER(struct_tagTEXTMETRICA), ctypes.c_uint32, ctypes.c_int64)
FONTENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_tagLOGFONTW), ctypes.POINTER(struct_tagTEXTMETRICW), ctypes.c_uint32, ctypes.c_int64)
FONTENUMPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_tagLOGFONTA), ctypes.POINTER(struct_tagTEXTMETRICA), ctypes.c_uint32, ctypes.c_int64)
GOBJENUMPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), ctypes.c_int64)
LINEDDAPROC = ctypes.CFUNCTYPE(None, ctypes.c_int32, ctypes.c_int32, ctypes.c_int64)
LPFNDEVMODE = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(struct_HWND__), ctypes.POINTER(struct_HINSTANCE__), ctypes.POINTER(struct__devicemodeA), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct__devicemodeA), ctypes.POINTER(ctypes.c_char), ctypes.c_uint32)
LPFNDEVCAPS = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.c_uint32, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct__devicemodeA))
class struct_tagWCRANGE(Structure):
    pass

struct_tagWCRANGE._pack_ = 1 # source:False
struct_tagWCRANGE._fields_ = [
    ('wcLow', ctypes.c_int16),
    ('cGlyphs', ctypes.c_uint16),
]

WCRANGE = struct_tagWCRANGE
PWCRANGE = ctypes.POINTER(struct_tagWCRANGE)
LPWCRANGE = ctypes.POINTER(struct_tagWCRANGE)
class struct_tagGLYPHSET(Structure):
    pass

struct_tagGLYPHSET._pack_ = 1 # source:False
struct_tagGLYPHSET._fields_ = [
    ('cbThis', ctypes.c_uint32),
    ('flAccel', ctypes.c_uint32),
    ('cGlyphsSupported', ctypes.c_uint32),
    ('cRanges', ctypes.c_uint32),
    ('ranges', struct_tagWCRANGE * 1),
]

GLYPHSET = struct_tagGLYPHSET
PGLYPHSET = ctypes.POINTER(struct_tagGLYPHSET)
LPGLYPHSET = ctypes.POINTER(struct_tagGLYPHSET)
class struct_tagDESIGNVECTOR(Structure):
    pass

struct_tagDESIGNVECTOR._pack_ = 1 # source:False
struct_tagDESIGNVECTOR._fields_ = [
    ('dvReserved', ctypes.c_uint32),
    ('dvNumAxes', ctypes.c_uint32),
    ('dvValues', ctypes.c_int32 * 16),
]

DESIGNVECTOR = struct_tagDESIGNVECTOR
PDESIGNVECTOR = ctypes.POINTER(struct_tagDESIGNVECTOR)
LPDESIGNVECTOR = ctypes.POINTER(struct_tagDESIGNVECTOR)
class struct_tagAXISINFOA(Structure):
    pass

struct_tagAXISINFOA._pack_ = 1 # source:False
struct_tagAXISINFOA._fields_ = [
    ('axMinValue', ctypes.c_int32),
    ('axMaxValue', ctypes.c_int32),
    ('axAxisName', ctypes.c_ubyte * 16),
]

AXISINFOA = struct_tagAXISINFOA
PAXISINFOA = ctypes.POINTER(struct_tagAXISINFOA)
LPAXISINFOA = ctypes.POINTER(struct_tagAXISINFOA)
class struct_tagAXISINFOW(Structure):
    pass

struct_tagAXISINFOW._pack_ = 1 # source:False
struct_tagAXISINFOW._fields_ = [
    ('axMinValue', ctypes.c_int32),
    ('axMaxValue', ctypes.c_int32),
    ('axAxisName', ctypes.c_int16 * 16),
]

AXISINFOW = struct_tagAXISINFOW
PAXISINFOW = ctypes.POINTER(struct_tagAXISINFOW)
LPAXISINFOW = ctypes.POINTER(struct_tagAXISINFOW)
AXISINFO = struct_tagAXISINFOA
PAXISINFO = ctypes.POINTER(struct_tagAXISINFOA)
LPAXISINFO = ctypes.POINTER(struct_tagAXISINFOA)
class struct_tagAXESLISTA(Structure):
    pass

struct_tagAXESLISTA._pack_ = 1 # source:False
struct_tagAXESLISTA._fields_ = [
    ('axlReserved', ctypes.c_uint32),
    ('axlNumAxes', ctypes.c_uint32),
    ('axlAxisInfo', struct_tagAXISINFOA * 16),
]

AXESLISTA = struct_tagAXESLISTA
PAXESLISTA = ctypes.POINTER(struct_tagAXESLISTA)
LPAXESLISTA = ctypes.POINTER(struct_tagAXESLISTA)
class struct_tagAXESLISTW(Structure):
    pass

struct_tagAXESLISTW._pack_ = 1 # source:False
struct_tagAXESLISTW._fields_ = [
    ('axlReserved', ctypes.c_uint32),
    ('axlNumAxes', ctypes.c_uint32),
    ('axlAxisInfo', struct_tagAXISINFOW * 16),
]

AXESLISTW = struct_tagAXESLISTW
PAXESLISTW = ctypes.POINTER(struct_tagAXESLISTW)
LPAXESLISTW = ctypes.POINTER(struct_tagAXESLISTW)
AXESLIST = struct_tagAXESLISTA
PAXESLIST = ctypes.POINTER(struct_tagAXESLISTA)
LPAXESLIST = ctypes.POINTER(struct_tagAXESLISTA)
class struct_tagENUMLOGFONTEXDVA(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('elfEnumLogfontEx', ENUMLOGFONTEXA),
    ('elfDesignVector', DESIGNVECTOR),
     ]

ENUMLOGFONTEXDVA = struct_tagENUMLOGFONTEXDVA
PENUMLOGFONTEXDVA = ctypes.POINTER(struct_tagENUMLOGFONTEXDVA)
LPENUMLOGFONTEXDVA = ctypes.POINTER(struct_tagENUMLOGFONTEXDVA)
class struct_tagENUMLOGFONTEXDVW(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('elfEnumLogfontEx', ENUMLOGFONTEXW),
    ('elfDesignVector', DESIGNVECTOR),
     ]

ENUMLOGFONTEXDVW = struct_tagENUMLOGFONTEXDVW
PENUMLOGFONTEXDVW = ctypes.POINTER(struct_tagENUMLOGFONTEXDVW)
LPENUMLOGFONTEXDVW = ctypes.POINTER(struct_tagENUMLOGFONTEXDVW)
ENUMLOGFONTEXDV = struct_tagENUMLOGFONTEXDVA
PENUMLOGFONTEXDV = ctypes.POINTER(struct_tagENUMLOGFONTEXDVA)
LPENUMLOGFONTEXDV = ctypes.POINTER(struct_tagENUMLOGFONTEXDVA)
class struct_tagENUMTEXTMETRICA(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('etmNewTextMetricEx', NEWTEXTMETRICEXA),
    ('etmAxesList', AXESLISTA),
     ]

ENUMTEXTMETRICA = struct_tagENUMTEXTMETRICA
PENUMTEXTMETRICA = ctypes.POINTER(struct_tagENUMTEXTMETRICA)
LPENUMTEXTMETRICA = ctypes.POINTER(struct_tagENUMTEXTMETRICA)
class struct_tagENUMTEXTMETRICW(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('etmNewTextMetricEx', NEWTEXTMETRICEXW),
    ('etmAxesList', AXESLISTW),
     ]

ENUMTEXTMETRICW = struct_tagENUMTEXTMETRICW
PENUMTEXTMETRICW = ctypes.POINTER(struct_tagENUMTEXTMETRICW)
LPENUMTEXTMETRICW = ctypes.POINTER(struct_tagENUMTEXTMETRICW)
ENUMTEXTMETRIC = struct_tagENUMTEXTMETRICA
PENUMTEXTMETRIC = ctypes.POINTER(struct_tagENUMTEXTMETRICA)
LPENUMTEXTMETRIC = ctypes.POINTER(struct_tagENUMTEXTMETRICA)
COLOR16 = ctypes.c_uint16
class struct__TRIVERTEX(Structure):
    pass

struct__TRIVERTEX._pack_ = 1 # source:False
struct__TRIVERTEX._fields_ = [
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('Red', ctypes.c_uint16),
    ('Green', ctypes.c_uint16),
    ('Blue', ctypes.c_uint16),
    ('Alpha', ctypes.c_uint16),
]

TRIVERTEX = struct__TRIVERTEX
PTRIVERTEX = ctypes.POINTER(struct__TRIVERTEX)
LPTRIVERTEX = ctypes.POINTER(struct__TRIVERTEX)
class struct__GRADIENT_TRIANGLE(Structure):
    pass

struct__GRADIENT_TRIANGLE._pack_ = 1 # source:False
struct__GRADIENT_TRIANGLE._fields_ = [
    ('Vertex1', ctypes.c_uint32),
    ('Vertex2', ctypes.c_uint32),
    ('Vertex3', ctypes.c_uint32),
]

GRADIENT_TRIANGLE = struct__GRADIENT_TRIANGLE
PGRADIENT_TRIANGLE = ctypes.POINTER(struct__GRADIENT_TRIANGLE)
LPGRADIENT_TRIANGLE = ctypes.POINTER(struct__GRADIENT_TRIANGLE)
class struct__GRADIENT_RECT(Structure):
    pass

struct__GRADIENT_RECT._pack_ = 1 # source:False
struct__GRADIENT_RECT._fields_ = [
    ('UpperLeft', ctypes.c_uint32),
    ('LowerRight', ctypes.c_uint32),
]

GRADIENT_RECT = struct__GRADIENT_RECT
PGRADIENT_RECT = ctypes.POINTER(struct__GRADIENT_RECT)
LPGRADIENT_RECT = ctypes.POINTER(struct__GRADIENT_RECT)
class struct__BLENDFUNCTION(Structure):
    pass

struct__BLENDFUNCTION._pack_ = 1 # source:False
struct__BLENDFUNCTION._fields_ = [
    ('BlendOp', ctypes.c_ubyte),
    ('BlendFlags', ctypes.c_ubyte),
    ('SourceConstantAlpha', ctypes.c_ubyte),
    ('AlphaFormat', ctypes.c_ubyte),
]

BLENDFUNCTION = struct__BLENDFUNCTION
PBLENDFUNCTION = ctypes.POINTER(struct__BLENDFUNCTION)
MFENUMPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HDC__), ctypes.POINTER(struct_tagHANDLETABLE), ctypes.POINTER(struct_tagMETARECORD), ctypes.c_int32, ctypes.c_int64)
ENHMFENUMPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HDC__), ctypes.POINTER(struct_tagHANDLETABLE), ctypes.POINTER(struct_tagENHMETARECORD), ctypes.c_int32, ctypes.c_int64)
class struct_tagDIBSECTION(Structure):
    pass

struct_tagDIBSECTION._pack_ = 1 # source:False
struct_tagDIBSECTION._fields_ = [
    ('dsBm', BITMAP),
    ('dsBmih', BITMAPINFOHEADER),
    ('dsBitfields', ctypes.c_uint32 * 3),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('dshSection', ctypes.POINTER(None)),
    ('dsOffset', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

DIBSECTION = struct_tagDIBSECTION
LPDIBSECTION = ctypes.POINTER(struct_tagDIBSECTION)
PDIBSECTION = ctypes.POINTER(struct_tagDIBSECTION)
class struct_tagCOLORADJUSTMENT(Structure):
    pass

struct_tagCOLORADJUSTMENT._pack_ = 1 # source:False
struct_tagCOLORADJUSTMENT._fields_ = [
    ('caSize', ctypes.c_uint16),
    ('caFlags', ctypes.c_uint16),
    ('caIlluminantIndex', ctypes.c_uint16),
    ('caRedGamma', ctypes.c_uint16),
    ('caGreenGamma', ctypes.c_uint16),
    ('caBlueGamma', ctypes.c_uint16),
    ('caReferenceBlack', ctypes.c_uint16),
    ('caReferenceWhite', ctypes.c_uint16),
    ('caContrast', ctypes.c_int16),
    ('caBrightness', ctypes.c_int16),
    ('caColorfulness', ctypes.c_int16),
    ('caRedGreenTint', ctypes.c_int16),
]

COLORADJUSTMENT = struct_tagCOLORADJUSTMENT
PCOLORADJUSTMENT = ctypes.POINTER(struct_tagCOLORADJUSTMENT)
LPCOLORADJUSTMENT = ctypes.POINTER(struct_tagCOLORADJUSTMENT)
ABORTPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HDC__), ctypes.c_int32)
class struct__DOCINFOA(Structure):
    pass

struct__DOCINFOA._pack_ = 1 # source:False
struct__DOCINFOA._fields_ = [
    ('cbSize', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpszDocName', ctypes.POINTER(ctypes.c_char)),
    ('lpszOutput', ctypes.POINTER(ctypes.c_char)),
    ('lpszDatatype', ctypes.POINTER(ctypes.c_char)),
    ('fwType', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

DOCINFOA = struct__DOCINFOA
LPDOCINFOA = ctypes.POINTER(struct__DOCINFOA)
class struct__DOCINFOW(Structure):
    pass

struct__DOCINFOW._pack_ = 1 # source:False
struct__DOCINFOW._fields_ = [
    ('cbSize', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpszDocName', ctypes.POINTER(ctypes.c_int16)),
    ('lpszOutput', ctypes.POINTER(ctypes.c_int16)),
    ('lpszDatatype', ctypes.POINTER(ctypes.c_int16)),
    ('fwType', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

DOCINFOW = struct__DOCINFOW
LPDOCINFOW = ctypes.POINTER(struct__DOCINFOW)
DOCINFO = struct__DOCINFOA
LPDOCINFO = ctypes.POINTER(struct__DOCINFOA)
class struct_tagKERNINGPAIR(Structure):
    pass

struct_tagKERNINGPAIR._pack_ = 1 # source:False
struct_tagKERNINGPAIR._fields_ = [
    ('wFirst', ctypes.c_uint16),
    ('wSecond', ctypes.c_uint16),
    ('iKernAmount', ctypes.c_int32),
]

KERNINGPAIR = struct_tagKERNINGPAIR
LPKERNINGPAIR = ctypes.POINTER(struct_tagKERNINGPAIR)
ICMENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int64)
ICMENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int64)
class struct_tagEMR(Structure):
    pass

struct_tagEMR._pack_ = 1 # source:False
struct_tagEMR._fields_ = [
    ('iType', ctypes.c_uint32),
    ('nSize', ctypes.c_uint32),
]

EMR = struct_tagEMR
PEMR = ctypes.POINTER(struct_tagEMR)
class struct_tagEMRTEXT(Structure):
    pass

struct_tagEMRTEXT._pack_ = 1 # source:False
struct_tagEMRTEXT._fields_ = [
    ('ptlReference', POINTL),
    ('nChars', ctypes.c_uint32),
    ('offString', ctypes.c_uint32),
    ('fOptions', ctypes.c_uint32),
    ('rcl', RECTL),
    ('offDx', ctypes.c_uint32),
]

EMRTEXT = struct_tagEMRTEXT
PEMRTEXT = ctypes.POINTER(struct_tagEMRTEXT)
class struct_tagABORTPATH(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('emr', EMR),
     ]

EMRABORTPATH = struct_tagABORTPATH
PEMRABORTPATH = ctypes.POINTER(struct_tagABORTPATH)
EMRBEGINPATH = struct_tagABORTPATH
PEMRBEGINPATH = ctypes.POINTER(struct_tagABORTPATH)
EMRENDPATH = struct_tagABORTPATH
PEMRENDPATH = ctypes.POINTER(struct_tagABORTPATH)
EMRCLOSEFIGURE = struct_tagABORTPATH
PEMRCLOSEFIGURE = ctypes.POINTER(struct_tagABORTPATH)
EMRFLATTENPATH = struct_tagABORTPATH
PEMRFLATTENPATH = ctypes.POINTER(struct_tagABORTPATH)
EMRWIDENPATH = struct_tagABORTPATH
PEMRWIDENPATH = ctypes.POINTER(struct_tagABORTPATH)
EMRSETMETARGN = struct_tagABORTPATH
PEMRSETMETARGN = ctypes.POINTER(struct_tagABORTPATH)
EMRSAVEDC = struct_tagABORTPATH
PEMRSAVEDC = ctypes.POINTER(struct_tagABORTPATH)
EMRREALIZEPALETTE = struct_tagABORTPATH
PEMRREALIZEPALETTE = ctypes.POINTER(struct_tagABORTPATH)
class struct_tagEMRSELECTCLIPPATH(Structure):
    pass

struct_tagEMRSELECTCLIPPATH._pack_ = 1 # source:False
struct_tagEMRSELECTCLIPPATH._fields_ = [
    ('emr', EMR),
    ('iMode', ctypes.c_uint32),
]

EMRSELECTCLIPPATH = struct_tagEMRSELECTCLIPPATH
PEMRSELECTCLIPPATH = ctypes.POINTER(struct_tagEMRSELECTCLIPPATH)
EMRSETBKMODE = struct_tagEMRSELECTCLIPPATH
PEMRSETBKMODE = ctypes.POINTER(struct_tagEMRSELECTCLIPPATH)
EMRSETMAPMODE = struct_tagEMRSELECTCLIPPATH
PEMRSETMAPMODE = ctypes.POINTER(struct_tagEMRSELECTCLIPPATH)
EMRSETLAYOUT = struct_tagEMRSELECTCLIPPATH
PEMRSETLAYOUT = ctypes.POINTER(struct_tagEMRSELECTCLIPPATH)
EMRSETPOLYFILLMODE = struct_tagEMRSELECTCLIPPATH
PEMRSETPOLYFILLMODE = ctypes.POINTER(struct_tagEMRSELECTCLIPPATH)
EMRSETROP2 = struct_tagEMRSELECTCLIPPATH
PEMRSETROP2 = ctypes.POINTER(struct_tagEMRSELECTCLIPPATH)
EMRSETSTRETCHBLTMODE = struct_tagEMRSELECTCLIPPATH
PEMRSETSTRETCHBLTMODE = ctypes.POINTER(struct_tagEMRSELECTCLIPPATH)
EMRSETICMMODE = struct_tagEMRSELECTCLIPPATH
PEMRSETICMMODE = ctypes.POINTER(struct_tagEMRSELECTCLIPPATH)
EMRSETTEXTALIGN = struct_tagEMRSELECTCLIPPATH
PEMRSETTEXTALIGN = ctypes.POINTER(struct_tagEMRSELECTCLIPPATH)
class struct_tagEMRSETMITERLIMIT(Structure):
    pass

struct_tagEMRSETMITERLIMIT._pack_ = 1 # source:False
struct_tagEMRSETMITERLIMIT._fields_ = [
    ('emr', EMR),
    ('eMiterLimit', ctypes.c_float),
]

EMRSETMITERLIMIT = struct_tagEMRSETMITERLIMIT
PEMRSETMITERLIMIT = ctypes.POINTER(struct_tagEMRSETMITERLIMIT)
class struct_tagEMRRESTOREDC(Structure):
    pass

struct_tagEMRRESTOREDC._pack_ = 1 # source:False
struct_tagEMRRESTOREDC._fields_ = [
    ('emr', EMR),
    ('iRelative', ctypes.c_int32),
]

EMRRESTOREDC = struct_tagEMRRESTOREDC
PEMRRESTOREDC = ctypes.POINTER(struct_tagEMRRESTOREDC)
class struct_tagEMRSETARCDIRECTION(Structure):
    pass

struct_tagEMRSETARCDIRECTION._pack_ = 1 # source:False
struct_tagEMRSETARCDIRECTION._fields_ = [
    ('emr', EMR),
    ('iArcDirection', ctypes.c_uint32),
]

EMRSETARCDIRECTION = struct_tagEMRSETARCDIRECTION
PEMRSETARCDIRECTION = ctypes.POINTER(struct_tagEMRSETARCDIRECTION)
class struct_tagEMRSETMAPPERFLAGS(Structure):
    pass

struct_tagEMRSETMAPPERFLAGS._pack_ = 1 # source:False
struct_tagEMRSETMAPPERFLAGS._fields_ = [
    ('emr', EMR),
    ('dwFlags', ctypes.c_uint32),
]

EMRSETMAPPERFLAGS = struct_tagEMRSETMAPPERFLAGS
PEMRSETMAPPERFLAGS = ctypes.POINTER(struct_tagEMRSETMAPPERFLAGS)
class struct_tagEMRSETTEXTCOLOR(Structure):
    pass

struct_tagEMRSETTEXTCOLOR._pack_ = 1 # source:False
struct_tagEMRSETTEXTCOLOR._fields_ = [
    ('emr', EMR),
    ('crColor', ctypes.c_uint32),
]

EMRSETBKCOLOR = struct_tagEMRSETTEXTCOLOR
PEMRSETBKCOLOR = ctypes.POINTER(struct_tagEMRSETTEXTCOLOR)
EMRSETTEXTCOLOR = struct_tagEMRSETTEXTCOLOR
PEMRSETTEXTCOLOR = ctypes.POINTER(struct_tagEMRSETTEXTCOLOR)
class struct_tagEMRSELECTOBJECT(Structure):
    pass

struct_tagEMRSELECTOBJECT._pack_ = 1 # source:False
struct_tagEMRSELECTOBJECT._fields_ = [
    ('emr', EMR),
    ('ihObject', ctypes.c_uint32),
]

EMRSELECTOBJECT = struct_tagEMRSELECTOBJECT
PEMRSELECTOBJECT = ctypes.POINTER(struct_tagEMRSELECTOBJECT)
EMRDELETEOBJECT = struct_tagEMRSELECTOBJECT
PEMRDELETEOBJECT = ctypes.POINTER(struct_tagEMRSELECTOBJECT)
class struct_tagEMRSELECTPALETTE(Structure):
    pass

struct_tagEMRSELECTPALETTE._pack_ = 1 # source:False
struct_tagEMRSELECTPALETTE._fields_ = [
    ('emr', EMR),
    ('ihPal', ctypes.c_uint32),
]

EMRSELECTPALETTE = struct_tagEMRSELECTPALETTE
PEMRSELECTPALETTE = ctypes.POINTER(struct_tagEMRSELECTPALETTE)
class struct_tagEMRRESIZEPALETTE(Structure):
    pass

struct_tagEMRRESIZEPALETTE._pack_ = 1 # source:False
struct_tagEMRRESIZEPALETTE._fields_ = [
    ('emr', EMR),
    ('ihPal', ctypes.c_uint32),
    ('cEntries', ctypes.c_uint32),
]

EMRRESIZEPALETTE = struct_tagEMRRESIZEPALETTE
PEMRRESIZEPALETTE = ctypes.POINTER(struct_tagEMRRESIZEPALETTE)
class struct_tagEMRSETPALETTEENTRIES(Structure):
    pass

struct_tagEMRSETPALETTEENTRIES._pack_ = 1 # source:False
struct_tagEMRSETPALETTEENTRIES._fields_ = [
    ('emr', EMR),
    ('ihPal', ctypes.c_uint32),
    ('iStart', ctypes.c_uint32),
    ('cEntries', ctypes.c_uint32),
    ('aPalEntries', struct_tagPALETTEENTRY * 1),
]

EMRSETPALETTEENTRIES = struct_tagEMRSETPALETTEENTRIES
PEMRSETPALETTEENTRIES = ctypes.POINTER(struct_tagEMRSETPALETTEENTRIES)
class struct_tagEMRSETCOLORADJUSTMENT(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('emr', EMR),
    ('ColorAdjustment', COLORADJUSTMENT),
     ]

EMRSETCOLORADJUSTMENT = struct_tagEMRSETCOLORADJUSTMENT
PEMRSETCOLORADJUSTMENT = ctypes.POINTER(struct_tagEMRSETCOLORADJUSTMENT)
class struct_tagEMRGDICOMMENT(Structure):
    pass

struct_tagEMRGDICOMMENT._pack_ = 1 # source:False
struct_tagEMRGDICOMMENT._fields_ = [
    ('emr', EMR),
    ('cbData', ctypes.c_uint32),
    ('Data', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMRGDICOMMENT = struct_tagEMRGDICOMMENT
PEMRGDICOMMENT = ctypes.POINTER(struct_tagEMRGDICOMMENT)
class struct_tagEMREOF(Structure):
    pass

struct_tagEMREOF._pack_ = 1 # source:False
struct_tagEMREOF._fields_ = [
    ('emr', EMR),
    ('nPalEntries', ctypes.c_uint32),
    ('offPalEntries', ctypes.c_uint32),
    ('nSizeLast', ctypes.c_uint32),
]

EMREOF = struct_tagEMREOF
PEMREOF = ctypes.POINTER(struct_tagEMREOF)
class struct_tagEMRLINETO(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('emr', EMR),
    ('ptl', POINTL),
     ]

EMRLINETO = struct_tagEMRLINETO
PEMRLINETO = ctypes.POINTER(struct_tagEMRLINETO)
EMRMOVETOEX = struct_tagEMRLINETO
PEMRMOVETOEX = ctypes.POINTER(struct_tagEMRLINETO)
class struct_tagEMROFFSETCLIPRGN(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('emr', EMR),
    ('ptlOffset', POINTL),
     ]

EMROFFSETCLIPRGN = struct_tagEMROFFSETCLIPRGN
PEMROFFSETCLIPRGN = ctypes.POINTER(struct_tagEMROFFSETCLIPRGN)
class struct_tagEMRFILLPATH(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
     ]

EMRFILLPATH = struct_tagEMRFILLPATH
PEMRFILLPATH = ctypes.POINTER(struct_tagEMRFILLPATH)
EMRSTROKEANDFILLPATH = struct_tagEMRFILLPATH
PEMRSTROKEANDFILLPATH = ctypes.POINTER(struct_tagEMRFILLPATH)
EMRSTROKEPATH = struct_tagEMRFILLPATH
PEMRSTROKEPATH = ctypes.POINTER(struct_tagEMRFILLPATH)
class struct_tagEMREXCLUDECLIPRECT(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('emr', EMR),
    ('rclClip', RECTL),
     ]

EMREXCLUDECLIPRECT = struct_tagEMREXCLUDECLIPRECT
PEMREXCLUDECLIPRECT = ctypes.POINTER(struct_tagEMREXCLUDECLIPRECT)
EMRINTERSECTCLIPRECT = struct_tagEMREXCLUDECLIPRECT
PEMRINTERSECTCLIPRECT = ctypes.POINTER(struct_tagEMREXCLUDECLIPRECT)
class struct_tagEMRSETVIEWPORTORGEX(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('emr', EMR),
    ('ptlOrigin', POINTL),
     ]

EMRSETVIEWPORTORGEX = struct_tagEMRSETVIEWPORTORGEX
PEMRSETVIEWPORTORGEX = ctypes.POINTER(struct_tagEMRSETVIEWPORTORGEX)
EMRSETWINDOWORGEX = struct_tagEMRSETVIEWPORTORGEX
PEMRSETWINDOWORGEX = ctypes.POINTER(struct_tagEMRSETVIEWPORTORGEX)
EMRSETBRUSHORGEX = struct_tagEMRSETVIEWPORTORGEX
PEMRSETBRUSHORGEX = ctypes.POINTER(struct_tagEMRSETVIEWPORTORGEX)
class struct_tagEMRSETVIEWPORTEXTEX(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('emr', EMR),
    ('szlExtent', SIZEL),
     ]

EMRSETVIEWPORTEXTEX = struct_tagEMRSETVIEWPORTEXTEX
PEMRSETVIEWPORTEXTEX = ctypes.POINTER(struct_tagEMRSETVIEWPORTEXTEX)
EMRSETWINDOWEXTEX = struct_tagEMRSETVIEWPORTEXTEX
PEMRSETWINDOWEXTEX = ctypes.POINTER(struct_tagEMRSETVIEWPORTEXTEX)
class struct_tagEMRSCALEVIEWPORTEXTEX(Structure):
    pass

struct_tagEMRSCALEVIEWPORTEXTEX._pack_ = 1 # source:False
struct_tagEMRSCALEVIEWPORTEXTEX._fields_ = [
    ('emr', EMR),
    ('xNum', ctypes.c_int32),
    ('xDenom', ctypes.c_int32),
    ('yNum', ctypes.c_int32),
    ('yDenom', ctypes.c_int32),
]

EMRSCALEVIEWPORTEXTEX = struct_tagEMRSCALEVIEWPORTEXTEX
PEMRSCALEVIEWPORTEXTEX = ctypes.POINTER(struct_tagEMRSCALEVIEWPORTEXTEX)
EMRSCALEWINDOWEXTEX = struct_tagEMRSCALEVIEWPORTEXTEX
PEMRSCALEWINDOWEXTEX = ctypes.POINTER(struct_tagEMRSCALEVIEWPORTEXTEX)
class struct_tagEMRSETWORLDTRANSFORM(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('emr', EMR),
    ('xform', XFORM),
     ]

EMRSETWORLDTRANSFORM = struct_tagEMRSETWORLDTRANSFORM
PEMRSETWORLDTRANSFORM = ctypes.POINTER(struct_tagEMRSETWORLDTRANSFORM)
class struct_tagEMRMODIFYWORLDTRANSFORM(Structure):
    pass

struct_tagEMRMODIFYWORLDTRANSFORM._pack_ = 1 # source:False
struct_tagEMRMODIFYWORLDTRANSFORM._fields_ = [
    ('emr', EMR),
    ('xform', XFORM),
    ('iMode', ctypes.c_uint32),
]

EMRMODIFYWORLDTRANSFORM = struct_tagEMRMODIFYWORLDTRANSFORM
PEMRMODIFYWORLDTRANSFORM = ctypes.POINTER(struct_tagEMRMODIFYWORLDTRANSFORM)
class struct_tagEMRSETPIXELV(Structure):
    pass

struct_tagEMRSETPIXELV._pack_ = 1 # source:False
struct_tagEMRSETPIXELV._fields_ = [
    ('emr', EMR),
    ('ptlPixel', POINTL),
    ('crColor', ctypes.c_uint32),
]

EMRSETPIXELV = struct_tagEMRSETPIXELV
PEMRSETPIXELV = ctypes.POINTER(struct_tagEMRSETPIXELV)
class struct_tagEMREXTFLOODFILL(Structure):
    pass

struct_tagEMREXTFLOODFILL._pack_ = 1 # source:False
struct_tagEMREXTFLOODFILL._fields_ = [
    ('emr', EMR),
    ('ptlStart', POINTL),
    ('crColor', ctypes.c_uint32),
    ('iMode', ctypes.c_uint32),
]

EMREXTFLOODFILL = struct_tagEMREXTFLOODFILL
PEMREXTFLOODFILL = ctypes.POINTER(struct_tagEMREXTFLOODFILL)
class struct_tagEMRELLIPSE(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('emr', EMR),
    ('rclBox', RECTL),
     ]

EMRELLIPSE = struct_tagEMRELLIPSE
PEMRELLIPSE = ctypes.POINTER(struct_tagEMRELLIPSE)
EMRRECTANGLE = struct_tagEMRELLIPSE
PEMRRECTANGLE = ctypes.POINTER(struct_tagEMRELLIPSE)
class struct_tagEMRROUNDRECT(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('emr', EMR),
    ('rclBox', RECTL),
    ('szlCorner', SIZEL),
     ]

EMRROUNDRECT = struct_tagEMRROUNDRECT
PEMRROUNDRECT = ctypes.POINTER(struct_tagEMRROUNDRECT)
class struct_tagEMRARC(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('emr', EMR),
    ('rclBox', RECTL),
    ('ptlStart', POINTL),
    ('ptlEnd', POINTL),
     ]

EMRARC = struct_tagEMRARC
PEMRARC = ctypes.POINTER(struct_tagEMRARC)
EMRARCTO = struct_tagEMRARC
PEMRARCTO = ctypes.POINTER(struct_tagEMRARC)
EMRCHORD = struct_tagEMRARC
PEMRCHORD = ctypes.POINTER(struct_tagEMRARC)
EMRPIE = struct_tagEMRARC
PEMRPIE = ctypes.POINTER(struct_tagEMRARC)
class struct_tagEMRANGLEARC(Structure):
    pass

struct_tagEMRANGLEARC._pack_ = 1 # source:False
struct_tagEMRANGLEARC._fields_ = [
    ('emr', EMR),
    ('ptlCenter', POINTL),
    ('nRadius', ctypes.c_uint32),
    ('eStartAngle', ctypes.c_float),
    ('eSweepAngle', ctypes.c_float),
]

EMRANGLEARC = struct_tagEMRANGLEARC
PEMRANGLEARC = ctypes.POINTER(struct_tagEMRANGLEARC)
class struct_tagEMRPOLYLINE(Structure):
    pass

struct_tagEMRPOLYLINE._pack_ = 1 # source:False
struct_tagEMRPOLYLINE._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('cptl', ctypes.c_uint32),
    ('aptl', struct__POINTL * 1),
]

EMRPOLYLINE = struct_tagEMRPOLYLINE
PEMRPOLYLINE = ctypes.POINTER(struct_tagEMRPOLYLINE)
EMRPOLYBEZIER = struct_tagEMRPOLYLINE
PEMRPOLYBEZIER = ctypes.POINTER(struct_tagEMRPOLYLINE)
EMRPOLYGON = struct_tagEMRPOLYLINE
PEMRPOLYGON = ctypes.POINTER(struct_tagEMRPOLYLINE)
EMRPOLYBEZIERTO = struct_tagEMRPOLYLINE
PEMRPOLYBEZIERTO = ctypes.POINTER(struct_tagEMRPOLYLINE)
EMRPOLYLINETO = struct_tagEMRPOLYLINE
PEMRPOLYLINETO = ctypes.POINTER(struct_tagEMRPOLYLINE)
class struct_tagEMRPOLYLINE16(Structure):
    pass

struct_tagEMRPOLYLINE16._pack_ = 1 # source:False
struct_tagEMRPOLYLINE16._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('cpts', ctypes.c_uint32),
    ('apts', struct_tagPOINTS * 1),
]

EMRPOLYLINE16 = struct_tagEMRPOLYLINE16
PEMRPOLYLINE16 = ctypes.POINTER(struct_tagEMRPOLYLINE16)
EMRPOLYBEZIER16 = struct_tagEMRPOLYLINE16
PEMRPOLYBEZIER16 = ctypes.POINTER(struct_tagEMRPOLYLINE16)
EMRPOLYGON16 = struct_tagEMRPOLYLINE16
PEMRPOLYGON16 = ctypes.POINTER(struct_tagEMRPOLYLINE16)
EMRPOLYBEZIERTO16 = struct_tagEMRPOLYLINE16
PEMRPOLYBEZIERTO16 = ctypes.POINTER(struct_tagEMRPOLYLINE16)
EMRPOLYLINETO16 = struct_tagEMRPOLYLINE16
PEMRPOLYLINETO16 = ctypes.POINTER(struct_tagEMRPOLYLINE16)
class struct_tagEMRPOLYDRAW(Structure):
    pass

struct_tagEMRPOLYDRAW._pack_ = 1 # source:False
struct_tagEMRPOLYDRAW._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('cptl', ctypes.c_uint32),
    ('aptl', struct__POINTL * 1),
    ('abTypes', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMRPOLYDRAW = struct_tagEMRPOLYDRAW
PEMRPOLYDRAW = ctypes.POINTER(struct_tagEMRPOLYDRAW)
class struct_tagEMRPOLYDRAW16(Structure):
    pass

struct_tagEMRPOLYDRAW16._pack_ = 1 # source:False
struct_tagEMRPOLYDRAW16._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('cpts', ctypes.c_uint32),
    ('apts', struct_tagPOINTS * 1),
    ('abTypes', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMRPOLYDRAW16 = struct_tagEMRPOLYDRAW16
PEMRPOLYDRAW16 = ctypes.POINTER(struct_tagEMRPOLYDRAW16)
class struct_tagEMRPOLYPOLYLINE(Structure):
    pass

struct_tagEMRPOLYPOLYLINE._pack_ = 1 # source:False
struct_tagEMRPOLYPOLYLINE._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('nPolys', ctypes.c_uint32),
    ('cptl', ctypes.c_uint32),
    ('aPolyCounts', ctypes.c_uint32 * 1),
    ('aptl', struct__POINTL * 1),
]

EMRPOLYPOLYLINE = struct_tagEMRPOLYPOLYLINE
PEMRPOLYPOLYLINE = ctypes.POINTER(struct_tagEMRPOLYPOLYLINE)
EMRPOLYPOLYGON = struct_tagEMRPOLYPOLYLINE
PEMRPOLYPOLYGON = ctypes.POINTER(struct_tagEMRPOLYPOLYLINE)
class struct_tagEMRPOLYPOLYLINE16(Structure):
    pass

struct_tagEMRPOLYPOLYLINE16._pack_ = 1 # source:False
struct_tagEMRPOLYPOLYLINE16._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('nPolys', ctypes.c_uint32),
    ('cpts', ctypes.c_uint32),
    ('aPolyCounts', ctypes.c_uint32 * 1),
    ('apts', struct_tagPOINTS * 1),
]

EMRPOLYPOLYLINE16 = struct_tagEMRPOLYPOLYLINE16
PEMRPOLYPOLYLINE16 = ctypes.POINTER(struct_tagEMRPOLYPOLYLINE16)
EMRPOLYPOLYGON16 = struct_tagEMRPOLYPOLYLINE16
PEMRPOLYPOLYGON16 = ctypes.POINTER(struct_tagEMRPOLYPOLYLINE16)
class struct_tagEMRINVERTRGN(Structure):
    pass

struct_tagEMRINVERTRGN._pack_ = 1 # source:False
struct_tagEMRINVERTRGN._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('cbRgnData', ctypes.c_uint32),
    ('RgnData', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMRINVERTRGN = struct_tagEMRINVERTRGN
PEMRINVERTRGN = ctypes.POINTER(struct_tagEMRINVERTRGN)
EMRPAINTRGN = struct_tagEMRINVERTRGN
PEMRPAINTRGN = ctypes.POINTER(struct_tagEMRINVERTRGN)
class struct_tagEMRFILLRGN(Structure):
    pass

struct_tagEMRFILLRGN._pack_ = 1 # source:False
struct_tagEMRFILLRGN._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('cbRgnData', ctypes.c_uint32),
    ('ihBrush', ctypes.c_uint32),
    ('RgnData', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMRFILLRGN = struct_tagEMRFILLRGN
PEMRFILLRGN = ctypes.POINTER(struct_tagEMRFILLRGN)
class struct_tagEMRFRAMERGN(Structure):
    pass

struct_tagEMRFRAMERGN._pack_ = 1 # source:False
struct_tagEMRFRAMERGN._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('cbRgnData', ctypes.c_uint32),
    ('ihBrush', ctypes.c_uint32),
    ('szlStroke', SIZEL),
    ('RgnData', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMRFRAMERGN = struct_tagEMRFRAMERGN
PEMRFRAMERGN = ctypes.POINTER(struct_tagEMRFRAMERGN)
class struct_tagEMREXTSELECTCLIPRGN(Structure):
    pass

struct_tagEMREXTSELECTCLIPRGN._pack_ = 1 # source:False
struct_tagEMREXTSELECTCLIPRGN._fields_ = [
    ('emr', EMR),
    ('cbRgnData', ctypes.c_uint32),
    ('iMode', ctypes.c_uint32),
    ('RgnData', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMREXTSELECTCLIPRGN = struct_tagEMREXTSELECTCLIPRGN
PEMREXTSELECTCLIPRGN = ctypes.POINTER(struct_tagEMREXTSELECTCLIPRGN)
class struct_tagEMREXTTEXTOUTA(Structure):
    pass

struct_tagEMREXTTEXTOUTA._pack_ = 1 # source:False
struct_tagEMREXTTEXTOUTA._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('iGraphicsMode', ctypes.c_uint32),
    ('exScale', ctypes.c_float),
    ('eyScale', ctypes.c_float),
    ('emrtext', EMRTEXT),
]

EMREXTTEXTOUTA = struct_tagEMREXTTEXTOUTA
PEMREXTTEXTOUTA = ctypes.POINTER(struct_tagEMREXTTEXTOUTA)
EMREXTTEXTOUTW = struct_tagEMREXTTEXTOUTA
PEMREXTTEXTOUTW = ctypes.POINTER(struct_tagEMREXTTEXTOUTA)
class struct_tagEMRPOLYTEXTOUTA(Structure):
    pass

struct_tagEMRPOLYTEXTOUTA._pack_ = 1 # source:False
struct_tagEMRPOLYTEXTOUTA._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('iGraphicsMode', ctypes.c_uint32),
    ('exScale', ctypes.c_float),
    ('eyScale', ctypes.c_float),
    ('cStrings', ctypes.c_int32),
    ('aemrtext', struct_tagEMRTEXT * 1),
]

EMRPOLYTEXTOUTA = struct_tagEMRPOLYTEXTOUTA
PEMRPOLYTEXTOUTA = ctypes.POINTER(struct_tagEMRPOLYTEXTOUTA)
EMRPOLYTEXTOUTW = struct_tagEMRPOLYTEXTOUTA
PEMRPOLYTEXTOUTW = ctypes.POINTER(struct_tagEMRPOLYTEXTOUTA)
class struct_tagEMRBITBLT(Structure):
    pass

struct_tagEMRBITBLT._pack_ = 1 # source:False
struct_tagEMRBITBLT._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('xDest', ctypes.c_int32),
    ('yDest', ctypes.c_int32),
    ('cxDest', ctypes.c_int32),
    ('cyDest', ctypes.c_int32),
    ('dwRop', ctypes.c_uint32),
    ('xSrc', ctypes.c_int32),
    ('ySrc', ctypes.c_int32),
    ('xformSrc', XFORM),
    ('crBkColorSrc', ctypes.c_uint32),
    ('iUsageSrc', ctypes.c_uint32),
    ('offBmiSrc', ctypes.c_uint32),
    ('cbBmiSrc', ctypes.c_uint32),
    ('offBitsSrc', ctypes.c_uint32),
    ('cbBitsSrc', ctypes.c_uint32),
]

EMRBITBLT = struct_tagEMRBITBLT
PEMRBITBLT = ctypes.POINTER(struct_tagEMRBITBLT)
class struct_tagEMRSTRETCHBLT(Structure):
    pass

struct_tagEMRSTRETCHBLT._pack_ = 1 # source:False
struct_tagEMRSTRETCHBLT._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('xDest', ctypes.c_int32),
    ('yDest', ctypes.c_int32),
    ('cxDest', ctypes.c_int32),
    ('cyDest', ctypes.c_int32),
    ('dwRop', ctypes.c_uint32),
    ('xSrc', ctypes.c_int32),
    ('ySrc', ctypes.c_int32),
    ('xformSrc', XFORM),
    ('crBkColorSrc', ctypes.c_uint32),
    ('iUsageSrc', ctypes.c_uint32),
    ('offBmiSrc', ctypes.c_uint32),
    ('cbBmiSrc', ctypes.c_uint32),
    ('offBitsSrc', ctypes.c_uint32),
    ('cbBitsSrc', ctypes.c_uint32),
    ('cxSrc', ctypes.c_int32),
    ('cySrc', ctypes.c_int32),
]

EMRSTRETCHBLT = struct_tagEMRSTRETCHBLT
PEMRSTRETCHBLT = ctypes.POINTER(struct_tagEMRSTRETCHBLT)
class struct_tagEMRMASKBLT(Structure):
    pass

struct_tagEMRMASKBLT._pack_ = 1 # source:False
struct_tagEMRMASKBLT._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('xDest', ctypes.c_int32),
    ('yDest', ctypes.c_int32),
    ('cxDest', ctypes.c_int32),
    ('cyDest', ctypes.c_int32),
    ('dwRop', ctypes.c_uint32),
    ('xSrc', ctypes.c_int32),
    ('ySrc', ctypes.c_int32),
    ('xformSrc', XFORM),
    ('crBkColorSrc', ctypes.c_uint32),
    ('iUsageSrc', ctypes.c_uint32),
    ('offBmiSrc', ctypes.c_uint32),
    ('cbBmiSrc', ctypes.c_uint32),
    ('offBitsSrc', ctypes.c_uint32),
    ('cbBitsSrc', ctypes.c_uint32),
    ('xMask', ctypes.c_int32),
    ('yMask', ctypes.c_int32),
    ('iUsageMask', ctypes.c_uint32),
    ('offBmiMask', ctypes.c_uint32),
    ('cbBmiMask', ctypes.c_uint32),
    ('offBitsMask', ctypes.c_uint32),
    ('cbBitsMask', ctypes.c_uint32),
]

EMRMASKBLT = struct_tagEMRMASKBLT
PEMRMASKBLT = ctypes.POINTER(struct_tagEMRMASKBLT)
class struct_tagEMRPLGBLT(Structure):
    pass

struct_tagEMRPLGBLT._pack_ = 1 # source:False
struct_tagEMRPLGBLT._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('aptlDest', struct__POINTL * 3),
    ('xSrc', ctypes.c_int32),
    ('ySrc', ctypes.c_int32),
    ('cxSrc', ctypes.c_int32),
    ('cySrc', ctypes.c_int32),
    ('xformSrc', XFORM),
    ('crBkColorSrc', ctypes.c_uint32),
    ('iUsageSrc', ctypes.c_uint32),
    ('offBmiSrc', ctypes.c_uint32),
    ('cbBmiSrc', ctypes.c_uint32),
    ('offBitsSrc', ctypes.c_uint32),
    ('cbBitsSrc', ctypes.c_uint32),
    ('xMask', ctypes.c_int32),
    ('yMask', ctypes.c_int32),
    ('iUsageMask', ctypes.c_uint32),
    ('offBmiMask', ctypes.c_uint32),
    ('cbBmiMask', ctypes.c_uint32),
    ('offBitsMask', ctypes.c_uint32),
    ('cbBitsMask', ctypes.c_uint32),
]

EMRPLGBLT = struct_tagEMRPLGBLT
PEMRPLGBLT = ctypes.POINTER(struct_tagEMRPLGBLT)
class struct_tagEMRSETDIBITSTODEVICE(Structure):
    pass

struct_tagEMRSETDIBITSTODEVICE._pack_ = 1 # source:False
struct_tagEMRSETDIBITSTODEVICE._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('xDest', ctypes.c_int32),
    ('yDest', ctypes.c_int32),
    ('xSrc', ctypes.c_int32),
    ('ySrc', ctypes.c_int32),
    ('cxSrc', ctypes.c_int32),
    ('cySrc', ctypes.c_int32),
    ('offBmiSrc', ctypes.c_uint32),
    ('cbBmiSrc', ctypes.c_uint32),
    ('offBitsSrc', ctypes.c_uint32),
    ('cbBitsSrc', ctypes.c_uint32),
    ('iUsageSrc', ctypes.c_uint32),
    ('iStartScan', ctypes.c_uint32),
    ('cScans', ctypes.c_uint32),
]

EMRSETDIBITSTODEVICE = struct_tagEMRSETDIBITSTODEVICE
PEMRSETDIBITSTODEVICE = ctypes.POINTER(struct_tagEMRSETDIBITSTODEVICE)
class struct_tagEMRSTRETCHDIBITS(Structure):
    pass

struct_tagEMRSTRETCHDIBITS._pack_ = 1 # source:False
struct_tagEMRSTRETCHDIBITS._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('xDest', ctypes.c_int32),
    ('yDest', ctypes.c_int32),
    ('xSrc', ctypes.c_int32),
    ('ySrc', ctypes.c_int32),
    ('cxSrc', ctypes.c_int32),
    ('cySrc', ctypes.c_int32),
    ('offBmiSrc', ctypes.c_uint32),
    ('cbBmiSrc', ctypes.c_uint32),
    ('offBitsSrc', ctypes.c_uint32),
    ('cbBitsSrc', ctypes.c_uint32),
    ('iUsageSrc', ctypes.c_uint32),
    ('dwRop', ctypes.c_uint32),
    ('cxDest', ctypes.c_int32),
    ('cyDest', ctypes.c_int32),
]

EMRSTRETCHDIBITS = struct_tagEMRSTRETCHDIBITS
PEMRSTRETCHDIBITS = ctypes.POINTER(struct_tagEMRSTRETCHDIBITS)
class struct_tagEMREXTCREATEFONTINDIRECTW(Structure):
    pass

struct_tagEMREXTCREATEFONTINDIRECTW._pack_ = 1 # source:False
struct_tagEMREXTCREATEFONTINDIRECTW._fields_ = [
    ('emr', EMR),
    ('ihFont', ctypes.c_uint32),
    ('elfw', EXTLOGFONTW),
]

EMREXTCREATEFONTINDIRECTW = struct_tagEMREXTCREATEFONTINDIRECTW
PEMREXTCREATEFONTINDIRECTW = ctypes.POINTER(struct_tagEMREXTCREATEFONTINDIRECTW)
class struct_tagEMRCREATEPALETTE(Structure):
    pass

struct_tagEMRCREATEPALETTE._pack_ = 1 # source:False
struct_tagEMRCREATEPALETTE._fields_ = [
    ('emr', EMR),
    ('ihPal', ctypes.c_uint32),
    ('lgpl', LOGPALETTE),
]

EMRCREATEPALETTE = struct_tagEMRCREATEPALETTE
PEMRCREATEPALETTE = ctypes.POINTER(struct_tagEMRCREATEPALETTE)
class struct_tagEMRCREATEPEN(Structure):
    pass

struct_tagEMRCREATEPEN._pack_ = 1 # source:False
struct_tagEMRCREATEPEN._fields_ = [
    ('emr', EMR),
    ('ihPen', ctypes.c_uint32),
    ('lopn', LOGPEN),
]

EMRCREATEPEN = struct_tagEMRCREATEPEN
PEMRCREATEPEN = ctypes.POINTER(struct_tagEMRCREATEPEN)
class struct_tagEMREXTCREATEPEN(Structure):
    pass

struct_tagEMREXTCREATEPEN._pack_ = 1 # source:False
struct_tagEMREXTCREATEPEN._fields_ = [
    ('emr', EMR),
    ('ihPen', ctypes.c_uint32),
    ('offBmi', ctypes.c_uint32),
    ('cbBmi', ctypes.c_uint32),
    ('offBits', ctypes.c_uint32),
    ('cbBits', ctypes.c_uint32),
    ('elp', EXTLOGPEN32),
]

EMREXTCREATEPEN = struct_tagEMREXTCREATEPEN
PEMREXTCREATEPEN = ctypes.POINTER(struct_tagEMREXTCREATEPEN)
class struct_tagEMRCREATEBRUSHINDIRECT(Structure):
    pass

struct_tagEMRCREATEBRUSHINDIRECT._pack_ = 1 # source:False
struct_tagEMRCREATEBRUSHINDIRECT._fields_ = [
    ('emr', EMR),
    ('ihBrush', ctypes.c_uint32),
    ('lb', LOGBRUSH32),
]

EMRCREATEBRUSHINDIRECT = struct_tagEMRCREATEBRUSHINDIRECT
PEMRCREATEBRUSHINDIRECT = ctypes.POINTER(struct_tagEMRCREATEBRUSHINDIRECT)
class struct_tagEMRCREATEMONOBRUSH(Structure):
    pass

struct_tagEMRCREATEMONOBRUSH._pack_ = 1 # source:False
struct_tagEMRCREATEMONOBRUSH._fields_ = [
    ('emr', EMR),
    ('ihBrush', ctypes.c_uint32),
    ('iUsage', ctypes.c_uint32),
    ('offBmi', ctypes.c_uint32),
    ('cbBmi', ctypes.c_uint32),
    ('offBits', ctypes.c_uint32),
    ('cbBits', ctypes.c_uint32),
]

EMRCREATEMONOBRUSH = struct_tagEMRCREATEMONOBRUSH
PEMRCREATEMONOBRUSH = ctypes.POINTER(struct_tagEMRCREATEMONOBRUSH)
class struct_tagEMRCREATEDIBPATTERNBRUSHPT(Structure):
    pass

struct_tagEMRCREATEDIBPATTERNBRUSHPT._pack_ = 1 # source:False
struct_tagEMRCREATEDIBPATTERNBRUSHPT._fields_ = [
    ('emr', EMR),
    ('ihBrush', ctypes.c_uint32),
    ('iUsage', ctypes.c_uint32),
    ('offBmi', ctypes.c_uint32),
    ('cbBmi', ctypes.c_uint32),
    ('offBits', ctypes.c_uint32),
    ('cbBits', ctypes.c_uint32),
]

EMRCREATEDIBPATTERNBRUSHPT = struct_tagEMRCREATEDIBPATTERNBRUSHPT
PEMRCREATEDIBPATTERNBRUSHPT = ctypes.POINTER(struct_tagEMRCREATEDIBPATTERNBRUSHPT)
class struct_tagEMRFORMAT(Structure):
    pass

struct_tagEMRFORMAT._pack_ = 1 # source:False
struct_tagEMRFORMAT._fields_ = [
    ('dSignature', ctypes.c_uint32),
    ('nVersion', ctypes.c_uint32),
    ('cbData', ctypes.c_uint32),
    ('offData', ctypes.c_uint32),
]

EMRFORMAT = struct_tagEMRFORMAT
PEMRFORMAT = ctypes.POINTER(struct_tagEMRFORMAT)
class struct_tagEMRGLSRECORD(Structure):
    pass

struct_tagEMRGLSRECORD._pack_ = 1 # source:False
struct_tagEMRGLSRECORD._fields_ = [
    ('emr', EMR),
    ('cbData', ctypes.c_uint32),
    ('Data', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMRGLSRECORD = struct_tagEMRGLSRECORD
PEMRGLSRECORD = ctypes.POINTER(struct_tagEMRGLSRECORD)
class struct_tagEMRGLSBOUNDEDRECORD(Structure):
    pass

struct_tagEMRGLSBOUNDEDRECORD._pack_ = 1 # source:False
struct_tagEMRGLSBOUNDEDRECORD._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('cbData', ctypes.c_uint32),
    ('Data', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMRGLSBOUNDEDRECORD = struct_tagEMRGLSBOUNDEDRECORD
PEMRGLSBOUNDEDRECORD = ctypes.POINTER(struct_tagEMRGLSBOUNDEDRECORD)
class struct_tagEMRPIXELFORMAT(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('emr', EMR),
    ('pfd', PIXELFORMATDESCRIPTOR),
     ]

EMRPIXELFORMAT = struct_tagEMRPIXELFORMAT
PEMRPIXELFORMAT = ctypes.POINTER(struct_tagEMRPIXELFORMAT)
class struct_tagEMRCREATECOLORSPACE(Structure):
    pass

struct_tagEMRCREATECOLORSPACE._pack_ = 1 # source:False
struct_tagEMRCREATECOLORSPACE._fields_ = [
    ('emr', EMR),
    ('ihCS', ctypes.c_uint32),
    ('lcs', LOGCOLORSPACEA),
]

EMRCREATECOLORSPACE = struct_tagEMRCREATECOLORSPACE
PEMRCREATECOLORSPACE = ctypes.POINTER(struct_tagEMRCREATECOLORSPACE)
class struct_tagEMRSETCOLORSPACE(Structure):
    pass

struct_tagEMRSETCOLORSPACE._pack_ = 1 # source:False
struct_tagEMRSETCOLORSPACE._fields_ = [
    ('emr', EMR),
    ('ihCS', ctypes.c_uint32),
]

EMRSETCOLORSPACE = struct_tagEMRSETCOLORSPACE
PEMRSETCOLORSPACE = ctypes.POINTER(struct_tagEMRSETCOLORSPACE)
EMRSELECTCOLORSPACE = struct_tagEMRSETCOLORSPACE
PEMRSELECTCOLORSPACE = ctypes.POINTER(struct_tagEMRSETCOLORSPACE)
EMRDELETECOLORSPACE = struct_tagEMRSETCOLORSPACE
PEMRDELETECOLORSPACE = ctypes.POINTER(struct_tagEMRSETCOLORSPACE)
class struct_tagEMREXTESCAPE(Structure):
    pass

struct_tagEMREXTESCAPE._pack_ = 1 # source:False
struct_tagEMREXTESCAPE._fields_ = [
    ('emr', EMR),
    ('iEscape', ctypes.c_int32),
    ('cbEscData', ctypes.c_int32),
    ('EscData', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMREXTESCAPE = struct_tagEMREXTESCAPE
PEMREXTESCAPE = ctypes.POINTER(struct_tagEMREXTESCAPE)
EMRDRAWESCAPE = struct_tagEMREXTESCAPE
PEMRDRAWESCAPE = ctypes.POINTER(struct_tagEMREXTESCAPE)
class struct_tagEMRNAMEDESCAPE(Structure):
    pass

struct_tagEMRNAMEDESCAPE._pack_ = 1 # source:False
struct_tagEMRNAMEDESCAPE._fields_ = [
    ('emr', EMR),
    ('iEscape', ctypes.c_int32),
    ('cbDriver', ctypes.c_int32),
    ('cbEscData', ctypes.c_int32),
    ('EscData', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMRNAMEDESCAPE = struct_tagEMRNAMEDESCAPE
PEMRNAMEDESCAPE = ctypes.POINTER(struct_tagEMRNAMEDESCAPE)
class struct_tagEMRSETICMPROFILE(Structure):
    pass

struct_tagEMRSETICMPROFILE._pack_ = 1 # source:False
struct_tagEMRSETICMPROFILE._fields_ = [
    ('emr', EMR),
    ('dwFlags', ctypes.c_uint32),
    ('cbName', ctypes.c_uint32),
    ('cbData', ctypes.c_uint32),
    ('Data', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMRSETICMPROFILE = struct_tagEMRSETICMPROFILE
PEMRSETICMPROFILE = ctypes.POINTER(struct_tagEMRSETICMPROFILE)
EMRSETICMPROFILEA = struct_tagEMRSETICMPROFILE
PEMRSETICMPROFILEA = ctypes.POINTER(struct_tagEMRSETICMPROFILE)
EMRSETICMPROFILEW = struct_tagEMRSETICMPROFILE
PEMRSETICMPROFILEW = ctypes.POINTER(struct_tagEMRSETICMPROFILE)
class struct_tagEMRCREATECOLORSPACEW(Structure):
    pass

struct_tagEMRCREATECOLORSPACEW._pack_ = 1 # source:False
struct_tagEMRCREATECOLORSPACEW._fields_ = [
    ('emr', EMR),
    ('ihCS', ctypes.c_uint32),
    ('lcs', LOGCOLORSPACEW),
    ('dwFlags', ctypes.c_uint32),
    ('cbData', ctypes.c_uint32),
    ('Data', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMRCREATECOLORSPACEW = struct_tagEMRCREATECOLORSPACEW
PEMRCREATECOLORSPACEW = ctypes.POINTER(struct_tagEMRCREATECOLORSPACEW)
class struct_tagCOLORMATCHTOTARGET(Structure):
    pass

struct_tagCOLORMATCHTOTARGET._pack_ = 1 # source:False
struct_tagCOLORMATCHTOTARGET._fields_ = [
    ('emr', EMR),
    ('dwAction', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('cbName', ctypes.c_uint32),
    ('cbData', ctypes.c_uint32),
    ('Data', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

EMRCOLORMATCHTOTARGET = struct_tagCOLORMATCHTOTARGET
PEMRCOLORMATCHTOTARGET = ctypes.POINTER(struct_tagCOLORMATCHTOTARGET)
class struct_tagCOLORCORRECTPALETTE(Structure):
    pass

struct_tagCOLORCORRECTPALETTE._pack_ = 1 # source:False
struct_tagCOLORCORRECTPALETTE._fields_ = [
    ('emr', EMR),
    ('ihPalette', ctypes.c_uint32),
    ('nFirstEntry', ctypes.c_uint32),
    ('nPalEntries', ctypes.c_uint32),
    ('nReserved', ctypes.c_uint32),
]

EMRCOLORCORRECTPALETTE = struct_tagCOLORCORRECTPALETTE
PEMRCOLORCORRECTPALETTE = ctypes.POINTER(struct_tagCOLORCORRECTPALETTE)
class struct_tagEMRALPHABLEND(Structure):
    pass

struct_tagEMRALPHABLEND._pack_ = 1 # source:False
struct_tagEMRALPHABLEND._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('xDest', ctypes.c_int32),
    ('yDest', ctypes.c_int32),
    ('cxDest', ctypes.c_int32),
    ('cyDest', ctypes.c_int32),
    ('dwRop', ctypes.c_uint32),
    ('xSrc', ctypes.c_int32),
    ('ySrc', ctypes.c_int32),
    ('xformSrc', XFORM),
    ('crBkColorSrc', ctypes.c_uint32),
    ('iUsageSrc', ctypes.c_uint32),
    ('offBmiSrc', ctypes.c_uint32),
    ('cbBmiSrc', ctypes.c_uint32),
    ('offBitsSrc', ctypes.c_uint32),
    ('cbBitsSrc', ctypes.c_uint32),
    ('cxSrc', ctypes.c_int32),
    ('cySrc', ctypes.c_int32),
]

EMRALPHABLEND = struct_tagEMRALPHABLEND
PEMRALPHABLEND = ctypes.POINTER(struct_tagEMRALPHABLEND)
class struct_tagEMRGRADIENTFILL(Structure):
    pass

struct_tagEMRGRADIENTFILL._pack_ = 1 # source:False
struct_tagEMRGRADIENTFILL._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('nVer', ctypes.c_uint32),
    ('nTri', ctypes.c_uint32),
    ('ulMode', ctypes.c_uint32),
    ('Ver', struct__TRIVERTEX * 1),
]

EMRGRADIENTFILL = struct_tagEMRGRADIENTFILL
PEMRGRADIENTFILL = ctypes.POINTER(struct_tagEMRGRADIENTFILL)
class struct_tagEMRTRANSPARENTBLT(Structure):
    pass

struct_tagEMRTRANSPARENTBLT._pack_ = 1 # source:False
struct_tagEMRTRANSPARENTBLT._fields_ = [
    ('emr', EMR),
    ('rclBounds', RECTL),
    ('xDest', ctypes.c_int32),
    ('yDest', ctypes.c_int32),
    ('cxDest', ctypes.c_int32),
    ('cyDest', ctypes.c_int32),
    ('dwRop', ctypes.c_uint32),
    ('xSrc', ctypes.c_int32),
    ('ySrc', ctypes.c_int32),
    ('xformSrc', XFORM),
    ('crBkColorSrc', ctypes.c_uint32),
    ('iUsageSrc', ctypes.c_uint32),
    ('offBmiSrc', ctypes.c_uint32),
    ('cbBmiSrc', ctypes.c_uint32),
    ('offBitsSrc', ctypes.c_uint32),
    ('cbBitsSrc', ctypes.c_uint32),
    ('cxSrc', ctypes.c_int32),
    ('cySrc', ctypes.c_int32),
]

EMRTRANSPARENTBLT = struct_tagEMRTRANSPARENTBLT
PEMRTRANSPARENTBLT = ctypes.POINTER(struct_tagEMRTRANSPARENTBLT)
class struct__POINTFLOAT(Structure):
    pass

struct__POINTFLOAT._pack_ = 1 # source:False
struct__POINTFLOAT._fields_ = [
    ('x', ctypes.c_float),
    ('y', ctypes.c_float),
]

POINTFLOAT = struct__POINTFLOAT
PPOINTFLOAT = ctypes.POINTER(struct__POINTFLOAT)
class struct__GLYPHMETRICSFLOAT(Structure):
    pass

struct__GLYPHMETRICSFLOAT._pack_ = 1 # source:False
struct__GLYPHMETRICSFLOAT._fields_ = [
    ('gmfBlackBoxX', ctypes.c_float),
    ('gmfBlackBoxY', ctypes.c_float),
    ('gmfptGlyphOrigin', POINTFLOAT),
    ('gmfCellIncX', ctypes.c_float),
    ('gmfCellIncY', ctypes.c_float),
]

GLYPHMETRICSFLOAT = struct__GLYPHMETRICSFLOAT
PGLYPHMETRICSFLOAT = ctypes.POINTER(struct__GLYPHMETRICSFLOAT)
LPGLYPHMETRICSFLOAT = ctypes.POINTER(struct__GLYPHMETRICSFLOAT)
class struct_tagLAYERPLANEDESCRIPTOR(Structure):
    pass

struct_tagLAYERPLANEDESCRIPTOR._pack_ = 1 # source:False
struct_tagLAYERPLANEDESCRIPTOR._fields_ = [
    ('nSize', ctypes.c_uint16),
    ('nVersion', ctypes.c_uint16),
    ('dwFlags', ctypes.c_uint32),
    ('iPixelType', ctypes.c_ubyte),
    ('cColorBits', ctypes.c_ubyte),
    ('cRedBits', ctypes.c_ubyte),
    ('cRedShift', ctypes.c_ubyte),
    ('cGreenBits', ctypes.c_ubyte),
    ('cGreenShift', ctypes.c_ubyte),
    ('cBlueBits', ctypes.c_ubyte),
    ('cBlueShift', ctypes.c_ubyte),
    ('cAlphaBits', ctypes.c_ubyte),
    ('cAlphaShift', ctypes.c_ubyte),
    ('cAccumBits', ctypes.c_ubyte),
    ('cAccumRedBits', ctypes.c_ubyte),
    ('cAccumGreenBits', ctypes.c_ubyte),
    ('cAccumBlueBits', ctypes.c_ubyte),
    ('cAccumAlphaBits', ctypes.c_ubyte),
    ('cDepthBits', ctypes.c_ubyte),
    ('cStencilBits', ctypes.c_ubyte),
    ('cAuxBuffers', ctypes.c_ubyte),
    ('iLayerPlane', ctypes.c_ubyte),
    ('bReserved', ctypes.c_ubyte),
    ('crTransparent', ctypes.c_uint32),
]

LAYERPLANEDESCRIPTOR = struct_tagLAYERPLANEDESCRIPTOR
PLAYERPLANEDESCRIPTOR = ctypes.POINTER(struct_tagLAYERPLANEDESCRIPTOR)
LPLAYERPLANEDESCRIPTOR = ctypes.POINTER(struct_tagLAYERPLANEDESCRIPTOR)
class struct__WGLSWAP(Structure):
    pass

struct__WGLSWAP._pack_ = 1 # source:False
struct__WGLSWAP._fields_ = [
    ('hdc', ctypes.POINTER(struct_HDC__)),
    ('uiFlags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

WGLSWAP = struct__WGLSWAP
PWGLSWAP = ctypes.POINTER(struct__WGLSWAP)
LPWGLSWAP = ctypes.POINTER(struct__WGLSWAP)
HDWP = ctypes.POINTER(None)
MENUTEMPLATEA = None
MENUTEMPLATEW = None
MENUTEMPLATE = None
LPMENUTEMPLATEA = ctypes.POINTER(None)
LPMENUTEMPLATEW = ctypes.POINTER(None)
LPMENUTEMPLATE = ctypes.POINTER(None)
WNDPROC = ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(struct_HWND__), ctypes.c_uint32, ctypes.c_uint64, ctypes.c_int64)
DLGPROC = ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(struct_HWND__), ctypes.c_uint32, ctypes.c_uint64, ctypes.c_int64)
TIMERPROC = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_HWND__), ctypes.c_uint32, ctypes.c_uint64, ctypes.c_uint32)
GRAYSTRINGPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HDC__), ctypes.c_int64, ctypes.c_int32)
WNDENUMPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HWND__), ctypes.c_int64)
HOOKPROC = ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.c_int32, ctypes.c_uint64, ctypes.c_int64)
SENDASYNCPROC = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_HWND__), ctypes.c_uint32, ctypes.c_uint64, ctypes.c_int64)
PROPENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HWND__), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(None))
PROPENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HWND__), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(None))
PROPENUMPROCEXA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HWND__), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(None), ctypes.c_uint64)
PROPENUMPROCEXW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HWND__), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(None), ctypes.c_uint64)
EDITWORDBREAKPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32, ctypes.c_int32, ctypes.c_int32)
EDITWORDBREAKPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int32, ctypes.c_int32, ctypes.c_int32)
DRAWSTATEPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HDC__), ctypes.c_int64, ctypes.c_uint64, ctypes.c_int32, ctypes.c_int32)
PROPENUMPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HWND__), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(None))
PROPENUMPROCEX = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HWND__), ctypes.POINTER(ctypes.c_char), ctypes.POINTER(None), ctypes.c_uint64)
EDITWORDBREAKPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32, ctypes.c_int32, ctypes.c_int32)
NAMEENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int64)
NAMEENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int64)
WINSTAENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int64)
DESKTOPENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int64)
WINSTAENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int64)
DESKTOPENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int64)
WINSTAENUMPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int64)
DESKTOPENUMPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int64)
class struct_tagCBT_CREATEWNDA(Structure):
    pass

class struct_tagCREATESTRUCTA(Structure):
    pass

struct_tagCBT_CREATEWNDA._pack_ = 1 # source:False
struct_tagCBT_CREATEWNDA._fields_ = [
    ('lpcs', ctypes.POINTER(struct_tagCREATESTRUCTA)),
    ('hwndInsertAfter', ctypes.POINTER(struct_HWND__)),
]

CBT_CREATEWNDA = struct_tagCBT_CREATEWNDA
LPCBT_CREATEWNDA = ctypes.POINTER(struct_tagCBT_CREATEWNDA)
class struct_tagCBT_CREATEWNDW(Structure):
    pass

class struct_tagCREATESTRUCTW(Structure):
    pass

struct_tagCBT_CREATEWNDW._pack_ = 1 # source:False
struct_tagCBT_CREATEWNDW._fields_ = [
    ('lpcs', ctypes.POINTER(struct_tagCREATESTRUCTW)),
    ('hwndInsertAfter', ctypes.POINTER(struct_HWND__)),
]

CBT_CREATEWNDW = struct_tagCBT_CREATEWNDW
LPCBT_CREATEWNDW = ctypes.POINTER(struct_tagCBT_CREATEWNDW)
CBT_CREATEWND = struct_tagCBT_CREATEWNDA
LPCBT_CREATEWND = ctypes.POINTER(struct_tagCBT_CREATEWNDA)
class struct_tagCBTACTIVATESTRUCT(Structure):
    pass

struct_tagCBTACTIVATESTRUCT._pack_ = 1 # source:False
struct_tagCBTACTIVATESTRUCT._fields_ = [
    ('fMouse', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hWndActive', ctypes.POINTER(struct_HWND__)),
]

CBTACTIVATESTRUCT = struct_tagCBTACTIVATESTRUCT
LPCBTACTIVATESTRUCT = ctypes.POINTER(struct_tagCBTACTIVATESTRUCT)
class struct_tagWTSSESSION_NOTIFICATION(Structure):
    pass

struct_tagWTSSESSION_NOTIFICATION._pack_ = 1 # source:False
struct_tagWTSSESSION_NOTIFICATION._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwSessionId', ctypes.c_uint32),
]

WTSSESSION_NOTIFICATION = struct_tagWTSSESSION_NOTIFICATION
PWTSSESSION_NOTIFICATION = ctypes.POINTER(struct_tagWTSSESSION_NOTIFICATION)
class struct_SHELLHOOKINFO(Structure):
    pass

struct_SHELLHOOKINFO._pack_ = 1 # source:False
struct_SHELLHOOKINFO._fields_ = [
    ('hwnd', ctypes.POINTER(struct_HWND__)),
    ('rc', RECT),
]

LPSHELLHOOKINFO = ctypes.POINTER(struct_SHELLHOOKINFO)
class struct_tagEVENTMSG(Structure):
    pass

struct_tagEVENTMSG._pack_ = 1 # source:False
struct_tagEVENTMSG._fields_ = [
    ('message', ctypes.c_uint32),
    ('paramL', ctypes.c_uint32),
    ('paramH', ctypes.c_uint32),
    ('time', ctypes.c_uint32),
    ('hwnd', ctypes.POINTER(struct_HWND__)),
]

EVENTMSG = struct_tagEVENTMSG
PEVENTMSGMSG = ctypes.POINTER(struct_tagEVENTMSG)
NPEVENTMSGMSG = ctypes.POINTER(struct_tagEVENTMSG)
LPEVENTMSGMSG = ctypes.POINTER(struct_tagEVENTMSG)
PEVENTMSG = ctypes.POINTER(struct_tagEVENTMSG)
NPEVENTMSG = ctypes.POINTER(struct_tagEVENTMSG)
LPEVENTMSG = ctypes.POINTER(struct_tagEVENTMSG)
class struct_tagCWPSTRUCT(Structure):
    pass

struct_tagCWPSTRUCT._pack_ = 1 # source:False
struct_tagCWPSTRUCT._fields_ = [
    ('lParam', ctypes.c_int64),
    ('wParam', ctypes.c_uint64),
    ('message', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hwnd', ctypes.POINTER(struct_HWND__)),
]

CWPSTRUCT = struct_tagCWPSTRUCT
PCWPSTRUCT = ctypes.POINTER(struct_tagCWPSTRUCT)
NPCWPSTRUCT = ctypes.POINTER(struct_tagCWPSTRUCT)
LPCWPSTRUCT = ctypes.POINTER(struct_tagCWPSTRUCT)
class struct_tagCWPRETSTRUCT(Structure):
    pass

struct_tagCWPRETSTRUCT._pack_ = 1 # source:False
struct_tagCWPRETSTRUCT._fields_ = [
    ('lResult', ctypes.c_int64),
    ('lParam', ctypes.c_int64),
    ('wParam', ctypes.c_uint64),
    ('message', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hwnd', ctypes.POINTER(struct_HWND__)),
]

CWPRETSTRUCT = struct_tagCWPRETSTRUCT
PCWPRETSTRUCT = ctypes.POINTER(struct_tagCWPRETSTRUCT)
NPCWPRETSTRUCT = ctypes.POINTER(struct_tagCWPRETSTRUCT)
LPCWPRETSTRUCT = ctypes.POINTER(struct_tagCWPRETSTRUCT)
class struct_tagKBDLLHOOKSTRUCT(Structure):
    pass

struct_tagKBDLLHOOKSTRUCT._pack_ = 1 # source:False
struct_tagKBDLLHOOKSTRUCT._fields_ = [
    ('vkCode', ctypes.c_uint32),
    ('scanCode', ctypes.c_uint32),
    ('flags', ctypes.c_uint32),
    ('time', ctypes.c_uint32),
    ('dwExtraInfo', ctypes.c_uint64),
]

KBDLLHOOKSTRUCT = struct_tagKBDLLHOOKSTRUCT
LPKBDLLHOOKSTRUCT = ctypes.POINTER(struct_tagKBDLLHOOKSTRUCT)
PKBDLLHOOKSTRUCT = ctypes.POINTER(struct_tagKBDLLHOOKSTRUCT)
class struct_tagMSLLHOOKSTRUCT(Structure):
    pass

struct_tagMSLLHOOKSTRUCT._pack_ = 1 # source:False
struct_tagMSLLHOOKSTRUCT._fields_ = [
    ('pt', POINT),
    ('mouseData', ctypes.c_uint32),
    ('flags', ctypes.c_uint32),
    ('time', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('dwExtraInfo', ctypes.c_uint64),
]

MSLLHOOKSTRUCT = struct_tagMSLLHOOKSTRUCT
LPMSLLHOOKSTRUCT = ctypes.POINTER(struct_tagMSLLHOOKSTRUCT)
PMSLLHOOKSTRUCT = ctypes.POINTER(struct_tagMSLLHOOKSTRUCT)
class struct_tagDEBUGHOOKINFO(Structure):
    pass

struct_tagDEBUGHOOKINFO._pack_ = 1 # source:False
struct_tagDEBUGHOOKINFO._fields_ = [
    ('idThread', ctypes.c_uint32),
    ('idThreadInstaller', ctypes.c_uint32),
    ('lParam', ctypes.c_int64),
    ('wParam', ctypes.c_uint64),
    ('code', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

DEBUGHOOKINFO = struct_tagDEBUGHOOKINFO
PDEBUGHOOKINFO = ctypes.POINTER(struct_tagDEBUGHOOKINFO)
NPDEBUGHOOKINFO = ctypes.POINTER(struct_tagDEBUGHOOKINFO)
LPDEBUGHOOKINFO = ctypes.POINTER(struct_tagDEBUGHOOKINFO)
class struct_tagMOUSEHOOKSTRUCT(Structure):
    pass

struct_tagMOUSEHOOKSTRUCT._pack_ = 1 # source:False
struct_tagMOUSEHOOKSTRUCT._fields_ = [
    ('pt', POINT),
    ('hwnd', ctypes.POINTER(struct_HWND__)),
    ('wHitTestCode', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('dwExtraInfo', ctypes.c_uint64),
]

MOUSEHOOKSTRUCT = struct_tagMOUSEHOOKSTRUCT
LPMOUSEHOOKSTRUCT = ctypes.POINTER(struct_tagMOUSEHOOKSTRUCT)
PMOUSEHOOKSTRUCT = ctypes.POINTER(struct_tagMOUSEHOOKSTRUCT)
class struct_tagMOUSEHOOKSTRUCTEX(struct_tagMOUSEHOOKSTRUCT):
    pass

struct_tagMOUSEHOOKSTRUCTEX._pack_ = 1 # source:False
struct_tagMOUSEHOOKSTRUCTEX._fields_ = [
    ('mouseData', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

MOUSEHOOKSTRUCTEX = struct_tagMOUSEHOOKSTRUCTEX
LPMOUSEHOOKSTRUCTEX = ctypes.POINTER(struct_tagMOUSEHOOKSTRUCTEX)
PMOUSEHOOKSTRUCTEX = ctypes.POINTER(struct_tagMOUSEHOOKSTRUCTEX)
class struct_tagHARDWAREHOOKSTRUCT(Structure):
    pass

struct_tagHARDWAREHOOKSTRUCT._pack_ = 1 # source:False
struct_tagHARDWAREHOOKSTRUCT._fields_ = [
    ('hwnd', ctypes.POINTER(struct_HWND__)),
    ('message', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('wParam', ctypes.c_uint64),
    ('lParam', ctypes.c_int64),
]

HARDWAREHOOKSTRUCT = struct_tagHARDWAREHOOKSTRUCT
LPHARDWAREHOOKSTRUCT = ctypes.POINTER(struct_tagHARDWAREHOOKSTRUCT)
PHARDWAREHOOKSTRUCT = ctypes.POINTER(struct_tagHARDWAREHOOKSTRUCT)
class struct_tagMOUSEMOVEPOINT(Structure):
    pass

struct_tagMOUSEMOVEPOINT._pack_ = 1 # source:False
struct_tagMOUSEMOVEPOINT._fields_ = [
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('time', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('dwExtraInfo', ctypes.c_uint64),
]

MOUSEMOVEPOINT = struct_tagMOUSEMOVEPOINT
PMOUSEMOVEPOINT = ctypes.POINTER(struct_tagMOUSEMOVEPOINT)
LPMOUSEMOVEPOINT = ctypes.POINTER(struct_tagMOUSEMOVEPOINT)
class struct_tagUSEROBJECTFLAGS(Structure):
    pass

struct_tagUSEROBJECTFLAGS._pack_ = 1 # source:False
struct_tagUSEROBJECTFLAGS._fields_ = [
    ('fInherit', ctypes.c_int32),
    ('fReserved', ctypes.c_int32),
    ('dwFlags', ctypes.c_uint32),
]

USEROBJECTFLAGS = struct_tagUSEROBJECTFLAGS
PUSEROBJECTFLAGS = ctypes.POINTER(struct_tagUSEROBJECTFLAGS)
class struct_tagWNDCLASSEXA(Structure):
    pass

struct_tagWNDCLASSEXA._pack_ = 1 # source:False
struct_tagWNDCLASSEXA._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('style', ctypes.c_uint32),
    ('lpfnWndProc', ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(struct_HWND__), ctypes.c_uint32, ctypes.c_uint64, ctypes.c_int64)),
    ('cbClsExtra', ctypes.c_int32),
    ('cbWndExtra', ctypes.c_int32),
    ('hInstance', ctypes.POINTER(struct_HINSTANCE__)),
    ('hIcon', ctypes.POINTER(struct_HICON__)),
    ('hCursor', ctypes.POINTER(struct_HICON__)),
    ('hbrBackground', ctypes.POINTER(struct_HBRUSH__)),
    ('lpszMenuName', ctypes.POINTER(ctypes.c_char)),
    ('lpszClassName', ctypes.POINTER(ctypes.c_char)),
    ('hIconSm', ctypes.POINTER(struct_HICON__)),
]

WNDCLASSEXA = struct_tagWNDCLASSEXA
PWNDCLASSEXA = ctypes.POINTER(struct_tagWNDCLASSEXA)
NPWNDCLASSEXA = ctypes.POINTER(struct_tagWNDCLASSEXA)
LPWNDCLASSEXA = ctypes.POINTER(struct_tagWNDCLASSEXA)
class struct_tagWNDCLASSEXW(Structure):
    pass

struct_tagWNDCLASSEXW._pack_ = 1 # source:False
struct_tagWNDCLASSEXW._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('style', ctypes.c_uint32),
    ('lpfnWndProc', ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(struct_HWND__), ctypes.c_uint32, ctypes.c_uint64, ctypes.c_int64)),
    ('cbClsExtra', ctypes.c_int32),
    ('cbWndExtra', ctypes.c_int32),
    ('hInstance', ctypes.POINTER(struct_HINSTANCE__)),
    ('hIcon', ctypes.POINTER(struct_HICON__)),
    ('hCursor', ctypes.POINTER(struct_HICON__)),
    ('hbrBackground', ctypes.POINTER(struct_HBRUSH__)),
    ('lpszMenuName', ctypes.POINTER(ctypes.c_int16)),
    ('lpszClassName', ctypes.POINTER(ctypes.c_int16)),
    ('hIconSm', ctypes.POINTER(struct_HICON__)),
]

WNDCLASSEXW = struct_tagWNDCLASSEXW
PWNDCLASSEXW = ctypes.POINTER(struct_tagWNDCLASSEXW)
NPWNDCLASSEXW = ctypes.POINTER(struct_tagWNDCLASSEXW)
LPWNDCLASSEXW = ctypes.POINTER(struct_tagWNDCLASSEXW)
WNDCLASSEX = struct_tagWNDCLASSEXA
PWNDCLASSEX = ctypes.POINTER(struct_tagWNDCLASSEXA)
NPWNDCLASSEX = ctypes.POINTER(struct_tagWNDCLASSEXA)
LPWNDCLASSEX = ctypes.POINTER(struct_tagWNDCLASSEXA)
class struct_tagWNDCLASSA(Structure):
    pass

struct_tagWNDCLASSA._pack_ = 1 # source:False
struct_tagWNDCLASSA._fields_ = [
    ('style', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpfnWndProc', ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(struct_HWND__), ctypes.c_uint32, ctypes.c_uint64, ctypes.c_int64)),
    ('cbClsExtra', ctypes.c_int32),
    ('cbWndExtra', ctypes.c_int32),
    ('hInstance', ctypes.POINTER(struct_HINSTANCE__)),
    ('hIcon', ctypes.POINTER(struct_HICON__)),
    ('hCursor', ctypes.POINTER(struct_HICON__)),
    ('hbrBackground', ctypes.POINTER(struct_HBRUSH__)),
    ('lpszMenuName', ctypes.POINTER(ctypes.c_char)),
    ('lpszClassName', ctypes.POINTER(ctypes.c_char)),
]

WNDCLASSA = struct_tagWNDCLASSA
PWNDCLASSA = ctypes.POINTER(struct_tagWNDCLASSA)
NPWNDCLASSA = ctypes.POINTER(struct_tagWNDCLASSA)
LPWNDCLASSA = ctypes.POINTER(struct_tagWNDCLASSA)
class struct_tagWNDCLASSW(Structure):
    pass

struct_tagWNDCLASSW._pack_ = 1 # source:False
struct_tagWNDCLASSW._fields_ = [
    ('style', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpfnWndProc', ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(struct_HWND__), ctypes.c_uint32, ctypes.c_uint64, ctypes.c_int64)),
    ('cbClsExtra', ctypes.c_int32),
    ('cbWndExtra', ctypes.c_int32),
    ('hInstance', ctypes.POINTER(struct_HINSTANCE__)),
    ('hIcon', ctypes.POINTER(struct_HICON__)),
    ('hCursor', ctypes.POINTER(struct_HICON__)),
    ('hbrBackground', ctypes.POINTER(struct_HBRUSH__)),
    ('lpszMenuName', ctypes.POINTER(ctypes.c_int16)),
    ('lpszClassName', ctypes.POINTER(ctypes.c_int16)),
]

WNDCLASSW = struct_tagWNDCLASSW
PWNDCLASSW = ctypes.POINTER(struct_tagWNDCLASSW)
NPWNDCLASSW = ctypes.POINTER(struct_tagWNDCLASSW)
LPWNDCLASSW = ctypes.POINTER(struct_tagWNDCLASSW)
WNDCLASS = struct_tagWNDCLASSA
PWNDCLASS = ctypes.POINTER(struct_tagWNDCLASSA)
NPWNDCLASS = ctypes.POINTER(struct_tagWNDCLASSA)
LPWNDCLASS = ctypes.POINTER(struct_tagWNDCLASSA)
class struct_tagMSG(Structure):
    pass

struct_tagMSG._pack_ = 1 # source:False
struct_tagMSG._fields_ = [
    ('hwnd', ctypes.POINTER(struct_HWND__)),
    ('message', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('wParam', ctypes.c_uint64),
    ('lParam', ctypes.c_int64),
    ('time', ctypes.c_uint32),
    ('pt', POINT),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

MSG = struct_tagMSG
PMSG = ctypes.POINTER(struct_tagMSG)
NPMSG = ctypes.POINTER(struct_tagMSG)
LPMSG = ctypes.POINTER(struct_tagMSG)
class struct_tagMINMAXINFO(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('ptReserved', POINT),
    ('ptMaxSize', POINT),
    ('ptMaxPosition', POINT),
    ('ptMinTrackSize', POINT),
    ('ptMaxTrackSize', POINT),
     ]

MINMAXINFO = struct_tagMINMAXINFO
PMINMAXINFO = ctypes.POINTER(struct_tagMINMAXINFO)
LPMINMAXINFO = ctypes.POINTER(struct_tagMINMAXINFO)
class struct_tagCOPYDATASTRUCT(Structure):
    pass

struct_tagCOPYDATASTRUCT._pack_ = 1 # source:False
struct_tagCOPYDATASTRUCT._fields_ = [
    ('dwData', ctypes.c_uint64),
    ('cbData', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpData', ctypes.POINTER(None)),
]

COPYDATASTRUCT = struct_tagCOPYDATASTRUCT
PCOPYDATASTRUCT = ctypes.POINTER(struct_tagCOPYDATASTRUCT)
class struct_tagMDINEXTMENU(Structure):
    pass

struct_tagMDINEXTMENU._pack_ = 1 # source:False
struct_tagMDINEXTMENU._fields_ = [
    ('hmenuIn', ctypes.POINTER(struct_HMENU__)),
    ('hmenuNext', ctypes.POINTER(struct_HMENU__)),
    ('hwndNext', ctypes.POINTER(struct_HWND__)),
]

MDINEXTMENU = struct_tagMDINEXTMENU
PMDINEXTMENU = ctypes.POINTER(struct_tagMDINEXTMENU)
LPMDINEXTMENU = ctypes.POINTER(struct_tagMDINEXTMENU)
class struct_POWERBROADCAST_SETTING(Structure):
    pass

struct_POWERBROADCAST_SETTING._pack_ = 1 # source:False
struct_POWERBROADCAST_SETTING._fields_ = [
    ('PowerSetting', GUID),
    ('DataLength', ctypes.c_uint32),
    ('Data', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

PPOWERBROADCAST_SETTING = ctypes.POINTER(struct_POWERBROADCAST_SETTING)
class struct_tagWINDOWPOS(Structure):
    pass

struct_tagWINDOWPOS._pack_ = 1 # source:False
struct_tagWINDOWPOS._fields_ = [
    ('hwnd', ctypes.POINTER(struct_HWND__)),
    ('hwndInsertAfter', ctypes.POINTER(struct_HWND__)),
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('cx', ctypes.c_int32),
    ('cy', ctypes.c_int32),
    ('flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

WINDOWPOS = struct_tagWINDOWPOS
LPWINDOWPOS = ctypes.POINTER(struct_tagWINDOWPOS)
PWINDOWPOS = ctypes.POINTER(struct_tagWINDOWPOS)
class struct_tagNCCALCSIZE_PARAMS(Structure):
    pass

struct_tagNCCALCSIZE_PARAMS._pack_ = 1 # source:False
struct_tagNCCALCSIZE_PARAMS._fields_ = [
    ('rgrc', struct_tagRECT * 3),
    ('lppos', ctypes.POINTER(struct_tagWINDOWPOS)),
]

NCCALCSIZE_PARAMS = struct_tagNCCALCSIZE_PARAMS
LPNCCALCSIZE_PARAMS = ctypes.POINTER(struct_tagNCCALCSIZE_PARAMS)
class struct_tagTRACKMOUSEEVENT(Structure):
    pass

struct_tagTRACKMOUSEEVENT._pack_ = 1 # source:False
struct_tagTRACKMOUSEEVENT._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('hwndTrack', ctypes.POINTER(struct_HWND__)),
    ('dwHoverTime', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

TRACKMOUSEEVENT = struct_tagTRACKMOUSEEVENT
LPTRACKMOUSEEVENT = ctypes.POINTER(struct_tagTRACKMOUSEEVENT)
class struct_tagACCEL(Structure):
    pass

struct_tagACCEL._pack_ = 1 # source:False
struct_tagACCEL._fields_ = [
    ('fVirt', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte),
    ('key', ctypes.c_uint16),
    ('cmd', ctypes.c_uint16),
]

ACCEL = struct_tagACCEL
LPACCEL = ctypes.POINTER(struct_tagACCEL)
class struct_tagPAINTSTRUCT(Structure):
    pass

struct_tagPAINTSTRUCT._pack_ = 1 # source:False
struct_tagPAINTSTRUCT._fields_ = [
    ('hdc', ctypes.POINTER(struct_HDC__)),
    ('fErase', ctypes.c_int32),
    ('rcPaint', RECT),
    ('fRestore', ctypes.c_int32),
    ('fIncUpdate', ctypes.c_int32),
    ('rgbReserved', ctypes.c_ubyte * 32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

PAINTSTRUCT = struct_tagPAINTSTRUCT
PPAINTSTRUCT = ctypes.POINTER(struct_tagPAINTSTRUCT)
NPPAINTSTRUCT = ctypes.POINTER(struct_tagPAINTSTRUCT)
LPPAINTSTRUCT = ctypes.POINTER(struct_tagPAINTSTRUCT)
struct_tagCREATESTRUCTA._pack_ = 1 # source:False
struct_tagCREATESTRUCTA._fields_ = [
    ('lpCreateParams', ctypes.POINTER(None)),
    ('hInstance', ctypes.POINTER(struct_HINSTANCE__)),
    ('hMenu', ctypes.POINTER(struct_HMENU__)),
    ('hwndParent', ctypes.POINTER(struct_HWND__)),
    ('cy', ctypes.c_int32),
    ('cx', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('x', ctypes.c_int32),
    ('style', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpszName', ctypes.POINTER(ctypes.c_char)),
    ('lpszClass', ctypes.POINTER(ctypes.c_char)),
    ('dwExStyle', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

CREATESTRUCTA = struct_tagCREATESTRUCTA
LPCREATESTRUCTA = ctypes.POINTER(struct_tagCREATESTRUCTA)
struct_tagCREATESTRUCTW._pack_ = 1 # source:False
struct_tagCREATESTRUCTW._fields_ = [
    ('lpCreateParams', ctypes.POINTER(None)),
    ('hInstance', ctypes.POINTER(struct_HINSTANCE__)),
    ('hMenu', ctypes.POINTER(struct_HMENU__)),
    ('hwndParent', ctypes.POINTER(struct_HWND__)),
    ('cy', ctypes.c_int32),
    ('cx', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('x', ctypes.c_int32),
    ('style', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpszName', ctypes.POINTER(ctypes.c_int16)),
    ('lpszClass', ctypes.POINTER(ctypes.c_int16)),
    ('dwExStyle', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

CREATESTRUCTW = struct_tagCREATESTRUCTW
LPCREATESTRUCTW = ctypes.POINTER(struct_tagCREATESTRUCTW)
CREATESTRUCT = struct_tagCREATESTRUCTA
LPCREATESTRUCT = ctypes.POINTER(struct_tagCREATESTRUCTA)
class struct_tagWINDOWPLACEMENT(Structure):
    pass

struct_tagWINDOWPLACEMENT._pack_ = 1 # source:False
struct_tagWINDOWPLACEMENT._fields_ = [
    ('length', ctypes.c_uint32),
    ('flags', ctypes.c_uint32),
    ('showCmd', ctypes.c_uint32),
    ('ptMinPosition', POINT),
    ('ptMaxPosition', POINT),
    ('rcNormalPosition', RECT),
]

WINDOWPLACEMENT = struct_tagWINDOWPLACEMENT
PWINDOWPLACEMENT = ctypes.POINTER(struct_tagWINDOWPLACEMENT)
LPWINDOWPLACEMENT = ctypes.POINTER(struct_tagWINDOWPLACEMENT)
class struct_tagNMHDR(Structure):
    pass

struct_tagNMHDR._pack_ = 1 # source:False
struct_tagNMHDR._fields_ = [
    ('hwndFrom', ctypes.POINTER(struct_HWND__)),
    ('idFrom', ctypes.c_uint64),
    ('code', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

NMHDR = struct_tagNMHDR
LPNMHDR = ctypes.POINTER(struct_tagNMHDR)
class struct_tagSTYLESTRUCT(Structure):
    pass

struct_tagSTYLESTRUCT._pack_ = 1 # source:False
struct_tagSTYLESTRUCT._fields_ = [
    ('styleOld', ctypes.c_uint32),
    ('styleNew', ctypes.c_uint32),
]

STYLESTRUCT = struct_tagSTYLESTRUCT
LPSTYLESTRUCT = ctypes.POINTER(struct_tagSTYLESTRUCT)
class struct_tagMEASUREITEMSTRUCT(Structure):
    pass

struct_tagMEASUREITEMSTRUCT._pack_ = 1 # source:False
struct_tagMEASUREITEMSTRUCT._fields_ = [
    ('CtlType', ctypes.c_uint32),
    ('CtlID', ctypes.c_uint32),
    ('itemID', ctypes.c_uint32),
    ('itemWidth', ctypes.c_uint32),
    ('itemHeight', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('itemData', ctypes.c_uint64),
]

MEASUREITEMSTRUCT = struct_tagMEASUREITEMSTRUCT
PMEASUREITEMSTRUCT = ctypes.POINTER(struct_tagMEASUREITEMSTRUCT)
LPMEASUREITEMSTRUCT = ctypes.POINTER(struct_tagMEASUREITEMSTRUCT)
class struct_tagDRAWITEMSTRUCT(Structure):
    pass

struct_tagDRAWITEMSTRUCT._pack_ = 1 # source:False
struct_tagDRAWITEMSTRUCT._fields_ = [
    ('CtlType', ctypes.c_uint32),
    ('CtlID', ctypes.c_uint32),
    ('itemID', ctypes.c_uint32),
    ('itemAction', ctypes.c_uint32),
    ('itemState', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hwndItem', ctypes.POINTER(struct_HWND__)),
    ('hDC', ctypes.POINTER(struct_HDC__)),
    ('rcItem', RECT),
    ('itemData', ctypes.c_uint64),
]

DRAWITEMSTRUCT = struct_tagDRAWITEMSTRUCT
PDRAWITEMSTRUCT = ctypes.POINTER(struct_tagDRAWITEMSTRUCT)
LPDRAWITEMSTRUCT = ctypes.POINTER(struct_tagDRAWITEMSTRUCT)
class struct_tagDELETEITEMSTRUCT(Structure):
    pass

struct_tagDELETEITEMSTRUCT._pack_ = 1 # source:False
struct_tagDELETEITEMSTRUCT._fields_ = [
    ('CtlType', ctypes.c_uint32),
    ('CtlID', ctypes.c_uint32),
    ('itemID', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hwndItem', ctypes.POINTER(struct_HWND__)),
    ('itemData', ctypes.c_uint64),
]

DELETEITEMSTRUCT = struct_tagDELETEITEMSTRUCT
PDELETEITEMSTRUCT = ctypes.POINTER(struct_tagDELETEITEMSTRUCT)
LPDELETEITEMSTRUCT = ctypes.POINTER(struct_tagDELETEITEMSTRUCT)
class struct_tagCOMPAREITEMSTRUCT(Structure):
    pass

struct_tagCOMPAREITEMSTRUCT._pack_ = 1 # source:False
struct_tagCOMPAREITEMSTRUCT._fields_ = [
    ('CtlType', ctypes.c_uint32),
    ('CtlID', ctypes.c_uint32),
    ('hwndItem', ctypes.POINTER(struct_HWND__)),
    ('itemID1', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('itemData1', ctypes.c_uint64),
    ('itemID2', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('itemData2', ctypes.c_uint64),
    ('dwLocaleId', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

COMPAREITEMSTRUCT = struct_tagCOMPAREITEMSTRUCT
PCOMPAREITEMSTRUCT = ctypes.POINTER(struct_tagCOMPAREITEMSTRUCT)
LPCOMPAREITEMSTRUCT = ctypes.POINTER(struct_tagCOMPAREITEMSTRUCT)
class struct_BSMINFO(Structure):
    pass

struct_BSMINFO._pack_ = 1 # source:False
struct_BSMINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hdesk', ctypes.POINTER(struct_HDESK__)),
    ('hwnd', ctypes.POINTER(struct_HWND__)),
    ('luid', LUID),
]

PBSMINFO = ctypes.POINTER(struct_BSMINFO)
HDEVNOTIFY = ctypes.POINTER(None)
PHDEVNOTIFY = ctypes.POINTER(ctypes.POINTER(None))
HPOWERNOTIFY = ctypes.POINTER(None)
PHPOWERNOTIFY = ctypes.POINTER(ctypes.POINTER(None))
PREGISTERCLASSNAMEW = ctypes.CFUNCTYPE(ctypes.c_ubyte, ctypes.POINTER(ctypes.c_int16))
class struct_tagUPDATELAYEREDWINDOWINFO(Structure):
    pass

struct_tagUPDATELAYEREDWINDOWINFO._pack_ = 1 # source:False
struct_tagUPDATELAYEREDWINDOWINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hdcDst', ctypes.POINTER(struct_HDC__)),
    ('pptDst', ctypes.POINTER(struct_tagPOINT)),
    ('psize', ctypes.POINTER(struct_tagSIZE)),
    ('hdcSrc', ctypes.POINTER(struct_HDC__)),
    ('pptSrc', ctypes.POINTER(struct_tagPOINT)),
    ('crKey', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pblend', ctypes.POINTER(struct__BLENDFUNCTION)),
    ('dwFlags', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('prcDirty', ctypes.POINTER(struct_tagRECT)),
]

UPDATELAYEREDWINDOWINFO = struct_tagUPDATELAYEREDWINDOWINFO
PUPDATELAYEREDWINDOWINFO = ctypes.POINTER(struct_tagUPDATELAYEREDWINDOWINFO)
class struct_FLASHWINFO(Structure):
    pass

struct_FLASHWINFO._pack_ = 1 # source:False
struct_FLASHWINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hwnd', ctypes.POINTER(struct_HWND__)),
    ('dwFlags', ctypes.c_uint32),
    ('uCount', ctypes.c_uint32),
    ('dwTimeout', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

PFLASHWINFO = ctypes.POINTER(struct_FLASHWINFO)
class struct_DLGTEMPLATE(Structure):
    pass

struct_DLGTEMPLATE._pack_ = 1 # source:False
struct_DLGTEMPLATE._fields_ = [
    ('style', ctypes.c_uint32),
    ('dwExtendedStyle', ctypes.c_uint32),
    ('cdit', ctypes.c_uint16),
    ('x', ctypes.c_int16),
    ('y', ctypes.c_int16),
    ('cx', ctypes.c_int16),
    ('cy', ctypes.c_int16),
]

LPDLGTEMPLATEA = ctypes.POINTER(struct_DLGTEMPLATE)
LPDLGTEMPLATEW = ctypes.POINTER(struct_DLGTEMPLATE)
LPDLGTEMPLATE = ctypes.POINTER(struct_DLGTEMPLATE)
LPCDLGTEMPLATEA = ctypes.POINTER(struct_DLGTEMPLATE)
LPCDLGTEMPLATEW = ctypes.POINTER(struct_DLGTEMPLATE)
LPCDLGTEMPLATE = ctypes.POINTER(struct_DLGTEMPLATE)
class struct_DLGITEMTEMPLATE(Structure):
    pass

struct_DLGITEMTEMPLATE._pack_ = 1 # source:False
struct_DLGITEMTEMPLATE._fields_ = [
    ('style', ctypes.c_uint32),
    ('dwExtendedStyle', ctypes.c_uint32),
    ('x', ctypes.c_int16),
    ('y', ctypes.c_int16),
    ('cx', ctypes.c_int16),
    ('cy', ctypes.c_int16),
    ('id', ctypes.c_uint16),
]

PDLGITEMTEMPLATEA = ctypes.POINTER(struct_DLGITEMTEMPLATE)
PDLGITEMTEMPLATEW = ctypes.POINTER(struct_DLGITEMTEMPLATE)
PDLGITEMTEMPLATE = ctypes.POINTER(struct_DLGITEMTEMPLATE)
LPDLGITEMTEMPLATEA = ctypes.POINTER(struct_DLGITEMTEMPLATE)
LPDLGITEMTEMPLATEW = ctypes.POINTER(struct_DLGITEMTEMPLATE)
LPDLGITEMTEMPLATE = ctypes.POINTER(struct_DLGITEMTEMPLATE)

# values for enumeration 'DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS'
DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS__enumvalues = {
    0: 'DCDC_DEFAULT',
    1: 'DCDC_DISABLE_FONT_UPDATE',
    2: 'DCDC_DISABLE_RELAYOUT',
}
DCDC_DEFAULT = 0
DCDC_DISABLE_FONT_UPDATE = 1
DCDC_DISABLE_RELAYOUT = 2
DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = ctypes.c_uint32 # enum

# values for enumeration 'DIALOG_DPI_CHANGE_BEHAVIORS'
DIALOG_DPI_CHANGE_BEHAVIORS__enumvalues = {
    0: 'DDC_DEFAULT',
    1: 'DDC_DISABLE_ALL',
    2: 'DDC_DISABLE_RESIZE',
    4: 'DDC_DISABLE_CONTROL_RELAYOUT',
}
DDC_DEFAULT = 0
DDC_DISABLE_ALL = 1
DDC_DISABLE_RESIZE = 2
DDC_DISABLE_CONTROL_RELAYOUT = 4
DIALOG_DPI_CHANGE_BEHAVIORS = ctypes.c_uint32 # enum
class struct_tagMOUSEINPUT(Structure):
    pass

struct_tagMOUSEINPUT._pack_ = 1 # source:False
struct_tagMOUSEINPUT._fields_ = [
    ('dx', ctypes.c_int32),
    ('dy', ctypes.c_int32),
    ('mouseData', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('time', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('dwExtraInfo', ctypes.c_uint64),
]

MOUSEINPUT = struct_tagMOUSEINPUT
PMOUSEINPUT = ctypes.POINTER(struct_tagMOUSEINPUT)
LPMOUSEINPUT = ctypes.POINTER(struct_tagMOUSEINPUT)
class struct_tagKEYBDINPUT(Structure):
    pass

struct_tagKEYBDINPUT._pack_ = 1 # source:False
struct_tagKEYBDINPUT._fields_ = [
    ('wVk', ctypes.c_uint16),
    ('wScan', ctypes.c_uint16),
    ('dwFlags', ctypes.c_uint32),
    ('time', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('dwExtraInfo', ctypes.c_uint64),
]

KEYBDINPUT = struct_tagKEYBDINPUT
PKEYBDINPUT = ctypes.POINTER(struct_tagKEYBDINPUT)
LPKEYBDINPUT = ctypes.POINTER(struct_tagKEYBDINPUT)
class struct_tagHARDWAREINPUT(Structure):
    pass

struct_tagHARDWAREINPUT._pack_ = 1 # source:False
struct_tagHARDWAREINPUT._fields_ = [
    ('uMsg', ctypes.c_uint32),
    ('wParamL', ctypes.c_uint16),
    ('wParamH', ctypes.c_uint16),
]

HARDWAREINPUT = struct_tagHARDWAREINPUT
PHARDWAREINPUT = ctypes.POINTER(struct_tagHARDWAREINPUT)
LPHARDWAREINPUT = ctypes.POINTER(struct_tagHARDWAREINPUT)
class union_tagINPUT___F9B27FB5300028B0D7A4B79CCB2B2C87(Union):
    pass

union_tagINPUT___F9B27FB5300028B0D7A4B79CCB2B2C87._pack_ = 1 # source:False
union_tagINPUT___F9B27FB5300028B0D7A4B79CCB2B2C87._fields_ = [
    ('mi', MOUSEINPUT),
    ('ki', KEYBDINPUT),
    ('hi', HARDWAREINPUT),
    ('PADDING_0', ctypes.c_ubyte * 24),
]

class struct_tagINPUT(Structure):
    pass

class union_tagINPUT_0(Union):
    pass

union_tagINPUT_0._pack_ = 1 # source:False
union_tagINPUT_0._fields_ = [
    ('mi', MOUSEINPUT),
    ('ki', KEYBDINPUT),
    ('hi', HARDWAREINPUT),
    ('PADDING_0', ctypes.c_ubyte * 24),
]

struct_tagINPUT._pack_ = 1 # source:False
struct_tagINPUT._anonymous_ = ('_0',)
struct_tagINPUT._fields_ = [
    ('type', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('_0', union_tagINPUT_0),
]

INPUT = struct_tagINPUT
PINPUT = ctypes.POINTER(struct_tagINPUT)
LPINPUT = ctypes.POINTER(struct_tagINPUT)
class struct_HTOUCHINPUT__(Structure):
    pass

struct_HTOUCHINPUT__._pack_ = 1 # source:False
struct_HTOUCHINPUT__._fields_ = [
    ('unused', ctypes.c_int32),
]

HTOUCHINPUT = ctypes.POINTER(struct_HTOUCHINPUT__)
class struct_tagTOUCHINPUT(Structure):
    pass

struct_tagTOUCHINPUT._pack_ = 1 # source:False
struct_tagTOUCHINPUT._fields_ = [
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('hSource', ctypes.POINTER(None)),
    ('dwID', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('dwMask', ctypes.c_uint32),
    ('dwTime', ctypes.c_uint32),
    ('dwExtraInfo', ctypes.c_uint64),
    ('cxContact', ctypes.c_uint32),
    ('cyContact', ctypes.c_uint32),
]

TOUCHINPUT = struct_tagTOUCHINPUT
PTOUCHINPUT = ctypes.POINTER(struct_tagTOUCHINPUT)
PCTOUCHINPUT = ctypes.POINTER(struct_tagTOUCHINPUT)

# values for enumeration 'tagPOINTER_INPUT_TYPE'
tagPOINTER_INPUT_TYPE__enumvalues = {
    1: 'PT_POINTER',
    2: 'PT_TOUCH',
    3: 'PT_PEN',
    4: 'PT_MOUSE',
    5: 'PT_TOUCHPAD',
}
PT_POINTER = 1
PT_TOUCH = 2
PT_PEN = 3
PT_MOUSE = 4
PT_TOUCHPAD = 5
tagPOINTER_INPUT_TYPE = ctypes.c_uint32 # enum
POINTER_INPUT_TYPE = ctypes.c_uint32
POINTER_FLAGS = ctypes.c_uint32

# values for enumeration 'tagPOINTER_BUTTON_CHANGE_TYPE'
tagPOINTER_BUTTON_CHANGE_TYPE__enumvalues = {
    0: 'POINTER_CHANGE_NONE',
    1: 'POINTER_CHANGE_FIRSTBUTTON_DOWN',
    2: 'POINTER_CHANGE_FIRSTBUTTON_UP',
    3: 'POINTER_CHANGE_SECONDBUTTON_DOWN',
    4: 'POINTER_CHANGE_SECONDBUTTON_UP',
    5: 'POINTER_CHANGE_THIRDBUTTON_DOWN',
    6: 'POINTER_CHANGE_THIRDBUTTON_UP',
    7: 'POINTER_CHANGE_FOURTHBUTTON_DOWN',
    8: 'POINTER_CHANGE_FOURTHBUTTON_UP',
    9: 'POINTER_CHANGE_FIFTHBUTTON_DOWN',
    10: 'POINTER_CHANGE_FIFTHBUTTON_UP',
}
POINTER_CHANGE_NONE = 0
POINTER_CHANGE_FIRSTBUTTON_DOWN = 1
POINTER_CHANGE_FIRSTBUTTON_UP = 2
POINTER_CHANGE_SECONDBUTTON_DOWN = 3
POINTER_CHANGE_SECONDBUTTON_UP = 4
POINTER_CHANGE_THIRDBUTTON_DOWN = 5
POINTER_CHANGE_THIRDBUTTON_UP = 6
POINTER_CHANGE_FOURTHBUTTON_DOWN = 7
POINTER_CHANGE_FOURTHBUTTON_UP = 8
POINTER_CHANGE_FIFTHBUTTON_DOWN = 9
POINTER_CHANGE_FIFTHBUTTON_UP = 10
tagPOINTER_BUTTON_CHANGE_TYPE = ctypes.c_uint32 # enum
POINTER_BUTTON_CHANGE_TYPE = tagPOINTER_BUTTON_CHANGE_TYPE
POINTER_BUTTON_CHANGE_TYPE__enumvalues = tagPOINTER_BUTTON_CHANGE_TYPE__enumvalues
class struct_tagPOINTER_INFO(Structure):
    pass

struct_tagPOINTER_INFO._pack_ = 1 # source:False
struct_tagPOINTER_INFO._fields_ = [
    ('pointerType', ctypes.c_uint32),
    ('pointerId', ctypes.c_uint32),
    ('frameId', ctypes.c_uint32),
    ('pointerFlags', ctypes.c_uint32),
    ('sourceDevice', ctypes.POINTER(None)),
    ('hwndTarget', ctypes.POINTER(struct_HWND__)),
    ('ptPixelLocation', POINT),
    ('ptHimetricLocation', POINT),
    ('ptPixelLocationRaw', POINT),
    ('ptHimetricLocationRaw', POINT),
    ('dwTime', ctypes.c_uint32),
    ('historyCount', ctypes.c_uint32),
    ('InputData', ctypes.c_int32),
    ('dwKeyStates', ctypes.c_uint32),
    ('PerformanceCount', ctypes.c_uint64),
    ('ButtonChangeType', POINTER_BUTTON_CHANGE_TYPE),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

POINTER_INFO = struct_tagPOINTER_INFO
TOUCH_FLAGS = ctypes.c_uint32
TOUCH_MASK = ctypes.c_uint32
class struct_tagPOINTER_TOUCH_INFO(Structure):
    pass

struct_tagPOINTER_TOUCH_INFO._pack_ = 1 # source:False
struct_tagPOINTER_TOUCH_INFO._fields_ = [
    ('pointerInfo', POINTER_INFO),
    ('touchFlags', ctypes.c_uint32),
    ('touchMask', ctypes.c_uint32),
    ('rcContact', RECT),
    ('rcContactRaw', RECT),
    ('orientation', ctypes.c_uint32),
    ('pressure', ctypes.c_uint32),
]

POINTER_TOUCH_INFO = struct_tagPOINTER_TOUCH_INFO
PEN_FLAGS = ctypes.c_uint32
PEN_MASK = ctypes.c_uint32
class struct_tagPOINTER_PEN_INFO(Structure):
    pass

struct_tagPOINTER_PEN_INFO._pack_ = 1 # source:False
struct_tagPOINTER_PEN_INFO._fields_ = [
    ('pointerInfo', POINTER_INFO),
    ('penFlags', ctypes.c_uint32),
    ('penMask', ctypes.c_uint32),
    ('pressure', ctypes.c_uint32),
    ('rotation', ctypes.c_uint32),
    ('tiltX', ctypes.c_int32),
    ('tiltY', ctypes.c_int32),
]

POINTER_PEN_INFO = struct_tagPOINTER_PEN_INFO

# values for enumeration 'POINTER_FEEDBACK_MODE'
POINTER_FEEDBACK_MODE__enumvalues = {
    1: 'POINTER_FEEDBACK_DEFAULT',
    2: 'POINTER_FEEDBACK_INDIRECT',
    3: 'POINTER_FEEDBACK_NONE',
}
POINTER_FEEDBACK_DEFAULT = 1
POINTER_FEEDBACK_INDIRECT = 2
POINTER_FEEDBACK_NONE = 3
POINTER_FEEDBACK_MODE = ctypes.c_uint32 # enum
class struct_tagUSAGE_PROPERTIES(Structure):
    pass

struct_tagUSAGE_PROPERTIES._pack_ = 1 # source:False
struct_tagUSAGE_PROPERTIES._fields_ = [
    ('level', ctypes.c_uint16),
    ('page', ctypes.c_uint16),
    ('usage', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('logicalMinimum', ctypes.c_int32),
    ('logicalMaximum', ctypes.c_int32),
    ('unit', ctypes.c_uint16),
    ('exponent', ctypes.c_uint16),
    ('count', ctypes.c_ubyte),
    ('PADDING_1', ctypes.c_ubyte * 3),
    ('physicalMinimum', ctypes.c_int32),
    ('physicalMaximum', ctypes.c_int32),
]

USAGE_PROPERTIES = struct_tagUSAGE_PROPERTIES
PUSAGE_PROPERTIES = ctypes.POINTER(struct_tagUSAGE_PROPERTIES)
class union_tagPOINTER_TYPE_INFO___71AA05D2A51BF06CF0B3BE8EA1064FB3(Union):
    pass

union_tagPOINTER_TYPE_INFO___71AA05D2A51BF06CF0B3BE8EA1064FB3._pack_ = 1 # source:False
union_tagPOINTER_TYPE_INFO___71AA05D2A51BF06CF0B3BE8EA1064FB3._fields_ = [
    ('touchInfo', POINTER_TOUCH_INFO),
    ('penInfo', POINTER_PEN_INFO),
    ('PADDING_0', ctypes.c_ubyte * 24),
]

class struct_tagPOINTER_TYPE_INFO(Structure):
    pass

class union_tagPOINTER_TYPE_INFO_0(Union):
    pass

union_tagPOINTER_TYPE_INFO_0._pack_ = 1 # source:False
union_tagPOINTER_TYPE_INFO_0._fields_ = [
    ('touchInfo', POINTER_TOUCH_INFO),
    ('penInfo', POINTER_PEN_INFO),
    ('PADDING_0', ctypes.c_ubyte * 24),
]

struct_tagPOINTER_TYPE_INFO._pack_ = 1 # source:False
struct_tagPOINTER_TYPE_INFO._anonymous_ = ('_0',)
struct_tagPOINTER_TYPE_INFO._fields_ = [
    ('type', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('_0', union_tagPOINTER_TYPE_INFO_0),
]

POINTER_TYPE_INFO = struct_tagPOINTER_TYPE_INFO
PPOINTER_TYPE_INFO = ctypes.POINTER(struct_tagPOINTER_TYPE_INFO)
class struct_tagINPUT_INJECTION_VALUE(Structure):
    pass

struct_tagINPUT_INJECTION_VALUE._pack_ = 1 # source:False
struct_tagINPUT_INJECTION_VALUE._fields_ = [
    ('page', ctypes.c_uint16),
    ('usage', ctypes.c_uint16),
    ('value', ctypes.c_int32),
    ('index', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

INPUT_INJECTION_VALUE = struct_tagINPUT_INJECTION_VALUE
PINPUT_INJECTION_VALUE = ctypes.POINTER(struct_tagINPUT_INJECTION_VALUE)
class struct_HSYNTHETICPOINTERDEVICE__(Structure):
    pass

struct_HSYNTHETICPOINTERDEVICE__._pack_ = 1 # source:False
struct_HSYNTHETICPOINTERDEVICE__._fields_ = [
    ('unused', ctypes.c_int32),
]

HSYNTHETICPOINTERDEVICE = ctypes.POINTER(struct_HSYNTHETICPOINTERDEVICE__)
class struct_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION(Structure):
    pass

struct_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION._pack_ = 1 # source:False
struct_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION._fields_ = [
    ('score', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('adjustedPoint', POINT),
]

TOUCH_HIT_TESTING_PROXIMITY_EVALUATION = struct_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION = ctypes.POINTER(struct_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION)
class struct_tagTOUCH_HIT_TESTING_INPUT(Structure):
    pass

struct_tagTOUCH_HIT_TESTING_INPUT._pack_ = 1 # source:False
struct_tagTOUCH_HIT_TESTING_INPUT._fields_ = [
    ('pointerId', ctypes.c_uint32),
    ('point', POINT),
    ('boundingBox', RECT),
    ('nonOccludedBoundingBox', RECT),
    ('orientation', ctypes.c_uint32),
]

TOUCH_HIT_TESTING_INPUT = struct_tagTOUCH_HIT_TESTING_INPUT
PTOUCH_HIT_TESTING_INPUT = ctypes.POINTER(struct_tagTOUCH_HIT_TESTING_INPUT)

# values for enumeration 'tagFEEDBACK_TYPE'
tagFEEDBACK_TYPE__enumvalues = {
    1: 'FEEDBACK_TOUCH_CONTACTVISUALIZATION',
    2: 'FEEDBACK_PEN_BARRELVISUALIZATION',
    3: 'FEEDBACK_PEN_TAP',
    4: 'FEEDBACK_PEN_DOUBLETAP',
    5: 'FEEDBACK_PEN_PRESSANDHOLD',
    6: 'FEEDBACK_PEN_RIGHTTAP',
    7: 'FEEDBACK_TOUCH_TAP',
    8: 'FEEDBACK_TOUCH_DOUBLETAP',
    9: 'FEEDBACK_TOUCH_PRESSANDHOLD',
    10: 'FEEDBACK_TOUCH_RIGHTTAP',
    11: 'FEEDBACK_GESTURE_PRESSANDTAP',
    4294967295: 'FEEDBACK_MAX',
}
FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1
FEEDBACK_PEN_BARRELVISUALIZATION = 2
FEEDBACK_PEN_TAP = 3
FEEDBACK_PEN_DOUBLETAP = 4
FEEDBACK_PEN_PRESSANDHOLD = 5
FEEDBACK_PEN_RIGHTTAP = 6
FEEDBACK_TOUCH_TAP = 7
FEEDBACK_TOUCH_DOUBLETAP = 8
FEEDBACK_TOUCH_PRESSANDHOLD = 9
FEEDBACK_TOUCH_RIGHTTAP = 10
FEEDBACK_GESTURE_PRESSANDTAP = 11
FEEDBACK_MAX = 4294967295
tagFEEDBACK_TYPE = ctypes.c_uint32 # enum
FEEDBACK_TYPE = tagFEEDBACK_TYPE
FEEDBACK_TYPE__enumvalues = tagFEEDBACK_TYPE__enumvalues
class struct__40942CBCB8F0A1CDBC81269929B28324(Structure):
    pass

struct__40942CBCB8F0A1CDBC81269929B28324._pack_ = 1 # source:False
struct__40942CBCB8F0A1CDBC81269929B28324._fields_ = [
    ('_11', ctypes.c_float),
    ('_12', ctypes.c_float),
    ('_13', ctypes.c_float),
    ('_14', ctypes.c_float),
    ('_21', ctypes.c_float),
    ('_22', ctypes.c_float),
    ('_23', ctypes.c_float),
    ('_24', ctypes.c_float),
    ('_31', ctypes.c_float),
    ('_32', ctypes.c_float),
    ('_33', ctypes.c_float),
    ('_34', ctypes.c_float),
    ('_41', ctypes.c_float),
    ('_42', ctypes.c_float),
    ('_43', ctypes.c_float),
    ('_44', ctypes.c_float),
]

class union_tagINPUT_TRANSFORM___BC9DE73C29EDB084DB192818DBB6F25B(Union):
    pass

class struct_tagINPUT_TRANSFORM___BC9DE73C29EDB084DB192818DBB6F25B_0(Structure):
    pass

struct_tagINPUT_TRANSFORM___BC9DE73C29EDB084DB192818DBB6F25B_0._pack_ = 1 # source:False
struct_tagINPUT_TRANSFORM___BC9DE73C29EDB084DB192818DBB6F25B_0._fields_ = [
    ('_11', ctypes.c_float),
    ('_12', ctypes.c_float),
    ('_13', ctypes.c_float),
    ('_14', ctypes.c_float),
    ('_21', ctypes.c_float),
    ('_22', ctypes.c_float),
    ('_23', ctypes.c_float),
    ('_24', ctypes.c_float),
    ('_31', ctypes.c_float),
    ('_32', ctypes.c_float),
    ('_33', ctypes.c_float),
    ('_34', ctypes.c_float),
    ('_41', ctypes.c_float),
    ('_42', ctypes.c_float),
    ('_43', ctypes.c_float),
    ('_44', ctypes.c_float),
]

union_tagINPUT_TRANSFORM___BC9DE73C29EDB084DB192818DBB6F25B._pack_ = 1 # source:False
union_tagINPUT_TRANSFORM___BC9DE73C29EDB084DB192818DBB6F25B._anonymous_ = ('_0',)
union_tagINPUT_TRANSFORM___BC9DE73C29EDB084DB192818DBB6F25B._fields_ = [
    ('_0', struct_tagINPUT_TRANSFORM___BC9DE73C29EDB084DB192818DBB6F25B_0),
    ('m', ctypes.c_float * 4 * 4),
]

class struct_tagINPUT_TRANSFORM(Structure):
    pass

class union_tagINPUT_TRANSFORM_0(Union):
    pass

class struct_tagINPUT_TRANSFORM_0_0(Structure):
    pass

struct_tagINPUT_TRANSFORM_0_0._pack_ = 1 # source:False
struct_tagINPUT_TRANSFORM_0_0._fields_ = [
    ('_11', ctypes.c_float),
    ('_12', ctypes.c_float),
    ('_13', ctypes.c_float),
    ('_14', ctypes.c_float),
    ('_21', ctypes.c_float),
    ('_22', ctypes.c_float),
    ('_23', ctypes.c_float),
    ('_24', ctypes.c_float),
    ('_31', ctypes.c_float),
    ('_32', ctypes.c_float),
    ('_33', ctypes.c_float),
    ('_34', ctypes.c_float),
    ('_41', ctypes.c_float),
    ('_42', ctypes.c_float),
    ('_43', ctypes.c_float),
    ('_44', ctypes.c_float),
]

union_tagINPUT_TRANSFORM_0._pack_ = 1 # source:False
union_tagINPUT_TRANSFORM_0._anonymous_ = ('_0',)
union_tagINPUT_TRANSFORM_0._fields_ = [
    ('_0', struct_tagINPUT_TRANSFORM_0_0),
    ('m', ctypes.c_float * 4 * 4),
]

struct_tagINPUT_TRANSFORM._pack_ = 1 # source:False
struct_tagINPUT_TRANSFORM._anonymous_ = ('_0',)
struct_tagINPUT_TRANSFORM._fields_ = [
    ('_0', union_tagINPUT_TRANSFORM_0),
]

INPUT_TRANSFORM = struct_tagINPUT_TRANSFORM
class struct_tagLASTINPUTINFO(Structure):
    pass

struct_tagLASTINPUTINFO._pack_ = 1 # source:False
struct_tagLASTINPUTINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwTime', ctypes.c_uint32),
]

LASTINPUTINFO = struct_tagLASTINPUTINFO
PLASTINPUTINFO = ctypes.POINTER(struct_tagLASTINPUTINFO)
class struct_tagTPMPARAMS(Structure):
    pass

struct_tagTPMPARAMS._pack_ = 1 # source:False
struct_tagTPMPARAMS._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('rcExclude', RECT),
]

TPMPARAMS = struct_tagTPMPARAMS
LPTPMPARAMS = ctypes.POINTER(struct_tagTPMPARAMS)
class struct_tagMENUINFO(Structure):
    pass

struct_tagMENUINFO._pack_ = 1 # source:False
struct_tagMENUINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('fMask', ctypes.c_uint32),
    ('dwStyle', ctypes.c_uint32),
    ('cyMax', ctypes.c_uint32),
    ('hbrBack', ctypes.POINTER(struct_HBRUSH__)),
    ('dwContextHelpID', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('dwMenuData', ctypes.c_uint64),
]

MENUINFO = struct_tagMENUINFO
LPMENUINFO = ctypes.POINTER(struct_tagMENUINFO)
LPCMENUINFO = ctypes.POINTER(struct_tagMENUINFO)
class struct_tagMENUGETOBJECTINFO(Structure):
    pass

struct_tagMENUGETOBJECTINFO._pack_ = 1 # source:False
struct_tagMENUGETOBJECTINFO._fields_ = [
    ('dwFlags', ctypes.c_uint32),
    ('uPos', ctypes.c_uint32),
    ('hmenu', ctypes.POINTER(struct_HMENU__)),
    ('riid', ctypes.POINTER(None)),
    ('pvObj', ctypes.POINTER(None)),
]

MENUGETOBJECTINFO = struct_tagMENUGETOBJECTINFO
PMENUGETOBJECTINFO = ctypes.POINTER(struct_tagMENUGETOBJECTINFO)
class struct_tagMENUITEMINFOA(Structure):
    pass

struct_tagMENUITEMINFOA._pack_ = 1 # source:False
struct_tagMENUITEMINFOA._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('fMask', ctypes.c_uint32),
    ('fType', ctypes.c_uint32),
    ('fState', ctypes.c_uint32),
    ('wID', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hSubMenu', ctypes.POINTER(struct_HMENU__)),
    ('hbmpChecked', ctypes.POINTER(struct_HBITMAP__)),
    ('hbmpUnchecked', ctypes.POINTER(struct_HBITMAP__)),
    ('dwItemData', ctypes.c_uint64),
    ('dwTypeData', ctypes.POINTER(ctypes.c_char)),
    ('cch', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('hbmpItem', ctypes.POINTER(struct_HBITMAP__)),
]

MENUITEMINFOA = struct_tagMENUITEMINFOA
LPMENUITEMINFOA = ctypes.POINTER(struct_tagMENUITEMINFOA)
class struct_tagMENUITEMINFOW(Structure):
    pass

struct_tagMENUITEMINFOW._pack_ = 1 # source:False
struct_tagMENUITEMINFOW._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('fMask', ctypes.c_uint32),
    ('fType', ctypes.c_uint32),
    ('fState', ctypes.c_uint32),
    ('wID', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hSubMenu', ctypes.POINTER(struct_HMENU__)),
    ('hbmpChecked', ctypes.POINTER(struct_HBITMAP__)),
    ('hbmpUnchecked', ctypes.POINTER(struct_HBITMAP__)),
    ('dwItemData', ctypes.c_uint64),
    ('dwTypeData', ctypes.POINTER(ctypes.c_int16)),
    ('cch', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('hbmpItem', ctypes.POINTER(struct_HBITMAP__)),
]

MENUITEMINFOW = struct_tagMENUITEMINFOW
LPMENUITEMINFOW = ctypes.POINTER(struct_tagMENUITEMINFOW)
MENUITEMINFO = struct_tagMENUITEMINFOA
LPMENUITEMINFO = ctypes.POINTER(struct_tagMENUITEMINFOA)
LPCMENUITEMINFOA = ctypes.POINTER(struct_tagMENUITEMINFOA)
LPCMENUITEMINFOW = ctypes.POINTER(struct_tagMENUITEMINFOW)
LPCMENUITEMINFO = ctypes.POINTER(struct_tagMENUITEMINFOA)
class struct_tagDROPSTRUCT(Structure):
    pass

struct_tagDROPSTRUCT._pack_ = 1 # source:False
struct_tagDROPSTRUCT._fields_ = [
    ('hwndSource', ctypes.POINTER(struct_HWND__)),
    ('hwndSink', ctypes.POINTER(struct_HWND__)),
    ('wFmt', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('dwData', ctypes.c_uint64),
    ('ptDrop', POINT),
    ('dwControlData', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

DROPSTRUCT = struct_tagDROPSTRUCT
PDROPSTRUCT = ctypes.POINTER(struct_tagDROPSTRUCT)
LPDROPSTRUCT = ctypes.POINTER(struct_tagDROPSTRUCT)
class struct_tagDRAWTEXTPARAMS(Structure):
    pass

struct_tagDRAWTEXTPARAMS._pack_ = 1 # source:False
struct_tagDRAWTEXTPARAMS._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('iTabLength', ctypes.c_int32),
    ('iLeftMargin', ctypes.c_int32),
    ('iRightMargin', ctypes.c_int32),
    ('uiLengthDrawn', ctypes.c_uint32),
]

DRAWTEXTPARAMS = struct_tagDRAWTEXTPARAMS
LPDRAWTEXTPARAMS = ctypes.POINTER(struct_tagDRAWTEXTPARAMS)
class struct_tagHELPINFO(Structure):
    pass

struct_tagHELPINFO._pack_ = 1 # source:False
struct_tagHELPINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('iContextType', ctypes.c_int32),
    ('iCtrlId', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hItemHandle', ctypes.POINTER(None)),
    ('dwContextId', ctypes.c_uint64),
    ('MousePos', POINT),
]

HELPINFO = struct_tagHELPINFO
LPHELPINFO = ctypes.POINTER(struct_tagHELPINFO)
MSGBOXCALLBACK = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_tagHELPINFO))
class struct_tagMSGBOXPARAMSA(Structure):
    pass

struct_tagMSGBOXPARAMSA._pack_ = 1 # source:False
struct_tagMSGBOXPARAMSA._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hwndOwner', ctypes.POINTER(struct_HWND__)),
    ('hInstance', ctypes.POINTER(struct_HINSTANCE__)),
    ('lpszText', ctypes.POINTER(ctypes.c_char)),
    ('lpszCaption', ctypes.POINTER(ctypes.c_char)),
    ('dwStyle', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpszIcon', ctypes.POINTER(ctypes.c_char)),
    ('dwContextHelpId', ctypes.c_uint64),
    ('lpfnMsgBoxCallback', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_tagHELPINFO))),
    ('dwLanguageId', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

MSGBOXPARAMSA = struct_tagMSGBOXPARAMSA
PMSGBOXPARAMSA = ctypes.POINTER(struct_tagMSGBOXPARAMSA)
LPMSGBOXPARAMSA = ctypes.POINTER(struct_tagMSGBOXPARAMSA)
class struct_tagMSGBOXPARAMSW(Structure):
    pass

struct_tagMSGBOXPARAMSW._pack_ = 1 # source:False
struct_tagMSGBOXPARAMSW._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hwndOwner', ctypes.POINTER(struct_HWND__)),
    ('hInstance', ctypes.POINTER(struct_HINSTANCE__)),
    ('lpszText', ctypes.POINTER(ctypes.c_int16)),
    ('lpszCaption', ctypes.POINTER(ctypes.c_int16)),
    ('dwStyle', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpszIcon', ctypes.POINTER(ctypes.c_int16)),
    ('dwContextHelpId', ctypes.c_uint64),
    ('lpfnMsgBoxCallback', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_tagHELPINFO))),
    ('dwLanguageId', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

MSGBOXPARAMSW = struct_tagMSGBOXPARAMSW
PMSGBOXPARAMSW = ctypes.POINTER(struct_tagMSGBOXPARAMSW)
LPMSGBOXPARAMSW = ctypes.POINTER(struct_tagMSGBOXPARAMSW)
MSGBOXPARAMS = struct_tagMSGBOXPARAMSA
PMSGBOXPARAMS = ctypes.POINTER(struct_tagMSGBOXPARAMSA)
LPMSGBOXPARAMS = ctypes.POINTER(struct_tagMSGBOXPARAMSA)
class struct_MENUITEMTEMPLATEHEADER(Structure):
    pass

struct_MENUITEMTEMPLATEHEADER._pack_ = 1 # source:False
struct_MENUITEMTEMPLATEHEADER._fields_ = [
    ('versionNumber', ctypes.c_uint16),
    ('offset', ctypes.c_uint16),
]

PMENUITEMTEMPLATEHEADER = ctypes.POINTER(struct_MENUITEMTEMPLATEHEADER)
class struct_MENUITEMTEMPLATE(Structure):
    pass

struct_MENUITEMTEMPLATE._pack_ = 1 # source:False
struct_MENUITEMTEMPLATE._fields_ = [
    ('mtOption', ctypes.c_uint16),
    ('mtID', ctypes.c_uint16),
    ('mtString', ctypes.c_int16 * 1),
]

PMENUITEMTEMPLATE = ctypes.POINTER(struct_MENUITEMTEMPLATE)
class struct__ICONINFO(Structure):
    pass

struct__ICONINFO._pack_ = 1 # source:False
struct__ICONINFO._fields_ = [
    ('fIcon', ctypes.c_int32),
    ('xHotspot', ctypes.c_uint32),
    ('yHotspot', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hbmMask', ctypes.POINTER(struct_HBITMAP__)),
    ('hbmColor', ctypes.POINTER(struct_HBITMAP__)),
]

ICONINFO = struct__ICONINFO
PICONINFO = ctypes.POINTER(struct__ICONINFO)
class struct_tagCURSORSHAPE(Structure):
    pass

struct_tagCURSORSHAPE._pack_ = 1 # source:False
struct_tagCURSORSHAPE._fields_ = [
    ('xHotSpot', ctypes.c_int32),
    ('yHotSpot', ctypes.c_int32),
    ('cx', ctypes.c_int32),
    ('cy', ctypes.c_int32),
    ('cbWidth', ctypes.c_int32),
    ('Planes', ctypes.c_ubyte),
    ('BitsPixel', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

CURSORSHAPE = struct_tagCURSORSHAPE
LPCURSORSHAPE = ctypes.POINTER(struct_tagCURSORSHAPE)
class struct__ICONINFOEXA(Structure):
    pass

struct__ICONINFOEXA._pack_ = 1 # source:False
struct__ICONINFOEXA._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('fIcon', ctypes.c_int32),
    ('xHotspot', ctypes.c_uint32),
    ('yHotspot', ctypes.c_uint32),
    ('hbmMask', ctypes.POINTER(struct_HBITMAP__)),
    ('hbmColor', ctypes.POINTER(struct_HBITMAP__)),
    ('wResID', ctypes.c_uint16),
    ('szModName', ctypes.c_char * 260),
    ('szResName', ctypes.c_char * 260),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

ICONINFOEXA = struct__ICONINFOEXA
PICONINFOEXA = ctypes.POINTER(struct__ICONINFOEXA)
class struct__ICONINFOEXW(Structure):
    pass

struct__ICONINFOEXW._pack_ = 1 # source:False
struct__ICONINFOEXW._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('fIcon', ctypes.c_int32),
    ('xHotspot', ctypes.c_uint32),
    ('yHotspot', ctypes.c_uint32),
    ('hbmMask', ctypes.POINTER(struct_HBITMAP__)),
    ('hbmColor', ctypes.POINTER(struct_HBITMAP__)),
    ('wResID', ctypes.c_uint16),
    ('szModName', ctypes.c_int16 * 260),
    ('szResName', ctypes.c_int16 * 260),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

ICONINFOEXW = struct__ICONINFOEXW
PICONINFOEXW = ctypes.POINTER(struct__ICONINFOEXW)
ICONINFOEX = struct__ICONINFOEXA
PICONINFOEX = ctypes.POINTER(struct__ICONINFOEXA)

# values for enumeration 'EDIT_CONTROL_FEATURE'
EDIT_CONTROL_FEATURE__enumvalues = {
    0: 'EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT',
    1: 'EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS',
}
EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0
EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1
EDIT_CONTROL_FEATURE = ctypes.c_uint32 # enum
class struct_tagSCROLLINFO(Structure):
    pass

struct_tagSCROLLINFO._pack_ = 1 # source:False
struct_tagSCROLLINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('fMask', ctypes.c_uint32),
    ('nMin', ctypes.c_int32),
    ('nMax', ctypes.c_int32),
    ('nPage', ctypes.c_uint32),
    ('nPos', ctypes.c_int32),
    ('nTrackPos', ctypes.c_int32),
]

SCROLLINFO = struct_tagSCROLLINFO
LPSCROLLINFO = ctypes.POINTER(struct_tagSCROLLINFO)
LPCSCROLLINFO = ctypes.POINTER(struct_tagSCROLLINFO)
class struct_tagMDICREATESTRUCTA(Structure):
    pass

struct_tagMDICREATESTRUCTA._pack_ = 1 # source:False
struct_tagMDICREATESTRUCTA._fields_ = [
    ('szClass', ctypes.POINTER(ctypes.c_char)),
    ('szTitle', ctypes.POINTER(ctypes.c_char)),
    ('hOwner', ctypes.POINTER(None)),
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('cx', ctypes.c_int32),
    ('cy', ctypes.c_int32),
    ('style', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lParam', ctypes.c_int64),
]

MDICREATESTRUCTA = struct_tagMDICREATESTRUCTA
LPMDICREATESTRUCTA = ctypes.POINTER(struct_tagMDICREATESTRUCTA)
class struct_tagMDICREATESTRUCTW(Structure):
    pass

struct_tagMDICREATESTRUCTW._pack_ = 1 # source:False
struct_tagMDICREATESTRUCTW._fields_ = [
    ('szClass', ctypes.POINTER(ctypes.c_int16)),
    ('szTitle', ctypes.POINTER(ctypes.c_int16)),
    ('hOwner', ctypes.POINTER(None)),
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('cx', ctypes.c_int32),
    ('cy', ctypes.c_int32),
    ('style', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lParam', ctypes.c_int64),
]

MDICREATESTRUCTW = struct_tagMDICREATESTRUCTW
LPMDICREATESTRUCTW = ctypes.POINTER(struct_tagMDICREATESTRUCTW)
MDICREATESTRUCT = struct_tagMDICREATESTRUCTA
LPMDICREATESTRUCT = ctypes.POINTER(struct_tagMDICREATESTRUCTA)
class struct_tagCLIENTCREATESTRUCT(Structure):
    pass

struct_tagCLIENTCREATESTRUCT._pack_ = 1 # source:False
struct_tagCLIENTCREATESTRUCT._fields_ = [
    ('hWindowMenu', ctypes.POINTER(None)),
    ('idFirstChild', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

CLIENTCREATESTRUCT = struct_tagCLIENTCREATESTRUCT
LPCLIENTCREATESTRUCT = ctypes.POINTER(struct_tagCLIENTCREATESTRUCT)
HELPPOLY = ctypes.c_uint32
class struct_tagMULTIKEYHELPA(Structure):
    pass

struct_tagMULTIKEYHELPA._pack_ = 1 # source:False
struct_tagMULTIKEYHELPA._fields_ = [
    ('mkSize', ctypes.c_uint32),
    ('mkKeylist', ctypes.c_char),
    ('szKeyphrase', ctypes.c_char * 1),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

MULTIKEYHELPA = struct_tagMULTIKEYHELPA
PMULTIKEYHELPA = ctypes.POINTER(struct_tagMULTIKEYHELPA)
LPMULTIKEYHELPA = ctypes.POINTER(struct_tagMULTIKEYHELPA)
class struct_tagMULTIKEYHELPW(Structure):
    pass

struct_tagMULTIKEYHELPW._pack_ = 1 # source:False
struct_tagMULTIKEYHELPW._fields_ = [
    ('mkSize', ctypes.c_uint32),
    ('mkKeylist', ctypes.c_int16),
    ('szKeyphrase', ctypes.c_int16 * 1),
]

MULTIKEYHELPW = struct_tagMULTIKEYHELPW
PMULTIKEYHELPW = ctypes.POINTER(struct_tagMULTIKEYHELPW)
LPMULTIKEYHELPW = ctypes.POINTER(struct_tagMULTIKEYHELPW)
MULTIKEYHELP = struct_tagMULTIKEYHELPA
PMULTIKEYHELP = ctypes.POINTER(struct_tagMULTIKEYHELPA)
LPMULTIKEYHELP = ctypes.POINTER(struct_tagMULTIKEYHELPA)
class struct_tagHELPWININFOA(Structure):
    pass

struct_tagHELPWININFOA._pack_ = 1 # source:False
struct_tagHELPWININFOA._fields_ = [
    ('wStructSize', ctypes.c_int32),
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('dx', ctypes.c_int32),
    ('dy', ctypes.c_int32),
    ('wMax', ctypes.c_int32),
    ('rgchMember', ctypes.c_char * 2),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

HELPWININFOA = struct_tagHELPWININFOA
PHELPWININFOA = ctypes.POINTER(struct_tagHELPWININFOA)
LPHELPWININFOA = ctypes.POINTER(struct_tagHELPWININFOA)
class struct_tagHELPWININFOW(Structure):
    pass

struct_tagHELPWININFOW._pack_ = 1 # source:False
struct_tagHELPWININFOW._fields_ = [
    ('wStructSize', ctypes.c_int32),
    ('x', ctypes.c_int32),
    ('y', ctypes.c_int32),
    ('dx', ctypes.c_int32),
    ('dy', ctypes.c_int32),
    ('wMax', ctypes.c_int32),
    ('rgchMember', ctypes.c_int16 * 2),
]

HELPWININFOW = struct_tagHELPWININFOW
PHELPWININFOW = ctypes.POINTER(struct_tagHELPWININFOW)
LPHELPWININFOW = ctypes.POINTER(struct_tagHELPWININFOW)
HELPWININFO = struct_tagHELPWININFOA
PHELPWININFO = ctypes.POINTER(struct_tagHELPWININFOA)
LPHELPWININFO = ctypes.POINTER(struct_tagHELPWININFOA)
class struct_tagTouchPredictionParameters(Structure):
    pass

struct_tagTouchPredictionParameters._pack_ = 1 # source:False
struct_tagTouchPredictionParameters._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwLatency', ctypes.c_uint32),
    ('dwSampleTime', ctypes.c_uint32),
    ('bUseHWTimeStamp', ctypes.c_uint32),
]

TOUCHPREDICTIONPARAMETERS = struct_tagTouchPredictionParameters
PTOUCHPREDICTIONPARAMETERS = ctypes.POINTER(struct_tagTouchPredictionParameters)

# values for enumeration 'tagHANDEDNESS'
tagHANDEDNESS__enumvalues = {
    0: 'HANDEDNESS_LEFT',
    1: 'HANDEDNESS_RIGHT',
}
HANDEDNESS_LEFT = 0
HANDEDNESS_RIGHT = 1
tagHANDEDNESS = ctypes.c_uint32 # enum
HANDEDNESS = tagHANDEDNESS
HANDEDNESS__enumvalues = tagHANDEDNESS__enumvalues
PHANDEDNESS = ctypes.POINTER(tagHANDEDNESS)
class struct_tagNONCLIENTMETRICSA(Structure):
    pass

struct_tagNONCLIENTMETRICSA._pack_ = 1 # source:False
struct_tagNONCLIENTMETRICSA._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('iBorderWidth', ctypes.c_int32),
    ('iScrollWidth', ctypes.c_int32),
    ('iScrollHeight', ctypes.c_int32),
    ('iCaptionWidth', ctypes.c_int32),
    ('iCaptionHeight', ctypes.c_int32),
    ('lfCaptionFont', LOGFONTA),
    ('iSmCaptionWidth', ctypes.c_int32),
    ('iSmCaptionHeight', ctypes.c_int32),
    ('lfSmCaptionFont', LOGFONTA),
    ('iMenuWidth', ctypes.c_int32),
    ('iMenuHeight', ctypes.c_int32),
    ('lfMenuFont', LOGFONTA),
    ('lfStatusFont', LOGFONTA),
    ('lfMessageFont', LOGFONTA),
    ('iPaddedBorderWidth', ctypes.c_int32),
]

NONCLIENTMETRICSA = struct_tagNONCLIENTMETRICSA
PNONCLIENTMETRICSA = ctypes.POINTER(struct_tagNONCLIENTMETRICSA)
LPNONCLIENTMETRICSA = ctypes.POINTER(struct_tagNONCLIENTMETRICSA)
class struct_tagNONCLIENTMETRICSW(Structure):
    pass

struct_tagNONCLIENTMETRICSW._pack_ = 1 # source:False
struct_tagNONCLIENTMETRICSW._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('iBorderWidth', ctypes.c_int32),
    ('iScrollWidth', ctypes.c_int32),
    ('iScrollHeight', ctypes.c_int32),
    ('iCaptionWidth', ctypes.c_int32),
    ('iCaptionHeight', ctypes.c_int32),
    ('lfCaptionFont', LOGFONTW),
    ('iSmCaptionWidth', ctypes.c_int32),
    ('iSmCaptionHeight', ctypes.c_int32),
    ('lfSmCaptionFont', LOGFONTW),
    ('iMenuWidth', ctypes.c_int32),
    ('iMenuHeight', ctypes.c_int32),
    ('lfMenuFont', LOGFONTW),
    ('lfStatusFont', LOGFONTW),
    ('lfMessageFont', LOGFONTW),
    ('iPaddedBorderWidth', ctypes.c_int32),
]

NONCLIENTMETRICSW = struct_tagNONCLIENTMETRICSW
PNONCLIENTMETRICSW = ctypes.POINTER(struct_tagNONCLIENTMETRICSW)
LPNONCLIENTMETRICSW = ctypes.POINTER(struct_tagNONCLIENTMETRICSW)
NONCLIENTMETRICS = struct_tagNONCLIENTMETRICSA
PNONCLIENTMETRICS = ctypes.POINTER(struct_tagNONCLIENTMETRICSA)
LPNONCLIENTMETRICS = ctypes.POINTER(struct_tagNONCLIENTMETRICSA)
class struct_tagMINIMIZEDMETRICS(Structure):
    pass

struct_tagMINIMIZEDMETRICS._pack_ = 1 # source:False
struct_tagMINIMIZEDMETRICS._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('iWidth', ctypes.c_int32),
    ('iHorzGap', ctypes.c_int32),
    ('iVertGap', ctypes.c_int32),
    ('iArrange', ctypes.c_int32),
]

MINIMIZEDMETRICS = struct_tagMINIMIZEDMETRICS
PMINIMIZEDMETRICS = ctypes.POINTER(struct_tagMINIMIZEDMETRICS)
LPMINIMIZEDMETRICS = ctypes.POINTER(struct_tagMINIMIZEDMETRICS)
class struct_tagICONMETRICSA(Structure):
    pass

struct_tagICONMETRICSA._pack_ = 1 # source:False
struct_tagICONMETRICSA._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('iHorzSpacing', ctypes.c_int32),
    ('iVertSpacing', ctypes.c_int32),
    ('iTitleWrap', ctypes.c_int32),
    ('lfFont', LOGFONTA),
]

ICONMETRICSA = struct_tagICONMETRICSA
PICONMETRICSA = ctypes.POINTER(struct_tagICONMETRICSA)
LPICONMETRICSA = ctypes.POINTER(struct_tagICONMETRICSA)
class struct_tagICONMETRICSW(Structure):
    pass

struct_tagICONMETRICSW._pack_ = 1 # source:False
struct_tagICONMETRICSW._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('iHorzSpacing', ctypes.c_int32),
    ('iVertSpacing', ctypes.c_int32),
    ('iTitleWrap', ctypes.c_int32),
    ('lfFont', LOGFONTW),
]

ICONMETRICSW = struct_tagICONMETRICSW
PICONMETRICSW = ctypes.POINTER(struct_tagICONMETRICSW)
LPICONMETRICSW = ctypes.POINTER(struct_tagICONMETRICSW)
ICONMETRICS = struct_tagICONMETRICSA
PICONMETRICS = ctypes.POINTER(struct_tagICONMETRICSA)
LPICONMETRICS = ctypes.POINTER(struct_tagICONMETRICSA)
class struct_tagANIMATIONINFO(Structure):
    pass

struct_tagANIMATIONINFO._pack_ = 1 # source:False
struct_tagANIMATIONINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('iMinAnimate', ctypes.c_int32),
]

ANIMATIONINFO = struct_tagANIMATIONINFO
LPANIMATIONINFO = ctypes.POINTER(struct_tagANIMATIONINFO)
class struct_tagSERIALKEYSA(Structure):
    pass

struct_tagSERIALKEYSA._pack_ = 1 # source:False
struct_tagSERIALKEYSA._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('lpszActivePort', ctypes.POINTER(ctypes.c_char)),
    ('lpszPort', ctypes.POINTER(ctypes.c_char)),
    ('iBaudRate', ctypes.c_uint32),
    ('iPortState', ctypes.c_uint32),
    ('iActive', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

SERIALKEYSA = struct_tagSERIALKEYSA
LPSERIALKEYSA = ctypes.POINTER(struct_tagSERIALKEYSA)
class struct_tagSERIALKEYSW(Structure):
    pass

struct_tagSERIALKEYSW._pack_ = 1 # source:False
struct_tagSERIALKEYSW._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('lpszActivePort', ctypes.POINTER(ctypes.c_int16)),
    ('lpszPort', ctypes.POINTER(ctypes.c_int16)),
    ('iBaudRate', ctypes.c_uint32),
    ('iPortState', ctypes.c_uint32),
    ('iActive', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

SERIALKEYSW = struct_tagSERIALKEYSW
LPSERIALKEYSW = ctypes.POINTER(struct_tagSERIALKEYSW)
SERIALKEYS = struct_tagSERIALKEYSA
LPSERIALKEYS = ctypes.POINTER(struct_tagSERIALKEYSA)
class struct_tagHIGHCONTRASTA(Structure):
    pass

struct_tagHIGHCONTRASTA._pack_ = 1 # source:False
struct_tagHIGHCONTRASTA._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('lpszDefaultScheme', ctypes.POINTER(ctypes.c_char)),
]

HIGHCONTRASTA = struct_tagHIGHCONTRASTA
LPHIGHCONTRASTA = ctypes.POINTER(struct_tagHIGHCONTRASTA)
class struct_tagHIGHCONTRASTW(Structure):
    pass

struct_tagHIGHCONTRASTW._pack_ = 1 # source:False
struct_tagHIGHCONTRASTW._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('lpszDefaultScheme', ctypes.POINTER(ctypes.c_int16)),
]

HIGHCONTRASTW = struct_tagHIGHCONTRASTW
LPHIGHCONTRASTW = ctypes.POINTER(struct_tagHIGHCONTRASTW)
HIGHCONTRAST = struct_tagHIGHCONTRASTA
LPHIGHCONTRAST = ctypes.POINTER(struct_tagHIGHCONTRASTA)
class struct__VIDEOPARAMETERS(Structure):
    pass

struct__VIDEOPARAMETERS._pack_ = 1 # source:False
struct__VIDEOPARAMETERS._fields_ = [
    ('Guid', GUID),
    ('dwOffset', ctypes.c_uint32),
    ('dwCommand', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('dwMode', ctypes.c_uint32),
    ('dwTVStandard', ctypes.c_uint32),
    ('dwAvailableModes', ctypes.c_uint32),
    ('dwAvailableTVStandard', ctypes.c_uint32),
    ('dwFlickerFilter', ctypes.c_uint32),
    ('dwOverScanX', ctypes.c_uint32),
    ('dwOverScanY', ctypes.c_uint32),
    ('dwMaxUnscaledX', ctypes.c_uint32),
    ('dwMaxUnscaledY', ctypes.c_uint32),
    ('dwPositionX', ctypes.c_uint32),
    ('dwPositionY', ctypes.c_uint32),
    ('dwBrightness', ctypes.c_uint32),
    ('dwContrast', ctypes.c_uint32),
    ('dwCPType', ctypes.c_uint32),
    ('dwCPCommand', ctypes.c_uint32),
    ('dwCPStandard', ctypes.c_uint32),
    ('dwCPKey', ctypes.c_uint32),
    ('bCP_APSTriggerBits', ctypes.c_uint32),
    ('bOEMCopyProtection', ctypes.c_ubyte * 256),
]

VIDEOPARAMETERS = struct__VIDEOPARAMETERS
PVIDEOPARAMETERS = ctypes.POINTER(struct__VIDEOPARAMETERS)
LPVIDEOPARAMETERS = ctypes.POINTER(struct__VIDEOPARAMETERS)
class struct_tagFILTERKEYS(Structure):
    pass

struct_tagFILTERKEYS._pack_ = 1 # source:False
struct_tagFILTERKEYS._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('iWaitMSec', ctypes.c_uint32),
    ('iDelayMSec', ctypes.c_uint32),
    ('iRepeatMSec', ctypes.c_uint32),
    ('iBounceMSec', ctypes.c_uint32),
]

FILTERKEYS = struct_tagFILTERKEYS
LPFILTERKEYS = ctypes.POINTER(struct_tagFILTERKEYS)
class struct_tagSTICKYKEYS(Structure):
    pass

struct_tagSTICKYKEYS._pack_ = 1 # source:False
struct_tagSTICKYKEYS._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
]

STICKYKEYS = struct_tagSTICKYKEYS
LPSTICKYKEYS = ctypes.POINTER(struct_tagSTICKYKEYS)
class struct_tagMOUSEKEYS(Structure):
    pass

struct_tagMOUSEKEYS._pack_ = 1 # source:False
struct_tagMOUSEKEYS._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('iMaxSpeed', ctypes.c_uint32),
    ('iTimeToMaxSpeed', ctypes.c_uint32),
    ('iCtrlSpeed', ctypes.c_uint32),
    ('dwReserved1', ctypes.c_uint32),
    ('dwReserved2', ctypes.c_uint32),
]

MOUSEKEYS = struct_tagMOUSEKEYS
LPMOUSEKEYS = ctypes.POINTER(struct_tagMOUSEKEYS)
class struct_tagACCESSTIMEOUT(Structure):
    pass

struct_tagACCESSTIMEOUT._pack_ = 1 # source:False
struct_tagACCESSTIMEOUT._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('iTimeOutMSec', ctypes.c_uint32),
]

ACCESSTIMEOUT = struct_tagACCESSTIMEOUT
LPACCESSTIMEOUT = ctypes.POINTER(struct_tagACCESSTIMEOUT)
class struct_tagSOUNDSENTRYA(Structure):
    pass

struct_tagSOUNDSENTRYA._pack_ = 1 # source:False
struct_tagSOUNDSENTRYA._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('iFSTextEffect', ctypes.c_uint32),
    ('iFSTextEffectMSec', ctypes.c_uint32),
    ('iFSTextEffectColorBits', ctypes.c_uint32),
    ('iFSGrafEffect', ctypes.c_uint32),
    ('iFSGrafEffectMSec', ctypes.c_uint32),
    ('iFSGrafEffectColor', ctypes.c_uint32),
    ('iWindowsEffect', ctypes.c_uint32),
    ('iWindowsEffectMSec', ctypes.c_uint32),
    ('lpszWindowsEffectDLL', ctypes.POINTER(ctypes.c_char)),
    ('iWindowsEffectOrdinal', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

SOUNDSENTRYA = struct_tagSOUNDSENTRYA
LPSOUNDSENTRYA = ctypes.POINTER(struct_tagSOUNDSENTRYA)
class struct_tagSOUNDSENTRYW(Structure):
    pass

struct_tagSOUNDSENTRYW._pack_ = 1 # source:False
struct_tagSOUNDSENTRYW._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('iFSTextEffect', ctypes.c_uint32),
    ('iFSTextEffectMSec', ctypes.c_uint32),
    ('iFSTextEffectColorBits', ctypes.c_uint32),
    ('iFSGrafEffect', ctypes.c_uint32),
    ('iFSGrafEffectMSec', ctypes.c_uint32),
    ('iFSGrafEffectColor', ctypes.c_uint32),
    ('iWindowsEffect', ctypes.c_uint32),
    ('iWindowsEffectMSec', ctypes.c_uint32),
    ('lpszWindowsEffectDLL', ctypes.POINTER(ctypes.c_int16)),
    ('iWindowsEffectOrdinal', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

SOUNDSENTRYW = struct_tagSOUNDSENTRYW
LPSOUNDSENTRYW = ctypes.POINTER(struct_tagSOUNDSENTRYW)
SOUNDSENTRY = struct_tagSOUNDSENTRYA
LPSOUNDSENTRY = ctypes.POINTER(struct_tagSOUNDSENTRYA)
class struct_tagTOGGLEKEYS(Structure):
    pass

struct_tagTOGGLEKEYS._pack_ = 1 # source:False
struct_tagTOGGLEKEYS._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
]

TOGGLEKEYS = struct_tagTOGGLEKEYS
LPTOGGLEKEYS = ctypes.POINTER(struct_tagTOGGLEKEYS)
class struct_tagAUDIODESCRIPTION(Structure):
    pass

struct_tagAUDIODESCRIPTION._pack_ = 1 # source:False
struct_tagAUDIODESCRIPTION._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('Enabled', ctypes.c_int32),
    ('Locale', ctypes.c_uint32),
]

AUDIODESCRIPTION = struct_tagAUDIODESCRIPTION
LPAUDIODESCRIPTION = ctypes.POINTER(struct_tagAUDIODESCRIPTION)
class struct_tagMONITORINFO(Structure):
    pass

struct_tagMONITORINFO._pack_ = 1 # source:False
struct_tagMONITORINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('rcMonitor', RECT),
    ('rcWork', RECT),
    ('dwFlags', ctypes.c_uint32),
]

MONITORINFO = struct_tagMONITORINFO
LPMONITORINFO = ctypes.POINTER(struct_tagMONITORINFO)
class struct_tagMONITORINFOEXA(struct_tagMONITORINFO):
    pass

struct_tagMONITORINFOEXA._pack_ = 1 # source:False
struct_tagMONITORINFOEXA._fields_ = [
    ('szDevice', ctypes.c_char * 32),
]

MONITORINFOEXA = struct_tagMONITORINFOEXA
LPMONITORINFOEXA = ctypes.POINTER(struct_tagMONITORINFOEXA)
class struct_tagMONITORINFOEXW(struct_tagMONITORINFO):
    pass

struct_tagMONITORINFOEXW._pack_ = 1 # source:False
struct_tagMONITORINFOEXW._fields_ = [
    ('szDevice', ctypes.c_int16 * 32),
]

MONITORINFOEXW = struct_tagMONITORINFOEXW
LPMONITORINFOEXW = ctypes.POINTER(struct_tagMONITORINFOEXW)
MONITORINFOEX = struct_tagMONITORINFOEXA
LPMONITORINFOEX = ctypes.POINTER(struct_tagMONITORINFOEXA)
MONITORENUMPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HMONITOR__), ctypes.POINTER(struct_HDC__), ctypes.POINTER(struct_tagRECT), ctypes.c_int64)
WINEVENTPROC = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_HWINEVENTHOOK__), ctypes.c_uint32, ctypes.POINTER(struct_HWND__), ctypes.c_int32, ctypes.c_int32, ctypes.c_uint32, ctypes.c_uint32)
class struct_tagGUITHREADINFO(Structure):
    pass

struct_tagGUITHREADINFO._pack_ = 1 # source:False
struct_tagGUITHREADINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('flags', ctypes.c_uint32),
    ('hwndActive', ctypes.POINTER(struct_HWND__)),
    ('hwndFocus', ctypes.POINTER(struct_HWND__)),
    ('hwndCapture', ctypes.POINTER(struct_HWND__)),
    ('hwndMenuOwner', ctypes.POINTER(struct_HWND__)),
    ('hwndMoveSize', ctypes.POINTER(struct_HWND__)),
    ('hwndCaret', ctypes.POINTER(struct_HWND__)),
    ('rcCaret', RECT),
]

GUITHREADINFO = struct_tagGUITHREADINFO
PGUITHREADINFO = ctypes.POINTER(struct_tagGUITHREADINFO)
LPGUITHREADINFO = ctypes.POINTER(struct_tagGUITHREADINFO)
class struct_tagCURSORINFO(Structure):
    pass

struct_tagCURSORINFO._pack_ = 1 # source:False
struct_tagCURSORINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('flags', ctypes.c_uint32),
    ('hCursor', ctypes.POINTER(struct_HICON__)),
    ('ptScreenPos', POINT),
]

CURSORINFO = struct_tagCURSORINFO
PCURSORINFO = ctypes.POINTER(struct_tagCURSORINFO)
LPCURSORINFO = ctypes.POINTER(struct_tagCURSORINFO)
class struct_tagWINDOWINFO(Structure):
    pass

struct_tagWINDOWINFO._pack_ = 1 # source:False
struct_tagWINDOWINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('rcWindow', RECT),
    ('rcClient', RECT),
    ('dwStyle', ctypes.c_uint32),
    ('dwExStyle', ctypes.c_uint32),
    ('dwWindowStatus', ctypes.c_uint32),
    ('cxWindowBorders', ctypes.c_uint32),
    ('cyWindowBorders', ctypes.c_uint32),
    ('atomWindowType', ctypes.c_uint16),
    ('wCreatorVersion', ctypes.c_uint16),
]

WINDOWINFO = struct_tagWINDOWINFO
PWINDOWINFO = ctypes.POINTER(struct_tagWINDOWINFO)
LPWINDOWINFO = ctypes.POINTER(struct_tagWINDOWINFO)
class struct_tagTITLEBARINFO(Structure):
    pass

struct_tagTITLEBARINFO._pack_ = 1 # source:False
struct_tagTITLEBARINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('rcTitleBar', RECT),
    ('rgstate', ctypes.c_uint32 * 6),
]

TITLEBARINFO = struct_tagTITLEBARINFO
PTITLEBARINFO = ctypes.POINTER(struct_tagTITLEBARINFO)
LPTITLEBARINFO = ctypes.POINTER(struct_tagTITLEBARINFO)
class struct_tagTITLEBARINFOEX(Structure):
    pass

struct_tagTITLEBARINFOEX._pack_ = 1 # source:False
struct_tagTITLEBARINFOEX._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('rcTitleBar', RECT),
    ('rgstate', ctypes.c_uint32 * 6),
    ('rgrect', struct_tagRECT * 6),
]

TITLEBARINFOEX = struct_tagTITLEBARINFOEX
PTITLEBARINFOEX = ctypes.POINTER(struct_tagTITLEBARINFOEX)
LPTITLEBARINFOEX = ctypes.POINTER(struct_tagTITLEBARINFOEX)
class struct_tagMENUBARINFO(Structure):
    pass

struct_tagMENUBARINFO._pack_ = 1 # source:False
struct_tagMENUBARINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('rcBar', RECT),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hMenu', ctypes.POINTER(struct_HMENU__)),
    ('hwndMenu', ctypes.POINTER(struct_HWND__)),
    ('fBarFocused', ctypes.c_int32, 1),
    ('fFocused', ctypes.c_int32, 1),
    ('fUnused', ctypes.c_int32, 30),
    ('PADDING_1', ctypes.c_uint32, 32),
]

MENUBARINFO = struct_tagMENUBARINFO
PMENUBARINFO = ctypes.POINTER(struct_tagMENUBARINFO)
LPMENUBARINFO = ctypes.POINTER(struct_tagMENUBARINFO)
class struct_tagSCROLLBARINFO(Structure):
    pass

struct_tagSCROLLBARINFO._pack_ = 1 # source:False
struct_tagSCROLLBARINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('rcScrollBar', RECT),
    ('dxyLineButton', ctypes.c_int32),
    ('xyThumbTop', ctypes.c_int32),
    ('xyThumbBottom', ctypes.c_int32),
    ('reserved', ctypes.c_int32),
    ('rgstate', ctypes.c_uint32 * 6),
]

SCROLLBARINFO = struct_tagSCROLLBARINFO
PSCROLLBARINFO = ctypes.POINTER(struct_tagSCROLLBARINFO)
LPSCROLLBARINFO = ctypes.POINTER(struct_tagSCROLLBARINFO)
class struct_tagCOMBOBOXINFO(Structure):
    pass

struct_tagCOMBOBOXINFO._pack_ = 1 # source:False
struct_tagCOMBOBOXINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('rcItem', RECT),
    ('rcButton', RECT),
    ('stateButton', ctypes.c_uint32),
    ('hwndCombo', ctypes.POINTER(struct_HWND__)),
    ('hwndItem', ctypes.POINTER(struct_HWND__)),
    ('hwndList', ctypes.POINTER(struct_HWND__)),
]

COMBOBOXINFO = struct_tagCOMBOBOXINFO
PCOMBOBOXINFO = ctypes.POINTER(struct_tagCOMBOBOXINFO)
LPCOMBOBOXINFO = ctypes.POINTER(struct_tagCOMBOBOXINFO)
class struct_tagALTTABINFO(Structure):
    pass

struct_tagALTTABINFO._pack_ = 1 # source:False
struct_tagALTTABINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('cItems', ctypes.c_int32),
    ('cColumns', ctypes.c_int32),
    ('cRows', ctypes.c_int32),
    ('iColFocus', ctypes.c_int32),
    ('iRowFocus', ctypes.c_int32),
    ('cxItem', ctypes.c_int32),
    ('cyItem', ctypes.c_int32),
    ('ptStart', POINT),
]

ALTTABINFO = struct_tagALTTABINFO
PALTTABINFO = ctypes.POINTER(struct_tagALTTABINFO)
LPALTTABINFO = ctypes.POINTER(struct_tagALTTABINFO)
class struct_HRAWINPUT__(Structure):
    pass

struct_HRAWINPUT__._pack_ = 1 # source:False
struct_HRAWINPUT__._fields_ = [
    ('unused', ctypes.c_int32),
]

HRAWINPUT = ctypes.POINTER(struct_HRAWINPUT__)
class struct_tagRAWINPUTHEADER(Structure):
    pass

struct_tagRAWINPUTHEADER._pack_ = 1 # source:False
struct_tagRAWINPUTHEADER._fields_ = [
    ('dwType', ctypes.c_uint32),
    ('dwSize', ctypes.c_uint32),
    ('hDevice', ctypes.POINTER(None)),
    ('wParam', ctypes.c_uint64),
]

RAWINPUTHEADER = struct_tagRAWINPUTHEADER
PRAWINPUTHEADER = ctypes.POINTER(struct_tagRAWINPUTHEADER)
LPRAWINPUTHEADER = ctypes.POINTER(struct_tagRAWINPUTHEADER)
class struct__677A661E4BC7DB67CECA33B4385749C5(Structure):
    pass

struct__677A661E4BC7DB67CECA33B4385749C5._pack_ = 1 # source:False
struct__677A661E4BC7DB67CECA33B4385749C5._fields_ = [
    ('usButtonFlags', ctypes.c_uint16),
    ('usButtonData', ctypes.c_uint16),
]

class union_tagRAWMOUSE___D16F4B76036832D8B5309DC026E37BC4(Union):
    pass

class struct_tagRAWMOUSE___D16F4B76036832D8B5309DC026E37BC4_0(Structure):
    pass

struct_tagRAWMOUSE___D16F4B76036832D8B5309DC026E37BC4_0._pack_ = 1 # source:False
struct_tagRAWMOUSE___D16F4B76036832D8B5309DC026E37BC4_0._fields_ = [
    ('usButtonFlags', ctypes.c_uint16),
    ('usButtonData', ctypes.c_uint16),
]

union_tagRAWMOUSE___D16F4B76036832D8B5309DC026E37BC4._pack_ = 1 # source:False
union_tagRAWMOUSE___D16F4B76036832D8B5309DC026E37BC4._anonymous_ = ('_0',)
union_tagRAWMOUSE___D16F4B76036832D8B5309DC026E37BC4._fields_ = [
    ('ulButtons', ctypes.c_uint32),
    ('_0', struct_tagRAWMOUSE___D16F4B76036832D8B5309DC026E37BC4_0),
]

class struct_tagRAWMOUSE(Structure):
    pass

class union_tagRAWMOUSE_0(Union):
    pass

class struct_tagRAWMOUSE_0_0(Structure):
    pass

struct_tagRAWMOUSE_0_0._pack_ = 1 # source:False
struct_tagRAWMOUSE_0_0._fields_ = [
    ('usButtonFlags', ctypes.c_uint16),
    ('usButtonData', ctypes.c_uint16),
]

union_tagRAWMOUSE_0._pack_ = 1 # source:False
union_tagRAWMOUSE_0._anonymous_ = ('_0',)
union_tagRAWMOUSE_0._fields_ = [
    ('ulButtons', ctypes.c_uint32),
    ('_0', struct_tagRAWMOUSE_0_0),
]

struct_tagRAWMOUSE._pack_ = 1 # source:False
struct_tagRAWMOUSE._anonymous_ = ('_0',)
struct_tagRAWMOUSE._fields_ = [
    ('usFlags', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('_0', union_tagRAWMOUSE_0),
    ('ulRawButtons', ctypes.c_uint32),
    ('lLastX', ctypes.c_int32),
    ('lLastY', ctypes.c_int32),
    ('ulExtraInformation', ctypes.c_uint32),
]

RAWMOUSE = struct_tagRAWMOUSE
PRAWMOUSE = ctypes.POINTER(struct_tagRAWMOUSE)
LPRAWMOUSE = ctypes.POINTER(struct_tagRAWMOUSE)
class struct_tagRAWKEYBOARD(Structure):
    pass

struct_tagRAWKEYBOARD._pack_ = 1 # source:False
struct_tagRAWKEYBOARD._fields_ = [
    ('MakeCode', ctypes.c_uint16),
    ('Flags', ctypes.c_uint16),
    ('Reserved', ctypes.c_uint16),
    ('VKey', ctypes.c_uint16),
    ('Message', ctypes.c_uint32),
    ('ExtraInformation', ctypes.c_uint32),
]

RAWKEYBOARD = struct_tagRAWKEYBOARD
PRAWKEYBOARD = ctypes.POINTER(struct_tagRAWKEYBOARD)
LPRAWKEYBOARD = ctypes.POINTER(struct_tagRAWKEYBOARD)
class struct_tagRAWHID(Structure):
    pass

struct_tagRAWHID._pack_ = 1 # source:False
struct_tagRAWHID._fields_ = [
    ('dwSizeHid', ctypes.c_uint32),
    ('dwCount', ctypes.c_uint32),
    ('bRawData', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

RAWHID = struct_tagRAWHID
PRAWHID = ctypes.POINTER(struct_tagRAWHID)
LPRAWHID = ctypes.POINTER(struct_tagRAWHID)
class union_tagRAWINPUT___052B64A875BF00260122F2612F072C5D(Union):
    pass

union_tagRAWINPUT___052B64A875BF00260122F2612F072C5D._pack_ = 1 # source:False
union_tagRAWINPUT___052B64A875BF00260122F2612F072C5D._fields_ = [
    ('mouse', RAWMOUSE),
    ('keyboard', RAWKEYBOARD),
    ('hid', RAWHID),
    ('PADDING_0', ctypes.c_ubyte * 12),
]

class struct_tagRAWINPUT(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('header', RAWINPUTHEADER),
    ('data', union_tagRAWINPUT___052B64A875BF00260122F2612F072C5D),
     ]

RAWINPUT = struct_tagRAWINPUT
PRAWINPUT = ctypes.POINTER(struct_tagRAWINPUT)
LPRAWINPUT = ctypes.POINTER(struct_tagRAWINPUT)
class struct_tagRID_DEVICE_INFO_MOUSE(Structure):
    pass

struct_tagRID_DEVICE_INFO_MOUSE._pack_ = 1 # source:False
struct_tagRID_DEVICE_INFO_MOUSE._fields_ = [
    ('dwId', ctypes.c_uint32),
    ('dwNumberOfButtons', ctypes.c_uint32),
    ('dwSampleRate', ctypes.c_uint32),
    ('fHasHorizontalWheel', ctypes.c_int32),
]

RID_DEVICE_INFO_MOUSE = struct_tagRID_DEVICE_INFO_MOUSE
PRID_DEVICE_INFO_MOUSE = ctypes.POINTER(struct_tagRID_DEVICE_INFO_MOUSE)
class struct_tagRID_DEVICE_INFO_KEYBOARD(Structure):
    pass

struct_tagRID_DEVICE_INFO_KEYBOARD._pack_ = 1 # source:False
struct_tagRID_DEVICE_INFO_KEYBOARD._fields_ = [
    ('dwType', ctypes.c_uint32),
    ('dwSubType', ctypes.c_uint32),
    ('dwKeyboardMode', ctypes.c_uint32),
    ('dwNumberOfFunctionKeys', ctypes.c_uint32),
    ('dwNumberOfIndicators', ctypes.c_uint32),
    ('dwNumberOfKeysTotal', ctypes.c_uint32),
]

RID_DEVICE_INFO_KEYBOARD = struct_tagRID_DEVICE_INFO_KEYBOARD
PRID_DEVICE_INFO_KEYBOARD = ctypes.POINTER(struct_tagRID_DEVICE_INFO_KEYBOARD)
class struct_tagRID_DEVICE_INFO_HID(Structure):
    pass

struct_tagRID_DEVICE_INFO_HID._pack_ = 1 # source:False
struct_tagRID_DEVICE_INFO_HID._fields_ = [
    ('dwVendorId', ctypes.c_uint32),
    ('dwProductId', ctypes.c_uint32),
    ('dwVersionNumber', ctypes.c_uint32),
    ('usUsagePage', ctypes.c_uint16),
    ('usUsage', ctypes.c_uint16),
]

RID_DEVICE_INFO_HID = struct_tagRID_DEVICE_INFO_HID
PRID_DEVICE_INFO_HID = ctypes.POINTER(struct_tagRID_DEVICE_INFO_HID)
class union_tagRID_DEVICE_INFO___AE6C69A71CAB30230B16287457ACEE02(Union):
    pass

union_tagRID_DEVICE_INFO___AE6C69A71CAB30230B16287457ACEE02._pack_ = 1 # source:False
union_tagRID_DEVICE_INFO___AE6C69A71CAB30230B16287457ACEE02._fields_ = [
    ('mouse', RID_DEVICE_INFO_MOUSE),
    ('keyboard', RID_DEVICE_INFO_KEYBOARD),
    ('hid', RID_DEVICE_INFO_HID),
    ('PADDING_0', ctypes.c_ubyte * 8),
]

class struct_tagRID_DEVICE_INFO(Structure):
    pass

class union_tagRID_DEVICE_INFO_0(Union):
    pass

union_tagRID_DEVICE_INFO_0._pack_ = 1 # source:False
union_tagRID_DEVICE_INFO_0._fields_ = [
    ('mouse', RID_DEVICE_INFO_MOUSE),
    ('keyboard', RID_DEVICE_INFO_KEYBOARD),
    ('hid', RID_DEVICE_INFO_HID),
    ('PADDING_0', ctypes.c_ubyte * 8),
]

struct_tagRID_DEVICE_INFO._pack_ = 1 # source:False
struct_tagRID_DEVICE_INFO._anonymous_ = ('_0',)
struct_tagRID_DEVICE_INFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwType', ctypes.c_uint32),
    ('_0', union_tagRID_DEVICE_INFO_0),
]

RID_DEVICE_INFO = struct_tagRID_DEVICE_INFO
PRID_DEVICE_INFO = ctypes.POINTER(struct_tagRID_DEVICE_INFO)
LPRID_DEVICE_INFO = ctypes.POINTER(struct_tagRID_DEVICE_INFO)
class struct_tagRAWINPUTDEVICE(Structure):
    pass

struct_tagRAWINPUTDEVICE._pack_ = 1 # source:False
struct_tagRAWINPUTDEVICE._fields_ = [
    ('usUsagePage', ctypes.c_uint16),
    ('usUsage', ctypes.c_uint16),
    ('dwFlags', ctypes.c_uint32),
    ('hwndTarget', ctypes.POINTER(struct_HWND__)),
]

RAWINPUTDEVICE = struct_tagRAWINPUTDEVICE
PRAWINPUTDEVICE = ctypes.POINTER(struct_tagRAWINPUTDEVICE)
LPRAWINPUTDEVICE = ctypes.POINTER(struct_tagRAWINPUTDEVICE)
PCRAWINPUTDEVICE = ctypes.POINTER(struct_tagRAWINPUTDEVICE)
class struct_tagRAWINPUTDEVICELIST(Structure):
    pass

struct_tagRAWINPUTDEVICELIST._pack_ = 1 # source:False
struct_tagRAWINPUTDEVICELIST._fields_ = [
    ('hDevice', ctypes.POINTER(None)),
    ('dwType', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

RAWINPUTDEVICELIST = struct_tagRAWINPUTDEVICELIST
PRAWINPUTDEVICELIST = ctypes.POINTER(struct_tagRAWINPUTDEVICELIST)

# values for enumeration 'tagPOINTER_DEVICE_TYPE'
tagPOINTER_DEVICE_TYPE__enumvalues = {
    1: 'POINTER_DEVICE_TYPE_INTEGRATED_PEN',
    2: 'POINTER_DEVICE_TYPE_EXTERNAL_PEN',
    3: 'POINTER_DEVICE_TYPE_TOUCH',
    4: 'POINTER_DEVICE_TYPE_TOUCH_PAD',
    4294967295: 'POINTER_DEVICE_TYPE_MAX',
}
POINTER_DEVICE_TYPE_INTEGRATED_PEN = 1
POINTER_DEVICE_TYPE_EXTERNAL_PEN = 2
POINTER_DEVICE_TYPE_TOUCH = 3
POINTER_DEVICE_TYPE_TOUCH_PAD = 4
POINTER_DEVICE_TYPE_MAX = 4294967295
tagPOINTER_DEVICE_TYPE = ctypes.c_uint32 # enum
POINTER_DEVICE_TYPE = tagPOINTER_DEVICE_TYPE
POINTER_DEVICE_TYPE__enumvalues = tagPOINTER_DEVICE_TYPE__enumvalues
class struct_tagPOINTER_DEVICE_INFO(Structure):
    pass

struct_tagPOINTER_DEVICE_INFO._pack_ = 1 # source:False
struct_tagPOINTER_DEVICE_INFO._fields_ = [
    ('displayOrientation', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('device', ctypes.POINTER(None)),
    ('pointerDeviceType', POINTER_DEVICE_TYPE),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('monitor', ctypes.POINTER(struct_HMONITOR__)),
    ('startingCursorId', ctypes.c_uint32),
    ('maxActiveContacts', ctypes.c_uint16),
    ('productString', ctypes.c_int16 * 520),
    ('PADDING_2', ctypes.c_ubyte * 2),
]

POINTER_DEVICE_INFO = struct_tagPOINTER_DEVICE_INFO
class struct_tagPOINTER_DEVICE_PROPERTY(Structure):
    pass

struct_tagPOINTER_DEVICE_PROPERTY._pack_ = 1 # source:False
struct_tagPOINTER_DEVICE_PROPERTY._fields_ = [
    ('logicalMin', ctypes.c_int32),
    ('logicalMax', ctypes.c_int32),
    ('physicalMin', ctypes.c_int32),
    ('physicalMax', ctypes.c_int32),
    ('unit', ctypes.c_uint32),
    ('unitExponent', ctypes.c_uint32),
    ('usagePageId', ctypes.c_uint16),
    ('usageId', ctypes.c_uint16),
]

POINTER_DEVICE_PROPERTY = struct_tagPOINTER_DEVICE_PROPERTY

# values for enumeration 'tagPOINTER_DEVICE_CURSOR_TYPE'
tagPOINTER_DEVICE_CURSOR_TYPE__enumvalues = {
    0: 'POINTER_DEVICE_CURSOR_TYPE_UNKNOWN',
    1: 'POINTER_DEVICE_CURSOR_TYPE_TIP',
    2: 'POINTER_DEVICE_CURSOR_TYPE_ERASER',
    4294967295: 'POINTER_DEVICE_CURSOR_TYPE_MAX',
}
POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0
POINTER_DEVICE_CURSOR_TYPE_TIP = 1
POINTER_DEVICE_CURSOR_TYPE_ERASER = 2
POINTER_DEVICE_CURSOR_TYPE_MAX = 4294967295
tagPOINTER_DEVICE_CURSOR_TYPE = ctypes.c_uint32 # enum
POINTER_DEVICE_CURSOR_TYPE = tagPOINTER_DEVICE_CURSOR_TYPE
POINTER_DEVICE_CURSOR_TYPE__enumvalues = tagPOINTER_DEVICE_CURSOR_TYPE__enumvalues
class struct_tagPOINTER_DEVICE_CURSOR_INFO(Structure):
    pass

struct_tagPOINTER_DEVICE_CURSOR_INFO._pack_ = 1 # source:False
struct_tagPOINTER_DEVICE_CURSOR_INFO._fields_ = [
    ('cursorId', ctypes.c_uint32),
    ('cursor', POINTER_DEVICE_CURSOR_TYPE),
]

POINTER_DEVICE_CURSOR_INFO = struct_tagPOINTER_DEVICE_CURSOR_INFO
class struct_tagCHANGEFILTERSTRUCT(Structure):
    pass

struct_tagCHANGEFILTERSTRUCT._pack_ = 1 # source:False
struct_tagCHANGEFILTERSTRUCT._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('ExtStatus', ctypes.c_uint32),
]

CHANGEFILTERSTRUCT = struct_tagCHANGEFILTERSTRUCT
PCHANGEFILTERSTRUCT = ctypes.POINTER(struct_tagCHANGEFILTERSTRUCT)
class struct_HGESTUREINFO__(Structure):
    pass

struct_HGESTUREINFO__._pack_ = 1 # source:False
struct_HGESTUREINFO__._fields_ = [
    ('unused', ctypes.c_int32),
]

HGESTUREINFO = ctypes.POINTER(struct_HGESTUREINFO__)
class struct_tagGESTUREINFO(Structure):
    pass

struct_tagGESTUREINFO._pack_ = 1 # source:False
struct_tagGESTUREINFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('dwID', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hwndTarget', ctypes.POINTER(struct_HWND__)),
    ('ptsLocation', POINTS),
    ('dwInstanceID', ctypes.c_uint32),
    ('dwSequenceID', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('ullArguments', ctypes.c_uint64),
    ('cbExtraArgs', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

GESTUREINFO = struct_tagGESTUREINFO
PGESTUREINFO = ctypes.POINTER(struct_tagGESTUREINFO)
PCGESTUREINFO = ctypes.POINTER(struct_tagGESTUREINFO)
class struct_tagGESTURENOTIFYSTRUCT(Structure):
    pass

struct_tagGESTURENOTIFYSTRUCT._pack_ = 1 # source:False
struct_tagGESTURENOTIFYSTRUCT._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('hwndTarget', ctypes.POINTER(struct_HWND__)),
    ('ptsLocation', POINTS),
    ('dwInstanceID', ctypes.c_uint32),
]

GESTURENOTIFYSTRUCT = struct_tagGESTURENOTIFYSTRUCT
PGESTURENOTIFYSTRUCT = ctypes.POINTER(struct_tagGESTURENOTIFYSTRUCT)
class struct_tagGESTURECONFIG(Structure):
    pass

struct_tagGESTURECONFIG._pack_ = 1 # source:False
struct_tagGESTURECONFIG._fields_ = [
    ('dwID', ctypes.c_uint32),
    ('dwWant', ctypes.c_uint32),
    ('dwBlock', ctypes.c_uint32),
]

GESTURECONFIG = struct_tagGESTURECONFIG
PGESTURECONFIG = ctypes.POINTER(struct_tagGESTURECONFIG)

# values for enumeration 'tagINPUT_MESSAGE_DEVICE_TYPE'
tagINPUT_MESSAGE_DEVICE_TYPE__enumvalues = {
    0: 'IMDT_UNAVAILABLE',
    1: 'IMDT_KEYBOARD',
    2: 'IMDT_MOUSE',
    4: 'IMDT_TOUCH',
    8: 'IMDT_PEN',
    16: 'IMDT_TOUCHPAD',
}
IMDT_UNAVAILABLE = 0
IMDT_KEYBOARD = 1
IMDT_MOUSE = 2
IMDT_TOUCH = 4
IMDT_PEN = 8
IMDT_TOUCHPAD = 16
tagINPUT_MESSAGE_DEVICE_TYPE = ctypes.c_uint32 # enum
INPUT_MESSAGE_DEVICE_TYPE = tagINPUT_MESSAGE_DEVICE_TYPE
INPUT_MESSAGE_DEVICE_TYPE__enumvalues = tagINPUT_MESSAGE_DEVICE_TYPE__enumvalues

# values for enumeration 'tagINPUT_MESSAGE_ORIGIN_ID'
tagINPUT_MESSAGE_ORIGIN_ID__enumvalues = {
    0: 'IMO_UNAVAILABLE',
    1: 'IMO_HARDWARE',
    2: 'IMO_INJECTED',
    4: 'IMO_SYSTEM',
}
IMO_UNAVAILABLE = 0
IMO_HARDWARE = 1
IMO_INJECTED = 2
IMO_SYSTEM = 4
tagINPUT_MESSAGE_ORIGIN_ID = ctypes.c_uint32 # enum
INPUT_MESSAGE_ORIGIN_ID = tagINPUT_MESSAGE_ORIGIN_ID
INPUT_MESSAGE_ORIGIN_ID__enumvalues = tagINPUT_MESSAGE_ORIGIN_ID__enumvalues
class struct_tagINPUT_MESSAGE_SOURCE(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('deviceType', INPUT_MESSAGE_DEVICE_TYPE),
    ('originId', INPUT_MESSAGE_ORIGIN_ID),
     ]

INPUT_MESSAGE_SOURCE = struct_tagINPUT_MESSAGE_SOURCE

# values for enumeration 'tagAR_STATE'
tagAR_STATE__enumvalues = {
    0: 'AR_ENABLED',
    1: 'AR_DISABLED',
    2: 'AR_SUPPRESSED',
    4: 'AR_REMOTESESSION',
    8: 'AR_MULTIMON',
    16: 'AR_NOSENSOR',
    32: 'AR_NOT_SUPPORTED',
    64: 'AR_DOCKED',
    128: 'AR_LAPTOP',
}
AR_ENABLED = 0
AR_DISABLED = 1
AR_SUPPRESSED = 2
AR_REMOTESESSION = 4
AR_MULTIMON = 8
AR_NOSENSOR = 16
AR_NOT_SUPPORTED = 32
AR_DOCKED = 64
AR_LAPTOP = 128
tagAR_STATE = ctypes.c_uint32 # enum
AR_STATE = tagAR_STATE
AR_STATE__enumvalues = tagAR_STATE__enumvalues
PAR_STATE = ctypes.POINTER(tagAR_STATE)

# values for enumeration 'ORIENTATION_PREFERENCE'
ORIENTATION_PREFERENCE__enumvalues = {
    0: 'ORIENTATION_PREFERENCE_NONE',
    1: 'ORIENTATION_PREFERENCE_LANDSCAPE',
    2: 'ORIENTATION_PREFERENCE_PORTRAIT',
    4: 'ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED',
    8: 'ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED',
}
ORIENTATION_PREFERENCE_NONE = 0
ORIENTATION_PREFERENCE_LANDSCAPE = 1
ORIENTATION_PREFERENCE_PORTRAIT = 2
ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 4
ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 8
ORIENTATION_PREFERENCE = ctypes.c_uint32 # enum
LGRPID = ctypes.c_uint32
LCTYPE = ctypes.c_uint32
CALTYPE = ctypes.c_uint32
CALID = ctypes.c_uint32
class struct__cpinfo(Structure):
    pass

struct__cpinfo._pack_ = 1 # source:False
struct__cpinfo._fields_ = [
    ('MaxCharSize', ctypes.c_uint32),
    ('DefaultChar', ctypes.c_ubyte * 2),
    ('LeadByte', ctypes.c_ubyte * 12),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

CPINFO = struct__cpinfo
LPCPINFO = ctypes.POINTER(struct__cpinfo)
GEOTYPE = ctypes.c_uint32
GEOCLASS = ctypes.c_uint32
GEOID = ctypes.c_int32
class struct__cpinfoexA(Structure):
    pass

struct__cpinfoexA._pack_ = 1 # source:False
struct__cpinfoexA._fields_ = [
    ('MaxCharSize', ctypes.c_uint32),
    ('DefaultChar', ctypes.c_ubyte * 2),
    ('LeadByte', ctypes.c_ubyte * 12),
    ('UnicodeDefaultChar', ctypes.c_int16),
    ('CodePage', ctypes.c_uint32),
    ('CodePageName', ctypes.c_char * 260),
]

CPINFOEXA = struct__cpinfoexA
LPCPINFOEXA = ctypes.POINTER(struct__cpinfoexA)
class struct__cpinfoexW(Structure):
    pass

struct__cpinfoexW._pack_ = 1 # source:False
struct__cpinfoexW._fields_ = [
    ('MaxCharSize', ctypes.c_uint32),
    ('DefaultChar', ctypes.c_ubyte * 2),
    ('LeadByte', ctypes.c_ubyte * 12),
    ('UnicodeDefaultChar', ctypes.c_int16),
    ('CodePage', ctypes.c_uint32),
    ('CodePageName', ctypes.c_int16 * 260),
]

CPINFOEXW = struct__cpinfoexW
LPCPINFOEXW = ctypes.POINTER(struct__cpinfoexW)
CPINFOEX = struct__cpinfoexA
LPCPINFOEX = ctypes.POINTER(struct__cpinfoexA)
class struct__numberfmtA(Structure):
    pass

struct__numberfmtA._pack_ = 1 # source:False
struct__numberfmtA._fields_ = [
    ('NumDigits', ctypes.c_uint32),
    ('LeadingZero', ctypes.c_uint32),
    ('Grouping', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpDecimalSep', ctypes.POINTER(ctypes.c_char)),
    ('lpThousandSep', ctypes.POINTER(ctypes.c_char)),
    ('NegativeOrder', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

NUMBERFMTA = struct__numberfmtA
LPNUMBERFMTA = ctypes.POINTER(struct__numberfmtA)
class struct__numberfmtW(Structure):
    pass

struct__numberfmtW._pack_ = 1 # source:False
struct__numberfmtW._fields_ = [
    ('NumDigits', ctypes.c_uint32),
    ('LeadingZero', ctypes.c_uint32),
    ('Grouping', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpDecimalSep', ctypes.POINTER(ctypes.c_int16)),
    ('lpThousandSep', ctypes.POINTER(ctypes.c_int16)),
    ('NegativeOrder', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

NUMBERFMTW = struct__numberfmtW
LPNUMBERFMTW = ctypes.POINTER(struct__numberfmtW)
NUMBERFMT = struct__numberfmtA
LPNUMBERFMT = ctypes.POINTER(struct__numberfmtA)
class struct__currencyfmtA(Structure):
    pass

struct__currencyfmtA._pack_ = 1 # source:False
struct__currencyfmtA._fields_ = [
    ('NumDigits', ctypes.c_uint32),
    ('LeadingZero', ctypes.c_uint32),
    ('Grouping', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpDecimalSep', ctypes.POINTER(ctypes.c_char)),
    ('lpThousandSep', ctypes.POINTER(ctypes.c_char)),
    ('NegativeOrder', ctypes.c_uint32),
    ('PositiveOrder', ctypes.c_uint32),
    ('lpCurrencySymbol', ctypes.POINTER(ctypes.c_char)),
]

CURRENCYFMTA = struct__currencyfmtA
LPCURRENCYFMTA = ctypes.POINTER(struct__currencyfmtA)
class struct__currencyfmtW(Structure):
    pass

struct__currencyfmtW._pack_ = 1 # source:False
struct__currencyfmtW._fields_ = [
    ('NumDigits', ctypes.c_uint32),
    ('LeadingZero', ctypes.c_uint32),
    ('Grouping', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpDecimalSep', ctypes.POINTER(ctypes.c_int16)),
    ('lpThousandSep', ctypes.POINTER(ctypes.c_int16)),
    ('NegativeOrder', ctypes.c_uint32),
    ('PositiveOrder', ctypes.c_uint32),
    ('lpCurrencySymbol', ctypes.POINTER(ctypes.c_int16)),
]

CURRENCYFMTW = struct__currencyfmtW
LPCURRENCYFMTW = ctypes.POINTER(struct__currencyfmtW)
CURRENCYFMT = struct__currencyfmtA
LPCURRENCYFMT = ctypes.POINTER(struct__currencyfmtA)

# values for enumeration 'SYSNLS_FUNCTION'
SYSNLS_FUNCTION__enumvalues = {
    1: 'COMPARE_STRING',
}
COMPARE_STRING = 1
SYSNLS_FUNCTION = ctypes.c_uint32 # enum
NLS_FUNCTION = ctypes.c_uint32
class struct__nlsversioninfo(Structure):
    pass

struct__nlsversioninfo._pack_ = 1 # source:False
struct__nlsversioninfo._fields_ = [
    ('dwNLSVersionInfoSize', ctypes.c_uint32),
    ('dwNLSVersion', ctypes.c_uint32),
    ('dwDefinedVersion', ctypes.c_uint32),
    ('dwEffectiveId', ctypes.c_uint32),
    ('guidCustomVersion', GUID),
]

NLSVERSIONINFO = struct__nlsversioninfo
LPNLSVERSIONINFO = ctypes.POINTER(struct__nlsversioninfo)
class struct__nlsversioninfoex(Structure):
    pass

struct__nlsversioninfoex._pack_ = 1 # source:False
struct__nlsversioninfoex._fields_ = [
    ('dwNLSVersionInfoSize', ctypes.c_uint32),
    ('dwNLSVersion', ctypes.c_uint32),
    ('dwDefinedVersion', ctypes.c_uint32),
    ('dwEffectiveId', ctypes.c_uint32),
    ('guidCustomVersion', GUID),
]

NLSVERSIONINFOEX = struct__nlsversioninfoex
LPNLSVERSIONINFOEX = ctypes.POINTER(struct__nlsversioninfoex)

# values for enumeration 'SYSGEOTYPE'
SYSGEOTYPE__enumvalues = {
    1: 'GEO_NATION',
    2: 'GEO_LATITUDE',
    3: 'GEO_LONGITUDE',
    4: 'GEO_ISO2',
    5: 'GEO_ISO3',
    6: 'GEO_RFC1766',
    7: 'GEO_LCID',
    8: 'GEO_FRIENDLYNAME',
    9: 'GEO_OFFICIALNAME',
    10: 'GEO_TIMEZONES',
    11: 'GEO_OFFICIALLANGUAGES',
    12: 'GEO_ISO_UN_NUMBER',
    13: 'GEO_PARENT',
    14: 'GEO_DIALINGCODE',
    15: 'GEO_CURRENCYCODE',
    16: 'GEO_CURRENCYSYMBOL',
    17: 'GEO_NAME',
    18: 'GEO_ID',
}
GEO_NATION = 1
GEO_LATITUDE = 2
GEO_LONGITUDE = 3
GEO_ISO2 = 4
GEO_ISO3 = 5
GEO_RFC1766 = 6
GEO_LCID = 7
GEO_FRIENDLYNAME = 8
GEO_OFFICIALNAME = 9
GEO_TIMEZONES = 10
GEO_OFFICIALLANGUAGES = 11
GEO_ISO_UN_NUMBER = 12
GEO_PARENT = 13
GEO_DIALINGCODE = 14
GEO_CURRENCYCODE = 15
GEO_CURRENCYSYMBOL = 16
GEO_NAME = 17
GEO_ID = 18
SYSGEOTYPE = ctypes.c_uint32 # enum

# values for enumeration 'SYSGEOCLASS'
SYSGEOCLASS__enumvalues = {
    16: 'GEOCLASS_NATION',
    14: 'GEOCLASS_REGION',
    0: 'GEOCLASS_ALL',
}
GEOCLASS_NATION = 16
GEOCLASS_REGION = 14
GEOCLASS_ALL = 0
SYSGEOCLASS = ctypes.c_uint32 # enum
LOCALE_ENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char))
LOCALE_ENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16))

# values for enumeration '_NORM_FORM'
_NORM_FORM__enumvalues = {
    0: 'NormalizationOther',
    1: 'NormalizationC',
    2: 'NormalizationD',
    5: 'NormalizationKC',
    6: 'NormalizationKD',
}
NormalizationOther = 0
NormalizationC = 1
NormalizationD = 2
NormalizationKC = 5
NormalizationKD = 6
_NORM_FORM = ctypes.c_uint32 # enum
NORM_FORM = _NORM_FORM
NORM_FORM__enumvalues = _NORM_FORM__enumvalues
LANGUAGEGROUP_ENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.c_uint32, ctypes.c_int64)
LANGGROUPLOCALE_ENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_char), ctypes.c_int64)
UILANGUAGE_ENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int64)
CODEPAGE_ENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char))
DATEFMT_ENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char))
DATEFMT_ENUMPROCEXA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_uint32)
TIMEFMT_ENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char))
CALINFO_ENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char))
CALINFO_ENUMPROCEXA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_uint32)
LANGUAGEGROUP_ENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.c_uint32, ctypes.c_int64)
LANGGROUPLOCALE_ENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int64)
UILANGUAGE_ENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int64)
CODEPAGE_ENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16))
DATEFMT_ENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16))
DATEFMT_ENUMPROCEXW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_uint32)
TIMEFMT_ENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16))
CALINFO_ENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16))
CALINFO_ENUMPROCEXW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_uint32)
GEO_ENUMPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_int32)
GEO_ENUMNAMEPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int64)
class struct__FILEMUIINFO(Structure):
    pass

struct__FILEMUIINFO._pack_ = 1 # source:False
struct__FILEMUIINFO._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('dwVersion', ctypes.c_uint32),
    ('dwFileType', ctypes.c_uint32),
    ('pChecksum', ctypes.c_ubyte * 16),
    ('pServiceChecksum', ctypes.c_ubyte * 16),
    ('dwLanguageNameOffset', ctypes.c_uint32),
    ('dwTypeIDMainSize', ctypes.c_uint32),
    ('dwTypeIDMainOffset', ctypes.c_uint32),
    ('dwTypeNameMainOffset', ctypes.c_uint32),
    ('dwTypeIDMUISize', ctypes.c_uint32),
    ('dwTypeIDMUIOffset', ctypes.c_uint32),
    ('dwTypeNameMUIOffset', ctypes.c_uint32),
    ('abBuffer', ctypes.c_ubyte * 8),
]

FILEMUIINFO = struct__FILEMUIINFO
PFILEMUIINFO = ctypes.POINTER(struct__FILEMUIINFO)
class struct_HSAVEDUILANGUAGES__(Structure):
    pass

struct_HSAVEDUILANGUAGES__._pack_ = 1 # source:False
struct_HSAVEDUILANGUAGES__._fields_ = [
    ('unused', ctypes.c_int32),
]

HSAVEDUILANGUAGES = ctypes.POINTER(struct_HSAVEDUILANGUAGES__)
CALINFO_ENUMPROCEXEX = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_uint32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int64)
DATEFMT_ENUMPROCEXEX = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_uint32, ctypes.c_int64)
TIMEFMT_ENUMPROCEX = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int64)
LOCALE_ENUMPROCEX = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_uint32, ctypes.c_int64)
class struct__COORD(Structure):
    pass

struct__COORD._pack_ = 1 # source:False
struct__COORD._fields_ = [
    ('X', ctypes.c_int16),
    ('Y', ctypes.c_int16),
]

COORD = struct__COORD
PCOORD = ctypes.POINTER(struct__COORD)
class struct__SMALL_RECT(Structure):
    pass

struct__SMALL_RECT._pack_ = 1 # source:False
struct__SMALL_RECT._fields_ = [
    ('Left', ctypes.c_int16),
    ('Top', ctypes.c_int16),
    ('Right', ctypes.c_int16),
    ('Bottom', ctypes.c_int16),
]

SMALL_RECT = struct__SMALL_RECT
PSMALL_RECT = ctypes.POINTER(struct__SMALL_RECT)
class union__KEY_EVENT_RECORD___6865AF651A3BEAEC02D0CF34CD163F4C(Union):
    pass

union__KEY_EVENT_RECORD___6865AF651A3BEAEC02D0CF34CD163F4C._pack_ = 1 # source:False
union__KEY_EVENT_RECORD___6865AF651A3BEAEC02D0CF34CD163F4C._fields_ = [
    ('UnicodeChar', ctypes.c_int16),
    ('AsciiChar', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte),
]

class struct__KEY_EVENT_RECORD(Structure):
    pass

struct__KEY_EVENT_RECORD._pack_ = 1 # source:False
struct__KEY_EVENT_RECORD._fields_ = [
    ('bKeyDown', ctypes.c_int32),
    ('wRepeatCount', ctypes.c_uint16),
    ('wVirtualKeyCode', ctypes.c_uint16),
    ('wVirtualScanCode', ctypes.c_uint16),
    ('uChar', union__KEY_EVENT_RECORD___6865AF651A3BEAEC02D0CF34CD163F4C),
    ('dwControlKeyState', ctypes.c_uint32),
]

KEY_EVENT_RECORD = struct__KEY_EVENT_RECORD
PKEY_EVENT_RECORD = ctypes.POINTER(struct__KEY_EVENT_RECORD)
class struct__MOUSE_EVENT_RECORD(Structure):
    pass

struct__MOUSE_EVENT_RECORD._pack_ = 1 # source:False
struct__MOUSE_EVENT_RECORD._fields_ = [
    ('dwMousePosition', COORD),
    ('dwButtonState', ctypes.c_uint32),
    ('dwControlKeyState', ctypes.c_uint32),
    ('dwEventFlags', ctypes.c_uint32),
]

MOUSE_EVENT_RECORD = struct__MOUSE_EVENT_RECORD
PMOUSE_EVENT_RECORD = ctypes.POINTER(struct__MOUSE_EVENT_RECORD)
class struct__WINDOW_BUFFER_SIZE_RECORD(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('dwSize', COORD),
     ]

WINDOW_BUFFER_SIZE_RECORD = struct__WINDOW_BUFFER_SIZE_RECORD
PWINDOW_BUFFER_SIZE_RECORD = ctypes.POINTER(struct__WINDOW_BUFFER_SIZE_RECORD)
class struct__MENU_EVENT_RECORD(Structure):
    pass

struct__MENU_EVENT_RECORD._pack_ = 1 # source:False
struct__MENU_EVENT_RECORD._fields_ = [
    ('dwCommandId', ctypes.c_uint32),
]

MENU_EVENT_RECORD = struct__MENU_EVENT_RECORD
PMENU_EVENT_RECORD = ctypes.POINTER(struct__MENU_EVENT_RECORD)
class struct__FOCUS_EVENT_RECORD(Structure):
    pass

struct__FOCUS_EVENT_RECORD._pack_ = 1 # source:False
struct__FOCUS_EVENT_RECORD._fields_ = [
    ('bSetFocus', ctypes.c_int32),
]

FOCUS_EVENT_RECORD = struct__FOCUS_EVENT_RECORD
PFOCUS_EVENT_RECORD = ctypes.POINTER(struct__FOCUS_EVENT_RECORD)
class union__INPUT_RECORD___BC370DB86BCA335F1D16EEE9563B3E68(Union):
    pass

union__INPUT_RECORD___BC370DB86BCA335F1D16EEE9563B3E68._pack_ = 1 # source:False
union__INPUT_RECORD___BC370DB86BCA335F1D16EEE9563B3E68._fields_ = [
    ('KeyEvent', KEY_EVENT_RECORD),
    ('MouseEvent', MOUSE_EVENT_RECORD),
    ('WindowBufferSizeEvent', WINDOW_BUFFER_SIZE_RECORD),
    ('MenuEvent', MENU_EVENT_RECORD),
    ('FocusEvent', FOCUS_EVENT_RECORD),
    ('PADDING_0', ctypes.c_ubyte * 12),
]

class struct__INPUT_RECORD(Structure):
    pass

struct__INPUT_RECORD._pack_ = 1 # source:False
struct__INPUT_RECORD._fields_ = [
    ('EventType', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('Event', union__INPUT_RECORD___BC370DB86BCA335F1D16EEE9563B3E68),
]

INPUT_RECORD = struct__INPUT_RECORD
PINPUT_RECORD = ctypes.POINTER(struct__INPUT_RECORD)
class union__CHAR_INFO___6865AF651A3BEAEC02D0CF34CD163F4C(Union):
    pass

union__CHAR_INFO___6865AF651A3BEAEC02D0CF34CD163F4C._pack_ = 1 # source:False
union__CHAR_INFO___6865AF651A3BEAEC02D0CF34CD163F4C._fields_ = [
    ('UnicodeChar', ctypes.c_int16),
    ('AsciiChar', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte),
]

class struct__CHAR_INFO(Structure):
    pass

struct__CHAR_INFO._pack_ = 1 # source:False
struct__CHAR_INFO._fields_ = [
    ('Char', union__CHAR_INFO___6865AF651A3BEAEC02D0CF34CD163F4C),
    ('Attributes', ctypes.c_uint16),
]

CHAR_INFO = struct__CHAR_INFO
PCHAR_INFO = ctypes.POINTER(struct__CHAR_INFO)
class struct__CONSOLE_FONT_INFO(Structure):
    pass

struct__CONSOLE_FONT_INFO._pack_ = 1 # source:False
struct__CONSOLE_FONT_INFO._fields_ = [
    ('nFont', ctypes.c_uint32),
    ('dwFontSize', COORD),
]

CONSOLE_FONT_INFO = struct__CONSOLE_FONT_INFO
PCONSOLE_FONT_INFO = ctypes.POINTER(struct__CONSOLE_FONT_INFO)
HPCON = ctypes.POINTER(None)
class struct__CONSOLE_READCONSOLE_CONTROL(Structure):
    pass

struct__CONSOLE_READCONSOLE_CONTROL._pack_ = 1 # source:False
struct__CONSOLE_READCONSOLE_CONTROL._fields_ = [
    ('nLength', ctypes.c_uint32),
    ('nInitialChars', ctypes.c_uint32),
    ('dwCtrlWakeupMask', ctypes.c_uint32),
    ('dwControlKeyState', ctypes.c_uint32),
]

CONSOLE_READCONSOLE_CONTROL = struct__CONSOLE_READCONSOLE_CONTROL
PCONSOLE_READCONSOLE_CONTROL = ctypes.POINTER(struct__CONSOLE_READCONSOLE_CONTROL)
PHANDLER_ROUTINE = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint32)
class struct__CONSOLE_CURSOR_INFO(Structure):
    pass

struct__CONSOLE_CURSOR_INFO._pack_ = 1 # source:False
struct__CONSOLE_CURSOR_INFO._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('bVisible', ctypes.c_int32),
]

CONSOLE_CURSOR_INFO = struct__CONSOLE_CURSOR_INFO
PCONSOLE_CURSOR_INFO = ctypes.POINTER(struct__CONSOLE_CURSOR_INFO)
class struct__CONSOLE_SCREEN_BUFFER_INFO(Structure):
    pass

struct__CONSOLE_SCREEN_BUFFER_INFO._pack_ = 1 # source:False
struct__CONSOLE_SCREEN_BUFFER_INFO._fields_ = [
    ('dwSize', COORD),
    ('dwCursorPosition', COORD),
    ('wAttributes', ctypes.c_uint16),
    ('srWindow', SMALL_RECT),
    ('dwMaximumWindowSize', COORD),
]

CONSOLE_SCREEN_BUFFER_INFO = struct__CONSOLE_SCREEN_BUFFER_INFO
PCONSOLE_SCREEN_BUFFER_INFO = ctypes.POINTER(struct__CONSOLE_SCREEN_BUFFER_INFO)
class struct__CONSOLE_SCREEN_BUFFER_INFOEX(Structure):
    pass

struct__CONSOLE_SCREEN_BUFFER_INFOEX._pack_ = 1 # source:False
struct__CONSOLE_SCREEN_BUFFER_INFOEX._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('dwSize', COORD),
    ('dwCursorPosition', COORD),
    ('wAttributes', ctypes.c_uint16),
    ('srWindow', SMALL_RECT),
    ('dwMaximumWindowSize', COORD),
    ('wPopupAttributes', ctypes.c_uint16),
    ('bFullscreenSupported', ctypes.c_int32),
    ('ColorTable', ctypes.c_uint32 * 16),
]

CONSOLE_SCREEN_BUFFER_INFOEX = struct__CONSOLE_SCREEN_BUFFER_INFOEX
PCONSOLE_SCREEN_BUFFER_INFOEX = ctypes.POINTER(struct__CONSOLE_SCREEN_BUFFER_INFOEX)
class struct__CONSOLE_FONT_INFOEX(Structure):
    pass

struct__CONSOLE_FONT_INFOEX._pack_ = 1 # source:False
struct__CONSOLE_FONT_INFOEX._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('nFont', ctypes.c_uint32),
    ('dwFontSize', COORD),
    ('FontFamily', ctypes.c_uint32),
    ('FontWeight', ctypes.c_uint32),
    ('FaceName', ctypes.c_int16 * 32),
]

CONSOLE_FONT_INFOEX = struct__CONSOLE_FONT_INFOEX
PCONSOLE_FONT_INFOEX = ctypes.POINTER(struct__CONSOLE_FONT_INFOEX)
class struct__CONSOLE_SELECTION_INFO(Structure):
    pass

struct__CONSOLE_SELECTION_INFO._pack_ = 1 # source:False
struct__CONSOLE_SELECTION_INFO._fields_ = [
    ('dwFlags', ctypes.c_uint32),
    ('dwSelectionAnchor', COORD),
    ('srSelection', SMALL_RECT),
]

CONSOLE_SELECTION_INFO = struct__CONSOLE_SELECTION_INFO
PCONSOLE_SELECTION_INFO = ctypes.POINTER(struct__CONSOLE_SELECTION_INFO)
class struct__CONSOLE_HISTORY_INFO(Structure):
    pass

struct__CONSOLE_HISTORY_INFO._pack_ = 1 # source:False
struct__CONSOLE_HISTORY_INFO._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('HistoryBufferSize', ctypes.c_uint32),
    ('NumberOfHistoryBuffers', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
]

CONSOLE_HISTORY_INFO = struct__CONSOLE_HISTORY_INFO
PCONSOLE_HISTORY_INFO = ctypes.POINTER(struct__CONSOLE_HISTORY_INFO)
class struct_tagVS_FIXEDFILEINFO(Structure):
    pass

struct_tagVS_FIXEDFILEINFO._pack_ = 1 # source:False
struct_tagVS_FIXEDFILEINFO._fields_ = [
    ('dwSignature', ctypes.c_uint32),
    ('dwStrucVersion', ctypes.c_uint32),
    ('dwFileVersionMS', ctypes.c_uint32),
    ('dwFileVersionLS', ctypes.c_uint32),
    ('dwProductVersionMS', ctypes.c_uint32),
    ('dwProductVersionLS', ctypes.c_uint32),
    ('dwFileFlagsMask', ctypes.c_uint32),
    ('dwFileFlags', ctypes.c_uint32),
    ('dwFileOS', ctypes.c_uint32),
    ('dwFileType', ctypes.c_uint32),
    ('dwFileSubtype', ctypes.c_uint32),
    ('dwFileDateMS', ctypes.c_uint32),
    ('dwFileDateLS', ctypes.c_uint32),
]

VS_FIXEDFILEINFO = struct_tagVS_FIXEDFILEINFO
LSTATUS = ctypes.c_int32
REGSAM = ctypes.c_uint32
class struct_val_context(Structure):
    pass

struct_val_context._pack_ = 1 # source:False
struct_val_context._fields_ = [
    ('valuelen', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('value_context', ctypes.POINTER(None)),
    ('val_buff_ptr', ctypes.POINTER(None)),
]

PVALCONTEXT = ctypes.POINTER(struct_val_context)
class struct_pvalueA(Structure):
    pass

struct_pvalueA._pack_ = 1 # source:False
struct_pvalueA._fields_ = [
    ('pv_valuename', ctypes.POINTER(ctypes.c_char)),
    ('pv_valuelen', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pv_value_context', ctypes.POINTER(None)),
    ('pv_type', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

PVALUEA = struct_pvalueA
PPVALUEA = ctypes.POINTER(struct_pvalueA)
class struct_pvalueW(Structure):
    pass

struct_pvalueW._pack_ = 1 # source:False
struct_pvalueW._fields_ = [
    ('pv_valuename', ctypes.POINTER(ctypes.c_int16)),
    ('pv_valuelen', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pv_value_context', ctypes.POINTER(None)),
    ('pv_type', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

PVALUEW = struct_pvalueW
PPVALUEW = ctypes.POINTER(struct_pvalueW)
PVALUE = struct_pvalueA
PPVALUE = ctypes.POINTER(struct_pvalueA)
_E97FFAC4D53CD96D3B8FD35DF59ADA29 = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(struct_val_context), ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32)
PQUERYHANDLER = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(struct_val_context), ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32)
class struct_provider_info(Structure):
    pass

struct_provider_info._pack_ = 1 # source:False
struct_provider_info._fields_ = [
    ('pi_R0_1val', ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(struct_val_context), ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32)),
    ('pi_R0_allvals', ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(struct_val_context), ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32)),
    ('pi_R3_1val', ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(struct_val_context), ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32)),
    ('pi_R3_allvals', ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(struct_val_context), ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32)),
    ('pi_flags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pi_key_context', ctypes.POINTER(None)),
]

REG_PROVIDER = struct_provider_info
PPROVIDER = ctypes.POINTER(struct_provider_info)
class struct_value_entA(Structure):
    pass

struct_value_entA._pack_ = 1 # source:False
struct_value_entA._fields_ = [
    ('ve_valuename', ctypes.POINTER(ctypes.c_char)),
    ('ve_valuelen', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ve_valueptr', ctypes.c_uint64),
    ('ve_type', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VALENTA = struct_value_entA
PVALENTA = ctypes.POINTER(struct_value_entA)
class struct_value_entW(Structure):
    pass

struct_value_entW._pack_ = 1 # source:False
struct_value_entW._fields_ = [
    ('ve_valuename', ctypes.POINTER(ctypes.c_int16)),
    ('ve_valuelen', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ve_valueptr', ctypes.c_uint64),
    ('ve_type', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

VALENTW = struct_value_entW
PVALENTW = ctypes.POINTER(struct_value_entW)
VALENT = struct_value_entA
PVALENT = ctypes.POINTER(struct_value_entA)
class struct__NETRESOURCEA(Structure):
    pass

struct__NETRESOURCEA._pack_ = 1 # source:False
struct__NETRESOURCEA._fields_ = [
    ('dwScope', ctypes.c_uint32),
    ('dwType', ctypes.c_uint32),
    ('dwDisplayType', ctypes.c_uint32),
    ('dwUsage', ctypes.c_uint32),
    ('lpLocalName', ctypes.POINTER(ctypes.c_char)),
    ('lpRemoteName', ctypes.POINTER(ctypes.c_char)),
    ('lpComment', ctypes.POINTER(ctypes.c_char)),
    ('lpProvider', ctypes.POINTER(ctypes.c_char)),
]

NETRESOURCEA = struct__NETRESOURCEA
LPNETRESOURCEA = ctypes.POINTER(struct__NETRESOURCEA)
class struct__NETRESOURCEW(Structure):
    pass

struct__NETRESOURCEW._pack_ = 1 # source:False
struct__NETRESOURCEW._fields_ = [
    ('dwScope', ctypes.c_uint32),
    ('dwType', ctypes.c_uint32),
    ('dwDisplayType', ctypes.c_uint32),
    ('dwUsage', ctypes.c_uint32),
    ('lpLocalName', ctypes.POINTER(ctypes.c_int16)),
    ('lpRemoteName', ctypes.POINTER(ctypes.c_int16)),
    ('lpComment', ctypes.POINTER(ctypes.c_int16)),
    ('lpProvider', ctypes.POINTER(ctypes.c_int16)),
]

NETRESOURCEW = struct__NETRESOURCEW
LPNETRESOURCEW = ctypes.POINTER(struct__NETRESOURCEW)
NETRESOURCE = struct__NETRESOURCEA
LPNETRESOURCE = ctypes.POINTER(struct__NETRESOURCEA)
class struct__CONNECTDLGSTRUCTA(Structure):
    pass

struct__CONNECTDLGSTRUCTA._pack_ = 1 # source:False
struct__CONNECTDLGSTRUCTA._fields_ = [
    ('cbStructure', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hwndOwner', ctypes.POINTER(struct_HWND__)),
    ('lpConnRes', ctypes.POINTER(struct__NETRESOURCEA)),
    ('dwFlags', ctypes.c_uint32),
    ('dwDevNum', ctypes.c_uint32),
]

CONNECTDLGSTRUCTA = struct__CONNECTDLGSTRUCTA
LPCONNECTDLGSTRUCTA = ctypes.POINTER(struct__CONNECTDLGSTRUCTA)
class struct__CONNECTDLGSTRUCTW(Structure):
    pass

struct__CONNECTDLGSTRUCTW._pack_ = 1 # source:False
struct__CONNECTDLGSTRUCTW._fields_ = [
    ('cbStructure', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hwndOwner', ctypes.POINTER(struct_HWND__)),
    ('lpConnRes', ctypes.POINTER(struct__NETRESOURCEW)),
    ('dwFlags', ctypes.c_uint32),
    ('dwDevNum', ctypes.c_uint32),
]

CONNECTDLGSTRUCTW = struct__CONNECTDLGSTRUCTW
LPCONNECTDLGSTRUCTW = ctypes.POINTER(struct__CONNECTDLGSTRUCTW)
CONNECTDLGSTRUCT = struct__CONNECTDLGSTRUCTA
LPCONNECTDLGSTRUCT = ctypes.POINTER(struct__CONNECTDLGSTRUCTA)
class struct__DISCDLGSTRUCTA(Structure):
    pass

struct__DISCDLGSTRUCTA._pack_ = 1 # source:False
struct__DISCDLGSTRUCTA._fields_ = [
    ('cbStructure', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hwndOwner', ctypes.POINTER(struct_HWND__)),
    ('lpLocalName', ctypes.POINTER(ctypes.c_char)),
    ('lpRemoteName', ctypes.POINTER(ctypes.c_char)),
    ('dwFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

DISCDLGSTRUCTA = struct__DISCDLGSTRUCTA
LPDISCDLGSTRUCTA = ctypes.POINTER(struct__DISCDLGSTRUCTA)
class struct__DISCDLGSTRUCTW(Structure):
    pass

struct__DISCDLGSTRUCTW._pack_ = 1 # source:False
struct__DISCDLGSTRUCTW._fields_ = [
    ('cbStructure', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hwndOwner', ctypes.POINTER(struct_HWND__)),
    ('lpLocalName', ctypes.POINTER(ctypes.c_int16)),
    ('lpRemoteName', ctypes.POINTER(ctypes.c_int16)),
    ('dwFlags', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

DISCDLGSTRUCTW = struct__DISCDLGSTRUCTW
LPDISCDLGSTRUCTW = ctypes.POINTER(struct__DISCDLGSTRUCTW)
DISCDLGSTRUCT = struct__DISCDLGSTRUCTA
LPDISCDLGSTRUCT = ctypes.POINTER(struct__DISCDLGSTRUCTA)
class struct__UNIVERSAL_NAME_INFOA(Structure):
    pass

struct__UNIVERSAL_NAME_INFOA._pack_ = 1 # source:False
struct__UNIVERSAL_NAME_INFOA._fields_ = [
    ('lpUniversalName', ctypes.POINTER(ctypes.c_char)),
]

UNIVERSAL_NAME_INFOA = struct__UNIVERSAL_NAME_INFOA
LPUNIVERSAL_NAME_INFOA = ctypes.POINTER(struct__UNIVERSAL_NAME_INFOA)
class struct__UNIVERSAL_NAME_INFOW(Structure):
    pass

struct__UNIVERSAL_NAME_INFOW._pack_ = 1 # source:False
struct__UNIVERSAL_NAME_INFOW._fields_ = [
    ('lpUniversalName', ctypes.POINTER(ctypes.c_int16)),
]

UNIVERSAL_NAME_INFOW = struct__UNIVERSAL_NAME_INFOW
LPUNIVERSAL_NAME_INFOW = ctypes.POINTER(struct__UNIVERSAL_NAME_INFOW)
UNIVERSAL_NAME_INFO = struct__UNIVERSAL_NAME_INFOA
LPUNIVERSAL_NAME_INFO = ctypes.POINTER(struct__UNIVERSAL_NAME_INFOA)
class struct__REMOTE_NAME_INFOA(Structure):
    pass

struct__REMOTE_NAME_INFOA._pack_ = 1 # source:False
struct__REMOTE_NAME_INFOA._fields_ = [
    ('lpUniversalName', ctypes.POINTER(ctypes.c_char)),
    ('lpConnectionName', ctypes.POINTER(ctypes.c_char)),
    ('lpRemainingPath', ctypes.POINTER(ctypes.c_char)),
]

REMOTE_NAME_INFOA = struct__REMOTE_NAME_INFOA
LPREMOTE_NAME_INFOA = ctypes.POINTER(struct__REMOTE_NAME_INFOA)
class struct__REMOTE_NAME_INFOW(Structure):
    pass

struct__REMOTE_NAME_INFOW._pack_ = 1 # source:False
struct__REMOTE_NAME_INFOW._fields_ = [
    ('lpUniversalName', ctypes.POINTER(ctypes.c_int16)),
    ('lpConnectionName', ctypes.POINTER(ctypes.c_int16)),
    ('lpRemainingPath', ctypes.POINTER(ctypes.c_int16)),
]

REMOTE_NAME_INFOW = struct__REMOTE_NAME_INFOW
LPREMOTE_NAME_INFOW = ctypes.POINTER(struct__REMOTE_NAME_INFOW)
REMOTE_NAME_INFO = struct__REMOTE_NAME_INFOA
LPREMOTE_NAME_INFO = ctypes.POINTER(struct__REMOTE_NAME_INFOA)
class struct__NETINFOSTRUCT(Structure):
    pass

struct__NETINFOSTRUCT._pack_ = 1 # source:False
struct__NETINFOSTRUCT._fields_ = [
    ('cbStructure', ctypes.c_uint32),
    ('dwProviderVersion', ctypes.c_uint32),
    ('dwStatus', ctypes.c_uint32),
    ('dwCharacteristics', ctypes.c_uint32),
    ('dwHandle', ctypes.c_uint64),
    ('wNetType', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('dwPrinters', ctypes.c_uint32),
    ('dwDrives', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

NETINFOSTRUCT = struct__NETINFOSTRUCT
LPNETINFOSTRUCT = ctypes.POINTER(struct__NETINFOSTRUCT)
class struct__NETCONNECTINFOSTRUCT(Structure):
    pass

struct__NETCONNECTINFOSTRUCT._pack_ = 1 # source:False
struct__NETCONNECTINFOSTRUCT._fields_ = [
    ('cbStructure', ctypes.c_uint32),
    ('dwFlags', ctypes.c_uint32),
    ('dwSpeed', ctypes.c_uint32),
    ('dwDelay', ctypes.c_uint32),
    ('dwOptDataSize', ctypes.c_uint32),
]

NETCONNECTINFOSTRUCT = struct__NETCONNECTINFOSTRUCT
LPNETCONNECTINFOSTRUCT = ctypes.POINTER(struct__NETCONNECTINFOSTRUCT)
PUWSTR_C = ctypes.POINTER(ctypes.c_int16)
class struct_SERVICE_TRIGGER_CUSTOM_STATE_ID(Structure):
    pass

struct_SERVICE_TRIGGER_CUSTOM_STATE_ID._pack_ = 1 # source:False
struct_SERVICE_TRIGGER_CUSTOM_STATE_ID._fields_ = [
    ('Data', ctypes.c_uint32 * 2),
]

class struct__E99838163ECB7E7B1035AEA9B1267B46(Structure):
    pass

struct__E99838163ECB7E7B1035AEA9B1267B46._pack_ = 1 # source:False
struct__E99838163ECB7E7B1035AEA9B1267B46._fields_ = [
    ('DataOffset', ctypes.c_uint32),
    ('Data', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

class union__SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM___79768E4F68CBD00179EF5BE8FD6925FD(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('CustomStateId', struct_SERVICE_TRIGGER_CUSTOM_STATE_ID),
    ('s', struct__E99838163ECB7E7B1035AEA9B1267B46),
     ]

class struct__SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('u', union__SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM___79768E4F68CBD00179EF5BE8FD6925FD),
     ]

SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = struct__SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM
LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = ctypes.POINTER(struct__SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM)
class struct__SERVICE_DESCRIPTIONA(Structure):
    pass

struct__SERVICE_DESCRIPTIONA._pack_ = 1 # source:False
struct__SERVICE_DESCRIPTIONA._fields_ = [
    ('lpDescription', ctypes.POINTER(ctypes.c_char)),
]

SERVICE_DESCRIPTIONA = struct__SERVICE_DESCRIPTIONA
LPSERVICE_DESCRIPTIONA = ctypes.POINTER(struct__SERVICE_DESCRIPTIONA)
class struct__SERVICE_DESCRIPTIONW(Structure):
    pass

struct__SERVICE_DESCRIPTIONW._pack_ = 1 # source:False
struct__SERVICE_DESCRIPTIONW._fields_ = [
    ('lpDescription', ctypes.POINTER(ctypes.c_int16)),
]

SERVICE_DESCRIPTIONW = struct__SERVICE_DESCRIPTIONW
LPSERVICE_DESCRIPTIONW = ctypes.POINTER(struct__SERVICE_DESCRIPTIONW)
SERVICE_DESCRIPTION = struct__SERVICE_DESCRIPTIONA
LPSERVICE_DESCRIPTION = ctypes.POINTER(struct__SERVICE_DESCRIPTIONA)

# values for enumeration '_SC_ACTION_TYPE'
_SC_ACTION_TYPE__enumvalues = {
    0: 'SC_ACTION_NONE',
    1: 'SC_ACTION_RESTART',
    2: 'SC_ACTION_REBOOT',
    3: 'SC_ACTION_RUN_COMMAND',
    4: 'SC_ACTION_OWN_RESTART',
}
SC_ACTION_NONE = 0
SC_ACTION_RESTART = 1
SC_ACTION_REBOOT = 2
SC_ACTION_RUN_COMMAND = 3
SC_ACTION_OWN_RESTART = 4
_SC_ACTION_TYPE = ctypes.c_uint32 # enum
SC_ACTION_TYPE = _SC_ACTION_TYPE
SC_ACTION_TYPE__enumvalues = _SC_ACTION_TYPE__enumvalues
class struct__SC_ACTION(Structure):
    pass

struct__SC_ACTION._pack_ = 1 # source:False
struct__SC_ACTION._fields_ = [
    ('Type', SC_ACTION_TYPE),
    ('Delay', ctypes.c_uint32),
]

SC_ACTION = struct__SC_ACTION
LPSC_ACTION = ctypes.POINTER(struct__SC_ACTION)
class struct__SERVICE_FAILURE_ACTIONSA(Structure):
    pass

struct__SERVICE_FAILURE_ACTIONSA._pack_ = 1 # source:False
struct__SERVICE_FAILURE_ACTIONSA._fields_ = [
    ('dwResetPeriod', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpRebootMsg', ctypes.POINTER(ctypes.c_char)),
    ('lpCommand', ctypes.POINTER(ctypes.c_char)),
    ('cActions', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpsaActions', ctypes.POINTER(struct__SC_ACTION)),
]

SERVICE_FAILURE_ACTIONSA = struct__SERVICE_FAILURE_ACTIONSA
LPSERVICE_FAILURE_ACTIONSA = ctypes.POINTER(struct__SERVICE_FAILURE_ACTIONSA)
class struct__SERVICE_FAILURE_ACTIONSW(Structure):
    pass

struct__SERVICE_FAILURE_ACTIONSW._pack_ = 1 # source:False
struct__SERVICE_FAILURE_ACTIONSW._fields_ = [
    ('dwResetPeriod', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpRebootMsg', ctypes.POINTER(ctypes.c_int16)),
    ('lpCommand', ctypes.POINTER(ctypes.c_int16)),
    ('cActions', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpsaActions', ctypes.POINTER(struct__SC_ACTION)),
]

SERVICE_FAILURE_ACTIONSW = struct__SERVICE_FAILURE_ACTIONSW
LPSERVICE_FAILURE_ACTIONSW = ctypes.POINTER(struct__SERVICE_FAILURE_ACTIONSW)
SERVICE_FAILURE_ACTIONS = struct__SERVICE_FAILURE_ACTIONSA
LPSERVICE_FAILURE_ACTIONS = ctypes.POINTER(struct__SERVICE_FAILURE_ACTIONSA)
class struct__SERVICE_DELAYED_AUTO_START_INFO(Structure):
    pass

struct__SERVICE_DELAYED_AUTO_START_INFO._pack_ = 1 # source:False
struct__SERVICE_DELAYED_AUTO_START_INFO._fields_ = [
    ('fDelayedAutostart', ctypes.c_int32),
]

SERVICE_DELAYED_AUTO_START_INFO = struct__SERVICE_DELAYED_AUTO_START_INFO
LPSERVICE_DELAYED_AUTO_START_INFO = ctypes.POINTER(struct__SERVICE_DELAYED_AUTO_START_INFO)
class struct__SERVICE_FAILURE_ACTIONS_FLAG(Structure):
    pass

struct__SERVICE_FAILURE_ACTIONS_FLAG._pack_ = 1 # source:False
struct__SERVICE_FAILURE_ACTIONS_FLAG._fields_ = [
    ('fFailureActionsOnNonCrashFailures', ctypes.c_int32),
]

SERVICE_FAILURE_ACTIONS_FLAG = struct__SERVICE_FAILURE_ACTIONS_FLAG
LPSERVICE_FAILURE_ACTIONS_FLAG = ctypes.POINTER(struct__SERVICE_FAILURE_ACTIONS_FLAG)
class struct__SERVICE_SID_INFO(Structure):
    pass

struct__SERVICE_SID_INFO._pack_ = 1 # source:False
struct__SERVICE_SID_INFO._fields_ = [
    ('dwServiceSidType', ctypes.c_uint32),
]

SERVICE_SID_INFO = struct__SERVICE_SID_INFO
LPSERVICE_SID_INFO = ctypes.POINTER(struct__SERVICE_SID_INFO)
class struct__SERVICE_REQUIRED_PRIVILEGES_INFOA(Structure):
    pass

struct__SERVICE_REQUIRED_PRIVILEGES_INFOA._pack_ = 1 # source:False
struct__SERVICE_REQUIRED_PRIVILEGES_INFOA._fields_ = [
    ('pmszRequiredPrivileges', ctypes.POINTER(ctypes.c_char)),
]

SERVICE_REQUIRED_PRIVILEGES_INFOA = struct__SERVICE_REQUIRED_PRIVILEGES_INFOA
LPSERVICE_REQUIRED_PRIVILEGES_INFOA = ctypes.POINTER(struct__SERVICE_REQUIRED_PRIVILEGES_INFOA)
class struct__SERVICE_REQUIRED_PRIVILEGES_INFOW(Structure):
    pass

struct__SERVICE_REQUIRED_PRIVILEGES_INFOW._pack_ = 1 # source:False
struct__SERVICE_REQUIRED_PRIVILEGES_INFOW._fields_ = [
    ('pmszRequiredPrivileges', ctypes.POINTER(ctypes.c_int16)),
]

SERVICE_REQUIRED_PRIVILEGES_INFOW = struct__SERVICE_REQUIRED_PRIVILEGES_INFOW
LPSERVICE_REQUIRED_PRIVILEGES_INFOW = ctypes.POINTER(struct__SERVICE_REQUIRED_PRIVILEGES_INFOW)
SERVICE_REQUIRED_PRIVILEGES_INFO = struct__SERVICE_REQUIRED_PRIVILEGES_INFOA
LPSERVICE_REQUIRED_PRIVILEGES_INFO = ctypes.POINTER(struct__SERVICE_REQUIRED_PRIVILEGES_INFOA)
class struct__SERVICE_PRESHUTDOWN_INFO(Structure):
    pass

struct__SERVICE_PRESHUTDOWN_INFO._pack_ = 1 # source:False
struct__SERVICE_PRESHUTDOWN_INFO._fields_ = [
    ('dwPreshutdownTimeout', ctypes.c_uint32),
]

SERVICE_PRESHUTDOWN_INFO = struct__SERVICE_PRESHUTDOWN_INFO
LPSERVICE_PRESHUTDOWN_INFO = ctypes.POINTER(struct__SERVICE_PRESHUTDOWN_INFO)
class struct__SERVICE_TRIGGER_SPECIFIC_DATA_ITEM(Structure):
    pass

struct__SERVICE_TRIGGER_SPECIFIC_DATA_ITEM._pack_ = 1 # source:False
struct__SERVICE_TRIGGER_SPECIFIC_DATA_ITEM._fields_ = [
    ('dwDataType', ctypes.c_uint32),
    ('cbData', ctypes.c_uint32),
    ('pData', ctypes.POINTER(ctypes.c_ubyte)),
]

SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = struct__SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM = ctypes.POINTER(struct__SERVICE_TRIGGER_SPECIFIC_DATA_ITEM)
class struct__SERVICE_TRIGGER(Structure):
    pass

struct__SERVICE_TRIGGER._pack_ = 1 # source:False
struct__SERVICE_TRIGGER._fields_ = [
    ('dwTriggerType', ctypes.c_uint32),
    ('dwAction', ctypes.c_uint32),
    ('pTriggerSubtype', ctypes.POINTER(struct__GUID)),
    ('cDataItems', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pDataItems', ctypes.POINTER(struct__SERVICE_TRIGGER_SPECIFIC_DATA_ITEM)),
]

SERVICE_TRIGGER = struct__SERVICE_TRIGGER
PSERVICE_TRIGGER = ctypes.POINTER(struct__SERVICE_TRIGGER)
class struct__SERVICE_TRIGGER_INFO(Structure):
    pass

struct__SERVICE_TRIGGER_INFO._pack_ = 1 # source:False
struct__SERVICE_TRIGGER_INFO._fields_ = [
    ('cTriggers', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pTriggers', ctypes.POINTER(struct__SERVICE_TRIGGER)),
    ('pReserved', ctypes.POINTER(ctypes.c_ubyte)),
]

SERVICE_TRIGGER_INFO = struct__SERVICE_TRIGGER_INFO
PSERVICE_TRIGGER_INFO = ctypes.POINTER(struct__SERVICE_TRIGGER_INFO)
class struct__SERVICE_PREFERRED_NODE_INFO(Structure):
    pass

struct__SERVICE_PREFERRED_NODE_INFO._pack_ = 1 # source:False
struct__SERVICE_PREFERRED_NODE_INFO._fields_ = [
    ('usPreferredNode', ctypes.c_uint16),
    ('fDelete', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte),
]

SERVICE_PREFERRED_NODE_INFO = struct__SERVICE_PREFERRED_NODE_INFO
LPSERVICE_PREFERRED_NODE_INFO = ctypes.POINTER(struct__SERVICE_PREFERRED_NODE_INFO)
class struct__SERVICE_TIMECHANGE_INFO(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('liNewTime', LARGE_INTEGER),
    ('liOldTime', LARGE_INTEGER),
     ]

SERVICE_TIMECHANGE_INFO = struct__SERVICE_TIMECHANGE_INFO
PSERVICE_TIMECHANGE_INFO = ctypes.POINTER(struct__SERVICE_TIMECHANGE_INFO)
class struct__SERVICE_LAUNCH_PROTECTED_INFO(Structure):
    pass

struct__SERVICE_LAUNCH_PROTECTED_INFO._pack_ = 1 # source:False
struct__SERVICE_LAUNCH_PROTECTED_INFO._fields_ = [
    ('dwLaunchProtected', ctypes.c_uint32),
]

SERVICE_LAUNCH_PROTECTED_INFO = struct__SERVICE_LAUNCH_PROTECTED_INFO
PSERVICE_LAUNCH_PROTECTED_INFO = ctypes.POINTER(struct__SERVICE_LAUNCH_PROTECTED_INFO)
class struct_SC_HANDLE__(Structure):
    pass

struct_SC_HANDLE__._pack_ = 1 # source:False
struct_SC_HANDLE__._fields_ = [
    ('unused', ctypes.c_int32),
]

SC_HANDLE = ctypes.POINTER(struct_SC_HANDLE__)
LPSC_HANDLE = ctypes.POINTER(ctypes.POINTER(struct_SC_HANDLE__))
class struct_SERVICE_STATUS_HANDLE__(Structure):
    pass

struct_SERVICE_STATUS_HANDLE__._pack_ = 1 # source:False
struct_SERVICE_STATUS_HANDLE__._fields_ = [
    ('unused', ctypes.c_int32),
]

SERVICE_STATUS_HANDLE = ctypes.POINTER(struct_SERVICE_STATUS_HANDLE__)

# values for enumeration '_SC_STATUS_TYPE'
_SC_STATUS_TYPE__enumvalues = {
    0: 'SC_STATUS_PROCESS_INFO',
}
SC_STATUS_PROCESS_INFO = 0
_SC_STATUS_TYPE = ctypes.c_uint32 # enum
SC_STATUS_TYPE = _SC_STATUS_TYPE
SC_STATUS_TYPE__enumvalues = _SC_STATUS_TYPE__enumvalues

# values for enumeration '_SC_ENUM_TYPE'
_SC_ENUM_TYPE__enumvalues = {
    0: 'SC_ENUM_PROCESS_INFO',
}
SC_ENUM_PROCESS_INFO = 0
_SC_ENUM_TYPE = ctypes.c_uint32 # enum
SC_ENUM_TYPE = _SC_ENUM_TYPE
SC_ENUM_TYPE__enumvalues = _SC_ENUM_TYPE__enumvalues
class struct__SERVICE_STATUS(Structure):
    pass

struct__SERVICE_STATUS._pack_ = 1 # source:False
struct__SERVICE_STATUS._fields_ = [
    ('dwServiceType', ctypes.c_uint32),
    ('dwCurrentState', ctypes.c_uint32),
    ('dwControlsAccepted', ctypes.c_uint32),
    ('dwWin32ExitCode', ctypes.c_uint32),
    ('dwServiceSpecificExitCode', ctypes.c_uint32),
    ('dwCheckPoint', ctypes.c_uint32),
    ('dwWaitHint', ctypes.c_uint32),
]

SERVICE_STATUS = struct__SERVICE_STATUS
LPSERVICE_STATUS = ctypes.POINTER(struct__SERVICE_STATUS)
class struct__SERVICE_STATUS_PROCESS(Structure):
    pass

struct__SERVICE_STATUS_PROCESS._pack_ = 1 # source:False
struct__SERVICE_STATUS_PROCESS._fields_ = [
    ('dwServiceType', ctypes.c_uint32),
    ('dwCurrentState', ctypes.c_uint32),
    ('dwControlsAccepted', ctypes.c_uint32),
    ('dwWin32ExitCode', ctypes.c_uint32),
    ('dwServiceSpecificExitCode', ctypes.c_uint32),
    ('dwCheckPoint', ctypes.c_uint32),
    ('dwWaitHint', ctypes.c_uint32),
    ('dwProcessId', ctypes.c_uint32),
    ('dwServiceFlags', ctypes.c_uint32),
]

SERVICE_STATUS_PROCESS = struct__SERVICE_STATUS_PROCESS
LPSERVICE_STATUS_PROCESS = ctypes.POINTER(struct__SERVICE_STATUS_PROCESS)
class struct__ENUM_SERVICE_STATUSA(Structure):
    pass

struct__ENUM_SERVICE_STATUSA._pack_ = 1 # source:False
struct__ENUM_SERVICE_STATUSA._fields_ = [
    ('lpServiceName', ctypes.POINTER(ctypes.c_char)),
    ('lpDisplayName', ctypes.POINTER(ctypes.c_char)),
    ('ServiceStatus', SERVICE_STATUS),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

ENUM_SERVICE_STATUSA = struct__ENUM_SERVICE_STATUSA
LPENUM_SERVICE_STATUSA = ctypes.POINTER(struct__ENUM_SERVICE_STATUSA)
class struct__ENUM_SERVICE_STATUSW(Structure):
    pass

struct__ENUM_SERVICE_STATUSW._pack_ = 1 # source:False
struct__ENUM_SERVICE_STATUSW._fields_ = [
    ('lpServiceName', ctypes.POINTER(ctypes.c_int16)),
    ('lpDisplayName', ctypes.POINTER(ctypes.c_int16)),
    ('ServiceStatus', SERVICE_STATUS),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

ENUM_SERVICE_STATUSW = struct__ENUM_SERVICE_STATUSW
LPENUM_SERVICE_STATUSW = ctypes.POINTER(struct__ENUM_SERVICE_STATUSW)
ENUM_SERVICE_STATUS = struct__ENUM_SERVICE_STATUSA
LPENUM_SERVICE_STATUS = ctypes.POINTER(struct__ENUM_SERVICE_STATUSA)
class struct__ENUM_SERVICE_STATUS_PROCESSA(Structure):
    pass

struct__ENUM_SERVICE_STATUS_PROCESSA._pack_ = 1 # source:False
struct__ENUM_SERVICE_STATUS_PROCESSA._fields_ = [
    ('lpServiceName', ctypes.POINTER(ctypes.c_char)),
    ('lpDisplayName', ctypes.POINTER(ctypes.c_char)),
    ('ServiceStatusProcess', SERVICE_STATUS_PROCESS),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

ENUM_SERVICE_STATUS_PROCESSA = struct__ENUM_SERVICE_STATUS_PROCESSA
LPENUM_SERVICE_STATUS_PROCESSA = ctypes.POINTER(struct__ENUM_SERVICE_STATUS_PROCESSA)
class struct__ENUM_SERVICE_STATUS_PROCESSW(Structure):
    pass

struct__ENUM_SERVICE_STATUS_PROCESSW._pack_ = 1 # source:False
struct__ENUM_SERVICE_STATUS_PROCESSW._fields_ = [
    ('lpServiceName', ctypes.POINTER(ctypes.c_int16)),
    ('lpDisplayName', ctypes.POINTER(ctypes.c_int16)),
    ('ServiceStatusProcess', SERVICE_STATUS_PROCESS),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

ENUM_SERVICE_STATUS_PROCESSW = struct__ENUM_SERVICE_STATUS_PROCESSW
LPENUM_SERVICE_STATUS_PROCESSW = ctypes.POINTER(struct__ENUM_SERVICE_STATUS_PROCESSW)
ENUM_SERVICE_STATUS_PROCESS = struct__ENUM_SERVICE_STATUS_PROCESSA
LPENUM_SERVICE_STATUS_PROCESS = ctypes.POINTER(struct__ENUM_SERVICE_STATUS_PROCESSA)
SC_LOCK = ctypes.POINTER(None)
class struct__QUERY_SERVICE_LOCK_STATUSA(Structure):
    pass

struct__QUERY_SERVICE_LOCK_STATUSA._pack_ = 1 # source:False
struct__QUERY_SERVICE_LOCK_STATUSA._fields_ = [
    ('fIsLocked', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpLockOwner', ctypes.POINTER(ctypes.c_char)),
    ('dwLockDuration', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

QUERY_SERVICE_LOCK_STATUSA = struct__QUERY_SERVICE_LOCK_STATUSA
LPQUERY_SERVICE_LOCK_STATUSA = ctypes.POINTER(struct__QUERY_SERVICE_LOCK_STATUSA)
class struct__QUERY_SERVICE_LOCK_STATUSW(Structure):
    pass

struct__QUERY_SERVICE_LOCK_STATUSW._pack_ = 1 # source:False
struct__QUERY_SERVICE_LOCK_STATUSW._fields_ = [
    ('fIsLocked', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpLockOwner', ctypes.POINTER(ctypes.c_int16)),
    ('dwLockDuration', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

QUERY_SERVICE_LOCK_STATUSW = struct__QUERY_SERVICE_LOCK_STATUSW
LPQUERY_SERVICE_LOCK_STATUSW = ctypes.POINTER(struct__QUERY_SERVICE_LOCK_STATUSW)
QUERY_SERVICE_LOCK_STATUS = struct__QUERY_SERVICE_LOCK_STATUSA
LPQUERY_SERVICE_LOCK_STATUS = ctypes.POINTER(struct__QUERY_SERVICE_LOCK_STATUSA)
class struct__QUERY_SERVICE_CONFIGA(Structure):
    pass

struct__QUERY_SERVICE_CONFIGA._pack_ = 1 # source:False
struct__QUERY_SERVICE_CONFIGA._fields_ = [
    ('dwServiceType', ctypes.c_uint32),
    ('dwStartType', ctypes.c_uint32),
    ('dwErrorControl', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpBinaryPathName', ctypes.POINTER(ctypes.c_char)),
    ('lpLoadOrderGroup', ctypes.POINTER(ctypes.c_char)),
    ('dwTagId', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpDependencies', ctypes.POINTER(ctypes.c_char)),
    ('lpServiceStartName', ctypes.POINTER(ctypes.c_char)),
    ('lpDisplayName', ctypes.POINTER(ctypes.c_char)),
]

QUERY_SERVICE_CONFIGA = struct__QUERY_SERVICE_CONFIGA
LPQUERY_SERVICE_CONFIGA = ctypes.POINTER(struct__QUERY_SERVICE_CONFIGA)
class struct__QUERY_SERVICE_CONFIGW(Structure):
    pass

struct__QUERY_SERVICE_CONFIGW._pack_ = 1 # source:False
struct__QUERY_SERVICE_CONFIGW._fields_ = [
    ('dwServiceType', ctypes.c_uint32),
    ('dwStartType', ctypes.c_uint32),
    ('dwErrorControl', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpBinaryPathName', ctypes.POINTER(ctypes.c_int16)),
    ('lpLoadOrderGroup', ctypes.POINTER(ctypes.c_int16)),
    ('dwTagId', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpDependencies', ctypes.POINTER(ctypes.c_int16)),
    ('lpServiceStartName', ctypes.POINTER(ctypes.c_int16)),
    ('lpDisplayName', ctypes.POINTER(ctypes.c_int16)),
]

QUERY_SERVICE_CONFIGW = struct__QUERY_SERVICE_CONFIGW
LPQUERY_SERVICE_CONFIGW = ctypes.POINTER(struct__QUERY_SERVICE_CONFIGW)
QUERY_SERVICE_CONFIG = struct__QUERY_SERVICE_CONFIGA
LPQUERY_SERVICE_CONFIG = ctypes.POINTER(struct__QUERY_SERVICE_CONFIGA)
_5F65BF975D82F63B4958868192FF52AB = ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)))
_74CFF1AF804620B8170C44E80113F2BA = ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))
LPSERVICE_MAIN_FUNCTIONW = ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)))
LPSERVICE_MAIN_FUNCTIONA = ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))
class struct__SERVICE_TABLE_ENTRYA(Structure):
    pass

struct__SERVICE_TABLE_ENTRYA._pack_ = 1 # source:False
struct__SERVICE_TABLE_ENTRYA._fields_ = [
    ('lpServiceName', ctypes.POINTER(ctypes.c_char)),
    ('lpServiceProc', ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(ctypes.c_char)))),
]

SERVICE_TABLE_ENTRYA = struct__SERVICE_TABLE_ENTRYA
LPSERVICE_TABLE_ENTRYA = ctypes.POINTER(struct__SERVICE_TABLE_ENTRYA)
class struct__SERVICE_TABLE_ENTRYW(Structure):
    pass

struct__SERVICE_TABLE_ENTRYW._pack_ = 1 # source:False
struct__SERVICE_TABLE_ENTRYW._fields_ = [
    ('lpServiceName', ctypes.POINTER(ctypes.c_int16)),
    ('lpServiceProc', ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)))),
]

SERVICE_TABLE_ENTRYW = struct__SERVICE_TABLE_ENTRYW
LPSERVICE_TABLE_ENTRYW = ctypes.POINTER(struct__SERVICE_TABLE_ENTRYW)
SERVICE_TABLE_ENTRY = struct__SERVICE_TABLE_ENTRYA
LPSERVICE_TABLE_ENTRY = ctypes.POINTER(struct__SERVICE_TABLE_ENTRYA)
_05A6FE89FC294D987691F3CCEA570D81 = ctypes.CFUNCTYPE(None, ctypes.c_uint32)
_92EA8805FA07D2A0B477D6A4D4C889CA = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(None))
LPHANDLER_FUNCTION = ctypes.CFUNCTYPE(None, ctypes.c_uint32)
LPHANDLER_FUNCTION_EX = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(None), ctypes.POINTER(None))
PFN_SC_NOTIFY_CALLBACK = ctypes.CFUNCTYPE(None, ctypes.POINTER(None))
class struct__SERVICE_NOTIFY_1(Structure):
    pass

struct__SERVICE_NOTIFY_1._pack_ = 1 # source:False
struct__SERVICE_NOTIFY_1._fields_ = [
    ('dwVersion', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pfnNotifyCallback', ctypes.CFUNCTYPE(None, ctypes.POINTER(None))),
    ('pContext', ctypes.POINTER(None)),
    ('dwNotificationStatus', ctypes.c_uint32),
    ('ServiceStatus', SERVICE_STATUS_PROCESS),
]

SERVICE_NOTIFY_1 = struct__SERVICE_NOTIFY_1
PSERVICE_NOTIFY_1 = ctypes.POINTER(struct__SERVICE_NOTIFY_1)
class struct__SERVICE_NOTIFY_2A(Structure):
    pass

struct__SERVICE_NOTIFY_2A._pack_ = 1 # source:False
struct__SERVICE_NOTIFY_2A._fields_ = [
    ('dwVersion', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pfnNotifyCallback', ctypes.CFUNCTYPE(None, ctypes.POINTER(None))),
    ('pContext', ctypes.POINTER(None)),
    ('dwNotificationStatus', ctypes.c_uint32),
    ('ServiceStatus', SERVICE_STATUS_PROCESS),
    ('dwNotificationTriggered', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pszServiceNames', ctypes.POINTER(ctypes.c_char)),
]

SERVICE_NOTIFY_2A = struct__SERVICE_NOTIFY_2A
PSERVICE_NOTIFY_2A = ctypes.POINTER(struct__SERVICE_NOTIFY_2A)
class struct__SERVICE_NOTIFY_2W(Structure):
    pass

struct__SERVICE_NOTIFY_2W._pack_ = 1 # source:False
struct__SERVICE_NOTIFY_2W._fields_ = [
    ('dwVersion', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pfnNotifyCallback', ctypes.CFUNCTYPE(None, ctypes.POINTER(None))),
    ('pContext', ctypes.POINTER(None)),
    ('dwNotificationStatus', ctypes.c_uint32),
    ('ServiceStatus', SERVICE_STATUS_PROCESS),
    ('dwNotificationTriggered', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('pszServiceNames', ctypes.POINTER(ctypes.c_int16)),
]

SERVICE_NOTIFY_2W = struct__SERVICE_NOTIFY_2W
PSERVICE_NOTIFY_2W = ctypes.POINTER(struct__SERVICE_NOTIFY_2W)
SERVICE_NOTIFY_2 = struct__SERVICE_NOTIFY_2A
PSERVICE_NOTIFY_2 = ctypes.POINTER(struct__SERVICE_NOTIFY_2A)
SERVICE_NOTIFYA = struct__SERVICE_NOTIFY_2A
PSERVICE_NOTIFYA = ctypes.POINTER(struct__SERVICE_NOTIFY_2A)
SERVICE_NOTIFYW = struct__SERVICE_NOTIFY_2W
PSERVICE_NOTIFYW = ctypes.POINTER(struct__SERVICE_NOTIFY_2W)
SERVICE_NOTIFY = struct__SERVICE_NOTIFY_2A
PSERVICE_NOTIFY = ctypes.POINTER(struct__SERVICE_NOTIFY_2A)
class struct__SERVICE_CONTROL_STATUS_REASON_PARAMSA(Structure):
    pass

struct__SERVICE_CONTROL_STATUS_REASON_PARAMSA._pack_ = 1 # source:False
struct__SERVICE_CONTROL_STATUS_REASON_PARAMSA._fields_ = [
    ('dwReason', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pszComment', ctypes.POINTER(ctypes.c_char)),
    ('ServiceStatus', SERVICE_STATUS_PROCESS),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

SERVICE_CONTROL_STATUS_REASON_PARAMSA = struct__SERVICE_CONTROL_STATUS_REASON_PARAMSA
PSERVICE_CONTROL_STATUS_REASON_PARAMSA = ctypes.POINTER(struct__SERVICE_CONTROL_STATUS_REASON_PARAMSA)
class struct__SERVICE_CONTROL_STATUS_REASON_PARAMSW(Structure):
    pass

struct__SERVICE_CONTROL_STATUS_REASON_PARAMSW._pack_ = 1 # source:False
struct__SERVICE_CONTROL_STATUS_REASON_PARAMSW._fields_ = [
    ('dwReason', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pszComment', ctypes.POINTER(ctypes.c_int16)),
    ('ServiceStatus', SERVICE_STATUS_PROCESS),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

SERVICE_CONTROL_STATUS_REASON_PARAMSW = struct__SERVICE_CONTROL_STATUS_REASON_PARAMSW
PSERVICE_CONTROL_STATUS_REASON_PARAMSW = ctypes.POINTER(struct__SERVICE_CONTROL_STATUS_REASON_PARAMSW)
SERVICE_CONTROL_STATUS_REASON_PARAMS = struct__SERVICE_CONTROL_STATUS_REASON_PARAMSA
PSERVICE_CONTROL_STATUS_REASON_PARAMS = ctypes.POINTER(struct__SERVICE_CONTROL_STATUS_REASON_PARAMSA)
class struct__SERVICE_START_REASON(Structure):
    pass

struct__SERVICE_START_REASON._pack_ = 1 # source:False
struct__SERVICE_START_REASON._fields_ = [
    ('dwReason', ctypes.c_uint32),
]

SERVICE_START_REASON = struct__SERVICE_START_REASON
PSERVICE_START_REASON = ctypes.POINTER(struct__SERVICE_START_REASON)

# values for enumeration '_SC_EVENT_TYPE'
_SC_EVENT_TYPE__enumvalues = {
    0: 'SC_EVENT_DATABASE_CHANGE',
    1: 'SC_EVENT_PROPERTY_CHANGE',
    2: 'SC_EVENT_STATUS_CHANGE',
}
SC_EVENT_DATABASE_CHANGE = 0
SC_EVENT_PROPERTY_CHANGE = 1
SC_EVENT_STATUS_CHANGE = 2
_SC_EVENT_TYPE = ctypes.c_uint32 # enum
SC_EVENT_TYPE = _SC_EVENT_TYPE
SC_EVENT_TYPE__enumvalues = _SC_EVENT_TYPE__enumvalues
PSC_EVENT_TYPE = ctypes.POINTER(_SC_EVENT_TYPE)
_148E8382801E6E2B1DBEAAD1500679EF = ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.POINTER(None))
PSC_NOTIFICATION_CALLBACK = ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.POINTER(None))
class struct__SC_NOTIFICATION_REGISTRATION(Structure):
    pass

PSC_NOTIFICATION_REGISTRATION = ctypes.POINTER(struct__SC_NOTIFICATION_REGISTRATION)

# values for enumeration 'SERVICE_REGISTRY_STATE_TYPE'
SERVICE_REGISTRY_STATE_TYPE__enumvalues = {
    0: 'ServiceRegistryStateParameters',
    1: 'ServiceRegistryStatePersistent',
    2: 'MaxServiceRegistryStateType',
}
ServiceRegistryStateParameters = 0
ServiceRegistryStatePersistent = 1
MaxServiceRegistryStateType = 2
SERVICE_REGISTRY_STATE_TYPE = ctypes.c_uint32 # enum

# values for enumeration 'SERVICE_DIRECTORY_TYPE'
SERVICE_DIRECTORY_TYPE__enumvalues = {
    0: 'ServiceDirectoryPersistentState',
    1: 'ServiceDirectoryTypeMax',
}
ServiceDirectoryPersistentState = 0
ServiceDirectoryTypeMax = 1
SERVICE_DIRECTORY_TYPE = ctypes.c_uint32 # enum
class struct__MODEMDEVCAPS(Structure):
    pass

struct__MODEMDEVCAPS._pack_ = 1 # source:False
struct__MODEMDEVCAPS._fields_ = [
    ('dwActualSize', ctypes.c_uint32),
    ('dwRequiredSize', ctypes.c_uint32),
    ('dwDevSpecificOffset', ctypes.c_uint32),
    ('dwDevSpecificSize', ctypes.c_uint32),
    ('dwModemProviderVersion', ctypes.c_uint32),
    ('dwModemManufacturerOffset', ctypes.c_uint32),
    ('dwModemManufacturerSize', ctypes.c_uint32),
    ('dwModemModelOffset', ctypes.c_uint32),
    ('dwModemModelSize', ctypes.c_uint32),
    ('dwModemVersionOffset', ctypes.c_uint32),
    ('dwModemVersionSize', ctypes.c_uint32),
    ('dwDialOptions', ctypes.c_uint32),
    ('dwCallSetupFailTimer', ctypes.c_uint32),
    ('dwInactivityTimeout', ctypes.c_uint32),
    ('dwSpeakerVolume', ctypes.c_uint32),
    ('dwSpeakerMode', ctypes.c_uint32),
    ('dwModemOptions', ctypes.c_uint32),
    ('dwMaxDTERate', ctypes.c_uint32),
    ('dwMaxDCERate', ctypes.c_uint32),
    ('abVariablePortion', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

MODEMDEVCAPS = struct__MODEMDEVCAPS
PMODEMDEVCAPS = ctypes.POINTER(struct__MODEMDEVCAPS)
LPMODEMDEVCAPS = ctypes.POINTER(struct__MODEMDEVCAPS)
class struct__MODEMSETTINGS(Structure):
    pass

struct__MODEMSETTINGS._pack_ = 1 # source:False
struct__MODEMSETTINGS._fields_ = [
    ('dwActualSize', ctypes.c_uint32),
    ('dwRequiredSize', ctypes.c_uint32),
    ('dwDevSpecificOffset', ctypes.c_uint32),
    ('dwDevSpecificSize', ctypes.c_uint32),
    ('dwCallSetupFailTimer', ctypes.c_uint32),
    ('dwInactivityTimeout', ctypes.c_uint32),
    ('dwSpeakerVolume', ctypes.c_uint32),
    ('dwSpeakerMode', ctypes.c_uint32),
    ('dwPreferredModemOptions', ctypes.c_uint32),
    ('dwNegotiatedModemOptions', ctypes.c_uint32),
    ('dwNegotiatedDCERate', ctypes.c_uint32),
    ('abVariablePortion', ctypes.c_ubyte * 1),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

MODEMSETTINGS = struct__MODEMSETTINGS
PMODEMSETTINGS = ctypes.POINTER(struct__MODEMSETTINGS)
LPMODEMSETTINGS = ctypes.POINTER(struct__MODEMSETTINGS)
class struct_HIMC__(Structure):
    pass

struct_HIMC__._pack_ = 1 # source:False
struct_HIMC__._fields_ = [
    ('unused', ctypes.c_int32),
]

HIMC = ctypes.POINTER(struct_HIMC__)
class struct_HIMCC__(Structure):
    pass

struct_HIMCC__._pack_ = 1 # source:False
struct_HIMCC__._fields_ = [
    ('unused', ctypes.c_int32),
]

HIMCC = ctypes.POINTER(struct_HIMCC__)
LPHKL = ctypes.POINTER(ctypes.POINTER(struct_HKL__))
LPUINT = ctypes.POINTER(ctypes.c_uint32)
class struct_tagCOMPOSITIONFORM(Structure):
    pass

struct_tagCOMPOSITIONFORM._pack_ = 1 # source:False
struct_tagCOMPOSITIONFORM._fields_ = [
    ('dwStyle', ctypes.c_uint32),
    ('ptCurrentPos', POINT),
    ('rcArea', RECT),
]

COMPOSITIONFORM = struct_tagCOMPOSITIONFORM
PCOMPOSITIONFORM = ctypes.POINTER(struct_tagCOMPOSITIONFORM)
NPCOMPOSITIONFORM = ctypes.POINTER(struct_tagCOMPOSITIONFORM)
LPCOMPOSITIONFORM = ctypes.POINTER(struct_tagCOMPOSITIONFORM)
class struct_tagCANDIDATEFORM(Structure):
    pass

struct_tagCANDIDATEFORM._pack_ = 1 # source:False
struct_tagCANDIDATEFORM._fields_ = [
    ('dwIndex', ctypes.c_uint32),
    ('dwStyle', ctypes.c_uint32),
    ('ptCurrentPos', POINT),
    ('rcArea', RECT),
]

CANDIDATEFORM = struct_tagCANDIDATEFORM
PCANDIDATEFORM = ctypes.POINTER(struct_tagCANDIDATEFORM)
NPCANDIDATEFORM = ctypes.POINTER(struct_tagCANDIDATEFORM)
LPCANDIDATEFORM = ctypes.POINTER(struct_tagCANDIDATEFORM)
class struct_tagCANDIDATELIST(Structure):
    pass

struct_tagCANDIDATELIST._pack_ = 1 # source:False
struct_tagCANDIDATELIST._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('dwStyle', ctypes.c_uint32),
    ('dwCount', ctypes.c_uint32),
    ('dwSelection', ctypes.c_uint32),
    ('dwPageStart', ctypes.c_uint32),
    ('dwPageSize', ctypes.c_uint32),
    ('dwOffset', ctypes.c_uint32 * 1),
]

CANDIDATELIST = struct_tagCANDIDATELIST
PCANDIDATELIST = ctypes.POINTER(struct_tagCANDIDATELIST)
NPCANDIDATELIST = ctypes.POINTER(struct_tagCANDIDATELIST)
LPCANDIDATELIST = ctypes.POINTER(struct_tagCANDIDATELIST)
class struct_tagREGISTERWORDA(Structure):
    pass

struct_tagREGISTERWORDA._pack_ = 1 # source:False
struct_tagREGISTERWORDA._fields_ = [
    ('lpReading', ctypes.POINTER(ctypes.c_char)),
    ('lpWord', ctypes.POINTER(ctypes.c_char)),
]

REGISTERWORDA = struct_tagREGISTERWORDA
PREGISTERWORDA = ctypes.POINTER(struct_tagREGISTERWORDA)
NPREGISTERWORDA = ctypes.POINTER(struct_tagREGISTERWORDA)
LPREGISTERWORDA = ctypes.POINTER(struct_tagREGISTERWORDA)
class struct_tagREGISTERWORDW(Structure):
    pass

struct_tagREGISTERWORDW._pack_ = 1 # source:False
struct_tagREGISTERWORDW._fields_ = [
    ('lpReading', ctypes.POINTER(ctypes.c_int16)),
    ('lpWord', ctypes.POINTER(ctypes.c_int16)),
]

REGISTERWORDW = struct_tagREGISTERWORDW
PREGISTERWORDW = ctypes.POINTER(struct_tagREGISTERWORDW)
NPREGISTERWORDW = ctypes.POINTER(struct_tagREGISTERWORDW)
LPREGISTERWORDW = ctypes.POINTER(struct_tagREGISTERWORDW)
REGISTERWORD = struct_tagREGISTERWORDA
PREGISTERWORD = ctypes.POINTER(struct_tagREGISTERWORDA)
NPREGISTERWORD = ctypes.POINTER(struct_tagREGISTERWORDA)
LPREGISTERWORD = ctypes.POINTER(struct_tagREGISTERWORDA)
class struct_tagRECONVERTSTRING(Structure):
    pass

struct_tagRECONVERTSTRING._pack_ = 1 # source:False
struct_tagRECONVERTSTRING._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('dwVersion', ctypes.c_uint32),
    ('dwStrLen', ctypes.c_uint32),
    ('dwStrOffset', ctypes.c_uint32),
    ('dwCompStrLen', ctypes.c_uint32),
    ('dwCompStrOffset', ctypes.c_uint32),
    ('dwTargetStrLen', ctypes.c_uint32),
    ('dwTargetStrOffset', ctypes.c_uint32),
]

RECONVERTSTRING = struct_tagRECONVERTSTRING
PRECONVERTSTRING = ctypes.POINTER(struct_tagRECONVERTSTRING)
NPRECONVERTSTRING = ctypes.POINTER(struct_tagRECONVERTSTRING)
LPRECONVERTSTRING = ctypes.POINTER(struct_tagRECONVERTSTRING)
class struct_tagSTYLEBUFA(Structure):
    pass

struct_tagSTYLEBUFA._pack_ = 1 # source:False
struct_tagSTYLEBUFA._fields_ = [
    ('dwStyle', ctypes.c_uint32),
    ('szDescription', ctypes.c_char * 32),
]

STYLEBUFA = struct_tagSTYLEBUFA
PSTYLEBUFA = ctypes.POINTER(struct_tagSTYLEBUFA)
NPSTYLEBUFA = ctypes.POINTER(struct_tagSTYLEBUFA)
LPSTYLEBUFA = ctypes.POINTER(struct_tagSTYLEBUFA)
class struct_tagSTYLEBUFW(Structure):
    pass

struct_tagSTYLEBUFW._pack_ = 1 # source:False
struct_tagSTYLEBUFW._fields_ = [
    ('dwStyle', ctypes.c_uint32),
    ('szDescription', ctypes.c_int16 * 32),
]

STYLEBUFW = struct_tagSTYLEBUFW
PSTYLEBUFW = ctypes.POINTER(struct_tagSTYLEBUFW)
NPSTYLEBUFW = ctypes.POINTER(struct_tagSTYLEBUFW)
LPSTYLEBUFW = ctypes.POINTER(struct_tagSTYLEBUFW)
STYLEBUF = struct_tagSTYLEBUFA
PSTYLEBUF = ctypes.POINTER(struct_tagSTYLEBUFA)
NPSTYLEBUF = ctypes.POINTER(struct_tagSTYLEBUFA)
LPSTYLEBUF = ctypes.POINTER(struct_tagSTYLEBUFA)
class struct_tagIMEMENUITEMINFOA(Structure):
    pass

struct_tagIMEMENUITEMINFOA._pack_ = 1 # source:False
struct_tagIMEMENUITEMINFOA._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('fType', ctypes.c_uint32),
    ('fState', ctypes.c_uint32),
    ('wID', ctypes.c_uint32),
    ('hbmpChecked', ctypes.POINTER(struct_HBITMAP__)),
    ('hbmpUnchecked', ctypes.POINTER(struct_HBITMAP__)),
    ('dwItemData', ctypes.c_uint32),
    ('szString', ctypes.c_char * 80),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hbmpItem', ctypes.POINTER(struct_HBITMAP__)),
]

IMEMENUITEMINFOA = struct_tagIMEMENUITEMINFOA
PIMEMENUITEMINFOA = ctypes.POINTER(struct_tagIMEMENUITEMINFOA)
NPIMEMENUITEMINFOA = ctypes.POINTER(struct_tagIMEMENUITEMINFOA)
LPIMEMENUITEMINFOA = ctypes.POINTER(struct_tagIMEMENUITEMINFOA)
class struct_tagIMEMENUITEMINFOW(Structure):
    pass

struct_tagIMEMENUITEMINFOW._pack_ = 1 # source:False
struct_tagIMEMENUITEMINFOW._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('fType', ctypes.c_uint32),
    ('fState', ctypes.c_uint32),
    ('wID', ctypes.c_uint32),
    ('hbmpChecked', ctypes.POINTER(struct_HBITMAP__)),
    ('hbmpUnchecked', ctypes.POINTER(struct_HBITMAP__)),
    ('dwItemData', ctypes.c_uint32),
    ('szString', ctypes.c_int16 * 80),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('hbmpItem', ctypes.POINTER(struct_HBITMAP__)),
]

IMEMENUITEMINFOW = struct_tagIMEMENUITEMINFOW
PIMEMENUITEMINFOW = ctypes.POINTER(struct_tagIMEMENUITEMINFOW)
NPIMEMENUITEMINFOW = ctypes.POINTER(struct_tagIMEMENUITEMINFOW)
LPIMEMENUITEMINFOW = ctypes.POINTER(struct_tagIMEMENUITEMINFOW)
IMEMENUITEMINFO = struct_tagIMEMENUITEMINFOA
PIMEMENUITEMINFO = ctypes.POINTER(struct_tagIMEMENUITEMINFOA)
NPIMEMENUITEMINFO = ctypes.POINTER(struct_tagIMEMENUITEMINFOA)
LPIMEMENUITEMINFO = ctypes.POINTER(struct_tagIMEMENUITEMINFOA)
class struct_tagIMECHARPOSITION(Structure):
    pass

struct_tagIMECHARPOSITION._pack_ = 1 # source:False
struct_tagIMECHARPOSITION._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('dwCharPos', ctypes.c_uint32),
    ('pt', POINT),
    ('cLineHeight', ctypes.c_uint32),
    ('rcDocument', RECT),
]

IMECHARPOSITION = struct_tagIMECHARPOSITION
PIMECHARPOSITION = ctypes.POINTER(struct_tagIMECHARPOSITION)
NPIMECHARPOSITION = ctypes.POINTER(struct_tagIMECHARPOSITION)
LPIMECHARPOSITION = ctypes.POINTER(struct_tagIMECHARPOSITION)
IMCENUMPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_HIMC__), ctypes.c_int64)
REGISTERWORDENUMPROCA = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_uint32, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(None))
REGISTERWORDENUMPROCW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_uint32, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(None))
u_char = ctypes.c_ubyte
u_short = ctypes.c_uint16
u_int = ctypes.c_uint32
u_long = ctypes.c_uint32
u_int64 = ctypes.c_uint64
class struct__D1D01E6CE24DAA474FC2F2D5140A147B(Structure):
    pass

struct__D1D01E6CE24DAA474FC2F2D5140A147B._pack_ = 1 # source:False
struct__D1D01E6CE24DAA474FC2F2D5140A147B._fields_ = [
    ('s_b1', ctypes.c_ubyte),
    ('s_b2', ctypes.c_ubyte),
    ('s_b3', ctypes.c_ubyte),
    ('s_b4', ctypes.c_ubyte),
]

class struct__482BE40EA206D58F779C6B11E6CEDF6F(Structure):
    pass

struct__482BE40EA206D58F779C6B11E6CEDF6F._pack_ = 1 # source:False
struct__482BE40EA206D58F779C6B11E6CEDF6F._fields_ = [
    ('s_w1', ctypes.c_uint16),
    ('s_w2', ctypes.c_uint16),
]

class union_in_addr___2B6035E3436C90F2F7E43C06385B7488(Union):
    pass

union_in_addr___2B6035E3436C90F2F7E43C06385B7488._pack_ = 1 # source:False
union_in_addr___2B6035E3436C90F2F7E43C06385B7488._fields_ = [
    ('S_un_b', struct__D1D01E6CE24DAA474FC2F2D5140A147B),
    ('S_un_w', struct__482BE40EA206D58F779C6B11E6CEDF6F),
    ('S_addr', ctypes.c_uint32),
]

class struct_in_addr(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('S_un', union_in_addr___2B6035E3436C90F2F7E43C06385B7488),
     ]

IN_ADDR = struct_in_addr
PIN_ADDR = ctypes.POINTER(struct_in_addr)
LPIN_ADDR = ctypes.POINTER(struct_in_addr)
ADDRESS_FAMILY = ctypes.c_uint16
class struct_sockaddr(Structure):
    pass

struct_sockaddr._pack_ = 1 # source:False
struct_sockaddr._fields_ = [
    ('sa_family', ctypes.c_uint16),
    ('sa_data', ctypes.c_char * 14),
]

SOCKADDR = struct_sockaddr
PSOCKADDR = ctypes.POINTER(struct_sockaddr)
LPSOCKADDR = ctypes.POINTER(struct_sockaddr)
class struct__SOCKET_ADDRESS(Structure):
    pass

struct__SOCKET_ADDRESS._pack_ = 1 # source:False
struct__SOCKET_ADDRESS._fields_ = [
    ('lpSockaddr', ctypes.POINTER(struct_sockaddr)),
    ('iSockaddrLength', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

SOCKET_ADDRESS = struct__SOCKET_ADDRESS
PSOCKET_ADDRESS = ctypes.POINTER(struct__SOCKET_ADDRESS)
LPSOCKET_ADDRESS = ctypes.POINTER(struct__SOCKET_ADDRESS)
class struct__SOCKET_ADDRESS_LIST(Structure):
    pass

struct__SOCKET_ADDRESS_LIST._pack_ = 1 # source:False
struct__SOCKET_ADDRESS_LIST._fields_ = [
    ('iAddressCount', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('Address', struct__SOCKET_ADDRESS * 1),
]

SOCKET_ADDRESS_LIST = struct__SOCKET_ADDRESS_LIST
PSOCKET_ADDRESS_LIST = ctypes.POINTER(struct__SOCKET_ADDRESS_LIST)
LPSOCKET_ADDRESS_LIST = ctypes.POINTER(struct__SOCKET_ADDRESS_LIST)
class struct__CSADDR_INFO(Structure):
    pass

struct__CSADDR_INFO._pack_ = 1 # source:False
struct__CSADDR_INFO._fields_ = [
    ('LocalAddr', SOCKET_ADDRESS),
    ('RemoteAddr', SOCKET_ADDRESS),
    ('iSocketType', ctypes.c_int32),
    ('iProtocol', ctypes.c_int32),
]

CSADDR_INFO = struct__CSADDR_INFO
PCSADDR_INFO = ctypes.POINTER(struct__CSADDR_INFO)
LPCSADDR_INFO = ctypes.POINTER(struct__CSADDR_INFO)
class struct_sockaddr_storage(Structure):
    pass

struct_sockaddr_storage._pack_ = 1 # source:False
struct_sockaddr_storage._fields_ = [
    ('ss_family', ctypes.c_uint16),
    ('__ss_pad1', ctypes.c_char * 6),
    ('__ss_align', ctypes.c_int64),
    ('__ss_pad2', ctypes.c_char * 112),
]

SOCKADDR_STORAGE_LH = struct_sockaddr_storage
PSOCKADDR_STORAGE_LH = ctypes.POINTER(struct_sockaddr_storage)
LPSOCKADDR_STORAGE_LH = ctypes.POINTER(struct_sockaddr_storage)
class struct_sockaddr_storage_xp(Structure):
    pass

struct_sockaddr_storage_xp._pack_ = 1 # source:False
struct_sockaddr_storage_xp._fields_ = [
    ('ss_family', ctypes.c_int16),
    ('__ss_pad1', ctypes.c_char * 6),
    ('__ss_align', ctypes.c_int64),
    ('__ss_pad2', ctypes.c_char * 112),
]

SOCKADDR_STORAGE_XP = struct_sockaddr_storage_xp
PSOCKADDR_STORAGE_XP = ctypes.POINTER(struct_sockaddr_storage_xp)
LPSOCKADDR_STORAGE_XP = ctypes.POINTER(struct_sockaddr_storage_xp)
SOCKADDR_STORAGE = struct_sockaddr_storage
PSOCKADDR_STORAGE = ctypes.POINTER(struct_sockaddr_storage)
LPSOCKADDR_STORAGE = ctypes.POINTER(struct_sockaddr_storage)
class struct__SOCKET_PROCESSOR_AFFINITY(Structure):
    pass

struct__SOCKET_PROCESSOR_AFFINITY._pack_ = 1 # source:False
struct__SOCKET_PROCESSOR_AFFINITY._fields_ = [
    ('Processor', PROCESSOR_NUMBER),
    ('NumaNodeId', ctypes.c_uint16),
    ('Reserved', ctypes.c_uint16),
]

SOCKET_PROCESSOR_AFFINITY = struct__SOCKET_PROCESSOR_AFFINITY
PSOCKET_PROCESSOR_AFFINITY = ctypes.POINTER(struct__SOCKET_PROCESSOR_AFFINITY)

# values for enumeration 'IPPROTO'
IPPROTO__enumvalues = {
    0: 'IPPROTO_HOPOPTS',
    1: 'IPPROTO_ICMP',
    2: 'IPPROTO_IGMP',
    3: 'IPPROTO_GGP',
    4: 'IPPROTO_IPV4',
    5: 'IPPROTO_ST',
    6: 'IPPROTO_TCP',
    7: 'IPPROTO_CBT',
    8: 'IPPROTO_EGP',
    9: 'IPPROTO_IGP',
    12: 'IPPROTO_PUP',
    17: 'IPPROTO_UDP',
    22: 'IPPROTO_IDP',
    27: 'IPPROTO_RDP',
    41: 'IPPROTO_IPV6',
    43: 'IPPROTO_ROUTING',
    44: 'IPPROTO_FRAGMENT',
    50: 'IPPROTO_ESP',
    51: 'IPPROTO_AH',
    58: 'IPPROTO_ICMPV6',
    59: 'IPPROTO_NONE',
    60: 'IPPROTO_DSTOPTS',
    77: 'IPPROTO_ND',
    78: 'IPPROTO_ICLFXBM',
    103: 'IPPROTO_PIM',
    113: 'IPPROTO_PGM',
    115: 'IPPROTO_L2TP',
    132: 'IPPROTO_SCTP',
    255: 'IPPROTO_RAW',
    256: 'IPPROTO_MAX',
    257: 'IPPROTO_RESERVED_RAW',
    258: 'IPPROTO_RESERVED_IPSEC',
    259: 'IPPROTO_RESERVED_IPSECOFFLOAD',
    260: 'IPPROTO_RESERVED_WNV',
    261: 'IPPROTO_RESERVED_MAX',
}
IPPROTO_HOPOPTS = 0
IPPROTO_ICMP = 1
IPPROTO_IGMP = 2
IPPROTO_GGP = 3
IPPROTO_IPV4 = 4
IPPROTO_ST = 5
IPPROTO_TCP = 6
IPPROTO_CBT = 7
IPPROTO_EGP = 8
IPPROTO_IGP = 9
IPPROTO_PUP = 12
IPPROTO_UDP = 17
IPPROTO_IDP = 22
IPPROTO_RDP = 27
IPPROTO_IPV6 = 41
IPPROTO_ROUTING = 43
IPPROTO_FRAGMENT = 44
IPPROTO_ESP = 50
IPPROTO_AH = 51
IPPROTO_ICMPV6 = 58
IPPROTO_NONE = 59
IPPROTO_DSTOPTS = 60
IPPROTO_ND = 77
IPPROTO_ICLFXBM = 78
IPPROTO_PIM = 103
IPPROTO_PGM = 113
IPPROTO_L2TP = 115
IPPROTO_SCTP = 132
IPPROTO_RAW = 255
IPPROTO_MAX = 256
IPPROTO_RESERVED_RAW = 257
IPPROTO_RESERVED_IPSEC = 258
IPPROTO_RESERVED_IPSECOFFLOAD = 259
IPPROTO_RESERVED_WNV = 260
IPPROTO_RESERVED_MAX = 261
IPPROTO = ctypes.c_uint32 # enum
PIPROTO = ctypes.POINTER(IPPROTO)

# values for enumeration 'SCOPE_LEVEL'
SCOPE_LEVEL__enumvalues = {
    1: 'ScopeLevelInterface',
    2: 'ScopeLevelLink',
    3: 'ScopeLevelSubnet',
    4: 'ScopeLevelAdmin',
    5: 'ScopeLevelSite',
    8: 'ScopeLevelOrganization',
    14: 'ScopeLevelGlobal',
    16: 'ScopeLevelCount',
}
ScopeLevelInterface = 1
ScopeLevelLink = 2
ScopeLevelSubnet = 3
ScopeLevelAdmin = 4
ScopeLevelSite = 5
ScopeLevelOrganization = 8
ScopeLevelGlobal = 14
ScopeLevelCount = 16
SCOPE_LEVEL = ctypes.c_uint32 # enum
class struct__013671E5920392F7B68C675C97F9F7D8(Structure):
    pass

struct__013671E5920392F7B68C675C97F9F7D8._pack_ = 1 # source:False
struct__013671E5920392F7B68C675C97F9F7D8._fields_ = [
    ('Zone', ctypes.c_uint32, 28),
    ('Level', ctypes.c_uint32, 4),
]

class union_SCOPE_ID___0B63E1DABDB20D0A7182B70FFF1E8AB8(Union):
    pass

class struct_SCOPE_ID___0B63E1DABDB20D0A7182B70FFF1E8AB8_0(Structure):
    pass

struct_SCOPE_ID___0B63E1DABDB20D0A7182B70FFF1E8AB8_0._pack_ = 1 # source:False
struct_SCOPE_ID___0B63E1DABDB20D0A7182B70FFF1E8AB8_0._fields_ = [
    ('Zone', ctypes.c_uint32, 28),
    ('Level', ctypes.c_uint32, 4),
]

union_SCOPE_ID___0B63E1DABDB20D0A7182B70FFF1E8AB8._pack_ = 1 # source:False
union_SCOPE_ID___0B63E1DABDB20D0A7182B70FFF1E8AB8._anonymous_ = ('_0',)
union_SCOPE_ID___0B63E1DABDB20D0A7182B70FFF1E8AB8._fields_ = [
    ('_0', struct_SCOPE_ID___0B63E1DABDB20D0A7182B70FFF1E8AB8_0),
    ('Value', ctypes.c_uint32),
]

class struct_SCOPE_ID(Structure):
    pass

class union_SCOPE_ID_0(Union):
    pass

class struct_SCOPE_ID_0_0(Structure):
    pass

struct_SCOPE_ID_0_0._pack_ = 1 # source:False
struct_SCOPE_ID_0_0._fields_ = [
    ('Zone', ctypes.c_uint32, 28),
    ('Level', ctypes.c_uint32, 4),
]

union_SCOPE_ID_0._pack_ = 1 # source:False
union_SCOPE_ID_0._anonymous_ = ('_0',)
union_SCOPE_ID_0._fields_ = [
    ('_0', struct_SCOPE_ID_0_0),
    ('Value', ctypes.c_uint32),
]

struct_SCOPE_ID._pack_ = 1 # source:False
struct_SCOPE_ID._anonymous_ = ('_0',)
struct_SCOPE_ID._fields_ = [
    ('_0', union_SCOPE_ID_0),
]

PSCOPE_ID = ctypes.POINTER(struct_SCOPE_ID)
class struct_sockaddr_in(Structure):
    pass

struct_sockaddr_in._pack_ = 1 # source:False
struct_sockaddr_in._fields_ = [
    ('sin_family', ctypes.c_uint16),
    ('sin_port', ctypes.c_uint16),
    ('sin_addr', IN_ADDR),
    ('sin_zero', ctypes.c_char * 8),
]

SOCKADDR_IN = struct_sockaddr_in
PSOCKADDR_IN = ctypes.POINTER(struct_sockaddr_in)
class struct_sockaddr_dl(Structure):
    pass

struct_sockaddr_dl._pack_ = 1 # source:False
struct_sockaddr_dl._fields_ = [
    ('sdl_family', ctypes.c_uint16),
    ('sdl_data', ctypes.c_ubyte * 8),
    ('sdl_zero', ctypes.c_ubyte * 4),
]

SOCKADDR_DL = struct_sockaddr_dl
PSOCKADDR_DL = ctypes.POINTER(struct_sockaddr_dl)
class struct__WSABUF(Structure):
    pass

struct__WSABUF._pack_ = 1 # source:False
struct__WSABUF._fields_ = [
    ('len', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('buf', ctypes.POINTER(ctypes.c_char)),
]

WSABUF = struct__WSABUF
LPWSABUF = ctypes.POINTER(struct__WSABUF)
class struct__WSAMSG(Structure):
    pass

struct__WSAMSG._pack_ = 1 # source:False
struct__WSAMSG._fields_ = [
    ('name', ctypes.POINTER(struct_sockaddr)),
    ('namelen', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpBuffers', ctypes.POINTER(struct__WSABUF)),
    ('dwBufferCount', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('Control', WSABUF),
    ('dwFlags', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
]

WSAMSG = struct__WSAMSG
PWSAMSG = ctypes.POINTER(struct__WSAMSG)
LPWSAMSG = ctypes.POINTER(struct__WSAMSG)
class struct_cmsghdr(Structure):
    pass

struct_cmsghdr._pack_ = 1 # source:False
struct_cmsghdr._fields_ = [
    ('cmsg_len', ctypes.c_uint64),
    ('cmsg_level', ctypes.c_int32),
    ('cmsg_type', ctypes.c_int32),
]

WSACMSGHDR = struct_cmsghdr
PWSACMSGHDR = ctypes.POINTER(struct_cmsghdr)
LPWSACMSGHDR = ctypes.POINTER(struct_cmsghdr)
CMSGHDR = struct_cmsghdr
PCMSGHDR = ctypes.POINTER(struct_cmsghdr)
class struct_addrinfo(Structure):
    pass

struct_addrinfo._pack_ = 1 # source:False
struct_addrinfo._fields_ = [
    ('ai_flags', ctypes.c_int32),
    ('ai_family', ctypes.c_int32),
    ('ai_socktype', ctypes.c_int32),
    ('ai_protocol', ctypes.c_int32),
    ('ai_addrlen', ctypes.c_uint64),
    ('ai_canonname', ctypes.POINTER(ctypes.c_char)),
    ('ai_addr', ctypes.POINTER(struct_sockaddr)),
    ('ai_next', ctypes.POINTER(struct_addrinfo)),
]

ADDRINFOA = struct_addrinfo
PADDRINFOA = ctypes.POINTER(struct_addrinfo)
class struct_addrinfoW(Structure):
    pass

struct_addrinfoW._pack_ = 1 # source:False
struct_addrinfoW._fields_ = [
    ('ai_flags', ctypes.c_int32),
    ('ai_family', ctypes.c_int32),
    ('ai_socktype', ctypes.c_int32),
    ('ai_protocol', ctypes.c_int32),
    ('ai_addrlen', ctypes.c_uint64),
    ('ai_canonname', ctypes.POINTER(ctypes.c_int16)),
    ('ai_addr', ctypes.POINTER(struct_sockaddr)),
    ('ai_next', ctypes.POINTER(struct_addrinfoW)),
]

ADDRINFOW = struct_addrinfoW
PADDRINFOW = ctypes.POINTER(struct_addrinfoW)
class struct_addrinfoexA(Structure):
    pass

struct_addrinfoexA._pack_ = 1 # source:False
struct_addrinfoexA._fields_ = [
    ('ai_flags', ctypes.c_int32),
    ('ai_family', ctypes.c_int32),
    ('ai_socktype', ctypes.c_int32),
    ('ai_protocol', ctypes.c_int32),
    ('ai_addrlen', ctypes.c_uint64),
    ('ai_canonname', ctypes.POINTER(ctypes.c_char)),
    ('ai_addr', ctypes.POINTER(struct_sockaddr)),
    ('ai_blob', ctypes.POINTER(None)),
    ('ai_bloblen', ctypes.c_uint64),
    ('ai_provider', ctypes.POINTER(struct__GUID)),
    ('ai_next', ctypes.POINTER(struct_addrinfoexA)),
]

ADDRINFOEXA = struct_addrinfoexA
PADDRINFOEXA = ctypes.POINTER(struct_addrinfoexA)
LPADDRINFOEXA = ctypes.POINTER(struct_addrinfoexA)
class struct_addrinfoexW(Structure):
    pass

struct_addrinfoexW._pack_ = 1 # source:False
struct_addrinfoexW._fields_ = [
    ('ai_flags', ctypes.c_int32),
    ('ai_family', ctypes.c_int32),
    ('ai_socktype', ctypes.c_int32),
    ('ai_protocol', ctypes.c_int32),
    ('ai_addrlen', ctypes.c_uint64),
    ('ai_canonname', ctypes.POINTER(ctypes.c_int16)),
    ('ai_addr', ctypes.POINTER(struct_sockaddr)),
    ('ai_blob', ctypes.POINTER(None)),
    ('ai_bloblen', ctypes.c_uint64),
    ('ai_provider', ctypes.POINTER(struct__GUID)),
    ('ai_next', ctypes.POINTER(struct_addrinfoexW)),
]

ADDRINFOEXW = struct_addrinfoexW
PADDRINFOEXW = ctypes.POINTER(struct_addrinfoexW)
LPADDRINFOEXW = ctypes.POINTER(struct_addrinfoexW)
class struct_addrinfoex2A(Structure):
    pass

struct_addrinfoex2A._pack_ = 1 # source:False
struct_addrinfoex2A._fields_ = [
    ('ai_flags', ctypes.c_int32),
    ('ai_family', ctypes.c_int32),
    ('ai_socktype', ctypes.c_int32),
    ('ai_protocol', ctypes.c_int32),
    ('ai_addrlen', ctypes.c_uint64),
    ('ai_canonname', ctypes.POINTER(ctypes.c_char)),
    ('ai_addr', ctypes.POINTER(struct_sockaddr)),
    ('ai_blob', ctypes.POINTER(None)),
    ('ai_bloblen', ctypes.c_uint64),
    ('ai_provider', ctypes.POINTER(struct__GUID)),
    ('ai_next', ctypes.POINTER(struct_addrinfoex2A)),
    ('ai_version', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ai_fqdn', ctypes.POINTER(ctypes.c_char)),
]

ADDRINFOEX2A = struct_addrinfoex2A
PADDRINFOEX2A = ctypes.POINTER(struct_addrinfoex2A)
LPADDRINFOEX2A = ctypes.POINTER(struct_addrinfoex2A)
class struct_addrinfoex2W(Structure):
    pass

struct_addrinfoex2W._pack_ = 1 # source:False
struct_addrinfoex2W._fields_ = [
    ('ai_flags', ctypes.c_int32),
    ('ai_family', ctypes.c_int32),
    ('ai_socktype', ctypes.c_int32),
    ('ai_protocol', ctypes.c_int32),
    ('ai_addrlen', ctypes.c_uint64),
    ('ai_canonname', ctypes.POINTER(ctypes.c_int16)),
    ('ai_addr', ctypes.POINTER(struct_sockaddr)),
    ('ai_blob', ctypes.POINTER(None)),
    ('ai_bloblen', ctypes.c_uint64),
    ('ai_provider', ctypes.POINTER(struct__GUID)),
    ('ai_next', ctypes.POINTER(struct_addrinfoex2W)),
    ('ai_version', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ai_fqdn', ctypes.POINTER(ctypes.c_int16)),
]

ADDRINFOEX2W = struct_addrinfoex2W
PADDRINFOEX2W = ctypes.POINTER(struct_addrinfoex2W)
LPADDRINFOEX2W = ctypes.POINTER(struct_addrinfoex2W)
class struct_addrinfoex3(Structure):
    pass

struct_addrinfoex3._pack_ = 1 # source:False
struct_addrinfoex3._fields_ = [
    ('ai_flags', ctypes.c_int32),
    ('ai_family', ctypes.c_int32),
    ('ai_socktype', ctypes.c_int32),
    ('ai_protocol', ctypes.c_int32),
    ('ai_addrlen', ctypes.c_uint64),
    ('ai_canonname', ctypes.POINTER(ctypes.c_int16)),
    ('ai_addr', ctypes.POINTER(struct_sockaddr)),
    ('ai_blob', ctypes.POINTER(None)),
    ('ai_bloblen', ctypes.c_uint64),
    ('ai_provider', ctypes.POINTER(struct__GUID)),
    ('ai_next', ctypes.POINTER(struct_addrinfoex3)),
    ('ai_version', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ai_fqdn', ctypes.POINTER(ctypes.c_int16)),
    ('ai_interfaceindex', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

ADDRINFOEX3 = struct_addrinfoex3
PADDRINFOEX3 = ctypes.POINTER(struct_addrinfoex3)
LPADDRINFOEX3 = ctypes.POINTER(struct_addrinfoex3)
class struct_addrinfoex4(Structure):
    pass

struct_addrinfoex4._pack_ = 1 # source:False
struct_addrinfoex4._fields_ = [
    ('ai_flags', ctypes.c_int32),
    ('ai_family', ctypes.c_int32),
    ('ai_socktype', ctypes.c_int32),
    ('ai_protocol', ctypes.c_int32),
    ('ai_addrlen', ctypes.c_uint64),
    ('ai_canonname', ctypes.POINTER(ctypes.c_int16)),
    ('ai_addr', ctypes.POINTER(struct_sockaddr)),
    ('ai_blob', ctypes.POINTER(None)),
    ('ai_bloblen', ctypes.c_uint64),
    ('ai_provider', ctypes.POINTER(struct__GUID)),
    ('ai_next', ctypes.POINTER(struct_addrinfoex4)),
    ('ai_version', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('ai_fqdn', ctypes.POINTER(ctypes.c_int16)),
    ('ai_interfaceindex', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('ai_resolutionhandle', ctypes.POINTER(None)),
]

ADDRINFOEX4 = struct_addrinfoex4
PADDRINFOEX4 = ctypes.POINTER(struct_addrinfoex4)
LPADDRINFOEX4 = ctypes.POINTER(struct_addrinfoex4)
SOCKET = ctypes.c_uint64
class struct_fd_set(Structure):
    pass

struct_fd_set._pack_ = 1 # source:False
struct_fd_set._fields_ = [
    ('fd_count', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('fd_array', ctypes.c_uint64 * 64),
]

class struct_timeval(Structure):
    pass

struct_timeval._pack_ = 1 # source:False
struct_timeval._fields_ = [
    ('tv_sec', ctypes.c_int32),
    ('tv_usec', ctypes.c_int32),
]

class struct_hostent(Structure):
    pass

struct_hostent._pack_ = 1 # source:False
struct_hostent._fields_ = [
    ('h_name', ctypes.POINTER(ctypes.c_char)),
    ('h_aliases', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('h_addrtype', ctypes.c_int16),
    ('h_length', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('h_addr_list', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
]

class struct_netent(Structure):
    pass

struct_netent._pack_ = 1 # source:False
struct_netent._fields_ = [
    ('n_name', ctypes.POINTER(ctypes.c_char)),
    ('n_aliases', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('n_addrtype', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('n_net', ctypes.c_uint32),
]

class struct_servent(Structure):
    pass

struct_servent._pack_ = 1 # source:False
struct_servent._fields_ = [
    ('s_name', ctypes.POINTER(ctypes.c_char)),
    ('s_aliases', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('s_proto', ctypes.POINTER(ctypes.c_char)),
    ('s_port', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

class struct_protoent(Structure):
    pass

struct_protoent._pack_ = 1 # source:False
struct_protoent._fields_ = [
    ('p_name', ctypes.POINTER(ctypes.c_char)),
    ('p_aliases', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('p_proto', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

class struct_WSAData(Structure):
    pass

struct_WSAData._pack_ = 1 # source:False
struct_WSAData._fields_ = [
    ('wVersion', ctypes.c_uint16),
    ('wHighVersion', ctypes.c_uint16),
    ('iMaxSockets', ctypes.c_uint16),
    ('iMaxUdpDg', ctypes.c_uint16),
    ('lpVendorInfo', ctypes.POINTER(ctypes.c_char)),
    ('szDescription', ctypes.c_char * 257),
    ('szSystemStatus', ctypes.c_char * 129),
    ('PADDING_0', ctypes.c_ubyte * 6),
]

WSADATA = struct_WSAData
LPWSADATA = ctypes.POINTER(struct_WSAData)
class struct_sockproto(Structure):
    pass

struct_sockproto._pack_ = 1 # source:False
struct_sockproto._fields_ = [
    ('sp_family', ctypes.c_uint16),
    ('sp_protocol', ctypes.c_uint16),
]

class struct_linger(Structure):
    pass

struct_linger._pack_ = 1 # source:False
struct_linger._fields_ = [
    ('l_onoff', ctypes.c_uint16),
    ('l_linger', ctypes.c_uint16),
]

LPWSAOVERLAPPED = ctypes.POINTER(struct__OVERLAPPED)
SERVICETYPE = ctypes.c_uint32
class struct__flowspec(Structure):
    pass

struct__flowspec._pack_ = 1 # source:False
struct__flowspec._fields_ = [
    ('TokenRate', ctypes.c_uint32),
    ('TokenBucketSize', ctypes.c_uint32),
    ('PeakBandwidth', ctypes.c_uint32),
    ('Latency', ctypes.c_uint32),
    ('DelayVariation', ctypes.c_uint32),
    ('ServiceType', ctypes.c_uint32),
    ('MaxSduSize', ctypes.c_uint32),
    ('MinimumPolicedSize', ctypes.c_uint32),
]

FLOWSPEC = struct__flowspec
PFLOWSPEC = ctypes.POINTER(struct__flowspec)
LPFLOWSPEC = ctypes.POINTER(struct__flowspec)
class struct_QOS_OBJECT_HDR(Structure):
    pass

struct_QOS_OBJECT_HDR._pack_ = 1 # source:False
struct_QOS_OBJECT_HDR._fields_ = [
    ('ObjectType', ctypes.c_uint32),
    ('ObjectLength', ctypes.c_uint32),
]

LPQOS_OBJECT_HDR = ctypes.POINTER(struct_QOS_OBJECT_HDR)
class struct__QOS_SD_MODE(Structure):
    pass

struct__QOS_SD_MODE._pack_ = 1 # source:False
struct__QOS_SD_MODE._fields_ = [
    ('ObjectHdr', struct_QOS_OBJECT_HDR),
    ('ShapeDiscardMode', ctypes.c_uint32),
]

QOS_SD_MODE = struct__QOS_SD_MODE
LPQOS_SD_MODE = ctypes.POINTER(struct__QOS_SD_MODE)
class struct__QOS_SHAPING_RATE(Structure):
    pass

struct__QOS_SHAPING_RATE._pack_ = 1 # source:False
struct__QOS_SHAPING_RATE._fields_ = [
    ('ObjectHdr', struct_QOS_OBJECT_HDR),
    ('ShapingRate', ctypes.c_uint32),
]

QOS_SHAPING_RATE = struct__QOS_SHAPING_RATE
LPQOS_SHAPING_RATE = ctypes.POINTER(struct__QOS_SHAPING_RATE)
class struct__QualityOfService(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('SendingFlowspec', FLOWSPEC),
    ('ReceivingFlowspec', FLOWSPEC),
    ('ProviderSpecific', WSABUF),
     ]

QOS = struct__QualityOfService
LPQOS = ctypes.POINTER(struct__QualityOfService)
GROUP = ctypes.c_uint32
class struct__WSANETWORKEVENTS(Structure):
    pass

struct__WSANETWORKEVENTS._pack_ = 1 # source:False
struct__WSANETWORKEVENTS._fields_ = [
    ('lNetworkEvents', ctypes.c_int32),
    ('iErrorCode', ctypes.c_int32 * 10),
]

WSANETWORKEVENTS = struct__WSANETWORKEVENTS
LPWSANETWORKEVENTS = ctypes.POINTER(struct__WSANETWORKEVENTS)
class struct__WSAPROTOCOLCHAIN(Structure):
    pass

struct__WSAPROTOCOLCHAIN._pack_ = 1 # source:False
struct__WSAPROTOCOLCHAIN._fields_ = [
    ('ChainLen', ctypes.c_int32),
    ('ChainEntries', ctypes.c_uint32 * 7),
]

WSAPROTOCOLCHAIN = struct__WSAPROTOCOLCHAIN
LPWSAPROTOCOLCHAIN = ctypes.POINTER(struct__WSAPROTOCOLCHAIN)
class struct__WSAPROTOCOL_INFOA(Structure):
    pass

struct__WSAPROTOCOL_INFOA._pack_ = 1 # source:False
struct__WSAPROTOCOL_INFOA._fields_ = [
    ('dwServiceFlags1', ctypes.c_uint32),
    ('dwServiceFlags2', ctypes.c_uint32),
    ('dwServiceFlags3', ctypes.c_uint32),
    ('dwServiceFlags4', ctypes.c_uint32),
    ('dwProviderFlags', ctypes.c_uint32),
    ('ProviderId', GUID),
    ('dwCatalogEntryId', ctypes.c_uint32),
    ('ProtocolChain', WSAPROTOCOLCHAIN),
    ('iVersion', ctypes.c_int32),
    ('iAddressFamily', ctypes.c_int32),
    ('iMaxSockAddr', ctypes.c_int32),
    ('iMinSockAddr', ctypes.c_int32),
    ('iSocketType', ctypes.c_int32),
    ('iProtocol', ctypes.c_int32),
    ('iProtocolMaxOffset', ctypes.c_int32),
    ('iNetworkByteOrder', ctypes.c_int32),
    ('iSecurityScheme', ctypes.c_int32),
    ('dwMessageSize', ctypes.c_uint32),
    ('dwProviderReserved', ctypes.c_uint32),
    ('szProtocol', ctypes.c_char * 256),
]

WSAPROTOCOL_INFOA = struct__WSAPROTOCOL_INFOA
LPWSAPROTOCOL_INFOA = ctypes.POINTER(struct__WSAPROTOCOL_INFOA)
class struct__WSAPROTOCOL_INFOW(Structure):
    pass

struct__WSAPROTOCOL_INFOW._pack_ = 1 # source:False
struct__WSAPROTOCOL_INFOW._fields_ = [
    ('dwServiceFlags1', ctypes.c_uint32),
    ('dwServiceFlags2', ctypes.c_uint32),
    ('dwServiceFlags3', ctypes.c_uint32),
    ('dwServiceFlags4', ctypes.c_uint32),
    ('dwProviderFlags', ctypes.c_uint32),
    ('ProviderId', GUID),
    ('dwCatalogEntryId', ctypes.c_uint32),
    ('ProtocolChain', WSAPROTOCOLCHAIN),
    ('iVersion', ctypes.c_int32),
    ('iAddressFamily', ctypes.c_int32),
    ('iMaxSockAddr', ctypes.c_int32),
    ('iMinSockAddr', ctypes.c_int32),
    ('iSocketType', ctypes.c_int32),
    ('iProtocol', ctypes.c_int32),
    ('iProtocolMaxOffset', ctypes.c_int32),
    ('iNetworkByteOrder', ctypes.c_int32),
    ('iSecurityScheme', ctypes.c_int32),
    ('dwMessageSize', ctypes.c_uint32),
    ('dwProviderReserved', ctypes.c_uint32),
    ('szProtocol', ctypes.c_int16 * 256),
]

WSAPROTOCOL_INFOW = struct__WSAPROTOCOL_INFOW
LPWSAPROTOCOL_INFOW = ctypes.POINTER(struct__WSAPROTOCOL_INFOW)
WSAPROTOCOL_INFO = struct__WSAPROTOCOL_INFOA
LPWSAPROTOCOL_INFO = ctypes.POINTER(struct__WSAPROTOCOL_INFOA)
LPCONDITIONPROC = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__WSABUF), ctypes.POINTER(struct__WSABUF), ctypes.POINTER(struct__QualityOfService), ctypes.POINTER(struct__QualityOfService), ctypes.POINTER(struct__WSABUF), ctypes.POINTER(struct__WSABUF), ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint64)
LPWSAOVERLAPPED_COMPLETION_ROUTINE = ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct__OVERLAPPED), ctypes.c_uint32)

# values for enumeration '_WSACOMPLETIONTYPE'
_WSACOMPLETIONTYPE__enumvalues = {
    0: 'NSP_NOTIFY_IMMEDIATELY',
    1: 'NSP_NOTIFY_HWND',
    2: 'NSP_NOTIFY_EVENT',
    3: 'NSP_NOTIFY_PORT',
    4: 'NSP_NOTIFY_APC',
}
NSP_NOTIFY_IMMEDIATELY = 0
NSP_NOTIFY_HWND = 1
NSP_NOTIFY_EVENT = 2
NSP_NOTIFY_PORT = 3
NSP_NOTIFY_APC = 4
_WSACOMPLETIONTYPE = ctypes.c_uint32 # enum
WSACOMPLETIONTYPE = _WSACOMPLETIONTYPE
WSACOMPLETIONTYPE__enumvalues = _WSACOMPLETIONTYPE__enumvalues
PWSACOMPLETIONTYPE = ctypes.POINTER(_WSACOMPLETIONTYPE)
LPWSACOMPLETIONTYPE = ctypes.POINTER(_WSACOMPLETIONTYPE)
class struct__E8DA42DBA6D72E9D4A6938C7E4FE721A(Structure):
    pass

struct__E8DA42DBA6D72E9D4A6938C7E4FE721A._pack_ = 1 # source:False
struct__E8DA42DBA6D72E9D4A6938C7E4FE721A._fields_ = [
    ('hWnd', ctypes.POINTER(struct_HWND__)),
    ('uMsg', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('context', ctypes.c_uint64),
]

class struct__B037A36172D96AA8797FFDAF6A0B62DF(Structure):
    pass

struct__B037A36172D96AA8797FFDAF6A0B62DF._pack_ = 1 # source:False
struct__B037A36172D96AA8797FFDAF6A0B62DF._fields_ = [
    ('lpOverlapped', ctypes.POINTER(struct__OVERLAPPED)),
]

class struct__E5ED4763ACBEF02B6DD4A1054B18F50D(Structure):
    pass

struct__E5ED4763ACBEF02B6DD4A1054B18F50D._pack_ = 1 # source:False
struct__E5ED4763ACBEF02B6DD4A1054B18F50D._fields_ = [
    ('lpOverlapped', ctypes.POINTER(struct__OVERLAPPED)),
    ('lpfnCompletionProc', ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct__OVERLAPPED), ctypes.c_uint32)),
]

class struct__449D258AA18C723FE7BC5A7EA8EED39F(Structure):
    pass

struct__449D258AA18C723FE7BC5A7EA8EED39F._pack_ = 1 # source:False
struct__449D258AA18C723FE7BC5A7EA8EED39F._fields_ = [
    ('lpOverlapped', ctypes.POINTER(struct__OVERLAPPED)),
    ('hPort', ctypes.POINTER(None)),
    ('Key', ctypes.c_uint64),
]

class union__WSACOMPLETION___6ECDC46EB850293233999C04EE6F6DBB(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('WindowMessage', struct__E8DA42DBA6D72E9D4A6938C7E4FE721A),
    ('Event', struct__B037A36172D96AA8797FFDAF6A0B62DF),
    ('Apc', struct__E5ED4763ACBEF02B6DD4A1054B18F50D),
    ('Port', struct__449D258AA18C723FE7BC5A7EA8EED39F),
     ]

class struct__WSACOMPLETION(Structure):
    pass

struct__WSACOMPLETION._pack_ = 1 # source:False
struct__WSACOMPLETION._fields_ = [
    ('Type', WSACOMPLETIONTYPE),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('Parameters', union__WSACOMPLETION___6ECDC46EB850293233999C04EE6F6DBB),
]

WSACOMPLETION = struct__WSACOMPLETION
PWSACOMPLETION = ctypes.POINTER(struct__WSACOMPLETION)
LPWSACOMPLETION = ctypes.POINTER(struct__WSACOMPLETION)
class struct__BLOB(Structure):
    pass

struct__BLOB._pack_ = 1 # source:False
struct__BLOB._fields_ = [
    ('cbSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('pBlobData', ctypes.POINTER(ctypes.c_ubyte)),
]

BLOB = struct__BLOB
LPBLOB = ctypes.POINTER(struct__BLOB)
class struct__AFPROTOCOLS(Structure):
    pass

struct__AFPROTOCOLS._pack_ = 1 # source:False
struct__AFPROTOCOLS._fields_ = [
    ('iAddressFamily', ctypes.c_int32),
    ('iProtocol', ctypes.c_int32),
]

AFPROTOCOLS = struct__AFPROTOCOLS
PAFPROTOCOLS = ctypes.POINTER(struct__AFPROTOCOLS)
LPAFPROTOCOLS = ctypes.POINTER(struct__AFPROTOCOLS)

# values for enumeration '_WSAEcomparator'
_WSAEcomparator__enumvalues = {
    0: 'COMP_EQUAL',
    1: 'COMP_NOTLESS',
}
COMP_EQUAL = 0
COMP_NOTLESS = 1
_WSAEcomparator = ctypes.c_uint32 # enum
WSAECOMPARATOR = _WSAEcomparator
WSAECOMPARATOR__enumvalues = _WSAEcomparator__enumvalues
PWSAECOMPARATOR = ctypes.POINTER(_WSAEcomparator)
LPWSAECOMPARATOR = ctypes.POINTER(_WSAEcomparator)
class struct__WSAVersion(Structure):
    pass

struct__WSAVersion._pack_ = 1 # source:False
struct__WSAVersion._fields_ = [
    ('dwVersion', ctypes.c_uint32),
    ('ecHow', WSAECOMPARATOR),
]

WSAVERSION = struct__WSAVersion
PWSAVERSION = ctypes.POINTER(struct__WSAVersion)
LPWSAVERSION = ctypes.POINTER(struct__WSAVersion)
class struct__WSAQuerySetA(Structure):
    pass

struct__WSAQuerySetA._pack_ = 1 # source:False
struct__WSAQuerySetA._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpszServiceInstanceName', ctypes.POINTER(ctypes.c_char)),
    ('lpServiceClassId', ctypes.POINTER(struct__GUID)),
    ('lpVersion', ctypes.POINTER(struct__WSAVersion)),
    ('lpszComment', ctypes.POINTER(ctypes.c_char)),
    ('dwNameSpace', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpNSProviderId', ctypes.POINTER(struct__GUID)),
    ('lpszContext', ctypes.POINTER(ctypes.c_char)),
    ('dwNumberOfProtocols', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('lpafpProtocols', ctypes.POINTER(struct__AFPROTOCOLS)),
    ('lpszQueryString', ctypes.POINTER(ctypes.c_char)),
    ('dwNumberOfCsAddrs', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('lpcsaBuffer', ctypes.POINTER(struct__CSADDR_INFO)),
    ('dwOutputFlags', ctypes.c_uint32),
    ('PADDING_4', ctypes.c_ubyte * 4),
    ('lpBlob', ctypes.POINTER(struct__BLOB)),
]

WSAQUERYSETA = struct__WSAQuerySetA
PWSAQUERYSETA = ctypes.POINTER(struct__WSAQuerySetA)
LPWSAQUERYSETA = ctypes.POINTER(struct__WSAQuerySetA)
class struct__WSAQuerySetW(Structure):
    pass

struct__WSAQuerySetW._pack_ = 1 # source:False
struct__WSAQuerySetW._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpszServiceInstanceName', ctypes.POINTER(ctypes.c_int16)),
    ('lpServiceClassId', ctypes.POINTER(struct__GUID)),
    ('lpVersion', ctypes.POINTER(struct__WSAVersion)),
    ('lpszComment', ctypes.POINTER(ctypes.c_int16)),
    ('dwNameSpace', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpNSProviderId', ctypes.POINTER(struct__GUID)),
    ('lpszContext', ctypes.POINTER(ctypes.c_int16)),
    ('dwNumberOfProtocols', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('lpafpProtocols', ctypes.POINTER(struct__AFPROTOCOLS)),
    ('lpszQueryString', ctypes.POINTER(ctypes.c_int16)),
    ('dwNumberOfCsAddrs', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('lpcsaBuffer', ctypes.POINTER(struct__CSADDR_INFO)),
    ('dwOutputFlags', ctypes.c_uint32),
    ('PADDING_4', ctypes.c_ubyte * 4),
    ('lpBlob', ctypes.POINTER(struct__BLOB)),
]

WSAQUERYSETW = struct__WSAQuerySetW
PWSAQUERYSETW = ctypes.POINTER(struct__WSAQuerySetW)
LPWSAQUERYSETW = ctypes.POINTER(struct__WSAQuerySetW)
class struct__WSAQuerySet2A(Structure):
    pass

struct__WSAQuerySet2A._pack_ = 1 # source:False
struct__WSAQuerySet2A._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpszServiceInstanceName', ctypes.POINTER(ctypes.c_char)),
    ('lpVersion', ctypes.POINTER(struct__WSAVersion)),
    ('lpszComment', ctypes.POINTER(ctypes.c_char)),
    ('dwNameSpace', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpNSProviderId', ctypes.POINTER(struct__GUID)),
    ('lpszContext', ctypes.POINTER(ctypes.c_char)),
    ('dwNumberOfProtocols', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('lpafpProtocols', ctypes.POINTER(struct__AFPROTOCOLS)),
    ('lpszQueryString', ctypes.POINTER(ctypes.c_char)),
    ('dwNumberOfCsAddrs', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('lpcsaBuffer', ctypes.POINTER(struct__CSADDR_INFO)),
    ('dwOutputFlags', ctypes.c_uint32),
    ('PADDING_4', ctypes.c_ubyte * 4),
    ('lpBlob', ctypes.POINTER(struct__BLOB)),
]

WSAQUERYSET2A = struct__WSAQuerySet2A
PWSAQUERYSET2A = ctypes.POINTER(struct__WSAQuerySet2A)
LPWSAQUERYSET2A = ctypes.POINTER(struct__WSAQuerySet2A)
class struct__WSAQuerySet2W(Structure):
    pass

struct__WSAQuerySet2W._pack_ = 1 # source:False
struct__WSAQuerySet2W._fields_ = [
    ('dwSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpszServiceInstanceName', ctypes.POINTER(ctypes.c_int16)),
    ('lpVersion', ctypes.POINTER(struct__WSAVersion)),
    ('lpszComment', ctypes.POINTER(ctypes.c_int16)),
    ('dwNameSpace', ctypes.c_uint32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('lpNSProviderId', ctypes.POINTER(struct__GUID)),
    ('lpszContext', ctypes.POINTER(ctypes.c_int16)),
    ('dwNumberOfProtocols', ctypes.c_uint32),
    ('PADDING_2', ctypes.c_ubyte * 4),
    ('lpafpProtocols', ctypes.POINTER(struct__AFPROTOCOLS)),
    ('lpszQueryString', ctypes.POINTER(ctypes.c_int16)),
    ('dwNumberOfCsAddrs', ctypes.c_uint32),
    ('PADDING_3', ctypes.c_ubyte * 4),
    ('lpcsaBuffer', ctypes.POINTER(struct__CSADDR_INFO)),
    ('dwOutputFlags', ctypes.c_uint32),
    ('PADDING_4', ctypes.c_ubyte * 4),
    ('lpBlob', ctypes.POINTER(struct__BLOB)),
]

WSAQUERYSET2W = struct__WSAQuerySet2W
PWSAQUERYSET2W = ctypes.POINTER(struct__WSAQuerySet2W)
LPWSAQUERYSET2W = ctypes.POINTER(struct__WSAQuerySet2W)
WSAQUERYSET = struct__WSAQuerySetA
PWSAQUERYSET = ctypes.POINTER(struct__WSAQuerySetA)
LPWSAQUERYSET = ctypes.POINTER(struct__WSAQuerySetA)
WSAQUERYSET2 = struct__WSAQuerySet2A
PWSAQUERYSET2 = ctypes.POINTER(struct__WSAQuerySet2A)
LPWSAQUERYSET2 = ctypes.POINTER(struct__WSAQuerySet2A)

# values for enumeration '_WSAESETSERVICEOP'
_WSAESETSERVICEOP__enumvalues = {
    0: 'RNRSERVICE_REGISTER',
    1: 'RNRSERVICE_DEREGISTER',
    2: 'RNRSERVICE_DELETE',
}
RNRSERVICE_REGISTER = 0
RNRSERVICE_DEREGISTER = 1
RNRSERVICE_DELETE = 2
_WSAESETSERVICEOP = ctypes.c_uint32 # enum
WSAESETSERVICEOP = _WSAESETSERVICEOP
WSAESETSERVICEOP__enumvalues = _WSAESETSERVICEOP__enumvalues
PWSAESETSERVICEOP = ctypes.POINTER(_WSAESETSERVICEOP)
LPWSAESETSERVICEOP = ctypes.POINTER(_WSAESETSERVICEOP)
class struct__WSANSClassInfoA(Structure):
    pass

struct__WSANSClassInfoA._pack_ = 1 # source:False
struct__WSANSClassInfoA._fields_ = [
    ('lpszName', ctypes.POINTER(ctypes.c_char)),
    ('dwNameSpace', ctypes.c_uint32),
    ('dwValueType', ctypes.c_uint32),
    ('dwValueSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpValue', ctypes.POINTER(None)),
]

WSANSCLASSINFOA = struct__WSANSClassInfoA
PWSANSCLASSINFOA = ctypes.POINTER(struct__WSANSClassInfoA)
LPWSANSCLASSINFOA = ctypes.POINTER(struct__WSANSClassInfoA)
class struct__WSANSClassInfoW(Structure):
    pass

struct__WSANSClassInfoW._pack_ = 1 # source:False
struct__WSANSClassInfoW._fields_ = [
    ('lpszName', ctypes.POINTER(ctypes.c_int16)),
    ('dwNameSpace', ctypes.c_uint32),
    ('dwValueType', ctypes.c_uint32),
    ('dwValueSize', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpValue', ctypes.POINTER(None)),
]

WSANSCLASSINFOW = struct__WSANSClassInfoW
PWSANSCLASSINFOW = ctypes.POINTER(struct__WSANSClassInfoW)
LPWSANSCLASSINFOW = ctypes.POINTER(struct__WSANSClassInfoW)
WSANSCLASSINFO = struct__WSANSClassInfoA
PWSANSCLASSINFO = ctypes.POINTER(struct__WSANSClassInfoA)
LPWSANSCLASSINFO = ctypes.POINTER(struct__WSANSClassInfoA)
class struct__WSAServiceClassInfoA(Structure):
    pass

struct__WSAServiceClassInfoA._pack_ = 1 # source:False
struct__WSAServiceClassInfoA._fields_ = [
    ('lpServiceClassId', ctypes.POINTER(struct__GUID)),
    ('lpszServiceClassName', ctypes.POINTER(ctypes.c_char)),
    ('dwCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpClassInfos', ctypes.POINTER(struct__WSANSClassInfoA)),
]

WSASERVICECLASSINFOA = struct__WSAServiceClassInfoA
PWSASERVICECLASSINFOA = ctypes.POINTER(struct__WSAServiceClassInfoA)
LPWSASERVICECLASSINFOA = ctypes.POINTER(struct__WSAServiceClassInfoA)
class struct__WSAServiceClassInfoW(Structure):
    pass

struct__WSAServiceClassInfoW._pack_ = 1 # source:False
struct__WSAServiceClassInfoW._fields_ = [
    ('lpServiceClassId', ctypes.POINTER(struct__GUID)),
    ('lpszServiceClassName', ctypes.POINTER(ctypes.c_int16)),
    ('dwCount', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpClassInfos', ctypes.POINTER(struct__WSANSClassInfoW)),
]

WSASERVICECLASSINFOW = struct__WSAServiceClassInfoW
PWSASERVICECLASSINFOW = ctypes.POINTER(struct__WSAServiceClassInfoW)
LPWSASERVICECLASSINFOW = ctypes.POINTER(struct__WSAServiceClassInfoW)
WSASERVICECLASSINFO = struct__WSAServiceClassInfoA
PWSASERVICECLASSINFO = ctypes.POINTER(struct__WSAServiceClassInfoA)
LPWSASERVICECLASSINFO = ctypes.POINTER(struct__WSAServiceClassInfoA)
class struct__WSANAMESPACE_INFOA(Structure):
    pass

struct__WSANAMESPACE_INFOA._pack_ = 1 # source:False
struct__WSANAMESPACE_INFOA._fields_ = [
    ('NSProviderId', GUID),
    ('dwNameSpace', ctypes.c_uint32),
    ('fActive', ctypes.c_int32),
    ('dwVersion', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpszIdentifier', ctypes.POINTER(ctypes.c_char)),
]

WSANAMESPACE_INFOA = struct__WSANAMESPACE_INFOA
PWSANAMESPACE_INFOA = ctypes.POINTER(struct__WSANAMESPACE_INFOA)
LPWSANAMESPACE_INFOA = ctypes.POINTER(struct__WSANAMESPACE_INFOA)
class struct__WSANAMESPACE_INFOW(Structure):
    pass

struct__WSANAMESPACE_INFOW._pack_ = 1 # source:False
struct__WSANAMESPACE_INFOW._fields_ = [
    ('NSProviderId', GUID),
    ('dwNameSpace', ctypes.c_uint32),
    ('fActive', ctypes.c_int32),
    ('dwVersion', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpszIdentifier', ctypes.POINTER(ctypes.c_int16)),
]

WSANAMESPACE_INFOW = struct__WSANAMESPACE_INFOW
PWSANAMESPACE_INFOW = ctypes.POINTER(struct__WSANAMESPACE_INFOW)
LPWSANAMESPACE_INFOW = ctypes.POINTER(struct__WSANAMESPACE_INFOW)
class struct__WSANAMESPACE_INFOEXA(Structure):
    pass

struct__WSANAMESPACE_INFOEXA._pack_ = 1 # source:False
struct__WSANAMESPACE_INFOEXA._fields_ = [
    ('NSProviderId', GUID),
    ('dwNameSpace', ctypes.c_uint32),
    ('fActive', ctypes.c_int32),
    ('dwVersion', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpszIdentifier', ctypes.POINTER(ctypes.c_char)),
    ('ProviderSpecific', BLOB),
]

WSANAMESPACE_INFOEXA = struct__WSANAMESPACE_INFOEXA
PWSANAMESPACE_INFOEXA = ctypes.POINTER(struct__WSANAMESPACE_INFOEXA)
LPWSANAMESPACE_INFOEXA = ctypes.POINTER(struct__WSANAMESPACE_INFOEXA)
class struct__WSANAMESPACE_INFOEXW(Structure):
    pass

struct__WSANAMESPACE_INFOEXW._pack_ = 1 # source:False
struct__WSANAMESPACE_INFOEXW._fields_ = [
    ('NSProviderId', GUID),
    ('dwNameSpace', ctypes.c_uint32),
    ('fActive', ctypes.c_int32),
    ('dwVersion', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('lpszIdentifier', ctypes.POINTER(ctypes.c_int16)),
    ('ProviderSpecific', BLOB),
]

WSANAMESPACE_INFOEXW = struct__WSANAMESPACE_INFOEXW
PWSANAMESPACE_INFOEXW = ctypes.POINTER(struct__WSANAMESPACE_INFOEXW)
LPWSANAMESPACE_INFOEXW = ctypes.POINTER(struct__WSANAMESPACE_INFOEXW)
WSANAMESPACE_INFO = struct__WSANAMESPACE_INFOA
PWSANAMESPACE_INFO = ctypes.POINTER(struct__WSANAMESPACE_INFOA)
LPWSANAMESPACE_INFO = ctypes.POINTER(struct__WSANAMESPACE_INFOA)
WSANAMESPACE_INFOEX = struct__WSANAMESPACE_INFOEXA
PWSANAMESPACE_INFOEX = ctypes.POINTER(struct__WSANAMESPACE_INFOEXA)
LPWSANAMESPACE_INFOEX = ctypes.POINTER(struct__WSANAMESPACE_INFOEXA)
class struct_pollfd(Structure):
    pass

struct_pollfd._pack_ = 1 # source:False
struct_pollfd._fields_ = [
    ('fd', ctypes.c_uint64),
    ('events', ctypes.c_int16),
    ('revents', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

WSAPOLLFD = struct_pollfd
PWSAPOLLFD = ctypes.POINTER(struct_pollfd)
LPWSAPOLLFD = ctypes.POINTER(struct_pollfd)
LPSOCKADDR_IN = ctypes.POINTER(struct_sockaddr_in)
LINGER = struct_linger
PLINGER = ctypes.POINTER(struct_linger)
LPLINGER = ctypes.POINTER(struct_linger)
FD_SET = struct_fd_set
PFD_SET = ctypes.POINTER(struct_fd_set)
LPFD_SET = ctypes.POINTER(struct_fd_set)
HOSTENT = struct_hostent
PHOSTENT = ctypes.POINTER(struct_hostent)
LPHOSTENT = ctypes.POINTER(struct_hostent)
SERVENT = struct_servent
PSERVENT = ctypes.POINTER(struct_servent)
LPSERVENT = ctypes.POINTER(struct_servent)
PROTOENT = struct_protoent
PPROTOENT = ctypes.POINTER(struct_protoent)
LPPROTOENT = ctypes.POINTER(struct_protoent)
TIMEVAL = struct_timeval
PTIMEVAL = ctypes.POINTER(struct_timeval)
LPTIMEVAL = ctypes.POINTER(struct_timeval)
class union_in6_addr___46CCC274F7B290215A66EE70CB5F323B(Union):
    pass

union_in6_addr___46CCC274F7B290215A66EE70CB5F323B._pack_ = 1 # source:False
union_in6_addr___46CCC274F7B290215A66EE70CB5F323B._fields_ = [
    ('Byte', ctypes.c_ubyte * 16),
    ('Word', ctypes.c_uint16 * 8),
]

class struct_in6_addr(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('u', union_in6_addr___46CCC274F7B290215A66EE70CB5F323B),
     ]

IN6_ADDR = struct_in6_addr
PIN6_ADDR = ctypes.POINTER(struct_in6_addr)
LPIN6_ADDR = ctypes.POINTER(struct_in6_addr)
class struct_sockaddr_in6_old(Structure):
    pass

struct_sockaddr_in6_old._pack_ = 1 # source:False
struct_sockaddr_in6_old._fields_ = [
    ('sin6_family', ctypes.c_int16),
    ('sin6_port', ctypes.c_uint16),
    ('sin6_flowinfo', ctypes.c_uint32),
    ('sin6_addr', IN6_ADDR),
]

class union_sockaddr_gen(Union):
    _pack_ = 1 # source:False
    _fields_ = [
    ('Address', struct_sockaddr),
    ('AddressIn', struct_sockaddr_in),
    ('AddressIn6', struct_sockaddr_in6_old),
     ]

class struct__INTERFACE_INFO(Structure):
    pass

struct__INTERFACE_INFO._pack_ = 1 # source:False
struct__INTERFACE_INFO._fields_ = [
    ('iiFlags', ctypes.c_uint32),
    ('iiAddress', union_sockaddr_gen),
    ('iiBroadcastAddress', union_sockaddr_gen),
    ('iiNetmask', union_sockaddr_gen),
]

INTERFACE_INFO = struct__INTERFACE_INFO
LPINTERFACE_INFO = ctypes.POINTER(struct__INTERFACE_INFO)
class struct__INTERFACE_INFO_EX(Structure):
    pass

struct__INTERFACE_INFO_EX._pack_ = 1 # source:False
struct__INTERFACE_INFO_EX._fields_ = [
    ('iiFlags', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('iiAddress', SOCKET_ADDRESS),
    ('iiBroadcastAddress', SOCKET_ADDRESS),
    ('iiNetmask', SOCKET_ADDRESS),
]

INTERFACE_INFO_EX = struct__INTERFACE_INFO_EX
LPINTERFACE_INFO_EX = ctypes.POINTER(struct__INTERFACE_INFO_EX)

# values for enumeration '_PMTUD_STATE'
_PMTUD_STATE__enumvalues = {
    0: 'IP_PMTUDISC_NOT_SET',
    1: 'IP_PMTUDISC_DO',
    2: 'IP_PMTUDISC_DONT',
    3: 'IP_PMTUDISC_PROBE',
    4: 'IP_PMTUDISC_MAX',
}
IP_PMTUDISC_NOT_SET = 0
IP_PMTUDISC_DO = 1
IP_PMTUDISC_DONT = 2
IP_PMTUDISC_PROBE = 3
IP_PMTUDISC_MAX = 4
_PMTUD_STATE = ctypes.c_uint32 # enum
PMTUD_STATE = _PMTUD_STATE
PMTUD_STATE__enumvalues = _PMTUD_STATE__enumvalues
PPMTUD_STATE = ctypes.POINTER(_PMTUD_STATE)
class union_sockaddr_in6___21D370470BAAB911774FB64E0374D268(Union):
    pass

union_sockaddr_in6___21D370470BAAB911774FB64E0374D268._pack_ = 1 # source:False
union_sockaddr_in6___21D370470BAAB911774FB64E0374D268._fields_ = [
    ('sin6_scope_id', ctypes.c_uint32),
    ('sin6_scope_struct', struct_SCOPE_ID),
]

class struct_sockaddr_in6(Structure):
    pass

class union_sockaddr_in6_0(Union):
    pass

union_sockaddr_in6_0._pack_ = 1 # source:False
union_sockaddr_in6_0._fields_ = [
    ('sin6_scope_id', ctypes.c_uint32),
    ('sin6_scope_struct', struct_SCOPE_ID),
]

struct_sockaddr_in6._pack_ = 1 # source:False
struct_sockaddr_in6._anonymous_ = ('_0',)
struct_sockaddr_in6._fields_ = [
    ('sin6_family', ctypes.c_uint16),
    ('sin6_port', ctypes.c_uint16),
    ('sin6_flowinfo', ctypes.c_uint32),
    ('sin6_addr', IN6_ADDR),
    ('_0', union_sockaddr_in6_0),
]

SOCKADDR_IN6_LH = struct_sockaddr_in6
PSOCKADDR_IN6_LH = ctypes.POINTER(struct_sockaddr_in6)
LPSOCKADDR_IN6_LH = ctypes.POINTER(struct_sockaddr_in6)
class struct_sockaddr_in6_w2ksp1(Structure):
    pass

struct_sockaddr_in6_w2ksp1._pack_ = 1 # source:False
struct_sockaddr_in6_w2ksp1._fields_ = [
    ('sin6_family', ctypes.c_int16),
    ('sin6_port', ctypes.c_uint16),
    ('sin6_flowinfo', ctypes.c_uint32),
    ('sin6_addr', struct_in6_addr),
    ('sin6_scope_id', ctypes.c_uint32),
]

SOCKADDR_IN6_W2KSP1 = struct_sockaddr_in6_w2ksp1
PSOCKADDR_IN6_W2KSP1 = ctypes.POINTER(struct_sockaddr_in6_w2ksp1)
LPSOCKADDR_IN6_W2KSP1 = ctypes.POINTER(struct_sockaddr_in6_w2ksp1)
SOCKADDR_IN6 = struct_sockaddr_in6
PSOCKADDR_IN6 = ctypes.POINTER(struct_sockaddr_in6)
LPSOCKADDR_IN6 = ctypes.POINTER(struct_sockaddr_in6)
class union__SOCKADDR_INET(Union):
    pass

union__SOCKADDR_INET._pack_ = 1 # source:False
union__SOCKADDR_INET._fields_ = [
    ('Ipv4', SOCKADDR_IN),
    ('Ipv6', SOCKADDR_IN6),
    ('si_family', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 26),
]

SOCKADDR_INET = union__SOCKADDR_INET
PSOCKADDR_INET = ctypes.POINTER(union__SOCKADDR_INET)
class struct__sockaddr_in6_pair(Structure):
    pass

struct__sockaddr_in6_pair._pack_ = 1 # source:False
struct__sockaddr_in6_pair._fields_ = [
    ('SourceAddress', ctypes.POINTER(struct_sockaddr_in6)),
    ('DestinationAddress', ctypes.POINTER(struct_sockaddr_in6)),
]

SOCKADDR_IN6_PAIR = struct__sockaddr_in6_pair
PSOCKADDR_IN6_PAIR = ctypes.POINTER(struct__sockaddr_in6_pair)

# values for enumeration 'MULTICAST_MODE_TYPE'
MULTICAST_MODE_TYPE__enumvalues = {
    0: 'MCAST_INCLUDE',
    1: 'MCAST_EXCLUDE',
}
MCAST_INCLUDE = 0
MCAST_EXCLUDE = 1
MULTICAST_MODE_TYPE = ctypes.c_uint32 # enum
class struct_ip_mreq(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('imr_multiaddr', IN_ADDR),
    ('imr_interface', IN_ADDR),
     ]

IP_MREQ = struct_ip_mreq
PIP_MREQ = ctypes.POINTER(struct_ip_mreq)
class struct_ip_mreq_source(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('imr_multiaddr', IN_ADDR),
    ('imr_sourceaddr', IN_ADDR),
    ('imr_interface', IN_ADDR),
     ]

IP_MREQ_SOURCE = struct_ip_mreq_source
PIP_MREQ_SOURCE = ctypes.POINTER(struct_ip_mreq_source)
class struct_ip_msfilter(Structure):
    pass

struct_ip_msfilter._pack_ = 1 # source:False
struct_ip_msfilter._fields_ = [
    ('imsf_multiaddr', IN_ADDR),
    ('imsf_interface', IN_ADDR),
    ('imsf_fmode', MULTICAST_MODE_TYPE),
    ('imsf_numsrc', ctypes.c_uint32),
    ('imsf_slist', struct_in_addr * 1),
]

IP_MSFILTER = struct_ip_msfilter
PIP_MSFILTER = ctypes.POINTER(struct_ip_msfilter)
class struct_ipv6_mreq(Structure):
    pass

struct_ipv6_mreq._pack_ = 1 # source:False
struct_ipv6_mreq._fields_ = [
    ('ipv6mr_multiaddr', IN6_ADDR),
    ('ipv6mr_interface', ctypes.c_uint32),
]

IPV6_MREQ = struct_ipv6_mreq
PIPV6_MREQ = ctypes.POINTER(struct_ipv6_mreq)
class struct_group_req(Structure):
    pass

struct_group_req._pack_ = 1 # source:False
struct_group_req._fields_ = [
    ('gr_interface', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('gr_group', SOCKADDR_STORAGE),
]

GROUP_REQ = struct_group_req
PGROUP_REQ = ctypes.POINTER(struct_group_req)
class struct_group_source_req(Structure):
    pass

struct_group_source_req._pack_ = 1 # source:False
struct_group_source_req._fields_ = [
    ('gsr_interface', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('gsr_group', SOCKADDR_STORAGE),
    ('gsr_source', SOCKADDR_STORAGE),
]

GROUP_SOURCE_REQ = struct_group_source_req
PGROUP_SOURCE_REQ = ctypes.POINTER(struct_group_source_req)
class struct_group_filter(Structure):
    pass

struct_group_filter._pack_ = 1 # source:False
struct_group_filter._fields_ = [
    ('gf_interface', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('gf_group', SOCKADDR_STORAGE),
    ('gf_fmode', MULTICAST_MODE_TYPE),
    ('gf_numsrc', ctypes.c_uint32),
    ('gf_slist', struct_sockaddr_storage * 1),
]

GROUP_FILTER = struct_group_filter
PGROUP_FILTER = ctypes.POINTER(struct_group_filter)
class struct_in_pktinfo(Structure):
    pass

struct_in_pktinfo._pack_ = 1 # source:False
struct_in_pktinfo._fields_ = [
    ('ipi_addr', IN_ADDR),
    ('ipi_ifindex', ctypes.c_uint32),
]

IN_PKTINFO = struct_in_pktinfo
PIN_PKTINFO = ctypes.POINTER(struct_in_pktinfo)
class struct_in6_pktinfo(Structure):
    pass

struct_in6_pktinfo._pack_ = 1 # source:False
struct_in6_pktinfo._fields_ = [
    ('ipi6_addr', IN6_ADDR),
    ('ipi6_ifindex', ctypes.c_uint32),
]

IN6_PKTINFO = struct_in6_pktinfo
PIN6_PKTINFO = ctypes.POINTER(struct_in6_pktinfo)
class struct_in_pktinfo_ex(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('pkt_info', IN_PKTINFO),
    ('scope_id', struct_SCOPE_ID),
     ]

IN_PKTINFO_EX = struct_in_pktinfo_ex
PIN_PKTINFO_EX = ctypes.POINTER(struct_in_pktinfo_ex)
class struct_in6_pktinfo_ex(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('pkt_info', IN6_PKTINFO),
    ('scope_id', struct_SCOPE_ID),
     ]

IN6_PKTINFO_EX = struct_in6_pktinfo_ex
PIN6_PKTINFO_EX = ctypes.POINTER(struct_in6_pktinfo_ex)
class struct_in_recverr(Structure):
    pass

struct_in_recverr._pack_ = 1 # source:False
struct_in_recverr._fields_ = [
    ('protocol', IPPROTO),
    ('info', ctypes.c_uint32),
    ('type', ctypes.c_ubyte),
    ('code', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

IN_RECVERR = struct_in_recverr
PIN_RECVERR = ctypes.POINTER(struct_in_recverr)
class struct_icmp_error_info(Structure):
    pass

struct_icmp_error_info._pack_ = 1 # source:False
struct_icmp_error_info._fields_ = [
    ('srcaddress', SOCKADDR_INET),
    ('protocol', IPPROTO),
    ('type', ctypes.c_ubyte),
    ('code', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

ICMP_ERROR_INFO = struct_icmp_error_info
PICMP_ERROR_INFO = ctypes.POINTER(struct_icmp_error_info)
ADDRINFOT = struct_addrinfo
PADDRINFOT = ctypes.POINTER(struct_addrinfo)
ADDRINFO = struct_addrinfo
LPADDRINFO = ctypes.POINTER(struct_addrinfo)
ADDRINFOEX = struct_addrinfoexA
PADDRINFOEX = ctypes.POINTER(struct_addrinfoexA)
LPLOOKUPSERVICE_COMPLETION_ROUTINE = ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct__OVERLAPPED))
socklen_t = ctypes.c_int32

# values for enumeration 'base_packet_id_t'
base_packet_id_t__enumvalues = {
    0: 'RPC_OK',
    1: 'RPC_UNK',
    2: 'RPC_MEM',
    3: 'base_packet_id_last',
}
RPC_OK = 0
RPC_UNK = 1
RPC_MEM = 2
base_packet_id_last = 3
base_packet_id_t = ctypes.c_uint32 # enum
class struct_rpc_packet_t(Structure):
    pass

struct_rpc_packet_t._pack_ = 1 # source:False
struct_rpc_packet_t._fields_ = [
    ('length', ctypes.c_uint32),
    ('code', ctypes.c_ubyte),
]


# values for enumeration 'rpc_notification_type_t'
rpc_notification_type_t__enumvalues = {
    0: 'rnt_unknown',
    1: 'rnt_msg',
    2: 'rnt_warning',
    3: 'rnt_error',
}
rnt_unknown = 0
rnt_msg = 1
rnt_warning = 2
rnt_error = 3
rpc_notification_type_t = ctypes.c_uint32 # enum
class struct_rpc_engine_t(Structure):
    pass

ioctl_handler_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_rpc_engine_t), ctypes.c_int32, ctypes.POINTER(None), ctypes.c_uint64, ctypes.POINTER(ctypes.POINTER(None)), ctypes.POINTER(ctypes.c_int64))
class struct_qvector_rpc_packet_type_desc_t_(Structure):
    pass

class struct_rpc_packet_type_desc_t(Structure):
    pass

struct_qvector_rpc_packet_type_desc_t_._pack_ = 1 # source:False
struct_qvector_rpc_packet_type_desc_t_._fields_ = [
    ('array', ctypes.POINTER(struct_rpc_packet_type_desc_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

rpc_packet_type_desc_vec_t = struct_qvector_rpc_packet_type_desc_t_
class struct_idarpc_stream_t(Structure):
    pass


# values for enumeration 'progress_loop_ctrl_t'
progress_loop_ctrl_t__enumvalues = {
    0: 'plc_proceed',
    1: 'plc_skip_iter',
    2: 'plc_cancel',
}
plc_proceed = 0
plc_skip_iter = 1
plc_cancel = 2
progress_loop_ctrl_t = ctypes.c_uint32 # enum
irs_progress_cb_t = ctypes.CFUNCTYPE(progress_loop_ctrl_t, ctypes.c_char, ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(None))
class struct_irs_cancellable_op_t(Structure):
    pass

struct_irs_cancellable_op_t._pack_ = 1 # source:False
struct_irs_cancellable_op_t._fields_ = [
    ('irs', ctypes.POINTER(struct_idarpc_stream_t)),
]

utc_timestamp_t = ctypes.c_uint64
lofi_timestamp_t = ctypes.c_uint64
class struct_network_client_handler_t(Structure):
    pass

struct_network_client_handler_t._pack_ = 1 # source:False
struct_network_client_handler_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_network_client_handler_t_vtbl)),
    ('channels', ctypes.POINTER(struct__iobuf) * 16),
    ('irs', ctypes.POINTER(struct_idarpc_stream_t)),
    ('peer_name', qstring),
    ('session_id', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('session_start', ctypes.c_uint64),
    ('verbose', ctypes.c_char),
    ('PADDING_1', ctypes.c_ubyte * 7),
]

class struct_std__less_network_client_handler_t__P_(Structure):
    pass

class struct_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P__(Structure):
    pass

class struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_(Structure):
    pass

class struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_(Structure):
    pass

struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_._pack_ = 1 # source:False
struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_._fields_ = [
    ('first', ctypes.POINTER(struct_network_client_handler_t)),
    ('second', ctypes.POINTER(struct___qthread_t)),
]

std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P___value_type = struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_
struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_._pack_ = 1 # source:False
struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_._fields_ = [
    ('_Left', ctypes.POINTER(struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_)),
    ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_)),
    ('_Right', ctypes.POINTER(struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_)),
    ('_Color', ctypes.c_char),
    ('_Isnil', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 6),
    ('_Myval', std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P___value_type),
]

std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____Node = struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_
std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_)
std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_)
std___Simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____size_type = ctypes.c_uint64
std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____size_type = ctypes.c_uint64
class struct_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P___(struct_std___Container_base0):
    pass

struct_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P___._pack_ = 1 # source:False
struct_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P___._fields_ = [
    ('_Myhead', ctypes.POINTER(struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_)),
    ('_Mysize', ctypes.c_uint64),
]

class struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P____std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____true_(struct_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P__):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P___),
     ]

class struct_std___Compressed_pair_std__less_network_client_handler_t__P___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P____std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____true___true_(struct_std__less_network_client_handler_t__P_):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P____std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____true_),
     ]

class struct_std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false__(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Mypair', struct_std___Compressed_pair_std__less_network_client_handler_t__P___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P____std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____true___true_),
     ]

class struct_std__map_network_client_handler_t__P____qthread_t__P_(struct_std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false__):
    pass

client_handlers_list_t__storage_t = struct_std__map_network_client_handler_t__P____qthread_t__P_
class struct_client_handlers_list_t(Structure):
    pass

struct_client_handlers_list_t._pack_ = 1 # source:False
struct_client_handlers_list_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_client_handlers_list_t_vtbl)),
    ('storage', client_handlers_list_t__storage_t),
]

std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false___key_compare = struct_std__less_network_client_handler_t__P_
std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____key_compare = struct_std__less_network_client_handler_t__P_
class struct_std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P__(Structure):
    pass

std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false___allocator_type = struct_std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P__
std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____allocator_type = struct_std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P__
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_)
class struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____(struct_std___Iterator_base0):
    pass

struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____._pack_ = 1 # source:False
struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____._fields_ = [
    ('_Ptr', ctypes.POINTER(struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_)),
]

class struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____(struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____):
    pass

class struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____(struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____):
    pass

std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P__ = ctypes.POINTER(struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_)
std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_)
std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____
class struct_std___Tree_id_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P___P_(Structure):
    pass

struct_std___Tree_id_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P___P_._pack_ = 1 # source:False
struct_std___Tree_id_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P___P_._fields_ = [
    ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_)),
    ('_Child', std___Tree_child),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

std___Simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____value_type = struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_
std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____value_type = struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______value_type = struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______reference = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____const_pointer = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____const_pointer = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______pointer = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______value_type = struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______reference = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______pointer = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______value_type = struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______reference = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____pointer = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____pointer = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______pointer = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
class struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____(struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____):
    pass

std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______value_type = struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_
std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______reference = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______pointer = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____iterator = struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____
std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____const_iterator = struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____
std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false_____Unchecked_iterator = struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____
std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false_____Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____
class struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____),
     ]

std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____ = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______reference = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______pointer = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______pointer = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____ = ctypes.c_int64
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______difference_type = ctypes.c_int64
std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____reverse_iterator = struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____
class struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____),
     ]

std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____ = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______reference = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______pointer = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______pointer = ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)
std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____ = ctypes.c_int64
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______difference_type = ctypes.c_int64
std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____const_reverse_iterator = struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____
std___Default_allocator_traits_std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P_____size_type = ctypes.c_uint64
std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____size_type = ctypes.c_uint64
class struct_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false___value_compare(Structure):
    pass

std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____value_compare = struct_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false___value_compare
std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false___value_type = struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_
std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____value_type = struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_
class struct_std__initializer_list_std__pair_network_client_handler_t__Pconst____qthread_t__P__(Structure):
    pass

struct_std__initializer_list_std__pair_network_client_handler_t__Pconst____qthread_t__P__._pack_ = 1 # source:False
struct_std__initializer_list_std__pair_network_client_handler_t__Pconst____qthread_t__P__._fields_ = [
    ('_First', ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)),
    ('_Last', ctypes.POINTER(struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_)),
]

std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P____value_type = struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_
std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_____value_type = struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_
std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_____pointer = ctypes.POINTER(struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_)
std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_)
std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false___key_type = ctypes.POINTER(struct_network_client_handler_t)
std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____key_type = ctypes.POINTER(struct_network_client_handler_t)
class struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('first', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____),
    ('second', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____),
     ]

class struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('first', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____),
    ('second', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____),
     ]

std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false_____Alnode = struct_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P__
std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false_____Scary_val = struct_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P___
std__map_network_client_handler_t__P____qthread_t__P___allocator_type = struct_std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P__
std__map_network_client_handler_t__P____qthread_t__P___key_compare = struct_std__less_network_client_handler_t__P_
std__map_network_client_handler_t__P____qthread_t__P___mapped_type = ctypes.POINTER(struct___qthread_t)
std__map_network_client_handler_t__P____qthread_t__P___key_type = ctypes.POINTER(struct_network_client_handler_t)
class struct_mt_client_handlers_list_t(struct_client_handlers_list_t):
    pass

struct_mt_client_handlers_list_t._pack_ = 1 # source:False
struct_mt_client_handlers_list_t._fields_ = [
    ('mutex', ctypes.POINTER(struct___qmutex_t)),
]

class struct_base_dispatcher_t(Structure):
    pass

struct_base_dispatcher_t._pack_ = 1 # source:False
struct_base_dispatcher_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_base_dispatcher_t_vtbl)),
    ('ipv4_address', qstring),
    ('certchain', qstring),
    ('privkey', qstring),
    ('irs', ctypes.POINTER(struct_idarpc_stream_t)),
    ('clients_list', ctypes.POINTER(struct_client_handlers_list_t)),
    ('port_number', ctypes.c_uint16),
    ('use_tls', ctypes.c_char),
    ('verbose', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_rpc_connection_params_t(Structure):
    pass

struct_rpc_connection_params_t._pack_ = 1 # source:False
struct_rpc_connection_params_t._fields_ = [
    ('cb', ctypes.c_uint64),
    ('host', qstring),
    ('port', ctypes.c_uint16),
    ('tls', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 5),
]

class struct_rpc_packet_data_t(Structure):
    pass

struct_rpc_packet_data_t._pack_ = 1 # source:False
struct_rpc_packet_data_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_rpc_packet_data_t_vtbl)),
    ('code', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

rpc_packet_instantiator_t = ctypes.CFUNCTYPE(ctypes.POINTER(struct_rpc_packet_data_t), ctypes.POINTER(ctypes.c_ubyte), ctypes.c_uint64, ctypes.c_int32)
class struct_ida_movable_type_rpc_packet_type_desc_t_(Structure):
    pass

qvector_rpc_packet_type_desc_t___iterator = ctypes.POINTER(struct_rpc_packet_type_desc_t)
qvector_rpc_packet_type_desc_t___const_iterator = ctypes.POINTER(struct_rpc_packet_type_desc_t)
struct_rpc_engine_t._pack_ = 1 # source:False
struct_rpc_engine_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_rpc_engine_t_vtbl)),
    ('network_error', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
    ('ioctl_handler', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_rpc_engine_t), ctypes.c_int32, ctypes.POINTER(None), ctypes.c_uint64, ctypes.POINTER(ctypes.POINTER(None)), ctypes.POINTER(ctypes.c_int64))),
    ('recv_timeout', ctypes.c_int32),
    ('is_client', ctypes.c_char),
    ('logged_in', ctypes.c_char),
    ('PADDING_1', ctypes.c_ubyte * 2),
    ('ptypes', rpc_packet_type_desc_vec_t),
]

class struct_recording_rpc_engine_t(struct_rpc_engine_t):
    pass

struct_recording_rpc_engine_t._pack_ = 1 # source:False
struct_recording_rpc_engine_t._fields_ = [
    ('rpc_irs', ctypes.POINTER(struct_idarpc_stream_t)),
    ('our_irs', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
    ('conv', ctypes.POINTER(struct__iobuf)),
]

generic_client_t__rpc_engine_creator_t = ctypes.CFUNCTYPE(ctypes.POINTER(struct_recording_rpc_engine_t), ctypes.POINTER(struct_idarpc_stream_t))
class struct_generic_client_t(Structure):
    pass

struct_generic_client_t._pack_ = 1 # source:False
struct_generic_client_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_generic_client_t_vtbl)),
    ('create_rpc_engine', ctypes.CFUNCTYPE(ctypes.POINTER(struct_recording_rpc_engine_t), ctypes.POINTER(struct_idarpc_stream_t))),
    ('rpc_engine', ctypes.POINTER(struct_recording_rpc_engine_t)),
    ('wait_dialog_contents', qstring),
    ('server_name', ctypes.POINTER(ctypes.c_char)),
    ('protocol_version', ctypes.c_int32),
    ('started_receiving_response', ctypes.c_char),
    ('was_user_cancelled', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 2),
]


# values for enumeration 'jtype_t'
jtype_t__enumvalues = {
    0: 'JT_UNKNOWN',
    1: 'JT_NUM',
    2: 'JT_STR',
    3: 'JT_OBJ',
    4: 'JT_ARR',
    5: 'JT_BOOL',
}
JT_UNKNOWN = 0
JT_NUM = 1
JT_STR = 2
JT_OBJ = 3
JT_ARR = 4
JT_BOOL = 5
jtype_t = ctypes.c_uint32 # enum
class struct_qvector_kvp_t_(Structure):
    pass

class struct_kvp_t(Structure):
    pass

struct_qvector_kvp_t_._pack_ = 1 # source:False
struct_qvector_kvp_t_._fields_ = [
    ('array', ctypes.POINTER(struct_kvp_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

class struct_jobj_t(struct_qvector_kvp_t_):
    pass

class struct_qvector_jvalue_t_(Structure):
    pass

class struct_jvalue_t(Structure):
    pass

struct_qvector_jvalue_t_._pack_ = 1 # source:False
struct_qvector_jvalue_t_._fields_ = [
    ('array', ctypes.POINTER(struct_jvalue_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

jvalues_t = struct_qvector_jvalue_t_
class struct_jarr_t(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('values', jvalues_t),
     ]

class union_jvalue_t___E3629753B7679DAEDC4DC0D611766B23(Union):
    pass

union_jvalue_t___E3629753B7679DAEDC4DC0D611766B23._pack_ = 1 # source:False
union_jvalue_t___E3629753B7679DAEDC4DC0D611766B23._fields_ = [
    ('_num', ctypes.c_int64),
    ('_str', ctypes.POINTER(struct__qstring_char_)),
    ('_obj', ctypes.POINTER(struct_jobj_t)),
    ('_arr', ctypes.POINTER(struct_jarr_t)),
    ('_bool', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

class union_jvalue_t_0(Union):
    pass

union_jvalue_t_0._pack_ = 1 # source:False
union_jvalue_t_0._fields_ = [
    ('_num', ctypes.c_int64),
    ('_str', ctypes.POINTER(struct__qstring_char_)),
    ('_obj', ctypes.POINTER(struct_jobj_t)),
    ('_arr', ctypes.POINTER(struct_jarr_t)),
    ('_bool', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

class struct_ida_movable_type_jvalue_t_(Structure):
    pass

qvector_jvalue_t___iterator = ctypes.POINTER(struct_jvalue_t)
qvector_jvalue_t___const_iterator = ctypes.POINTER(struct_jvalue_t)
class struct_ida_movable_type_kvp_t_(Structure):
    pass

qvector_kvp_t___iterator = ctypes.POINTER(struct_kvp_t)
qvector_kvp_t___const_iterator = ctypes.POINTER(struct_kvp_t)
class struct_ida_movable_type_jobj_t_(Structure):
    pass

class struct_ida_movable_type_jarr_t_(Structure):
    pass

problist_id_t = ctypes.c_ubyte
class struct_qffblk_t(Structure):
    pass

struct_qffblk_t._pack_ = 1 # source:False
struct_qffblk_t._fields_ = [
    ('attrib', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('time_create', ctypes.c_int64),
    ('time_access', ctypes.c_int64),
    ('time_write', ctypes.c_int64),
    ('size', ctypes.c_int64),
    ('name', ctypes.c_char * 260),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('handle', ctypes.c_int64),
    ('attr', ctypes.c_int32),
    ('ff_ftime', ctypes.c_uint16),
    ('ff_fdate', ctypes.c_uint16),
]

class struct_qffblk64_t(Structure):
    pass

struct_qffblk64_t._pack_ = 1 # source:False
struct_qffblk64_t._fields_ = [
    ('attrib', ctypes.c_int32),
    ('name', ctypes.c_char * 260),
    ('size', ctypes.c_uint64),
    ('ff_fdate', ctypes.c_uint16),
    ('ff_ftime', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('base', struct_qffblk_t),
]

regoff_t = ctypes.c_int32
class struct_regex_t(Structure):
    pass

struct_regex_t._pack_ = 1 # source:False
struct_regex_t._fields_ = [
    ('re_magic', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('re_nsub', ctypes.c_uint64),
    ('re_endp', ctypes.POINTER(ctypes.c_char)),
    ('re_g', ctypes.POINTER(None)),
]

class struct_regmatch_t(Structure):
    pass

struct_regmatch_t._pack_ = 1 # source:False
struct_regmatch_t._fields_ = [
    ('rm_so', ctypes.c_int32),
    ('rm_eo', ctypes.c_int32),
]


# values for enumeration '_C7C212E52085C0E483DB7F2B4EDAB218'
_C7C212E52085C0E483DB7F2B4EDAB218__enumvalues = {
    1: 'REG_ASSERT',
    2: 'REG_BADBR',
    3: 'REG_BADPAT',
    4: 'REG_BADRPT',
    5: 'REG_EBRACE',
    6: 'REG_EBRACK',
    7: 'REG_ECOLLATE',
    8: 'REG_ECTYPE',
    9: 'REG_EESCAPE',
    10: 'REG_EMPTY',
    11: 'REG_EPAREN',
    12: 'REG_ERANGE',
    13: 'REG_ESIZE',
    14: 'REG_ESPACE',
    15: 'REG_ESUBREG',
    16: 'REG_INVARG',
    17: 'REG_NOMATCH',
}
REG_ASSERT = 1
REG_BADBR = 2
REG_BADPAT = 3
REG_BADRPT = 4
REG_EBRACE = 5
REG_EBRACK = 6
REG_ECOLLATE = 7
REG_ECTYPE = 8
REG_EESCAPE = 9
REG_EMPTY = 10
REG_EPAREN = 11
REG_ERANGE = 12
REG_ESIZE = 13
REG_ESPACE = 14
REG_ESUBREG = 15
REG_INVARG = 16
REG_NOMATCH = 17
_C7C212E52085C0E483DB7F2B4EDAB218 = ctypes.c_uint32 # enum
class struct_refcnted_regex_t(struct_qrefcnt_obj_t):
    _pack_ = 1 # source:False
    _fields_ = [
    ('regex', struct_regex_t),
     ]

class struct_qrefcnt_t_refcnted_regex_t_(Structure):
    pass

struct_qrefcnt_t_refcnted_regex_t_._pack_ = 1 # source:False
struct_qrefcnt_t_refcnted_regex_t_._fields_ = [
    ('ptr', ctypes.POINTER(struct_refcnted_regex_t)),
]

regex_ptr_t = struct_qrefcnt_t_refcnted_regex_t_
class struct_std__less__qstring_char__(Structure):
    pass

class struct_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__(Structure):
    pass

class struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_(Structure):
    pass

class struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('first', struct__qstring_char_),
    ('second', struct_qrefcnt_t_refcnted_regex_t_),
     ]

std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_._pack_ = 1 # source:False
struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_._fields_ = [
    ('_Left', ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)),
    ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)),
    ('_Right', ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)),
    ('_Color', ctypes.c_char),
    ('_Isnil', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 6),
    ('_Myval', std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___value_type),
]

std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______Node = struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_
std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____size_type = ctypes.c_uint64
std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______size_type = ctypes.c_uint64
class struct_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____(struct_std___Container_base0):
    pass

struct_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____._pack_ = 1 # source:False
struct_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____._fields_ = [
    ('_Myhead', ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)),
    ('_Mysize', ctypes.c_uint64),
]

class struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true_(struct_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____),
     ]

class struct_std___Compressed_pair_std__less__qstring_char____std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true___true_(struct_std__less__qstring_char__):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Myval2', struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true_),
     ]

class struct_std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false__(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('_Mypair', struct_std___Compressed_pair_std__less__qstring_char____std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true___true_),
     ]

class struct_std__map__qstring_char___qrefcnt_t_refcnted_regex_t__(struct_std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false__):
    pass

regex_cache_t__regex_cache_map_t = struct_std__map__qstring_char___qrefcnt_t_refcnted_regex_t__
class struct_regex_cache_t(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('cache', regex_cache_t__regex_cache_map_t),
     ]

std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___key_compare = struct_std__less__qstring_char__
std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____key_compare = struct_std__less__qstring_char__
class struct_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___(Structure):
    pass

std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___allocator_type = struct_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___
std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____allocator_type = struct_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
class struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____(struct_std___Iterator_base0):
    pass

struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____._pack_ = 1 # source:False
struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____._fields_ = [
    ('_Ptr', ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)),
]

class struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____(struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____):
    pass

class struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____(struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____):
    pass

std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__ = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____
class struct_std___Tree_id_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___P_(Structure):
    pass

struct_std___Tree_id_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___P_._pack_ = 1 # source:False
struct_std___Tree_id_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___P_._fields_ = [
    ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)),
    ('_Child', std___Tree_child),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____const_pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______const_pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
class struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____(struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____):
    pass

std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____iterator = struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____
std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____const_iterator = struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____
std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Unchecked_iterator = struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____
std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____
class struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____),
     ]

std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________reference = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ = ctypes.c_int64
std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________difference_type = ctypes.c_int64
std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____reverse_iterator = struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______
class struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('current', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____),
     ]

std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________reference = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ = ctypes.c_int64
std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________difference_type = ctypes.c_int64
std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____const_reverse_iterator = struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______
std___Default_allocator_traits_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______size_type = ctypes.c_uint64
std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____size_type = ctypes.c_uint64
class struct_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_compare(Structure):
    pass

std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____value_compare = struct_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_compare
std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
class struct_std__initializer_list_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___(Structure):
    pass

struct_std__initializer_list_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___._pack_ = 1 # source:False
struct_std__initializer_list_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___._fields_ = [
    ('_First', ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)),
    ('_Last', ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)),
]

std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____value_type = struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_
std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_____value_type = struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_
std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_____pointer = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___key_type = struct__qstring_char_
std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____key_type = struct__qstring_char_
class struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('first', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____),
    ('second', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____),
     ]

class struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______(Structure):
    _pack_ = 1 # source:False
    _fields_ = [
    ('first', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____),
    ('second', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____),
     ]

std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Alnode = struct_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__
std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Scary_val = struct_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____
std__map__qstring_char___qrefcnt_t_refcnted_regex_t____allocator_type = struct_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___
std__map__qstring_char___qrefcnt_t_refcnted_regex_t____key_compare = struct_std__less__qstring_char__
std__map__qstring_char___qrefcnt_t_refcnted_regex_t____mapped_type = struct_qrefcnt_t_refcnted_regex_t_
std__map__qstring_char___qrefcnt_t_refcnted_regex_t____key_type = struct__qstring_char_

# values for enumeration 'regval_type_t'
regval_type_t__enumvalues = {
    0: 'reg_unknown',
    1: 'reg_sz',
    3: 'reg_binary',
    4: 'reg_dword',
}
reg_unknown = 0
reg_sz = 1
reg_binary = 3
reg_dword = 4
regval_type_t = ctypes.c_uint32 # enum
class struct_ida_movable_type_sreg_range_t_(Structure):
    pass

class struct_string_info_t(Structure):
    pass

struct_string_info_t._pack_ = 1 # source:False
struct_string_info_t._fields_ = [
    ('ea', ctypes.c_uint64),
    ('length', ctypes.c_int32),
    ('type', ctypes.c_int32),
]

class struct_ida_movable_type_string_info_t_(Structure):
    pass


# values for enumeration 'struc_error_t'
struc_error_t__enumvalues = {
    0: 'STRUC_ERROR_MEMBER_OK',
    4294967295: 'STRUC_ERROR_MEMBER_NAME',
    4294967294: 'STRUC_ERROR_MEMBER_OFFSET',
    4294967293: 'STRUC_ERROR_MEMBER_SIZE',
    4294967292: 'STRUC_ERROR_MEMBER_TINFO',
    4294967291: 'STRUC_ERROR_MEMBER_STRUCT',
    4294967290: 'STRUC_ERROR_MEMBER_UNIVAR',
    4294967289: 'STRUC_ERROR_MEMBER_VARLAST',
    4294967288: 'STRUC_ERROR_MEMBER_NESTED',
}
STRUC_ERROR_MEMBER_OK = 0
STRUC_ERROR_MEMBER_NAME = 4294967295
STRUC_ERROR_MEMBER_OFFSET = 4294967294
STRUC_ERROR_MEMBER_SIZE = 4294967293
STRUC_ERROR_MEMBER_TINFO = 4294967292
STRUC_ERROR_MEMBER_STRUCT = 4294967291
STRUC_ERROR_MEMBER_UNIVAR = 4294967290
STRUC_ERROR_MEMBER_VARLAST = 4294967289
STRUC_ERROR_MEMBER_NESTED = 4294967288
struc_error_t = ctypes.c_uint32 # enum

# values for enumeration 'smt_code_t'
smt_code_t__enumvalues = {
    4294967290: 'SMT_BADARG',
    4294967291: 'SMT_NOCOMPAT',
    4294967292: 'SMT_WORSE',
    4294967293: 'SMT_SIZE',
    4294967294: 'SMT_ARRAY',
    4294967295: 'SMT_OVERLAP',
    0: 'SMT_FAILED',
    1: 'SMT_OK',
    2: 'SMT_KEEP',
}
SMT_BADARG = 4294967290
SMT_NOCOMPAT = 4294967291
SMT_WORSE = 4294967292
SMT_SIZE = 4294967293
SMT_ARRAY = 4294967294
SMT_OVERLAP = 4294967295
SMT_FAILED = 0
SMT_OK = 1
SMT_KEEP = 2
smt_code_t = ctypes.c_uint32 # enum
class struct_struct_field_visitor_t(Structure):
    pass

struct_struct_field_visitor_t._pack_ = 1 # source:False
struct_struct_field_visitor_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_struct_field_visitor_t_vtbl)),
]

class struct_try_handler_t(struct_rangevec_t):
    pass

struct_try_handler_t._pack_ = 1 # source:False
struct_try_handler_t._fields_ = [
    ('disp', ctypes.c_int64),
    ('fpreg', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

class struct_ida_movable_type_try_handler_t_(Structure):
    pass

class struct_seh_t(struct_try_handler_t):
    pass

struct_seh_t._pack_ = 1 # source:False
struct_seh_t._fields_ = [
    ('filter', struct_rangevec_t),
    ('seh_code', ctypes.c_uint64),
]

class struct_ida_movable_type_seh_t_(Structure):
    pass

class struct_catch_t(struct_try_handler_t):
    pass

struct_catch_t._pack_ = 1 # source:False
struct_catch_t._fields_ = [
    ('obj', ctypes.c_int64),
    ('type_id', ctypes.c_int64),
]

class struct_ida_movable_type_catch_t_(Structure):
    pass

class struct_qvector_catch_t_(Structure):
    pass

struct_qvector_catch_t_._pack_ = 1 # source:False
struct_qvector_catch_t_._fields_ = [
    ('array', ctypes.POINTER(struct_catch_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_catch_t___iterator = ctypes.POINTER(struct_catch_t)
qvector_catch_t___const_iterator = ctypes.POINTER(struct_catch_t)
catchvec_t = struct_qvector_catch_t_
class struct_tryblk_t(struct_rangevec_t):
    pass

struct_tryblk_t._pack_ = 1 # source:False
struct_tryblk_t._fields_ = [
    ('reserve', ctypes.c_char * 72),
    ('cb', ctypes.c_ubyte),
    ('kind', ctypes.c_ubyte),
    ('level', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 5),
]

class struct_ida_movable_type_tryblk_t_(Structure):
    pass

class struct_qvector_tryblk_t_(Structure):
    pass

struct_qvector_tryblk_t_._pack_ = 1 # source:False
struct_qvector_tryblk_t_._fields_ = [
    ('array', ctypes.POINTER(struct_tryblk_t)),
    ('n', ctypes.c_uint64),
    ('alloc', ctypes.c_uint64),
]

qvector_tryblk_t___iterator = ctypes.POINTER(struct_tryblk_t)
qvector_tryblk_t___const_iterator = ctypes.POINTER(struct_tryblk_t)
tryblks_t = struct_qvector_tryblk_t_
struct_std___Container_base12._pack_ = 1 # source:False
struct_std___Container_base12._fields_ = [
    ('_Myproxy', ctypes.POINTER(struct_std___Container_proxy)),
]

struct_std___Iterator_base12._pack_ = 1 # source:False
struct_std___Iterator_base12._fields_ = [
    ('_Myproxy', ctypes.POINTER(struct_std___Container_proxy)),
    ('_Mynextiter', ctypes.POINTER(struct_std___Iterator_base12)),
]

struct_plugmod_t._pack_ = 1 # source:False
struct_plugmod_t._fields_ = [
    ('__vftable', ctypes.POINTER(struct_plugmod_t_vtbl)),
    ('owner', ctypes.c_uint64),
    ('reserved', ctypes.c_uint64),
]

struct_bytes_t._pack_ = 1 # source:False
struct_bytes_t._fields_ = [
    ('len', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
    ('bytes', ctypes.POINTER(ctypes.c_ubyte)),
]

struct_instruc_t._pack_ = 1 # source:False
struct_instruc_t._fields_ = [
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('feature', ctypes.c_uint32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

struct_asm_t._pack_ = 1 # source:False
struct_asm_t._fields_ = [
    ('flag', ctypes.c_uint32),
    ('uflag', ctypes.c_uint16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('help', ctypes.c_int32),
    ('PADDING_1', ctypes.c_ubyte * 4),
    ('header', ctypes.POINTER(ctypes.POINTER(ctypes.c_char))),
    ('origin', ctypes.POINTER(ctypes.c_char)),
    ('end', ctypes.POINTER(ctypes.c_char)),
    ('cmnt', ctypes.POINTER(ctypes.c_char)),
    ('ascsep', ctypes.c_char),
    ('accsep', ctypes.c_char),
    ('PADDING_2', ctypes.c_ubyte * 6),
    ('esccodes', ctypes.POINTER(ctypes.c_char)),
    ('a_ascii', ctypes.POINTER(ctypes.c_char)),
    ('a_byte', ctypes.POINTER(ctypes.c_char)),
    ('a_word', ctypes.POINTER(ctypes.c_char)),
    ('a_dword', ctypes.POINTER(ctypes.c_char)),
    ('a_qword', ctypes.POINTER(ctypes.c_char)),
    ('a_oword', ctypes.POINTER(ctypes.c_char)),
    ('a_float', ctypes.POINTER(ctypes.c_char)),
    ('a_double', ctypes.POINTER(ctypes.c_char)),
    ('a_tbyte', ctypes.POINTER(ctypes.c_char)),
    ('a_packreal', ctypes.POINTER(ctypes.c_char)),
    ('a_dups', ctypes.POINTER(ctypes.c_char)),
    ('a_bss', ctypes.POINTER(ctypes.c_char)),
    ('a_equ', ctypes.POINTER(ctypes.c_char)),
    ('a_seg', ctypes.POINTER(ctypes.c_char)),
    ('a_curip', ctypes.POINTER(ctypes.c_char)),
    ('out_func_header', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_outctx_t), ctypes.POINTER(struct_func_t))),
    ('out_func_footer', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_outctx_t), ctypes.POINTER(struct_func_t))),
    ('a_public', ctypes.POINTER(ctypes.c_char)),
    ('a_weak', ctypes.POINTER(ctypes.c_char)),
    ('a_extrn', ctypes.POINTER(ctypes.c_char)),
    ('a_comdef', ctypes.POINTER(ctypes.c_char)),
    ('get_type_name', ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(struct__qstring_char_), ctypes.c_uint32, ctypes.c_uint64)),
    ('a_align', ctypes.POINTER(ctypes.c_char)),
    ('lbrace', ctypes.c_char),
    ('rbrace', ctypes.c_char),
    ('PADDING_3', ctypes.c_ubyte * 6),
    ('a_mod', ctypes.POINTER(ctypes.c_char)),
    ('a_band', ctypes.POINTER(ctypes.c_char)),
    ('a_bor', ctypes.POINTER(ctypes.c_char)),
    ('a_xor', ctypes.POINTER(ctypes.c_char)),
    ('a_bnot', ctypes.POINTER(ctypes.c_char)),
    ('a_shl', ctypes.POINTER(ctypes.c_char)),
    ('a_shr', ctypes.POINTER(ctypes.c_char)),
    ('a_sizeof_fmt', ctypes.POINTER(ctypes.c_char)),
    ('flag2', ctypes.c_uint32),
    ('PADDING_4', ctypes.c_ubyte * 4),
    ('cmnt2', ctypes.POINTER(ctypes.c_char)),
    ('low8', ctypes.POINTER(ctypes.c_char)),
    ('high8', ctypes.POINTER(ctypes.c_char)),
    ('low16', ctypes.POINTER(ctypes.c_char)),
    ('high16', ctypes.POINTER(ctypes.c_char)),
    ('a_include_fmt', ctypes.POINTER(ctypes.c_char)),
    ('a_vstruc_fmt', ctypes.POINTER(ctypes.c_char)),
    ('a_rva', ctypes.POINTER(ctypes.c_char)),
    ('a_yword', ctypes.POINTER(ctypes.c_char)),
    ('a_zword', ctypes.POINTER(ctypes.c_char)),
]

struct_stkpnt_t._pack_ = 1 # source:False
struct_stkpnt_t._fields_ = [
    ('ea', ctypes.c_uint64),
    ('spd', ctypes.c_int64),
]

struct_regarg_t._pack_ = 1 # source:False
struct_regarg_t._fields_ = [
    ('reg', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('type', ctypes.POINTER(ctypes.c_ubyte)),
    ('name', ctypes.POINTER(ctypes.c_char)),
]

struct_regvar_t._pack_ = 1 # source:False
struct_regvar_t._fields_ = [
    ('PADDING_0', ctypes.c_ubyte * 16),
    ('canon', ctypes.POINTER(ctypes.c_char)),
    ('user', ctypes.POINTER(ctypes.c_char)),
    ('cmt', ctypes.POINTER(ctypes.c_char)),
]

struct_reg_access_t._pack_ = 1 # source:False
struct_reg_access_t._fields_ = [
    ('regnum', ctypes.c_int32),
    ('range', struct_bitrange_t),
    ('access_type', access_type_t),
    ('opnum', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 2),
]

struct_call_stack_info_t._pack_ = 1 # source:False
struct_call_stack_info_t._fields_ = [
    ('callea', ctypes.c_uint64),
    ('funcea', ctypes.c_uint64),
    ('fp', ctypes.c_uint64),
    ('funcok', ctypes.c_char),
    ('PADDING_0', ctypes.c_ubyte * 7),
]

struct_scattered_aloc_t._pack_ = 1 # source:False
struct_scattered_aloc_t._fields_ = [
    ('PADDING_0', ctypes.c_ubyte * 24),
]

struct_rrel_t._pack_ = 1 # source:False
struct_rrel_t._fields_ = [
    ('off', ctypes.c_int64),
    ('reg', ctypes.c_int32),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

struct_argpart_t._pack_ = 1 # source:False
struct_argpart_t._fields_ = [
    ('PADDING_0', ctypes.c_ubyte * 16),
    ('off', ctypes.c_uint16),
    ('size', ctypes.c_uint16),
    ('PADDING_1', ctypes.c_ubyte * 4),
]

struct_funcarg_t._pack_ = 1 # source:False
struct_funcarg_t._fields_ = [
    ('argloc', struct_argloc_t),
    ('name', qstring),
    ('cmt', qstring),
    ('type', struct_tinfo_t),
    ('flags', ctypes.c_uint32),
]

struct_reg_info_t._pack_ = 1 # source:False
struct_reg_info_t._fields_ = [
    ('reg', ctypes.c_int32),
    ('size', ctypes.c_int32),
]

struct_regobj_t._pack_ = 1 # source:False
struct_regobj_t._fields_ = [
    ('regidx', ctypes.c_int32),
    ('relocate', ctypes.c_int32),
    ('value', struct_bytevec_t),
]

struct_segm_move_info_t._pack_ = 1 # source:False
struct_segm_move_info_t._fields_ = [
    ('from', ctypes.c_uint64),
    ('to', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
]

struct_snapshot_t._pack_ = 1 # source:False
struct_snapshot_t._fields_ = [
    ('id', ctypes.c_uint64),
    ('flags', ctypes.c_uint16),
    ('desc', ctypes.c_char * 128),
    ('filename', ctypes.c_char * 260),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('children', snapshots_t),
]

struct_qbasic_block_t._pack_ = 1 # source:False
struct_qbasic_block_t._fields_ = [
    ('PADDING_0', ctypes.c_ubyte * 16),
    ('succ', intvec_t),
    ('pred', intvec_t),
]

struct_ida_syntax_highlighter_t__keywords_style_t._pack_ = 1 # source:False
struct_ida_syntax_highlighter_t__keywords_style_t._fields_ = [
    ('keywords', struct_qvector_ida_syntax_highlighter_t__plain_char_ptr_t_),
    ('style', syntax_highlight_style),
    ('PADDING_0', ctypes.c_ubyte * 4),
]

struct_ida_syntax_highlighter_t__multicmt_t._pack_ = 1 # source:False
struct_ida_syntax_highlighter_t__multicmt_t._fields_ = [
    ('open_multicmt', qstring),
    ('close_multicmt', qstring),
]

struct_ida_syntax_highlighter_t__plain_char_ptr_t._pack_ = 1 # source:False
struct_ida_syntax_highlighter_t__plain_char_ptr_t._fields_ = [
    ('ptr', ctypes.POINTER(ctypes.c_char)),
]

struct_udt_member_t._pack_ = 1 # source:False
struct_udt_member_t._fields_ = [
    ('offset', ctypes.c_uint64),
    ('size', ctypes.c_uint64),
    ('name', qstring),
    ('cmt', qstring),
    ('type', struct_tinfo_t),
    ('effalign', ctypes.c_int32),
    ('tafld_bits', ctypes.c_uint32),
    ('fda', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 3),
]

struct_enum_member_t._pack_ = 1 # source:False
struct_enum_member_t._fields_ = [
    ('name', qstring),
    ('cmt', qstring),
    ('value', ctypes.c_uint64),
]

struct_valstrs_t._pack_ = 1 # source:False
struct_valstrs_t._fields_ = [
    ('PADDING_0', ctypes.c_ubyte * 24),
]

struct_simple_bfi_t._pack_ = 1 # source:False
struct_simple_bfi_t._fields_ = [
    ('PADDING_0', ctypes.c_ubyte * 104),
    ('regs_', struct_no_regs_t),
    ('PADDING_1', ctypes.c_ubyte * 7),
]

struct_rpc_packet_type_desc_t._pack_ = 1 # source:False
struct_rpc_packet_type_desc_t._fields_ = [
    ('code', ctypes.c_ubyte),
    ('PADDING_0', ctypes.c_ubyte * 7),
    ('name', ctypes.POINTER(ctypes.c_char)),
    ('instantiate', ctypes.CFUNCTYPE(ctypes.POINTER(struct_rpc_packet_data_t), ctypes.POINTER(ctypes.c_ubyte), ctypes.c_uint64, ctypes.c_int32)),
]

struct_jvalue_t._pack_ = 1 # source:False
struct_jvalue_t._anonymous_ = ('_0',)
struct_jvalue_t._fields_ = [
    ('_type', jtype_t),
    ('PADDING_0', ctypes.c_ubyte * 4),
    ('_0', union_jvalue_t_0),
]

struct_kvp_t._pack_ = 1 # source:False
struct_kvp_t._fields_ = [
    ('key', qstring),
    ('value', struct_jvalue_t),
]

__all__ = \
    ['A80_addc', 'A80_addcix', 'A80_addciy', 'A80_addix', 'A80_addiy',
    'A80_cmpd', 'A80_cmpi', 'A80_im0', 'A80_im1', 'A80_im2',
    'A80_jrc', 'A80_jrnc', 'A80_jrnz', 'A80_jrz', 'A80_lbcd',
    'A80_lded', 'A80_lixd', 'A80_liyd', 'A80_lspd', 'A80_mvai',
    'A80_mvar', 'A80_mvia', 'A80_mvra', 'A80_otd', 'A80_oti',
    'A80_pcix', 'A80_pciy', 'A80_sbcd', 'A80_sded', 'A80_sixd',
    'A80_siyd', 'A80_spix', 'A80_spiy', 'A80_sspd', 'A80_subc',
    'A80_subcix', 'A80_subciy', 'A80_xtix', 'A80_xtiy',
    'AA_CHECKABLE', 'AA_CHECKED', 'AA_ICON', 'AA_LABEL', 'AA_NONE',
    'AA_SHORTCUT', 'AA_STATE', 'AA_TOOLTIP', 'AA_VISIBILITY', 'ABC',
    'ABCFLOAT', 'ABORTPROC', 'ACCEL', 'ACCESSTIMEOUT',
    'ACCESS_ALLOWED_ACE', 'ACCESS_ALLOWED_CALLBACK_ACE',
    'ACCESS_ALLOWED_CALLBACK_OBJECT_ACE', 'ACCESS_ALLOWED_OBJECT_ACE',
    'ACCESS_DENIED_ACE', 'ACCESS_DENIED_CALLBACK_ACE',
    'ACCESS_DENIED_CALLBACK_OBJECT_ACE', 'ACCESS_DENIED_OBJECT_ACE',
    'ACCESS_MASK', 'ACCESS_REASON', 'ACCESS_REASONS',
    'ACCESS_REASON_TYPE', 'ACCESS_REASON_TYPE__enumvalues',
    'ACE_HEADER', 'ACL', 'ACL_INFORMATION_CLASS',
    'ACL_INFORMATION_CLASS__enumvalues', 'ACL_REVISION_INFORMATION',
    'ACL_SIZE_INFORMATION', 'ACTCTX', 'ACTCTXA', 'ACTCTXW',
    'ACTCTX_COMPATIBILITY_ELEMENT_TYPE',
    'ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED',
    'ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION',
    'ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS',
    'ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN',
    'ACTCTX_REQUESTED_RUN_LEVEL', 'ACTCTX_RUN_LEVEL_AS_INVOKER',
    'ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE', 'ACTCTX_RUN_LEVEL_NUMBERS',
    'ACTCTX_RUN_LEVEL_REQUIRE_ADMIN', 'ACTCTX_RUN_LEVEL_UNSPECIFIED',
    'ACTCTX_SECTION_KEYED_DATA', 'ACTCTX_SECTION_KEYED_DATA_2600',
    'ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA',
    'ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION',
    'ACTIVATION_CONTEXT_BASIC_INFORMATION',
    'ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION',
    'ACTIVATION_CONTEXT_DETAILED_INFORMATION',
    'ACTIVATION_CONTEXT_INFO_CLASS',
    'ACTIVATION_CONTEXT_INFO_CLASS__enumvalues',
    'ACTIVATION_CONTEXT_QUERY_INDEX',
    'ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION', 'AD218X_alu_00',
    'AD218X_alu_01', 'AD218X_alu_02', 'AD218X_alu_03',
    'AD218X_alu_04', 'AD218X_alu_05', 'AD218X_alu_06',
    'AD218X_alu_07', 'AD218X_alu_08', 'AD218X_alu_09',
    'AD218X_alu_0a', 'AD218X_alu_0b', 'AD218X_alu_0c',
    'AD218X_alu_0d', 'AD218X_alu_0e', 'AD218X_alu_0f',
    'AD218X_alu_10', 'AD218X_alu_11', 'AD218X_alu_12',
    'AD218X_alu_13', 'AD218X_alu_14', 'AD218X_alu_15',
    'AD218X_alu_16', 'AD218X_alu_17', 'AD218X_alu_18',
    'AD218X_alu_19', 'AD218X_alu_1a', 'AD218X_alu_1b',
    'AD218X_alu_1c', 'AD218X_alu_1d', 'AD218X_amf', 'AD218X_amf_01',
    'AD218X_amf_02', 'AD218X_amf_03', 'AD218X_amf_04',
    'AD218X_amf_05', 'AD218X_amf_06', 'AD218X_amf_07',
    'AD218X_amf_08', 'AD218X_amf_09', 'AD218X_amf_0a',
    'AD218X_amf_0b', 'AD218X_amf_0c', 'AD218X_amf_0d',
    'AD218X_amf_0e', 'AD218X_amf_0f', 'AD218X_amf_10',
    'AD218X_amf_11', 'AD218X_amf_12', 'AD218X_amf_13',
    'AD218X_amf_14', 'AD218X_amf_15', 'AD218X_amf_16',
    'AD218X_amf_17', 'AD218X_amf_18', 'AD218X_amf_19',
    'AD218X_amf_1a', 'AD218X_amf_1b', 'AD218X_amf_1c',
    'AD218X_amf_1d', 'AD218X_amf_1e', 'AD218X_amf_1f',
    'AD218X_amf_move_0', 'AD218X_amf_move_1', 'AD218X_amf_move_2',
    'AD218X_amf_move_3', 'AD218X_amf_move_4', 'AD218X_amf_move_5',
    'AD218X_amf_move_6', 'AD218X_amf_move_7', 'AD218X_amf_move_8',
    'AD218X_amf_move_9', 'AD218X_amf_move_a', 'AD218X_call',
    'AD218X_call_1', 'AD218X_call_2', 'AD218X_do',
    'AD218X_double_move', 'AD218X_flag_out', 'AD218X_idle',
    'AD218X_idle_1', 'AD218X_ints_dis', 'AD218X_ints_ena',
    'AD218X_jump', 'AD218X_jump_1', 'AD218X_jump_2', 'AD218X_jump_3',
    'AD218X_jump_4', 'AD218X_last', 'AD218X_mac_0', 'AD218X_mac_1',
    'AD218X_mac_2', 'AD218X_mac_3', 'AD218X_mac_4', 'AD218X_mac_5',
    'AD218X_mac_6', 'AD218X_mac_7', 'AD218X_mac_8', 'AD218X_mac_9',
    'AD218X_mac_a', 'AD218X_mac_b', 'AD218X_mode_ctl',
    'AD218X_modify', 'AD218X_move_0', 'AD218X_move_1',
    'AD218X_move_2', 'AD218X_move_3', 'AD218X_move_4',
    'AD218X_move_5', 'AD218X_move_6', 'AD218X_move_7',
    'AD218X_move_8', 'AD218X_move_9', 'AD218X_move_a',
    'AD218X_move_b', 'AD218X_nop', 'AD218X_null', 'AD218X_rti',
    'AD218X_rti_cond', 'AD218X_rts', 'AD218X_rts_cond', 'AD218X_shft',
    'AD218X_shft_0', 'AD218X_shft_1', 'AD218X_shft_2',
    'AD218X_shft_3', 'AD218X_shft_4', 'AD218X_shft_5',
    'AD218X_shft_6', 'AD218X_shft_7', 'AD218X_shft_8',
    'AD218X_shft_9', 'AD218X_shft_a', 'AD218X_shft_b',
    'AD218X_shft_c', 'AD218X_shft_d', 'AD218X_shft_e',
    'AD218X_shft_f', 'AD218X_shifter_0', 'AD218X_shifter_1',
    'AD218X_shifter_2', 'AD218X_shifter_3', 'AD218X_shifter_4',
    'AD218X_shifter_5', 'AD218X_shifter_6', 'AD218X_shifter_7',
    'AD218X_stack_ctl', 'AD218X_tops_r', 'AD218X_tops_w',
    'ADDRESS_FAMILY', 'ADDRINFO', 'ADDRINFOA', 'ADDRINFOEX',
    'ADDRINFOEX2A', 'ADDRINFOEX2W', 'ADDRINFOEX3', 'ADDRINFOEX4',
    'ADDRINFOEXA', 'ADDRINFOEXW', 'ADDRINFOT', 'ADDRINFOW',
    'ADMINISTRATOR_POWER_POLICY', 'AFPROTOCOLS', 'ALL_CHANGED',
    'ALPHA_addf', 'ALPHA_addg', 'ALPHA_addl', 'ALPHA_addl_v',
    'ALPHA_addq', 'ALPHA_addq_v', 'ALPHA_adds', 'ALPHA_addt',
    'ALPHA_amask', 'ALPHA_and', 'ALPHA_andnot', 'ALPHA_beq',
    'ALPHA_bge', 'ALPHA_bgt', 'ALPHA_bic', 'ALPHA_bis', 'ALPHA_blbc',
    'ALPHA_blbs', 'ALPHA_ble', 'ALPHA_blt', 'ALPHA_bne', 'ALPHA_br',
    'ALPHA_br0', 'ALPHA_bsr', 'ALPHA_call_pal', 'ALPHA_clr',
    'ALPHA_cmoveq', 'ALPHA_cmovge', 'ALPHA_cmovgt', 'ALPHA_cmovlbc',
    'ALPHA_cmovlbs', 'ALPHA_cmovle', 'ALPHA_cmovlt', 'ALPHA_cmovne',
    'ALPHA_cmpbge', 'ALPHA_cmpeq', 'ALPHA_cmpgeq', 'ALPHA_cmpgle',
    'ALPHA_cmpglt', 'ALPHA_cmple', 'ALPHA_cmplt', 'ALPHA_cmpteq',
    'ALPHA_cmptle', 'ALPHA_cmptlt', 'ALPHA_cmptun', 'ALPHA_cmpule',
    'ALPHA_cmpult', 'ALPHA_cpys', 'ALPHA_cpyse', 'ALPHA_cpysn',
    'ALPHA_ctlz', 'ALPHA_ctpop', 'ALPHA_cttz', 'ALPHA_cvtdg',
    'ALPHA_cvtgd', 'ALPHA_cvtgf', 'ALPHA_cvtgq', 'ALPHA_cvtlq',
    'ALPHA_cvtqf', 'ALPHA_cvtqg', 'ALPHA_cvtql', 'ALPHA_cvtqs',
    'ALPHA_cvtqt', 'ALPHA_cvtst', 'ALPHA_cvttq', 'ALPHA_cvtts',
    'ALPHA_divf', 'ALPHA_divg', 'ALPHA_divs', 'ALPHA_divt',
    'ALPHA_ecb', 'ALPHA_eqv', 'ALPHA_excb', 'ALPHA_extbl',
    'ALPHA_extlh', 'ALPHA_extll', 'ALPHA_extqh', 'ALPHA_extql',
    'ALPHA_extwh', 'ALPHA_extwl', 'ALPHA_fabs', 'ALPHA_fbeq',
    'ALPHA_fbge', 'ALPHA_fbgt', 'ALPHA_fble', 'ALPHA_fblt',
    'ALPHA_fbne', 'ALPHA_fclr', 'ALPHA_fcmoveq', 'ALPHA_fcmovge',
    'ALPHA_fcmovgt', 'ALPHA_fcmovle', 'ALPHA_fcmovlt',
    'ALPHA_fcmovne', 'ALPHA_fetch', 'ALPHA_fetch_m', 'ALPHA_fmov',
    'ALPHA_fneg', 'ALPHA_fnop', 'ALPHA_ftois', 'ALPHA_ftoit',
    'ALPHA_implver', 'ALPHA_insbl', 'ALPHA_inslh', 'ALPHA_insll',
    'ALPHA_insqh', 'ALPHA_insql', 'ALPHA_inswh', 'ALPHA_inswl',
    'ALPHA_itoff', 'ALPHA_itofs', 'ALPHA_itoft', 'ALPHA_jmp',
    'ALPHA_jsr', 'ALPHA_jsr_coroutine', 'ALPHA_last', 'ALPHA_lda',
    'ALPHA_ldah', 'ALPHA_ldbu', 'ALPHA_ldf', 'ALPHA_ldg', 'ALPHA_ldl',
    'ALPHA_ldl_l', 'ALPHA_ldq', 'ALPHA_ldq_l', 'ALPHA_ldq_u',
    'ALPHA_lds', 'ALPHA_ldt', 'ALPHA_ldwu', 'ALPHA_maxsb8',
    'ALPHA_maxsw4', 'ALPHA_maxub8', 'ALPHA_maxuw4', 'ALPHA_mb',
    'ALPHA_mf_fpcr', 'ALPHA_minsb8', 'ALPHA_minsw4', 'ALPHA_minub8',
    'ALPHA_minuw4', 'ALPHA_mov', 'ALPHA_mskbl', 'ALPHA_msklh',
    'ALPHA_mskll', 'ALPHA_mskqh', 'ALPHA_mskql', 'ALPHA_mskwh',
    'ALPHA_mskwl', 'ALPHA_mt_fpcr', 'ALPHA_mulf', 'ALPHA_mulg',
    'ALPHA_mull', 'ALPHA_mull_v', 'ALPHA_mulq', 'ALPHA_mulq_v',
    'ALPHA_muls', 'ALPHA_mult', 'ALPHA_negf', 'ALPHA_negg',
    'ALPHA_negl', 'ALPHA_negl_v', 'ALPHA_negq', 'ALPHA_negq_v',
    'ALPHA_negs', 'ALPHA_negt', 'ALPHA_nop', 'ALPHA_not',
    'ALPHA_null', 'ALPHA_or', 'ALPHA_ornot', 'ALPHA_perr',
    'ALPHA_pklb', 'ALPHA_pkwb', 'ALPHA_rc', 'ALPHA_ret', 'ALPHA_rpcc',
    'ALPHA_rs', 'ALPHA_s4addl', 'ALPHA_s4addq', 'ALPHA_s4subl',
    'ALPHA_s4subq', 'ALPHA_s8addl', 'ALPHA_s8addq', 'ALPHA_s8subl',
    'ALPHA_s8subq', 'ALPHA_sextb', 'ALPHA_sextl', 'ALPHA_sextw',
    'ALPHA_sll', 'ALPHA_sqrtf', 'ALPHA_sqrtg', 'ALPHA_sqrts',
    'ALPHA_sqrtt', 'ALPHA_sra', 'ALPHA_srl', 'ALPHA_stb', 'ALPHA_stf',
    'ALPHA_stg', 'ALPHA_stl', 'ALPHA_stl_c', 'ALPHA_stq',
    'ALPHA_stq_c', 'ALPHA_stq_u', 'ALPHA_sts', 'ALPHA_stt',
    'ALPHA_stw', 'ALPHA_subf', 'ALPHA_subg', 'ALPHA_subl',
    'ALPHA_subl_v', 'ALPHA_subq', 'ALPHA_subq_v', 'ALPHA_subs',
    'ALPHA_subt', 'ALPHA_trapb', 'ALPHA_umulh', 'ALPHA_unop',
    'ALPHA_unpkbl', 'ALPHA_unpkbw', 'ALPHA_wh64', 'ALPHA_wmb',
    'ALPHA_xor', 'ALPHA_xornot', 'ALPHA_zap', 'ALPHA_zapnot',
    'ALTTABINFO', 'ANIMATIONINFO', 'APC_CALLBACK_FUNCTION',
    'APPLICATIONLAUNCH_SETTING_VALUE',
    'APPLICATION_RECOVERY_CALLBACK', 'APP_MEMORY_INFORMATION',
    'ARC_abs', 'ARC_abss', 'ARC_abssh', 'ARC_abssw', 'ARC_acm',
    'ARC_adc', 'ARC_adcs', 'ARC_add', 'ARC_add1', 'ARC_add2',
    'ARC_add3', 'ARC_addqbs', 'ARC_adds', 'ARC_addsdw', 'ARC_aex',
    'ARC_and', 'ARC_asl', 'ARC_aslacc', 'ARC_asls', 'ARC_aslsacc',
    'ARC_asr', 'ARC_asr16', 'ARC_asr8', 'ARC_asrs', 'ARC_asrsr',
    'ARC_avgqb', 'ARC_b', 'ARC_bbit0', 'ARC_bbit1', 'ARC_bclr',
    'ARC_bi', 'ARC_bic', 'ARC_bih', 'ARC_bl', 'ARC_bmsk', 'ARC_bmskn',
    'ARC_br', 'ARC_brk', 'ARC_bset', 'ARC_bspeek', 'ARC_bspop',
    'ARC_bspush', 'ARC_btst', 'ARC_bxor', 'ARC_cbflyhf0r',
    'ARC_cbflyhf1r', 'ARC_clamp', 'ARC_clri', 'ARC_cmacchfr',
    'ARC_cmacchnfr', 'ARC_cmachfr', 'ARC_cmachnfr', 'ARC_cmp',
    'ARC_cmpychfr', 'ARC_cmpychnfr', 'ARC_cmpyhfmr', 'ARC_cmpyhfr',
    'ARC_cmpyhnfr', 'ARC_daddh11', 'ARC_daddh12', 'ARC_daddh21',
    'ARC_daddh22', 'ARC_dexcl1', 'ARC_dexcl2', 'ARC_div', 'ARC_divaw',
    'ARC_divf', 'ARC_divu', 'ARC_dmach', 'ARC_dmachbl', 'ARC_dmachbm',
    'ARC_dmachf', 'ARC_dmachfr', 'ARC_dmachu', 'ARC_dmpyh',
    'ARC_dmpyhbl', 'ARC_dmpyhbm', 'ARC_dmpyhf', 'ARC_dmpyhfr',
    'ARC_dmpyhu', 'ARC_dmpyhwf', 'ARC_dmulh11', 'ARC_dmulh12',
    'ARC_dmulh21', 'ARC_dmulh22', 'ARC_drsubh11', 'ARC_drsubh12',
    'ARC_drsubh21', 'ARC_drsubh22', 'ARC_dsubh11', 'ARC_dsubh12',
    'ARC_dsubh21', 'ARC_dsubh22', 'ARC_ei', 'ARC_enter', 'ARC_ex',
    'ARC_extb', 'ARC_exth', 'ARC_extw', 'ARC_fadd', 'ARC_fcvt32',
    'ARC_ffs', 'ARC_flag', 'ARC_flagacc', 'ARC_fls', 'ARC_fmul',
    'ARC_fsadd', 'ARC_fscmp', 'ARC_fscmpf', 'ARC_fsdiv', 'ARC_fsmadd',
    'ARC_fsmsub', 'ARC_fsmul', 'ARC_fssqrt', 'ARC_fssub', 'ARC_fsub',
    'ARC_fxtr', 'ARC_getacc', 'ARC_iaddr', 'ARC_j', 'ARC_jl',
    'ARC_jli', 'ARC_kflag', 'ARC_last', 'ARC_ld', 'ARC_ldi',
    'ARC_leave', 'ARC_llock', 'ARC_lp', 'ARC_lr', 'ARC_lsl',
    'ARC_lsl16', 'ARC_lsl8', 'ARC_lsr', 'ARC_lsr16', 'ARC_lsr8',
    'ARC_mac', 'ARC_macd', 'ARC_macdf', 'ARC_macdu', 'ARC_macdw',
    'ARC_macf', 'ARC_macflw', 'ARC_macfr', 'ARC_machflw',
    'ARC_machlw', 'ARC_machulw', 'ARC_maclw', 'ARC_macrdw',
    'ARC_macu', 'ARC_macudw', 'ARC_macwhfl', 'ARC_macwhflr',
    'ARC_macwhfm', 'ARC_macwhfmr', 'ARC_macwhkl', 'ARC_macwhkul',
    'ARC_macwhl', 'ARC_macwhul', 'ARC_max', 'ARC_min', 'ARC_modif',
    'ARC_mov', 'ARC_mpy', 'ARC_mpyd', 'ARC_mpydf', 'ARC_mpydu',
    'ARC_mpyf', 'ARC_mpyfr', 'ARC_mpyh', 'ARC_mpyhm', 'ARC_mpyhu',
    'ARC_mpym', 'ARC_mpyqb', 'ARC_mpyu', 'ARC_mpyuw', 'ARC_mpyw',
    'ARC_mpywhfl', 'ARC_mpywhflr', 'ARC_mpywhfm', 'ARC_mpywhfmr',
    'ARC_mpywhkl', 'ARC_mpywhkul', 'ARC_mpywhl', 'ARC_mpywhul',
    'ARC_msubdf', 'ARC_msubdw', 'ARC_msubf', 'ARC_msubfr',
    'ARC_msubwhfl', 'ARC_msubwhflr', 'ARC_msubwhfm', 'ARC_msubwhfmr',
    'ARC_mul64', 'ARC_muldw', 'ARC_mulflw', 'ARC_mulhflw',
    'ARC_mulhlw', 'ARC_mullw', 'ARC_mulrdw', 'ARC_mulu64',
    'ARC_muludw', 'ARC_mululw', 'ARC_neg', 'ARC_negs', 'ARC_negsh',
    'ARC_negsw', 'ARC_nop', 'ARC_norm', 'ARC_normacc', 'ARC_normh',
    'ARC_normw', 'ARC_not', 'ARC_null', 'ARC_or', 'ARC_pkqb',
    'ARC_pop', 'ARC_push', 'ARC_rcmp', 'ARC_rem', 'ARC_remu',
    'ARC_rlc', 'ARC_rnd16', 'ARC_rndh', 'ARC_rol', 'ARC_rol8',
    'ARC_ror', 'ARC_ror8', 'ARC_rrc', 'ARC_rsub', 'ARC_rtie',
    'ARC_sat16', 'ARC_satf', 'ARC_sath', 'ARC_sbc', 'ARC_sbcs',
    'ARC_scond', 'ARC_setacc', 'ARC_seteq', 'ARC_setge', 'ARC_setgt',
    'ARC_seths', 'ARC_seti', 'ARC_setle', 'ARC_setlo', 'ARC_setlt',
    'ARC_setne', 'ARC_sexb', 'ARC_sexh', 'ARC_sexw', 'ARC_sfxtr',
    'ARC_sleep', 'ARC_sqrt', 'ARC_sqrtf', 'ARC_sr', 'ARC_st',
    'ARC_store_instructions', 'ARC_sub', 'ARC_sub1', 'ARC_sub2',
    'ARC_sub3', 'ARC_subs', 'ARC_subsdw', 'ARC_swap', 'ARC_swape',
    'ARC_swi', 'ARC_sync', 'ARC_trap', 'ARC_tst', 'ARC_unimp',
    'ARC_upkqb', 'ARC_vabs2h', 'ARC_vabss2h', 'ARC_vadd2h',
    'ARC_vadd4b', 'ARC_vadds2h', 'ARC_vaddsub2h', 'ARC_vaddsubs2h',
    'ARC_valgn2h', 'ARC_vasl2h', 'ARC_vasls2h', 'ARC_vasr2h',
    'ARC_vasrs2h', 'ARC_vasrsr2h', 'ARC_vext2bhl', 'ARC_vext2bhlf',
    'ARC_vext2bhm', 'ARC_vext2bhmf', 'ARC_vlsr2h', 'ARC_vmac2h',
    'ARC_vmac2hf', 'ARC_vmac2hfr', 'ARC_vmac2hnfr', 'ARC_vmac2hu',
    'ARC_vmax2h', 'ARC_vmin2h', 'ARC_vmpy2h', 'ARC_vmpy2hf',
    'ARC_vmpy2hfr', 'ARC_vmpy2hu', 'ARC_vmpy2hwf', 'ARC_vmsub2hf',
    'ARC_vmsub2hfr', 'ARC_vmsub2hnfr', 'ARC_vneg2h', 'ARC_vnegs2h',
    'ARC_vnorm2h', 'ARC_vpack2hbl', 'ARC_vpack2hblf', 'ARC_vpack2hbm',
    'ARC_vpack2hbmf', 'ARC_vpack2hl', 'ARC_vpack2hm', 'ARC_vperm',
    'ARC_vrep2hl', 'ARC_vrep2hm', 'ARC_vsext2bhl', 'ARC_vsext2bhm',
    'ARC_vsub2h', 'ARC_vsub4b', 'ARC_vsubadd2h', 'ARC_vsubadds2h',
    'ARC_vsubs2h', 'ARC_wevt', 'ARC_xor', 'ARC_xpkqb',
    'ARGREGS_BY_SLOTS', 'ARGREGS_FP_CONSUME_GP', 'ARGREGS_GP_ONLY',
    'ARGREGS_INDEPENDENT', 'ARGREGS_MIPS_O32',
    'ARGREGS_POLICY_UNDEFINED', 'ARM64_FNPDATA_CR',
    'ARM64_FNPDATA_FLAGS', 'ARM_abs', 'ARM_adc', 'ARM_add',
    'ARM_addg', 'ARM_addhn', 'ARM_addhn2', 'ARM_addp', 'ARM_addv',
    'ARM_adr', 'ARM_adrl', 'ARM_adrp', 'ARM_aesd', 'ARM_aese',
    'ARM_aesimc', 'ARM_aesmc', 'ARM_and', 'ARM_asr', 'ARM_at',
    'ARM_aut', 'ARM_axflag', 'ARM_b', 'ARM_bfc', 'ARM_bfi', 'ARM_bfm',
    'ARM_bfxil', 'ARM_bic', 'ARM_bif', 'ARM_bit', 'ARM_bkpt',
    'ARM_bl', 'ARM_blr', 'ARM_blx1', 'ARM_blx2', 'ARM_br', 'ARM_brk',
    'ARM_bsl', 'ARM_bti', 'ARM_bx', 'ARM_bxj', 'ARM_cas', 'ARM_casa',
    'ARM_casal', 'ARM_casl', 'ARM_casp', 'ARM_caspa', 'ARM_caspal',
    'ARM_caspl', 'ARM_cbnz', 'ARM_cbz', 'ARM_ccmn', 'ARM_ccmp',
    'ARM_cdp', 'ARM_cdp2', 'ARM_cfinv', 'ARM_chka', 'ARM_cinc',
    'ARM_cinv', 'ARM_clrex', 'ARM_cls', 'ARM_clz', 'ARM_cmeq',
    'ARM_cmge', 'ARM_cmgt', 'ARM_cmhi', 'ARM_cmhs', 'ARM_cmle',
    'ARM_cmlo', 'ARM_cmls', 'ARM_cmlt', 'ARM_cmn', 'ARM_cmp',
    'ARM_cmpp', 'ARM_cmtst', 'ARM_cneg', 'ARM_cnt', 'ARM_cps',
    'ARM_cpsid', 'ARM_cpsie', 'ARM_crc32', 'ARM_crc32c', 'ARM_csel',
    'ARM_cset', 'ARM_csetm', 'ARM_csinc', 'ARM_csinv', 'ARM_csneg',
    'ARM_dbg', 'ARM_dc', 'ARM_dcps1', 'ARM_dcps2', 'ARM_dcps3',
    'ARM_dmb', 'ARM_drps', 'ARM_dsb', 'ARM_dup', 'ARM_enterx',
    'ARM_eon', 'ARM_eor', 'ARM_eret', 'ARM_ext', 'ARM_extr',
    'ARM_fabd', 'ARM_fabs', 'ARM_fabsd', 'ARM_fabss', 'ARM_facge',
    'ARM_facgt', 'ARM_facle', 'ARM_faclt', 'ARM_fadd', 'ARM_faddd',
    'ARM_faddp', 'ARM_fadds', 'ARM_fccmp', 'ARM_fccmpe', 'ARM_fcmeq',
    'ARM_fcmge', 'ARM_fcmgt', 'ARM_fcmle', 'ARM_fcmlt', 'ARM_fcmp',
    'ARM_fcmpd', 'ARM_fcmpe', 'ARM_fcmped', 'ARM_fcmpes',
    'ARM_fcmpezd', 'ARM_fcmpezs', 'ARM_fcmps', 'ARM_fcmpzd',
    'ARM_fcmpzs', 'ARM_fcpyd', 'ARM_fcpys', 'ARM_fcsel', 'ARM_fcvt',
    'ARM_fcvtas', 'ARM_fcvtau', 'ARM_fcvtds', 'ARM_fcvtl',
    'ARM_fcvtl2', 'ARM_fcvtms', 'ARM_fcvtmu', 'ARM_fcvtn',
    'ARM_fcvtn2', 'ARM_fcvtns', 'ARM_fcvtnu', 'ARM_fcvtps',
    'ARM_fcvtpu', 'ARM_fcvtsd', 'ARM_fcvtxn', 'ARM_fcvtxn2',
    'ARM_fcvtzs', 'ARM_fcvtzu', 'ARM_fdiv', 'ARM_fdivd', 'ARM_fdivs',
    'ARM_fjcvtzs', 'ARM_fldd', 'ARM_fldmd', 'ARM_fldms', 'ARM_fldmx',
    'ARM_flds', 'ARM_fmacd', 'ARM_fmacs', 'ARM_fmadd', 'ARM_fmax',
    'ARM_fmaxnm', 'ARM_fmaxnmp', 'ARM_fmaxnmv', 'ARM_fmaxp',
    'ARM_fmaxv', 'ARM_fmdhr', 'ARM_fmdlr', 'ARM_fmdrr', 'ARM_fmin',
    'ARM_fminnm', 'ARM_fminnmp', 'ARM_fminnmv', 'ARM_fminp',
    'ARM_fminv', 'ARM_fmla', 'ARM_fmls', 'ARM_fmov', 'ARM_fmrdh',
    'ARM_fmrdl', 'ARM_fmrrd', 'ARM_fmrrs', 'ARM_fmrs', 'ARM_fmrx',
    'ARM_fmscd', 'ARM_fmscs', 'ARM_fmsr', 'ARM_fmsrr', 'ARM_fmstat',
    'ARM_fmsub', 'ARM_fmul', 'ARM_fmuld', 'ARM_fmuls', 'ARM_fmulx',
    'ARM_fmxr', 'ARM_fneg', 'ARM_fnegd', 'ARM_fnegs', 'ARM_fnmacd',
    'ARM_fnmacs', 'ARM_fnmadd', 'ARM_fnmscd', 'ARM_fnmscs',
    'ARM_fnmsub', 'ARM_fnmul', 'ARM_fnmuld', 'ARM_fnmuls',
    'ARM_frecpe', 'ARM_frecps', 'ARM_frecpx', 'ARM_frint32x',
    'ARM_frint32z', 'ARM_frint64x', 'ARM_frint64z', 'ARM_frinta',
    'ARM_frinti', 'ARM_frintm', 'ARM_frintn', 'ARM_frintp',
    'ARM_frintx', 'ARM_frintz', 'ARM_frsqrte', 'ARM_frsqrts',
    'ARM_fsitod', 'ARM_fsitos', 'ARM_fsqrt', 'ARM_fsqrtd',
    'ARM_fsqrts', 'ARM_fstd', 'ARM_fstmd', 'ARM_fstms', 'ARM_fstmx',
    'ARM_fsts', 'ARM_fsub', 'ARM_fsubd', 'ARM_fsubs', 'ARM_ftosid',
    'ARM_ftosis', 'ARM_ftosizd', 'ARM_ftosizs', 'ARM_ftouid',
    'ARM_ftouis', 'ARM_ftouizd', 'ARM_ftouizs', 'ARM_fuitod',
    'ARM_fuitos', 'ARM_gmi', 'ARM_hb', 'ARM_hbl', 'ARM_hblp',
    'ARM_hbp', 'ARM_hint', 'ARM_hlt', 'ARM_hvc', 'ARM_ic', 'ARM_ins',
    'ARM_irg', 'ARM_isb', 'ARM_it', 'ARM_last', 'ARM_ld1', 'ARM_ld1r',
    'ARM_ld2', 'ARM_ld2r', 'ARM_ld3', 'ARM_ld3r', 'ARM_ld4',
    'ARM_ld4r', 'ARM_lda', 'ARM_ldadd', 'ARM_ldadda', 'ARM_ldaddal',
    'ARM_ldaddl', 'ARM_ldaex', 'ARM_ldapr', 'ARM_ldapur', 'ARM_ldar',
    'ARM_ldaxp', 'ARM_ldaxr', 'ARM_ldc', 'ARM_ldc2', 'ARM_ldclr',
    'ARM_ldclra', 'ARM_ldclral', 'ARM_ldclrl', 'ARM_ldeor',
    'ARM_ldeora', 'ARM_ldeoral', 'ARM_ldeorl', 'ARM_ldg', 'ARM_ldgm',
    'ARM_ldlar', 'ARM_ldm', 'ARM_ldnp', 'ARM_ldp', 'ARM_ldr',
    'ARM_ldrd', 'ARM_ldrd2', 'ARM_ldrex', 'ARM_ldrexb', 'ARM_ldrexd',
    'ARM_ldrexh', 'ARM_ldrpc', 'ARM_ldset', 'ARM_ldseta',
    'ARM_ldsetal', 'ARM_ldsetl', 'ARM_ldsmax', 'ARM_ldsmaxa',
    'ARM_ldsmaxal', 'ARM_ldsmaxl', 'ARM_ldsmin', 'ARM_ldsmina',
    'ARM_ldsminal', 'ARM_ldsminl', 'ARM_ldtr', 'ARM_ldumax',
    'ARM_ldumaxa', 'ARM_ldumaxal', 'ARM_ldumaxl', 'ARM_ldumin',
    'ARM_ldumina', 'ARM_lduminal', 'ARM_lduminl', 'ARM_ldur',
    'ARM_ldxp', 'ARM_ldxr', 'ARM_leavex', 'ARM_lsl', 'ARM_lsr',
    'ARM_madd', 'ARM_mcr', 'ARM_mcr2', 'ARM_mcrr', 'ARM_mcrr2',
    'ARM_mla', 'ARM_mls', 'ARM_mneg', 'ARM_mov', 'ARM_movi',
    'ARM_movk', 'ARM_movl', 'ARM_movn', 'ARM_movt', 'ARM_movz',
    'ARM_mrc', 'ARM_mrc2', 'ARM_mrrc', 'ARM_mrrc2', 'ARM_mrs',
    'ARM_msr', 'ARM_msub', 'ARM_mul', 'ARM_mvn', 'ARM_mvni',
    'ARM_neg', 'ARM_ngc', 'ARM_nop', 'ARM_not', 'ARM_null', 'ARM_orn',
    'ARM_orr', 'ARM_pac', 'ARM_pkhbt', 'ARM_pkhtb', 'ARM_pld',
    'ARM_pldw', 'ARM_pli', 'ARM_pmul', 'ARM_pmull', 'ARM_pmull2',
    'ARM_pop', 'ARM_prfm', 'ARM_prfum', 'ARM_pssbb', 'ARM_push',
    'ARM_qadd', 'ARM_qadd16', 'ARM_qadd8', 'ARM_qaddsubx',
    'ARM_qdadd', 'ARM_qdsub', 'ARM_qsub', 'ARM_qsub16', 'ARM_qsub8',
    'ARM_qsubaddx', 'ARM_raddhn', 'ARM_raddhn2', 'ARM_rbit',
    'ARM_ret', 'ARM_rev', 'ARM_rev16', 'ARM_rev32', 'ARM_rev64',
    'ARM_revsh', 'ARM_rfe', 'ARM_rmif', 'ARM_ror', 'ARM_rrx',
    'ARM_rsb', 'ARM_rsc', 'ARM_rshrn', 'ARM_rshrn2', 'ARM_rsubhn',
    'ARM_rsubhn2', 'ARM_saba', 'ARM_sabal', 'ARM_sabal2', 'ARM_sabd',
    'ARM_sabdl', 'ARM_sabdl2', 'ARM_sadalp', 'ARM_sadd16',
    'ARM_sadd8', 'ARM_saddl', 'ARM_saddl2', 'ARM_saddlp',
    'ARM_saddlv', 'ARM_saddsubx', 'ARM_saddw', 'ARM_saddw2', 'ARM_sb',
    'ARM_sbc', 'ARM_sbfiz', 'ARM_sbfm', 'ARM_sbfx', 'ARM_scvtf',
    'ARM_sdiv', 'ARM_sel', 'ARM_setend', 'ARM_setf16', 'ARM_setf8',
    'ARM_sev', 'ARM_sevl', 'ARM_sg', 'ARM_sha1c', 'ARM_sha1h',
    'ARM_sha1m', 'ARM_sha1p', 'ARM_sha1su0', 'ARM_sha1su1',
    'ARM_sha256h', 'ARM_sha256h2', 'ARM_sha256su0', 'ARM_sha256su1',
    'ARM_shadd', 'ARM_shadd16', 'ARM_shadd8', 'ARM_shaddsubx',
    'ARM_shl', 'ARM_shll', 'ARM_shll2', 'ARM_shrn', 'ARM_shrn2',
    'ARM_shsub', 'ARM_shsub16', 'ARM_shsub8', 'ARM_shsubaddx',
    'ARM_sli', 'ARM_smaddl', 'ARM_smax', 'ARM_smaxp', 'ARM_smaxv',
    'ARM_smc', 'ARM_smin', 'ARM_sminp', 'ARM_sminv', 'ARM_smlabb',
    'ARM_smlabt', 'ARM_smlad', 'ARM_smladx', 'ARM_smlal',
    'ARM_smlal2', 'ARM_smlalbb', 'ARM_smlalbt', 'ARM_smlald',
    'ARM_smlaldx', 'ARM_smlaltb', 'ARM_smlaltt', 'ARM_smlatb',
    'ARM_smlatt', 'ARM_smlawb', 'ARM_smlawt', 'ARM_smlsd',
    'ARM_smlsdx', 'ARM_smlsl', 'ARM_smlsl2', 'ARM_smlsld',
    'ARM_smlsldx', 'ARM_smmla', 'ARM_smmlar', 'ARM_smmls',
    'ARM_smmlsr', 'ARM_smmul', 'ARM_smmulr', 'ARM_smnegl', 'ARM_smov',
    'ARM_smsubl', 'ARM_smuad', 'ARM_smuadx', 'ARM_smulbb',
    'ARM_smulbt', 'ARM_smulh', 'ARM_smull', 'ARM_smull2',
    'ARM_smultb', 'ARM_smultt', 'ARM_smulwb', 'ARM_smulwt',
    'ARM_smusd', 'ARM_smusdx', 'ARM_sqabs', 'ARM_sqadd',
    'ARM_sqdmlal', 'ARM_sqdmlal2', 'ARM_sqdmlsl', 'ARM_sqdmlsl2',
    'ARM_sqdmulh', 'ARM_sqdmull', 'ARM_sqdmull2', 'ARM_sqneg',
    'ARM_sqrdmlah', 'ARM_sqrdmlsh', 'ARM_sqrdmulh', 'ARM_sqrshl',
    'ARM_sqrshrn', 'ARM_sqrshrn2', 'ARM_sqrshrun', 'ARM_sqrshrun2',
    'ARM_sqshl', 'ARM_sqshlu', 'ARM_sqshrn', 'ARM_sqshrn2',
    'ARM_sqshrun', 'ARM_sqshrun2', 'ARM_sqsub', 'ARM_sqxtn',
    'ARM_sqxtn2', 'ARM_sqxtun', 'ARM_sqxtun2', 'ARM_srhadd',
    'ARM_sri', 'ARM_srs', 'ARM_srshl', 'ARM_srshr', 'ARM_srsra',
    'ARM_ssat', 'ARM_ssat16', 'ARM_ssbb', 'ARM_sshl', 'ARM_sshll',
    'ARM_sshll2', 'ARM_sshr', 'ARM_ssra', 'ARM_ssub16', 'ARM_ssub8',
    'ARM_ssubaddx', 'ARM_ssubl', 'ARM_ssubl2', 'ARM_ssubw',
    'ARM_ssubw2', 'ARM_st1', 'ARM_st2', 'ARM_st2g', 'ARM_st3',
    'ARM_st4', 'ARM_stadd', 'ARM_staddl', 'ARM_stc', 'ARM_stc2',
    'ARM_stclr', 'ARM_stclrl', 'ARM_steor', 'ARM_steorl', 'ARM_stg',
    'ARM_stgm', 'ARM_stgp', 'ARM_stl', 'ARM_stlex', 'ARM_stllr',
    'ARM_stlr', 'ARM_stlur', 'ARM_stlxp', 'ARM_stlxr', 'ARM_stm',
    'ARM_stnp', 'ARM_stp', 'ARM_str', 'ARM_strd', 'ARM_strd2',
    'ARM_strex', 'ARM_strexb', 'ARM_strexd', 'ARM_strexh',
    'ARM_stset', 'ARM_stsetl', 'ARM_stsmax', 'ARM_stsmaxl',
    'ARM_stsmin', 'ARM_stsminl', 'ARM_sttr', 'ARM_stumax',
    'ARM_stumaxl', 'ARM_stumin', 'ARM_stuminl', 'ARM_stur',
    'ARM_stxp', 'ARM_stxr', 'ARM_stz2g', 'ARM_stzg', 'ARM_stzgm',
    'ARM_sub', 'ARM_subg', 'ARM_subhn', 'ARM_subhn2', 'ARM_subp',
    'ARM_suqadd', 'ARM_svc', 'ARM_swbkpt', 'ARM_swp', 'ARM_swpa',
    'ARM_swpal', 'ARM_swpl', 'ARM_sxtab', 'ARM_sxtab16', 'ARM_sxtah',
    'ARM_sxtb', 'ARM_sxtb16', 'ARM_sxth', 'ARM_sxtl', 'ARM_sxtl2',
    'ARM_sxtw', 'ARM_sys', 'ARM_sysl', 'ARM_tbb', 'ARM_tbh',
    'ARM_tbl', 'ARM_tbnz', 'ARM_tbx', 'ARM_tbz', 'ARM_teq',
    'ARM_tlbi', 'ARM_trn1', 'ARM_trn2', 'ARM_tst', 'ARM_tt',
    'ARM_tta', 'ARM_uaba', 'ARM_uabal', 'ARM_uabal2', 'ARM_uabd',
    'ARM_uabdl', 'ARM_uabdl2', 'ARM_uadalp', 'ARM_uadd16',
    'ARM_uadd8', 'ARM_uaddl', 'ARM_uaddl2', 'ARM_uaddlp',
    'ARM_uaddlv', 'ARM_uaddsubx', 'ARM_uaddw', 'ARM_uaddw2',
    'ARM_ubfiz', 'ARM_ubfm', 'ARM_ubfx', 'ARM_ucvtf', 'ARM_udiv',
    'ARM_uhadd', 'ARM_uhadd16', 'ARM_uhadd8', 'ARM_uhaddsubx',
    'ARM_uhsub', 'ARM_uhsub16', 'ARM_uhsub8', 'ARM_uhsubaddx',
    'ARM_umaal', 'ARM_umaddl', 'ARM_umax', 'ARM_umaxp', 'ARM_umaxv',
    'ARM_umin', 'ARM_uminp', 'ARM_uminv', 'ARM_umlal', 'ARM_umlal2',
    'ARM_umlsl', 'ARM_umlsl2', 'ARM_umnegl', 'ARM_umov', 'ARM_umsubl',
    'ARM_umulh', 'ARM_umull', 'ARM_umull2', 'ARM_und', 'ARM_uqadd',
    'ARM_uqadd16', 'ARM_uqadd8', 'ARM_uqaddsubx', 'ARM_uqrshl',
    'ARM_uqrshrn', 'ARM_uqrshrn2', 'ARM_uqshl', 'ARM_uqshrn',
    'ARM_uqshrn2', 'ARM_uqsub', 'ARM_uqsub16', 'ARM_uqsub8',
    'ARM_uqsubaddx', 'ARM_uqxtn', 'ARM_uqxtn2', 'ARM_urecpe',
    'ARM_urhadd', 'ARM_urshl', 'ARM_urshr', 'ARM_ursqrte',
    'ARM_ursra', 'ARM_usad8', 'ARM_usada8', 'ARM_usat', 'ARM_usat16',
    'ARM_ushl', 'ARM_ushll', 'ARM_ushll2', 'ARM_ushr', 'ARM_usqadd',
    'ARM_usra', 'ARM_usub16', 'ARM_usub8', 'ARM_usubaddx',
    'ARM_usubl', 'ARM_usubl2', 'ARM_usubw', 'ARM_usubw2', 'ARM_uxtab',
    'ARM_uxtab16', 'ARM_uxtah', 'ARM_uxtb', 'ARM_uxtb16', 'ARM_uxth',
    'ARM_uxtl', 'ARM_uxtl2', 'ARM_uxtw', 'ARM_uzp1', 'ARM_uzp2',
    'ARM_vaba', 'ARM_vabal', 'ARM_vabd', 'ARM_vabdl', 'ARM_vabs',
    'ARM_vacge', 'ARM_vacgt', 'ARM_vacle', 'ARM_vaclt', 'ARM_vadd',
    'ARM_vaddhn', 'ARM_vaddl', 'ARM_vaddw', 'ARM_vand', 'ARM_vbic',
    'ARM_vbif', 'ARM_vbit', 'ARM_vbsl', 'ARM_vceq', 'ARM_vcge',
    'ARM_vcgt', 'ARM_vcle', 'ARM_vcls', 'ARM_vclt', 'ARM_vclz',
    'ARM_vcmp', 'ARM_vcmpe', 'ARM_vcnt', 'ARM_vcvt', 'ARM_vcvta',
    'ARM_vcvtb', 'ARM_vcvtm', 'ARM_vcvtn', 'ARM_vcvtp', 'ARM_vcvtr',
    'ARM_vcvtt', 'ARM_vdiv', 'ARM_vdup', 'ARM_veor', 'ARM_vext',
    'ARM_vfma', 'ARM_vfms', 'ARM_vfnma', 'ARM_vfnms', 'ARM_vhadd',
    'ARM_vhsub', 'ARM_vins', 'ARM_vjcvt', 'ARM_vld1', 'ARM_vld2',
    'ARM_vld3', 'ARM_vld4', 'ARM_vldm', 'ARM_vldr', 'ARM_vlldm',
    'ARM_vlstm', 'ARM_vmax', 'ARM_vmaxnm', 'ARM_vmin', 'ARM_vminnm',
    'ARM_vmla', 'ARM_vmlal', 'ARM_vmls', 'ARM_vmlsl', 'ARM_vmov',
    'ARM_vmovl', 'ARM_vmovn', 'ARM_vmovx', 'ARM_vmrs', 'ARM_vmsr',
    'ARM_vmul', 'ARM_vmull', 'ARM_vmvn', 'ARM_vneg', 'ARM_vnmla',
    'ARM_vnmls', 'ARM_vnmul', 'ARM_vorn', 'ARM_vorr', 'ARM_vpadal',
    'ARM_vpadd', 'ARM_vpaddl', 'ARM_vpmax', 'ARM_vpmin', 'ARM_vpop',
    'ARM_vpush', 'ARM_vqabs', 'ARM_vqadd', 'ARM_vqdmlal',
    'ARM_vqdmlsl', 'ARM_vqdmulh', 'ARM_vqdmull', 'ARM_vqmovn',
    'ARM_vqmovun', 'ARM_vqneg', 'ARM_vqrdmlah', 'ARM_vqrdmlsh',
    'ARM_vqrdmulh', 'ARM_vqrshl', 'ARM_vqrshrn', 'ARM_vqrshrun',
    'ARM_vqshl', 'ARM_vqshlu', 'ARM_vqshrn', 'ARM_vqshrun',
    'ARM_vqsub', 'ARM_vraddhn', 'ARM_vrecpe', 'ARM_vrecps',
    'ARM_vrev16', 'ARM_vrev32', 'ARM_vrev64', 'ARM_vrhadd',
    'ARM_vrinta', 'ARM_vrintm', 'ARM_vrintn', 'ARM_vrintp',
    'ARM_vrintr', 'ARM_vrintx', 'ARM_vrintz', 'ARM_vrshl',
    'ARM_vrshr', 'ARM_vrshrn', 'ARM_vrsqrte', 'ARM_vrsqrts',
    'ARM_vrsra', 'ARM_vrsubhn', 'ARM_vsel', 'ARM_vshl', 'ARM_vshll',
    'ARM_vshr', 'ARM_vshrn', 'ARM_vsli', 'ARM_vsqrt', 'ARM_vsra',
    'ARM_vsri', 'ARM_vst1', 'ARM_vst2', 'ARM_vst3', 'ARM_vst4',
    'ARM_vstm', 'ARM_vstr', 'ARM_vsub', 'ARM_vsubhn', 'ARM_vsubl',
    'ARM_vsubw', 'ARM_vswp', 'ARM_vtbl', 'ARM_vtbx', 'ARM_vtrn',
    'ARM_vtst', 'ARM_vuzp', 'ARM_vzip', 'ARM_wfe', 'ARM_wfi',
    'ARM_xaflag', 'ARM_xpac', 'ARM_xtn', 'ARM_xtn2', 'ARM_yield',
    'ARM_zip1', 'ARM_zip2', 'AR_DISABLED', 'AR_DOCKED', 'AR_ENABLED',
    'AR_LAPTOP', 'AR_MULTIMON', 'AR_NOSENSOR', 'AR_NOT_SUPPORTED',
    'AR_REMOTESESSION', 'AR_STATE', 'AR_STATE__enumvalues',
    'AR_SUPPRESSED', 'ASSEMBLY_FILE_DETAILED_INFORMATION',
    'AST_DISABLE', 'AST_DISABLE_ALWAYS', 'AST_DISABLE_FOR_IDB',
    'AST_DISABLE_FOR_WIDGET', 'AST_ENABLE', 'AST_ENABLE_ALWAYS',
    'AST_ENABLE_FOR_IDB', 'AST_ENABLE_FOR_WIDGET', 'ATOM',
    'AUDIODESCRIPTION', 'AUDIT_EVENT_TYPE',
    'AUDIT_EVENT_TYPE__enumvalues', 'AVR_adc', 'AVR_add', 'AVR_adiw',
    'AVR_and', 'AVR_andi', 'AVR_asr', 'AVR_bclr', 'AVR_bld',
    'AVR_brbc', 'AVR_brbs', 'AVR_brcc', 'AVR_brcs', 'AVR_breq',
    'AVR_brge', 'AVR_brhc', 'AVR_brhs', 'AVR_brid', 'AVR_brie',
    'AVR_brlo', 'AVR_brlt', 'AVR_brmi', 'AVR_brne', 'AVR_brpl',
    'AVR_brsh', 'AVR_brtc', 'AVR_brts', 'AVR_brvc', 'AVR_brvs',
    'AVR_bset', 'AVR_bst', 'AVR_call', 'AVR_cbi', 'AVR_cbr',
    'AVR_clc', 'AVR_clh', 'AVR_cli', 'AVR_cln', 'AVR_clr', 'AVR_cls',
    'AVR_clt', 'AVR_clv', 'AVR_clz', 'AVR_com', 'AVR_cp', 'AVR_cpc',
    'AVR_cpi', 'AVR_cpse', 'AVR_dec', 'AVR_des', 'AVR_eicall',
    'AVR_eijmp', 'AVR_elpm', 'AVR_eor', 'AVR_espm', 'AVR_fmul',
    'AVR_fmuls', 'AVR_fmulsu', 'AVR_icall', 'AVR_ijmp', 'AVR_in',
    'AVR_inc', 'AVR_jmp', 'AVR_lac', 'AVR_las', 'AVR_last', 'AVR_lat',
    'AVR_ld', 'AVR_ldd', 'AVR_ldi', 'AVR_lds', 'AVR_lpm', 'AVR_lsl',
    'AVR_lsr', 'AVR_mov', 'AVR_movw', 'AVR_mul', 'AVR_muls',
    'AVR_mulsu', 'AVR_neg', 'AVR_nop', 'AVR_null', 'AVR_or',
    'AVR_ori', 'AVR_out', 'AVR_pop', 'AVR_push', 'AVR_rcall',
    'AVR_ret', 'AVR_reti', 'AVR_rjmp', 'AVR_rol', 'AVR_ror',
    'AVR_sbc', 'AVR_sbci', 'AVR_sbi', 'AVR_sbic', 'AVR_sbis',
    'AVR_sbiw', 'AVR_sbr', 'AVR_sbrc', 'AVR_sbrs', 'AVR_sec',
    'AVR_seh', 'AVR_sei', 'AVR_sen', 'AVR_ser', 'AVR_ses', 'AVR_set',
    'AVR_sev', 'AVR_sez', 'AVR_sleep', 'AVR_spm', 'AVR_st', 'AVR_std',
    'AVR_sts', 'AVR_sub', 'AVR_subi', 'AVR_swap', 'AVR_tst',
    'AVR_wdr', 'AVR_xch', 'AXESLIST', 'AXESLISTA', 'AXESLISTW',
    'AXISINFO', 'AXISINFOA', 'AXISINFOW', 'AccessReasonAllowedAce',
    'AccessReasonAllowedParentAce', 'AccessReasonDeniedAce',
    'AccessReasonDeniedParentAce', 'AccessReasonEmptyDacl',
    'AccessReasonFilterAce', 'AccessReasonFromPrivilege',
    'AccessReasonIntegrityLevel', 'AccessReasonMissingPrivilege',
    'AccessReasonNoGrant', 'AccessReasonNoSD', 'AccessReasonNone',
    'AccessReasonNotGrantedByCape',
    'AccessReasonNotGrantedByParentCape',
    'AccessReasonNotGrantedToAppContainer', 'AccessReasonNullDacl',
    'AccessReasonOwnership', 'AccessReasonTrustLabel',
    'AclRevisionInformation', 'AclSizeInformation',
    'ActivationContextBasicInformation',
    'ActivationContextDetailedInformation',
    'ActivationContextManifestResourceName', 'AdapterType',
    'AdministratorPowerPolicy',
    'AssemblyDetailedInformationInActivationContext',
    'AssemblyDetailedInformationInActivationContxt',
    'AuditEventDirectoryServiceAccess', 'AuditEventObjectAccess',
    'AutoLoad', 'BCHAR', 'BITMAP', 'BITMAPCOREHEADER',
    'BITMAPCOREINFO', 'BITMAPFILEHEADER', 'BITMAPINFO',
    'BITMAPINFOHEADER', 'BK_INVALIDADDR', 'BK_NOVALUE', 'BK_VALID',
    'BLENDFUNCTION', 'BLOB', 'BOOL', 'BOOLEAN', 'BPLT_ABS',
    'BPLT_REL', 'BPLT_SRC', 'BPLT_SYM', 'BREAKPOINT', 'BYTE',
    'BY_HANDLE_FILE_INFORMATION', 'BatteryDeviceState', 'BootLoad',
    'C166_add', 'C166_addb', 'C166_addc', 'C166_addcb', 'C166_and',
    'C166_andb', 'C166_ashr', 'C166_atomic', 'C166_band', 'C166_bclr',
    'C166_bcmp', 'C166_bfldh', 'C166_bfldl', 'C166_bmov',
    'C166_bmovn', 'C166_bor', 'C166_bset', 'C166_bxor', 'C166_calla',
    'C166_calli', 'C166_callr', 'C166_calls', 'C166_cmp', 'C166_cmpb',
    'C166_cmpd1', 'C166_cmpd2', 'C166_cmpi1', 'C166_cmpi2',
    'C166_cpl', 'C166_cplb', 'C166_diswdt', 'C166_div', 'C166_divl',
    'C166_divlu', 'C166_divu', 'C166_einit', 'C166_enwdt',
    'C166_extp', 'C166_extpr', 'C166_extr', 'C166_exts', 'C166_extsr',
    'C166_idle', 'C166_jb', 'C166_jbc', 'C166_jmpa', 'C166_jmpi',
    'C166_jmpr', 'C166_jmps', 'C166_jnb', 'C166_jnbs', 'C166_last',
    'C166_mov', 'C166_movb', 'C166_movbs', 'C166_movbz', 'C166_mul',
    'C166_mulu', 'C166_neg', 'C166_negb', 'C166_nop', 'C166_null',
    'C166_or', 'C166_orb', 'C166_pcall', 'C166_pop', 'C166_prior',
    'C166_push', 'C166_pwrdn', 'C166_ret', 'C166_reti', 'C166_retp',
    'C166_rets', 'C166_rol', 'C166_ror', 'C166_sbrk', 'C166_scxt',
    'C166_shl', 'C166_shr', 'C166_srst', 'C166_srvwdt', 'C166_sub',
    'C166_subb', 'C166_subc', 'C166_subcb', 'C166_trap', 'C166_xor',
    'C166_xorb', 'C39_adc', 'C39_add', 'C39_anc', 'C39_and',
    'C39_ane', 'C39_arr', 'C39_asl', 'C39_asr', 'C39_bar', 'C39_bas',
    'C39_bbr', 'C39_bbs', 'C39_bcc', 'C39_bcs', 'C39_beq', 'C39_bit',
    'C39_bmi', 'C39_bne', 'C39_bpl', 'C39_bra', 'C39_brk', 'C39_bvc',
    'C39_bvs', 'C39_clc', 'C39_cld', 'C39_cli', 'C39_clv', 'C39_clw',
    'C39_cmp', 'C39_cpx', 'C39_cpy', 'C39_dcp', 'C39_dec', 'C39_dex',
    'C39_dey', 'C39_eor', 'C39_exc', 'C39_inc', 'C39_ini', 'C39_inx',
    'C39_iny', 'C39_isb', 'C39_jmp', 'C39_jpi', 'C39_jsb', 'C39_jsr',
    'C39_lab', 'C39_lae', 'C39_lai', 'C39_lan', 'C39_last', 'C39_lax',
    'C39_lda', 'C39_ldx', 'C39_ldy', 'C39_lii', 'C39_lsr', 'C39_lxa',
    'C39_mpa', 'C39_mpy', 'C39_neg', 'C39_nop', 'C39_null', 'C39_nxt',
    'C39_ora', 'C39_pha', 'C39_phi', 'C39_php', 'C39_phw', 'C39_phx',
    'C39_phy', 'C39_pia', 'C39_pla', 'C39_pli', 'C39_plp', 'C39_plw',
    'C39_plx', 'C39_ply', 'C39_psh', 'C39_pul', 'C39_rba', 'C39_rla',
    'C39_rmb', 'C39_rnd', 'C39_rol', 'C39_ror', 'C39_rra', 'C39_rti',
    'C39_rts', 'C39_sax', 'C39_sba', 'C39_sbc', 'C39_sbx', 'C39_sec',
    'C39_sed', 'C39_sei', 'C39_sha', 'C39_shs', 'C39_shx', 'C39_shy',
    'C39_slo', 'C39_smb', 'C39_sre', 'C39_sta', 'C39_sti', 'C39_stx',
    'C39_sty', 'C39_taw', 'C39_tax', 'C39_tay', 'C39_tip', 'C39_tsx',
    'C39_twa', 'C39_txa', 'C39_txs', 'C39_tya', 'CACHE_DESCRIPTOR',
    'CACHE_RELATIONSHIP', 'CALID', 'CALINFO_ENUMPROCA',
    'CALINFO_ENUMPROCEXA', 'CALINFO_ENUMPROCEXEX',
    'CALINFO_ENUMPROCEXW', 'CALINFO_ENUMPROCW', 'CALTYPE',
    'CANDIDATEFORM', 'CANDIDATELIST', 'CBTACTIVATESTRUCT',
    'CBT_CREATEWND', 'CBT_CREATEWNDA', 'CBT_CREATEWNDW', 'CB_CLOSE',
    'CB_DESTROYING', 'CB_INIT', 'CB_INVISIBLE', 'CB_YES', 'CCHAR',
    'CDVH_LINES_ALIGNMENT', 'CDVH_LINES_CLICK', 'CDVH_LINES_DBLCLICK',
    'CDVH_LINES_DRAWICON', 'CDVH_LINES_ICONMARGIN',
    'CDVH_LINES_LINENUM', 'CDVH_LINES_POPUP', 'CDVH_LINES_RADIX',
    'CDVH_SRCVIEW', 'CDVH_USERDATA', 'CFG_CALL_TARGET_INFO',
    'CHANGEFILTERSTRUCT', 'CHAR', 'CHARSETINFO', 'CHAR_INFO',
    'CIEXYZ', 'CIEXYZTRIPLE', 'CLAIM_SECURITY_ATTRIBUTES_INFORMATION',
    'CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE',
    'CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE',
    'CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1',
    'CLAIM_SECURITY_ATTRIBUTE_V1', 'CLIENTCREATESTRUCT', 'CLSID',
    'CMSGHDR', 'CM_POWER_DATA', 'CODEPAGE_ENUMPROCA',
    'CODEPAGE_ENUMPROCW', 'COLOR16', 'COLORADJUSTMENT', 'COLORREF',
    'COMBOBOXINFO', 'COMIMAGE_FLAGS_32BITPREFERRED',
    'COMIMAGE_FLAGS_32BITREQUIRED', 'COMIMAGE_FLAGS_ILONLY',
    'COMIMAGE_FLAGS_IL_LIBRARY', 'COMIMAGE_FLAGS_NATIVE_ENTRYPOINT',
    'COMIMAGE_FLAGS_STRONGNAMESIGNED',
    'COMIMAGE_FLAGS_TRACKDEBUGDATA', 'COMMCONFIG', 'COMMPROP',
    'COMMTIMEOUTS', 'COMPAREITEMSTRUCT', 'COMPARE_STRING',
    'COMPARTMENT_ID', 'COMPATIBILITY_CONTEXT_ELEMENT',
    'COMPOSITIONFORM', 'COMPUTER_NAME_FORMAT',
    'COMPUTER_NAME_FORMAT__enumvalues', 'COMP_EQUAL', 'COMP_NOTLESS',
    'COMSTAT', 'CONDITION_VARIABLE', 'CONNECTDLGSTRUCT',
    'CONNECTDLGSTRUCTA', 'CONNECTDLGSTRUCTW', 'CONSOLE_CURSOR_INFO',
    'CONSOLE_FONT_INFO', 'CONSOLE_FONT_INFOEX',
    'CONSOLE_HISTORY_INFO', 'CONSOLE_READCONSOLE_CONTROL',
    'CONSOLE_SCREEN_BUFFER_INFO', 'CONSOLE_SCREEN_BUFFER_INFOEX',
    'CONSOLE_SELECTION_INFO', 'CONTEXT', 'COORD', 'COPYDATASTRUCT',
    'COPYFILE2_CALLBACK_CHUNK_FINISHED',
    'COPYFILE2_CALLBACK_CHUNK_STARTED', 'COPYFILE2_CALLBACK_ERROR',
    'COPYFILE2_CALLBACK_MAX', 'COPYFILE2_CALLBACK_NONE',
    'COPYFILE2_CALLBACK_POLL_CONTINUE',
    'COPYFILE2_CALLBACK_STREAM_FINISHED',
    'COPYFILE2_CALLBACK_STREAM_STARTED', 'COPYFILE2_COPY_PHASE',
    'COPYFILE2_COPY_PHASE__enumvalues', 'COPYFILE2_MESSAGE_ACTION',
    'COPYFILE2_MESSAGE_ACTION__enumvalues', 'COPYFILE2_MESSAGE_TYPE',
    'COPYFILE2_MESSAGE_TYPE__enumvalues', 'COPYFILE2_PHASE_MAX',
    'COPYFILE2_PHASE_NAMEGRAFT_COPY', 'COPYFILE2_PHASE_NONE',
    'COPYFILE2_PHASE_PREPARE_DEST', 'COPYFILE2_PHASE_PREPARE_SOURCE',
    'COPYFILE2_PHASE_READ_SOURCE', 'COPYFILE2_PHASE_SERVER_COPY',
    'COPYFILE2_PHASE_WRITE_DESTINATION', 'COPYFILE2_PROGRESS_CANCEL',
    'COPYFILE2_PROGRESS_CONTINUE', 'COPYFILE2_PROGRESS_PAUSE',
    'COPYFILE2_PROGRESS_QUIET', 'COPYFILE2_PROGRESS_STOP',
    'COR_DELETED_NAME_LENGTH', 'COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE',
    'COR_VERSION_MAJOR', 'COR_VERSION_MAJOR_V2', 'COR_VERSION_MINOR',
    'COR_VTABLEGAP_NAME_LENGTH', 'COR_VTABLE_32BIT',
    'COR_VTABLE_64BIT', 'COR_VTABLE_CALL_MOST_DERIVED',
    'COR_VTABLE_FROM_UNMANAGED',
    'COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN', 'CPINFO',
    'CPINFOEX', 'CPINFOEXA', 'CPINFOEXW', 'CPU_SET_INFORMATION_TYPE',
    'CPU_SET_INFORMATION_TYPE__enumvalues', 'CR16_addb', 'CR16_addcb',
    'CR16_addcw', 'CR16_addub', 'CR16_adduw', 'CR16_addw',
    'CR16_andb', 'CR16_andw', 'CR16_ashub', 'CR16_ashuw', 'CR16_bal',
    'CR16_bcc', 'CR16_bcs', 'CR16_beq', 'CR16_beq0b', 'CR16_beq0w',
    'CR16_beq1b', 'CR16_beq1w', 'CR16_bfc', 'CR16_bfs', 'CR16_bge',
    'CR16_bgt', 'CR16_bhi', 'CR16_bhs', 'CR16_ble', 'CR16_blo',
    'CR16_bls', 'CR16_blt', 'CR16_bne', 'CR16_bne0b', 'CR16_bne0w',
    'CR16_bne1b', 'CR16_bne1w', 'CR16_br', 'CR16_cbitb', 'CR16_cbitw',
    'CR16_cmpb', 'CR16_cmpw', 'CR16_di', 'CR16_ei', 'CR16_eiwait',
    'CR16_excp', 'CR16_jal', 'CR16_jcc', 'CR16_jcs', 'CR16_jeq',
    'CR16_jfc', 'CR16_jfs', 'CR16_jge', 'CR16_jgt', 'CR16_jhi',
    'CR16_jhs', 'CR16_jle', 'CR16_jlo', 'CR16_jls', 'CR16_jlt',
    'CR16_jne', 'CR16_jump', 'CR16_last', 'CR16_loadb', 'CR16_loadm',
    'CR16_loadw', 'CR16_lpr', 'CR16_lshb', 'CR16_lshw', 'CR16_movb',
    'CR16_movd', 'CR16_movw', 'CR16_movxb', 'CR16_movzb', 'CR16_mulb',
    'CR16_mulsb', 'CR16_mulsw', 'CR16_muluw', 'CR16_mulw', 'CR16_nop',
    'CR16_null', 'CR16_orb', 'CR16_orw', 'CR16_pop', 'CR16_popret',
    'CR16_push', 'CR16_retx', 'CR16_sbitb', 'CR16_sbitw', 'CR16_scc',
    'CR16_scs', 'CR16_seq', 'CR16_sfc', 'CR16_sfs', 'CR16_sge',
    'CR16_sgt', 'CR16_shi', 'CR16_shs', 'CR16_sle', 'CR16_slo',
    'CR16_sls', 'CR16_slt', 'CR16_sne', 'CR16_spr', 'CR16_storb',
    'CR16_storm', 'CR16_storw', 'CR16_subb', 'CR16_subcb',
    'CR16_subcw', 'CR16_subw', 'CR16_tbit', 'CR16_tbitb',
    'CR16_tbitw', 'CR16_wait', 'CR16_xorb', 'CR16_xorw',
    'CREATEFILE2_EXTENDED_PARAMETERS', 'CREATESTRUCT',
    'CREATESTRUCTA', 'CREATESTRUCTW', 'CREATE_PROCESS_DEBUG_INFO',
    'CREATE_THREAD_DEBUG_INFO', 'CRITICAL_SECTION',
    'CRITICAL_SECTION_DEBUG', 'CRM_PROTOCOL_ID', 'CSADDR_INFO',
    'CURRENCYFMT', 'CURRENCYFMTA', 'CURRENCYFMTW', 'CURSORINFO',
    'CURSORSHAPE', 'CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG', 'CVH_CLICK',
    'CVH_CLOSE', 'CVH_CURPOS', 'CVH_DBLCLICK', 'CVH_HELP',
    'CVH_KEYDOWN', 'CVH_MOUSEMOVE', 'CVH_POPUP', 'CVH_QT_AWARE',
    'CVH_USERDATA', 'CWPRETSTRUCT', 'CWPSTRUCT', 'CacheData',
    'CacheInstruction', 'CacheTrace', 'CacheUnified',
    'CompatibilityInformationInActivationContext',
    'ComputerNameDnsDomain', 'ComputerNameDnsFullyQualified',
    'ComputerNameDnsHostname', 'ComputerNameMax',
    'ComputerNameNetBIOS', 'ComputerNamePhysicalDnsDomain',
    'ComputerNamePhysicalDnsFullyQualified',
    'ComputerNamePhysicalDnsHostname', 'ComputerNamePhysicalNetBIOS',
    'CpuSetInformation', 'CriticalError', 'CsDeviceNotification',
    'DALVIK_ADD_DOUBLE', 'DALVIK_ADD_DOUBLE_2ADDR',
    'DALVIK_ADD_FLOAT', 'DALVIK_ADD_FLOAT_2ADDR', 'DALVIK_ADD_INT',
    'DALVIK_ADD_INT_2ADDR', 'DALVIK_ADD_INT_LIT16',
    'DALVIK_ADD_INT_LIT8', 'DALVIK_ADD_LONG', 'DALVIK_ADD_LONG_2ADDR',
    'DALVIK_AGET', 'DALVIK_AGET_BOOLEAN', 'DALVIK_AGET_BYTE',
    'DALVIK_AGET_CHAR', 'DALVIK_AGET_OBJECT', 'DALVIK_AGET_SHORT',
    'DALVIK_AGET_WIDE', 'DALVIK_AND_INT', 'DALVIK_AND_INT_2ADDR',
    'DALVIK_AND_INT_LIT16', 'DALVIK_AND_INT_LIT8', 'DALVIK_AND_LONG',
    'DALVIK_AND_LONG_2ADDR', 'DALVIK_APUT', 'DALVIK_APUT_BOOLEAN',
    'DALVIK_APUT_BYTE', 'DALVIK_APUT_CHAR', 'DALVIK_APUT_OBJECT',
    'DALVIK_APUT_SHORT', 'DALVIK_APUT_WIDE', 'DALVIK_ARRAY_LENGTH',
    'DALVIK_BREAKPOINT', 'DALVIK_CHECK_CAST', 'DALVIK_CMPG_DOUBLE',
    'DALVIK_CMPG_FLOAT', 'DALVIK_CMPL_DOUBLE', 'DALVIK_CMPL_FLOAT',
    'DALVIK_CMP_LONG', 'DALVIK_CONST', 'DALVIK_CONST_16',
    'DALVIK_CONST_4', 'DALVIK_CONST_CLASS', 'DALVIK_CONST_HIGH16',
    'DALVIK_CONST_STRING', 'DALVIK_CONST_STRING_JUMBO',
    'DALVIK_CONST_WIDE', 'DALVIK_CONST_WIDE_16',
    'DALVIK_CONST_WIDE_32', 'DALVIK_CONST_WIDE_HIGH16',
    'DALVIK_DIV_DOUBLE', 'DALVIK_DIV_DOUBLE_2ADDR',
    'DALVIK_DIV_FLOAT', 'DALVIK_DIV_FLOAT_2ADDR', 'DALVIK_DIV_INT',
    'DALVIK_DIV_INT_2ADDR', 'DALVIK_DIV_INT_LIT16',
    'DALVIK_DIV_INT_LIT8', 'DALVIK_DIV_LONG', 'DALVIK_DIV_LONG_2ADDR',
    'DALVIK_DOUBLE_TO_FLOAT', 'DALVIK_DOUBLE_TO_INT',
    'DALVIK_DOUBLE_TO_LONG', 'DALVIK_EXECUTE_INLINE',
    'DALVIK_EXECUTE_INLINE_RANGE', 'DALVIK_FILLED_NEW_ARRAY',
    'DALVIK_FILLED_NEW_ARRAY_RANGE', 'DALVIK_FILL_ARRAY_DATA',
    'DALVIK_FLOAT_TO_DOUBLE', 'DALVIK_FLOAT_TO_INT',
    'DALVIK_FLOAT_TO_LONG', 'DALVIK_GOTO', 'DALVIK_GOTO_16',
    'DALVIK_GOTO_32', 'DALVIK_IF_EQ', 'DALVIK_IF_EQZ', 'DALVIK_IF_GE',
    'DALVIK_IF_GEZ', 'DALVIK_IF_GT', 'DALVIK_IF_GTZ', 'DALVIK_IF_LE',
    'DALVIK_IF_LEZ', 'DALVIK_IF_LT', 'DALVIK_IF_LTZ', 'DALVIK_IF_NE',
    'DALVIK_IF_NEZ', 'DALVIK_IGET', 'DALVIK_IGET_BOOLEAN',
    'DALVIK_IGET_BYTE', 'DALVIK_IGET_CHAR', 'DALVIK_IGET_OBJECT',
    'DALVIK_IGET_OBJECT_QUICK', 'DALVIK_IGET_OBJECT_VOLATILE',
    'DALVIK_IGET_QUICK', 'DALVIK_IGET_SHORT', 'DALVIK_IGET_VOLATILE',
    'DALVIK_IGET_WIDE', 'DALVIK_IGET_WIDE_QUICK',
    'DALVIK_IGET_WIDE_VOLATILE', 'DALVIK_INSTANCE_OF',
    'DALVIK_INT_TO_BYTE', 'DALVIK_INT_TO_CHAR',
    'DALVIK_INT_TO_DOUBLE', 'DALVIK_INT_TO_FLOAT',
    'DALVIK_INT_TO_LONG', 'DALVIK_INT_TO_SHORT',
    'DALVIK_INVOKE_CUSTOM', 'DALVIK_INVOKE_CUSTOM_RANGE',
    'DALVIK_INVOKE_DIRECT', 'DALVIK_INVOKE_DIRECT_EMPTY',
    'DALVIK_INVOKE_DIRECT_RANGE', 'DALVIK_INVOKE_INTERFACE',
    'DALVIK_INVOKE_INTERFACE_RANGE', 'DALVIK_INVOKE_POLYMORPHIC',
    'DALVIK_INVOKE_POLYMORPHIC_RANGE', 'DALVIK_INVOKE_STATIC',
    'DALVIK_INVOKE_STATIC_RANGE', 'DALVIK_INVOKE_SUPER',
    'DALVIK_INVOKE_SUPER_QUICK', 'DALVIK_INVOKE_SUPER_QUICK_RANGE',
    'DALVIK_INVOKE_SUPER_RANGE', 'DALVIK_INVOKE_VIRTUAL',
    'DALVIK_INVOKE_VIRTUAL_QUICK',
    'DALVIK_INVOKE_VIRTUAL_QUICK_RANGE',
    'DALVIK_INVOKE_VIRTUAL_RANGE', 'DALVIK_IPUT',
    'DALVIK_IPUT_BOOLEAN', 'DALVIK_IPUT_BYTE', 'DALVIK_IPUT_CHAR',
    'DALVIK_IPUT_OBJECT', 'DALVIK_IPUT_OBJECT_QUICK',
    'DALVIK_IPUT_OBJECT_VOLATILE', 'DALVIK_IPUT_QUICK',
    'DALVIK_IPUT_SHORT', 'DALVIK_IPUT_VOLATILE', 'DALVIK_IPUT_WIDE',
    'DALVIK_IPUT_WIDE_QUICK', 'DALVIK_IPUT_WIDE_VOLATILE',
    'DALVIK_LAST', 'DALVIK_LONG_TO_DOUBLE', 'DALVIK_LONG_TO_FLOAT',
    'DALVIK_LONG_TO_INT', 'DALVIK_MONITOR_ENTER',
    'DALVIK_MONITOR_EXIT', 'DALVIK_MOVE', 'DALVIK_MOVE_16',
    'DALVIK_MOVE_EXCEPTION', 'DALVIK_MOVE_FROM16',
    'DALVIK_MOVE_OBJECT', 'DALVIK_MOVE_OBJECT_16',
    'DALVIK_MOVE_OBJECT_FROM16', 'DALVIK_MOVE_RESULT',
    'DALVIK_MOVE_RESULT_OBJECT', 'DALVIK_MOVE_RESULT_WIDE',
    'DALVIK_MOVE_WIDE', 'DALVIK_MOVE_WIDE_16',
    'DALVIK_MOVE_WIDE_FROM16', 'DALVIK_MUL_DOUBLE',
    'DALVIK_MUL_DOUBLE_2ADDR', 'DALVIK_MUL_FLOAT',
    'DALVIK_MUL_FLOAT_2ADDR', 'DALVIK_MUL_INT',
    'DALVIK_MUL_INT_2ADDR', 'DALVIK_MUL_INT_LIT16',
    'DALVIK_MUL_INT_LIT8', 'DALVIK_MUL_LONG', 'DALVIK_MUL_LONG_2ADDR',
    'DALVIK_NEG_DOUBLE', 'DALVIK_NEG_FLOAT', 'DALVIK_NEG_INT',
    'DALVIK_NEG_LONG', 'DALVIK_NEW_ARRAY', 'DALVIK_NEW_INSTANCE',
    'DALVIK_NOP', 'DALVIK_NOT_INT', 'DALVIK_NOT_LONG',
    'DALVIK_OR_INT', 'DALVIK_OR_INT_2ADDR', 'DALVIK_OR_INT_LIT16',
    'DALVIK_OR_INT_LIT8', 'DALVIK_OR_LONG', 'DALVIK_OR_LONG_2ADDR',
    'DALVIK_PACKED_SWITCH', 'DALVIK_REM_DOUBLE',
    'DALVIK_REM_DOUBLE_2ADDR', 'DALVIK_REM_FLOAT',
    'DALVIK_REM_FLOAT_2ADDR', 'DALVIK_REM_INT',
    'DALVIK_REM_INT_2ADDR', 'DALVIK_REM_INT_LIT16',
    'DALVIK_REM_INT_LIT8', 'DALVIK_REM_LONG', 'DALVIK_REM_LONG_2ADDR',
    'DALVIK_RETURN', 'DALVIK_RETURN_OBJECT', 'DALVIK_RETURN_VOID',
    'DALVIK_RETURN_VOID_BARRIER', 'DALVIK_RETURN_WIDE',
    'DALVIK_RSUB_INT', 'DALVIK_RSUB_INT_LIT8', 'DALVIK_SGET',
    'DALVIK_SGET_BOOLEAN', 'DALVIK_SGET_BYTE', 'DALVIK_SGET_CHAR',
    'DALVIK_SGET_OBJECT', 'DALVIK_SGET_OBJECT_VOLATILE',
    'DALVIK_SGET_SHORT', 'DALVIK_SGET_VOLATILE', 'DALVIK_SGET_WIDE',
    'DALVIK_SGET_WIDE_VOLATILE', 'DALVIK_SHL_INT',
    'DALVIK_SHL_INT_2ADDR', 'DALVIK_SHL_INT_LIT8', 'DALVIK_SHL_LONG',
    'DALVIK_SHL_LONG_2ADDR', 'DALVIK_SHR_INT', 'DALVIK_SHR_INT_2ADDR',
    'DALVIK_SHR_INT_LIT8', 'DALVIK_SHR_LONG', 'DALVIK_SHR_LONG_2ADDR',
    'DALVIK_SPARSE_SWITCH', 'DALVIK_SPUT', 'DALVIK_SPUT_BOOLEAN',
    'DALVIK_SPUT_BYTE', 'DALVIK_SPUT_CHAR', 'DALVIK_SPUT_OBJECT',
    'DALVIK_SPUT_OBJECT_VOLATILE', 'DALVIK_SPUT_SHORT',
    'DALVIK_SPUT_VOLATILE', 'DALVIK_SPUT_WIDE',
    'DALVIK_SPUT_WIDE_VOLATILE', 'DALVIK_SUB_DOUBLE',
    'DALVIK_SUB_DOUBLE_2ADDR', 'DALVIK_SUB_FLOAT',
    'DALVIK_SUB_FLOAT_2ADDR', 'DALVIK_SUB_INT',
    'DALVIK_SUB_INT_2ADDR', 'DALVIK_SUB_LONG',
    'DALVIK_SUB_LONG_2ADDR', 'DALVIK_THROW',
    'DALVIK_THROW_VERIFICATION_ERROR', 'DALVIK_UNUSED',
    'DALVIK_USHR_INT', 'DALVIK_USHR_INT_2ADDR',
    'DALVIK_USHR_INT_LIT8', 'DALVIK_USHR_LONG',
    'DALVIK_USHR_LONG_2ADDR', 'DALVIK_XOR_INT',
    'DALVIK_XOR_INT_2ADDR', 'DALVIK_XOR_INT_LIT16',
    'DALVIK_XOR_INT_LIT8', 'DALVIK_XOR_LONG', 'DALVIK_XOR_LONG_2ADDR',
    'DATEFMT_ENUMPROCA', 'DATEFMT_ENUMPROCEXA',
    'DATEFMT_ENUMPROCEXEX', 'DATEFMT_ENUMPROCEXW',
    'DATEFMT_ENUMPROCW', 'DCB', 'DCDC_DEFAULT',
    'DCDC_DISABLE_FONT_UPDATE', 'DCDC_DISABLE_RELAYOUT',
    'DDC_DEFAULT', 'DDC_DISABLE_ALL', 'DDC_DISABLE_CONTROL_RELAYOUT',
    'DDC_DISABLE_RESIZE', 'DEBNAME_EXACT', 'DEBNAME_LOWER',
    'DEBNAME_NICE', 'DEBNAME_UPPER', 'DEBUGHOOKINFO', 'DEBUG_EVENT',
    'DEC_ERROR', 'DEC_NOTASK', 'DEC_TIMEOUT',
    'DEFAULT_COMPARTMENT_ID', 'DELETEITEMSTRUCT',
    'DEPPolicyAlwaysOff', 'DEPPolicyAlwaysOn', 'DEPPolicyOptIn',
    'DEPPolicyOptOut', 'DEPTotalPolicyCount',
    'DEP_SYSTEM_POLICY_TYPE', 'DEP_SYSTEM_POLICY_TYPE__enumvalues',
    'DESIGNVECTOR', 'DESKTOPENUMPROC', 'DESKTOPENUMPROCA',
    'DESKTOPENUMPROCW', 'DEVICE_POWER_STATE',
    'DEVICE_POWER_STATE__enumvalues', 'DEVMODE', 'DEVMODEA',
    'DEVMODEW', 'DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS',
    'DIALOG_DPI_CHANGE_BEHAVIORS', 'DIBSECTION', 'DIRTREE_BPTS',
    'DIRTREE_END', 'DIRTREE_ENUMS', 'DIRTREE_ENUMS_BOOKMARKS',
    'DIRTREE_FUNCS', 'DIRTREE_IDAPLACE_BOOKMARKS', 'DIRTREE_IMPORTS',
    'DIRTREE_LOCAL_TYPES', 'DIRTREE_NAMES', 'DIRTREE_STRUCTS',
    'DIRTREE_STRUCTS_BOOKMARKS', 'DISCDLGSTRUCT', 'DISCDLGSTRUCTA',
    'DISCDLGSTRUCTW', 'DISPATCHER_CONTEXT',
    'DISPLAYCONFIG_COLOR_ENCODING',
    'DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32',
    'DISPLAYCONFIG_COLOR_ENCODING_INTENSITY',
    'DISPLAYCONFIG_COLOR_ENCODING_RGB',
    'DISPLAYCONFIG_COLOR_ENCODING_YCBCR420',
    'DISPLAYCONFIG_COLOR_ENCODING_YCBCR422',
    'DISPLAYCONFIG_COLOR_ENCODING_YCBCR444',
    'DISPLAYCONFIG_COLOR_ENCODING__enumvalues',
    'DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32',
    'DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME',
    'DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO',
    'DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL',
    'DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME',
    'DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION',
    'DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE',
    'DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME',
    'DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE',
    'DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE',
    'DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION',
    'DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE',
    'DISPLAYCONFIG_DEVICE_INFO_TYPE',
    'DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO',
    'DISPLAYCONFIG_MODE_INFO_TYPE',
    'DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE',
    'DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32',
    'DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE',
    'DISPLAYCONFIG_MODE_INFO_TYPE_TARGET',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED',
    'DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL',
    'DISPLAYCONFIG_PIXELFORMAT', 'DISPLAYCONFIG_PIXELFORMAT_16BPP',
    'DISPLAYCONFIG_PIXELFORMAT_24BPP',
    'DISPLAYCONFIG_PIXELFORMAT_32BPP',
    'DISPLAYCONFIG_PIXELFORMAT_8BPP',
    'DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32',
    'DISPLAYCONFIG_PIXELFORMAT_NONGDI', 'DISPLAYCONFIG_ROTATION',
    'DISPLAYCONFIG_ROTATION_FORCE_UINT32',
    'DISPLAYCONFIG_ROTATION_IDENTITY',
    'DISPLAYCONFIG_ROTATION_ROTATE180',
    'DISPLAYCONFIG_ROTATION_ROTATE270',
    'DISPLAYCONFIG_ROTATION_ROTATE90', 'DISPLAYCONFIG_SCALING',
    'DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX',
    'DISPLAYCONFIG_SCALING_CENTERED', 'DISPLAYCONFIG_SCALING_CUSTOM',
    'DISPLAYCONFIG_SCALING_FORCE_UINT32',
    'DISPLAYCONFIG_SCALING_IDENTITY',
    'DISPLAYCONFIG_SCALING_PREFERRED',
    'DISPLAYCONFIG_SCALING_STRETCHED',
    'DISPLAYCONFIG_SCANLINE_ORDERING',
    'DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32',
    'DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED',
    'DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST',
    'DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST',
    'DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE',
    'DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED',
    'DISPLAYCONFIG_SDR_WHITE_LEVEL',
    'DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE',
    'DISPLAYCONFIG_TOPOLOGY_CLONE', 'DISPLAYCONFIG_TOPOLOGY_EXTEND',
    'DISPLAYCONFIG_TOPOLOGY_EXTERNAL',
    'DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32',
    'DISPLAYCONFIG_TOPOLOGY_ID', 'DISPLAYCONFIG_TOPOLOGY_INTERNAL',
    'DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY', 'DISPLAY_DEVICE',
    'DISPLAY_DEVICEA', 'DISPLAY_DEVICEW', 'DLGPROC',
    'DLL_DIRECTORY_COOKIE', 'DOCINFO', 'DOCINFOA', 'DOCINFOW',
    'DPI_AWARENESS', 'DPI_AWARENESS_CONTEXT', 'DPI_AWARENESS_INVALID',
    'DPI_AWARENESS_PER_MONITOR_AWARE', 'DPI_AWARENESS_SYSTEM_AWARE',
    'DPI_AWARENESS_UNAWARE', 'DPI_HOSTING_BEHAVIOR',
    'DPI_HOSTING_BEHAVIOR_DEFAULT', 'DPI_HOSTING_BEHAVIOR_INVALID',
    'DPI_HOSTING_BEHAVIOR_MIXED', 'DQT_COMPILER', 'DQT_FULL',
    'DQT_NAME_TYPE', 'DQT_NPURGED_2', 'DQT_NPURGED_4',
    'DQT_NPURGED_8', 'DRAWITEMSTRUCT', 'DRAWPATRECT', 'DRAWSTATEPROC',
    'DRAWTEXTPARAMS', 'DRC_CRC', 'DRC_ERROR', 'DRC_EVENTS',
    'DRC_FAILED', 'DRC_IDBSEG', 'DRC_NETERR', 'DRC_NOCHG',
    'DRC_NOFILE', 'DRC_NONE', 'DRC_NOPROC', 'DRC_OK', 'DROPSTRUCT',
    'DSP56_abs', 'DSP56_adc', 'DSP56_add', 'DSP56_addl', 'DSP56_addr',
    'DSP56_and', 'DSP56_andi', 'DSP56_asl', 'DSP56_asl4', 'DSP56_asr',
    'DSP56_asr16', 'DSP56_asr4', 'DSP56_bcc', 'DSP56_bchg',
    'DSP56_bclr', 'DSP56_bfchg', 'DSP56_bfclr', 'DSP56_bfset',
    'DSP56_bftsth', 'DSP56_bftstl', 'DSP56_bra', 'DSP56_brclr',
    'DSP56_brkcc', 'DSP56_brset', 'DSP56_bscc', 'DSP56_bsclr',
    'DSP56_bset', 'DSP56_bsr', 'DSP56_bsset', 'DSP56_btst',
    'DSP56_chkaau', 'DSP56_clb', 'DSP56_clr', 'DSP56_clr24',
    'DSP56_cmp', 'DSP56_cmpm', 'DSP56_cmpu', 'DSP56_debug',
    'DSP56_debugcc', 'DSP56_dec', 'DSP56_dec24', 'DSP56_div',
    'DSP56_dmac', 'DSP56_do', 'DSP56_do_f', 'DSP56_dor',
    'DSP56_dor_f', 'DSP56_enddo', 'DSP56_eor', 'DSP56_ext',
    'DSP56_extract', 'DSP56_extractu', 'DSP56_ill', 'DSP56_imac',
    'DSP56_impy', 'DSP56_inc', 'DSP56_inc24', 'DSP56_insert',
    'DSP56_jcc', 'DSP56_jclr', 'DSP56_jmp', 'DSP56_jscc',
    'DSP56_jsclr', 'DSP56_jset', 'DSP56_jsr', 'DSP56_jsset',
    'DSP56_last', 'DSP56_lea', 'DSP56_lra', 'DSP56_lsl', 'DSP56_lsr',
    'DSP56_lua', 'DSP56_mac', 'DSP56_mac_s_u', 'DSP56_maci',
    'DSP56_macr', 'DSP56_macri', 'DSP56_max', 'DSP56_maxm',
    'DSP56_merge', 'DSP56_move', 'DSP56_movec', 'DSP56_movei',
    'DSP56_movem', 'DSP56_movep', 'DSP56_moves', 'DSP56_mpy',
    'DSP56_mpy_s_u', 'DSP56_mpyi', 'DSP56_mpyr', 'DSP56_mpyri',
    'DSP56_neg', 'DSP56_negc', 'DSP56_nop', 'DSP56_norm',
    'DSP56_normf', 'DSP56_not', 'DSP56_null', 'DSP56_or', 'DSP56_ori',
    'DSP56_pflush', 'DSP56_pflushun', 'DSP56_pfree', 'DSP56_plock',
    'DSP56_plockr', 'DSP56_pmov', 'DSP56_punlock', 'DSP56_punlockr',
    'DSP56_rep', 'DSP56_repcc', 'DSP56_reset', 'DSP56_rnd',
    'DSP56_rol', 'DSP56_ror', 'DSP56_rti', 'DSP56_rts', 'DSP56_sbc',
    'DSP56_stop', 'DSP56_sub', 'DSP56_subl', 'DSP56_subr',
    'DSP56_swap', 'DSP56_swi', 'DSP56_tcc', 'DSP56_tfr', 'DSP56_tfr2',
    'DSP56_tfr3', 'DSP56_trap', 'DSP56_trapcc', 'DSP56_tst',
    'DSP56_tst2', 'DSP56_vsl', 'DSP56_wait', 'DSP56_zero',
    'DSP96_abs', 'DSP96_add', 'DSP96_addc', 'DSP96_and', 'DSP96_andc',
    'DSP96_andi', 'DSP96_asl', 'DSP96_asr', 'DSP96_bcc', 'DSP96_bccd',
    'DSP96_bchg', 'DSP96_bclr', 'DSP96_bfind', 'DSP96_bra',
    'DSP96_brclr', 'DSP96_brset', 'DSP96_bscc', 'DSP96_bsccd',
    'DSP96_bsclr', 'DSP96_bset', 'DSP96_bsr', 'DSP96_bsrd',
    'DSP96_bsset', 'DSP96_btst', 'DSP96_clr', 'DSP96_cmp',
    'DSP96_cmpg', 'DSP96_debugcc', 'DSP96_dec', 'DSP96_do',
    'DSP96_dor', 'DSP96_enddo', 'DSP96_eor', 'DSP96_ext',
    'DSP96_extb', 'DSP96_fabs', 'DSP96_fadd', 'DSP96_faddsub',
    'DSP96_fbcc', 'DSP96_fbccd', 'DSP96_fbscc', 'DSP96_fbsccd',
    'DSP96_fclr', 'DSP96_fcmp', 'DSP96_fcmpg', 'DSP96_fcmpm',
    'DSP96_fcopys', 'DSP96_fdebugcc', 'DSP96_fgetman', 'DSP96_fint',
    'DSP96_fjcc', 'DSP96_fjccd', 'DSP96_fjscc', 'DSP96_fjsccd',
    'DSP96_float', 'DSP96_floatu', 'DSP96_floor', 'DSP96_fmove',
    'DSP96_fmpy', 'DSP96_fmpyfadd', 'DSP96_fmpyfaddsub',
    'DSP96_fmpyfsub', 'DSP96_fneg', 'DSP96_fscale', 'DSP96_fseedd',
    'DSP96_fseedr', 'DSP96_fsub', 'DSP96_ftfr', 'DSP96_ftrapcc',
    'DSP96_ftst', 'DSP96_getexp', 'DSP96_illegal', 'DSP96_inc',
    'DSP96_int', 'DSP96_intrz', 'DSP96_intu', 'DSP96_inturz',
    'DSP96_jcc', 'DSP96_jccd', 'DSP96_jclr', 'DSP96_join',
    'DSP96_joinb', 'DSP96_jscc', 'DSP96_jsccd', 'DSP96_jsclr',
    'DSP96_jset', 'DSP96_jsset', 'DSP96_last', 'DSP96_lea',
    'DSP96_lra', 'DSP96_lsl', 'DSP96_lsr', 'DSP96_move',
    'DSP96_movec', 'DSP96_movei', 'DSP96_movem', 'DSP96_movep',
    'DSP96_moves', 'DSP96_moveta', 'DSP96_mpys', 'DSP96_mpyu',
    'DSP96_neg', 'DSP96_negc', 'DSP96_nop', 'DSP96_not', 'DSP96_null',
    'DSP96_or', 'DSP96_orc', 'DSP96_ori', 'DSP96_rep', 'DSP96_reset',
    'DSP96_rol', 'DSP96_ror', 'DSP96_rti', 'DSP96_rtr', 'DSP96_rts',
    'DSP96_setw', 'DSP96_split', 'DSP96_splitb', 'DSP96_stop',
    'DSP96_sub', 'DSP96_subc', 'DSP96_tfr', 'DSP96_trapcc',
    'DSP96_tst', 'DSP96_wait', 'DTE_ALREADY_EXISTS', 'DTE_BAD_PATH',
    'DTE_CANT_RENAME', 'DTE_LAST', 'DTE_MAX_DIR', 'DTE_NOT_DIRECTORY',
    'DTE_NOT_EMPTY', 'DTE_NOT_FOUND', 'DTE_OK', 'DTE_OWN_CHILD',
    'DTN_DISPLAY_NAME', 'DTN_FULL_NAME', 'DWORD', 'DWORD32',
    'DWORD64', 'DWORDLONG', 'DWORD_PTR',
    'DYNAMIC_TIME_ZONE_INFORMATION', 'DemandLoad', 'DisableLoad',
    'DisplayBurst', 'DriverType', 'EDITWORDBREAKPROC',
    'EDITWORDBREAKPROCA', 'EDITWORDBREAKPROCW',
    'EDIT_CONTROL_FEATURE',
    'EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT',
    'EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS', 'EMR', 'EMRABORTPATH',
    'EMRALPHABLEND', 'EMRANGLEARC', 'EMRARC', 'EMRARCTO',
    'EMRBEGINPATH', 'EMRBITBLT', 'EMRCHORD', 'EMRCLOSEFIGURE',
    'EMRCOLORCORRECTPALETTE', 'EMRCOLORMATCHTOTARGET',
    'EMRCREATEBRUSHINDIRECT', 'EMRCREATECOLORSPACE',
    'EMRCREATECOLORSPACEW', 'EMRCREATEDIBPATTERNBRUSHPT',
    'EMRCREATEMONOBRUSH', 'EMRCREATEPALETTE', 'EMRCREATEPEN',
    'EMRDELETECOLORSPACE', 'EMRDELETEOBJECT', 'EMRDRAWESCAPE',
    'EMRELLIPSE', 'EMRENDPATH', 'EMREOF', 'EMREXCLUDECLIPRECT',
    'EMREXTCREATEFONTINDIRECTW', 'EMREXTCREATEPEN', 'EMREXTESCAPE',
    'EMREXTFLOODFILL', 'EMREXTSELECTCLIPRGN', 'EMREXTTEXTOUTA',
    'EMREXTTEXTOUTW', 'EMRFILLPATH', 'EMRFILLRGN', 'EMRFLATTENPATH',
    'EMRFORMAT', 'EMRFRAMERGN', 'EMRGDICOMMENT',
    'EMRGLSBOUNDEDRECORD', 'EMRGLSRECORD', 'EMRGRADIENTFILL',
    'EMRINTERSECTCLIPRECT', 'EMRINVERTRGN', 'EMRLINETO', 'EMRMASKBLT',
    'EMRMODIFYWORLDTRANSFORM', 'EMRMOVETOEX', 'EMRNAMEDESCAPE',
    'EMROFFSETCLIPRGN', 'EMRPAINTRGN', 'EMRPIE', 'EMRPIXELFORMAT',
    'EMRPLGBLT', 'EMRPOLYBEZIER', 'EMRPOLYBEZIER16',
    'EMRPOLYBEZIERTO', 'EMRPOLYBEZIERTO16', 'EMRPOLYDRAW',
    'EMRPOLYDRAW16', 'EMRPOLYGON', 'EMRPOLYGON16', 'EMRPOLYLINE',
    'EMRPOLYLINE16', 'EMRPOLYLINETO', 'EMRPOLYLINETO16',
    'EMRPOLYPOLYGON', 'EMRPOLYPOLYGON16', 'EMRPOLYPOLYLINE',
    'EMRPOLYPOLYLINE16', 'EMRPOLYTEXTOUTA', 'EMRPOLYTEXTOUTW',
    'EMRREALIZEPALETTE', 'EMRRECTANGLE', 'EMRRESIZEPALETTE',
    'EMRRESTOREDC', 'EMRROUNDRECT', 'EMRSAVEDC',
    'EMRSCALEVIEWPORTEXTEX', 'EMRSCALEWINDOWEXTEX',
    'EMRSELECTCLIPPATH', 'EMRSELECTCOLORSPACE', 'EMRSELECTOBJECT',
    'EMRSELECTPALETTE', 'EMRSETARCDIRECTION', 'EMRSETBKCOLOR',
    'EMRSETBKMODE', 'EMRSETBRUSHORGEX', 'EMRSETCOLORADJUSTMENT',
    'EMRSETCOLORSPACE', 'EMRSETDIBITSTODEVICE', 'EMRSETICMMODE',
    'EMRSETICMPROFILE', 'EMRSETICMPROFILEA', 'EMRSETICMPROFILEW',
    'EMRSETLAYOUT', 'EMRSETMAPMODE', 'EMRSETMAPPERFLAGS',
    'EMRSETMETARGN', 'EMRSETMITERLIMIT', 'EMRSETPALETTEENTRIES',
    'EMRSETPIXELV', 'EMRSETPOLYFILLMODE', 'EMRSETROP2',
    'EMRSETSTRETCHBLTMODE', 'EMRSETTEXTALIGN', 'EMRSETTEXTCOLOR',
    'EMRSETVIEWPORTEXTEX', 'EMRSETVIEWPORTORGEX', 'EMRSETWINDOWEXTEX',
    'EMRSETWINDOWORGEX', 'EMRSETWORLDTRANSFORM', 'EMRSTRETCHBLT',
    'EMRSTRETCHDIBITS', 'EMRSTROKEANDFILLPATH', 'EMRSTROKEPATH',
    'EMRTEXT', 'EMRTRANSPARENTBLT', 'EMRWIDENPATH',
    'ENCLAVE_CREATE_INFO_SGX', 'ENCLAVE_CREATE_INFO_VBS',
    'ENCLAVE_CREATE_INFO_VBS_BASIC', 'ENCLAVE_INIT_INFO_SGX',
    'ENCLAVE_INIT_INFO_VBS', 'ENCLAVE_INIT_INFO_VBS_BASIC',
    'ENCLAVE_LOAD_DATA_VBS_BASIC', 'ENCLAVE_TARGET_FUNCTION',
    'ENHMETAHEADER', 'ENHMETARECORD', 'ENHMFENUMPROC',
    'ENLISTMENT_BASIC_INFORMATION', 'ENLISTMENT_CRM_INFORMATION',
    'ENLISTMENT_INFORMATION_CLASS',
    'ENLISTMENT_INFORMATION_CLASS__enumvalues', 'ENUMLOGFONT',
    'ENUMLOGFONTA', 'ENUMLOGFONTEX', 'ENUMLOGFONTEXA',
    'ENUMLOGFONTEXDV', 'ENUMLOGFONTEXDVA', 'ENUMLOGFONTEXDVW',
    'ENUMLOGFONTEXW', 'ENUMLOGFONTW', 'ENUMRESLANGPROCA',
    'ENUMRESLANGPROCW', 'ENUMRESNAMEPROCA', 'ENUMRESNAMEPROCW',
    'ENUMRESTYPEPROCA', 'ENUMRESTYPEPROCW', 'ENUMTEXTMETRIC',
    'ENUMTEXTMETRICA', 'ENUMTEXTMETRICW', 'ENUMUILANG',
    'ENUM_SERVICE_STATUS', 'ENUM_SERVICE_STATUSA',
    'ENUM_SERVICE_STATUSW', 'ENUM_SERVICE_STATUS_PROCESS',
    'ENUM_SERVICE_STATUS_PROCESSA', 'ENUM_SERVICE_STATUS_PROCESSW',
    'EVENTLOGRECORD', 'EVENTLOG_FULL_INFORMATION', 'EVENTMSG',
    'EVENTSFORLOGFILE', 'EXCEPTION', 'EXCEPTION_DEBUG_INFO',
    'EXCEPTION_DISPOSITION', 'EXCEPTION_DISPOSITION__enumvalues',
    'EXCEPTION_POINTERS', 'EXCEPTION_RECORD', 'EXCEPTION_RECORD32',
    'EXCEPTION_RECORD64', 'EXCEPTION_REGISTRATION_RECORD',
    'EXECUTION_STATE', 'EXIT_PROCESS_DEBUG_INFO',
    'EXIT_THREAD_DEBUG_INFO', 'EXTLOGFONT', 'EXTLOGFONTA',
    'EXTLOGFONTW', 'EXTLOGPEN', 'EXTLOGPEN32', 'EnergyTrackerCreate',
    'EnergyTrackerQuery', 'EnlistmentBasicInformation',
    'EnlistmentCrmInformation', 'EnlistmentRecoveryInformation',
    'ExceptionCollidedUnwind', 'ExceptionContinueExecution',
    'ExceptionContinueSearch', 'ExceptionNestedException',
    'ExitLatencySamplingPercentage', 'ExtendedFileIdType', 'F2MC_adb',
    'F2MC_add', 'F2MC_addc1', 'F2MC_addc2', 'F2MC_addcw',
    'F2MC_adddc', 'F2MC_addl', 'F2MC_addsp', 'F2MC_addw1',
    'F2MC_addw2', 'F2MC_and', 'F2MC_andl', 'F2MC_andw1', 'F2MC_andw2',
    'F2MC_asr', 'F2MC_asrl', 'F2MC_asrw1', 'F2MC_asrw2', 'F2MC_bbc',
    'F2MC_bbc16', 'F2MC_bbs', 'F2MC_bbs16', 'F2MC_bc', 'F2MC_bc16',
    'F2MC_bge', 'F2MC_bge16', 'F2MC_bgt', 'F2MC_bgt16', 'F2MC_bhi',
    'F2MC_bhi16', 'F2MC_ble', 'F2MC_ble16', 'F2MC_bls', 'F2MC_bls16',
    'F2MC_blt', 'F2MC_blt16', 'F2MC_bn', 'F2MC_bn16', 'F2MC_bnc',
    'F2MC_bnc16', 'F2MC_bnt', 'F2MC_bnt16', 'F2MC_bnv', 'F2MC_bnv16',
    'F2MC_bnz', 'F2MC_bnz16', 'F2MC_bp', 'F2MC_bp16', 'F2MC_bra',
    'F2MC_bt', 'F2MC_bt16', 'F2MC_bv', 'F2MC_bv16', 'F2MC_bz',
    'F2MC_bz16', 'F2MC_call', 'F2MC_callp', 'F2MC_callv', 'F2MC_cbne',
    'F2MC_cbne16', 'F2MC_clrb', 'F2MC_cmp1', 'F2MC_cmp2', 'F2MC_cmpl',
    'F2MC_cmpw1', 'F2MC_cmpw2', 'F2MC_cmr', 'F2MC_cwbne',
    'F2MC_cwbne16', 'F2MC_dbnz', 'F2MC_dbnz16', 'F2MC_dec',
    'F2MC_decl', 'F2MC_decw', 'F2MC_div1', 'F2MC_div2', 'F2MC_divu1',
    'F2MC_divu2', 'F2MC_divuw', 'F2MC_divw', 'F2MC_dtb', 'F2MC_dwbnz',
    'F2MC_dwbnz16', 'F2MC_ext', 'F2MC_extw', 'F2MC_filsi',
    'F2MC_filswi', 'F2MC_inc', 'F2MC_incl', 'F2MC_incw', 'F2MC_int',
    'F2MC_int9', 'F2MC_intp', 'F2MC_jctx', 'F2MC_jmp', 'F2MC_jmpp',
    'F2MC_last', 'F2MC_link', 'F2MC_lsl', 'F2MC_lsll', 'F2MC_lslw1',
    'F2MC_lslw2', 'F2MC_lsr', 'F2MC_lsrl', 'F2MC_lsrw1', 'F2MC_lsrw2',
    'F2MC_mov', 'F2MC_movb', 'F2MC_movea', 'F2MC_movl', 'F2MC_movn',
    'F2MC_movsd', 'F2MC_movsi', 'F2MC_movswd', 'F2MC_movswi',
    'F2MC_movw', 'F2MC_movx', 'F2MC_mul1', 'F2MC_mul2', 'F2MC_mulu1',
    'F2MC_mulu2', 'F2MC_muluw1', 'F2MC_muluw2', 'F2MC_mulw1',
    'F2MC_mulw2', 'F2MC_ncc', 'F2MC_neg', 'F2MC_negw', 'F2MC_nop',
    'F2MC_not', 'F2MC_notw', 'F2MC_nrml', 'F2MC_null', 'F2MC_or',
    'F2MC_orl', 'F2MC_orw1', 'F2MC_orw2', 'F2MC_pcb', 'F2MC_popw',
    'F2MC_pushw', 'F2MC_ret', 'F2MC_reti', 'F2MC_retp', 'F2MC_rolc',
    'F2MC_rorc', 'F2MC_sbbs', 'F2MC_sbbs16', 'F2MC_sceqd',
    'F2MC_sceqi', 'F2MC_scweqd', 'F2MC_scweqi', 'F2MC_setb',
    'F2MC_spb', 'F2MC_sub', 'F2MC_subc1', 'F2MC_subc2', 'F2MC_subcw',
    'F2MC_subdc', 'F2MC_subl', 'F2MC_subw1', 'F2MC_subw2',
    'F2MC_swap', 'F2MC_swapw', 'F2MC_unlink', 'F2MC_wbtc',
    'F2MC_wbts', 'F2MC_xch', 'F2MC_xchw', 'F2MC_xor', 'F2MC_xorl',
    'F2MC_xorw1', 'F2MC_xorw2', 'F2MC_zext', 'F2MC_zextw', 'FARPROC',
    'FCHAR', 'FD_SET', 'FEEDBACK_GESTURE_PRESSANDTAP', 'FEEDBACK_MAX',
    'FEEDBACK_PEN_BARRELVISUALIZATION', 'FEEDBACK_PEN_DOUBLETAP',
    'FEEDBACK_PEN_PRESSANDHOLD', 'FEEDBACK_PEN_RIGHTTAP',
    'FEEDBACK_PEN_TAP', 'FEEDBACK_TOUCH_CONTACTVISUALIZATION',
    'FEEDBACK_TOUCH_DOUBLETAP', 'FEEDBACK_TOUCH_PRESSANDHOLD',
    'FEEDBACK_TOUCH_RIGHTTAP', 'FEEDBACK_TOUCH_TAP', 'FEEDBACK_TYPE',
    'FEEDBACK_TYPE__enumvalues', 'FILE', 'FILEMUIINFO', 'FILETIME',
    'FILE_ALIGNMENT_INFO', 'FILE_ALLOCATION_INFO',
    'FILE_ATTRIBUTE_TAG_INFO', 'FILE_BASIC_INFO',
    'FILE_CASE_SENSITIVE_INFO', 'FILE_COMPRESSION_INFO',
    'FILE_DISPOSITION_INFO', 'FILE_DISPOSITION_INFO_EX',
    'FILE_END_OF_FILE_INFO', 'FILE_FULL_DIR_INFO', 'FILE_ID_128',
    'FILE_ID_BOTH_DIR_INFO', 'FILE_ID_EXTD_DIR_INFO', 'FILE_ID_INFO',
    'FILE_ID_TYPE', 'FILE_ID_TYPE__enumvalues',
    'FILE_INFO_BY_HANDLE_CLASS',
    'FILE_INFO_BY_HANDLE_CLASS__enumvalues',
    'FILE_IO_PRIORITY_HINT_INFO', 'FILE_NAME_INFO',
    'FILE_NOTIFY_EXTENDED_INFORMATION', 'FILE_NOTIFY_INFORMATION',
    'FILE_REMOTE_PROTOCOL_INFO', 'FILE_RENAME_INFO',
    'FILE_SEGMENT_ELEMENT', 'FILE_STANDARD_INFO', 'FILE_STORAGE_INFO',
    'FILE_STREAM_INFO', 'FILTERKEYS', 'FINDEX_INFO_LEVELS',
    'FINDEX_INFO_LEVELS__enumvalues', 'FINDEX_SEARCH_OPS',
    'FINDEX_SEARCH_OPS__enumvalues', 'FIND_EXTLANG_BY_EXT',
    'FIND_EXTLANG_BY_IDX', 'FIND_EXTLANG_BY_NAME', 'FIRMWARE_TYPE',
    'FIRMWARE_TYPE__enumvalues', 'FIXED', 'FLOAT', 'FLOAT128',
    'FLONG', 'FLOWSPEC', 'FMTFUNC_PRINTF', 'FMTFUNC_SCANF',
    'FMTFUNC_STRFMON', 'FMTFUNC_STRFTIME', 'FMTID',
    'FOCUS_EVENT_RECORD', 'FONTENUMPROC', 'FONTENUMPROCA',
    'FONTENUMPROCW', 'FONTSIGNATURE', 'FPC_ARGS', 'FPC_LVARS',
    'FPC_RETADDR', 'FPC_SAVREGS', 'FPO_DATA', 'FPV_BADARG', 'FPV_NAN',
    'FPV_NINF', 'FPV_NORM', 'FPV_PINF', 'FSHORT', 'FXPT16DOT16',
    'FXPT2DOT30', 'FileAlignmentInfo', 'FileAllocationInfo',
    'FileAttributeTagInfo', 'FileBasicInfo', 'FileCaseSensitiveInfo',
    'FileCompressionInfo', 'FileDispositionInfo',
    'FileDispositionInfoEx', 'FileEndOfFileInfo',
    'FileFullDirectoryInfo', 'FileFullDirectoryRestartInfo',
    'FileIdBothDirectoryInfo', 'FileIdBothDirectoryRestartInfo',
    'FileIdExtdDirectoryInfo', 'FileIdExtdDirectoryRestartInfo',
    'FileIdInfo', 'FileIdType',
    'FileInformationInAssemblyOfAssemblyInActivationContext',
    'FileInformationInAssemblyOfAssemblyInActivationContxt',
    'FileIoPriorityHintInfo', 'FileNameInfo',
    'FileNormalizedNameInfo', 'FileRemoteProtocolInfo',
    'FileRenameInfo', 'FileRenameInfoEx', 'FileStandardInfo',
    'FileStorageInfo', 'FileStreamInfo', 'FileSystemType',
    'FindExInfoBasic', 'FindExInfoMaxInfoLevel', 'FindExInfoStandard',
    'FindExSearchLimitToDevices', 'FindExSearchLimitToDirectories',
    'FindExSearchMaxSearchOp', 'FindExSearchNameMatch',
    'FindStreamInfoMaxInfoLevel', 'FindStreamInfoStandard',
    'FirmwareTableInformationRegistered', 'FirmwareTypeBios',
    'FirmwareTypeMax', 'FirmwareTypeUefi', 'FirmwareTypeUnknown',
    'GB_ldh', 'GB_stop', 'GCP_RESULTS', 'GCP_RESULTSA',
    'GCP_RESULTSW', 'GDE_ERROR', 'GDE_MANY_EVENTS', 'GDE_NO_EVENT',
    'GDE_ONE_EVENT', 'GENERIC_MAPPING', 'GEOCLASS', 'GEOCLASS_ALL',
    'GEOCLASS_NATION', 'GEOCLASS_REGION', 'GEOID', 'GEOTYPE',
    'GEO_CURRENCYCODE', 'GEO_CURRENCYSYMBOL', 'GEO_DIALINGCODE',
    'GEO_ENUMNAMEPROC', 'GEO_ENUMPROC', 'GEO_FRIENDLYNAME', 'GEO_ID',
    'GEO_ISO2', 'GEO_ISO3', 'GEO_ISO_UN_NUMBER', 'GEO_LATITUDE',
    'GEO_LCID', 'GEO_LONGITUDE', 'GEO_NAME', 'GEO_NATION',
    'GEO_OFFICIALLANGUAGES', 'GEO_OFFICIALNAME', 'GEO_PARENT',
    'GEO_RFC1766', 'GEO_TIMEZONES', 'GESTURECONFIG', 'GESTUREINFO',
    'GESTURENOTIFYSTRUCT', 'GET_FILEEX_INFO_LEVELS',
    'GET_FILEEX_INFO_LEVELS__enumvalues',
    'GET_RUNTIME_FUNCTION_CALLBACK', 'GLOBALHANDLE', 'GLYPHMETRICS',
    'GLYPHMETRICSFLOAT', 'GLYPHSET', 'GOBJENUMPROC', 'GRADIENT_RECT',
    'GRADIENT_TRIANGLE', 'GRAYSTRINGPROC', 'GROUP', 'GROUP_AFFINITY',
    'GROUP_FILTER', 'GROUP_RELATIONSHIP', 'GROUP_REQ',
    'GROUP_SOURCE_REQ', 'GTD_CALC_ARGLOCS', 'GTD_CALC_LAYOUT',
    'GTD_DEL_BITFLDS', 'GTD_NO_ARGLOCS', 'GTD_NO_LAYOUT',
    'GTS_BASECLASS', 'GTS_NESTED', 'GUID', 'GUITHREADINFO',
    'GetFileExInfoStandard', 'GetFileExMaxInfoLevel',
    'GetPowerRequestList', 'GetPowerSettingValue', 'GroupPark',
    'H8500_add_g', 'H8500_add_q', 'H8500_adds', 'H8500_addx',
    'H8500_and', 'H8500_andc', 'H8500_bcc', 'H8500_bclr', 'H8500_bcs',
    'H8500_beq', 'H8500_bge', 'H8500_bgt', 'H8500_bhi', 'H8500_ble',
    'H8500_bls', 'H8500_blt', 'H8500_bmi', 'H8500_bne', 'H8500_bnot',
    'H8500_bpl', 'H8500_bpt', 'H8500_bra', 'H8500_brn', 'H8500_bset',
    'H8500_bsr', 'H8500_btst', 'H8500_bvc', 'H8500_bvs', 'H8500_clr',
    'H8500_cmp_e', 'H8500_cmp_g', 'H8500_cmp_i', 'H8500_dadd',
    'H8500_divxu', 'H8500_dsub', 'H8500_exts', 'H8500_extu',
    'H8500_jmp', 'H8500_jsr', 'H8500_last', 'H8500_ldc', 'H8500_ldm',
    'H8500_link', 'H8500_mov_e', 'H8500_mov_f', 'H8500_mov_g',
    'H8500_mov_i', 'H8500_mov_l', 'H8500_mov_s', 'H8500_movfpe',
    'H8500_movtpe', 'H8500_mulxu', 'H8500_neg', 'H8500_nop',
    'H8500_not', 'H8500_null', 'H8500_or', 'H8500_orc', 'H8500_pjmp',
    'H8500_pjsr', 'H8500_prtd', 'H8500_prts', 'H8500_rotl',
    'H8500_rotr', 'H8500_rotxl', 'H8500_rotxr', 'H8500_rtd',
    'H8500_rte', 'H8500_rts', 'H8500_scb', 'H8500_shal', 'H8500_shar',
    'H8500_shll', 'H8500_shlr', 'H8500_sleep', 'H8500_stc',
    'H8500_stm', 'H8500_sub', 'H8500_subs', 'H8500_subx',
    'H8500_swap', 'H8500_tas', 'H8500_trap_vs', 'H8500_trapa',
    'H8500_tst', 'H8500_unlk', 'H8500_xch', 'H8500_xor', 'H8500_xorc',
    'H8_add', 'H8_adds', 'H8_addx', 'H8_and', 'H8_andc', 'H8_band',
    'H8_bcc', 'H8_bclr', 'H8_bclreq', 'H8_bclrne', 'H8_bcs', 'H8_beq',
    'H8_bfld', 'H8_bfst', 'H8_bge', 'H8_bgt', 'H8_bhi', 'H8_biand',
    'H8_bild', 'H8_bior', 'H8_bist', 'H8_bistz', 'H8_bixor', 'H8_bld',
    'H8_ble', 'H8_bls', 'H8_blt', 'H8_bmi', 'H8_bne', 'H8_bnot',
    'H8_bor', 'H8_bpl', 'H8_bra', 'H8_brabc', 'H8_brabs', 'H8_bras',
    'H8_brn', 'H8_bset', 'H8_bseteq', 'H8_bsetne', 'H8_bsr',
    'H8_bsrbc', 'H8_bsrbs', 'H8_bst', 'H8_bstz', 'H8_btst', 'H8_bvc',
    'H8_bvs', 'H8_bxor', 'H8_clrmac', 'H8_cmp', 'H8_daa', 'H8_das',
    'H8_dec', 'H8_divs', 'H8_divu', 'H8_divxs', 'H8_divxu',
    'H8_eepmov', 'H8_exts', 'H8_extu', 'H8_inc', 'H8_jmp', 'H8_jsr',
    'H8_last', 'H8_ldc', 'H8_ldm', 'H8_ldmac', 'H8_mac', 'H8_mov',
    'H8_movab', 'H8_moval', 'H8_movaw', 'H8_movfpe', 'H8_movmd',
    'H8_movsd', 'H8_movtpe', 'H8_muls', 'H8_mulsu', 'H8_mulu',
    'H8_muluu', 'H8_mulxs', 'H8_mulxu', 'H8_neg', 'H8_nop', 'H8_not',
    'H8_null', 'H8_or', 'H8_orc', 'H8_pop', 'H8_push', 'H8_rotl',
    'H8_rotr', 'H8_rotxl', 'H8_rotxr', 'H8_rte', 'H8_rtel', 'H8_rts',
    'H8_rtsl', 'H8_shal', 'H8_shar', 'H8_shll', 'H8_shlr', 'H8_sleep',
    'H8_stc', 'H8_stm', 'H8_stmac', 'H8_sub', 'H8_subs', 'H8_subx',
    'H8_tas', 'H8_trapa', 'H8_xor', 'H8_xorc', 'HACCEL', 'HALF_PTR',
    'HANDEDNESS', 'HANDEDNESS_LEFT', 'HANDEDNESS_RIGHT',
    'HANDEDNESS__enumvalues', 'HANDLE', 'HANDLETABLE', 'HANDLE_PTR',
    'HARDWAREHOOKSTRUCT', 'HARDWAREINPUT', 'HARDWARE_COUNTER_DATA',
    'HARDWARE_COUNTER_TYPE', 'HARDWARE_COUNTER_TYPE__enumvalues',
    'HBITMAP', 'HBRUSH', 'HCOLORSPACE', 'HCURSOR', 'HDC', 'HDESK',
    'HDEVNOTIFY', 'HDWP', 'HD_in0', 'HD_mlt', 'HD_otdm', 'HD_otdmr',
    'HD_otim', 'HD_otimr', 'HD_out0', 'HD_slp', 'HD_tst', 'HD_tstio',
    'HEAP_INFORMATION_CLASS', 'HEAP_INFORMATION_CLASS__enumvalues',
    'HEAP_OPTIMIZE_RESOURCES_INFORMATION', 'HEAP_SUMMARY', 'HELPINFO',
    'HELPPOLY', 'HELPWININFO', 'HELPWININFOA', 'HELPWININFOW',
    'HENHMETAFILE', 'HFILE', 'HFONT', 'HF_COMMENT', 'HF_DEFAULT',
    'HF_KEYWORD1', 'HF_KEYWORD2', 'HF_KEYWORD3', 'HF_MAX',
    'HF_NUMBER', 'HF_PREPROC', 'HF_STRING', 'HGDIOBJ', 'HGESTUREINFO',
    'HGLOBAL', 'HGLRC', 'HHOOK', 'HIBERFILE_BUCKET',
    'HIBERFILE_BUCKET_SIZE', 'HIBERFILE_BUCKET_SIZE__enumvalues',
    'HICON', 'HIGHCONTRAST', 'HIGHCONTRASTA', 'HIGHCONTRASTW', 'HIMC',
    'HIMCC', 'HINSTANCE', 'HKEY', 'HKL', 'HLOCAL', 'HLSURF', 'HMENU',
    'HMETAFILE', 'HMODULE', 'HMONITOR', 'HOOKPROC', 'HOSTENT',
    'HPALETTE', 'HPCON', 'HPEN', 'HPOWERNOTIFY', 'HPPA_add',
    'HPPA_addb', 'HPPA_addi', 'HPPA_addib', 'HPPA_addil', 'HPPA_and',
    'HPPA_andcm', 'HPPA_b', 'HPPA_bb', 'HPPA_be', 'HPPA_blr',
    'HPPA_break', 'HPPA_bv', 'HPPA_bve', 'HPPA_call', 'HPPA_cldd',
    'HPPA_cldw', 'HPPA_clrbts', 'HPPA_cmpb', 'HPPA_cmpclr',
    'HPPA_cmpib', 'HPPA_cmpiclr', 'HPPA_copr', 'HPPA_copy',
    'HPPA_cstd', 'HPPA_cstw', 'HPPA_dcor', 'HPPA_depd', 'HPPA_depdi',
    'HPPA_depw', 'HPPA_depwi', 'HPPA_diag', 'HPPA_ds', 'HPPA_extrd',
    'HPPA_extrw', 'HPPA_fabs', 'HPPA_fadd', 'HPPA_fcmp', 'HPPA_fcnv',
    'HPPA_fcpy', 'HPPA_fdc', 'HPPA_fdce', 'HPPA_fdiv', 'HPPA_fic',
    'HPPA_fice', 'HPPA_fid', 'HPPA_fldd', 'HPPA_fldw', 'HPPA_fmpy',
    'HPPA_fmpyadd', 'HPPA_fmpyfadd', 'HPPA_fmpynfadd', 'HPPA_fmpysub',
    'HPPA_fneg', 'HPPA_fnegabs', 'HPPA_frem', 'HPPA_frnd',
    'HPPA_fsqrt', 'HPPA_fstd', 'HPPA_fstw', 'HPPA_fsub', 'HPPA_ftest',
    'HPPA_hadd', 'HPPA_havg', 'HPPA_hshl', 'HPPA_hshladd',
    'HPPA_hshr', 'HPPA_hshradd', 'HPPA_hsub', 'HPPA_idtlbt',
    'HPPA_iitlbt', 'HPPA_last', 'HPPA_lci', 'HPPA_ldb', 'HPPA_ldcd',
    'HPPA_ldcw', 'HPPA_ldd', 'HPPA_ldda', 'HPPA_ldh', 'HPPA_ldi',
    'HPPA_ldil', 'HPPA_ldo', 'HPPA_ldsid', 'HPPA_ldw', 'HPPA_ldwa',
    'HPPA_lpa', 'HPPA_mfctl', 'HPPA_mfia', 'HPPA_mfsp', 'HPPA_mixh',
    'HPPA_mixw', 'HPPA_movb', 'HPPA_movib', 'HPPA_mtctl',
    'HPPA_mtsar', 'HPPA_mtsarcm', 'HPPA_mtsm', 'HPPA_mtsp',
    'HPPA_nop', 'HPPA_null', 'HPPA_or', 'HPPA_pdc', 'HPPA_pdtlb',
    'HPPA_pdtlbe', 'HPPA_permh', 'HPPA_pitlb', 'HPPA_pitlbe',
    'HPPA_pmdis', 'HPPA_pmenb', 'HPPA_popbts', 'HPPA_probe',
    'HPPA_probei', 'HPPA_pushbts', 'HPPA_pushnom', 'HPPA_ret',
    'HPPA_rfi', 'HPPA_rsm', 'HPPA_shladd', 'HPPA_shld', 'HPPA_shlw',
    'HPPA_shrd', 'HPPA_shrpd', 'HPPA_shrpw', 'HPPA_shrw',
    'HPPA_spop0', 'HPPA_spop1', 'HPPA_spop2', 'HPPA_spop3',
    'HPPA_ssm', 'HPPA_stb', 'HPPA_stby', 'HPPA_std', 'HPPA_stda',
    'HPPA_stdby', 'HPPA_sth', 'HPPA_stw', 'HPPA_stwa', 'HPPA_sub',
    'HPPA_subi', 'HPPA_sync', 'HPPA_syncdma', 'HPPA_uaddcm',
    'HPPA_uxor', 'HPPA_xmpyu', 'HPPA_xor', 'HRAWINPUT', 'HRESULT',
    'HRGN', 'HRSRC', 'HSAVEDUILANGUAGES', 'HSPRITE', 'HSTR',
    'HSYNTHETICPOINTERDEVICE', 'HTASK', 'HTOUCHINPUT', 'HT_DBG',
    'HT_DEV', 'HT_GRAPH', 'HT_IDB', 'HT_IDD', 'HT_IDP', 'HT_LAST',
    'HT_OUTPUT', 'HT_UI', 'HT_VIEW', 'HUMPD', 'HWINEVENTHOOK',
    'HWINSTA', 'HWND', 'HW_PROFILE_INFO', 'HW_PROFILE_INFOA',
    'HW_PROFILE_INFOW', 'HeapCompatibilityInformation',
    'HeapEnableTerminationOnCorruption', 'HeapOptimizeResources',
    'HiberFileBucket16GB', 'HiberFileBucket1GB', 'HiberFileBucket2GB',
    'HiberFileBucket32GB', 'HiberFileBucket4GB', 'HiberFileBucket8GB',
    'HiberFileBucketMax', 'HiberFileBucketUnlimited',
    'HighMemoryResourceNotification', 'I196_add2', 'I196_add3',
    'I196_addb2', 'I196_addb3', 'I196_addc', 'I196_addcb',
    'I196_and2', 'I196_and3', 'I196_andb2', 'I196_andb3', 'I196_bmov',
    'I196_bmovi', 'I196_br', 'I196_clr', 'I196_clrb', 'I196_clrc',
    'I196_clrvt', 'I196_cmp', 'I196_cmpb', 'I196_cmpl', 'I196_dec',
    'I196_decb', 'I196_di', 'I196_div', 'I196_divb', 'I196_divu',
    'I196_divub', 'I196_djnz', 'I196_djnzw', 'I196_dpts',
    'I196_ebmovi', 'I196_ebr', 'I196_ecall', 'I196_ei', 'I196_ejmp',
    'I196_eld', 'I196_eldb', 'I196_epts', 'I196_est', 'I196_estb',
    'I196_ext', 'I196_extb', 'I196_idlpd', 'I196_inc', 'I196_incb',
    'I196_jbc', 'I196_jbs', 'I196_jc', 'I196_je', 'I196_jge',
    'I196_jgt', 'I196_jh', 'I196_jle', 'I196_jlt', 'I196_jnc',
    'I196_jne', 'I196_jnh', 'I196_jnst', 'I196_jnv', 'I196_jnvt',
    'I196_jst', 'I196_jv', 'I196_jvt', 'I196_last', 'I196_lcall',
    'I196_ld', 'I196_ldb', 'I196_ldbse', 'I196_ldbze', 'I196_ljmp',
    'I196_mul2', 'I196_mul3', 'I196_mulb2', 'I196_mulb3',
    'I196_mulu2', 'I196_mulu3', 'I196_mulub2', 'I196_mulub3',
    'I196_neg', 'I196_negb', 'I196_nop', 'I196_norml', 'I196_not',
    'I196_notb', 'I196_null', 'I196_or', 'I196_orb', 'I196_pop',
    'I196_popa', 'I196_popf', 'I196_push', 'I196_pusha', 'I196_pushf',
    'I196_ret', 'I196_rst', 'I196_scall', 'I196_setc', 'I196_shl',
    'I196_shlb', 'I196_shll', 'I196_shr', 'I196_shra', 'I196_shrab',
    'I196_shral', 'I196_shrb', 'I196_shrl', 'I196_sjmp', 'I196_skip',
    'I196_st', 'I196_stb', 'I196_sub2', 'I196_sub3', 'I196_subb2',
    'I196_subb3', 'I196_subc', 'I196_subcb', 'I196_tijmp',
    'I196_trap', 'I196_xch', 'I196_xchb', 'I196_xor', 'I196_xorb',
    'I51_acall', 'I51_add', 'I51_addc', 'I51_ajmp', 'I51_anl',
    'I51_cjne', 'I51_clr', 'I51_cmp', 'I51_cpl', 'I51_da', 'I51_dec',
    'I51_div', 'I51_djnz', 'I51_ecall', 'I51_ejmp', 'I51_emov',
    'I51_eret', 'I51_inc', 'I51_jb', 'I51_jbc', 'I51_jc', 'I51_je',
    'I51_jg', 'I51_jle', 'I51_jmp', 'I51_jnb', 'I51_jnc', 'I51_jne',
    'I51_jnz', 'I51_jsg', 'I51_jsge', 'I51_jsl', 'I51_jsle', 'I51_jz',
    'I51_last', 'I51_lcall', 'I51_ljmp', 'I51_mov', 'I51_movc',
    'I51_movh', 'I51_movs', 'I51_movx', 'I51_movz', 'I51_mul',
    'I51_nop', 'I51_null', 'I51_orl', 'I51_pop', 'I51_push',
    'I51_ret', 'I51_reti', 'I51_rl', 'I51_rlc', 'I51_rr', 'I51_rrc',
    'I51_setb', 'I51_sjmp', 'I51_sll', 'I51_sra', 'I51_srl',
    'I51_sub', 'I51_subb', 'I51_swap', 'I51_trap', 'I51_xch',
    'I51_xchd', 'I51_xrl', 'I5_aci', 'I5_adc', 'I5_add', 'I5_adi',
    'I5_ana', 'I5_ani', 'I5_arhl', 'I5_call', 'I5_cc', 'I5_cm',
    'I5_cma', 'I5_cmc', 'I5_cmp', 'I5_cnc', 'I5_cnz', 'I5_cp',
    'I5_cpe', 'I5_cpi', 'I5_cpo', 'I5_cz', 'I5_daa', 'I5_dad',
    'I5_dcr', 'I5_dcx', 'I5_di', 'I5_dsub', 'I5_ei', 'I5_halt',
    'I5_in', 'I5_inr', 'I5_inx', 'I5_jc', 'I5_jm', 'I5_jmp', 'I5_jnc',
    'I5_jnx5', 'I5_jnz', 'I5_jp', 'I5_jpe', 'I5_jpo', 'I5_jx5',
    'I5_jz', 'I5_last', 'I5_lda', 'I5_ldax', 'I5_ldhi', 'I5_ldsi',
    'I5_lhld', 'I5_lhlx', 'I5_lxi', 'I5_mov', 'I5_mvi', 'I5_nop',
    'I5_null', 'I5_ora', 'I5_ori', 'I5_out', 'I5_pchl', 'I5_pop',
    'I5_push', 'I5_ral', 'I5_rar', 'I5_rc', 'I5_rdel', 'I5_ret',
    'I5_rim', 'I5_rlc', 'I5_rm', 'I5_rnc', 'I5_rnz', 'I5_rp',
    'I5_rpe', 'I5_rpo', 'I5_rrc', 'I5_rst', 'I5_rstv', 'I5_rz',
    'I5_sbb', 'I5_sbi', 'I5_shld', 'I5_shlx', 'I5_sim', 'I5_sphl',
    'I5_sta', 'I5_stax', 'I5_stc', 'I5_sub', 'I5_sui', 'I5_xchg',
    'I5_xra', 'I5_xri', 'I5_xthl', 'I860_adds', 'I860_addu',
    'I860_and', 'I860_andh', 'I860_andnot', 'I860_andnoth', 'I860_bc',
    'I860_bc_t', 'I860_bla', 'I860_bnc', 'I860_bnc_t', 'I860_br',
    'I860_bri', 'I860_bte', 'I860_btne', 'I860_call', 'I860_calli',
    'I860_fadd', 'I860_faddp', 'I860_faddz', 'I860_famov',
    'I860_fiadd', 'I860_fisub', 'I860_fix', 'I860_fld', 'I860_flush',
    'I860_fmlow_dd', 'I860_fmul', 'I860_form', 'I860_frcp',
    'I860_frsqr', 'I860_fst', 'I860_fsub', 'I860_ftrunc', 'I860_fxfr',
    'I860_fzchkl', 'I860_fzchks', 'I860_i2ap1', 'I860_i2apt',
    'I860_i2as1', 'I860_i2ast', 'I860_i2p1', 'I860_i2pt', 'I860_i2s1',
    'I860_i2st', 'I860_ia1p2', 'I860_ia1s2', 'I860_iat1p2',
    'I860_iat1s2', 'I860_introvr', 'I860_ixfr', 'I860_last',
    'I860_ld', 'I860_ld_c', 'I860_ldint', 'I860_ldio', 'I860_lock',
    'I860_m12apm', 'I860_m12asm', 'I860_m12tpa', 'I860_m12tpm',
    'I860_m12tsa', 'I860_m12tsm', 'I860_m12ttpa', 'I860_m12ttsa',
    'I860_mi2mp1', 'I860_mi2mpt', 'I860_mi2ms1', 'I860_mi2mst',
    'I860_mi2p1', 'I860_mi2pt', 'I860_mi2s1', 'I860_mi2st',
    'I860_mim1p2', 'I860_mim1s2', 'I860_mimt1p2', 'I860_mimt1s2',
    'I860_mm12mpm', 'I860_mm12msm', 'I860_mm12tpm', 'I860_mm12tsm',
    'I860_mm12ttpm', 'I860_mm12ttsm', 'I860_mr2mp1', 'I860_mr2mpt',
    'I860_mr2ms1', 'I860_mr2mst', 'I860_mr2p1', 'I860_mr2pt',
    'I860_mr2s1', 'I860_mr2st', 'I860_mrm1p2', 'I860_mrm1s2',
    'I860_mrmt1p2', 'I860_mrmt1s2', 'I860_null', 'I860_or',
    'I860_orh', 'I860_pfadd', 'I860_pfaddp', 'I860_pfaddz',
    'I860_pfamov', 'I860_pfeq', 'I860_pfgt', 'I860_pfiadd',
    'I860_pfisub', 'I860_pfix', 'I860_pfld', 'I860_pfle',
    'I860_pfmul', 'I860_pfmul3_dd', 'I860_pform', 'I860_pfsub',
    'I860_pftrunc', 'I860_pfzchkl', 'I860_pfzchks', 'I860_pst_d',
    'I860_r2ap1', 'I860_r2apt', 'I860_r2as1', 'I860_r2ast',
    'I860_r2p1', 'I860_r2pt', 'I860_r2s1', 'I860_r2st', 'I860_ra1p2',
    'I860_ra1s2', 'I860_rat1p2', 'I860_rat1s2', 'I860_scyc',
    'I860_shl', 'I860_shr', 'I860_shra', 'I860_shrd', 'I860_st',
    'I860_st_c', 'I860_stio', 'I860_subs', 'I860_subu', 'I860_trap',
    'I860_unlock', 'I860_xor', 'I860_xorh', 'I960_addc', 'I960_addi',
    'I960_addie', 'I960_addig', 'I960_addige', 'I960_addil',
    'I960_addile', 'I960_addine', 'I960_addino', 'I960_addio',
    'I960_addo', 'I960_addoe', 'I960_addog', 'I960_addoge',
    'I960_addol', 'I960_addole', 'I960_addone', 'I960_addono',
    'I960_addoo', 'I960_alterbit', 'I960_and', 'I960_andnot',
    'I960_atadd', 'I960_atmod', 'I960_b', 'I960_bal', 'I960_balx',
    'I960_bbc', 'I960_bbs', 'I960_be', 'I960_bg', 'I960_bge',
    'I960_bl', 'I960_ble', 'I960_bne', 'I960_bno', 'I960_bo',
    'I960_bswap', 'I960_bx', 'I960_call', 'I960_calls', 'I960_callx',
    'I960_chkbit', 'I960_clrbit', 'I960_cmpdeci', 'I960_cmpdeco',
    'I960_cmpi', 'I960_cmpib', 'I960_cmpibe', 'I960_cmpibg',
    'I960_cmpibge', 'I960_cmpibl', 'I960_cmpible', 'I960_cmpibne',
    'I960_cmpibno', 'I960_cmpibo', 'I960_cmpinci', 'I960_cmpinco',
    'I960_cmpis', 'I960_cmpo', 'I960_cmpob', 'I960_cmpobe',
    'I960_cmpobg', 'I960_cmpobge', 'I960_cmpobl', 'I960_cmpoble',
    'I960_cmpobne', 'I960_cmpos', 'I960_cmpstr', 'I960_concmpi',
    'I960_concmpo', 'I960_condrec', 'I960_condwait', 'I960_daddc',
    'I960_dcctl', 'I960_dcinva', 'I960_divi', 'I960_divo',
    'I960_dmovt', 'I960_dsubc', 'I960_ediv', 'I960_emul',
    'I960_eshro', 'I960_extract', 'I960_faddr', 'I960_faddrl',
    'I960_fatanr', 'I960_fatanrl', 'I960_faulte', 'I960_faultg',
    'I960_faultge', 'I960_faultl', 'I960_faultle', 'I960_faultne',
    'I960_faultno', 'I960_faulto', 'I960_fclassr', 'I960_fclassrl',
    'I960_fcmpor', 'I960_fcmporl', 'I960_fcmpr', 'I960_fcmprl',
    'I960_fcosr', 'I960_fcosrl', 'I960_fcpyrsre', 'I960_fcpysre',
    'I960_fcvtilr', 'I960_fcvtir', 'I960_fcvtri', 'I960_fcvtril',
    'I960_fcvtzri', 'I960_fcvtzril', 'I960_fdivr', 'I960_fdivrl',
    'I960_fexpr', 'I960_fexprl', 'I960_fill', 'I960_flogbnr',
    'I960_flogbnrl', 'I960_flogepr', 'I960_flogeprl', 'I960_flogr',
    'I960_flogrl', 'I960_flushreg', 'I960_fmark', 'I960_fmovr',
    'I960_fmovre', 'I960_fmovrl', 'I960_fmulr', 'I960_fmulrl',
    'I960_fp_first', 'I960_fp_last', 'I960_fremr', 'I960_fremrl',
    'I960_froundr', 'I960_froundrl', 'I960_fscaler', 'I960_fscalerl',
    'I960_fsinr', 'I960_fsinrl', 'I960_fsqrtr', 'I960_fsqrtrl',
    'I960_fsubr', 'I960_fsubrl', 'I960_ftanr', 'I960_ftanrl',
    'I960_halt', 'I960_icctl', 'I960_inspacc', 'I960_intctl',
    'I960_intdis', 'I960_inten', 'I960_last', 'I960_ld', 'I960_lda',
    'I960_ldib', 'I960_ldis', 'I960_ldl', 'I960_ldob', 'I960_ldos',
    'I960_ldphy', 'I960_ldq', 'I960_ldt', 'I960_ldtime', 'I960_mark',
    'I960_modac', 'I960_modi', 'I960_modify', 'I960_modpc',
    'I960_modtc', 'I960_mov', 'I960_movl', 'I960_movq',
    'I960_movqstr', 'I960_movstr', 'I960_movt', 'I960_muli',
    'I960_mulo', 'I960_nand', 'I960_nor', 'I960_not', 'I960_notand',
    'I960_notbit', 'I960_notor', 'I960_null', 'I960_or', 'I960_ornot',
    'I960_receive', 'I960_remi', 'I960_remo', 'I960_resumprcs',
    'I960_ret', 'I960_rotate', 'I960_saveprcs', 'I960_scanbit',
    'I960_scanbyte', 'I960_schedprcs', 'I960_sdma', 'I960_sele',
    'I960_selg', 'I960_selge', 'I960_sell', 'I960_selle',
    'I960_selne', 'I960_selno', 'I960_selo', 'I960_send',
    'I960_sendserv', 'I960_setbit', 'I960_shli', 'I960_shlo',
    'I960_shrdi', 'I960_shri', 'I960_shro', 'I960_signal',
    'I960_spanbit', 'I960_st', 'I960_stib', 'I960_stis', 'I960_stl',
    'I960_stob', 'I960_stos', 'I960_stq', 'I960_stt', 'I960_subc',
    'I960_subi', 'I960_subie', 'I960_subig', 'I960_subige',
    'I960_subil', 'I960_subile', 'I960_subine', 'I960_subino',
    'I960_subio', 'I960_subo', 'I960_suboe', 'I960_subog',
    'I960_suboge', 'I960_subol', 'I960_subole', 'I960_subone',
    'I960_subono', 'I960_suboo', 'I960_syncf', 'I960_synld',
    'I960_synmov', 'I960_synmovl', 'I960_synmovq', 'I960_sysctl',
    'I960_teste', 'I960_testg', 'I960_testge', 'I960_testl',
    'I960_testle', 'I960_testne', 'I960_testno', 'I960_testo',
    'I960_udma', 'I960_wait', 'I960_xnor', 'I960_xor', 'IA64_0',
    'IA64_1', 'IA64_a', 'IA64_acq', 'IA64_add', 'IA64_addl',
    'IA64_addp4', 'IA64_adds', 'IA64_alloc', 'IA64_and', 'IA64_andcm',
    'IA64_b', 'IA64_bias', 'IA64_br', 'IA64_break', 'IA64_brl',
    'IA64_brp', 'IA64_bsw', 'IA64_c', 'IA64_call', 'IA64_cexit',
    'IA64_chk', 'IA64_cloop', 'IA64_clr', 'IA64_clrrrb', 'IA64_cmp',
    'IA64_cmp4', 'IA64_cmpxchg1', 'IA64_cmpxchg2', 'IA64_cmpxchg4',
    'IA64_cmpxchg8', 'IA64_cond', 'IA64_cover', 'IA64_ctop',
    'IA64_czx1', 'IA64_czx2', 'IA64_d', 'IA64_dep', 'IA64_dpnt',
    'IA64_dptk', 'IA64_e', 'IA64_epc', 'IA64_eq', 'IA64_excl',
    'IA64_exit', 'IA64_exp', 'IA64_extr', 'IA64_f', 'IA64_fabs',
    'IA64_fadd', 'IA64_famax', 'IA64_famin', 'IA64_fand',
    'IA64_fandcm', 'IA64_fault', 'IA64_fc', 'IA64_fchkf',
    'IA64_fclass', 'IA64_fclrf', 'IA64_fcmp', 'IA64_fcvt',
    'IA64_fetchadd4', 'IA64_fetchadd8', 'IA64_few', 'IA64_fill',
    'IA64_flushrs', 'IA64_fma', 'IA64_fmax', 'IA64_fmerge',
    'IA64_fmin', 'IA64_fmix', 'IA64_fmpy', 'IA64_fms', 'IA64_fneg',
    'IA64_fnegabs', 'IA64_fnma', 'IA64_fnmpy', 'IA64_fnorm',
    'IA64_for', 'IA64_fpabs', 'IA64_fpack', 'IA64_fpamax',
    'IA64_fpamin', 'IA64_fpcmp', 'IA64_fpcvt', 'IA64_fpma',
    'IA64_fpmax', 'IA64_fpmerge', 'IA64_fpmin', 'IA64_fpmpy',
    'IA64_fpms', 'IA64_fpneg', 'IA64_fpnegabs', 'IA64_fpnma',
    'IA64_fpnmpy', 'IA64_fprcpa', 'IA64_fprsqrta', 'IA64_frcpa',
    'IA64_frsqrta', 'IA64_fselect', 'IA64_fsetc', 'IA64_fsub',
    'IA64_fswap', 'IA64_fsxt', 'IA64_fwb', 'IA64_fx', 'IA64_fxor',
    'IA64_fxu', 'IA64_g', 'IA64_ga', 'IA64_ge', 'IA64_getf',
    'IA64_geu', 'IA64_gt', 'IA64_gtu', 'IA64_h', 'IA64_hu', 'IA64_i',
    'IA64_ia', 'IA64_imp', 'IA64_invala', 'IA64_itc', 'IA64_itr',
    'IA64_l', 'IA64_last', 'IA64_ld1', 'IA64_ld2', 'IA64_ld4',
    'IA64_ld8', 'IA64_ldf', 'IA64_ldf8', 'IA64_ldfd', 'IA64_ldfe',
    'IA64_ldfp8', 'IA64_ldfpd', 'IA64_ldfps', 'IA64_ldfs', 'IA64_le',
    'IA64_leu', 'IA64_lfetch', 'IA64_loadrs', 'IA64_loop', 'IA64_lr',
    'IA64_lt', 'IA64_ltu', 'IA64_lu', 'IA64_m', 'IA64_many',
    'IA64_mf', 'IA64_mix1', 'IA64_mix2', 'IA64_mix4', 'IA64_mov',
    'IA64_movl', 'IA64_mux1', 'IA64_mux2', 'IA64_nc', 'IA64_ne',
    'IA64_neq', 'IA64_nge', 'IA64_ngt', 'IA64_nl', 'IA64_nle',
    'IA64_nlt', 'IA64_nm', 'IA64_nop', 'IA64_nr', 'IA64_ns',
    'IA64_nt1', 'IA64_nt2', 'IA64_nta', 'IA64_null', 'IA64_nz',
    'IA64_or', 'IA64_orcm', 'IA64_ord', 'IA64_pack2', 'IA64_pack4',
    'IA64_padd1', 'IA64_padd2', 'IA64_padd4', 'IA64_pavg1',
    'IA64_pavg2', 'IA64_pavgsub1', 'IA64_pavgsub2', 'IA64_pcmp1',
    'IA64_pcmp2', 'IA64_pcmp4', 'IA64_pmax1', 'IA64_pmax2',
    'IA64_pmin1', 'IA64_pmin2', 'IA64_pmpy2', 'IA64_pmpyshr2',
    'IA64_popcnt', 'IA64_pr', 'IA64_probe', 'IA64_psad1',
    'IA64_pshl2', 'IA64_pshl4', 'IA64_pshladd2', 'IA64_pshr2',
    'IA64_pshr4', 'IA64_pshradd2', 'IA64_psub1', 'IA64_psub2',
    'IA64_psub4', 'IA64_ptc', 'IA64_ptr', 'IA64_r', 'IA64_raz',
    'IA64_rel', 'IA64_ret', 'IA64_rfi', 'IA64_rsm', 'IA64_rum',
    'IA64_rw', 'IA64_s', 'IA64_s0', 'IA64_s1', 'IA64_s2', 'IA64_s3',
    'IA64_sa', 'IA64_se', 'IA64_setf', 'IA64_shl', 'IA64_shladd',
    'IA64_shladdp4', 'IA64_shr', 'IA64_shrp', 'IA64_sig',
    'IA64_spill', 'IA64_spnt', 'IA64_sptk', 'IA64_srlz', 'IA64_ssm',
    'IA64_sss', 'IA64_st1', 'IA64_st2', 'IA64_st4', 'IA64_st8',
    'IA64_stf', 'IA64_stf8', 'IA64_stfd', 'IA64_stfe', 'IA64_stfs',
    'IA64_sub', 'IA64_sum', 'IA64_sxt1', 'IA64_sxt2', 'IA64_sxt4',
    'IA64_sync', 'IA64_tak', 'IA64_tbit', 'IA64_thash', 'IA64_tnat',
    'IA64_tpa', 'IA64_trunc', 'IA64_ttag', 'IA64_u', 'IA64_unc',
    'IA64_unord', 'IA64_unpack1', 'IA64_unpack2', 'IA64_unpack4',
    'IA64_uss', 'IA64_uus', 'IA64_uuu', 'IA64_w', 'IA64_wexit',
    'IA64_wtop', 'IA64_x', 'IA64_xchg1', 'IA64_xchg2', 'IA64_xchg4',
    'IA64_xchg8', 'IA64_xf', 'IA64_xma', 'IA64_xmpy', 'IA64_xor',
    'IA64_xuf', 'IA64_z', 'IA64_zxt1', 'IA64_zxt2', 'IA64_zxt4',
    'ICMENUMPROCA', 'ICMENUMPROCW', 'ICMP_ERROR_INFO', 'ICONINFO',
    'ICONINFOEX', 'ICONINFOEXA', 'ICONINFOEXW', 'ICONMETRICS',
    'ICONMETRICSA', 'ICONMETRICSW', 'IID',
    'IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY',
    'IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY', 'IMAGE_ARCHITECTURE_ENTRY',
    'IMAGE_ARCHITECTURE_HEADER', 'IMAGE_ARCHIVE_MEMBER_HEADER',
    'IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY',
    'IMAGE_ARM_RUNTIME_FUNCTION_ENTRY', 'IMAGE_AUX_SYMBOL',
    'IMAGE_AUX_SYMBOL_EX', 'IMAGE_AUX_SYMBOL_TYPE',
    'IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF', 'IMAGE_BASE_RELOCATION',
    'IMAGE_BOUND_FORWARDER_REF', 'IMAGE_BOUND_IMPORT_DESCRIPTOR',
    'IMAGE_CE_RUNTIME_FUNCTION_ENTRY', 'IMAGE_COFF_SYMBOLS_HEADER',
    'IMAGE_COR_EATJ_THUNK_SIZE', 'IMAGE_COR_MIH_BASICBLOCK',
    'IMAGE_COR_MIH_EHRVA', 'IMAGE_COR_MIH_METHODRVA',
    'IMAGE_DATA_DIRECTORY', 'IMAGE_DEBUG_DIRECTORY',
    'IMAGE_DEBUG_MISC', 'IMAGE_DELAYLOAD_DESCRIPTOR',
    'IMAGE_DOS_HEADER', 'IMAGE_DYNAMIC_RELOCATION',
    'IMAGE_DYNAMIC_RELOCATION32', 'IMAGE_DYNAMIC_RELOCATION32_V2',
    'IMAGE_DYNAMIC_RELOCATION64', 'IMAGE_DYNAMIC_RELOCATION64_V2',
    'IMAGE_DYNAMIC_RELOCATION_TABLE', 'IMAGE_DYNAMIC_RELOCATION_V2',
    'IMAGE_ENCLAVE_CONFIG', 'IMAGE_ENCLAVE_CONFIG32',
    'IMAGE_ENCLAVE_CONFIG64', 'IMAGE_ENCLAVE_IMPORT',
    'IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER',
    'IMAGE_EXPORT_DIRECTORY', 'IMAGE_FILE_HEADER',
    'IMAGE_FUNCTION_ENTRY', 'IMAGE_FUNCTION_ENTRY64',
    'IMAGE_HOT_PATCH_BASE', 'IMAGE_HOT_PATCH_HASHES',
    'IMAGE_HOT_PATCH_INFO', 'IMAGE_IA64_RUNTIME_FUNCTION_ENTRY',
    'IMAGE_IMPORT_BY_NAME',
    'IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION',
    'IMAGE_IMPORT_DESCRIPTOR',
    'IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION',
    'IMAGE_LINENUMBER', 'IMAGE_LOAD_CONFIG_CODE_INTEGRITY',
    'IMAGE_LOAD_CONFIG_DIRECTORY', 'IMAGE_LOAD_CONFIG_DIRECTORY32',
    'IMAGE_LOAD_CONFIG_DIRECTORY64', 'IMAGE_NT_HEADERS',
    'IMAGE_NT_HEADERS32', 'IMAGE_NT_HEADERS64',
    'IMAGE_OPTIONAL_HEADER', 'IMAGE_OPTIONAL_HEADER32',
    'IMAGE_OPTIONAL_HEADER64', 'IMAGE_OS2_HEADER',
    'IMAGE_POLICY_ENTRY', 'IMAGE_POLICY_ENTRY_TYPE',
    'IMAGE_POLICY_ENTRY_TYPE__enumvalues', 'IMAGE_POLICY_ID',
    'IMAGE_POLICY_ID__enumvalues', 'IMAGE_POLICY_METADATA',
    'IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER', 'IMAGE_RELOCATION',
    'IMAGE_RESOURCE_DATA_ENTRY', 'IMAGE_RESOURCE_DIRECTORY',
    'IMAGE_RESOURCE_DIRECTORY_ENTRY',
    'IMAGE_RESOURCE_DIRECTORY_STRING', 'IMAGE_RESOURCE_DIR_STRING_U',
    'IMAGE_ROM_HEADERS', 'IMAGE_ROM_OPTIONAL_HEADER',
    'IMAGE_RUNTIME_FUNCTION_ENTRY', 'IMAGE_SECTION_HEADER',
    'IMAGE_SEPARATE_DEBUG_HEADER',
    'IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION', 'IMAGE_SYMBOL',
    'IMAGE_SYMBOL_EX', 'IMAGE_THUNK_DATA', 'IMAGE_THUNK_DATA32',
    'IMAGE_THUNK_DATA64', 'IMAGE_TLS_DIRECTORY',
    'IMAGE_TLS_DIRECTORY32', 'IMAGE_TLS_DIRECTORY64',
    'IMAGE_VXD_HEADER', 'IMCENUMPROC', 'IMDT_KEYBOARD', 'IMDT_MOUSE',
    'IMDT_PEN', 'IMDT_TOUCH', 'IMDT_TOUCHPAD', 'IMDT_UNAVAILABLE',
    'IMECHARPOSITION', 'IMEMENUITEMINFO', 'IMEMENUITEMINFOA',
    'IMEMENUITEMINFOW', 'IMO_HARDWARE', 'IMO_INJECTED', 'IMO_SYSTEM',
    'IMO_UNAVAILABLE', 'IMPORT_OBJECT_CODE', 'IMPORT_OBJECT_CONST',
    'IMPORT_OBJECT_DATA', 'IMPORT_OBJECT_NAME',
    'IMPORT_OBJECT_NAME_EXPORTAS', 'IMPORT_OBJECT_NAME_NO_PREFIX',
    'IMPORT_OBJECT_NAME_TYPE', 'IMPORT_OBJECT_NAME_UNDECORATE',
    'IMPORT_OBJECT_ORDINAL', 'IMPORT_OBJECT_TYPE', 'IN6_ADDR',
    'IN6_PKTINFO', 'IN6_PKTINFO_EX', 'INFORMATION', 'INF_ABIBITS',
    'INF_ABINAME', 'INF_AF', 'INF_AF2', 'INF_APPCALL_OPTIONS',
    'INF_APPTYPE', 'INF_ARCHIVE_PATH', 'INF_ASMTYPE', 'INF_BASEADDR',
    'INF_BIN_PREFIX_SIZE', 'INF_CC', 'INF_CC_CM', 'INF_CC_DEFALIGN',
    'INF_CC_ID', 'INF_CC_SIZE_B', 'INF_CC_SIZE_E', 'INF_CC_SIZE_I',
    'INF_CC_SIZE_L', 'INF_CC_SIZE_LDBL', 'INF_CC_SIZE_LL',
    'INF_CC_SIZE_S', 'INF_CMTFLG', 'INF_CMT_INDENT', 'INF_CRC32',
    'INF_CTIME', 'INF_C_MACROS', 'INF_DATABASE_CHANGE_COUNT',
    'INF_DATATYPES', 'INF_DBG_BINPATHS', 'INF_DEMNAMES',
    'INF_DUALOP_GRAPH', 'INF_DUALOP_TEXT', 'INF_ELAPSED',
    'INF_FILETYPE', 'INF_FILE_FORMAT_NAME', 'INF_FSIZE',
    'INF_GENFLAGS', 'INF_GROUPS', 'INF_HIGHOFF', 'INF_H_PATH',
    'INF_IDA_VERSION', 'INF_IDSNODE', 'INF_IMAGEBASE', 'INF_INCLUDE',
    'INF_INDENT', 'INF_INITIAL_VERSION', 'INF_INPUT_FILE_PATH',
    'INF_LAST', 'INF_LENXREF', 'INF_LFLAGS', 'INF_LIMITER',
    'INF_LISTNAMES', 'INF_LONG_DEMNAMES', 'INF_LOWOFF', 'INF_MAIN',
    'INF_MARGIN', 'INF_MAXREF', 'INF_MAX_AUTONAME_LEN', 'INF_MAX_EA',
    'INF_MD5', 'INF_MIN_EA', 'INF_NAMETYPE', 'INF_NETDELTA',
    'INF_NOPENS', 'INF_NOTEPAD', 'INF_OMAX_EA', 'INF_OMIN_EA',
    'INF_OSTYPE', 'INF_OUTFILEENC', 'INF_OUTFLAGS', 'INF_PREFFLAG',
    'INF_PRIVRANGE', 'INF_PRIVRANGE_END_EA', 'INF_PRIVRANGE_START_EA',
    'INF_PROBLEMS', 'INF_PROCNAME', 'INF_REFCMTNUM', 'INF_SELECTORS',
    'INF_SHA256', 'INF_SHORT_DEMNAMES', 'INF_SPECSEGS',
    'INF_SRCDBG_PATHS', 'INF_SRCDBG_UNDESIRED', 'INF_START_CS',
    'INF_START_EA', 'INF_START_IP', 'INF_START_SP', 'INF_START_SS',
    'INF_STRLIT_BREAK', 'INF_STRLIT_FLAGS', 'INF_STRLIT_PREF',
    'INF_STRLIT_SERNUM', 'INF_STRLIT_ZEROES', 'INF_STRTYPE',
    'INF_STR_ENCODINGS', 'INF_TYPE_XREFNUM', 'INF_VERSION',
    'INF_XREFFLAG', 'INF_XREFNUM', 'INIT_ONCE', 'INPUT',
    'INPUT_INJECTION_VALUE', 'INPUT_MESSAGE_DEVICE_TYPE',
    'INPUT_MESSAGE_DEVICE_TYPE__enumvalues',
    'INPUT_MESSAGE_ORIGIN_ID', 'INPUT_MESSAGE_ORIGIN_ID__enumvalues',
    'INPUT_MESSAGE_SOURCE', 'INPUT_RECORD', 'INPUT_TRANSFORM', 'INT',
    'INT16', 'INT32', 'INT64', 'INT8', 'INTERFACE_INFO',
    'INTERFACE_INFO_EX', 'INT_PTR', 'IN_ADDR', 'IN_PKTINFO',
    'IN_PKTINFO_EX', 'IN_RECVERR', 'IO_COUNTERS', 'IPPROTO',
    'IPPROTO_AH', 'IPPROTO_CBT', 'IPPROTO_DSTOPTS', 'IPPROTO_EGP',
    'IPPROTO_ESP', 'IPPROTO_FRAGMENT', 'IPPROTO_GGP',
    'IPPROTO_HOPOPTS', 'IPPROTO_ICLFXBM', 'IPPROTO_ICMP',
    'IPPROTO_ICMPV6', 'IPPROTO_IDP', 'IPPROTO_IGMP', 'IPPROTO_IGP',
    'IPPROTO_IPV4', 'IPPROTO_IPV6', 'IPPROTO_L2TP', 'IPPROTO_MAX',
    'IPPROTO_ND', 'IPPROTO_NONE', 'IPPROTO_PGM', 'IPPROTO_PIM',
    'IPPROTO_PUP', 'IPPROTO_RAW', 'IPPROTO_RDP',
    'IPPROTO_RESERVED_IPSEC', 'IPPROTO_RESERVED_IPSECOFFLOAD',
    'IPPROTO_RESERVED_MAX', 'IPPROTO_RESERVED_RAW',
    'IPPROTO_RESERVED_WNV', 'IPPROTO_ROUTING', 'IPPROTO_SCTP',
    'IPPROTO_ST', 'IPPROTO_TCP', 'IPPROTO_UDP', 'IPV6_MREQ',
    'IP_MREQ', 'IP_MREQ_SOURCE', 'IP_MSFILTER', 'IP_PMTUDISC_DO',
    'IP_PMTUDISC_DONT', 'IP_PMTUDISC_MAX', 'IP_PMTUDISC_NOT_SET',
    'IP_PMTUDISC_PROBE', 'ISA_AVAILABILITY', 'IdleResiliency',
    'IgnoreError', 'ImagePolicyEntryTypeAnsiString',
    'ImagePolicyEntryTypeBool', 'ImagePolicyEntryTypeInt16',
    'ImagePolicyEntryTypeInt32', 'ImagePolicyEntryTypeInt64',
    'ImagePolicyEntryTypeInt8', 'ImagePolicyEntryTypeMaximum',
    'ImagePolicyEntryTypeNone', 'ImagePolicyEntryTypeOverride',
    'ImagePolicyEntryTypeUInt16', 'ImagePolicyEntryTypeUInt32',
    'ImagePolicyEntryTypeUInt64', 'ImagePolicyEntryTypeUInt8',
    'ImagePolicyEntryTypeUnicodeString', 'ImagePolicyIdCapability',
    'ImagePolicyIdCrashDump', 'ImagePolicyIdCrashDumpKey',
    'ImagePolicyIdCrashDumpKeyGuid', 'ImagePolicyIdDebug',
    'ImagePolicyIdDeviceId', 'ImagePolicyIdEtw',
    'ImagePolicyIdMaximum', 'ImagePolicyIdNone',
    'ImagePolicyIdParentSd', 'ImagePolicyIdParentSdRev',
    'ImagePolicyIdScenarioId', 'ImagePolicyIdSvn',
    'IoPriorityHintLow', 'IoPriorityHintNormal',
    'IoPriorityHintVeryLow', 'JIT_DEBUG_INFO', 'JIT_DEBUG_INFO32',
    'JIT_DEBUG_INFO64', 'JOBOBJECTINFOCLASS',
    'JOBOBJECTINFOCLASS__enumvalues',
    'JOBOBJECT_ASSOCIATE_COMPLETION_PORT',
    'JOBOBJECT_BASIC_ACCOUNTING_INFORMATION',
    'JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION',
    'JOBOBJECT_BASIC_LIMIT_INFORMATION',
    'JOBOBJECT_BASIC_PROCESS_ID_LIST',
    'JOBOBJECT_BASIC_UI_RESTRICTIONS',
    'JOBOBJECT_CPU_RATE_CONTROL_INFORMATION',
    'JOBOBJECT_END_OF_JOB_TIME_INFORMATION',
    'JOBOBJECT_EXTENDED_LIMIT_INFORMATION',
    'JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE',
    'JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE',
    'JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS',
    'JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS',
    'JOBOBJECT_IO_ATTRIBUTION_INFORMATION',
    'JOBOBJECT_IO_ATTRIBUTION_STATS',
    'JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1',
    'JOBOBJECT_JOBSET_INFORMATION',
    'JOBOBJECT_LIMIT_VIOLATION_INFORMATION',
    'JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION',
    'JOBOBJECT_RATE_CONTROL_TOLERANCE',
    'JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL',
    'JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL__enumvalues',
    'JOBOBJECT_RATE_CONTROL_TOLERANCE__enumvalues',
    'JOBOBJECT_SECURITY_LIMIT_INFORMATION',
    'JOB_OBJECT_IO_RATE_CONTROL_ENABLE',
    'JOB_OBJECT_IO_RATE_CONTROL_FLAGS',
    'JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL',
    'JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP',
    'JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME',
    'JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS',
    'JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG',
    'JOB_OBJECT_NET_RATE_CONTROL_ENABLE',
    'JOB_OBJECT_NET_RATE_CONTROL_FLAGS',
    'JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH',
    'JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS', 'JOB_SET_ARRAY',
    'JT_ARR', 'JT_BOOL', 'JT_CALL', 'JT_NONE', 'JT_NUM', 'JT_OBJ',
    'JT_STR', 'JT_SWITCH', 'JT_UNKNOWN',
    'JobObjectAssociateCompletionPortInformation',
    'JobObjectBasicAccountingInformation',
    'JobObjectBasicAndIoAccountingInformation',
    'JobObjectBasicLimitInformation', 'JobObjectBasicProcessIdList',
    'JobObjectBasicUIRestrictions', 'JobObjectCompletionCounter',
    'JobObjectCompletionFilter', 'JobObjectCpuRateControlInformation',
    'JobObjectCreateSilo', 'JobObjectEndOfJobTimeInformation',
    'JobObjectExtendedLimitInformation', 'JobObjectGroupInformation',
    'JobObjectGroupInformationEx', 'JobObjectJobSetInformation',
    'JobObjectLimitViolationInformation',
    'JobObjectLimitViolationInformation2',
    'JobObjectNetRateControlInformation',
    'JobObjectNotificationLimitInformation',
    'JobObjectNotificationLimitInformation2',
    'JobObjectReserved10Information',
    'JobObjectReserved11Information',
    'JobObjectReserved12Information',
    'JobObjectReserved13Information',
    'JobObjectReserved14Information',
    'JobObjectReserved15Information',
    'JobObjectReserved16Information',
    'JobObjectReserved17Information',
    'JobObjectReserved18Information',
    'JobObjectReserved19Information', 'JobObjectReserved1Information',
    'JobObjectReserved20Information',
    'JobObjectReserved21Information',
    'JobObjectReserved22Information',
    'JobObjectReserved23Information',
    'JobObjectReserved24Information',
    'JobObjectReserved25Information', 'JobObjectReserved2Information',
    'JobObjectReserved3Information', 'JobObjectReserved4Information',
    'JobObjectReserved5Information', 'JobObjectReserved6Information',
    'JobObjectReserved7Information', 'JobObjectReserved8Information',
    'JobObjectReserved9Information',
    'JobObjectSecurityLimitInformation',
    'JobObjectSiloBasicInformation', 'KAFFINITY', 'KBDLLHOOKSTRUCT',
    'KCRM_MARSHAL_HEADER', 'KCRM_PROTOCOL_BLOB',
    'KCRM_TRANSACTION_BLOB', 'KERNINGPAIR', 'KEYBDINPUT',
    'KEY_EVENT_RECORD', 'KNONVOLATILE_CONTEXT_POINTERS',
    'KNONVOLATILE_CONTEXT_POINTERS_ARM64', 'KR1878_adc', 'KR1878_add',
    'KR1878_addl', 'KR1878_and', 'KR1878_bic', 'KR1878_bis',
    'KR1878_btg', 'KR1878_btt', 'KR1878_cmp', 'KR1878_cmpl',
    'KR1878_cst', 'KR1878_ijmp', 'KR1878_ijsr', 'KR1878_jc',
    'KR1878_jmp', 'KR1878_jnc', 'KR1878_jns', 'KR1878_jnz',
    'KR1878_js', 'KR1878_jsr', 'KR1878_jz', 'KR1878_last',
    'KR1878_ldr', 'KR1878_mfpr', 'KR1878_mov', 'KR1878_movl',
    'KR1878_mtpr', 'KR1878_neg', 'KR1878_nop', 'KR1878_not',
    'KR1878_null', 'KR1878_or', 'KR1878_pop', 'KR1878_push',
    'KR1878_reset', 'KR1878_rlc', 'KR1878_rrc', 'KR1878_rti',
    'KR1878_rts', 'KR1878_rtsc', 'KR1878_sbc', 'KR1878_shl',
    'KR1878_shr', 'KR1878_shra', 'KR1878_sksp', 'KR1878_sst',
    'KR1878_stop', 'KR1878_sub', 'KR1878_subl', 'KR1878_swap',
    'KR1878_tdc', 'KR1878_tof', 'KR1878_wait', 'KR1878_xor',
    'KSPIN_LOCK', 'KTMOBJECT_CURSOR', 'KTMOBJECT_ENLISTMENT',
    'KTMOBJECT_INVALID', 'KTMOBJECT_RESOURCE_MANAGER',
    'KTMOBJECT_TRANSACTION', 'KTMOBJECT_TRANSACTION_MANAGER',
    'KTMOBJECT_TYPE', 'KTMOBJECT_TYPE__enumvalues',
    'LANGGROUPLOCALE_ENUMPROCA', 'LANGGROUPLOCALE_ENUMPROCW',
    'LANGID', 'LANGUAGEGROUP_ENUMPROCA', 'LANGUAGEGROUP_ENUMPROCW',
    'LARGE_INTEGER', 'LASTINPUTINFO', 'LATENCY_TIME',
    'LAYERPLANEDESCRIPTOR', 'LCID', 'LCSCSTYPE', 'LCSGAMUTMATCH',
    'LCTYPE', 'LDT_ENTRY', 'LECVT_CANCELED', 'LECVT_ERROR',
    'LECVT_OK', 'LGRPID', 'LIB_LOADED', 'LIB_UNLOADED', 'LINEDDAPROC',
    'LINGER', 'LINPUT_GENERIC', 'LINPUT_LOCAL', 'LINPUT_NONE',
    'LINPUT_PROCMEM', 'LINPUT_RFILE', 'LIST_ENTRY',
    'LOAD_DLL_DEBUG_INFO', 'LOCALESIGNATURE', 'LOCALE_ENUMPROCA',
    'LOCALE_ENUMPROCEX', 'LOCALE_ENUMPROCW', 'LOCALHANDLE',
    'LOC_CLOSE', 'LOC_KEEP', 'LOC_UNMAKE', 'LOGBRUSH', 'LOGBRUSH32',
    'LOGCOLORSPACE', 'LOGCOLORSPACEA', 'LOGCOLORSPACEW', 'LOGFONT',
    'LOGFONTA', 'LOGFONTW', 'LOGICAL_PROCESSOR_RELATIONSHIP',
    'LOGICAL_PROCESSOR_RELATIONSHIP__enumvalues', 'LOGPALETTE',
    'LOGPEN', 'LONG', 'LONG32', 'LONG64', 'LONGLONG', 'LONG_PTR',
    'LPABC', 'LPABCFLOAT', 'LPACCEL', 'LPACCESSTIMEOUT', 'LPADDRINFO',
    'LPADDRINFOEX2A', 'LPADDRINFOEX2W', 'LPADDRINFOEX3',
    'LPADDRINFOEX4', 'LPADDRINFOEXA', 'LPADDRINFOEXW',
    'LPAFPROTOCOLS', 'LPALTTABINFO', 'LPANIMATIONINFO', 'LPARAM',
    'LPAUDIODESCRIPTION', 'LPAXESLIST', 'LPAXESLISTA', 'LPAXESLISTW',
    'LPAXISINFO', 'LPAXISINFOA', 'LPAXISINFOW', 'LPBITMAP',
    'LPBITMAPCOREHEADER', 'LPBITMAPCOREINFO', 'LPBITMAPFILEHEADER',
    'LPBITMAPINFO', 'LPBITMAPINFOHEADER', 'LPBITMAPV4HEADER',
    'LPBITMAPV5HEADER', 'LPBLOB', 'LPBOOL', 'LPBYTE',
    'LPBY_HANDLE_FILE_INFORMATION', 'LPCANDIDATEFORM',
    'LPCANDIDATELIST', 'LPCBTACTIVATESTRUCT', 'LPCBT_CREATEWND',
    'LPCBT_CREATEWNDA', 'LPCBT_CREATEWNDW', 'LPCCH', 'LPCDLGTEMPLATE',
    'LPCDLGTEMPLATEA', 'LPCDLGTEMPLATEW', 'LPCGUID', 'LPCH',
    'LPCHARSETINFO', 'LPCIEXYZ', 'LPCIEXYZTRIPLE',
    'LPCLIENTCREATESTRUCT', 'LPCLSID', 'LPCMENUINFO',
    'LPCMENUITEMINFO', 'LPCMENUITEMINFOA', 'LPCMENUITEMINFOW',
    'LPCOLORADJUSTMENT', 'LPCOLORREF', 'LPCOMBOBOXINFO',
    'LPCOMMCONFIG', 'LPCOMMPROP', 'LPCOMMTIMEOUTS',
    'LPCOMPAREITEMSTRUCT', 'LPCOMPOSITIONFORM', 'LPCOMSTAT',
    'LPCONDITIONPROC', 'LPCONNECTDLGSTRUCT', 'LPCONNECTDLGSTRUCTA',
    'LPCONNECTDLGSTRUCTW', 'LPCONTEXT', 'LPCPINFO', 'LPCPINFOEX',
    'LPCPINFOEXA', 'LPCPINFOEXW', 'LPCREATEFILE2_EXTENDED_PARAMETERS',
    'LPCREATESTRUCT', 'LPCREATESTRUCTA', 'LPCREATESTRUCTW',
    'LPCREATE_PROCESS_DEBUG_INFO', 'LPCREATE_THREAD_DEBUG_INFO',
    'LPCRECT', 'LPCRECTL', 'LPCRITICAL_SECTION',
    'LPCRITICAL_SECTION_DEBUG', 'LPCSADDR_INFO', 'LPCSCROLLINFO',
    'LPCSTR', 'LPCTCH', 'LPCTSTR', 'LPCURRENCYFMT', 'LPCURRENCYFMTA',
    'LPCURRENCYFMTW', 'LPCURSORINFO', 'LPCURSORSHAPE', 'LPCUTSTR',
    'LPCUWCHAR', 'LPCUWSTR', 'LPCVOID', 'LPCWCH', 'LPCWCHAR',
    'LPCWPRETSTRUCT', 'LPCWPSTRUCT', 'LPCWSTR', 'LPDCB',
    'LPDEBUGHOOKINFO', 'LPDEBUG_EVENT', 'LPDELETEITEMSTRUCT',
    'LPDESIGNVECTOR', 'LPDEVMODE', 'LPDEVMODEA', 'LPDEVMODEW',
    'LPDIBSECTION', 'LPDISCDLGSTRUCT', 'LPDISCDLGSTRUCTA',
    'LPDISCDLGSTRUCTW', 'LPDISPLAY_DEVICE', 'LPDISPLAY_DEVICEA',
    'LPDISPLAY_DEVICEW', 'LPDLGITEMTEMPLATE', 'LPDLGITEMTEMPLATEA',
    'LPDLGITEMTEMPLATEW', 'LPDLGTEMPLATE', 'LPDLGTEMPLATEA',
    'LPDLGTEMPLATEW', 'LPDOCINFO', 'LPDOCINFOA', 'LPDOCINFOW',
    'LPDRAWITEMSTRUCT', 'LPDRAWTEXTPARAMS', 'LPDROPSTRUCT', 'LPDWORD',
    'LPENCLAVE_ROUTINE', 'LPENCLAVE_TARGET_FUNCTION',
    'LPENHMETAHEADER', 'LPENHMETARECORD', 'LPENUMLOGFONT',
    'LPENUMLOGFONTA', 'LPENUMLOGFONTEX', 'LPENUMLOGFONTEXA',
    'LPENUMLOGFONTEXDV', 'LPENUMLOGFONTEXDVA', 'LPENUMLOGFONTEXDVW',
    'LPENUMLOGFONTEXW', 'LPENUMLOGFONTW', 'LPENUMTEXTMETRIC',
    'LPENUMTEXTMETRICA', 'LPENUMTEXTMETRICW', 'LPENUM_SERVICE_STATUS',
    'LPENUM_SERVICE_STATUSA', 'LPENUM_SERVICE_STATUSW',
    'LPENUM_SERVICE_STATUS_PROCESS', 'LPENUM_SERVICE_STATUS_PROCESSA',
    'LPENUM_SERVICE_STATUS_PROCESSW', 'LPEVENTLOG_FULL_INFORMATION',
    'LPEVENTMSG', 'LPEVENTMSGMSG', 'LPEXCEPTION_DEBUG_INFO',
    'LPEXCEPTION_POINTERS', 'LPEXCEPTION_RECORD',
    'LPEXIT_PROCESS_DEBUG_INFO', 'LPEXIT_THREAD_DEBUG_INFO',
    'LPEXTLOGFONT', 'LPEXTLOGFONTA', 'LPEXTLOGFONTW', 'LPEXTLOGPEN',
    'LPEXTLOGPEN32', 'LPFD_SET', 'LPFIBER_START_ROUTINE',
    'LPFILETIME', 'LPFILE_ID_DESCRIPTOR', 'LPFILTERKEYS',
    'LPFLOWSPEC', 'LPFMTID', 'LPFNDEVCAPS', 'LPFNDEVMODE',
    'LPFONTSIGNATURE', 'LPFXPT16DOT16', 'LPFXPT2DOT30',
    'LPGCP_RESULTS', 'LPGCP_RESULTSA', 'LPGCP_RESULTSW',
    'LPGLYPHMETRICS', 'LPGLYPHMETRICSFLOAT', 'LPGLYPHSET',
    'LPGRADIENT_RECT', 'LPGRADIENT_TRIANGLE', 'LPGUID',
    'LPGUITHREADINFO', 'LPHANDLE', 'LPHANDLER_FUNCTION',
    'LPHANDLER_FUNCTION_EX', 'LPHANDLETABLE', 'LPHARDWAREHOOKSTRUCT',
    'LPHARDWAREINPUT', 'LPHEAP_SUMMARY', 'LPHELPINFO',
    'LPHELPWININFO', 'LPHELPWININFOA', 'LPHELPWININFOW',
    'LPHIGHCONTRAST', 'LPHIGHCONTRASTA', 'LPHIGHCONTRASTW', 'LPHKL',
    'LPHOSTENT', 'LPHW_PROFILE_INFO', 'LPHW_PROFILE_INFOA',
    'LPHW_PROFILE_INFOW', 'LPICONMETRICS', 'LPICONMETRICSA',
    'LPICONMETRICSW', 'LPIID', 'LPIMECHARPOSITION',
    'LPIMEMENUITEMINFO', 'LPIMEMENUITEMINFOA', 'LPIMEMENUITEMINFOW',
    'LPIN6_ADDR', 'LPINIT_ONCE', 'LPINPUT', 'LPINT',
    'LPINTERFACE_INFO', 'LPINTERFACE_INFO_EX', 'LPIN_ADDR',
    'LPJIT_DEBUG_INFO', 'LPJIT_DEBUG_INFO32', 'LPJIT_DEBUG_INFO64',
    'LPKBDLLHOOKSTRUCT', 'LPKERNINGPAIR', 'LPKEYBDINPUT',
    'LPLAYERPLANEDESCRIPTOR', 'LPLDT_ENTRY', 'LPLINGER',
    'LPLOAD_DLL_DEBUG_INFO', 'LPLOCALESIGNATURE', 'LPLOGBRUSH',
    'LPLOGBRUSH32', 'LPLOGCOLORSPACE', 'LPLOGCOLORSPACEA',
    'LPLOGCOLORSPACEW', 'LPLOGFONT', 'LPLOGFONTA', 'LPLOGFONTW',
    'LPLOGPALETTE', 'LPLOGPEN', 'LPLONG',
    'LPLOOKUPSERVICE_COMPLETION_ROUTINE', 'LPMAT2',
    'LPMDICREATESTRUCT', 'LPMDICREATESTRUCTA', 'LPMDICREATESTRUCTW',
    'LPMDINEXTMENU', 'LPMEASUREITEMSTRUCT', 'LPMEMORYSTATUS',
    'LPMEMORYSTATUSEX', 'LPMENUBARINFO', 'LPMENUINFO',
    'LPMENUITEMINFO', 'LPMENUITEMINFOA', 'LPMENUITEMINFOW',
    'LPMENUTEMPLATE', 'LPMENUTEMPLATEA', 'LPMENUTEMPLATEW',
    'LPMETAFILEPICT', 'LPMETAHEADER', 'LPMETARECORD',
    'LPMINIMIZEDMETRICS', 'LPMINMAXINFO', 'LPMODEMDEVCAPS',
    'LPMODEMSETTINGS', 'LPMONITORINFO', 'LPMONITORINFOEX',
    'LPMONITORINFOEXA', 'LPMONITORINFOEXW', 'LPMOUSEHOOKSTRUCT',
    'LPMOUSEHOOKSTRUCTEX', 'LPMOUSEINPUT', 'LPMOUSEKEYS',
    'LPMOUSEMOVEPOINT', 'LPMSG', 'LPMSGBOXPARAMS', 'LPMSGBOXPARAMSA',
    'LPMSGBOXPARAMSW', 'LPMSLLHOOKSTRUCT', 'LPMULTIKEYHELP',
    'LPMULTIKEYHELPA', 'LPMULTIKEYHELPW', 'LPNCCALCSIZE_PARAMS',
    'LPNETCONNECTINFOSTRUCT', 'LPNETINFOSTRUCT', 'LPNETRESOURCE',
    'LPNETRESOURCEA', 'LPNETRESOURCEW', 'LPNEWTEXTMETRIC',
    'LPNEWTEXTMETRICA', 'LPNEWTEXTMETRICW', 'LPNLSVERSIONINFO',
    'LPNLSVERSIONINFOEX', 'LPNMHDR', 'LPNONCLIENTMETRICS',
    'LPNONCLIENTMETRICSA', 'LPNONCLIENTMETRICSW', 'LPNUMBERFMT',
    'LPNUMBERFMTA', 'LPNUMBERFMTW', 'LPOFSTRUCT', 'LPOSVERSIONINFO',
    'LPOSVERSIONINFOA', 'LPOSVERSIONINFOEX', 'LPOSVERSIONINFOEXA',
    'LPOSVERSIONINFOEXW', 'LPOSVERSIONINFOW', 'LPOUTLINETEXTMETRIC',
    'LPOUTLINETEXTMETRICA', 'LPOUTLINETEXTMETRICW',
    'LPOUTPUT_DEBUG_STRING_INFO', 'LPOVERLAPPED',
    'LPOVERLAPPED_COMPLETION_ROUTINE', 'LPOVERLAPPED_ENTRY',
    'LPPAINTSTRUCT', 'LPPALETTEENTRY', 'LPPANOSE', 'LPPATTERN',
    'LPPELARRAY', 'LPPIXELFORMATDESCRIPTOR', 'LPPOINT', 'LPPOINTFX',
    'LPPOINTS', 'LPPOLYTEXT', 'LPPOLYTEXTA', 'LPPOLYTEXTW',
    'LPPOWER_REQUEST_CONTEXT', 'LPPROCESS_HEAP_ENTRY',
    'LPPROCESS_INFORMATION', 'LPPROC_THREAD_ATTRIBUTE_LIST',
    'LPPROGRESS_ROUTINE', 'LPPROTOENT', 'LPQOS', 'LPQOS_OBJECT_HDR',
    'LPQOS_SD_MODE', 'LPQOS_SHAPING_RATE', 'LPQUERY_SERVICE_CONFIG',
    'LPQUERY_SERVICE_CONFIGA', 'LPQUERY_SERVICE_CONFIGW',
    'LPQUERY_SERVICE_LOCK_STATUS', 'LPQUERY_SERVICE_LOCK_STATUSA',
    'LPQUERY_SERVICE_LOCK_STATUSW', 'LPRASTERIZER_STATUS', 'LPRAWHID',
    'LPRAWINPUT', 'LPRAWINPUTDEVICE', 'LPRAWINPUTHEADER',
    'LPRAWKEYBOARD', 'LPRAWMOUSE', 'LPRECONVERTSTRING', 'LPRECT',
    'LPRECTL', 'LPREGISTERWORD', 'LPREGISTERWORDA', 'LPREGISTERWORDW',
    'LPREMOTE_NAME_INFO', 'LPREMOTE_NAME_INFOA',
    'LPREMOTE_NAME_INFOW', 'LPRGBQUAD', 'LPRGBTRIPLE', 'LPRGNDATA',
    'LPRID_DEVICE_INFO', 'LPRIP_INFO', 'LPSCROLLBARINFO',
    'LPSCROLLINFO', 'LPSC_ACTION', 'LPSC_HANDLE',
    'LPSECURITY_ATTRIBUTES', 'LPSECURITY_CAPABILITIES',
    'LPSERIALKEYS', 'LPSERIALKEYSA', 'LPSERIALKEYSW', 'LPSERVENT',
    'LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM',
    'LPSERVICE_DELAYED_AUTO_START_INFO', 'LPSERVICE_DESCRIPTION',
    'LPSERVICE_DESCRIPTIONA', 'LPSERVICE_DESCRIPTIONW',
    'LPSERVICE_FAILURE_ACTIONS', 'LPSERVICE_FAILURE_ACTIONSA',
    'LPSERVICE_FAILURE_ACTIONSW', 'LPSERVICE_FAILURE_ACTIONS_FLAG',
    'LPSERVICE_MAIN_FUNCTIONA', 'LPSERVICE_MAIN_FUNCTIONW',
    'LPSERVICE_PREFERRED_NODE_INFO', 'LPSERVICE_PRESHUTDOWN_INFO',
    'LPSERVICE_REQUIRED_PRIVILEGES_INFO',
    'LPSERVICE_REQUIRED_PRIVILEGES_INFOA',
    'LPSERVICE_REQUIRED_PRIVILEGES_INFOW', 'LPSERVICE_SID_INFO',
    'LPSERVICE_STATUS', 'LPSERVICE_STATUS_PROCESS',
    'LPSERVICE_TABLE_ENTRY', 'LPSERVICE_TABLE_ENTRYA',
    'LPSERVICE_TABLE_ENTRYW', 'LPSHELLHOOKINFO', 'LPSIZE', 'LPSIZEL',
    'LPSOCKADDR', 'LPSOCKADDR_IN', 'LPSOCKADDR_IN6',
    'LPSOCKADDR_IN6_LH', 'LPSOCKADDR_IN6_W2KSP1',
    'LPSOCKADDR_STORAGE', 'LPSOCKADDR_STORAGE_LH',
    'LPSOCKADDR_STORAGE_XP', 'LPSOCKET_ADDRESS',
    'LPSOCKET_ADDRESS_LIST', 'LPSOUNDSENTRY', 'LPSOUNDSENTRYA',
    'LPSOUNDSENTRYW', 'LPSTARTUPINFO', 'LPSTARTUPINFOA',
    'LPSTARTUPINFOEX', 'LPSTARTUPINFOEXA', 'LPSTARTUPINFOEXW',
    'LPSTARTUPINFOW', 'LPSTICKYKEYS', 'LPSTR', 'LPSTYLEBUF',
    'LPSTYLEBUFA', 'LPSTYLEBUFW', 'LPSTYLESTRUCT',
    'LPSYNCHRONIZATION_BARRIER', 'LPSYSTEMTIME', 'LPSYSTEM_INFO',
    'LPSYSTEM_POWER_STATUS', 'LPTCH', 'LPTEXTMETRIC', 'LPTEXTMETRICA',
    'LPTEXTMETRICW', 'LPTHREAD_START_ROUTINE', 'LPTIMEVAL',
    'LPTIME_ZONE_INFORMATION', 'LPTITLEBARINFO', 'LPTITLEBARINFOEX',
    'LPTOGGLEKEYS', 'LPTOP_LEVEL_EXCEPTION_FILTER', 'LPTPMPARAMS',
    'LPTRACKMOUSEEVENT', 'LPTRIVERTEX', 'LPTSTR', 'LPTTPOLYCURVE',
    'LPTTPOLYGONHEADER', 'LPUINT', 'LPUNIVERSAL_NAME_INFO',
    'LPUNIVERSAL_NAME_INFOA', 'LPUNIVERSAL_NAME_INFOW',
    'LPUNLOAD_DLL_DEBUG_INFO', 'LPUTSTR', 'LPUWSTR',
    'LPVIDEOPARAMETERS', 'LPVOID', 'LPWCH', 'LPWCRANGE', 'LPWGLSWAP',
    'LPWIN32_FILE_ATTRIBUTE_DATA', 'LPWIN32_FIND_DATA',
    'LPWIN32_FIND_DATAA', 'LPWIN32_FIND_DATAW', 'LPWIN32_STREAM_ID',
    'LPWINDOWINFO', 'LPWINDOWPLACEMENT', 'LPWINDOWPOS', 'LPWNDCLASS',
    'LPWNDCLASSA', 'LPWNDCLASSEX', 'LPWNDCLASSEXA', 'LPWNDCLASSEXW',
    'LPWNDCLASSW', 'LPWORD', 'LPWSABUF', 'LPWSACMSGHDR',
    'LPWSACOMPLETION', 'LPWSACOMPLETIONTYPE', 'LPWSADATA',
    'LPWSAECOMPARATOR', 'LPWSAESETSERVICEOP', 'LPWSAMSG',
    'LPWSANAMESPACE_INFO', 'LPWSANAMESPACE_INFOA',
    'LPWSANAMESPACE_INFOEX', 'LPWSANAMESPACE_INFOEXA',
    'LPWSANAMESPACE_INFOEXW', 'LPWSANAMESPACE_INFOW',
    'LPWSANETWORKEVENTS', 'LPWSANSCLASSINFO', 'LPWSANSCLASSINFOA',
    'LPWSANSCLASSINFOW', 'LPWSAOVERLAPPED',
    'LPWSAOVERLAPPED_COMPLETION_ROUTINE', 'LPWSAPOLLFD',
    'LPWSAPROTOCOLCHAIN', 'LPWSAPROTOCOL_INFO', 'LPWSAPROTOCOL_INFOA',
    'LPWSAPROTOCOL_INFOW', 'LPWSAQUERYSET', 'LPWSAQUERYSET2',
    'LPWSAQUERYSET2A', 'LPWSAQUERYSET2W', 'LPWSAQUERYSETA',
    'LPWSAQUERYSETW', 'LPWSASERVICECLASSINFO',
    'LPWSASERVICECLASSINFOA', 'LPWSASERVICECLASSINFOW',
    'LPWSAVERSION', 'LPWSTR', 'LPXFORM', 'LRESULT', 'LSTATUS',
    'LT_DONT_CARE', 'LT_LOWEST_LATENCY', 'LUID',
    'LUID_AND_ATTRIBUTES', 'LUID_AND_ATTRIBUTES_ARRAY',
    'LastResumePerformance', 'LastSleepTime', 'LastWakeTime',
    'LogicalProcessorIdling', 'LowMemoryResourceNotification',
    'M128A', 'M16C_abs', 'M16C_adc', 'M16C_adcf', 'M16C_add',
    'M16C_addf', 'M16C_addx', 'M16C_adjnz', 'M16C_adsf', 'M16C_and',
    'M16C_band', 'M16C_bclr', 'M16C_bitindex', 'M16C_bmcnd',
    'M16C_bmeq', 'M16C_bmge', 'M16C_bmgeu', 'M16C_bmgt', 'M16C_bmgtu',
    'M16C_bmle', 'M16C_bmleu', 'M16C_bmlt', 'M16C_bmltu', 'M16C_bmn',
    'M16C_bmne', 'M16C_bmno', 'M16C_bmo', 'M16C_bmpz', 'M16C_bnand',
    'M16C_bnor', 'M16C_bnot', 'M16C_bntst', 'M16C_bnxor', 'M16C_bor',
    'M16C_brk', 'M16C_brk2', 'M16C_bset', 'M16C_btst', 'M16C_btstc',
    'M16C_btsts', 'M16C_bxor', 'M16C_clip', 'M16C_cmp', 'M16C_cmpf',
    'M16C_cmpx', 'M16C_cnvif', 'M16C_dadc', 'M16C_dadd', 'M16C_dec',
    'M16C_div', 'M16C_divf', 'M16C_divu', 'M16C_divx', 'M16C_dsbb',
    'M16C_dsub', 'M16C_ediv', 'M16C_edivu', 'M16C_edivx', 'M16C_emul',
    'M16C_emulu', 'M16C_enter', 'M16C_exitd', 'M16C_exiti',
    'M16C_exts', 'M16C_extz', 'M16C_fclr', 'M16C_freit', 'M16C_fset',
    'M16C_inc', 'M16C_index1', 'M16C_index2', 'M16C_indexb',
    'M16C_indexbd', 'M16C_indexbs', 'M16C_indexl', 'M16C_indexld',
    'M16C_indexls', 'M16C_indexw', 'M16C_indexwd', 'M16C_indexws',
    'M16C_int', 'M16C_into', 'M16C_jcnd', 'M16C_jeq', 'M16C_jge',
    'M16C_jgeu', 'M16C_jgt', 'M16C_jgtu', 'M16C_jle', 'M16C_jleu',
    'M16C_jlt', 'M16C_jltu', 'M16C_jmp', 'M16C_jmpi', 'M16C_jmps',
    'M16C_jn', 'M16C_jne', 'M16C_jno', 'M16C_jo', 'M16C_jpz',
    'M16C_jsr', 'M16C_jsri', 'M16C_jsrs', 'M16C_last', 'M16C_ldc',
    'M16C_ldctx', 'M16C_lde', 'M16C_ldintb', 'M16C_ldipl', 'M16C_max',
    'M16C_min', 'M16C_mov', 'M16C_mova', 'M16C_movhh', 'M16C_movhl',
    'M16C_movlh', 'M16C_movll', 'M16C_movx', 'M16C_mul', 'M16C_mulex',
    'M16C_mulf', 'M16C_mulu', 'M16C_mulx', 'M16C_neg', 'M16C_nop',
    'M16C_not', 'M16C_null', 'M16C_or', 'M16C_pop', 'M16C_popc',
    'M16C_popm', 'M16C_push', 'M16C_pusha', 'M16C_pushc',
    'M16C_pushm', 'M16C_reit', 'M16C_rmpa', 'M16C_rolc', 'M16C_rorc',
    'M16C_rot', 'M16C_round', 'M16C_rts', 'M16C_sbb', 'M16C_sbjnz',
    'M16C_sccnd', 'M16C_sceq', 'M16C_scge', 'M16C_scgeu', 'M16C_scgt',
    'M16C_scgtu', 'M16C_scle', 'M16C_scleu', 'M16C_sclt',
    'M16C_scltu', 'M16C_scmpu', 'M16C_scn', 'M16C_scne', 'M16C_scno',
    'M16C_sco', 'M16C_scpz', 'M16C_sha', 'M16C_shanc', 'M16C_shl',
    'M16C_shlnc', 'M16C_sin', 'M16C_smovb', 'M16C_smovf',
    'M16C_smovu', 'M16C_sout', 'M16C_sstr', 'M16C_stc', 'M16C_stctx',
    'M16C_ste', 'M16C_stnz', 'M16C_stop', 'M16C_stz', 'M16C_stzx',
    'M16C_sub', 'M16C_subf', 'M16C_subx', 'M16C_suntil',
    'M16C_swhile', 'M16C_tst', 'M16C_und', 'M16C_wait', 'M16C_xchg',
    'M16C_xor', 'M65816_adc', 'M65816_and', 'M65816_asl',
    'M65816_bcc', 'M65816_bcs', 'M65816_beq', 'M65816_bit',
    'M65816_bmi', 'M65816_bne', 'M65816_bpl', 'M65816_bra',
    'M65816_brk', 'M65816_brl', 'M65816_bvc', 'M65816_bvs',
    'M65816_clc', 'M65816_cld', 'M65816_cli', 'M65816_clv',
    'M65816_cmp', 'M65816_cop', 'M65816_cpx', 'M65816_cpy',
    'M65816_dec', 'M65816_dex', 'M65816_dey', 'M65816_eor',
    'M65816_inc', 'M65816_inx', 'M65816_iny', 'M65816_jml',
    'M65816_jmp', 'M65816_jsl', 'M65816_jsr', 'M65816_last',
    'M65816_lda', 'M65816_ldx', 'M65816_ldy', 'M65816_lsr',
    'M65816_mvn', 'M65816_mvp', 'M65816_nop', 'M65816_null',
    'M65816_ora', 'M65816_pea', 'M65816_pei', 'M65816_per',
    'M65816_pha', 'M65816_phb', 'M65816_phd', 'M65816_phk',
    'M65816_php', 'M65816_phx', 'M65816_phy', 'M65816_pla',
    'M65816_plb', 'M65816_pld', 'M65816_plp', 'M65816_plx',
    'M65816_ply', 'M65816_rep', 'M65816_rol', 'M65816_ror',
    'M65816_rti', 'M65816_rtl', 'M65816_rts', 'M65816_sbc',
    'M65816_sec', 'M65816_sed', 'M65816_sei', 'M65816_sep',
    'M65816_sta', 'M65816_stp', 'M65816_stx', 'M65816_sty',
    'M65816_stz', 'M65816_tax', 'M65816_tay', 'M65816_tcd',
    'M65816_tcs', 'M65816_tdc', 'M65816_trb', 'M65816_tsb',
    'M65816_tsc', 'M65816_tsx', 'M65816_txa', 'M65816_txs',
    'M65816_txy', 'M65816_tya', 'M65816_tyx', 'M65816_wai',
    'M65816_wdm', 'M65816_xba', 'M65816_xce', 'M65_adc', 'M65_anc',
    'M65_and', 'M65_ane', 'M65_arr', 'M65_asl', 'M65_asr', 'M65_bbr0',
    'M65_bbr1', 'M65_bbr2', 'M65_bbr3', 'M65_bbr4', 'M65_bbr5',
    'M65_bbr6', 'M65_bbr7', 'M65_bbs0', 'M65_bbs1', 'M65_bbs2',
    'M65_bbs3', 'M65_bbs4', 'M65_bbs5', 'M65_bbs6', 'M65_bbs7',
    'M65_bcc', 'M65_bcs', 'M65_beq', 'M65_bit', 'M65_bmi', 'M65_bne',
    'M65_bpl', 'M65_bra', 'M65_brk', 'M65_bvc', 'M65_bvs', 'M65_clc',
    'M65_cld', 'M65_cli', 'M65_clv', 'M65_cmp', 'M65_cpx', 'M65_cpy',
    'M65_dcp', 'M65_dec', 'M65_dex', 'M65_dey', 'M65_eor', 'M65_inc',
    'M65_inx', 'M65_iny', 'M65_isb', 'M65_jmp', 'M65_jmpi', 'M65_jsr',
    'M65_lae', 'M65_last', 'M65_lax', 'M65_lda', 'M65_ldx', 'M65_ldy',
    'M65_lsr', 'M65_lxa', 'M65_nop', 'M65_null', 'M65_ora', 'M65_pha',
    'M65_php', 'M65_phx', 'M65_phy', 'M65_pla', 'M65_plp', 'M65_plx',
    'M65_ply', 'M65_rla', 'M65_rmb0', 'M65_rmb1', 'M65_rmb2',
    'M65_rmb3', 'M65_rmb4', 'M65_rmb5', 'M65_rmb6', 'M65_rmb7',
    'M65_rol', 'M65_ror', 'M65_rra', 'M65_rti', 'M65_rts', 'M65_sax',
    'M65_sbc', 'M65_sbx', 'M65_sec', 'M65_sed', 'M65_sei', 'M65_sha',
    'M65_shs', 'M65_shx', 'M65_shy', 'M65_slo', 'M65_smb0',
    'M65_smb1', 'M65_smb2', 'M65_smb3', 'M65_smb4', 'M65_smb5',
    'M65_smb6', 'M65_smb7', 'M65_sre', 'M65_sta', 'M65_stp',
    'M65_stx', 'M65_sty', 'M65_stz', 'M65_tax', 'M65_tay', 'M65_trb',
    'M65_tsb', 'M65_tsx', 'M65_txa', 'M65_txs', 'M65_tya', 'M65_wai',
    'MANDATORY_LEVEL', 'MANDATORY_LEVEL__enumvalues', 'MAT2',
    'MAXVERSIONTESTED_INFO', 'MAX_CLASS_NAME', 'MAX_PACKAGE_NAME',
    'MC12XGATE_adc', 'MC12XGATE_add', 'MC12XGATE_add16',
    'MC12XGATE_addh', 'MC12XGATE_addl', 'MC12XGATE_and',
    'MC12XGATE_and16', 'MC12XGATE_andh', 'MC12XGATE_andl',
    'MC12XGATE_asr', 'MC12XGATE_bcc', 'MC12XGATE_bcs',
    'MC12XGATE_beq', 'MC12XGATE_bfext', 'MC12XGATE_bffo',
    'MC12XGATE_bfins', 'MC12XGATE_bfinsi', 'MC12XGATE_bfinsx',
    'MC12XGATE_bge', 'MC12XGATE_bgt', 'MC12XGATE_bhi',
    'MC12XGATE_bhs', 'MC12XGATE_bith', 'MC12XGATE_bitl',
    'MC12XGATE_ble', 'MC12XGATE_blo', 'MC12XGATE_bls',
    'MC12XGATE_blt', 'MC12XGATE_bmi', 'MC12XGATE_bne',
    'MC12XGATE_bpl', 'MC12XGATE_bra', 'MC12XGATE_brk',
    'MC12XGATE_bvc', 'MC12XGATE_bvs', 'MC12XGATE_cmp',
    'MC12XGATE_cmp16', 'MC12XGATE_cmpl', 'MC12XGATE_com',
    'MC12XGATE_cpc', 'MC12XGATE_cpch', 'MC12XGATE_csem',
    'MC12XGATE_csl', 'MC12XGATE_csr', 'MC12XGATE_jal',
    'MC12XGATE_ldb', 'MC12XGATE_ldh', 'MC12XGATE_ldl',
    'MC12XGATE_ldw', 'MC12XGATE_ldw16', 'MC12XGATE_lsl',
    'MC12XGATE_lsr', 'MC12XGATE_mov', 'MC12XGATE_neg',
    'MC12XGATE_nop', 'MC12XGATE_or', 'MC12XGATE_or16',
    'MC12XGATE_orh', 'MC12XGATE_orl', 'MC12XGATE_par',
    'MC12XGATE_rol', 'MC12XGATE_ror', 'MC12XGATE_rts',
    'MC12XGATE_sbc', 'MC12XGATE_sex', 'MC12XGATE_sif',
    'MC12XGATE_ssem', 'MC12XGATE_stb', 'MC12XGATE_stw',
    'MC12XGATE_sub', 'MC12XGATE_sub16', 'MC12XGATE_subh',
    'MC12XGATE_subl', 'MC12XGATE_tfr', 'MC12XGATE_tst',
    'MC12XGATE_xnor', 'MC12XGATE_xnor16', 'MC12XGATE_xnorh',
    'MC12XGATE_xnorl', 'MC12X_addx', 'MC12X_addy', 'MC12X_aded',
    'MC12X_adex', 'MC12X_adey', 'MC12X_andx', 'MC12X_andy',
    'MC12X_aslw', 'MC12X_aslx', 'MC12X_asly', 'MC12X_asrw',
    'MC12X_asrx', 'MC12X_asry', 'MC12X_bitx', 'MC12X_bity',
    'MC12X_btas', 'MC12X_clrw', 'MC12X_clrx', 'MC12X_clry',
    'MC12X_comw', 'MC12X_comx', 'MC12X_comy', 'MC12X_cped',
    'MC12X_cpes', 'MC12X_cpex', 'MC12X_cpey', 'MC12X_decw',
    'MC12X_decx', 'MC12X_decy', 'MC12X_eorx', 'MC12X_eory',
    'MC12X_gldaa', 'MC12X_gldab', 'MC12X_gldd', 'MC12X_glds',
    'MC12X_gldx', 'MC12X_gldy', 'MC12X_gstaa', 'MC12X_gstab',
    'MC12X_gstd', 'MC12X_gsts', 'MC12X_gstx', 'MC12X_gsty',
    'MC12X_incw', 'MC12X_incx', 'MC12X_incy', 'MC12X_lsrw',
    'MC12X_lsrx', 'MC12X_lsry', 'MC12X_negw', 'MC12X_negx',
    'MC12X_negy', 'MC12X_orx', 'MC12X_ory', 'MC12X_pshcw',
    'MC12X_pulcw', 'MC12X_rolw', 'MC12X_rolx', 'MC12X_roly',
    'MC12X_rorw', 'MC12X_rorx', 'MC12X_rory', 'MC12X_sbed',
    'MC12X_sbex', 'MC12X_sbey', 'MC12X_subx', 'MC12X_suby',
    'MC12X_sys', 'MC12X_tstw', 'MC12X_tstx', 'MC12X_tsty', 'MC12_aba',
    'MC12_abx', 'MC12_aby', 'MC12_adca', 'MC12_adcb', 'MC12_adda',
    'MC12_addb', 'MC12_addd', 'MC12_anda', 'MC12_andb', 'MC12_andcc',
    'MC12_asl', 'MC12_asla', 'MC12_aslb', 'MC12_asld', 'MC12_asr',
    'MC12_asra', 'MC12_asrb', 'MC12_bcc', 'MC12_bclr', 'MC12_bcs',
    'MC12_beq', 'MC12_bge', 'MC12_bgnd', 'MC12_bgt', 'MC12_bhi',
    'MC12_bhs', 'MC12_bita', 'MC12_bitb', 'MC12_ble', 'MC12_blo',
    'MC12_bls', 'MC12_blt', 'MC12_bmi', 'MC12_bne', 'MC12_bpl',
    'MC12_bra', 'MC12_brclr', 'MC12_brn', 'MC12_brset', 'MC12_bset',
    'MC12_bsr', 'MC12_bvc', 'MC12_bvs', 'MC12_call', 'MC12_cba',
    'MC12_clc', 'MC12_cli', 'MC12_clr', 'MC12_clra', 'MC12_clrb',
    'MC12_clv', 'MC12_cmpa', 'MC12_cmpb', 'MC12_com', 'MC12_coma',
    'MC12_comb', 'MC12_cpd', 'MC12_cps', 'MC12_cpx', 'MC12_cpy',
    'MC12_daa', 'MC12_dbeq', 'MC12_dbne', 'MC12_dec', 'MC12_deca',
    'MC12_decb', 'MC12_des', 'MC12_dex', 'MC12_dey', 'MC12_ediv',
    'MC12_edivs', 'MC12_emacs', 'MC12_emaxd', 'MC12_emaxm',
    'MC12_emind', 'MC12_eminm', 'MC12_emul', 'MC12_emuls',
    'MC12_eora', 'MC12_eorb', 'MC12_etbl', 'MC12_exg', 'MC12_fdiv',
    'MC12_ibeq', 'MC12_ibne', 'MC12_idiv', 'MC12_idivs', 'MC12_inc',
    'MC12_inca', 'MC12_incb', 'MC12_ins', 'MC12_inx', 'MC12_iny',
    'MC12_jmp', 'MC12_jsr', 'MC12_last', 'MC12_lbcc', 'MC12_lbcs',
    'MC12_lbeq', 'MC12_lbge', 'MC12_lbgt', 'MC12_lbhi', 'MC12_lbhs',
    'MC12_lble', 'MC12_lblo', 'MC12_lbls', 'MC12_lblt', 'MC12_lbmi',
    'MC12_lbne', 'MC12_lbpl', 'MC12_lbra', 'MC12_lbrn', 'MC12_lbvc',
    'MC12_lbvs', 'MC12_ldaa', 'MC12_ldab', 'MC12_ldd', 'MC12_lds',
    'MC12_ldx', 'MC12_ldy', 'MC12_leas', 'MC12_leax', 'MC12_leay',
    'MC12_lsl', 'MC12_lsla', 'MC12_lslb', 'MC12_lsld', 'MC12_lsr',
    'MC12_lsra', 'MC12_lsrb', 'MC12_lsrd', 'MC12_maxa', 'MC12_maxm',
    'MC12_mem', 'MC12_mina', 'MC12_minm', 'MC12_movb', 'MC12_movw',
    'MC12_mul', 'MC12_neg', 'MC12_nega', 'MC12_negb', 'MC12_nop',
    'MC12_null', 'MC12_oraa', 'MC12_orab', 'MC12_orcc', 'MC12_psha',
    'MC12_pshb', 'MC12_pshc', 'MC12_pshd', 'MC12_pshx', 'MC12_pshy',
    'MC12_pula', 'MC12_pulb', 'MC12_pulc', 'MC12_puld', 'MC12_pulx',
    'MC12_puly', 'MC12_rev', 'MC12_revw', 'MC12_rol', 'MC12_rola',
    'MC12_rolb', 'MC12_ror', 'MC12_rora', 'MC12_rorb', 'MC12_rtc',
    'MC12_rti', 'MC12_rts', 'MC12_sba', 'MC12_sbca', 'MC12_sbcb',
    'MC12_sec', 'MC12_sei', 'MC12_sev', 'MC12_sex', 'MC12_skip1',
    'MC12_skip2', 'MC12_staa', 'MC12_stab', 'MC12_std', 'MC12_stop',
    'MC12_sts', 'MC12_stx', 'MC12_sty', 'MC12_suba', 'MC12_subb',
    'MC12_subd', 'MC12_swi', 'MC12_tab', 'MC12_tap', 'MC12_tba',
    'MC12_tbeq', 'MC12_tbl', 'MC12_tbne', 'MC12_tfr', 'MC12_tpa',
    'MC12_trap', 'MC12_tst', 'MC12_tsta', 'MC12_tstb', 'MC12_tsx',
    'MC12_tsy', 'MC12_txs', 'MC12_tys', 'MC12_wai', 'MC12_wav',
    'MC12_wavr', 'MC12_xgdx', 'MC12_xgdy', 'MC6816_aba', 'MC6816_abx',
    'MC6816_aby', 'MC6816_abz', 'MC6816_ace', 'MC6816_aced',
    'MC6816_adca', 'MC6816_adcb', 'MC6816_adcd', 'MC6816_adce',
    'MC6816_adda', 'MC6816_addb', 'MC6816_addd', 'MC6816_adde',
    'MC6816_ade', 'MC6816_adx', 'MC6816_ady', 'MC6816_adz',
    'MC6816_aex', 'MC6816_aey', 'MC6816_aez', 'MC6816_ais',
    'MC6816_aix', 'MC6816_aiy', 'MC6816_aiz', 'MC6816_anda',
    'MC6816_andb', 'MC6816_andd', 'MC6816_ande', 'MC6816_andp',
    'MC6816_asl', 'MC6816_asla', 'MC6816_aslb', 'MC6816_asld',
    'MC6816_asle', 'MC6816_aslm', 'MC6816_aslw', 'MC6816_asr',
    'MC6816_asra', 'MC6816_asrb', 'MC6816_asrd', 'MC6816_asre',
    'MC6816_asrm', 'MC6816_asrw', 'MC6816_bcc', 'MC6816_bclr',
    'MC6816_bclrw', 'MC6816_bcs', 'MC6816_beq', 'MC6816_bge',
    'MC6816_bgnd', 'MC6816_bgt', 'MC6816_bhi', 'MC6816_bita',
    'MC6816_bitb', 'MC6816_ble', 'MC6816_bls', 'MC6816_blt',
    'MC6816_bmi', 'MC6816_bne', 'MC6816_bpl', 'MC6816_bra',
    'MC6816_brclr', 'MC6816_brn', 'MC6816_brset', 'MC6816_bset',
    'MC6816_bsetw', 'MC6816_bsr', 'MC6816_bvc', 'MC6816_bvs',
    'MC6816_cba', 'MC6816_clr', 'MC6816_clra', 'MC6816_clrb',
    'MC6816_clrd', 'MC6816_clre', 'MC6816_clrm', 'MC6816_clrw',
    'MC6816_cmpa', 'MC6816_cmpb', 'MC6816_com', 'MC6816_coma',
    'MC6816_comb', 'MC6816_comd', 'MC6816_come', 'MC6816_comw',
    'MC6816_cpd', 'MC6816_cpe', 'MC6816_cps', 'MC6816_cpx',
    'MC6816_cpy', 'MC6816_cpz', 'MC6816_daa', 'MC6816_dec',
    'MC6816_deca', 'MC6816_decb', 'MC6816_decw', 'MC6816_ediv',
    'MC6816_edivs', 'MC6816_emul', 'MC6816_emuls', 'MC6816_eora',
    'MC6816_eorb', 'MC6816_eord', 'MC6816_eore', 'MC6816_fdiv',
    'MC6816_fmuls', 'MC6816_idiv', 'MC6816_inc', 'MC6816_inca',
    'MC6816_incb', 'MC6816_incw', 'MC6816_jmp', 'MC6816_jsr',
    'MC6816_last', 'MC6816_lbcc', 'MC6816_lbcs', 'MC6816_lbeq',
    'MC6816_lbev', 'MC6816_lbge', 'MC6816_lbgt', 'MC6816_lbhi',
    'MC6816_lble', 'MC6816_lbls', 'MC6816_lblt', 'MC6816_lbmi',
    'MC6816_lbmv', 'MC6816_lbne', 'MC6816_lbpl', 'MC6816_lbra',
    'MC6816_lbrn', 'MC6816_lbsr', 'MC6816_lbvc', 'MC6816_lbvs',
    'MC6816_ldaa', 'MC6816_ldab', 'MC6816_ldd', 'MC6816_lde',
    'MC6816_lded', 'MC6816_ldhi', 'MC6816_lds', 'MC6816_ldx',
    'MC6816_ldy', 'MC6816_ldz', 'MC6816_lpstop', 'MC6816_lsr',
    'MC6816_lsra', 'MC6816_lsrb', 'MC6816_lsrd', 'MC6816_lsre',
    'MC6816_lsrw', 'MC6816_mac', 'MC6816_movb', 'MC6816_movw',
    'MC6816_mul', 'MC6816_neg', 'MC6816_nega', 'MC6816_negb',
    'MC6816_negd', 'MC6816_nege', 'MC6816_negw', 'MC6816_nop',
    'MC6816_null', 'MC6816_oraa', 'MC6816_orab', 'MC6816_ord',
    'MC6816_ore', 'MC6816_orp', 'MC6816_psha', 'MC6816_pshb',
    'MC6816_pshm', 'MC6816_pshmac', 'MC6816_pula', 'MC6816_pulb',
    'MC6816_pulm', 'MC6816_pulmac', 'MC6816_rmac', 'MC6816_rol',
    'MC6816_rola', 'MC6816_rolb', 'MC6816_rold', 'MC6816_role',
    'MC6816_rolw', 'MC6816_ror', 'MC6816_rora', 'MC6816_rorb',
    'MC6816_rord', 'MC6816_rore', 'MC6816_rorw', 'MC6816_rti',
    'MC6816_rts', 'MC6816_sba', 'MC6816_sbca', 'MC6816_sbcb',
    'MC6816_sbcd', 'MC6816_sbce', 'MC6816_sde', 'MC6816_staa',
    'MC6816_stab', 'MC6816_std', 'MC6816_ste', 'MC6816_sted',
    'MC6816_sts', 'MC6816_stx', 'MC6816_sty', 'MC6816_stz',
    'MC6816_suba', 'MC6816_subb', 'MC6816_subd', 'MC6816_sube',
    'MC6816_swi', 'MC6816_sxt', 'MC6816_tab', 'MC6816_tap',
    'MC6816_tba', 'MC6816_tbek', 'MC6816_tbsk', 'MC6816_tbxk',
    'MC6816_tbyk', 'MC6816_tbzk', 'MC6816_tde', 'MC6816_tdmsk',
    'MC6816_tdp', 'MC6816_ted', 'MC6816_tedm', 'MC6816_tekb',
    'MC6816_tem', 'MC6816_tmer', 'MC6816_tmet', 'MC6816_tmxed',
    'MC6816_tpa', 'MC6816_tpd', 'MC6816_tskb', 'MC6816_tst',
    'MC6816_tsta', 'MC6816_tstb', 'MC6816_tstd', 'MC6816_tste',
    'MC6816_tstw', 'MC6816_tsx', 'MC6816_tsy', 'MC6816_tsz',
    'MC6816_txkb', 'MC6816_txs', 'MC6816_txy', 'MC6816_txz',
    'MC6816_tykb', 'MC6816_tys', 'MC6816_tyx', 'MC6816_tyz',
    'MC6816_tzkb', 'MC6816_tzs', 'MC6816_tzx', 'MC6816_tzy',
    'MC6816_wai', 'MC6816_xgab', 'MC6816_xgde', 'MC6816_xgdx',
    'MC6816_xgdy', 'MC6816_xgdz', 'MC6816_xgex', 'MC6816_xgey',
    'MC6816_xgez', 'MCAST_EXCLUDE', 'MCAST_INCLUDE',
    'MDICREATESTRUCT', 'MDICREATESTRUCTA', 'MDICREATESTRUCTW',
    'MDINEXTMENU', 'MEASUREITEMSTRUCT', 'MEMORYSTATUS',
    'MEMORYSTATUSEX', 'MEMORY_BASIC_INFORMATION',
    'MEMORY_BASIC_INFORMATION32', 'MEMORY_BASIC_INFORMATION64',
    'MEMORY_PRIORITY_INFORMATION',
    'MEMORY_RESOURCE_NOTIFICATION_TYPE',
    'MEMORY_RESOURCE_NOTIFICATION_TYPE__enumvalues',
    'MEM_ADDRESS_REQUIREMENTS', 'MEM_EXTENDED_PARAMETER_TYPE',
    'MEM_SECTION_EXTENDED_PARAMETER_TYPE', 'MENUBARINFO',
    'MENUGETOBJECTINFO', 'MENUINFO', 'MENUITEMINFO', 'MENUITEMINFOA',
    'MENUITEMINFOW', 'MENUTEMPLATE', 'MENUTEMPLATEA', 'MENUTEMPLATEW',
    'MENU_EVENT_RECORD', 'MESSAGE_RESOURCE_BLOCK',
    'MESSAGE_RESOURCE_DATA', 'MESSAGE_RESOURCE_ENTRY', 'METAFILEPICT',
    'METAHEADER', 'METARECORD', 'MFENUMPROC', 'MINIMIZEDMETRICS',
    'MINMAXINFO', 'MIPS_R5900_first', 'MIPS_R5900_last',
    'MIPS_absq_s_ph', 'MIPS_absq_s_pw', 'MIPS_absq_s_qb',
    'MIPS_absq_s_qh', 'MIPS_absq_s_w', 'MIPS_ac0iu', 'MIPS_add',
    'MIPS_addi', 'MIPS_addiu', 'MIPS_addmiu', 'MIPS_addq_ph',
    'MIPS_addq_pw', 'MIPS_addq_qh', 'MIPS_addq_s_ph',
    'MIPS_addq_s_pw', 'MIPS_addq_s_qh', 'MIPS_addq_s_w',
    'MIPS_addqh_ph', 'MIPS_addqh_r_ph', 'MIPS_addqh_r_w',
    'MIPS_addqh_w', 'MIPS_addsc', 'MIPS_addu', 'MIPS_addu_ob',
    'MIPS_addu_ph', 'MIPS_addu_qb', 'MIPS_addu_s_ob',
    'MIPS_addu_s_ph', 'MIPS_addu_s_qb', 'MIPS_adduh_qb',
    'MIPS_adduh_r_qb', 'MIPS_addwc', 'MIPS_alnv_ps', 'MIPS_and',
    'MIPS_andi', 'MIPS_append', 'MIPS_b', 'MIPS_baddu', 'MIPS_bal',
    'MIPS_balign', 'MIPS_bbit0', 'MIPS_bbit032', 'MIPS_bbit1',
    'MIPS_bbit132', 'MIPS_bc0f', 'MIPS_bc0fl', 'MIPS_bc0t',
    'MIPS_bc0tl', 'MIPS_bc1any2f', 'MIPS_bc1any2t', 'MIPS_bc1any4f',
    'MIPS_bc1any4t', 'MIPS_bc1f', 'MIPS_bc1fl', 'MIPS_bc1t',
    'MIPS_bc1tl', 'MIPS_bc2f', 'MIPS_bc2fl', 'MIPS_bc2t',
    'MIPS_bc2tl', 'MIPS_bc3f', 'MIPS_bc3fl', 'MIPS_bc3t',
    'MIPS_bc3tl', 'MIPS_bclr', 'MIPS_beq', 'MIPS_beql', 'MIPS_beqz',
    'MIPS_beqzc', 'MIPS_beqzl', 'MIPS_bext', 'MIPS_bfins',
    'MIPS_bgez', 'MIPS_bgezal', 'MIPS_bgezall', 'MIPS_bgezals',
    'MIPS_bgezl', 'MIPS_bgtz', 'MIPS_bgtzl', 'MIPS_bins',
    'MIPS_bitrev', 'MIPS_blez', 'MIPS_blezl', 'MIPS_bltz',
    'MIPS_bltzal', 'MIPS_bltzall', 'MIPS_bltzals', 'MIPS_bltzl',
    'MIPS_bne', 'MIPS_bnel', 'MIPS_bnez', 'MIPS_bnezc', 'MIPS_bnezl',
    'MIPS_bposge32', 'MIPS_bposge64', 'MIPS_break', 'MIPS_bs1f',
    'MIPS_bset', 'MIPS_bteqz', 'MIPS_btnez', 'MIPS_btst',
    'MIPS_cache', 'MIPS_cachee', 'MIPS_cfc0', 'MIPS_cfc1',
    'MIPS_cfc2', 'MIPS_cftc1', 'MIPS_cftc2', 'MIPS_cins',
    'MIPS_cins32', 'MIPS_clo', 'MIPS_clz', 'MIPS_cmp',
    'MIPS_cmp_eq_ph', 'MIPS_cmp_eq_pw', 'MIPS_cmp_eq_qh',
    'MIPS_cmp_le_ph', 'MIPS_cmp_le_pw', 'MIPS_cmp_le_qh',
    'MIPS_cmp_lt_ph', 'MIPS_cmp_lt_pw', 'MIPS_cmp_lt_qh',
    'MIPS_cmpgdu_eq_qb', 'MIPS_cmpgdu_le_qb', 'MIPS_cmpgdu_lt_qb',
    'MIPS_cmpgu_eq_ob', 'MIPS_cmpgu_eq_qb', 'MIPS_cmpgu_le_ob',
    'MIPS_cmpgu_le_qb', 'MIPS_cmpgu_lt_ob', 'MIPS_cmpgu_lt_qb',
    'MIPS_cmpi', 'MIPS_cmpu_eq_ob', 'MIPS_cmpu_eq_qb',
    'MIPS_cmpu_le_ob', 'MIPS_cmpu_le_qb', 'MIPS_cmpu_lt_ob',
    'MIPS_cmpu_lt_qb', 'MIPS_cop0', 'MIPS_cop1', 'MIPS_cop2',
    'MIPS_copyw', 'MIPS_ctc0', 'MIPS_ctc1', 'MIPS_ctc2', 'MIPS_cttc1',
    'MIPS_cttc2', 'MIPS_dadd', 'MIPS_daddi', 'MIPS_daddiu',
    'MIPS_daddu', 'MIPS_dbreak', 'MIPS_dclo', 'MIPS_dclz',
    'MIPS_ddiv', 'MIPS_ddivu', 'MIPS_deret', 'MIPS_dext',
    'MIPS_dextm', 'MIPS_dextp', 'MIPS_dextpdp', 'MIPS_dextpdpv',
    'MIPS_dextpv', 'MIPS_dextr_l', 'MIPS_dextr_r_l', 'MIPS_dextr_r_w',
    'MIPS_dextr_rs_l', 'MIPS_dextr_rs_w', 'MIPS_dextr_s_h',
    'MIPS_dextr_w', 'MIPS_dextrv_l', 'MIPS_dextrv_r_l',
    'MIPS_dextrv_r_w', 'MIPS_dextrv_rs_l', 'MIPS_dextrv_rs_w',
    'MIPS_dextrv_s_h', 'MIPS_dextrv_w', 'MIPS_dextu', 'MIPS_di',
    'MIPS_dins', 'MIPS_dinsm', 'MIPS_dinsu', 'MIPS_dinsv', 'MIPS_div',
    'MIPS_div1', 'MIPS_dive', 'MIPS_diveu', 'MIPS_divu', 'MIPS_divu1',
    'MIPS_dla', 'MIPS_dli', 'MIPS_dlsa', 'MIPS_dmadd', 'MIPS_dmaddu',
    'MIPS_dmfc0', 'MIPS_dmfc1', 'MIPS_dmfc2', 'MIPS_dmsub',
    'MIPS_dmsubu', 'MIPS_dmt', 'MIPS_dmtc0', 'MIPS_dmtc1',
    'MIPS_dmtc2', 'MIPS_dmthlip', 'MIPS_dmul', 'MIPS_dmult',
    'MIPS_dmultu', 'MIPS_dneg', 'MIPS_dnegu', 'MIPS_dpa_w_ph',
    'MIPS_dpaq_s_w_ph', 'MIPS_dpaq_s_w_qh', 'MIPS_dpaq_sa_l_pw',
    'MIPS_dpaq_sa_l_w', 'MIPS_dpaqx_s_w_ph', 'MIPS_dpaqx_sa_w_ph',
    'MIPS_dpau_h_obl', 'MIPS_dpau_h_obr', 'MIPS_dpau_h_qbl',
    'MIPS_dpau_h_qbr', 'MIPS_dpax_w_ph', 'MIPS_dpop', 'MIPS_dps_w_ph',
    'MIPS_dpsq_s_w_ph', 'MIPS_dpsq_s_w_qh', 'MIPS_dpsq_sa_l_pw',
    'MIPS_dpsq_sa_l_w', 'MIPS_dpsqx_s_w_ph', 'MIPS_dpsqx_sa_w_ph',
    'MIPS_dpsu_h_obl', 'MIPS_dpsu_h_obr', 'MIPS_dpsu_h_qbl',
    'MIPS_dpsu_h_qbr', 'MIPS_dpsx_w_ph', 'MIPS_dret', 'MIPS_drotr',
    'MIPS_drotr32', 'MIPS_drotrv', 'MIPS_dsbh', 'MIPS_dshd',
    'MIPS_dshilo', 'MIPS_dshilov', 'MIPS_dsll', 'MIPS_dsll32',
    'MIPS_dsllv', 'MIPS_dsra', 'MIPS_dsra32', 'MIPS_dsrav',
    'MIPS_dsrl', 'MIPS_dsrl32', 'MIPS_dsrlv', 'MIPS_dsub',
    'MIPS_dsubu', 'MIPS_dvpe', 'MIPS_ehb', 'MIPS_ei', 'MIPS_emt',
    'MIPS_eret', 'MIPS_evpe', 'MIPS_ext', 'MIPS_extend', 'MIPS_extp',
    'MIPS_extpdp', 'MIPS_extpdpv', 'MIPS_extpv', 'MIPS_extr_r_w',
    'MIPS_extr_rs_w', 'MIPS_extr_s_h', 'MIPS_extr_w',
    'MIPS_extrv_r_w', 'MIPS_extrv_rs_w', 'MIPS_extrv_s_h',
    'MIPS_extrv_w', 'MIPS_exts', 'MIPS_exts32', 'MIPS_fabs',
    'MIPS_fadd', 'MIPS_fadda', 'MIPS_faddr', 'MIPS_fc_eq',
    'MIPS_fc_f', 'MIPS_fc_le', 'MIPS_fc_lt', 'MIPS_fc_nge',
    'MIPS_fc_ngl', 'MIPS_fc_ngle', 'MIPS_fc_ngt', 'MIPS_fc_ole',
    'MIPS_fc_olt', 'MIPS_fc_seq', 'MIPS_fc_sf', 'MIPS_fc_ueq',
    'MIPS_fc_ule', 'MIPS_fc_ult', 'MIPS_fc_un', 'MIPS_fcabs_eq',
    'MIPS_fcabs_f', 'MIPS_fcabs_le', 'MIPS_fcabs_lt',
    'MIPS_fcabs_nge', 'MIPS_fcabs_ngl', 'MIPS_fcabs_ngle',
    'MIPS_fcabs_ngt', 'MIPS_fcabs_ole', 'MIPS_fcabs_olt',
    'MIPS_fcabs_seq', 'MIPS_fcabs_sf', 'MIPS_fcabs_ueq',
    'MIPS_fcabs_ule', 'MIPS_fcabs_ult', 'MIPS_fcabs_un',
    'MIPS_fceil_l', 'MIPS_fceil_w', 'MIPS_fcvt_d', 'MIPS_fcvt_l',
    'MIPS_fcvt_ps', 'MIPS_fcvt_ps_pw', 'MIPS_fcvt_pw_ps',
    'MIPS_fcvt_s', 'MIPS_fcvt_s_pl', 'MIPS_fcvt_s_pu', 'MIPS_fcvt_w',
    'MIPS_fdiv', 'MIPS_ffloor_l', 'MIPS_ffloor_w', 'MIPS_fmadd',
    'MIPS_fmadda', 'MIPS_fmax', 'MIPS_fmin', 'MIPS_fmov',
    'MIPS_fmovf', 'MIPS_fmovn', 'MIPS_fmovt', 'MIPS_fmovz',
    'MIPS_fmsub', 'MIPS_fmsuba', 'MIPS_fmul', 'MIPS_fmula',
    'MIPS_fmulr', 'MIPS_fneg', 'MIPS_fork', 'MIPS_frecip',
    'MIPS_frecip1', 'MIPS_frecip2', 'MIPS_fround_l', 'MIPS_fround_w',
    'MIPS_frsqrt', 'MIPS_frsqrt1', 'MIPS_frsqrt2', 'MIPS_fsqrt',
    'MIPS_fsub', 'MIPS_fsuba', 'MIPS_ftrunc_l', 'MIPS_ftrunc_w',
    'MIPS_ins', 'MIPS_insv', 'MIPS_j', 'MIPS_jal', 'MIPS_jalr',
    'MIPS_jalr_hb', 'MIPS_jalrc', 'MIPS_jalrs', 'MIPS_jalrs_hb',
    'MIPS_jals', 'MIPS_jalx', 'MIPS_jr', 'MIPS_jr_hb',
    'MIPS_jraddiusp', 'MIPS_jrc', 'MIPS_la', 'MIPS_laa', 'MIPS_laad',
    'MIPS_lac', 'MIPS_lacd', 'MIPS_lad', 'MIPS_ladd', 'MIPS_lai',
    'MIPS_laid', 'MIPS_las', 'MIPS_lasd', 'MIPS_last', 'MIPS_law',
    'MIPS_lawd', 'MIPS_lb', 'MIPS_lbe', 'MIPS_lbu', 'MIPS_lbue',
    'MIPS_lbux', 'MIPS_lbv', 'MIPS_lbx', 'MIPS_ld', 'MIPS_ldc1',
    'MIPS_ldc2', 'MIPS_ldl', 'MIPS_ldm', 'MIPS_ldp', 'MIPS_ldr',
    'MIPS_ldv', 'MIPS_ldx', 'MIPS_ldxc1', 'MIPS_lfv', 'MIPS_lh',
    'MIPS_lhe', 'MIPS_lhu', 'MIPS_lhue', 'MIPS_lhux', 'MIPS_lhv',
    'MIPS_lhx', 'MIPS_li', 'MIPS_li_d', 'MIPS_li_s', 'MIPS_ll',
    'MIPS_lld', 'MIPS_lle', 'MIPS_llv', 'MIPS_lpv', 'MIPS_lq',
    'MIPS_lqc2', 'MIPS_lqv', 'MIPS_lrv', 'MIPS_lsa', 'MIPS_lsv',
    'MIPS_ltv', 'MIPS_lui', 'MIPS_luv', 'MIPS_luxc1', 'MIPS_lw',
    'MIPS_lwc1', 'MIPS_lwc2', 'MIPS_lwe', 'MIPS_lwl', 'MIPS_lwle',
    'MIPS_lwm', 'MIPS_lwp', 'MIPS_lwr', 'MIPS_lwre', 'MIPS_lwu',
    'MIPS_lwux', 'MIPS_lwv', 'MIPS_lwx', 'MIPS_lwxc1', 'MIPS_lwxs',
    'MIPS_madd', 'MIPS_madd1', 'MIPS_madd3', 'MIPS_madd_d',
    'MIPS_madd_ps', 'MIPS_madd_r5900', 'MIPS_madd_s', 'MIPS_maddp',
    'MIPS_maddu', 'MIPS_maddu1', 'MIPS_maddu3', 'MIPS_maddu_r5900',
    'MIPS_maq_s_l_pwl', 'MIPS_maq_s_l_pwr', 'MIPS_maq_s_w_phl',
    'MIPS_maq_s_w_phr', 'MIPS_maq_s_w_qhll', 'MIPS_maq_s_w_qhlr',
    'MIPS_maq_s_w_qhrl', 'MIPS_maq_s_w_qhrr', 'MIPS_maq_sa_w_phl',
    'MIPS_maq_sa_w_phr', 'MIPS_maq_sa_w_qhll', 'MIPS_maq_sa_w_qhlr',
    'MIPS_maq_sa_w_qhrl', 'MIPS_maq_sa_w_qhrr', 'MIPS_max',
    'MIPS_mfc0', 'MIPS_mfc1', 'MIPS_mfc2', 'MIPS_mfdr', 'MIPS_mfhc1',
    'MIPS_mfhc2', 'MIPS_mfhi', 'MIPS_mfhi1', 'MIPS_mflhxu',
    'MIPS_mflo', 'MIPS_mflo1', 'MIPS_mfsa', 'MIPS_mftacx',
    'MIPS_mftc0', 'MIPS_mftc1', 'MIPS_mftc2', 'MIPS_mftdsp',
    'MIPS_mftgpr', 'MIPS_mfthc1', 'MIPS_mfthc2', 'MIPS_mfthi',
    'MIPS_mftlo', 'MIPS_mftr', 'MIPS_min', 'MIPS_modsub', 'MIPS_mov',
    'MIPS_move', 'MIPS_movep', 'MIPS_movf', 'MIPS_movn', 'MIPS_movt',
    'MIPS_movtn', 'MIPS_movtz', 'MIPS_movz', 'MIPS_msa_add_a_b',
    'MIPS_msa_add_a_d', 'MIPS_msa_add_a_h', 'MIPS_msa_add_a_w',
    'MIPS_msa_adds_a_b', 'MIPS_msa_adds_a_d', 'MIPS_msa_adds_a_h',
    'MIPS_msa_adds_a_w', 'MIPS_msa_adds_s_b', 'MIPS_msa_adds_s_d',
    'MIPS_msa_adds_s_h', 'MIPS_msa_adds_s_w', 'MIPS_msa_adds_u_b',
    'MIPS_msa_adds_u_d', 'MIPS_msa_adds_u_h', 'MIPS_msa_adds_u_w',
    'MIPS_msa_addv_b', 'MIPS_msa_addv_d', 'MIPS_msa_addv_h',
    'MIPS_msa_addv_w', 'MIPS_msa_addvi_b', 'MIPS_msa_addvi_d',
    'MIPS_msa_addvi_h', 'MIPS_msa_addvi_w', 'MIPS_msa_and_v',
    'MIPS_msa_andi_b', 'MIPS_msa_asub_s_b', 'MIPS_msa_asub_s_d',
    'MIPS_msa_asub_s_h', 'MIPS_msa_asub_s_w', 'MIPS_msa_asub_u_b',
    'MIPS_msa_asub_u_d', 'MIPS_msa_asub_u_h', 'MIPS_msa_asub_u_w',
    'MIPS_msa_ave_s_b', 'MIPS_msa_ave_s_d', 'MIPS_msa_ave_s_h',
    'MIPS_msa_ave_s_w', 'MIPS_msa_ave_u_b', 'MIPS_msa_ave_u_d',
    'MIPS_msa_ave_u_h', 'MIPS_msa_ave_u_w', 'MIPS_msa_aver_s_b',
    'MIPS_msa_aver_s_d', 'MIPS_msa_aver_s_h', 'MIPS_msa_aver_s_w',
    'MIPS_msa_aver_u_b', 'MIPS_msa_aver_u_d', 'MIPS_msa_aver_u_h',
    'MIPS_msa_aver_u_w', 'MIPS_msa_bclr_b', 'MIPS_msa_bclr_d',
    'MIPS_msa_bclr_h', 'MIPS_msa_bclr_w', 'MIPS_msa_bclri_b',
    'MIPS_msa_bclri_d', 'MIPS_msa_bclri_h', 'MIPS_msa_bclri_w',
    'MIPS_msa_binsl_b', 'MIPS_msa_binsl_d', 'MIPS_msa_binsl_h',
    'MIPS_msa_binsl_w', 'MIPS_msa_binsli_b', 'MIPS_msa_binsli_d',
    'MIPS_msa_binsli_h', 'MIPS_msa_binsli_w', 'MIPS_msa_binsr_b',
    'MIPS_msa_binsr_d', 'MIPS_msa_binsr_h', 'MIPS_msa_binsr_w',
    'MIPS_msa_binsri_b', 'MIPS_msa_binsri_d', 'MIPS_msa_binsri_h',
    'MIPS_msa_binsri_w', 'MIPS_msa_bmnz_v', 'MIPS_msa_bmnzi_b',
    'MIPS_msa_bmz_v', 'MIPS_msa_bmzi_b', 'MIPS_msa_bneg_b',
    'MIPS_msa_bneg_d', 'MIPS_msa_bneg_h', 'MIPS_msa_bneg_w',
    'MIPS_msa_bnegi_b', 'MIPS_msa_bnegi_d', 'MIPS_msa_bnegi_h',
    'MIPS_msa_bnegi_w', 'MIPS_msa_bnz_b', 'MIPS_msa_bnz_d',
    'MIPS_msa_bnz_h', 'MIPS_msa_bnz_v', 'MIPS_msa_bnz_w',
    'MIPS_msa_bsel_v', 'MIPS_msa_bseli_b', 'MIPS_msa_bset_b',
    'MIPS_msa_bset_d', 'MIPS_msa_bset_h', 'MIPS_msa_bset_w',
    'MIPS_msa_bseti_b', 'MIPS_msa_bseti_d', 'MIPS_msa_bseti_h',
    'MIPS_msa_bseti_w', 'MIPS_msa_bz_b', 'MIPS_msa_bz_d',
    'MIPS_msa_bz_h', 'MIPS_msa_bz_v', 'MIPS_msa_bz_w',
    'MIPS_msa_ceq_b', 'MIPS_msa_ceq_d', 'MIPS_msa_ceq_h',
    'MIPS_msa_ceq_w', 'MIPS_msa_ceqi_b', 'MIPS_msa_ceqi_d',
    'MIPS_msa_ceqi_h', 'MIPS_msa_ceqi_w', 'MIPS_msa_cfcmsa',
    'MIPS_msa_cle_s_b', 'MIPS_msa_cle_s_d', 'MIPS_msa_cle_s_h',
    'MIPS_msa_cle_s_w', 'MIPS_msa_cle_u_b', 'MIPS_msa_cle_u_d',
    'MIPS_msa_cle_u_h', 'MIPS_msa_cle_u_w', 'MIPS_msa_clei_s_b',
    'MIPS_msa_clei_s_d', 'MIPS_msa_clei_s_h', 'MIPS_msa_clei_s_w',
    'MIPS_msa_clei_u_b', 'MIPS_msa_clei_u_d', 'MIPS_msa_clei_u_h',
    'MIPS_msa_clei_u_w', 'MIPS_msa_clt_s_b', 'MIPS_msa_clt_s_d',
    'MIPS_msa_clt_s_h', 'MIPS_msa_clt_s_w', 'MIPS_msa_clt_u_b',
    'MIPS_msa_clt_u_d', 'MIPS_msa_clt_u_h', 'MIPS_msa_clt_u_w',
    'MIPS_msa_clti_s_b', 'MIPS_msa_clti_s_d', 'MIPS_msa_clti_s_h',
    'MIPS_msa_clti_s_w', 'MIPS_msa_clti_u_b', 'MIPS_msa_clti_u_d',
    'MIPS_msa_clti_u_h', 'MIPS_msa_clti_u_w', 'MIPS_msa_copy_s_b',
    'MIPS_msa_copy_s_d', 'MIPS_msa_copy_s_h', 'MIPS_msa_copy_s_w',
    'MIPS_msa_copy_u_b', 'MIPS_msa_copy_u_d', 'MIPS_msa_copy_u_h',
    'MIPS_msa_copy_u_w', 'MIPS_msa_ctcmsa', 'MIPS_msa_div_s_b',
    'MIPS_msa_div_s_d', 'MIPS_msa_div_s_h', 'MIPS_msa_div_s_w',
    'MIPS_msa_div_u_b', 'MIPS_msa_div_u_d', 'MIPS_msa_div_u_h',
    'MIPS_msa_div_u_w', 'MIPS_msa_dotp_s_d', 'MIPS_msa_dotp_s_h',
    'MIPS_msa_dotp_s_w', 'MIPS_msa_dotp_u_d', 'MIPS_msa_dotp_u_h',
    'MIPS_msa_dotp_u_w', 'MIPS_msa_dpadd_s_d', 'MIPS_msa_dpadd_s_h',
    'MIPS_msa_dpadd_s_w', 'MIPS_msa_dpadd_u_d', 'MIPS_msa_dpadd_u_h',
    'MIPS_msa_dpadd_u_w', 'MIPS_msa_dpsub_s_d', 'MIPS_msa_dpsub_s_h',
    'MIPS_msa_dpsub_s_w', 'MIPS_msa_dpsub_u_d', 'MIPS_msa_dpsub_u_h',
    'MIPS_msa_dpsub_u_w', 'MIPS_msa_fadd_d', 'MIPS_msa_fadd_w',
    'MIPS_msa_fcaf_d', 'MIPS_msa_fcaf_w', 'MIPS_msa_fceq_d',
    'MIPS_msa_fceq_w', 'MIPS_msa_fclass_d', 'MIPS_msa_fclass_w',
    'MIPS_msa_fcle_d', 'MIPS_msa_fcle_w', 'MIPS_msa_fclt_d',
    'MIPS_msa_fclt_w', 'MIPS_msa_fcne_d', 'MIPS_msa_fcne_w',
    'MIPS_msa_fcor_d', 'MIPS_msa_fcor_w', 'MIPS_msa_fcueq_d',
    'MIPS_msa_fcueq_w', 'MIPS_msa_fcule_d', 'MIPS_msa_fcule_w',
    'MIPS_msa_fcult_d', 'MIPS_msa_fcult_w', 'MIPS_msa_fcun_d',
    'MIPS_msa_fcun_w', 'MIPS_msa_fcune_d', 'MIPS_msa_fcune_w',
    'MIPS_msa_fdiv_d', 'MIPS_msa_fdiv_w', 'MIPS_msa_fexdo_h',
    'MIPS_msa_fexdo_w', 'MIPS_msa_fexp2_d', 'MIPS_msa_fexp2_w',
    'MIPS_msa_fexupl_d', 'MIPS_msa_fexupl_w', 'MIPS_msa_fexupr_d',
    'MIPS_msa_fexupr_w', 'MIPS_msa_ffint_s_d', 'MIPS_msa_ffint_s_w',
    'MIPS_msa_ffint_u_d', 'MIPS_msa_ffint_u_w', 'MIPS_msa_ffql_d',
    'MIPS_msa_ffql_w', 'MIPS_msa_ffqr_d', 'MIPS_msa_ffqr_w',
    'MIPS_msa_fill_b', 'MIPS_msa_fill_d', 'MIPS_msa_fill_h',
    'MIPS_msa_fill_w', 'MIPS_msa_flog2_d', 'MIPS_msa_flog2_w',
    'MIPS_msa_fmadd_d', 'MIPS_msa_fmadd_w', 'MIPS_msa_fmax_a_d',
    'MIPS_msa_fmax_a_w', 'MIPS_msa_fmax_d', 'MIPS_msa_fmax_w',
    'MIPS_msa_fmin_a_d', 'MIPS_msa_fmin_a_w', 'MIPS_msa_fmin_d',
    'MIPS_msa_fmin_w', 'MIPS_msa_fmsub_d', 'MIPS_msa_fmsub_w',
    'MIPS_msa_fmul_d', 'MIPS_msa_fmul_w', 'MIPS_msa_frcp_d',
    'MIPS_msa_frcp_w', 'MIPS_msa_frint_d', 'MIPS_msa_frint_w',
    'MIPS_msa_frsqrt_d', 'MIPS_msa_frsqrt_w', 'MIPS_msa_fsaf_d',
    'MIPS_msa_fsaf_w', 'MIPS_msa_fseq_d', 'MIPS_msa_fseq_w',
    'MIPS_msa_fsle_d', 'MIPS_msa_fsle_w', 'MIPS_msa_fslt_d',
    'MIPS_msa_fslt_w', 'MIPS_msa_fsne_d', 'MIPS_msa_fsne_w',
    'MIPS_msa_fsor_d', 'MIPS_msa_fsor_w', 'MIPS_msa_fsqrt_d',
    'MIPS_msa_fsqrt_w', 'MIPS_msa_fsub_d', 'MIPS_msa_fsub_w',
    'MIPS_msa_fsueq_d', 'MIPS_msa_fsueq_w', 'MIPS_msa_fsule_d',
    'MIPS_msa_fsule_w', 'MIPS_msa_fsult_d', 'MIPS_msa_fsult_w',
    'MIPS_msa_fsun_d', 'MIPS_msa_fsun_w', 'MIPS_msa_fsune_d',
    'MIPS_msa_fsune_w', 'MIPS_msa_ftint_s_d', 'MIPS_msa_ftint_s_w',
    'MIPS_msa_ftint_u_d', 'MIPS_msa_ftint_u_w', 'MIPS_msa_ftq_h',
    'MIPS_msa_ftq_w', 'MIPS_msa_ftrunc_s_d', 'MIPS_msa_ftrunc_s_w',
    'MIPS_msa_ftrunc_u_d', 'MIPS_msa_ftrunc_u_w', 'MIPS_msa_hadd_s_d',
    'MIPS_msa_hadd_s_h', 'MIPS_msa_hadd_s_w', 'MIPS_msa_hadd_u_d',
    'MIPS_msa_hadd_u_h', 'MIPS_msa_hadd_u_w', 'MIPS_msa_hsub_s_d',
    'MIPS_msa_hsub_s_h', 'MIPS_msa_hsub_s_w', 'MIPS_msa_hsub_u_d',
    'MIPS_msa_hsub_u_h', 'MIPS_msa_hsub_u_w', 'MIPS_msa_ilvev_b',
    'MIPS_msa_ilvev_d', 'MIPS_msa_ilvev_h', 'MIPS_msa_ilvev_w',
    'MIPS_msa_ilvl_b', 'MIPS_msa_ilvl_d', 'MIPS_msa_ilvl_h',
    'MIPS_msa_ilvl_w', 'MIPS_msa_ilvod_b', 'MIPS_msa_ilvod_d',
    'MIPS_msa_ilvod_h', 'MIPS_msa_ilvod_w', 'MIPS_msa_ilvr_b',
    'MIPS_msa_ilvr_d', 'MIPS_msa_ilvr_h', 'MIPS_msa_ilvr_w',
    'MIPS_msa_insert_b', 'MIPS_msa_insert_d', 'MIPS_msa_insert_h',
    'MIPS_msa_insert_w', 'MIPS_msa_insve_b', 'MIPS_msa_insve_d',
    'MIPS_msa_insve_h', 'MIPS_msa_insve_w', 'MIPS_msa_ld_b',
    'MIPS_msa_ld_d', 'MIPS_msa_ld_h', 'MIPS_msa_ld_w',
    'MIPS_msa_ldi_b', 'MIPS_msa_ldi_d', 'MIPS_msa_ldi_h',
    'MIPS_msa_ldi_w', 'MIPS_msa_madd_q_h', 'MIPS_msa_madd_q_w',
    'MIPS_msa_maddr_q_h', 'MIPS_msa_maddr_q_w', 'MIPS_msa_maddv_b',
    'MIPS_msa_maddv_d', 'MIPS_msa_maddv_h', 'MIPS_msa_maddv_w',
    'MIPS_msa_max_a_b', 'MIPS_msa_max_a_d', 'MIPS_msa_max_a_h',
    'MIPS_msa_max_a_w', 'MIPS_msa_max_s_b', 'MIPS_msa_max_s_d',
    'MIPS_msa_max_s_h', 'MIPS_msa_max_s_w', 'MIPS_msa_max_u_b',
    'MIPS_msa_max_u_d', 'MIPS_msa_max_u_h', 'MIPS_msa_max_u_w',
    'MIPS_msa_maxi_s_b', 'MIPS_msa_maxi_s_d', 'MIPS_msa_maxi_s_h',
    'MIPS_msa_maxi_s_w', 'MIPS_msa_maxi_u_b', 'MIPS_msa_maxi_u_d',
    'MIPS_msa_maxi_u_h', 'MIPS_msa_maxi_u_w', 'MIPS_msa_min_a_b',
    'MIPS_msa_min_a_d', 'MIPS_msa_min_a_h', 'MIPS_msa_min_a_w',
    'MIPS_msa_min_s_b', 'MIPS_msa_min_s_d', 'MIPS_msa_min_s_h',
    'MIPS_msa_min_s_w', 'MIPS_msa_min_u_b', 'MIPS_msa_min_u_d',
    'MIPS_msa_min_u_h', 'MIPS_msa_min_u_w', 'MIPS_msa_mini_s_b',
    'MIPS_msa_mini_s_d', 'MIPS_msa_mini_s_h', 'MIPS_msa_mini_s_w',
    'MIPS_msa_mini_u_b', 'MIPS_msa_mini_u_d', 'MIPS_msa_mini_u_h',
    'MIPS_msa_mini_u_w', 'MIPS_msa_mod_s_b', 'MIPS_msa_mod_s_d',
    'MIPS_msa_mod_s_h', 'MIPS_msa_mod_s_w', 'MIPS_msa_mod_u_b',
    'MIPS_msa_mod_u_d', 'MIPS_msa_mod_u_h', 'MIPS_msa_mod_u_w',
    'MIPS_msa_move_v', 'MIPS_msa_msub_q_h', 'MIPS_msa_msub_q_w',
    'MIPS_msa_msubr_q_h', 'MIPS_msa_msubr_q_w', 'MIPS_msa_msubv_b',
    'MIPS_msa_msubv_d', 'MIPS_msa_msubv_h', 'MIPS_msa_msubv_w',
    'MIPS_msa_mul_q_h', 'MIPS_msa_mul_q_w', 'MIPS_msa_mulr_q_h',
    'MIPS_msa_mulr_q_w', 'MIPS_msa_mulv_b', 'MIPS_msa_mulv_d',
    'MIPS_msa_mulv_h', 'MIPS_msa_mulv_w', 'MIPS_msa_nloc_b',
    'MIPS_msa_nloc_d', 'MIPS_msa_nloc_h', 'MIPS_msa_nloc_w',
    'MIPS_msa_nlzc_b', 'MIPS_msa_nlzc_d', 'MIPS_msa_nlzc_h',
    'MIPS_msa_nlzc_w', 'MIPS_msa_nor_v', 'MIPS_msa_nori_b',
    'MIPS_msa_or_v', 'MIPS_msa_ori_b', 'MIPS_msa_pckev_b',
    'MIPS_msa_pckev_d', 'MIPS_msa_pckev_h', 'MIPS_msa_pckev_w',
    'MIPS_msa_pckod_b', 'MIPS_msa_pckod_d', 'MIPS_msa_pckod_h',
    'MIPS_msa_pckod_w', 'MIPS_msa_pcnt_b', 'MIPS_msa_pcnt_d',
    'MIPS_msa_pcnt_h', 'MIPS_msa_pcnt_w', 'MIPS_msa_sat_s_b',
    'MIPS_msa_sat_s_d', 'MIPS_msa_sat_s_h', 'MIPS_msa_sat_s_w',
    'MIPS_msa_sat_u_b', 'MIPS_msa_sat_u_d', 'MIPS_msa_sat_u_h',
    'MIPS_msa_sat_u_w', 'MIPS_msa_shf_b', 'MIPS_msa_shf_h',
    'MIPS_msa_shf_w', 'MIPS_msa_sld_b', 'MIPS_msa_sld_d',
    'MIPS_msa_sld_h', 'MIPS_msa_sld_w', 'MIPS_msa_sldi_b',
    'MIPS_msa_sldi_d', 'MIPS_msa_sldi_h', 'MIPS_msa_sldi_w',
    'MIPS_msa_sll_b', 'MIPS_msa_sll_d', 'MIPS_msa_sll_h',
    'MIPS_msa_sll_w', 'MIPS_msa_slli_b', 'MIPS_msa_slli_d',
    'MIPS_msa_slli_h', 'MIPS_msa_slli_w', 'MIPS_msa_splat_b',
    'MIPS_msa_splat_d', 'MIPS_msa_splat_h', 'MIPS_msa_splat_w',
    'MIPS_msa_splati_b', 'MIPS_msa_splati_d', 'MIPS_msa_splati_h',
    'MIPS_msa_splati_w', 'MIPS_msa_sra_b', 'MIPS_msa_sra_d',
    'MIPS_msa_sra_h', 'MIPS_msa_sra_w', 'MIPS_msa_srai_b',
    'MIPS_msa_srai_d', 'MIPS_msa_srai_h', 'MIPS_msa_srai_w',
    'MIPS_msa_srar_b', 'MIPS_msa_srar_d', 'MIPS_msa_srar_h',
    'MIPS_msa_srar_w', 'MIPS_msa_srari_b', 'MIPS_msa_srari_d',
    'MIPS_msa_srari_h', 'MIPS_msa_srari_w', 'MIPS_msa_srl_b',
    'MIPS_msa_srl_d', 'MIPS_msa_srl_h', 'MIPS_msa_srl_w',
    'MIPS_msa_srli_b', 'MIPS_msa_srli_d', 'MIPS_msa_srli_h',
    'MIPS_msa_srli_w', 'MIPS_msa_srlr_b', 'MIPS_msa_srlr_d',
    'MIPS_msa_srlr_h', 'MIPS_msa_srlr_w', 'MIPS_msa_srlri_b',
    'MIPS_msa_srlri_d', 'MIPS_msa_srlri_h', 'MIPS_msa_srlri_w',
    'MIPS_msa_st_b', 'MIPS_msa_st_d', 'MIPS_msa_st_h',
    'MIPS_msa_st_w', 'MIPS_msa_subs_s_b', 'MIPS_msa_subs_s_d',
    'MIPS_msa_subs_s_h', 'MIPS_msa_subs_s_w', 'MIPS_msa_subs_u_b',
    'MIPS_msa_subs_u_d', 'MIPS_msa_subs_u_h', 'MIPS_msa_subs_u_w',
    'MIPS_msa_subsus_u_b', 'MIPS_msa_subsus_u_d',
    'MIPS_msa_subsus_u_h', 'MIPS_msa_subsus_u_w',
    'MIPS_msa_subsuu_s_b', 'MIPS_msa_subsuu_s_d',
    'MIPS_msa_subsuu_s_h', 'MIPS_msa_subsuu_s_w', 'MIPS_msa_subv_b',
    'MIPS_msa_subv_d', 'MIPS_msa_subv_h', 'MIPS_msa_subv_w',
    'MIPS_msa_subvi_b', 'MIPS_msa_subvi_d', 'MIPS_msa_subvi_h',
    'MIPS_msa_subvi_w', 'MIPS_msa_vshf_b', 'MIPS_msa_vshf_d',
    'MIPS_msa_vshf_h', 'MIPS_msa_vshf_w', 'MIPS_msa_xor_v',
    'MIPS_msa_xori_b', 'MIPS_msub', 'MIPS_msub3', 'MIPS_msub_d',
    'MIPS_msub_ps', 'MIPS_msub_s', 'MIPS_msubu', 'MIPS_msubu3',
    'MIPS_mtc0', 'MIPS_mtc1', 'MIPS_mtc2', 'MIPS_mtdr', 'MIPS_mthc1',
    'MIPS_mthc2', 'MIPS_mthi', 'MIPS_mthi1', 'MIPS_mthlip',
    'MIPS_mtlhx', 'MIPS_mtlo', 'MIPS_mtlo1', 'MIPS_mtm0', 'MIPS_mtm1',
    'MIPS_mtm2', 'MIPS_mtp0', 'MIPS_mtp1', 'MIPS_mtp2', 'MIPS_mtsa',
    'MIPS_mtsab', 'MIPS_mtsah', 'MIPS_mttacx', 'MIPS_mttc0',
    'MIPS_mttc1', 'MIPS_mttc2', 'MIPS_mttdsp', 'MIPS_mttgpr',
    'MIPS_mtthc1', 'MIPS_mtthc2', 'MIPS_mtthi', 'MIPS_mttlo',
    'MIPS_mttr', 'MIPS_mul', 'MIPS_mul_ph', 'MIPS_mul_s_ph',
    'MIPS_muleq_s_pw_qhl', 'MIPS_muleq_s_pw_qhr',
    'MIPS_muleq_s_w_phl', 'MIPS_muleq_s_w_phr', 'MIPS_muleu_s_ph_qbl',
    'MIPS_muleu_s_ph_qbr', 'MIPS_muleu_s_qh_obl',
    'MIPS_muleu_s_qh_obr', 'MIPS_mulq_rs_ph', 'MIPS_mulq_rs_qh',
    'MIPS_mulq_rs_w', 'MIPS_mulq_s_ph', 'MIPS_mulq_s_w',
    'MIPS_mulsa_w_ph', 'MIPS_mulsaq_s_l_pw', 'MIPS_mulsaq_s_w_ph',
    'MIPS_mulsaq_s_w_qh', 'MIPS_mult', 'MIPS_mult1', 'MIPS_mult3',
    'MIPS_multp', 'MIPS_multu', 'MIPS_multu1', 'MIPS_multu3',
    'MIPS_neg', 'MIPS_negu', 'MIPS_nmadd_d', 'MIPS_nmadd_ps',
    'MIPS_nmadd_s', 'MIPS_nmsub_d', 'MIPS_nmsub_ps', 'MIPS_nmsub_s',
    'MIPS_nop', 'MIPS_nor', 'MIPS_not', 'MIPS_null', 'MIPS_or',
    'MIPS_ori', 'MIPS_pabsh', 'MIPS_pabsw', 'MIPS_packrl_ph',
    'MIPS_packrl_pw', 'MIPS_paddb', 'MIPS_paddh', 'MIPS_paddsb',
    'MIPS_paddsh', 'MIPS_paddsw', 'MIPS_paddub', 'MIPS_padduh',
    'MIPS_padduw', 'MIPS_paddw', 'MIPS_padsbh', 'MIPS_pand',
    'MIPS_pause', 'MIPS_pceqb', 'MIPS_pceqh', 'MIPS_pceqw',
    'MIPS_pcgtb', 'MIPS_pcgth', 'MIPS_pcgtw', 'MIPS_pcpyh',
    'MIPS_pcpyld', 'MIPS_pcpyud', 'MIPS_pdivbw', 'MIPS_pdivuw',
    'MIPS_pdivw', 'MIPS_pexch', 'MIPS_pexcw', 'MIPS_pexoh',
    'MIPS_pexow', 'MIPS_pext5', 'MIPS_pextlb', 'MIPS_pextlh',
    'MIPS_pextlw', 'MIPS_pextub', 'MIPS_pextuh', 'MIPS_pextuw',
    'MIPS_phmadh', 'MIPS_phmsbh', 'MIPS_pick_ob', 'MIPS_pick_ph',
    'MIPS_pick_pw', 'MIPS_pick_qb', 'MIPS_pick_qh', 'MIPS_pinth',
    'MIPS_pintoh', 'MIPS_pll', 'MIPS_plu', 'MIPS_plzcw',
    'MIPS_pmaddh', 'MIPS_pmadduw', 'MIPS_pmaddw', 'MIPS_pmaxh',
    'MIPS_pmaxw', 'MIPS_pmfhi', 'MIPS_pmfhl', 'MIPS_pmflo',
    'MIPS_pminh', 'MIPS_pminw', 'MIPS_pmsubh', 'MIPS_pmsubw',
    'MIPS_pmthi', 'MIPS_pmthl_lw', 'MIPS_pmtlo', 'MIPS_pmulth',
    'MIPS_pmultuw', 'MIPS_pmultw', 'MIPS_pnor', 'MIPS_pop',
    'MIPS_por', 'MIPS_ppac5', 'MIPS_ppacb', 'MIPS_ppach',
    'MIPS_ppacw', 'MIPS_pperm', 'MIPS_preceq_pw_qhl',
    'MIPS_preceq_pw_qhla', 'MIPS_preceq_pw_qhr',
    'MIPS_preceq_pw_qhra', 'MIPS_preceq_s_l_pwl',
    'MIPS_preceq_s_l_pwr', 'MIPS_preceq_w_phl', 'MIPS_preceq_w_phr',
    'MIPS_precequ_ph_qbl', 'MIPS_precequ_ph_qbla',
    'MIPS_precequ_ph_qbr', 'MIPS_precequ_ph_qbra',
    'MIPS_precequ_pw_qhl', 'MIPS_precequ_pw_qhla',
    'MIPS_precequ_pw_qhr', 'MIPS_precequ_pw_qhra',
    'MIPS_preceu_ph_qbl', 'MIPS_preceu_ph_qbla', 'MIPS_preceu_ph_qbr',
    'MIPS_preceu_ph_qbra', 'MIPS_preceu_qh_obl',
    'MIPS_preceu_qh_obla', 'MIPS_preceu_qh_obr',
    'MIPS_preceu_qh_obra', 'MIPS_precr_qb_ph', 'MIPS_precr_sra_ph_w',
    'MIPS_precr_sra_r_ph_w', 'MIPS_precrq_ob_qh', 'MIPS_precrq_ph_w',
    'MIPS_precrq_pw_l', 'MIPS_precrq_qb_ph', 'MIPS_precrq_qh_pw',
    'MIPS_precrq_rs_ph_w', 'MIPS_precrq_rs_qh_pw',
    'MIPS_precrqu_s_ob_qh', 'MIPS_precrqu_s_qb_ph', 'MIPS_pref',
    'MIPS_prefe', 'MIPS_prefx', 'MIPS_prepend', 'MIPS_prevh',
    'MIPS_prot3w', 'MIPS_psllh', 'MIPS_psllvw', 'MIPS_psllw',
    'MIPS_psrah', 'MIPS_psravw', 'MIPS_psraw', 'MIPS_psrlh',
    'MIPS_psrlvw', 'MIPS_psrlw', 'MIPS_psubb', 'MIPS_psubh',
    'MIPS_psubsb', 'MIPS_psubsh', 'MIPS_psubsw', 'MIPS_psubub',
    'MIPS_psubuh', 'MIPS_psubuw', 'MIPS_psubw', 'MIPS_pul',
    'MIPS_puu', 'MIPS_pxor', 'MIPS_qfsrv', 'MIPS_qmac_00',
    'MIPS_qmac_01', 'MIPS_qmac_02', 'MIPS_qmac_03', 'MIPS_qmacs_00',
    'MIPS_qmacs_01', 'MIPS_qmacs_02', 'MIPS_qmacs_03', 'MIPS_qmfc2',
    'MIPS_qmtc2', 'MIPS_raddu_l_ob', 'MIPS_raddu_w_qb', 'MIPS_rddsp',
    'MIPS_rdhwr', 'MIPS_rdpgpr', 'MIPS_repl_ob', 'MIPS_repl_ph',
    'MIPS_repl_pw', 'MIPS_repl_qb', 'MIPS_repl_qh', 'MIPS_replv_ob',
    'MIPS_replv_ph', 'MIPS_replv_pw', 'MIPS_replv_qb',
    'MIPS_replv_qh', 'MIPS_restore', 'MIPS_rotr', 'MIPS_rotrv',
    'MIPS_saa', 'MIPS_saad', 'MIPS_sadd', 'MIPS_save', 'MIPS_sb',
    'MIPS_sbe', 'MIPS_sbv', 'MIPS_sc', 'MIPS_scd', 'MIPS_sce',
    'MIPS_sd', 'MIPS_sdbbp', 'MIPS_sdc1', 'MIPS_sdc2', 'MIPS_sdl',
    'MIPS_sdm', 'MIPS_sdp', 'MIPS_sdr', 'MIPS_sdv', 'MIPS_sdxc1',
    'MIPS_seb', 'MIPS_seh', 'MIPS_seq', 'MIPS_seqi', 'MIPS_sew',
    'MIPS_sfv', 'MIPS_sh', 'MIPS_she', 'MIPS_shilo', 'MIPS_shilov',
    'MIPS_shll_ob', 'MIPS_shll_ph', 'MIPS_shll_pw', 'MIPS_shll_qb',
    'MIPS_shll_qh', 'MIPS_shll_s_ph', 'MIPS_shll_s_pw',
    'MIPS_shll_s_qh', 'MIPS_shll_s_w', 'MIPS_shllv_ob',
    'MIPS_shllv_ph', 'MIPS_shllv_pw', 'MIPS_shllv_qb',
    'MIPS_shllv_qh', 'MIPS_shllv_s_ph', 'MIPS_shllv_s_pw',
    'MIPS_shllv_s_qh', 'MIPS_shllv_s_w', 'MIPS_shra_ph',
    'MIPS_shra_pw', 'MIPS_shra_qb', 'MIPS_shra_qh', 'MIPS_shra_r_ph',
    'MIPS_shra_r_pw', 'MIPS_shra_r_qb', 'MIPS_shra_r_qh',
    'MIPS_shra_r_w', 'MIPS_shrav_ph', 'MIPS_shrav_pw',
    'MIPS_shrav_qb', 'MIPS_shrav_qh', 'MIPS_shrav_r_ph',
    'MIPS_shrav_r_pw', 'MIPS_shrav_r_qb', 'MIPS_shrav_r_qh',
    'MIPS_shrav_r_w', 'MIPS_shrl_ob', 'MIPS_shrl_ph', 'MIPS_shrl_qb',
    'MIPS_shrlv_ob', 'MIPS_shrlv_ph', 'MIPS_shrlv_qb', 'MIPS_shv',
    'MIPS_sll', 'MIPS_sllv', 'MIPS_slt', 'MIPS_slti', 'MIPS_sltiu',
    'MIPS_sltu', 'MIPS_slv', 'MIPS_sne', 'MIPS_snei', 'MIPS_spv',
    'MIPS_sq', 'MIPS_sqc2', 'MIPS_sqv', 'MIPS_sra', 'MIPS_srav',
    'MIPS_srl', 'MIPS_srlv', 'MIPS_srv', 'MIPS_ssnop', 'MIPS_ssub',
    'MIPS_ssv', 'MIPS_stv', 'MIPS_sub', 'MIPS_subq_ph',
    'MIPS_subq_pw', 'MIPS_subq_qh', 'MIPS_subq_s_ph',
    'MIPS_subq_s_pw', 'MIPS_subq_s_qh', 'MIPS_subq_s_w',
    'MIPS_subqh_ph', 'MIPS_subqh_r_ph', 'MIPS_subqh_r_w',
    'MIPS_subqh_w', 'MIPS_subu', 'MIPS_subu_ob', 'MIPS_subu_ph',
    'MIPS_subu_qb', 'MIPS_subu_s_ob', 'MIPS_subu_s_ph',
    'MIPS_subu_s_qb', 'MIPS_subuh_qb', 'MIPS_subuh_r_qb', 'MIPS_suv',
    'MIPS_suxc1', 'MIPS_sw', 'MIPS_swc1', 'MIPS_swc2', 'MIPS_swe',
    'MIPS_swl', 'MIPS_swle', 'MIPS_swm', 'MIPS_swp', 'MIPS_swr',
    'MIPS_swre', 'MIPS_swv', 'MIPS_swxc1', 'MIPS_sync', 'MIPS_synci',
    'MIPS_synciobdma', 'MIPS_syncs', 'MIPS_syncw', 'MIPS_syncws',
    'MIPS_syscall', 'MIPS_teq', 'MIPS_teqi', 'MIPS_tge', 'MIPS_tgei',
    'MIPS_tgeiu', 'MIPS_tgeu', 'MIPS_tlbp', 'MIPS_tlbr', 'MIPS_tlbwi',
    'MIPS_tlbwr', 'MIPS_tlt', 'MIPS_tlti', 'MIPS_tltiu', 'MIPS_tltu',
    'MIPS_tne', 'MIPS_tnei', 'MIPS_ucopyw', 'MIPS_uld', 'MIPS_ulw',
    'MIPS_usd', 'MIPS_usw', 'MIPS_v3mulu', 'MIPS_vabs', 'MIPS_vaccb',
    'MIPS_vadd', 'MIPS_vaddb', 'MIPS_vaddc', 'MIPS_vand', 'MIPS_vch',
    'MIPS_vcl', 'MIPS_vcr', 'MIPS_veq', 'MIPS_vextn', 'MIPS_vextq',
    'MIPS_vextt', 'MIPS_vge', 'MIPS_vinsn', 'MIPS_vinsq',
    'MIPS_vinst', 'MIPS_vlt', 'MIPS_vmacf', 'MIPS_vmacq',
    'MIPS_vmacu', 'MIPS_vmadh', 'MIPS_vmadl', 'MIPS_vmadm',
    'MIPS_vmadn', 'MIPS_vmm0', 'MIPS_vmov', 'MIPS_vmrg', 'MIPS_vmudh',
    'MIPS_vmudl', 'MIPS_vmudm', 'MIPS_vmudn', 'MIPS_vmulf',
    'MIPS_vmulq', 'MIPS_vmulu', 'MIPS_vmulu_cn', 'MIPS_vnand',
    'MIPS_vne', 'MIPS_vnoop', 'MIPS_vnor', 'MIPS_vnxor', 'MIPS_vor',
    'MIPS_vrcp', 'MIPS_vrcph', 'MIPS_vrcpl', 'MIPS_vrndn',
    'MIPS_vrndp', 'MIPS_vrsq', 'MIPS_vrsqh', 'MIPS_vrsql',
    'MIPS_vsac', 'MIPS_vsad', 'MIPS_vsaw', 'MIPS_vsub', 'MIPS_vsubb',
    'MIPS_vsubc', 'MIPS_vsucb', 'MIPS_vsum', 'MIPS_vsut', 'MIPS_vxor',
    'MIPS_wait', 'MIPS_wrdsp', 'MIPS_wrpgpr', 'MIPS_wsbh', 'MIPS_xor',
    'MIPS_xori', 'MIPS_yield', 'MIPS_zcb', 'MIPS_zcbt', 'MIPS_zeb',
    'MIPS_zeh', 'MIPS_zew', 'MODEMDEVCAPS', 'MODEMSETTINGS',
    'MONITORENUMPROC', 'MONITORINFO', 'MONITORINFOEX',
    'MONITORINFOEXA', 'MONITORINFOEXW', 'MONITOR_DISPLAY_STATE',
    'MONITOR_DISPLAY_STATE__enumvalues', 'MOUSEHOOKSTRUCT',
    'MOUSEHOOKSTRUCTEX', 'MOUSEINPUT', 'MOUSEKEYS', 'MOUSEMOVEPOINT',
    'MOUSE_EVENT_RECORD', 'MOVBPT_BAD_TYPE', 'MOVBPT_DEST_BUSY',
    'MOVBPT_NOT_FOUND', 'MOVBPT_OK', 'MSG', 'MSGBOXCALLBACK',
    'MSGBOXPARAMS', 'MSGBOXPARAMSA', 'MSGBOXPARAMSW',
    'MSLLHOOKSTRUCT', 'MULTICAST_MODE_TYPE', 'MULTIKEYHELP',
    'MULTIKEYHELPA', 'MULTIKEYHELPW', 'MandatoryLevelCount',
    'MandatoryLevelHigh', 'MandatoryLevelLow', 'MandatoryLevelMedium',
    'MandatoryLevelSecureProcess', 'MandatoryLevelSystem',
    'MandatoryLevelUntrusted', 'MaxActivationContextInfoClass',
    'MaxHardwareCounterType', 'MaxJobObjectInfoClass',
    'MaxProcessMitigationPolicy', 'MaxServiceRegistryStateType',
    'MaxTokenInfoClass', 'MaximumFileIdType',
    'MaximumFileInfoByHandleClass', 'MaximumIoPriorityHintType',
    'MemExtendedParameterAddressRequirements',
    'MemExtendedParameterAttributeFlags',
    'MemExtendedParameterInvalidType', 'MemExtendedParameterMax',
    'MemExtendedParameterNumaNode',
    'MemExtendedParameterPartitionHandle',
    'MemExtendedParameterUserPhysicalHandle',
    'MemSectionExtendedParameterInvalidType',
    'MemSectionExtendedParameterMax',
    'MemSectionExtendedParameterNumaNode',
    'MemSectionExtendedParameterUserPhysicalFlags',
    'MemoryRegionInfo', 'MonitorCapabilities', 'MonitorInvocation',
    'MonitorRequestReasonAcDcDisplayBurst',
    'MonitorRequestReasonAcDcDisplayBurstSuppressed',
    'MonitorRequestReasonBatteryCountChange',
    'MonitorRequestReasonBatteryCountChangeSuppressed',
    'MonitorRequestReasonBuiltinPanel', 'MonitorRequestReasonDP',
    'MonitorRequestReasonDim', 'MonitorRequestReasonDirectedDrips',
    'MonitorRequestReasonDisplayRequiredUnDim',
    'MonitorRequestReasonFullWake', 'MonitorRequestReasonGracePeriod',
    'MonitorRequestReasonIdleTimeout', 'MonitorRequestReasonLid',
    'MonitorRequestReasonMax', 'MonitorRequestReasonNearProximity',
    'MonitorRequestReasonPdcSignal',
    'MonitorRequestReasonPdcSignalFingerprint',
    'MonitorRequestReasonPdcSignalHeyCortana',
    'MonitorRequestReasonPdcSignalHolographicShell',
    'MonitorRequestReasonPdcSignalWindowsMobilePwrNotif',
    'MonitorRequestReasonPdcSignalWindowsMobileShell',
    'MonitorRequestReasonPnP', 'MonitorRequestReasonPoSetSystemState',
    'MonitorRequestReasonPolicyChange',
    'MonitorRequestReasonPowerButton',
    'MonitorRequestReasonRemoteConnection',
    'MonitorRequestReasonResumeModernStandby',
    'MonitorRequestReasonResumePdc', 'MonitorRequestReasonResumeS4',
    'MonitorRequestReasonScMonitorpower',
    'MonitorRequestReasonScreenOffRequest',
    'MonitorRequestReasonSessionUnlock',
    'MonitorRequestReasonSetThreadExecutionState',
    'MonitorRequestReasonSleepButton',
    'MonitorRequestReasonSxTransition',
    'MonitorRequestReasonSystemIdle',
    'MonitorRequestReasonSystemStateEntered',
    'MonitorRequestReasonTerminal',
    'MonitorRequestReasonThermalStandby',
    'MonitorRequestReasonUnknown',
    'MonitorRequestReasonUserDisplayBurst',
    'MonitorRequestReasonUserInput',
    'MonitorRequestReasonUserInputAccelerometer',
    'MonitorRequestReasonUserInputHid',
    'MonitorRequestReasonUserInputInitialization',
    'MonitorRequestReasonUserInputKeyboard',
    'MonitorRequestReasonUserInputMouse',
    'MonitorRequestReasonUserInputPen',
    'MonitorRequestReasonUserInputPoUserPresent',
    'MonitorRequestReasonUserInputSessionSwitch',
    'MonitorRequestReasonUserInputTouch', 'MonitorRequestReasonWinrt',
    'MonitorRequestTypeOff', 'MonitorRequestTypeOnAndPresent',
    'MonitorRequestTypeToggleOn', 'NAMEENUMPROCA', 'NAMEENUMPROCW',
    'NATIVE_TYPE_MAX_CB', 'NCCALCSIZE_PARAMS', 'NEARPROC',
    'NEC850_ABSF_D', 'NEC850_ABSF_S', 'NEC850_ADD', 'NEC850_ADDF_D',
    'NEC850_ADDF_S', 'NEC850_ADDI', 'NEC850_ADF', 'NEC850_AND',
    'NEC850_ANDI', 'NEC850_BGE', 'NEC850_BGT', 'NEC850_BH',
    'NEC850_BINS', 'NEC850_BL', 'NEC850_BLE', 'NEC850_BLT',
    'NEC850_BN', 'NEC850_BNC', 'NEC850_BNH', 'NEC850_BNV',
    'NEC850_BNZ', 'NEC850_BP', 'NEC850_BR', 'NEC850_BREAKPOINT',
    'NEC850_BSA', 'NEC850_BSH', 'NEC850_BSW', 'NEC850_BV',
    'NEC850_BZ', 'NEC850_CACHE', 'NEC850_CALLT', 'NEC850_CAXI',
    'NEC850_CEILF_DL', 'NEC850_CEILF_DUL', 'NEC850_CEILF_DUW',
    'NEC850_CEILF_DW', 'NEC850_CEILF_SL', 'NEC850_CEILF_SUL',
    'NEC850_CEILF_SUW', 'NEC850_CEILF_SW', 'NEC850_CLL',
    'NEC850_CLR1', 'NEC850_CMOV', 'NEC850_CMOVF_D', 'NEC850_CMOVF_S',
    'NEC850_CMP', 'NEC850_CMPF_D', 'NEC850_CMPF_S', 'NEC850_CTRET',
    'NEC850_CVTF_DL', 'NEC850_CVTF_DS', 'NEC850_CVTF_DUL',
    'NEC850_CVTF_DUW', 'NEC850_CVTF_DW', 'NEC850_CVTF_HS',
    'NEC850_CVTF_LD', 'NEC850_CVTF_LS', 'NEC850_CVTF_SD',
    'NEC850_CVTF_SH', 'NEC850_CVTF_SL', 'NEC850_CVTF_SUL',
    'NEC850_CVTF_SUW', 'NEC850_CVTF_SW', 'NEC850_CVTF_ULD',
    'NEC850_CVTF_ULS', 'NEC850_CVTF_UWD', 'NEC850_CVTF_UWS',
    'NEC850_CVTF_WD', 'NEC850_CVTF_WS', 'NEC850_CVT_SW',
    'NEC850_CVT_WS', 'NEC850_DBCP', 'NEC850_DBHVTRAP',
    'NEC850_DBPUSH', 'NEC850_DBRET', 'NEC850_DBTAG', 'NEC850_DBTRAP',
    'NEC850_DI', 'NEC850_DISPOSE_r', 'NEC850_DISPOSE_r0',
    'NEC850_DIV', 'NEC850_DIVF_D', 'NEC850_DIVF_S', 'NEC850_DIVH',
    'NEC850_DIVHU', 'NEC850_DIVH_r3', 'NEC850_DIVQ', 'NEC850_DIVQU',
    'NEC850_DIVU', 'NEC850_DST', 'NEC850_EI', 'NEC850_EIRET',
    'NEC850_EST', 'NEC850_FERET', 'NEC850_FETRAP', 'NEC850_FLOORF_DL',
    'NEC850_FLOORF_DUL', 'NEC850_FLOORF_DUW', 'NEC850_FLOORF_DW',
    'NEC850_FLOORF_SL', 'NEC850_FLOORF_SUL', 'NEC850_FLOORF_SUW',
    'NEC850_FLOORF_SW', 'NEC850_FMAF_S', 'NEC850_FMSF_S',
    'NEC850_FNMAF_S', 'NEC850_FNMSF_S', 'NEC850_HALT', 'NEC850_HSH',
    'NEC850_HSW', 'NEC850_HVCALL', 'NEC850_HVTRAP',
    'NEC850_Instructions', 'NEC850_JARL', 'NEC850_JMP', 'NEC850_JR',
    'NEC850_LAST_INSTRUCTION', 'NEC850_LDFC', 'NEC850_LDFF',
    'NEC850_LDL_W', 'NEC850_LDSR', 'NEC850_LDTC_GR', 'NEC850_LDTC_PC',
    'NEC850_LDTC_SR', 'NEC850_LDTC_VR', 'NEC850_LDVC_SR',
    'NEC850_LD_B', 'NEC850_LD_BU', 'NEC850_LD_DW', 'NEC850_LD_H',
    'NEC850_LD_HU', 'NEC850_LD_W', 'NEC850_LOOP', 'NEC850_MAC',
    'NEC850_MACU', 'NEC850_MADDF_S', 'NEC850_MAXF_D', 'NEC850_MAXF_S',
    'NEC850_MINF_D', 'NEC850_MINF_S', 'NEC850_MOV', 'NEC850_MOVEA',
    'NEC850_MOVHI', 'NEC850_MSUBF_S', 'NEC850_MUL', 'NEC850_MULF_D',
    'NEC850_MULF_S', 'NEC850_MULH', 'NEC850_MULHI', 'NEC850_MULU',
    'NEC850_NEGF_D', 'NEC850_NEGF_S', 'NEC850_NMADDF_S',
    'NEC850_NMSUBF_S', 'NEC850_NOP', 'NEC850_NOT', 'NEC850_NOT1',
    'NEC850_NULL', 'NEC850_OR', 'NEC850_ORI', 'NEC850_POPSP',
    'NEC850_PREF', 'NEC850_PREPARE_i', 'NEC850_PREPARE_sp',
    'NEC850_PUSHSP', 'NEC850_RECIPF_D', 'NEC850_RECIPF_S',
    'NEC850_RETI', 'NEC850_RIE', 'NEC850_RMTRAP', 'NEC850_ROTL',
    'NEC850_RSQRTF_D', 'NEC850_RSQRTF_S', 'NEC850_SAR', 'NEC850_SASF',
    'NEC850_SATADD', 'NEC850_SATSUB', 'NEC850_SATSUBI',
    'NEC850_SATSUBR', 'NEC850_SBF', 'NEC850_SCH0L', 'NEC850_SCH0R',
    'NEC850_SCH1L', 'NEC850_SCH1R', 'NEC850_SET1', 'NEC850_SETF',
    'NEC850_SHL', 'NEC850_SHR', 'NEC850_SLD_B', 'NEC850_SLD_BU',
    'NEC850_SLD_H', 'NEC850_SLD_HU', 'NEC850_SLD_W', 'NEC850_SNOOZE',
    'NEC850_SQRTF_D', 'NEC850_SQRTF_S', 'NEC850_SST_B',
    'NEC850_SST_H', 'NEC850_SST_W', 'NEC850_STC_W', 'NEC850_STFC',
    'NEC850_STFF', 'NEC850_STSR', 'NEC850_STTC_GR', 'NEC850_STTC_PC',
    'NEC850_STTC_SR', 'NEC850_STTC_VR', 'NEC850_STVC_SR',
    'NEC850_ST_B', 'NEC850_ST_DW', 'NEC850_ST_H', 'NEC850_ST_W',
    'NEC850_SUB', 'NEC850_SUBF_D', 'NEC850_SUBF_S', 'NEC850_SUBR',
    'NEC850_SWITCH', 'NEC850_SXB', 'NEC850_SXH', 'NEC850_SYNCE',
    'NEC850_SYNCI', 'NEC850_SYNCM', 'NEC850_SYNCP', 'NEC850_SYSCALL',
    'NEC850_TLBAI', 'NEC850_TLBR', 'NEC850_TLBS', 'NEC850_TLBVI',
    'NEC850_TLBW', 'NEC850_TRAP', 'NEC850_TRFF', 'NEC850_TRFSR',
    'NEC850_TRNCF_DL', 'NEC850_TRNCF_DUL', 'NEC850_TRNCF_DUW',
    'NEC850_TRNCF_DW', 'NEC850_TRNCF_SL', 'NEC850_TRNCF_SUL',
    'NEC850_TRNCF_SUW', 'NEC850_TRNCF_SW', 'NEC850_TRNC_SW',
    'NEC850_TST', 'NEC850_TST1', 'NEC850_XOR', 'NEC850_XORI',
    'NEC850_ZXB', 'NEC850_ZXH', 'NEC_78K_0S_DI', 'NEC_78K_0S_EI',
    'NEC_78K_0S_HALT', 'NEC_78K_0S_STOP', 'NEC_78K_0S_add',
    'NEC_78K_0S_addc', 'NEC_78K_0S_addw', 'NEC_78K_0S_and',
    'NEC_78K_0S_bc', 'NEC_78K_0S_bf', 'NEC_78K_0S_bnc',
    'NEC_78K_0S_bnz', 'NEC_78K_0S_br', 'NEC_78K_0S_bt',
    'NEC_78K_0S_bz', 'NEC_78K_0S_call', 'NEC_78K_0S_callt',
    'NEC_78K_0S_clr1', 'NEC_78K_0S_cmp', 'NEC_78K_0S_cmpw',
    'NEC_78K_0S_dbnz', 'NEC_78K_0S_dec', 'NEC_78K_0S_decw',
    'NEC_78K_0S_inc', 'NEC_78K_0S_incw', 'NEC_78K_0S_last',
    'NEC_78K_0S_mov', 'NEC_78K_0S_movw', 'NEC_78K_0S_nop',
    'NEC_78K_0S_not1', 'NEC_78K_0S_null', 'NEC_78K_0S_or',
    'NEC_78K_0S_pop', 'NEC_78K_0S_push', 'NEC_78K_0S_ret',
    'NEC_78K_0S_reti', 'NEC_78K_0S_rol', 'NEC_78K_0S_rolc',
    'NEC_78K_0S_ror', 'NEC_78K_0S_rorc', 'NEC_78K_0S_set1',
    'NEC_78K_0S_sub', 'NEC_78K_0S_subc', 'NEC_78K_0S_subw',
    'NEC_78K_0S_xch', 'NEC_78K_0S_xchw', 'NEC_78K_0S_xor',
    'NEC_78K_0_DI', 'NEC_78K_0_EI', 'NEC_78K_0_HALT',
    'NEC_78K_0_STOP', 'NEC_78K_0_add', 'NEC_78K_0_addc',
    'NEC_78K_0_addw', 'NEC_78K_0_adjba', 'NEC_78K_0_adjbs',
    'NEC_78K_0_and', 'NEC_78K_0_and1', 'NEC_78K_0_bc', 'NEC_78K_0_bf',
    'NEC_78K_0_bnc', 'NEC_78K_0_bnz', 'NEC_78K_0_br', 'NEC_78K_0_brk',
    'NEC_78K_0_bt', 'NEC_78K_0_btclr', 'NEC_78K_0_bz',
    'NEC_78K_0_call', 'NEC_78K_0_callf', 'NEC_78K_0_callt',
    'NEC_78K_0_clr1', 'NEC_78K_0_cmp', 'NEC_78K_0_cmpw',
    'NEC_78K_0_dbnz', 'NEC_78K_0_dec', 'NEC_78K_0_decw',
    'NEC_78K_0_divuw', 'NEC_78K_0_inc', 'NEC_78K_0_incw',
    'NEC_78K_0_last', 'NEC_78K_0_mov', 'NEC_78K_0_mov1',
    'NEC_78K_0_movw', 'NEC_78K_0_mulu', 'NEC_78K_0_nop',
    'NEC_78K_0_not1', 'NEC_78K_0_null', 'NEC_78K_0_or',
    'NEC_78K_0_or1', 'NEC_78K_0_pop', 'NEC_78K_0_push',
    'NEC_78K_0_ret', 'NEC_78K_0_retb', 'NEC_78K_0_reti',
    'NEC_78K_0_rol', 'NEC_78K_0_rol4', 'NEC_78K_0_rolc',
    'NEC_78K_0_ror', 'NEC_78K_0_ror4', 'NEC_78K_0_rorc',
    'NEC_78K_0_sel', 'NEC_78K_0_set1', 'NEC_78K_0_sub',
    'NEC_78K_0_subc', 'NEC_78K_0_subw', 'NEC_78K_0_xch',
    'NEC_78K_0_xchw', 'NEC_78K_0_xor', 'NEC_78K_0_xor1',
    'NETCONNECTINFOSTRUCT', 'NETINFOSTRUCT', 'NETRESOURCE',
    'NETRESOURCEA', 'NETRESOURCEW', 'NETWORK_APP_INSTANCE_EA',
    'NET_add', 'NET_add_ovf', 'NET_add_ovf_un', 'NET_and',
    'NET_ann_arg', 'NET_ann_call', 'NET_ann_catch', 'NET_ann_data',
    'NET_ann_data_s', 'NET_ann_dead', 'NET_ann_def',
    'NET_ann_hoisted', 'NET_ann_hoisted_call', 'NET_ann_lab',
    'NET_ann_live', 'NET_ann_phi', 'NET_ann_ref', 'NET_ann_ref_s',
    'NET_arglist', 'NET_beq', 'NET_beq_s', 'NET_bge', 'NET_bge_s',
    'NET_bge_un', 'NET_bge_un_s', 'NET_bgt', 'NET_bgt_s',
    'NET_bgt_un', 'NET_bgt_un_s', 'NET_ble', 'NET_ble_s',
    'NET_ble_un', 'NET_ble_un_s', 'NET_blt', 'NET_blt_s',
    'NET_blt_un', 'NET_blt_un_s', 'NET_bne_un', 'NET_bne_un_s',
    'NET_box', 'NET_br', 'NET_br_s', 'NET_break', 'NET_brfalse',
    'NET_brfalse_s', 'NET_brtrue', 'NET_brtrue_s', 'NET_call',
    'NET_calli', 'NET_callvirt', 'NET_castclass', 'NET_ceq',
    'NET_cgt', 'NET_cgt_un', 'NET_ckfinite', 'NET_clt', 'NET_clt_un',
    'NET_constrained_', 'NET_conv_i', 'NET_conv_i1', 'NET_conv_i2',
    'NET_conv_i4', 'NET_conv_i8', 'NET_conv_ovf_i', 'NET_conv_ovf_i1',
    'NET_conv_ovf_i1_un', 'NET_conv_ovf_i2', 'NET_conv_ovf_i2_un',
    'NET_conv_ovf_i4', 'NET_conv_ovf_i4_un', 'NET_conv_ovf_i8',
    'NET_conv_ovf_i8_un', 'NET_conv_ovf_i_un', 'NET_conv_ovf_u',
    'NET_conv_ovf_u1', 'NET_conv_ovf_u1_un', 'NET_conv_ovf_u2',
    'NET_conv_ovf_u2_un', 'NET_conv_ovf_u4', 'NET_conv_ovf_u4_un',
    'NET_conv_ovf_u8', 'NET_conv_ovf_u8_un', 'NET_conv_ovf_u_un',
    'NET_conv_r4', 'NET_conv_r8', 'NET_conv_r_un', 'NET_conv_u',
    'NET_conv_u1', 'NET_conv_u2', 'NET_conv_u4', 'NET_conv_u8',
    'NET_cpblk', 'NET_cpobj', 'NET_div', 'NET_div_un', 'NET_dup',
    'NET_endfilter', 'NET_endfinally', 'NET_initblk', 'NET_initobj',
    'NET_isinst', 'NET_jmp', 'NET_last', 'NET_ldarg', 'NET_ldarg_0',
    'NET_ldarg_1', 'NET_ldarg_2', 'NET_ldarg_3', 'NET_ldarg_s',
    'NET_ldarga', 'NET_ldarga_s', 'NET_ldc_i4', 'NET_ldc_i4_0',
    'NET_ldc_i4_1', 'NET_ldc_i4_2', 'NET_ldc_i4_3', 'NET_ldc_i4_4',
    'NET_ldc_i4_5', 'NET_ldc_i4_6', 'NET_ldc_i4_7', 'NET_ldc_i4_8',
    'NET_ldc_i4_m1', 'NET_ldc_i4_s', 'NET_ldc_i8', 'NET_ldc_r4',
    'NET_ldc_r8', 'NET_ldelem', 'NET_ldelem_i', 'NET_ldelem_i1',
    'NET_ldelem_i2', 'NET_ldelem_i4', 'NET_ldelem_i8',
    'NET_ldelem_r4', 'NET_ldelem_r8', 'NET_ldelem_ref',
    'NET_ldelem_u1', 'NET_ldelem_u2', 'NET_ldelem_u4', 'NET_ldelema',
    'NET_ldfld', 'NET_ldflda', 'NET_ldftn', 'NET_ldind_i',
    'NET_ldind_i1', 'NET_ldind_i2', 'NET_ldind_i4', 'NET_ldind_i8',
    'NET_ldind_r4', 'NET_ldind_r8', 'NET_ldind_ref', 'NET_ldind_u1',
    'NET_ldind_u2', 'NET_ldind_u4', 'NET_ldlen', 'NET_ldloc',
    'NET_ldloc_0', 'NET_ldloc_1', 'NET_ldloc_2', 'NET_ldloc_3',
    'NET_ldloc_s', 'NET_ldloca', 'NET_ldloca_s', 'NET_ldnull',
    'NET_ldobj', 'NET_ldsfld', 'NET_ldsflda', 'NET_ldstr',
    'NET_ldtoken', 'NET_ldvirtftn', 'NET_leave', 'NET_leave_s',
    'NET_localloc', 'NET_mkrefany', 'NET_mul', 'NET_mul_ovf',
    'NET_mul_ovf_un', 'NET_neg', 'NET_newarr', 'NET_newobj',
    'NET_no_', 'NET_nop', 'NET_not', 'NET_null', 'NET_or', 'NET_pop',
    'NET_readonly_', 'NET_refanytype', 'NET_refanyval', 'NET_rem',
    'NET_rem_un', 'NET_ret', 'NET_rethrow', 'NET_shl', 'NET_shr',
    'NET_shr_un', 'NET_sizeof', 'NET_starg', 'NET_starg_s',
    'NET_stelem', 'NET_stelem_i', 'NET_stelem_i1', 'NET_stelem_i2',
    'NET_stelem_i4', 'NET_stelem_i8', 'NET_stelem_r4',
    'NET_stelem_r8', 'NET_stelem_ref', 'NET_stfld', 'NET_stind_i',
    'NET_stind_i1', 'NET_stind_i2', 'NET_stind_i4', 'NET_stind_i8',
    'NET_stind_r4', 'NET_stind_r8', 'NET_stind_ref', 'NET_stloc',
    'NET_stloc_0', 'NET_stloc_1', 'NET_stloc_2', 'NET_stloc_3',
    'NET_stloc_s', 'NET_stobj', 'NET_stsfld', 'NET_sub',
    'NET_sub_ovf', 'NET_sub_ovf_un', 'NET_switch', 'NET_tail_',
    'NET_throw', 'NET_unaligned_', 'NET_unbox', 'NET_unbox_any',
    'NET_volatile_', 'NET_xor', 'NEWTEXTMETRIC', 'NEWTEXTMETRICA',
    'NEWTEXTMETRICEX', 'NEWTEXTMETRICEXA', 'NEWTEXTMETRICEXW',
    'NEWTEXTMETRICW', 'NLSVERSIONINFO', 'NLSVERSIONINFOEX',
    'NLS_FUNCTION', 'NMHDR', 'NN_aaa', 'NN_aad', 'NN_aam', 'NN_aas',
    'NN_adc', 'NN_adcx', 'NN_add', 'NN_addpd', 'NN_addps', 'NN_addsd',
    'NN_addss', 'NN_addsubpd', 'NN_addsubps', 'NN_adox', 'NN_aesdec',
    'NN_aesdeclast', 'NN_aesenc', 'NN_aesenclast', 'NN_aesimc',
    'NN_aeskeygenassist', 'NN_and', 'NN_andn', 'NN_andnpd',
    'NN_andnps', 'NN_andpd', 'NN_andps', 'NN_arpl', 'NN_bextr',
    'NN_blendpd', 'NN_blendps', 'NN_blendvpd', 'NN_blendvps',
    'NN_blsi', 'NN_blsmsk', 'NN_blsr', 'NN_bndcl', 'NN_bndcn',
    'NN_bndcu', 'NN_bndldx', 'NN_bndmk', 'NN_bndmov', 'NN_bndstx',
    'NN_bound', 'NN_bsf', 'NN_bsr', 'NN_bswap', 'NN_bt', 'NN_btc',
    'NN_btr', 'NN_bts', 'NN_bzhi', 'NN_call', 'NN_callfi',
    'NN_callni', 'NN_cbw', 'NN_cdq', 'NN_cdqe', 'NN_clac', 'NN_clc',
    'NN_cld', 'NN_cldemote', 'NN_clflush', 'NN_clflushopt', 'NN_clgi',
    'NN_cli', 'NN_clrssbsy', 'NN_clts', 'NN_clwb', 'NN_clzero',
    'NN_cmc', 'NN_cmova', 'NN_cmovb', 'NN_cmovbe', 'NN_cmovg',
    'NN_cmovge', 'NN_cmovl', 'NN_cmovle', 'NN_cmovnb', 'NN_cmovno',
    'NN_cmovnp', 'NN_cmovns', 'NN_cmovnz', 'NN_cmovo', 'NN_cmovp',
    'NN_cmovs', 'NN_cmovz', 'NN_cmp', 'NN_cmpeqpd', 'NN_cmpeqps',
    'NN_cmpeqsd', 'NN_cmpeqss', 'NN_cmplepd', 'NN_cmpleps',
    'NN_cmplesd', 'NN_cmpless', 'NN_cmpltpd', 'NN_cmpltps',
    'NN_cmpltsd', 'NN_cmpltss', 'NN_cmpneqpd', 'NN_cmpneqps',
    'NN_cmpneqsd', 'NN_cmpneqss', 'NN_cmpnlepd', 'NN_cmpnleps',
    'NN_cmpnlesd', 'NN_cmpnless', 'NN_cmpnltpd', 'NN_cmpnltps',
    'NN_cmpnltsd', 'NN_cmpnltss', 'NN_cmpordpd', 'NN_cmpordps',
    'NN_cmpordsd', 'NN_cmpordss', 'NN_cmppd', 'NN_cmpps', 'NN_cmps',
    'NN_cmpsd', 'NN_cmpss', 'NN_cmpunordpd', 'NN_cmpunordps',
    'NN_cmpunordsd', 'NN_cmpunordss', 'NN_cmpxchg', 'NN_cmpxchg16b',
    'NN_cmpxchg8b', 'NN_comisd', 'NN_comiss', 'NN_cpuid', 'NN_cqo',
    'NN_crc32', 'NN_cvtdq2pd', 'NN_cvtdq2ps', 'NN_cvtpd2dq',
    'NN_cvtpd2pi', 'NN_cvtpd2ps', 'NN_cvtpi2pd', 'NN_cvtpi2ps',
    'NN_cvtps2dq', 'NN_cvtps2pd', 'NN_cvtps2pi', 'NN_cvtsd2si',
    'NN_cvtsd2ss', 'NN_cvtsi2sd', 'NN_cvtsi2ss', 'NN_cvtss2sd',
    'NN_cvtss2si', 'NN_cvttpd2dq', 'NN_cvttpd2pi', 'NN_cvttps2dq',
    'NN_cvttps2pi', 'NN_cvttsd2si', 'NN_cvttss2si', 'NN_cwd',
    'NN_cwde', 'NN_daa', 'NN_das', 'NN_dec', 'NN_div', 'NN_divpd',
    'NN_divps', 'NN_divsd', 'NN_divss', 'NN_dppd', 'NN_dpps',
    'NN_emms', 'NN_encls', 'NN_enclu', 'NN_enclv', 'NN_endbr32',
    'NN_endbr64', 'NN_enqcmd', 'NN_enqcmds', 'NN_enter', 'NN_enterd',
    'NN_enterq', 'NN_enterw', 'NN_extractps', 'NN_extrq', 'NN_f2xm1',
    'NN_fabs', 'NN_fadd', 'NN_faddp', 'NN_fbld', 'NN_fbstp',
    'NN_fchs', 'NN_fclex', 'NN_fcmovb', 'NN_fcmovbe', 'NN_fcmove',
    'NN_fcmovnb', 'NN_fcmovnbe', 'NN_fcmovne', 'NN_fcmovnu',
    'NN_fcmovu', 'NN_fcom', 'NN_fcom2', 'NN_fcomi', 'NN_fcomip',
    'NN_fcomp', 'NN_fcomp3', 'NN_fcomp5', 'NN_fcompp', 'NN_fcos',
    'NN_fdecstp', 'NN_fdisi', 'NN_fdiv', 'NN_fdivp', 'NN_fdivr',
    'NN_fdivrp', 'NN_femms', 'NN_feni', 'NN_ffree', 'NN_ffreep',
    'NN_fiadd', 'NN_ficom', 'NN_ficomp', 'NN_fidiv', 'NN_fidivr',
    'NN_fild', 'NN_fimul', 'NN_fincstp', 'NN_finit', 'NN_fist',
    'NN_fistp', 'NN_fisttp', 'NN_fisub', 'NN_fisubr', 'NN_fld',
    'NN_fld1', 'NN_fldcw', 'NN_fldenv', 'NN_fldl2e', 'NN_fldl2t',
    'NN_fldlg2', 'NN_fldln2', 'NN_fldpi', 'NN_fldz', 'NN_fmul',
    'NN_fmulp', 'NN_fnclex', 'NN_fndisi', 'NN_fneni', 'NN_fninit',
    'NN_fnop', 'NN_fnsave', 'NN_fnstcw', 'NN_fnstenv', 'NN_fnstsw',
    'NN_fpatan', 'NN_fprem', 'NN_fprem1', 'NN_fptan', 'NN_frndint',
    'NN_frstor', 'NN_fsave', 'NN_fscale', 'NN_fsetpm', 'NN_fsin',
    'NN_fsincos', 'NN_fsqrt', 'NN_fst', 'NN_fstcw', 'NN_fstenv',
    'NN_fstp', 'NN_fstp1', 'NN_fstp8', 'NN_fstp9', 'NN_fstsw',
    'NN_fsub', 'NN_fsubp', 'NN_fsubr', 'NN_fsubrp', 'NN_ftst',
    'NN_fucom', 'NN_fucomi', 'NN_fucomip', 'NN_fucomp', 'NN_fucompp',
    'NN_fxam', 'NN_fxch', 'NN_fxch4', 'NN_fxch7', 'NN_fxrstor',
    'NN_fxrstor64', 'NN_fxsave', 'NN_fxsave64', 'NN_fxtract',
    'NN_fyl2x', 'NN_fyl2xp1', 'NN_getsec', 'NN_gf2p8affineinvqb',
    'NN_gf2p8affineqb', 'NN_gf2p8mulb', 'NN_haddpd', 'NN_haddps',
    'NN_hlt', 'NN_hsubpd', 'NN_hsubps', 'NN_icebp', 'NN_idiv',
    'NN_imul', 'NN_in', 'NN_inc', 'NN_incsspd', 'NN_incsspq',
    'NN_ins', 'NN_insertps', 'NN_insertq', 'NN_int', 'NN_int3',
    'NN_into', 'NN_invd', 'NN_invept', 'NN_invlpg', 'NN_invlpga',
    'NN_invpcid', 'NN_invvpid', 'NN_iret', 'NN_iretd', 'NN_iretq',
    'NN_iretw', 'NN_ja', 'NN_jae', 'NN_jb', 'NN_jbe', 'NN_jc',
    'NN_jcxz', 'NN_je', 'NN_jecxz', 'NN_jg', 'NN_jge', 'NN_jl',
    'NN_jle', 'NN_jmp', 'NN_jmpfi', 'NN_jmpni', 'NN_jmpshort',
    'NN_jna', 'NN_jnae', 'NN_jnb', 'NN_jnbe', 'NN_jnc', 'NN_jne',
    'NN_jng', 'NN_jnge', 'NN_jnl', 'NN_jnle', 'NN_jno', 'NN_jnp',
    'NN_jns', 'NN_jnz', 'NN_jo', 'NN_jp', 'NN_jpe', 'NN_jpo',
    'NN_jrcxz', 'NN_js', 'NN_jz', 'NN_kaddb', 'NN_kaddd', 'NN_kaddq',
    'NN_kaddw', 'NN_kandb', 'NN_kandd', 'NN_kandnb', 'NN_kandnd',
    'NN_kandnq', 'NN_kandnw', 'NN_kandq', 'NN_kandw', 'NN_kmovb',
    'NN_kmovd', 'NN_kmovq', 'NN_kmovw', 'NN_knotb', 'NN_knotd',
    'NN_knotq', 'NN_knotw', 'NN_korb', 'NN_kord', 'NN_korq',
    'NN_kortestb', 'NN_kortestd', 'NN_kortestq', 'NN_kortestw',
    'NN_korw', 'NN_kshiftlb', 'NN_kshiftld', 'NN_kshiftlq',
    'NN_kshiftlw', 'NN_kshiftrb', 'NN_kshiftrd', 'NN_kshiftrq',
    'NN_kshiftrw', 'NN_ktestb', 'NN_ktestd', 'NN_ktestq', 'NN_ktestw',
    'NN_kunpckbw', 'NN_kunpckdq', 'NN_kunpckwd', 'NN_kxnorb',
    'NN_kxnord', 'NN_kxnorq', 'NN_kxnorw', 'NN_kxorb', 'NN_kxord',
    'NN_kxorq', 'NN_kxorw', 'NN_lahf', 'NN_lar', 'NN_last',
    'NN_lddqu', 'NN_ldmxcsr', 'NN_lds', 'NN_lea', 'NN_leave',
    'NN_leaved', 'NN_leaveq', 'NN_leavew', 'NN_les', 'NN_lfence',
    'NN_lfs', 'NN_lgdt', 'NN_lgs', 'NN_lidt', 'NN_lldt', 'NN_lmsw',
    'NN_loadall', 'NN_lock', 'NN_lods', 'NN_loop', 'NN_loopd',
    'NN_loopde', 'NN_loopdne', 'NN_loope', 'NN_loopne', 'NN_loopq',
    'NN_loopqe', 'NN_loopqne', 'NN_loopw', 'NN_loopwe', 'NN_loopwne',
    'NN_lsl', 'NN_lss', 'NN_ltr', 'NN_lzcnt', 'NN_maskmovdqu',
    'NN_maskmovq', 'NN_maxpd', 'NN_maxps', 'NN_maxsd', 'NN_maxss',
    'NN_mcommit', 'NN_mfence', 'NN_minpd', 'NN_minps', 'NN_minsd',
    'NN_minss', 'NN_monitor', 'NN_monitorx', 'NN_mov', 'NN_movapd',
    'NN_movaps', 'NN_movbe', 'NN_movd', 'NN_movddup', 'NN_movdir64b',
    'NN_movdiri', 'NN_movdq2q', 'NN_movdqa', 'NN_movdqu',
    'NN_movhlps', 'NN_movhpd', 'NN_movhps', 'NN_movlhps', 'NN_movlpd',
    'NN_movlps', 'NN_movmskpd', 'NN_movmskps', 'NN_movntdq',
    'NN_movntdqa', 'NN_movnti', 'NN_movntpd', 'NN_movntps',
    'NN_movntq', 'NN_movntsd', 'NN_movntss', 'NN_movq', 'NN_movq2dq',
    'NN_movs', 'NN_movsd', 'NN_movshdup', 'NN_movsldup', 'NN_movsp',
    'NN_movss', 'NN_movsx', 'NN_movsxd', 'NN_movupd', 'NN_movups',
    'NN_movzx', 'NN_mpsadbw', 'NN_mul', 'NN_mulpd', 'NN_mulps',
    'NN_mulsd', 'NN_mulss', 'NN_mulx', 'NN_mwait', 'NN_mwaitx',
    'NN_neg', 'NN_nop', 'NN_not', 'NN_null', 'NN_or', 'NN_orpd',
    'NN_orps', 'NN_out', 'NN_outs', 'NN_pabsb', 'NN_pabsd',
    'NN_pabsw', 'NN_packssdw', 'NN_packsswb', 'NN_packusdw',
    'NN_packuswb', 'NN_paddb', 'NN_paddd', 'NN_paddq', 'NN_paddsb',
    'NN_paddsw', 'NN_paddusb', 'NN_paddusw', 'NN_paddw', 'NN_palignr',
    'NN_pand', 'NN_pandn', 'NN_pause', 'NN_pavgb', 'NN_pavgusb',
    'NN_pavgw', 'NN_pblendvb', 'NN_pblendw', 'NN_pclmulqdq',
    'NN_pcmpeqb', 'NN_pcmpeqd', 'NN_pcmpeqq', 'NN_pcmpeqw',
    'NN_pcmpestri', 'NN_pcmpestrm', 'NN_pcmpgtb', 'NN_pcmpgtd',
    'NN_pcmpgtq', 'NN_pcmpgtw', 'NN_pcmpistri', 'NN_pcmpistrm',
    'NN_pcommit', 'NN_pdep', 'NN_pext', 'NN_pextrb', 'NN_pextrd',
    'NN_pextrq', 'NN_pextrw', 'NN_pf2id', 'NN_pf2iw', 'NN_pfacc',
    'NN_pfadd', 'NN_pfcmpeq', 'NN_pfcmpge', 'NN_pfcmpgt', 'NN_pfmax',
    'NN_pfmin', 'NN_pfmul', 'NN_pfnacc', 'NN_pfpnacc', 'NN_pfrcp',
    'NN_pfrcpit1', 'NN_pfrcpit2', 'NN_pfrcpv', 'NN_pfrsqit1',
    'NN_pfrsqrt', 'NN_pfrsqrtv', 'NN_pfsub', 'NN_pfsubr', 'NN_phaddd',
    'NN_phaddsw', 'NN_phaddw', 'NN_phminposuw', 'NN_phsubd',
    'NN_phsubsw', 'NN_phsubw', 'NN_pi2fd', 'NN_pi2fw', 'NN_pinsrb',
    'NN_pinsrd', 'NN_pinsrq', 'NN_pinsrw', 'NN_pmaddubsw',
    'NN_pmaddwd', 'NN_pmaxsb', 'NN_pmaxsd', 'NN_pmaxsw', 'NN_pmaxub',
    'NN_pmaxud', 'NN_pmaxuw', 'NN_pminsb', 'NN_pminsd', 'NN_pminsw',
    'NN_pminub', 'NN_pminud', 'NN_pminuw', 'NN_pmovmskb',
    'NN_pmovsxbd', 'NN_pmovsxbq', 'NN_pmovsxbw', 'NN_pmovsxdq',
    'NN_pmovsxwd', 'NN_pmovsxwq', 'NN_pmovzxbd', 'NN_pmovzxbq',
    'NN_pmovzxbw', 'NN_pmovzxdq', 'NN_pmovzxwd', 'NN_pmovzxwq',
    'NN_pmuldq', 'NN_pmulhrsw', 'NN_pmulhrw', 'NN_pmulhuw',
    'NN_pmulhw', 'NN_pmulld', 'NN_pmullw', 'NN_pmuludq', 'NN_pop',
    'NN_popa', 'NN_popad', 'NN_popaq', 'NN_popaw', 'NN_popcnt',
    'NN_popf', 'NN_popfd', 'NN_popfq', 'NN_popfw', 'NN_por',
    'NN_prefetch', 'NN_prefetchnta', 'NN_prefetcht0', 'NN_prefetcht1',
    'NN_prefetcht2', 'NN_prefetchw', 'NN_prefetchwt1', 'NN_psadbw',
    'NN_pshufb', 'NN_pshufd', 'NN_pshufhw', 'NN_pshuflw', 'NN_pshufw',
    'NN_psignb', 'NN_psignd', 'NN_psignw', 'NN_pslld', 'NN_pslldq',
    'NN_psllq', 'NN_psllw', 'NN_psrad', 'NN_psraw', 'NN_psrld',
    'NN_psrldq', 'NN_psrlq', 'NN_psrlw', 'NN_psubb', 'NN_psubd',
    'NN_psubq', 'NN_psubsb', 'NN_psubsw', 'NN_psubusb', 'NN_psubusw',
    'NN_psubw', 'NN_pswapd', 'NN_ptest', 'NN_ptwrite', 'NN_punpckhbw',
    'NN_punpckhdq', 'NN_punpckhqdq', 'NN_punpckhwd', 'NN_punpcklbw',
    'NN_punpckldq', 'NN_punpcklqdq', 'NN_punpcklwd', 'NN_push',
    'NN_pusha', 'NN_pushad', 'NN_pushaq', 'NN_pushaw', 'NN_pushf',
    'NN_pushfd', 'NN_pushfq', 'NN_pushfw', 'NN_pxor', 'NN_rcl',
    'NN_rcpps', 'NN_rcpss', 'NN_rcr', 'NN_rdfsbase', 'NN_rdgsbase',
    'NN_rdmsr', 'NN_rdpid', 'NN_rdpkru', 'NN_rdpmc', 'NN_rdpru',
    'NN_rdrand', 'NN_rdseed', 'NN_rdsspd', 'NN_rdsspq', 'NN_rdtsc',
    'NN_rdtscp', 'NN_rep', 'NN_repe', 'NN_repne', 'NN_retf',
    'NN_retfd', 'NN_retfq', 'NN_retfw', 'NN_retn', 'NN_retnd',
    'NN_retnq', 'NN_retnw', 'NN_rol', 'NN_ror', 'NN_rorx',
    'NN_roundpd', 'NN_roundps', 'NN_roundsd', 'NN_roundss', 'NN_rsdc',
    'NN_rsldt', 'NN_rsm', 'NN_rsqrtps', 'NN_rsqrtss', 'NN_rstorssp',
    'NN_rsts', 'NN_sahf', 'NN_sal', 'NN_sar', 'NN_sarx',
    'NN_saveprevssp', 'NN_sbb', 'NN_scas', 'NN_serialize', 'NN_seta',
    'NN_setae', 'NN_setalc', 'NN_setb', 'NN_setbe', 'NN_setc',
    'NN_sete', 'NN_setg', 'NN_setge', 'NN_setl', 'NN_setle',
    'NN_setna', 'NN_setnae', 'NN_setnb', 'NN_setnbe', 'NN_setnc',
    'NN_setne', 'NN_setng', 'NN_setnge', 'NN_setnl', 'NN_setnle',
    'NN_setno', 'NN_setnp', 'NN_setns', 'NN_setnz', 'NN_seto',
    'NN_setp', 'NN_setpe', 'NN_setpo', 'NN_sets', 'NN_setssbsy',
    'NN_setz', 'NN_sfence', 'NN_sgdt', 'NN_sha1msg1', 'NN_sha1msg2',
    'NN_sha1nexte', 'NN_sha1rnds4', 'NN_sha256msg1', 'NN_sha256msg2',
    'NN_sha256rnds2', 'NN_shl', 'NN_shld', 'NN_shlx', 'NN_shr',
    'NN_shrd', 'NN_shrx', 'NN_shufpd', 'NN_shufps', 'NN_sidt',
    'NN_skinit', 'NN_sldt', 'NN_smsw', 'NN_sqrtpd', 'NN_sqrtps',
    'NN_sqrtsd', 'NN_sqrtss', 'NN_stac', 'NN_stc', 'NN_std',
    'NN_stgi', 'NN_sti', 'NN_stmxcsr', 'NN_stos', 'NN_str', 'NN_sub',
    'NN_subpd', 'NN_subps', 'NN_subsd', 'NN_subss', 'NN_svdc',
    'NN_svldt', 'NN_svts', 'NN_swapgs', 'NN_syscall', 'NN_sysenter',
    'NN_sysexit', 'NN_sysret', 'NN_test', 'NN_tpause', 'NN_tzcnt',
    'NN_ucomisd', 'NN_ucomiss', 'NN_ud0', 'NN_ud1', 'NN_ud2',
    'NN_umonitor', 'NN_umwait', 'NN_unpckhpd', 'NN_unpckhps',
    'NN_unpcklpd', 'NN_unpcklps', 'NN_v4fmaddps', 'NN_v4fmaddss',
    'NN_v4fnmaddps', 'NN_v4fnmaddss', 'NN_vaddpd', 'NN_vaddps',
    'NN_vaddsd', 'NN_vaddss', 'NN_vaddsubpd', 'NN_vaddsubps',
    'NN_vaesdec', 'NN_vaesdeclast', 'NN_vaesenc', 'NN_vaesenclast',
    'NN_vaesimc', 'NN_vaeskeygenassist', 'NN_valignd', 'NN_valignq',
    'NN_vandnpd', 'NN_vandnps', 'NN_vandpd', 'NN_vandps',
    'NN_vblendmpd', 'NN_vblendmps', 'NN_vblendpd', 'NN_vblendps',
    'NN_vblendvpd', 'NN_vblendvps', 'NN_vbroadcastf128',
    'NN_vbroadcastf32x2', 'NN_vbroadcastf32x4', 'NN_vbroadcastf32x8',
    'NN_vbroadcastf64x2', 'NN_vbroadcastf64x4', 'NN_vbroadcasti128',
    'NN_vbroadcasti32x2', 'NN_vbroadcasti32x4', 'NN_vbroadcasti32x8',
    'NN_vbroadcasti64x2', 'NN_vbroadcasti64x4', 'NN_vbroadcastsd',
    'NN_vbroadcastss', 'NN_vcmpeq_ospd', 'NN_vcmpeq_osps',
    'NN_vcmpeq_ossd', 'NN_vcmpeq_osss', 'NN_vcmpeq_uqpd',
    'NN_vcmpeq_uqps', 'NN_vcmpeq_uqsd', 'NN_vcmpeq_uqss',
    'NN_vcmpeq_uspd', 'NN_vcmpeq_usps', 'NN_vcmpeq_ussd',
    'NN_vcmpeq_usss', 'NN_vcmpeqpd', 'NN_vcmpeqps', 'NN_vcmpeqsd',
    'NN_vcmpeqss', 'NN_vcmpfalse_ospd', 'NN_vcmpfalse_osps',
    'NN_vcmpfalse_ossd', 'NN_vcmpfalse_osss', 'NN_vcmpfalsepd',
    'NN_vcmpfalseps', 'NN_vcmpfalsesd', 'NN_vcmpfalsess',
    'NN_vcmpge_oqpd', 'NN_vcmpge_oqps', 'NN_vcmpge_oqsd',
    'NN_vcmpge_oqss', 'NN_vcmpgepd', 'NN_vcmpgeps', 'NN_vcmpgesd',
    'NN_vcmpgess', 'NN_vcmpgt_oqpd', 'NN_vcmpgt_oqps',
    'NN_vcmpgt_oqsd', 'NN_vcmpgt_oqss', 'NN_vcmpgtpd', 'NN_vcmpgtps',
    'NN_vcmpgtsd', 'NN_vcmpgtss', 'NN_vcmple_oqpd', 'NN_vcmple_oqps',
    'NN_vcmple_oqsd', 'NN_vcmple_oqss', 'NN_vcmplepd', 'NN_vcmpleps',
    'NN_vcmplesd', 'NN_vcmpless', 'NN_vcmplt_oqpd', 'NN_vcmplt_oqps',
    'NN_vcmplt_oqsd', 'NN_vcmplt_oqss', 'NN_vcmpltpd', 'NN_vcmpltps',
    'NN_vcmpltsd', 'NN_vcmpltss', 'NN_vcmpneq_oqpd',
    'NN_vcmpneq_oqps', 'NN_vcmpneq_oqsd', 'NN_vcmpneq_oqss',
    'NN_vcmpneq_ospd', 'NN_vcmpneq_osps', 'NN_vcmpneq_ossd',
    'NN_vcmpneq_osss', 'NN_vcmpneq_uspd', 'NN_vcmpneq_usps',
    'NN_vcmpneq_ussd', 'NN_vcmpneq_usss', 'NN_vcmpneqpd',
    'NN_vcmpneqps', 'NN_vcmpneqsd', 'NN_vcmpneqss', 'NN_vcmpnge_uqpd',
    'NN_vcmpnge_uqps', 'NN_vcmpnge_uqsd', 'NN_vcmpnge_uqss',
    'NN_vcmpngepd', 'NN_vcmpngeps', 'NN_vcmpngesd', 'NN_vcmpngess',
    'NN_vcmpngt_uqpd', 'NN_vcmpngt_uqps', 'NN_vcmpngt_uqsd',
    'NN_vcmpngt_uqss', 'NN_vcmpngtpd', 'NN_vcmpngtps', 'NN_vcmpngtsd',
    'NN_vcmpngtss', 'NN_vcmpnle_uqpd', 'NN_vcmpnle_uqps',
    'NN_vcmpnle_uqsd', 'NN_vcmpnle_uqss', 'NN_vcmpnlepd',
    'NN_vcmpnleps', 'NN_vcmpnlesd', 'NN_vcmpnless', 'NN_vcmpnlt_uqpd',
    'NN_vcmpnlt_uqps', 'NN_vcmpnlt_uqsd', 'NN_vcmpnlt_uqss',
    'NN_vcmpnltpd', 'NN_vcmpnltps', 'NN_vcmpnltsd', 'NN_vcmpnltss',
    'NN_vcmpord_spd', 'NN_vcmpord_sps', 'NN_vcmpord_ssd',
    'NN_vcmpord_sss', 'NN_vcmpordpd', 'NN_vcmpordps', 'NN_vcmpordsd',
    'NN_vcmpordss', 'NN_vcmppd', 'NN_vcmpps', 'NN_vcmpsd',
    'NN_vcmpss', 'NN_vcmptrue_uspd', 'NN_vcmptrue_usps',
    'NN_vcmptrue_ussd', 'NN_vcmptrue_usss', 'NN_vcmptruepd',
    'NN_vcmptrueps', 'NN_vcmptruesd', 'NN_vcmptruess',
    'NN_vcmpunord_spd', 'NN_vcmpunord_sps', 'NN_vcmpunord_ssd',
    'NN_vcmpunord_sss', 'NN_vcmpunordpd', 'NN_vcmpunordps',
    'NN_vcmpunordsd', 'NN_vcmpunordss', 'NN_vcomisd', 'NN_vcomiss',
    'NN_vcompresspd', 'NN_vcompressps', 'NN_vcvtdq2pd',
    'NN_vcvtdq2ps', 'NN_vcvtpd2dq', 'NN_vcvtpd2ps', 'NN_vcvtpd2qq',
    'NN_vcvtpd2udq', 'NN_vcvtpd2uqq', 'NN_vcvtph2ps', 'NN_vcvtps2dq',
    'NN_vcvtps2pd', 'NN_vcvtps2ph', 'NN_vcvtps2qq', 'NN_vcvtps2udq',
    'NN_vcvtps2uqq', 'NN_vcvtqq2pd', 'NN_vcvtqq2ps', 'NN_vcvtsd2si',
    'NN_vcvtsd2ss', 'NN_vcvtsd2usi', 'NN_vcvtsi2sd', 'NN_vcvtsi2ss',
    'NN_vcvtss2sd', 'NN_vcvtss2si', 'NN_vcvtss2usi', 'NN_vcvttpd2dq',
    'NN_vcvttpd2qq', 'NN_vcvttpd2udq', 'NN_vcvttpd2uqq',
    'NN_vcvttps2dq', 'NN_vcvttps2qq', 'NN_vcvttps2udq',
    'NN_vcvttps2uqq', 'NN_vcvttsd2si', 'NN_vcvttsd2usi',
    'NN_vcvttss2si', 'NN_vcvttss2usi', 'NN_vcvtudq2pd',
    'NN_vcvtudq2ps', 'NN_vcvtuqq2pd', 'NN_vcvtuqq2ps',
    'NN_vcvtusi2sd', 'NN_vcvtusi2ss', 'NN_vdbpsadbw', 'NN_vdivpd',
    'NN_vdivps', 'NN_vdivsd', 'NN_vdivss', 'NN_vdppd', 'NN_vdpps',
    'NN_verr', 'NN_verw', 'NN_vexp2pd', 'NN_vexp2ps', 'NN_vexpandpd',
    'NN_vexpandps', 'NN_vextractf128', 'NN_vextractf32x4',
    'NN_vextractf32x8', 'NN_vextractf64x2', 'NN_vextractf64x4',
    'NN_vextracti128', 'NN_vextracti32x4', 'NN_vextracti32x8',
    'NN_vextracti64x2', 'NN_vextracti64x4', 'NN_vextractps',
    'NN_vfixupimmpd', 'NN_vfixupimmps', 'NN_vfixupimmsd',
    'NN_vfixupimmss', 'NN_vfmadd132pd', 'NN_vfmadd132ps',
    'NN_vfmadd132sd', 'NN_vfmadd132ss', 'NN_vfmadd213pd',
    'NN_vfmadd213ps', 'NN_vfmadd213sd', 'NN_vfmadd213ss',
    'NN_vfmadd231pd', 'NN_vfmadd231ps', 'NN_vfmadd231sd',
    'NN_vfmadd231ss', 'NN_vfmaddpd', 'NN_vfmaddps', 'NN_vfmaddsd',
    'NN_vfmaddss', 'NN_vfmaddsub132pd', 'NN_vfmaddsub132ps',
    'NN_vfmaddsub213pd', 'NN_vfmaddsub213ps', 'NN_vfmaddsub231pd',
    'NN_vfmaddsub231ps', 'NN_vfmaddsubpd', 'NN_vfmaddsubps',
    'NN_vfmsub132pd', 'NN_vfmsub132ps', 'NN_vfmsub132sd',
    'NN_vfmsub132ss', 'NN_vfmsub213pd', 'NN_vfmsub213ps',
    'NN_vfmsub213sd', 'NN_vfmsub213ss', 'NN_vfmsub231pd',
    'NN_vfmsub231ps', 'NN_vfmsub231sd', 'NN_vfmsub231ss',
    'NN_vfmsubadd132pd', 'NN_vfmsubadd132ps', 'NN_vfmsubadd213pd',
    'NN_vfmsubadd213ps', 'NN_vfmsubadd231pd', 'NN_vfmsubadd231ps',
    'NN_vfmsubaddpd', 'NN_vfmsubaddps', 'NN_vfmsubpd', 'NN_vfmsubps',
    'NN_vfmsubsd', 'NN_vfmsubss', 'NN_vfnmadd132pd',
    'NN_vfnmadd132ps', 'NN_vfnmadd132sd', 'NN_vfnmadd132ss',
    'NN_vfnmadd213pd', 'NN_vfnmadd213ps', 'NN_vfnmadd213sd',
    'NN_vfnmadd213ss', 'NN_vfnmadd231pd', 'NN_vfnmadd231ps',
    'NN_vfnmadd231sd', 'NN_vfnmadd231ss', 'NN_vfnmaddpd',
    'NN_vfnmaddps', 'NN_vfnmaddsd', 'NN_vfnmaddss', 'NN_vfnmsub132pd',
    'NN_vfnmsub132ps', 'NN_vfnmsub132sd', 'NN_vfnmsub132ss',
    'NN_vfnmsub213pd', 'NN_vfnmsub213ps', 'NN_vfnmsub213sd',
    'NN_vfnmsub213ss', 'NN_vfnmsub231pd', 'NN_vfnmsub231ps',
    'NN_vfnmsub231sd', 'NN_vfnmsub231ss', 'NN_vfnmsubpd',
    'NN_vfnmsubps', 'NN_vfnmsubsd', 'NN_vfnmsubss', 'NN_vfpclasspd',
    'NN_vfpclassps', 'NN_vfpclasssd', 'NN_vfpclassss', 'NN_vfrczpd',
    'NN_vfrczps', 'NN_vfrczsd', 'NN_vfrczss', 'NN_vgatherdpd',
    'NN_vgatherdps', 'NN_vgatherpf0dpd', 'NN_vgatherpf0dps',
    'NN_vgatherpf0qpd', 'NN_vgatherpf0qps', 'NN_vgatherpf1dpd',
    'NN_vgatherpf1dps', 'NN_vgatherpf1qpd', 'NN_vgatherpf1qps',
    'NN_vgatherqpd', 'NN_vgatherqps', 'NN_vgetexppd', 'NN_vgetexpps',
    'NN_vgetexpsd', 'NN_vgetexpss', 'NN_vgetmantpd', 'NN_vgetmantps',
    'NN_vgetmantsd', 'NN_vgetmantss', 'NN_vgf2p8affineinvqb',
    'NN_vgf2p8affineqb', 'NN_vgf2p8mulb', 'NN_vhaddpd', 'NN_vhaddps',
    'NN_vhsubpd', 'NN_vhsubps', 'NN_vinsertf128', 'NN_vinsertf32x4',
    'NN_vinsertf32x8', 'NN_vinsertf64x2', 'NN_vinsertf64x4',
    'NN_vinserti128', 'NN_vinserti32x4', 'NN_vinserti32x8',
    'NN_vinserti64x2', 'NN_vinserti64x4', 'NN_vinsertps', 'NN_vlddqu',
    'NN_vldmxcsr', 'NN_vmaskmovdqu', 'NN_vmaskmovpd', 'NN_vmaskmovps',
    'NN_vmaxpd', 'NN_vmaxps', 'NN_vmaxsd', 'NN_vmaxss', 'NN_vmcall',
    'NN_vmclear', 'NN_vmcli', 'NN_vmcpuid', 'NN_vmdxdsbl',
    'NN_vmdxenbl', 'NN_vmexit', 'NN_vmfunc', 'NN_vmgetinfo',
    'NN_vmhlt', 'NN_vminpd', 'NN_vminps', 'NN_vminsd', 'NN_vminss',
    'NN_vmiretd', 'NN_vmlaunch', 'NN_vmload', 'NN_vmmcall',
    'NN_vmovapd', 'NN_vmovaps', 'NN_vmovd', 'NN_vmovddup',
    'NN_vmovdqa', 'NN_vmovdqa32', 'NN_vmovdqa64', 'NN_vmovdqu',
    'NN_vmovdqu16', 'NN_vmovdqu32', 'NN_vmovdqu64', 'NN_vmovdqu8',
    'NN_vmovhlps', 'NN_vmovhpd', 'NN_vmovhps', 'NN_vmovlhps',
    'NN_vmovlpd', 'NN_vmovlps', 'NN_vmovmskpd', 'NN_vmovmskps',
    'NN_vmovntdq', 'NN_vmovntdqa', 'NN_vmovntpd', 'NN_vmovntps',
    'NN_vmovq', 'NN_vmovsd', 'NN_vmovshdup', 'NN_vmovsldup',
    'NN_vmovss', 'NN_vmovupd', 'NN_vmovups', 'NN_vmpopfd',
    'NN_vmpsadbw', 'NN_vmptrld', 'NN_vmptrst', 'NN_vmpushfd',
    'NN_vmread', 'NN_vmresume', 'NN_vmrun', 'NN_vmsave', 'NN_vmsdte',
    'NN_vmsetinfo', 'NN_vmsgdt', 'NN_vmsidt', 'NN_vmsldt',
    'NN_vmsplaf', 'NN_vmsti', 'NN_vmstr', 'NN_vmulpd', 'NN_vmulps',
    'NN_vmulsd', 'NN_vmulss', 'NN_vmwrite', 'NN_vmxoff', 'NN_vmxon',
    'NN_vorpd', 'NN_vorps', 'NN_vp4dpwssd', 'NN_vp4dpwssds',
    'NN_vpabsb', 'NN_vpabsd', 'NN_vpabsq', 'NN_vpabsw',
    'NN_vpackssdw', 'NN_vpacksswb', 'NN_vpackusdw', 'NN_vpackuswb',
    'NN_vpaddb', 'NN_vpaddd', 'NN_vpaddq', 'NN_vpaddsb', 'NN_vpaddsw',
    'NN_vpaddusb', 'NN_vpaddusw', 'NN_vpaddw', 'NN_vpalignr',
    'NN_vpand', 'NN_vpandd', 'NN_vpandn', 'NN_vpandnd', 'NN_vpandnq',
    'NN_vpandq', 'NN_vpavgb', 'NN_vpavgw', 'NN_vpblendd',
    'NN_vpblendmb', 'NN_vpblendmd', 'NN_vpblendmq', 'NN_vpblendmw',
    'NN_vpblendvb', 'NN_vpblendw', 'NN_vpbroadcastb',
    'NN_vpbroadcastd', 'NN_vpbroadcastmb2q', 'NN_vpbroadcastmw2d',
    'NN_vpbroadcastq', 'NN_vpbroadcastw', 'NN_vpcext',
    'NN_vpclmulqdq', 'NN_vpcmov', 'NN_vpcmpb', 'NN_vpcmpd',
    'NN_vpcmpeqb', 'NN_vpcmpeqd', 'NN_vpcmpeqq', 'NN_vpcmpequd',
    'NN_vpcmpequq', 'NN_vpcmpeqw', 'NN_vpcmpestri', 'NN_vpcmpestrm',
    'NN_vpcmpgtb', 'NN_vpcmpgtd', 'NN_vpcmpgtq', 'NN_vpcmpgtw',
    'NN_vpcmpistri', 'NN_vpcmpistrm', 'NN_vpcmpled', 'NN_vpcmpleq',
    'NN_vpcmpleud', 'NN_vpcmpleuq', 'NN_vpcmpltd', 'NN_vpcmpltq',
    'NN_vpcmpltud', 'NN_vpcmpltuq', 'NN_vpcmpneqd', 'NN_vpcmpneqq',
    'NN_vpcmpnequd', 'NN_vpcmpnequq', 'NN_vpcmpnled', 'NN_vpcmpnleq',
    'NN_vpcmpnleud', 'NN_vpcmpnleuq', 'NN_vpcmpnltd', 'NN_vpcmpnltq',
    'NN_vpcmpnltud', 'NN_vpcmpnltuq', 'NN_vpcmpq', 'NN_vpcmpub',
    'NN_vpcmpud', 'NN_vpcmpuq', 'NN_vpcmpuw', 'NN_vpcmpw',
    'NN_vpcomb', 'NN_vpcomd', 'NN_vpcomeqb', 'NN_vpcomeqd',
    'NN_vpcomeqq', 'NN_vpcomequb', 'NN_vpcomequd', 'NN_vpcomequq',
    'NN_vpcomequw', 'NN_vpcomeqw', 'NN_vpcomfalseb', 'NN_vpcomfalsed',
    'NN_vpcomfalseq', 'NN_vpcomfalseub', 'NN_vpcomfalseud',
    'NN_vpcomfalseuq', 'NN_vpcomfalseuw', 'NN_vpcomfalsew',
    'NN_vpcomgeb', 'NN_vpcomged', 'NN_vpcomgeq', 'NN_vpcomgeub',
    'NN_vpcomgeud', 'NN_vpcomgeuq', 'NN_vpcomgeuw', 'NN_vpcomgew',
    'NN_vpcomgtb', 'NN_vpcomgtd', 'NN_vpcomgtq', 'NN_vpcomgtub',
    'NN_vpcomgtud', 'NN_vpcomgtuq', 'NN_vpcomgtuw', 'NN_vpcomgtw',
    'NN_vpcomleb', 'NN_vpcomled', 'NN_vpcomleq', 'NN_vpcomleub',
    'NN_vpcomleud', 'NN_vpcomleuq', 'NN_vpcomleuw', 'NN_vpcomlew',
    'NN_vpcomltb', 'NN_vpcomltd', 'NN_vpcomltq', 'NN_vpcomltub',
    'NN_vpcomltud', 'NN_vpcomltuq', 'NN_vpcomltuw', 'NN_vpcomltw',
    'NN_vpcomneqb', 'NN_vpcomneqd', 'NN_vpcomneqq', 'NN_vpcomnequb',
    'NN_vpcomnequd', 'NN_vpcomnequq', 'NN_vpcomnequw', 'NN_vpcomneqw',
    'NN_vpcompressd', 'NN_vpcompressq', 'NN_vpcomq', 'NN_vpcomtrueb',
    'NN_vpcomtrued', 'NN_vpcomtrueq', 'NN_vpcomtrueub',
    'NN_vpcomtrueud', 'NN_vpcomtrueuq', 'NN_vpcomtrueuw',
    'NN_vpcomtruew', 'NN_vpcomub', 'NN_vpcomud', 'NN_vpcomuq',
    'NN_vpcomuw', 'NN_vpcomw', 'NN_vpconflictd', 'NN_vpconflictq',
    'NN_vperm2f128', 'NN_vperm2i128', 'NN_vpermb', 'NN_vpermd',
    'NN_vpermi2b', 'NN_vpermi2d', 'NN_vpermi2pd', 'NN_vpermi2ps',
    'NN_vpermi2q', 'NN_vpermi2w', 'NN_vpermil2pd', 'NN_vpermil2ps',
    'NN_vpermilpd', 'NN_vpermilps', 'NN_vpermpd', 'NN_vpermps',
    'NN_vpermq', 'NN_vpermt2b', 'NN_vpermt2d', 'NN_vpermt2pd',
    'NN_vpermt2ps', 'NN_vpermt2q', 'NN_vpermt2w', 'NN_vpermw',
    'NN_vpexpandd', 'NN_vpexpandq', 'NN_vpextrb', 'NN_vpextrd',
    'NN_vpextrq', 'NN_vpextrw', 'NN_vpgatherdd', 'NN_vpgatherdq',
    'NN_vpgatherqd', 'NN_vpgatherqq', 'NN_vphaddbd', 'NN_vphaddbq',
    'NN_vphaddbw', 'NN_vphaddd', 'NN_vphadddq', 'NN_vphaddsw',
    'NN_vphaddubd', 'NN_vphaddubq', 'NN_vphaddubw', 'NN_vphaddudq',
    'NN_vphadduwd', 'NN_vphadduwq', 'NN_vphaddw', 'NN_vphaddwd',
    'NN_vphaddwq', 'NN_vphminposuw', 'NN_vphsubbw', 'NN_vphsubd',
    'NN_vphsubdq', 'NN_vphsubsw', 'NN_vphsubw', 'NN_vphsubwd',
    'NN_vpinsrb', 'NN_vpinsrd', 'NN_vpinsrq', 'NN_vpinsrw',
    'NN_vplzcntd', 'NN_vplzcntq', 'NN_vpmacsdd', 'NN_vpmacsdqh',
    'NN_vpmacsdql', 'NN_vpmacssdd', 'NN_vpmacssdqh', 'NN_vpmacssdql',
    'NN_vpmacsswd', 'NN_vpmacssww', 'NN_vpmacswd', 'NN_vpmacsww',
    'NN_vpmadcsswd', 'NN_vpmadcswd', 'NN_vpmadd52huq',
    'NN_vpmadd52luq', 'NN_vpmaddubsw', 'NN_vpmaddwd', 'NN_vpmaskmovd',
    'NN_vpmaskmovq', 'NN_vpmaxsb', 'NN_vpmaxsd', 'NN_vpmaxsq',
    'NN_vpmaxsw', 'NN_vpmaxub', 'NN_vpmaxud', 'NN_vpmaxuq',
    'NN_vpmaxuw', 'NN_vpminsb', 'NN_vpminsd', 'NN_vpminsq',
    'NN_vpminsw', 'NN_vpminub', 'NN_vpminud', 'NN_vpminuq',
    'NN_vpminuw', 'NN_vpmovb2m', 'NN_vpmovd2m', 'NN_vpmovdb',
    'NN_vpmovdw', 'NN_vpmovm2b', 'NN_vpmovm2d', 'NN_vpmovm2q',
    'NN_vpmovm2w', 'NN_vpmovmskb', 'NN_vpmovq2m', 'NN_vpmovqb',
    'NN_vpmovqd', 'NN_vpmovqw', 'NN_vpmovsdb', 'NN_vpmovsdw',
    'NN_vpmovsqb', 'NN_vpmovsqd', 'NN_vpmovsqw', 'NN_vpmovswb',
    'NN_vpmovsxbd', 'NN_vpmovsxbq', 'NN_vpmovsxbw', 'NN_vpmovsxdq',
    'NN_vpmovsxwd', 'NN_vpmovsxwq', 'NN_vpmovusdb', 'NN_vpmovusdw',
    'NN_vpmovusqb', 'NN_vpmovusqd', 'NN_vpmovusqw', 'NN_vpmovuswb',
    'NN_vpmovw2m', 'NN_vpmovwb', 'NN_vpmovzxbd', 'NN_vpmovzxbq',
    'NN_vpmovzxbw', 'NN_vpmovzxdq', 'NN_vpmovzxwd', 'NN_vpmovzxwq',
    'NN_vpmuldq', 'NN_vpmulhrsw', 'NN_vpmulhuw', 'NN_vpmulhw',
    'NN_vpmulld', 'NN_vpmullq', 'NN_vpmullw', 'NN_vpmultishiftqb',
    'NN_vpmuludq', 'NN_vpopcntd', 'NN_vpopcntq', 'NN_vpor',
    'NN_vpord', 'NN_vporq', 'NN_vpperm', 'NN_vprold', 'NN_vprolq',
    'NN_vprolvd', 'NN_vprolvq', 'NN_vprord', 'NN_vprorq',
    'NN_vprorvd', 'NN_vprorvq', 'NN_vprotb', 'NN_vprotd', 'NN_vprotq',
    'NN_vprotw', 'NN_vpsadbw', 'NN_vpscatterdd', 'NN_vpscatterdq',
    'NN_vpscatterqd', 'NN_vpscatterqq', 'NN_vpshab', 'NN_vpshad',
    'NN_vpshaq', 'NN_vpshaw', 'NN_vpshlb', 'NN_vpshld', 'NN_vpshlq',
    'NN_vpshlw', 'NN_vpshufb', 'NN_vpshufd', 'NN_vpshufhw',
    'NN_vpshuflw', 'NN_vpsignb', 'NN_vpsignd', 'NN_vpsignw',
    'NN_vpslld', 'NN_vpslldq', 'NN_vpsllq', 'NN_vpsllvd',
    'NN_vpsllvq', 'NN_vpsllvw', 'NN_vpsllw', 'NN_vpsrad', 'NN_vpsraq',
    'NN_vpsravd', 'NN_vpsravq', 'NN_vpsravw', 'NN_vpsraw',
    'NN_vpsrld', 'NN_vpsrldq', 'NN_vpsrlq', 'NN_vpsrlvd',
    'NN_vpsrlvq', 'NN_vpsrlvw', 'NN_vpsrlw', 'NN_vpsubb', 'NN_vpsubd',
    'NN_vpsubq', 'NN_vpsubsb', 'NN_vpsubsw', 'NN_vpsubusb',
    'NN_vpsubusw', 'NN_vpsubw', 'NN_vpternlogd', 'NN_vpternlogq',
    'NN_vptest', 'NN_vptestmb', 'NN_vptestmd', 'NN_vptestmq',
    'NN_vptestmw', 'NN_vptestnmb', 'NN_vptestnmd', 'NN_vptestnmq',
    'NN_vptestnmw', 'NN_vpunpckhbw', 'NN_vpunpckhdq',
    'NN_vpunpckhqdq', 'NN_vpunpckhwd', 'NN_vpunpcklbw',
    'NN_vpunpckldq', 'NN_vpunpcklqdq', 'NN_vpunpcklwd', 'NN_vpxor',
    'NN_vpxord', 'NN_vpxorq', 'NN_vrangepd', 'NN_vrangeps',
    'NN_vrangesd', 'NN_vrangess', 'NN_vrcp14pd', 'NN_vrcp14ps',
    'NN_vrcp14sd', 'NN_vrcp14ss', 'NN_vrcp28pd', 'NN_vrcp28ps',
    'NN_vrcp28sd', 'NN_vrcp28ss', 'NN_vrcpps', 'NN_vrcpss',
    'NN_vreducepd', 'NN_vreduceps', 'NN_vreducesd', 'NN_vreducess',
    'NN_vrndscalepd', 'NN_vrndscaleps', 'NN_vrndscalesd',
    'NN_vrndscaless', 'NN_vroundpd', 'NN_vroundps', 'NN_vroundsd',
    'NN_vroundss', 'NN_vrsqrt14pd', 'NN_vrsqrt14ps', 'NN_vrsqrt14sd',
    'NN_vrsqrt14ss', 'NN_vrsqrt28pd', 'NN_vrsqrt28ps',
    'NN_vrsqrt28sd', 'NN_vrsqrt28ss', 'NN_vrsqrtps', 'NN_vrsqrtss',
    'NN_vscalefpd', 'NN_vscalefps', 'NN_vscalefsd', 'NN_vscalefss',
    'NN_vscatterdpd', 'NN_vscatterdps', 'NN_vscatterpf0dpd',
    'NN_vscatterpf0dps', 'NN_vscatterpf0qpd', 'NN_vscatterpf0qps',
    'NN_vscatterpf1dpd', 'NN_vscatterpf1dps', 'NN_vscatterpf1qpd',
    'NN_vscatterpf1qps', 'NN_vscatterqpd', 'NN_vscatterqps',
    'NN_vshuff32x4', 'NN_vshuff64x2', 'NN_vshufi32x4',
    'NN_vshufi64x2', 'NN_vshufpd', 'NN_vshufps', 'NN_vsqrtpd',
    'NN_vsqrtps', 'NN_vsqrtsd', 'NN_vsqrtss', 'NN_vstmxcsr',
    'NN_vsubpd', 'NN_vsubps', 'NN_vsubsd', 'NN_vsubss', 'NN_vtestpd',
    'NN_vtestps', 'NN_vucomisd', 'NN_vucomiss', 'NN_vunpckhpd',
    'NN_vunpckhps', 'NN_vunpcklpd', 'NN_vunpcklps', 'NN_vxorpd',
    'NN_vxorps', 'NN_vzeroall', 'NN_vzeroupper', 'NN_wait',
    'NN_wbinvd', 'NN_wrfsbase', 'NN_wrgsbase', 'NN_wrmsr',
    'NN_wrpkru', 'NN_wrssd', 'NN_wrssq', 'NN_wrussd', 'NN_wrussq',
    'NN_xabort', 'NN_xadd', 'NN_xbegin', 'NN_xchg', 'NN_xend',
    'NN_xgetbv', 'NN_xlat', 'NN_xor', 'NN_xorpd', 'NN_xorps',
    'NN_xresldtrk', 'NN_xrstor', 'NN_xrstors', 'NN_xsave',
    'NN_xsavec', 'NN_xsaveopt', 'NN_xsaves', 'NN_xsetbv',
    'NN_xsusldtrk', 'NN_xtest', 'NONCLIENTMETRICS',
    'NONCLIENTMETRICSA', 'NONCLIENTMETRICSW', 'NON_PAGED_DEBUG_INFO',
    'NORM_FORM', 'NORM_FORM__enumvalues', 'NOTHING_CHANGED',
    'NOTIFICATION_MASK', 'NO_ACCESS', 'NO_EVENT', 'NPABC',
    'NPABCFLOAT', 'NPBITMAP', 'NPCANDIDATEFORM', 'NPCANDIDATELIST',
    'NPCHARSETINFO', 'NPCOMPOSITIONFORM', 'NPCWPRETSTRUCT',
    'NPCWPSTRUCT', 'NPDEBUGHOOKINFO', 'NPDEVMODE', 'NPDEVMODEA',
    'NPDEVMODEW', 'NPEVENTMSG', 'NPEVENTMSGMSG', 'NPEXTLOGFONT',
    'NPEXTLOGFONTA', 'NPEXTLOGFONTW', 'NPEXTLOGPEN', 'NPEXTLOGPEN32',
    'NPIMECHARPOSITION', 'NPIMEMENUITEMINFO', 'NPIMEMENUITEMINFOA',
    'NPIMEMENUITEMINFOW', 'NPLOGBRUSH', 'NPLOGBRUSH32', 'NPLOGFONT',
    'NPLOGFONTA', 'NPLOGFONTW', 'NPLOGPALETTE', 'NPLOGPEN', 'NPMSG',
    'NPNEWTEXTMETRIC', 'NPNEWTEXTMETRICA', 'NPNEWTEXTMETRICW',
    'NPOUTLINETEXTMETRIC', 'NPOUTLINETEXTMETRICA',
    'NPOUTLINETEXTMETRICW', 'NPPAINTSTRUCT', 'NPPATTERN',
    'NPPELARRAY', 'NPPOINT', 'NPPOLYTEXT', 'NPPOLYTEXTA',
    'NPPOLYTEXTW', 'NPRECONVERTSTRING', 'NPRECT', 'NPREGISTERWORD',
    'NPREGISTERWORDA', 'NPREGISTERWORDW', 'NPRGBTRIPLE', 'NPRGNDATA',
    'NPSTR', 'NPSTYLEBUF', 'NPSTYLEBUFA', 'NPSTYLEBUFW',
    'NPTEXTMETRIC', 'NPTEXTMETRICA', 'NPTEXTMETRICW', 'NPWNDCLASS',
    'NPWNDCLASSA', 'NPWNDCLASSEX', 'NPWNDCLASSEXA', 'NPWNDCLASSEXW',
    'NPWNDCLASSW', 'NSP_NOTIFY_APC', 'NSP_NOTIFY_EVENT',
    'NSP_NOTIFY_HWND', 'NSP_NOTIFY_IMMEDIATELY', 'NSP_NOTIFY_PORT',
    'NT_TIB', 'NT_TIB32', 'NT_TIB64', 'NUMA_NODE_RELATIONSHIP',
    'NUMBERFMT', 'NUMBERFMTA', 'NUMBERFMTW', 'NV_MEMORY_RANGE',
    'NWPSTR', 'NormalError', 'NormalizationC', 'NormalizationD',
    'NormalizationKC', 'NormalizationKD', 'NormalizationOther',
    'NotifyUserModeLegacyPowerEvent', 'NotifyUserPowerSetting',
    'OAK_Dsp_add', 'OAK_Dsp_addh', 'OAK_Dsp_addl', 'OAK_Dsp_addv',
    'OAK_Dsp_alb_tst0', 'OAK_Dsp_alb_tst1', 'OAK_Dsp_alm_msu',
    'OAK_Dsp_alm_tst0', 'OAK_Dsp_alm_tst1', 'OAK_Dsp_and',
    'OAK_Dsp_banke', 'OAK_Dsp_bkrep', 'OAK_Dsp_br', 'OAK_Dsp_br_u',
    'OAK_Dsp_break', 'OAK_Dsp_brr', 'OAK_Dsp_brr_u', 'OAK_Dsp_call',
    'OAK_Dsp_calla', 'OAK_Dsp_callr', 'OAK_Dsp_chng', 'OAK_Dsp_clr',
    'OAK_Dsp_clrr', 'OAK_Dsp_cmp', 'OAK_Dsp_cmpu', 'OAK_Dsp_cmpv',
    'OAK_Dsp_cntx', 'OAK_Dsp_copy', 'OAK_Dsp_dec', 'OAK_Dsp_dint',
    'OAK_Dsp_divs', 'OAK_Dsp_eint', 'OAK_Dsp_exp', 'OAK_Dsp_inc',
    'OAK_Dsp_last', 'OAK_Dsp_lim', 'OAK_Dsp_load', 'OAK_Dsp_lpg',
    'OAK_Dsp_maa', 'OAK_Dsp_maasu', 'OAK_Dsp_mac', 'OAK_Dsp_macsu',
    'OAK_Dsp_macus', 'OAK_Dsp_macuu', 'OAK_Dsp_max', 'OAK_Dsp_maxd',
    'OAK_Dsp_min', 'OAK_Dsp_mod_reserved', 'OAK_Dsp_modr',
    'OAK_Dsp_mov', 'OAK_Dsp_mov_eu', 'OAK_Dsp_movd', 'OAK_Dsp_movp',
    'OAK_Dsp_movr', 'OAK_Dsp_movs', 'OAK_Dsp_movsi', 'OAK_Dsp_mpy',
    'OAK_Dsp_mpyi', 'OAK_Dsp_mpysu', 'OAK_Dsp_msu', 'OAK_Dsp_neg',
    'OAK_Dsp_nop', 'OAK_Dsp_norm', 'OAK_Dsp_not', 'OAK_Dsp_null',
    'OAK_Dsp_or', 'OAK_Dsp_pacr', 'OAK_Dsp_pop', 'OAK_Dsp_proc',
    'OAK_Dsp_push', 'OAK_Dsp_rep', 'OAK_Dsp_ret', 'OAK_Dsp_ret_u',
    'OAK_Dsp_retd', 'OAK_Dsp_reti', 'OAK_Dsp_reti_u', 'OAK_Dsp_retid',
    'OAK_Dsp_rets', 'OAK_Dsp_rnd', 'OAK_Dsp_rol', 'OAK_Dsp_ror',
    'OAK_Dsp_rst', 'OAK_Dsp_set', 'OAK_Dsp_shfc', 'OAK_Dsp_shfi',
    'OAK_Dsp_shl', 'OAK_Dsp_shl4', 'OAK_Dsp_shr', 'OAK_Dsp_shr4',
    'OAK_Dsp_sqr', 'OAK_Dsp_sqra', 'OAK_Dsp_sub', 'OAK_Dsp_subh',
    'OAK_Dsp_subl', 'OAK_Dsp_subv', 'OAK_Dsp_swap', 'OAK_Dsp_trap',
    'OAK_Dsp_tstb', 'OAK_Dsp_xor', 'OBJECTID', 'OBJECT_TYPE_LIST',
    'OFFER_PRIORITY', 'OFILE_ASM', 'OFILE_DIF', 'OFILE_EXE',
    'OFILE_IDC', 'OFILE_LST', 'OFILE_MAP', 'OFSTRUCT',
    'OLDFONTENUMPROCA', 'OLDFONTENUMPROCW',
    'OPERATION_END_PARAMETERS', 'OPERATION_ID',
    'OPERATION_START_PARAMETERS', 'ORIENTATION_PREFERENCE',
    'ORIENTATION_PREFERENCE_LANDSCAPE',
    'ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED',
    'ORIENTATION_PREFERENCE_NONE', 'ORIENTATION_PREFERENCE_PORTRAIT',
    'ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED', 'OSVERSIONINFO',
    'OSVERSIONINFOA', 'OSVERSIONINFOEX', 'OSVERSIONINFOEXA',
    'OSVERSIONINFOEXW', 'OSVERSIONINFOW',
    'OS_DEPLOYEMENT_STATE_VALUES',
    'OS_DEPLOYEMENT_STATE_VALUES__enumvalues',
    'OS_DEPLOYMENT_COMPACT', 'OS_DEPLOYMENT_STANDARD',
    'OUTLINETEXTMETRIC', 'OUTLINETEXTMETRICA', 'OUTLINETEXTMETRICW',
    'OUTPUT_DEBUG_STRING_INFO',
    'OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK', 'OVERLAPPED',
    'OVERLAPPED_ENTRY', 'ObjectIdType', 'PABC', 'PABCFLOAT',
    'PACCESS_ALLOWED_ACE', 'PACCESS_ALLOWED_CALLBACK_ACE',
    'PACCESS_ALLOWED_CALLBACK_OBJECT_ACE',
    'PACCESS_ALLOWED_OBJECT_ACE', 'PACCESS_DENIED_ACE',
    'PACCESS_DENIED_CALLBACK_ACE',
    'PACCESS_DENIED_CALLBACK_OBJECT_ACE', 'PACCESS_DENIED_OBJECT_ACE',
    'PACCESS_MASK', 'PACCESS_REASONS', 'PACCESS_TOKEN', 'PACE_HEADER',
    'PACKEDEVENTINFO', 'PACL', 'PACL_REVISION_INFORMATION',
    'PACL_SIZE_INFORMATION', 'PACTCTX', 'PACTCTXA', 'PACTCTXW',
    'PACTCTX_SECTION_KEYED_DATA', 'PACTCTX_SECTION_KEYED_DATA_2600',
    'PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA',
    'PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION',
    'PACTIVATION_CONTEXT_BASIC_INFORMATION',
    'PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION',
    'PACTIVATION_CONTEXT_DETAILED_INFORMATION',
    'PACTIVATION_CONTEXT_QUERY_INDEX',
    'PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION', 'PADDRINFOA',
    'PADDRINFOEX', 'PADDRINFOEX2A', 'PADDRINFOEX2W', 'PADDRINFOEX3',
    'PADDRINFOEX4', 'PADDRINFOEXA', 'PADDRINFOEXW', 'PADDRINFOT',
    'PADDRINFOW', 'PADMINISTRATOR_POWER_POLICY', 'PAFPROTOCOLS',
    'PAINTSTRUCT', 'PALETTEENTRY', 'PALTTABINFO', 'PANOSE',
    'PAPCFUNC', 'PAPPLICATIONLAUNCH_SETTING_VALUE',
    'PAPP_MEMORY_INFORMATION', 'PAR_STATE',
    'PASSEMBLY_FILE_DETAILED_INFORMATION', 'PATH_TYPE_CMD',
    'PATH_TYPE_ID0', 'PATH_TYPE_IDB', 'PATTERN', 'PAUDIT_EVENT_TYPE',
    'PAXESLIST', 'PAXESLISTA', 'PAXESLISTW', 'PAXISINFO',
    'PAXISINFOA', 'PAXISINFOW', 'PBAD_MEMORY_CALLBACK_ROUTINE',
    'PBATTERY_REPORTING_SCALE', 'PBITMAP', 'PBITMAPCOREHEADER',
    'PBITMAPCOREINFO', 'PBITMAPFILEHEADER', 'PBITMAPINFO',
    'PBITMAPINFOHEADER', 'PBITMAPV4HEADER', 'PBITMAPV5HEADER',
    'PBLENDFUNCTION', 'PBOOL', 'PBOOLEAN', 'PBSMINFO', 'PBYTE',
    'PBY_HANDLE_FILE_INFORMATION', 'PCACHE_DESCRIPTOR',
    'PCACHE_RELATIONSHIP', 'PCACTCTX', 'PCACTCTXA', 'PCACTCTXW',
    'PCACTCTX_SECTION_KEYED_DATA', 'PCACTCTX_SECTION_KEYED_DATA_2600',
    'PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA',
    'PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION',
    'PCACTIVATION_CONTEXT_BASIC_INFORMATION',
    'PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION',
    'PCACTIVATION_CONTEXT_DETAILED_INFORMATION',
    'PCACTIVATION_CONTEXT_QUERY_INDEX',
    'PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION', 'PCANDIDATEFORM',
    'PCANDIDATELIST', 'PCASSEMBLY_FILE_DETAILED_INFORMATION', 'PCCH',
    'PCCOMPATIBILITY_CONTEXT_ELEMENT', 'PCFG_CALL_TARGET_INFO',
    'PCGESTUREINFO', 'PCH', 'PCHANGEFILTERSTRUCT', 'PCHAR',
    'PCHARSETINFO', 'PCHAR_INFO', 'PCIMAGE_DELAYLOAD_DESCRIPTOR',
    'PCIMAGE_POLICY_ENTRY', 'PCIMAGE_POLICY_METADATA', 'PCLAIMS_BLOB',
    'PCLAIM_SECURITY_ATTRIBUTES_INFORMATION',
    'PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE',
    'PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE',
    'PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1',
    'PCLAIM_SECURITY_ATTRIBUTE_V1', 'PCMSGHDR', 'PCM_POWER_DATA',
    'PCNZCH', 'PCNZTCH', 'PCNZWCH', 'PCOLORADJUSTMENT',
    'PCOMBOBOXINFO', 'PCOMPAREITEMSTRUCT', 'PCOMPARTMENT_ID',
    'PCOMPATIBILITY_CONTEXT_ELEMENT', 'PCOMPOSITIONFORM',
    'PCONDITION_VARIABLE', 'PCONSOLE_CURSOR_INFO',
    'PCONSOLE_FONT_INFO', 'PCONSOLE_FONT_INFOEX',
    'PCONSOLE_HISTORY_INFO', 'PCONSOLE_READCONSOLE_CONTROL',
    'PCONSOLE_SCREEN_BUFFER_INFO', 'PCONSOLE_SCREEN_BUFFER_INFOEX',
    'PCONSOLE_SELECTION_INFO', 'PCONTEXT', 'PCOORD',
    'PCOPYDATASTRUCT', 'PCOPYFILE2_PROGRESS_ROUTINE',
    'PCORRELATION_VECTOR', 'PCPU_SET_INFORMATION_TYPE',
    'PCRAWINPUTDEVICE', 'PCREATEFILE2_EXTENDED_PARAMETERS',
    'PCREDIRECTION_DESCRIPTOR', 'PCREDIRECTION_FUNCTION_DESCRIPTOR',
    'PCRITICAL_SECTION', 'PCRITICAL_SECTION_DEBUG',
    'PCRM_PROTOCOL_ID', 'PCSADDR_INFO', 'PCSTR', 'PCTCH',
    'PCTOUCHINPUT', 'PCTSTR', 'PCUCSCHAR', 'PCUCSSTR', 'PCUNZTCH',
    'PCUNZWCH', 'PCURSORINFO', 'PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG',
    'PCUTSTR', 'PCUUCSCHAR', 'PCUUCSSTR', 'PCUWCHAR', 'PCUWSTR',
    'PCUZZTSTR', 'PCUZZWSTR', 'PCWCH', 'PCWCHAR', 'PCWPRETSTRUCT',
    'PCWPSTRUCT', 'PCWSTR', 'PCZPCSTR', 'PCZPCWSTR', 'PCZPSTR',
    'PCZPWSTR', 'PCZZSTR', 'PCZZTSTR', 'PCZZWSTR', 'PDEBUGHOOKINFO',
    'PDELETEITEMSTRUCT', 'PDESIGNVECTOR', 'PDEVICE_POWER_STATE',
    'PDEVMODE', 'PDEVMODEA', 'PDEVMODEW', 'PDIBSECTION',
    'PDISPATCHER_CONTEXT', 'PDISPLAY_DEVICE', 'PDISPLAY_DEVICEA',
    'PDISPLAY_DEVICEW', 'PDLGITEMTEMPLATE', 'PDLGITEMTEMPLATEA',
    'PDLGITEMTEMPLATEW', 'PDLL_DIRECTORY_COOKIE', 'PDRAWITEMSTRUCT',
    'PDRAWPATRECT', 'PDROPSTRUCT', 'PDWORD', 'PDWORD32', 'PDWORD64',
    'PDWORDLONG', 'PDWORD_PTR', 'PDYNAMIC_TIME_ZONE_INFORMATION',
    'PELARRAY', 'PEMR', 'PEMRABORTPATH', 'PEMRALPHABLEND',
    'PEMRANGLEARC', 'PEMRARC', 'PEMRARCTO', 'PEMRBEGINPATH',
    'PEMRBITBLT', 'PEMRCHORD', 'PEMRCLOSEFIGURE',
    'PEMRCOLORCORRECTPALETTE', 'PEMRCOLORMATCHTOTARGET',
    'PEMRCREATEBRUSHINDIRECT', 'PEMRCREATECOLORSPACE',
    'PEMRCREATECOLORSPACEW', 'PEMRCREATEDIBPATTERNBRUSHPT',
    'PEMRCREATEMONOBRUSH', 'PEMRCREATEPALETTE', 'PEMRCREATEPEN',
    'PEMRDELETECOLORSPACE', 'PEMRDELETEOBJECT', 'PEMRDRAWESCAPE',
    'PEMRELLIPSE', 'PEMRENDPATH', 'PEMREOF', 'PEMREXCLUDECLIPRECT',
    'PEMREXTCREATEFONTINDIRECTW', 'PEMREXTCREATEPEN', 'PEMREXTESCAPE',
    'PEMREXTFLOODFILL', 'PEMREXTSELECTCLIPRGN', 'PEMREXTTEXTOUTA',
    'PEMREXTTEXTOUTW', 'PEMRFILLPATH', 'PEMRFILLRGN',
    'PEMRFLATTENPATH', 'PEMRFORMAT', 'PEMRFRAMERGN', 'PEMRGDICOMMENT',
    'PEMRGLSBOUNDEDRECORD', 'PEMRGLSRECORD', 'PEMRGRADIENTFILL',
    'PEMRINTERSECTCLIPRECT', 'PEMRINVERTRGN', 'PEMRLINETO',
    'PEMRMASKBLT', 'PEMRMODIFYWORLDTRANSFORM', 'PEMRMOVETOEX',
    'PEMRNAMEDESCAPE', 'PEMROFFSETCLIPRGN', 'PEMRPAINTRGN', 'PEMRPIE',
    'PEMRPIXELFORMAT', 'PEMRPLGBLT', 'PEMRPOLYBEZIER',
    'PEMRPOLYBEZIER16', 'PEMRPOLYBEZIERTO', 'PEMRPOLYBEZIERTO16',
    'PEMRPOLYDRAW', 'PEMRPOLYDRAW16', 'PEMRPOLYGON', 'PEMRPOLYGON16',
    'PEMRPOLYLINE', 'PEMRPOLYLINE16', 'PEMRPOLYLINETO',
    'PEMRPOLYLINETO16', 'PEMRPOLYPOLYGON', 'PEMRPOLYPOLYGON16',
    'PEMRPOLYPOLYLINE', 'PEMRPOLYPOLYLINE16', 'PEMRPOLYTEXTOUTA',
    'PEMRPOLYTEXTOUTW', 'PEMRREALIZEPALETTE', 'PEMRRECTANGLE',
    'PEMRRESIZEPALETTE', 'PEMRRESTOREDC', 'PEMRROUNDRECT',
    'PEMRSAVEDC', 'PEMRSCALEVIEWPORTEXTEX', 'PEMRSCALEWINDOWEXTEX',
    'PEMRSELECTCLIPPATH', 'PEMRSELECTCOLORSPACE', 'PEMRSELECTOBJECT',
    'PEMRSELECTPALETTE', 'PEMRSETARCDIRECTION', 'PEMRSETBKCOLOR',
    'PEMRSETBKMODE', 'PEMRSETBRUSHORGEX', 'PEMRSETCOLORADJUSTMENT',
    'PEMRSETCOLORSPACE', 'PEMRSETDIBITSTODEVICE', 'PEMRSETICMMODE',
    'PEMRSETICMPROFILE', 'PEMRSETICMPROFILEA', 'PEMRSETICMPROFILEW',
    'PEMRSETLAYOUT', 'PEMRSETMAPMODE', 'PEMRSETMAPPERFLAGS',
    'PEMRSETMETARGN', 'PEMRSETMITERLIMIT', 'PEMRSETPALETTEENTRIES',
    'PEMRSETPIXELV', 'PEMRSETPOLYFILLMODE', 'PEMRSETROP2',
    'PEMRSETSTRETCHBLTMODE', 'PEMRSETTEXTALIGN', 'PEMRSETTEXTCOLOR',
    'PEMRSETVIEWPORTEXTEX', 'PEMRSETVIEWPORTORGEX',
    'PEMRSETWINDOWEXTEX', 'PEMRSETWINDOWORGEX',
    'PEMRSETWORLDTRANSFORM', 'PEMRSTRETCHBLT', 'PEMRSTRETCHDIBITS',
    'PEMRSTROKEANDFILLPATH', 'PEMRSTROKEPATH', 'PEMRTEXT',
    'PEMRTRANSPARENTBLT', 'PEMRWIDENPATH', 'PENCLAVE_CREATE_INFO_SGX',
    'PENCLAVE_CREATE_INFO_VBS', 'PENCLAVE_CREATE_INFO_VBS_BASIC',
    'PENCLAVE_INIT_INFO_SGX', 'PENCLAVE_INIT_INFO_VBS',
    'PENCLAVE_INIT_INFO_VBS_BASIC', 'PENCLAVE_LOAD_DATA_VBS_BASIC',
    'PENCLAVE_ROUTINE', 'PENCLAVE_TARGET_FUNCTION', 'PENHMETAHEADER',
    'PENHMETARECORD', 'PENLISTMENT_BASIC_INFORMATION',
    'PENLISTMENT_CRM_INFORMATION', 'PENUMLOGFONTEXDV',
    'PENUMLOGFONTEXDVA', 'PENUMLOGFONTEXDVW', 'PENUMTEXTMETRIC',
    'PENUMTEXTMETRICA', 'PENUMTEXTMETRICW', 'PENUMUILANG',
    'PEN_FLAGS', 'PEN_MASK', 'PERFORMANCE_DATA', 'PEVENTLOGRECORD',
    'PEVENTMSG', 'PEVENTMSGMSG', 'PEVENTSFORLOGFILE',
    'PEXCEPTION_FILTER', 'PEXCEPTION_POINTERS', 'PEXCEPTION_RECORD',
    'PEXCEPTION_RECORD32', 'PEXCEPTION_RECORD64',
    'PEXCEPTION_REGISTRATION_RECORD', 'PEXCEPTION_ROUTINE',
    'PEXECUTION_STATE', 'PEXTLOGFONT', 'PEXTLOGFONTA', 'PEXTLOGFONTW',
    'PEXTLOGPEN', 'PEXTLOGPEN32', 'PFD_SET', 'PFE_EXPORT_FUNC',
    'PFE_IMPORT_FUNC', 'PFIBER_CALLOUT_ROUTINE',
    'PFIBER_START_ROUTINE', 'PFILEMUIINFO', 'PFILETIME',
    'PFILE_ALIGNMENT_INFO', 'PFILE_ALLOCATION_INFO',
    'PFILE_ATTRIBUTE_TAG_INFO', 'PFILE_BASIC_INFO',
    'PFILE_CASE_SENSITIVE_INFO', 'PFILE_COMPRESSION_INFO',
    'PFILE_DISPOSITION_INFO', 'PFILE_DISPOSITION_INFO_EX',
    'PFILE_END_OF_FILE_INFO', 'PFILE_FULL_DIR_INFO', 'PFILE_ID_128',
    'PFILE_ID_BOTH_DIR_INFO', 'PFILE_ID_EXTD_DIR_INFO',
    'PFILE_ID_INFO', 'PFILE_ID_TYPE', 'PFILE_INFO_BY_HANDLE_CLASS',
    'PFILE_IO_PRIORITY_HINT_INFO', 'PFILE_NAME_INFO',
    'PFILE_NOTIFY_EXTENDED_INFORMATION', 'PFILE_NOTIFY_INFORMATION',
    'PFILE_REMOTE_PROTOCOL_INFO', 'PFILE_RENAME_INFO',
    'PFILE_SEGMENT_ELEMENT', 'PFILE_STANDARD_INFO',
    'PFILE_STORAGE_INFO', 'PFILE_STREAM_INFO', 'PFIRMWARE_TYPE',
    'PFLASHWINFO', 'PFLOAT', 'PFLOAT128', 'PFLOWSPEC',
    'PFLS_CALLBACK_FUNCTION', 'PFN_SC_NOTIFY_CALLBACK',
    'PFOCUS_EVENT_RECORD', 'PFONTSIGNATURE', 'PFPO_DATA',
    'PGENERIC_MAPPING', 'PGESTURECONFIG', 'PGESTUREINFO',
    'PGESTURENOTIFYSTRUCT', 'PGET_MODULE_HANDLE_EXA',
    'PGET_MODULE_HANDLE_EXW', 'PGET_RUNTIME_FUNCTION_CALLBACK',
    'PGET_SYSTEM_WOW64_DIRECTORY_A', 'PGET_SYSTEM_WOW64_DIRECTORY_W',
    'PGLYPHMETRICSFLOAT', 'PGLYPHSET', 'PGRADIENT_RECT',
    'PGRADIENT_TRIANGLE', 'PGROUP_AFFINITY', 'PGROUP_FILTER',
    'PGROUP_RELATIONSHIP', 'PGROUP_REQ', 'PGROUP_SOURCE_REQ',
    'PGUITHREADINFO', 'PHALF_PTR', 'PHANDEDNESS', 'PHANDLE',
    'PHANDLER_ROUTINE', 'PHANDLETABLE', 'PHARDWAREHOOKSTRUCT',
    'PHARDWAREINPUT', 'PHARDWARE_COUNTER_DATA',
    'PHARDWARE_COUNTER_TYPE', 'PHDEVNOTIFY',
    'PHEAP_OPTIMIZE_RESOURCES_INFORMATION', 'PHEAP_SUMMARY',
    'PHELPWININFO', 'PHELPWININFOA', 'PHELPWININFOW',
    'PHIBERFILE_BUCKET', 'PHIBERFILE_BUCKET_SIZE', 'PHKEY',
    'PHOSTENT', 'PHPOWERNOTIFY', 'PIC16_ADD', 'PIC16_ADDC',
    'PIC16_AND', 'PIC16_ASR', 'PIC16_BCLR', 'PIC16_BRA',
    'PIC16_BREAK', 'PIC16_BSET', 'PIC16_BSW', 'PIC16_BTG',
    'PIC16_BTSC', 'PIC16_BTSS', 'PIC16_BTST', 'PIC16_BTSTS',
    'PIC16_CALL', 'PIC16_CLR', 'PIC16_CLR1', 'PIC16_CLRWDT',
    'PIC16_COM', 'PIC16_CP', 'PIC16_CP0', 'PIC16_CPB', 'PIC16_CPBEQ',
    'PIC16_CPBGT', 'PIC16_CPBLT', 'PIC16_CPBNE', 'PIC16_CPSEQ',
    'PIC16_CPSGT', 'PIC16_CPSLT', 'PIC16_CPSNE', 'PIC16_DAWB',
    'PIC16_DEC', 'PIC16_DEC2', 'PIC16_DISI', 'PIC16_DIV',
    'PIC16_DIVF', 'PIC16_DO', 'PIC16_ED', 'PIC16_EDAC', 'PIC16_EXCH',
    'PIC16_FBCL', 'PIC16_FEX', 'PIC16_FF1L', 'PIC16_FF1R',
    'PIC16_GOTO', 'PIC16_INC', 'PIC16_INC2', 'PIC16_IOR', 'PIC16_LAC',
    'PIC16_LNK', 'PIC16_LSR', 'PIC16_MAC', 'PIC16_MOV',
    'PIC16_MOVPAG', 'PIC16_MOVSAC', 'PIC16_MPY', 'PIC16_MSC',
    'PIC16_MUL', 'PIC16_MULW', 'PIC16_NEG', 'PIC16_NOP', 'PIC16_NOPR',
    'PIC16_POP', 'PIC16_PUSH', 'PIC16_PWRSAV', 'PIC16_RCALL',
    'PIC16_REPEAT', 'PIC16_RESET', 'PIC16_RETFIE', 'PIC16_RETLW',
    'PIC16_RETURN', 'PIC16_RLC', 'PIC16_RLNC', 'PIC16_RRC',
    'PIC16_RRNC', 'PIC16_SAC', 'PIC16_SE', 'PIC16_SETM',
    'PIC16_SFTAC', 'PIC16_SL', 'PIC16_SSTEP', 'PIC16_SUB',
    'PIC16_SUBB', 'PIC16_SUBBR', 'PIC16_SUBR', 'PIC16_SWAP',
    'PIC16_TBLRDH', 'PIC16_TBLRDL', 'PIC16_TBLWTH', 'PIC16_TBLWTL',
    'PIC16_ULNK', 'PIC16_URUN', 'PIC16_XOR', 'PIC16_ZE', 'PIC16_last',
    'PIC16_null', 'PICMP_ERROR_INFO', 'PICONINFO', 'PICONINFOEX',
    'PICONINFOEXA', 'PICONINFOEXW', 'PICONMETRICS', 'PICONMETRICSA',
    'PICONMETRICSW', 'PIC_addcf', 'PIC_adddcf', 'PIC_addfsr',
    'PIC_addlw', 'PIC_addwf', 'PIC_addwf3', 'PIC_addwfc',
    'PIC_addwfc3', 'PIC_andlw', 'PIC_andwf', 'PIC_andwf3', 'PIC_asrf',
    'PIC_b', 'PIC_bc', 'PIC_bc1', 'PIC_bcf', 'PIC_bcf3', 'PIC_bdc',
    'PIC_bn1', 'PIC_bnc', 'PIC_bnc1', 'PIC_bndc', 'PIC_bnn1',
    'PIC_bnov1', 'PIC_bnz', 'PIC_bnz1', 'PIC_bov1', 'PIC_bra',
    'PIC_bra1', 'PIC_brw', 'PIC_bsf', 'PIC_bsf3', 'PIC_btfsc',
    'PIC_btfsc3', 'PIC_btfss', 'PIC_btfss3', 'PIC_btg3', 'PIC_bz',
    'PIC_bz1', 'PIC_call', 'PIC_call2', 'PIC_callw', 'PIC_clrc',
    'PIC_clrdc', 'PIC_clrf', 'PIC_clrf2', 'PIC_clrw', 'PIC_clrwdt',
    'PIC_clrz', 'PIC_comf', 'PIC_comf3', 'PIC_cpfseq2', 'PIC_cpfsgt2',
    'PIC_cpfslt2', 'PIC_daw0', 'PIC_dcfsnz3', 'PIC_decf', 'PIC_decf3',
    'PIC_decfsz', 'PIC_decfsz3', 'PIC_goto', 'PIC_incf', 'PIC_incf3',
    'PIC_incfsz', 'PIC_incfsz3', 'PIC_infsnz3', 'PIC_iorlw',
    'PIC_iorwf', 'PIC_iorwf3', 'PIC_last', 'PIC_lfsr2', 'PIC_lslf',
    'PIC_lsrf', 'PIC_movf', 'PIC_movf3', 'PIC_movff2', 'PIC_movfw',
    'PIC_moviw', 'PIC_movlb', 'PIC_movlb1', 'PIC_movlp', 'PIC_movlw',
    'PIC_movwf', 'PIC_movwf2', 'PIC_movwi', 'PIC_mullw1',
    'PIC_mulwf2', 'PIC_negf', 'PIC_negf2', 'PIC_nop', 'PIC_null',
    'PIC_option', 'PIC_pop0', 'PIC_push0', 'PIC_rcall1', 'PIC_reset',
    'PIC_reset0', 'PIC_retfie', 'PIC_retfie1', 'PIC_retlw',
    'PIC_return', 'PIC_return1', 'PIC_rlcf3', 'PIC_rlf', 'PIC_rlncf3',
    'PIC_rrcf3', 'PIC_rrf', 'PIC_rrncf3', 'PIC_setc', 'PIC_setdc',
    'PIC_setf2', 'PIC_setz', 'PIC_skpc', 'PIC_skpdc', 'PIC_skpnc',
    'PIC_skpndc', 'PIC_skpnz', 'PIC_skpz', 'PIC_sleep', 'PIC_subcf',
    'PIC_subfwb3', 'PIC_sublw', 'PIC_subwf', 'PIC_subwf3',
    'PIC_subwfb', 'PIC_subwfb3', 'PIC_swapf', 'PIC_swapf3',
    'PIC_tblrd0', 'PIC_tblrd0m', 'PIC_tblrd0p', 'PIC_tblrdp0',
    'PIC_tblwt0', 'PIC_tblwt0m', 'PIC_tblwt0p', 'PIC_tblwtp0',
    'PIC_tris', 'PIC_tstf', 'PIC_tstfsz2', 'PIC_xorlw', 'PIC_xorwf',
    'PIC_xorwf3', 'PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY',
    'PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY',
    'PIMAGE_ARCHITECTURE_ENTRY', 'PIMAGE_ARCHITECTURE_HEADER',
    'PIMAGE_ARCHIVE_MEMBER_HEADER',
    'PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY',
    'PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY', 'PIMAGE_AUX_SYMBOL',
    'PIMAGE_AUX_SYMBOL_EX', 'PIMAGE_AUX_SYMBOL_TOKEN_DEF',
    'PIMAGE_BASE_RELOCATION', 'PIMAGE_BOUND_FORWARDER_REF',
    'PIMAGE_BOUND_IMPORT_DESCRIPTOR',
    'PIMAGE_CE_RUNTIME_FUNCTION_ENTRY', 'PIMAGE_COFF_SYMBOLS_HEADER',
    'PIMAGE_COR20_HEADER', 'PIMAGE_DATA_DIRECTORY',
    'PIMAGE_DEBUG_DIRECTORY', 'PIMAGE_DEBUG_MISC',
    'PIMAGE_DELAYLOAD_DESCRIPTOR', 'PIMAGE_DOS_HEADER',
    'PIMAGE_DYNAMIC_RELOCATION', 'PIMAGE_DYNAMIC_RELOCATION32',
    'PIMAGE_DYNAMIC_RELOCATION32_V2', 'PIMAGE_DYNAMIC_RELOCATION64',
    'PIMAGE_DYNAMIC_RELOCATION64_V2',
    'PIMAGE_DYNAMIC_RELOCATION_TABLE', 'PIMAGE_DYNAMIC_RELOCATION_V2',
    'PIMAGE_ENCLAVE_CONFIG', 'PIMAGE_ENCLAVE_CONFIG32',
    'PIMAGE_ENCLAVE_CONFIG64', 'PIMAGE_ENCLAVE_IMPORT',
    'PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER',
    'PIMAGE_EXPORT_DIRECTORY', 'PIMAGE_FILE_HEADER',
    'PIMAGE_FUNCTION_ENTRY', 'PIMAGE_FUNCTION_ENTRY64',
    'PIMAGE_HOT_PATCH_BASE', 'PIMAGE_HOT_PATCH_HASHES',
    'PIMAGE_HOT_PATCH_INFO', 'PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY',
    'PIMAGE_IMPORT_BY_NAME',
    'PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION',
    'PIMAGE_IMPORT_DESCRIPTOR',
    'PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION',
    'PIMAGE_LINENUMBER', 'PIMAGE_LOAD_CONFIG_CODE_INTEGRITY',
    'PIMAGE_LOAD_CONFIG_DIRECTORY', 'PIMAGE_LOAD_CONFIG_DIRECTORY32',
    'PIMAGE_LOAD_CONFIG_DIRECTORY64', 'PIMAGE_NT_HEADERS',
    'PIMAGE_NT_HEADERS32', 'PIMAGE_NT_HEADERS64',
    'PIMAGE_OPTIONAL_HEADER', 'PIMAGE_OPTIONAL_HEADER32',
    'PIMAGE_OPTIONAL_HEADER64', 'PIMAGE_OS2_HEADER',
    'PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER', 'PIMAGE_RELOCATION',
    'PIMAGE_RESOURCE_DATA_ENTRY', 'PIMAGE_RESOURCE_DIRECTORY',
    'PIMAGE_RESOURCE_DIRECTORY_ENTRY',
    'PIMAGE_RESOURCE_DIRECTORY_STRING',
    'PIMAGE_RESOURCE_DIR_STRING_U', 'PIMAGE_ROM_HEADERS',
    'PIMAGE_ROM_OPTIONAL_HEADER', 'PIMAGE_RUNTIME_FUNCTION_ENTRY',
    'PIMAGE_SECTION_HEADER', 'PIMAGE_SEPARATE_DEBUG_HEADER',
    'PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION', 'PIMAGE_SYMBOL',
    'PIMAGE_SYMBOL_EX', 'PIMAGE_THUNK_DATA', 'PIMAGE_THUNK_DATA32',
    'PIMAGE_THUNK_DATA64', 'PIMAGE_TLS_CALLBACK',
    'PIMAGE_TLS_DIRECTORY', 'PIMAGE_TLS_DIRECTORY32',
    'PIMAGE_TLS_DIRECTORY64', 'PIMAGE_VXD_HEADER', 'PIMECHARPOSITION',
    'PIMEMENUITEMINFO', 'PIMEMENUITEMINFOA', 'PIMEMENUITEMINFOW',
    'PIN6_ADDR', 'PIN6_PKTINFO', 'PIN6_PKTINFO_EX', 'PINIT_ONCE',
    'PINIT_ONCE_FN', 'PINPUT', 'PINPUT_INJECTION_VALUE',
    'PINPUT_RECORD', 'PINT', 'PINT16', 'PINT32', 'PINT64', 'PINT8',
    'PINT_PTR', 'PIN_ADDR', 'PIN_PKTINFO', 'PIN_PKTINFO_EX',
    'PIN_RECVERR', 'PIO_COUNTERS', 'PIPROTO', 'PIPV6_MREQ',
    'PIP_MREQ', 'PIP_MREQ_SOURCE', 'PIP_MSFILTER',
    'PISECURITY_DESCRIPTOR', 'PISECURITY_DESCRIPTOR_RELATIVE',
    'PISID', 'PIXELFORMATDESCRIPTOR',
    'PJOBOBJECT_ASSOCIATE_COMPLETION_PORT',
    'PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION',
    'PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION',
    'PJOBOBJECT_BASIC_LIMIT_INFORMATION',
    'PJOBOBJECT_BASIC_PROCESS_ID_LIST',
    'PJOBOBJECT_BASIC_UI_RESTRICTIONS',
    'PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION',
    'PJOBOBJECT_END_OF_JOB_TIME_INFORMATION',
    'PJOBOBJECT_EXTENDED_LIMIT_INFORMATION',
    'PJOBOBJECT_IO_ATTRIBUTION_INFORMATION',
    'PJOBOBJECT_IO_ATTRIBUTION_STATS',
    'PJOBOBJECT_JOBSET_INFORMATION',
    'PJOBOBJECT_LIMIT_VIOLATION_INFORMATION',
    'PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION',
    'PJOBOBJECT_RATE_CONTROL_TOLERANCE',
    'PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL',
    'PJOBOBJECT_SECURITY_LIMIT_INFORMATION', 'PJOB_SET_ARRAY',
    'PKAFFINITY', 'PKBDLLHOOKSTRUCT', 'PKCRM_MARSHAL_HEADER',
    'PKCRM_PROTOCOL_BLOB', 'PKCRM_TRANSACTION_BLOB', 'PKEYBDINPUT',
    'PKEY_EVENT_RECORD', 'PKNONVOLATILE_CONTEXT_POINTERS',
    'PKNONVOLATILE_CONTEXT_POINTERS_ARM64', 'PKSPIN_LOCK',
    'PKTMOBJECT_CURSOR', 'PKTMOBJECT_TYPE', 'PLARGE_INTEGER',
    'PLASTINPUTINFO', 'PLAYERPLANEDESCRIPTOR', 'PLCID', 'PLDT_ENTRY',
    'PLINGER', 'PLIST_ENTRY', 'PLIST_ENTRY32', 'PLIST_ENTRY64',
    'PLOCALESIGNATURE', 'PLOGBRUSH', 'PLOGBRUSH32', 'PLOGFONT',
    'PLOGFONTA', 'PLOGFONTW', 'PLOGPALETTE', 'PLOGPEN', 'PLONG',
    'PLONG32', 'PLONG64', 'PLONGLONG', 'PLONG_PTR', 'PLUID',
    'PLUID_AND_ATTRIBUTES', 'PLUID_AND_ATTRIBUTES_ARRAY', 'PM128A',
    'PM96_IFcc', 'PM96_Long', 'PM96_NoMove', 'PM96_R2R',
    'PM96_Update', 'PM96_XY', 'PM96_XYMem', 'PM96_XYmemR',
    'PMANDATORY_LEVEL', 'PMAXVERSIONTESTED_INFO', 'PMCCounter',
    'PMDINEXTMENU', 'PMEASUREITEMSTRUCT', 'PMEMORY_BASIC_INFORMATION',
    'PMEMORY_BASIC_INFORMATION32', 'PMEMORY_BASIC_INFORMATION64',
    'PMEMORY_PRIORITY_INFORMATION', 'PMEM_ADDRESS_REQUIREMENTS',
    'PMEM_EXTENDED_PARAMETER', 'PMEM_EXTENDED_PARAMETER_TYPE',
    'PMEM_SECTION_EXTENDED_PARAMETER_TYPE', 'PMENUBARINFO',
    'PMENUGETOBJECTINFO', 'PMENUITEMTEMPLATE',
    'PMENUITEMTEMPLATEHEADER', 'PMENU_EVENT_RECORD',
    'PMESSAGE_RESOURCE_BLOCK', 'PMESSAGE_RESOURCE_DATA',
    'PMESSAGE_RESOURCE_ENTRY', 'PMETAHEADER', 'PMETARECORD',
    'PMETypeFailFastOnCommitFailure', 'PMETypeMax',
    'PMINIMIZEDMETRICS', 'PMINMAXINFO', 'PMNum', 'PMODEMDEVCAPS',
    'PMODEMSETTINGS', 'PMONITOR_DISPLAY_STATE', 'PMOUSEHOOKSTRUCT',
    'PMOUSEHOOKSTRUCTEX', 'PMOUSEINPUT', 'PMOUSEMOVEPOINT',
    'PMOUSE_EVENT_RECORD', 'PMSG', 'PMSGBOXPARAMS', 'PMSGBOXPARAMSA',
    'PMSGBOXPARAMSW', 'PMSLLHOOKSTRUCT', 'PMTUD_STATE',
    'PMTUD_STATE__enumvalues', 'PMULTIKEYHELP', 'PMULTIKEYHELPA',
    'PMULTIKEYHELPW', 'PNETWORK_APP_INSTANCE_EA', 'PNEWTEXTMETRIC',
    'PNEWTEXTMETRICA', 'PNEWTEXTMETRICW', 'PNONCLIENTMETRICS',
    'PNONCLIENTMETRICSA', 'PNONCLIENTMETRICSW',
    'PNON_PAGED_DEBUG_INFO', 'PNOTIFY_USER_POWER_SETTING', 'PNT_TIB',
    'PNT_TIB32', 'PNT_TIB64', 'PNUMA_NODE_RELATIONSHIP',
    'PNV_MEMORY_RANGE', 'PNZCH', 'PNZTCH', 'PNZWCH',
    'POBJECT_TYPE_LIST', 'POFSTRUCT', 'POINT', 'POINTER_64_INT',
    'POINTER_BUTTON_CHANGE_TYPE',
    'POINTER_BUTTON_CHANGE_TYPE__enumvalues',
    'POINTER_CHANGE_FIFTHBUTTON_DOWN',
    'POINTER_CHANGE_FIFTHBUTTON_UP',
    'POINTER_CHANGE_FIRSTBUTTON_DOWN',
    'POINTER_CHANGE_FIRSTBUTTON_UP',
    'POINTER_CHANGE_FOURTHBUTTON_DOWN',
    'POINTER_CHANGE_FOURTHBUTTON_UP', 'POINTER_CHANGE_NONE',
    'POINTER_CHANGE_SECONDBUTTON_DOWN',
    'POINTER_CHANGE_SECONDBUTTON_UP',
    'POINTER_CHANGE_THIRDBUTTON_DOWN',
    'POINTER_CHANGE_THIRDBUTTON_UP', 'POINTER_DEVICE_CURSOR_INFO',
    'POINTER_DEVICE_CURSOR_TYPE', 'POINTER_DEVICE_CURSOR_TYPE_ERASER',
    'POINTER_DEVICE_CURSOR_TYPE_MAX',
    'POINTER_DEVICE_CURSOR_TYPE_TIP',
    'POINTER_DEVICE_CURSOR_TYPE_UNKNOWN',
    'POINTER_DEVICE_CURSOR_TYPE__enumvalues', 'POINTER_DEVICE_INFO',
    'POINTER_DEVICE_PROPERTY', 'POINTER_DEVICE_TYPE',
    'POINTER_DEVICE_TYPE_EXTERNAL_PEN',
    'POINTER_DEVICE_TYPE_INTEGRATED_PEN', 'POINTER_DEVICE_TYPE_MAX',
    'POINTER_DEVICE_TYPE_TOUCH', 'POINTER_DEVICE_TYPE_TOUCH_PAD',
    'POINTER_DEVICE_TYPE__enumvalues', 'POINTER_FEEDBACK_DEFAULT',
    'POINTER_FEEDBACK_INDIRECT', 'POINTER_FEEDBACK_MODE',
    'POINTER_FEEDBACK_NONE', 'POINTER_FLAGS', 'POINTER_INFO',
    'POINTER_INPUT_TYPE', 'POINTER_PEN_INFO', 'POINTER_TOUCH_INFO',
    'POINTER_TYPE_INFO', 'POINTFLOAT', 'POINTFX', 'POINTL', 'POINTS',
    'POLYTEXT', 'POLYTEXTA', 'POLYTEXTW', 'POPERATION_END_PARAMETERS',
    'POPERATION_START_PARAMETERS', 'POSVERSIONINFO',
    'POSVERSIONINFOA', 'POSVERSIONINFOEX', 'POSVERSIONINFOEXA',
    'POSVERSIONINFOEXW', 'POSVERSIONINFOW', 'POUTLINETEXTMETRIC',
    'POUTLINETEXTMETRICA', 'POUTLINETEXTMETRICW',
    'POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK', 'POWER_ACTION',
    'POWER_IDLE_RESILIENCY', 'POWER_INFORMATION_LEVEL',
    'POWER_MONITOR_INVOCATION', 'POWER_MONITOR_REQUEST_REASON',
    'POWER_MONITOR_REQUEST_TYPE',
    'POWER_MONITOR_REQUEST_TYPE__enumvalues',
    'POWER_PLATFORM_INFORMATION', 'POWER_PLATFORM_ROLE',
    'POWER_PLATFORM_ROLE__enumvalues', 'POWER_REQUEST_CONTEXT',
    'POWER_REQUEST_TYPE', 'POWER_REQUEST_TYPE__enumvalues',
    'POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES',
    'POWER_SESSION_CONNECT', 'POWER_SESSION_RIT_STATE',
    'POWER_SESSION_TIMEOUTS', 'POWER_SESSION_WINLOGON',
    'POWER_USER_PRESENCE', 'POWER_USER_PRESENCE_TYPE',
    'PPACKEDEVENTINFO', 'PPAINTSTRUCT', 'PPALETTEENTRY', 'PPATTERN',
    'PPC_abs', 'PPC_abssb', 'PPC_abssh', 'PPC_abssw', 'PPC_absub',
    'PPC_absuh', 'PPC_absuw', 'PPC_add', 'PPC_add16i', 'PPC_add2i',
    'PPC_add2is', 'PPC_addb', 'PPC_addbss', 'PPC_addbu', 'PPC_addbus',
    'PPC_addc', 'PPC_adde', 'PPC_addex', 'PPC_addg6s', 'PPC_addh',
    'PPC_addhss', 'PPC_addhu', 'PPC_addhus', 'PPC_addi', 'PPC_addic',
    'PPC_addis', 'PPC_addme', 'PPC_addpcis', 'PPC_addwss',
    'PPC_addwus', 'PPC_addze', 'PPC_and', 'PPC_and2i', 'PPC_and2is',
    'PPC_andc', 'PPC_andi', 'PPC_andis', 'PPC_b', 'PPC_balways',
    'PPC_bc', 'PPC_bcctr', 'PPC_bcdadd', 'PPC_bcdcfn', 'PPC_bcdcfsq',
    'PPC_bcdcfz', 'PPC_bcdcpsgn', 'PPC_bcdctn', 'PPC_bcdctsq',
    'PPC_bcdctz', 'PPC_bcds', 'PPC_bcdsetsgn', 'PPC_bcdsr',
    'PPC_bcdsub', 'PPC_bcdtrunc', 'PPC_bcdus', 'PPC_bcdutrunc',
    'PPC_bclr', 'PPC_bclri', 'PPC_bctar', 'PPC_bdnz', 'PPC_bdnzf',
    'PPC_bdnzt', 'PPC_bdz', 'PPC_bdzf', 'PPC_bdzt', 'PPC_beq',
    'PPC_bf', 'PPC_bge', 'PPC_bgeni', 'PPC_bgt', 'PPC_ble', 'PPC_blt',
    'PPC_bmaski', 'PPC_bne', 'PPC_bns', 'PPC_bpermd', 'PPC_brinc',
    'PPC_bseti', 'PPC_bso', 'PPC_bt', 'PPC_btsti', 'PPC_byterevh',
    'PPC_byterevw', 'PPC_cbcdtd', 'PPC_cdtbcd', 'PPC_circinc',
    'PPC_clcs', 'PPC_clf', 'PPC_cli', 'PPC_clrbhrb', 'PPC_clrldi',
    'PPC_clrlsldi', 'PPC_clrlslwi', 'PPC_clrlwi', 'PPC_clrrdi',
    'PPC_clrrwi', 'PPC_cmp', 'PPC_cmp16i', 'PPC_cmpb', 'PPC_cmpd',
    'PPC_cmpdi', 'PPC_cmpeqb', 'PPC_cmph', 'PPC_cmph16i', 'PPC_cmphl',
    'PPC_cmphl16i', 'PPC_cmpi', 'PPC_cmpl', 'PPC_cmpl16i',
    'PPC_cmpld', 'PPC_cmpldi', 'PPC_cmpli', 'PPC_cmplw', 'PPC_cmplwi',
    'PPC_cmprb', 'PPC_cmpw', 'PPC_cmpwi', 'PPC_cntlzd', 'PPC_cntlzw',
    'PPC_cnttzd', 'PPC_cnttzw', 'PPC_copy', 'PPC_cpabort',
    'PPC_crand', 'PPC_crandc', 'PPC_crclr', 'PPC_creqv', 'PPC_crmove',
    'PPC_crnand', 'PPC_crnor', 'PPC_crnot', 'PPC_cror', 'PPC_crorc',
    'PPC_crset', 'PPC_crxor', 'PPC_dadd', 'PPC_daddq', 'PPC_darn',
    'PPC_dcba', 'PPC_dcbf', 'PPC_dcbfep', 'PPC_dcbfl', 'PPC_dcbflp',
    'PPC_dcbi', 'PPC_dcblc', 'PPC_dcblq', 'PPC_dcbst', 'PPC_dcbstep',
    'PPC_dcbt', 'PPC_dcbtep', 'PPC_dcbtls', 'PPC_dcbtst',
    'PPC_dcbtstep', 'PPC_dcbtstls', 'PPC_dcbtstt', 'PPC_dcbtt',
    'PPC_dcbz', 'PPC_dcbz128', 'PPC_dcbz_l', 'PPC_dcbzep',
    'PPC_dccci', 'PPC_dcffix', 'PPC_dcffixq', 'PPC_dci', 'PPC_dclst',
    'PPC_dcmpo', 'PPC_dcmpoq', 'PPC_dcmpu', 'PPC_dcmpuq',
    'PPC_dcread', 'PPC_dctdp', 'PPC_dctfix', 'PPC_dctfixq',
    'PPC_dctqpq', 'PPC_ddedpd', 'PPC_ddedpdq', 'PPC_ddiv',
    'PPC_ddivq', 'PPC_denbcd', 'PPC_denbcdq', 'PPC_diex', 'PPC_diexq',
    'PPC_div', 'PPC_divd', 'PPC_divde', 'PPC_divdeu', 'PPC_divdu',
    'PPC_divs', 'PPC_divw', 'PPC_divwe', 'PPC_divweu', 'PPC_divwu',
    'PPC_dlmzb', 'PPC_dmul', 'PPC_dmulq', 'PPC_dnh', 'PPC_dni',
    'PPC_doz', 'PPC_doze', 'PPC_dozi', 'PPC_dqua', 'PPC_dquai',
    'PPC_dquaiq', 'PPC_dquaq', 'PPC_drdpq', 'PPC_drintn',
    'PPC_drintnq', 'PPC_drintx', 'PPC_drintxq', 'PPC_drrnd',
    'PPC_drrndq', 'PPC_drsp', 'PPC_dscli', 'PPC_dscliq', 'PPC_dscri',
    'PPC_dscriq', 'PPC_dsn', 'PPC_dsncb', 'PPC_dss', 'PPC_dssall',
    'PPC_dst', 'PPC_dstst', 'PPC_dststt', 'PPC_dstt', 'PPC_dsub',
    'PPC_dsubq', 'PPC_dtstdc', 'PPC_dtstdcq', 'PPC_dtstdg',
    'PPC_dtstdgq', 'PPC_dtstex', 'PPC_dtstexq', 'PPC_dtstsf',
    'PPC_dtstsfi', 'PPC_dtstsfiq', 'PPC_dtstsfq', 'PPC_dxex',
    'PPC_dxexq', 'PPC_eciwx', 'PPC_ecowx', 'PPC_efdabs', 'PPC_efdadd',
    'PPC_efdcfh', 'PPC_efdcfs', 'PPC_efdcfsf', 'PPC_efdcfsi',
    'PPC_efdcfsid', 'PPC_efdcfuf', 'PPC_efdcfui', 'PPC_efdcfuid',
    'PPC_efdcmpeq', 'PPC_efdcmpgt', 'PPC_efdcmplt', 'PPC_efdcth',
    'PPC_efdctsf', 'PPC_efdctsi', 'PPC_efdctsidz', 'PPC_efdctsiz',
    'PPC_efdctuf', 'PPC_efdctui', 'PPC_efdctuidz', 'PPC_efdctuiz',
    'PPC_efddiv', 'PPC_efdmax', 'PPC_efdmin', 'PPC_efdmul',
    'PPC_efdnabs', 'PPC_efdneg', 'PPC_efdsqrt', 'PPC_efdsub',
    'PPC_efdtsteq', 'PPC_efdtstgt', 'PPC_efdtstlt', 'PPC_efsabs',
    'PPC_efsadd', 'PPC_efscfd', 'PPC_efscfh', 'PPC_efscfsf',
    'PPC_efscfsi', 'PPC_efscfuf', 'PPC_efscfui', 'PPC_efscmpeq',
    'PPC_efscmpgt', 'PPC_efscmplt', 'PPC_efscth', 'PPC_efsctsf',
    'PPC_efsctsi', 'PPC_efsctsiz', 'PPC_efsctuf', 'PPC_efsctui',
    'PPC_efsctuiz', 'PPC_efsdiv', 'PPC_efsmadd', 'PPC_efsmax',
    'PPC_efsmin', 'PPC_efsmsub', 'PPC_efsmul', 'PPC_efsnabs',
    'PPC_efsneg', 'PPC_efsnmadd', 'PPC_efsnmsub', 'PPC_efssqrt',
    'PPC_efssub', 'PPC_efststeq', 'PPC_efststgt', 'PPC_efststlt',
    'PPC_ehpriv', 'PPC_eieio', 'PPC_eqv', 'PPC_evabs', 'PPC_evabsb',
    'PPC_evabsbs', 'PPC_evabsd', 'PPC_evabsdifsb', 'PPC_evabsdifsh',
    'PPC_evabsdifsw', 'PPC_evabsdifub', 'PPC_evabsdifuh',
    'PPC_evabsdifuw', 'PPC_evabsds', 'PPC_evabsh', 'PPC_evabshs',
    'PPC_evabss', 'PPC_evadd2subf2h', 'PPC_evadd2subf2hss',
    'PPC_evaddb', 'PPC_evaddbss', 'PPC_evaddbus', 'PPC_evaddd',
    'PPC_evadddss', 'PPC_evadddus', 'PPC_evaddh', 'PPC_evaddhhisw',
    'PPC_evaddhhiuw', 'PPC_evaddhlosw', 'PPC_evaddhlouw',
    'PPC_evaddhss', 'PPC_evaddhus', 'PPC_evaddhx', 'PPC_evaddhxss',
    'PPC_evaddhxus', 'PPC_evaddib', 'PPC_evaddih', 'PPC_evaddiw',
    'PPC_evaddsmiaa', 'PPC_evaddsmiaaw', 'PPC_evaddssiaa',
    'PPC_evaddssiaaw', 'PPC_evaddsubfh', 'PPC_evaddsubfhss',
    'PPC_evaddsubfhx', 'PPC_evaddsubfhxss', 'PPC_evaddsubfw',
    'PPC_evaddsubfwss', 'PPC_evaddsubfwx', 'PPC_evaddsubfwxss',
    'PPC_evaddumiaaw', 'PPC_evaddusiaa', 'PPC_evaddusiaaw',
    'PPC_evaddw', 'PPC_evaddwegsf', 'PPC_evaddwegsi',
    'PPC_evaddwogsf', 'PPC_evaddwogsi', 'PPC_evaddwss',
    'PPC_evaddwus', 'PPC_evaddwx', 'PPC_evaddwxss', 'PPC_evaddwxus',
    'PPC_evand', 'PPC_evandc', 'PPC_evavgbs', 'PPC_evavgbsr',
    'PPC_evavgbu', 'PPC_evavgbur', 'PPC_evavgds', 'PPC_evavgdsr',
    'PPC_evavgdu', 'PPC_evavgdur', 'PPC_evavghs', 'PPC_evavghsr',
    'PPC_evavghu', 'PPC_evavghur', 'PPC_evavgws', 'PPC_evavgwsr',
    'PPC_evavgwu', 'PPC_evavgwur', 'PPC_evclrbe', 'PPC_evclrbo',
    'PPC_evclrh', 'PPC_evcmpeq', 'PPC_evcmpeqd', 'PPC_evcmpgtds',
    'PPC_evcmpgtdu', 'PPC_evcmpgts', 'PPC_evcmpgtu', 'PPC_evcmpltds',
    'PPC_evcmpltdu', 'PPC_evcmplts', 'PPC_evcmpltu', 'PPC_evcntlsh',
    'PPC_evcntlsw', 'PPC_evcntlzh', 'PPC_evcntlzw', 'PPC_evdiff2his',
    'PPC_evdiff2hisa', 'PPC_evdiff2hisaaw', 'PPC_evdivs',
    'PPC_evdivu', 'PPC_evdivws', 'PPC_evdivwsf', 'PPC_evdivwu',
    'PPC_evdivwuf', 'PPC_evdlveb', 'PPC_evdlveh', 'PPC_evdlveob',
    'PPC_evdlveoh', 'PPC_evdlvob', 'PPC_evdlvoeb', 'PPC_evdlvoeh',
    'PPC_evdlvoh', 'PPC_evdotp4hgasmf', 'PPC_evdotp4hgasmfa',
    'PPC_evdotp4hgasmfaa', 'PPC_evdotp4hgasmfaa3',
    'PPC_evdotp4hgasmi', 'PPC_evdotp4hgasmia', 'PPC_evdotp4hgasmiaa',
    'PPC_evdotp4hgasmiaa3', 'PPC_evdotp4hgasumi',
    'PPC_evdotp4hgasumia', 'PPC_evdotp4hgasumiaa',
    'PPC_evdotp4hgasumiaa3', 'PPC_evdotp4hgaumi',
    'PPC_evdotp4hgaumia', 'PPC_evdotp4hgaumiaa',
    'PPC_evdotp4hgaumiaa3', 'PPC_evdotp4hgssmf', 'PPC_evdotp4hgssmfa',
    'PPC_evdotp4hgssmfaa', 'PPC_evdotp4hgssmfaa3',
    'PPC_evdotp4hgssmi', 'PPC_evdotp4hgssmia', 'PPC_evdotp4hgssmiaa',
    'PPC_evdotp4hgssmiaa3', 'PPC_evdotp4hxgasmf',
    'PPC_evdotp4hxgasmfa', 'PPC_evdotp4hxgasmfaa',
    'PPC_evdotp4hxgasmfaa3', 'PPC_evdotp4hxgasmi',
    'PPC_evdotp4hxgasmia', 'PPC_evdotp4hxgasmiaa',
    'PPC_evdotp4hxgasmiaa3', 'PPC_evdotp4hxgssmf',
    'PPC_evdotp4hxgssmfa', 'PPC_evdotp4hxgssmfaa',
    'PPC_evdotp4hxgssmfaa3', 'PPC_evdotp4hxgssmi',
    'PPC_evdotp4hxgssmia', 'PPC_evdotp4hxgssmiaa',
    'PPC_evdotp4hxgssmiaa3', 'PPC_evdotpbasmi', 'PPC_evdotpbasmia',
    'PPC_evdotpbasmiaaw', 'PPC_evdotpbasmiaaw3', 'PPC_evdotpbasumi',
    'PPC_evdotpbasumia', 'PPC_evdotpbasumiaaw',
    'PPC_evdotpbasumiaaw3', 'PPC_evdotpbaumi', 'PPC_evdotpbaumia',
    'PPC_evdotpbaumiaaw', 'PPC_evdotpbaumiaaw3', 'PPC_evdotphasmi',
    'PPC_evdotphasmia', 'PPC_evdotphasmiaaw', 'PPC_evdotphasmiaaw3',
    'PPC_evdotphassf', 'PPC_evdotphassfa', 'PPC_evdotphassfaaw',
    'PPC_evdotphassfaaw3', 'PPC_evdotphassfr', 'PPC_evdotphassfra',
    'PPC_evdotphassfraaw', 'PPC_evdotphassfraaw3', 'PPC_evdotphassi',
    'PPC_evdotphassia', 'PPC_evdotphassiaaw', 'PPC_evdotphassiaaw3',
    'PPC_evdotphasumi', 'PPC_evdotphasumia', 'PPC_evdotphasumiaaw',
    'PPC_evdotphasumiaaw3', 'PPC_evdotphasusi', 'PPC_evdotphasusia',
    'PPC_evdotphasusiaaw', 'PPC_evdotphasusiaaw3', 'PPC_evdotphaumi',
    'PPC_evdotphaumia', 'PPC_evdotphaumiaaw', 'PPC_evdotphaumiaaw3',
    'PPC_evdotphausi', 'PPC_evdotphausia', 'PPC_evdotphausiaaw',
    'PPC_evdotphausiaaw3', 'PPC_evdotphihcsmi', 'PPC_evdotphihcsmia',
    'PPC_evdotphihcsmiaaw', 'PPC_evdotphihcsmiaaw3',
    'PPC_evdotphihcssf', 'PPC_evdotphihcssfa', 'PPC_evdotphihcssfaaw',
    'PPC_evdotphihcssfaaw3', 'PPC_evdotphihcssfr',
    'PPC_evdotphihcssfra', 'PPC_evdotphihcssfraaw',
    'PPC_evdotphihcssfraaw3', 'PPC_evdotphihcssi',
    'PPC_evdotphihcssia', 'PPC_evdotphihcssiaaw',
    'PPC_evdotphihcssiaaw3', 'PPC_evdotphssmi', 'PPC_evdotphssmia',
    'PPC_evdotphssmiaaw', 'PPC_evdotphssmiaaw3', 'PPC_evdotphsssf',
    'PPC_evdotphsssfa', 'PPC_evdotphsssfaaw', 'PPC_evdotphsssfaaw3',
    'PPC_evdotphsssfr', 'PPC_evdotphsssfra', 'PPC_evdotphsssfraaw',
    'PPC_evdotphsssfraaw3', 'PPC_evdotphsssiaaw',
    'PPC_evdotphsssiaaw3', 'PPC_evdotplohcsmi', 'PPC_evdotplohcsmia',
    'PPC_evdotplohcsmiaaw', 'PPC_evdotplohcsmiaaw3',
    'PPC_evdotplohcssf', 'PPC_evdotplohcssfa', 'PPC_evdotplohcssfaaw',
    'PPC_evdotplohcssfaaw3', 'PPC_evdotplohcssfr',
    'PPC_evdotplohcssfra', 'PPC_evdotplohcssfraaw',
    'PPC_evdotplohcssfraaw3', 'PPC_evdotplohcssi',
    'PPC_evdotplohcssia', 'PPC_evdotplohcssiaaw',
    'PPC_evdotplohcssiaaw3', 'PPC_evdotpwasmi', 'PPC_evdotpwasmia',
    'PPC_evdotpwasmiaa', 'PPC_evdotpwasmiaa3', 'PPC_evdotpwassi',
    'PPC_evdotpwassia', 'PPC_evdotpwassiaa', 'PPC_evdotpwassiaa3',
    'PPC_evdotpwasumi', 'PPC_evdotpwasumia', 'PPC_evdotpwasumiaa',
    'PPC_evdotpwasumiaa3', 'PPC_evdotpwasusi', 'PPC_evdotpwasusia',
    'PPC_evdotpwasusiaa', 'PPC_evdotpwasusiaa3', 'PPC_evdotpwaumi',
    'PPC_evdotpwaumia', 'PPC_evdotpwaumiaa', 'PPC_evdotpwaumiaa3',
    'PPC_evdotpwausi', 'PPC_evdotpwausia', 'PPC_evdotpwausiaa',
    'PPC_evdotpwausiaa3', 'PPC_evdotpwcsmi', 'PPC_evdotpwcsmia',
    'PPC_evdotpwcsmiaaw', 'PPC_evdotpwcsmiaaw3', 'PPC_evdotpwcssf',
    'PPC_evdotpwcssfa', 'PPC_evdotpwcssfaaw', 'PPC_evdotpwcssfaaw3',
    'PPC_evdotpwcssfr', 'PPC_evdotpwcssfra', 'PPC_evdotpwcssfraaw',
    'PPC_evdotpwcssfraaw3', 'PPC_evdotpwcssi', 'PPC_evdotpwcssia',
    'PPC_evdotpwcssiaaw', 'PPC_evdotpwcssiaaw3', 'PPC_evdotpwgasmf',
    'PPC_evdotpwgasmfa', 'PPC_evdotpwgasmfaa', 'PPC_evdotpwgasmfaa3',
    'PPC_evdotpwgasmfr', 'PPC_evdotpwgasmfra', 'PPC_evdotpwgasmfraa',
    'PPC_evdotpwgasmfraa3', 'PPC_evdotpwgssmf', 'PPC_evdotpwgssmfa',
    'PPC_evdotpwgssmfaa', 'PPC_evdotpwgssmfaa3', 'PPC_evdotpwgssmfr',
    'PPC_evdotpwgssmfra', 'PPC_evdotpwgssmfraa',
    'PPC_evdotpwgssmfraa3', 'PPC_evdotpwssmi', 'PPC_evdotpwssmia',
    'PPC_evdotpwssmiaa', 'PPC_evdotpwssmiaa3', 'PPC_evdotpwsssiaa',
    'PPC_evdotpwsssiaa3', 'PPC_evdotpwxgasmf', 'PPC_evdotpwxgasmfa',
    'PPC_evdotpwxgasmfaa', 'PPC_evdotpwxgasmfaa3',
    'PPC_evdotpwxgasmfr', 'PPC_evdotpwxgasmfra',
    'PPC_evdotpwxgasmfraa', 'PPC_evdotpwxgasmfraa3',
    'PPC_evdotpwxgssmf', 'PPC_evdotpwxgssmfa', 'PPC_evdotpwxgssmfaa',
    'PPC_evdotpwxgssmfaa3', 'PPC_evdotpwxgssmfr',
    'PPC_evdotpwxgssmfra', 'PPC_evdotpwxgssmfraa',
    'PPC_evdotpwxgssmfraa3', 'PPC_eveqv', 'PPC_evextsb',
    'PPC_evextsbh', 'PPC_evextsh', 'PPC_evextsw', 'PPC_evextzb',
    'PPC_evfsabs', 'PPC_evfsadd', 'PPC_evfsaddsub', 'PPC_evfsaddsubx',
    'PPC_evfsaddx', 'PPC_evfscfh', 'PPC_evfscfsf', 'PPC_evfscfsi',
    'PPC_evfscfuf', 'PPC_evfscfui', 'PPC_evfscmpeq', 'PPC_evfscmpgt',
    'PPC_evfscmplt', 'PPC_evfscth', 'PPC_evfsctsf', 'PPC_evfsctsi',
    'PPC_evfsctsiz', 'PPC_evfsctuf', 'PPC_evfsctui', 'PPC_evfsctuiz',
    'PPC_evfsdiff', 'PPC_evfsdiffsum', 'PPC_evfsdiv', 'PPC_evfsmadd',
    'PPC_evfsmax', 'PPC_evfsmin', 'PPC_evfsmsub', 'PPC_evfsmul',
    'PPC_evfsmule', 'PPC_evfsmulo', 'PPC_evfsmulx', 'PPC_evfsnabs',
    'PPC_evfsneg', 'PPC_evfsnmadd', 'PPC_evfsnmsub', 'PPC_evfssqrt',
    'PPC_evfssub', 'PPC_evfssubadd', 'PPC_evfssubaddx',
    'PPC_evfssubx', 'PPC_evfssum', 'PPC_evfssumdiff', 'PPC_evfststeq',
    'PPC_evfststgt', 'PPC_evfststlt', 'PPC_evilveh', 'PPC_evilveoh',
    'PPC_evilvhih', 'PPC_evilvhiloh', 'PPC_evilvloh',
    'PPC_evilvlohih', 'PPC_evilvoeh', 'PPC_evilvoh', 'PPC_evinsb',
    'PPC_evinsh', 'PPC_evlbbsplatb', 'PPC_evlbbsplatbmx',
    'PPC_evlbbsplatbu', 'PPC_evlbbsplatbx', 'PPC_evldb',
    'PPC_evldbmx', 'PPC_evldbu', 'PPC_evldbx', 'PPC_evldd',
    'PPC_evlddepx', 'PPC_evlddmx', 'PPC_evlddu', 'PPC_evlddx',
    'PPC_evldh', 'PPC_evldhmx', 'PPC_evldhu', 'PPC_evldhx',
    'PPC_evldw', 'PPC_evldwmx', 'PPC_evldwu', 'PPC_evldwx',
    'PPC_evlhhesplat', 'PPC_evlhhesplatmx', 'PPC_evlhhesplatu',
    'PPC_evlhhesplatx', 'PPC_evlhhossplat', 'PPC_evlhhossplatmx',
    'PPC_evlhhossplatu', 'PPC_evlhhossplatx', 'PPC_evlhhousplat',
    'PPC_evlhhousplatmx', 'PPC_evlhhousplatu', 'PPC_evlhhousplatx',
    'PPC_evlhhsplath', 'PPC_evlhhsplathmx', 'PPC_evlhhsplathu',
    'PPC_evlhhsplathx', 'PPC_evlvsl', 'PPC_evlvsr', 'PPC_evlwbe',
    'PPC_evlwbemx', 'PPC_evlwbeu', 'PPC_evlwbex', 'PPC_evlwbos',
    'PPC_evlwbosmx', 'PPC_evlwbosu', 'PPC_evlwbosx', 'PPC_evlwbou',
    'PPC_evlwboumx', 'PPC_evlwbouu', 'PPC_evlwboux',
    'PPC_evlwbsplatw', 'PPC_evlwbsplatwmx', 'PPC_evlwbsplatwu',
    'PPC_evlwbsplatwx', 'PPC_evlwhe', 'PPC_evlwhemx', 'PPC_evlwheu',
    'PPC_evlwhex', 'PPC_evlwhos', 'PPC_evlwhosmx', 'PPC_evlwhosu',
    'PPC_evlwhosx', 'PPC_evlwhou', 'PPC_evlwhoumx', 'PPC_evlwhouu',
    'PPC_evlwhoux', 'PPC_evlwhsplat', 'PPC_evlwhsplatmx',
    'PPC_evlwhsplatu', 'PPC_evlwhsplatw', 'PPC_evlwhsplatwmx',
    'PPC_evlwhsplatwu', 'PPC_evlwhsplatwx', 'PPC_evlwhsplatx',
    'PPC_evlwwsplat', 'PPC_evlwwsplatmx', 'PPC_evlwwsplatu',
    'PPC_evlwwsplatx', 'PPC_evmar', 'PPC_evmaxbpsh', 'PPC_evmaxbpuh',
    'PPC_evmaxbs', 'PPC_evmaxbu', 'PPC_evmaxds', 'PPC_evmaxdu',
    'PPC_evmaxhpsw', 'PPC_evmaxhpuw', 'PPC_evmaxhs', 'PPC_evmaxhu',
    'PPC_evmaxmagws', 'PPC_evmaxwpsd', 'PPC_evmaxwpud', 'PPC_evmaxws',
    'PPC_evmaxwu', 'PPC_evmbesmi', 'PPC_evmbesmia', 'PPC_evmbesmiaah',
    'PPC_evmbesmianh', 'PPC_evmbessiaah', 'PPC_evmbessianh',
    'PPC_evmbesumi', 'PPC_evmbesumia', 'PPC_evmbesumiaah',
    'PPC_evmbesumianh', 'PPC_evmbesusiaah', 'PPC_evmbesusianh',
    'PPC_evmbeumi', 'PPC_evmbeumia', 'PPC_evmbeumiaah',
    'PPC_evmbeumianh', 'PPC_evmbeusiaah', 'PPC_evmbeusianh',
    'PPC_evmbosmi', 'PPC_evmbosmia', 'PPC_evmbosmiaah',
    'PPC_evmbosmianh', 'PPC_evmbossiaah', 'PPC_evmbossianh',
    'PPC_evmbosumi', 'PPC_evmbosumia', 'PPC_evmbosumiaah',
    'PPC_evmbosumianh', 'PPC_evmbosusiaah', 'PPC_evmbosusianh',
    'PPC_evmboumi', 'PPC_evmboumia', 'PPC_evmboumiaah',
    'PPC_evmboumianh', 'PPC_evmbousiaah', 'PPC_evmbousianh',
    'PPC_evmergehi', 'PPC_evmergehilo', 'PPC_evmergelo',
    'PPC_evmergelohi', 'PPC_evmhegsmfaa', 'PPC_evmhegsmfan',
    'PPC_evmhegsmiaa', 'PPC_evmhegsmian', 'PPC_evmhegumiaa',
    'PPC_evmhegumian', 'PPC_evmhesmf', 'PPC_evmhesmfa',
    'PPC_evmhesmfaaw', 'PPC_evmhesmfanw', 'PPC_evmhesmi',
    'PPC_evmhesmia', 'PPC_evmhesmiaaw', 'PPC_evmhesmianw',
    'PPC_evmhessf', 'PPC_evmhessfa', 'PPC_evmhessfaaw',
    'PPC_evmhessfanw', 'PPC_evmhessiaaw', 'PPC_evmhessianw',
    'PPC_evmhesumi', 'PPC_evmhesumia', 'PPC_evmhesumiaaw',
    'PPC_evmhesumianw', 'PPC_evmhesusiaaw', 'PPC_evmhesusianw',
    'PPC_evmheumi', 'PPC_evmheumia', 'PPC_evmheumiaaw',
    'PPC_evmheumianw', 'PPC_evmheusiaaw', 'PPC_evmheusianw',
    'PPC_evmhogsmfaa', 'PPC_evmhogsmfan', 'PPC_evmhogsmiaa',
    'PPC_evmhogsmian', 'PPC_evmhogumiaa', 'PPC_evmhogumian',
    'PPC_evmhosmf', 'PPC_evmhosmfa', 'PPC_evmhosmfaaw',
    'PPC_evmhosmfanw', 'PPC_evmhosmi', 'PPC_evmhosmia',
    'PPC_evmhosmiaaw', 'PPC_evmhosmianw', 'PPC_evmhossf',
    'PPC_evmhossfa', 'PPC_evmhossfaaw', 'PPC_evmhossfanw',
    'PPC_evmhossiaaw', 'PPC_evmhossianw', 'PPC_evmhosumi',
    'PPC_evmhosumia', 'PPC_evmhosumiaaw', 'PPC_evmhosumianw',
    'PPC_evmhosusiaaw', 'PPC_evmhosusianw', 'PPC_evmhoumi',
    'PPC_evmhoumia', 'PPC_evmhoumiaaw', 'PPC_evmhoumianw',
    'PPC_evmhousiaaw', 'PPC_evmhousianw', 'PPC_evmhssf',
    'PPC_evmhssfr', 'PPC_evmhssi', 'PPC_evmhsusi', 'PPC_evmhumi',
    'PPC_evmhusi', 'PPC_evminbpsh', 'PPC_evminbpuh', 'PPC_evminbs',
    'PPC_evminbu', 'PPC_evminds', 'PPC_evmindu', 'PPC_evminhpsw',
    'PPC_evminhpuw', 'PPC_evminhs', 'PPC_evminhu', 'PPC_evminwpsd',
    'PPC_evminwpud', 'PPC_evminws', 'PPC_evminwu', 'PPC_evmr',
    'PPC_evmra', 'PPC_evmwehgsmf', 'PPC_evmwehgsmfa',
    'PPC_evmwehgsmfaa', 'PPC_evmwehgsmfan', 'PPC_evmwehgsmfr',
    'PPC_evmwehgsmfra', 'PPC_evmwehgsmfraa', 'PPC_evmwehgsmfran',
    'PPC_evmwhsmf', 'PPC_evmwhsmfa', 'PPC_evmwhsmi', 'PPC_evmwhsmia',
    'PPC_evmwhssf', 'PPC_evmwhssfa', 'PPC_evmwhssfaaw',
    'PPC_evmwhssfaaw3', 'PPC_evmwhssfanw', 'PPC_evmwhssfanw3',
    'PPC_evmwhssfr', 'PPC_evmwhssfra', 'PPC_evmwhssfraaw',
    'PPC_evmwhssfraaw3', 'PPC_evmwhssfranw', 'PPC_evmwhssfranw3',
    'PPC_evmwhumi', 'PPC_evmwhumia', 'PPC_evmwlsmiaaw',
    'PPC_evmwlsmiaaw3', 'PPC_evmwlsmianw', 'PPC_evmwlsmianw3',
    'PPC_evmwlssiaaw', 'PPC_evmwlssiaaw3', 'PPC_evmwlssianw',
    'PPC_evmwlssianw3', 'PPC_evmwlumi', 'PPC_evmwlumia',
    'PPC_evmwlumiaaw', 'PPC_evmwlumiaaw3', 'PPC_evmwlumianw',
    'PPC_evmwlumianw3', 'PPC_evmwlusiaaw', 'PPC_evmwlusiaaw3',
    'PPC_evmwlusianw', 'PPC_evmwlusianw3', 'PPC_evmwohgsmf',
    'PPC_evmwohgsmfa', 'PPC_evmwohgsmfaa', 'PPC_evmwohgsmfan',
    'PPC_evmwohgsmfr', 'PPC_evmwohgsmfra', 'PPC_evmwohgsmfraa',
    'PPC_evmwohgsmfran', 'PPC_evmwsmf', 'PPC_evmwsmfa',
    'PPC_evmwsmfaa', 'PPC_evmwsmfan', 'PPC_evmwsmi', 'PPC_evmwsmia',
    'PPC_evmwsmiaa', 'PPC_evmwsmian', 'PPC_evmwssf', 'PPC_evmwssfa',
    'PPC_evmwssfaa', 'PPC_evmwssfan', 'PPC_evmwssiaa',
    'PPC_evmwssian', 'PPC_evmwssiw', 'PPC_evmwumi', 'PPC_evmwumia',
    'PPC_evmwumiaa', 'PPC_evmwumian', 'PPC_evmwusiaa',
    'PPC_evmwusian', 'PPC_evmwusiw', 'PPC_evnand', 'PPC_evneg',
    'PPC_evnegb', 'PPC_evnegbo', 'PPC_evnegbos', 'PPC_evnegbs',
    'PPC_evnegd', 'PPC_evnegds', 'PPC_evnegh', 'PPC_evnegho',
    'PPC_evneghos', 'PPC_evneghs', 'PPC_evnegs', 'PPC_evnegwo',
    'PPC_evnegwos', 'PPC_evnor', 'PPC_evnot', 'PPC_evor', 'PPC_evorc',
    'PPC_evperm', 'PPC_evperm2', 'PPC_evperm3', 'PPC_evpksdshefrs',
    'PPC_evpksdswfrs', 'PPC_evpksdsws', 'PPC_evpkshsbs',
    'PPC_evpkshubs', 'PPC_evpkswgshefrs', 'PPC_evpkswgswfrs',
    'PPC_evpkswshfrs', 'PPC_evpkswshilvfrs', 'PPC_evpkswshilvs',
    'PPC_evpkswshs', 'PPC_evpkswuhs', 'PPC_evpkuduws',
    'PPC_evpkuhubs', 'PPC_evpkuwuhs', 'PPC_evpopcntb', 'PPC_evrlb',
    'PPC_evrlbi', 'PPC_evrlh', 'PPC_evrlhi', 'PPC_evrlw',
    'PPC_evrlwi', 'PPC_evrnddnw', 'PPC_evrnddnwss', 'PPC_evrnddnwus',
    'PPC_evrnddw', 'PPC_evrnddwss', 'PPC_evrnddwus', 'PPC_evrndhb',
    'PPC_evrndhbss', 'PPC_evrndhbus', 'PPC_evrndhnb',
    'PPC_evrndhnbss', 'PPC_evrndhnbus', 'PPC_evrndw', 'PPC_evrndwhss',
    'PPC_evrndwhus', 'PPC_evrndwnh', 'PPC_evrndwnhss',
    'PPC_evrndwnhus', 'PPC_evsad2sh', 'PPC_evsad2sha',
    'PPC_evsad2shaaw', 'PPC_evsad2uh', 'PPC_evsad2uha',
    'PPC_evsad2uhaaw', 'PPC_evsad4sb', 'PPC_evsad4sba',
    'PPC_evsad4sbaaw', 'PPC_evsad4ub', 'PPC_evsad4uba',
    'PPC_evsad4ubaaw', 'PPC_evsadsw', 'PPC_evsadswa', 'PPC_evsadswaa',
    'PPC_evsaduw', 'PPC_evsaduwa', 'PPC_evsaduwaa', 'PPC_evsatsbub',
    'PPC_evsatsdsw', 'PPC_evsatsduw', 'PPC_evsatshsb',
    'PPC_evsatshub', 'PPC_evsatshuh', 'PPC_evsatswgsdf',
    'PPC_evsatswsh', 'PPC_evsatswuh', 'PPC_evsatswuw',
    'PPC_evsatubsb', 'PPC_evsatuduw', 'PPC_evsatuhsh',
    'PPC_evsatuhub', 'PPC_evsatuwsw', 'PPC_evsatuwuh', 'PPC_evsel',
    'PPC_evselbit', 'PPC_evselbitm0', 'PPC_evselbitm1',
    'PPC_evseteqb', 'PPC_evseteqh', 'PPC_evseteqw', 'PPC_evsetgtbs',
    'PPC_evsetgtbu', 'PPC_evsetgths', 'PPC_evsetgthu',
    'PPC_evsetgtws', 'PPC_evsetgtwu', 'PPC_evsetltbs',
    'PPC_evsetltbu', 'PPC_evsetlths', 'PPC_evsetlthu',
    'PPC_evsetltws', 'PPC_evsetltwu', 'PPC_evsl', 'PPC_evslb',
    'PPC_evslbi', 'PPC_evslh', 'PPC_evslhi', 'PPC_evsli',
    'PPC_evsloi', 'PPC_evslw', 'PPC_evslwi', 'PPC_evsplatb',
    'PPC_evsplatfi', 'PPC_evsplatfia', 'PPC_evsplatfib',
    'PPC_evsplatfiba', 'PPC_evsplatfibo', 'PPC_evsplatfiboa',
    'PPC_evsplatfid', 'PPC_evsplatfida', 'PPC_evsplatfih',
    'PPC_evsplatfiha', 'PPC_evsplatfiho', 'PPC_evsplatfihoa',
    'PPC_evsplatfio', 'PPC_evsplatfioa', 'PPC_evsplath',
    'PPC_evsplati', 'PPC_evsplatia', 'PPC_evsplatib',
    'PPC_evsplatiba', 'PPC_evsplatibe', 'PPC_evsplatibea',
    'PPC_evsplatid', 'PPC_evsplatida', 'PPC_evsplatie',
    'PPC_evsplatiea', 'PPC_evsplatih', 'PPC_evsplatiha',
    'PPC_evsplatihe', 'PPC_evsplatihea', 'PPC_evsrbis', 'PPC_evsrbiu',
    'PPC_evsrbs', 'PPC_evsrbu', 'PPC_evsrhis', 'PPC_evsrhiu',
    'PPC_evsrhs', 'PPC_evsrhu', 'PPC_evsris', 'PPC_evsriu',
    'PPC_evsrois', 'PPC_evsroiu', 'PPC_evsrs', 'PPC_evsru',
    'PPC_evsrwis', 'PPC_evsrwiu', 'PPC_evsrws', 'PPC_evsrwu',
    'PPC_evstdb', 'PPC_evstdbmx', 'PPC_evstdbu', 'PPC_evstdbx',
    'PPC_evstdd', 'PPC_evstddepx', 'PPC_evstddmx', 'PPC_evstddu',
    'PPC_evstddx', 'PPC_evstdh', 'PPC_evstdhmx', 'PPC_evstdhu',
    'PPC_evstdhx', 'PPC_evstdw', 'PPC_evstdwmx', 'PPC_evstdwu',
    'PPC_evstdwx', 'PPC_evsthb', 'PPC_evsthbmx', 'PPC_evsthbu',
    'PPC_evsthbx', 'PPC_evstwb', 'PPC_evstwbe', 'PPC_evstwbemx',
    'PPC_evstwbeu', 'PPC_evstwbex', 'PPC_evstwbmx', 'PPC_evstwbo',
    'PPC_evstwbomx', 'PPC_evstwbou', 'PPC_evstwbox', 'PPC_evstwbu',
    'PPC_evstwbx', 'PPC_evstwhe', 'PPC_evstwhemx', 'PPC_evstwheu',
    'PPC_evstwhex', 'PPC_evstwho', 'PPC_evstwhomx', 'PPC_evstwhou',
    'PPC_evstwhox', 'PPC_evstwwe', 'PPC_evstwwemx', 'PPC_evstwweu',
    'PPC_evstwwex', 'PPC_evstwwo', 'PPC_evstwwomx', 'PPC_evstwwou',
    'PPC_evstwwox', 'PPC_evsubf2add2h', 'PPC_evsubf2add2hss',
    'PPC_evsubfaddh', 'PPC_evsubfaddhss', 'PPC_evsubfaddhx',
    'PPC_evsubfaddhxss', 'PPC_evsubfaddw', 'PPC_evsubfaddwss',
    'PPC_evsubfaddwx', 'PPC_evsubfaddwxss', 'PPC_evsubfb',
    'PPC_evsubfbss', 'PPC_evsubfbus', 'PPC_evsubfd', 'PPC_evsubfdss',
    'PPC_evsubfdus', 'PPC_evsubfh', 'PPC_evsubfhhisw',
    'PPC_evsubfhhiuw', 'PPC_evsubfhlosw', 'PPC_evsubfhlouw',
    'PPC_evsubfhss', 'PPC_evsubfhus', 'PPC_evsubfhx',
    'PPC_evsubfhxss', 'PPC_evsubfhxus', 'PPC_evsubfsmiaa',
    'PPC_evsubfsmiaaw', 'PPC_evsubfssiaa', 'PPC_evsubfssiaaw',
    'PPC_evsubfumiaaw', 'PPC_evsubfusiaa', 'PPC_evsubfusiaaw',
    'PPC_evsubfw', 'PPC_evsubfwegsf', 'PPC_evsubfwegsi',
    'PPC_evsubfwogsf', 'PPC_evsubfwogsi', 'PPC_evsubfwss',
    'PPC_evsubfwus', 'PPC_evsubfwx', 'PPC_evsubfwxss',
    'PPC_evsubfwxus', 'PPC_evsubifb', 'PPC_evsubifh', 'PPC_evsubifw',
    'PPC_evsum2his', 'PPC_evsum2hisa', 'PPC_evsum2hisaaw',
    'PPC_evsum2hs', 'PPC_evsum2hsa', 'PPC_evsum2hsaaw',
    'PPC_evsum2hu', 'PPC_evsum2hua', 'PPC_evsum2huaaw',
    'PPC_evsum4bs', 'PPC_evsum4bsa', 'PPC_evsum4bsaaw',
    'PPC_evsum4bu', 'PPC_evsum4bua', 'PPC_evsum4buaaw', 'PPC_evsumws',
    'PPC_evsumwsa', 'PPC_evsumwsaa', 'PPC_evsumwu', 'PPC_evsumwua',
    'PPC_evsumwuaa', 'PPC_evswapbhilo', 'PPC_evswapblohi',
    'PPC_evswaphe', 'PPC_evswaphhi', 'PPC_evswaphhilo',
    'PPC_evswaphlo', 'PPC_evswaphlohi', 'PPC_evswapho',
    'PPC_evunpkhibsi', 'PPC_evunpkhibui', 'PPC_evunpkhihf',
    'PPC_evunpkhihsi', 'PPC_evunpkhihui', 'PPC_evunpkhiwgsf',
    'PPC_evunpklobsi', 'PPC_evunpklobui', 'PPC_evunpklohf',
    'PPC_evunpklohsi', 'PPC_evunpklohui', 'PPC_evunpklowgsf',
    'PPC_evxor', 'PPC_evxtrb', 'PPC_evxtrd', 'PPC_evxtrh',
    'PPC_extldi', 'PPC_extlwi', 'PPC_extrdi', 'PPC_extrwi',
    'PPC_extsb', 'PPC_extsh', 'PPC_extsw', 'PPC_extswsli',
    'PPC_extzb', 'PPC_extzh', 'PPC_fabs', 'PPC_fadd', 'PPC_fadds',
    'PPC_fcfid', 'PPC_fcfids', 'PPC_fcfidu', 'PPC_fcfidus',
    'PPC_fcmpo', 'PPC_fcmpu', 'PPC_fcpsgn', 'PPC_fctid', 'PPC_fctidu',
    'PPC_fctiduz', 'PPC_fctidz', 'PPC_fctiw', 'PPC_fctiwu',
    'PPC_fctiwuz', 'PPC_fctiwz', 'PPC_fdiv', 'PPC_fdivs', 'PPC_fmadd',
    'PPC_fmadds', 'PPC_fmr', 'PPC_fmrgew', 'PPC_fmrgow', 'PPC_fmsub',
    'PPC_fmsubs', 'PPC_fmul', 'PPC_fmuls', 'PPC_fnabs', 'PPC_fneg',
    'PPC_fnmadd', 'PPC_fnmadds', 'PPC_fnmsub', 'PPC_fnmsubs',
    'PPC_fre', 'PPC_fres', 'PPC_frim', 'PPC_frin', 'PPC_frip',
    'PPC_friz', 'PPC_frsp', 'PPC_frsqrte', 'PPC_frsqrtes', 'PPC_fsel',
    'PPC_fsqrt', 'PPC_fsqrts', 'PPC_fsub', 'PPC_fsubs', 'PPC_ftdiv',
    'PPC_ftsqrt', 'PPC_hnop', 'PPC_hrfid', 'PPC_hwaccel',
    'PPC_hwacceli', 'PPC_icbi', 'PPC_icbiep', 'PPC_icblc',
    'PPC_icblq', 'PPC_icbt', 'PPC_icbtls', 'PPC_iccci', 'PPC_ici',
    'PPC_icread', 'PPC_illegal', 'PPC_inslwi', 'PPC_insrdi',
    'PPC_insrwi', 'PPC_isel', 'PPC_iseleq', 'PPC_iselgt',
    'PPC_isellt', 'PPC_isync', 'PPC_last', 'PPC_last_basic',
    'PPC_lbarx', 'PPC_lbcbx', 'PPC_lbdcbx', 'PPC_lbdx', 'PPC_lbepx',
    'PPC_lbz', 'PPC_lbzcix', 'PPC_lbzu', 'PPC_lbzux', 'PPC_lbzx',
    'PPC_ld', 'PPC_ldarx', 'PPC_ldat', 'PPC_ldbrw', 'PPC_ldbrx',
    'PPC_ldcix', 'PPC_lddx', 'PPC_ldepx', 'PPC_ldu', 'PPC_ldux',
    'PPC_ldw', 'PPC_ldwar', 'PPC_ldwbrw', 'PPC_ldwcb', 'PPC_ldx',
    'PPC_lfd', 'PPC_lfddx', 'PPC_lfdepx', 'PPC_lfdp', 'PPC_lfdpx',
    'PPC_lfdu', 'PPC_lfdux', 'PPC_lfdx', 'PPC_lfiwax', 'PPC_lfiwzx',
    'PPC_lfs', 'PPC_lfsu', 'PPC_lfsux', 'PPC_lfsx', 'PPC_lha',
    'PPC_lharx', 'PPC_lhau', 'PPC_lhaux', 'PPC_lhax', 'PPC_lhbr',
    'PPC_lhbrx', 'PPC_lhcbx', 'PPC_lhdcbx', 'PPC_lhdx', 'PPC_lhepx',
    'PPC_lhz', 'PPC_lhzcix', 'PPC_lhzu', 'PPC_lhzux', 'PPC_lhzx',
    'PPC_li', 'PPC_lis', 'PPC_lmvcsrrw', 'PPC_lmvdsrrw',
    'PPC_lmvgprw', 'PPC_lmvmcsrrw', 'PPC_lmvsprw', 'PPC_lmvsrrw',
    'PPC_lmw', 'PPC_lnia', 'PPC_lq', 'PPC_lqarx', 'PPC_lqdbrw',
    'PPC_lqw', 'PPC_lscbx', 'PPC_lswi', 'PPC_lswx', 'PPC_lvebx',
    'PPC_lvehx', 'PPC_lvepx', 'PPC_lvepxl', 'PPC_lvewx', 'PPC_lvlx',
    'PPC_lvlxl', 'PPC_lvrx', 'PPC_lvrxl', 'PPC_lvsl', 'PPC_lvsr',
    'PPC_lvx', 'PPC_lvxl', 'PPC_lwa', 'PPC_lwarx', 'PPC_lwat',
    'PPC_lwaux', 'PPC_lwax', 'PPC_lwbr', 'PPC_lwbrx', 'PPC_lwcbx',
    'PPC_lwdcbx', 'PPC_lwdx', 'PPC_lwepx', 'PPC_lwsync', 'PPC_lwz',
    'PPC_lwzcix', 'PPC_lwzu', 'PPC_lwzux', 'PPC_lwzx', 'PPC_lxsd',
    'PPC_lxsdx', 'PPC_lxsibzx', 'PPC_lxsihzx', 'PPC_lxsiwax',
    'PPC_lxsiwzx', 'PPC_lxssp', 'PPC_lxsspx', 'PPC_lxv',
    'PPC_lxvb16x', 'PPC_lxvd2x', 'PPC_lxvdsx', 'PPC_lxvh8x',
    'PPC_lxvl', 'PPC_lxvll', 'PPC_lxvw4x', 'PPC_lxvwsx', 'PPC_lxvx',
    'PPC_macchw', 'PPC_macchws', 'PPC_macchwsu', 'PPC_macchwu',
    'PPC_machhw', 'PPC_machhws', 'PPC_machhwsu', 'PPC_machhwu',
    'PPC_maclhw', 'PPC_maclhws', 'PPC_maclhwsu', 'PPC_maclhwu',
    'PPC_maddhd', 'PPC_maddhdu', 'PPC_maddld', 'PPC_maskg',
    'PPC_maskir', 'PPC_mbar', 'PPC_mcrf', 'PPC_mcrfs', 'PPC_mcrxr',
    'PPC_mcrxrx', 'PPC_mdoio', 'PPC_mdoom', 'PPC_mfar', 'PPC_mfbhrbe',
    'PPC_mfcr', 'PPC_mfctr', 'PPC_mfdar', 'PPC_mfdcr', 'PPC_mfdcrux',
    'PPC_mfdcrx', 'PPC_mfdec', 'PPC_mfdsisr', 'PPC_mffs',
    'PPC_mffscdrn', 'PPC_mffscdrni', 'PPC_mffsce', 'PPC_mffscrn',
    'PPC_mffscrni', 'PPC_mffsl', 'PPC_mfic', 'PPC_mflr', 'PPC_mfmsr',
    'PPC_mfocrf', 'PPC_mfpmr', 'PPC_mfppr', 'PPC_mfppr32',
    'PPC_mfpvr', 'PPC_mfspr', 'PPC_mfsprg0', 'PPC_mfsprg1',
    'PPC_mfsprg2', 'PPC_mfsprg3', 'PPC_mfsr', 'PPC_mfsri',
    'PPC_mfsrin', 'PPC_mfsrr0', 'PPC_mfsrr1', 'PPC_mftb', 'PPC_mftbl',
    'PPC_mftbu', 'PPC_mftmr', 'PPC_mfvscr', 'PPC_mfvsrd',
    'PPC_mfvsrld', 'PPC_mfvsrwz', 'PPC_mfvtb', 'PPC_mfxer',
    'PPC_miso', 'PPC_modsd', 'PPC_modsw', 'PPC_modud', 'PPC_moduw',
    'PPC_mpure', 'PPC_mpusync', 'PPC_mpuwe', 'PPC_mr', 'PPC_msgclr',
    'PPC_msgclrp', 'PPC_msgsnd', 'PPC_msgsndp', 'PPC_msgsync',
    'PPC_mtar', 'PPC_mtcr', 'PPC_mtcrf', 'PPC_mtctr', 'PPC_mtdar',
    'PPC_mtdcr', 'PPC_mtdcrux', 'PPC_mtdcrx', 'PPC_mtdec',
    'PPC_mtdsisr', 'PPC_mtfsb0', 'PPC_mtfsb1', 'PPC_mtfsf',
    'PPC_mtfsfi', 'PPC_mtic', 'PPC_mtlr', 'PPC_mtmsr', 'PPC_mtmsrd',
    'PPC_mtmsree', 'PPC_mtocrf', 'PPC_mtpmr', 'PPC_mtppr',
    'PPC_mtppr32', 'PPC_mtsle', 'PPC_mtspr', 'PPC_mtsprg0',
    'PPC_mtsprg1', 'PPC_mtsprg2', 'PPC_mtsprg3', 'PPC_mtsr',
    'PPC_mtsrd', 'PPC_mtsrdin', 'PPC_mtsrin', 'PPC_mtsrr0',
    'PPC_mtsrr1', 'PPC_mttbl', 'PPC_mttbu', 'PPC_mttmr', 'PPC_mtvscr',
    'PPC_mtvsrd', 'PPC_mtvsrdd', 'PPC_mtvsrwa', 'PPC_mtvsrws',
    'PPC_mtvsrwz', 'PPC_mtvtb', 'PPC_mtxer', 'PPC_mul', 'PPC_mulchw',
    'PPC_mulchwu', 'PPC_mulhd', 'PPC_mulhdu', 'PPC_mulhhw',
    'PPC_mulhhwu', 'PPC_mulhss', 'PPC_mulhus', 'PPC_mulhw',
    'PPC_mulhwu', 'PPC_mull2i', 'PPC_mulld', 'PPC_mullhw',
    'PPC_mullhwu', 'PPC_mulli', 'PPC_mullw', 'PPC_mulwss',
    'PPC_mulwus', 'PPC_nabs', 'PPC_nand', 'PPC_nap', 'PPC_neg',
    'PPC_nmacchw', 'PPC_nmacchws', 'PPC_nmachhw', 'PPC_nmachhws',
    'PPC_nmaclhw', 'PPC_nmaclhws', 'PPC_nop', 'PPC_nor', 'PPC_not',
    'PPC_null', 'PPC_or', 'PPC_or2i', 'PPC_or2is', 'PPC_orc',
    'PPC_ordhwaccel', 'PPC_ordhwacceli', 'PPC_ori', 'PPC_oris',
    'PPC_osmcmd', 'PPC_paste', 'PPC_popcntb', 'PPC_popcntd',
    'PPC_popcntw', 'PPC_prtyd', 'PPC_prtyw', 'PPC_ps_abs',
    'PPC_ps_add', 'PPC_ps_cmpo0', 'PPC_ps_cmpo1', 'PPC_ps_cmpu0',
    'PPC_ps_cmpu1', 'PPC_ps_div', 'PPC_ps_madd', 'PPC_ps_madds0',
    'PPC_ps_madds1', 'PPC_ps_merge00', 'PPC_ps_merge01',
    'PPC_ps_merge10', 'PPC_ps_merge11', 'PPC_ps_mr', 'PPC_ps_msub',
    'PPC_ps_mul', 'PPC_ps_muls0', 'PPC_ps_muls1', 'PPC_ps_nabs',
    'PPC_ps_neg', 'PPC_ps_nmadd', 'PPC_ps_nmsub', 'PPC_ps_res',
    'PPC_ps_rsqrte', 'PPC_ps_sel', 'PPC_ps_sub', 'PPC_ps_sum0',
    'PPC_ps_sum1', 'PPC_psq_l', 'PPC_psq_lu', 'PPC_psq_lux',
    'PPC_psq_lx', 'PPC_psq_st', 'PPC_psq_stu', 'PPC_psq_stux',
    'PPC_psq_stx', 'PPC_ptesync', 'PPC_rac', 'PPC_rfci', 'PPC_rfdi',
    'PPC_rfebb', 'PPC_rfgi', 'PPC_rfi', 'PPC_rfid', 'PPC_rfmci',
    'PPC_rfscv', 'PPC_rfsvc', 'PPC_rldcl', 'PPC_rldcr', 'PPC_rldic',
    'PPC_rldicl', 'PPC_rldicr', 'PPC_rldimi', 'PPC_rlmi', 'PPC_rlw',
    'PPC_rlwi', 'PPC_rlwimi', 'PPC_rlwinm', 'PPC_rlwnm', 'PPC_rotld',
    'PPC_rotldi', 'PPC_rotlw', 'PPC_rotlwi', 'PPC_rotrdi',
    'PPC_rotrwi', 'PPC_rrib', 'PPC_rvwinkle', 'PPC_sat', 'PPC_satsbs',
    'PPC_satsbu', 'PPC_satshs', 'PPC_satshu', 'PPC_satsws',
    'PPC_satswu', 'PPC_satubs', 'PPC_satubu', 'PPC_satuhs',
    'PPC_satuhu', 'PPC_satuws', 'PPC_satuwu', 'PPC_sc', 'PPC_scv',
    'PPC_setb', 'PPC_slbfee', 'PPC_slbia', 'PPC_slbiag', 'PPC_slbie',
    'PPC_slbieg', 'PPC_slbmfee', 'PPC_slbmfev', 'PPC_slbmte',
    'PPC_slbsync', 'PPC_sld', 'PPC_sldi', 'PPC_sle', 'PPC_sleep',
    'PPC_sleq', 'PPC_sliq', 'PPC_slliq', 'PPC_sllq', 'PPC_slq',
    'PPC_slw', 'PPC_slwi', 'PPC_srad', 'PPC_sradi', 'PPC_sraiq',
    'PPC_sraq', 'PPC_sraw', 'PPC_srawi', 'PPC_srd', 'PPC_srdi',
    'PPC_sre', 'PPC_srea', 'PPC_sreq', 'PPC_sriq', 'PPC_srliq',
    'PPC_srlq', 'PPC_srq', 'PPC_srw', 'PPC_srwi', 'PPC_stb',
    'PPC_stbcix', 'PPC_stbcx', 'PPC_stbdcbx', 'PPC_stbdx',
    'PPC_stbepx', 'PPC_stbu', 'PPC_stbux', 'PPC_stbwtx', 'PPC_stbx',
    'PPC_std', 'PPC_stdat', 'PPC_stdbrw', 'PPC_stdbrx', 'PPC_stdcix',
    'PPC_stdcx', 'PPC_stddx', 'PPC_stdepx', 'PPC_stdu', 'PPC_stdux',
    'PPC_stdw', 'PPC_stdwbrw', 'PPC_stdwc', 'PPC_stdwwt', 'PPC_stdx',
    'PPC_stfd', 'PPC_stfddx', 'PPC_stfdepx', 'PPC_stfdp',
    'PPC_stfdpx', 'PPC_stfdu', 'PPC_stfdux', 'PPC_stfdx',
    'PPC_stfiwx', 'PPC_stfs', 'PPC_stfsu', 'PPC_stfsux', 'PPC_stfsx',
    'PPC_sth', 'PPC_sthbr', 'PPC_sthbrx', 'PPC_sthcix', 'PPC_sthcx',
    'PPC_sthdcbx', 'PPC_sthdx', 'PPC_sthepx', 'PPC_sthu', 'PPC_sthux',
    'PPC_sthwtx', 'PPC_sthx', 'PPC_stmvcsrrw', 'PPC_stmvdsrrw',
    'PPC_stmvgprw', 'PPC_stmvmcsrrw', 'PPC_stmvsprw', 'PPC_stmvsrrw',
    'PPC_stmw', 'PPC_stop', 'PPC_stq', 'PPC_stqcx', 'PPC_stqdbrw',
    'PPC_stqw', 'PPC_stswi', 'PPC_stswx', 'PPC_stvebx', 'PPC_stvehx',
    'PPC_stvepx', 'PPC_stvepxl', 'PPC_stvewx', 'PPC_stvlx',
    'PPC_stvlxl', 'PPC_stvrx', 'PPC_stvrxl', 'PPC_stvx', 'PPC_stvxl',
    'PPC_stw', 'PPC_stwat', 'PPC_stwbr', 'PPC_stwbrx', 'PPC_stwcix',
    'PPC_stwcx', 'PPC_stwdcbx', 'PPC_stwdx', 'PPC_stwepx', 'PPC_stwu',
    'PPC_stwux', 'PPC_stwwtx', 'PPC_stwx', 'PPC_stxsd', 'PPC_stxsdx',
    'PPC_stxsibx', 'PPC_stxsihx', 'PPC_stxsiwx', 'PPC_stxssp',
    'PPC_stxsspx', 'PPC_stxv', 'PPC_stxvb16x', 'PPC_stxvd2x',
    'PPC_stxvh8x', 'PPC_stxvl', 'PPC_stxvll', 'PPC_stxvw4x',
    'PPC_stxvx', 'PPC_sub', 'PPC_sub16i', 'PPC_sub2i', 'PPC_sub2is',
    'PPC_subf', 'PPC_subfb', 'PPC_subfbss', 'PPC_subfbu',
    'PPC_subfbus', 'PPC_subfc', 'PPC_subfe', 'PPC_subfh',
    'PPC_subfhss', 'PPC_subfhu', 'PPC_subfhus', 'PPC_subfic',
    'PPC_subfme', 'PPC_subfwss', 'PPC_subfwus', 'PPC_subfze',
    'PPC_subi', 'PPC_subic', 'PPC_subis', 'PPC_subpcis', 'PPC_sync',
    'PPC_tabort', 'PPC_tabortdc', 'PPC_tabortdci', 'PPC_tabortwc',
    'PPC_tabortwci', 'PPC_tbegin', 'PPC_tcheck', 'PPC_td', 'PPC_tdeq',
    'PPC_tdeqi', 'PPC_tdge', 'PPC_tdgei', 'PPC_tdgt', 'PPC_tdgti',
    'PPC_tdi', 'PPC_tdle', 'PPC_tdlei', 'PPC_tdlge', 'PPC_tdlgei',
    'PPC_tdlgt', 'PPC_tdlgti', 'PPC_tdlle', 'PPC_tdllei', 'PPC_tdllt',
    'PPC_tdllti', 'PPC_tdlt', 'PPC_tdlti', 'PPC_tdne', 'PPC_tdnei',
    'PPC_tdu', 'PPC_tdui', 'PPC_tend', 'PPC_tendall', 'PPC_tlbia',
    'PPC_tlbie', 'PPC_tlbiel', 'PPC_tlbilx', 'PPC_tlbivax',
    'PPC_tlbld', 'PPC_tlbli', 'PPC_tlbre', 'PPC_tlbsrx', 'PPC_tlbsx',
    'PPC_tlbsync', 'PPC_tlbwe', 'PPC_trap', 'PPC_trapd',
    'PPC_trechkpt', 'PPC_treclaim', 'PPC_tresume', 'PPC_tsr',
    'PPC_tsuspend', 'PPC_tw', 'PPC_tweq', 'PPC_tweqi', 'PPC_twge',
    'PPC_twgei', 'PPC_twgt', 'PPC_twgti', 'PPC_twi', 'PPC_twle',
    'PPC_twlei', 'PPC_twlge', 'PPC_twlgei', 'PPC_twlgt', 'PPC_twlgti',
    'PPC_twlle', 'PPC_twllei', 'PPC_twllt', 'PPC_twllti', 'PPC_twlt',
    'PPC_twlti', 'PPC_twne', 'PPC_twnei', 'PPC_twu', 'PPC_twui',
    'PPC_vabsdub', 'PPC_vabsduh', 'PPC_vabsduw', 'PPC_vaddcuq',
    'PPC_vaddcuw', 'PPC_vaddecuq', 'PPC_vaddeuqm', 'PPC_vaddfp',
    'PPC_vaddsbs', 'PPC_vaddshs', 'PPC_vaddsws', 'PPC_vaddubm',
    'PPC_vaddubs', 'PPC_vaddudm', 'PPC_vadduhm', 'PPC_vadduhs',
    'PPC_vadduqm', 'PPC_vadduwm', 'PPC_vadduws', 'PPC_vand',
    'PPC_vandc', 'PPC_vavgsb', 'PPC_vavgsh', 'PPC_vavgsw',
    'PPC_vavgub', 'PPC_vavguh', 'PPC_vavguw', 'PPC_vbpermd',
    'PPC_vbpermq', 'PPC_vcfpsxws', 'PPC_vcfpuxws', 'PPC_vcfsx',
    'PPC_vcfux', 'PPC_vcipher', 'PPC_vcipherlast', 'PPC_vclzb',
    'PPC_vclzd', 'PPC_vclzh', 'PPC_vclzlsbb', 'PPC_vclzw',
    'PPC_vcmpbfp', 'PPC_vcmpeqfp', 'PPC_vcmpequb', 'PPC_vcmpequd',
    'PPC_vcmpequh', 'PPC_vcmpequw', 'PPC_vcmpgefp', 'PPC_vcmpgtfp',
    'PPC_vcmpgtsb', 'PPC_vcmpgtsd', 'PPC_vcmpgtsh', 'PPC_vcmpgtsw',
    'PPC_vcmpgtub', 'PPC_vcmpgtud', 'PPC_vcmpgtuh', 'PPC_vcmpgtuw',
    'PPC_vcmpneb', 'PPC_vcmpneh', 'PPC_vcmpnew', 'PPC_vcmpnezb',
    'PPC_vcmpnezh', 'PPC_vcmpnezw', 'PPC_vcsxwfp', 'PPC_vctsxs',
    'PPC_vctuxs', 'PPC_vctzb', 'PPC_vctzd', 'PPC_vctzh',
    'PPC_vctzlsbb', 'PPC_vctzw', 'PPC_vcuxwfp', 'PPC_veqv',
    'PPC_vexptefp', 'PPC_vextractd', 'PPC_vextractub',
    'PPC_vextractuh', 'PPC_vextractuw', 'PPC_vextsb2d',
    'PPC_vextsb2w', 'PPC_vextsh2d', 'PPC_vextsh2w', 'PPC_vextsw2d',
    'PPC_vextublx', 'PPC_vextubrx', 'PPC_vextuhlx', 'PPC_vextuhrx',
    'PPC_vextuwlx', 'PPC_vextuwrx', 'PPC_vgbbd', 'PPC_vinsertb',
    'PPC_vinsertd', 'PPC_vinserth', 'PPC_vinsertw', 'PPC_vlogefp',
    'PPC_vmaddcfp', 'PPC_vmaddfp', 'PPC_vmaxfp', 'PPC_vmaxsb',
    'PPC_vmaxsd', 'PPC_vmaxsh', 'PPC_vmaxsw', 'PPC_vmaxub',
    'PPC_vmaxud', 'PPC_vmaxuh', 'PPC_vmaxuw', 'PPC_vmhaddshs',
    'PPC_vmhraddshs', 'PPC_vminfp', 'PPC_vminsb', 'PPC_vminsd',
    'PPC_vminsh', 'PPC_vminsw', 'PPC_vminub', 'PPC_vminud',
    'PPC_vminuh', 'PPC_vminuw', 'PPC_vmladduhm', 'PPC_vmr',
    'PPC_vmrgew', 'PPC_vmrghb', 'PPC_vmrghh', 'PPC_vmrghw',
    'PPC_vmrglb', 'PPC_vmrglh', 'PPC_vmrglw', 'PPC_vmrgow',
    'PPC_vmsum3fp', 'PPC_vmsum4fp', 'PPC_vmsummbm', 'PPC_vmsumshm',
    'PPC_vmsumshs', 'PPC_vmsumubm', 'PPC_vmsumudm', 'PPC_vmsumuhm',
    'PPC_vmsumuhs', 'PPC_vmul10cuq', 'PPC_vmul10ecuq',
    'PPC_vmul10euq', 'PPC_vmul10uq', 'PPC_vmulesb', 'PPC_vmulesh',
    'PPC_vmulesw', 'PPC_vmuleub', 'PPC_vmuleuh', 'PPC_vmuleuw',
    'PPC_vmulfp', 'PPC_vmulosb', 'PPC_vmulosh', 'PPC_vmulosw',
    'PPC_vmuloub', 'PPC_vmulouh', 'PPC_vmulouw', 'PPC_vmuluwm',
    'PPC_vnand', 'PPC_vncipher', 'PPC_vncipherlast', 'PPC_vnegd',
    'PPC_vnegw', 'PPC_vnmsubfp', 'PPC_vnor', 'PPC_vnot', 'PPC_vor',
    'PPC_vorc', 'PPC_vperm', 'PPC_vpermr', 'PPC_vpermwi',
    'PPC_vpermxor', 'PPC_vpkd3d', 'PPC_vpkpx', 'PPC_vpksdss',
    'PPC_vpksdus', 'PPC_vpkshss', 'PPC_vpkshus', 'PPC_vpkswss',
    'PPC_vpkswus', 'PPC_vpkudum', 'PPC_vpkudus', 'PPC_vpkuhum',
    'PPC_vpkuhus', 'PPC_vpkuwum', 'PPC_vpkuwus', 'PPC_vpmsumb',
    'PPC_vpmsumd', 'PPC_vpmsumh', 'PPC_vpmsumw', 'PPC_vpopcntb',
    'PPC_vpopcntd', 'PPC_vpopcnth', 'PPC_vpopcntw', 'PPC_vprtybd',
    'PPC_vprtybq', 'PPC_vprtybw', 'PPC_vrefp', 'PPC_vrfim',
    'PPC_vrfin', 'PPC_vrfip', 'PPC_vrfiz', 'PPC_vrlb', 'PPC_vrld',
    'PPC_vrldmi', 'PPC_vrldnm', 'PPC_vrlh', 'PPC_vrlimi', 'PPC_vrlw',
    'PPC_vrlwmi', 'PPC_vrlwnm', 'PPC_vrsqrtefp', 'PPC_vsbox',
    'PPC_vsel', 'PPC_vshasigmad', 'PPC_vshasigmaw', 'PPC_vsl',
    'PPC_vslb', 'PPC_vsld', 'PPC_vsldoi', 'PPC_vslh', 'PPC_vslo',
    'PPC_vslv', 'PPC_vslw', 'PPC_vspltb', 'PPC_vsplth',
    'PPC_vspltisb', 'PPC_vspltish', 'PPC_vspltisw', 'PPC_vspltw',
    'PPC_vsr', 'PPC_vsrab', 'PPC_vsrad', 'PPC_vsrah', 'PPC_vsraw',
    'PPC_vsrb', 'PPC_vsrd', 'PPC_vsrh', 'PPC_vsro', 'PPC_vsrv',
    'PPC_vsrw', 'PPC_vsubcuq', 'PPC_vsubcuw', 'PPC_vsubecuq',
    'PPC_vsubeuqm', 'PPC_vsubfp', 'PPC_vsubsbs', 'PPC_vsubshs',
    'PPC_vsubsws', 'PPC_vsububm', 'PPC_vsububs', 'PPC_vsubudm',
    'PPC_vsubuhm', 'PPC_vsubuhs', 'PPC_vsubuqm', 'PPC_vsubuwm',
    'PPC_vsubuws', 'PPC_vsum2sws', 'PPC_vsum4sbs', 'PPC_vsum4shs',
    'PPC_vsum4ubs', 'PPC_vsumsws', 'PPC_vupkd3d', 'PPC_vupkhpx',
    'PPC_vupkhsb', 'PPC_vupkhsh', 'PPC_vupkhsw', 'PPC_vupklpx',
    'PPC_vupklsb', 'PPC_vupklsh', 'PPC_vupklsw', 'PPC_vxor',
    'PPC_wait', 'PPC_wait30', 'PPC_waitimpl', 'PPC_waitrsv',
    'PPC_wrtee', 'PPC_wrteei', 'PPC_xnop', 'PPC_xor', 'PPC_xori',
    'PPC_xoris', 'PPC_xsabsdp', 'PPC_xsabsqp', 'PPC_xsadddp',
    'PPC_xsaddqp', 'PPC_xsaddsp', 'PPC_xscmpeqdp', 'PPC_xscmpexpdp',
    'PPC_xscmpexpqp', 'PPC_xscmpgedp', 'PPC_xscmpgtdp',
    'PPC_xscmpodp', 'PPC_xscmpoqp', 'PPC_xscmpudp', 'PPC_xscmpuqp',
    'PPC_xscpsgndp', 'PPC_xscpsgnqp', 'PPC_xscvdphp', 'PPC_xscvdpqp',
    'PPC_xscvdpsp', 'PPC_xscvdpspn', 'PPC_xscvdpsxds',
    'PPC_xscvdpsxws', 'PPC_xscvdpuxds', 'PPC_xscvdpuxws',
    'PPC_xscvhpdp', 'PPC_xscvqpdp', 'PPC_xscvqpsdz', 'PPC_xscvqpswz',
    'PPC_xscvqpudz', 'PPC_xscvqpuwz', 'PPC_xscvsdqp', 'PPC_xscvspdp',
    'PPC_xscvspdpn', 'PPC_xscvsxddp', 'PPC_xscvsxdsp', 'PPC_xscvudqp',
    'PPC_xscvuxddp', 'PPC_xscvuxdsp', 'PPC_xsdivdp', 'PPC_xsdivqp',
    'PPC_xsdivsp', 'PPC_xsiexpdp', 'PPC_xsiexpqp', 'PPC_xsmaddadp',
    'PPC_xsmaddasp', 'PPC_xsmaddmdp', 'PPC_xsmaddmsp', 'PPC_xsmaddqp',
    'PPC_xsmaxcdp', 'PPC_xsmaxdp', 'PPC_xsmaxjdp', 'PPC_xsmincdp',
    'PPC_xsmindp', 'PPC_xsminjdp', 'PPC_xsmsubadp', 'PPC_xsmsubasp',
    'PPC_xsmsubmdp', 'PPC_xsmsubmsp', 'PPC_xsmsubqp', 'PPC_xsmuldp',
    'PPC_xsmulqp', 'PPC_xsmulsp', 'PPC_xsnabsdp', 'PPC_xsnabsqp',
    'PPC_xsnegdp', 'PPC_xsnegqp', 'PPC_xsnmaddadp', 'PPC_xsnmaddasp',
    'PPC_xsnmaddmdp', 'PPC_xsnmaddmsp', 'PPC_xsnmaddqp',
    'PPC_xsnmsubadp', 'PPC_xsnmsubasp', 'PPC_xsnmsubmdp',
    'PPC_xsnmsubmsp', 'PPC_xsnmsubqp', 'PPC_xsrdpi', 'PPC_xsrdpic',
    'PPC_xsrdpim', 'PPC_xsrdpip', 'PPC_xsrdpiz', 'PPC_xsredp',
    'PPC_xsresp', 'PPC_xsrqpi', 'PPC_xsrqpxp', 'PPC_xsrsp',
    'PPC_xsrsqrtedp', 'PPC_xsrsqrtesp', 'PPC_xssqrtdp',
    'PPC_xssqrtqp', 'PPC_xssqrtsp', 'PPC_xssubdp', 'PPC_xssubqp',
    'PPC_xssubsp', 'PPC_xstdivdp', 'PPC_xstsqrtdp', 'PPC_xststdcdp',
    'PPC_xststdcqp', 'PPC_xststdcsp', 'PPC_xsxexpdp', 'PPC_xsxexpqp',
    'PPC_xsxsigdp', 'PPC_xsxsigqp', 'PPC_xvabsdp', 'PPC_xvabssp',
    'PPC_xvadddp', 'PPC_xvaddsp', 'PPC_xvcmpeqdp', 'PPC_xvcmpeqsp',
    'PPC_xvcmpgedp', 'PPC_xvcmpgesp', 'PPC_xvcmpgtdp',
    'PPC_xvcmpgtsp', 'PPC_xvcpsgndp', 'PPC_xvcpsgnsp', 'PPC_xvcvdpsp',
    'PPC_xvcvdpsxds', 'PPC_xvcvdpsxws', 'PPC_xvcvdpuxds',
    'PPC_xvcvdpuxws', 'PPC_xvcvhpsp', 'PPC_xvcvspdp', 'PPC_xvcvsphp',
    'PPC_xvcvspsxds', 'PPC_xvcvspsxws', 'PPC_xvcvspuxds',
    'PPC_xvcvspuxws', 'PPC_xvcvsxddp', 'PPC_xvcvsxdsp',
    'PPC_xvcvsxwdp', 'PPC_xvcvsxwsp', 'PPC_xvcvuxddp',
    'PPC_xvcvuxdsp', 'PPC_xvcvuxwdp', 'PPC_xvcvuxwsp', 'PPC_xvdivdp',
    'PPC_xvdivsp', 'PPC_xviexpdp', 'PPC_xviexpsp', 'PPC_xvmaddadp',
    'PPC_xvmaddasp', 'PPC_xvmaddmdp', 'PPC_xvmaddmsp', 'PPC_xvmaxdp',
    'PPC_xvmaxsp', 'PPC_xvmindp', 'PPC_xvminsp', 'PPC_xvmovdp',
    'PPC_xvmovsp', 'PPC_xvmsubadp', 'PPC_xvmsubasp', 'PPC_xvmsubmdp',
    'PPC_xvmsubmsp', 'PPC_xvmuldp', 'PPC_xvmulsp', 'PPC_xvnabsdp',
    'PPC_xvnabssp', 'PPC_xvnegdp', 'PPC_xvnegsp', 'PPC_xvnmaddadp',
    'PPC_xvnmaddasp', 'PPC_xvnmaddmdp', 'PPC_xvnmaddmsp',
    'PPC_xvnmsubadp', 'PPC_xvnmsubasp', 'PPC_xvnmsubmdp',
    'PPC_xvnmsubmsp', 'PPC_xvrdpi', 'PPC_xvrdpic', 'PPC_xvrdpim',
    'PPC_xvrdpip', 'PPC_xvrdpiz', 'PPC_xvredp', 'PPC_xvresp',
    'PPC_xvrspi', 'PPC_xvrspic', 'PPC_xvrspim', 'PPC_xvrspip',
    'PPC_xvrspiz', 'PPC_xvrsqrtedp', 'PPC_xvrsqrtesp', 'PPC_xvsqrtdp',
    'PPC_xvsqrtsp', 'PPC_xvsubdp', 'PPC_xvsubsp', 'PPC_xvtdivdp',
    'PPC_xvtdivsp', 'PPC_xvtsqrtdp', 'PPC_xvtsqrtsp', 'PPC_xvtstdcdp',
    'PPC_xvtstdcsp', 'PPC_xvxexpdp', 'PPC_xvxexpsp', 'PPC_xvxsigdp',
    'PPC_xvxsigsp', 'PPC_xxbrd', 'PPC_xxbrh', 'PPC_xxbrq',
    'PPC_xxbrw', 'PPC_xxextractuw', 'PPC_xxinsertw', 'PPC_xxland',
    'PPC_xxlandc', 'PPC_xxleqv', 'PPC_xxlnand', 'PPC_xxlnor',
    'PPC_xxlor', 'PPC_xxlorc', 'PPC_xxlxor', 'PPC_xxmrghd',
    'PPC_xxmrghw', 'PPC_xxmrgld', 'PPC_xxmrglw', 'PPC_xxperm',
    'PPC_xxpermdi', 'PPC_xxpermr', 'PPC_xxsel', 'PPC_xxsldwi',
    'PPC_xxspltd', 'PPC_xxspltib', 'PPC_xxspltw', 'PPC_xxswapd',
    'PPC_yield', 'PPELARRAY', 'PPERFORMANCE_DATA',
    'PPIXELFORMATDESCRIPTOR', 'PPMTUD_STATE', 'PPOINT',
    'PPOINTER_TYPE_INFO', 'PPOINTFLOAT', 'PPOINTL', 'PPOINTS',
    'PPOLYTEXT', 'PPOLYTEXTA', 'PPOLYTEXTW',
    'PPOWERBROADCAST_SETTING', 'PPOWER_ACTION',
    'PPOWER_ACTION_POLICY', 'PPOWER_IDLE_RESILIENCY',
    'PPOWER_MONITOR_INVOCATION', 'PPOWER_PLATFORM_INFORMATION',
    'PPOWER_PLATFORM_ROLE', 'PPOWER_REQUEST_CONTEXT',
    'PPOWER_REQUEST_TYPE',
    'PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES',
    'PPOWER_SESSION_CONNECT', 'PPOWER_SESSION_RIT_STATE',
    'PPOWER_SESSION_TIMEOUTS', 'PPOWER_SESSION_WINLOGON',
    'PPOWER_USER_PRESENCE', 'PPOWER_USER_PRESENCE_TYPE',
    'PPPM_IDLESTATE_EVENT', 'PPPM_IDLE_ACCOUNTING',
    'PPPM_IDLE_ACCOUNTING_EX', 'PPPM_IDLE_STATE_ACCOUNTING',
    'PPPM_IDLE_STATE_ACCOUNTING_EX', 'PPPM_IDLE_STATE_BUCKET_EX',
    'PPPM_PERFSTATE_DOMAIN_EVENT', 'PPPM_PERFSTATE_EVENT',
    'PPPM_THERMALCHANGE_EVENT', 'PPPM_THERMAL_POLICY_EVENT',
    'PPPM_WMI_IDLE_STATE', 'PPPM_WMI_IDLE_STATES',
    'PPPM_WMI_IDLE_STATES_EX', 'PPPM_WMI_LEGACY_PERFSTATE',
    'PPPM_WMI_PERF_STATE', 'PPPM_WMI_PERF_STATES',
    'PPPM_WMI_PERF_STATES_EX', 'PPRIVILEGE_SET',
    'PPROCESSOR_GROUP_INFO', 'PPROCESSOR_IDLESTATE_INFO',
    'PPROCESSOR_IDLESTATE_POLICY', 'PPROCESSOR_NUMBER',
    'PPROCESSOR_PERFSTATE_POLICY', 'PPROCESSOR_POWER_POLICY',
    'PPROCESSOR_POWER_POLICY_INFO', 'PPROCESSOR_RELATIONSHIP',
    'PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET',
    'PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION',
    'PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE',
    'PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION',
    'PPROCESS_HEAP_ENTRY', 'PPROCESS_INFORMATION',
    'PPROCESS_LEAP_SECOND_INFO', 'PPROCESS_MEMORY_EXHAUSTION_INFO',
    'PPROCESS_MEMORY_EXHAUSTION_TYPE',
    'PPROCESS_MITIGATION_ASLR_POLICY',
    'PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY',
    'PPROCESS_MITIGATION_CHILD_PROCESS_POLICY',
    'PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY',
    'PPROCESS_MITIGATION_DEP_POLICY',
    'PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY',
    'PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY',
    'PPROCESS_MITIGATION_FONT_DISABLE_POLICY',
    'PPROCESS_MITIGATION_IMAGE_LOAD_POLICY',
    'PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY',
    'PPROCESS_MITIGATION_POLICY',
    'PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY',
    'PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY',
    'PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY',
    'PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY',
    'PPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY',
    'PPROCESS_POWER_THROTTLING_STATE', 'PPROC_THREAD_ATTRIBUTE_LIST',
    'PPROTOENT', 'PPROVIDER', 'PPSFEATURE_CUSTPAPER',
    'PPSFEATURE_OUTPUT', 'PPSINJECTDATA', 'PPVALUE', 'PPVALUEA',
    'PPVALUEW', 'PQUERYACTCTXW_FUNC', 'PQUERYHANDLER',
    'PQUOTA_LIMITS', 'PQUOTA_LIMITS_EX', 'PRATE_QUOTA_LIMIT',
    'PRAWHID', 'PRAWINPUT', 'PRAWINPUTDEVICE', 'PRAWINPUTDEVICELIST',
    'PRAWINPUTHEADER', 'PRAWKEYBOARD', 'PRAWMOUSE',
    'PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS',
    'PREARRANGE_FILE_DATA', 'PREARRANGE_FILE_DATA32',
    'PREASON_CONTEXT', 'PRECONVERTSTRING', 'PRECT', 'PRECTL',
    'PREDIRECTION_DESCRIPTOR', 'PREDIRECTION_FUNCTION_DESCRIPTOR',
    'PREGISTERCLASSNAMEW', 'PREGISTERWORD', 'PREGISTERWORDA',
    'PREGISTERWORDW', 'PREPARSE_GUID_DATA_BUFFER',
    'PRESOURCEMANAGER_BASIC_INFORMATION',
    'PRESOURCEMANAGER_COMPLETION_INFORMATION', 'PRESUME_PERFORMANCE',
    'PRGBTRIPLE', 'PRGNDATA', 'PRGNDATAHEADER', 'PRID_DEVICE_INFO',
    'PRID_DEVICE_INFO_HID', 'PRID_DEVICE_INFO_KEYBOARD',
    'PRID_DEVICE_INFO_MOUSE', 'PRIORITY_HINT',
    'PRIORITY_HINT__enumvalues', 'PRIVILEGE_SET',
    'PRKCRM_MARSHAL_HEADER', 'PRKCRM_PROTOCOL_BLOB',
    'PRKCRM_TRANSACTION_BLOB', 'PRLIST_ENTRY', 'PROC',
    'PROCESSOR_CACHE_TYPE', 'PROCESSOR_CACHE_TYPE__enumvalues',
    'PROCESSOR_GROUP_INFO', 'PROCESSOR_NUMBER',
    'PROCESSOR_POWER_POLICY', 'PROCESSOR_POWER_POLICY_INFO',
    'PROCESSOR_RELATIONSHIP', 'PROCESS_ATTACHED', 'PROCESS_DETACHED',
    'PROCESS_DYNAMIC_EH_CONTINUATION_TARGET',
    'PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION',
    'PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE',
    'PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION',
    'PROCESS_EXITED', 'PROCESS_HEAP_ENTRY', 'PROCESS_INFORMATION',
    'PROCESS_INFORMATION_CLASS',
    'PROCESS_INFORMATION_CLASS__enumvalues',
    'PROCESS_LEAP_SECOND_INFO', 'PROCESS_MEMORY_EXHAUSTION_INFO',
    'PROCESS_MEMORY_EXHAUSTION_TYPE',
    'PROCESS_MEMORY_EXHAUSTION_TYPE__enumvalues',
    'PROCESS_MITIGATION_ASLR_POLICY',
    'PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY',
    'PROCESS_MITIGATION_CHILD_PROCESS_POLICY',
    'PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY',
    'PROCESS_MITIGATION_DEP_POLICY',
    'PROCESS_MITIGATION_DYNAMIC_CODE_POLICY',
    'PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY',
    'PROCESS_MITIGATION_FONT_DISABLE_POLICY',
    'PROCESS_MITIGATION_IMAGE_LOAD_POLICY',
    'PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY',
    'PROCESS_MITIGATION_POLICY',
    'PROCESS_MITIGATION_POLICY__enumvalues',
    'PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY',
    'PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY',
    'PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY',
    'PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY',
    'PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY',
    'PROCESS_POWER_THROTTLING_STATE', 'PROCESS_STARTED',
    'PROCESS_SUSPENDED', 'PROC_THREAD_ATTRIBUTE_NUM',
    'PROC_THREAD_ATTRIBUTE_NUM__enumvalues', 'PROPENUMPROC',
    'PROPENUMPROCA', 'PROPENUMPROCEX', 'PROPENUMPROCEXA',
    'PROPENUMPROCEXW', 'PROPENUMPROCW', 'PROTOENT', 'PRTL_BARRIER',
    'PRTL_CONDITION_VARIABLE', 'PRTL_CRITICAL_SECTION',
    'PRTL_CRITICAL_SECTION_DEBUG', 'PRTL_OSVERSIONINFOEXW',
    'PRTL_OSVERSIONINFOW', 'PRTL_REFERENCE_COUNT',
    'PRTL_REFERENCE_COUNT32', 'PRTL_RESOURCE_DEBUG', 'PRTL_RUN_ONCE',
    'PRTL_SRWLOCK', 'PRTL_UMS_SCHEDULER_ENTRY_POINT',
    'PRTL_UMS_SCHEDULER_REASON', 'PRTL_UMS_THREAD_INFO_CLASS',
    'PRUNTIME_FUNCTION', 'PSAVEPOINT_ID', 'PSCOPE_ID', 'PSCOPE_TABLE',
    'PSCOPE_TABLE_AMD64', 'PSCOPE_TABLE_ARM', 'PSCOPE_TABLE_ARM64',
    'PSCROLLBARINFO', 'PSCRUB_DATA_INPUT', 'PSCRUB_DATA_OUTPUT',
    'PSCRUB_PARITY_EXTENT', 'PSCRUB_PARITY_EXTENT_DATA',
    'PSC_EVENT_TYPE', 'PSC_NOTIFICATION_CALLBACK',
    'PSC_NOTIFICATION_REGISTRATION', 'PSECURE_MEMORY_CACHE_CALLBACK',
    'PSECURITY_ATTRIBUTES', 'PSECURITY_ATTRIBUTES_OPAQUE',
    'PSECURITY_CAPABILITIES', 'PSECURITY_CONTEXT_TRACKING_MODE',
    'PSECURITY_DESCRIPTOR', 'PSECURITY_DESCRIPTOR_CONTROL',
    'PSECURITY_IMPERSONATION_LEVEL', 'PSECURITY_INFORMATION',
    'PSECURITY_OBJECT_AI_PARAMS', 'PSECURITY_QUALITY_OF_SERVICE',
    'PSERVENT', 'PSERVERSILO_BASIC_INFORMATION', 'PSERVERSILO_STATE',
    'PSERVICE_CONTROL_STATUS_REASON_PARAMS',
    'PSERVICE_CONTROL_STATUS_REASON_PARAMSA',
    'PSERVICE_CONTROL_STATUS_REASON_PARAMSW',
    'PSERVICE_LAUNCH_PROTECTED_INFO', 'PSERVICE_NOTIFY',
    'PSERVICE_NOTIFYA', 'PSERVICE_NOTIFYW', 'PSERVICE_NOTIFY_1',
    'PSERVICE_NOTIFY_2', 'PSERVICE_NOTIFY_2A', 'PSERVICE_NOTIFY_2W',
    'PSERVICE_START_REASON', 'PSERVICE_TIMECHANGE_INFO',
    'PSERVICE_TRIGGER', 'PSERVICE_TRIGGER_INFO',
    'PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM', 'PSET_POWER_SETTING_VALUE',
    'PSE_ACCESS_REPLY', 'PSE_ACCESS_REQUEST',
    'PSE_IMAGE_SIGNATURE_TYPE', 'PSE_IMPERSONATION_STATE',
    'PSE_SECURITY_DESCRIPTOR', 'PSE_SID', 'PSE_SIGNING_LEVEL',
    'PSE_TOKEN_USER', 'PSFEATURE_CUSTPAPER', 'PSFEATURE_OUTPUT',
    'PSHARED_VIRTUAL_DISK_SUPPORT', 'PSHORT', 'PSHUFFLE_FILE_DATA',
    'PSID', 'PSID_AND_ATTRIBUTES', 'PSID_AND_ATTRIBUTES_ARRAY',
    'PSID_AND_ATTRIBUTES_HASH', 'PSID_HASH_ENTRY',
    'PSID_IDENTIFIER_AUTHORITY', 'PSID_NAME_USE',
    'PSILOOBJECT_BASIC_INFORMATION', 'PSINGLE_LIST_ENTRY',
    'PSINJECTDATA', 'PSIZE', 'PSIZEL', 'PSIZE_T', 'PSLIST_ENTRY',
    'PSLIST_HEADER', 'PSMALL_RECT', 'PSOCKADDR', 'PSOCKADDR_DL',
    'PSOCKADDR_IN', 'PSOCKADDR_IN6', 'PSOCKADDR_IN6_LH',
    'PSOCKADDR_IN6_PAIR', 'PSOCKADDR_IN6_W2KSP1', 'PSOCKADDR_INET',
    'PSOCKADDR_STORAGE', 'PSOCKADDR_STORAGE_LH',
    'PSOCKADDR_STORAGE_XP', 'PSOCKET_ADDRESS', 'PSOCKET_ADDRESS_LIST',
    'PSOCKET_PROCESSOR_AFFINITY', 'PSP_bitrev', 'PSP_bvf', 'PSP_bvfl',
    'PSP_bvt', 'PSP_bvtl', 'PSP_lv', 'PSP_lvl', 'PSP_lvr', 'PSP_max',
    'PSP_mfic', 'PSP_mfv', 'PSP_mfvc', 'PSP_mfvme', 'PSP_min',
    'PSP_mtic', 'PSP_mtv', 'PSP_mtvc', 'PSP_mtvme', 'PSP_sleep',
    'PSP_sv', 'PSP_svl', 'PSP_svr', 'PSP_vabs', 'PSP_vadd',
    'PSP_vasin', 'PSP_vavg', 'PSP_vbfy1', 'PSP_vbfy2', 'PSP_vc2i',
    'PSP_vcmovf', 'PSP_vcmovt', 'PSP_vcmp', 'PSP_vcos', 'PSP_vcrs',
    'PSP_vcrsp', 'PSP_vcst', 'PSP_vdet', 'PSP_vdiv', 'PSP_vdot',
    'PSP_vexp2', 'PSP_vf2h', 'PSP_vf2id', 'PSP_vf2in', 'PSP_vf2iu',
    'PSP_vf2iz', 'PSP_vfad', 'PSP_vfim', 'PSP_vflush', 'PSP_vh2f',
    'PSP_vhdp', 'PSP_vhtfm2', 'PSP_vhtfm3', 'PSP_vhtfm4', 'PSP_vi2c',
    'PSP_vi2f', 'PSP_vi2s', 'PSP_vi2uc', 'PSP_vi2us', 'PSP_vidt',
    'PSP_viim', 'PSP_vlgb', 'PSP_vlog2', 'PSP_vmax', 'PSP_vmfvc',
    'PSP_vmidt', 'PSP_vmin', 'PSP_vmmov', 'PSP_vmmul', 'PSP_vmone',
    'PSP_vmov', 'PSP_vmscl', 'PSP_vmtvc', 'PSP_vmul', 'PSP_vmzero',
    'PSP_vneg', 'PSP_vnop', 'PSP_vnrcp', 'PSP_vnsin', 'PSP_vocp',
    'PSP_vone', 'PSP_vpfxd', 'PSP_vpfxs', 'PSP_vpfxt', 'PSP_vqmul',
    'PSP_vrcp', 'PSP_vrexp2', 'PSP_vrndf1', 'PSP_vrndf2', 'PSP_vrndi',
    'PSP_vrnds', 'PSP_vrot', 'PSP_vrsq', 'PSP_vs2i', 'PSP_vsat0',
    'PSP_vsat1', 'PSP_vsbn', 'PSP_vsbz', 'PSP_vscl', 'PSP_vscmp',
    'PSP_vsge', 'PSP_vsgn', 'PSP_vsin', 'PSP_vslt', 'PSP_vsocp',
    'PSP_vsqrt', 'PSP_vsrt1', 'PSP_vsrt2', 'PSP_vsrt3', 'PSP_vsrt4',
    'PSP_vsub', 'PSP_vsync', 'PSP_vt4444', 'PSP_vt5551', 'PSP_vt5650',
    'PSP_vtfm2', 'PSP_vtfm3', 'PSP_vtfm4', 'PSP_vuc2i', 'PSP_vus2i',
    'PSP_vwbn', 'PSP_vzero', 'PSP_wsbw', 'PSRWLOCK', 'PSSIZE_T',
    'PSTR', 'PSTYLEBUF', 'PSTYLEBUFA', 'PSTYLEBUFW',
    'PSUPPORTED_OS_INFO', 'PSYNCHRONIZATION_BARRIER', 'PSYSTEMTIME',
    'PSYSTEM_ACCESS_FILTER_ACE', 'PSYSTEM_ALARM_ACE',
    'PSYSTEM_ALARM_CALLBACK_ACE', 'PSYSTEM_ALARM_CALLBACK_OBJECT_ACE',
    'PSYSTEM_ALARM_OBJECT_ACE', 'PSYSTEM_AUDIT_ACE',
    'PSYSTEM_AUDIT_CALLBACK_ACE', 'PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE',
    'PSYSTEM_AUDIT_OBJECT_ACE', 'PSYSTEM_BATTERY_STATE',
    'PSYSTEM_CPU_SET_INFORMATION',
    'PSYSTEM_LOGICAL_PROCESSOR_INFORMATION',
    'PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX',
    'PSYSTEM_MANDATORY_LABEL_ACE', 'PSYSTEM_POOL_ZEROING_INFORMATION',
    'PSYSTEM_POWER_CAPABILITIES', 'PSYSTEM_POWER_LEVEL',
    'PSYSTEM_POWER_POLICY', 'PSYSTEM_POWER_STATE',
    'PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION',
    'PSYSTEM_PROCESS_TRUST_LABEL_ACE',
    'PSYSTEM_RESOURCE_ATTRIBUTE_ACE', 'PSYSTEM_SCOPED_POLICY_ID_ACE',
    'PSZ', 'PTAPE_CREATE_PARTITION', 'PTAPE_ERASE',
    'PTAPE_GET_DRIVE_PARAMETERS', 'PTAPE_GET_MEDIA_PARAMETERS',
    'PTAPE_GET_POSITION', 'PTAPE_PREPARE',
    'PTAPE_SET_DRIVE_PARAMETERS', 'PTAPE_SET_MEDIA_PARAMETERS',
    'PTAPE_SET_POSITION', 'PTAPE_WMI_OPERATIONS', 'PTAPE_WRITE_MARKS',
    'PTBYTE', 'PTCH', 'PTCHAR', 'PTERMINATION_HANDLER', 'PTEXTMETRIC',
    'PTEXTMETRICA', 'PTEXTMETRICW', 'PTHREAD_START_ROUTINE',
    'PTIMERAPCROUTINE', 'PTIMEVAL', 'PTIME_ZONE_INFORMATION',
    'PTITLEBARINFO', 'PTITLEBARINFOEX', 'PTOKEN_ACCESS_INFORMATION',
    'PTOKEN_APPCONTAINER_INFORMATION', 'PTOKEN_AUDIT_POLICY',
    'PTOKEN_BNO_ISOLATION_INFORMATION', 'PTOKEN_CONTROL',
    'PTOKEN_DEFAULT_DACL', 'PTOKEN_DEVICE_CLAIMS', 'PTOKEN_ELEVATION',
    'PTOKEN_ELEVATION_TYPE', 'PTOKEN_GROUPS',
    'PTOKEN_GROUPS_AND_PRIVILEGES', 'PTOKEN_INFORMATION_CLASS',
    'PTOKEN_LINKED_TOKEN', 'PTOKEN_MANDATORY_LABEL',
    'PTOKEN_MANDATORY_POLICY', 'PTOKEN_ORIGIN', 'PTOKEN_OWNER',
    'PTOKEN_PRIMARY_GROUP', 'PTOKEN_PRIVILEGES',
    'PTOKEN_SID_INFORMATION', 'PTOKEN_SOURCE', 'PTOKEN_STATISTICS',
    'PTOKEN_TYPE', 'PTOKEN_USER', 'PTOKEN_USER_CLAIMS',
    'PTOP_LEVEL_EXCEPTION_FILTER', 'PTOUCHINPUT',
    'PTOUCHPREDICTIONPARAMETERS', 'PTOUCH_HIT_TESTING_INPUT',
    'PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION', 'PTP_CALLBACK_ENVIRON',
    'PTP_CALLBACK_INSTANCE', 'PTP_CLEANUP_GROUP',
    'PTP_CLEANUP_GROUP_CANCEL_CALLBACK', 'PTP_IO', 'PTP_POOL',
    'PTP_POOL_STACK_INFORMATION', 'PTP_SIMPLE_CALLBACK', 'PTP_TIMER',
    'PTP_TIMER_CALLBACK', 'PTP_VERSION', 'PTP_WAIT',
    'PTP_WAIT_CALLBACK', 'PTP_WIN32_IO_CALLBACK', 'PTP_WORK',
    'PTP_WORK_CALLBACK', 'PTRANSACTIONMANAGER_BASIC_INFORMATION',
    'PTRANSACTIONMANAGER_LOGPATH_INFORMATION',
    'PTRANSACTIONMANAGER_LOG_INFORMATION',
    'PTRANSACTIONMANAGER_OLDEST_INFORMATION',
    'PTRANSACTIONMANAGER_RECOVERY_INFORMATION',
    'PTRANSACTION_BASIC_INFORMATION', 'PTRANSACTION_BIND_INFORMATION',
    'PTRANSACTION_ENLISTMENTS_INFORMATION',
    'PTRANSACTION_ENLISTMENT_PAIR', 'PTRANSACTION_LIST_ENTRY',
    'PTRANSACTION_LIST_INFORMATION', 'PTRANSACTION_NOTIFICATION',
    'PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT',
    'PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT',
    'PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT',
    'PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT',
    'PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT',
    'PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT',
    'PTRANSACTION_PROPERTIES_INFORMATION',
    'PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION', 'PTRIVERTEX',
    'PTSTR', 'PT_MOUSE', 'PT_PEN', 'PT_POINTER', 'PT_TOUCH',
    'PT_TOUCHPAD', 'PUCHAR', 'PUCSCHAR', 'PUCSSTR', 'PUHALF_PTR',
    'PUINT', 'PUINT16', 'PUINT32', 'PUINT64', 'PUINT8', 'PUINT_PTR',
    'PULARGE_INTEGER', 'PULONG', 'PULONG32', 'PULONG64', 'PULONGLONG',
    'PULONG_PTR', 'PUMS_COMPLETION_LIST', 'PUMS_CONTEXT',
    'PUMS_CREATE_THREAD_ATTRIBUTES', 'PUMS_SCHEDULER_ENTRY_POINT',
    'PUMS_SCHEDULER_STARTUP_INFO', 'PUMS_SYSTEM_THREAD_INFORMATION',
    'PUMS_THREAD_INFO_CLASS', 'PUNWIND_HISTORY_TABLE',
    'PUNWIND_HISTORY_TABLE_ENTRY', 'PUNZTCH', 'PUNZWCH', 'PUOW',
    'PUPDATELAYEREDWINDOWINFO', 'PUSAGE_PROPERTIES',
    'PUSEROBJECTFLAGS', 'PUSER_ACTIVITY_PRESENCE', 'PUSHORT',
    'PUTSTR', 'PUUCSCHAR', 'PUUCSSTR', 'PUWSTR', 'PUWSTR_C',
    'PUZZTSTR', 'PUZZWSTR', 'PVALCONTEXT', 'PVALENT', 'PVALENTA',
    'PVALENTW', 'PVALUE', 'PVALUEA', 'PVALUEW',
    'PVECTORED_EXCEPTION_HANDLER', 'PVIDEOPARAMETERS', 'PVOID',
    'PWCH', 'PWCHAR', 'PWCRANGE', 'PWGLSWAP', 'PWIN32_FIND_DATA',
    'PWIN32_FIND_DATAA', 'PWIN32_FIND_DATAW',
    'PWIN32_FIND_STREAM_DATA', 'PWIN32_MEMORY_RANGE_ENTRY',
    'PWINDOWINFO', 'PWINDOWPLACEMENT', 'PWINDOWPOS',
    'PWINDOW_BUFFER_SIZE_RECORD', 'PWNDCLASS', 'PWNDCLASSA',
    'PWNDCLASSEX', 'PWNDCLASSEXA', 'PWNDCLASSEXW', 'PWNDCLASSW',
    'PWORD', 'PWOW64_CONTEXT', 'PWOW64_DESCRIPTOR_TABLE_ENTRY',
    'PWOW64_FLOATING_SAVE_AREA', 'PWOW64_LDT_ENTRY', 'PWSACMSGHDR',
    'PWSACOMPLETION', 'PWSACOMPLETIONTYPE', 'PWSAECOMPARATOR',
    'PWSAESETSERVICEOP', 'PWSAMSG', 'PWSANAMESPACE_INFO',
    'PWSANAMESPACE_INFOA', 'PWSANAMESPACE_INFOEX',
    'PWSANAMESPACE_INFOEXA', 'PWSANAMESPACE_INFOEXW',
    'PWSANAMESPACE_INFOW', 'PWSANSCLASSINFO', 'PWSANSCLASSINFOA',
    'PWSANSCLASSINFOW', 'PWSAPOLLFD', 'PWSAQUERYSET', 'PWSAQUERYSET2',
    'PWSAQUERYSET2A', 'PWSAQUERYSET2W', 'PWSAQUERYSETA',
    'PWSAQUERYSETW', 'PWSASERVICECLASSINFO', 'PWSASERVICECLASSINFOA',
    'PWSASERVICECLASSINFOW', 'PWSAVERSION', 'PWSTR',
    'PWTSSESSION_NOTIFICATION', 'PXFORM', 'PXMM_SAVE_AREA32',
    'PXSAVE_AREA', 'PXSAVE_AREA_HEADER', 'PXSAVE_CET_U_FORMAT',
    'PXSAVE_FORMAT', 'PXSTATE_CONFIGURATION', 'PXSTATE_CONTEXT',
    'PXSTATE_FEATURE', 'PZPCSTR', 'PZPCWSTR', 'PZPSTR', 'PZPTSTR',
    'PZPWSTR', 'PZZSTR', 'PZZTSTR', 'PZZWSTR', 'PdataCrChained',
    'PdataCrChainedWithPac', 'PdataCrUnchained',
    'PdataCrUnchainedSavedLr', 'PdataPackedUnwindFragment',
    'PdataPackedUnwindFunction', 'PdataRefToFullXdata',
    'PdcInvocation', 'PhysicalPowerButtonPress', 'PlatformIdleStates',
    'PlatformIdleVeto', 'PlatformInformation', 'PlatformRole',
    'PlatformRoleAppliancePC', 'PlatformRoleDesktop',
    'PlatformRoleEnterpriseServer', 'PlatformRoleMaximum',
    'PlatformRoleMobile', 'PlatformRolePerformanceServer',
    'PlatformRoleSOHOServer', 'PlatformRoleSlate',
    'PlatformRoleUnspecified', 'PlatformRoleWorkstation',
    'PlmPowerRequestCreate', 'PoAc', 'PoConditionMaximum', 'PoDc',
    'PoHot', 'PowerActionDisplayOff', 'PowerActionHibernate',
    'PowerActionNone', 'PowerActionReserved', 'PowerActionShutdown',
    'PowerActionShutdownOff', 'PowerActionShutdownReset',
    'PowerActionSleep', 'PowerActionWarmEject', 'PowerDeviceD0',
    'PowerDeviceD1', 'PowerDeviceD2', 'PowerDeviceD3',
    'PowerDeviceMaximum', 'PowerDeviceUnspecified',
    'PowerInformationInternal', 'PowerInformationLevelMaximum',
    'PowerInformationLevelUnused0', 'PowerMonitorDim',
    'PowerMonitorOff', 'PowerMonitorOn', 'PowerRequestAction',
    'PowerRequestActionInternal', 'PowerRequestAwayModeRequired',
    'PowerRequestCreate', 'PowerRequestDisplayRequired',
    'PowerRequestExecutionRequired', 'PowerRequestSystemRequired',
    'PowerSettingNotificationName', 'PowerShutdownNotification',
    'PowerSystemHibernate', 'PowerSystemMaximum',
    'PowerSystemShutdown', 'PowerSystemSleeping1',
    'PowerSystemSleeping2', 'PowerSystemSleeping3',
    'PowerSystemUnspecified', 'PowerSystemWorking',
    'PowerUserInactive', 'PowerUserInvalid', 'PowerUserMaximum',
    'PowerUserNotPresent', 'PowerUserPresent',
    'ProcThreadAttributeAllApplicationPackagesPolicy',
    'ProcThreadAttributeChildProcessPolicy',
    'ProcThreadAttributeDesktopAppPolicy',
    'ProcThreadAttributeGroupAffinity',
    'ProcThreadAttributeHandleList',
    'ProcThreadAttributeIdealProcessor', 'ProcThreadAttributeJobList',
    'ProcThreadAttributeMitigationAuditPolicy',
    'ProcThreadAttributeMitigationPolicy',
    'ProcThreadAttributeParentProcess',
    'ProcThreadAttributePreferredNode',
    'ProcThreadAttributeProtectionLevel',
    'ProcThreadAttributePseudoConsole',
    'ProcThreadAttributeSafeOpenPromptOriginClaim',
    'ProcThreadAttributeSecurityCapabilities',
    'ProcThreadAttributeUmsThread', 'ProcThreadAttributeWin32kFilter',
    'ProcessASLRPolicy', 'ProcessAppMemoryInfo',
    'ProcessChildProcessPolicy', 'ProcessControlFlowGuardPolicy',
    'ProcessDEPPolicy', 'ProcessDynamicCodePolicy',
    'ProcessExtensionPointDisablePolicy', 'ProcessFontDisablePolicy',
    'ProcessImageLoadPolicy', 'ProcessInPrivateInfo',
    'ProcessInformationClassMax', 'ProcessLeapSecondInfo',
    'ProcessMemoryExhaustionInfo', 'ProcessMemoryPriority',
    'ProcessMitigationOptionsMask', 'ProcessPayloadRestrictionPolicy',
    'ProcessPowerThrottling', 'ProcessProtectionLevelInfo',
    'ProcessReservedValue1', 'ProcessSideChannelIsolationPolicy',
    'ProcessSignaturePolicy', 'ProcessStrictHandleCheckPolicy',
    'ProcessSystemCallDisablePolicy', 'ProcessSystemCallFilterPolicy',
    'ProcessTelemetryCoverageInfo', 'ProcessUserShadowStackPolicy',
    'ProcessorCap', 'ProcessorIdleDomains', 'ProcessorIdleStates',
    'ProcessorIdleStatesHv', 'ProcessorIdleVeto',
    'ProcessorInformation', 'ProcessorInformationEx', 'ProcessorLoad',
    'ProcessorPerfCapHv', 'ProcessorPerfStates',
    'ProcessorPerfStatesHv', 'ProcessorPowerPolicyAc',
    'ProcessorPowerPolicyCurrent', 'ProcessorPowerPolicyDc',
    'ProcessorSetIdle', 'ProcessorStateHandler',
    'ProcessorStateHandler2', 'QMOVE_CROSS_FS', 'QMOVE_OVERWRITE',
    'QMOVE_OVR_RO', 'QOS', 'QOS_SD_MODE', 'QOS_SHAPING_RATE',
    'QUERY_SERVICE_CONFIG', 'QUERY_SERVICE_CONFIGA',
    'QUERY_SERVICE_CONFIGW', 'QUERY_SERVICE_LOCK_STATUS',
    'QUERY_SERVICE_LOCK_STATUSA', 'QUERY_SERVICE_LOCK_STATUSW',
    'QUOTA_LIMITS', 'QUOTA_LIMITS_EX',
    'QueryPotentialDripsConstraint', 'RANGE_KIND_FUNC',
    'RANGE_KIND_HIDDEN_RANGE', 'RANGE_KIND_SEGMENT',
    'RANGE_KIND_UNKNOWN', 'RASTERIZER_STATUS', 'RATE_QUOTA_LIMIT',
    'RAWHID', 'RAWINPUT', 'RAWINPUTDEVICE', 'RAWINPUTDEVICELIST',
    'RAWINPUTHEADER', 'RAWKEYBOARD', 'RAWMOUSE', 'READ_ACCESS',
    'READ_DIRECTORY_NOTIFY_INFORMATION_CLASS',
    'READ_DIRECTORY_NOTIFY_INFORMATION_CLASS__enumvalues',
    'REAL_ERROR_BADDATA', 'REAL_ERROR_BADSTR', 'REAL_ERROR_FORMAT',
    'REAL_ERROR_FPOVER', 'REAL_ERROR_INTOVER', 'REAL_ERROR_OK',
    'REAL_ERROR_RANGE', 'REAL_ERROR_ZERODIV', 'REARRANGE_FILE_DATA',
    'REARRANGE_FILE_DATA32', 'REASON_CONTEXT', 'RECONVERTSTRING',
    'RECT', 'RECTL', 'REDIRECTION_DESCRIPTOR',
    'REDIRECTION_FUNCTION_DESCRIPTOR', 'REGISTERWORD',
    'REGISTERWORDA', 'REGISTERWORDENUMPROCA', 'REGISTERWORDENUMPROCW',
    'REGISTERWORDW', 'REGSAM', 'REG_ASSERT', 'REG_BADBR',
    'REG_BADPAT', 'REG_BADRPT', 'REG_EBRACE', 'REG_EBRACK',
    'REG_ECOLLATE', 'REG_ECTYPE', 'REG_EESCAPE', 'REG_EMPTY',
    'REG_EPAREN', 'REG_ERANGE', 'REG_ESIZE', 'REG_ESPACE',
    'REG_ESUBREG', 'REG_INVARG', 'REG_NOMATCH', 'REG_PROVIDER',
    'REMOTE_NAME_INFO', 'REMOTE_NAME_INFOA', 'REMOTE_NAME_INFOW',
    'REPARSE_GUID_DATA_BUFFER', 'RESMOD_HANDLE', 'RESMOD_INTO',
    'RESMOD_MAX', 'RESMOD_NONE', 'RESMOD_OUT', 'RESMOD_OVER',
    'RESMOD_SRCINTO', 'RESMOD_SRCOUT', 'RESMOD_SRCOVER',
    'RESMOD_USER', 'RESOURCEMANAGER_BASIC_INFORMATION',
    'RESOURCEMANAGER_COMPLETION_INFORMATION',
    'RESOURCEMANAGER_INFORMATION_CLASS',
    'RESOURCEMANAGER_INFORMATION_CLASS__enumvalues',
    'RESUME_PERFORMANCE', 'RGBQUAD', 'RGBTRIPLE', 'RGNDATA',
    'RGNDATAHEADER', 'RID_DEVICE_INFO', 'RID_DEVICE_INFO_HID',
    'RID_DEVICE_INFO_KEYBOARD', 'RID_DEVICE_INFO_MOUSE', 'RIP_INFO',
    'RISCV_add', 'RISCV_addi', 'RISCV_addiw', 'RISCV_addw',
    'RISCV_amoadd', 'RISCV_amoand', 'RISCV_amomax', 'RISCV_amomaxu',
    'RISCV_amomin', 'RISCV_amominu', 'RISCV_amoor', 'RISCV_amoswap',
    'RISCV_amoxor', 'RISCV_and', 'RISCV_andi', 'RISCV_auipc',
    'RISCV_beq', 'RISCV_beqz', 'RISCV_bge', 'RISCV_bgeu',
    'RISCV_bgez', 'RISCV_bgtz', 'RISCV_blez', 'RISCV_blt',
    'RISCV_bltu', 'RISCV_bltz', 'RISCV_bne', 'RISCV_bnez',
    'RISCV_call', 'RISCV_csrc', 'RISCV_csrci', 'RISCV_csrr',
    'RISCV_csrrc', 'RISCV_csrrci', 'RISCV_csrrs', 'RISCV_csrrsi',
    'RISCV_csrrw', 'RISCV_csrrwi', 'RISCV_csrs', 'RISCV_csrsi',
    'RISCV_csrw', 'RISCV_csrwi', 'RISCV_div', 'RISCV_divu',
    'RISCV_divuw', 'RISCV_divw', 'RISCV_ebreak', 'RISCV_ecall',
    'RISCV_fabs', 'RISCV_fadd', 'RISCV_fclass', 'RISCV_fcvtf2f',
    'RISCV_fcvtf2i', 'RISCV_fcvti2f', 'RISCV_fdiv', 'RISCV_fence',
    'RISCV_fencei', 'RISCV_feq', 'RISCV_fld', 'RISCV_fle',
    'RISCV_flq', 'RISCV_flt', 'RISCV_flw', 'RISCV_fmadd',
    'RISCV_fmax', 'RISCV_fmin', 'RISCV_fmsub', 'RISCV_fmul',
    'RISCV_fmv', 'RISCV_fneg', 'RISCV_fnmadd', 'RISCV_fnmsub',
    'RISCV_frcsr', 'RISCV_frflags', 'RISCV_frrm', 'RISCV_fscsr',
    'RISCV_fsd', 'RISCV_fsflags', 'RISCV_fsgnj', 'RISCV_fsgnjn',
    'RISCV_fsgnjx', 'RISCV_fsq', 'RISCV_fsqrt', 'RISCV_fsrm',
    'RISCV_fsub', 'RISCV_fsw', 'RISCV_hfenceb', 'RISCV_hfenceg',
    'RISCV_j', 'RISCV_jal', 'RISCV_jalr', 'RISCV_jr', 'RISCV_jump',
    'RISCV_la', 'RISCV_last', 'RISCV_lb', 'RISCV_lbu', 'RISCV_ld',
    'RISCV_lh', 'RISCV_lhu', 'RISCV_li', 'RISCV_lr', 'RISCV_lui',
    'RISCV_lw', 'RISCV_lwu', 'RISCV_mret', 'RISCV_mul', 'RISCV_mulh',
    'RISCV_mulhsu', 'RISCV_mulhu', 'RISCV_mulw', 'RISCV_mv',
    'RISCV_neg', 'RISCV_negw', 'RISCV_nop', 'RISCV_not', 'RISCV_null',
    'RISCV_or', 'RISCV_ori', 'RISCV_rdcycle', 'RISCV_rdcycleh',
    'RISCV_rdinstret', 'RISCV_rdinstreth', 'RISCV_rdtime',
    'RISCV_rdtimeh', 'RISCV_rem', 'RISCV_remu', 'RISCV_remuw',
    'RISCV_remw', 'RISCV_ret', 'RISCV_sb', 'RISCV_sc', 'RISCV_sd',
    'RISCV_seqz', 'RISCV_sext', 'RISCV_sfence', 'RISCV_sgtz',
    'RISCV_sh', 'RISCV_sll', 'RISCV_slli', 'RISCV_slliw',
    'RISCV_sllw', 'RISCV_slt', 'RISCV_slti', 'RISCV_sltiu',
    'RISCV_sltu', 'RISCV_sltw', 'RISCV_sltz', 'RISCV_snez',
    'RISCV_sra', 'RISCV_srai', 'RISCV_sraiw', 'RISCV_sraw',
    'RISCV_sret', 'RISCV_srl', 'RISCV_srli', 'RISCV_srliw',
    'RISCV_srlw', 'RISCV_sub', 'RISCV_subw', 'RISCV_sw', 'RISCV_tail',
    'RISCV_uret', 'RISCV_wfi', 'RISCV_xor', 'RISCV_xori', 'RL78_add',
    'RL78_addc', 'RL78_addw', 'RL78_and', 'RL78_and1', 'RL78_bc',
    'RL78_bf', 'RL78_bh', 'RL78_bnc', 'RL78_bnh', 'RL78_bnz',
    'RL78_br', 'RL78_brk', 'RL78_bt', 'RL78_btclr', 'RL78_bz',
    'RL78_call', 'RL78_callt', 'RL78_clr1', 'RL78_clrb', 'RL78_clrw',
    'RL78_cmp', 'RL78_cmp0', 'RL78_cmps', 'RL78_cmpw', 'RL78_dec',
    'RL78_decw', 'RL78_divhu', 'RL78_divwu', 'RL78_halt', 'RL78_inc',
    'RL78_incw', 'RL78_last', 'RL78_mach', 'RL78_machu', 'RL78_mov',
    'RL78_mov1', 'RL78_movs', 'RL78_movw', 'RL78_mulh', 'RL78_mulhu',
    'RL78_mulu', 'RL78_nop', 'RL78_not1', 'RL78_null', 'RL78_oneb',
    'RL78_onew', 'RL78_or', 'RL78_or1', 'RL78_pop', 'RL78_push',
    'RL78_ret', 'RL78_retb', 'RL78_reti', 'RL78_rol', 'RL78_rolc',
    'RL78_rolwc', 'RL78_ror', 'RL78_rorc', 'RL78_sar', 'RL78_sarw',
    'RL78_sel', 'RL78_set1', 'RL78_shl', 'RL78_shlw', 'RL78_shr',
    'RL78_shrw', 'RL78_skc', 'RL78_skh', 'RL78_sknc', 'RL78_sknh',
    'RL78_sknz', 'RL78_skz', 'RL78_stop', 'RL78_sub', 'RL78_subc',
    'RL78_subw', 'RL78_xch', 'RL78_xchw', 'RL78_xor', 'RL78_xor1',
    'RNRSERVICE_DELETE', 'RNRSERVICE_DEREGISTER',
    'RNRSERVICE_REGISTER', 'RPC_MEM', 'RPC_OK', 'RPC_UNK',
    'RTL_BARRIER', 'RTL_CONDITION_VARIABLE', 'RTL_CRITICAL_SECTION',
    'RTL_CRITICAL_SECTION_DEBUG', 'RTL_OSVERSIONINFOEXW',
    'RTL_OSVERSIONINFOW', 'RTL_REFERENCE_COUNT',
    'RTL_REFERENCE_COUNT32', 'RTL_RESOURCE_DEBUG', 'RTL_RUN_ONCE',
    'RTL_SRWLOCK', 'RTL_UMS_SCHEDULER_REASON',
    'RTL_UMS_SCHEDULER_REASON__enumvalues',
    'RTL_UMS_THREAD_INFO_CLASS',
    'RTL_UMS_THREAD_INFO_CLASS__enumvalues', 'RUNTIME_FUNCTION',
    'RW_ACCESS', 'RX_abs', 'RX_adc', 'RX_add', 'RX_and', 'RX_bclr',
    'RX_beq', 'RX_bfmov', 'RX_bfmovz', 'RX_bge', 'RX_bgeu', 'RX_bgt',
    'RX_bgtu', 'RX_ble', 'RX_bleu', 'RX_blt', 'RX_bltu', 'RX_bmeq',
    'RX_bmge', 'RX_bmgeu', 'RX_bmgt', 'RX_bmgtu', 'RX_bmle',
    'RX_bmleu', 'RX_bmlt', 'RX_bmltu', 'RX_bmn', 'RX_bmne', 'RX_bmno',
    'RX_bmo', 'RX_bmpz', 'RX_bn', 'RX_bne', 'RX_bno', 'RX_bnot',
    'RX_bo', 'RX_bpz', 'RX_bra', 'RX_brk', 'RX_bset', 'RX_bsr',
    'RX_btst', 'RX_clrpsw', 'RX_cmp', 'RX_dabs', 'RX_dadd',
    'RX_dcmpeq', 'RX_dcmple', 'RX_dcmplt', 'RX_dcmpun', 'RX_ddiv',
    'RX_div', 'RX_divu', 'RX_dmov', 'RX_dmul', 'RX_dneg', 'RX_dpopm',
    'RX_dpushm', 'RX_dround', 'RX_dsqrt', 'RX_dsub', 'RX_dtof',
    'RX_dtoi', 'RX_dtou', 'RX_emaca', 'RX_emsba', 'RX_emul',
    'RX_emula', 'RX_emulu', 'RX_fadd', 'RX_fcmp', 'RX_fdiv',
    'RX_fmul', 'RX_fsqrt', 'RX_fsub', 'RX_ftod', 'RX_ftoi', 'RX_ftou',
    'RX_int', 'RX_itod', 'RX_itof', 'RX_jmp', 'RX_jsr', 'RX_last',
    'RX_machi', 'RX_maclh', 'RX_maclo', 'RX_max', 'RX_min', 'RX_mov',
    'RX_movco', 'RX_movli', 'RX_movu', 'RX_msbhi', 'RX_msblh',
    'RX_msblo', 'RX_mul', 'RX_mulhi', 'RX_mullh', 'RX_mullo',
    'RX_mvfacgu', 'RX_mvfachi', 'RX_mvfaclo', 'RX_mvfacmi', 'RX_mvfc',
    'RX_mvfdc', 'RX_mvfdr', 'RX_mvtacgu', 'RX_mvtachi', 'RX_mvtaclo',
    'RX_mvtc', 'RX_mvtdc', 'RX_mvtipl', 'RX_neg', 'RX_nop', 'RX_not',
    'RX_null', 'RX_or', 'RX_pop', 'RX_popc', 'RX_popm', 'RX_push',
    'RX_pushc', 'RX_pushm', 'RX_racl', 'RX_racw', 'RX_rdacl',
    'RX_rdacw', 'RX_revl', 'RX_revw', 'RX_rmpa', 'RX_rolc', 'RX_rorc',
    'RX_rotl', 'RX_rotr', 'RX_round', 'RX_rstr', 'RX_rte', 'RX_rtfi',
    'RX_rts', 'RX_rtsd', 'RX_sat', 'RX_satr', 'RX_save', 'RX_sbb',
    'RX_sceq', 'RX_scge', 'RX_scgeu', 'RX_scgt', 'RX_scgtu',
    'RX_scle', 'RX_scleu', 'RX_sclt', 'RX_scltu', 'RX_scmpu',
    'RX_scn', 'RX_scne', 'RX_scno', 'RX_sco', 'RX_scpz', 'RX_setpsw',
    'RX_shar', 'RX_shll', 'RX_shlr', 'RX_smovb', 'RX_smovf',
    'RX_smovu', 'RX_sstr', 'RX_stnz', 'RX_stz', 'RX_sub', 'RX_suntil',
    'RX_swhile', 'RX_tst', 'RX_utod', 'RX_utof', 'RX_wait', 'RX_xchg',
    'RX_xor', 'R_af', 'R_ah', 'R_al', 'R_ax', 'R_bh', 'R_bl',
    'R_bnd0', 'R_bnd1', 'R_bnd2', 'R_bnd3', 'R_bp', 'R_bpl', 'R_bx',
    'R_cf', 'R_ch', 'R_cl', 'R_cs', 'R_cx', 'R_df', 'R_dh', 'R_di',
    'R_dil', 'R_dl', 'R_ds', 'R_dx', 'R_efl', 'R_es', 'R_fpctrl',
    'R_fpstat', 'R_fptags', 'R_fs', 'R_gs', 'R_if', 'R_ip', 'R_k0',
    'R_k1', 'R_k2', 'R_k3', 'R_k4', 'R_k5', 'R_k6', 'R_k7', 'R_last',
    'R_mm0', 'R_mm1', 'R_mm2', 'R_mm3', 'R_mm4', 'R_mm5', 'R_mm6',
    'R_mm7', 'R_mxcsr', 'R_none', 'R_of', 'R_pf', 'R_r10', 'R_r11',
    'R_r12', 'R_r13', 'R_r14', 'R_r15', 'R_r8', 'R_r9', 'R_sf',
    'R_si', 'R_sil', 'R_sp', 'R_spl', 'R_ss', 'R_st0', 'R_st1',
    'R_st2', 'R_st3', 'R_st4', 'R_st5', 'R_st6', 'R_st7', 'R_tf',
    'R_xmm0', 'R_xmm1', 'R_xmm10', 'R_xmm11', 'R_xmm12', 'R_xmm13',
    'R_xmm14', 'R_xmm15', 'R_xmm16', 'R_xmm17', 'R_xmm18', 'R_xmm19',
    'R_xmm2', 'R_xmm20', 'R_xmm21', 'R_xmm22', 'R_xmm23', 'R_xmm24',
    'R_xmm25', 'R_xmm26', 'R_xmm27', 'R_xmm28', 'R_xmm29', 'R_xmm3',
    'R_xmm30', 'R_xmm31', 'R_xmm4', 'R_xmm5', 'R_xmm6', 'R_xmm7',
    'R_xmm8', 'R_xmm9', 'R_ymm0', 'R_ymm1', 'R_ymm10', 'R_ymm11',
    'R_ymm12', 'R_ymm13', 'R_ymm14', 'R_ymm15', 'R_ymm16', 'R_ymm17',
    'R_ymm18', 'R_ymm19', 'R_ymm2', 'R_ymm20', 'R_ymm21', 'R_ymm22',
    'R_ymm23', 'R_ymm24', 'R_ymm25', 'R_ymm26', 'R_ymm27', 'R_ymm28',
    'R_ymm29', 'R_ymm3', 'R_ymm30', 'R_ymm31', 'R_ymm4', 'R_ymm5',
    'R_ymm6', 'R_ymm7', 'R_ymm8', 'R_ymm9', 'R_zf', 'R_zmm0',
    'R_zmm1', 'R_zmm10', 'R_zmm11', 'R_zmm12', 'R_zmm13', 'R_zmm14',
    'R_zmm15', 'R_zmm16', 'R_zmm17', 'R_zmm18', 'R_zmm19', 'R_zmm2',
    'R_zmm20', 'R_zmm21', 'R_zmm22', 'R_zmm23', 'R_zmm24', 'R_zmm25',
    'R_zmm26', 'R_zmm27', 'R_zmm28', 'R_zmm29', 'R_zmm3', 'R_zmm30',
    'R_zmm31', 'R_zmm4', 'R_zmm5', 'R_zmm6', 'R_zmm7', 'R_zmm8',
    'R_zmm9', 'ReadDirectoryNotifyExtendedInformation',
    'ReadDirectoryNotifyInformation', 'RecognizerType', 'RegNo',
    'RegisterSpmPowerSettings', 'RelationAll', 'RelationCache',
    'RelationGroup', 'RelationNumaNode', 'RelationProcessorCore',
    'RelationProcessorPackage', 'ReplacesCorHdrNumericDefines',
    'ResourceManagerBasicInformation',
    'ResourceManagerCompletionInformation',
    'RunlevelInformationInActivationContext', 'SAVEPOINT_ID',
    'SAVE_ALL_VALUES', 'SAVE_DIFF', 'SAVE_NONE', 'SCOPE_LEVEL',
    'SCOPE_TABLE', 'SCOPE_TABLE_AMD64', 'SCOPE_TABLE_ARM',
    'SCOPE_TABLE_ARM64', 'SCROLLBARINFO', 'SCROLLINFO',
    'SCRUB_DATA_INPUT', 'SCRUB_DATA_OUTPUT', 'SCRUB_PARITY_EXTENT',
    'SCRUB_PARITY_EXTENT_DATA', 'SC_ACTION', 'SC_ACTION_NONE',
    'SC_ACTION_OWN_RESTART', 'SC_ACTION_REBOOT', 'SC_ACTION_RESTART',
    'SC_ACTION_RUN_COMMAND', 'SC_ACTION_TYPE',
    'SC_ACTION_TYPE__enumvalues', 'SC_ENUM_PROCESS_INFO',
    'SC_ENUM_TYPE', 'SC_ENUM_TYPE__enumvalues',
    'SC_EVENT_DATABASE_CHANGE', 'SC_EVENT_PROPERTY_CHANGE',
    'SC_EVENT_STATUS_CHANGE', 'SC_EVENT_TYPE',
    'SC_EVENT_TYPE__enumvalues', 'SC_HANDLE', 'SC_LOCK',
    'SC_STATUS_PROCESS_INFO', 'SC_STATUS_TYPE',
    'SC_STATUS_TYPE__enumvalues', 'SECURITY_ATTRIBUTES',
    'SECURITY_CAPABILITIES', 'SECURITY_CONTEXT_TRACKING_MODE',
    'SECURITY_DESCRIPTOR', 'SECURITY_DESCRIPTOR_CONTROL',
    'SECURITY_DESCRIPTOR_RELATIVE', 'SECURITY_IMPERSONATION_LEVEL',
    'SECURITY_IMPERSONATION_LEVEL__enumvalues',
    'SECURITY_INFORMATION', 'SECURITY_OBJECT_AI_PARAMS',
    'SECURITY_QUALITY_OF_SERVICE', 'SELECTION_CHANGED',
    'SENDASYNCPROC', 'SERIALKEYS', 'SERIALKEYSA', 'SERIALKEYSW',
    'SERVENT', 'SERVERSILO_BASIC_INFORMATION', 'SERVERSILO_INITING',
    'SERVERSILO_SHUTTING_DOWN', 'SERVERSILO_STARTED',
    'SERVERSILO_STATE', 'SERVERSILO_STATE__enumvalues',
    'SERVERSILO_TERMINATED', 'SERVERSILO_TERMINATING', 'SERVICETYPE',
    'SERVICE_CONTROL_STATUS_REASON_PARAMS',
    'SERVICE_CONTROL_STATUS_REASON_PARAMSA',
    'SERVICE_CONTROL_STATUS_REASON_PARAMSW',
    'SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM',
    'SERVICE_DELAYED_AUTO_START_INFO', 'SERVICE_DESCRIPTION',
    'SERVICE_DESCRIPTIONA', 'SERVICE_DESCRIPTIONW',
    'SERVICE_DIRECTORY_TYPE', 'SERVICE_ERROR_TYPE',
    'SERVICE_ERROR_TYPE__enumvalues', 'SERVICE_FAILURE_ACTIONS',
    'SERVICE_FAILURE_ACTIONSA', 'SERVICE_FAILURE_ACTIONSW',
    'SERVICE_FAILURE_ACTIONS_FLAG', 'SERVICE_LAUNCH_PROTECTED_INFO',
    'SERVICE_LOAD_TYPE', 'SERVICE_LOAD_TYPE__enumvalues',
    'SERVICE_NODE_TYPE', 'SERVICE_NODE_TYPE__enumvalues',
    'SERVICE_NOTIFY', 'SERVICE_NOTIFYA', 'SERVICE_NOTIFYW',
    'SERVICE_NOTIFY_1', 'SERVICE_NOTIFY_2', 'SERVICE_NOTIFY_2A',
    'SERVICE_NOTIFY_2W', 'SERVICE_PREFERRED_NODE_INFO',
    'SERVICE_PRESHUTDOWN_INFO', 'SERVICE_REGISTRY_STATE_TYPE',
    'SERVICE_REQUIRED_PRIVILEGES_INFO',
    'SERVICE_REQUIRED_PRIVILEGES_INFOA',
    'SERVICE_REQUIRED_PRIVILEGES_INFOW', 'SERVICE_SID_INFO',
    'SERVICE_START_REASON', 'SERVICE_STATUS', 'SERVICE_STATUS_HANDLE',
    'SERVICE_STATUS_PROCESS', 'SERVICE_TABLE_ENTRY',
    'SERVICE_TABLE_ENTRYA', 'SERVICE_TABLE_ENTRYW',
    'SERVICE_TIMECHANGE_INFO', 'SERVICE_TRIGGER',
    'SERVICE_TRIGGER_INFO', 'SERVICE_TRIGGER_SPECIFIC_DATA_ITEM',
    'SETPROC_IDB', 'SETPROC_LOADER', 'SETPROC_LOADER_NON_FATAL',
    'SETPROC_USER', 'SE_ACCESS_REPLY', 'SE_ACCESS_REQUEST',
    'SE_IMAGE_SIGNATURE_TYPE', 'SE_IMAGE_SIGNATURE_TYPE__enumvalues',
    'SE_IMPERSONATION_STATE', 'SE_LEARNING_MODE_DATA_TYPE',
    'SE_LEARNING_MODE_DATA_TYPE__enumvalues',
    'SE_SECURITY_DESCRIPTOR', 'SE_SID', 'SE_SIGNING_LEVEL',
    'SE_TOKEN_USER', 'SF_ALLOCA', 'SF_CHK', 'SF_EH_EPILOG',
    'SF_EH_PROLOG', 'SF_LSTRCATN', 'SF_NONE', 'SF_SEH_EPILOG',
    'SF_SEH_PROLOG', 'SF_SYSINIT', 'SH2a_band_b', 'SH2a_bandnot_b',
    'SH2a_bclr', 'SH2a_bclr_b', 'SH2a_bld', 'SH2a_bld_b',
    'SH2a_bldnot_b', 'SH2a_bor_b', 'SH2a_bornot_b', 'SH2a_bset',
    'SH2a_bset_b', 'SH2a_bst', 'SH2a_bst_b', 'SH2a_bxor_b',
    'SH2a_clips_b', 'SH2a_clips_w', 'SH2a_clipu_b', 'SH2a_clipu_w',
    'SH2a_divs', 'SH2a_divu', 'SH2a_jsr_n', 'SH2a_ldbank',
    'SH2a_movi20', 'SH2a_movi20s', 'SH2a_movml_l', 'SH2a_movmu_l',
    'SH2a_movrt', 'SH2a_movu_b', 'SH2a_movu_w', 'SH2a_mulr',
    'SH2a_nott', 'SH2a_resbank', 'SH2a_rts_n', 'SH2a_rtv_n',
    'SH2a_stbank', 'SH3_add', 'SH3_addc', 'SH3_addv', 'SH3_and',
    'SH3_and_b', 'SH3_bf', 'SH3_bf_s', 'SH3_bra', 'SH3_braf',
    'SH3_bsr', 'SH3_bsrf', 'SH3_bt', 'SH3_bt_s', 'SH3_clrmac',
    'SH3_clrs', 'SH3_clrt', 'SH3_cmp_eq', 'SH3_cmp_ge', 'SH3_cmp_gt',
    'SH3_cmp_hi', 'SH3_cmp_hs', 'SH3_cmp_pl', 'SH3_cmp_pz',
    'SH3_cmp_str', 'SH3_div0s', 'SH3_div0u', 'SH3_div1',
    'SH3_dmuls_l', 'SH3_dmulu_l', 'SH3_dt', 'SH3_exts_b',
    'SH3_exts_w', 'SH3_extu_b', 'SH3_extu_w', 'SH3_jmp', 'SH3_jsr',
    'SH3_ldc', 'SH3_ldc_l', 'SH3_lds', 'SH3_lds_l', 'SH3_ldtlb',
    'SH3_mac_l', 'SH3_mac_w', 'SH3_mov', 'SH3_mov_b', 'SH3_mov_l',
    'SH3_mov_w', 'SH3_mova', 'SH3_movi', 'SH3_movi_l', 'SH3_movi_w',
    'SH3_movp_b', 'SH3_movp_l', 'SH3_movp_w', 'SH3_movs_b',
    'SH3_movs_l', 'SH3_movs_w', 'SH3_movt', 'SH3_mul', 'SH3_muls',
    'SH3_mulu', 'SH3_neg', 'SH3_negc', 'SH3_nop', 'SH3_not',
    'SH3_null', 'SH3_or', 'SH3_or_b', 'SH3_pref', 'SH3_rotcl',
    'SH3_rotcr', 'SH3_rotl', 'SH3_rotr', 'SH3_rte', 'SH3_rts',
    'SH3_sets', 'SH3_sett', 'SH3_shad', 'SH3_shal', 'SH3_shar',
    'SH3_shld', 'SH3_shll', 'SH3_shll16', 'SH3_shll2', 'SH3_shll8',
    'SH3_shlr', 'SH3_shlr16', 'SH3_shlr2', 'SH3_shlr8', 'SH3_sleep',
    'SH3_stc', 'SH3_stc_l', 'SH3_sts', 'SH3_sts_l', 'SH3_sub',
    'SH3_subc', 'SH3_subv', 'SH3_swap_b', 'SH3_swap_w', 'SH3_tas_b',
    'SH3_trapa', 'SH3_tst', 'SH3_tst_b', 'SH3_xor', 'SH3_xor_b',
    'SH3_xtrct', 'SH4_fabs', 'SH4_fadd', 'SH4_fcmp_eq', 'SH4_fcmp_gt',
    'SH4_fcnvds', 'SH4_fcnvsd', 'SH4_fdiv', 'SH4_fipr', 'SH4_fldi0',
    'SH4_fldi1', 'SH4_flds', 'SH4_float', 'SH4_fmac', 'SH4_fmov',
    'SH4_fmov_s', 'SH4_fmovex', 'SH4_fmul', 'SH4_fneg', 'SH4_frchg',
    'SH4_fsca', 'SH4_fschg', 'SH4_fsqrt', 'SH4_fsts', 'SH4_fsub',
    'SH4_ftrc', 'SH4_ftrv', 'SH4_ftstn', 'SH4_last', 'SH4_movca_l',
    'SH4_ocbi', 'SH4_ocbp', 'SH4_ocbwb', 'SH4a_fpchg', 'SH4a_fsrra',
    'SH4a_icbi', 'SH4a_movco_l', 'SH4a_movli_l', 'SH4a_movua_l',
    'SH4a_prefi', 'SH4a_synco', 'SHANDLE_PTR',
    'SHARED_VIRTUAL_DISK_SUPPORT', 'SHORT', 'SHUFFLE_FILE_DATA',
    'SID', 'SID_AND_ATTRIBUTES', 'SID_AND_ATTRIBUTES_ARRAY',
    'SID_AND_ATTRIBUTES_HASH', 'SID_HASH_ENTRY',
    'SID_IDENTIFIER_AUTHORITY', 'SID_NAME_USE',
    'SID_NAME_USE__enumvalues', 'SILOOBJECT_BASIC_INFORMATION',
    'SINGLE_LIST_ENTRY', 'SIZE', 'SIZEL', 'SIZE_T', 'SLIST_ENTRY',
    'SLIST_HEADER', 'SMALL_RECT', 'SMT_ARRAY', 'SMT_BADARG',
    'SMT_FAILED', 'SMT_KEEP', 'SMT_NOCOMPAT', 'SMT_OK', 'SMT_OVERLAP',
    'SMT_SIZE', 'SMT_WORSE', 'SOCKADDR', 'SOCKADDR_DL', 'SOCKADDR_IN',
    'SOCKADDR_IN6', 'SOCKADDR_IN6_LH', 'SOCKADDR_IN6_PAIR',
    'SOCKADDR_IN6_W2KSP1', 'SOCKADDR_INET', 'SOCKADDR_STORAGE',
    'SOCKADDR_STORAGE_LH', 'SOCKADDR_STORAGE_XP', 'SOCKET',
    'SOCKET_ADDRESS', 'SOCKET_ADDRESS_LIST',
    'SOCKET_PROCESSOR_AFFINITY', 'SOUNDSENTRY', 'SOUNDSENTRYA',
    'SOUNDSENTRYW', 'SPARC_add', 'SPARC_addc', 'SPARC_addcc',
    'SPARC_addccc', 'SPARC_alignaddress', 'SPARC_and', 'SPARC_andcc',
    'SPARC_andn', 'SPARC_andncc', 'SPARC_array', 'SPARC_b',
    'SPARC_bclr', 'SPARC_bmask', 'SPARC_bp', 'SPARC_bpr',
    'SPARC_bset', 'SPARC_bshuffle', 'SPARC_btog', 'SPARC_btst',
    'SPARC_call', 'SPARC_cas', 'SPARC_casa', 'SPARC_casl',
    'SPARC_casx', 'SPARC_casxa', 'SPARC_casxl', 'SPARC_clr',
    'SPARC_clrb', 'SPARC_clrh', 'SPARC_clruw', 'SPARC_clrx',
    'SPARC_cmp', 'SPARC_dec', 'SPARC_deccc', 'SPARC_done',
    'SPARC_edge', 'SPARC_edgen', 'SPARC_fabs', 'SPARC_fadd',
    'SPARC_faligndata', 'SPARC_fand', 'SPARC_fandnot1',
    'SPARC_fandnot2', 'SPARC_fb', 'SPARC_fbp', 'SPARC_fcmp',
    'SPARC_fcmpe', 'SPARC_fcmpeq', 'SPARC_fcmpgt', 'SPARC_fcmple',
    'SPARC_fcmpne', 'SPARC_fdiv', 'SPARC_fdmulq', 'SPARC_fdtoi',
    'SPARC_fdtoq', 'SPARC_fdtos', 'SPARC_fdtox', 'SPARC_fexpand',
    'SPARC_fitod', 'SPARC_fitoq', 'SPARC_fitos', 'SPARC_flush',
    'SPARC_flushw', 'SPARC_fmov', 'SPARC_fmovcc', 'SPARC_fmovr',
    'SPARC_fmul', 'SPARC_fmul8sux16', 'SPARC_fmul8ulx16',
    'SPARC_fmul8x16', 'SPARC_fmul8x16al', 'SPARC_fmul8x16au',
    'SPARC_fmuld8sux16', 'SPARC_fmuld8ulx16', 'SPARC_fnand',
    'SPARC_fneg', 'SPARC_fnor', 'SPARC_fnot1', 'SPARC_fnot2',
    'SPARC_fone', 'SPARC_for', 'SPARC_fornot1', 'SPARC_fornot2',
    'SPARC_fpack', 'SPARC_fpackfix', 'SPARC_fpadd', 'SPARC_fpmerge',
    'SPARC_fpsub', 'SPARC_fqtod', 'SPARC_fqtoi', 'SPARC_fqtos',
    'SPARC_fqtox', 'SPARC_fsmuld', 'SPARC_fsqrt', 'SPARC_fsrc1',
    'SPARC_fsrc2', 'SPARC_fstod', 'SPARC_fstoi', 'SPARC_fstoq',
    'SPARC_fstox', 'SPARC_fsub', 'SPARC_fxnor', 'SPARC_fxor',
    'SPARC_fxtod', 'SPARC_fxtoq', 'SPARC_fxtos', 'SPARC_fzero',
    'SPARC_illtrap', 'SPARC_impdep1', 'SPARC_impdep2', 'SPARC_inc',
    'SPARC_inccc', 'SPARC_iprefetch', 'SPARC_jmp', 'SPARC_jmpl',
    'SPARC_last', 'SPARC_ldd', 'SPARC_ldda', 'SPARC_lddf',
    'SPARC_lddfa', 'SPARC_ldf', 'SPARC_ldfa', 'SPARC_ldfsr',
    'SPARC_ldqf', 'SPARC_ldqfa', 'SPARC_ldsb', 'SPARC_ldsba',
    'SPARC_ldsh', 'SPARC_ldsha', 'SPARC_ldstub', 'SPARC_ldstuba',
    'SPARC_ldsw', 'SPARC_ldswa', 'SPARC_ldub', 'SPARC_lduba',
    'SPARC_lduh', 'SPARC_lduha', 'SPARC_lduw', 'SPARC_lduwa',
    'SPARC_ldx', 'SPARC_ldxa', 'SPARC_ldxfsr', 'SPARC_membar',
    'SPARC_mov', 'SPARC_movr', 'SPARC_mulscc', 'SPARC_mulx',
    'SPARC_neg', 'SPARC_nop', 'SPARC_not', 'SPARC_null', 'SPARC_or',
    'SPARC_orcc', 'SPARC_orn', 'SPARC_orncc', 'SPARC_pdist',
    'SPARC_popc', 'SPARC_prefetch', 'SPARC_prefetcha',
    'SPARC_pseudo_mov', 'SPARC_rd', 'SPARC_rdhpr', 'SPARC_rdpr',
    'SPARC_restore', 'SPARC_restored', 'SPARC_ret', 'SPARC_retl',
    'SPARC_retry', 'SPARC_rett', 'SPARC_return', 'SPARC_save',
    'SPARC_saved', 'SPARC_sdiv', 'SPARC_sdivcc', 'SPARC_sdivx',
    'SPARC_sethi', 'SPARC_setsw', 'SPARC_setuw', 'SPARC_setx',
    'SPARC_shutdown', 'SPARC_siam', 'SPARC_signx', 'SPARC_sir',
    'SPARC_sll', 'SPARC_sllx', 'SPARC_smul', 'SPARC_smulcc',
    'SPARC_sra', 'SPARC_srax', 'SPARC_srl', 'SPARC_srlx', 'SPARC_stb',
    'SPARC_stba', 'SPARC_stbar', 'SPARC_std', 'SPARC_stda',
    'SPARC_stdf', 'SPARC_stdfa', 'SPARC_stf', 'SPARC_stfa',
    'SPARC_stfsr', 'SPARC_sth', 'SPARC_stha', 'SPARC_stqf',
    'SPARC_stqfa', 'SPARC_stw', 'SPARC_stwa', 'SPARC_stx',
    'SPARC_stxa', 'SPARC_stxfsr', 'SPARC_sub', 'SPARC_subc',
    'SPARC_subcc', 'SPARC_subccc', 'SPARC_swap', 'SPARC_swapa',
    'SPARC_t', 'SPARC_taddcc', 'SPARC_taddcctv', 'SPARC_tst',
    'SPARC_tsubcc', 'SPARC_tsubcctv', 'SPARC_udiv', 'SPARC_udivcc',
    'SPARC_udivx', 'SPARC_umul', 'SPARC_umulcc', 'SPARC_wr',
    'SPARC_wrhpr', 'SPARC_wrpr', 'SPARC_xnor', 'SPARC_xnorcc',
    'SPARC_xor', 'SPARC_xorcc', 'SPHANDLE', 'SRCIT_EXPR',
    'SRCIT_FUNC', 'SRCIT_LOCVAR', 'SRCIT_MODULE', 'SRCIT_NONE',
    'SRCIT_STMT', 'SRCIT_STTVAR', 'SRWLOCK', 'SSIZE_T', 'ST10_CoABS',
    'ST10_CoADD', 'ST10_CoASHR', 'ST10_CoCMP', 'ST10_CoLOAD',
    'ST10_CoMAC', 'ST10_CoMACM', 'ST10_CoMAX', 'ST10_CoMIN',
    'ST10_CoMOV', 'ST10_CoMUL', 'ST10_CoNEG', 'ST10_CoNOP',
    'ST10_CoRND', 'ST10_CoSHL', 'ST10_CoSHR', 'ST10_CoSTORE',
    'ST10_CoSUB', 'ST20_adc', 'ST20_add', 'ST20_addc', 'ST20_ajw',
    'ST20_alt', 'ST20_altend', 'ST20_altwt', 'ST20_and', 'ST20_arot',
    'ST20_ashr', 'ST20_bcnt', 'ST20_biquad', 'ST20_bitcnt',
    'ST20_bitld', 'ST20_bitmask', 'ST20_bitrevnbits',
    'ST20_bitrevword', 'ST20_bitst', 'ST20_breakpoint', 'ST20_bsub',
    'ST20_call', 'ST20_causeerror', 'ST20_cb', 'ST20_cbu',
    'ST20_ccnt1', 'ST20_cflerr', 'ST20_cir', 'ST20_ciru', 'ST20_cj',
    'ST20_clockdis', 'ST20_clockenb', 'ST20_clrhalterr',
    'ST20_crcbyte', 'ST20_crcword', 'ST20_cs', 'ST20_csngl',
    'ST20_csu', 'ST20_csub0', 'ST20_cword', 'ST20_dequeue',
    'ST20_devlb', 'ST20_devls', 'ST20_devlw', 'ST20_devmove',
    'ST20_devsb', 'ST20_devss', 'ST20_devsw', 'ST20_diff',
    'ST20_disc', 'ST20_diss', 'ST20_dist', 'ST20_div', 'ST20_divstep',
    'ST20_dup', 'ST20_ecall', 'ST20_enbc', 'ST20_enbs', 'ST20_enbt',
    'ST20_endp', 'ST20_enqueue', 'ST20_eqc', 'ST20_eret',
    'ST20_fcall', 'ST20_fmul', 'ST20_fptesterr', 'ST20_gajw',
    'ST20_gcall', 'ST20_gintdis', 'ST20_gintenb', 'ST20_gt',
    'ST20_gtu', 'ST20_in', 'ST20_insertqueue', 'ST20_intdis',
    'ST20_intenb', 'ST20_io', 'ST20_iret', 'ST20_j', 'ST20_jab',
    'ST20_ladd', 'ST20_last', 'ST20_lb', 'ST20_lbinc', 'ST20_lbx',
    'ST20_ldc', 'ST20_ldclock', 'ST20_lddevid', 'ST20_ldiff',
    'ST20_ldinf', 'ST20_ldiv', 'ST20_ldl', 'ST20_ldlp',
    'ST20_ldmemstartval', 'ST20_ldnl', 'ST20_ldnlp', 'ST20_ldpi',
    'ST20_ldpri', 'ST20_ldprodid', 'ST20_ldshadow', 'ST20_ldtdesc',
    'ST20_ldtimer', 'ST20_ldtraph', 'ST20_ldtrapped', 'ST20_lend',
    'ST20_lmul', 'ST20_ls', 'ST20_lshl', 'ST20_lshr', 'ST20_lsinc',
    'ST20_lsub', 'ST20_lsum', 'ST20_lsx', 'ST20_lsxinc', 'ST20_lwinc',
    'ST20_mac', 'ST20_mint', 'ST20_move', 'ST20_move2dall',
    'ST20_move2dinit', 'ST20_move2dnonzero', 'ST20_move2dzero',
    'ST20_mul', 'ST20_nfix', 'ST20_nop', 'ST20_norm', 'ST20_not',
    'ST20_null', 'ST20_opr', 'ST20_or', 'ST20_order', 'ST20_orderu',
    'ST20_out', 'ST20_outbyte', 'ST20_outword', 'ST20_pfix',
    'ST20_pop', 'ST20_postnormsn', 'ST20_prod', 'ST20_reboot',
    'ST20_rem', 'ST20_resetch', 'ST20_restart', 'ST20_ret',
    'ST20_rev', 'ST20_rmw', 'ST20_rot', 'ST20_roundsn', 'ST20_run',
    'ST20_runp', 'ST20_satadd', 'ST20_satmul', 'ST20_satsub',
    'ST20_saturate', 'ST20_saveh', 'ST20_savel', 'ST20_sb',
    'ST20_sbinc', 'ST20_seterr', 'ST20_sethalterr',
    'ST20_settimeslice', 'ST20_shl', 'ST20_shr', 'ST20_signal',
    'ST20_slmul', 'ST20_smacinit', 'ST20_smacloop', 'ST20_smul',
    'ST20_ss', 'ST20_ssinc', 'ST20_ssub', 'ST20_startp',
    'ST20_statusclr', 'ST20_statusset', 'ST20_statustst',
    'ST20_stclock', 'ST20_sthb', 'ST20_sthf', 'ST20_stl', 'ST20_stlb',
    'ST20_stlf', 'ST20_stnl', 'ST20_stop', 'ST20_stoperr',
    'ST20_stopp', 'ST20_stshadow', 'ST20_sttimer', 'ST20_sttraph',
    'ST20_sttrapped', 'ST20_sub', 'ST20_subc', 'ST20_sulmul',
    'ST20_sum', 'ST20_swap32', 'ST20_swapqueue', 'ST20_swaptimer',
    'ST20_swinc', 'ST20_talt', 'ST20_taltwt', 'ST20_testerr',
    'ST20_testhalterr', 'ST20_testpranal', 'ST20_timeslice',
    'ST20_tin', 'ST20_trapdis', 'ST20_trapenb', 'ST20_tret',
    'ST20_umac', 'ST20_unpacksn', 'ST20_unsign', 'ST20_wait',
    'ST20_wcnt', 'ST20_wsub', 'ST20_wsubdb', 'ST20_xbword',
    'ST20_xdble', 'ST20_xor', 'ST20_xsword', 'ST20_xword', 'ST7_adc',
    'ST7_add', 'ST7_and', 'ST7_bcp', 'ST7_bres', 'ST7_bset',
    'ST7_btjf', 'ST7_btjt', 'ST7_call', 'ST7_callr', 'ST7_clr',
    'ST7_cp', 'ST7_cpl', 'ST7_dec', 'ST7_halt', 'ST7_inc', 'ST7_iret',
    'ST7_jp', 'ST7_jra', 'ST7_jrc', 'ST7_jreq', 'ST7_jrf', 'ST7_jrh',
    'ST7_jrih', 'ST7_jril', 'ST7_jrm', 'ST7_jrmi', 'ST7_jrnc',
    'ST7_jrne', 'ST7_jrnh', 'ST7_jrnm', 'ST7_jrpl', 'ST7_jrt',
    'ST7_jruge', 'ST7_jrugt', 'ST7_jrule', 'ST7_jrult', 'ST7_last',
    'ST7_ld', 'ST7_mul', 'ST7_neg', 'ST7_nop', 'ST7_null', 'ST7_or',
    'ST7_pop', 'ST7_push', 'ST7_rcf', 'ST7_ret', 'ST7_rim', 'ST7_rlc',
    'ST7_rrc', 'ST7_rsp', 'ST7_sbc', 'ST7_scf', 'ST7_sim', 'ST7_sla',
    'ST7_sll', 'ST7_sra', 'ST7_srl', 'ST7_sub', 'ST7_swap', 'ST7_tnz',
    'ST7_trap', 'ST7_wfi', 'ST7_xor', 'STARTUPINFO', 'STARTUPINFOA',
    'STARTUPINFOEX', 'STARTUPINFOEXA', 'STARTUPINFOEXW',
    'STARTUPINFOW', 'STEP', 'STICKYKEYS', 'STI_ACCHAR', 'STI_ACHAR',
    'STI_ACUCHAR', 'STI_AEABI_LCMP', 'STI_AEABI_MEMCLR',
    'STI_AEABI_MEMCPY', 'STI_AEABI_MEMSET', 'STI_AEABI_ULCMP',
    'STI_AUCHAR', 'STI_COMPLEX128', 'STI_COMPLEX64', 'STI_DONT_USE',
    'STI_FDELOP', 'STI_FPURGING', 'STI_LAST', 'STI_MSGSEND',
    'STI_PBYTE', 'STI_PCCHAR', 'STI_PCHAR', 'STI_PCUCHAR',
    'STI_PCVOID', 'STI_PINT', 'STI_PPVOID', 'STI_PUCHAR', 'STI_PUINT',
    'STI_PVOID', 'STI_RTC_CHECK_2', 'STI_RTC_CHECK_4',
    'STI_RTC_CHECK_8', 'STI_SIZE_T', 'STI_SSIZE_T',
    'STREAM_INFO_LEVELS', 'STREAM_INFO_LEVELS__enumvalues',
    'STRUC_ERROR_MEMBER_NAME', 'STRUC_ERROR_MEMBER_NESTED',
    'STRUC_ERROR_MEMBER_OFFSET', 'STRUC_ERROR_MEMBER_OK',
    'STRUC_ERROR_MEMBER_SIZE', 'STRUC_ERROR_MEMBER_STRUCT',
    'STRUC_ERROR_MEMBER_TINFO', 'STRUC_ERROR_MEMBER_UNIVAR',
    'STRUC_ERROR_MEMBER_VARLAST', 'STT_CUR', 'STT_DBG', 'STT_MM',
    'STT_VA', 'STYLEBUF', 'STYLEBUFA', 'STYLEBUFW', 'STYLESTRUCT',
    'SUPPORTED_OS_INFO', 'SYNCHRONIZATION_BARRIER', 'SYSGEOCLASS',
    'SYSGEOTYPE', 'SYSNLS_FUNCTION', 'SYSTEMTIME',
    'SYSTEM_ACCESS_FILTER_ACE', 'SYSTEM_ALARM_ACE',
    'SYSTEM_ALARM_CALLBACK_ACE', 'SYSTEM_ALARM_CALLBACK_OBJECT_ACE',
    'SYSTEM_ALARM_OBJECT_ACE', 'SYSTEM_AUDIT_ACE',
    'SYSTEM_AUDIT_CALLBACK_ACE', 'SYSTEM_AUDIT_CALLBACK_OBJECT_ACE',
    'SYSTEM_AUDIT_OBJECT_ACE', 'SYSTEM_CPU_SET_INFORMATION',
    'SYSTEM_INFO', 'SYSTEM_LOGICAL_PROCESSOR_INFORMATION',
    'SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX',
    'SYSTEM_MANDATORY_LABEL_ACE', 'SYSTEM_POOL_ZEROING_INFORMATION',
    'SYSTEM_POWER_CONDITION', 'SYSTEM_POWER_POLICY',
    'SYSTEM_POWER_STATE', 'SYSTEM_POWER_STATE__enumvalues',
    'SYSTEM_POWER_STATUS', 'SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION',
    'SYSTEM_PROCESS_TRUST_LABEL_ACE', 'SYSTEM_RESOURCE_ATTRIBUTE_ACE',
    'SYSTEM_SCOPED_POLICY_ID_ACE', 'ScopeLevelAdmin',
    'ScopeLevelCount', 'ScopeLevelGlobal', 'ScopeLevelInterface',
    'ScopeLevelLink', 'ScopeLevelOrganization', 'ScopeLevelSite',
    'ScopeLevelSubnet', 'ScreenOff', 'SeImageSignatureCache',
    'SeImageSignatureCatalogCached', 'SeImageSignatureCatalogHint',
    'SeImageSignatureCatalogNotCached', 'SeImageSignatureEmbedded',
    'SeImageSignatureNone', 'SeImageSignaturePackageCatalog',
    'SeLearningModeInvalidType', 'SeLearningModeMax',
    'SeLearningModeSettings', 'SecurityAnonymous',
    'SecurityDelegation', 'SecurityIdentification',
    'SecurityImpersonation', 'ServiceDirectoryPersistentState',
    'ServiceDirectoryTypeMax', 'ServiceRegistryStateParameters',
    'ServiceRegistryStatePersistent',
    'SessionAllowExternalDmaDevices', 'SessionConnectNotification',
    'SessionDisplayState', 'SessionLockState', 'SessionPowerCleanup',
    'SessionPowerInit', 'SessionRITState', 'SetPowerSettingValue',
    'SetShutdownSelectedTime', 'SevereError',
    'SharedVirtualDiskCDPSnapshotsSupported',
    'SharedVirtualDiskHandleState',
    'SharedVirtualDiskHandleStateFileShared',
    'SharedVirtualDiskHandleStateHandleShared',
    'SharedVirtualDiskHandleStateNone',
    'SharedVirtualDiskHandleState__enumvalues',
    'SharedVirtualDiskSnapshotsSupported',
    'SharedVirtualDiskSupportType',
    'SharedVirtualDiskSupportType__enumvalues',
    'SharedVirtualDisksSupported', 'SharedVirtualDisksUnsupported',
    'SidTypeAlias', 'SidTypeComputer', 'SidTypeDeletedAccount',
    'SidTypeDomain', 'SidTypeGroup', 'SidTypeInvalid', 'SidTypeLabel',
    'SidTypeLogonSession', 'SidTypeUnknown', 'SidTypeUser',
    'SidTypeWellKnownGroup', 'SuspendResumeInvocation',
    'SystemBatteryState', 'SystemBatteryStatePrecise',
    'SystemExecutionState', 'SystemHiberFileInformation',
    'SystemHiberFileSize', 'SystemHiberFileType',
    'SystemHiberbootState', 'SystemLoad',
    'SystemMonitorHiberBootPowerOff', 'SystemPowerCapabilities',
    'SystemPowerInformation', 'SystemPowerLoggingEntry',
    'SystemPowerPolicyAc', 'SystemPowerPolicyCurrent',
    'SystemPowerPolicyDc', 'SystemPowerStateHandler',
    'SystemPowerStateLogging', 'SystemPowerStateNotifyHandler',
    'SystemReserveHiberFile', 'SystemVideoState', 'SystemWakeSource',
    'T900_adc', 'T900_adcw', 'T900_add', 'T900_addw', 'T900_and',
    'T900_andcf', 'T900_andw', 'T900_bit', 'T900_bs1b', 'T900_bs1f',
    'T900_call', 'T900_calr', 'T900_ccf', 'T900_chg', 'T900_cp',
    'T900_cpd', 'T900_cpdr', 'T900_cpi', 'T900_cpir', 'T900_cpl',
    'T900_cpw', 'T900_daa', 'T900_dec', 'T900_decf', 'T900_decw',
    'T900_di', 'T900_div', 'T900_divs', 'T900_djnz', 'T900_ei',
    'T900_ex', 'T900_exts', 'T900_extz', 'T900_halt', 'T900_inc',
    'T900_incf', 'T900_incw', 'T900_jp', 'T900_jp_cond', 'T900_jr',
    'T900_jr_cond', 'T900_jrl', 'T900_jrl_cond', 'T900_last',
    'T900_ld', 'T900_lda', 'T900_ldar', 'T900_ldc', 'T900_ldcf',
    'T900_ldd', 'T900_lddr', 'T900_lddrw', 'T900_lddw', 'T900_ldf',
    'T900_ldi', 'T900_ldir', 'T900_ldirw', 'T900_ldiw', 'T900_ldw',
    'T900_ldx', 'T900_link', 'T900_max', 'T900_mdec1', 'T900_mdec2',
    'T900_mdec4', 'T900_minc1', 'T900_minc2', 'T900_minc4',
    'T900_mirr', 'T900_mul', 'T900_mula', 'T900_muls', 'T900_neg',
    'T900_nop', 'T900_normal', 'T900_null', 'T900_or', 'T900_orcf',
    'T900_orw', 'T900_paa', 'T900_pop', 'T900_popw', 'T900_push',
    'T900_pushw', 'T900_rcf', 'T900_res', 'T900_ret', 'T900_ret_cond',
    'T900_retd', 'T900_reti', 'T900_rl', 'T900_rl_mem', 'T900_rlc',
    'T900_rlc_mem', 'T900_rlcw_mem', 'T900_rld', 'T900_rlw_mem',
    'T900_rr', 'T900_rr_mem', 'T900_rrc', 'T900_rrc_mem',
    'T900_rrcw_mem', 'T900_rrd', 'T900_rrw_mem', 'T900_sbc',
    'T900_sbcw', 'T900_scc', 'T900_scf', 'T900_set', 'T900_sla',
    'T900_sla_mem', 'T900_slaw_mem', 'T900_sll', 'T900_sll_mem',
    'T900_sllw_mem', 'T900_sra', 'T900_sra_mem', 'T900_sraw_mem',
    'T900_srl', 'T900_srl_mem', 'T900_srlw_mem', 'T900_stcf',
    'T900_sub', 'T900_subw', 'T900_swi', 'T900_tset', 'T900_unlk',
    'T900_xor', 'T900_xorcf', 'T900_xorw', 'T900_zcf',
    'TAPE_CREATE_PARTITION', 'TAPE_DRIVE_PROBLEM_TYPE',
    'TAPE_DRIVE_PROBLEM_TYPE__enumvalues', 'TAPE_ERASE',
    'TAPE_GET_DRIVE_PARAMETERS', 'TAPE_GET_MEDIA_PARAMETERS',
    'TAPE_GET_POSITION', 'TAPE_PREPARE', 'TAPE_SET_DRIVE_PARAMETERS',
    'TAPE_SET_MEDIA_PARAMETERS', 'TAPE_SET_POSITION',
    'TAPE_WMI_OPERATIONS', 'TAPE_WRITE_MARKS', 'TBYTE',
    'TCCPT_ENUMPLACE', 'TCCPT_IDAPLACE', 'TCCPT_INVALID',
    'TCCPT_PLACE', 'TCCPT_SIMPLELINE_PLACE', 'TCCPT_STRUCTPLACE',
    'TCCRT_FLAT', 'TCCRT_GRAPH', 'TCCRT_INVALID', 'TCCRT_PROXIMITY',
    'TCHAR', 'TCT_NOT_OWNER', 'TCT_OWNER', 'TCT_UNKNOWN',
    'TERR_BADSYNC', 'TERR_OK', 'TERR_SAVE', 'TERR_SERIALIZE',
    'TERR_WRONGNAME', 'TEXTMETRIC', 'TEXTMETRICA', 'TEXTMETRICW',
    'THREAD_EXITED', 'THREAD_INFORMATION_CLASS',
    'THREAD_INFORMATION_CLASS__enumvalues',
    'THREAD_POWER_THROTTLING_STATE', 'THREAD_STARTED',
    'TIMEFMT_ENUMPROCA', 'TIMEFMT_ENUMPROCEX', 'TIMEFMT_ENUMPROCW',
    'TIMERPROC', 'TIMEVAL', 'TIME_ZONE_INFORMATION', 'TITLEBARINFO',
    'TITLEBARINFOEX', 'TMS28_aborti', 'TMS28_abs', 'TMS28_abstc',
    'TMS28_add', 'TMS28_addb', 'TMS28_addcl', 'TMS28_addcu',
    'TMS28_addl', 'TMS28_addu', 'TMS28_addul', 'TMS28_adrk',
    'TMS28_and', 'TMS28_andb', 'TMS28_asp', 'TMS28_asr',
    'TMS28_asr64', 'TMS28_asrl', 'TMS28_b', 'TMS28_banz', 'TMS28_bar',
    'TMS28_bf', 'TMS28_c27map', 'TMS28_c27obj', 'TMS28_c28addr',
    'TMS28_c28map', 'TMS28_c28obj', 'TMS28_clrc', 'TMS28_cmp',
    'TMS28_cmp64', 'TMS28_cmpb', 'TMS28_cmpl', 'TMS28_cmpr',
    'TMS28_csb', 'TMS28_dec', 'TMS28_dint', 'TMS28_dmac',
    'TMS28_dmov', 'TMS28_eallow', 'TMS28_edis', 'TMS28_eint',
    'TMS28_estop0', 'TMS28_estop1', 'TMS28_ffc', 'TMS28_flip',
    'TMS28_iack', 'TMS28_idle', 'TMS28_imacl', 'TMS28_impyal',
    'TMS28_impyl', 'TMS28_impysl', 'TMS28_impyxul', 'TMS28_in',
    'TMS28_inc', 'TMS28_intr', 'TMS28_iret', 'TMS28_last', 'TMS28_lb',
    'TMS28_lc', 'TMS28_lcr', 'TMS28_loopnz', 'TMS28_loopz',
    'TMS28_lpaddr', 'TMS28_lret', 'TMS28_lrete', 'TMS28_lretr',
    'TMS28_lsl', 'TMS28_lsl64', 'TMS28_lsll', 'TMS28_lsr',
    'TMS28_lsr64', 'TMS28_lsrl', 'TMS28_mac', 'TMS28_max',
    'TMS28_maxcul', 'TMS28_maxl', 'TMS28_min', 'TMS28_mincul',
    'TMS28_minl', 'TMS28_mov', 'TMS28_mova', 'TMS28_movad',
    'TMS28_movb', 'TMS28_movdl', 'TMS28_movh', 'TMS28_movl',
    'TMS28_movp', 'TMS28_movs', 'TMS28_movu', 'TMS28_movw',
    'TMS28_movx', 'TMS28_movz', 'TMS28_mpy', 'TMS28_mpya',
    'TMS28_mpyb', 'TMS28_mpys', 'TMS28_mpyu', 'TMS28_mpyxu',
    'TMS28_nasp', 'TMS28_neg', 'TMS28_neg64', 'TMS28_negtc',
    'TMS28_nop', 'TMS28_norm', 'TMS28_not', 'TMS28_null', 'TMS28_or',
    'TMS28_orb', 'TMS28_out', 'TMS28_pop', 'TMS28_pread',
    'TMS28_push', 'TMS28_pwrite', 'TMS28_qmacl', 'TMS28_qmpyal',
    'TMS28_qmpyl', 'TMS28_qmpysl', 'TMS28_qmpyul', 'TMS28_qmpyxul',
    'TMS28_rol', 'TMS28_ror', 'TMS28_rpt', 'TMS28_sat', 'TMS28_sat64',
    'TMS28_sb', 'TMS28_sbbu', 'TMS28_sbf', 'TMS28_sbrk', 'TMS28_setc',
    'TMS28_sfr', 'TMS28_spm', 'TMS28_sqra', 'TMS28_sqrs', 'TMS28_sub',
    'TMS28_subb', 'TMS28_subbl', 'TMS28_subcu', 'TMS28_subcul',
    'TMS28_subl', 'TMS28_subr', 'TMS28_subrl', 'TMS28_subu',
    'TMS28_subul', 'TMS28_sxtb', 'TMS28_tbit', 'TMS28_tclr',
    'TMS28_test', 'TMS28_trap', 'TMS28_tset', 'TMS28_uout',
    'TMS28_xb', 'TMS28_xbanz', 'TMS28_xcall', 'TMS28_xmac',
    'TMS28_xmacd', 'TMS28_xor', 'TMS28_xorb', 'TMS28_xpread',
    'TMS28_xpwrite', 'TMS28_xret', 'TMS28_xretc', 'TMS28_zalr',
    'TMS28_zap', 'TMS28_zapa', 'TMS2_abs', 'TMS2_add', 'TMS2_addc',
    'TMS2_addh', 'TMS2_addk', 'TMS2_adds', 'TMS2_addt', 'TMS2_adlk',
    'TMS2_adrk', 'TMS2_and', 'TMS2_andk', 'TMS2_apac', 'TMS2_b',
    'TMS2_bacc', 'TMS2_banz', 'TMS2_bbnz', 'TMS2_bbz', 'TMS2_bc',
    'TMS2_bgez', 'TMS2_bgz', 'TMS2_bioz', 'TMS2_bit', 'TMS2_bitt',
    'TMS2_blez', 'TMS2_blkd', 'TMS2_blkp', 'TMS2_blz', 'TMS2_bnc',
    'TMS2_bnv', 'TMS2_bnz', 'TMS2_bv', 'TMS2_bz', 'TMS2_cala',
    'TMS2_call', 'TMS2_cmpl', 'TMS2_cmpr', 'TMS2_cnfd', 'TMS2_cnfp',
    'TMS2_conf', 'TMS2_dint', 'TMS2_dmov', 'TMS2_eint', 'TMS2_fort',
    'TMS2_idle', 'TMS2_in', 'TMS2_lac', 'TMS2_lack', 'TMS2_lact',
    'TMS2_lalk', 'TMS2_lar', 'TMS2_lark', 'TMS2_larp', 'TMS2_ldp',
    'TMS2_ldpk', 'TMS2_lph', 'TMS2_lrlk', 'TMS2_lst', 'TMS2_lst1',
    'TMS2_lt', 'TMS2_lta', 'TMS2_ltd', 'TMS2_ltp', 'TMS2_lts',
    'TMS2_mac', 'TMS2_macd', 'TMS2_mar', 'TMS2_mpy', 'TMS2_mpya',
    'TMS2_mpyk', 'TMS2_mpys', 'TMS2_mpyu', 'TMS2_neg', 'TMS2_nop',
    'TMS2_norm', 'TMS2_or', 'TMS2_ork', 'TMS2_out', 'TMS2_pac',
    'TMS2_pop', 'TMS2_popd', 'TMS2_pshd', 'TMS2_push', 'TMS2_rc',
    'TMS2_ret', 'TMS2_rfsm', 'TMS2_rhm', 'TMS2_rol', 'TMS2_ror',
    'TMS2_rovm', 'TMS2_rpt', 'TMS2_rptk', 'TMS2_rsxm', 'TMS2_rtc',
    'TMS2_rtxm', 'TMS2_rxf', 'TMS2_sach', 'TMS2_sacl', 'TMS2_sar',
    'TMS2_sblk', 'TMS2_sbrk', 'TMS2_sc', 'TMS2_sfl', 'TMS2_sfr',
    'TMS2_sfsm', 'TMS2_shm', 'TMS2_sovm', 'TMS2_spac', 'TMS2_sph',
    'TMS2_spl', 'TMS2_spm', 'TMS2_sqra', 'TMS2_sqrs', 'TMS2_sst',
    'TMS2_sst1', 'TMS2_ssxm', 'TMS2_stc', 'TMS2_stxm', 'TMS2_sub',
    'TMS2_subb', 'TMS2_subc', 'TMS2_subh', 'TMS2_subk', 'TMS2_subs',
    'TMS2_subt', 'TMS2_sxf', 'TMS2_tblr', 'TMS2_tblw', 'TMS2_trap',
    'TMS2_xor', 'TMS2_xork', 'TMS2_zac', 'TMS2_zalh', 'TMS2_zalr',
    'TMS2_zals', 'TMS320C3X_ABSF', 'TMS320C3X_ABSI', 'TMS320C3X_ADDC',
    'TMS320C3X_ADDC3', 'TMS320C3X_ADDF', 'TMS320C3X_ADDF3',
    'TMS320C3X_ADDI', 'TMS320C3X_ADDI3', 'TMS320C3X_AND',
    'TMS320C3X_AND3', 'TMS320C3X_ANDN', 'TMS320C3X_ANDN3',
    'TMS320C3X_ASH', 'TMS320C3X_ASH3', 'TMS320C3X_BR',
    'TMS320C3X_BRD', 'TMS320C3X_Bcond', 'TMS320C3X_CALL',
    'TMS320C3X_CALLcond', 'TMS320C3X_CMPF', 'TMS320C3X_CMPF3',
    'TMS320C3X_CMPI', 'TMS320C3X_CMPI3', 'TMS320C3X_DBcond',
    'TMS320C3X_FIX', 'TMS320C3X_FLOAT', 'TMS320C3X_IACK',
    'TMS320C3X_IDLE', 'TMS320C3X_IDLE2', 'TMS320C3X_LDE',
    'TMS320C3X_LDF', 'TMS320C3X_LDFI', 'TMS320C3X_LDFcond',
    'TMS320C3X_LDI', 'TMS320C3X_LDII', 'TMS320C3X_LDIcond',
    'TMS320C3X_LDM', 'TMS320C3X_LOPOWER', 'TMS320C3X_LSH',
    'TMS320C3X_LSH3', 'TMS320C3X_MAXSPEED', 'TMS320C3X_MPYF',
    'TMS320C3X_MPYF3', 'TMS320C3X_MPYI', 'TMS320C3X_MPYI3',
    'TMS320C3X_MV_IDX', 'TMS320C3X_NEGB', 'TMS320C3X_NEGF',
    'TMS320C3X_NEGI', 'TMS320C3X_NONE', 'TMS320C3X_NOP',
    'TMS320C3X_NORM', 'TMS320C3X_NOT', 'TMS320C3X_OR',
    'TMS320C3X_OR3', 'TMS320C3X_POP', 'TMS320C3X_POPF',
    'TMS320C3X_PUSH', 'TMS320C3X_PUSHF', 'TMS320C3X_RETIU',
    'TMS320C3X_RETIcond', 'TMS320C3X_RETSU', 'TMS320C3X_RETScond',
    'TMS320C3X_RND', 'TMS320C3X_ROL', 'TMS320C3X_ROLC',
    'TMS320C3X_ROR', 'TMS320C3X_RORC', 'TMS320C3X_RPTB',
    'TMS320C3X_RPTS', 'TMS320C3X_SIGI', 'TMS320C3X_STF',
    'TMS320C3X_STFI', 'TMS320C3X_STI', 'TMS320C3X_STII',
    'TMS320C3X_SUBB', 'TMS320C3X_SUBB3', 'TMS320C3X_SUBC',
    'TMS320C3X_SUBF', 'TMS320C3X_SUBF3', 'TMS320C3X_SUBI',
    'TMS320C3X_SUBI3', 'TMS320C3X_SUBRB', 'TMS320C3X_SUBRF',
    'TMS320C3X_SUBRI', 'TMS320C3X_SWI', 'TMS320C3X_TRAPcond',
    'TMS320C3X_TSTB', 'TMS320C3X_TSTB3', 'TMS320C3X_XOR',
    'TMS320C3X_XOR3', 'TMS320C3X_last', 'TMS320C3X_null',
    'TMS320C54_abdst', 'TMS320C54_abs1', 'TMS320C54_abs2',
    'TMS320C54_add1', 'TMS320C54_add2', 'TMS320C54_add3',
    'TMS320C54_addc', 'TMS320C54_addm', 'TMS320C54_adds',
    'TMS320C54_and1', 'TMS320C54_and2', 'TMS320C54_and3',
    'TMS320C54_andm', 'TMS320C54_b', 'TMS320C54_bacc',
    'TMS320C54_baccd', 'TMS320C54_banz', 'TMS320C54_banzd',
    'TMS320C54_bc2', 'TMS320C54_bc3', 'TMS320C54_bcd2',
    'TMS320C54_bcd3', 'TMS320C54_bd', 'TMS320C54_bit',
    'TMS320C54_bitf', 'TMS320C54_bitt', 'TMS320C54_cala',
    'TMS320C54_calad', 'TMS320C54_call', 'TMS320C54_calld',
    'TMS320C54_cc2', 'TMS320C54_cc3', 'TMS320C54_ccd2',
    'TMS320C54_ccd3', 'TMS320C54_cmpl1', 'TMS320C54_cmpl2',
    'TMS320C54_cmpm', 'TMS320C54_cmpr', 'TMS320C54_cmps',
    'TMS320C54_dadd2', 'TMS320C54_dadd3', 'TMS320C54_dadst',
    'TMS320C54_delay', 'TMS320C54_dld', 'TMS320C54_drsub',
    'TMS320C54_dsadt', 'TMS320C54_dst', 'TMS320C54_dsub',
    'TMS320C54_dsubt', 'TMS320C54_exp', 'TMS320C54_fb',
    'TMS320C54_fbacc', 'TMS320C54_fbaccd', 'TMS320C54_fbd',
    'TMS320C54_fcala', 'TMS320C54_fcalad', 'TMS320C54_fcall',
    'TMS320C54_fcalld', 'TMS320C54_firs', 'TMS320C54_frame',
    'TMS320C54_fret', 'TMS320C54_fretd', 'TMS320C54_frete',
    'TMS320C54_freted', 'TMS320C54_idle', 'TMS320C54_intr',
    'TMS320C54_last', 'TMS320C54_ld1', 'TMS320C54_ld2',
    'TMS320C54_ld3', 'TMS320C54_ld_mac', 'TMS320C54_ld_macr',
    'TMS320C54_ld_mas', 'TMS320C54_ld_masr', 'TMS320C54_ldm',
    'TMS320C54_ldr', 'TMS320C54_ldu', 'TMS320C54_lms',
    'TMS320C54_ltd', 'TMS320C54_mac2', 'TMS320C54_mac3',
    'TMS320C54_maca1', 'TMS320C54_maca2', 'TMS320C54_maca3',
    'TMS320C54_macar1', 'TMS320C54_macar2', 'TMS320C54_macar3',
    'TMS320C54_macd', 'TMS320C54_macp', 'TMS320C54_macr2',
    'TMS320C54_macr3', 'TMS320C54_macsu', 'TMS320C54_mar',
    'TMS320C54_mas2', 'TMS320C54_mas3', 'TMS320C54_masa1',
    'TMS320C54_masa2', 'TMS320C54_masa3', 'TMS320C54_masar1',
    'TMS320C54_masar2', 'TMS320C54_masar3', 'TMS320C54_masr2',
    'TMS320C54_masr3', 'TMS320C54_max', 'TMS320C54_min',
    'TMS320C54_mpy2', 'TMS320C54_mpy3', 'TMS320C54_mpya',
    'TMS320C54_mpyr2', 'TMS320C54_mpyu', 'TMS320C54_mvdd',
    'TMS320C54_mvdk', 'TMS320C54_mvdm', 'TMS320C54_mvdp',
    'TMS320C54_mvkd', 'TMS320C54_mvmd', 'TMS320C54_mvmm',
    'TMS320C54_mvpd', 'TMS320C54_neg1', 'TMS320C54_neg2',
    'TMS320C54_nop', 'TMS320C54_norm1', 'TMS320C54_norm2',
    'TMS320C54_null', 'TMS320C54_or1', 'TMS320C54_or2',
    'TMS320C54_or3', 'TMS320C54_orm', 'TMS320C54_poly',
    'TMS320C54_popd', 'TMS320C54_popm', 'TMS320C54_portr',
    'TMS320C54_portw', 'TMS320C54_pshd', 'TMS320C54_pshm',
    'TMS320C54_rc1', 'TMS320C54_rc2', 'TMS320C54_rc3',
    'TMS320C54_rcd1', 'TMS320C54_rcd2', 'TMS320C54_rcd3',
    'TMS320C54_reada', 'TMS320C54_reset', 'TMS320C54_ret',
    'TMS320C54_retd', 'TMS320C54_rete', 'TMS320C54_reted',
    'TMS320C54_retf', 'TMS320C54_retfd', 'TMS320C54_rnd1',
    'TMS320C54_rnd2', 'TMS320C54_rol', 'TMS320C54_roltc',
    'TMS320C54_ror', 'TMS320C54_rpt', 'TMS320C54_rptb',
    'TMS320C54_rptbd', 'TMS320C54_rptz', 'TMS320C54_rsbx1',
    'TMS320C54_rsbx2', 'TMS320C54_saccd', 'TMS320C54_sat',
    'TMS320C54_sfta2', 'TMS320C54_sfta3', 'TMS320C54_sftc',
    'TMS320C54_sftl2', 'TMS320C54_sftl3', 'TMS320C54_sqdst',
    'TMS320C54_squr', 'TMS320C54_squra', 'TMS320C54_squrs',
    'TMS320C54_srccd', 'TMS320C54_ssbx1', 'TMS320C54_ssbx2',
    'TMS320C54_st', 'TMS320C54_st_add', 'TMS320C54_st_ld',
    'TMS320C54_st_mac', 'TMS320C54_st_macr', 'TMS320C54_st_mas',
    'TMS320C54_st_masr', 'TMS320C54_st_mpy', 'TMS320C54_st_sub',
    'TMS320C54_sth2', 'TMS320C54_sth3', 'TMS320C54_stl2',
    'TMS320C54_stl3', 'TMS320C54_stlm', 'TMS320C54_stm',
    'TMS320C54_strcd', 'TMS320C54_sub1', 'TMS320C54_sub2',
    'TMS320C54_sub3', 'TMS320C54_subb', 'TMS320C54_subc',
    'TMS320C54_subs', 'TMS320C54_trap', 'TMS320C54_writa',
    'TMS320C54_xc2', 'TMS320C54_xc3', 'TMS320C54_xor1',
    'TMS320C54_xor2', 'TMS320C54_xor3', 'TMS320C54_xorm',
    'TMS320C55_aadd', 'TMS320C55_abdst', 'TMS320C55_abs1',
    'TMS320C55_abs2', 'TMS320C55_add1', 'TMS320C55_add2',
    'TMS320C55_add3', 'TMS320C55_add4', 'TMS320C55_add_asub',
    'TMS320C55_add_mov', 'TMS320C55_addrv1', 'TMS320C55_addrv2',
    'TMS320C55_addsub', 'TMS320C55_addsub2cc', 'TMS320C55_addsubcc4',
    'TMS320C55_addsubcc5', 'TMS320C55_addv1', 'TMS320C55_addv2',
    'TMS320C55_amar1', 'TMS320C55_amar2', 'TMS320C55_amar3',
    'TMS320C55_amar_amar', 'TMS320C55_amar_mac',
    'TMS320C55_amar_mac40', 'TMS320C55_amar_macr',
    'TMS320C55_amar_macr40', 'TMS320C55_amar_mas',
    'TMS320C55_amar_mas40', 'TMS320C55_amar_masr',
    'TMS320C55_amar_masr40', 'TMS320C55_amar_mpy',
    'TMS320C55_amar_mpy40', 'TMS320C55_amar_mpyr',
    'TMS320C55_amar_mpyr40', 'TMS320C55_amov', 'TMS320C55_and1',
    'TMS320C55_and2', 'TMS320C55_and3', 'TMS320C55_asub',
    'TMS320C55_b', 'TMS320C55_band', 'TMS320C55_bcc',
    'TMS320C55_bccu', 'TMS320C55_bclr1', 'TMS320C55_bclr2',
    'TMS320C55_bcnt', 'TMS320C55_bfxpa', 'TMS320C55_bfxtr',
    'TMS320C55_bnot', 'TMS320C55_bset1', 'TMS320C55_bset2',
    'TMS320C55_btst', 'TMS320C55_btst_mov', 'TMS320C55_btstclr',
    'TMS320C55_btstnot', 'TMS320C55_btstp', 'TMS320C55_btstset',
    'TMS320C55_call', 'TMS320C55_callcc', 'TMS320C55_cmp',
    'TMS320C55_cmpand', 'TMS320C55_cmpandu', 'TMS320C55_cmpor',
    'TMS320C55_cmporu', 'TMS320C55_cmpu', 'TMS320C55_delay',
    'TMS320C55_dmaxdiff', 'TMS320C55_dmindiff', 'TMS320C55_exp',
    'TMS320C55_firsadd', 'TMS320C55_firssub', 'TMS320C55_idle',
    'TMS320C55_intr', 'TMS320C55_last', 'TMS320C55_lms',
    'TMS320C55_mac3', 'TMS320C55_mac4', 'TMS320C55_mac40_mac40',
    'TMS320C55_mac40_mpy40', 'TMS320C55_mac_mac', 'TMS320C55_mac_mpy',
    'TMS320C55_mack3', 'TMS320C55_mack4', 'TMS320C55_mackr3',
    'TMS320C55_mackr4', 'TMS320C55_macm2', 'TMS320C55_macm3',
    'TMS320C55_macm4', 'TMS320C55_macm403', 'TMS320C55_macm404',
    'TMS320C55_macm_mov', 'TMS320C55_macmk3', 'TMS320C55_macmk4',
    'TMS320C55_macmkr3', 'TMS320C55_macmkr4', 'TMS320C55_macmr2',
    'TMS320C55_macmr3', 'TMS320C55_macmr4', 'TMS320C55_macmr403',
    'TMS320C55_macmr404', 'TMS320C55_macmr_mov', 'TMS320C55_macmrz',
    'TMS320C55_macmz', 'TMS320C55_macr3', 'TMS320C55_macr4',
    'TMS320C55_macr40_macr40', 'TMS320C55_macr40_mpyr40',
    'TMS320C55_macr_macr', 'TMS320C55_macr_mpyr',
    'TMS320C55_mant_nexp', 'TMS320C55_mas2', 'TMS320C55_mas3',
    'TMS320C55_mas40_mac40', 'TMS320C55_mas40_mas40',
    'TMS320C55_mas40_mpy40', 'TMS320C55_mas_mac', 'TMS320C55_mas_mas',
    'TMS320C55_mas_mpy', 'TMS320C55_masm2', 'TMS320C55_masm3',
    'TMS320C55_masm4', 'TMS320C55_masm403', 'TMS320C55_masm404',
    'TMS320C55_masm_mov', 'TMS320C55_masmr2', 'TMS320C55_masmr3',
    'TMS320C55_masmr4', 'TMS320C55_masmr403', 'TMS320C55_masmr404',
    'TMS320C55_masmr_mov', 'TMS320C55_masr2', 'TMS320C55_masr3',
    'TMS320C55_masr40_macr40', 'TMS320C55_masr40_masr40',
    'TMS320C55_masr40_mpyr40', 'TMS320C55_masr_macr',
    'TMS320C55_masr_masr', 'TMS320C55_masr_mpyr', 'TMS320C55_max1',
    'TMS320C55_max2', 'TMS320C55_maxdiff', 'TMS320C55_min1',
    'TMS320C55_min2', 'TMS320C55_mindiff', 'TMS320C55_mov2',
    'TMS320C55_mov3', 'TMS320C55_mov402', 'TMS320C55_mov_aadd',
    'TMS320C55_mov_add', 'TMS320C55_mov_asub', 'TMS320C55_mov_mov',
    'TMS320C55_mpy1', 'TMS320C55_mpy2', 'TMS320C55_mpy3',
    'TMS320C55_mpy40_mac40', 'TMS320C55_mpy_mac', 'TMS320C55_mpy_mpy',
    'TMS320C55_mpy_mpy40', 'TMS320C55_mpy_mpyr',
    'TMS320C55_mpy_mpyr40', 'TMS320C55_mpyk2', 'TMS320C55_mpyk3',
    'TMS320C55_mpykr2', 'TMS320C55_mpykr3', 'TMS320C55_mpym2',
    'TMS320C55_mpym3', 'TMS320C55_mpym403', 'TMS320C55_mpym_mov',
    'TMS320C55_mpymk', 'TMS320C55_mpymkr', 'TMS320C55_mpymr2',
    'TMS320C55_mpymr3', 'TMS320C55_mpymr403', 'TMS320C55_mpymr_mov',
    'TMS320C55_mpymru3', 'TMS320C55_mpymu3', 'TMS320C55_mpyr1',
    'TMS320C55_mpyr2', 'TMS320C55_mpyr3', 'TMS320C55_mpyr40_macr40',
    'TMS320C55_mpyr_macr', 'TMS320C55_neg1', 'TMS320C55_neg2',
    'TMS320C55_nop', 'TMS320C55_nop_16', 'TMS320C55_not1',
    'TMS320C55_not2', 'TMS320C55_null', 'TMS320C55_or1',
    'TMS320C55_or2', 'TMS320C55_or3', 'TMS320C55_pop1',
    'TMS320C55_pop2', 'TMS320C55_popboth', 'TMS320C55_psh1',
    'TMS320C55_psh2', 'TMS320C55_pshboth', 'TMS320C55_reset',
    'TMS320C55_ret', 'TMS320C55_retcc', 'TMS320C55_reti',
    'TMS320C55_rol', 'TMS320C55_ror', 'TMS320C55_round1',
    'TMS320C55_round2', 'TMS320C55_rpt', 'TMS320C55_rptadd',
    'TMS320C55_rptb', 'TMS320C55_rptblocal', 'TMS320C55_rptcc',
    'TMS320C55_rptsub', 'TMS320C55_sat1', 'TMS320C55_sat2',
    'TMS320C55_satr1', 'TMS320C55_satr2', 'TMS320C55_sftcc',
    'TMS320C55_sftl2', 'TMS320C55_sftl3', 'TMS320C55_sfts2',
    'TMS320C55_sfts3', 'TMS320C55_sftsc2', 'TMS320C55_sftsc3',
    'TMS320C55_sqa1', 'TMS320C55_sqa2', 'TMS320C55_sqam2',
    'TMS320C55_sqam3', 'TMS320C55_sqamr2', 'TMS320C55_sqamr3',
    'TMS320C55_sqar1', 'TMS320C55_sqar2', 'TMS320C55_sqdst',
    'TMS320C55_sqr1', 'TMS320C55_sqr2', 'TMS320C55_sqrm',
    'TMS320C55_sqrmr', 'TMS320C55_sqrr1', 'TMS320C55_sqrr2',
    'TMS320C55_sqs1', 'TMS320C55_sqs2', 'TMS320C55_sqsm2',
    'TMS320C55_sqsm3', 'TMS320C55_sqsmr2', 'TMS320C55_sqsmr3',
    'TMS320C55_sqsr1', 'TMS320C55_sqsr2', 'TMS320C55_sub1',
    'TMS320C55_sub2', 'TMS320C55_sub3', 'TMS320C55_sub4',
    'TMS320C55_sub_mov', 'TMS320C55_subadd', 'TMS320C55_subc2',
    'TMS320C55_subc3', 'TMS320C55_swap', 'TMS320C55_swap4',
    'TMS320C55_swapp', 'TMS320C55_trap', 'TMS320C55_xcc',
    'TMS320C55_xccpart', 'TMS320C55_xor1', 'TMS320C55_xor2',
    'TMS320C55_xor3', 'TMS6_abs', 'TMS6_abs2', 'TMS6_absdp',
    'TMS6_abssp', 'TMS6_add', 'TMS6_add2', 'TMS6_add4', 'TMS6_addab',
    'TMS6_addad', 'TMS6_addah', 'TMS6_addaw', 'TMS6_adddp',
    'TMS6_addk', 'TMS6_addkpc', 'TMS6_addsp', 'TMS6_addsub',
    'TMS6_addsub2', 'TMS6_addu', 'TMS6_and', 'TMS6_andn', 'TMS6_avg2',
    'TMS6_avgu4', 'TMS6_b', 'TMS6_bdec', 'TMS6_bitc4', 'TMS6_bitr',
    'TMS6_bnop', 'TMS6_bpos', 'TMS6_callp', 'TMS6_clr', 'TMS6_cmpeq',
    'TMS6_cmpeq2', 'TMS6_cmpeq4', 'TMS6_cmpeqdp', 'TMS6_cmpeqsp',
    'TMS6_cmpgt', 'TMS6_cmpgt2', 'TMS6_cmpgtdp', 'TMS6_cmpgtsp',
    'TMS6_cmpgtu', 'TMS6_cmpgtu4', 'TMS6_cmplt', 'TMS6_cmplt2',
    'TMS6_cmpltdp', 'TMS6_cmpltsp', 'TMS6_cmpltu', 'TMS6_cmpltu4',
    'TMS6_cmpy', 'TMS6_cmpyr', 'TMS6_cmpyr1', 'TMS6_ddotp4',
    'TMS6_ddotph2', 'TMS6_ddotph2r', 'TMS6_ddotpl2', 'TMS6_ddotpl2r',
    'TMS6_deal', 'TMS6_dint', 'TMS6_dmv', 'TMS6_dotp2', 'TMS6_dotpn2',
    'TMS6_dotpnrsu2', 'TMS6_dotpnrus2', 'TMS6_dotprsu2',
    'TMS6_dotprus2', 'TMS6_dotpsu4', 'TMS6_dotpu4', 'TMS6_dotpus4',
    'TMS6_dpack2', 'TMS6_dpackx2', 'TMS6_dpint', 'TMS6_dpsp',
    'TMS6_dptrunc', 'TMS6_ext', 'TMS6_extu', 'TMS6_gmpy',
    'TMS6_gmpy4', 'TMS6_idle', 'TMS6_intdp', 'TMS6_intdpu',
    'TMS6_intsp', 'TMS6_intspu', 'TMS6_last', 'TMS6_ldb', 'TMS6_ldbu',
    'TMS6_lddw', 'TMS6_ldh', 'TMS6_ldhu', 'TMS6_ldndw', 'TMS6_ldnw',
    'TMS6_ldw', 'TMS6_lmbd', 'TMS6_max2', 'TMS6_maxu4', 'TMS6_min2',
    'TMS6_minu4', 'TMS6_mpy', 'TMS6_mpy2', 'TMS6_mpy2ir',
    'TMS6_mpy32', 'TMS6_mpy32su', 'TMS6_mpy32u', 'TMS6_mpy32us',
    'TMS6_mpydp', 'TMS6_mpyh', 'TMS6_mpyhi', 'TMS6_mpyhir',
    'TMS6_mpyhl', 'TMS6_mpyhlu', 'TMS6_mpyhslu', 'TMS6_mpyhsu',
    'TMS6_mpyhu', 'TMS6_mpyhuls', 'TMS6_mpyhus', 'TMS6_mpyi',
    'TMS6_mpyid', 'TMS6_mpyih', 'TMS6_mpyihr', 'TMS6_mpyil',
    'TMS6_mpyilr', 'TMS6_mpylh', 'TMS6_mpylhu', 'TMS6_mpyli',
    'TMS6_mpylir', 'TMS6_mpylshu', 'TMS6_mpyluhs', 'TMS6_mpysp',
    'TMS6_mpysp2dp', 'TMS6_mpyspdp', 'TMS6_mpysu', 'TMS6_mpysu4',
    'TMS6_mpyu', 'TMS6_mpyu4', 'TMS6_mpyus', 'TMS6_mpyus4', 'TMS6_mv',
    'TMS6_mvc', 'TMS6_mvd', 'TMS6_mvk', 'TMS6_mvkh', 'TMS6_mvkl',
    'TMS6_mvklh', 'TMS6_neg', 'TMS6_nop', 'TMS6_norm', 'TMS6_not',
    'TMS6_null', 'TMS6_or', 'TMS6_pack2', 'TMS6_packh2',
    'TMS6_packh4', 'TMS6_packhl2', 'TMS6_packl4', 'TMS6_packlh2',
    'TMS6_rcpdp', 'TMS6_rcpsp', 'TMS6_rint', 'TMS6_rotl',
    'TMS6_rpack2', 'TMS6_rsqrdp', 'TMS6_rsqrsp', 'TMS6_sadd',
    'TMS6_sadd2', 'TMS6_saddsu2', 'TMS6_saddsub', 'TMS6_saddsub2',
    'TMS6_saddu4', 'TMS6_saddus2', 'TMS6_sat', 'TMS6_set',
    'TMS6_shfl', 'TMS6_shfl3', 'TMS6_shl', 'TMS6_shlmb', 'TMS6_shr',
    'TMS6_shr2', 'TMS6_shrmb', 'TMS6_shru', 'TMS6_shru2', 'TMS6_smpy',
    'TMS6_smpy2', 'TMS6_smpy32', 'TMS6_smpyh', 'TMS6_smpyhl',
    'TMS6_smpylh', 'TMS6_spack2', 'TMS6_spacku4', 'TMS6_spdp',
    'TMS6_spint', 'TMS6_spkernel', 'TMS6_spkernelr', 'TMS6_sploop',
    'TMS6_sploopd', 'TMS6_sploopw', 'TMS6_spmask', 'TMS6_spmaskr',
    'TMS6_sptrunc', 'TMS6_sshl', 'TMS6_sshvl', 'TMS6_sshvr',
    'TMS6_ssub', 'TMS6_ssub2', 'TMS6_stb', 'TMS6_stbu', 'TMS6_stdw',
    'TMS6_sth', 'TMS6_sthu', 'TMS6_stndw', 'TMS6_stnw', 'TMS6_stw',
    'TMS6_sub', 'TMS6_sub2', 'TMS6_sub4', 'TMS6_subab',
    'TMS6_subabs4', 'TMS6_subah', 'TMS6_subaw', 'TMS6_subc',
    'TMS6_subdp', 'TMS6_subsp', 'TMS6_subu', 'TMS6_swap2',
    'TMS6_swap4', 'TMS6_swe', 'TMS6_swenr', 'TMS6_unpkhu4',
    'TMS6_unpklu4', 'TMS6_xor', 'TMS6_xormpy', 'TMS6_xpnd2',
    'TMS6_xpnd4', 'TMS6_zero', 'TMS_abs', 'TMS_adcb', 'TMS_add',
    'TMS_addb', 'TMS_addc', 'TMS_adds', 'TMS_addt', 'TMS_adrk',
    'TMS_and', 'TMS_andb', 'TMS_apac', 'TMS_apl', 'TMS_apl2', 'TMS_b',
    'TMS_bacc', 'TMS_baccd', 'TMS_banz', 'TMS_banzd', 'TMS_bcnd',
    'TMS_bcndd', 'TMS_bd', 'TMS_bit', 'TMS_bitt', 'TMS_bldd',
    'TMS_bldp', 'TMS_blpd', 'TMS_bsar', 'TMS_cala', 'TMS_calad',
    'TMS_call', 'TMS_calld', 'TMS_cc', 'TMS_ccd', 'TMS_clrc',
    'TMS_cmpl', 'TMS_cmpr', 'TMS_cpl', 'TMS_cpl2', 'TMS_crgt',
    'TMS_crlt', 'TMS_dmov', 'TMS_estop', 'TMS_exar', 'TMS_idle',
    'TMS_idle2', 'TMS_in', 'TMS_intr', 'TMS_lacb', 'TMS_lacc',
    'TMS_lacl', 'TMS_lact', 'TMS_lamm', 'TMS_lar', 'TMS_last',
    'TMS_ldp', 'TMS_lmmr', 'TMS_lph', 'TMS_lst', 'TMS_lt', 'TMS_lta',
    'TMS_ltd', 'TMS_ltp', 'TMS_lts', 'TMS_mac', 'TMS_macd',
    'TMS_madd', 'TMS_mads', 'TMS_mar', 'TMS_mpy', 'TMS_mpya',
    'TMS_mpys', 'TMS_mpyu', 'TMS_neg', 'TMS_nmi', 'TMS_nop',
    'TMS_norm', 'TMS_null', 'TMS_opl', 'TMS_opl2', 'TMS_or',
    'TMS_orb', 'TMS_out', 'TMS_pac', 'TMS_pop', 'TMS_popd',
    'TMS_pshd', 'TMS_push', 'TMS_ret', 'TMS_retc', 'TMS_retcd',
    'TMS_retd', 'TMS_rete', 'TMS_reti', 'TMS_rol', 'TMS_rolb',
    'TMS_ror', 'TMS_rorb', 'TMS_rpt', 'TMS_rptb', 'TMS_rptz',
    'TMS_sacb', 'TMS_sach', 'TMS_sacl', 'TMS_samm', 'TMS_sar',
    'TMS_sath', 'TMS_satl', 'TMS_sbb', 'TMS_sbbb', 'TMS_sbrk',
    'TMS_setc', 'TMS_sfl', 'TMS_sflb', 'TMS_sfr', 'TMS_sfrb',
    'TMS_smmr', 'TMS_spac', 'TMS_sph', 'TMS_spl', 'TMS_splk',
    'TMS_spm', 'TMS_sqra', 'TMS_sqrs', 'TMS_sst', 'TMS_sub',
    'TMS_subb', 'TMS_subc', 'TMS_subs', 'TMS_subt', 'TMS_tblr',
    'TMS_tblw', 'TMS_trap', 'TMS_xc', 'TMS_xor', 'TMS_xorb',
    'TMS_xpl', 'TMS_xpl2', 'TMS_zalr', 'TMS_zap', 'TMS_zpr',
    'TOGGLEKEYS', 'TOKEN_ACCESS_INFORMATION',
    'TOKEN_APPCONTAINER_INFORMATION', 'TOKEN_AUDIT_POLICY',
    'TOKEN_BNO_ISOLATION_INFORMATION', 'TOKEN_CONTROL',
    'TOKEN_DEFAULT_DACL', 'TOKEN_DEVICE_CLAIMS', 'TOKEN_ELEVATION',
    'TOKEN_ELEVATION_TYPE', 'TOKEN_ELEVATION_TYPE__enumvalues',
    'TOKEN_GROUPS', 'TOKEN_GROUPS_AND_PRIVILEGES',
    'TOKEN_INFORMATION_CLASS', 'TOKEN_INFORMATION_CLASS__enumvalues',
    'TOKEN_LINKED_TOKEN', 'TOKEN_MANDATORY_LABEL',
    'TOKEN_MANDATORY_POLICY', 'TOKEN_ORIGIN', 'TOKEN_OWNER',
    'TOKEN_PRIMARY_GROUP', 'TOKEN_PRIVILEGES',
    'TOKEN_SID_INFORMATION', 'TOKEN_SOURCE', 'TOKEN_STATISTICS',
    'TOKEN_TYPE', 'TOKEN_TYPE__enumvalues', 'TOKEN_USER',
    'TOKEN_USER_CLAIMS', 'TOUCHINPUT', 'TOUCHPREDICTIONPARAMETERS',
    'TOUCH_FLAGS', 'TOUCH_HIT_TESTING_INPUT',
    'TOUCH_HIT_TESTING_PROXIMITY_EVALUATION', 'TOUCH_MASK',
    'TPMPARAMS', 'TP_CALLBACK_ENVIRON', 'TP_CALLBACK_ENVIRON_V3',
    'TP_CALLBACK_INSTANCE', 'TP_CALLBACK_PRIORITY',
    'TP_CALLBACK_PRIORITY_COUNT', 'TP_CALLBACK_PRIORITY_HIGH',
    'TP_CALLBACK_PRIORITY_INVALID', 'TP_CALLBACK_PRIORITY_LOW',
    'TP_CALLBACK_PRIORITY_NORMAL', 'TP_CALLBACK_PRIORITY__enumvalues',
    'TP_CLEANUP_GROUP', 'TP_IO', 'TP_POOL',
    'TP_POOL_STACK_INFORMATION', 'TP_TIMER', 'TP_VERSION', 'TP_WAIT',
    'TP_WAIT_RESULT', 'TP_WORK', 'TRACE_FULL', 'TRACKMOUSEEVENT',
    'TRANSACTIONMANAGER_BASIC_INFORMATION',
    'TRANSACTIONMANAGER_INFORMATION_CLASS',
    'TRANSACTIONMANAGER_INFORMATION_CLASS__enumvalues',
    'TRANSACTIONMANAGER_LOGPATH_INFORMATION',
    'TRANSACTIONMANAGER_LOG_INFORMATION',
    'TRANSACTIONMANAGER_OLDEST_INFORMATION',
    'TRANSACTIONMANAGER_RECOVERY_INFORMATION',
    'TRANSACTION_BASIC_INFORMATION', 'TRANSACTION_BIND_INFORMATION',
    'TRANSACTION_ENLISTMENTS_INFORMATION',
    'TRANSACTION_ENLISTMENT_PAIR', 'TRANSACTION_INFORMATION_CLASS',
    'TRANSACTION_INFORMATION_CLASS__enumvalues',
    'TRANSACTION_LIST_ENTRY', 'TRANSACTION_LIST_INFORMATION',
    'TRANSACTION_NOTIFICATION',
    'TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT',
    'TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT',
    'TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT',
    'TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT',
    'TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT',
    'TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT',
    'TRANSACTION_OUTCOME', 'TRANSACTION_OUTCOME__enumvalues',
    'TRANSACTION_PROPERTIES_INFORMATION', 'TRANSACTION_STATE',
    'TRANSACTION_STATE__enumvalues',
    'TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION', 'TRICORE_abs',
    'TRICORE_abs_b', 'TRICORE_abs_h', 'TRICORE_absdif',
    'TRICORE_absdif_b', 'TRICORE_absdif_h', 'TRICORE_absdifs',
    'TRICORE_absdifs_h', 'TRICORE_abss', 'TRICORE_abss_h',
    'TRICORE_add16', 'TRICORE_add16_a', 'TRICORE_add32',
    'TRICORE_add32_a', 'TRICORE_add_b', 'TRICORE_add_f',
    'TRICORE_add_h', 'TRICORE_addc', 'TRICORE_addi', 'TRICORE_addih',
    'TRICORE_addih_a', 'TRICORE_adds', 'TRICORE_adds16',
    'TRICORE_adds_h', 'TRICORE_adds_hu', 'TRICORE_adds_u',
    'TRICORE_addsc16_a', 'TRICORE_addsc32_a', 'TRICORE_addsc_at',
    'TRICORE_addx', 'TRICORE_and16', 'TRICORE_and32',
    'TRICORE_and_and_t', 'TRICORE_and_andn_t', 'TRICORE_and_eq',
    'TRICORE_and_ge', 'TRICORE_and_ge_u', 'TRICORE_and_lt',
    'TRICORE_and_lt_u', 'TRICORE_and_ne', 'TRICORE_and_nor_t',
    'TRICORE_and_or_t', 'TRICORE_and_t', 'TRICORE_andn',
    'TRICORE_andn_t', 'TRICORE_bisr16', 'TRICORE_bisr32',
    'TRICORE_bmerge', 'TRICORE_bsplit', 'TRICORE_cachea_i',
    'TRICORE_cachea_w', 'TRICORE_cachea_wi', 'TRICORE_cachei_i',
    'TRICORE_cachei_w', 'TRICORE_cachei_wi', 'TRICORE_cadd16',
    'TRICORE_cadd32', 'TRICORE_caddn16', 'TRICORE_caddn32',
    'TRICORE_call16', 'TRICORE_call32', 'TRICORE_calla',
    'TRICORE_calli', 'TRICORE_clo', 'TRICORE_clo_h', 'TRICORE_cls',
    'TRICORE_cls_h', 'TRICORE_clz', 'TRICORE_clz_h', 'TRICORE_cmov16',
    'TRICORE_cmovn16', 'TRICORE_cmp_f', 'TRICORE_cmpswap_w',
    'TRICORE_crc32', 'TRICORE_crc32_b', 'TRICORE_crc32l_w',
    'TRICORE_crcn', 'TRICORE_csub', 'TRICORE_csubn',
    'TRICORE_debug16', 'TRICORE_debug32', 'TRICORE_dextr',
    'TRICORE_disable', 'TRICORE_div', 'TRICORE_div_f',
    'TRICORE_div_u', 'TRICORE_dsync', 'TRICORE_dvadj',
    'TRICORE_dvinit', 'TRICORE_dvinit_b', 'TRICORE_dvinit_bu',
    'TRICORE_dvinit_h', 'TRICORE_dvinit_hu', 'TRICORE_dvinit_u',
    'TRICORE_dvstep', 'TRICORE_dvstep_u', 'TRICORE_enable',
    'TRICORE_eq16', 'TRICORE_eq32', 'TRICORE_eq_a', 'TRICORE_eq_b',
    'TRICORE_eq_h', 'TRICORE_eq_w', 'TRICORE_eqany_b',
    'TRICORE_eqany_h', 'TRICORE_eqz_a', 'TRICORE_extr',
    'TRICORE_extr_u', 'TRICORE_fcall', 'TRICORE_fcalla',
    'TRICORE_fcalli', 'TRICORE_fret16', 'TRICORE_fret32',
    'TRICORE_ftoi', 'TRICORE_ftoiz', 'TRICORE_ftoq31',
    'TRICORE_ftoq31z', 'TRICORE_ftou', 'TRICORE_ftouz', 'TRICORE_ge',
    'TRICORE_ge_a', 'TRICORE_ge_u', 'TRICORE_imask', 'TRICORE_ins_t',
    'TRICORE_insert', 'TRICORE_insn_t', 'TRICORE_isync',
    'TRICORE_itof', 'TRICORE_ixmax', 'TRICORE_ixmax_u',
    'TRICORE_ixmin', 'TRICORE_ixmin_u', 'TRICORE_j16', 'TRICORE_j32',
    'TRICORE_ja', 'TRICORE_jeq16', 'TRICORE_jeq32', 'TRICORE_jeq_a',
    'TRICORE_jge', 'TRICORE_jge_u', 'TRICORE_jgez16',
    'TRICORE_jgtz16', 'TRICORE_ji16', 'TRICORE_ji32', 'TRICORE_jl',
    'TRICORE_jla', 'TRICORE_jlez16', 'TRICORE_jli', 'TRICORE_jlt',
    'TRICORE_jlt_u', 'TRICORE_jltz16', 'TRICORE_jne16',
    'TRICORE_jne32', 'TRICORE_jne_a', 'TRICORE_jned', 'TRICORE_jnei',
    'TRICORE_jnz16', 'TRICORE_jnz16_a', 'TRICORE_jnz16_t',
    'TRICORE_jnz32_a', 'TRICORE_jnz32_t', 'TRICORE_jz16',
    'TRICORE_jz16_a', 'TRICORE_jz16_t', 'TRICORE_jz32_a',
    'TRICORE_jz32_t', 'TRICORE_last', 'TRICORE_ld16_a',
    'TRICORE_ld16_bu', 'TRICORE_ld16_h', 'TRICORE_ld16_w',
    'TRICORE_ld32_a', 'TRICORE_ld32_bu', 'TRICORE_ld32_h',
    'TRICORE_ld32_w', 'TRICORE_ld_b', 'TRICORE_ld_d', 'TRICORE_ld_da',
    'TRICORE_ld_hu', 'TRICORE_ld_q', 'TRICORE_ldlcx', 'TRICORE_ldmst',
    'TRICORE_lducx', 'TRICORE_lea', 'TRICORE_lha', 'TRICORE_loop16',
    'TRICORE_loop32', 'TRICORE_loopu', 'TRICORE_lt16', 'TRICORE_lt32',
    'TRICORE_lt_a', 'TRICORE_lt_b', 'TRICORE_lt_bu', 'TRICORE_lt_h',
    'TRICORE_lt_hu', 'TRICORE_lt_u', 'TRICORE_lt_w', 'TRICORE_lt_wu',
    'TRICORE_madd', 'TRICORE_madd_f', 'TRICORE_madd_h',
    'TRICORE_madd_q', 'TRICORE_madd_u', 'TRICORE_maddm_h',
    'TRICORE_maddms_h', 'TRICORE_maddr_h', 'TRICORE_maddr_q',
    'TRICORE_maddrs_h', 'TRICORE_maddrs_q', 'TRICORE_madds',
    'TRICORE_madds_h', 'TRICORE_madds_q', 'TRICORE_madds_u',
    'TRICORE_maddsu_h', 'TRICORE_maddsum_h', 'TRICORE_maddsums_h',
    'TRICORE_maddsur_h', 'TRICORE_maddsurs_h', 'TRICORE_maddsus_h',
    'TRICORE_max', 'TRICORE_max_b', 'TRICORE_max_bu', 'TRICORE_max_h',
    'TRICORE_max_hu', 'TRICORE_max_u', 'TRICORE_mfcr', 'TRICORE_min',
    'TRICORE_min_b', 'TRICORE_min_bu', 'TRICORE_min_h',
    'TRICORE_min_hu', 'TRICORE_min_u', 'TRICORE_mov16',
    'TRICORE_mov16_a', 'TRICORE_mov16_aa', 'TRICORE_mov16_d',
    'TRICORE_mov32', 'TRICORE_mov32_a', 'TRICORE_mov32_aa',
    'TRICORE_mov32_d', 'TRICORE_mov_u', 'TRICORE_movh',
    'TRICORE_movh_a', 'TRICORE_msub', 'TRICORE_msub_f',
    'TRICORE_msub_h', 'TRICORE_msub_q', 'TRICORE_msub_u',
    'TRICORE_msubad_h', 'TRICORE_msubadm_h', 'TRICORE_msubadms_h',
    'TRICORE_msubadr_h', 'TRICORE_msubadrs_h', 'TRICORE_msubads_h',
    'TRICORE_msubm_h', 'TRICORE_msubms_h', 'TRICORE_msubr_h',
    'TRICORE_msubr_q', 'TRICORE_msubrs_h', 'TRICORE_msubrs_q',
    'TRICORE_msubs', 'TRICORE_msubs_h', 'TRICORE_msubs_q',
    'TRICORE_msubs_u', 'TRICORE_mtcr', 'TRICORE_mul16',
    'TRICORE_mul32', 'TRICORE_mul_f', 'TRICORE_mul_h',
    'TRICORE_mul_q', 'TRICORE_mul_u', 'TRICORE_mulm_h',
    'TRICORE_mulms_h', 'TRICORE_mulr_h', 'TRICORE_mulr_q',
    'TRICORE_muls', 'TRICORE_muls_u', 'TRICORE_nand',
    'TRICORE_nand_t', 'TRICORE_ne', 'TRICORE_ne_a', 'TRICORE_nez_a',
    'TRICORE_nop16', 'TRICORE_nop32', 'TRICORE_nor16',
    'TRICORE_nor32', 'TRICORE_nor_t', 'TRICORE_null', 'TRICORE_or16',
    'TRICORE_or32', 'TRICORE_or_and_t', 'TRICORE_or_andn_t',
    'TRICORE_or_eq', 'TRICORE_or_ge', 'TRICORE_or_ge_u',
    'TRICORE_or_lt', 'TRICORE_or_lt_u', 'TRICORE_or_ne',
    'TRICORE_or_nor_t', 'TRICORE_or_or_t', 'TRICORE_or_t',
    'TRICORE_orn', 'TRICORE_orn_t', 'TRICORE_pack', 'TRICORE_parity',
    'TRICORE_popcnt_w', 'TRICORE_q31tof', 'TRICORE_qseed_f',
    'TRICORE_restore', 'TRICORE_ret16', 'TRICORE_ret32',
    'TRICORE_rfe16', 'TRICORE_rfe32', 'TRICORE_rfm', 'TRICORE_rslcx',
    'TRICORE_rstv', 'TRICORE_rsub16', 'TRICORE_rsub32',
    'TRICORE_rsubs', 'TRICORE_rsubs_u', 'TRICORE_sat16_b',
    'TRICORE_sat16_bu', 'TRICORE_sat16_h', 'TRICORE_sat16_hu',
    'TRICORE_sat32_b', 'TRICORE_sat32_bu', 'TRICORE_sat32_h',
    'TRICORE_sat32_hu', 'TRICORE_sel', 'TRICORE_seln', 'TRICORE_sh16',
    'TRICORE_sh32', 'TRICORE_sh_and_t', 'TRICORE_sh_andn_t',
    'TRICORE_sh_eq', 'TRICORE_sh_ge', 'TRICORE_sh_ge_u',
    'TRICORE_sh_h', 'TRICORE_sh_lt', 'TRICORE_sh_lt_u',
    'TRICORE_sh_nand_t', 'TRICORE_sh_ne', 'TRICORE_sh_nor_t',
    'TRICORE_sh_or_t', 'TRICORE_sh_orn_t', 'TRICORE_sh_xnor_t',
    'TRICORE_sh_xor_t', 'TRICORE_sha16', 'TRICORE_sha32',
    'TRICORE_sha_h', 'TRICORE_shas', 'TRICORE_shuffle',
    'TRICORE_st16_a', 'TRICORE_st16_b', 'TRICORE_st16_h',
    'TRICORE_st16_w', 'TRICORE_st32_a', 'TRICORE_st32_b',
    'TRICORE_st32_h', 'TRICORE_st32_w', 'TRICORE_st_d',
    'TRICORE_st_da', 'TRICORE_st_q', 'TRICORE_st_t', 'TRICORE_stlcx',
    'TRICORE_stucx', 'TRICORE_sub16', 'TRICORE_sub16_a',
    'TRICORE_sub32', 'TRICORE_sub32_a', 'TRICORE_sub_b',
    'TRICORE_sub_f', 'TRICORE_sub_h', 'TRICORE_subc',
    'TRICORE_subs16', 'TRICORE_subs32', 'TRICORE_subs_h',
    'TRICORE_subs_hu', 'TRICORE_subs_u', 'TRICORE_subx',
    'TRICORE_svlcx', 'TRICORE_swap_w', 'TRICORE_swapmsk_w',
    'TRICORE_syscall', 'TRICORE_tlbdemap', 'TRICORE_tlbflush_a',
    'TRICORE_tlbflush_b', 'TRICORE_tlbmap', 'TRICORE_tlbprobe_a',
    'TRICORE_tlbprobe_i', 'TRICORE_trapsv', 'TRICORE_trapv',
    'TRICORE_unpack', 'TRICORE_updfl', 'TRICORE_utof', 'TRICORE_wait',
    'TRICORE_xnor', 'TRICORE_xnor_t', 'TRICORE_xor16',
    'TRICORE_xor32', 'TRICORE_xor_eq', 'TRICORE_xor_ge',
    'TRICORE_xor_ge_u', 'TRICORE_xor_lt', 'TRICORE_xor_lt_u',
    'TRICORE_xor_ne', 'TRICORE_xor_t', 'TRIMEDIA_alloc',
    'TRIMEDIA_allocd', 'TRIMEDIA_allocr', 'TRIMEDIA_allocx',
    'TRIMEDIA_asl', 'TRIMEDIA_asli', 'TRIMEDIA_asr', 'TRIMEDIA_asri',
    'TRIMEDIA_bitand', 'TRIMEDIA_bitandinv', 'TRIMEDIA_bitinv',
    'TRIMEDIA_bitor', 'TRIMEDIA_bitxor', 'TRIMEDIA_borrow',
    'TRIMEDIA_carry', 'TRIMEDIA_curcycles', 'TRIMEDIA_cycles',
    'TRIMEDIA_dcb', 'TRIMEDIA_dinvalid', 'TRIMEDIA_dspiabs',
    'TRIMEDIA_dspiadd', 'TRIMEDIA_dspidualabs',
    'TRIMEDIA_dspidualadd', 'TRIMEDIA_dspidualmul',
    'TRIMEDIA_dspidualsub', 'TRIMEDIA_dspimul', 'TRIMEDIA_dspisub',
    'TRIMEDIA_dspuadd', 'TRIMEDIA_dspumul', 'TRIMEDIA_dspuquadaddui',
    'TRIMEDIA_dspusub', 'TRIMEDIA_dualasr', 'TRIMEDIA_dualiclipi',
    'TRIMEDIA_dualuclipi', 'TRIMEDIA_fabsval',
    'TRIMEDIA_fabsvalflags', 'TRIMEDIA_fadd', 'TRIMEDIA_faddflags',
    'TRIMEDIA_fdiv', 'TRIMEDIA_fdivflags', 'TRIMEDIA_feql',
    'TRIMEDIA_feqlflags', 'TRIMEDIA_fgeq', 'TRIMEDIA_fgeqflags',
    'TRIMEDIA_fgtr', 'TRIMEDIA_fgtrflags', 'TRIMEDIA_fleq',
    'TRIMEDIA_fleqflags', 'TRIMEDIA_fles', 'TRIMEDIA_flesflags',
    'TRIMEDIA_fmul', 'TRIMEDIA_fmulflags', 'TRIMEDIA_fneq',
    'TRIMEDIA_fneqflags', 'TRIMEDIA_fsign', 'TRIMEDIA_fsignflags',
    'TRIMEDIA_fsqrt', 'TRIMEDIA_fsqrtflags', 'TRIMEDIA_fsub',
    'TRIMEDIA_fsubflags', 'TRIMEDIA_funshift1', 'TRIMEDIA_funshift2',
    'TRIMEDIA_funshift3', 'TRIMEDIA_h_dspiabs',
    'TRIMEDIA_h_dspidualabs', 'TRIMEDIA_h_iabs', 'TRIMEDIA_h_st16d',
    'TRIMEDIA_h_st32d', 'TRIMEDIA_h_st8d', 'TRIMEDIA_hicycles',
    'TRIMEDIA_iabs', 'TRIMEDIA_iadd', 'TRIMEDIA_iaddi',
    'TRIMEDIA_iavgonep', 'TRIMEDIA_ibytesel', 'TRIMEDIA_iclipi',
    'TRIMEDIA_iclr', 'TRIMEDIA_ident', 'TRIMEDIA_ieql',
    'TRIMEDIA_ieqli', 'TRIMEDIA_ifir16', 'TRIMEDIA_ifir8ii',
    'TRIMEDIA_ifir8ui', 'TRIMEDIA_ifixieee', 'TRIMEDIA_ifixieeeflags',
    'TRIMEDIA_ifixrz', 'TRIMEDIA_ifixrzflags', 'TRIMEDIA_iflip',
    'TRIMEDIA_ifloat', 'TRIMEDIA_ifloatflags', 'TRIMEDIA_ifloatrz',
    'TRIMEDIA_ifloatrzflags', 'TRIMEDIA_igeq', 'TRIMEDIA_igeqi',
    'TRIMEDIA_igtr', 'TRIMEDIA_igtri', 'TRIMEDIA_ijmpf',
    'TRIMEDIA_ijmpi', 'TRIMEDIA_ijmpt', 'TRIMEDIA_ild16',
    'TRIMEDIA_ild16d', 'TRIMEDIA_ild16r', 'TRIMEDIA_ild16x',
    'TRIMEDIA_ild8', 'TRIMEDIA_ild8d', 'TRIMEDIA_ild8r',
    'TRIMEDIA_ileq', 'TRIMEDIA_ileqi', 'TRIMEDIA_iles',
    'TRIMEDIA_ilesi', 'TRIMEDIA_imax', 'TRIMEDIA_imin',
    'TRIMEDIA_imul', 'TRIMEDIA_imulm', 'TRIMEDIA_ineg',
    'TRIMEDIA_ineq', 'TRIMEDIA_ineqi', 'TRIMEDIA_inonzero',
    'TRIMEDIA_isub', 'TRIMEDIA_isubi', 'TRIMEDIA_izero',
    'TRIMEDIA_jmpf', 'TRIMEDIA_jmpi', 'TRIMEDIA_jmpt',
    'TRIMEDIA_last', 'TRIMEDIA_ld32', 'TRIMEDIA_ld32d',
    'TRIMEDIA_ld32r', 'TRIMEDIA_ld32x', 'TRIMEDIA_lsl',
    'TRIMEDIA_lsli', 'TRIMEDIA_lsr', 'TRIMEDIA_lsri',
    'TRIMEDIA_mergedual16lsb', 'TRIMEDIA_mergelsb',
    'TRIMEDIA_mergemsb', 'TRIMEDIA_nop', 'TRIMEDIA_null',
    'TRIMEDIA_pack16lsb', 'TRIMEDIA_pack16msb', 'TRIMEDIA_packbytes',
    'TRIMEDIA_pref', 'TRIMEDIA_pref16x', 'TRIMEDIA_pref32x',
    'TRIMEDIA_prefd', 'TRIMEDIA_prefr', 'TRIMEDIA_quadavg',
    'TRIMEDIA_quadumax', 'TRIMEDIA_quadumin', 'TRIMEDIA_quadumulmsb',
    'TRIMEDIA_rdstatus', 'TRIMEDIA_rdtag', 'TRIMEDIA_readdpc',
    'TRIMEDIA_readpcsw', 'TRIMEDIA_readspc', 'TRIMEDIA_rol',
    'TRIMEDIA_roli', 'TRIMEDIA_sex16', 'TRIMEDIA_sex8',
    'TRIMEDIA_st16', 'TRIMEDIA_st16d', 'TRIMEDIA_st32',
    'TRIMEDIA_st32d', 'TRIMEDIA_st8', 'TRIMEDIA_st8d',
    'TRIMEDIA_ubytesel', 'TRIMEDIA_uclipi', 'TRIMEDIA_uclipu',
    'TRIMEDIA_ueql', 'TRIMEDIA_ueqli', 'TRIMEDIA_ufir16',
    'TRIMEDIA_ufir8uu', 'TRIMEDIA_ufixieee', 'TRIMEDIA_ufixieeeflags',
    'TRIMEDIA_ufixrz', 'TRIMEDIA_ufixrzflags', 'TRIMEDIA_ufloat',
    'TRIMEDIA_ufloatflags', 'TRIMEDIA_ufloatrz',
    'TRIMEDIA_ufloatrzflags', 'TRIMEDIA_ugeq', 'TRIMEDIA_ugeqi',
    'TRIMEDIA_ugtr', 'TRIMEDIA_ugtri', 'TRIMEDIA_uimm',
    'TRIMEDIA_uld16', 'TRIMEDIA_uld16d', 'TRIMEDIA_uld16r',
    'TRIMEDIA_uld16x', 'TRIMEDIA_uld8', 'TRIMEDIA_uld8d',
    'TRIMEDIA_uld8r', 'TRIMEDIA_uleq', 'TRIMEDIA_uleqi',
    'TRIMEDIA_ules', 'TRIMEDIA_ulesi', 'TRIMEDIA_ume8ii',
    'TRIMEDIA_ume8uu', 'TRIMEDIA_umin', 'TRIMEDIA_umul',
    'TRIMEDIA_umulm', 'TRIMEDIA_uneq', 'TRIMEDIA_uneqi',
    'TRIMEDIA_writedpc', 'TRIMEDIA_writepcsw', 'TRIMEDIA_writespc',
    'TRIMEDIA_zex16', 'TRIMEDIA_zex8', 'TRIVERTEX', 'TTPOLYCURVE',
    'TTPOLYGONHEADER', 'TapeDriveCleanDriveNow',
    'TapeDriveHardwareError', 'TapeDriveMediaLifeExpired',
    'TapeDriveProblemNone', 'TapeDriveReadError',
    'TapeDriveReadWarning', 'TapeDriveReadWriteError',
    'TapeDriveReadWriteWarning', 'TapeDriveScsiConnectionError',
    'TapeDriveSnappedTape', 'TapeDriveTimetoClean',
    'TapeDriveUnsupportedMedia', 'TapeDriveWriteError',
    'TapeDriveWriteWarning', 'ThermalEvent', 'ThermalStandby',
    'ThreadAbsoluteCpuPriority', 'ThreadDynamicCodePolicy',
    'ThreadInformationClassMax', 'ThreadMemoryPriority',
    'ThreadPowerThrottling', 'TokenAccessInformation',
    'TokenAppContainerNumber', 'TokenAppContainerSid',
    'TokenAuditPolicy', 'TokenBnoIsolation', 'TokenCapabilities',
    'TokenChildProcessFlags', 'TokenDefaultDacl',
    'TokenDeviceClaimAttributes', 'TokenDeviceGroups',
    'TokenElevation', 'TokenElevationType',
    'TokenElevationTypeDefault', 'TokenElevationTypeFull',
    'TokenElevationTypeLimited', 'TokenGroups',
    'TokenGroupsAndPrivileges', 'TokenHasRestrictions',
    'TokenImpersonation', 'TokenImpersonationLevel',
    'TokenIntegrityLevel', 'TokenIsAppContainer',
    'TokenIsLessPrivilegedAppContainer', 'TokenIsRestricted',
    'TokenIsSandboxed', 'TokenLinkedToken', 'TokenLogonSid',
    'TokenMandatoryPolicy', 'TokenOrigin',
    'TokenOriginatingProcessTrustLevel', 'TokenOwner', 'TokenPrimary',
    'TokenPrimaryGroup', 'TokenPrivateNameSpace', 'TokenPrivileges',
    'TokenProcessTrustLevel', 'TokenRestrictedDeviceClaimAttributes',
    'TokenRestrictedDeviceGroups', 'TokenRestrictedSids',
    'TokenRestrictedUserClaimAttributes', 'TokenSandBoxInert',
    'TokenSecurityAttributes', 'TokenSessionId',
    'TokenSessionReference', 'TokenSingletonAttributes',
    'TokenSource', 'TokenStatistics', 'TokenType', 'TokenUIAccess',
    'TokenUser', 'TokenUserClaimAttributes',
    'TokenVirtualizationAllowed', 'TokenVirtualizationEnabled',
    'ToleranceHigh', 'ToleranceIntervalLong',
    'ToleranceIntervalMedium', 'ToleranceIntervalShort',
    'ToleranceLow', 'ToleranceMedium', 'TraceApplicationPowerMessage',
    'TraceApplicationPowerMessageEnd', 'TraceServicePowerMessage',
    'TransactionBasicInformation', 'TransactionBindInformation',
    'TransactionDTCPrivateInformation',
    'TransactionEnlistmentInformation',
    'TransactionManagerBasicInformation',
    'TransactionManagerLogInformation',
    'TransactionManagerLogPathInformation',
    'TransactionManagerOldestTransactionInformation',
    'TransactionManagerOnlineProbeInformation',
    'TransactionManagerRecoveryInformation',
    'TransactionOutcomeAborted', 'TransactionOutcomeCommitted',
    'TransactionOutcomeUndetermined',
    'TransactionPropertiesInformation',
    'TransactionStateCommittedNotify', 'TransactionStateIndoubt',
    'TransactionStateNormal',
    'TransactionSuperiorEnlistmentInformation', 'UCDR_MANGLED',
    'UCDR_NAME', 'UCDR_STRLIT', 'UCDR_TYPE', 'UCHAR', 'UCSCHAR',
    'UHALF_PTR', 'UILANGUAGE_ENUMPROCA', 'UILANGUAGE_ENUMPROCW',
    'UINT', 'UINT16', 'UINT32', 'UINT64', 'UINT8', 'UINT_PTR',
    'ULARGE_INTEGER', 'ULONG', 'ULONG32', 'ULONG64', 'ULONGLONG',
    'ULONG_PTR', 'UMS_CREATE_THREAD_ATTRIBUTES',
    'UMS_SCHEDULER_REASON', 'UMS_SCHEDULER_REASON__enumvalues',
    'UMS_SCHEDULER_STARTUP_INFO', 'UMS_SYSTEM_THREAD_INFORMATION',
    'UMS_THREAD_INFO_CLASS', 'UMS_THREAD_INFO_CLASS__enumvalues',
    'UNIVERSAL_NAME_INFO', 'UNIVERSAL_NAME_INFOA',
    'UNIVERSAL_NAME_INFOW', 'UNLOAD_DLL_DEBUG_INFO',
    'UNSPECIFIED_COMPARTMENT_ID', 'UNSP_adc', 'UNSP_adc_s',
    'UNSP_add', 'UNSP_add_s', 'UNSP_and', 'UNSP_and_s', 'UNSP_asr',
    'UNSP_asror', 'UNSP_break', 'UNSP_call', 'UNSP_clrb', 'UNSP_cmp',
    'UNSP_cmp_s', 'UNSP_cmpc', 'UNSP_cmpc_s', 'UNSP_divq',
    'UNSP_divs', 'UNSP_exp', 'UNSP_fiq', 'UNSP_fir_mov',
    'UNSP_fraction', 'UNSP_goto', 'UNSP_int1', 'UNSP_int2',
    'UNSP_invb', 'UNSP_irq', 'UNSP_irqnest', 'UNSP_ja', 'UNSP_jae',
    'UNSP_jb', 'UNSP_jbe', 'UNSP_je', 'UNSP_jg', 'UNSP_jge',
    'UNSP_jl', 'UNSP_jle', 'UNSP_jmi', 'UNSP_jmp', 'UNSP_jne',
    'UNSP_jpl', 'UNSP_jvc', 'UNSP_jvs', 'UNSP_last', 'UNSP_load',
    'UNSP_load_s', 'UNSP_lsl', 'UNSP_lslor', 'UNSP_lsr', 'UNSP_lsror',
    'UNSP_mulss', 'UNSP_mulus', 'UNSP_muluu', 'UNSP_neg',
    'UNSP_neg_s', 'UNSP_negc', 'UNSP_negc_s', 'UNSP_nop', 'UNSP_null',
    'UNSP_or', 'UNSP_or_s', 'UNSP_pop', 'UNSP_push', 'UNSP_retf',
    'UNSP_reti', 'UNSP_rol', 'UNSP_ror', 'UNSP_sbc', 'UNSP_sbc_s',
    'UNSP_secbank', 'UNSP_setb', 'UNSP_store', 'UNSP_store_s',
    'UNSP_sub', 'UNSP_sub_s', 'UNSP_test', 'UNSP_test_s', 'UNSP_tstb',
    'UNSP_xor', 'UNSP_xor_s', 'UNWIND_HISTORY_TABLE',
    'UNWIND_HISTORY_TABLE_ENTRY', 'UOW', 'UPDATELAYEREDWINDOWINFO',
    'USAGE_PROPERTIES', 'USEROBJECTFLAGS', 'USER_ACTIVITY_PRESENCE',
    'USER_ACTIVITY_PRESENCE__enumvalues', 'USHORT', 'USN', 'UTP_ENUM',
    'UTP_STRUCT', 'UmsSchedulerStartup', 'UmsSchedulerThreadBlocked',
    'UmsSchedulerThreadYield', 'UmsThreadAffinity',
    'UmsThreadInvalidInfoClass', 'UmsThreadIsSuspended',
    'UmsThreadIsTerminated', 'UmsThreadMaxInfoClass',
    'UmsThreadPriority', 'UmsThreadTeb', 'UmsThreadUserContext',
    'UpdateBlackBoxRecorder', 'UserNotPresent', 'UserPresence',
    'UserPresent', 'UserUnknown', 'VALENT', 'VALENTA', 'VALENTW',
    'VIDEOPARAMETERS', 'VME_LEFT_BUTTON', 'VME_MID_BUTTON',
    'VME_RIGHT_BUTTON', 'VME_UNKNOWN', 'VNT_IDENT', 'VNT_STRLIT',
    'VNT_TYPE', 'VNT_UDTMEM', 'VNT_VISIBLE', 'VS_FIXEDFILEINFO',
    'VerifyProcessorPowerPolicyAc', 'VerifyProcessorPowerPolicyDc',
    'VerifySystemPolicyAc', 'VerifySystemPolicyDc',
    'VmOfferPriorityBelowNormal', 'VmOfferPriorityLow',
    'VmOfferPriorityNormal', 'VmOfferPriorityVeryLow',
    'WAITORTIMERCALLBACK', 'WAITORTIMERCALLBACKFUNC', 'WCHAR',
    'WCRANGE', 'WELL_KNOWN_SID_TYPE', 'WGLSWAP',
    'WIN32_FILE_ATTRIBUTE_DATA', 'WIN32_FIND_DATA',
    'WIN32_FIND_DATAA', 'WIN32_FIND_DATAW', 'WIN32_FIND_STREAM_DATA',
    'WIN32_MEMORY_INFORMATION_CLASS', 'WIN32_MEMORY_RANGE_ENTRY',
    'WIN32_STREAM_ID', 'WINDOWINFO', 'WINDOWPLACEMENT', 'WINDOWPOS',
    'WINDOW_BUFFER_SIZE_RECORD', 'WINEVENTPROC', 'WINSTAENUMPROC',
    'WINSTAENUMPROCA', 'WINSTAENUMPROCW', 'WNDCLASS', 'WNDCLASSA',
    'WNDCLASSEX', 'WNDCLASSEXA', 'WNDCLASSEXW', 'WNDCLASSW',
    'WNDENUMPROC', 'WNDPROC', 'WORD', 'WORKERCALLBACKFUNC',
    'WOW64_ARCHITECTURE_INFORMATION', 'WOW64_CONTEXT',
    'WOW64_DESCRIPTOR_TABLE_ENTRY', 'WOW64_FLOATING_SAVE_AREA',
    'WOW64_LDT_ENTRY', 'WPARAM', 'WRITE_ACCESS', 'WSABUF',
    'WSACMSGHDR', 'WSACOMPLETION', 'WSACOMPLETIONTYPE',
    'WSACOMPLETIONTYPE__enumvalues', 'WSADATA', 'WSAECOMPARATOR',
    'WSAECOMPARATOR__enumvalues', 'WSAESETSERVICEOP',
    'WSAESETSERVICEOP__enumvalues', 'WSAMSG', 'WSANAMESPACE_INFO',
    'WSANAMESPACE_INFOA', 'WSANAMESPACE_INFOEX',
    'WSANAMESPACE_INFOEXA', 'WSANAMESPACE_INFOEXW',
    'WSANAMESPACE_INFOW', 'WSANETWORKEVENTS', 'WSANSCLASSINFO',
    'WSANSCLASSINFOA', 'WSANSCLASSINFOW', 'WSAPOLLFD',
    'WSAPROTOCOLCHAIN', 'WSAPROTOCOL_INFO', 'WSAPROTOCOL_INFOA',
    'WSAPROTOCOL_INFOW', 'WSAQUERYSET', 'WSAQUERYSET2',
    'WSAQUERYSET2A', 'WSAQUERYSET2W', 'WSAQUERYSETA', 'WSAQUERYSETW',
    'WSASERVICECLASSINFO', 'WSASERVICECLASSINFOA',
    'WSASERVICECLASSINFOW', 'WSAVERSION', 'WTSSESSION_NOTIFICATION',
    'WakeTimerList', 'Win32ServiceOwnProcess',
    'Win32ServiceShareProcess', 'WinAccountAdministratorSid',
    'WinAccountCertAdminsSid', 'WinAccountCloneableControllersSid',
    'WinAccountComputersSid', 'WinAccountControllersSid',
    'WinAccountDefaultSystemManagedSid', 'WinAccountDomainAdminsSid',
    'WinAccountDomainGuestsSid', 'WinAccountDomainUsersSid',
    'WinAccountEnterpriseAdminsSid',
    'WinAccountEnterpriseKeyAdminsSid', 'WinAccountGuestSid',
    'WinAccountKeyAdminsSid', 'WinAccountKrbtgtSid',
    'WinAccountPolicyAdminsSid', 'WinAccountProtectedUsersSid',
    'WinAccountRasAndIasServersSid',
    'WinAccountReadonlyControllersSid', 'WinAccountSchemaAdminsSid',
    'WinAnonymousSid', 'WinApplicationPackageAuthoritySid',
    'WinAuthenticatedUserSid',
    'WinAuthenticationAuthorityAssertedSid',
    'WinAuthenticationFreshKeyAuthSid',
    'WinAuthenticationKeyPropertyAttestationSid',
    'WinAuthenticationKeyPropertyMFASid',
    'WinAuthenticationKeyTrustSid',
    'WinAuthenticationServiceAssertedSid', 'WinBatchSid',
    'WinBuiltinAccessControlAssistanceOperatorsSid',
    'WinBuiltinAccountOperatorsSid', 'WinBuiltinAdministratorsSid',
    'WinBuiltinAnyPackageSid', 'WinBuiltinAuthorizationAccessSid',
    'WinBuiltinBackupOperatorsSid',
    'WinBuiltinCertSvcDComAccessGroup',
    'WinBuiltinCryptoOperatorsSid', 'WinBuiltinDCOMUsersSid',
    'WinBuiltinDefaultSystemManagedGroupSid',
    'WinBuiltinDeviceOwnersSid', 'WinBuiltinDomainSid',
    'WinBuiltinEventLogReadersGroup', 'WinBuiltinGuestsSid',
    'WinBuiltinHyperVAdminsSid', 'WinBuiltinIUsersSid',
    'WinBuiltinIncomingForestTrustBuildersSid',
    'WinBuiltinNetworkConfigurationOperatorsSid',
    'WinBuiltinPerfLoggingUsersSid',
    'WinBuiltinPerfMonitoringUsersSid', 'WinBuiltinPowerUsersSid',
    'WinBuiltinPreWindows2000CompatibleAccessSid',
    'WinBuiltinPrintOperatorsSid', 'WinBuiltinRDSEndpointServersSid',
    'WinBuiltinRDSManagementServersSid',
    'WinBuiltinRDSRemoteAccessServersSid',
    'WinBuiltinRemoteDesktopUsersSid',
    'WinBuiltinRemoteManagementUsersSid', 'WinBuiltinReplicatorSid',
    'WinBuiltinStorageReplicaAdminsSid',
    'WinBuiltinSystemOperatorsSid',
    'WinBuiltinTerminalServerLicenseServersSid', 'WinBuiltinUsersSid',
    'WinCacheablePrincipalsGroupSid', 'WinCapabilityAppointmentsSid',
    'WinCapabilityContactsSid', 'WinCapabilityDocumentsLibrarySid',
    'WinCapabilityEnterpriseAuthenticationSid',
    'WinCapabilityInternetClientServerSid',
    'WinCapabilityInternetClientSid', 'WinCapabilityMusicLibrarySid',
    'WinCapabilityPicturesLibrarySid',
    'WinCapabilityPrivateNetworkClientServerSid',
    'WinCapabilityRemovableStorageSid',
    'WinCapabilitySharedUserCertificatesSid',
    'WinCapabilityVideosLibrarySid', 'WinConsoleLogonSid',
    'WinCreatorGroupServerSid', 'WinCreatorGroupSid',
    'WinCreatorOwnerRightsSid', 'WinCreatorOwnerServerSid',
    'WinCreatorOwnerSid', 'WinDialupSid',
    'WinDigestAuthenticationSid', 'WinEnterpriseControllersSid',
    'WinEnterpriseReadonlyControllersSid', 'WinHighLabelSid',
    'WinIUserSid', 'WinInteractiveSid',
    'WinLocalAccountAndAdministratorSid', 'WinLocalAccountSid',
    'WinLocalLogonSid', 'WinLocalServiceSid', 'WinLocalSid',
    'WinLocalSystemSid', 'WinLogonIdsSid', 'WinLowLabelSid',
    'WinMediumLabelSid', 'WinMediumPlusLabelSid',
    'WinNTLMAuthenticationSid', 'WinNetworkServiceSid',
    'WinNetworkSid', 'WinNewEnterpriseReadonlyControllersSid',
    'WinNonCacheablePrincipalsGroupSid', 'WinNtAuthoritySid',
    'WinNullSid', 'WinOtherOrganizationSid', 'WinProxySid',
    'WinRemoteLogonIdSid', 'WinRestrictedCodeSid',
    'WinSChannelAuthenticationSid', 'WinSelfSid', 'WinServiceSid',
    'WinSystemLabelSid', 'WinTerminalServerSid',
    'WinThisOrganizationCertificateSid', 'WinThisOrganizationSid',
    'WinUntrustedLabelSid', 'WinUserModeDriversSid', 'WinWorldSid',
    'WinWriteRestrictedCodeSid', 'XFORM', 'XMM_SAVE_AREA32',
    'XSAVE_AREA', 'XSAVE_AREA_HEADER', 'XSAVE_CET_U_FORMAT',
    'XSAVE_FORMAT', 'XSTATE_CONFIGURATION', 'XSTATE_CONTEXT',
    'XSTATE_FEATURE', 'XTENSA_abs', 'XTENSA_add', 'XTENSA_addi',
    'XTENSA_addmi', 'XTENSA_addx2', 'XTENSA_addx4', 'XTENSA_addx8',
    'XTENSA_and', 'XTENSA_ball', 'XTENSA_bany', 'XTENSA_bbc',
    'XTENSA_bbci', 'XTENSA_bbs', 'XTENSA_bbsi', 'XTENSA_beq',
    'XTENSA_beqi', 'XTENSA_beqz', 'XTENSA_bge', 'XTENSA_bgei',
    'XTENSA_bgeu', 'XTENSA_bgeui', 'XTENSA_bgez', 'XTENSA_blt',
    'XTENSA_blti', 'XTENSA_bltu', 'XTENSA_bltui', 'XTENSA_bltz',
    'XTENSA_bnall', 'XTENSA_bne', 'XTENSA_bnei', 'XTENSA_bnez',
    'XTENSA_bnone', 'XTENSA_break', 'XTENSA_call0', 'XTENSA_call12',
    'XTENSA_call4', 'XTENSA_call8', 'XTENSA_callx0', 'XTENSA_callx12',
    'XTENSA_callx4', 'XTENSA_callx8', 'XTENSA_dsync', 'XTENSA_entry',
    'XTENSA_esync', 'XTENSA_excw', 'XTENSA_extui', 'XTENSA_extw',
    'XTENSA_isync', 'XTENSA_j', 'XTENSA_jx', 'XTENSA_l16si',
    'XTENSA_l16ui', 'XTENSA_l32i', 'XTENSA_l32r', 'XTENSA_l8ui',
    'XTENSA_last', 'XTENSA_loop', 'XTENSA_loopgtz', 'XTENSA_loopnez',
    'XTENSA_lsi', 'XTENSA_lsx', 'XTENSA_max', 'XTENSA_maxu',
    'XTENSA_memw', 'XTENSA_min', 'XTENSA_minu', 'XTENSA_mov',
    'XTENSA_moveqz', 'XTENSA_movgez', 'XTENSA_movi', 'XTENSA_movltz',
    'XTENSA_movnez', 'XTENSA_mul16s', 'XTENSA_mul16u', 'XTENSA_mull',
    'XTENSA_neg', 'XTENSA_nop', 'XTENSA_nsa', 'XTENSA_nsau',
    'XTENSA_null', 'XTENSA_or', 'XTENSA_ret', 'XTENSA_retw',
    'XTENSA_rfe', 'XTENSA_rfi', 'XTENSA_rsil', 'XTENSA_rsr',
    'XTENSA_rsync', 'XTENSA_s16i', 'XTENSA_s32i', 'XTENSA_s32ri',
    'XTENSA_s8i', 'XTENSA_sext', 'XTENSA_sll', 'XTENSA_slli',
    'XTENSA_sra', 'XTENSA_srai', 'XTENSA_src', 'XTENSA_srl',
    'XTENSA_srli', 'XTENSA_ssa8b', 'XTENSA_ssa8l', 'XTENSA_ssai',
    'XTENSA_ssl', 'XTENSA_ssr', 'XTENSA_sub', 'XTENSA_subx2',
    'XTENSA_subx4', 'XTENSA_subx8', 'XTENSA_waiti', 'XTENSA_wdtlb',
    'XTENSA_witlb', 'XTENSA_wsr', 'XTENSA_xor', 'XTENSA_xsr',
    'Z80_adc', 'Z80_adcw', 'Z80_add', 'Z80_addw', 'Z80_and',
    'Z80_andw', 'Z80_bit', 'Z80_btest', 'Z80_call', 'Z80_calr',
    'Z80_ccf', 'Z80_cp', 'Z80_cpd', 'Z80_cpdr', 'Z80_cpi', 'Z80_cpir',
    'Z80_cpl', 'Z80_cplw', 'Z80_cpw', 'Z80_ddir', 'Z80_dec', 'Z80_di',
    'Z80_divuw', 'Z80_djnz', 'Z80_ei', 'Z80_ex', 'Z80_exall',
    'Z80_exts', 'Z80_extsw', 'Z80_exx', 'Z80_exxx', 'Z80_exxy',
    'Z80_halt', 'Z80_im', 'Z80_in', 'Z80_in0', 'Z80_ina', 'Z80_inaw',
    'Z80_inc', 'Z80_ind', 'Z80_indr', 'Z80_indrw', 'Z80_indw',
    'Z80_ini', 'Z80_inir', 'Z80_inirw', 'Z80_iniw', 'Z80_inp',
    'Z80_inw', 'Z80_jp', 'Z80_jr', 'Z80_ld', 'Z80_ldctl', 'Z80_ldd',
    'Z80_lddr', 'Z80_lddrw', 'Z80_lddw', 'Z80_ldi', 'Z80_ldir',
    'Z80_ldirw', 'Z80_ldiw', 'Z80_ldw', 'Z80_mlt', 'Z80_mtest',
    'Z80_multuw', 'Z80_multw', 'Z80_neg', 'Z80_negw', 'Z80_or',
    'Z80_orw', 'Z80_otdm', 'Z80_otdmr', 'Z80_otdr', 'Z80_otdrw',
    'Z80_otim', 'Z80_otimr', 'Z80_otir', 'Z80_otirw', 'Z80_out',
    'Z80_out0', 'Z80_outa', 'Z80_outaw', 'Z80_outd', 'Z80_outdw',
    'Z80_outi', 'Z80_outiw', 'Z80_outp', 'Z80_outw', 'Z80_pop',
    'Z80_push', 'Z80_res', 'Z80_resc', 'Z80_ret', 'Z80_reti',
    'Z80_retn', 'Z80_rl', 'Z80_rla', 'Z80_rlc', 'Z80_rlca',
    'Z80_rlcw', 'Z80_rld', 'Z80_rlw', 'Z80_rr', 'Z80_rra', 'Z80_rrc',
    'Z80_rrca', 'Z80_rrcw', 'Z80_rrd', 'Z80_rrw', 'Z80_sbc',
    'Z80_sbcw', 'Z80_scf', 'Z80_set', 'Z80_setc', 'Z80_sla',
    'Z80_slaw', 'Z80_slp', 'Z80_sra', 'Z80_sraw', 'Z80_srl',
    'Z80_srlw', 'Z80_srr', 'Z80_sub', 'Z80_subw', 'Z80_swap',
    'Z80_tst', 'Z80_tstio', 'Z80_xor', 'Z80_xorw', 'Z8_adc', 'Z8_add',
    'Z8_and', 'Z8_call', 'Z8_ccf', 'Z8_clr', 'Z8_com', 'Z8_cp',
    'Z8_da', 'Z8_dec', 'Z8_decw', 'Z8_di', 'Z8_djnz', 'Z8_ei',
    'Z8_halt', 'Z8_inc', 'Z8_incw', 'Z8_iret', 'Z8_jp', 'Z8_jpcond',
    'Z8_jr', 'Z8_jrcond', 'Z8_last', 'Z8_ld', 'Z8_ldc', 'Z8_ldci',
    'Z8_lde', 'Z8_ldei', 'Z8_nop', 'Z8_null', 'Z8_or', 'Z8_pop',
    'Z8_push', 'Z8_rcf', 'Z8_ret', 'Z8_rl', 'Z8_rlc', 'Z8_rr',
    'Z8_rrc', 'Z8_sbc', 'Z8_scf', 'Z8_sra', 'Z8_srp', 'Z8_stop',
    'Z8_sub', 'Z8_swap', 'Z8_tcm', 'Z8_tm', 'Z8_wdh', 'Z8_wdt',
    'Z8_xor', '_05A6FE89FC294D987691F3CCEA570D81',
    '_07DD72C5C6FD4DF77ADB3AE4C3F346E8',
    '_0F4B5B224EF598EAC96C9D985A235D75',
    '_1038787612D6366BC2D035975A173DB8',
    '_148E8382801E6E2B1DBEAAD1500679EF',
    '_16C8DC2CFBF0AAC0932308A6C493011C',
    '_16DB410077B9C880BC0DBFDD6BC1DE27',
    '_1C028A4CD0C7B57357247010273269CB',
    '_1C570C147E8FD4E17AEC961E98942760',
    '_1DAB1DE771FB1F3D524D5CA7A3A423C5',
    '_1E3911DAF3A698F9E9678E651B612671',
    '_221F7DF9B1AB1F591FA2F298ADACB592',
    '_223DCB884574D5DE586AD2D6B7376847',
    '_22625691FD6E331CB9270B94477ECC85',
    '_23323E8D0E36F5183F546A73BEF3AA0F',
    '_246AA8CB468DD99C5C77ABEC7AED7257',
    '_28B773E1B8BE2E4EF6096F078CBAE501',
    '_28F56E9CE247C373C820ED5BC94460F2',
    '_2B42920CFE7D5F7B46449B0399BA2C05',
    '_2C0E99206E7908236DCABCB2B91A8D4F',
    '_2C93FDADBFB653BF4322BBCDC7CB0EE1',
    '_32AE0FC8A9D5CBD75CD8A50945F15FCA',
    '_32B6B66086532CD0BDAD8C0DB37B9942',
    '_348C6D6B4F9D7A80DE44C8FF011E20CA',
    '_3533B0089D1D34165233288F4301A5ED',
    '_35D9E31152E82F0DC4ACD195DE0FABB8',
    '_399A7FCDD38BA7F71B3EB8BA6F845075',
    '_3E426F96F68C120BD73661AAC99B228D',
    '_3FDFCB95F2753C79F6E41FB03999C998',
    '_4128853ACAA9BBDE95E7DB551EADDCD7',
    '_49804ECC545513722F7C143297BF37DB',
    '_5021FBEADDAE60134152517C8896D9FD',
    '_5180D2431AAA58F02F49DC28AEB2105D',
    '_5290CBBFB2D2F51A8E6306549769C310',
    '_52B47B3014E6D78C5675739022A393A4',
    '_59DFB1CB44B512208DC0D7E0FF4E723C',
    '_5AB30559351E7209272A12F5E44EDFCF',
    '_5B6463B381419A9B06110325DC6B6ED4',
    '_5D571C3E1F56A75D00027C63749DCB4C',
    '_5D98514AD4CB29C17D57D9341C7849E3',
    '_5DC973CEB2655A80446E64E85C580C7E',
    '_5F65BF975D82F63B4958868192FF52AB',
    '_620535340E4C71C89198F40493D5015B',
    '_639195EAA19AF7270991831C59DF6BBF',
    '_653E9C544EBAD1C578F1C3EA01A7EA50',
    '_69915A3241C829CBB6DA5B9EFF11997D',
    '_6CCEADC9C9AFEEC6AD966E8EE72B4AF1',
    '_6D0139603382ADA21D037DA823D2B357',
    '_6FF5CD92DCE62DB0AD5B6A8B5D740018',
    '_6FFF11F2835D0DC88B7A63E751D57F89',
    '_7014156F94AE1B7FC5F5E3560392A8C4',
    '_74CFF1AF804620B8170C44E80113F2BA',
    '_7592DA0097C3AE8561024DD32DB398BF',
    '_7A05C346C9B31AF43F590BC77E2CFA64',
    '_7D2E628AE302D35528CA806CA05E5F16',
    '_7D923C96B6ADB4017E6ABB607A3ACE94',
    '_7DEE59BDA5505BA79906AD1B11AD5B46',
    '_7F86040BB27194B4B6B6A2B46CC5F6D4',
    '_843ED0767DD041B1C1206079A348FC2D',
    '_8F08DA40ECF14D480DBE0EC84D31330E',
    '_9181CA8ACBCDBAA965F884E226B6B56B',
    '_92EA8805FA07D2A0B477D6A4D4C889CA',
    '_94774701A62EC69B1B7643AC725F5DF9',
    '_9495053A46892065888CD0D59D9ABC73',
    '_94A42225DA7B79B57C74D8E69075BD91',
    '_94D4D585A38CDA12BD4A7F760DAFD340',
    '_9AD262722AB1BD11DCBD94EE84EF9EE0',
    '_9F179BD796548CF53E626457CEE0248F',
    '_9FAA1159FEB73E1F987165FCF7559316',
    '_A2D27DEC506196B2AFD43577ED2E1BBE',
    '_A2DB697AD6D9D37E30232284EFAA35E7',
    '_A32948CF266C727D9CC1D79F2B35CC28',
    '_A733A7B66D85F1BCB3C320081B86070A', '_ACCESS_REASON_TYPE',
    '_ACL_INFORMATION_CLASS', '_ACTIVATION_CONTEXT_INFO_CLASS',
    '_AF4ED28A64411848F4EED41572FA4CE1',
    '_AF91462B75AFE921B3530C2E678F17DE', '_AUDIT_EVENT_TYPE',
    '_B4F266B0568ADA5794EA29B6B9D8A3FE',
    '_B52219EC9FEEEB7613BA56E0CE8F1794',
    '_B5CB1DE07648BCF4F03AB285F94FB747',
    '_B5ECD8C1988DEF842E63B55FB8BE92FB',
    '_BC5D78B1122B948293185BB24923F2AB',
    '_C1D2E47DA2E2EAC5B98337296A36150C',
    '_C30EB94D24F7ADA96604ED228E11FEED',
    '_C46A069ECCBAC5339B2B9C1238DA1DE1',
    '_C68056E0A34E65469B9AC9E5B5190DBB',
    '_C7C212E52085C0E483DB7F2B4EDAB218',
    '_C85ED03CB25EDB5A1C1E15779164BD61',
    '_C9E14A82B8291B557AC92E2F5A452CE5',
    '_CCE2416F380A82F561A09BADF43CB67B',
    '_CE7E32CC3E1379FDB2C7D74087D653D3', '_CM_ERROR_CONTROL_TYPE',
    '_CM_SERVICE_LOAD_TYPE', '_CM_SERVICE_NODE_TYPE',
    '_COMPUTER_NAME_FORMAT', '_COPYFILE2_COPY_PHASE',
    '_COPYFILE2_MESSAGE_ACTION', '_COPYFILE2_MESSAGE_TYPE',
    '_CPU_SET_INFORMATION_TYPE', '_CRT_ALLOC_HOOK',
    '_CRT_DUMP_CLIENT', '_CRT_REPORT_HOOK', '_CRT_REPORT_HOOKW',
    '_CoreCrtNonSecureSearchSortCompareFunction',
    '_CoreCrtSecureSearchSortCompareFunction',
    '_D022F3AE4E10DBCEA33F2A52E330D46E',
    '_D36E12C1735F187932BE64E09404B8E3',
    '_D56FBCFBBCE5EB183B3B7533D8D23EB1',
    '_D5FD35C4853277703E798CDE70CE5D9D',
    '_D65593A1337DD8579B558648E0CA47AC',
    '_D85C7057457CDA45599059B9A17E4B84',
    '_D8A63F76A72CA95C9ABF1913B4CBA647',
    '_D932C311951F178400A52260A746C74E',
    '_DA0AE4BD8D2DD7986E2E969647424E53', '_DEP_SYSTEM_POLICY_TYPE',
    '_DEVICE_POWER_STATE', '_DISPLAYCONFIG_COLOR_ENCODING',
    '_E0BD59A46085D913189C6FE64651B19C',
    '_E2B20928BFB82BAF3AD0622BAF5EB89D',
    '_E4383C1113FD321CF432D1650C4C916C',
    '_E48B04531105C4BF04A8F99B593AFF02',
    '_E8B3A4BD16D91BFD04BCF73BD6E0E61A',
    '_E937256249A7FF14986945CD2F539EE0',
    '_E97FFAC4D53CD96D3B8FD35DF59ADA29',
    '_EB3E0D64FD1E2D25F11CBF2CB3D02109',
    '_EB483C165D7C646D3CFBB5521698A1AE',
    '_EBA1F6A8D2DCA7438A99E71F042CF31F',
    '_EDE12DD9CAD2C3BA38E6D4F45B165FDD',
    '_EE06435D791A7D0585A3F5F131982D64',
    '_EF63A35B22AA948F6F3465FEB80D5317',
    '_ENLISTMENT_INFORMATION_CLASS', '_EXCEPTION_DISPOSITION',
    '_F0E7DCDA850A951FAF4B95795C1FC42C',
    '_F151272271FBC1A81AF87B26B979979C',
    '_F38E503CBA2F570685D3BDA361855189',
    '_F5551018EF9FF3302B1F558B75822FB9',
    '_FAE2C21797B3ADDF1CCA604739912F24',
    '_FB1089CAE9F05A3C04D5DA9681E20324',
    '_FB4308188CC61379A47AE39CE7E9E56B',
    '_FFCAA51FE472A9B5C2FD486DFC769AD3',
    '_FFE4F2BE2353311DBA8192D1D977A912', '_FILE_ID_TYPE',
    '_FILE_INFO_BY_HANDLE_CLASS', '_FINDEX_INFO_LEVELS',
    '_FINDEX_SEARCH_OPS', '_FIRMWARE_TYPE', '_Functor',
    '_GET_FILEEX_INFO_LEVELS', '_HARDWARE_COUNTER_TYPE', '_HEAPINFO',
    '_HEAP_INFORMATION_CLASS', '_HFILE', '_HIBERFILE_BUCKET_SIZE',
    '_IMAGE_POLICY_ENTRY_TYPE', '_IMAGE_POLICY_ID',
    '_JOBOBJECTINFOCLASS', '_JOBOBJECT_RATE_CONTROL_TOLERANCE',
    '_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL', '_KTMOBJECT_TYPE',
    '_LOGICAL_PROCESSOR_RELATIONSHIP', '_Left', '_MANDATORY_LEVEL',
    '_MEMORY_RESOURCE_NOTIFICATION_TYPE', '_MONITOR_DISPLAY_STATE',
    '_NORM_FORM', '_Noinit', '_OS_DEPLOYEMENT_STATE_VALUES',
    '_PIMAGE_RUNTIME_FUNCTION_ENTRY', '_PMTUD_STATE',
    '_POWER_MONITOR_REQUEST_TYPE', '_POWER_PLATFORM_ROLE',
    '_POWER_REQUEST_TYPE', '_PRIORITY_HINT', '_PROCESSOR_CACHE_TYPE',
    '_PROCESS_INFORMATION_CLASS', '_PROCESS_MEMORY_EXHAUSTION_TYPE',
    '_PROCESS_MITIGATION_POLICY', '_PROC_THREAD_ATTRIBUTE_NUM',
    '_Pmd_object', '_Pmd_pointer', '_Pmd_refwrap', '_Pmf_object',
    '_Pmf_pointer', '_Pmf_refwrap',
    '_READ_DIRECTORY_NOTIFY_INFORMATION_CLASS',
    '_RESOURCEMANAGER_INFORMATION_CLASS', '_RTL_UMS_SCHEDULER_REASON',
    '_RTL_UMS_THREAD_INFO_CLASS', '_Right', '_SC_ACTION_TYPE',
    '_SC_ENUM_TYPE', '_SC_EVENT_TYPE', '_SC_STATUS_TYPE',
    '_SECURITY_IMPERSONATION_LEVEL', '_SERVERSILO_STATE',
    '_SE_IMAGE_SIGNATURE_TYPE', '_SE_LEARNING_MODE_DATA_TYPE',
    '_SID_NAME_USE', '_STREAM_INFO_LEVELS', '_SYSTEM_POWER_STATE',
    '_SharedVirtualDiskHandleState', '_SharedVirtualDiskSupportType',
    '_TAPE_DRIVE_PROBLEM_TYPE', '_THREAD_INFORMATION_CLASS',
    '_TOKEN_ELEVATION_TYPE', '_TOKEN_INFORMATION_CLASS',
    '_TOKEN_TYPE', '_TP_CALLBACK_PRIORITY',
    '_TRANSACTIONMANAGER_INFORMATION_CLASS',
    '_TRANSACTION_INFORMATION_CLASS', '_TRANSACTION_OUTCOME',
    '_TRANSACTION_STATE', '_USER_ACTIVITY_PRESENCE', '_Unused',
    '_WSACOMPLETIONTYPE', '_WSAESETSERVICEOP', '_WSAEcomparator',
    '_Wint_t', '__C_ASSERT__', '__ISA_AVAILABLE_ARMNT',
    '__ISA_AVAILABLE_AVX', '__ISA_AVAILABLE_AVX2',
    '__ISA_AVAILABLE_AVX512', '__ISA_AVAILABLE_ENFSTRG',
    '__ISA_AVAILABLE_NEON', '__ISA_AVAILABLE_NEON_ARM64',
    '__ISA_AVAILABLE_SSE2', '__ISA_AVAILABLE_SSE42',
    '__ISA_AVAILABLE_X86', '__crt_bool', '__time32_t', '__time64_t',
    '__vcrt_bool', '_dev_t', '_fsize_t', '_ino_t',
    '_invalid_parameter_handler', '_locale_t', '_off_t', '_onexit_t',
    '_purecall_handler', '_qstring_char___const_iterator',
    '_qstring_char___iterator',
    '_qstring_unsigned_char___const_iterator',
    '_qstring_unsigned_char___iterator',
    '_qstring_wchar_t___const_iterator',
    '_qstring_wchar_t___iterator', '_se_translator_function',
    '_source_file_iterator', '_source_item_iterator', 'abs_no',
    'abs_t', 'abs_unk', 'abs_yes', 'access_type_t',
    'action_activation_ctx_t', 'action_attr_t', 'action_state_t',
    'action_update_ctx_t', 'adding_segm', 'adiff_t', 'aflags_t',
    'allsegs_moved', 'argloc_t__biggest_t', 'argloc_type_t',
    'arglocs_t', 'argpartvec_t', 'argreg_policy_t',
    'array_of_intmap_t', 'array_of_intvec_t', 'array_of_node_set_t',
    'array_of_rangesets', 'asize_t', 'atype_t', 'auto_empty',
    'auto_empty_finally',
    'backward_flow_iterator_t_State__Ctrl___visited_t',
    'backward_flow_iterator_t_no_regs_t__simple_bfi_t___waiting_t',
    'base_packet_id_last', 'base_packet_id_t', 'beep_default',
    'beep_t', 'bgcolor_t', 'blob_idx_t', 'bmask_t',
    'bookmark_changed', 'boolvec_t', 'bpt_constptr_vec_t',
    'bpt_loctype_t', 'bpt_vec_t', 'bpteas_t', 'bptptr_vec_t',
    'bpttype_t', 'bte_t', 'byte_patched', 'callee_addr_changed',
    'casevec_t', 'catchvec_t', 'cb_id', 'changing_cmt',
    'changing_enum_bf', 'changing_enum_cmt', 'changing_op_ti',
    'changing_op_type', 'changing_range_cmt', 'changing_segm_class',
    'changing_segm_end', 'changing_segm_name', 'changing_segm_start',
    'changing_struc_align', 'changing_struc_cmt',
    'changing_struc_member', 'changing_ti', 'channel_redirs_t',
    'choose_type_t', 'chooser_base_t__cbres_t', 'chtype_entry',
    'chtype_enum', 'chtype_enum_by_value',
    'chtype_enum_by_value_and_size', 'chtype_func', 'chtype_generic',
    'chtype_idasgn', 'chtype_idatil', 'chtype_name', 'chtype_segm',
    'chtype_srcp', 'chtype_stkvar_xref', 'chtype_strpath',
    'chtype_struc', 'chtype_xref',
    'client_handlers_list_t__storage_t', 'cliopt_handler_t',
    'cliopt_poly_handler_t', 'cliopts_t__usage_printer_t', 'clock_t',
    'closebase', 'cm_t', 'cmt_changed', 'color_t', 'comp_t',
    'compiled_binpat_vec_t', 'compiler_changed', 'compvec_t',
    'const_t', 'cref_t', 'custom_viewer_handler_id_t', 'dbg_bpt',
    'dbg_bpt_changed', 'dbg_event_code_t', 'dbg_exception',
    'dbg_finished_loading_bpts', 'dbg_information', 'dbg_last',
    'dbg_library_load', 'dbg_library_unload', 'dbg_notification_t',
    'dbg_null', 'dbg_process_attach', 'dbg_process_detach',
    'dbg_process_exit', 'dbg_process_start', 'dbg_request_error',
    'dbg_run_to', 'dbg_started_loading_bpts', 'dbg_step_into',
    'dbg_step_over', 'dbg_step_until_ret', 'dbg_suspend_process',
    'dbg_thread_exit', 'dbg_thread_start', 'dbg_trace',
    'dbgevt_vec_t', 'dbt_cancel', 'dbt_no', 'dbt_yes',
    'debug_name_how_t', 'debugger_t__event_t', 'deleting_enum',
    'deleting_enum_member', 'deleting_func', 'deleting_func_tail',
    'deleting_segm', 'deleting_struc', 'deleting_struc_member',
    'deleting_tryblks', 'demreq_type_t', 'denorm_absent',
    'denorm_indeterminate', 'denorm_present', 'destroyed_items',
    'determined_main', 'dev_t', 'diffpos_t', 'direntry_vec_t',
    'diridx_t', 'dirtree_cursor_vec_t', 'dirtree_id_t',
    'dirtree_link', 'dirtree_mkdir', 'dirtree_move', 'dirtree_rank',
    'dirtree_rmdir', 'dirtree_rminode', 'dirtree_segm_moved',
    'dirvec_t', 'div_t', 'dk_addr_names', 'dk_addr_text', 'dk_float',
    'dk_int', 'double_t', 'dr_I', 'dr_O', 'dr_R', 'dr_S', 'dr_T',
    'dr_U', 'dr_W', 'drc_t', 'dref_t', 'dterr_t',
    'dynamic_register_set_t__const_char_vec_t', 'eNI', 'ea64_t',
    'ea_name_vec_t', 'ea_t', 'eavec_t', 'edge_back', 'edge_cross',
    'edge_error', 'edge_forward', 'edge_subgraph', 'edge_tree',
    'edge_type_t', 'edgevec_t', 'encoder_t__notify_recerr_t',
    'enum_bf_changed', 'enum_cmt_changed', 'enum_created',
    'enum_deleted', 'enum_flag_changed', 'enum_member_created',
    'enum_member_deleted', 'enum_member_vec_t',
    'enum_ordinal_changed', 'enum_renamed', 'enum_t',
    'enum_width_changed', 'errno_t', 'error_t', 'ev_add_cref',
    'ev_add_dref', 'ev_adjust_argloc', 'ev_adjust_libfunc_ea',
    'ev_adjust_refinfo', 'ev_ana_insn', 'ev_analyze_prolog',
    'ev_appcall', 'ev_arch_changed', 'ev_arg_addrs_ready',
    'ev_asm_installed', 'ev_assemble', 'ev_attach_process',
    'ev_auto_queue_empty', 'ev_bin_search', 'ev_borland_template',
    'ev_broadcast', 'ev_calc_arglocs', 'ev_calc_cdecl_purged_bytes',
    'ev_calc_next_eas', 'ev_calc_purged_bytes', 'ev_calc_retloc',
    'ev_calc_spdelta', 'ev_calc_step_over', 'ev_calc_switch_cases',
    'ev_calc_varglocs', 'ev_calcrel', 'ev_can_have_type',
    'ev_check_bpt', 'ev_clean_tbit', 'ev_cleanup_appcall',
    'ev_clear_borland_template_node', 'ev_close_file',
    'ev_cmp_operands', 'ev_coagulate', 'ev_coagulate_dref',
    'ev_create_flat_group', 'ev_create_func_frame',
    'ev_create_merge_handlers', 'ev_create_switch_xrefs',
    'ev_creating_segm', 'ev_dbg_enable_trace', 'ev_dbgtools_path',
    'ev_decorate_name', 'ev_del_cref', 'ev_del_dref',
    'ev_del_ret_target', 'ev_delay_slot_insn', 'ev_demangle_name',
    'ev_detach_process', 'ev_emu_insn', 'ev_endbinary',
    'ev_ending_undo', 'ev_equal_reglocs', 'ev_eval_lowcnd',
    'ev_exit_process', 'ev_extract_address', 'ev_find_op_value',
    'ev_find_reg_value', 'ev_func_bounds', 'ev_gen_asm_or_lst',
    'ev_gen_map_file', 'ev_gen_regvar_def', 'ev_gen_src_file_lnnum',
    'ev_gen_stkvar_def', 'ev_get_abi_info', 'ev_get_autocmt',
    'ev_get_bg_color', 'ev_get_borland_template_node',
    'ev_get_cc_regs', 'ev_get_code16_mode', 'ev_get_dbr_opnum',
    'ev_get_debapp_attrs', 'ev_get_debmod_extensions',
    'ev_get_debug_event', 'ev_get_default_enum_size',
    'ev_get_frame_retsize', 'ev_get_idd_opinfo', 'ev_get_idpflags',
    'ev_get_macro_insn_head', 'ev_get_memory_info',
    'ev_get_operand_string', 'ev_get_processes', 'ev_get_procmod',
    'ev_get_reg_accesses', 'ev_get_reg_info', 'ev_get_reg_name',
    'ev_get_ret_target', 'ev_get_segval', 'ev_get_simd_types',
    'ev_get_srcinfo_path', 'ev_get_stkarg_area_info',
    'ev_get_stkvar_scale_factor', 'ev_getreg', 'ev_init',
    'ev_init_debugger', 'ev_insn_reads_tbit', 'ev_is_align_insn',
    'ev_is_alloca_probe', 'ev_is_basic_block_end', 'ev_is_call_insn',
    'ev_is_cond_insn', 'ev_is_control_flow_guard', 'ev_is_far_jump',
    'ev_is_get_pc_thunk', 'ev_is_indirect_jump',
    'ev_is_insn_table_jump', 'ev_is_jump_func', 'ev_is_ret_insn',
    'ev_is_sane_insn', 'ev_is_sp_based', 'ev_is_switch',
    'ev_is_tracing_enabled', 'ev_last_cb_before_debugger',
    'ev_last_cb_before_loader', 'ev_last_cb_before_type_callbacks',
    'ev_loader', 'ev_loader_elf_machine', 'ev_lower_func_type',
    'ev_map_address', 'ev_max_ptr_size', 'ev_may_be_func',
    'ev_may_show_sreg', 'ev_moving_segm', 'ev_newasm', 'ev_newbinary',
    'ev_newfile', 'ev_newprc', 'ev_next_exec_insn', 'ev_obsolete1',
    'ev_obsolete2', 'ev_oldfile', 'ev_open_file', 'ev_out_assumes',
    'ev_out_data', 'ev_out_footer', 'ev_out_header', 'ev_out_insn',
    'ev_out_label', 'ev_out_mnem', 'ev_out_operand', 'ev_out_segend',
    'ev_out_segstart', 'ev_out_special_item', 'ev_privrange_changed',
    'ev_prolog_analyzed', 'ev_read_file', 'ev_read_memory',
    'ev_read_registers', 'ev_realcvt', 'ev_rebase_if_required_to',
    'ev_rename', 'ev_replaying_undo', 'ev_request_pause',
    'ev_restore_pushinfo', 'ev_resume', 'ev_rexec',
    'ev_save_pushinfo', 'ev_send_ioctl', 'ev_set_code16_mode',
    'ev_set_difbase', 'ev_set_exception_info', 'ev_set_idp_options',
    'ev_set_proc_options', 'ev_set_resume_mode', 'ev_set_ret_target',
    'ev_setup_til', 'ev_start_process', 'ev_str2reg', 'ev_suspended',
    'ev_term', 'ev_term_debugger', 'ev_thread_continue',
    'ev_thread_get_sreg_base', 'ev_thread_suspend',
    'ev_treat_hindering_item', 'ev_undefine', 'ev_update_bpts',
    'ev_update_call_stack', 'ev_update_lowcnds', 'ev_use_arg_types',
    'ev_use_regarg_type', 'ev_use_stkarg_type',
    'ev_validate_flirt_func', 'ev_verify_epilog',
    'ev_verify_noreturn', 'ev_verify_sp', 'ev_vxd_loaded',
    'ev_write_file', 'ev_write_memory', 'ev_write_register',
    'event_id_t', 'excvec_t', 'expanding_struc',
    'external_colorizers_t', 'external_ident_colorizers_t',
    'extlang_changed', 'extlang_object_t', 'extlangs_t',
    'extra_cmt_changed', 'f_AIXAR', 'f_AOUT', 'f_AR', 'f_BIN',
    'f_COFF', 'f_COM', 'f_COM_old', 'f_DRV', 'f_ELF', 'f_EXE',
    'f_EXE_old', 'f_HEX', 'f_LE', 'f_LOADER', 'f_LX', 'f_MACHO',
    'f_MEX', 'f_NLM', 'f_OMF', 'f_OMFLIB', 'f_PE', 'f_PRC',
    'f_PSXOBJ', 'f_SREC', 'f_W32RUN', 'f_WIN', 'f_ZIP',
    'fc_block_type_t', 'fcb_cndret', 'fcb_enoret', 'fcb_error',
    'fcb_extern', 'fcb_indjump', 'fcb_noret', 'fcb_normal', 'fcb_ret',
    'file_janitor_t', 'filetype_t', 'find_extlang_kind_t',
    'fixup_type_t', 'fixups_t', 'fl_CF', 'fl_CN', 'fl_F', 'fl_JF',
    'fl_JN', 'fl_U', 'fl_USobsolete', 'flags_t', 'float_t',
    'flow_chart_created', 'form_actions_t__dlgbtn_t',
    'format_functype_t', 'fpos_t', 'fpvalue_error_t',
    'fpvalue_kind_t', 'fr_add', 'fr_add2', 'fr_addc', 'fr_addn',
    'fr_addn2', 'fr_addsp', 'fr_and', 'fr_andb', 'fr_andccr',
    'fr_andh', 'fr_asr', 'fr_asr2', 'fr_bandh', 'fr_bandl', 'fr_bc',
    'fr_beorh', 'fr_beorl', 'fr_beq', 'fr_bge', 'fr_bgt', 'fr_bhi',
    'fr_ble', 'fr_bls', 'fr_blt', 'fr_bn', 'fr_bnc', 'fr_bne',
    'fr_bno', 'fr_bnv', 'fr_borh', 'fr_borl', 'fr_bp', 'fr_bra',
    'fr_btsth', 'fr_btstl', 'fr_bv', 'fr_call', 'fr_cmp', 'fr_cmp2',
    'fr_copld', 'fr_copop', 'fr_copst', 'fr_copsv', 'fr_div0s',
    'fr_div0u', 'fr_div1', 'fr_div2', 'fr_div3', 'fr_div4s',
    'fr_dmov', 'fr_dmovb', 'fr_dmovh', 'fr_enter', 'fr_eor',
    'fr_eorb', 'fr_eorh', 'fr_extsb', 'fr_extsh', 'fr_extub',
    'fr_extuh', 'fr_int', 'fr_inte', 'fr_jmp', 'fr_last', 'fr_ld',
    'fr_ldi_20', 'fr_ldi_32', 'fr_ldi_8', 'fr_ldm0', 'fr_ldm1',
    'fr_ldres', 'fr_ldub', 'fr_lduh', 'fr_leave', 'fr_lsl', 'fr_lsl2',
    'fr_lsr', 'fr_lsr2', 'fr_mov', 'fr_mul', 'fr_mulh', 'fr_mulu',
    'fr_muluh', 'fr_nop', 'fr_null', 'fr_or', 'fr_orb', 'fr_orccr',
    'fr_orh', 'fr_ret', 'fr_reti', 'fr_st', 'fr_stb', 'fr_sth',
    'fr_stilm', 'fr_stm0', 'fr_stm1', 'fr_stres', 'fr_sub', 'fr_subc',
    'fr_subn', 'fr_xchb', 'frame_deleted', 'frame_part_t',
    'func_added', 'func_deleted', 'func_noret_changed',
    'func_tail_appended', 'func_tail_deleted', 'func_updated',
    'funcargvec_t', 'gdecode_t',
    'generic_client_t__rpc_engine_creator_t', 'git_edge', 'git_elp',
    'git_node', 'git_none', 'git_text', 'git_tool', 'graph_id_t',
    'graph_item_type_t', 'graph_notification_t', 'graph_row_info_t',
    'graph_viewer_t', 'grcode_attach_menu_item',
    'grcode_calculating_layout', 'grcode_center_on',
    'grcode_change_group_visibility', 'grcode_changed_graph',
    'grcode_clear', 'grcode_clicked', 'grcode_create_circle_layout',
    'grcode_create_digraph_layout', 'grcode_create_disasm_graph1',
    'grcode_create_disasm_graph2', 'grcode_create_graph_viewer',
    'grcode_create_group', 'grcode_create_mutable_graph',
    'grcode_create_tree_layout', 'grcode_create_user_graph_place',
    'grcode_creating_group', 'grcode_dblclicked',
    'grcode_del_custom_layout', 'grcode_del_node_info',
    'grcode_delete_group', 'grcode_delete_mutable_graph',
    'grcode_deleting_group', 'grcode_destroyed',
    'grcode_edge_infos_wrapper_clear',
    'grcode_edge_infos_wrapper_copy', 'grcode_empty',
    'grcode_find_subgraph_node', 'grcode_fit_window',
    'grcode_get_curnode', 'grcode_get_custom_layout',
    'grcode_get_gli', 'grcode_get_graph_groups',
    'grcode_get_graph_viewer', 'grcode_get_node_info',
    'grcode_get_node_representative', 'grcode_get_selection',
    'grcode_get_viewer_graph', 'grcode_gotfocus',
    'grcode_group_visibility', 'grcode_is_visible_node',
    'grcode_layout_calculated', 'grcode_lostfocus', 'grcode_node_qty',
    'grcode_nrect', 'grcode_refresh_viewer', 'grcode_reserved',
    'grcode_reserved2', 'grcode_set_custom_layout', 'grcode_set_edge',
    'grcode_set_gli', 'grcode_set_graph_groups',
    'grcode_set_node_info', 'grcode_set_titlebar_height',
    'grcode_set_viewer_graph', 'grcode_user_draw', 'grcode_user_hint',
    'grcode_user_refresh', 'grcode_user_size', 'grcode_user_text',
    'grcode_user_title', 'grcode_viewer_create_groups',
    'grcode_viewer_create_groups_vec', 'grcode_viewer_delete_groups',
    'grcode_viewer_delete_groups_vec',
    'grcode_viewer_groups_visibility',
    'grcode_viewer_groups_visibility_vec', 'groups_crinfos_t',
    'gtd_func_t', 'gtd_udt_t', 'gts_code_t', 'help_t', 'hexdsp_t',
    'hexplace_gen_t__byte_kind_t', 'hexplace_gen_t__data_kind_t',
    'hexplace_gen_t__int_format_t', 'hook_type_t',
    'ida_syntax_highlighter_t__keywords_t',
    'ida_syntax_highlighter_t__multicmtvec_t', 'idasgn_loaded',
    'idastate_t', 'idb_event__event_code_t', 'idc_vars_t',
    'idp_descs_t', 'idp_names_t', 'iek_key_press', 'iek_key_release',
    'iek_mouse_button_press', 'iek_mouse_button_release',
    'iek_mouse_wheel', 'iek_shortcut', 'iek_unknown', 'if_hex',
    'if_signed', 'if_unsigned', 'ignore_name_def_t', 'inftag_t',
    'ino_t', 'inode_t', 'inodevec_t', 'input_event_kind_t',
    'input_event_modifiers_t', 'int16', 'int16_t', 'int32', 'int32_t',
    'int64', 'int64_t', 'int8', 'int8_t', 'int_fast16_t',
    'int_fast32_t', 'int_fast64_t', 'int_fast8_t', 'int_least16_t',
    'int_least32_t', 'int_least64_t', 'int_least8_t', 'intmax_t',
    'intptr_t', 'intvec_t', 'ioctl_handler_t', 'ioport_bits_t',
    'ioports_t', 'irs_progress_cb_t', 'is_pattern_t',
    'item_color_changed', 'j_a_hardware', 'j_a_invokeignored',
    'j_a_invokesuper', 'j_a_invokevirtualobject', 'j_a_software',
    'j_aaload', 'j_aastore', 'j_aconst_null', 'j_aload', 'j_aload_0',
    'j_aload_1', 'j_aload_2', 'j_aload_3', 'j_anewarray',
    'j_anewarray_quick', 'j_areturn', 'j_arraylength', 'j_astore',
    'j_astore_0', 'j_astore_1', 'j_astore_2', 'j_astore_3',
    'j_athrow', 'j_baload', 'j_bastore', 'j_bipush', 'j_breakpoint',
    'j_caload', 'j_castore', 'j_checkcast', 'j_checkcast_quick',
    'j_d2f', 'j_d2i', 'j_d2l', 'j_dadd', 'j_daload', 'j_dastore',
    'j_dcmpg', 'j_dcmpl', 'j_dconst_0', 'j_dconst_1', 'j_ddiv',
    'j_dload', 'j_dload_0', 'j_dload_1', 'j_dload_2', 'j_dload_3',
    'j_dmul', 'j_dneg', 'j_drem', 'j_dreturn', 'j_dstore',
    'j_dstore_0', 'j_dstore_1', 'j_dstore_2', 'j_dstore_3', 'j_dsub',
    'j_dup', 'j_dup2', 'j_dup2_x1', 'j_dup2_x2', 'j_dup_x1',
    'j_dup_x2', 'j_f2d', 'j_f2i', 'j_f2l', 'j_fadd', 'j_faload',
    'j_fastore', 'j_fcmpg', 'j_fcmpl', 'j_fconst_0', 'j_fconst_1',
    'j_fconst_2', 'j_fdiv', 'j_fload', 'j_fload_0', 'j_fload_1',
    'j_fload_2', 'j_fload_3', 'j_fmul', 'j_fneg', 'j_frem',
    'j_freturn', 'j_fstore', 'j_fstore_0', 'j_fstore_1', 'j_fstore_2',
    'j_fstore_3', 'j_fsub', 'j_getfield', 'j_getfield2_quick',
    'j_getfield_quick', 'j_getfield_quick_w', 'j_getstatic',
    'j_getstatic2_quick', 'j_getstatic_quick', 'j_goto', 'j_goto_w',
    'j_i2b', 'j_i2c', 'j_i2d', 'j_i2f', 'j_i2l', 'j_i2s', 'j_iadd',
    'j_iaload', 'j_iand', 'j_iastore', 'j_iconst_0', 'j_iconst_1',
    'j_iconst_2', 'j_iconst_3', 'j_iconst_4', 'j_iconst_5',
    'j_iconst_m1', 'j_idiv', 'j_if_acmpeq', 'j_if_acmpne',
    'j_if_icmpeq', 'j_if_icmpge', 'j_if_icmpgt', 'j_if_icmple',
    'j_if_icmplt', 'j_if_icmpne', 'j_ifeq', 'j_ifge', 'j_ifgt',
    'j_ifle', 'j_iflt', 'j_ifne', 'j_ifnonnull', 'j_ifnull', 'j_iinc',
    'j_iload', 'j_iload_0', 'j_iload_1', 'j_iload_2', 'j_iload_3',
    'j_imul', 'j_ineg', 'j_instanceof', 'j_instanceof_quick',
    'j_invokedynamic', 'j_invokeignored_quick', 'j_invokeinterface',
    'j_invokeinterface_quick', 'j_invokenonvirtual_quick',
    'j_invokespecial', 'j_invokestatic', 'j_invokestatic_quick',
    'j_invokesuper_quick', 'j_invokevirtual', 'j_invokevirtual_quick',
    'j_invokevirtual_quick_w', 'j_invokevirtualobject_quick', 'j_ior',
    'j_irem', 'j_ireturn', 'j_ishl', 'j_ishr', 'j_istore',
    'j_istore_0', 'j_istore_1', 'j_istore_2', 'j_istore_3', 'j_isub',
    'j_iushr', 'j_ixor', 'j_jsr', 'j_jsr_w', 'j_l2d', 'j_l2f',
    'j_l2i', 'j_ladd', 'j_laload', 'j_land', 'j_last', 'j_lastnorm',
    'j_lastore', 'j_lcmp', 'j_lconst_0', 'j_lconst_1', 'j_ldc',
    'j_ldc2w', 'j_ldc2w_quick', 'j_ldc_quick', 'j_ldcw',
    'j_ldcw_quick', 'j_ldiv', 'j_lload', 'j_lload_0', 'j_lload_1',
    'j_lload_2', 'j_lload_3', 'j_lmul', 'j_lneg', 'j_lookupswitch',
    'j_lor', 'j_lrem', 'j_lreturn', 'j_lshl', 'j_lshr', 'j_lstore',
    'j_lstore_0', 'j_lstore_1', 'j_lstore_2', 'j_lstore_3', 'j_lsub',
    'j_lushr', 'j_lxor', 'j_monitorenter', 'j_monitorexit',
    'j_multianewarray', 'j_multianewarray_quick', 'j_new',
    'j_new_quick', 'j_newarray', 'j_nop', 'j_pop', 'j_pop2',
    'j_putfield', 'j_putfield2_quick', 'j_putfield_quick',
    'j_putfield_quick_w', 'j_putstatic', 'j_putstatic2_quick',
    'j_putstatic_quick', 'j_quick_last', 'j_ret', 'j_return',
    'j_saload', 'j_sastore', 'j_sipush', 'j_swap', 'j_tableswitch',
    'j_wide', 'jtype_t', 'jump_pattern_t__check_insn_t', 'jvalues_t',
    'kernel_config_loaded', 'layout_type_t', 'lcr_auto_switch',
    'lcr_goto', 'lcr_internal', 'lcr_jump', 'lcr_navigate',
    'lcr_scroll', 'lcr_unknown', 'lcr_user_switch', 'ldiv_t',
    'lecvt_code_t', 'line_rendering_output_entries_refs_t',
    'linput_close_code_t', 'linput_janitor_t', 'linput_type_t',
    'lldiv_t', 'loader_finished', 'local_types_changed',
    'locchange_reason_t', 'lochist_entry_vec_t', 'lofi_timestamp_t',
    'longlong', 'lowcnd_vec_t', 'lx_parse_cast_t', 'lx_resolver_t',
    'lxtype', 'm16c_itype_t', 'm32r_add', 'm32r_add3', 'm32r_addi',
    'm32r_addv', 'm32r_addv3', 'm32r_addx', 'm32r_and', 'm32r_and3',
    'm32r_bc', 'm32r_bclr', 'm32r_beq', 'm32r_beqz', 'm32r_bgez',
    'm32r_bgtz', 'm32r_bl', 'm32r_blez', 'm32r_bltz', 'm32r_bnc',
    'm32r_bne', 'm32r_bnez', 'm32r_bra', 'm32r_bset', 'm32r_btst',
    'm32r_clrpsw', 'm32r_cmp', 'm32r_cmpi', 'm32r_cmpu', 'm32r_cmpui',
    'm32r_div', 'm32r_divu', 'm32r_fadd', 'm32r_fcmp', 'm32r_fcmpe',
    'm32r_fdiv', 'm32r_fmadd', 'm32r_fmsub', 'm32r_fmul', 'm32r_fsub',
    'm32r_ftoi', 'm32r_ftos', 'm32r_itof', 'm32r_jl', 'm32r_jmp',
    'm32r_last', 'm32r_ld', 'm32r_ld24', 'm32r_ldb', 'm32r_ldh',
    'm32r_ldi', 'm32r_ldub', 'm32r_lduh', 'm32r_lock', 'm32r_machi',
    'm32r_maclo', 'm32r_macwhi', 'm32r_macwlo', 'm32r_mul',
    'm32r_mulhi', 'm32r_mullo', 'm32r_mulwhi', 'm32r_mulwlo',
    'm32r_mv', 'm32r_mvfachi', 'm32r_mvfaclo', 'm32r_mvfacmi',
    'm32r_mvfc', 'm32r_mvtachi', 'm32r_mvtaclo', 'm32r_mvtc',
    'm32r_neg', 'm32r_nop', 'm32r_not', 'm32r_null', 'm32r_or',
    'm32r_or3', 'm32r_pop', 'm32r_push', 'm32r_rac', 'm32r_rach',
    'm32r_rem', 'm32r_remu', 'm32r_rte', 'm32r_seth', 'm32r_setpsw',
    'm32r_sll', 'm32r_sll3', 'm32r_slli', 'm32r_sra', 'm32r_sra3',
    'm32r_srai', 'm32r_srl', 'm32r_srl3', 'm32r_srli', 'm32r_st',
    'm32r_stb', 'm32r_sth', 'm32r_sub', 'm32r_subv', 'm32r_subx',
    'm32r_trap', 'm32r_unlock', 'm32r_utof', 'm32r_xor', 'm32r_xor3',
    'm32rx_bcl', 'm32rx_bncl', 'm32rx_cmpeq', 'm32rx_cmpz',
    'm32rx_divh', 'm32rx_jc', 'm32rx_jnc', 'm32rx_machi',
    'm32rx_maclh1', 'm32rx_maclo', 'm32rx_macwhi', 'm32rx_macwlo',
    'm32rx_macwu1', 'm32rx_msblo', 'm32rx_mulhi', 'm32rx_mullo',
    'm32rx_mulwhi', 'm32rx_mulwlo', 'm32rx_mulwu1', 'm32rx_mvfachi',
    'm32rx_mvfaclo', 'm32rx_mvfacmi', 'm32rx_mvtachi',
    'm32rx_mvtaclo', 'm32rx_pcmpbz', 'm32rx_rac', 'm32rx_rach',
    'm32rx_sadd', 'm32rx_sat', 'm32rx_satb', 'm32rx_sath', 'm32rx_sc',
    'm32rx_snc', 'm65_itype_t', 'm740_adc', 'm740_and', 'm740_asl',
    'm740_bbc', 'm740_bbs', 'm740_bcc', 'm740_bcs', 'm740_beq',
    'm740_bit', 'm740_bmi', 'm740_bne', 'm740_bpl', 'm740_bra',
    'm740_brk', 'm740_bvc', 'm740_bvs', 'm740_clb', 'm740_clc',
    'm740_cld', 'm740_cli', 'm740_clt', 'm740_clv', 'm740_cmp',
    'm740_com', 'm740_cpx', 'm740_cpy', 'm740_dec', 'm740_dex',
    'm740_dey', 'm740_div', 'm740_eor', 'm740_inc', 'm740_inx',
    'm740_iny', 'm740_jmp', 'm740_jsr', 'm740_last', 'm740_lda',
    'm740_ldm', 'm740_ldx', 'm740_ldy', 'm740_lsr', 'm740_mul',
    'm740_nop', 'm740_null', 'm740_ora', 'm740_pha', 'm740_php',
    'm740_pla', 'm740_plp', 'm740_rol', 'm740_ror', 'm740_rrf',
    'm740_rti', 'm740_rts', 'm740_sbc', 'm740_seb', 'm740_sec',
    'm740_sed', 'm740_sei', 'm740_set', 'm740_sta', 'm740_stp',
    'm740_stx', 'm740_sty', 'm740_tax', 'm740_tay', 'm740_tst',
    'm740_tsx', 'm740_txa', 'm740_txs', 'm740_tya', 'm740_wit',
    'm7700_adc', 'm7700_and', 'm7700_asl', 'm7700_bbc', 'm7700_bbs',
    'm7700_bcc', 'm7700_bcs', 'm7700_beq', 'm7700_bmi', 'm7700_bne',
    'm7700_bpl', 'm7700_bra', 'm7700_brk', 'm7700_bvc', 'm7700_bvs',
    'm7700_clb', 'm7700_clc', 'm7700_cli', 'm7700_clm', 'm7700_clp',
    'm7700_clv', 'm7700_cmp', 'm7700_cpx', 'm7700_cpy', 'm7700_dec',
    'm7700_dex', 'm7700_dey', 'm7700_div', 'm7700_eor', 'm7700_inc',
    'm7700_inx', 'm7700_iny', 'm7700_jmp', 'm7700_jsr', 'm7700_last',
    'm7700_lda', 'm7700_ldm', 'm7700_ldt', 'm7700_ldx', 'm7700_ldy',
    'm7700_lsr', 'm7700_mpy', 'm7700_mvn', 'm7700_mvp', 'm7700_nop',
    'm7700_null', 'm7700_ora', 'm7700_pea', 'm7700_pei', 'm7700_per',
    'm7700_pha', 'm7700_phb', 'm7700_phd', 'm7700_phg', 'm7700_php',
    'm7700_pht', 'm7700_phx', 'm7700_phy', 'm7700_pla', 'm7700_plb',
    'm7700_pld', 'm7700_plp', 'm7700_plt', 'm7700_plx', 'm7700_ply',
    'm7700_psh', 'm7700_pul', 'm7700_rla', 'm7700_rol', 'm7700_ror',
    'm7700_rti', 'm7700_rtl', 'm7700_rts', 'm7700_sbc', 'm7700_seb',
    'm7700_sec', 'm7700_sei', 'm7700_sem', 'm7700_sep', 'm7700_sta',
    'm7700_stp', 'm7700_stx', 'm7700_sty', 'm7700_tad', 'm7700_tas',
    'm7700_tax', 'm7700_tay', 'm7700_tbd', 'm7700_tbs', 'm7700_tbx',
    'm7700_tby', 'm7700_tda', 'm7700_tdb', 'm7700_tsa', 'm7700_tsb',
    'm7700_tsx', 'm7700_txa', 'm7700_txb', 'm7700_txs', 'm7700_txy',
    'm7700_tya', 'm7700_tyb', 'm7700_tyx', 'm7700_wit', 'm7700_xab',
    'm7750_asr', 'm7750_divs', 'm7750_exts', 'm7750_extz',
    'm7750_mpys', 'm7900_abs', 'm7900_absd', 'm7900_adc',
    'm7900_adcb', 'm7900_adcd', 'm7900_add', 'm7900_addb',
    'm7900_addd', 'm7900_addm', 'm7900_addmb', 'm7900_addmd',
    'm7900_adds', 'm7900_addx', 'm7900_addy', 'm7900_and',
    'm7900_andb', 'm7900_andm', 'm7900_andmb', 'm7900_andmd',
    'm7900_asl', 'm7900_asldn', 'm7900_asln', 'm7900_asr',
    'm7900_asrdn', 'm7900_asrn', 'm7900_bbc', 'm7900_bbcb',
    'm7900_bbs', 'm7900_bbsb', 'm7900_bcc', 'm7900_bcs', 'm7900_beq',
    'm7900_bge', 'm7900_bgt', 'm7900_bgtu', 'm7900_ble', 'm7900_bleu',
    'm7900_blt', 'm7900_bmi', 'm7900_bne', 'm7900_bpl', 'm7900_bra',
    'm7900_bral', 'm7900_brk', 'm7900_bsc', 'm7900_bsr', 'm7900_bss',
    'm7900_bvc', 'm7900_bvs', 'm7900_cbeq', 'm7900_cbeqb',
    'm7900_cbne', 'm7900_cbneb', 'm7900_clc', 'm7900_cli',
    'm7900_clm', 'm7900_clp', 'm7900_clr', 'm7900_clrb', 'm7900_clrm',
    'm7900_clrmb', 'm7900_clrx', 'm7900_clry', 'm7900_clv',
    'm7900_cmp', 'm7900_cmpb', 'm7900_cmpd', 'm7900_cmpm',
    'm7900_cmpmb', 'm7900_cmpmd', 'm7900_cpx', 'm7900_cpy',
    'm7900_debne', 'm7900_dec', 'm7900_dex', 'm7900_dey', 'm7900_div',
    'm7900_divs', 'm7900_dxbne', 'm7900_dybne', 'm7900_eor',
    'm7900_eorb', 'm7900_eorm', 'm7900_eormb', 'm7900_eormd',
    'm7900_exts', 'm7900_extsd', 'm7900_extz', 'm7900_extzd',
    'm7900_inc', 'm7900_inx', 'm7900_iny', 'm7900_jmp', 'm7900_jmpl',
    'm7900_jsr', 'm7900_jsrl', 'm7900_last', 'm7900_lda',
    'm7900_ldab', 'm7900_ldad', 'm7900_lddn', 'm7900_ldt',
    'm7900_ldx', 'm7900_ldxb', 'm7900_ldy', 'm7900_ldyb', 'm7900_lsr',
    'm7900_lsrdn', 'm7900_lsrn', 'm7900_movm', 'm7900_movmb',
    'm7900_movr', 'm7900_movrb', 'm7900_mpy', 'm7900_mpys',
    'm7900_mvn', 'm7900_mvp', 'm7900_neg', 'm7900_negd', 'm7900_nop',
    'm7900_null', 'm7900_ora', 'm7900_orab', 'm7900_oram',
    'm7900_oramb', 'm7900_oramd', 'm7900_pea', 'm7900_pei',
    'm7900_per', 'm7900_pha', 'm7900_phb', 'm7900_phd', 'm7900_phdn',
    'm7900_phg', 'm7900_phldn', 'm7900_php', 'm7900_pht', 'm7900_phx',
    'm7900_phy', 'm7900_pla', 'm7900_plb', 'm7900_pld', 'm7900_pldn',
    'm7900_plp', 'm7900_plt', 'm7900_plx', 'm7900_ply', 'm7900_psh',
    'm7900_pul', 'm7900_rla', 'm7900_rmpa', 'm7900_rol',
    'm7900_roldn', 'm7900_roln', 'm7900_ror', 'm7900_rordn',
    'm7900_rorn', 'm7900_rti', 'm7900_rtl', 'm7900_rtld', 'm7900_rts',
    'm7900_rtsdn', 'm7900_sbc', 'm7900_sbcb', 'm7900_sbcd',
    'm7900_sec', 'm7900_sei', 'm7900_sem', 'm7900_sep', 'm7900_sta',
    'm7900_stab', 'm7900_stad', 'm7900_stp', 'm7900_stx', 'm7900_sty',
    'm7900_sub', 'm7900_subb', 'm7900_subd', 'm7900_subm',
    'm7900_submb', 'm7900_submd', 'm7900_subs', 'm7900_subx',
    'm7900_suby', 'm7900_tadn', 'm7900_tas', 'm7900_tax', 'm7900_tay',
    'm7900_tbdn', 'm7900_tbs', 'm7900_tbx', 'm7900_tby', 'm7900_tdan',
    'm7900_tdbn', 'm7900_tds', 'm7900_tsa', 'm7900_tsb', 'm7900_tsd',
    'm7900_tsx', 'm7900_txa', 'm7900_txb', 'm7900_txs', 'm7900_txy',
    'm7900_tya', 'm7900_tyb', 'm7900_tyx', 'm7900_wit', 'm7900_xab',
    'make_code', 'make_data', 'mangled_name_type_t', 'mbox_error',
    'mbox_feedback', 'mbox_filestruct', 'mbox_hide', 'mbox_info',
    'mbox_internal', 'mbox_kind_t', 'mbox_nomem', 'mbox_readerror',
    'mbox_replace', 'mbox_wait', 'mbox_warning', 'mbox_writeerror',
    'mbstate_t', 'mc8_1', 'mc8_2', 'mc8_ab', 'mc8_aba', 'mc8_adc',
    'mc8_add', 'mc8_addd', 'mc8_aim', 'mc8_ais', 'mc8_aix', 'mc8_and',
    'mc8_andcc', 'mc8_asr', 'mc8_bcc', 'mc8_bclr', 'mc8_bcs',
    'mc8_beq', 'mc8_bge', 'mc8_bgnd', 'mc8_bgt', 'mc8_bhcc',
    'mc8_bhcs', 'mc8_bhi', 'mc8_bhs', 'mc8_bih', 'mc8_bil', 'mc8_bit',
    'mc8_ble', 'mc8_blo', 'mc8_bls', 'mc8_blt', 'mc8_bmc', 'mc8_bmi',
    'mc8_bms', 'mc8_bne', 'mc8_bpl', 'mc8_bra', 'mc8_brclr',
    'mc8_brn', 'mc8_brset', 'mc8_bset', 'mc8_bsr', 'mc8_bvc',
    'mc8_bvs', 'mc8_call', 'mc8_cba', 'mc8_cbeq', 'mc8_clc',
    'mc8_cli', 'mc8_clr', 'mc8_clv', 'mc8_cmp', 'mc8_com', 'mc8_cp',
    'mc8_cpd', 'mc8_cphx', 'mc8_cpx', 'mc8_cwai', 'mc8_daa',
    'mc8_dbnz', 'mc8_de', 'mc8_dec', 'mc8_des', 'mc8_div', 'mc8_eim',
    'mc8_eor', 'mc8_exg', 'mc8_fdiv', 'mc8_idiv', 'mc8_in', 'mc8_inc',
    'mc8_ins', 'mc8_jmp', 'mc8_jsr', 'mc8_last', 'mc8_ld', 'mc8_lda',
    'mc8_ldd', 'mc8_ldhx', 'mc8_lds', 'mc8_ldx', 'mc8_lea', 'mc8_lsl',
    'mc8_lsld', 'mc8_lsr', 'mc8_lsrd', 'mc8_mov', 'mc8_mul',
    'mc8_neg', 'mc8_nop', 'mc8_nsa', 'mc8_null', 'mc8_oim', 'mc8_ora',
    'mc8_orcc', 'mc8_os9', 'mc8_psh', 'mc8_psha', 'mc8_pshb',
    'mc8_pshh', 'mc8_pshx', 'mc8_pul', 'mc8_pula', 'mc8_pulb',
    'mc8_pulh', 'mc8_pulx', 'mc8_rol', 'mc8_ror', 'mc8_rsp',
    'mc8_rtc', 'mc8_rti', 'mc8_rts', 'mc8_sba', 'mc8_sbc', 'mc8_sec',
    'mc8_sei', 'mc8_sev', 'mc8_sex', 'mc8_skip1', 'mc8_skip2',
    'mc8_slp', 'mc8_st', 'mc8_sta', 'mc8_std', 'mc8_sthx', 'mc8_stop',
    'mc8_sts', 'mc8_stx', 'mc8_sub', 'mc8_subd', 'mc8_swi',
    'mc8_sync', 'mc8_tab', 'mc8_tap', 'mc8_tax', 'mc8_tba',
    'mc8_test', 'mc8_tfr', 'mc8_tim', 'mc8_tpa', 'mc8_ts', 'mc8_tst',
    'mc8_tsx', 'mc8_txa', 'mc8_txs', 'mc8_tys', 'mc8_wai', 'mc8_wait',
    'mc8_xgd', 'mc_abcd', 'mc_add', 'mc_adda', 'mc_addi', 'mc_addq',
    'mc_addx', 'mc_and', 'mc_andi', 'mc_asl', 'mc_asr', 'mc_atrap',
    'mc_b', 'mc_bchg', 'mc_bclr', 'mc_bfchg', 'mc_bfclr', 'mc_bfexts',
    'mc_bfextu', 'mc_bfffo', 'mc_bfins', 'mc_bfset', 'mc_bftst',
    'mc_bgnd', 'mc_bitrev', 'mc_bkpt', 'mc_bra', 'mc_bset', 'mc_bsr',
    'mc_btst', 'mc_byterev', 'mc_callm', 'mc_cas', 'mc_cas2',
    'mc_chk', 'mc_chk2', 'mc_cinv', 'mc_clr', 'mc_cmp', 'mc_cmp2',
    'mc_cmpa', 'mc_cmpi', 'mc_cmpm', 'mc_cpush', 'mc_db', 'mc_divs',
    'mc_divsl', 'mc_divu', 'mc_divul', 'mc_eor', 'mc_eori', 'mc_exg',
    'mc_ext', 'mc_extb', 'mc_fabs', 'mc_facos', 'mc_fadd', 'mc_fasin',
    'mc_fatan', 'mc_fatanh', 'mc_fb', 'mc_fcmp', 'mc_fcos',
    'mc_fcosh', 'mc_fdabs', 'mc_fdadd', 'mc_fdb', 'mc_fddiv',
    'mc_fdiv', 'mc_fdmove', 'mc_fdmul', 'mc_fdneg', 'mc_fdsqrt',
    'mc_fdsub', 'mc_fetox', 'mc_fetoxm1', 'mc_ff1', 'mc_fgetexp',
    'mc_fgetman', 'mc_fint', 'mc_fintrz', 'mc_flog10', 'mc_flog2',
    'mc_flogn', 'mc_flognp1', 'mc_fmod', 'mc_fmove', 'mc_fmovecr',
    'mc_fmovem', 'mc_fmul', 'mc_fneg', 'mc_fnop', 'mc_frem',
    'mc_frestore', 'mc_fs', 'mc_fsabs', 'mc_fsadd', 'mc_fsave',
    'mc_fscale', 'mc_fsdiv', 'mc_fsgldiv', 'mc_fsglmul', 'mc_fsin',
    'mc_fsincos', 'mc_fsinh', 'mc_fsmove', 'mc_fsmul', 'mc_fsneg',
    'mc_fsqrt', 'mc_fssqrt', 'mc_fssub', 'mc_fsub', 'mc_ftan',
    'mc_ftanh', 'mc_ftentox', 'mc_ftrap', 'mc_ftst', 'mc_ftwotox',
    'mc_halt', 'mc_illegal', 'mc_intouch', 'mc_jmp', 'mc_jsr',
    'mc_last', 'mc_lea', 'mc_link', 'mc_lpstop', 'mc_lsl', 'mc_lsr',
    'mc_maaac', 'mc_mac', 'mc_macl', 'mc_masac', 'mc_mov3q',
    'mc_movclr', 'mc_move', 'mc_move16', 'mc_movea', 'mc_movec',
    'mc_movem', 'mc_movep', 'mc_moveq', 'mc_moves', 'mc_msaac',
    'mc_msac', 'mc_msacl', 'mc_mssac', 'mc_muls', 'mc_mulu', 'mc_mvs',
    'mc_mvz', 'mc_nbcd', 'mc_neg', 'mc_negx', 'mc_nop', 'mc_not',
    'mc_null', 'mc_or', 'mc_ori', 'mc_pack', 'mc_pb', 'mc_pdb',
    'mc_pea', 'mc_pflush', 'mc_pflushr', 'mc_ploadr', 'mc_ploadw',
    'mc_pmove', 'mc_prestore', 'mc_ps', 'mc_psave', 'mc_ptestr',
    'mc_ptestw', 'mc_ptrap', 'mc_pulse', 'mc_pvalid', 'mc_remsl',
    'mc_remul', 'mc_reset', 'mc_rol', 'mc_ror', 'mc_roxl', 'mc_roxr',
    'mc_rtd', 'mc_rte', 'mc_rtm', 'mc_rtr', 'mc_rts', 'mc_s',
    'mc_sats', 'mc_sbcd', 'mc_stop', 'mc_sub', 'mc_suba', 'mc_subi',
    'mc_subq', 'mc_subx', 'mc_swap', 'mc_tas', 'mc_tbl', 'mc_trap',
    'mc_trapv', 'mc_tst', 'mc_unlk', 'mc_unpk', 'mc_wddata',
    'mc_wdebug', 'meminfo_vec_t', 'memory_order_acq_rel',
    'memory_order_acquire', 'memory_order_consume',
    'memory_order_relaxed', 'memory_order_release',
    'memory_order_seq_cst', 'memreg_infos_t', 'mn102_add',
    'mn102_addc', 'mn102_addnf', 'mn102_and', 'mn102_asr',
    'mn102_bcc', 'mn102_bccx', 'mn102_bclr', 'mn102_bcs',
    'mn102_bcsx', 'mn102_beq', 'mn102_beqx', 'mn102_bge',
    'mn102_bgex', 'mn102_bgt', 'mn102_bgtx', 'mn102_bhi',
    'mn102_bhix', 'mn102_ble', 'mn102_blex', 'mn102_bls',
    'mn102_blsx', 'mn102_blt', 'mn102_bltx', 'mn102_bnc',
    'mn102_bncx', 'mn102_bne', 'mn102_bnex', 'mn102_bns',
    'mn102_bnsx', 'mn102_bra', 'mn102_bset', 'mn102_btst',
    'mn102_bvc', 'mn102_bvcx', 'mn102_bvs', 'mn102_bvsx', 'mn102_cmp',
    'mn102_divu', 'mn102_ext', 'mn102_extx', 'mn102_extxb',
    'mn102_extxbu', 'mn102_extxu', 'mn102_jmp', 'mn102_jsr',
    'mn102_last', 'mn102_lsr', 'mn102_mov', 'mn102_movb',
    'mn102_movbu', 'mn102_movx', 'mn102_mul', 'mn102_mulq',
    'mn102_mulqh', 'mn102_mulql', 'mn102_mulu', 'mn102_nop',
    'mn102_not', 'mn102_null', 'mn102_or', 'mn102_pxst', 'mn102_rol',
    'mn102_ror', 'mn102_rti', 'mn102_rts', 'mn102_sub', 'mn102_subc',
    'mn102_tbnz', 'mn102_tbz', 'mn102_xor', 'modinfovec_t',
    'movbpt_code_t', 'movbpt_codes_t', 'movbpt_infos_t',
    'msg_activated', 'msg_click', 'msg_closed', 'msg_dblclick',
    'msg_deactivated', 'msg_keydown', 'msg_notification_t',
    'mutable_graph_t__node_layout_t', 'name_quick', 'nametype_t',
    'nat_auto', 'nat_cod', 'nat_cur', 'nat_dat', 'nat_err', 'nat_ext',
    'nat_fun', 'nat_gap', 'nat_hlo', 'nat_last', 'nat_lib', 'nat_lum',
    'nat_und', 'navaddr_type_t', 'nodeidx_t', 'nr_none', 'nr_once',
    'obsolete_ev_find_reg_value', 'off_t', 'ofile_type_t',
    'op_dtype_t', 'op_ti_changed', 'op_type_changed', 'optype_t',
    'ordvec_t', 'p_list', 'p_string', 'path_type_t',
    'pc_module_t__event_codes_t', 'pdp_absd', 'pdp_adc', 'pdp_add',
    'pdp_addd', 'pdp_ash', 'pdp_ashc', 'pdp_asl', 'pdp_asr',
    'pdp_bcc', 'pdp_bcs', 'pdp_beq', 'pdp_bge', 'pdp_bgt', 'pdp_bhi',
    'pdp_bic', 'pdp_bis', 'pdp_bit', 'pdp_ble', 'pdp_blos', 'pdp_blt',
    'pdp_bmi', 'pdp_bne', 'pdp_bpl', 'pdp_bpt', 'pdp_br', 'pdp_bvc',
    'pdp_bvs', 'pdp_call', 'pdp_ccc', 'pdp_cfcc', 'pdp_clc',
    'pdp_cln', 'pdp_clr', 'pdp_clrd', 'pdp_clv', 'pdp_clz', 'pdp_cmp',
    'pdp_cmpd', 'pdp_com', 'pdp_compcc', 'pdp_dec', 'pdp_div',
    'pdp_divd', 'pdp_emt', 'pdp_fadd', 'pdp_fdiv', 'pdp_fmul',
    'pdp_fsub', 'pdp_halt', 'pdp_inc', 'pdp_iot', 'pdp_jmp',
    'pdp_jsr', 'pdp_last', 'pdp_ldcfd', 'pdp_ldcif', 'pdp_ldd',
    'pdp_ldexp', 'pdp_ldfps', 'pdp_mark', 'pdp_mfpd', 'pdp_mfpi',
    'pdp_mfps', 'pdp_mfpt', 'pdp_modd', 'pdp_mov', 'pdp_mtpd',
    'pdp_mtpi', 'pdp_mtps', 'pdp_mul', 'pdp_muld', 'pdp_neg',
    'pdp_negd', 'pdp_nop', 'pdp_null', 'pdp_reset', 'pdp_return',
    'pdp_rol', 'pdp_ror', 'pdp_rti', 'pdp_rts', 'pdp_rtt', 'pdp_sbc',
    'pdp_scc', 'pdp_sec', 'pdp_sen', 'pdp_setd', 'pdp_setf',
    'pdp_seti', 'pdp_setl', 'pdp_sev', 'pdp_sez', 'pdp_sob',
    'pdp_spl', 'pdp_stcdf', 'pdp_stcdi', 'pdp_std', 'pdp_stexp',
    'pdp_stfps', 'pdp_stst', 'pdp_sub', 'pdp_subd', 'pdp_swab',
    'pdp_sxt', 'pdp_trap', 'pdp_tst', 'pdp_tstd', 'pdp_wait',
    'pdp_xor', 'pid_t', 'plc_cancel', 'plc_proceed', 'plc_skip_iter',
    'pointvec_t', 'printer_t', 'problist_id_t',
    'processor_t__event_t', 'procinfo_vec_t', 'progress_loop_ctrl_t',
    'ptrdiff_t', 'pushinfo_t__pop_info_t', 'qflow_chart_t__blocks_t',
    'qhandle_t', 'qmutex_t', 'qsemaphore_t', 'qstring', 'qstrvec_t',
    'qthread_t', 'qtime32_t', 'qtime64_t', 'qtimer_t', 'qtype',
    'qvector__qstring_char____const_iterator',
    'qvector__qstring_char____iterator',
    'qvector__qstring_unsigned_char____const_iterator',
    'qvector__qstring_unsigned_char____iterator',
    'qvector__qstring_wchar_t____const_iterator',
    'qvector__qstring_wchar_t____iterator',
    'qvector_argloc_t___const_iterator',
    'qvector_argloc_t___iterator',
    'qvector_argpart_t___const_iterator',
    'qvector_argpart_t___iterator',
    'qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R____const_iterator',
    'qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R____iterator',
    'qvector_bool___const_iterator', 'qvector_bool___iterator',
    'qvector_bpt_t__P___const_iterator',
    'qvector_bpt_t__P___iterator', 'qvector_bpt_t___const_iterator',
    'qvector_bpt_t___iterator', 'qvector_bptaddrs_t___const_iterator',
    'qvector_bptaddrs_t___iterator',
    'qvector_call_stack_info_t___const_iterator',
    'qvector_call_stack_info_t___iterator',
    'qvector_catch_t___const_iterator', 'qvector_catch_t___iterator',
    'qvector_cfgopt_set_t___const_iterator',
    'qvector_cfgopt_set_t___iterator',
    'qvector_channel_redir_t___const_iterator',
    'qvector_channel_redir_t___iterator',
    'qvector_char___const_iterator', 'qvector_char___iterator',
    'qvector_cliopt_t___const_iterator',
    'qvector_cliopt_t___iterator',
    'qvector_compiled_binpat_t___const_iterator',
    'qvector_compiled_binpat_t___iterator',
    'qvector_const_bpt_t__P___const_iterator',
    'qvector_const_bpt_t__P___iterator',
    'qvector_const_char__P___const_iterator',
    'qvector_const_char__P___iterator',
    'qvector_const_rangeset_t__P___const_iterator',
    'qvector_const_rangeset_t__P___iterator',
    'qvector_const_twinline_t__P___const_iterator',
    'qvector_const_twinline_t__P___iterator',
    'qvector_debug_event_t___const_iterator',
    'qvector_debug_event_t___iterator',
    'qvector_direntry_t___const_iterator',
    'qvector_direntry_t___iterator',
    'qvector_dirtree_cursor_t___const_iterator',
    'qvector_dirtree_cursor_t___iterator',
    'qvector_ea_name_t___const_iterator',
    'qvector_ea_name_t___iterator', 'qvector_edge_t___const_iterator',
    'qvector_edge_t___iterator',
    'qvector_enum_member_t___const_iterator',
    'qvector_enum_member_t___iterator',
    'qvector_exception_info_t___const_iterator',
    'qvector_exception_info_t___iterator',
    'qvector_extlang_t__P___const_iterator',
    'qvector_extlang_t__P___iterator',
    'qvector_fixup_info_t___const_iterator',
    'qvector_fixup_info_t___iterator',
    'qvector_funcarg_t___const_iterator',
    'qvector_funcarg_t___iterator',
    'qvector_group_crinfo_t___const_iterator',
    'qvector_group_crinfo_t___iterator',
    'qvector_ida_syntax_highlighter_t__keywords_style_t___const_iterator',
    'qvector_ida_syntax_highlighter_t__keywords_style_t___iterator',
    'qvector_ida_syntax_highlighter_t__multicmt_t___const_iterator',
    'qvector_ida_syntax_highlighter_t__multicmt_t___iterator',
    'qvector_ida_syntax_highlighter_t__plain_char_ptr_t___const_iterator',
    'qvector_ida_syntax_highlighter_t__plain_char_ptr_t___iterator',
    'qvector_idc_global_t___const_iterator',
    'qvector_idc_global_t___iterator',
    'qvector_idp_desc_t___const_iterator',
    'qvector_idp_desc_t___iterator',
    'qvector_idp_name_t___const_iterator',
    'qvector_idp_name_t___iterator', 'qvector_int___const_iterator',
    'qvector_int___iterator', 'qvector_intmap_t___const_iterator',
    'qvector_intmap_t___iterator',
    'qvector_ioport_bit_t___const_iterator',
    'qvector_ioport_bit_t___iterator',
    'qvector_ioport_t___const_iterator',
    'qvector_ioport_t___iterator',
    'qvector_jvalue_t___const_iterator',
    'qvector_jvalue_t___iterator', 'qvector_kvp_t___const_iterator',
    'qvector_kvp_t___iterator',
    'qvector_line_rendering_output_entry_t__P___const_iterator',
    'qvector_line_rendering_output_entry_t__P___iterator',
    'qvector_lochist_entry_t___const_iterator',
    'qvector_lochist_entry_t___iterator',
    'qvector_long_long___P__syntax_highlight_style__P__const_char__P____const_iterator',
    'qvector_long_long___P__syntax_highlight_style__P__const_char__P____iterator',
    'qvector_long_long___const_iterator',
    'qvector_long_long___iterator',
    'qvector_lowcnd_t___const_iterator',
    'qvector_lowcnd_t___iterator',
    'qvector_memory_info_t___const_iterator',
    'qvector_memory_info_t___iterator',
    'qvector_memreg_info_t___const_iterator',
    'qvector_memreg_info_t___iterator',
    'qvector_modinfo_t___const_iterator',
    'qvector_modinfo_t___iterator',
    'qvector_movbpt_code_t___const_iterator',
    'qvector_movbpt_code_t___iterator',
    'qvector_movbpt_info_t___const_iterator',
    'qvector_movbpt_info_t___iterator',
    'qvector_node_set_t___const_iterator',
    'qvector_node_set_t___iterator', 'qvector_op_t___const_iterator',
    'qvector_op_t___iterator', 'qvector_point_t___const_iterator',
    'qvector_point_t___iterator',
    'qvector_process_info_t___const_iterator',
    'qvector_process_info_t___iterator',
    'qvector_pushreg_t___const_iterator',
    'qvector_pushreg_t___iterator',
    'qvector_qbasic_block_t___const_iterator',
    'qvector_qbasic_block_t___iterator',
    'qvector_qrefcnt_t_source_item_t____const_iterator',
    'qvector_qrefcnt_t_source_item_t____iterator',
    'qvector_qvector_const_char__P____const_iterator',
    'qvector_qvector_const_char__P____iterator',
    'qvector_qvector_const_twinline_t__P____const_iterator',
    'qvector_qvector_const_twinline_t__P____iterator',
    'qvector_qvector_int____const_iterator',
    'qvector_qvector_int____iterator',
    'qvector_qvector_long_long____const_iterator',
    'qvector_qvector_long_long____iterator',
    'qvector_qvector_unsigned_long_long____const_iterator',
    'qvector_qvector_unsigned_long_long____iterator',
    'qvector_range_t___const_iterator', 'qvector_range_t___iterator',
    'qvector_rangeset_t___const_iterator',
    'qvector_rangeset_t___iterator',
    'qvector_rect_t___const_iterator', 'qvector_rect_t___iterator',
    'qvector_refinfo_desc_t___const_iterator',
    'qvector_refinfo_desc_t___iterator',
    'qvector_reg_access_t___const_iterator',
    'qvector_reg_access_t___iterator',
    'qvector_reg_info_t___const_iterator',
    'qvector_reg_info_t___iterator',
    'qvector_register_info_t___const_iterator',
    'qvector_register_info_t___iterator',
    'qvector_regobj_t___const_iterator',
    'qvector_regobj_t___iterator',
    'qvector_regval_t___const_iterator',
    'qvector_regval_t___iterator',
    'qvector_row_info_t___const_iterator',
    'qvector_row_info_t___iterator',
    'qvector_rpc_packet_type_desc_t___const_iterator',
    'qvector_rpc_packet_type_desc_t___iterator',
    'qvector_scattered_segm_t___const_iterator',
    'qvector_scattered_segm_t___iterator',
    'qvector_segm_move_info_t___const_iterator',
    'qvector_segm_move_info_t___iterator',
    'qvector_selection_item_t___const_iterator',
    'qvector_selection_item_t___iterator',
    'qvector_simd_info_t___const_iterator',
    'qvector_simd_info_t___iterator',
    'qvector_simpleline_t___const_iterator',
    'qvector_simpleline_t___iterator',
    'qvector_snapshot_t__P___const_iterator',
    'qvector_snapshot_t__P___iterator',
    'qvector_stkpnt_t___const_iterator',
    'qvector_stkpnt_t___iterator',
    'qvector_sync_source_t___const_iterator',
    'qvector_sync_source_t___iterator',
    'qvector_tev_info_reg_t___const_iterator',
    'qvector_tev_info_reg_t___iterator',
    'qvector_tev_info_t___const_iterator',
    'qvector_tev_info_t___iterator',
    'qvector_tev_reg_value_t___const_iterator',
    'qvector_tev_reg_value_t___iterator',
    'qvector_thread_name_t___const_iterator',
    'qvector_thread_name_t___iterator',
    'qvector_tinfo_t___const_iterator', 'qvector_tinfo_t___iterator',
    'qvector_token_t___const_iterator', 'qvector_token_t___iterator',
    'qvector_tryblk_t___const_iterator',
    'qvector_tryblk_t___iterator',
    'qvector_twinline_t___const_iterator',
    'qvector_twinline_t___iterator',
    'qvector_type_attr_t___const_iterator',
    'qvector_type_attr_t___iterator',
    'qvector_udt_member_t___const_iterator',
    'qvector_udt_member_t___iterator',
    'qvector_unsigned_char___const_iterator',
    'qvector_unsigned_char___iterator',
    'qvector_unsigned_int___const_iterator',
    'qvector_unsigned_int___iterator',
    'qvector_unsigned_long_long___const_iterator',
    'qvector_unsigned_long_long___iterator',
    'qvector_update_bpt_info_t___const_iterator',
    'qvector_update_bpt_info_t___iterator',
    'qvector_valstr_t___const_iterator',
    'qvector_valstr_t___iterator', 'qvector_wchar_t___const_iterator',
    'qvector_wchar_t___iterator',
    'qvector_xreflist_entry_t___const_iterator',
    'qvector_xreflist_entry_t___iterator', 'qwstring', 'qwstrvec_t',
    'range_cmt_changed', 'range_kind_t', 'rangeset_crefvec_t',
    'rangeset_t__const_iterator', 'rangeset_t__iterator',
    'rangevec_base_t', 'refinfo_desc_vec_t', 'reftype_t',
    'reg_access_vec_t', 'reg_binary', 'reg_dword', 'reg_sz',
    'reg_unknown', 'regex_cache_t__regex_cache_map_t', 'regex_ptr_t',
    'reginfovec_t', 'register_class_t', 'register_info_vec_t',
    'regnum_t', 'regobjvec_t', 'regoff_t', 'regval_type_t',
    'regvals_t', 'renamed', 'renaming_enum', 'renaming_struc',
    'renaming_struc_member', 'renderer_info_t__pos_t',
    'resume_mode_t', 'rnt_error', 'rnt_msg', 'rnt_unknown',
    'rnt_warning', 'round_indeterminate', 'round_to_nearest',
    'round_toward_infinity', 'round_toward_neg_infinity',
    'round_toward_zero', 'rpc_notification_type_t',
    'rpc_packet_instantiator_t', 'rpc_packet_type_desc_vec_t',
    'rsize_t', 's39_a', 's39_ad', 's39_adb', 's39_adbr', 's39_adr',
    's39_adtr', 's39_adtra', 's39_ae', 's39_aeb', 's39_aebr',
    's39_aer', 's39_afi', 's39_ag', 's39_agf', 's39_agfi', 's39_agfr',
    's39_agh', 's39_aghi', 's39_aghik', 's39_agr', 's39_agrk',
    's39_agsi', 's39_ah', 's39_ahhhr', 's39_ahhlr', 's39_ahi',
    's39_ahik', 's39_ahy', 's39_aih', 's39_al', 's39_alc', 's39_alcg',
    's39_alcgr', 's39_alcr', 's39_alfi', 's39_alg', 's39_algf',
    's39_algfi', 's39_algfr', 's39_alghsik', 's39_algr', 's39_algrk',
    's39_algsi', 's39_alhhhr', 's39_alhhlr', 's39_alhsik', 's39_alr',
    's39_alrk', 's39_alsi', 's39_alsih', 's39_alsihn', 's39_aly',
    's39_ap', 's39_ar', 's39_ark', 's39_asi', 's39_au', 's39_aur',
    's39_aw', 's39_awr', 's39_axbr', 's39_axr', 's39_axtr',
    's39_axtra', 's39_ay', 's39_b', 's39_bakr', 's39_bal', 's39_balr',
    's39_bas', 's39_basr', 's39_bassm', 's39_bc', 's39_bcr',
    's39_bct', 's39_bctg', 's39_bctgr', 's39_bctr', 's39_be',
    's39_ber', 's39_bh', 's39_bhe', 's39_bher', 's39_bhr', 's39_bi',
    's39_bic', 's39_bie', 's39_bih', 's39_bihe', 's39_bil',
    's39_bile', 's39_bilh', 's39_bine', 's39_binh', 's39_binhe',
    's39_binl', 's39_binle', 's39_binlh', 's39_bino', 's39_bio',
    's39_bl', 's39_ble', 's39_bler', 's39_blh', 's39_blhr', 's39_blr',
    's39_bne', 's39_bner', 's39_bnh', 's39_bnhe', 's39_bnher',
    's39_bnhr', 's39_bnl', 's39_bnle', 's39_bnler', 's39_bnlh',
    's39_bnlhr', 's39_bnlr', 's39_bno', 's39_bnor', 's39_bo',
    's39_bor', 's39_bpp', 's39_bprp', 's39_br', 's39_bras',
    's39_brasl', 's39_brc', 's39_brcl', 's39_brct', 's39_brctg',
    's39_brcth', 's39_brxh', 's39_brxhg', 's39_brxle', 's39_brxlg',
    's39_bsa', 's39_bsg', 's39_bsm', 's39_bxh', 's39_bxhg',
    's39_bxle', 's39_bxleg', 's39_c', 's39_cd', 's39_cdb', 's39_cdbr',
    's39_cdfbr', 's39_cdfbra', 's39_cdfr', 's39_cdftr', 's39_cdgbr',
    's39_cdgbra', 's39_cdgr', 's39_cdgtr', 's39_cdgtra', 's39_cdlfbr',
    's39_cdlftr', 's39_cdlgbr', 's39_cdlgtr', 's39_cdpt', 's39_cdr',
    's39_cds', 's39_cdsg', 's39_cdstr', 's39_cdsy', 's39_cdtr',
    's39_cdutr', 's39_cdzt', 's39_ce', 's39_ceb', 's39_cebr',
    's39_cedtr', 's39_cefbr', 's39_cefbra', 's39_cefr', 's39_cegbr',
    's39_cegbra', 's39_cegr', 's39_celfbr', 's39_celgbr', 's39_cer',
    's39_cextr', 's39_cfc', 's39_cfdbr', 's39_cfdbra', 's39_cfdr',
    's39_cfdtr', 's39_cfebr', 's39_cfebra', 's39_cfer', 's39_cfi',
    's39_cfxbr', 's39_cfxbra', 's39_cfxr', 's39_cfxtr', 's39_cg',
    's39_cgdbr', 's39_cgdbra', 's39_cgdr', 's39_cgdtr', 's39_cgdtra',
    's39_cgebr', 's39_cgebra', 's39_cger', 's39_cgf', 's39_cgfi',
    's39_cgfr', 's39_cgfrl', 's39_cgh', 's39_cghi', 's39_cghrl',
    's39_cghsi', 's39_cgib', 's39_cgibh', 's39_cgible', 's39_cgiblh',
    's39_cgibnhe', 's39_cgibnl', 's39_cgibnlh', 's39_cgij',
    's39_cgijh', 's39_cgijle', 's39_cgijlh', 's39_cgijnhe',
    's39_cgijnl', 's39_cgijnlh', 's39_cgit', 's39_cgith',
    's39_cgitle', 's39_cgitlh', 's39_cgitnhe', 's39_cgitnl',
    's39_cgitnlh', 's39_cgr', 's39_cgrb', 's39_cgrbh', 's39_cgrble',
    's39_cgrblh', 's39_cgrbnhe', 's39_cgrbnl', 's39_cgrbnlh',
    's39_cgrj', 's39_cgrjh', 's39_cgrjle', 's39_cgrjlh',
    's39_cgrjnhe', 's39_cgrjnl', 's39_cgrjnlh', 's39_cgrl',
    's39_cgrt', 's39_cgrth', 's39_cgrtle', 's39_cgrtlh',
    's39_cgrtnhe', 's39_cgrtnl', 's39_cgrtnlh', 's39_cgxbr',
    's39_cgxbra', 's39_cgxr', 's39_cgxtr', 's39_cgxtra', 's39_ch',
    's39_chf', 's39_chhr', 's39_chhsi', 's39_chi', 's39_chlr',
    's39_chrl', 's39_chsi', 's39_chy', 's39_cib', 's39_cibh',
    's39_cible', 's39_ciblh', 's39_cibnhe', 's39_cibnl', 's39_cibnlh',
    's39_cih', 's39_cij', 's39_cijh', 's39_cijle', 's39_cijlh',
    's39_cijnhe', 's39_cijnl', 's39_cijnlh', 's39_cit', 's39_cith',
    's39_citle', 's39_citlh', 's39_citnhe', 's39_citnl', 's39_citnlh',
    's39_cksm', 's39_cl', 's39_clc', 's39_clcl', 's39_clcle',
    's39_clclu', 's39_clfdbr', 's39_clfdtr', 's39_clfebr',
    's39_clfhsi', 's39_clfi', 's39_clfit', 's39_clfith',
    's39_clfitle', 's39_clfitlh', 's39_clfitnhe', 's39_clfitnl',
    's39_clfitnlh', 's39_clfxbr', 's39_clfxtr', 's39_clg',
    's39_clgdbr', 's39_clgdtr', 's39_clgebr', 's39_clgf', 's39_clgfi',
    's39_clgfr', 's39_clgfrl', 's39_clghrl', 's39_clghsi',
    's39_clgib', 's39_clgibh', 's39_clgible', 's39_clgiblh',
    's39_clgibnhe', 's39_clgibnl', 's39_clgibnlh', 's39_clgij',
    's39_clgijh', 's39_clgijle', 's39_clgijlh', 's39_clgijnhe',
    's39_clgijnl', 's39_clgijnlh', 's39_clgit', 's39_clgith',
    's39_clgitle', 's39_clgitlh', 's39_clgitnhe', 's39_clgitnl',
    's39_clgitnlh', 's39_clgr', 's39_clgrb', 's39_clgrbh',
    's39_clgrble', 's39_clgrblh', 's39_clgrbnhe', 's39_clgrbnl',
    's39_clgrbnlh', 's39_clgrj', 's39_clgrjh', 's39_clgrjle',
    's39_clgrjlh', 's39_clgrjnhe', 's39_clgrjnl', 's39_clgrjnlh',
    's39_clgrl', 's39_clgrt', 's39_clgrth', 's39_clgrtle',
    's39_clgrtlh', 's39_clgrtnhe', 's39_clgrtnl', 's39_clgrtnlh',
    's39_clgt', 's39_clgth', 's39_clgtle', 's39_clgtlh',
    's39_clgtnhe', 's39_clgtnl', 's39_clgtnlh', 's39_clgxbr',
    's39_clgxtr', 's39_clhf', 's39_clhhr', 's39_clhhsi', 's39_clhlr',
    's39_clhrl', 's39_cli', 's39_clib', 's39_clibh', 's39_clible',
    's39_cliblh', 's39_clibnhe', 's39_clibnl', 's39_clibnlh',
    's39_clih', 's39_clij', 's39_clijh', 's39_clijle', 's39_clijlh',
    's39_clijnhe', 's39_clijnl', 's39_clijnlh', 's39_cliy', 's39_clm',
    's39_clmh', 's39_clmy', 's39_clr', 's39_clrb', 's39_clrbh',
    's39_clrble', 's39_clrblh', 's39_clrbnhe', 's39_clrbnl',
    's39_clrbnlh', 's39_clrj', 's39_clrjh', 's39_clrjle',
    's39_clrjlh', 's39_clrjnhe', 's39_clrjnl', 's39_clrjnlh',
    's39_clrl', 's39_clrt', 's39_clrth', 's39_clrtle', 's39_clrtlh',
    's39_clrtnhe', 's39_clrtnl', 's39_clrtnlh', 's39_clst', 's39_clt',
    's39_clth', 's39_cltle', 's39_cltlh', 's39_cltnhe', 's39_cltnl',
    's39_cltnlh', 's39_cly', 's39_cmpsc', 's39_cp', 's39_cpdt',
    's39_cpsdr', 's39_cpxt', 's39_cpya', 's39_cr', 's39_crb',
    's39_crbh', 's39_crble', 's39_crblh', 's39_crbnhe', 's39_crbnl',
    's39_crbnlh', 's39_crdte', 's39_crj', 's39_crjh', 's39_crjle',
    's39_crjlh', 's39_crjnhe', 's39_crjnl', 's39_crjnlh', 's39_crl',
    's39_crt', 's39_crth', 's39_crtle', 's39_crtlh', 's39_crtnhe',
    's39_crtnl', 's39_crtnlh', 's39_cs', 's39_csch', 's39_csdtr',
    's39_csg', 's39_csp', 's39_cspg', 's39_csst', 's39_csxtr',
    's39_csy', 's39_cu12', 's39_cu14', 's39_cu21', 's39_cu24',
    's39_cu41', 's39_cu42', 's39_cudtr', 's39_cuse', 's39_cutfu',
    's39_cuutf', 's39_cuxtr', 's39_cvb', 's39_cvbg', 's39_cvby',
    's39_cvd', 's39_cvdg', 's39_cvdy', 's39_cxbr', 's39_cxfbr',
    's39_cxfbra', 's39_cxfr', 's39_cxftr', 's39_cxgbr', 's39_cxgbra',
    's39_cxgr', 's39_cxgtr', 's39_cxgtra', 's39_cxlfbr', 's39_cxlftr',
    's39_cxlgbr', 's39_cxlgtr', 's39_cxpt', 's39_cxr', 's39_cxstr',
    's39_cxtr', 's39_cxutr', 's39_cxzt', 's39_cy', 's39_czdt',
    's39_czxt', 's39_d', 's39_dd', 's39_ddb', 's39_ddbr', 's39_ddr',
    's39_ddtr', 's39_ddtra', 's39_de', 's39_deb', 's39_debr',
    's39_der', 's39_dfltcc', 's39_diag', 's39_didbr', 's39_diebr',
    's39_dl', 's39_dlg', 's39_dlgr', 's39_dlr', 's39_dp', 's39_dr',
    's39_dsg', 's39_dsgf', 's39_dsgfr', 's39_dsgr', 's39_dxbr',
    's39_dxr', 's39_dxtr', 's39_dxtra', 's39_ear', 's39_ecag',
    's39_ecctr', 's39_ecpga', 's39_ectg', 's39_ed', 's39_edmk',
    's39_eedtr', 's39_eextr', 's39_efpc', 's39_epair', 's39_epar',
    's39_epctr', 's39_epsw', 's39_ereg', 's39_eregg', 's39_esair',
    's39_esar', 's39_esdtr', 's39_esea', 's39_esta', 's39_esxtr',
    's39_etnd', 's39_ex', 's39_exrl', 's39_fidbr', 's39_fidbra',
    's39_fidr', 's39_fidtr', 's39_fiebr', 's39_fiebra', 's39_fier',
    's39_fixbr', 's39_fixbra', 's39_fixr', 's39_fixtr', 's39_flogr',
    's39_hdr', 's39_her', 's39_hsch', 's39_iac', 's39_ic', 's39_icm',
    's39_icmh', 's39_icmy', 's39_icy', 's39_idte', 's39_iedtr',
    's39_iextr', 's39_iihf', 's39_iihh', 's39_iihl', 's39_iilf',
    's39_iilh', 's39_iill', 's39_ipk', 's39_ipm', 's39_ipte',
    's39_irbm', 's39_iske', 's39_ivsk', 's39_j', 's39_je', 's39_jg',
    's39_jge', 's39_jgh', 's39_jghe', 's39_jgl', 's39_jgle',
    's39_jglh', 's39_jgne', 's39_jgnh', 's39_jgnhe', 's39_jgnl',
    's39_jgnle', 's39_jgnlh', 's39_jgno', 's39_jgo', 's39_jh',
    's39_jhe', 's39_jl', 's39_jle', 's39_jlh', 's39_jne', 's39_jnh',
    's39_jnhe', 's39_jnl', 's39_jnle', 's39_jnlh', 's39_jno',
    's39_jo', 's39_kdb', 's39_kdbr', 's39_kdsa', 's39_kdtr',
    's39_keb', 's39_kebr', 's39_kimd', 's39_klmd', 's39_km',
    's39_kma', 's39_kmac', 's39_kmc', 's39_kmctr', 's39_kmf',
    's39_kmo', 's39_kxbr', 's39_kxtr', 's39_l', 's39_la', 's39_laa',
    's39_laag', 's39_laal', 's39_laalg', 's39_lae', 's39_laey',
    's39_lam', 's39_lamy', 's39_lan', 's39_lang', 's39_lao',
    's39_laog', 's39_larl', 's39_lasp', 's39_last', 's39_lat',
    's39_lax', 's39_laxg', 's39_lay', 's39_lb', 's39_lbh', 's39_lbr',
    's39_lcbb', 's39_lcctl', 's39_lcdbr', 's39_lcdfr', 's39_lcdr',
    's39_lcebr', 's39_lcer', 's39_lcgfr', 's39_lcgr', 's39_lcr',
    's39_lctl', 's39_lctlg', 's39_lcxbr', 's39_lcxr', 's39_ld',
    's39_lde', 's39_ldeb', 's39_ldebr', 's39_lder', 's39_ldetr',
    's39_ldgr', 's39_ldr', 's39_ldrv', 's39_ldxbr', 's39_ldxbra',
    's39_ldxr', 's39_ldxtr', 's39_ldy', 's39_le', 's39_ledbr',
    's39_ledbra', 's39_ledr', 's39_ledtr', 's39_ler', 's39_lerv',
    's39_lexbr', 's39_lexbra', 's39_lexr', 's39_ley', 's39_lfas',
    's39_lfh', 's39_lfhat', 's39_lfpc', 's39_lg', 's39_lgat',
    's39_lgb', 's39_lgbr', 's39_lgdr', 's39_lgf', 's39_lgfi',
    's39_lgfr', 's39_lgfrl', 's39_lgg', 's39_lgh', 's39_lghi',
    's39_lghr', 's39_lghrl', 's39_lgr', 's39_lgrl', 's39_lgsc',
    's39_lh', 's39_lhh', 's39_lhi', 's39_lhr', 's39_lhrl', 's39_lhy',
    's39_llc', 's39_llch', 's39_llcr', 's39_llgc', 's39_llgcr',
    's39_llgf', 's39_llgfat', 's39_llgfr', 's39_llgfrl', 's39_llgfsg',
    's39_llgh', 's39_llghr', 's39_llghrl', 's39_llgt', 's39_llgtat',
    's39_llgtr', 's39_llh', 's39_llhh', 's39_llhr', 's39_llhrl',
    's39_llihf', 's39_llihh', 's39_llihl', 's39_llilf', 's39_llilh',
    's39_llill', 's39_llzrgf', 's39_lm', 's39_lmd', 's39_lmg',
    's39_lmh', 's39_lmy', 's39_lndbr', 's39_lndfr', 's39_lndr',
    's39_lnebr', 's39_lner', 's39_lngfr', 's39_lngr', 's39_lnr',
    's39_lnxbr', 's39_lnxr', 's39_loc', 's39_loce', 's39_locfh',
    's39_locfhe', 's39_locfhh', 's39_locfhhe', 's39_locfhl',
    's39_locfhle', 's39_locfhlh', 's39_locfhne', 's39_locfhnh',
    's39_locfhnhe', 's39_locfhnl', 's39_locfhnle', 's39_locfhnlh',
    's39_locfhno', 's39_locfho', 's39_locfhr', 's39_locfhre',
    's39_locfhrh', 's39_locfhrhe', 's39_locfhrl', 's39_locfhrle',
    's39_locfhrlh', 's39_locfhrne', 's39_locfhrnh', 's39_locfhrnhe',
    's39_locfhrnl', 's39_locfhrnle', 's39_locfhrnlh', 's39_locfhrno',
    's39_locfhro', 's39_locg', 's39_locge', 's39_locgh', 's39_locghe',
    's39_locghi', 's39_locghie', 's39_locghih', 's39_locghihe',
    's39_locghil', 's39_locghile', 's39_locghilh', 's39_locghine',
    's39_locghinh', 's39_locghinhe', 's39_locghinl', 's39_locghinle',
    's39_locghinlh', 's39_locghino', 's39_locghio', 's39_locgl',
    's39_locgle', 's39_locglh', 's39_locgne', 's39_locgnh',
    's39_locgnhe', 's39_locgnl', 's39_locgnle', 's39_locgnlh',
    's39_locgno', 's39_locgo', 's39_locgr', 's39_locgre',
    's39_locgrh', 's39_locgrhe', 's39_locgrl', 's39_locgrle',
    's39_locgrlh', 's39_locgrne', 's39_locgrnh', 's39_locgrnhe',
    's39_locgrnl', 's39_locgrnle', 's39_locgrnlh', 's39_locgrno',
    's39_locgro', 's39_loch', 's39_loche', 's39_lochhi',
    's39_lochhie', 's39_lochhih', 's39_lochhihe', 's39_lochhil',
    's39_lochhile', 's39_lochhilh', 's39_lochhine', 's39_lochhinh',
    's39_lochhinhe', 's39_lochhinl', 's39_lochhinle', 's39_lochhinlh',
    's39_lochhino', 's39_lochhio', 's39_lochi', 's39_lochie',
    's39_lochih', 's39_lochihe', 's39_lochil', 's39_lochile',
    's39_lochilh', 's39_lochine', 's39_lochinh', 's39_lochinhe',
    's39_lochinl', 's39_lochinle', 's39_lochinlh', 's39_lochino',
    's39_lochio', 's39_locl', 's39_locle', 's39_loclh', 's39_locne',
    's39_locnh', 's39_locnhe', 's39_locnl', 's39_locnle',
    's39_locnlh', 's39_locno', 's39_loco', 's39_locr', 's39_locre',
    's39_locrh', 's39_locrhe', 's39_locrl', 's39_locrle',
    's39_locrlh', 's39_locrne', 's39_locrnh', 's39_locrnhe',
    's39_locrnl', 's39_locrnle', 's39_locrnlh', 's39_locrno',
    's39_locro', 's39_lpctl', 's39_lpd', 's39_lpdbr', 's39_lpdfr',
    's39_lpdg', 's39_lpdr', 's39_lpebr', 's39_lper', 's39_lpgfr',
    's39_lpgr', 's39_lpp', 's39_lpq', 's39_lpr', 's39_lpsw',
    's39_lpswe', 's39_lptea', 's39_lpxbr', 's39_lpxr', 's39_lr',
    's39_lra', 's39_lrag', 's39_lray', 's39_lrdr', 's39_lrer',
    's39_lrl', 's39_lrv', 's39_lrvg', 's39_lrvgr', 's39_lrvh',
    's39_lrvr', 's39_lsctl', 's39_lt', 's39_ltdbr', 's39_ltdr',
    's39_ltdtr', 's39_ltebr', 's39_lter', 's39_ltg', 's39_ltgf',
    's39_ltgfr', 's39_ltgr', 's39_ltr', 's39_ltxbr', 's39_ltxr',
    's39_ltxtr', 's39_lura', 's39_lurag', 's39_lxd', 's39_lxdb',
    's39_lxdbr', 's39_lxdr', 's39_lxdtr', 's39_lxe', 's39_lxeb',
    's39_lxebr', 's39_lxer', 's39_lxr', 's39_ly', 's39_lzdr',
    's39_lzer', 's39_lzrf', 's39_lzrg', 's39_lzxr', 's39_m',
    's39_mad', 's39_madb', 's39_madbr', 's39_madr', 's39_mae',
    's39_maeb', 's39_maebr', 's39_maer', 's39_may', 's39_mayh',
    's39_mayhr', 's39_mayl', 's39_maylr', 's39_mayr', 's39_mc',
    's39_md', 's39_mdb', 's39_mdbr', 's39_mde', 's39_mdeb',
    's39_mdebr', 's39_mder', 's39_mdr', 's39_mdtr', 's39_mdtra',
    's39_me', 's39_mee', 's39_meeb', 's39_meebr', 's39_meer',
    's39_mer', 's39_mfy', 's39_mg', 's39_mgh', 's39_mghi', 's39_mgrk',
    's39_mh', 's39_mhi', 's39_mhy', 's39_ml', 's39_mlg', 's39_mlgr',
    's39_mlr', 's39_mp', 's39_mr', 's39_ms', 's39_msc', 's39_msch',
    's39_msd', 's39_msdb', 's39_msdbr', 's39_msdr', 's39_mse',
    's39_mseb', 's39_msebr', 's39_mser', 's39_msfi', 's39_msg',
    's39_msgc', 's39_msgf', 's39_msgfi', 's39_msgfr', 's39_msgr',
    's39_msgrkc', 's39_msr', 's39_msrkc', 's39_msta', 's39_msy',
    's39_mvc', 's39_mvcdk', 's39_mvcin', 's39_mvck', 's39_mvcl',
    's39_mvcle', 's39_mvclu', 's39_mvcos', 's39_mvcp', 's39_mvcrl',
    's39_mvcs', 's39_mvcsk', 's39_mvghi', 's39_mvhhi', 's39_mvhi',
    's39_mvi', 's39_mviy', 's39_mvn', 's39_mvo', 's39_mvpg',
    's39_mvst', 's39_mvz', 's39_mxbr', 's39_mxd', 's39_mxdb',
    's39_mxdbr', 's39_mxdr', 's39_mxr', 's39_mxtr', 's39_mxtra',
    's39_my', 's39_myh', 's39_myhr', 's39_myl', 's39_mylr', 's39_myr',
    's39_n', 's39_nc', 's39_ncgrk', 's39_ncrk', 's39_ng', 's39_ngr',
    's39_ngrk', 's39_ni', 's39_niai', 's39_nihf', 's39_nihh',
    's39_nihl', 's39_nilf', 's39_nilh', 's39_nill', 's39_niy',
    's39_nngrk', 's39_nnrk', 's39_nogrk', 's39_nop', 's39_nopr',
    's39_nork', 's39_nr', 's39_nrk', 's39_ntstg', 's39_null',
    's39_nxgrk', 's39_nxrk', 's39_ny', 's39_o', 's39_oc', 's39_ocgrk',
    's39_ocrk', 's39_og', 's39_ogr', 's39_ogrk', 's39_oi', 's39_oihf',
    's39_oihh', 's39_oihl', 's39_oilf', 's39_oilh', 's39_oill',
    's39_oiy', 's39_or', 's39_ork', 's39_oy', 's39_pack', 's39_palb',
    's39_pc', 's39_pcc', 's39_pckmo', 's39_pfd', 's39_pfdrl',
    's39_pfmf', 's39_pfpo', 's39_pgin', 's39_pgout', 's39_pka',
    's39_pku', 's39_plo', 's39_popcnt', 's39_ppa', 's39_ppno',
    's39_pr', 's39_prno', 's39_pt', 's39_ptf', 's39_ptff', 's39_pti',
    's39_ptlb', 's39_qadtr', 's39_qaxtr', 's39_qctri', 's39_qsi',
    's39_rchp', 's39_risbg', 's39_risbgn', 's39_risbhg', 's39_risblg',
    's39_rll', 's39_rllg', 's39_rnsbg', 's39_rosbg', 's39_rp',
    's39_rrbe', 's39_rrbm', 's39_rrdtr', 's39_rrxtr', 's39_rsch',
    's39_rxsbg', 's39_s', 's39_sac', 's39_sacf', 's39_sal',
    's39_sam24', 's39_sam31', 's39_sam64', 's39_sar', 's39_scctr',
    's39_schm', 's39_sck', 's39_sckc', 's39_sckpf', 's39_sd',
    's39_sdb', 's39_sdbr', 's39_sdr', 's39_sdtr', 's39_sdtra',
    's39_se', 's39_seb', 's39_sebr', 's39_selgr', 's39_selgre',
    's39_selgrh', 's39_selgrhe', 's39_selgrl', 's39_selgrle',
    's39_selgrlh', 's39_selgrne', 's39_selgrnh', 's39_selgrnhe',
    's39_selgrnl', 's39_selgrnle', 's39_selgrnlh', 's39_selgrno',
    's39_selgro', 's39_selhhhr', 's39_selhhhre', 's39_selhhhrh',
    's39_selhhhrhe', 's39_selhhhrl', 's39_selhhhrle', 's39_selhhhrlh',
    's39_selhhhrne', 's39_selhhhrnh', 's39_selhhhrnhe',
    's39_selhhhrnl', 's39_selhhhrnle', 's39_selhhhrnlh',
    's39_selhhhrno', 's39_selhhhro', 's39_selr', 's39_selre',
    's39_selrh', 's39_selrhe', 's39_selrl', 's39_selrle',
    's39_selrlh', 's39_selrne', 's39_selrnh', 's39_selrnhe',
    's39_selrnl', 's39_selrnle', 's39_selrnlh', 's39_selrno',
    's39_selro', 's39_ser', 's39_sfasr', 's39_sfpc', 's39_sg',
    's39_sgf', 's39_sgfr', 's39_sgh', 's39_sgr', 's39_sgrk', 's39_sh',
    's39_shhhr', 's39_shhlr', 's39_shy', 's39_sie', 's39_siga',
    's39_sigp', 's39_sl', 's39_sla', 's39_slag', 's39_slak',
    's39_slb', 's39_slbg', 's39_slbgr', 's39_slbr', 's39_slda',
    's39_sldl', 's39_sldt', 's39_slfi', 's39_slg', 's39_slgf',
    's39_slgfi', 's39_slgfr', 's39_slgr', 's39_slgrk', 's39_slhhhr',
    's39_slhhlr', 's39_sll', 's39_sllg', 's39_sllk', 's39_slr',
    's39_slrk', 's39_slxt', 's39_sly', 's39_sortl', 's39_sp',
    's39_spctr', 's39_spka', 's39_spm', 's39_spt', 's39_spx',
    's39_sqd', 's39_sqdb', 's39_sqdbr', 's39_sqdr', 's39_sqe',
    's39_sqeb', 's39_sqebr', 's39_sqer', 's39_sqxbr', 's39_sqxr',
    's39_sr', 's39_sra', 's39_srag', 's39_srak', 's39_srda',
    's39_srdl', 's39_srdt', 's39_srk', 's39_srl', 's39_srlg',
    's39_srlk', 's39_srnm', 's39_srnmb', 's39_srnmt', 's39_srp',
    's39_srst', 's39_srstu', 's39_srxt', 's39_ssair', 's39_ssar',
    's39_ssch', 's39_sske', 's39_ssm', 's39_st', 's39_stam',
    's39_stamy', 's39_stap', 's39_stc', 's39_stch', 's39_stck',
    's39_stckc', 's39_stcke', 's39_stckf', 's39_stcm', 's39_stcmh',
    's39_stcmy', 's39_stcps', 's39_stcrw', 's39_stctg', 's39_stctl',
    's39_stcy', 's39_std', 's39_stdrv', 's39_stdy', 's39_ste',
    's39_sterv', 's39_stey', 's39_stfh', 's39_stfl', 's39_stfle',
    's39_stfpc', 's39_stg', 's39_stgrl', 's39_stgsc', 's39_sth',
    's39_sthh', 's39_sthrl', 's39_sthy', 's39_stidp', 's39_stm',
    's39_stmg', 's39_stmh', 's39_stmy', 's39_stnsm', 's39_stoc',
    's39_stoce', 's39_stocfh', 's39_stocfhe', 's39_stocfhh',
    's39_stocfhhe', 's39_stocfhl', 's39_stocfhle', 's39_stocfhlh',
    's39_stocfhne', 's39_stocfhnh', 's39_stocfhnhe', 's39_stocfhnl',
    's39_stocfhnle', 's39_stocfhnlh', 's39_stocfhno', 's39_stocfho',
    's39_stocg', 's39_stocge', 's39_stocgh', 's39_stocghe',
    's39_stocgl', 's39_stocgle', 's39_stocglh', 's39_stocgne',
    's39_stocgnh', 's39_stocgnhe', 's39_stocgnl', 's39_stocgnle',
    's39_stocgnlh', 's39_stocgno', 's39_stocgo', 's39_stoch',
    's39_stoche', 's39_stocl', 's39_stocle', 's39_stoclh',
    's39_stocne', 's39_stocnh', 's39_stocnhe', 's39_stocnl',
    's39_stocnle', 's39_stocnlh', 's39_stocno', 's39_stoco',
    's39_stosm', 's39_stpq', 's39_stpt', 's39_stpx', 's39_strag',
    's39_strl', 's39_strv', 's39_strvg', 's39_strvh', 's39_stsch',
    's39_stsi', 's39_stura', 's39_sturg', 's39_sty', 's39_su',
    's39_sur', 's39_svc', 's39_sw', 's39_swr', 's39_sxbr', 's39_sxr',
    's39_sxtr', 's39_sxtra', 's39_sy', 's39_tabort', 's39_tam',
    's39_tar', 's39_tb', 's39_tbdr', 's39_tbedr', 's39_tbegin',
    's39_tbeginc', 's39_tcdb', 's39_tceb', 's39_tcxb', 's39_tdcdt',
    's39_tdcet', 's39_tdcxt', 's39_tdgdt', 's39_tdget', 's39_tdgxt',
    's39_tend', 's39_thder', 's39_thdr', 's39_tm', 's39_tmhh',
    's39_tmhl', 's39_tmlh', 's39_tmll', 's39_tmy', 's39_tp',
    's39_tpei', 's39_tpi', 's39_tprot', 's39_tr', 's39_trace',
    's39_tracg', 's39_trap2', 's39_trap4', 's39_tre', 's39_troo',
    's39_trot', 's39_trt', 's39_trte', 's39_trto', 's39_trtr',
    's39_trtre', 's39_trtt', 's39_ts', 's39_tsch', 's39_unpk',
    's39_unpka', 's39_unpku', 's39_upt', 's39_va', 's39_vab',
    's39_vac', 's39_vacc', 's39_vaccb', 's39_vaccc', 's39_vacccq',
    's39_vaccf', 's39_vaccg', 's39_vacch', 's39_vaccq', 's39_vacq',
    's39_vaf', 's39_vag', 's39_vah', 's39_vap', 's39_vaq', 's39_vavg',
    's39_vavgb', 's39_vavgf', 's39_vavgg', 's39_vavgh', 's39_vavgl',
    's39_vavglb', 's39_vavglf', 's39_vavglg', 's39_vavglh',
    's39_vbperm', 's39_vcdg', 's39_vcdgb', 's39_vcdlg', 's39_vcdlgb',
    's39_vcefb', 's39_vcelfb', 's39_vceq', 's39_vceqb', 's39_vceqbs',
    's39_vceqf', 's39_vceqfs', 's39_vceqg', 's39_vceqgs', 's39_vceqh',
    's39_vceqhs', 's39_vcfeb', 's39_vcfpl', 's39_vcfps', 's39_vcgd',
    's39_vcgdb', 's39_vch', 's39_vchb', 's39_vchbs', 's39_vchf',
    's39_vchfs', 's39_vchg', 's39_vchgs', 's39_vchh', 's39_vchhs',
    's39_vchl', 's39_vchlb', 's39_vchlbs', 's39_vchlf', 's39_vchlfs',
    's39_vchlg', 's39_vchlgs', 's39_vchlh', 's39_vchlhs', 's39_vcksm',
    's39_vclfeb', 's39_vclfp', 's39_vclgd', 's39_vclgdb', 's39_vclz',
    's39_vclzb', 's39_vclzf', 's39_vclzg', 's39_vclzh', 's39_vcp',
    's39_vcsfp', 's39_vctz', 's39_vctzb', 's39_vctzf', 's39_vctzg',
    's39_vctzh', 's39_vcvb', 's39_vcvbg', 's39_vcvd', 's39_vcvdg',
    's39_vdp', 's39_vec', 's39_vecb', 's39_vecf', 's39_vecg',
    's39_vech', 's39_vecl', 's39_veclb', 's39_veclf', 's39_veclg',
    's39_veclh', 's39_verim', 's39_verimb', 's39_verimf',
    's39_verimg', 's39_verimh', 's39_verll', 's39_verllb',
    's39_verllf', 's39_verllg', 's39_verllh', 's39_verllv',
    's39_verllvb', 's39_verllvf', 's39_verllvg', 's39_verllvh',
    's39_vesl', 's39_veslb', 's39_veslf', 's39_veslg', 's39_veslh',
    's39_veslv', 's39_veslvb', 's39_veslvf', 's39_veslvg',
    's39_veslvh', 's39_vesra', 's39_vesrab', 's39_vesraf',
    's39_vesrag', 's39_vesrah', 's39_vesrav', 's39_vesravb',
    's39_vesravf', 's39_vesravg', 's39_vesravh', 's39_vesrl',
    's39_vesrlb', 's39_vesrlf', 's39_vesrlg', 's39_vesrlh',
    's39_vesrlv', 's39_vesrlvb', 's39_vesrlvf', 's39_vesrlvg',
    's39_vesrlvh', 's39_vfa', 's39_vfadb', 's39_vfae', 's39_vfaeb',
    's39_vfaebs', 's39_vfaef', 's39_vfaefs', 's39_vfaeh',
    's39_vfaehs', 's39_vfaezb', 's39_vfaezbs', 's39_vfaezf',
    's39_vfaezfs', 's39_vfaezh', 's39_vfaezhs', 's39_vfasb',
    's39_vfce', 's39_vfcedb', 's39_vfcedbs', 's39_vfcesb',
    's39_vfcesbs', 's39_vfch', 's39_vfchdb', 's39_vfchdbs',
    's39_vfche', 's39_vfchedb', 's39_vfchedbs', 's39_vfchesb',
    's39_vfchesbs', 's39_vfchsb', 's39_vfchsbs', 's39_vfd',
    's39_vfddb', 's39_vfdsb', 's39_vfee', 's39_vfeeb', 's39_vfeebs',
    's39_vfeef', 's39_vfeefs', 's39_vfeeh', 's39_vfeehs',
    's39_vfeezb', 's39_vfeezbs', 's39_vfeezf', 's39_vfeezfs',
    's39_vfeezh', 's39_vfeezhs', 's39_vfene', 's39_vfeneb',
    's39_vfenebs', 's39_vfenef', 's39_vfenefs', 's39_vfeneh',
    's39_vfenehs', 's39_vfenezb', 's39_vfenezbs', 's39_vfenezf',
    's39_vfenezfs', 's39_vfenezh', 's39_vfenezhs', 's39_vfi',
    's39_vfidb', 's39_vfisb', 's39_vfkedb', 's39_vfkedbs',
    's39_vfkesb', 's39_vfkesbs', 's39_vfkhdb', 's39_vfkhdbs',
    's39_vfkhedb', 's39_vfkhedbs', 's39_vfkhesb', 's39_vfkhesbs',
    's39_vfkhsb', 's39_vfkhsbs', 's39_vflcdb', 's39_vflcsb',
    's39_vfll', 's39_vflls', 's39_vflndb', 's39_vflnsb', 's39_vflpdb',
    's39_vflpsb', 's39_vflr', 's39_vflrd', 's39_vfm', 's39_vfma',
    's39_vfmadb', 's39_vfmasb', 's39_vfmax', 's39_vfmaxdb',
    's39_vfmaxsb', 's39_vfmdb', 's39_vfmin', 's39_vfmindb',
    's39_vfminsb', 's39_vfms', 's39_vfmsb', 's39_vfmsdb',
    's39_vfmssb', 's39_vfnma', 's39_vfnmadb', 's39_vfnmasb',
    's39_vfnms', 's39_vfnmsdb', 's39_vfnmssb', 's39_vfpso',
    's39_vfpsodb', 's39_vfpsosb', 's39_vfs', 's39_vfsdb', 's39_vfsq',
    's39_vfsqdb', 's39_vfsqsb', 's39_vfssb', 's39_vftci',
    's39_vftcidb', 's39_vftcisb', 's39_vgbm', 's39_vgef', 's39_vgeg',
    's39_vgfm', 's39_vgfma', 's39_vgfmab', 's39_vgfmaf', 's39_vgfmag',
    's39_vgfmah', 's39_vgfmb', 's39_vgfmf', 's39_vgfmg', 's39_vgfmh',
    's39_vgm', 's39_vgmb', 's39_vgmf', 's39_vgmg', 's39_vgmh',
    's39_vistr', 's39_vistrb', 's39_vistrbs', 's39_vistrf',
    's39_vistrfs', 's39_vistrh', 's39_vistrhs', 's39_vl', 's39_vlbb',
    's39_vlbr', 's39_vlbrf', 's39_vlbrg', 's39_vlbrh', 's39_vlbrq',
    's39_vlbrrep', 's39_vlbrrepf', 's39_vlbrrepg', 's39_vlbrreph',
    's39_vlc', 's39_vlcb', 's39_vlcf', 's39_vlcg', 's39_vlch',
    's39_vlde', 's39_vldeb', 's39_vleb', 's39_vlebrf', 's39_vlebrg',
    's39_vlebrh', 's39_vled', 's39_vledb', 's39_vlef', 's39_vleg',
    's39_vleh', 's39_vleib', 's39_vleif', 's39_vleig', 's39_vleih',
    's39_vler', 's39_vlerf', 's39_vlerg', 's39_vlerh', 's39_vlgv',
    's39_vlgvb', 's39_vlgvf', 's39_vlgvg', 's39_vlgvh', 's39_vlip',
    's39_vll', 's39_vllebrz', 's39_vllebrze', 's39_vllebrzf',
    's39_vllebrzg', 's39_vllebrzh', 's39_vllez', 's39_vllezb',
    's39_vllezf', 's39_vllezg', 's39_vllezh', 's39_vllezlf',
    's39_vlm', 's39_vlp', 's39_vlpb', 's39_vlpf', 's39_vlpg',
    's39_vlph', 's39_vlr', 's39_vlrep', 's39_vlrepb', 's39_vlrepf',
    's39_vlrepg', 's39_vlreph', 's39_vlrl', 's39_vlrlr', 's39_vlvg',
    's39_vlvgb', 's39_vlvgf', 's39_vlvgg', 's39_vlvgh', 's39_vlvgp',
    's39_vmae', 's39_vmaeb', 's39_vmaef', 's39_vmaeh', 's39_vmah',
    's39_vmahb', 's39_vmahf', 's39_vmahh', 's39_vmal', 's39_vmalb',
    's39_vmale', 's39_vmaleb', 's39_vmalef', 's39_vmaleh',
    's39_vmalf', 's39_vmalh', 's39_vmalhb', 's39_vmalhf',
    's39_vmalhh', 's39_vmalhw', 's39_vmalo', 's39_vmalob',
    's39_vmalof', 's39_vmaloh', 's39_vmao', 's39_vmaob', 's39_vmaof',
    's39_vmaoh', 's39_vme', 's39_vmeb', 's39_vmef', 's39_vmeh',
    's39_vmh', 's39_vmhb', 's39_vmhf', 's39_vmhh', 's39_vml',
    's39_vmlb', 's39_vmle', 's39_vmleb', 's39_vmlef', 's39_vmleh',
    's39_vmlf', 's39_vmlh', 's39_vmlhb', 's39_vmlhf', 's39_vmlhh',
    's39_vmlhw', 's39_vmlo', 's39_vmlob', 's39_vmlof', 's39_vmloh',
    's39_vmn', 's39_vmnb', 's39_vmnf', 's39_vmng', 's39_vmnh',
    's39_vmnl', 's39_vmnlb', 's39_vmnlf', 's39_vmnlg', 's39_vmnlh',
    's39_vmo', 's39_vmob', 's39_vmof', 's39_vmoh', 's39_vmp',
    's39_vmrh', 's39_vmrhb', 's39_vmrhf', 's39_vmrhg', 's39_vmrhh',
    's39_vmrl', 's39_vmrlb', 's39_vmrlf', 's39_vmrlg', 's39_vmrlh',
    's39_vmsl', 's39_vmslg', 's39_vmsp', 's39_vmx', 's39_vmxb',
    's39_vmxf', 's39_vmxg', 's39_vmxh', 's39_vmxl', 's39_vmxlb',
    's39_vmxlf', 's39_vmxlg', 's39_vmxlh', 's39_vn', 's39_vnc',
    's39_vnn', 's39_vno', 's39_vnot', 's39_vnx', 's39_vo', 's39_voc',
    's39_vone', 's39_vpdi', 's39_vperm', 's39_vpk', 's39_vpkf',
    's39_vpkg', 's39_vpkh', 's39_vpkls', 's39_vpklsf', 's39_vpklsfs',
    's39_vpklsg', 's39_vpklsgs', 's39_vpklsh', 's39_vpklshs',
    's39_vpks', 's39_vpksf', 's39_vpksfs', 's39_vpksg', 's39_vpksgs',
    's39_vpksh', 's39_vpkshs', 's39_vpkz', 's39_vpopct',
    's39_vpopctb', 's39_vpopctf', 's39_vpopctg', 's39_vpopcth',
    's39_vpsop', 's39_vrep', 's39_vrepb', 's39_vrepf', 's39_vrepg',
    's39_vreph', 's39_vrepi', 's39_vrepib', 's39_vrepif',
    's39_vrepig', 's39_vrepih', 's39_vrp', 's39_vs', 's39_vsb',
    's39_vsbcbi', 's39_vsbcbiq', 's39_vsbi', 's39_vsbiq', 's39_vscbi',
    's39_vscbib', 's39_vscbif', 's39_vscbig', 's39_vscbih',
    's39_vscbiq', 's39_vscef', 's39_vsceg', 's39_vsdp', 's39_vseg',
    's39_vsegb', 's39_vsegf', 's39_vsegh', 's39_vsel', 's39_vsf',
    's39_vsg', 's39_vsh', 's39_vsl', 's39_vslb', 's39_vsld',
    's39_vsldb', 's39_vsp', 's39_vsq', 's39_vsra', 's39_vsrab',
    's39_vsrd', 's39_vsrl', 's39_vsrlb', 's39_vsrp', 's39_vst',
    's39_vstbr', 's39_vstbrf', 's39_vstbrg', 's39_vstbrh',
    's39_vstbrq', 's39_vsteb', 's39_vstebrf', 's39_vstebrg',
    's39_vstebrh', 's39_vstef', 's39_vsteg', 's39_vsteh', 's39_vster',
    's39_vsterf', 's39_vsterg', 's39_vsterh', 's39_vstl', 's39_vstm',
    's39_vstrc', 's39_vstrcb', 's39_vstrcbs', 's39_vstrcf',
    's39_vstrcfs', 's39_vstrch', 's39_vstrchs', 's39_vstrczb',
    's39_vstrczbs', 's39_vstrczf', 's39_vstrczfs', 's39_vstrczh',
    's39_vstrczhs', 's39_vstrl', 's39_vstrlr', 's39_vstrs',
    's39_vstrsb', 's39_vstrsf', 's39_vstrsh', 's39_vstrszb',
    's39_vstrszf', 's39_vstrszh', 's39_vsum', 's39_vsumb',
    's39_vsumg', 's39_vsumgf', 's39_vsumgh', 's39_vsumh', 's39_vsumq',
    's39_vsumqf', 's39_vsumqg', 's39_vtm', 's39_vtp', 's39_vuph',
    's39_vuphb', 's39_vuphf', 's39_vuphh', 's39_vupkz', 's39_vupl',
    's39_vuplb', 's39_vuplf', 's39_vuplh', 's39_vuplhb', 's39_vuplhf',
    's39_vuplhh', 's39_vuplhw', 's39_vupll', 's39_vupllb',
    's39_vupllf', 's39_vupllh', 's39_vx', 's39_vzero', 's39_wcdgb',
    's39_wcdlgb', 's39_wcefb', 's39_wcelfb', 's39_wcfeb', 's39_wcgdb',
    's39_wclfeb', 's39_wclgdb', 's39_wfadb', 's39_wfasb', 's39_wfaxb',
    's39_wfc', 's39_wfcdb', 's39_wfcedb', 's39_wfcedbs', 's39_wfcesb',
    's39_wfcesbs', 's39_wfcexb', 's39_wfcexbs', 's39_wfchdb',
    's39_wfchdbs', 's39_wfchedb', 's39_wfchedbs', 's39_wfchesb',
    's39_wfchesbs', 's39_wfchexb', 's39_wfchexbs', 's39_wfchsb',
    's39_wfchsbs', 's39_wfchxb', 's39_wfchxbs', 's39_wfcsb',
    's39_wfcxb', 's39_wfddb', 's39_wfdsb', 's39_wfdxb', 's39_wfidb',
    's39_wfisb', 's39_wfixb', 's39_wfk', 's39_wfkdb', 's39_wfkedb',
    's39_wfkedbs', 's39_wfkesb', 's39_wfkesbs', 's39_wfkexb',
    's39_wfkexbs', 's39_wfkhdb', 's39_wfkhdbs', 's39_wfkhedb',
    's39_wfkhedbs', 's39_wfkhesb', 's39_wfkhesbs', 's39_wfkhexb',
    's39_wfkhexbs', 's39_wfkhsb', 's39_wfkhsbs', 's39_wfkhxb',
    's39_wfkhxbs', 's39_wfksb', 's39_wfkxb', 's39_wflcdb',
    's39_wflcsb', 's39_wflcxb', 's39_wflld', 's39_wflls',
    's39_wflndb', 's39_wflnsb', 's39_wflnxb', 's39_wflpdb',
    's39_wflpsb', 's39_wflpxb', 's39_wflrd', 's39_wflrx',
    's39_wfmadb', 's39_wfmasb', 's39_wfmaxb', 's39_wfmaxdb',
    's39_wfmaxsb', 's39_wfmaxxb', 's39_wfmdb', 's39_wfmindb',
    's39_wfminsb', 's39_wfminxb', 's39_wfmsb', 's39_wfmsdb',
    's39_wfmssb', 's39_wfmsxb', 's39_wfmxb', 's39_wfnmadb',
    's39_wfnmasb', 's39_wfnmaxb', 's39_wfnmsdb', 's39_wfnmssb',
    's39_wfnmsxb', 's39_wfpsodb', 's39_wfpsosb', 's39_wfpsoxb',
    's39_wfsdb', 's39_wfsqdb', 's39_wfsqsb', 's39_wfsqxb',
    's39_wfssb', 's39_wfsxb', 's39_wftcidb', 's39_wftcisb',
    's39_wftcixb', 's39_wldeb', 's39_wledb', 's39_x', 's39_xc',
    's39_xg', 's39_xgr', 's39_xgrk', 's39_xi', 's39_xihf', 's39_xilf',
    's39_xiy', 's39_xr', 's39_xrk', 's39_xsch', 's39_xy', 's39_zap',
    'save_reg_values_t', 'savebase', 'sc_auto', 'sc_ext', 'sc_friend',
    'sc_reg', 'sc_stat', 'sc_type', 'sc_unk', 'sc_virt',
    'scattered_image_t', 'sclass_t', 'screen_graph_selection_base_t',
    'section_lines_refs_t', 'sections_lines_refs_t', 'segm_added',
    'segm_attrs_updated', 'segm_class_changed', 'segm_deleted',
    'segm_end_changed', 'segm_move_info_vec_t', 'segm_moved',
    'segm_name_changed', 'segm_start_changed', 'sel_t',
    'set_func_end', 'set_func_start', 'setproc_level_t',
    'sgr_changed', 'sgr_deleted', 'simd_info_vec_t', 'sint8',
    'size_t', 'sizevec_t', 'smt_code_t', 'snapshots_t', 'socklen_t',
    'source_file_iterator', 'source_file_ptr', 'source_item_iterator',
    'source_item_ptr', 'source_items_t', 'spec_func_type_t',
    'src_item_kind_t', 'ssize_t', 'st9_adc', 'st9_adcw', 'st9_add',
    'st9_addw', 'st9_ald', 'st9_aldw', 'st9_and', 'st9_andw',
    'st9_band', 'st9_bcpl', 'st9_bld', 'st9_bor', 'st9_bres',
    'st9_bset', 'st9_btjf', 'st9_btjt', 'st9_btset', 'st9_bxor',
    'st9_call', 'st9_calls', 'st9_ccf', 'st9_clr', 'st9_cp',
    'st9_cpjfi', 'st9_cpjti', 'st9_cpl', 'st9_cpw', 'st9_da',
    'st9_dec', 'st9_decw', 'st9_di', 'st9_div', 'st9_divws',
    'st9_djnz', 'st9_dwjnz', 'st9_ei', 'st9_eret', 'st9_etrap',
    'st9_ext', 'st9_halt', 'st9_inc', 'st9_incw', 'st9_iret',
    'st9_jp', 'st9_jpcc', 'st9_jps', 'st9_jrcc', 'st9_last', 'st9_ld',
    'st9_lddd', 'st9_lddp', 'st9_ldpd', 'st9_ldpp', 'st9_ldw',
    'st9_link', 'st9_linku', 'st9_mul', 'st9_nop', 'st9_null',
    'st9_or', 'st9_orw', 'st9_pea', 'st9_peau', 'st9_pop', 'st9_popu',
    'st9_popuw', 'st9_popw', 'st9_push', 'st9_pushu', 'st9_pushuw',
    'st9_pushw', 'st9_rcf', 'st9_ret', 'st9_rets', 'st9_rlc',
    'st9_rlcw', 'st9_rol', 'st9_ror', 'st9_rrc', 'st9_rrcw',
    'st9_sbc', 'st9_sbcw', 'st9_scf', 'st9_sdm', 'st9_sla',
    'st9_slaw', 'st9_spm', 'st9_spp', 'st9_sra', 'st9_sraw',
    'st9_srp', 'st9_srp0', 'st9_srp1', 'st9_sub', 'st9_subw',
    'st9_swap', 'st9_tcm', 'st9_tcmw', 'st9_tm', 'st9_tmw',
    'st9_unlink', 'st9_unlinku', 'st9_wfi', 'st9_xch', 'st9_xor',
    'st9_xorw', 'std___Any_tag', 'std___Atomic_counter_t',
    'std___Char_traits_char16_t__unsigned_short___int_type',
    'std___Char_traits_char32_t__unsigned_int___int_type',
    'std___Char_traits_char__int___int_type',
    'std___Char_traits_unsigned_short__unsigned_short___int_type',
    'std___Char_traits_wchar_t__unsigned_short___int_type',
    'std___Container_base',
    'std___Default_allocator_traits_std__allocator_char16_t____size_type',
    'std___Default_allocator_traits_std__allocator_char32_t____size_type',
    'std___Default_allocator_traits_std__allocator_char____size_type',
    'std___Default_allocator_traits_std__allocator_int____size_type',
    'std___Default_allocator_traits_std__allocator_std___Tree_node_int__void__P_____pointer',
    'std___Default_allocator_traits_std__allocator_std___Tree_node_int__void__P_____value_type',
    'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_____pointer',
    'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_____value_type',
    'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_int__int___void__P_____pointer',
    'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_int__int___void__P_____value_type',
    'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_____pointer',
    'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_____value_type',
    'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_____pointer',
    'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_____value_type',
    'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_____pointer',
    'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_____value_type',
    'std___Default_allocator_traits_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______size_type',
    'std___Default_allocator_traits_std__allocator_std__pair_const_int__int_____size_type',
    'std___Default_allocator_traits_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____size_type',
    'std___Default_allocator_traits_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long_____size_type',
    'std___Default_allocator_traits_std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P_____size_type',
    'std___Default_allocator_traits_std__allocator_wchar_t____size_type',
    'std___Invoker_strategy',
    'std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____',
    'std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____',
    'std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char____',
    'std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____',
    'std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char16_t____',
    'std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char32_t____',
    'std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char____',
    'std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_wchar_t____',
    'std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____',
    'std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
    'std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
    'std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
    'std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
    'std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____',
    'std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
    'std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
    'std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
    'std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
    'std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____',
    'std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____',
    'std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____',
    'std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char____',
    'std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____',
    'std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char16_t____',
    'std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char32_t____',
    'std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char____',
    'std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_wchar_t____',
    'std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____',
    'std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
    'std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
    'std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
    'std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
    'std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____',
    'std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
    'std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
    'std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
    'std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
    'std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____',
    'std___Iterator_base',
    'std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______pointer',
    'std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______pointer',
    'std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char______pointer',
    'std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______pointer',
    'std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char16_t______pointer',
    'std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char32_t______pointer',
    'std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char______pointer',
    'std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_wchar_t______pointer',
    'std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______pointer',
    'std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer',
    'std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer',
    'std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer',
    'std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer',
    'std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______pointer',
    'std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer',
    'std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer',
    'std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer',
    'std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer',
    'std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______pointer',
    'std___Narrow_char_traits_char__int___int_type',
    'std___No_propagate_allocators', 'std___Propagate_allocators',
    'std___Rand_urng_from_func__result_type',
    'std___Rebind_pointer_t_void__P__std___Tree_node_int__void__P__',
    'std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__',
    'std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_int__int___void__P__',
    'std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__',
    'std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__',
    'std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P__',
    'std___Simple_types_char16_t___const_pointer',
    'std___Simple_types_char16_t___difference_type',
    'std___Simple_types_char16_t___pointer',
    'std___Simple_types_char16_t___size_type',
    'std___Simple_types_char16_t___value_type',
    'std___Simple_types_char32_t___const_pointer',
    'std___Simple_types_char32_t___difference_type',
    'std___Simple_types_char32_t___pointer',
    'std___Simple_types_char32_t___size_type',
    'std___Simple_types_char32_t___value_type',
    'std___Simple_types_char___const_pointer',
    'std___Simple_types_char___difference_type',
    'std___Simple_types_char___pointer',
    'std___Simple_types_char___size_type',
    'std___Simple_types_char___value_type',
    'std___Simple_types_int___const_pointer',
    'std___Simple_types_int___size_type',
    'std___Simple_types_int___value_type',
    'std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____const_pointer',
    'std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____pointer',
    'std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____size_type',
    'std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____value_type',
    'std___Simple_types_std__pair_const_int__int____const_pointer',
    'std___Simple_types_std__pair_const_int__int____pointer',
    'std___Simple_types_std__pair_const_int__int____size_type',
    'std___Simple_types_std__pair_const_int__int____value_type',
    'std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____const_pointer',
    'std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____pointer',
    'std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____size_type',
    'std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____value_type',
    'std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____const_pointer',
    'std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____pointer',
    'std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____size_type',
    'std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____value_type',
    'std___Simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____const_pointer',
    'std___Simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____pointer',
    'std___Simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____size_type',
    'std___Simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____value_type',
    'std___Simple_types_wchar_t___const_pointer',
    'std___Simple_types_wchar_t___difference_type',
    'std___Simple_types_wchar_t___pointer',
    'std___Simple_types_wchar_t___size_type',
    'std___Simple_types_wchar_t___value_type',
    'std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____difference_type',
    'std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____pointer',
    'std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____reference',
    'std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____value_type',
    'std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____difference_type',
    'std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____pointer',
    'std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____reference',
    'std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____value_type',
    'std___String_const_iterator_std___String_val_std___Simple_types_char_____difference_type',
    'std___String_const_iterator_std___String_val_std___Simple_types_char_____pointer',
    'std___String_const_iterator_std___String_val_std___Simple_types_char_____reference',
    'std___String_const_iterator_std___String_val_std___Simple_types_char_____value_type',
    'std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____difference_type',
    'std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____pointer',
    'std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____reference',
    'std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____value_type',
    'std___String_iterator_std___String_val_std___Simple_types_char16_t_____difference_type',
    'std___String_iterator_std___String_val_std___Simple_types_char16_t_____pointer',
    'std___String_iterator_std___String_val_std___Simple_types_char16_t_____reference',
    'std___String_iterator_std___String_val_std___Simple_types_char16_t_____value_type',
    'std___String_iterator_std___String_val_std___Simple_types_char32_t_____difference_type',
    'std___String_iterator_std___String_val_std___Simple_types_char32_t_____pointer',
    'std___String_iterator_std___String_val_std___Simple_types_char32_t_____reference',
    'std___String_iterator_std___String_val_std___Simple_types_char32_t_____value_type',
    'std___String_iterator_std___String_val_std___Simple_types_char_____difference_type',
    'std___String_iterator_std___String_val_std___Simple_types_char_____pointer',
    'std___String_iterator_std___String_val_std___Simple_types_char_____reference',
    'std___String_iterator_std___String_val_std___Simple_types_char_____value_type',
    'std___String_iterator_std___String_val_std___Simple_types_wchar_t_____difference_type',
    'std___String_iterator_std___String_val_std___Simple_types_wchar_t_____pointer',
    'std___String_iterator_std___String_val_std___Simple_types_wchar_t_____reference',
    'std___String_iterator_std___String_val_std___Simple_types_wchar_t_____value_type',
    'std___String_val_std___Simple_types_char16_t____const_pointer',
    'std___String_val_std___Simple_types_char16_t____difference_type',
    'std___String_val_std___Simple_types_char16_t____pointer',
    'std___String_val_std___Simple_types_char16_t____size_type',
    'std___String_val_std___Simple_types_char16_t____value_type',
    'std___String_val_std___Simple_types_char32_t____const_pointer',
    'std___String_val_std___Simple_types_char32_t____difference_type',
    'std___String_val_std___Simple_types_char32_t____pointer',
    'std___String_val_std___Simple_types_char32_t____size_type',
    'std___String_val_std___Simple_types_char32_t____value_type',
    'std___String_val_std___Simple_types_char____const_pointer',
    'std___String_val_std___Simple_types_char____difference_type',
    'std___String_val_std___Simple_types_char____pointer',
    'std___String_val_std___Simple_types_char____size_type',
    'std___String_val_std___Simple_types_char____value_type',
    'std___String_val_std___Simple_types_wchar_t____const_pointer',
    'std___String_val_std___Simple_types_wchar_t____difference_type',
    'std___String_val_std___Simple_types_wchar_t____pointer',
    'std___String_val_std___Simple_types_wchar_t____size_type',
    'std___String_val_std___Simple_types_wchar_t____value_type',
    'std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___allocator_type',
    'std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___key_compare',
    'std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___key_type',
    'std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_type',
    'std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___allocator_type',
    'std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___key_compare',
    'std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___key_type',
    'std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_type',
    'std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false___allocator_type',
    'std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false___key_compare',
    'std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false___key_type',
    'std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false___value_type',
    'std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___allocator_type',
    'std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___key_compare',
    'std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___key_type',
    'std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_type',
    'std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___allocator_type',
    'std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___key_compare',
    'std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___key_type',
    'std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_type',
    'std___Tree_child',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____pointer',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____reference',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____value_type',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______pointer',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______reference',
    'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______value_type',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______pointer',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______reference',
    'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______value_type',
    'std___Tree_node_int__void__P____Nodeptr',
    'std___Tree_node_int__void__P___value_type',
    'std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____Nodeptr',
    'std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___value_type',
    'std___Tree_node_std__pair_const_int__int___void__P____Nodeptr',
    'std___Tree_node_std__pair_const_int__int___void__P___value_type',
    'std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____Nodeptr',
    'std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___value_type',
    'std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____Nodeptr',
    'std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___value_type',
    'std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P____Nodeptr',
    'std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P___value_type',
    'std___Tree_simple_types_int____Node',
    'std___Tree_simple_types_int____Nodeptr',
    'std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______Node',
    'std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______Nodeptr',
    'std___Tree_simple_types_std__pair_const_int__int_____Node',
    'std___Tree_simple_types_std__pair_const_int__int_____Nodeptr',
    'std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____Node',
    'std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____Nodeptr',
    'std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____Node',
    'std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____Nodeptr',
    'std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____Node',
    'std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____Nodeptr',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Alnode',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Nodeptr',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Scary_val',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Unchecked_const_iterator',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Unchecked_iterator',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____allocator_type',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____const_iterator',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____const_reverse_iterator',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____iterator',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____key_compare',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____key_type',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____reverse_iterator',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____size_type',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____value_compare',
    'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____value_type',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Alnode',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Nodeptr',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Scary_val',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Unchecked_const_iterator',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Unchecked_iterator',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____allocator_type',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____const_iterator',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____const_reverse_iterator',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____iterator',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____key_compare',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____key_type',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____reverse_iterator',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____size_type',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____value_compare',
    'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____value_type',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false_____Alnode',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false_____Nodeptr',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false_____Scary_val',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false_____Unchecked_const_iterator',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false_____Unchecked_iterator',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____allocator_type',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____const_iterator',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____const_reverse_iterator',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____iterator',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____key_compare',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____key_type',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____reverse_iterator',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____size_type',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____value_compare',
    'std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false____value_type',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Alnode',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Nodeptr',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Scary_val',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Unchecked_const_iterator',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Unchecked_iterator',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____allocator_type',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____const_iterator',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____const_reverse_iterator',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____iterator',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____key_compare',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____key_type',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____reverse_iterator',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____size_type',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____value_compare',
    'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____value_type',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Alnode',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Nodeptr',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Scary_val',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Unchecked_const_iterator',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Unchecked_iterator',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____allocator_type',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____const_iterator',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____const_reverse_iterator',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____iterator',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____key_compare',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____key_type',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____reverse_iterator',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____size_type',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____value_compare',
    'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____value_type',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Alnode',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Nodeptr',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Scary_val',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Unchecked_const_iterator',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Unchecked_iterator',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____allocator_type',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____const_iterator',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____const_reverse_iterator',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____iterator',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____key_compare',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____key_type',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____reverse_iterator',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____size_type',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____value_compare',
    'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____value_type',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int______Nodeptr',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____pointer',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____reference',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____value_type',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________Nodeptr',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______Nodeptr',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______Nodeptr',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______Nodeptr',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______Nodeptr',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______pointer',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______reference',
    'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______value_type',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______pointer',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______reference',
    'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______value_type',
    'std___Tree_val_std___Tree_simple_types_int_____Nodeptr',
    'std___Tree_val_std___Tree_simple_types_int_____Unchecked_const_iterator',
    'std___Tree_val_std___Tree_simple_types_int____const_pointer',
    'std___Tree_val_std___Tree_simple_types_int____size_type',
    'std___Tree_val_std___Tree_simple_types_int____value_type',
    'std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______Nodeptr',
    'std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______Unchecked_const_iterator',
    'std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______const_pointer',
    'std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______pointer',
    'std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______size_type',
    'std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______value_type',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______Nodeptr',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______Unchecked_const_iterator',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____const_pointer',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____pointer',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____size_type',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____value_type',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______Nodeptr',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______Unchecked_const_iterator',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____const_pointer',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____pointer',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____size_type',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____value_type',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______Nodeptr',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______Unchecked_const_iterator',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____const_pointer',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____pointer',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____size_type',
    'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____value_type',
    'std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______Nodeptr',
    'std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______Unchecked_const_iterator',
    'std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____const_pointer',
    'std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____pointer',
    'std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____size_type',
    'std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____value_type',
    'std___Tset_traits_int__std__less_int___std__allocator_int___false___allocator_type',
    'std___Tset_traits_int__std__less_int___std__allocator_int___false___key_compare',
    'std___Tset_traits_int__std__less_int___std__allocator_int___false___key_type',
    'std___Tset_traits_int__std__less_int___std__allocator_int___false___value_compare',
    'std___Tset_traits_int__std__less_int___std__allocator_int___false___value_type',
    'std___Uninitialized', 'std___WChar_traits__Elem___int_type',
    'std___WChar_traits_char16_t___int_type',
    'std___WChar_traits_unsigned_short___int_type',
    'std___WChar_traits_wchar_t___int_type',
    'std__allocator_std___Tree_node_int__void__P____value_type',
    'std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____value_type',
    'std__allocator_std___Tree_node_std__pair_const_int__int___void__P____value_type',
    'std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____value_type',
    'std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____value_type',
    'std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P____value_type',
    'std__basic_string_char16_t____Alty',
    'std__basic_string_char16_t____Scary_val',
    'std__basic_string_char16_t___allocator_type',
    'std__basic_string_char16_t___const_iterator',
    'std__basic_string_char16_t___const_reference',
    'std__basic_string_char16_t___const_reverse_iterator',
    'std__basic_string_char16_t___iterator',
    'std__basic_string_char16_t___reference',
    'std__basic_string_char16_t___reverse_iterator',
    'std__basic_string_char16_t___size_type',
    'std__basic_string_char16_t___value_type',
    'std__basic_string_char32_t____Alty',
    'std__basic_string_char32_t____Scary_val',
    'std__basic_string_char32_t___allocator_type',
    'std__basic_string_char32_t___const_iterator',
    'std__basic_string_char32_t___const_reference',
    'std__basic_string_char32_t___const_reverse_iterator',
    'std__basic_string_char32_t___iterator',
    'std__basic_string_char32_t___reference',
    'std__basic_string_char32_t___reverse_iterator',
    'std__basic_string_char32_t___size_type',
    'std__basic_string_char32_t___value_type', 'std__false_type',
    'std__filebuf', 'std__float_denorm_style',
    'std__float_round_style', 'std__fstream', 'std__ifstream',
    'std__integral_constant_bool__false___value_type',
    'std__integral_constant_bool__true___value_type',
    'std__integral_constant_unsigned_long_long__0___value_type',
    'std__ios', 'std__iostream', 'std__istream', 'std__istringstream',
    'std__map__qstring_char___qrefcnt_t_refcnted_regex_t____allocator_type',
    'std__map__qstring_char___qrefcnt_t_refcnted_regex_t____key_compare',
    'std__map__qstring_char___qrefcnt_t_refcnted_regex_t____key_type',
    'std__map__qstring_char___qrefcnt_t_refcnted_regex_t____mapped_type',
    'std__map_int__int___allocator_type',
    'std__map_int__int___key_compare', 'std__map_int__int___key_type',
    'std__map_int__int___mapped_type',
    'std__map_network_client_handler_t__P____qthread_t__P___allocator_type',
    'std__map_network_client_handler_t__P____qthread_t__P___key_compare',
    'std__map_network_client_handler_t__P____qthread_t__P___key_type',
    'std__map_network_client_handler_t__P____qthread_t__P___mapped_type',
    'std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___allocator_type',
    'std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___key_compare',
    'std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___key_type',
    'std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___mapped_type',
    'std__map_unsigned_long_long__unsigned_long_long___allocator_type',
    'std__map_unsigned_long_long__unsigned_long_long___key_compare',
    'std__map_unsigned_long_long__unsigned_long_long___key_type',
    'std__map_unsigned_long_long__unsigned_long_long___mapped_type',
    'std__max_align_t', 'std__memory_order', 'std__new_handler',
    'std__nullptr_t', 'std__ofstream', 'std__ostream',
    'std__ostringstream',
    'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______difference_type',
    'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______pointer',
    'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______reference',
    'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______difference_type',
    'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______pointer',
    'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______reference',
    'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______difference_type',
    'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______pointer',
    'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______reference',
    'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______difference_type',
    'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______pointer',
    'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______reference',
    'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______difference_type',
    'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______pointer',
    'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______reference',
    'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______difference_type',
    'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______pointer',
    'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______reference',
    'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______difference_type',
    'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______pointer',
    'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______reference',
    'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______difference_type',
    'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______pointer',
    'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______reference',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______difference_type',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______pointer',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______reference',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________difference_type',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________reference',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______difference_type',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______reference',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______difference_type',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______reference',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______difference_type',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______reference',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______difference_type',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______pointer',
    'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______reference',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________difference_type',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________reference',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______difference_type',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______reference',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______difference_type',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______reference',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______difference_type',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______reference',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______difference_type',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______pointer',
    'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_______reference',
    'std__set_int___allocator_type', 'std__set_int___key_compare',
    'std__streambuf', 'std__streamoff', 'std__streampos',
    'std__streamsize', 'std__string', 'std__string___Alty',
    'std__string___Scary_val', 'std__string__allocator_type',
    'std__string__const_iterator', 'std__string__const_reference',
    'std__string__const_reverse_iterator', 'std__string__iterator',
    'std__string__reference', 'std__string__reverse_iterator',
    'std__string__size_type', 'std__string__value_type',
    'std__stringbuf', 'std__stringstream', 'std__true_type',
    'std__u16streampos', 'std__u16string', 'std__u32streampos',
    'std__u32string', 'std__wfilebuf', 'std__wfstream',
    'std__wifstream', 'std__wios', 'std__wiostream', 'std__wistream',
    'std__wistringstream', 'std__wofstream', 'std__wostream',
    'std__wostringstream', 'std__wstreambuf', 'std__wstreampos',
    'std__wstring', 'std__wstring___Alty', 'std__wstring___Scary_val',
    'std__wstring__allocator_type', 'std__wstring__const_iterator',
    'std__wstring__const_reference',
    'std__wstring__const_reverse_iterator', 'std__wstring__iterator',
    'std__wstring__reference', 'std__wstring__reverse_iterator',
    'std__wstring__size_type', 'std__wstring__value_type',
    'std__wstringbuf', 'std__wstringstream', 'stkpnts_changed',
    'stock_type_id_t', 'storage_type_t', 'struc_align_changed',
    'struc_cmt_changed', 'struc_created', 'struc_deleted',
    'struc_error_t', 'struc_expanded', 'struc_member_changed',
    'struc_member_created', 'struc_member_deleted',
    'struc_member_renamed', 'struc_renamed',
    'struct_ANON_OBJECT_HEADER', 'struct_ANON_OBJECT_HEADER_BIGOBJ',
    'struct_ANON_OBJECT_HEADER_V2', 'struct_APP_LOCAL_DEVICE_ID',
    'struct_BATTERY_REPORTING_SCALE', 'struct_BITMAPV4HEADER',
    'struct_BITMAPV5HEADER', 'struct_BSMINFO',
    'struct_CM_Power_Data_s', 'struct_COPYFILE2_EXTENDED_PARAMETERS',
    'struct_COPYFILE2_MESSAGE', 'struct_CORRELATION_VECTOR',
    'struct_DISK_SPACE_INFORMATION', 'struct_DISPLAYCONFIG_2DREGION',
    'struct_DISPLAYCONFIG_ADAPTER_NAME',
    'struct_DISPLAYCONFIG_DESKTOP_IMAGE_INFO',
    'struct_DISPLAYCONFIG_DEVICE_INFO_HEADER',
    'struct_DISPLAYCONFIG_MODE_INFO',
    'struct_DISPLAYCONFIG_PATH_INFO',
    'struct_DISPLAYCONFIG_PATH_SOURCE_INFO',
    'struct_DISPLAYCONFIG_PATH_SOURCE_INFO_0_0',
    'struct_DISPLAYCONFIG_PATH_SOURCE_INFO___61AC9E76C5182660D462789AB8034D76_0',
    'struct_DISPLAYCONFIG_PATH_TARGET_INFO',
    'struct_DISPLAYCONFIG_PATH_TARGET_INFO_0_0',
    'struct_DISPLAYCONFIG_PATH_TARGET_INFO___B261276D3FD515915541A20464F2F9DB_0',
    'struct_DISPLAYCONFIG_RATIONAL',
    'struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE',
    'struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE_0_0',
    'struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE___355D109C8B4E4AEF84271C7784D7E191_0',
    'struct_DISPLAYCONFIG_SOURCE_DEVICE_NAME',
    'struct_DISPLAYCONFIG_SOURCE_MODE',
    'struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION',
    'struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION_0_0',
    'struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION___F2BD161A31B09014C59BCA8CDC8BCA06_0',
    'struct_DISPLAYCONFIG_TARGET_BASE_TYPE',
    'struct_DISPLAYCONFIG_TARGET_DEVICE_NAME',
    'struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS',
    'struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS_0_0',
    'struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS___3212247FCB36E76CDA904B8EF1794EF2_0',
    'struct_DISPLAYCONFIG_TARGET_MODE',
    'struct_DISPLAYCONFIG_TARGET_PREFERRED_MODE',
    'struct_DISPLAYCONFIG_VIDEO_SIGNAL_INFO',
    'struct_DLGITEMTEMPLATE', 'struct_DLGTEMPLATE',
    'struct_DPI_AWARENESS_CONTEXT__', 'struct_FILE_ID_DESCRIPTOR',
    'struct_FLASHWINFO', 'struct_HACCEL__', 'struct_HBITMAP__',
    'struct_HBRUSH__', 'struct_HCOLORSPACE__', 'struct_HDC__',
    'struct_HDESK__', 'struct_HENHMETAFILE__', 'struct_HFONT__',
    'struct_HGESTUREINFO__', 'struct_HGLRC__', 'struct_HHOOK__',
    'struct_HICON__', 'struct_HIMCC__', 'struct_HIMC__',
    'struct_HINSTANCE__', 'struct_HKEY__', 'struct_HKL__',
    'struct_HLSURF__', 'struct_HMENU__', 'struct_HMETAFILE__',
    'struct_HMONITOR__', 'struct_HPALETTE__', 'struct_HPEN__',
    'struct_HRAWINPUT__', 'struct_HRGN__', 'struct_HRSRC__',
    'struct_HSAVEDUILANGUAGES__', 'struct_HSPRITE__', 'struct_HSTR__',
    'struct_HSYNTHETICPOINTERDEVICE__', 'struct_HTASK__',
    'struct_HTOUCHINPUT__', 'struct_HUMPD__',
    'struct_HWINEVENTHOOK__', 'struct_HWINSTA__', 'struct_HWND__',
    'struct_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_0',
    'struct_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA___E3D3C95A7B50C509F6DC3E4A33151861',
    'struct_IMAGE_AUX_SYMBOL_TOKEN_DEF', 'struct_IMAGE_COR20_HEADER',
    'struct_IMPORT_OBJECT_HEADER',
    'struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION',
    'struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE',
    'struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2',
    'struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3',
    'struct_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2',
    'struct_JOBOBJECT_NET_RATE_CONTROL_INFORMATION',
    'struct_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2',
    'struct_LIST_ENTRY32', 'struct_LIST_ENTRY64', 'struct_MD5Context',
    'struct_MEM_EXTENDED_PARAMETER',
    'struct_MEM_EXTENDED_PARAMETER_0',
    'struct_MEM_EXTENDED_PARAMETER___373F0C482CA2C07D4A7B2B94C5EA8081',
    'struct_MENUITEMTEMPLATE', 'struct_MENUITEMTEMPLATEHEADER',
    'struct_NOTIFY_USER_POWER_SETTING',
    'struct_POWERBROADCAST_SETTING', 'struct_POWER_ACTION_POLICY',
    'struct_PPM_IDLESTATE_EVENT', 'struct_PPM_IDLE_ACCOUNTING',
    'struct_PPM_IDLE_ACCOUNTING_EX',
    'struct_PPM_IDLE_STATE_ACCOUNTING',
    'struct_PPM_IDLE_STATE_ACCOUNTING_EX',
    'struct_PPM_IDLE_STATE_BUCKET_EX',
    'struct_PPM_PERFSTATE_DOMAIN_EVENT', 'struct_PPM_PERFSTATE_EVENT',
    'struct_PPM_THERMALCHANGE_EVENT',
    'struct_PPM_THERMAL_POLICY_EVENT', 'struct_PPM_WMI_IDLE_STATE',
    'struct_PPM_WMI_IDLE_STATES', 'struct_PPM_WMI_IDLE_STATES_EX',
    'struct_PPM_WMI_LEGACY_PERFSTATE', 'struct_PPM_WMI_PERF_STATE',
    'struct_PPM_WMI_PERF_STATES', 'struct_PPM_WMI_PERF_STATES_EX',
    'struct_PROCESSOR_IDLESTATE_INFO',
    'struct_PROCESSOR_IDLESTATE_POLICY',
    'struct_PROCESSOR_IDLESTATE_POLICY___92CEA922AA6C5711F3A617A61DD3E595_0',
    'struct_PROCESSOR_PERFSTATE_POLICY',
    'struct_PROCESS_PROTECTION_LEVEL_INFORMATION',
    'struct_QOS_OBJECT_HDR', 'struct_SCOPE_ID', 'struct_SCOPE_ID_0_0',
    'struct_SCOPE_ID___0B63E1DABDB20D0A7182B70FFF1E8AB8_0',
    'struct_SC_HANDLE__', 'struct_SERVICE_STATUS_HANDLE__',
    'struct_SERVICE_TRIGGER_CUSTOM_STATE_ID',
    'struct_SET_POWER_SETTING_VALUE', 'struct_SHELLHOOKINFO',
    'struct_SYSTEM_BATTERY_STATE', 'struct_SYSTEM_POWER_CAPABILITIES',
    'struct_SYSTEM_POWER_LEVEL', 'struct_TPointDouble',
    'struct_TPopupMenu', 'struct_TWidget',
    'struct_WIN32_MEMORY_REGION_INFORMATION',
    'struct_WIN32_MEMORY_REGION_INFORMATION_0_0',
    'struct_WIN32_MEMORY_REGION_INFORMATION___D9148D26D5024FAA6F599B7E87F7CC62_0',
    'struct_WSAData', 'struct__006192E8E41FD8F2EA1B27D51D7CA475',
    'struct__0129B05177E31069DD1C2B224CCB89A0',
    'struct__013671E5920392F7B68C675C97F9F7D8',
    'struct__0444EE5E7824138600A60EA9ABBD0023',
    'struct__0C012E7FB514E07FED75904D822698CF',
    'struct__0C5D68A923626F87375DD95B3AA1763F',
    'struct__0F0214169AB7574E621E68810485F6AA',
    'struct__11D9C8BE61E6EE013C3CCB3B9B8E2958',
    'struct__12EDD93CAC4208332C3108DBB4839320',
    'struct__1570E6E652654060C308A778ED15CE16',
    'struct__19436C2F0C0C306A8BFD7B32BBC2825D',
    'struct__23D9D9C136A579E5510A962A603B8CB7',
    'struct__304AECCFA8C31E57CAA9E04956196E4C',
    'struct__368C7D4AF4E90F16CD36F8E21C470A79',
    'struct__384A0D2752004B0844262A4FDB8DFA08',
    'struct__3CDD4E41B95D6674BCA9CBF95BB4D431',
    'struct__3EACACF26E2CA95170F36F128BAC7767',
    'struct__40942CBCB8F0A1CDBC81269929B28324',
    'struct__449D258AA18C723FE7BC5A7EA8EED39F',
    'struct__482BE40EA206D58F779C6B11E6CEDF6F',
    'struct__486F79855E687F113A063916C94BB5B8',
    'struct__547C47D15293E95249DF75F7BF757526',
    'struct__5777CF876D10E8036D834038A6EF48F9',
    'struct__5813CBACEBCD7EB2D1A50052721CB338',
    'struct__5BBFE38D397EB168C4922E80DFABA463',
    'struct__5CBA49B7A25A0EA2C39238CAAE52EFD4',
    'struct__5FAD416589472B5F3944026CEEE6AAA8',
    'struct__5FDB0C128CAE6B510A580B0DF7449C28',
    'struct__62654262369868C0312B20411168132E',
    'struct__63D8AC276564BEA69DF63EBD86FDB811',
    'struct__657BB06EF05633356CF4CD431076EE5F_0',
    'struct__65BAA48EEE7310C500857B0EADEF1038',
    'struct__677A661E4BC7DB67CECA33B4385749C5',
    'struct__691F71A9C2F82EA661D68B88C7ECA40D',
    'struct__721AF010CD3505050C324F97F48C6CA8',
    'struct__7B9E08C8598B8FD88043C3528403CCC6',
    'struct__7C60618F8DDAB6C9415DCB902B86CBEA',
    'struct__7E853AFA19D46F1D1426A7C4ACE93405',
    'struct__87937D864C1217F0C6EDE3E399C97469',
    'struct__886A00C7AD3FD5ED6211727A2251497A',
    'struct__8B3A610AEB0C47756C1D570CE19BF51D',
    'struct__8C32E5D3ED1763EA38B94549972C5F20',
    'struct__8FB65F16DAE9F8292AA06E665C2A880E',
    'struct__91BE8B12E17010F0620FEFDE5E6D353E',
    'struct__971F672DC66B184EF61B29BB35386FAB',
    'struct__9CBE11374487F3865B332FC10B1917E9',
    'struct__A030FD3B32E4F891E79E2284E8F158BA',
    'struct__A3BAC9569453E46653D4C53B8339026E',
    'struct__A4EE175A7532F35C00DA5CAD042934DF',
    'struct__A8AB85F54C41EDC76E4CA93812102570', 'struct__ABC',
    'struct__ABCFLOAT', 'struct__ACCESS_ALLOWED_ACE',
    'struct__ACCESS_ALLOWED_CALLBACK_ACE',
    'struct__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE',
    'struct__ACCESS_ALLOWED_OBJECT_ACE', 'struct__ACCESS_DENIED_ACE',
    'struct__ACCESS_DENIED_CALLBACK_ACE',
    'struct__ACCESS_DENIED_CALLBACK_OBJECT_ACE',
    'struct__ACCESS_DENIED_OBJECT_ACE', 'struct__ACCESS_REASONS',
    'struct__ACE_HEADER', 'struct__ACL',
    'struct__ACL_REVISION_INFORMATION',
    'struct__ACL_SIZE_INFORMATION', 'struct__ACTIVATION_CONTEXT',
    'struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION',
    'struct__ACTIVATION_CONTEXT_BASIC_INFORMATION',
    'struct__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION',
    'struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION',
    'struct__ACTIVATION_CONTEXT_QUERY_INDEX',
    'struct__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION',
    'struct__ADMINISTRATOR_POWER_POLICY',
    'struct__AE2973057922CF8FEA1D3B09D0719A51', 'struct__AFPROTOCOLS',
    'struct__APPLICATIONLAUNCH_SETTING_VALUE',
    'struct__APP_MEMORY_INFORMATION',
    'struct__ASSEMBLY_FILE_DETAILED_INFORMATION',
    'struct__B037A36172D96AA8797FFDAF6A0B62DF',
    'struct__B7274AF74BBCA74F18F23DF8227DBA49',
    'struct__B9BB00CEA97BDADE89FFFB3C7975CC01',
    'struct__BLENDFUNCTION', 'struct__BLOB',
    'struct__BY_HANDLE_FILE_INFORMATION',
    'struct__C0C2FE754DCA8EA4F7B2DAD88EA93C70',
    'struct__C95BA7EA5F85079EC657DF089F04F24D',
    'struct__C9A2842D7E4A03835E8DE2C0C76BEBF2',
    'struct__CACHE_DESCRIPTOR', 'struct__CACHE_RELATIONSHIP',
    'struct__CDD487EB51D46C5701426B2D522638C3_0',
    'struct__CFG_CALL_TARGET_INFO', 'struct__CHAR_INFO',
    'struct__CLAIM_SECURITY_ATTRIBUTES_INFORMATION',
    'struct__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE',
    'struct__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE',
    'struct__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1',
    'struct__CLAIM_SECURITY_ATTRIBUTE_V1', 'struct__COMMCONFIG',
    'struct__COMMPROP', 'struct__COMMTIMEOUTS',
    'struct__COMPATIBILITY_CONTEXT_ELEMENT', 'struct__COMSTAT',
    'struct__CONNECTDLGSTRUCTA', 'struct__CONNECTDLGSTRUCTW',
    'struct__CONSOLE_CURSOR_INFO', 'struct__CONSOLE_FONT_INFO',
    'struct__CONSOLE_FONT_INFOEX', 'struct__CONSOLE_HISTORY_INFO',
    'struct__CONSOLE_READCONSOLE_CONTROL',
    'struct__CONSOLE_SCREEN_BUFFER_INFO',
    'struct__CONSOLE_SCREEN_BUFFER_INFOEX',
    'struct__CONSOLE_SELECTION_INFO', 'struct__CONTEXT',
    'struct__CONTEXT_0_0',
    'struct__CONTEXT___8025DFDFE77BC942FFD833580971BF6A_0',
    'struct__COORD', 'struct__CREATEFILE2_EXTENDED_PARAMETERS',
    'struct__CREATE_PROCESS_DEBUG_INFO',
    'struct__CREATE_THREAD_DEBUG_INFO', 'struct__CRT_DOUBLE',
    'struct__CRT_FLOAT', 'struct__CSADDR_INFO',
    'struct__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG',
    'struct__Combined_type_float__double_',
    'struct__Combined_type_float__long_double_',
    'struct__CrtMemBlockHeader', 'struct__CrtMemState',
    'struct__D1D01E6CE24DAA474FC2F2D5140A147B',
    'struct__D44EEF9BD0742DBE20D87C837DCD5E88',
    'struct__D47918EF7649E51E527D85F826FB453E',
    'struct__D5D81F448FDBA1CEB8B2FBEA063976CD', 'struct__DCB',
    'struct__DEBUG_EVENT', 'struct__DISCDLGSTRUCTA',
    'struct__DISCDLGSTRUCTW', 'struct__DISPATCHER_CONTEXT',
    'struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO',
    'struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_0_0',
    'struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO___D1ED48533BBC5D15418F532CAE9A0A65_0',
    'struct__DISPLAYCONFIG_SDR_WHITE_LEVEL',
    'struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE',
    'struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_0_0',
    'struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE___04E95D2921E0D60839C4D595B69CF99E_0',
    'struct__DISPLAY_DEVICEA', 'struct__DISPLAY_DEVICEW',
    'struct__DOCINFOA', 'struct__DOCINFOW', 'struct__DRAWPATRECT',
    'struct__E26BF190AEDEAEBDFA1411F4A18494DD',
    'struct__E2FC796E7F2D840DF2C457E32E2CE7FB',
    'struct__E4A7DBD5A253E3617D685B674E63E69E',
    'struct__E5ED4763ACBEF02B6DD4A1054B18F50D',
    'struct__E68E69178BF9C90E9AD3136A5DA83667',
    'struct__E8DA42DBA6D72E9D4A6938C7E4FE721A',
    'struct__E992A59DE776EA4CB6EFF8EBB7345C5E',
    'struct__E99838163ECB7E7B1035AEA9B1267B46',
    'struct__EB76E570FF9173CCCE9422B212669AE9',
    'struct__EBEF71244791381780396B181B40BFD1',
    'struct__ECCC25BC343ABE0853F526697984729A',
    'struct__EE101F0F638C26522B1A81AB53DEE5B5',
    'struct__EF94547E2C3C64E7F73C980C5BD2F5D8',
    'struct__ENCLAVE_CREATE_INFO_SGX',
    'struct__ENCLAVE_CREATE_INFO_VBS',
    'struct__ENCLAVE_CREATE_INFO_VBS_BASIC',
    'struct__ENCLAVE_INIT_INFO_SGX', 'struct__ENCLAVE_INIT_INFO_VBS',
    'struct__ENCLAVE_INIT_INFO_VBS_BASIC',
    'struct__ENCLAVE_LOAD_DATA_VBS_BASIC',
    'struct__ENLISTMENT_BASIC_INFORMATION',
    'struct__ENLISTMENT_CRM_INFORMATION',
    'struct__ENUM_FLAG_INTEGER_FOR_SIZE_1_',
    'struct__ENUM_FLAG_INTEGER_FOR_SIZE_2_',
    'struct__ENUM_FLAG_INTEGER_FOR_SIZE_4_',
    'struct__ENUM_FLAG_INTEGER_FOR_SIZE_8_',
    'struct__ENUM_SERVICE_STATUSA', 'struct__ENUM_SERVICE_STATUSW',
    'struct__ENUM_SERVICE_STATUS_PROCESSA',
    'struct__ENUM_SERVICE_STATUS_PROCESSW', 'struct__EVENTLOGRECORD',
    'struct__EVENTLOG_FULL_INFORMATION', 'struct__EVENTSFORLOGFILE',
    'struct__EXCEPTION_DEBUG_INFO', 'struct__EXCEPTION_POINTERS',
    'struct__EXCEPTION_RECORD', 'struct__EXCEPTION_RECORD32',
    'struct__EXCEPTION_RECORD64',
    'struct__EXCEPTION_REGISTRATION_RECORD',
    'struct__EXIT_PROCESS_DEBUG_INFO',
    'struct__EXIT_THREAD_DEBUG_INFO',
    'struct__F1340E5351F3949C7FFEE8AEB0584375',
    'struct__F655080F086C2BFA46941FA1A6DAACEC',
    'struct__F655080F086C2BFA46941FA1A6DAACEC_0_0',
    'struct__F8A07DB83731266CE981FF5BAD62F05F',
    'struct__F914DF356338B35978CCEA78F97B3D4F',
    'struct__FAEAD0B6DE8C3E663F9C84A0EA317232',
    'struct__FBCF7DE66C864CA9F22E8AAD63C2CD4B', 'struct__FILEMUIINFO',
    'struct__FILETIME', 'struct__FILE_ALIGNMENT_INFO',
    'struct__FILE_ALLOCATION_INFO', 'struct__FILE_ATTRIBUTE_TAG_INFO',
    'struct__FILE_BASIC_INFO', 'struct__FILE_CASE_SENSITIVE_INFO',
    'struct__FILE_COMPRESSION_INFO', 'struct__FILE_DISPOSITION_INFO',
    'struct__FILE_DISPOSITION_INFO_EX',
    'struct__FILE_END_OF_FILE_INFO', 'struct__FILE_FULL_DIR_INFO',
    'struct__FILE_ID_128', 'struct__FILE_ID_BOTH_DIR_INFO',
    'struct__FILE_ID_EXTD_DIR_INFO', 'struct__FILE_ID_INFO',
    'struct__FILE_IO_PRIORITY_HINT_INFO', 'struct__FILE_NAME_INFO',
    'struct__FILE_NOTIFY_EXTENDED_INFORMATION',
    'struct__FILE_NOTIFY_INFORMATION',
    'struct__FILE_REMOTE_PROTOCOL_INFO',
    'struct__FILE_REMOTE_PROTOCOL_INFO___37429236F9BFAE17F3D399B911E9C242',
    'struct__FILE_RENAME_INFO', 'struct__FILE_STANDARD_INFO',
    'struct__FILE_STORAGE_INFO', 'struct__FILE_STREAM_INFO',
    'struct__FIXED', 'struct__FLOAT128', 'struct__FOCUS_EVENT_RECORD',
    'struct__FPO_DATA', 'struct__GENERIC_MAPPING',
    'struct__GLYPHMETRICS', 'struct__GLYPHMETRICSFLOAT',
    'struct__GRADIENT_RECT', 'struct__GRADIENT_TRIANGLE',
    'struct__GROUP_AFFINITY', 'struct__GROUP_RELATIONSHIP',
    'struct__GUID', 'struct__HARDWARE_COUNTER_DATA',
    'struct__HEAP_OPTIMIZE_RESOURCES_INFORMATION',
    'struct__HEAP_SUMMARY', 'struct__HIBERFILE_BUCKET',
    'struct__ICONINFO', 'struct__ICONINFOEXA', 'struct__ICONINFOEXW',
    'struct__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY',
    'struct__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY',
    'struct__IMAGE_ARCHIVE_MEMBER_HEADER',
    'struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY',
    'struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_0_0',
    'struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY___753D12A4F228928B8D07C64DF63FE1B7_0',
    'struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY',
    'struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_0_0',
    'struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY___40EF8B5EADD7A1EA5B4C64A8F5FEAC1B_0',
    'struct__IMAGE_AUX_SYMBOL_EX_0',
    'struct__IMAGE_AUX_SYMBOL_EX___3527ECF91F93989322DD305E5AF9CF65',
    'struct__IMAGE_AUX_SYMBOL_EX___7E1D480B97423AA8E833650CEF32C85E',
    'struct__IMAGE_AUX_SYMBOL_EX___7F2A680108A16A6223B29324A81F8BAB',
    'struct__IMAGE_AUX_SYMBOL_EX___A98B7E4D8FC2E1BB0BA4A96D48F8B6DC',
    'struct__IMAGE_AUX_SYMBOL_EX___F5EEF4289C9728E28354AD824FFA2064',
    'struct__IMAGE_AUX_SYMBOL___3AD4DEB8505F041CB6DF52E290B0756F',
    'struct__IMAGE_AUX_SYMBOL___7C6297ADB1522AE012833A8C9F9B34B5',
    'struct__IMAGE_AUX_SYMBOL___99A09626C0B327B801309162952BF118',
    'struct__IMAGE_AUX_SYMBOL___E31B0C8FAB087F6C1EB948B5A6818D63',
    'struct__IMAGE_BASE_RELOCATION',
    'struct__IMAGE_BOUND_FORWARDER_REF',
    'struct__IMAGE_BOUND_IMPORT_DESCRIPTOR',
    'struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY',
    'struct__IMAGE_COFF_SYMBOLS_HEADER',
    'struct__IMAGE_DATA_DIRECTORY', 'struct__IMAGE_DEBUG_DIRECTORY',
    'struct__IMAGE_DEBUG_MISC', 'struct__IMAGE_DELAYLOAD_DESCRIPTOR',
    'struct__IMAGE_DELAYLOAD_DESCRIPTOR___9046E4C7D059E43F244FD172AEF6AF0D_0',
    'struct__IMAGE_DOS_HEADER', 'struct__IMAGE_DYNAMIC_RELOCATION32',
    'struct__IMAGE_DYNAMIC_RELOCATION32_V2',
    'struct__IMAGE_DYNAMIC_RELOCATION64',
    'struct__IMAGE_DYNAMIC_RELOCATION64_V2',
    'struct__IMAGE_DYNAMIC_RELOCATION_TABLE',
    'struct__IMAGE_ENCLAVE_CONFIG32',
    'struct__IMAGE_ENCLAVE_CONFIG64', 'struct__IMAGE_ENCLAVE_IMPORT',
    'struct__IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER',
    'struct__IMAGE_EXPORT_DIRECTORY', 'struct__IMAGE_FILE_HEADER',
    'struct__IMAGE_FUNCTION_ENTRY', 'struct__IMAGE_FUNCTION_ENTRY64',
    'struct__IMAGE_HOT_PATCH_BASE', 'struct__IMAGE_HOT_PATCH_HASHES',
    'struct__IMAGE_HOT_PATCH_INFO', 'struct__IMAGE_IMPORT_BY_NAME',
    'struct__IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION',
    'struct__IMAGE_IMPORT_DESCRIPTOR',
    'struct__IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION',
    'struct__IMAGE_LINENUMBER',
    'struct__IMAGE_LOAD_CONFIG_CODE_INTEGRITY',
    'struct__IMAGE_LOAD_CONFIG_DIRECTORY32',
    'struct__IMAGE_LOAD_CONFIG_DIRECTORY64',
    'struct__IMAGE_NT_HEADERS', 'struct__IMAGE_NT_HEADERS64',
    'struct__IMAGE_OPTIONAL_HEADER',
    'struct__IMAGE_OPTIONAL_HEADER64', 'struct__IMAGE_OS2_HEADER',
    'struct__IMAGE_POLICY_ENTRY', 'struct__IMAGE_POLICY_METADATA',
    'struct__IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER',
    'struct__IMAGE_RELOCATION', 'struct__IMAGE_RESOURCE_DATA_ENTRY',
    'struct__IMAGE_RESOURCE_DIRECTORY',
    'struct__IMAGE_RESOURCE_DIRECTORY_ENTRY',
    'struct__IMAGE_RESOURCE_DIRECTORY_ENTRY_0_0',
    'struct__IMAGE_RESOURCE_DIRECTORY_ENTRY_1_0',
    'struct__IMAGE_RESOURCE_DIRECTORY_ENTRY___A0A516DD47125A4E74292661543AC098_0',
    'struct__IMAGE_RESOURCE_DIRECTORY_ENTRY___D318A949D2AEB9EBF3E43D786E93C450_0',
    'struct__IMAGE_RESOURCE_DIRECTORY_STRING',
    'struct__IMAGE_RESOURCE_DIR_STRING_U',
    'struct__IMAGE_ROM_HEADERS', 'struct__IMAGE_ROM_OPTIONAL_HEADER',
    'struct__IMAGE_RUNTIME_FUNCTION_ENTRY',
    'struct__IMAGE_SECTION_HEADER',
    'struct__IMAGE_SEPARATE_DEBUG_HEADER',
    'struct__IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION',
    'struct__IMAGE_SYMBOL', 'struct__IMAGE_SYMBOL_EX',
    'struct__IMAGE_THUNK_DATA32', 'struct__IMAGE_THUNK_DATA64',
    'struct__IMAGE_TLS_DIRECTORY32',
    'struct__IMAGE_TLS_DIRECTORY32_0_0',
    'struct__IMAGE_TLS_DIRECTORY32___3BFF79CBF6517510E85FD75955602401_0',
    'struct__IMAGE_TLS_DIRECTORY64',
    'struct__IMAGE_TLS_DIRECTORY64_0_0',
    'struct__IMAGE_TLS_DIRECTORY64___3BFF79CBF6517510E85FD75955602401_0',
    'struct__IMAGE_VXD_HEADER', 'struct__INPUT_RECORD',
    'struct__INTERFACE_INFO', 'struct__INTERFACE_INFO_EX',
    'struct__IO_COUNTERS', 'struct__ImageArchitectureEntry',
    'struct__ImageArchitectureHeader', 'struct__JIT_DEBUG_INFO',
    'struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT',
    'struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION',
    'struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION',
    'struct__JOBOBJECT_BASIC_LIMIT_INFORMATION',
    'struct__JOBOBJECT_BASIC_PROCESS_ID_LIST',
    'struct__JOBOBJECT_BASIC_UI_RESTRICTIONS',
    'struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION',
    'struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_0_0',
    'struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION___0A78906577EB6A018A7D48DE378D86E6_0',
    'struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION',
    'struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION',
    'struct__JOBOBJECT_IO_ATTRIBUTION_INFORMATION',
    'struct__JOBOBJECT_IO_ATTRIBUTION_STATS',
    'struct__JOBOBJECT_JOBSET_INFORMATION',
    'struct__JOBOBJECT_LIMIT_VIOLATION_INFORMATION',
    'struct__JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION',
    'struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION',
    'struct__JOB_SET_ARRAY', 'struct__KCRM_MARSHAL_HEADER',
    'struct__KCRM_PROTOCOL_BLOB', 'struct__KCRM_TRANSACTION_BLOB',
    'struct__KEY_EVENT_RECORD',
    'struct__KNONVOLATILE_CONTEXT_POINTERS',
    'struct__KNONVOLATILE_CONTEXT_POINTERS_0_0',
    'struct__KNONVOLATILE_CONTEXT_POINTERS_1_0',
    'struct__KNONVOLATILE_CONTEXT_POINTERS_ARM64',
    'struct__KNONVOLATILE_CONTEXT_POINTERS___4C940C1D04ED6E0FA4259925A0783C75_0',
    'struct__KNONVOLATILE_CONTEXT_POINTERS___FA2959FC6C6AC532662CCE355387EAC6_0',
    'struct__KTMOBJECT_CURSOR', 'struct__LARGE_INTEGER_0',
    'struct__LARGE_INTEGER___0B914BD3CE83B8CFCF233613356AE5AB',
    'struct__LDBL12', 'struct__LDOUBLE', 'struct__LDT_ENTRY',
    'struct__LIST_ENTRY', 'struct__LOAD_DLL_DEBUG_INFO',
    'struct__LONGDOUBLE', 'struct__LUID',
    'struct__LUID_AND_ATTRIBUTES', 'struct__M128A', 'struct__MAT2',
    'struct__MAXVERSIONTESTED_INFO', 'struct__MEMORYSTATUS',
    'struct__MEMORYSTATUSEX', 'struct__MEMORY_BASIC_INFORMATION',
    'struct__MEMORY_BASIC_INFORMATION32',
    'struct__MEMORY_BASIC_INFORMATION64',
    'struct__MEMORY_PRIORITY_INFORMATION',
    'struct__MEM_ADDRESS_REQUIREMENTS', 'struct__MENU_EVENT_RECORD',
    'struct__MESSAGE_RESOURCE_BLOCK', 'struct__MESSAGE_RESOURCE_DATA',
    'struct__MESSAGE_RESOURCE_ENTRY', 'struct__MODEMDEVCAPS',
    'struct__MODEMSETTINGS', 'struct__MOUSE_EVENT_RECORD',
    'struct__NETCONNECTINFOSTRUCT', 'struct__NETINFOSTRUCT',
    'struct__NETRESOURCEA', 'struct__NETRESOURCEW',
    'struct__NETWORK_APP_INSTANCE_EA', 'struct__NON_PAGED_DEBUG_INFO',
    'struct__NT_TIB', 'struct__NT_TIB32', 'struct__NT_TIB64',
    'struct__NUMA_NODE_RELATIONSHIP', 'struct__NV_MEMORY_RANGE',
    'struct__OBJECTID', 'struct__OBJECT_TYPE_LIST',
    'struct__OFSTRUCT', 'struct__OPERATION_END_PARAMETERS',
    'struct__OPERATION_START_PARAMETERS', 'struct__OSVERSIONINFOA',
    'struct__OSVERSIONINFOEXA', 'struct__OSVERSIONINFOEXW',
    'struct__OSVERSIONINFOW', 'struct__OUTLINETEXTMETRICA',
    'struct__OUTLINETEXTMETRICW', 'struct__OUTPUT_DEBUG_STRING_INFO',
    'struct__OVERLAPPED', 'struct__OVERLAPPED_0_0',
    'struct__OVERLAPPED_ENTRY',
    'struct__OVERLAPPED___6E7EFA1536A982BE75506BE32C556979_0',
    'struct__PACKEDEVENTINFO', 'struct__PERFORMANCE_DATA',
    'struct__POINTFLOAT', 'struct__POINTL',
    'struct__POWER_IDLE_RESILIENCY',
    'struct__POWER_MONITOR_INVOCATION',
    'struct__POWER_PLATFORM_INFORMATION',
    'struct__POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES',
    'struct__POWER_SESSION_CONNECT',
    'struct__POWER_SESSION_RIT_STATE',
    'struct__POWER_SESSION_TIMEOUTS',
    'struct__POWER_SESSION_WINLOGON', 'struct__POWER_USER_PRESENCE',
    'struct__PRIVILEGE_SET', 'struct__PROCESSOR_GROUP_INFO',
    'struct__PROCESSOR_NUMBER', 'struct__PROCESSOR_POWER_POLICY',
    'struct__PROCESSOR_POWER_POLICY_INFO',
    'struct__PROCESSOR_RELATIONSHIP',
    'struct__PROCESS_DYNAMIC_EH_CONTINUATION_TARGET',
    'struct__PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION',
    'struct__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE',
    'struct__PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION',
    'struct__PROCESS_HEAP_ENTRY', 'struct__PROCESS_INFORMATION',
    'struct__PROCESS_LEAP_SECOND_INFO',
    'struct__PROCESS_MEMORY_EXHAUSTION_INFO',
    'struct__PROCESS_MITIGATION_ASLR_POLICY',
    'struct__PROCESS_MITIGATION_ASLR_POLICY_0_0',
    'struct__PROCESS_MITIGATION_ASLR_POLICY___EF23D35D4AFD2CAFE17C817A6832F69D_0',
    'struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY',
    'struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_0_0',
    'struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY___70C6A6FD2FD0CF4EFFD8E31632FF14D1_0',
    'struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY',
    'struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY_0_0',
    'struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY___1A60AB6814E02BE900E9811249F44F13_0',
    'struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY',
    'struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_0_0',
    'struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY___2FA0893F5F94738320789EE0A61135E4_0',
    'struct__PROCESS_MITIGATION_DEP_POLICY',
    'struct__PROCESS_MITIGATION_DEP_POLICY_0_0',
    'struct__PROCESS_MITIGATION_DEP_POLICY___FD136180483B4938AC5BD93E37872B76_0',
    'struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY',
    'struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_0_0',
    'struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY___B4E19A71168CE34C20DDB8F98D338030_0',
    'struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY',
    'struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_0_0',
    'struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY___33429AB7D8029A757D69069187804440_0',
    'struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY',
    'struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY_0_0',
    'struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY___A466DDF007E94507B09CD23EE821B6F2_0',
    'struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY',
    'struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY_0_0',
    'struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY___F1DB64D83105ED650921E8060312C7D8_0',
    'struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY',
    'struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_0_0',
    'struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY___662A0C451AAED41D63A8BDF38CF1AF82_0',
    'struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY',
    'struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY_0_0',
    'struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY___B3E481CD684705DFC321378EBAD5261E_0',
    'struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY',
    'struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_0_0',
    'struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY___FD33BDC57BCEB8233764351EEFC4E5C6_0',
    'struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY',
    'struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_0_0',
    'struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY___AD9536122EB431DA68DD4C2B47022529_0',
    'struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY',
    'struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_0_0',
    'struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY___4A990042AB6F435BCDDE2B1E73AF4442_0',
    'struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY',
    'struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY_0_0',
    'struct__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY___5D8775A7512CE1BF8AA67C836AC34CF6_0',
    'struct__PROCESS_POWER_THROTTLING_STATE',
    'struct__PROC_THREAD_ATTRIBUTE_LIST',
    'struct__PSFEATURE_CUSTPAPER', 'struct__PSFEATURE_OUTPUT',
    'struct__PSINJECTDATA', 'struct__QOS_SD_MODE',
    'struct__QOS_SHAPING_RATE', 'struct__QUERY_SERVICE_CONFIGA',
    'struct__QUERY_SERVICE_CONFIGW',
    'struct__QUERY_SERVICE_LOCK_STATUSA',
    'struct__QUERY_SERVICE_LOCK_STATUSW', 'struct__QUOTA_LIMITS',
    'struct__QUOTA_LIMITS_EX', 'struct__QualityOfService',
    'struct__RASTERIZER_STATUS', 'struct__RATE_QUOTA_LIMIT_0',
    'struct__RATE_QUOTA_LIMIT___79FA692AF2D868318B7516C685A0638E',
    'struct__REARRANGE_FILE_DATA', 'struct__REARRANGE_FILE_DATA32',
    'struct__REASON_CONTEXT', 'struct__RECTL',
    'struct__REDIRECTION_DESCRIPTOR',
    'struct__REDIRECTION_FUNCTION_DESCRIPTOR',
    'struct__REMOTE_NAME_INFOA', 'struct__REMOTE_NAME_INFOW',
    'struct__REPARSE_GUID_DATA_BUFFER',
    'struct__REPARSE_GUID_DATA_BUFFER___4C09336C782BA41E0611EC60EFCB5A31',
    'struct__RESOURCEMANAGER_BASIC_INFORMATION',
    'struct__RESOURCEMANAGER_COMPLETION_INFORMATION',
    'struct__RESUME_PERFORMANCE', 'struct__RGNDATA',
    'struct__RGNDATAHEADER', 'struct__RIP_INFO',
    'struct__RTL_BARRIER', 'struct__RTL_CONDITION_VARIABLE',
    'struct__RTL_CRITICAL_SECTION',
    'struct__RTL_CRITICAL_SECTION_DEBUG', 'struct__RTL_SRWLOCK',
    'struct__Real_type_float_', 'struct__Real_type_long_double_',
    'struct__Real_widened_double__double_',
    'struct__Real_widened_double__float_',
    'struct__Real_widened_float__double_',
    'struct__Real_widened_float__float_', 'struct__SCOPE_TABLE_AMD64',
    'struct__SCOPE_TABLE_AMD64___AEBEF9CF03D90DA9BD5BAD919F892283',
    'struct__SCOPE_TABLE_ARM', 'struct__SCOPE_TABLE_ARM64',
    'struct__SCOPE_TABLE_ARM64___AEBEF9CF03D90DA9BD5BAD919F892283',
    'struct__SCOPE_TABLE_ARM___AEBEF9CF03D90DA9BD5BAD919F892283',
    'struct__SCRUB_DATA_INPUT', 'struct__SCRUB_DATA_OUTPUT',
    'struct__SCRUB_PARITY_EXTENT', 'struct__SCRUB_PARITY_EXTENT_DATA',
    'struct__SC_ACTION', 'struct__SC_NOTIFICATION_REGISTRATION',
    'struct__SECURITY_ATTRIBUTES', 'struct__SECURITY_CAPABILITIES',
    'struct__SECURITY_DESCRIPTOR',
    'struct__SECURITY_DESCRIPTOR_RELATIVE',
    'struct__SECURITY_OBJECT_AI_PARAMS',
    'struct__SECURITY_QUALITY_OF_SERVICE',
    'struct__SERVERSILO_BASIC_INFORMATION',
    'struct__SERVICE_CONTROL_STATUS_REASON_PARAMSA',
    'struct__SERVICE_CONTROL_STATUS_REASON_PARAMSW',
    'struct__SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM',
    'struct__SERVICE_DELAYED_AUTO_START_INFO',
    'struct__SERVICE_DESCRIPTIONA', 'struct__SERVICE_DESCRIPTIONW',
    'struct__SERVICE_FAILURE_ACTIONSA',
    'struct__SERVICE_FAILURE_ACTIONSW',
    'struct__SERVICE_FAILURE_ACTIONS_FLAG',
    'struct__SERVICE_LAUNCH_PROTECTED_INFO',
    'struct__SERVICE_NOTIFY_1', 'struct__SERVICE_NOTIFY_2A',
    'struct__SERVICE_NOTIFY_2W',
    'struct__SERVICE_PREFERRED_NODE_INFO',
    'struct__SERVICE_PRESHUTDOWN_INFO',
    'struct__SERVICE_REQUIRED_PRIVILEGES_INFOA',
    'struct__SERVICE_REQUIRED_PRIVILEGES_INFOW',
    'struct__SERVICE_SID_INFO', 'struct__SERVICE_START_REASON',
    'struct__SERVICE_STATUS', 'struct__SERVICE_STATUS_PROCESS',
    'struct__SERVICE_TABLE_ENTRYA', 'struct__SERVICE_TABLE_ENTRYW',
    'struct__SERVICE_TIMECHANGE_INFO', 'struct__SERVICE_TRIGGER',
    'struct__SERVICE_TRIGGER_INFO',
    'struct__SERVICE_TRIGGER_SPECIFIC_DATA_ITEM',
    'struct__SE_ACCESS_REPLY', 'struct__SE_ACCESS_REQUEST',
    'struct__SE_IMPERSONATION_STATE',
    'struct__SE_SECURITY_DESCRIPTOR', 'struct__SE_TOKEN_USER',
    'struct__SHARED_VIRTUAL_DISK_SUPPORT',
    'struct__SHUFFLE_FILE_DATA', 'struct__SID',
    'struct__SID_AND_ATTRIBUTES', 'struct__SID_AND_ATTRIBUTES_HASH',
    'struct__SID_IDENTIFIER_AUTHORITY',
    'struct__SILOOBJECT_BASIC_INFORMATION',
    'struct__SINGLE_LIST_ENTRY', 'struct__SLIST_ENTRY',
    'struct__SLIST_HEADER_0',
    'struct__SLIST_HEADER___58A6F92BB08CDF4126C396F1D5AF624E',
    'struct__SLIST_HEADER___F9F9EB832D628D73E611400623F67F2B',
    'struct__SMALL_RECT', 'struct__SOCKET_ADDRESS',
    'struct__SOCKET_ADDRESS_LIST',
    'struct__SOCKET_PROCESSOR_AFFINITY', 'struct__STARTUPINFOA',
    'struct__STARTUPINFOEXA', 'struct__STARTUPINFOEXW',
    'struct__STARTUPINFOW', 'struct__SUPPORTED_OS_INFO',
    'struct__SYSTEMTIME', 'struct__SYSTEM_ACCESS_FILTER_ACE',
    'struct__SYSTEM_ALARM_ACE', 'struct__SYSTEM_ALARM_CALLBACK_ACE',
    'struct__SYSTEM_ALARM_CALLBACK_OBJECT_ACE',
    'struct__SYSTEM_ALARM_OBJECT_ACE', 'struct__SYSTEM_AUDIT_ACE',
    'struct__SYSTEM_AUDIT_CALLBACK_ACE',
    'struct__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE',
    'struct__SYSTEM_AUDIT_OBJECT_ACE',
    'struct__SYSTEM_CPU_SET_INFORMATION', 'struct__SYSTEM_INFO',
    'struct__SYSTEM_INFO_0_0',
    'struct__SYSTEM_INFO___5384D611651B5BF37083DC1389C27803_0',
    'struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION',
    'struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX',
    'struct__SYSTEM_MANDATORY_LABEL_ACE',
    'struct__SYSTEM_POOL_ZEROING_INFORMATION',
    'struct__SYSTEM_POWER_POLICY', 'struct__SYSTEM_POWER_STATUS',
    'struct__SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION',
    'struct__SYSTEM_PROCESS_TRUST_LABEL_ACE',
    'struct__SYSTEM_RESOURCE_ATTRIBUTE_ACE',
    'struct__SYSTEM_SCOPED_POLICY_ID_ACE',
    'struct__TAPE_CREATE_PARTITION', 'struct__TAPE_ERASE',
    'struct__TAPE_GET_DRIVE_PARAMETERS',
    'struct__TAPE_GET_MEDIA_PARAMETERS', 'struct__TAPE_GET_POSITION',
    'struct__TAPE_PREPARE', 'struct__TAPE_SET_DRIVE_PARAMETERS',
    'struct__TAPE_SET_MEDIA_PARAMETERS', 'struct__TAPE_SET_POSITION',
    'struct__TAPE_WMI_OPERATIONS', 'struct__TAPE_WRITE_MARKS',
    'struct__TEB', 'struct__THREAD_POWER_THROTTLING_STATE',
    'struct__TIME_DYNAMIC_ZONE_INFORMATION',
    'struct__TIME_ZONE_INFORMATION',
    'struct__TOKEN_ACCESS_INFORMATION',
    'struct__TOKEN_APPCONTAINER_INFORMATION',
    'struct__TOKEN_AUDIT_POLICY',
    'struct__TOKEN_BNO_ISOLATION_INFORMATION',
    'struct__TOKEN_CONTROL', 'struct__TOKEN_DEFAULT_DACL',
    'struct__TOKEN_DEVICE_CLAIMS', 'struct__TOKEN_ELEVATION',
    'struct__TOKEN_GROUPS', 'struct__TOKEN_GROUPS_AND_PRIVILEGES',
    'struct__TOKEN_LINKED_TOKEN', 'struct__TOKEN_MANDATORY_LABEL',
    'struct__TOKEN_MANDATORY_POLICY', 'struct__TOKEN_ORIGIN',
    'struct__TOKEN_OWNER', 'struct__TOKEN_PRIMARY_GROUP',
    'struct__TOKEN_PRIVILEGES', 'struct__TOKEN_SID_INFORMATION',
    'struct__TOKEN_SOURCE', 'struct__TOKEN_STATISTICS',
    'struct__TOKEN_USER', 'struct__TOKEN_USER_CLAIMS',
    'struct__TP_CALLBACK_ENVIRON_V3', 'struct__TP_CALLBACK_INSTANCE',
    'struct__TP_CLEANUP_GROUP', 'struct__TP_IO', 'struct__TP_POOL',
    'struct__TP_POOL_STACK_INFORMATION', 'struct__TP_TIMER',
    'struct__TP_WAIT', 'struct__TP_WORK',
    'struct__TRANSACTIONMANAGER_BASIC_INFORMATION',
    'struct__TRANSACTIONMANAGER_LOGPATH_INFORMATION',
    'struct__TRANSACTIONMANAGER_LOG_INFORMATION',
    'struct__TRANSACTIONMANAGER_OLDEST_INFORMATION',
    'struct__TRANSACTIONMANAGER_RECOVERY_INFORMATION',
    'struct__TRANSACTION_BASIC_INFORMATION',
    'struct__TRANSACTION_BIND_INFORMATION',
    'struct__TRANSACTION_ENLISTMENTS_INFORMATION',
    'struct__TRANSACTION_ENLISTMENT_PAIR',
    'struct__TRANSACTION_LIST_ENTRY',
    'struct__TRANSACTION_LIST_INFORMATION',
    'struct__TRANSACTION_NOTIFICATION',
    'struct__TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT',
    'struct__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT',
    'struct__TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT',
    'struct__TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT',
    'struct__TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT',
    'struct__TRANSACTION_PROPERTIES_INFORMATION',
    'struct__TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION',
    'struct__TRIVERTEX', 'struct__ULARGE_INTEGER_0',
    'struct__ULARGE_INTEGER___295194D6FDE9D459FF51E3106CEEE6CC',
    'struct__UMS_CREATE_THREAD_ATTRIBUTES',
    'struct__UMS_SCHEDULER_STARTUP_INFO',
    'struct__UMS_SYSTEM_THREAD_INFORMATION',
    'struct__UMS_SYSTEM_THREAD_INFORMATION_0_0',
    'struct__UMS_SYSTEM_THREAD_INFORMATION___A39E9D10E6C6FC3307A25E827527C5A0_0',
    'struct__UNIVERSAL_NAME_INFOA', 'struct__UNIVERSAL_NAME_INFOW',
    'struct__UNLOAD_DLL_DEBUG_INFO', 'struct__UNWIND_HISTORY_TABLE',
    'struct__UNWIND_HISTORY_TABLE_ENTRY', 'struct__VIDEOPARAMETERS',
    'struct__WGLSWAP', 'struct__WIN32_FILE_ATTRIBUTE_DATA',
    'struct__WIN32_FIND_DATAA', 'struct__WIN32_FIND_DATAW',
    'struct__WIN32_FIND_STREAM_DATA',
    'struct__WIN32_MEMORY_RANGE_ENTRY', 'struct__WIN32_STREAM_ID',
    'struct__WINDOW_BUFFER_SIZE_RECORD',
    'struct__WOW64_ARCHITECTURE_INFORMATION', 'struct__WOW64_CONTEXT',
    'struct__WOW64_DESCRIPTOR_TABLE_ENTRY',
    'struct__WOW64_FLOATING_SAVE_AREA', 'struct__WOW64_LDT_ENTRY',
    'struct__WSABUF', 'struct__WSACOMPLETION', 'struct__WSAMSG',
    'struct__WSANAMESPACE_INFOA', 'struct__WSANAMESPACE_INFOEXA',
    'struct__WSANAMESPACE_INFOEXW', 'struct__WSANAMESPACE_INFOW',
    'struct__WSANETWORKEVENTS', 'struct__WSANSClassInfoA',
    'struct__WSANSClassInfoW', 'struct__WSAPROTOCOLCHAIN',
    'struct__WSAPROTOCOL_INFOA', 'struct__WSAPROTOCOL_INFOW',
    'struct__WSAQuerySet2A', 'struct__WSAQuerySet2W',
    'struct__WSAQuerySetA', 'struct__WSAQuerySetW',
    'struct__WSAServiceClassInfoA', 'struct__WSAServiceClassInfoW',
    'struct__WSAVersion', 'struct__XSAVE_AREA',
    'struct__XSAVE_AREA_HEADER', 'struct__XSAVE_CET_U_FORMAT',
    'struct__XSAVE_FORMAT', 'struct__XSTATE_CONFIGURATION',
    'struct__XSTATE_CONFIGURATION_0_0',
    'struct__XSTATE_CONFIGURATION___0E174CAD3789465778ACEBD04EE85B1A_0',
    'struct__XSTATE_CONTEXT', 'struct__XSTATE_FEATURE',
    'struct___crt_locale_data', 'struct___crt_locale_data_public',
    'struct___crt_locale_pointers', 'struct___crt_multibyte_data',
    'struct___finddata64_t', 'struct___qmutex_t',
    'struct___qsemaphore_t', 'struct___qthread_t',
    'struct___qtimer_t', 'struct___std_exception_data',
    'struct__complex', 'struct__cpinfo', 'struct__cpinfoexA',
    'struct__cpinfoexW', 'struct__currencyfmtA',
    'struct__currencyfmtW', 'struct__devicemodeA',
    'struct__devicemodeA_0_0', 'struct__devicemodeA_0_1',
    'struct__devicemodeA___EE3F7634911691A91B39D1F433B0CE04_0',
    'struct__devicemodeA___EE3F7634911691A91B39D1F433B0CE04_1',
    'struct__devicemodeW', 'struct__devicemodeW_0_0',
    'struct__devicemodeW_0_1',
    'struct__devicemodeW___EE3F7634911691A91B39D1F433B0CE04_0',
    'struct__devicemodeW___EE3F7634911691A91B39D1F433B0CE04_1',
    'struct__diskfree_t', 'struct__div_t', 'struct__exception',
    'struct__finddata32_t', 'struct__finddata32i64_t',
    'struct__finddata64i32_t', 'struct__flowspec', 'struct__heapinfo',
    'struct__iobuf', 'struct__ldiv_t', 'struct__lldiv_t',
    'struct__nlsversioninfo', 'struct__nlsversioninfoex',
    'struct__numberfmtA', 'struct__numberfmtW',
    'struct__qstring_char_', 'struct__qstring_unsigned_char_',
    'struct__qstring_wchar_t_', 'struct__sockaddr_in6_pair',
    'struct__stat32', 'struct__stat32i64', 'struct__stat64',
    'struct__stat64i32', 'struct__timespec32', 'struct__timespec64',
    'struct__wfinddata32_t', 'struct__wfinddata32i64_t',
    'struct__wfinddata64_t', 'struct__wfinddata64i32_t',
    'struct_abstract_graph_t', 'struct_action_ctx_base_cur_sel_t',
    'struct_action_ctx_base_t', 'struct_action_desc_t',
    'struct_action_handler_t', 'struct_action_handler_t_vtbl',
    'struct_addon_info_t', 'struct_addrinfo', 'struct_addrinfoW',
    'struct_addrinfoex2A', 'struct_addrinfoex2W',
    'struct_addrinfoex3', 'struct_addrinfoex4', 'struct_addrinfoexA',
    'struct_addrinfoexW', 'struct_aloc_visitor_t',
    'struct_aloc_visitor_t_vtbl', 'struct_altadjust_visitor_t',
    'struct_altadjust_visitor_t_vtbl', 'struct_argloc_t',
    'struct_argpart_t', 'struct_argtinfo_helper_t',
    'struct_argtinfo_helper_t_vtbl', 'struct_array_parameters_t',
    'struct_array_type_data_t', 'struct_asm_t',
    'struct_auto_display_t',
    'struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t_',
    'struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t',
    'struct_base_dispatcher_t', 'struct_base_dispatcher_t_vtbl',
    'struct_bitfield_type_data_t', 'struct_bitrange_t',
    'struct_bookmarks_t', 'struct_bpt_location_t', 'struct_bpt_t',
    'struct_bpt_visitor_t', 'struct_bpt_visitor_t_vtbl',
    'struct_bptaddr_t', 'struct_bptaddrs_t', 'struct_bytes_t',
    'struct_bytevec_t', 'struct_call_stack_info_t',
    'struct_call_stack_t', 'struct_callregs_t',
    'struct_cancellable_graph_t', 'struct_cast_t', 'struct_catch_t',
    'struct_cfgopt_set_t', 'struct_cfgopt_set_vec_t',
    'struct_cfgopt_t', 'struct_cfgopt_t__num_range_t',
    'struct_cfgopt_t__params_t', 'struct_channel_redir_t',
    'struct_choose_ioport_parser_t',
    'struct_choose_ioport_parser_t_vtbl', 'struct_chooser_base_t',
    'struct_chooser_base_t_vtbl', 'struct_chooser_item_attrs_t',
    'struct_chooser_multi_t', 'struct_chooser_t',
    'struct_chooser_t__cbret_t', 'struct_cli_t',
    'struct_client_handlers_list_t',
    'struct_client_handlers_list_t_vtbl', 'struct_cliopt_t',
    'struct_cliopts_t', 'struct_cmsghdr', 'struct_compiled_binpat_t',
    'struct_compiler_info_t', 'struct_const_aloc_visitor_t',
    'struct_const_aloc_visitor_t_vtbl', 'struct_custloc_desc_t',
    'struct_custom_data_type_ids_t',
    'struct_custom_refinfo_handler_t',
    'struct_custom_viewer_handlers_t', 'struct_data_format_t',
    'struct_data_type_t', 'struct_dbctx_t', 'struct_dbg_info_t',
    'struct_debapp_attrs_t', 'struct_debug_event_t',
    'struct_debugger_t', 'struct_depth_first_info_t',
    'struct_destset_t', 'struct_direntry_t', 'struct_dirspec_t',
    'struct_dirspec_t_vtbl', 'struct_dirtree_cursor_t',
    'struct_dirtree_impl_t', 'struct_dirtree_iterator_t',
    'struct_dirtree_selection_t', 'struct_dirtree_t',
    'struct_dirtree_visitor_t', 'struct_dirtree_visitor_t_vtbl',
    'struct_dynamic_register_set_t', 'struct_ea_name_t',
    'struct_edge_info_t', 'struct_edge_infos_t',
    'struct_edge_infos_wrapper_t', 'struct_edge_layout_point_t',
    'struct_edge_segment_t', 'struct_edge_segs_vec_t',
    'struct_edge_t', 'struct_edge_typer_t', 'struct_edgeset_t',
    'struct_elf_loader_t', 'struct_encoder_t',
    'struct_encoder_t_vtbl', 'struct_enum_const_t',
    'struct_enum_member_t', 'struct_enum_member_visitor_t',
    'struct_enum_member_visitor_t_vtbl', 'struct_enum_type_data_t',
    'struct_enumplace_t', 'struct_eval_ctx_t',
    'struct_event_listener_t', 'struct_event_listener_t_vtbl',
    'struct_exception_info_t', 'struct_excinfo_t',
    'struct_exec_request_t', 'struct_exec_request_t_vtbl',
    'struct_exehdr', 'struct_exehdr_full', 'struct_expanded_area_t',
    'struct_ext_idcfunc_t', 'struct_extlang_t',
    'struct_extlang_visitor_t', 'struct_extlang_visitor_t_vtbl',
    'struct_fbase_reg_t', 'struct_fd_set', 'struct_file_enumerator_t',
    'struct_file_enumerator_t_vtbl', 'struct_fixup_data_t',
    'struct_fixup_handler_t', 'struct_fixup_info_t',
    'struct_form_actions_t', 'struct_form_actions_t_vtbl',
    'struct_format_data_info_t', 'struct_fpvalue_t',
    'struct_func_item_iterator_t', 'struct_func_parent_iterator_t',
    'struct_func_t', 'struct_func_t_0_0', 'struct_func_t_0_1',
    'struct_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC_0',
    'struct_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC_1',
    'struct_func_tail_iterator_t', 'struct_func_type_data_t',
    'struct_funcarg_t', 'struct_gdl_graph_t',
    'struct_gdl_graph_t_vtbl', 'struct_generic_client_t',
    'struct_generic_client_t_vtbl', 'struct_generic_linput_t',
    'struct_generic_linput_t_vtbl', 'struct_getname_info_t',
    'struct_graph_item_t', 'struct_graph_location_info_t',
    'struct_graph_node_visitor_t', 'struct_graph_node_visitor_t_vtbl',
    'struct_graph_path_visitor_t', 'struct_graph_path_visitor_t_vtbl',
    'struct_graph_visitor_t', 'struct_graph_visitor_t_vtbl',
    'struct_group_crinfo_t', 'struct_group_filter',
    'struct_group_req', 'struct_group_source_req',
    'struct_hexplace_gen_t', 'struct_hexplace_gen_t_vtbl',
    'struct_hexplace_t', 'struct_hexview_t', 'struct_hidden_range_t',
    'struct_highlighter_cbs_t', 'struct_highlighter_cbs_t_vtbl',
    'struct_hostent', 'struct_icmp_error_info',
    'struct_ida_lowertype_helper_t',
    'struct_ida_movable_type_argloc_t_',
    'struct_ida_movable_type_argpart_t_',
    'struct_ida_movable_type_array_type_data_t_',
    'struct_ida_movable_type_bitfield_type_data_t_',
    'struct_ida_movable_type_bpt_location_t_',
    'struct_ida_movable_type_bpt_t_',
    'struct_ida_movable_type_call_stack_info_t_',
    'struct_ida_movable_type_catch_t_',
    'struct_ida_movable_type_cliopt_t_',
    'struct_ida_movable_type_compiled_binpat_t_',
    'struct_ida_movable_type_dbg_info_t_',
    'struct_ida_movable_type_debug_event_t_',
    'struct_ida_movable_type_direntry_t_',
    'struct_ida_movable_type_dirtree_cursor_t_',
    'struct_ida_movable_type_ea_name_t_',
    'struct_ida_movable_type_edge_t_',
    'struct_ida_movable_type_enum_member_t_',
    'struct_ida_movable_type_enum_type_data_t_',
    'struct_ida_movable_type_exception_info_t_',
    'struct_ida_movable_type_fixup_info_t_',
    'struct_ida_movable_type_func_t_',
    'struct_ida_movable_type_funcarg_t_',
    'struct_ida_movable_type_idc_global_t_',
    'struct_ida_movable_type_idc_value_t_',
    'struct_ida_movable_type_idp_desc_t_',
    'struct_ida_movable_type_idp_name_t_',
    'struct_ida_movable_type_ioport_bit_t_',
    'struct_ida_movable_type_ioport_t_',
    'struct_ida_movable_type_jarr_t_',
    'struct_ida_movable_type_jobj_t_',
    'struct_ida_movable_type_jvalue_t_',
    'struct_ida_movable_type_kvp_t_',
    'struct_ida_movable_type_line_rendering_output_entry_t_',
    'struct_ida_movable_type_load_info_t_',
    'struct_ida_movable_type_locchange_md_t_',
    'struct_ida_movable_type_lochist_entry_t_',
    'struct_ida_movable_type_lochist_t_',
    'struct_ida_movable_type_memory_info_t_',
    'struct_ida_movable_type_memreg_info_t_',
    'struct_ida_movable_type_modinfo_t_',
    'struct_ida_movable_type_movbpt_info_t_',
    'struct_ida_movable_type_point_t_',
    'struct_ida_movable_type_process_info_t_',
    'struct_ida_movable_type_ptr_type_data_t_',
    'struct_ida_movable_type_range_t_',
    'struct_ida_movable_type_rangeset_t_',
    'struct_ida_movable_type_rect_t_',
    'struct_ida_movable_type_refinfo_desc_t_',
    'struct_ida_movable_type_reg_access_t_',
    'struct_ida_movable_type_reg_info_t_',
    'struct_ida_movable_type_regarg_t_',
    'struct_ida_movable_type_register_info_t_',
    'struct_ida_movable_type_regobj_t_',
    'struct_ida_movable_type_regval_t_',
    'struct_ida_movable_type_regvar_t_',
    'struct_ida_movable_type_rpc_packet_type_desc_t_',
    'struct_ida_movable_type_scattered_aloc_t_',
    'struct_ida_movable_type_scattered_segm_t_',
    'struct_ida_movable_type_segm_move_info_t_',
    'struct_ida_movable_type_seh_t_',
    'struct_ida_movable_type_simd_info_t_',
    'struct_ida_movable_type_snapshot_t_',
    'struct_ida_movable_type_sreg_range_t_',
    'struct_ida_movable_type_stkpnt_t_',
    'struct_ida_movable_type_string_info_t_',
    'struct_ida_movable_type_sync_source_t_',
    'struct_ida_movable_type_tev_info_reg_t_',
    'struct_ida_movable_type_tev_reg_value_t_',
    'struct_ida_movable_type_til_symbol_t_',
    'struct_ida_movable_type_tinfo_t_',
    'struct_ida_movable_type_token_t_',
    'struct_ida_movable_type_try_handler_t_',
    'struct_ida_movable_type_tryblk_t_',
    'struct_ida_movable_type_twinline_t_',
    'struct_ida_movable_type_type_attr_t_',
    'struct_ida_movable_type_typedef_type_data_t_',
    'struct_ida_movable_type_udt_member_t_',
    'struct_ida_movable_type_udt_type_data_t_',
    'struct_ida_movable_type_update_bpt_info_t_',
    'struct_ida_movable_type_valinfo_t_',
    'struct_ida_movable_type_valstr_t_',
    'struct_ida_movable_type_xreflist_entry_t_',
    'struct_ida_syntax_highlighter_t',
    'struct_ida_syntax_highlighter_t__keywords_style_t',
    'struct_ida_syntax_highlighter_t__multicmt_t',
    'struct_ida_syntax_highlighter_t__plain_char_ptr_t',
    'struct_idadll_t', 'struct_idainfo', 'struct_idaplace_t',
    'struct_idarpc_stream_t', 'struct_idasgn_t', 'struct_idc_class_t',
    'struct_idc_global_t', 'struct_idc_object_t',
    'struct_idc_resolver_t', 'struct_idc_resolver_t_vtbl',
    'struct_idc_value_t', 'struct_idcfuncs_t', 'struct_idd_opinfo_t',
    'struct_idp_desc_t', 'struct_idp_name_t', 'struct_ignore_micro_t',
    'struct_impinfo_t', 'struct_in6_addr', 'struct_in6_pktinfo',
    'struct_in6_pktinfo_ex', 'struct_in_addr', 'struct_in_pktinfo',
    'struct_in_pktinfo_ex', 'struct_in_recverr',
    'struct_input_event_t',
    'struct_input_event_t__input_event_keyboard_data_t',
    'struct_input_event_t__input_event_mouse_data_t',
    'struct_input_event_t__input_event_shortcut_data_t',
    'struct_insn_t', 'struct_instant_dbgopts_t', 'struct_instruc_t',
    'struct_int128', 'struct_interr_exc_t', 'struct_interval_t',
    'struct_intmap_t', 'struct_intset_t', 'struct_ioport_bit_t',
    'struct_ioport_t', 'struct_ioports_fallback_t',
    'struct_ioports_fallback_t_vtbl', 'struct_ip_mreq',
    'struct_ip_mreq_source', 'struct_ip_msfilter', 'struct_ipv6_mreq',
    'struct_irs_cancellable_op_t', 'struct_janitor_t__iobuf__P_',
    'struct_janitor_t_linput_t__P_', 'struct_jarr_t', 'struct_jobj_t',
    'struct_jump_pattern_t', 'struct_jump_pattern_t_vtbl',
    'struct_jvalue_t', 'struct_kvp_t',
    'struct_launch_process_params_t', 'struct_lex_value_t',
    'struct_lexer_t', 'struct_libfunc_t',
    'struct_line_rendering_output_entry_t', 'struct_linearray_t',
    'struct_lines_rendering_input_t',
    'struct_lines_rendering_output_t', 'struct_linger',
    'struct_linput_buffer_t', 'struct_linput_t', 'struct_llabel_t',
    'struct_load_info_t', 'struct_loader_t', 'struct_location_t',
    'struct_locchange_md_t', 'struct_lochist_entry_t',
    'struct_lochist_t', 'struct_lock_func', 'struct_lock_segment',
    'struct_lowcnd_t', 'struct_lowertype_helper_t',
    'struct_lowertype_helper_t_vtbl', 'struct_macro_constructor_t',
    'struct_macro_constructor_t_vtbl', 'struct_member_t',
    'struct_memory_deserializer_t', 'struct_memory_info_t',
    'struct_memreg_info_t', 'struct_merge_data_t', 'struct_minsn_t',
    'struct_mmtype_t', 'struct_modinfo_t', 'struct_movbpt_info_t',
    'struct_mt_client_handlers_list_t', 'struct_mutable_graph_t',
    'struct_netent', 'struct_netnode',
    'struct_network_client_handler_t',
    'struct_network_client_handler_t_vtbl', 'struct_no_regs_t',
    'struct_node_info_t', 'struct_node_iterator',
    'struct_node_ordering_t', 'struct_node_set_t', 'struct_op_t',
    'struct_outctx_base_t', 'struct_outctx_base_t_vtbl',
    'struct_outctx_t', 'struct_place_t', 'struct_place_t_vtbl',
    'struct_plugin_info_t', 'struct_plugin_t', 'struct_plugmod_t',
    'struct_plugmod_t_vtbl', 'struct_point_t', 'struct_pointseq_t',
    'struct_pollfd', 'struct_post_event_visitor_t',
    'struct_post_event_visitor_t_vtbl', 'struct_predicate_t',
    'struct_predicate_t_vtbl', 'struct_printop_t',
    'struct_proc_def_t', 'struct_process_info_t',
    'struct_processor_t', 'struct_procmod_t', 'struct_protoent',
    'struct_provider_info', 'struct_ptr_type_data_t',
    'struct_pushinfo_t', 'struct_pushreg_t', 'struct_pvalueA',
    'struct_pvalueW', 'struct_qbasic_block_t', 'struct_qffblk64_t',
    'struct_qffblk_t', 'struct_qflow_chart_t',
    'struct_qiterator_qrefcnt_t_source_file_t__',
    'struct_qiterator_qrefcnt_t_source_item_t__',
    'struct_qlist_ui_request_t__P_',
    'struct_qlist_ui_request_t__P___const_iterator',
    'struct_qlist_ui_request_t__P___const_reverse_iterator',
    'struct_qlist_ui_request_t__P___iterator',
    'struct_qlist_ui_request_t__P___listnode_t',
    'struct_qlist_ui_request_t__P___reverse_iterator',
    'struct_qmutex_locker_t', 'struct_qrefcnt_obj_t',
    'struct_qrefcnt_obj_t_vtbl', 'struct_qrefcnt_t_extlang_t_',
    'struct_qrefcnt_t_qiterator_qrefcnt_t_source_file_t___',
    'struct_qrefcnt_t_qiterator_qrefcnt_t_source_item_t___',
    'struct_qrefcnt_t_refcnted_regex_t_',
    'struct_qrefcnt_t_source_file_t_',
    'struct_qrefcnt_t_source_item_t_', 'struct_qstack_token_t_',
    'struct_qstatbuf', 'struct_qvector__qstring_char__',
    'struct_qvector__qstring_unsigned_char__',
    'struct_qvector__qstring_wchar_t__', 'struct_qvector_argloc_t_',
    'struct_qvector_argpart_t_', 'struct_qvector_bool_',
    'struct_qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R__',
    'struct_qvector_bpt_t_', 'struct_qvector_bpt_t__P_',
    'struct_qvector_bptaddrs_t_', 'struct_qvector_call_stack_info_t_',
    'struct_qvector_catch_t_', 'struct_qvector_cfgopt_set_t_',
    'struct_qvector_channel_redir_t_', 'struct_qvector_char_',
    'struct_qvector_cliopt_t_', 'struct_qvector_compiled_binpat_t_',
    'struct_qvector_const_bpt_t__P_', 'struct_qvector_const_char__P_',
    'struct_qvector_const_rangeset_t__P_',
    'struct_qvector_const_twinline_t__P_',
    'struct_qvector_debug_event_t_', 'struct_qvector_direntry_t_',
    'struct_qvector_dirtree_cursor_t_', 'struct_qvector_ea_name_t_',
    'struct_qvector_edge_t_', 'struct_qvector_enum_member_t_',
    'struct_qvector_exception_info_t_',
    'struct_qvector_extlang_t__P_', 'struct_qvector_fixup_info_t_',
    'struct_qvector_funcarg_t_', 'struct_qvector_group_crinfo_t_',
    'struct_qvector_ida_syntax_highlighter_t__keywords_style_t_',
    'struct_qvector_ida_syntax_highlighter_t__multicmt_t_',
    'struct_qvector_ida_syntax_highlighter_t__plain_char_ptr_t_',
    'struct_qvector_idc_global_t_', 'struct_qvector_idp_desc_t_',
    'struct_qvector_idp_name_t_', 'struct_qvector_int_',
    'struct_qvector_intmap_t_', 'struct_qvector_ioport_bit_t_',
    'struct_qvector_ioport_t_', 'struct_qvector_jvalue_t_',
    'struct_qvector_kvp_t_',
    'struct_qvector_line_rendering_output_entry_t__P_',
    'struct_qvector_lochist_entry_t_', 'struct_qvector_long_long_',
    'struct_qvector_long_long___P__syntax_highlight_style__P__const_char__P__',
    'struct_qvector_lowcnd_t_', 'struct_qvector_memory_info_t_',
    'struct_qvector_memreg_info_t_', 'struct_qvector_modinfo_t_',
    'struct_qvector_movbpt_code_t_', 'struct_qvector_movbpt_info_t_',
    'struct_qvector_node_set_t_', 'struct_qvector_op_t_',
    'struct_qvector_point_t_', 'struct_qvector_process_info_t_',
    'struct_qvector_pushreg_t_', 'struct_qvector_qbasic_block_t_',
    'struct_qvector_qrefcnt_t_source_item_t__',
    'struct_qvector_qvector_const_char__P__',
    'struct_qvector_qvector_const_twinline_t__P__',
    'struct_qvector_qvector_int__',
    'struct_qvector_qvector_long_long__',
    'struct_qvector_qvector_unsigned_long_long__',
    'struct_qvector_range_t_', 'struct_qvector_rangeset_t_',
    'struct_qvector_rect_t_', 'struct_qvector_refinfo_desc_t_',
    'struct_qvector_reg_access_t_', 'struct_qvector_reg_info_t_',
    'struct_qvector_register_info_t_', 'struct_qvector_regobj_t_',
    'struct_qvector_regval_t_', 'struct_qvector_row_info_t_',
    'struct_qvector_rpc_packet_type_desc_t_',
    'struct_qvector_scattered_segm_t_',
    'struct_qvector_segm_move_info_t_',
    'struct_qvector_selection_item_t_', 'struct_qvector_simd_info_t_',
    'struct_qvector_simpleline_t_', 'struct_qvector_snapshot_t__P_',
    'struct_qvector_stkpnt_t_', 'struct_qvector_sync_source_t_',
    'struct_qvector_tev_info_reg_t_', 'struct_qvector_tev_info_t_',
    'struct_qvector_tev_reg_value_t_',
    'struct_qvector_thread_name_t_', 'struct_qvector_tinfo_t_',
    'struct_qvector_token_t_', 'struct_qvector_tryblk_t_',
    'struct_qvector_twinline_t_', 'struct_qvector_type_attr_t_',
    'struct_qvector_udt_member_t_', 'struct_qvector_unsigned_char_',
    'struct_qvector_unsigned_int_',
    'struct_qvector_unsigned_long_long_',
    'struct_qvector_update_bpt_info_t_', 'struct_qvector_valstr_t_',
    'struct_qvector_wchar_t_', 'struct_qvector_xreflist_entry_t_',
    'struct_range_marker_suspender_t', 'struct_range_t',
    'struct_rangeset_t', 'struct_rangevec_t', 'struct_reader_t',
    'struct_recording_rpc_engine_t', 'struct_rect_t',
    'struct_refcnted_regex_t', 'struct_refinfo_desc_t',
    'struct_refinfo_t', 'struct_reg_access_t',
    'struct_reg_accesses_t', 'struct_reg_info_t', 'struct_regarg_t',
    'struct_regex_cache_t', 'struct_regex_t',
    'struct_register_info_t', 'struct_regmatch_t', 'struct_regobj_t',
    'struct_regobjs_t', 'struct_regval_t', 'struct_regvar_t',
    'struct_relobj_t', 'struct_reloc_info_t',
    'struct_renderer_info_pos_t', 'struct_renderer_info_t',
    'struct_renderer_pos_info_t', 'struct_row_info_t',
    'struct_rpc_connection_params_t', 'struct_rpc_engine_t',
    'struct_rpc_engine_t_vtbl', 'struct_rpc_packet_data_t',
    'struct_rpc_packet_data_t_vtbl', 'struct_rpc_packet_t',
    'struct_rpc_packet_type_desc_t', 'struct_rrel_t',
    'struct_scattered_aloc_t', 'struct_scattered_segm_t',
    'struct_screen_graph_selection_t', 'struct_segm_move_info_t',
    'struct_segm_move_infos_t', 'struct_segment_t', 'struct_seh_t',
    'struct_selection_item_t', 'struct_servent', 'struct_simd_info_t',
    'struct_simple_bfi_t', 'struct_simpleline_place_t',
    'struct_simpleline_t', 'struct_snapshot_t', 'struct_sockaddr',
    'struct_sockaddr_dl', 'struct_sockaddr_in', 'struct_sockaddr_in6',
    'struct_sockaddr_in6_old', 'struct_sockaddr_in6_w2ksp1',
    'struct_sockaddr_storage', 'struct_sockaddr_storage_xp',
    'struct_sockproto', 'struct_source_file_t',
    'struct_source_item_t', 'struct_source_view_t',
    'struct_srcinfo_provider_t', 'struct_srcinfo_provider_t_vtbl',
    'struct_sreg_range_t', 'struct_stat',
    'struct_std___Alloc_exact_args_t',
    'struct_std___Alloc_unpack_tuple_t',
    'struct_std___Basic_container_proxy_ptr12',
    'struct_std___Char_traits_char16_t__unsigned_short_',
    'struct_std___Char_traits_char32_t__unsigned_int_',
    'struct_std___Char_traits_char__int_',
    'struct_std___Char_traits_unsigned_short__unsigned_short_',
    'struct_std___Char_traits_wchar_t__unsigned_short_',
    'struct_std___Compressed_pair_std__allocator_char16_t___std___String_val_std___Simple_types_char16_t____true_',
    'struct_std___Compressed_pair_std__allocator_char32_t___std___String_val_std___Simple_types_char32_t____true_',
    'struct_std___Compressed_pair_std__allocator_char___std___String_val_std___Simple_types_char____true_',
    'struct_std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true_',
    'struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true_',
    'struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true_',
    'struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true_',
    'struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true_',
    'struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P____std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____true_',
    'struct_std___Compressed_pair_std__allocator_wchar_t___std___String_val_std___Simple_types_wchar_t____true_',
    'struct_std___Compressed_pair_std__less__qstring_char____std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true___true_',
    'struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true___true_',
    'struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true___true_',
    'struct_std___Compressed_pair_std__less_network_client_handler_t__P___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P____std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____true___true_',
    'struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true___true_',
    'struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true___true_',
    'struct_std___Container_base0', 'struct_std___Container_base12',
    'struct_std___Container_proxy',
    'struct_std___Default_allocate_traits',
    'struct_std___Default_sentinel', 'struct_std___Distance_unknown',
    'struct_std___Equal_allocators', 'struct_std___Exact_args_t',
    'struct_std___Fake_allocator', 'struct_std___Fake_proxy_ptr_impl',
    'struct_std___False_copy_cat',
    'struct_std___Floating_type_traits_double_',
    'struct_std___Floating_type_traits_float_',
    'struct_std___Floating_type_traits_long_double_',
    'struct_std___Ignore', 'struct_std___Init_locks',
    'struct_std___Invoker_functor', 'struct_std___Invoker_pmd_object',
    'struct_std___Invoker_pmd_pointer',
    'struct_std___Invoker_pmd_refwrap',
    'struct_std___Invoker_pmf_object',
    'struct_std___Invoker_pmf_pointer',
    'struct_std___Invoker_pmf_refwrap',
    'struct_std___Is_character_char_',
    'struct_std___Is_character_or_bool_bool_',
    'struct_std___Is_character_signed_char_',
    'struct_std___Is_character_unsigned_char_',
    'struct_std___Iterator_base0', 'struct_std___Iterator_base12',
    'struct_std___Leave_proxy_unbound', 'struct_std___Lockit',
    'struct_std___Make_signed2_1_', 'struct_std___Make_signed2_2_',
    'struct_std___Make_signed2_4_', 'struct_std___Make_signed2_8_',
    'struct_std___Make_unsigned2_1_',
    'struct_std___Make_unsigned2_2_',
    'struct_std___Make_unsigned2_4_',
    'struct_std___Make_unsigned2_8_', 'struct_std___Maximum__',
    'struct_std___Move_allocator_tag',
    'struct_std___Narrow_char_traits_char__int_',
    'struct_std___Nontrivial_dummy_type', 'struct_std___Num_base',
    'struct_std___Num_float_base', 'struct_std___Num_int_base',
    'struct_std___One_then_variadic_args_t',
    'struct_std___Rand_urng_from_func', 'struct_std___Select_false_',
    'struct_std___String_const_iterator_std___String_val_std___Simple_types_char16_t___',
    'struct_std___String_const_iterator_std___String_val_std___Simple_types_char32_t___',
    'struct_std___String_const_iterator_std___String_val_std___Simple_types_char___',
    'struct_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___',
    'struct_std___String_constructor_concat_tag',
    'struct_std___String_constructor_rvalue_allocator_tag',
    'struct_std___String_iterator_std___String_val_std___Simple_types_char16_t___',
    'struct_std___String_iterator_std___String_val_std___Simple_types_char32_t___',
    'struct_std___String_iterator_std___String_val_std___Simple_types_char___',
    'struct_std___String_iterator_std___String_val_std___Simple_types_wchar_t___',
    'struct_std___String_val_std___Simple_types_char16_t__',
    'struct_std___String_val_std___Simple_types_char32_t__',
    'struct_std___String_val_std___Simple_types_char__',
    'struct_std___String_val_std___Simple_types_wchar_t__',
    'struct_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_compare',
    'struct_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_compare',
    'struct_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false___value_compare',
    'struct_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_compare',
    'struct_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_compare',
    'struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___',
    'struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____',
    'struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____',
    'struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____',
    'struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____',
    'struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____',
    'struct_std___Tree_id_std___Tree_node_int__void__P___P_',
    'struct_std___Tree_id_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___P_',
    'struct_std___Tree_id_std___Tree_node_std__pair_const_int__int___void__P___P_',
    'struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___P_',
    'struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___P_',
    'struct_std___Tree_id_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P___P_',
    'struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____',
    'struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____',
    'struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____',
    'struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____',
    'struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____',
    'struct_std___Tree_node_int__void__P_',
    'struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_',
    'struct_std___Tree_node_std__pair_const_int__int___void__P_',
    'struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_',
    'struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_',
    'struct_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P_',
    'struct_std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false__',
    'struct_std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false__',
    'struct_std___Tree_std___Tmap_traits_network_client_handler_t__P____qthread_t__P__std__less_network_client_handler_t__P___std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P____false__',
    'struct_std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false__',
    'struct_std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false__',
    'struct_std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false__',
    'struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___',
    'struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____',
    'struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____',
    'struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____',
    'struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____',
    'struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____',
    'struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____',
    'struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____',
    'struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____',
    'struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____',
    'struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P____',
    'struct_std___Tree_val_std___Tree_simple_types_int__',
    'struct_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____',
    'struct_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___',
    'struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___',
    'struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___',
    'struct_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P___',
    'struct_std___Unpack_tuple_t', 'struct_std___Unused_parameter',
    'struct_std___WChar_traits_char16_t_',
    'struct_std___WChar_traits_unsigned_short_',
    'struct_std___WChar_traits_wchar_t_',
    'struct_std___Zero_then_variadic_args_t',
    'struct_std__allocator_arg_t', 'struct_std__allocator_char16_t_',
    'struct_std__allocator_char32_t_', 'struct_std__allocator_char_',
    'struct_std__allocator_int_',
    'struct_std__allocator_std___Tree_node_int__void__P__',
    'struct_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__',
    'struct_std__allocator_std___Tree_node_std__pair_const_int__int___void__P__',
    'struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__',
    'struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__',
    'struct_std__allocator_std___Tree_node_std__pair_network_client_handler_t__Pconst____qthread_t__P___void__P__',
    'struct_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___',
    'struct_std__allocator_std__pair_const_int__int__',
    'struct_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__',
    'struct_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long__',
    'struct_std__allocator_std__pair_network_client_handler_t__Pconst____qthread_t__P__',
    'struct_std__allocator_void_', 'struct_std__allocator_wchar_t_',
    'struct_std__bad_alloc', 'struct_std__bad_array_new_length',
    'struct_std__bad_exception', 'struct_std__basic_string_char16_t_',
    'struct_std__basic_string_char32_t_',
    'struct_std__basic_stringstream_char_',
    'struct_std__basic_stringstream_wchar_t_',
    'struct_std__bidirectional_iterator_tag',
    'struct_std__char_traits_char16_t_',
    'struct_std__char_traits_char32_t_',
    'struct_std__char_traits_char_',
    'struct_std__char_traits_unsigned_short_',
    'struct_std__char_traits_wchar_t_', 'struct_std__common_type__',
    'struct_std__equal_to_void_', 'struct_std__exception',
    'struct_std__exception_ptr', 'struct_std__exception_vtbl',
    'struct_std__filebuf', 'struct_std__forward_iterator_tag',
    'struct_std__fpos__Mbstatet_', 'struct_std__fstream',
    'struct_std__greater_equal_void_', 'struct_std__greater_void_',
    'struct_std__hash_double_', 'struct_std__hash_float_',
    'struct_std__hash_long_double_',
    'struct_std__hash_std__nullptr_t_', 'struct_std__ifstream',
    'struct_std__initializer_list_char16_t_',
    'struct_std__initializer_list_char32_t_',
    'struct_std__initializer_list_char_',
    'struct_std__initializer_list_int_',
    'struct_std__initializer_list_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___',
    'struct_std__initializer_list_std__pair_const_int__int__',
    'struct_std__initializer_list_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__',
    'struct_std__initializer_list_std__pair_const_unsigned_long_long__unsigned_long_long__',
    'struct_std__initializer_list_std__pair_network_client_handler_t__Pconst____qthread_t__P__',
    'struct_std__initializer_list_wchar_t_',
    'struct_std__input_iterator_tag',
    'struct_std__integral_constant_bool__false_',
    'struct_std__integral_constant_bool__true_',
    'struct_std__integral_constant_unsigned_long_long__0_',
    'struct_std__ios', 'struct_std__ios_base', 'struct_std__iostream',
    'struct_std__istream', 'struct_std__istringstream',
    'struct_std__less__qstring_char__',
    'struct_std__less_equal_void_', 'struct_std__less_int_',
    'struct_std__less_network_client_handler_t__P_',
    'struct_std__less_unsigned_long_long_', 'struct_std__less_void_',
    'struct_std__locale',
    'struct_std__map__qstring_char___qrefcnt_t_refcnted_regex_t__',
    'struct_std__map_int__int_',
    'struct_std__map_network_client_handler_t__P____qthread_t__P_',
    'struct_std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_',
    'struct_std__map_unsigned_long_long__unsigned_long_long_',
    'struct_std__minus_void_', 'struct_std__multiplies_void_',
    'struct_std__nested_exception',
    'struct_std__nested_exception_vtbl',
    'struct_std__not_equal_to_void_', 'struct_std__nothrow_t',
    'struct_std__numeric_limits_bool_',
    'struct_std__numeric_limits_char16_t_',
    'struct_std__numeric_limits_char32_t_',
    'struct_std__numeric_limits_char_',
    'struct_std__numeric_limits_double_',
    'struct_std__numeric_limits_float_',
    'struct_std__numeric_limits_int_',
    'struct_std__numeric_limits_long_',
    'struct_std__numeric_limits_long_double_',
    'struct_std__numeric_limits_long_long_',
    'struct_std__numeric_limits_short_',
    'struct_std__numeric_limits_signed_char_',
    'struct_std__numeric_limits_unsigned_char_',
    'struct_std__numeric_limits_unsigned_int_',
    'struct_std__numeric_limits_unsigned_long_',
    'struct_std__numeric_limits_unsigned_long_long_',
    'struct_std__numeric_limits_unsigned_short_',
    'struct_std__numeric_limits_wchar_t_', 'struct_std__ofstream',
    'struct_std__ostream', 'struct_std__ostringstream',
    'struct_std__output_iterator_tag',
    'struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__',
    'struct_std__pair_const_int__int_',
    'struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_',
    'struct_std__pair_const_unsigned_long_long__unsigned_long_long_',
    'struct_std__pair_network_client_handler_t__Pconst____qthread_t__P_',
    'struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____',
    'struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
    'struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
    'struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
    'struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
    'struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____',
    'struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
    'struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
    'struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
    'struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
    'struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____',
    'struct_std__piecewise_construct_t', 'struct_std__plus_void_',
    'struct_std__random_access_iterator_tag',
    'struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____',
    'struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____',
    'struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char____',
    'struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____',
    'struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t____',
    'struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t____',
    'struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char____',
    'struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t____',
    'struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____',
    'struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
    'struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
    'struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
    'struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
    'struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____',
    'struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
    'struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
    'struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
    'struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
    'struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_network_client_handler_t__Pconst____qthread_t__P_____',
    'struct_std__set_int_', 'struct_std__streambuf',
    'struct_std__string', 'struct_std__stringbuf',
    'struct_std__tuple__', 'struct_std__wfilebuf',
    'struct_std__wfstream', 'struct_std__wifstream',
    'struct_std__wios', 'struct_std__wiostream',
    'struct_std__wistream', 'struct_std__wistringstream',
    'struct_std__wofstream', 'struct_std__wostream',
    'struct_std__wostringstream', 'struct_std__wstreambuf',
    'struct_std__wstring', 'struct_std__wstringbuf',
    'struct_stkarg_area_info_t', 'struct_stkpnt_t',
    'struct_stkpnts_t', 'struct_strarray_t', 'struct_string_info_t',
    'struct_strpath_t', 'struct_struc_t',
    'struct_struct_field_visitor_t',
    'struct_struct_field_visitor_t_vtbl', 'struct_structplace_t',
    'struct_strwinsetup_t', 'struct_switch_info_t',
    'struct_sync_source_t', 'struct_synced_group_t',
    'struct_syntax_highlighter_t', 'struct_syntax_highlighter_t_vtbl',
    'struct_tagABORTPATH', 'struct_tagACCEL',
    'struct_tagACCESSTIMEOUT', 'struct_tagACTCTXA',
    'struct_tagACTCTXW', 'struct_tagACTCTX_SECTION_KEYED_DATA',
    'struct_tagACTCTX_SECTION_KEYED_DATA_2600',
    'struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA',
    'struct_tagALTTABINFO', 'struct_tagANIMATIONINFO',
    'struct_tagAUDIODESCRIPTION', 'struct_tagAXESLISTA',
    'struct_tagAXESLISTW', 'struct_tagAXISINFOA',
    'struct_tagAXISINFOW', 'struct_tagBITMAP',
    'struct_tagBITMAPCOREHEADER', 'struct_tagBITMAPCOREINFO',
    'struct_tagBITMAPFILEHEADER', 'struct_tagBITMAPINFO',
    'struct_tagBITMAPINFOHEADER', 'struct_tagCANDIDATEFORM',
    'struct_tagCANDIDATELIST', 'struct_tagCBTACTIVATESTRUCT',
    'struct_tagCBT_CREATEWNDA', 'struct_tagCBT_CREATEWNDW',
    'struct_tagCHANGEFILTERSTRUCT', 'struct_tagCHARSETINFO',
    'struct_tagCIEXYZ', 'struct_tagCLIENTCREATESTRUCT',
    'struct_tagCOLORADJUSTMENT', 'struct_tagCOLORCORRECTPALETTE',
    'struct_tagCOLORMATCHTOTARGET', 'struct_tagCOMBOBOXINFO',
    'struct_tagCOMPAREITEMSTRUCT', 'struct_tagCOMPOSITIONFORM',
    'struct_tagCOPYDATASTRUCT', 'struct_tagCREATESTRUCTA',
    'struct_tagCREATESTRUCTW', 'struct_tagCURSORINFO',
    'struct_tagCURSORSHAPE', 'struct_tagCWPRETSTRUCT',
    'struct_tagCWPSTRUCT', 'struct_tagDEBUGHOOKINFO',
    'struct_tagDELETEITEMSTRUCT', 'struct_tagDESIGNVECTOR',
    'struct_tagDIBSECTION', 'struct_tagDRAWITEMSTRUCT',
    'struct_tagDRAWTEXTPARAMS', 'struct_tagDROPSTRUCT',
    'struct_tagEMR', 'struct_tagEMRALPHABLEND',
    'struct_tagEMRANGLEARC', 'struct_tagEMRARC',
    'struct_tagEMRBITBLT', 'struct_tagEMRCREATEBRUSHINDIRECT',
    'struct_tagEMRCREATECOLORSPACE', 'struct_tagEMRCREATECOLORSPACEW',
    'struct_tagEMRCREATEDIBPATTERNBRUSHPT',
    'struct_tagEMRCREATEMONOBRUSH', 'struct_tagEMRCREATEPALETTE',
    'struct_tagEMRCREATEPEN', 'struct_tagEMRELLIPSE',
    'struct_tagEMREOF', 'struct_tagEMREXCLUDECLIPRECT',
    'struct_tagEMREXTCREATEFONTINDIRECTW',
    'struct_tagEMREXTCREATEPEN', 'struct_tagEMREXTESCAPE',
    'struct_tagEMREXTFLOODFILL', 'struct_tagEMREXTSELECTCLIPRGN',
    'struct_tagEMREXTTEXTOUTA', 'struct_tagEMRFILLPATH',
    'struct_tagEMRFILLRGN', 'struct_tagEMRFORMAT',
    'struct_tagEMRFRAMERGN', 'struct_tagEMRGDICOMMENT',
    'struct_tagEMRGLSBOUNDEDRECORD', 'struct_tagEMRGLSRECORD',
    'struct_tagEMRGRADIENTFILL', 'struct_tagEMRINVERTRGN',
    'struct_tagEMRLINETO', 'struct_tagEMRMASKBLT',
    'struct_tagEMRMODIFYWORLDTRANSFORM', 'struct_tagEMRNAMEDESCAPE',
    'struct_tagEMROFFSETCLIPRGN', 'struct_tagEMRPIXELFORMAT',
    'struct_tagEMRPLGBLT', 'struct_tagEMRPOLYDRAW',
    'struct_tagEMRPOLYDRAW16', 'struct_tagEMRPOLYLINE',
    'struct_tagEMRPOLYLINE16', 'struct_tagEMRPOLYPOLYLINE',
    'struct_tagEMRPOLYPOLYLINE16', 'struct_tagEMRPOLYTEXTOUTA',
    'struct_tagEMRRESIZEPALETTE', 'struct_tagEMRRESTOREDC',
    'struct_tagEMRROUNDRECT', 'struct_tagEMRSCALEVIEWPORTEXTEX',
    'struct_tagEMRSELECTCLIPPATH', 'struct_tagEMRSELECTOBJECT',
    'struct_tagEMRSELECTPALETTE', 'struct_tagEMRSETARCDIRECTION',
    'struct_tagEMRSETCOLORADJUSTMENT', 'struct_tagEMRSETCOLORSPACE',
    'struct_tagEMRSETDIBITSTODEVICE', 'struct_tagEMRSETICMPROFILE',
    'struct_tagEMRSETMAPPERFLAGS', 'struct_tagEMRSETMITERLIMIT',
    'struct_tagEMRSETPALETTEENTRIES', 'struct_tagEMRSETPIXELV',
    'struct_tagEMRSETTEXTCOLOR', 'struct_tagEMRSETVIEWPORTEXTEX',
    'struct_tagEMRSETVIEWPORTORGEX', 'struct_tagEMRSETWORLDTRANSFORM',
    'struct_tagEMRSTRETCHBLT', 'struct_tagEMRSTRETCHDIBITS',
    'struct_tagEMRTEXT', 'struct_tagEMRTRANSPARENTBLT',
    'struct_tagENHMETAHEADER', 'struct_tagENHMETARECORD',
    'struct_tagENUMLOGFONTA', 'struct_tagENUMLOGFONTEXA',
    'struct_tagENUMLOGFONTEXDVA', 'struct_tagENUMLOGFONTEXDVW',
    'struct_tagENUMLOGFONTEXW', 'struct_tagENUMLOGFONTW',
    'struct_tagENUMTEXTMETRICA', 'struct_tagENUMTEXTMETRICW',
    'struct_tagENUMUILANG', 'struct_tagEVENTMSG',
    'struct_tagEXTLOGFONTA', 'struct_tagEXTLOGFONTW',
    'struct_tagEXTLOGPEN', 'struct_tagEXTLOGPEN32',
    'struct_tagFILTERKEYS', 'struct_tagFONTSIGNATURE',
    'struct_tagGCP_RESULTSA', 'struct_tagGCP_RESULTSW',
    'struct_tagGESTURECONFIG', 'struct_tagGESTUREINFO',
    'struct_tagGESTURENOTIFYSTRUCT', 'struct_tagGLYPHSET',
    'struct_tagGUITHREADINFO', 'struct_tagHANDLETABLE',
    'struct_tagHARDWAREHOOKSTRUCT', 'struct_tagHARDWAREINPUT',
    'struct_tagHELPINFO', 'struct_tagHELPWININFOA',
    'struct_tagHELPWININFOW', 'struct_tagHIGHCONTRASTA',
    'struct_tagHIGHCONTRASTW', 'struct_tagHW_PROFILE_INFOA',
    'struct_tagHW_PROFILE_INFOW', 'struct_tagICEXYZTRIPLE',
    'struct_tagICONMETRICSA', 'struct_tagICONMETRICSW',
    'struct_tagIMECHARPOSITION', 'struct_tagIMEMENUITEMINFOA',
    'struct_tagIMEMENUITEMINFOW', 'struct_tagINPUT',
    'struct_tagINPUT_INJECTION_VALUE',
    'struct_tagINPUT_MESSAGE_SOURCE', 'struct_tagINPUT_TRANSFORM',
    'struct_tagINPUT_TRANSFORM_0_0',
    'struct_tagINPUT_TRANSFORM___BC9DE73C29EDB084DB192818DBB6F25B_0',
    'struct_tagKBDLLHOOKSTRUCT', 'struct_tagKERNINGPAIR',
    'struct_tagKEYBDINPUT', 'struct_tagLASTINPUTINFO',
    'struct_tagLAYERPLANEDESCRIPTOR', 'struct_tagLOCALESIGNATURE',
    'struct_tagLOGBRUSH', 'struct_tagLOGBRUSH32',
    'struct_tagLOGCOLORSPACEA', 'struct_tagLOGCOLORSPACEW',
    'struct_tagLOGFONTA', 'struct_tagLOGFONTW',
    'struct_tagLOGPALETTE', 'struct_tagLOGPEN',
    'struct_tagMDICREATESTRUCTA', 'struct_tagMDICREATESTRUCTW',
    'struct_tagMDINEXTMENU', 'struct_tagMEASUREITEMSTRUCT',
    'struct_tagMENUBARINFO', 'struct_tagMENUGETOBJECTINFO',
    'struct_tagMENUINFO', 'struct_tagMENUITEMINFOA',
    'struct_tagMENUITEMINFOW', 'struct_tagMETAFILEPICT',
    'struct_tagMETAHEADER', 'struct_tagMETARECORD',
    'struct_tagMINIMIZEDMETRICS', 'struct_tagMINMAXINFO',
    'struct_tagMONITORINFO', 'struct_tagMONITORINFOEXA',
    'struct_tagMONITORINFOEXW', 'struct_tagMOUSEHOOKSTRUCT',
    'struct_tagMOUSEHOOKSTRUCTEX', 'struct_tagMOUSEINPUT',
    'struct_tagMOUSEKEYS', 'struct_tagMOUSEMOVEPOINT',
    'struct_tagMSG', 'struct_tagMSGBOXPARAMSA',
    'struct_tagMSGBOXPARAMSW', 'struct_tagMSLLHOOKSTRUCT',
    'struct_tagMULTIKEYHELPA', 'struct_tagMULTIKEYHELPW',
    'struct_tagNCCALCSIZE_PARAMS', 'struct_tagNEWTEXTMETRICA',
    'struct_tagNEWTEXTMETRICEXA', 'struct_tagNEWTEXTMETRICEXW',
    'struct_tagNEWTEXTMETRICW', 'struct_tagNMHDR',
    'struct_tagNONCLIENTMETRICSA', 'struct_tagNONCLIENTMETRICSW',
    'struct_tagPAINTSTRUCT', 'struct_tagPALETTEENTRY',
    'struct_tagPANOSE', 'struct_tagPELARRAY',
    'struct_tagPIXELFORMATDESCRIPTOR', 'struct_tagPOINT',
    'struct_tagPOINTER_DEVICE_CURSOR_INFO',
    'struct_tagPOINTER_DEVICE_INFO',
    'struct_tagPOINTER_DEVICE_PROPERTY', 'struct_tagPOINTER_INFO',
    'struct_tagPOINTER_PEN_INFO', 'struct_tagPOINTER_TOUCH_INFO',
    'struct_tagPOINTER_TYPE_INFO', 'struct_tagPOINTFX',
    'struct_tagPOINTS', 'struct_tagPOLYTEXTA', 'struct_tagPOLYTEXTW',
    'struct_tagRAWHID', 'struct_tagRAWINPUT',
    'struct_tagRAWINPUTDEVICE', 'struct_tagRAWINPUTDEVICELIST',
    'struct_tagRAWINPUTHEADER', 'struct_tagRAWKEYBOARD',
    'struct_tagRAWMOUSE', 'struct_tagRAWMOUSE_0_0',
    'struct_tagRAWMOUSE___D16F4B76036832D8B5309DC026E37BC4_0',
    'struct_tagRECONVERTSTRING', 'struct_tagRECT',
    'struct_tagREGISTERWORDA', 'struct_tagREGISTERWORDW',
    'struct_tagRGBQUAD', 'struct_tagRGBTRIPLE',
    'struct_tagRID_DEVICE_INFO', 'struct_tagRID_DEVICE_INFO_HID',
    'struct_tagRID_DEVICE_INFO_KEYBOARD',
    'struct_tagRID_DEVICE_INFO_MOUSE', 'struct_tagSCROLLBARINFO',
    'struct_tagSCROLLINFO', 'struct_tagSERIALKEYSA',
    'struct_tagSERIALKEYSW', 'struct_tagSIZE',
    'struct_tagSOUNDSENTRYA', 'struct_tagSOUNDSENTRYW',
    'struct_tagSTICKYKEYS', 'struct_tagSTYLEBUFA',
    'struct_tagSTYLEBUFW', 'struct_tagSTYLESTRUCT',
    'struct_tagTEXTMETRICA', 'struct_tagTEXTMETRICW',
    'struct_tagTITLEBARINFO', 'struct_tagTITLEBARINFOEX',
    'struct_tagTOGGLEKEYS', 'struct_tagTOUCHINPUT',
    'struct_tagTOUCH_HIT_TESTING_INPUT',
    'struct_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION',
    'struct_tagTPMPARAMS', 'struct_tagTRACKMOUSEEVENT',
    'struct_tagTTPOLYCURVE', 'struct_tagTTPOLYGONHEADER',
    'struct_tagTouchPredictionParameters',
    'struct_tagUPDATELAYEREDWINDOWINFO', 'struct_tagUSAGE_PROPERTIES',
    'struct_tagUSEROBJECTFLAGS', 'struct_tagVS_FIXEDFILEINFO',
    'struct_tagWCRANGE', 'struct_tagWINDOWINFO',
    'struct_tagWINDOWPLACEMENT', 'struct_tagWINDOWPOS',
    'struct_tagWNDCLASSA', 'struct_tagWNDCLASSEXA',
    'struct_tagWNDCLASSEXW', 'struct_tagWNDCLASSW',
    'struct_tagWTSSESSION_NOTIFICATION', 'struct_tagXFORM',
    'struct_tev_info_reg_t', 'struct_tev_info_t',
    'struct_tev_reg_value_t', 'struct_text_sink_t',
    'struct_text_sink_t_vtbl', 'struct_textctrl_info_t',
    'struct_thread_name_t', 'struct_til_bucket_t',
    'struct_til_stream_t', 'struct_til_symbol_t', 'struct_til_t',
    'struct_timespec', 'struct_timeval', 'struct_tinfo_t',
    'struct_tinfo_visitor_t', 'struct_tinfo_visitor_t_vtbl',
    'struct_tm', 'struct_token_t', 'struct_try_handler_t',
    'struct_tryblk_t', 'struct_twinline_t', 'struct_twinpos_t',
    'struct_type_attr_t', 'struct_type_info', 'struct_type_mods_t',
    'struct_typedef_type_data_t', 'struct_udt_member_t',
    'struct_udt_type_data_t', 'struct_udtmembervec_t',
    'struct_ui_request_t', 'struct_ui_request_t_vtbl',
    'struct_ui_requests_t', 'struct_uint128',
    'struct_update_bpt_info_t', 'struct_user_defined_prefix_t',
    'struct_user_defined_prefix_t_vtbl', 'struct_user_graph_place_t',
    'struct_val_context', 'struct_valinfo_t', 'struct_valstr_t',
    'struct_valstr_t__flatten_args_t', 'struct_valstrs_t',
    'struct_value_entA', 'struct_value_entW',
    'struct_value_u__d128_t', 'struct_value_u__dq_t',
    'struct_value_u__dt_t', 'struct_view_mouse_event_t',
    'struct_xrefblk_t', 'struct_xreflist_entry_t', 'struct_xrefpos_t',
    'strvec_t', 'sval_t', 'svalvec_t', 'sync_source_vec_t',
    'syntax_highlight_style', 'table_checker_t', 'tagAR_STATE',
    'tagFEEDBACK_TYPE', 'tagHANDEDNESS',
    'tagINPUT_MESSAGE_DEVICE_TYPE', 'tagINPUT_MESSAGE_ORIGIN_ID',
    'tagPOINTER_BUTTON_CHANGE_TYPE', 'tagPOINTER_DEVICE_CURSOR_TYPE',
    'tagPOINTER_DEVICE_TYPE', 'tagPOINTER_INPUT_TYPE',
    'tail_owner_changed', 'tcc_place_type_t', 'tcc_renderer_type_t',
    'terminate_function', 'terminate_handler', 'tev_bpt', 'tev_call',
    'tev_event', 'tev_insn', 'tev_max', 'tev_mem', 'tev_none',
    'tev_reg_values_t', 'tev_ret', 'tev_type_t', 'tevinfo_vec_t',
    'tevinforeg_vec_t', 'text_t', 'thid_t', 'thread_name_vec_t',
    'thunk_func_created', 'ti_changed', 'tid_t', 'time_t',
    'tinfo_code_t', 'tinfovec_t', 'tokenstack_t', 'tracked_regs_t',
    'tryblks_t', 'tryblks_updated', 'tty_control_t', 'twidget_type_t',
    'type_attrs_t', 'type_sign_t', 'type_t', 'u_char', 'u_int',
    'u_int64', 'u_long', 'u_short', 'ucdr_kind_t', 'uchar',
    'ui_activate_widget', 'ui_add_idckey', 'ui_addons',
    'ui_analyzer_options', 'ui_ask_addr', 'ui_ask_buttons',
    'ui_ask_file', 'ui_ask_form', 'ui_ask_long', 'ui_ask_seg',
    'ui_ask_str', 'ui_ask_text', 'ui_attach_action_to_menu',
    'ui_attach_action_to_popup', 'ui_attach_action_to_toolbar',
    'ui_attach_dynamic_action_to_popup', 'ui_banner', 'ui_beep',
    'ui_broadcast', 'ui_cancel_exec_request',
    'ui_cancel_thread_exec_requests', 'ui_choose',
    'ui_choose_bookmark', 'ui_chooser_default_enter',
    'ui_close_chooser', 'ui_close_widget', 'ui_clr_cancelled',
    'ui_copywarn', 'ui_create_code_viewer', 'ui_create_custom_viewer',
    'ui_create_desktop_widget', 'ui_create_empty_widget',
    'ui_create_menu', 'ui_create_source_viewer', 'ui_create_toolbar',
    'ui_current_widget_changed', 'ui_custom_viewer_jump',
    'ui_custom_viewer_set_userdata', 'ui_database_closed',
    'ui_database_inited', 'ui_dbg_add_bpt', 'ui_dbg_add_bpt_tev',
    'ui_dbg_add_call_tev', 'ui_dbg_add_debug_event',
    'ui_dbg_add_insn_tev', 'ui_dbg_add_many_tevs',
    'ui_dbg_add_oldbpt', 'ui_dbg_add_path_mapping',
    'ui_dbg_add_ret_tev', 'ui_dbg_add_tev', 'ui_dbg_add_thread',
    'ui_dbg_add_vmod', 'ui_dbg_attach_process', 'ui_dbg_begin',
    'ui_dbg_bin_search', 'ui_dbg_bring_to_front',
    'ui_dbg_change_bptlocs', 'ui_dbg_check_bpt',
    'ui_dbg_choose_trace_file', 'ui_dbg_clear_requests_queue',
    'ui_dbg_clear_trace', 'ui_dbg_collect_stack_trace',
    'ui_dbg_compare_bpt_locs', 'ui_dbg_continue_process',
    'ui_dbg_define_exception', 'ui_dbg_del_bpt', 'ui_dbg_del_bptgrp',
    'ui_dbg_del_oldbpt', 'ui_dbg_del_thread', 'ui_dbg_del_vmod',
    'ui_dbg_detach_process', 'ui_dbg_diff_trace_file',
    'ui_dbg_edit_manual_regions', 'ui_dbg_enable_bblk_trace',
    'ui_dbg_enable_bpt', 'ui_dbg_enable_bptgrp',
    'ui_dbg_enable_func_trace', 'ui_dbg_enable_insn_trace',
    'ui_dbg_enable_manual_regions', 'ui_dbg_enable_oldbpt',
    'ui_dbg_enable_step_trace', 'ui_dbg_end', 'ui_dbg_exit_process',
    'ui_dbg_find_bpt', 'ui_dbg_for_all_bpts',
    'ui_dbg_get_bblk_trace_options', 'ui_dbg_get_bpt',
    'ui_dbg_get_bpt_group', 'ui_dbg_get_bpt_qty',
    'ui_dbg_get_bpt_tev_ea', 'ui_dbg_get_bptloc_string',
    'ui_dbg_get_call_tev_callee', 'ui_dbg_get_current_source_file',
    'ui_dbg_get_current_source_line', 'ui_dbg_get_current_thread',
    'ui_dbg_get_debug_event', 'ui_dbg_get_event_cond',
    'ui_dbg_get_first_module', 'ui_dbg_get_func_trace_options',
    'ui_dbg_get_global_var', 'ui_dbg_get_grp_bpts',
    'ui_dbg_get_insn_tev_reg_mem', 'ui_dbg_get_insn_tev_reg_result',
    'ui_dbg_get_insn_tev_reg_result_i', 'ui_dbg_get_insn_tev_reg_val',
    'ui_dbg_get_insn_tev_reg_val_i', 'ui_dbg_get_insn_trace_options',
    'ui_dbg_get_ip_val', 'ui_dbg_get_local_var',
    'ui_dbg_get_local_vars', 'ui_dbg_get_manual_regions',
    'ui_dbg_get_memory_info', 'ui_dbg_get_module_info',
    'ui_dbg_get_next_module', 'ui_dbg_get_process_options',
    'ui_dbg_get_process_state', 'ui_dbg_get_processes',
    'ui_dbg_get_reg_info', 'ui_dbg_get_reg_val',
    'ui_dbg_get_reg_val_i', 'ui_dbg_get_reg_value_type',
    'ui_dbg_get_ret_tev_return', 'ui_dbg_get_running_notification',
    'ui_dbg_get_running_request', 'ui_dbg_get_sp_val',
    'ui_dbg_get_srcinfo_provider', 'ui_dbg_get_step_trace_options',
    'ui_dbg_get_tev_ea', 'ui_dbg_get_tev_event',
    'ui_dbg_get_tev_info', 'ui_dbg_get_tev_memory_info',
    'ui_dbg_get_tev_qty', 'ui_dbg_get_tev_tid', 'ui_dbg_get_tev_type',
    'ui_dbg_get_thread_qty', 'ui_dbg_get_trace_base_address',
    'ui_dbg_get_trace_dynamic_register_set',
    'ui_dbg_get_trace_file_desc', 'ui_dbg_get_trace_platform',
    'ui_dbg_getn_bpt', 'ui_dbg_getn_thread',
    'ui_dbg_getn_thread_name', 'ui_dbg_graph_trace',
    'ui_dbg_handle_debug_event', 'ui_dbg_hide_all_bpts',
    'ui_dbg_internal_appcall', 'ui_dbg_internal_cleanup_appcall',
    'ui_dbg_internal_get_elang', 'ui_dbg_internal_get_sreg_base',
    'ui_dbg_internal_ioctl', 'ui_dbg_internal_set_elang',
    'ui_dbg_is_bblk_trace_enabled', 'ui_dbg_is_busy',
    'ui_dbg_is_func_trace_enabled', 'ui_dbg_is_insn_trace_enabled',
    'ui_dbg_is_step_trace_enabled', 'ui_dbg_is_valid_trace_file',
    'ui_dbg_list_bptgrps', 'ui_dbg_load_dbg_dbginfo',
    'ui_dbg_load_debugger', 'ui_dbg_load_trace_file',
    'ui_dbg_map_source_file_path', 'ui_dbg_map_source_path',
    'ui_dbg_modify_source_paths', 'ui_dbg_read_memory',
    'ui_dbg_read_registers', 'ui_dbg_register_provider',
    'ui_dbg_rename_bptgrp', 'ui_dbg_request_add_bpt',
    'ui_dbg_request_add_oldbpt', 'ui_dbg_request_attach_process',
    'ui_dbg_request_clear_trace', 'ui_dbg_request_continue_process',
    'ui_dbg_request_del_bpt', 'ui_dbg_request_del_oldbpt',
    'ui_dbg_request_detach_process',
    'ui_dbg_request_enable_bblk_trace', 'ui_dbg_request_enable_bpt',
    'ui_dbg_request_enable_func_trace',
    'ui_dbg_request_enable_insn_trace',
    'ui_dbg_request_enable_oldbpt',
    'ui_dbg_request_enable_step_trace', 'ui_dbg_request_exit_process',
    'ui_dbg_request_resume_thread', 'ui_dbg_request_run_to',
    'ui_dbg_request_select_thread',
    'ui_dbg_request_set_bblk_trace_options',
    'ui_dbg_request_set_func_trace_options',
    'ui_dbg_request_set_insn_trace_options',
    'ui_dbg_request_set_reg_val', 'ui_dbg_request_set_resume_mode',
    'ui_dbg_request_set_step_trace_options',
    'ui_dbg_request_start_process', 'ui_dbg_request_step_into',
    'ui_dbg_request_step_over', 'ui_dbg_request_step_until_ret',
    'ui_dbg_request_suspend_process', 'ui_dbg_request_suspend_thread',
    'ui_dbg_resume_thread', 'ui_dbg_retrieve_exceptions',
    'ui_dbg_run_requests', 'ui_dbg_run_to', 'ui_dbg_save_trace_file',
    'ui_dbg_select_thread', 'ui_dbg_set_bblk_trace_options',
    'ui_dbg_set_bpt_group', 'ui_dbg_set_bptloc_group',
    'ui_dbg_set_bptloc_string', 'ui_dbg_set_debugger_options',
    'ui_dbg_set_event_cond', 'ui_dbg_set_func_trace_options',
    'ui_dbg_set_highlight_trace_options',
    'ui_dbg_set_insn_trace_options', 'ui_dbg_set_manual_regions',
    'ui_dbg_set_process_options', 'ui_dbg_set_process_state',
    'ui_dbg_set_reg_val', 'ui_dbg_set_reg_val_i',
    'ui_dbg_set_remote_debugger', 'ui_dbg_set_resume_mode',
    'ui_dbg_set_step_trace_options', 'ui_dbg_set_trace_base_address',
    'ui_dbg_set_trace_dynamic_register_set',
    'ui_dbg_set_trace_file_desc', 'ui_dbg_set_trace_platform',
    'ui_dbg_set_trace_size', 'ui_dbg_srcdbg_request_step_into',
    'ui_dbg_srcdbg_request_step_over',
    'ui_dbg_srcdbg_request_step_until_ret', 'ui_dbg_srcdbg_step_into',
    'ui_dbg_srcdbg_step_over', 'ui_dbg_srcdbg_step_until_ret',
    'ui_dbg_start_process', 'ui_dbg_step_into', 'ui_dbg_step_over',
    'ui_dbg_step_until_ret', 'ui_dbg_store_exceptions',
    'ui_dbg_suspend_process', 'ui_dbg_suspend_thread',
    'ui_dbg_unregister_provider', 'ui_dbg_update_bpt',
    'ui_dbg_wait_for_next_event', 'ui_dbg_write_memory',
    'ui_dbg_write_register', 'ui_debugger_menu_change',
    'ui_delete_menu', 'ui_delete_toolbar', 'ui_desktop_applied',
    'ui_destroy_custom_viewer', 'ui_destroying_plugmod',
    'ui_destroying_procmod', 'ui_detach_action_from_menu',
    'ui_detach_action_from_popup', 'ui_detach_action_from_toolbar',
    'ui_display_widget', 'ui_ea_viewer_history_info',
    'ui_ea_viewer_history_push_and_jump',
    'ui_enable_chooser_item_attrs', 'ui_execute_sync',
    'ui_execute_ui_requests', 'ui_execute_ui_requests_list',
    'ui_find_widget', 'ui_finish_populating_widget_popup',
    'ui_free_custom_icon', 'ui_gen_disasm_text',
    'ui_gen_idanode_text', 'ui_genfile_callback',
    'ui_get_action_attr', 'ui_get_active_modal_widget',
    'ui_get_chooser_data', 'ui_get_chooser_item_attrs',
    'ui_get_chooser_obj', 'ui_get_curline', 'ui_get_curplace',
    'ui_get_current_viewer', 'ui_get_current_widget', 'ui_get_cursor',
    'ui_get_custom_viewer_curline', 'ui_get_custom_viewer_hint',
    'ui_get_custom_viewer_location',
    'ui_get_custom_viewer_place_xcoord', 'ui_get_ea_hint',
    'ui_get_highlight_2', 'ui_get_item_hint', 'ui_get_kernel_version',
    'ui_get_key_code', 'ui_get_lines_rendering_info', 'ui_get_opnum',
    'ui_get_output_curline', 'ui_get_output_cursor',
    'ui_get_output_selected_text', 'ui_get_range_marker',
    'ui_get_registered_actions', 'ui_get_renderer_type',
    'ui_get_synced_group', 'ui_get_tab_size',
    'ui_get_user_input_event', 'ui_get_viewer_place_type',
    'ui_get_viewer_user_data', 'ui_get_widget_config',
    'ui_get_widget_title', 'ui_get_widget_type', 'ui_get_window_id',
    'ui_hexdumpea', 'ui_idcstart', 'ui_idcstop',
    'ui_initing_database', 'ui_install_cli',
    'ui_install_custom_datatype_menu',
    'ui_install_custom_optype_menu', 'ui_is_idaq', 'ui_is_idaview',
    'ui_is_msg_inited', 'ui_jump_in_custom_viewer', 'ui_jumpto',
    'ui_last', 'ui_load_custom_icon', 'ui_load_custom_icon_file',
    'ui_load_file', 'ui_lock_range_refresh', 'ui_lookup_key_code',
    'ui_mbox', 'ui_msg', 'ui_msg_clear', 'ui_msg_get_lines',
    'ui_msg_save', 'ui_navband_ea', 'ui_navband_pixel', 'ui_noabort',
    'ui_notification_t', 'ui_null', 'ui_obsolete_dbg_save_bpts',
    'ui_obsolete_del_idckey', 'ui_obsolete_display_widget',
    'ui_obsolete_get_highlight',
    'ui_obsolete_get_user_strlist_options',
    'ui_obsolete_refresh_custom_code_viewer',
    'ui_obsolete_set_nav_colorizer', 'ui_open_builtin',
    'ui_open_form', 'ui_open_url', 'ui_plugin_loaded',
    'ui_plugin_unloading', 'ui_populating_widget_popup',
    'ui_postprocess_action', 'ui_preprocess_action',
    'ui_process_action', 'ui_range', 'ui_read_range_selection',
    'ui_read_selection', 'ui_ready_to_run', 'ui_refresh',
    'ui_refresh_chooser', 'ui_refresh_choosers',
    'ui_refresh_custom_viewer', 'ui_refresh_navband',
    'ui_refreshmarked', 'ui_register_action', 'ui_register_timer',
    'ui_repaint_qwidget', 'ui_restore_database_snapshot', 'ui_resume',
    'ui_run_dbg', 'ui_saved', 'ui_saving', 'ui_screen_ea_changed',
    'ui_screenea', 'ui_set_cancelled',
    'ui_set_code_viewer_line_handlers',
    'ui_set_custom_viewer_handler', 'ui_set_custom_viewer_handlers',
    'ui_set_custom_viewer_mode', 'ui_set_custom_viewer_range',
    'ui_set_dock_pos', 'ui_set_highlight', 'ui_set_mappings',
    'ui_set_nav_colorizer', 'ui_set_renderer_type',
    'ui_set_widget_config', 'ui_setidle', 'ui_setup_plugins_menu',
    'ui_show_rename_dialog', 'ui_strchoose', 'ui_suspend',
    'ui_sync_sources', 'ui_take_database_snapshot',
    'ui_test_cancelled', 'ui_unlock_range_refresh', 'ui_unmarksel',
    'ui_unrecognized_config_directive', 'ui_unregister_action',
    'ui_unregister_timer', 'ui_update_action_attr',
    'ui_update_file_history', 'ui_updated_actions',
    'ui_updating_actions', 'ui_widget_closing', 'ui_widget_invisible',
    'ui_widget_visible', 'uint', 'uint16', 'uint16_t', 'uint32',
    'uint32_t', 'uint64', 'uint64_t', 'uint8', 'uint8_t',
    'uint_fast16_t', 'uint_fast32_t', 'uint_fast64_t', 'uint_fast8_t',
    'uint_least16_t', 'uint_least32_t', 'uint_least64_t',
    'uint_least8_t', 'uintmax_t', 'uintptr_t', 'ulonglong',
    'unexpected_function', 'unexpected_handler',
    'union_COPYFILE2_MESSAGE___2BC58A2C9DBA44DF3EF418C4A17194B7',
    'union_DISPLAYCONFIG_MODE_INFO_0',
    'union_DISPLAYCONFIG_MODE_INFO___C7CF589F1BDAE095827AC382B7F00856',
    'union_DISPLAYCONFIG_PATH_SOURCE_INFO_0',
    'union_DISPLAYCONFIG_PATH_SOURCE_INFO___61AC9E76C5182660D462789AB8034D76',
    'union_DISPLAYCONFIG_PATH_TARGET_INFO_0',
    'union_DISPLAYCONFIG_PATH_TARGET_INFO___B261276D3FD515915541A20464F2F9DB',
    'union_DISPLAYCONFIG_SET_TARGET_PERSISTENCE_0',
    'union_DISPLAYCONFIG_SET_TARGET_PERSISTENCE___355D109C8B4E4AEF84271C7784D7E191',
    'union_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION_0',
    'union_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION___F2BD161A31B09014C59BCA8CDC8BCA06',
    'union_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS_0',
    'union_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS___3212247FCB36E76CDA904B8EF1794EF2',
    'union_DISPLAYCONFIG_VIDEO_SIGNAL_INFO_0',
    'union_DISPLAYCONFIG_VIDEO_SIGNAL_INFO___02DB0BCC62B9453EF0457B26FA75659A',
    'union_FILE_ID_DESCRIPTOR_0',
    'union_FILE_ID_DESCRIPTOR___8E49B83756FA870B89867F74A9FED542',
    'union_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA',
    'union_IMAGE_COR20_HEADER_0',
    'union_IMAGE_COR20_HEADER___E1FE6205D93F2F82192FEC2E33E07792',
    'union_IMPORT_OBJECT_HEADER_0',
    'union_IMPORT_OBJECT_HEADER___F13446938FF52D319F41757B924F73DA',
    'union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2_0',
    'union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2_1',
    'union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2_2',
    'union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2___24D5DC675E3913B8B06B55B4E2DB0C90',
    'union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2___2A64B77520F2A34D7924D1A56C664C3F',
    'union_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2___7F0F891057759C60E9CD030D0A5BE1F8',
    'union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2_0',
    'union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2_1',
    'union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2_2',
    'union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2___24D5DC675E3913B8B06B55B4E2DB0C90',
    'union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2___6DB75D7626B6ECEE1E30DEEE34E471B9',
    'union_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2___7F0F891057759C60E9CD030D0A5BE1F8',
    'union_MEM_EXTENDED_PARAMETER_1',
    'union_MEM_EXTENDED_PARAMETER___A0403279FD043597B1263DCA6F7108AC',
    'union_PROCESSOR_IDLESTATE_POLICY___92CEA922AA6C5711F3A617A61DD3E595',
    'union_PROCESSOR_PERFSTATE_POLICY_0',
    'union_PROCESSOR_PERFSTATE_POLICY___023BDF5A3E405C5FDBB98FDB10D7DC6F',
    'union_SCOPE_ID_0',
    'union_SCOPE_ID___0B63E1DABDB20D0A7182B70FFF1E8AB8',
    'union_WIN32_MEMORY_REGION_INFORMATION_0',
    'union_WIN32_MEMORY_REGION_INFORMATION___D9148D26D5024FAA6F599B7E87F7CC62',
    'union__1180E8A9723E3D60053FF928AEC5AEC6',
    'union__657BB06EF05633356CF4CD431076EE5F',
    'union__737796C66F638B60D7AE7CF23E72B833',
    'union__9960A4B9B2F8A839702CFE4E98B853A5',
    'union__CDD487EB51D46C5701426B2D522638C3',
    'union__CHAR_INFO___6865AF651A3BEAEC02D0CF34CD163F4C',
    'union__CLAIM_SECURITY_ATTRIBUTES_INFORMATION___A782A26146F232936242A16156D893CD',
    'union__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1___980039CADE3C96E6EA936992968C6F5C',
    'union__CLAIM_SECURITY_ATTRIBUTE_V1___9D06E66596D2F403644E74768BC21264',
    'union__CONTEXT_0',
    'union__CONTEXT___8025DFDFE77BC942FFD833580971BF6A',
    'union__DEBUG_EVENT___0BAA10E6C7131A6C8731CA0719364B74',
    'union__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_0',
    'union__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO___D1ED48533BBC5D15418F532CAE9A0A65',
    'union__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE_0',
    'union__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE___04E95D2921E0D60839C4D595B69CF99E',
    'union__ENCLAVE_INIT_INFO_VBS_BASIC_0',
    'union__ENCLAVE_INIT_INFO_VBS_BASIC___E986470CD2C6DC02ADF7706A4698918A',
    'union__F655080F086C2BFA46941FA1A6DAACEC_0',
    'union__F655080F086C2BFA46941FA1A6DAACEC_1',
    'union__FILE_REMOTE_PROTOCOL_INFO___EE68D4708CE0036909D2CBEE6610F96A',
    'union__FILE_RENAME_INFO_0',
    'union__FILE_RENAME_INFO___204296FCB7589B91A70F8DC5DCC63ECC',
    'union__FILE_SEGMENT_ELEMENT',
    'union__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_0',
    'union__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY___753D12A4F228928B8D07C64DF63FE1B7',
    'union__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY_0',
    'union__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY___40EF8B5EADD7A1EA5B4C64A8F5FEAC1B',
    'union__IMAGE_AUX_SYMBOL', 'union__IMAGE_AUX_SYMBOL_EX',
    'union__IMAGE_DELAYLOAD_DESCRIPTOR___9046E4C7D059E43F244FD172AEF6AF0D',
    'union__IMAGE_FUNCTION_ENTRY64_0',
    'union__IMAGE_FUNCTION_ENTRY64___3D77D7EA71DF37DBAEF11B4582D443AA',
    'union__IMAGE_IMPORT_DESCRIPTOR_0',
    'union__IMAGE_IMPORT_DESCRIPTOR___C8792122BD3539A55438287892A93E11',
    'union__IMAGE_LINENUMBER___DA78A16261B4BEF6A303D7389260D886',
    'union__IMAGE_POLICY_ENTRY___3C333738E8F6485347B0F0631B642D30',
    'union__IMAGE_RELOCATION_0',
    'union__IMAGE_RELOCATION___2EB1567E979FC6E3EBD596876A027ED1',
    'union__IMAGE_RESOURCE_DIRECTORY_ENTRY_0',
    'union__IMAGE_RESOURCE_DIRECTORY_ENTRY_1',
    'union__IMAGE_RESOURCE_DIRECTORY_ENTRY___A0A516DD47125A4E74292661543AC098',
    'union__IMAGE_RESOURCE_DIRECTORY_ENTRY___D318A949D2AEB9EBF3E43D786E93C450',
    'union__IMAGE_RUNTIME_FUNCTION_ENTRY_0',
    'union__IMAGE_RUNTIME_FUNCTION_ENTRY___8E0A60A2DAA7D27352B4BE14956F6EAE',
    'union__IMAGE_SECTION_HEADER___B20B6FDCB4F1775194C54A2EDD59D5CE',
    'union__IMAGE_SYMBOL_EX___DE3AFBD7AC8D9D18ABFE421162305292',
    'union__IMAGE_SYMBOL___DE3AFBD7AC8D9D18ABFE421162305292',
    'union__IMAGE_THUNK_DATA32___D4D343E3E3F3D59BBD61641B4D60CB2A',
    'union__IMAGE_THUNK_DATA64___A353DE2894FC33A63C1ED01FD652CC1F',
    'union__IMAGE_TLS_DIRECTORY32_0',
    'union__IMAGE_TLS_DIRECTORY32___3BFF79CBF6517510E85FD75955602401',
    'union__IMAGE_TLS_DIRECTORY64_0',
    'union__IMAGE_TLS_DIRECTORY64___3BFF79CBF6517510E85FD75955602401',
    'union__INPUT_RECORD___BC370DB86BCA335F1D16EEE9563B3E68',
    'union__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION_0',
    'union__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION___0A78906577EB6A018A7D48DE378D86E6',
    'union__KEY_EVENT_RECORD___6865AF651A3BEAEC02D0CF34CD163F4C',
    'union__KNONVOLATILE_CONTEXT_POINTERS_0',
    'union__KNONVOLATILE_CONTEXT_POINTERS_1',
    'union__KNONVOLATILE_CONTEXT_POINTERS___4C940C1D04ED6E0FA4259925A0783C75',
    'union__KNONVOLATILE_CONTEXT_POINTERS___FA2959FC6C6AC532662CCE355387EAC6',
    'union__LARGE_INTEGER',
    'union__LDT_ENTRY___4A55B64DEEFB63B09A05523A0EA37EAD',
    'union__NT_TIB32_0',
    'union__NT_TIB32___36B74FAB262AB83958B69319F9AD6700',
    'union__NT_TIB64_0',
    'union__NT_TIB64___A58BD77A585D2445D581DF07685A0FEF',
    'union__NT_TIB_0',
    'union__NT_TIB___4F592BB387BBBAD2B76D6EEE6EFB58F3',
    'union__OVERLAPPED_0',
    'union__OVERLAPPED___6E7EFA1536A982BE75506BE32C556979',
    'union__PROCESS_HEAP_ENTRY_0',
    'union__PROCESS_HEAP_ENTRY___FFEE264ECE09353B104F318C8E03795B',
    'union__PROCESS_MITIGATION_ASLR_POLICY_0',
    'union__PROCESS_MITIGATION_ASLR_POLICY___EF23D35D4AFD2CAFE17C817A6832F69D',
    'union__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY_0',
    'union__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY___70C6A6FD2FD0CF4EFFD8E31632FF14D1',
    'union__PROCESS_MITIGATION_CHILD_PROCESS_POLICY_0',
    'union__PROCESS_MITIGATION_CHILD_PROCESS_POLICY___1A60AB6814E02BE900E9811249F44F13',
    'union__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY_0',
    'union__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY___2FA0893F5F94738320789EE0A61135E4',
    'union__PROCESS_MITIGATION_DEP_POLICY_0',
    'union__PROCESS_MITIGATION_DEP_POLICY___FD136180483B4938AC5BD93E37872B76',
    'union__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY_0',
    'union__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY___B4E19A71168CE34C20DDB8F98D338030',
    'union__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY_0',
    'union__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY___33429AB7D8029A757D69069187804440',
    'union__PROCESS_MITIGATION_FONT_DISABLE_POLICY_0',
    'union__PROCESS_MITIGATION_FONT_DISABLE_POLICY___A466DDF007E94507B09CD23EE821B6F2',
    'union__PROCESS_MITIGATION_IMAGE_LOAD_POLICY_0',
    'union__PROCESS_MITIGATION_IMAGE_LOAD_POLICY___F1DB64D83105ED650921E8060312C7D8',
    'union__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY_0',
    'union__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY___662A0C451AAED41D63A8BDF38CF1AF82',
    'union__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY_0',
    'union__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY___B3E481CD684705DFC321378EBAD5261E',
    'union__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY_0',
    'union__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY___FD33BDC57BCEB8233764351EEFC4E5C6',
    'union__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY_0',
    'union__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY___AD9536122EB431DA68DD4C2B47022529',
    'union__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY_0',
    'union__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY___4A990042AB6F435BCDDE2B1E73AF4442',
    'union__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY_0',
    'union__PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY___5D8775A7512CE1BF8AA67C836AC34CF6',
    'union__RATE_QUOTA_LIMIT',
    'union__REASON_CONTEXT___07FAF44D955D57A82DC73DBC6D1E4962',
    'union__RTL_RUN_ONCE',
    'union__SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM___79768E4F68CBD00179EF5BE8FD6925FD',
    'union__SE_SID', 'union__SE_TOKEN_USER_0',
    'union__SE_TOKEN_USER_1',
    'union__SE_TOKEN_USER___5CA11C7D954FC986D58E1B423D36FFDC',
    'union__SE_TOKEN_USER___F5E98B4F76FAACF7031760F1DEA230FC',
    'union__SLIST_HEADER', 'union__SOCKADDR_INET',
    'union__SYSTEM_CPU_SET_INFORMATION_0',
    'union__SYSTEM_CPU_SET_INFORMATION___4C07F9F4DAD68F59647F76D6630D6FCA',
    'union__SYSTEM_INFO_0',
    'union__SYSTEM_INFO___5384D611651B5BF37083DC1389C27803',
    'union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_0',
    'union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX_0',
    'union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX___197D4A2D4E66A1B805F54436C362DBE8',
    'union__SYSTEM_LOGICAL_PROCESSOR_INFORMATION___A72591C6312B90667A3E1A9E7D6F3CE1',
    'union__TP_CALLBACK_ENVIRON_V3___34B3E5F5CB73BCB2FAADC1B6818ABE8D',
    'union__ULARGE_INTEGER', 'union__UMS_SYSTEM_THREAD_INFORMATION_0',
    'union__UMS_SYSTEM_THREAD_INFORMATION___A39E9D10E6C6FC3307A25E827527C5A0',
    'union__WOW64_LDT_ENTRY___4A55B64DEEFB63B09A05523A0EA37EAD',
    'union__WSACOMPLETION___6ECDC46EB850293233999C04EE6F6DBB',
    'union__XSTATE_CONFIGURATION_0',
    'union__XSTATE_CONFIGURATION___0E174CAD3789465778ACEBD04EE85B1A',
    'union__devicemodeA_0', 'union__devicemodeA_1',
    'union__devicemodeA___391FF029AC41787D2EB74613AC39F8F9',
    'union__devicemodeA___EE3F7634911691A91B39D1F433B0CE04',
    'union__devicemodeW_0', 'union__devicemodeW_1',
    'union__devicemodeW___391FF029AC41787D2EB74613AC39F8F9',
    'union__devicemodeW___EE3F7634911691A91B39D1F433B0CE04',
    'union__double_val', 'union__float_const', 'union__float_val',
    'union__ldouble_val', 'union_action_ctx_base_source_t',
    'union_argloc_t_0',
    'union_argloc_t___6BE26F2DC3BD49B7B415E512C333AEE4',
    'union_callui_t', 'union_cfgopt_t_0', 'union_cfgopt_t_1',
    'union_cfgopt_t___520FE22CA735B42199839BFA51A95DC1',
    'union_cfgopt_t___E63BAB3383D3A85693CC29A7ABAAB8B7',
    'union_func_t_0',
    'union_func_t___190F1B51DAD89E14E2BE7DA9DE59BCBC',
    'union_idc_value_t_0',
    'union_idc_value_t___B5D45BAF0C91A61557C5F5ABF5FB1D44',
    'union_in6_addr___46CCC274F7B290215A66EE70CB5F323B',
    'union_in_addr___2B6035E3436C90F2F7E43C06385B7488',
    'union_input_event_t_0',
    'union_input_event_t___F3C8F5E9C7D26C2A8509C540BA2A20D8',
    'union_insn_t_0',
    'union_insn_t___9E84824C699BAE5425C4537D9D91097B',
    'union_jvalue_t_0',
    'union_jvalue_t___E3629753B7679DAEDC4DC0D611766B23',
    'union_lex_value_t_0',
    'union_lex_value_t___511FB7214E5937D85C36537DA5D3C419',
    'union_op_t_0', 'union_op_t_1', 'union_op_t_2', 'union_op_t_3',
    'union_op_t___355AB7214167B95D8B5C7B6316BAAD36',
    'union_op_t___45BD1DDA02ACF400568455B314CE2DFE',
    'union_op_t___B5B57D01B492307C249AAF11037C7C50',
    'union_op_t___D19208C9BED479775D09B0229B31B2BF', 'union_opinfo_t',
    'union_regval_t_0',
    'union_regval_t___EEAEB4CADE21DABB4BB43158C5D5B2F9',
    'union_sockaddr_gen', 'union_sockaddr_in6_0',
    'union_sockaddr_in6___21D370470BAAB911774FB64E0374D268',
    'union_std___String_val_std___Simple_types_char16_t_____Bxty',
    'union_std___String_val_std___Simple_types_char32_t_____Bxty',
    'union_std___String_val_std___Simple_types_char_____Bxty',
    'union_std___String_val_std___Simple_types_wchar_t_____Bxty',
    'union_switch_info_t_0',
    'union_switch_info_t___C5DE5EF0754122DC92472705FC220635',
    'union_tagINPUT_0', 'union_tagINPUT_TRANSFORM_0',
    'union_tagINPUT_TRANSFORM___BC9DE73C29EDB084DB192818DBB6F25B',
    'union_tagINPUT___F9B27FB5300028B0D7A4B79CCB2B2C87',
    'union_tagPOINTER_TYPE_INFO_0',
    'union_tagPOINTER_TYPE_INFO___71AA05D2A51BF06CF0B3BE8EA1064FB3',
    'union_tagRAWINPUT___052B64A875BF00260122F2612F072C5D',
    'union_tagRAWMOUSE_0',
    'union_tagRAWMOUSE___D16F4B76036832D8B5309DC026E37BC4',
    'union_tagRID_DEVICE_INFO_0',
    'union_tagRID_DEVICE_INFO___AE6C69A71CAB30230B16287457ACEE02',
    'union_token_t_0', 'union_token_t_1',
    'union_token_t___3D5BEF5E36E80DC11FFAA595727647C4',
    'union_token_t___8299423771E115C2E8FEC5C7170C0424',
    'union_typedef_type_data_t_0',
    'union_typedef_type_data_t___5FA288E9F36186DAB0C04B104ACC3745',
    'union_value_u', 'union_view_mouse_event_location_t',
    'update_bpt_vec_t', 'update_type_t', 'updating_tryblks',
    'upgraded', 'ushort', 'utc_timestamp_t', 'uval_t', 'uvalvec_t',
    'va_list', 'valstrvec_t', 'view_activated', 'view_click',
    'view_close', 'view_created', 'view_curpos', 'view_dblclick',
    'view_deactivated', 'view_event_state_t', 'view_keydown',
    'view_loc_changed', 'view_mouse_event_t__location_t',
    'view_mouse_moved', 'view_mouse_over', 'view_notification_t',
    'view_switched', 'vme_button_t', 'wchar16_t', 'wchar32_t',
    'wctype_t', 'wint_t', 'xScale_mar', 'xScale_mia', 'xScale_miabb',
    'xScale_miabt', 'xScale_miaph', 'xScale_miatb', 'xScale_miatt',
    'xScale_mra', 'xreflist_t']
