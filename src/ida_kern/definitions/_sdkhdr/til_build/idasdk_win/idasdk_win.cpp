#include "../common.h"

struct std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true___true_;
struct std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____;
struct std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____;
struct std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true_;
struct std___Compressed_pair_std__less__qstring_char____std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true___true_;
struct std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true___true_;
struct std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______;
struct std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_compare;
struct std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false__;
struct std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____;
struct std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______;
struct std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____;
struct std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true_;
struct std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true_;
struct std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true___true_;
struct std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____;
struct std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_compare;
struct std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____;
struct std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false__;
struct std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____;
struct std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_compare;
struct std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false__;
struct std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____;
struct std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____;
struct std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____;
struct std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true___true_;
struct std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true_;
struct std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____;
struct std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____;
struct std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____;
struct std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______;
struct std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____;
struct std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______;
struct std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____;
struct std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___P_;
struct std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____;
struct std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__;
struct std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___;
struct std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____;
struct std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____;
struct std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____;
struct std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____;
struct std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____;
struct std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____;
struct std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_;
struct std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true_;
struct std__initializer_list_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__;
struct std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____;
struct std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____;
struct std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__;
struct std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____;
struct std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_compare;
struct std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false__;
struct std___Tree_id_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___P_;
struct std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____;
struct std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__;
struct std___Compressed_pair_std__allocator_char16_t___std___String_val_std___Simple_types_char16_t____true_;
struct std___Compressed_pair_std__allocator_char32_t___std___String_val_std___Simple_types_char32_t____true_;
struct std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____;
struct std___Compressed_pair_std__allocator_wchar_t___std___String_val_std___Simple_types_wchar_t____true_;
struct std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___P_;
struct std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____;
struct std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____;
struct std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____;
struct std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__;
struct std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____;
struct std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___;
struct std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_;
struct std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char____;
struct std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____;
struct std___Compressed_pair_std__allocator_char___std___String_val_std___Simple_types_char____true_;
struct std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____;
struct std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t____;
struct std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t____;
struct std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t____;
struct std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_;
struct std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char____;
struct std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____;
struct std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_;
struct std__initializer_list_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___;
struct std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_;
struct std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___;
struct std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false__;
struct std__initializer_list_std__pair_const_unsigned_long_long__unsigned_long_long__;
struct std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___;
struct std___String_const_iterator_std___String_val_std___Simple_types_char16_t___;
struct std___String_const_iterator_std___String_val_std___Simple_types_char32_t___;
struct std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___;
struct std___String_const_iterator_std___String_val_std___Simple_types_char___;
struct std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___;
struct std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long__;
struct qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R__;
struct std___String_iterator_std___String_val_std___Simple_types_char16_t___;
struct std___String_iterator_std___String_val_std___Simple_types_char32_t___;
struct std___Tree_id_std___Tree_node_std__pair_const_int__int___void__P___P_;
struct std___String_iterator_std___String_val_std___Simple_types_wchar_t___;
struct std__allocator_std___Tree_node_std__pair_const_int__int___void__P__;
struct std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___;
struct qvector_long_long___P__syntax_highlight_style__P__const_char__P__;
struct std___String_iterator_std___String_val_std___Simple_types_char___;
struct std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__;
struct backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t;
struct std__pair_const_unsigned_long_long__unsigned_long_long_;
struct std__map__qstring_char___qrefcnt_t_refcnted_regex_t__;
struct qvector_ida_syntax_highlighter_t__keywords_style_t_;
struct qvector_ida_syntax_highlighter_t__plain_char_ptr_t_;
struct std___Tree_node_std__pair_const_int__int___void__P_;
struct backward_flow_iterator_t_no_regs_t__simple_bfi_t_;
struct std___Char_traits_unsigned_short__unsigned_short_;
struct std__initializer_list_std__pair_const_int__int__;
struct std__map_unsigned_long_long__unsigned_long_long_;
struct ida_movable_type_line_rendering_output_entry_t_;
struct std___Tree_id_std___Tree_node_int__void__P___P_;
struct qlist_ui_request_t__P___const_reverse_iterator;
struct qrefcnt_t_qiterator_qrefcnt_t_source_file_t___;
struct qrefcnt_t_qiterator_qrefcnt_t_source_item_t___;
struct std___String_val_std___Simple_types_char16_t__;
struct std___String_val_std___Simple_types_char32_t__;
struct qvector_ida_syntax_highlighter_t__multicmt_t_;
struct std___String_constructor_rvalue_allocator_tag;
struct std___String_val_std___Simple_types_wchar_t__;
struct std__allocator_std___Tree_node_int__void__P__;
struct std__integral_constant_unsigned_long_long__0_;
struct std___Tree_val_std___Tree_simple_types_int__;
struct std___Char_traits_char16_t__unsigned_short_;
struct ida_syntax_highlighter_t__keywords_style_t;
struct ida_syntax_highlighter_t__plain_char_ptr_t;
struct input_event_t__input_event_keyboard_data_t;
struct input_event_t__input_event_shortcut_data_t;
struct std___Char_traits_wchar_t__unsigned_short_;
struct std___String_val_std___Simple_types_char__;
struct qvector_line_rendering_output_entry_t__P_;
struct std___Char_traits_char32_t__unsigned_int_;
struct std__allocator_std__pair_const_int__int__;
struct qiterator_qrefcnt_t_source_file_t___vtbl;
struct qiterator_qrefcnt_t_source_item_t___vtbl;
struct qlist_ui_request_t__P___reverse_iterator;
struct input_event_t__input_event_mouse_data_t;
struct std___Floating_type_traits_long_double_;
struct std__numeric_limits_unsigned_long_long_;
struct ida_movable_type_bitfield_type_data_t_;
struct qlist_ui_request_t__P___const_iterator;
struct ida_movable_type_typedef_type_data_t_;
struct qvector_qvector_const_twinline_t__P__;
struct ida_syntax_highlighter_t__multicmt_t;
struct ida_movable_type_array_type_data_t_;
struct ida_movable_type_call_stack_info_t_;
struct ida_movable_type_compiled_binpat_t_;
struct ida_movable_type_update_bpt_info_t_;
struct qiterator_qrefcnt_t_source_file_t__;
struct qiterator_qrefcnt_t_source_item_t__;
struct std___Narrow_char_traits_char__int_;
struct std___String_constructor_concat_tag;
struct std__integral_constant_bool__false_;
struct std__numeric_limits_unsigned_short_;
struct _Combined_type_float__long_double_;
struct ida_movable_type_dirtree_cursor_t_;
struct ida_movable_type_enum_type_data_t_;
struct ida_movable_type_exception_info_t_;
struct ida_movable_type_scattered_aloc_t_;
struct ida_movable_type_scattered_segm_t_;
struct ida_movable_type_segm_move_info_t_;
struct ida_movable_type_xreflist_entry_t_;
struct qlist_ui_request_t__P___listnode_t;
struct std___Floating_type_traits_double_;
struct std___WChar_traits_unsigned_short_;
struct std__integral_constant_bool__true_;
struct std__numeric_limits_unsigned_char_;
struct std__numeric_limits_unsigned_long_;
struct _0B605D7B00AC5C12C153272CF5BD15AF;
struct _37EC8ECBAB39934116D1B12D6D12C693;
struct _C21FB2E1BAA97F44BFD298211C4C916B;
struct _EBE02DBEC342F8268AFE19180D75885B;
struct ida_movable_type_lochist_entry_t_;
struct ida_movable_type_ptr_type_data_t_;
struct ida_movable_type_register_info_t_;
struct ida_movable_type_tev_reg_value_t_;
struct ida_movable_type_udt_type_data_t_;
struct qvector_qrefcnt_t_source_item_t__;
struct std___Basic_container_proxy_ptr12;
struct std___Floating_type_traits_float_;
struct std___Is_character_unsigned_char_;
struct std__basic_istringstream_wchar_t_;
struct std__basic_ostringstream_wchar_t_;
struct std__numeric_limits_unsigned_int_;
struct ida_movable_type_bpt_location_t_;
struct ida_movable_type_locchange_md_t_;
struct ida_movable_type_process_info_t_;
struct ida_movable_type_refinfo_desc_t_;
struct ida_movable_type_tev_info_reg_t_;
struct qlist_ui_request_t__P___iterator;
struct qvector__qstring_unsigned_char__;
struct std___Is_character_or_bool_bool_;
struct std__basic_stringstream_wchar_t_;
struct std__char_traits_unsigned_short_;
struct std__numeric_limits_long_double_;
struct std__numeric_limits_signed_char_;
struct ida_movable_type_debug_event_t_;
struct ida_movable_type_enum_member_t_;
struct ida_movable_type_memory_info_t_;
struct ida_movable_type_memreg_info_t_;
struct ida_movable_type_movbpt_info_t_;
struct ida_movable_type_string_info_t_;
struct ida_movable_type_sync_source_t_;
struct ida_movable_type_try_handler_t_;
struct qvector_qvector_const_char__P__;
struct std___Is_character_signed_char_;
struct std___Zero_then_variadic_args_t;
struct std__bidirectional_iterator_tag;
struct std__initializer_list_char16_t_;
struct std__initializer_list_char32_t_;
struct std__random_access_iterator_tag;
struct ida_movable_type_fixup_info_t_;
struct ida_movable_type_idc_global_t_;
struct ida_movable_type_ioport_bit_t_;
struct ida_movable_type_reg_access_t_;
struct ida_movable_type_sreg_range_t_;
struct ida_movable_type_til_symbol_t_;
struct ida_movable_type_udt_member_t_;
struct std___One_then_variadic_args_t;
struct std__bad_array_new_length_vtbl;
struct std__basic_istringstream_char_;
struct std__basic_ostringstream_char_;
struct std__initializer_list_wchar_t_;
struct std__numeric_limits_long_long_;
struct _Combined_type_float__double_;
struct _Real_widened_double__double_;
struct ida_movable_type_idc_value_t_;
struct ida_movable_type_load_info_t_;
struct ida_movable_type_simd_info_t_;
struct ida_movable_type_type_attr_t_;
struct ida_syntax_highlighter_t_vtbl;
struct line_rendering_output_entry_t;
struct std___Default_allocate_traits;
struct std___Tree_node_int__void__P_;
struct std__basic_streambuf_wchar_t_;
struct std__basic_stringbuf_wchar_t_;
struct std__basic_stringstream_char_;
struct std__less_unsigned_long_long_;
struct std__numeric_limits_char16_t_;
struct std__numeric_limits_char32_t_;
struct _Real_widened_double__float_;
struct _Real_widened_float__double_;
struct ida_movable_type_dbg_info_t_;
struct ida_movable_type_direntry_t_;
struct ida_movable_type_idp_desc_t_;
struct ida_movable_type_idp_name_t_;
struct ida_movable_type_rangeset_t_;
struct ida_movable_type_reg_info_t_;
struct ida_movable_type_snapshot_t_;
struct ida_movable_type_twinline_t_;
struct qvector_const_rangeset_t__P_;
struct qvector_const_twinline_t__P_;
struct std___Char_traits_char__int_;
struct std___WChar_traits_char16_t_;
struct std__basic_ifstream_wchar_t_;
struct std__basic_iostream_wchar_t_;
struct std__basic_ofstream_wchar_t_;
struct std__numeric_limits_wchar_t_;
struct _Real_widened_float__float_;
struct choose_ioport_parser_t_vtbl;
struct ida_lowertype_helper_t_vtbl;
struct ida_movable_type_argpart_t_;
struct ida_movable_type_ea_name_t_;
struct ida_movable_type_funcarg_t_;
struct ida_movable_type_lochist_t_;
struct ida_movable_type_modinfo_t_;
struct ida_movable_type_valinfo_t_;
struct qrefcnt_t_refcnted_regex_t_;
struct qvector_qvector_long_long__;
struct qvector_unsigned_long_long_;
struct std___Nontrivial_dummy_type;
struct std___WChar_traits_wchar_t_;
struct std__basic_filebuf_wchar_t_;
struct std__basic_fstream_wchar_t_;
struct std__basic_istream_wchar_t_;
struct std__basic_ostream_wchar_t_;
struct std__basic_string_char16_t_;
struct std__basic_string_char32_t_;
struct std__initializer_list_char_;
struct std__numeric_limits_double_;
struct struct_field_visitor_t_vtbl;
struct enum_member_visitor_t_vtbl;
struct ida_movable_type_argloc_t_;
struct ida_movable_type_cliopt_t_;
struct ida_movable_type_ioport_t_;
struct ida_movable_type_jvalue_t_;
struct ida_movable_type_regarg_t_;
struct ida_movable_type_regobj_t_;
struct ida_movable_type_regval_t_;
struct ida_movable_type_regvar_t_;
struct ida_movable_type_stkpnt_t_;
struct ida_movable_type_tryblk_t_;
struct ida_movable_type_valstr_t_;
struct qvector__qstring_wchar_t__;
struct qvector_call_stack_info_t_;
struct qvector_compiled_binpat_t_;
struct qvector_update_bpt_info_t_;
struct std___Alloc_unpack_tuple_t;
struct std__basic_streambuf_char_;
struct std__basic_string_wchar_t_;
struct std__basic_stringbuf_char_;
struct std__char_traits_char16_t_;
struct std__char_traits_char32_t_;
struct std__initializer_list_int_;
struct std__nested_exception_vtbl;
struct std__numeric_limits_float_;
struct std__numeric_limits_short_;
struct std__piecewise_construct_t;
struct user_defined_prefix_t_vtbl;
struct action_ctx_base_cur_sel_t;
struct const_aloc_visitor_t_vtbl;
struct graph_node_visitor_t_vtbl;
struct graph_path_visitor_t_vtbl;
struct ida_movable_type_catch_t_;
struct ida_movable_type_point_t_;
struct ida_movable_type_range_t_;
struct ida_movable_type_tinfo_t_;
struct ida_movable_type_token_t_;
struct post_event_visitor_t_vtbl;
struct qvector_dirtree_cursor_t_;
struct qvector_exception_info_t_;
struct qvector_scattered_segm_t_;
struct qvector_segm_move_info_t_;
struct qvector_selection_item_t_;
struct qvector_xreflist_entry_t_;
struct std___Fake_proxy_ptr_impl;
struct std___Invoker_pmd_pointer;
struct std___Invoker_pmd_refwrap;
struct std___Invoker_pmf_pointer;
struct std___Invoker_pmf_refwrap;
struct std___Leave_proxy_unbound;
struct std___Rand_urng_from_func;
struct std__bad_array_new_length;
struct std__basic_ifstream_char_;
struct std__basic_iostream_char_;
struct std__basic_ofstream_char_;
struct std__char_traits_wchar_t_;
struct std__forward_iterator_tag;
struct std__hash_std__nullptr_t_;
struct std__less__qstring_char__;
struct std__numeric_limits_bool_;
struct std__numeric_limits_char_;
struct std__numeric_limits_long_;
struct std__pair_const_int__int_;
struct syntax_highlighter_t_vtbl;
struct __crt_locale_data_public;
struct altadjust_visitor_t_vtbl;
struct cancellable_graph_t_vtbl;
struct custom_refinfo_handler_t;
struct custom_viewer_handlers_t;
struct ida_movable_type_edge_t_;
struct ida_movable_type_func_t_;
struct ida_movable_type_jarr_t_;
struct ida_movable_type_jobj_t_;
struct ida_movable_type_rect_t_;
struct ida_syntax_highlighter_t;
struct lines_rendering_output_t;
struct macro_constructor_t_vtbl;
struct qrefcnt_t_source_file_t_;
struct qrefcnt_t_source_item_t_;
struct qvector_channel_redir_t_;
struct qvector_lochist_entry_t_;
struct qvector_register_info_t_;
struct qvector_tev_reg_value_t_;
struct range_marker_suspender_t;
struct screen_graph_selection_t;
struct std___Alloc_exact_args_t;
struct std___Invoker_pmd_object;
struct std___Invoker_pmf_object;
struct std___Is_character_char_;
struct std___Move_allocator_tag;
struct std__allocator_char16_t_;
struct std__allocator_char32_t_;
struct std__basic_filebuf_char_;
struct std__basic_fstream_char_;
struct std__basic_istream_char_;
struct std__basic_ostream_char_;
struct std__greater_equal_void_;
struct std__numeric_limits_int_;
struct std__output_iterator_tag;
struct valstr_t__flatten_args_t;
struct _Real_type_long_double_;
struct _qstring_unsigned_char_;
struct ida_movable_type_bpt_t_;
struct ida_movable_type_kvp_t_;
struct ida_movable_type_seh_t_;
struct ioports_fallback_t_vtbl;
struct launch_process_params_t;
struct lines_rendering_input_t;
struct lowertype_helper_t_vtbl;
struct qvector__qstring_char__;
struct qvector_const_bpt_t__P_;
struct qvector_group_crinfo_t_;
struct qvector_process_info_t_;
struct qvector_qbasic_block_t_;
struct qvector_refinfo_desc_t_;
struct qvector_tev_info_reg_t_;
struct simpleline_place_t_vtbl;
struct srcinfo_provider_t_vtbl;
struct std___Make_unsigned2_1_;
struct std___Make_unsigned2_2_;
struct std___Make_unsigned2_4_;
struct std___Make_unsigned2_8_;
struct std__allocator_wchar_t_;
struct std__bad_exception_vtbl;
struct std__basic_ios_wchar_t_;
struct std__basic_string_char_;
struct std__input_iterator_tag;
struct std__not_equal_to_void_;
struct user_graph_place_t_vtbl;
struct argtinfo_helper_t_vtbl;
struct choose_ioport_parser_t;
struct custom_data_type_ids_t;
struct dirtree_visitor_t_vtbl;
struct dynamic_register_set_t;
struct extlang_visitor_t_vtbl;
struct file_enumerator_t_vtbl;
struct func_parent_iterator_t;
struct highlighter_cbs_t_vtbl;
struct ida_lowertype_helper_t;
struct janitor_t_linput_t__P_;
struct qlist_ui_request_t__P_;
struct qvector_const_char__P_;
struct qvector_debug_event_t_;
struct qvector_enum_member_t_;
struct qvector_memory_info_t_;
struct qvector_memreg_info_t_;
struct qvector_movbpt_code_t_;
struct qvector_movbpt_info_t_;
struct qvector_snapshot_t__P_;
struct qvector_sync_source_t_;
struct qvector_thread_name_t_;
struct qvector_unsigned_char_;
struct std___Container_base12;
struct std___Default_sentinel;
struct std___Distance_unknown;
struct std___Equal_allocators;
struct std___Unused_parameter;
struct std__char_traits_char_;
struct std__hash_long_double_;
struct struct_field_visitor_t;
struct __crt_locale_pointers;
struct abstract_graph_t_vtbl;
struct action_handler_t_vtbl;
struct cfgopt_t__num_range_t;
struct enum_member_visitor_t;
struct event_listener_t_vtbl;
struct generic_linput_t_vtbl;
struct graph_location_info_t;
struct memory_deserializer_t;
struct qvector_cfgopt_set_t_;
struct qvector_extlang_t__P_;
struct qvector_fixup_info_t_;
struct qvector_idc_global_t_;
struct qvector_ioport_bit_t_;
struct qvector_qvector_int__;
struct qvector_reg_access_t_;
struct qvector_simpleline_t_;
struct qvector_udt_member_t_;
struct qvector_unsigned_int_;
struct refcnted_regex_t_vtbl;
struct std___Container_base0;
struct std___Container_proxy;
struct std___Invoker_functor;
struct std___Iterator_base12;
struct std___Make_signed2_1_;
struct std___Make_signed2_2_;
struct std___Make_signed2_4_;
struct std___Make_signed2_8_;
struct std__less_equal_void_;
struct std__multiplies_void_;
struct std__nested_exception;
struct user_defined_prefix_t;
struct __crt_multibyte_data;
struct __std_exception_data;
struct bitfield_type_data_t;
struct chooser_item_attrs_t;
struct chooser_multi_t_vtbl;
struct const_aloc_visitor_t;
struct edge_infos_wrapper_t;
struct func_item_iterator_t;
struct func_tail_iterator_t;
struct graph_node_visitor_t;
struct graph_path_visitor_t;
struct graph_visitor_t_vtbl;
struct janitor_t__iobuf__P_;
struct mutable_graph_t_vtbl;
struct post_event_visitor_t;
struct qrefcnt_t_extlang_t_;
struct qvector_simd_info_t_;
struct qvector_type_attr_t_;
struct std___Fake_allocator;
struct std___False_copy_cat;
struct std___Iterator_base0;
struct std___Num_float_base;
struct std___Unpack_tuple_t;
struct std__allocator_char_;
struct std__allocator_void_;
struct std__allocator_arg_t;
struct std__basic_ios_char_;
struct std__fpos__Mbstatet_;
struct syntax_highlighter_t;
struct tinfo_visitor_t_vtbl;
struct _EXCEPTION_POINTERS;
struct aloc_visitor_t_vtbl;
struct altadjust_visitor_t;
struct cancellable_graph_t;
struct chooser_base_t_vtbl;
struct dirtree_selection_t;
struct edge_layout_point_t;
struct exec_request_t_vtbl;
struct form_actions_t_vtbl;
struct hexplace_gen_t_vtbl;
struct idc_resolver_t_vtbl;
struct jump_pattern_t_vtbl;
struct macro_constructor_t;
struct qvector_bptaddrs_t_;
struct qvector_direntry_t_;
struct qvector_idp_desc_t_;
struct qvector_idp_name_t_;
struct qvector_node_set_t_;
struct qvector_rangeset_t_;
struct qvector_reg_info_t_;
struct qvector_row_info_t_;
struct qvector_tev_info_t_;
struct qvector_twinline_t_;
struct renderer_info_pos_t;
struct renderer_pos_info_t;
struct std___Select_false_;
struct std__allocator_int_;
struct std__bad_alloc_vtbl;
struct std__equal_to_void_;
struct std__exception_vtbl;
struct typedef_type_data_t;
struct _CrtMemBlockHeader;
struct array_parameters_t;
struct bpt_visitor_t_vtbl;
struct cfgopt_t__params_t;
struct chooser_t__cbret_t;
struct depth_first_info_t;
struct dirtree_iterator_t;
struct format_data_info_t;
struct ioports_fallback_t;
struct lowertype_helper_t;
struct outctx_base_t_vtbl;
struct qflow_chart_t_vtbl;
struct qrefcnt_obj_t_vtbl;
struct qvector_argpart_t_;
struct qvector_ea_name_t_;
struct qvector_funcarg_t_;
struct qvector_long_long_;
struct qvector_modinfo_t_;
struct simpleline_place_t;
struct source_file_t_vtbl;
struct source_item_t_vtbl;
struct srcinfo_provider_t;
struct std___Exact_args_t;
struct std___Num_int_base;
struct std__bad_exception;
struct std__common_type__;
struct std__exception_ptr;
struct std__greater_void_;
struct std__map_int__int_;
struct stkarg_area_info_t;
struct structplace_t_vtbl;
struct user_graph_place_t;
struct view_mouse_event_t;
struct _Real_type_float_;
struct __crt_locale_data;
struct _qstring_wchar_t_;
struct _wfinddata32i64_t;
struct _wfinddata64i32_t;
struct action_ctx_base_t;
struct argtinfo_helper_t;
struct array_type_data_t;
struct call_stack_info_t;
struct compiled_binpat_t;
struct dirtree_visitor_t;
struct extlang_visitor_t;
struct file_enumerator_t;
struct highlighter_cbs_t;
struct instant_dbgopts_t;
struct interr_exc_t_vtbl;
struct qvector_argloc_t_;
struct qvector_bpt_t__P_;
struct qvector_cliopt_t_;
struct qvector_intmap_t_;
struct qvector_ioport_t_;
struct qvector_jvalue_t_;
struct qvector_lowcnd_t_;
struct qvector_regobj_t_;
struct qvector_regval_t_;
struct qvector_stkpnt_t_;
struct qvector_tryblk_t_;
struct qvector_valstr_t_;
struct segm_move_infos_t;
struct std__hash_double_;
struct ui_request_t_vtbl;
struct update_bpt_info_t;
struct _finddata32i64_t;
struct _finddata64i32_t;
struct abstract_graph_t;
struct action_handler_t;
struct cfgopt_set_vec_t;
struct dirtree_cursor_t;
struct enum_type_data_t;
struct enumplace_t_vtbl;
struct event_listener_t;
struct exception_info_t;
struct func_type_data_t;
struct gdl_graph_t_vtbl;
struct generic_linput_t;
struct predicate_t_vtbl;
struct qvector_catch_t_;
struct qvector_point_t_;
struct qvector_range_t_;
struct qvector_tinfo_t_;
struct qvector_token_t_;
struct qvector_wchar_t_;
struct refcnted_regex_t;
struct scattered_aloc_t;
struct scattered_segm_t;
struct segm_move_info_t;
struct selection_item_t;
struct std___Init_locks;
struct std__hash_float_;
struct std__minus_void_;
struct text_sink_t_vtbl;
struct xreflist_entry_t;
struct channel_redir_t;
struct chooser_multi_t;
struct compiler_info_t;
struct edge_segs_vec_t;
struct expanded_area_t;
struct fixup_handler_t;
struct graph_visitor_t;
struct hexplace_t_vtbl;
struct idaplace_t_vtbl;
struct linput_buffer_t;
struct lochist_entry_t;
struct mutable_graph_t;
struct node_ordering_t;
struct ptr_type_data_t;
struct qmutex_locker_t;
struct qstack_token_t_;
struct qvector_edge_t_;
struct qvector_rect_t_;
struct register_info_t;
struct renderer_info_t;
struct std___Maximum__;
struct std__less_void_;
struct std__plus_void_;
struct tev_reg_value_t;
struct textctrl_info_t;
struct tinfo_visitor_t;
struct udt_type_data_t;
struct value_u__d128_t;
struct __finddata64_t;
struct __qsemaphore_t;
struct _qstring_char_;
struct _wfinddata32_t;
struct _wfinddata64_t;
struct aloc_visitor_t;
struct auto_display_t;
struct bpt_location_t;
struct chooser_base_t;
struct chooser_t_vtbl;
struct custloc_desc_t;
struct debapp_attrs_t;
struct dirspec_t_vtbl;
struct dirtree_impl_t;
struct edge_segment_t;
struct encoder_t_vtbl;
struct exec_request_t;
struct form_actions_t;
struct getname_info_t;
struct group_crinfo_t;
struct hexplace_gen_t;
struct hidden_range_t;
struct idc_resolver_t;
struct ignore_micro_t;
struct jump_pattern_t;
struct locchange_md_t;
struct plugmod_t_vtbl;
struct process_info_t;
struct procmod_t_vtbl;
struct qbasic_block_t;
struct qvector_bpt_t_;
struct qvector_kvp_t_;
struct refinfo_desc_t;
struct reg_accesses_t;
struct std___Num_base;
struct std__bad_alloc;
struct std__exception;
struct std__less_int_;
struct std__nothrow_t;
struct synced_group_t;
struct tev_info_reg_t;
struct udtmembervec_t;
struct _finddata32_t;
struct action_desc_t;
struct bpt_visitor_t;
struct data_format_t;
struct debug_event_t;
struct enum_member_t;
struct ext_idcfunc_t;
struct input_event_t;
struct memory_info_t;
struct memreg_info_t;
struct movbpt_info_t;
struct node_iterator;
struct outctx_base_t;
struct outctx_t_vtbl;
struct plugin_info_t;
struct qflow_chart_t;
struct qrefcnt_obj_t;
struct qvector_bool_;
struct qvector_char_;
struct qvector_op_t_;
struct regex_cache_t;
struct source_file_t;
struct source_item_t;
struct source_view_t;
struct std__ios_base;
struct std__set_int_;
struct string_info_t;
struct structplace_t;
struct strwinsetup_t;
struct switch_info_t;
struct sync_source_t;
struct thread_name_t;
struct try_handler_t;
struct ui_requests_t;
struct value_u__dq_t;
struct value_u__dt_t;
struct TPointDouble;
struct _CrtMemState;
struct addon_info_t;
struct call_stack_t;
struct cfgopt_set_t;
struct edge_infos_t;
struct edge_typer_t;
struct elf_loader_t;
struct enum_const_t;
struct fixup_data_t;
struct fixup_info_t;
struct graph_item_t;
struct idc_global_t;
struct idc_object_t;
struct idd_opinfo_t;
struct interr_exc_t;
struct ioport_bit_t;
struct lock_segment;
struct merge_data_t;
struct place_t_vtbl;
struct qvector_int_;
struct reg_access_t;
struct reloc_info_t;
struct simple_bfi_t;
struct simpleline_t;
struct sreg_range_t;
struct std___Ignore;
struct std___Lockit;
struct std__tuple__;
struct til_bucket_t;
struct til_stream_t;
struct til_symbol_t;
struct udt_member_t;
struct ui_request_t;
struct _CRT_DOUBLE;
struct _LONGDOUBLE;
struct __qthread_t;
struct _diskfree_t;
struct _timespec32;
struct _timespec64;
struct bookmarks_t;
struct data_type_t;
struct edge_info_t;
struct enumplace_t;
struct exehdr_full;
struct gdl_graph_t;
struct idc_class_t;
struct idc_value_t;
struct lex_value_t;
struct linearray_t;
struct load_info_t;
struct node_info_t;
struct predicate_t;
struct processor_t;
struct simd_info_t;
struct std__locale;
struct text_sink_t;
struct type_attr_t;
struct type_mods_t;
struct MD5Context;
struct TPopupMenu;
struct _CRT_FLOAT;
struct __qmutex_t;
struct __qtimer_t;
struct _exception;
struct _stat32i64;
struct _stat64i32;
struct bitrange_t;
struct bptaddrs_t;
struct callregs_t;
struct dbg_info_t;
struct debugger_t;
struct direntry_t;
struct eval_ctx_t;
struct hexplace_t;
struct idaplace_t;
struct idcfuncs_t;
struct idp_desc_t;
struct idp_name_t;
struct interval_t;
struct location_t;
struct node_set_t;
struct pointseq_t;
struct proc_def_t;
struct qffblk64_t;
struct rangeset_t;
struct rangevec_t;
struct reg_info_t;
struct regmatch_t;
struct row_info_t;
struct snapshot_t;
struct strarray_t;
struct tev_info_t;
struct twinline_t;
struct _heapinfo;
struct argpart_t;
struct bptaddr_t;
struct bytevec_t;
struct chooser_t;
struct cliopts_t;
struct destset_t;
struct dirspec_t;
struct dirtree_t;
struct ea_name_t;
struct edgeset_t;
struct encoder_t;
struct excinfo_t;
struct extlang_t;
struct fpvalue_t;
struct funcarg_t;
struct hexview_t;
struct impinfo_t;
struct instruc_t;
struct libfunc_t;
struct lochist_t;
struct lock_func;
struct modinfo_t;
struct no_regs_t;
struct plugmod_t;
struct printop_t;
struct procmod_t;
struct refinfo_t;
struct regobjs_t;
struct segment_t;
struct stkpnts_t;
struct strpath_t;
struct twinpos_t;
struct type_info;
struct valinfo_t;
struct valstrs_t;
struct xrefblk_t;
struct xrefpos_t;
struct _LDOUBLE;
struct _complex;
struct _lldiv_t;
struct argloc_t;
struct cfgopt_t;
struct cliopt_t;
struct idadll_t;
struct idasgn_t;
struct intmap_t;
struct intset_t;
struct ioport_t;
struct jvalue_t;
struct linput_t;
struct llabel_t;
struct loader_t;
struct lowcnd_t;
struct member_t;
struct outctx_t;
struct plugin_t;
struct qffblk_t;
struct qstatbuf;
struct reader_t;
struct regarg_t;
struct regobj_t;
struct regval_t;
struct regvar_t;
struct relobj_t;
struct stkpnt_t;
struct timespec;
struct tryblk_t;
struct valstr_t;
struct TWidget;
struct _LDBL12;
struct _ldiv_t;
struct _stat32;
struct _stat64;
struct bytes_t;
struct catch_t;
struct dbctx_t;
struct idainfo;
struct lexer_t;
struct minsn_t;
struct netnode;
struct place_t;
struct point_t;
struct range_t;
struct regex_t;
struct struc_t;
struct tinfo_t;
struct token_t;
struct uint128;
struct _div_t;
struct _iobuf;
struct cast_t;
struct edge_t;
struct exehdr;
struct func_t;
struct insn_t;
struct int128;
struct jarr_t;
struct jobj_t;
struct rect_t;
struct rrel_t;
struct asm_t;
struct bpt_t;
struct cli_t;
struct kvp_t;
struct seh_t;
struct til_t;
struct op_t;
struct stat;
struct tm;

struct std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_compare;
typedef unsigned __int64 std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___key_type;
struct std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_compare;
struct std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_compare;
typedef __int64 std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____;
typedef const std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_ *std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____;
typedef unsigned __int64 std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___key_type;
typedef __int64 std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____;
typedef std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_ *std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____;
typedef std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_ *std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__;
typedef __int64 std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______;
typedef const std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__ *std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______;
typedef __int64 std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____;
typedef __int64 std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______;
typedef const std__pair_const_unsigned_long_long__unsigned_long_long_ *std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____;
typedef std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__ *std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______;
struct std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__ {};
typedef __int64 std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____;
typedef std__pair_const_unsigned_long_long__unsigned_long_long_ *std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____;
typedef std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_ *std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__;
struct std__initializer_list_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__ {std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_ *_First;std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_ *_Last;};
typedef std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_ *std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__;
typedef __int64 std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____;
typedef const std__pair_const_int__int_ *std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____;
struct std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__ {};
struct std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_compare;
typedef __int64 std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____;
typedef std__pair_const_int__int_ *std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____;
typedef int std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___key_type;
struct std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__ {};
typedef unsigned __int64 std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___key_type;
struct std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__ {};
typedef __int64 std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____;
typedef __int64 std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____;
typedef __int64 std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____;
typedef const __int16 *std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____;
typedef const __int32 *std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____;
typedef const __int16 *std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____;
typedef __int64 std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char____;
typedef __int64 std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____;
typedef const char *std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char____;
typedef const int *std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____;
typedef __int64 std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char16_t____;
typedef __int64 std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char32_t____;
typedef __int64 std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_wchar_t____;
typedef __int16 *std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char16_t____;
typedef __int32 *std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char32_t____;
typedef __int16 *std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_wchar_t____;
typedef __int64 std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char____;
typedef std___Tree_node_std__pair_const_int__int___void__P_ *std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_int__int___void__P__;
typedef char *std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char____;
struct std__initializer_list_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___ {std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__ *_First;std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__ *_Last;};
typedef int std___Tset_traits_int__std__less_int___std__allocator_int___false___value_type;
struct std__initializer_list_std__pair_const_unsigned_long_long__unsigned_long_long__ {std__pair_const_unsigned_long_long__unsigned_long_long_ *_First;std__pair_const_unsigned_long_long__unsigned_long_long_ *_Last;};
typedef int std___Tset_traits_int__std__less_int___std__allocator_int___false___key_type;
struct std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___ {};
struct std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long__ {};
typedef ida_syntax_highlighter_t__keywords_style_t *qvector_ida_syntax_highlighter_t__keywords_style_t___const_iterator;
typedef ida_syntax_highlighter_t__plain_char_ptr_t *qvector_ida_syntax_highlighter_t__plain_char_ptr_t___const_iterator;
struct std__allocator_std___Tree_node_std__pair_const_int__int___void__P__ {};
typedef std___Tree_node_int__void__P_ *std___Rebind_pointer_t_void__P__std___Tree_node_int__void__P__;
typedef ida_syntax_highlighter_t__keywords_style_t *qvector_ida_syntax_highlighter_t__keywords_style_t___iterator;
typedef ida_syntax_highlighter_t__multicmt_t *qvector_ida_syntax_highlighter_t__multicmt_t___const_iterator;
typedef ida_syntax_highlighter_t__plain_char_ptr_t *qvector_ida_syntax_highlighter_t__plain_char_ptr_t___iterator;
typedef unsigned __int64 std__map_unsigned_long_long__unsigned_long_long___mapped_type;
typedef unsigned __int16 std___Char_traits_unsigned_short__unsigned_short___int_type;
typedef unsigned __int64 std__map_unsigned_long_long__unsigned_long_long___key_type;
typedef line_rendering_output_entry_t **qvector_line_rendering_output_entry_t__P___const_iterator;
typedef unsigned __int64 std__integral_constant_unsigned_long_long__0___value_type;
typedef ida_syntax_highlighter_t__multicmt_t *qvector_ida_syntax_highlighter_t__multicmt_t___iterator;
struct std__pair_const_unsigned_long_long__unsigned_long_long_ {const unsigned __int64 first;unsigned __int64 second;};
typedef qvector_const_twinline_t__P_ *qvector_qvector_const_twinline_t__P____const_iterator;
typedef unsigned __int16 std___Char_traits_char16_t__unsigned_short___int_type;
typedef unsigned __int16 std___Char_traits_wchar_t__unsigned_short___int_type;
typedef line_rendering_output_entry_t **qvector_line_rendering_output_entry_t__P___iterator;
typedef unsigned int std___Char_traits_char32_t__unsigned_int___int_type;
typedef qrefcnt_t_source_item_t_ *qvector_qrefcnt_t_source_item_t____const_iterator;
struct std___Char_traits_unsigned_short__unsigned_short_ {};
typedef _qstring_unsigned_char_ *qvector__qstring_unsigned_char____const_iterator;
struct std__initializer_list_std__pair_const_int__int__ {std__pair_const_int__int_ *_First;std__pair_const_int__int_ *_Last;};
struct ida_movable_type_line_rendering_output_entry_t_ {};
typedef qvector_const_char__P_ *qvector_qvector_const_char__P____const_iterator;
typedef qvector_const_twinline_t__P_ *qvector_qvector_const_twinline_t__P____iterator;
typedef bool std__integral_constant_bool__false___value_type;
struct qlist_ui_request_t__P___const_reverse_iterator;
struct qrefcnt_t_qiterator_qrefcnt_t_source_file_t___ {qiterator_qrefcnt_t_source_file_t__ *ptr;};
struct qrefcnt_t_qiterator_qrefcnt_t_source_item_t___ {qiterator_qrefcnt_t_source_item_t__ *ptr;};
typedef bool std__integral_constant_bool__true___value_type;
typedef int std___Narrow_char_traits_char__int___int_type;
struct std___String_constructor_rvalue_allocator_tag {};
struct std__allocator_std___Tree_node_int__void__P__ {};
struct std__integral_constant_unsigned_long_long__0_ {};
typedef const rangeset_t **qvector_const_rangeset_t__P___const_iterator;
typedef const twinline_t **qvector_const_twinline_t__P___const_iterator;
typedef unsigned __int16 std___WChar_traits_unsigned_short___int_type;
typedef qrefcnt_t_source_item_t_ *qvector_qrefcnt_t_source_item_t____iterator;
typedef qvector_long_long_ *qvector_qvector_long_long____const_iterator;
typedef unsigned __int64 *qvector_unsigned_long_long___const_iterator;
struct std___Char_traits_char16_t__unsigned_short_ {};
typedef int (*_CoreCrtNonSecureSearchSortCompareFunction)(const void *, const void *);
struct ida_syntax_highlighter_t__plain_char_ptr_t {const char *ptr;};
struct input_event_t__input_event_keyboard_data_t {int key;char text[8];};
struct input_event_t__input_event_shortcut_data_t {const char *action_name;};
typedef _qstring_unsigned_char_ *qvector__qstring_unsigned_char____iterator;
typedef _qstring_wchar_t_ *qvector__qstring_wchar_t____const_iterator;
typedef call_stack_info_t *qvector_call_stack_info_t___const_iterator;
typedef compiled_binpat_t *qvector_compiled_binpat_t___const_iterator;
typedef update_bpt_info_t *qvector_update_bpt_info_t___const_iterator;
struct std___Char_traits_wchar_t__unsigned_short_ {};
union token_t___8299423771E115C2E8FEC5C7170C0424 {bool unicode;bool is_unsigned;};
typedef dirtree_cursor_t *qvector_dirtree_cursor_t___const_iterator;
typedef exception_info_t *qvector_exception_info_t___const_iterator;
typedef qvector_const_char__P_ *qvector_qvector_const_char__P____iterator;
typedef scattered_segm_t *qvector_scattered_segm_t___const_iterator;
typedef segm_move_info_t *qvector_segm_move_info_t___const_iterator;
typedef selection_item_t *qvector_selection_item_t___const_iterator;
typedef xreflist_entry_t *qvector_xreflist_entry_t___const_iterator;
struct std___Char_traits_char32_t__unsigned_int_ {};
typedef int std___Tree_node_int__void__P___value_type;
struct std__allocator_std__pair_const_int__int__ {};
struct qlist_ui_request_t__P___reverse_iterator;
typedef channel_redir_t *qvector_channel_redir_t___const_iterator;
typedef lochist_entry_t *qvector_lochist_entry_t___const_iterator;
typedef register_info_t *qvector_register_info_t___const_iterator;
typedef tev_reg_value_t *qvector_tev_reg_value_t___const_iterator;
typedef __int16 std___Simple_types_char16_t___value_type;
typedef __int32 std___Simple_types_char32_t___value_type;
typedef int (*_CoreCrtSecureSearchSortCompareFunction)(void *, const void *, const void *);
typedef unsigned __int8 *_qstring_unsigned_char___const_iterator;
typedef _qstring_char_ *qvector__qstring_char____const_iterator;
typedef const bpt_t **qvector_const_bpt_t__P___const_iterator;
typedef group_crinfo_t *qvector_group_crinfo_t___const_iterator;
typedef process_info_t *qvector_process_info_t___const_iterator;
typedef qbasic_block_t *qvector_qbasic_block_t___const_iterator;
typedef refinfo_desc_t *qvector_refinfo_desc_t___const_iterator;
typedef tev_info_reg_t *qvector_tev_info_reg_t___const_iterator;
typedef __int16 std___Simple_types_wchar_t___value_type;
typedef __int16 std__basic_string_char16_t___value_type;
typedef __int32 std__basic_string_char32_t___value_type;
struct ida_movable_type_bitfield_type_data_t_ {};
struct qlist_ui_request_t__P___const_iterator;
typedef const char **qvector_const_char__P___const_iterator;
typedef const rangeset_t **qvector_const_rangeset_t__P___iterator;
typedef const twinline_t **qvector_const_twinline_t__P___iterator;
typedef debug_event_t *qvector_debug_event_t___const_iterator;
typedef enum_member_t *qvector_enum_member_t___const_iterator;
typedef memory_info_t *qvector_memory_info_t___const_iterator;
typedef memreg_info_t *qvector_memreg_info_t___const_iterator;
typedef movbpt_info_t *qvector_movbpt_info_t___const_iterator;
typedef snapshot_t **qvector_snapshot_t__P___const_iterator;
typedef sync_source_t *qvector_sync_source_t___const_iterator;
typedef thread_name_t *qvector_thread_name_t___const_iterator;
typedef unsigned __int8 *qvector_unsigned_char___const_iterator;
typedef int std___Char_traits_char__int___int_type;
typedef unsigned int std___Rand_urng_from_func__result_type;
typedef unsigned __int16 std___WChar_traits_char16_t___int_type;
typedef __int16 std__basic_string_wchar_t___value_type;
struct ida_movable_type_typedef_type_data_t_ {};
typedef cfgopt_set_t *qvector_cfgopt_set_t___const_iterator;
typedef extlang_t **qvector_extlang_t__P___const_iterator;
typedef fixup_info_t *qvector_fixup_info_t___const_iterator;
typedef idc_global_t *qvector_idc_global_t___const_iterator;
typedef ioport_bit_t *qvector_ioport_bit_t___const_iterator;
typedef qvector_int_ *qvector_qvector_int____const_iterator;
typedef qvector_long_long_ *qvector_qvector_long_long____iterator;
typedef reg_access_t *qvector_reg_access_t___const_iterator;
typedef simpleline_t *qvector_simpleline_t___const_iterator;
typedef udt_member_t *qvector_udt_member_t___const_iterator;
typedef unsigned int *qvector_unsigned_int___const_iterator;
typedef unsigned __int64 *qvector_unsigned_long_long___iterator;
typedef unsigned __int16 std___WChar_traits_wchar_t___int_type;
typedef _qstring_wchar_t_ *qvector__qstring_wchar_t____iterator;
typedef call_stack_info_t *qvector_call_stack_info_t___iterator;
typedef compiled_binpat_t *qvector_compiled_binpat_t___iterator;
typedef simd_info_t *qvector_simd_info_t___const_iterator;
typedef type_attr_t *qvector_type_attr_t___const_iterator;
typedef update_bpt_info_t *qvector_update_bpt_info_t___iterator;
typedef char std___Simple_types_char___value_type;
struct ida_movable_type_array_type_data_t_ {};
struct ida_movable_type_call_stack_info_t_ {};
struct ida_movable_type_compiled_binpat_t_ {};
struct ida_movable_type_update_bpt_info_t_ {};
typedef bptaddrs_t *qvector_bptaddrs_t___const_iterator;
typedef direntry_t *qvector_direntry_t___const_iterator;
typedef dirtree_cursor_t *qvector_dirtree_cursor_t___iterator;
typedef exception_info_t *qvector_exception_info_t___iterator;
typedef idp_desc_t *qvector_idp_desc_t___const_iterator;
typedef idp_name_t *qvector_idp_name_t___const_iterator;
typedef node_set_t *qvector_node_set_t___const_iterator;
typedef rangeset_t *qvector_rangeset_t___const_iterator;
typedef reg_info_t *qvector_reg_info_t___const_iterator;
typedef row_info_t *qvector_row_info_t___const_iterator;
typedef scattered_segm_t *qvector_scattered_segm_t___iterator;
typedef segm_move_info_t *qvector_segm_move_info_t___iterator;
typedef selection_item_t *qvector_selection_item_t___iterator;
typedef tev_info_t *qvector_tev_info_t___const_iterator;
typedef twinline_t *qvector_twinline_t___const_iterator;
typedef xreflist_entry_t *qvector_xreflist_entry_t___iterator;
typedef int std___Simple_types_int___value_type;
struct std___String_constructor_concat_tag {};
typedef unsigned __int16 std___WChar_traits__Elem___int_type;
typedef char std__basic_string_char___value_type;
struct std__integral_constant_bool__false_ {};
struct _Combined_type_float__long_double_ {};
struct ida_movable_type_dirtree_cursor_t_ {};
struct ida_movable_type_enum_type_data_t_ {};
struct ida_movable_type_exception_info_t_ {};
struct ida_movable_type_scattered_aloc_t_ {};
struct ida_movable_type_scattered_segm_t_ {};
struct ida_movable_type_segm_move_info_t_ {};
struct ida_movable_type_xreflist_entry_t_ {};
struct qlist_ui_request_t__P___listnode_t {qlist_ui_request_t__P___listnode_t *next;qlist_ui_request_t__P___listnode_t *prev;};
typedef argpart_t *qvector_argpart_t___const_iterator;
typedef channel_redir_t *qvector_channel_redir_t___iterator;
typedef ea_name_t *qvector_ea_name_t___const_iterator;
typedef funcarg_t *qvector_funcarg_t___const_iterator;
typedef lochist_entry_t *qvector_lochist_entry_t___iterator;
typedef __int64 *qvector_long_long___const_iterator;
typedef modinfo_t *qvector_modinfo_t___const_iterator;
typedef register_info_t *qvector_register_info_t___iterator;
typedef tev_reg_value_t *qvector_tev_reg_value_t___iterator;
struct std___Floating_type_traits_double_ {};
struct std__integral_constant_bool__true_ {};
typedef void _0425F8F1A3AE8F87FA89CDE6305293FE(TWidget *, const lochist_entry_t *, const lochist_entry_t *, const locchange_md_t *, void *);
typedef void _0F4B5B224EF598EAC96C9D985A235D75(const char *, void *);
typedef bool _12B695DC843A94285F7310A143C8C434(const insn_t *, int *, int *);
typedef int _223DCB884574D5DE586AD2D6B7376847(void *, const char *);
typedef const char *_2B5C0BD264F9291D6A7F6F791424403F(lexer_t *, const token_t *, const token_t *);
typedef int _2C0E99206E7908236DCABCB2B91A8D4F(void *, const char *, const char *, int, bool, bool);
typedef int _47FFB0B1AABFAE006217B68E4FFCB4B3(TWidget *, const lochist_entry_t *, const locchange_md_t *, void *);
typedef bool _53B156155FBE7E40597743DACE3276C6(TWidget *, int, int, void *);
typedef int _6748483DB9EEBDB64F2EA25B987191DF(int, form_actions_t *);
enum _7014156F94AE1B7FC5F5E3560392A8C4 : unsigned __int32 {DTN_FULL_NAME = 0x0,DTN_DISPLAY_NAME = 0x1,};
typedef bool _7148FF134A2561D170DBC235C372E12B(const insn_t *, const op_t *, const tinfo_t *, const char *);
typedef int _776C644986E1218BAA015F499D7289A7(TWidget *, const place_t *, const place_t *, void *);
typedef void _79278B08C9A02D276B5400213E6E8772(const cfgopt_t *, int, const void *);
typedef void _7A67CD558302B3EA29FC91F77D84E941(TWidget *, int, view_mouse_event_t *, void *);
typedef int _7C51D3F4B871613F1BA7F83DBEBC3FD5(TWidget *, void *);
enum _94D4D585A38CDA12BD4A7F760DAFD340 : unsigned __int32 {JT_NONE = 0x0,JT_SWITCH = 0x1,JT_CALL = 0x2,};
typedef void _9F642B09C10686E3843EA25A959506D5(TWidget *, void *);
enum _A32948CF266C727D9CC1D79F2B35CC28 : unsigned __int32 {QMOVE_CROSS_FS = 0x1,QMOVE_OVERWRITE = 0x2,QMOVE_OVR_RO = 0x4,};
typedef void _A6F93F8BAFF0D1A2AF75D768A5FCB062(TWidget *, lochist_entry_t *, void *);
typedef int _AF4ED28A64411848F4EED41572FA4CE1(void *, const char *, int, const char *);
typedef int _B4F266B0568ADA5794EA29B6B9D8A3FE(void *);
typedef int _B583FC0ED2D81EF34EE9B85011DA3455(TWidget *, const place_t *, int *, void *);
enum _C7C212E52085C0E483DB7F2B4EDAB218 : unsigned __int32 {REG_ASSERT = 0x1,REG_BADBR = 0x2,REG_BADPAT = 0x3,REG_BADRPT = 0x4,REG_EBRACE = 0x5,REG_EBRACK = 0x6,REG_ECOLLATE = 0x7,REG_ECTYPE = 0x8,REG_EESCAPE = 0x9,REG_EMPTY = 0xA,REG_EPAREN = 0xB,REG_ERANGE = 0xC,REG_ESIZE = 0xD,REG_ESPACE = 0xE,REG_ESUBREG = 0xF,REG_INVARG = 0x10,REG_NOMATCH = 0x11,};
typedef const char *_C9E14A82B8291B557AC92E2F5A452CE5(const char *, int, const void *, bool);
typedef void _DB40683AED1FE27CD84662F2517C7BCC(TWidget *, const place_t *, int, int, void *);
typedef int _EFB3D94CDC38BD29E337526787ABDBEA(linput_t *, impinfo_t *);
typedef bool _F6359FE077454C49B917BFA4BFA37580(TWidget *, int, void *);
typedef unsigned __int8 *_qstring_unsigned_char___iterator;
typedef __int16 *_qstring_wchar_t___const_iterator;
struct ida_movable_type_lochist_entry_t_ {};
struct ida_movable_type_ptr_type_data_t_ {};
struct ida_movable_type_register_info_t_ {};
struct ida_movable_type_tev_reg_value_t_ {};
struct ida_movable_type_udt_type_data_t_ {};
typedef _qstring_char_ *qvector__qstring_char____iterator;
typedef argloc_t *qvector_argloc_t___const_iterator;
typedef bpt_t **qvector_bpt_t__P___const_iterator;
typedef cliopt_t *qvector_cliopt_t___const_iterator;
typedef const bpt_t **qvector_const_bpt_t__P___iterator;
typedef group_crinfo_t *qvector_group_crinfo_t___iterator;
typedef intmap_t *qvector_intmap_t___const_iterator;
typedef ioport_t *qvector_ioport_t___const_iterator;
typedef jvalue_t *qvector_jvalue_t___const_iterator;
typedef lowcnd_t *qvector_lowcnd_t___const_iterator;
typedef process_info_t *qvector_process_info_t___iterator;
typedef qbasic_block_t *qvector_qbasic_block_t___iterator;
typedef refinfo_desc_t *qvector_refinfo_desc_t___iterator;
typedef regobj_t *qvector_regobj_t___const_iterator;
typedef regval_t *qvector_regval_t___const_iterator;
typedef stkpnt_t *qvector_stkpnt_t___const_iterator;
typedef tev_info_reg_t *qvector_tev_info_reg_t___iterator;
typedef tryblk_t *qvector_tryblk_t___const_iterator;
typedef valstr_t *qvector_valstr_t___const_iterator;
struct std___Basic_container_proxy_ptr12 {std___Container_proxy *_Ptr;};
struct std___Floating_type_traits_float_ {};
struct std__basic_istringstream_wchar_t_;
struct std__basic_ostringstream_wchar_t_;
struct ida_movable_type_bpt_location_t_ {};
struct ida_movable_type_locchange_md_t_ {};
struct ida_movable_type_process_info_t_ {};
struct ida_movable_type_refinfo_desc_t_ {};
struct ida_movable_type_tev_info_reg_t_ {};
struct qlist_ui_request_t__P___iterator;
typedef catch_t *qvector_catch_t___const_iterator;
typedef const char **qvector_const_char__P___iterator;
typedef debug_event_t *qvector_debug_event_t___iterator;
typedef enum_member_t *qvector_enum_member_t___iterator;
typedef memory_info_t *qvector_memory_info_t___iterator;
typedef memreg_info_t *qvector_memreg_info_t___iterator;
typedef movbpt_info_t *qvector_movbpt_info_t___iterator;
typedef point_t *qvector_point_t___const_iterator;
typedef range_t *qvector_range_t___const_iterator;
typedef snapshot_t **qvector_snapshot_t__P___iterator;
typedef sync_source_t *qvector_sync_source_t___iterator;
typedef thread_name_t *qvector_thread_name_t___iterator;
typedef tinfo_t *qvector_tinfo_t___const_iterator;
typedef token_t *qvector_token_t___const_iterator;
typedef unsigned __int8 *qvector_unsigned_char___iterator;
typedef __int16 *qvector_wchar_t___const_iterator;
struct std__basic_stringstream_wchar_t_;
struct ida_movable_type_debug_event_t_ {};
struct ida_movable_type_enum_member_t_ {};
struct ida_movable_type_memory_info_t_ {};
struct ida_movable_type_memreg_info_t_ {};
struct ida_movable_type_movbpt_info_t_ {};
struct ida_movable_type_string_info_t_ {};
struct ida_movable_type_sync_source_t_ {};
struct ida_movable_type_try_handler_t_ {};
typedef cfgopt_set_t *qvector_cfgopt_set_t___iterator;
typedef edge_t *qvector_edge_t___const_iterator;
typedef extlang_t **qvector_extlang_t__P___iterator;
typedef fixup_info_t *qvector_fixup_info_t___iterator;
typedef idc_global_t *qvector_idc_global_t___iterator;
typedef ioport_bit_t *qvector_ioport_bit_t___iterator;
typedef qvector_int_ *qvector_qvector_int____iterator;
typedef rect_t *qvector_rect_t___const_iterator;
typedef reg_access_t *qvector_reg_access_t___iterator;
typedef simpleline_t *qvector_simpleline_t___iterator;
typedef udt_member_t *qvector_udt_member_t___iterator;
typedef unsigned int *qvector_unsigned_int___iterator;
struct std___Zero_then_variadic_args_t {};
struct std__initializer_list_char16_t_ {__int16 *_First;__int16 *_Last;};
struct std__initializer_list_char32_t_ {__int32 *_First;__int32 *_Last;};
typedef int std__map_int__int___mapped_type;
typedef char *_qstring_char___const_iterator;
struct ida_movable_type_fixup_info_t_ {};
struct ida_movable_type_idc_global_t_ {};
struct ida_movable_type_ioport_bit_t_ {};
struct ida_movable_type_reg_access_t_ {};
struct ida_movable_type_sreg_range_t_ {};
struct ida_movable_type_til_symbol_t_ {};
struct ida_movable_type_udt_member_t_ {};
typedef bpt_t *qvector_bpt_t___const_iterator;
typedef kvp_t *qvector_kvp_t___const_iterator;
typedef simd_info_t *qvector_simd_info_t___iterator;
typedef type_attr_t *qvector_type_attr_t___iterator;
struct std___One_then_variadic_args_t {};
struct std__bad_array_new_length_vtbl; /* std__bad_array_new_length_vtbl {void (*_del_bad_array_new_length)(std__bad_array_new_length *__hidden this);const char *(*what)(const std__exception *__hidden this);};*/
struct std__basic_istringstream_char_;
struct std__basic_ostringstream_char_;
struct std__initializer_list_wchar_t_ {__int16 *_First;__int16 *_Last;};
struct _Combined_type_float__double_ {};
struct _Real_widened_double__double_ {};
struct ida_movable_type_idc_value_t_ {};
struct ida_movable_type_load_info_t_ {};
struct ida_movable_type_simd_info_t_ {};
struct ida_movable_type_type_attr_t_ {};
struct ida_syntax_highlighter_t_vtbl; /* ida_syntax_highlighter_t_vtbl {void (*_del_ida_syntax_highlighter_t)(ida_syntax_highlighter_t *__hidden this);};*/
typedef bool *qvector_bool___const_iterator;
typedef bptaddrs_t *qvector_bptaddrs_t___iterator;
typedef char *qvector_char___const_iterator;
typedef direntry_t *qvector_direntry_t___iterator;
typedef idp_desc_t *qvector_idp_desc_t___iterator;
typedef idp_name_t *qvector_idp_name_t___iterator;
typedef node_set_t *qvector_node_set_t___iterator;
typedef op_t *qvector_op_t___const_iterator;
typedef rangeset_t *qvector_rangeset_t___iterator;
typedef reg_info_t *qvector_reg_info_t___iterator;
typedef row_info_t *qvector_row_info_t___iterator;
typedef tev_info_t *qvector_tev_info_t___iterator;
typedef twinline_t *qvector_twinline_t___iterator;
struct std___Default_allocate_traits {};
struct std__basic_streambuf_wchar_t_;
struct std__basic_stringbuf_wchar_t_;
struct std__basic_stringstream_char_;
struct std__less_unsigned_long_long_ {};
struct _Real_widened_double__float_ {};
struct _Real_widened_float__double_ {};
enum hexplace_gen_t__int_format_t : unsigned __int32 {if_hex = 0x0,if_signed = 0x1,if_unsigned = 0x2,};
struct ida_movable_type_dbg_info_t_ {};
struct ida_movable_type_direntry_t_ {};
struct ida_movable_type_idp_desc_t_ {};
struct ida_movable_type_idp_name_t_ {};
struct ida_movable_type_rangeset_t_ {};
struct ida_movable_type_reg_info_t_ {};
struct ida_movable_type_snapshot_t_ {};
struct ida_movable_type_twinline_t_ {};
typedef argpart_t *qvector_argpart_t___iterator;
typedef ea_name_t *qvector_ea_name_t___iterator;
typedef funcarg_t *qvector_funcarg_t___iterator;
typedef int *qvector_int___const_iterator;
typedef __int64 *qvector_long_long___iterator;
typedef modinfo_t *qvector_modinfo_t___iterator;
struct std___Char_traits_char__int_ {};
struct std__basic_ifstream_wchar_t_;
struct std__basic_iostream_wchar_t_;
struct std__basic_ofstream_wchar_t_;
typedef int std__map_int__int___key_type;
struct _Real_widened_float__float_ {};
typedef __int16 *_qstring_wchar_t___iterator;
enum hexplace_gen_t__byte_kind_t : unsigned __int32 {BK_VALID = 0x0,BK_INVALIDADDR = 0x1,BK_NOVALUE = 0x2,};
enum hexplace_gen_t__data_kind_t : unsigned __int32 {dk_float = 0x0,dk_int = 0x1,dk_addr_names = 0x2,dk_addr_text = 0x3,};
struct ida_lowertype_helper_t_vtbl; /* ida_lowertype_helper_t_vtbl {bool (*func_has_stkframe_hole)(ida_lowertype_helper_t *__hidden this, const tinfo_t *candidate, const func_type_data_t *candidate_data);int (*get_func_purged_bytes)(ida_lowertype_helper_t *__hidden this, const tinfo_t *candidate, const func_type_data_t *);};*/
struct ida_movable_type_argpart_t_ {};
struct ida_movable_type_ea_name_t_ {};
struct ida_movable_type_funcarg_t_ {};
struct ida_movable_type_lochist_t_ {};
struct ida_movable_type_modinfo_t_ {};
struct ida_movable_type_valinfo_t_ {};
struct qrefcnt_t_refcnted_regex_t_ {refcnted_regex_t *ptr;};
typedef argloc_t *qvector_argloc_t___iterator;
typedef bpt_t **qvector_bpt_t__P___iterator;
typedef cliopt_t *qvector_cliopt_t___iterator;
typedef intmap_t *qvector_intmap_t___iterator;
typedef ioport_t *qvector_ioport_t___iterator;
typedef jvalue_t *qvector_jvalue_t___iterator;
typedef lowcnd_t *qvector_lowcnd_t___iterator;
typedef regobj_t *qvector_regobj_t___iterator;
typedef regval_t *qvector_regval_t___iterator;
typedef stkpnt_t *qvector_stkpnt_t___iterator;
typedef tryblk_t *qvector_tryblk_t___iterator;
typedef valstr_t *qvector_valstr_t___iterator;
struct std___Nontrivial_dummy_type {};
struct std__basic_filebuf_wchar_t_;
struct std__basic_fstream_wchar_t_;
struct std__basic_istream_wchar_t_;
struct std__basic_ostream_wchar_t_;
struct std__initializer_list_char_ {char *_First;char *_Last;};
struct struct_field_visitor_t_vtbl; /* struct_field_visitor_t_vtbl {int (*visit_field)(struct_field_visitor_t *__hidden this, struc_t *sptr, member_t *mptr);};*/
typedef int cliopts_t__usage_printer_t(const char *, ...);
enum custom_viewer_handler_id_t : unsigned __int32 {CVH_USERDATA = 0x0,CVH_KEYDOWN = 0x1,CVH_POPUP = 0x2,CVH_DBLCLICK = 0x3,CVH_CURPOS = 0x4,CVH_CLOSE = 0x5,CVH_CLICK = 0x6,CVH_QT_AWARE = 0x7,CVH_HELP = 0x8,CVH_MOUSEMOVE = 0x9,CDVH_USERDATA = 0x3E8,CDVH_SRCVIEW = 0x3E9,CDVH_LINES_CLICK = 0x3EA,CDVH_LINES_DBLCLICK = 0x3EB,CDVH_LINES_POPUP = 0x3EC,CDVH_LINES_DRAWICON = 0x3ED,CDVH_LINES_LINENUM = 0x3EE,CDVH_LINES_ICONMARGIN = 0x3EF,CDVH_LINES_RADIX = 0x3F0,CDVH_LINES_ALIGNMENT = 0x3F1,};
enum encoder_t__notify_recerr_t : unsigned __int32 {nr_none = 0x0,nr_once = 0x1,};
struct ida_movable_type_argloc_t_ {};
struct ida_movable_type_cliopt_t_ {};
struct ida_movable_type_ioport_t_ {};
struct ida_movable_type_jvalue_t_ {};
struct ida_movable_type_regarg_t_ {};
struct ida_movable_type_regobj_t_ {};
struct ida_movable_type_regval_t_ {};
struct ida_movable_type_regvar_t_ {};
struct ida_movable_type_stkpnt_t_ {};
struct ida_movable_type_tryblk_t_ {};
struct ida_movable_type_valstr_t_ {};
typedef catch_t *qvector_catch_t___iterator;
typedef point_t *qvector_point_t___iterator;
typedef range_t *qvector_range_t___iterator;
typedef tinfo_t *qvector_tinfo_t___iterator;
typedef token_t *qvector_token_t___iterator;
typedef __int16 *qvector_wchar_t___iterator;
struct std___Alloc_unpack_tuple_t {};
struct std__basic_streambuf_char_;
struct std__basic_stringbuf_char_;
struct std__initializer_list_int_ {int *_First;int *_Last;};
struct std__nested_exception_vtbl; /* std__nested_exception_vtbl {void (*_del_nested_exception)(std__nested_exception *__hidden this);};*/
struct std__piecewise_construct_t {};
struct const_aloc_visitor_t_vtbl; /* const_aloc_visitor_t_vtbl {int (*visit_location)(const_aloc_visitor_t *__hidden this, const argloc_t *v, int off, int size);void (*_del_const_aloc_visitor_t)(const_aloc_visitor_t *__hidden this);};*/
struct graph_node_visitor_t_vtbl; /* graph_node_visitor_t_vtbl {int (*visit_node)(graph_node_visitor_t *__hidden this, int);bool (*is_forbidden_edge)(const graph_node_visitor_t *__hidden this, int, int);void (*_del_graph_node_visitor_t)(graph_node_visitor_t *__hidden this);};*/
struct graph_path_visitor_t_vtbl; /* graph_path_visitor_t_vtbl {int (*walk_forward)(graph_path_visitor_t *__hidden this, int);int (*walk_backward)(graph_path_visitor_t *__hidden this, int);void (*_del_graph_path_visitor_t)(graph_path_visitor_t *__hidden this);};*/
struct ida_movable_type_catch_t_ {};
struct ida_movable_type_point_t_ {};
struct ida_movable_type_range_t_ {};
struct ida_movable_type_tinfo_t_ {};
struct ida_movable_type_token_t_ {};
typedef edge_t *qvector_edge_t___iterator;
typedef rect_t *qvector_rect_t___iterator;
struct std___Fake_proxy_ptr_impl {};
struct std___Invoker_pmd_pointer {};
struct std___Invoker_pmd_refwrap {};
struct std___Invoker_pmf_pointer {};
struct std___Invoker_pmf_refwrap {};
struct std___Leave_proxy_unbound {};
struct std___Rand_urng_from_func {};
struct std__basic_ifstream_char_;
struct std__basic_iostream_char_;
struct std__basic_ofstream_char_;
struct std__hash_std__nullptr_t_ {};
struct std__less__qstring_char__ {};
struct std__pair_const_int__int_ {const int first;int second;};
struct syntax_highlighter_t_vtbl; /* syntax_highlighter_t_vtbl {void (*_del_syntax_highlighter_t)(syntax_highlighter_t *__hidden this);};*/
struct __crt_locale_data_public {const unsigned __int16 *_locale_pctype;int _locale_mb_cur_max;unsigned int _locale_lc_codepage;};
typedef char *_qstring_char___iterator;
struct custom_viewer_handlers_t {int cb;bool (*keyboard)(TWidget *, int, int, void *);void (*popup)(TWidget *, void *);void (*mouse_moved)(TWidget *, int, view_mouse_event_t *, void *);bool (*click)(TWidget *, int, void *);bool (*dblclick)(TWidget *, int, void *);void (*curpos)(TWidget *, void *);void (*close)(TWidget *, void *);int (*help)(TWidget *, void *);void (*adjust_place)(TWidget *, lochist_entry_t *, void *);int (*get_place_xcoord)(TWidget *, const place_t *, const place_t *, void *);void (*location_changed)(TWidget *, const lochist_entry_t *, const lochist_entry_t *, const locchange_md_t *, void *);int (*can_navigate)(TWidget *, const lochist_entry_t *, const locchange_md_t *, void *);};
enum form_actions_t__dlgbtn_t : unsigned __int32 {dbt_yes = 0x0,dbt_cancel = 0x1,dbt_no = 0x2,};
struct ida_movable_type_edge_t_ {};
struct ida_movable_type_func_t_ {};
struct ida_movable_type_jarr_t_ {};
struct ida_movable_type_jobj_t_ {};
struct ida_movable_type_rect_t_ {};
struct macro_constructor_t_vtbl; /* macro_constructor_t_vtbl {void (*_del_macro_constructor_t)(macro_constructor_t *__hidden this);bool (*build_macro)(macro_constructor_t *__hidden this, insn_t *insn, bool may_go_forward);};*/
struct qrefcnt_t_source_file_t_ {source_file_t *ptr;};
struct qrefcnt_t_source_item_t_ {source_item_t *ptr;};
typedef bpt_t *qvector_bpt_t___iterator;
typedef kvp_t *qvector_kvp_t___iterator;
struct std___Alloc_exact_args_t {};
struct std___Invoker_pmd_object {};
struct std___Invoker_pmf_object {};
struct std___Move_allocator_tag {};
struct std__allocator_char16_t_ {};
struct std__allocator_char32_t_ {};
struct std__basic_filebuf_char_;
struct std__basic_fstream_char_;
struct std__basic_istream_char_;
struct std__basic_ostream_char_;
struct std__greater_equal_void_ {};
struct std__output_iterator_tag {};
struct valstr_t__flatten_args_t {const valstr_t *may_not_collapse;int ptvf;int max_length;int margin;int indent;};
struct _Real_type_long_double_ {};
typedef void (*_se_translator_function)(unsigned int, _EXCEPTION_POINTERS *);
enum chooser_base_t__cbres_t : unsigned __int32 {NOTHING_CHANGED = 0x0,ALL_CHANGED = 0x1,SELECTION_CHANGED = 0x2,};
struct ida_movable_type_bpt_t_ {};
struct ida_movable_type_kvp_t_ {};
struct ida_movable_type_seh_t_ {};
enum idb_event__event_code_t : unsigned __int32 {closebase = 0x0,savebase = 0x1,upgraded = 0x2,auto_empty = 0x3,auto_empty_finally = 0x4,determined_main = 0x5,local_types_changed = 0x6,extlang_changed = 0x7,idasgn_loaded = 0x8,kernel_config_loaded = 0x9,loader_finished = 0xA,flow_chart_created = 0xB,compiler_changed = 0xC,changing_ti = 0xD,ti_changed = 0xE,changing_op_ti = 0xF,op_ti_changed = 0x10,changing_op_type = 0x11,op_type_changed = 0x12,enum_created = 0x13,deleting_enum = 0x14,enum_deleted = 0x15,renaming_enum = 0x16,enum_renamed = 0x17,changing_enum_bf = 0x18,enum_bf_changed = 0x19,changing_enum_cmt = 0x1A,enum_cmt_changed = 0x1B,enum_member_created = 0x1C,deleting_enum_member = 0x1D,enum_member_deleted = 0x1E,struc_created = 0x1F,deleting_struc = 0x20,struc_deleted = 0x21,changing_struc_align = 0x22,struc_align_changed = 0x23,renaming_struc = 0x24,struc_renamed = 0x25,expanding_struc = 0x26,struc_expanded = 0x27,struc_member_created = 0x28,deleting_struc_member = 0x29,struc_member_deleted = 0x2A,renaming_struc_member = 0x2B,struc_member_renamed = 0x2C,changing_struc_member = 0x2D,struc_member_changed = 0x2E,changing_struc_cmt = 0x2F,struc_cmt_changed = 0x30,segm_added = 0x31,deleting_segm = 0x32,segm_deleted = 0x33,changing_segm_start = 0x34,segm_start_changed = 0x35,changing_segm_end = 0x36,segm_end_changed = 0x37,changing_segm_name = 0x38,segm_name_changed = 0x39,changing_segm_class = 0x3A,segm_class_changed = 0x3B,segm_attrs_updated = 0x3C,segm_moved = 0x3D,allsegs_moved = 0x3E,func_added = 0x3F,func_updated = 0x40,set_func_start = 0x41,set_func_end = 0x42,deleting_func = 0x43,frame_deleted = 0x44,thunk_func_created = 0x45,func_tail_appended = 0x46,deleting_func_tail = 0x47,func_tail_deleted = 0x48,tail_owner_changed = 0x49,func_noret_changed = 0x4A,stkpnts_changed = 0x4B,updating_tryblks = 0x4C,tryblks_updated = 0x4D,deleting_tryblks = 0x4E,sgr_changed = 0x4F,make_code = 0x50,make_data = 0x51,destroyed_items = 0x52,renamed = 0x53,byte_patched = 0x54,changing_cmt = 0x55,cmt_changed = 0x56,changing_range_cmt = 0x57,range_cmt_changed = 0x58,extra_cmt_changed = 0x59,item_color_changed = 0x5A,callee_addr_changed = 0x5B,bookmark_changed = 0x5C,sgr_deleted = 0x5D,adding_segm = 0x5E,func_deleted = 0x5F,dirtree_mkdir = 0x60,dirtree_rmdir = 0x61,dirtree_link = 0x62,dirtree_move = 0x63,dirtree_rank = 0x64,dirtree_rminode = 0x65,dirtree_segm_moved = 0x66,enum_width_changed = 0x67,enum_flag_changed = 0x68,enum_ordinal_changed = 0x69,};
typedef int input_event_modifiers_t;
struct lowertype_helper_t_vtbl; /* lowertype_helper_t_vtbl {bool (*func_has_stkframe_hole)(lowertype_helper_t *__hidden this, const tinfo_t *candidate, const func_type_data_t *candidate_data);int (*get_func_purged_bytes)(lowertype_helper_t *__hidden this, const tinfo_t *candidate, const func_type_data_t *candidate_data);};*/
typedef bool *qvector_bool___iterator;
typedef char *qvector_char___iterator;
typedef op_t *qvector_op_t___iterator;
struct std___Make_unsigned2_1_ {};
struct std___Make_unsigned2_2_ {};
struct std___Make_unsigned2_4_ {};
struct std___Make_unsigned2_8_ {};
struct std__allocator_wchar_t_ {};
struct std__bad_exception_vtbl; /* std__bad_exception_vtbl {void (*_del_bad_exception)(std__bad_exception *__hidden this);const char *(*what)(const std__exception *__hidden this);};*/
struct std__basic_ios_wchar_t_;
enum std__float_denorm_style : unsigned __int32 {denorm_indeterminate = 0xFFFFFFFF,denorm_absent = 0x0,denorm_present = 0x1,};
struct std__input_iterator_tag {};
struct std__not_equal_to_void_ {};
struct choose_ioport_parser_t {choose_ioport_parser_t_vtbl *__vftable /*VFT*/;};
struct file_enumerator_t_vtbl; /* file_enumerator_t_vtbl {int (*visit_file)(file_enumerator_t *__hidden this, const char *file);void (*_del_file_enumerator_t)(file_enumerator_t *__hidden this);};*/
struct func_parent_iterator_t {func_t *fnt;int idx;};
struct janitor_t_linput_t__P_ {linput_t **resource;};
typedef int *qvector_int___iterator;
typedef unsigned __int32 std___Atomic_counter_t;
struct std___Container_base12 {std___Container_proxy *_Myproxy;};
struct std___Default_sentinel {};
struct std___Distance_unknown {};
struct std___Equal_allocators {};
enum std___Invoker_strategy : unsigned __int32 {_Functor = 0x0,_Pmf_object = 0x1,_Pmf_refwrap = 0x2,_Pmf_pointer = 0x3,_Pmd_object = 0x4,_Pmd_refwrap = 0x5,_Pmd_pointer = 0x6,};
struct std___Unused_parameter {};
enum std__float_round_style : unsigned __int32 {round_indeterminate = 0xFFFFFFFF,round_toward_zero = 0x0,round_to_nearest = 0x1,round_toward_infinity = 0x2,round_toward_neg_infinity = 0x3,};
struct std__hash_long_double_ {};
struct struct_field_visitor_t {struct_field_visitor_t_vtbl *__vftable /*VFT*/;};
enum syntax_highlight_style : unsigned __int32 {HF_DEFAULT = 0x0,HF_KEYWORD1 = 0x1,HF_KEYWORD2 = 0x2,HF_KEYWORD3 = 0x3,HF_STRING = 0x4,HF_COMMENT = 0x5,HF_PREPROC = 0x6,HF_NUMBER = 0x7,HF_MAX = 0x8,};
struct __crt_locale_pointers {__crt_locale_data *locinfo;__crt_multibyte_data *mbcinfo;};
typedef void cliopt_poly_handler_t(int, const char **, void *);
struct enum_member_visitor_t {enum_member_visitor_t_vtbl *__vftable /*VFT*/;};
struct graph_location_info_t {double zoom;double orgx;double orgy;};
struct refcnted_regex_t_vtbl; /* refcnted_regex_t_vtbl {void (*release)(refcnted_regex_t *__hidden this);void (*_del_refcnted_regex_t)(refcnted_regex_t *__hidden this);};*/
struct std___Container_base0 {};
struct std___Container_proxy {const std___Container_base12 *_Mycont;std___Iterator_base12 *_Myfirstiter;};
struct std___Invoker_functor {};
struct std___Iterator_base12 {std___Container_proxy *_Myproxy;std___Iterator_base12 *_Mynextiter;};
struct std___Make_signed2_1_ {};
struct std___Make_signed2_2_ {};
struct std___Make_signed2_4_ {};
struct std___Make_signed2_8_ {};
struct std__less_equal_void_ {};
struct std__multiplies_void_ {};
struct user_defined_prefix_t {user_defined_prefix_t_vtbl *__vftable /*VFT*/;};
struct __crt_multibyte_data;
struct __std_exception_data {const char *_What;bool _DoFree;};
struct const_aloc_visitor_t {const_aloc_visitor_t_vtbl *__vftable /*VFT*/;};
struct edge_infos_wrapper_t {edge_infos_t *ptr;};
enum graph_notification_t : unsigned __int32 {grcode_calculating_layout = 0x0,grcode_layout_calculated = 0x1,grcode_changed_graph = 0x2,grcode_reserved = 0x3,grcode_clicked = 0x4,grcode_dblclicked = 0x5,grcode_creating_group = 0x6,grcode_deleting_group = 0x7,grcode_group_visibility = 0x8,grcode_gotfocus = 0x9,grcode_lostfocus = 0xA,grcode_user_refresh = 0xB,grcode_reserved2 = 0xC,grcode_user_text = 0xD,grcode_user_size = 0xE,grcode_user_title = 0xF,grcode_user_draw = 0x10,grcode_user_hint = 0x11,grcode_destroyed = 0x12,grcode_create_graph_viewer = 0x100,grcode_get_graph_viewer = 0x101,grcode_get_viewer_graph = 0x102,grcode_create_mutable_graph = 0x103,grcode_set_viewer_graph = 0x104,grcode_refresh_viewer = 0x105,grcode_fit_window = 0x106,grcode_get_curnode = 0x107,grcode_center_on = 0x108,grcode_get_selection = 0x109,grcode_del_custom_layout = 0x10A,grcode_set_custom_layout = 0x10B,grcode_set_graph_groups = 0x10C,grcode_clear = 0x10D,grcode_create_digraph_layout = 0x10E,grcode_create_tree_layout = 0x10F,grcode_create_circle_layout = 0x110,grcode_get_node_representative = 0x111,grcode_find_subgraph_node = 0x112,grcode_create_group = 0x113,grcode_get_custom_layout = 0x114,grcode_get_graph_groups = 0x115,grcode_empty = 0x116,grcode_is_visible_node = 0x117,grcode_delete_group = 0x118,grcode_change_group_visibility = 0x119,grcode_set_edge = 0x11A,grcode_node_qty = 0x11B,grcode_nrect = 0x11C,grcode_set_titlebar_height = 0x11D,grcode_create_user_graph_place = 0x11E,grcode_create_disasm_graph1 = 0x11F,grcode_create_disasm_graph2 = 0x120,grcode_set_node_info = 0x121,grcode_get_node_info = 0x122,grcode_del_node_info = 0x123,grcode_viewer_create_groups = 0x124,grcode_viewer_delete_groups = 0x125,grcode_viewer_groups_visibility = 0x126,grcode_viewer_create_groups_vec = 0x127,grcode_viewer_delete_groups_vec = 0x128,grcode_viewer_groups_visibility_vec = 0x129,grcode_delete_mutable_graph = 0x12A,grcode_edge_infos_wrapper_copy = 0x12B,grcode_edge_infos_wrapper_clear = 0x12C,grcode_attach_menu_item = 0x12D,grcode_set_gli = 0x12E,grcode_get_gli = 0x12F,};
struct janitor_t__iobuf__P_ {_iobuf **resource;};
struct post_event_visitor_t {post_event_visitor_t_vtbl *__vftable /*VFT*/;};
enum processor_t__event_t : unsigned __int32 {ev_init = 0x0,ev_term = 0x1,ev_newprc = 0x2,ev_newasm = 0x3,ev_newfile = 0x4,ev_oldfile = 0x5,ev_newbinary = 0x6,ev_endbinary = 0x7,ev_set_idp_options = 0x8,ev_set_proc_options = 0x9,ev_ana_insn = 0xA,ev_emu_insn = 0xB,ev_out_header = 0xC,ev_out_footer = 0xD,ev_out_segstart = 0xE,ev_out_segend = 0xF,ev_out_assumes = 0x10,ev_out_insn = 0x11,ev_out_mnem = 0x12,ev_out_operand = 0x13,ev_out_data = 0x14,ev_out_label = 0x15,ev_out_special_item = 0x16,ev_gen_stkvar_def = 0x17,ev_gen_regvar_def = 0x18,ev_gen_src_file_lnnum = 0x19,ev_creating_segm = 0x1A,ev_moving_segm = 0x1B,ev_coagulate = 0x1C,ev_undefine = 0x1D,ev_treat_hindering_item = 0x1E,ev_rename = 0x1F,ev_is_far_jump = 0x20,ev_is_sane_insn = 0x21,ev_is_cond_insn = 0x22,ev_is_call_insn = 0x23,ev_is_ret_insn = 0x24,ev_may_be_func = 0x25,ev_is_basic_block_end = 0x26,ev_is_indirect_jump = 0x27,ev_is_insn_table_jump = 0x28,ev_is_switch = 0x29,ev_calc_switch_cases = 0x2A,ev_create_switch_xrefs = 0x2B,ev_is_align_insn = 0x2C,ev_is_alloca_probe = 0x2D,ev_delay_slot_insn = 0x2E,ev_is_sp_based = 0x2F,ev_can_have_type = 0x30,ev_cmp_operands = 0x31,ev_adjust_refinfo = 0x32,ev_get_operand_string = 0x33,ev_get_reg_name = 0x34,ev_str2reg = 0x35,ev_get_autocmt = 0x36,ev_get_bg_color = 0x37,ev_is_jump_func = 0x38,ev_func_bounds = 0x39,ev_verify_sp = 0x3A,ev_verify_noreturn = 0x3B,ev_create_func_frame = 0x3C,ev_get_frame_retsize = 0x3D,ev_get_stkvar_scale_factor = 0x3E,ev_demangle_name = 0x3F,ev_add_cref = 0x40,ev_add_dref = 0x41,ev_del_cref = 0x42,ev_del_dref = 0x43,ev_coagulate_dref = 0x44,ev_may_show_sreg = 0x45,ev_loader_elf_machine = 0x46,ev_auto_queue_empty = 0x47,ev_validate_flirt_func = 0x48,ev_adjust_libfunc_ea = 0x49,ev_assemble = 0x4A,ev_extract_address = 0x4B,ev_realcvt = 0x4C,ev_gen_asm_or_lst = 0x4D,ev_gen_map_file = 0x4E,ev_create_flat_group = 0x4F,ev_getreg = 0x50,ev_analyze_prolog = 0x51,ev_calc_spdelta = 0x52,ev_calcrel = 0x53,ev_find_reg_value = 0x54,ev_find_op_value = 0x55,ev_replaying_undo = 0x56,ev_ending_undo = 0x57,ev_set_code16_mode = 0x58,ev_get_code16_mode = 0x59,ev_get_procmod = 0x5A,ev_asm_installed = 0x5B,ev_get_reg_accesses = 0x5C,ev_is_control_flow_guard = 0x5D,ev_broadcast = 0x5E,ev_create_merge_handlers = 0x5F,ev_privrange_changed = 0x60,ev_last_cb_before_debugger = 0x61,ev_next_exec_insn = 0x3E8,ev_calc_step_over = 0x3E9,ev_calc_next_eas = 0x3EA,ev_get_macro_insn_head = 0x3EB,ev_get_dbr_opnum = 0x3EC,ev_insn_reads_tbit = 0x3ED,ev_clean_tbit = 0x3EE,ev_get_idd_opinfo = 0x3EF,ev_get_reg_info = 0x3F0,ev_last_cb_before_type_callbacks = 0x3F2,ev_setup_til = 0x7D0,ev_get_abi_info = 0x7D1,ev_max_ptr_size = 0x7D2,ev_get_default_enum_size = 0x7D3,ev_get_cc_regs = 0x7D4,ev_obsolete1 = 0x7D5,ev_obsolete2 = 0x7D6,ev_get_simd_types = 0x7D7,ev_calc_cdecl_purged_bytes = 0x7D8,ev_calc_purged_bytes = 0x7D9,ev_calc_retloc = 0x7DA,ev_calc_arglocs = 0x7DB,ev_calc_varglocs = 0x7DC,ev_adjust_argloc = 0x7DD,ev_lower_func_type = 0x7DE,ev_equal_reglocs = 0x7DF,ev_use_stkarg_type = 0x7E0,ev_use_regarg_type = 0x7E1,ev_use_arg_types = 0x7E2,ev_arg_addrs_ready = 0x7E3,ev_decorate_name = 0x7E4,ev_arch_changed = 0x7E5,ev_get_stkarg_area_info = 0x7E6,ev_last_cb_before_loader = 0x7E7,ev_loader = 0xBB8,};
struct qrefcnt_t_extlang_t_ {extlang_t *ptr;};
struct std___Fake_allocator {};
struct std___False_copy_cat {};
struct std___Iterator_base0 {};
struct std___Unpack_tuple_t {};
struct std__allocator_char_ {};
struct std__allocator_void_ {};
struct std__allocator_arg_t {};
struct std__basic_ios_char_;
struct tinfo_visitor_t_vtbl; /* tinfo_visitor_t_vtbl {void (*_del_tinfo_visitor_t)(tinfo_visitor_t *__hidden this);int (*visit_type)(tinfo_visitor_t *__hidden this, type_mods_t *out, const tinfo_t *tif, const char *name, const char *cmt);};*/
struct _EXCEPTION_POINTERS;
struct aloc_visitor_t_vtbl; /* aloc_visitor_t_vtbl {int (*visit_location)(aloc_visitor_t *__hidden this, argloc_t *v, int off, int size);void (*_del_aloc_visitor_t)(aloc_visitor_t *__hidden this);};*/
struct altadjust_visitor_t {altadjust_visitor_t_vtbl *__vftable /*VFT*/;};
enum debugger_t__event_t : unsigned __int32 {ev_init_debugger = 0x0,ev_term_debugger = 0x1,ev_get_processes = 0x2,ev_start_process = 0x3,ev_attach_process = 0x4,ev_detach_process = 0x5,ev_get_debapp_attrs = 0x6,ev_rebase_if_required_to = 0x7,ev_request_pause = 0x8,ev_exit_process = 0x9,ev_get_debug_event = 0xA,ev_resume = 0xB,ev_set_exception_info = 0xC,ev_suspended = 0xD,ev_thread_suspend = 0xE,ev_thread_continue = 0xF,ev_set_resume_mode = 0x10,ev_read_registers = 0x11,ev_write_register = 0x12,ev_thread_get_sreg_base = 0x13,ev_get_memory_info = 0x14,ev_read_memory = 0x15,ev_write_memory = 0x16,ev_check_bpt = 0x17,ev_update_bpts = 0x18,ev_update_lowcnds = 0x19,ev_open_file = 0x1A,ev_close_file = 0x1B,ev_read_file = 0x1C,ev_write_file = 0x1D,ev_map_address = 0x1E,ev_get_debmod_extensions = 0x1F,ev_update_call_stack = 0x20,ev_appcall = 0x21,ev_cleanup_appcall = 0x22,ev_eval_lowcnd = 0x23,ev_send_ioctl = 0x24,ev_dbg_enable_trace = 0x25,ev_is_tracing_enabled = 0x26,ev_rexec = 0x27,ev_get_srcinfo_path = 0x28,ev_bin_search = 0x29,};
struct exec_request_t_vtbl; /* exec_request_t_vtbl {int (*execute)(exec_request_t *__hidden this);void (*_del_exec_request_t)(exec_request_t *__hidden this);};*/
enum find_extlang_kind_t : unsigned __int32 {FIND_EXTLANG_BY_EXT = 0x0,FIND_EXTLANG_BY_NAME = 0x1,FIND_EXTLANG_BY_IDX = 0x2,};
enum linput_close_code_t : unsigned __int32 {LOC_CLOSE = 0x0,LOC_UNMAKE = 0x1,LOC_KEEP = 0x2,};
typedef int mangled_name_type_t;
struct renderer_info_pos_t {int node;__int16 cx;__int16 cy;};
struct renderer_pos_info_t {int node;__int16 cx;__int16 cy;__int16 sx;};
struct std___Select_false_ {};
enum std___Uninitialized : unsigned __int32 {_Noinit = 0x0,};
struct std__allocator_int_ {};
struct std__bad_alloc_vtbl; /* std__bad_alloc_vtbl {void (*_del_bad_alloc)(std__bad_alloc *__hidden this);const char *(*what)(const std__exception *__hidden this);};*/
struct std__equal_to_void_ {};
struct std__exception_vtbl; /* std__exception_vtbl {void (*_del_exception)(std__exception *__hidden this);const char *(*what)(const std__exception *__hidden this);};*/
enum tcc_renderer_type_t : unsigned __int32 {TCCRT_INVALID = 0x0,TCCRT_FLAT = 0x1,TCCRT_GRAPH = 0x2,TCCRT_PROXIMITY = 0x3,};
typedef void (*unexpected_function)(void);
enum view_notification_t : unsigned __int32 {view_activated = 0x0,view_deactivated = 0x1,view_keydown = 0x2,view_click = 0x3,view_dblclick = 0x4,view_curpos = 0x5,view_created = 0x6,view_close = 0x7,view_switched = 0x8,view_mouse_over = 0x9,view_loc_changed = 0xA,view_mouse_moved = 0xB,};
struct _CrtMemBlockHeader;
struct bpt_visitor_t_vtbl; /* bpt_visitor_t_vtbl {int (*visit_bpt)(bpt_visitor_t *__hidden this, const bpt_t *bpt);};*/
enum dbg_notification_t : unsigned __int32 {dbg_null = 0x0,dbg_process_start = 0x1,dbg_process_exit = 0x2,dbg_process_attach = 0x3,dbg_process_detach = 0x4,dbg_thread_start = 0x5,dbg_thread_exit = 0x6,dbg_library_load = 0x7,dbg_library_unload = 0x8,dbg_information = 0x9,dbg_exception = 0xA,dbg_suspend_process = 0xB,dbg_bpt = 0xC,dbg_trace = 0xD,dbg_request_error = 0xE,dbg_step_into = 0xF,dbg_step_over = 0x10,dbg_run_to = 0x11,dbg_step_until_ret = 0x12,dbg_bpt_changed = 0x13,dbg_started_loading_bpts = 0x14,dbg_finished_loading_bpts = 0x15,dbg_last = 0x16,};
struct depth_first_info_t;
struct format_data_info_t {int ptvf;int radix;int max_length;int arrbase;int arrnelems;int margin;int indent;};
enum input_event_kind_t : unsigned __int32 {iek_unknown = 0x0,iek_shortcut = 0x1,iek_key_press = 0x2,iek_key_release = 0x3,iek_mouse_button_press = 0x4,iek_mouse_button_release = 0x5,iek_mouse_wheel = 0x6,};
struct ioports_fallback_t {ioports_fallback_t_vtbl *__vftable /*VFT*/;};
enum locchange_reason_t : unsigned __int32 {lcr_unknown = 0x0,lcr_goto = 0x1,lcr_user_switch = 0x2,lcr_auto_switch = 0x3,lcr_jump = 0x4,lcr_navigate = 0x5,lcr_scroll = 0x6,lcr_internal = 0x7,};
struct lowertype_helper_t {lowertype_helper_t_vtbl *__vftable /*VFT*/;};
enum msg_notification_t : unsigned __int32 {msg_activated = 0x0,msg_deactivated = 0x1,msg_click = 0x2,msg_dblclick = 0x3,msg_closed = 0x4,msg_keydown = 0x5,};
struct qrefcnt_obj_t_vtbl; /* qrefcnt_obj_t_vtbl {void (*release)(qrefcnt_obj_t *__hidden this);};*/
struct std___Exact_args_t {};
struct std__common_type__ {};
struct std__exception_ptr {void *_Data1;void *_Data2;};
struct std__greater_void_ {};
typedef void (*terminate_function)(void);
typedef void (*unexpected_handler)(void);
typedef int (*_CRT_REPORT_HOOKW)(int, __int16 *, int *);
struct _Real_type_float_ {};
struct __crt_locale_data;
typedef void (*_purecall_handler)(void);
struct dirtree_visitor_t {dirtree_visitor_t_vtbl *__vftable /*VFT*/;};
struct extlang_visitor_t {extlang_visitor_t_vtbl *__vftable /*VFT*/;};
struct file_enumerator_t {file_enumerator_t_vtbl *__vftable /*VFT*/;};
enum format_functype_t : unsigned __int32 {FMTFUNC_PRINTF = 0x0,FMTFUNC_SCANF = 0x1,FMTFUNC_STRFTIME = 0x2,FMTFUNC_STRFMON = 0x3,};
enum graph_item_type_t : unsigned __int32 {git_none = 0x0,git_edge = 0x1,git_node = 0x2,git_tool = 0x3,git_text = 0x4,git_elp = 0x5,};
struct highlighter_cbs_t {highlighter_cbs_t_vtbl *__vftable /*VFT*/;};
typedef int ignore_name_def_t;
struct interr_exc_t_vtbl; /* interr_exc_t_vtbl {void (*_del_interr_exc_t)(interr_exc_t *__hidden this);const char *(*what)(const std__exception *__hidden this);};*/
enum save_reg_values_t : unsigned __int32 {SAVE_ALL_VALUES = 0x0,SAVE_DIFF = 0x1,SAVE_NONE = 0x2,};
struct std__hash_double_ {};
enum std__memory_order : unsigned __int32 {memory_order_relaxed = 0x0,memory_order_consume = 0x1,memory_order_acquire = 0x2,memory_order_release = 0x3,memory_order_acq_rel = 0x4,memory_order_seq_cst = 0x5,};
typedef void (*terminate_handler)(void);
enum ui_notification_t : unsigned __int32 {ui_null = 0x0,ui_range = 0x1,ui_refresh_choosers = 0x2,ui_idcstart = 0x3,ui_idcstop = 0x4,ui_suspend = 0x5,ui_resume = 0x6,ui_broadcast = 0x7,ui_read_selection = 0x8,ui_read_range_selection = 0x9,ui_unmarksel = 0xA,ui_screenea = 0xB,ui_saving = 0xC,ui_saved = 0xD,ui_refreshmarked = 0xE,ui_refresh = 0xF,ui_choose = 0x10,ui_close_chooser = 0x11,ui_banner = 0x12,ui_setidle = 0x13,ui_database_closed = 0x14,ui_beep = 0x15,ui_is_msg_inited = 0x16,ui_msg = 0x17,ui_mbox = 0x18,ui_clr_cancelled = 0x19,ui_set_cancelled = 0x1A,ui_test_cancelled = 0x1B,ui_ask_buttons = 0x1C,ui_ask_file = 0x1D,ui_ask_form = 0x1E,ui_ask_text = 0x1F,ui_ask_str = 0x20,ui_ask_addr = 0x21,ui_ask_seg = 0x22,ui_ask_long = 0x23,ui_add_idckey = 0x24,ui_obsolete_del_idckey = 0x25,ui_analyzer_options = 0x26,ui_load_file = 0x27,ui_run_dbg = 0x28,ui_get_cursor = 0x29,ui_get_curline = 0x2A,ui_copywarn = 0x2B,ui_noabort = 0x2C,ui_lock_range_refresh = 0x2D,ui_unlock_range_refresh = 0x2E,ui_genfile_callback = 0x2F,ui_open_url = 0x30,ui_hexdumpea = 0x31,ui_get_key_code = 0x32,ui_setup_plugins_menu = 0x33,ui_get_kernel_version = 0x34,ui_is_idaq = 0x35,ui_refresh_navband = 0x36,ui_debugger_menu_change = 0x37,ui_get_curplace = 0x38,ui_obsolete_display_widget = 0x39,ui_close_widget = 0x3A,ui_activate_widget = 0x3B,ui_find_widget = 0x3C,ui_get_current_widget = 0x3D,ui_widget_visible = 0x3E,ui_widget_closing = 0x3F,ui_widget_invisible = 0x40,ui_get_ea_hint = 0x41,ui_get_item_hint = 0x42,ui_refresh_custom_viewer = 0x43,ui_destroy_custom_viewer = 0x44,ui_jump_in_custom_viewer = 0x45,ui_get_custom_viewer_curline = 0x46,ui_get_current_viewer = 0x47,ui_is_idaview = 0x48,ui_get_custom_viewer_hint = 0x49,ui_set_custom_viewer_range = 0x4A,ui_database_inited = 0x4B,ui_ready_to_run = 0x4C,ui_set_custom_viewer_handler = 0x4D,ui_refresh_chooser = 0x4E,ui_open_builtin = 0x4F,ui_preprocess_action = 0x50,ui_postprocess_action = 0x51,ui_set_custom_viewer_mode = 0x52,ui_gen_disasm_text = 0x53,ui_gen_idanode_text = 0x54,ui_install_cli = 0x55,ui_execute_sync = 0x56,ui_get_chooser_obj = 0x57,ui_enable_chooser_item_attrs = 0x58,ui_get_chooser_item_attrs = 0x59,ui_set_dock_pos = 0x5A,ui_get_opnum = 0x5B,ui_install_custom_datatype_menu = 0x5C,ui_install_custom_optype_menu = 0x5D,ui_get_range_marker = 0x5E,ui_lookup_key_code = 0x5F,ui_load_custom_icon_file = 0x60,ui_load_custom_icon = 0x61,ui_free_custom_icon = 0x62,ui_process_action = 0x63,ui_create_code_viewer = 0x64,ui_addons = 0x65,ui_execute_ui_requests = 0x66,ui_execute_ui_requests_list = 0x67,ui_register_timer = 0x68,ui_unregister_timer = 0x69,ui_take_database_snapshot = 0x6A,ui_restore_database_snapshot = 0x6B,ui_set_code_viewer_line_handlers = 0x6C,ui_obsolete_refresh_custom_code_viewer = 0x6D,ui_create_source_viewer = 0x6E,ui_get_tab_size = 0x6F,ui_repaint_qwidget = 0x70,ui_custom_viewer_set_userdata = 0x71,ui_jumpto = 0x72,ui_cancel_exec_request = 0x73,ui_open_form = 0x74,ui_unrecognized_config_directive = 0x75,ui_get_output_cursor = 0x76,ui_get_output_curline = 0x77,ui_get_output_selected_text = 0x78,ui_get_renderer_type = 0x79,ui_set_renderer_type = 0x7A,ui_get_viewer_user_data = 0x7B,ui_get_viewer_place_type = 0x7C,ui_ea_viewer_history_push_and_jump = 0x7D,ui_ea_viewer_history_info = 0x7E,ui_register_action = 0x7F,ui_unregister_action = 0x80,ui_attach_action_to_menu = 0x81,ui_detach_action_from_menu = 0x82,ui_attach_action_to_popup = 0x83,ui_detach_action_from_popup = 0x84,ui_attach_dynamic_action_to_popup = 0x85,ui_attach_action_to_toolbar = 0x86,ui_detach_action_from_toolbar = 0x87,ui_updating_actions = 0x88,ui_updated_actions = 0x89,ui_populating_widget_popup = 0x8A,ui_finish_populating_widget_popup = 0x8B,ui_update_action_attr = 0x8C,ui_get_action_attr = 0x8D,ui_plugin_loaded = 0x8E,ui_plugin_unloading = 0x8F,ui_get_widget_type = 0x90,ui_current_widget_changed = 0x91,ui_get_widget_title = 0x92,ui_obsolete_get_user_strlist_options = 0x93,ui_create_custom_viewer = 0x94,ui_custom_viewer_jump = 0x95,ui_set_custom_viewer_handlers = 0x96,ui_get_registered_actions = 0x97,ui_create_toolbar = 0x98,ui_delete_toolbar = 0x99,ui_create_menu = 0x9A,ui_delete_menu = 0x9B,ui_obsolete_set_nav_colorizer = 0x9C,ui_get_chooser_data = 0x9D,ui_obsolete_get_highlight = 0x9E,ui_set_highlight = 0x9F,ui_set_mappings = 0xA0,ui_create_empty_widget = 0xA1,ui_msg_clear = 0xA2,ui_msg_save = 0xA3,ui_msg_get_lines = 0xA4,ui_chooser_default_enter = 0xA5,ui_screen_ea_changed = 0xA6,ui_get_active_modal_widget = 0xA7,ui_navband_pixel = 0xA8,ui_navband_ea = 0xA9,ui_get_window_id = 0xAA,ui_create_desktop_widget = 0xAB,ui_strchoose = 0xAC,ui_set_nav_colorizer = 0xAD,ui_display_widget = 0xAE,ui_get_lines_rendering_info = 0xAF,ui_sync_sources = 0xB0,ui_get_widget_config = 0xB1,ui_set_widget_config = 0xB2,ui_get_custom_viewer_location = 0xB3,ui_initing_database = 0xB4,ui_destroying_procmod = 0xB5,ui_destroying_plugmod = 0xB6,ui_update_file_history = 0xB7,ui_cancel_thread_exec_requests = 0xB8,ui_get_synced_group = 0xB9,ui_show_rename_dialog = 0xBA,ui_desktop_applied = 0xBB,ui_choose_bookmark = 0xBC,ui_get_custom_viewer_place_xcoord = 0xBD,ui_get_user_input_event = 0xBE,ui_get_highlight_2 = 0xBF,ui_last = 0xC0,ui_dbg_begin = 0x3E8,ui_dbg_run_requests = 0x3E8,ui_dbg_get_running_request = 0x3E9,ui_dbg_get_running_notification = 0x3EA,ui_dbg_clear_requests_queue = 0x3EB,ui_dbg_get_process_state = 0x3EC,ui_dbg_start_process = 0x3ED,ui_dbg_request_start_process = 0x3EE,ui_dbg_suspend_process = 0x3EF,ui_dbg_request_suspend_process = 0x3F0,ui_dbg_continue_process = 0x3F1,ui_dbg_request_continue_process = 0x3F2,ui_dbg_exit_process = 0x3F3,ui_dbg_request_exit_process = 0x3F4,ui_dbg_get_thread_qty = 0x3F5,ui_dbg_getn_thread = 0x3F6,ui_dbg_select_thread = 0x3F7,ui_dbg_request_select_thread = 0x3F8,ui_dbg_step_into = 0x3F9,ui_dbg_request_step_into = 0x3FA,ui_dbg_step_over = 0x3FB,ui_dbg_request_step_over = 0x3FC,ui_dbg_run_to = 0x3FD,ui_dbg_request_run_to = 0x3FE,ui_dbg_step_until_ret = 0x3FF,ui_dbg_request_step_until_ret = 0x400,ui_dbg_get_bpt_qty = 0x401,ui_dbg_add_oldbpt = 0x402,ui_dbg_request_add_oldbpt = 0x403,ui_dbg_del_oldbpt = 0x404,ui_dbg_request_del_oldbpt = 0x405,ui_dbg_enable_oldbpt = 0x406,ui_dbg_request_enable_oldbpt = 0x407,ui_dbg_set_trace_size = 0x408,ui_dbg_clear_trace = 0x409,ui_dbg_request_clear_trace = 0x40A,ui_dbg_is_step_trace_enabled = 0x40B,ui_dbg_enable_step_trace = 0x40C,ui_dbg_request_enable_step_trace = 0x40D,ui_dbg_get_step_trace_options = 0x40E,ui_dbg_set_step_trace_options = 0x40F,ui_dbg_request_set_step_trace_options = 0x410,ui_dbg_is_insn_trace_enabled = 0x411,ui_dbg_enable_insn_trace = 0x412,ui_dbg_request_enable_insn_trace = 0x413,ui_dbg_get_insn_trace_options = 0x414,ui_dbg_set_insn_trace_options = 0x415,ui_dbg_request_set_insn_trace_options = 0x416,ui_dbg_is_func_trace_enabled = 0x417,ui_dbg_enable_func_trace = 0x418,ui_dbg_request_enable_func_trace = 0x419,ui_dbg_get_func_trace_options = 0x41A,ui_dbg_set_func_trace_options = 0x41B,ui_dbg_request_set_func_trace_options = 0x41C,ui_dbg_get_tev_qty = 0x41D,ui_dbg_get_tev_info = 0x41E,ui_dbg_get_call_tev_callee = 0x41F,ui_dbg_get_ret_tev_return = 0x420,ui_dbg_get_bpt_tev_ea = 0x421,ui_dbg_get_reg_value_type = 0x422,ui_dbg_get_processes = 0x423,ui_dbg_attach_process = 0x424,ui_dbg_request_attach_process = 0x425,ui_dbg_detach_process = 0x426,ui_dbg_request_detach_process = 0x427,ui_dbg_get_first_module = 0x428,ui_dbg_get_next_module = 0x429,ui_dbg_bring_to_front = 0x42A,ui_dbg_get_current_thread = 0x42B,ui_dbg_wait_for_next_event = 0x42C,ui_dbg_get_debug_event = 0x42D,ui_dbg_set_debugger_options = 0x42E,ui_dbg_set_remote_debugger = 0x42F,ui_dbg_load_debugger = 0x430,ui_dbg_retrieve_exceptions = 0x431,ui_dbg_store_exceptions = 0x432,ui_dbg_define_exception = 0x433,ui_dbg_suspend_thread = 0x434,ui_dbg_request_suspend_thread = 0x435,ui_dbg_resume_thread = 0x436,ui_dbg_request_resume_thread = 0x437,ui_dbg_get_process_options = 0x438,ui_dbg_check_bpt = 0x439,ui_dbg_set_process_state = 0x43A,ui_dbg_get_manual_regions = 0x43B,ui_dbg_set_manual_regions = 0x43C,ui_dbg_enable_manual_regions = 0x43D,ui_dbg_set_process_options = 0x43E,ui_dbg_is_busy = 0x43F,ui_dbg_hide_all_bpts = 0x440,ui_dbg_edit_manual_regions = 0x441,ui_dbg_get_sp_val = 0x442,ui_dbg_get_ip_val = 0x443,ui_dbg_get_reg_val = 0x444,ui_dbg_set_reg_val = 0x445,ui_dbg_request_set_reg_val = 0x446,ui_dbg_get_insn_tev_reg_val = 0x447,ui_dbg_get_insn_tev_reg_result = 0x448,ui_dbg_register_provider = 0x449,ui_dbg_unregister_provider = 0x44A,ui_dbg_handle_debug_event = 0x44B,ui_dbg_add_vmod = 0x44C,ui_dbg_del_vmod = 0x44D,ui_dbg_compare_bpt_locs = 0x44E,ui_obsolete_dbg_save_bpts = 0x44F,ui_dbg_set_bptloc_string = 0x450,ui_dbg_get_bptloc_string = 0x451,ui_dbg_internal_appcall = 0x452,ui_dbg_internal_cleanup_appcall = 0x453,ui_dbg_internal_get_sreg_base = 0x454,ui_dbg_internal_ioctl = 0x455,ui_dbg_read_memory = 0x456,ui_dbg_write_memory = 0x457,ui_dbg_read_registers = 0x458,ui_dbg_write_register = 0x459,ui_dbg_get_memory_info = 0x45A,ui_dbg_get_event_cond = 0x45B,ui_dbg_set_event_cond = 0x45C,ui_dbg_enable_bpt = 0x45D,ui_dbg_request_enable_bpt = 0x45E,ui_dbg_del_bpt = 0x45F,ui_dbg_request_del_bpt = 0x460,ui_dbg_map_source_path = 0x461,ui_dbg_map_source_file_path = 0x462,ui_dbg_modify_source_paths = 0x463,ui_dbg_is_bblk_trace_enabled = 0x464,ui_dbg_enable_bblk_trace = 0x465,ui_dbg_request_enable_bblk_trace = 0x466,ui_dbg_get_bblk_trace_options = 0x467,ui_dbg_set_bblk_trace_options = 0x468,ui_dbg_request_set_bblk_trace_options = 0x469,ui_dbg_load_trace_file = 0x46A,ui_dbg_save_trace_file = 0x46B,ui_dbg_is_valid_trace_file = 0x46C,ui_dbg_set_trace_file_desc = 0x46D,ui_dbg_get_trace_file_desc = 0x46E,ui_dbg_choose_trace_file = 0x46F,ui_dbg_diff_trace_file = 0x470,ui_dbg_graph_trace = 0x471,ui_dbg_get_tev_memory_info = 0x472,ui_dbg_get_tev_event = 0x473,ui_dbg_get_insn_tev_reg_mem = 0x474,ui_dbg_getn_bpt = 0x475,ui_dbg_get_bpt = 0x476,ui_dbg_find_bpt = 0x477,ui_dbg_add_bpt = 0x478,ui_dbg_request_add_bpt = 0x479,ui_dbg_update_bpt = 0x47A,ui_dbg_for_all_bpts = 0x47B,ui_dbg_get_tev_ea = 0x47C,ui_dbg_get_tev_type = 0x47D,ui_dbg_get_tev_tid = 0x47E,ui_dbg_get_trace_base_address = 0x47F,ui_dbg_set_trace_base_address = 0x480,ui_dbg_add_tev = 0x481,ui_dbg_add_insn_tev = 0x482,ui_dbg_add_call_tev = 0x483,ui_dbg_add_ret_tev = 0x484,ui_dbg_add_bpt_tev = 0x485,ui_dbg_add_debug_event = 0x486,ui_dbg_add_thread = 0x487,ui_dbg_del_thread = 0x488,ui_dbg_add_many_tevs = 0x489,ui_dbg_set_bpt_group = 0x48A,ui_dbg_set_highlight_trace_options = 0x48B,ui_dbg_set_trace_platform = 0x48C,ui_dbg_get_trace_platform = 0x48D,ui_dbg_internal_get_elang = 0x48E,ui_dbg_internal_set_elang = 0x48F,ui_dbg_load_dbg_dbginfo = 0x490,ui_dbg_set_resume_mode = 0x491,ui_dbg_request_set_resume_mode = 0x492,ui_dbg_set_bptloc_group = 0x493,ui_dbg_list_bptgrps = 0x494,ui_dbg_rename_bptgrp = 0x495,ui_dbg_del_bptgrp = 0x496,ui_dbg_get_grp_bpts = 0x497,ui_dbg_get_bpt_group = 0x498,ui_dbg_change_bptlocs = 0x499,ui_dbg_collect_stack_trace = 0x49A,ui_dbg_get_module_info = 0x49B,ui_dbg_get_srcinfo_provider = 0x49C,ui_dbg_get_global_var = 0x49D,ui_dbg_get_local_var = 0x49E,ui_dbg_get_local_vars = 0x49F,ui_dbg_add_path_mapping = 0x4A0,ui_dbg_get_current_source_file = 0x4A1,ui_dbg_get_current_source_line = 0x4A2,ui_dbg_srcdbg_step_into = 0x4A3,ui_dbg_srcdbg_request_step_into = 0x4A4,ui_dbg_srcdbg_step_over = 0x4A5,ui_dbg_srcdbg_request_step_over = 0x4A6,ui_dbg_srcdbg_step_until_ret = 0x4A7,ui_dbg_srcdbg_request_step_until_ret = 0x4A8,ui_dbg_getn_thread_name = 0x4A9,ui_dbg_bin_search = 0x4AA,ui_dbg_get_insn_tev_reg_val_i = 0x4AB,ui_dbg_get_insn_tev_reg_result_i = 0x4AC,ui_dbg_get_reg_val_i = 0x4AD,ui_dbg_set_reg_val_i = 0x4AE,ui_dbg_get_reg_info = 0x4AF,ui_dbg_set_trace_dynamic_register_set = 0x4B0,ui_dbg_get_trace_dynamic_register_set = 0x4B1,ui_dbg_enable_bptgrp = 0x4B2,ui_dbg_end = 0x4B3,};
struct ui_request_t_vtbl; /* ui_request_t_vtbl {bool (*run)(ui_request_t *__hidden this);void (*_del_ui_request_t)(ui_request_t *__hidden this);};*/
enum ISA_AVAILABILITY : unsigned __int32 {__ISA_AVAILABLE_X86 = 0x0,__ISA_AVAILABLE_SSE2 = 0x1,__ISA_AVAILABLE_SSE42 = 0x2,__ISA_AVAILABLE_AVX = 0x3,__ISA_AVAILABLE_ENFSTRG = 0x4,__ISA_AVAILABLE_AVX2 = 0x5,__ISA_AVAILABLE_AVX512 = 0x6,__ISA_AVAILABLE_ARMNT = 0x0,__ISA_AVAILABLE_NEON = 0x1,__ISA_AVAILABLE_NEON_ARM64 = 0x2,};
typedef int (*_CRT_REPORT_HOOK)(int, char *, int *);
struct action_handler_t {action_handler_t_vtbl *__vftable /*VFT*/;int flags;};
typedef void cliopt_handler_t(const char *, void *);
enum dbg_event_code_t : unsigned __int32 {DEC_NOTASK = 0xFFFFFFFE,DEC_ERROR = 0xFFFFFFFF,DEC_TIMEOUT = 0x0,};
enum debug_name_how_t : unsigned __int32 {DEBNAME_EXACT = 0x0,DEBNAME_LOWER = 0x1,DEBNAME_UPPER = 0x2,DEBNAME_NICE = 0x3,};
typedef unsigned __int8 register_class_t;
struct std___Init_locks {};
enum std___Tree_child : unsigned __int32 {_Right = 0x0,_Left = 0x1,_Unused = 0x2,};
struct std__hash_float_ {};
typedef double std__max_align_t;
struct std__minus_void_ {};
typedef void (*std__new_handler)(void);
enum tcc_place_type_t : unsigned __int32 {TCCPT_INVALID = 0x0,TCCPT_PLACE = 0x1,TCCPT_SIMPLELINE_PLACE = 0x2,TCCPT_IDAPLACE = 0x3,TCCPT_ENUMPLACE = 0x4,TCCPT_STRUCTPLACE = 0x5,};
struct text_sink_t_vtbl; /* text_sink_t_vtbl {int (*print)(text_sink_t *__hidden this, const char *str);};*/
enum argreg_policy_t : unsigned __int32 {ARGREGS_POLICY_UNDEFINED = 0x0,ARGREGS_GP_ONLY = 0x1,ARGREGS_INDEPENDENT = 0x2,ARGREGS_BY_SLOTS = 0x3,ARGREGS_FP_CONSUME_GP = 0x4,ARGREGS_MIPS_O32 = 0x5,};
struct edge_segs_vec_t;
struct expanded_area_t;
enum fc_block_type_t : unsigned __int32 {fcb_normal = 0x0,fcb_indjump = 0x1,fcb_ret = 0x2,fcb_cndret = 0x3,fcb_noret = 0x4,fcb_enoret = 0x5,fcb_extern = 0x6,fcb_error = 0x7,};
enum fpvalue_error_t : unsigned __int32 {REAL_ERROR_OK = 0x0,REAL_ERROR_FORMAT = 0xFFFFFFFF,REAL_ERROR_RANGE = 0xFFFFFFFE,REAL_ERROR_BADDATA = 0xFFFFFFFD,REAL_ERROR_FPOVER = 0x1,REAL_ERROR_BADSTR = 0x2,REAL_ERROR_ZERODIV = 0x3,REAL_ERROR_INTOVER = 0x4,};
struct graph_visitor_t {graph_visitor_t_vtbl *__vftable /*VFT*/;abstract_graph_t *g;};
enum setproc_level_t : unsigned __int32 {SETPROC_IDB = 0x0,SETPROC_LOADER = 0x1,SETPROC_LOADER_NON_FATAL = 0x2,SETPROC_USER = 0x3,};
enum src_item_kind_t : unsigned __int32 {SRCIT_NONE = 0x0,SRCIT_MODULE = 0x1,SRCIT_FUNC = 0x2,SRCIT_STMT = 0x3,SRCIT_EXPR = 0x4,SRCIT_STTVAR = 0x5,SRCIT_LOCVAR = 0x6,};
struct std__less_void_ {};
struct std__plus_void_ {};
typedef __int64 std__streamsize;
enum stock_type_id_t : unsigned __int32 {STI_PCHAR = 0x0,STI_PUCHAR = 0x1,STI_PCCHAR = 0x2,STI_PCUCHAR = 0x3,STI_PBYTE = 0x4,STI_PINT = 0x5,STI_PUINT = 0x6,STI_PVOID = 0x7,STI_PPVOID = 0x8,STI_PCVOID = 0x9,STI_ACHAR = 0xA,STI_AUCHAR = 0xB,STI_ACCHAR = 0xC,STI_ACUCHAR = 0xD,STI_FPURGING = 0xE,STI_FDELOP = 0xF,STI_MSGSEND = 0x10,STI_AEABI_LCMP = 0x11,STI_AEABI_ULCMP = 0x12,STI_DONT_USE = 0x13,STI_SIZE_T = 0x14,STI_SSIZE_T = 0x15,STI_AEABI_MEMCPY = 0x16,STI_AEABI_MEMSET = 0x17,STI_AEABI_MEMCLR = 0x18,STI_RTC_CHECK_2 = 0x19,STI_RTC_CHECK_4 = 0x1A,STI_RTC_CHECK_8 = 0x1B,STI_COMPLEX64 = 0x1C,STI_COMPLEX128 = 0x1D,STI_LAST = 0x1E,};
struct tinfo_visitor_t {tinfo_visitor_t_vtbl *__vftable /*VFT*/;int state;int level;};
struct __qsemaphore_t {};
enum action_state_t : unsigned __int32 {AST_ENABLE_ALWAYS = 0x0,AST_ENABLE_FOR_IDB = 0x1,AST_ENABLE_FOR_WIDGET = 0x2,AST_ENABLE = 0x3,AST_DISABLE_ALWAYS = 0x4,AST_DISABLE_FOR_IDB = 0x5,AST_DISABLE_FOR_WIDGET = 0x6,AST_DISABLE = 0x7,};
struct aloc_visitor_t {aloc_visitor_t_vtbl *__vftable /*VFT*/;};
struct dirtree_impl_t;
struct form_actions_t {form_actions_t_vtbl *__vftable /*VFT*/;};
enum fpvalue_kind_t : unsigned __int32 {FPV_BADARG = 0x0,FPV_NORM = 0x1,FPV_NAN = 0x2,FPV_PINF = 0x3,FPV_NINF = 0x4,};
struct hexplace_gen_t {hexplace_gen_t_vtbl *__vftable /*VFT*/;};
struct idc_resolver_t {idc_resolver_t_vtbl *__vftable /*VFT*/;};
enum navaddr_type_t : unsigned __int32 {nat_lib = 0x0,nat_fun = 0x1,nat_cod = 0x2,nat_dat = 0x3,nat_und = 0x4,nat_ext = 0x5,nat_err = 0x6,nat_gap = 0x7,nat_cur = 0x8,nat_auto = 0x9,nat_lum = 0xA,nat_hlo = 0xB,nat_last = 0xC,};
struct std___Num_base {};
struct std__less_int_ {};
struct std__nothrow_t {};
typedef __int64 std__nullptr_t;
typedef __int64 std__streamoff;
enum storage_type_t : unsigned __int32 {STT_CUR = 0xFFFFFFFF,STT_VA = 0x0,STT_MM = 0x1,STT_DBG = 0x2,};
typedef int twidget_type_t;
typedef unsigned __int16 uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned __int64 uint_least64_t;
enum access_type_t : unsigned __int8 {NO_ACCESS = 0x0,WRITE_ACCESS = 0x1,READ_ACCESS = 0x2,RW_ACCESS = 0x3,};
enum action_attr_t : unsigned __int32 {AA_NONE = 0x0,AA_LABEL = 0x1,AA_SHORTCUT = 0x2,AA_TOOLTIP = 0x3,AA_ICON = 0x4,AA_STATE = 0x5,AA_CHECKABLE = 0x6,AA_CHECKED = 0x7,AA_VISIBILITY = 0x8,};
struct action_desc_t {int cb;const char *name;const char *label;action_handler_t *handler;const void *owner;const char *shortcut;const char *tooltip;int icon;int flags;};
typedef int argloc_type_t;
enum bpt_loctype_t : unsigned __int32 {BPLT_ABS = 0x0,BPLT_REL = 0x1,BPLT_SYM = 0x2,BPLT_SRC = 0x3,};
enum choose_type_t : unsigned __int32 {chtype_generic = 0x0,chtype_idasgn = 0x1,chtype_entry = 0x2,chtype_name = 0x3,chtype_stkvar_xref = 0x4,chtype_xref = 0x5,chtype_enum = 0x6,chtype_enum_by_value = 0x7,chtype_func = 0x8,chtype_segm = 0x9,chtype_struc = 0xA,chtype_strpath = 0xB,chtype_idatil = 0xC,chtype_enum_by_value_and_size = 0xD,chtype_srcp = 0xE,};
enum demreq_type_t : unsigned __int32 {DQT_NPURGED_8 = 0xFFFFFFF8,DQT_NPURGED_4 = 0xFFFFFFFC,DQT_NPURGED_2 = 0xFFFFFFFE,DQT_COMPILER = 0x0,DQT_NAME_TYPE = 0x1,DQT_FULL = 0x2,};
typedef __int16 int_least16_t;
typedef int int_least32_t;
typedef __int64 int_least64_t;
typedef int layout_type_t;
enum linput_type_t : unsigned __int32 {LINPUT_NONE = 0x0,LINPUT_LOCAL = 0x1,LINPUT_RFILE = 0x2,LINPUT_PROCMEM = 0x3,LINPUT_GENERIC = 0x4,};
enum movbpt_code_t : unsigned __int32 {MOVBPT_OK = 0x0,MOVBPT_NOT_FOUND = 0x1,MOVBPT_DEST_BUSY = 0x2,MOVBPT_BAD_TYPE = 0x3,};
struct node_iterator {const gdl_graph_t *g;int i;};
struct qrefcnt_obj_t {qrefcnt_obj_t_vtbl *__vftable /*VFT*/;int refcnt;};
enum regval_type_t : unsigned __int32 {reg_unknown = 0x0,reg_sz = 0x1,reg_binary = 0x3,reg_dword = 0x4,};
enum resume_mode_t : unsigned __int32 {RESMOD_NONE = 0x0,RESMOD_INTO = 0x1,RESMOD_OVER = 0x2,RESMOD_OUT = 0x3,RESMOD_SRCINTO = 0x4,RESMOD_SRCOVER = 0x5,RESMOD_SRCOUT = 0x6,RESMOD_USER = 0x7,RESMOD_HANDLE = 0x8,RESMOD_MAX = 0x9,};
struct source_view_t;
struct std__ios_base;
enum struc_error_t : unsigned __int32 {STRUC_ERROR_MEMBER_OK = 0x0,STRUC_ERROR_MEMBER_NAME = 0xFFFFFFFF,STRUC_ERROR_MEMBER_OFFSET = 0xFFFFFFFE,STRUC_ERROR_MEMBER_SIZE = 0xFFFFFFFD,STRUC_ERROR_MEMBER_TINFO = 0xFFFFFFFC,STRUC_ERROR_MEMBER_STRUCT = 0xFFFFFFFB,STRUC_ERROR_MEMBER_UNIVAR = 0xFFFFFFFA,STRUC_ERROR_MEMBER_VARLAST = 0xFFFFFFF9,STRUC_ERROR_MEMBER_NESTED = 0xFFFFFFF8,};
enum tty_control_t : unsigned __int32 {TCT_UNKNOWN = 0x0,TCT_OWNER = 0x1,TCT_NOT_OWNER = 0x2,};
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned __int64 uint_fast64_t;
typedef unsigned __int8 uint_least8_t;
enum update_type_t : unsigned __int32 {UTP_ENUM = 0x0,UTP_STRUCT = 0x1,};
struct TPointDouble {double x;double y;};
union _float_const {unsigned __int16 _Word[4];float _Float;double _Double;long double _Long_double;};
union _ldouble_val {unsigned __int16 _Sh[4];long double _Val;};
enum dirtree_id_t : unsigned __int32 {DIRTREE_LOCAL_TYPES = 0x0,DIRTREE_STRUCTS = 0x1,DIRTREE_ENUMS = 0x2,DIRTREE_FUNCS = 0x3,DIRTREE_NAMES = 0x4,DIRTREE_IMPORTS = 0x5,DIRTREE_IDAPLACE_BOOKMARKS = 0x6,DIRTREE_STRUCTS_BOOKMARKS = 0x7,DIRTREE_ENUMS_BOOKMARKS = 0x8,DIRTREE_BPTS = 0x9,DIRTREE_END = 0xA,};
struct edge_infos_t;
struct edge_typer_t;
struct elf_loader_t;
enum frame_part_t : unsigned __int32 {FPC_ARGS = 0x0,FPC_RETADDR = 0x1,FPC_SAVREGS = 0x2,FPC_LVARS = 0x3,};
struct idc_object_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef __int64 int_fast64_t;
typedef char int_least8_t;
typedef int is_pattern_t(switch_info_t *, const insn_t *, procmod_t *);
enum lecvt_code_t : unsigned __int32 {LECVT_CANCELED = 0xFFFFFFFF,LECVT_ERROR = 0x0,LECVT_OK = 0x1,};
struct lock_segment {const segment_t *segm;};
struct merge_data_t;
enum ofile_type_t : unsigned __int32 {OFILE_MAP = 0x0,OFILE_EXE = 0x1,OFILE_IDC = 0x2,OFILE_LST = 0x3,OFILE_ASM = 0x4,OFILE_DIF = 0x5,};
typedef __qsemaphore_t *qsemaphore_t;
enum range_kind_t : unsigned __int32 {RANGE_KIND_UNKNOWN = 0x0,RANGE_KIND_FUNC = 0x1,RANGE_KIND_SEGMENT = 0x2,RANGE_KIND_HIDDEN_RANGE = 0x3,};
struct std___Ignore {};
struct std___Lockit {int _Locktype;};
struct std__tuple__ {};
struct til_bucket_t;
struct til_stream_t;
struct til_symbol_t {const char *name;const til_t *til;};
enum tinfo_code_t : unsigned __int32 {TERR_OK = 0x0,TERR_SAVE = 0xFFFFFFFF,TERR_SERIALIZE = 0xFFFFFFFE,TERR_WRONGNAME = 0xFFFFFFFD,TERR_BADSYNC = 0xFFFFFFFC,};
struct ui_request_t {ui_request_t_vtbl *__vftable /*VFT*/;};
typedef unsigned __int8 uint_fast8_t;
enum vme_button_t : unsigned __int32 {VME_UNKNOWN = 0x0,VME_LEFT_BUTTON = 0x1,VME_RIGHT_BUTTON = 0x2,VME_MID_BUTTON = 0x3,};
struct _CRT_DOUBLE {double x;};
struct _LONGDOUBLE {long double x;};
struct __qthread_t {};
typedef bool __vcrt_bool;
struct _diskfree_t {unsigned int total_clusters;unsigned int avail_clusters;unsigned int sectors_per_cluster;unsigned int bytes_per_sector;};
union _double_val {unsigned __int16 _Sh[4];double _Val;};
struct bookmarks_t {};
enum edge_type_t : unsigned __int32 {edge_error = 0x0,edge_tree = 0x1,edge_forward = 0x2,edge_back = 0x3,edge_cross = 0x4,edge_subgraph = 0x5,};
struct gdl_graph_t {gdl_graph_t_vtbl *__vftable /*VFT*/;};
enum hook_type_t : unsigned __int32 {HT_IDP = 0x0,HT_UI = 0x1,HT_DBG = 0x2,HT_IDB = 0x3,HT_DEV = 0x4,HT_VIEW = 0x5,HT_OUTPUT = 0x6,HT_GRAPH = 0x7,HT_IDD = 0x8,HT_LAST = 0x9,};
struct idc_class_t;
typedef char int_fast8_t;
enum mbox_kind_t : unsigned __int32 {mbox_internal = 0x0,mbox_info = 0x1,mbox_warning = 0x2,mbox_error = 0x3,mbox_nomem = 0x4,mbox_feedback = 0x5,mbox_readerror = 0x6,mbox_writeerror = 0x7,mbox_filestruct = 0x8,mbox_wait = 0x9,mbox_hide = 0xA,mbox_replace = 0xB,};
enum path_type_t : unsigned __int32 {PATH_TYPE_CMD = 0x0,PATH_TYPE_IDB = 0x1,PATH_TYPE_ID0 = 0x2,};
struct predicate_t {predicate_t_vtbl *__vftable /*VFT*/;};
struct std__locale;
struct text_sink_t {text_sink_t_vtbl *__vftable /*VFT*/;};
typedef int type_sign_t;
enum ucdr_kind_t : unsigned __int32 {UCDR_STRLIT = 0x1,UCDR_NAME = 0x2,UCDR_MANGLED = 0x4,UCDR_TYPE = 0x8,};
struct TPopupMenu;
struct _CRT_FLOAT {float f;};
typedef bool __crt_bool;
struct __qmutex_t {};
struct __qtimer_t {};
typedef __int32 __time32_t;
typedef __int64 __time64_t;
struct _exception {int type;char *name;double arg1;double arg2;double retval;};
union _float_val {unsigned __int16 _Sh[2];float _Val;};
struct dbg_info_t {plugin_info_t *pi;debugger_t *dbg;};
enum event_id_t : unsigned __int32 {NO_EVENT = 0x0,PROCESS_STARTED = 0x1,PROCESS_EXITED = 0x2,THREAD_STARTED = 0x4,THREAD_EXITED = 0x8,BREAKPOINT = 0x10,STEP = 0x20,EXCEPTION = 0x40,LIB_LOADED = 0x80,LIB_UNLOADED = 0x100,INFORMATION = 0x200,PROCESS_ATTACHED = 0x400,PROCESS_DETACHED = 0x800,PROCESS_SUSPENDED = 0x1000,TRACE_FULL = 0x2000,};
enum filetype_t : unsigned __int32 {f_EXE_old = 0x0,f_COM_old = 0x1,f_BIN = 0x2,f_DRV = 0x3,f_WIN = 0x4,f_HEX = 0x5,f_MEX = 0x6,f_LX = 0x7,f_LE = 0x8,f_NLM = 0x9,f_COFF = 0xA,f_PE = 0xB,f_OMF = 0xC,f_SREC = 0xD,f_ZIP = 0xE,f_OMFLIB = 0xF,f_AR = 0x10,f_LOADER = 0x11,f_ELF = 0x12,f_W32RUN = 0x13,f_AOUT = 0x14,f_PRC = 0x15,f_EXE = 0x16,f_COM = 0x17,f_AIXAR = 0x18,f_MACHO = 0x19,f_PSXOBJ = 0x1A,};
enum gtd_func_t : unsigned __int32 {GTD_CALC_ARGLOCS = 0x0,GTD_NO_ARGLOCS = 0x80,};
enum gts_code_t : unsigned __int32 {GTS_NESTED = 0x1,GTS_BASECLASS = 0x2,};
typedef int idastate_t;
struct interval_t {int x0;int x1;};
struct location_t;
enum nametype_t : unsigned __int32 {VNT_IDENT = 0x6,VNT_TYPE = 0x8,VNT_UDTMEM = 0x2,VNT_STRLIT = 0x1,VNT_VISIBLE = 0x2,};
struct proc_def_t;
struct reg_info_t {int reg;int size;};
enum smt_code_t : unsigned __int32 {SMT_BADARG = 0xFFFFFFFA,SMT_NOCOMPAT = 0xFFFFFFFB,SMT_WORSE = 0xFFFFFFFC,SMT_SIZE = 0xFFFFFFFD,SMT_ARRAY = 0xFFFFFFFE,SMT_OVERLAP = 0xFFFFFFFF,SMT_FAILED = 0x0,SMT_OK = 0x1,SMT_KEEP = 0x2,};
struct strarray_t {int code;const char *text;};
enum tev_type_t : unsigned __int32 {tev_none = 0x0,tev_insn = 0x1,tev_call = 0x2,tev_ret = 0x3,tev_bpt = 0x4,tev_mem = 0x5,tev_event = 0x6,tev_max = 0x7,};
typedef __crt_locale_pointers *_locale_t;
typedef int (*_onexit_t)(void);
typedef int bpttype_t;
struct destset_t;
struct dirtree_t {dirtree_impl_t *d;};
struct edgeset_t;
struct encoder_t {encoder_t_vtbl *__vftable /*VFT*/;};
enum gdecode_t : unsigned __int32 {GDE_ERROR = 0xFFFFFFFF,GDE_NO_EVENT = 0x0,GDE_ONE_EVENT = 0x1,GDE_MANY_EVENTS = 0x2,};
enum gtd_udt_t : unsigned __int32 {GTD_CALC_LAYOUT = 0x0,GTD_NO_LAYOUT = 0x80,GTD_DEL_BITFLDS = 0x40,};
struct hexview_t;
struct libfunc_t;
struct lock_func {const func_t *pfn;};
typedef _Mbstatet mbstate_t;
struct no_regs_t {};
typedef int printer_t(const char *, ...);
typedef __int64 ptrdiff_t;
typedef void *qhandle_t;
typedef __qthread_t *qthread_t;
struct twinpos_t {place_t *at;int x;};
struct type_info;
typedef unsigned __int64 uintmax_t;
typedef unsigned __int64 uintptr_t;
typedef unsigned __int64 ulonglong;
typedef __int16 wchar16_t;
struct _LDOUBLE {unsigned __int8 ld[10];};
struct _complex {double x;double y;};
typedef unsigned __int32 _fsize_t;
struct _lldiv_t {__int64 quot;__int64 rem;};
typedef double double_t;
typedef void *hexdsp_t(int, ...);
struct idadll_t {void *dllinfo[10];void *entry;};
struct idasgn_t;
enum inftag_t : unsigned __int32 {INF_VERSION = 0x0,INF_PROCNAME = 0x1,INF_GENFLAGS = 0x2,INF_LFLAGS = 0x3,INF_DATABASE_CHANGE_COUNT = 0x4,INF_FILETYPE = 0x5,INF_OSTYPE = 0x6,INF_APPTYPE = 0x7,INF_ASMTYPE = 0x8,INF_SPECSEGS = 0x9,INF_AF = 0xA,INF_AF2 = 0xB,INF_BASEADDR = 0xC,INF_START_SS = 0xD,INF_START_CS = 0xE,INF_START_IP = 0xF,INF_START_EA = 0x10,INF_START_SP = 0x11,INF_MAIN = 0x12,INF_MIN_EA = 0x13,INF_MAX_EA = 0x14,INF_OMIN_EA = 0x15,INF_OMAX_EA = 0x16,INF_LOWOFF = 0x17,INF_HIGHOFF = 0x18,INF_MAXREF = 0x19,INF_PRIVRANGE = 0x1A,INF_PRIVRANGE_START_EA = 0x1B,INF_PRIVRANGE_END_EA = 0x1C,INF_NETDELTA = 0x1D,INF_XREFNUM = 0x1E,INF_TYPE_XREFNUM = 0x1F,INF_REFCMTNUM = 0x20,INF_XREFFLAG = 0x21,INF_MAX_AUTONAME_LEN = 0x22,INF_NAMETYPE = 0x23,INF_SHORT_DEMNAMES = 0x24,INF_LONG_DEMNAMES = 0x25,INF_DEMNAMES = 0x26,INF_LISTNAMES = 0x27,INF_INDENT = 0x28,INF_CMT_INDENT = 0x29,INF_MARGIN = 0x2A,INF_LENXREF = 0x2B,INF_OUTFLAGS = 0x2C,INF_CMTFLG = 0x2D,INF_LIMITER = 0x2E,INF_BIN_PREFIX_SIZE = 0x2F,INF_PREFFLAG = 0x30,INF_STRLIT_FLAGS = 0x31,INF_STRLIT_BREAK = 0x32,INF_STRLIT_ZEROES = 0x33,INF_STRTYPE = 0x34,INF_STRLIT_PREF = 0x35,INF_STRLIT_SERNUM = 0x36,INF_DATATYPES = 0x37,INF_CC = 0x38,INF_CC_ID = 0x39,INF_CC_CM = 0x3A,INF_CC_SIZE_I = 0x3B,INF_CC_SIZE_B = 0x3C,INF_CC_SIZE_E = 0x3D,INF_CC_DEFALIGN = 0x3E,INF_CC_SIZE_S = 0x3F,INF_CC_SIZE_L = 0x40,INF_CC_SIZE_LL = 0x41,INF_CC_SIZE_LDBL = 0x42,INF_ABIBITS = 0x43,INF_APPCALL_OPTIONS = 0x44,INF_FILE_FORMAT_NAME = 0x45,INF_GROUPS = 0x46,INF_H_PATH = 0x47,INF_C_MACROS = 0x48,INF_INCLUDE = 0x49,INF_DUALOP_GRAPH = 0x4A,INF_DUALOP_TEXT = 0x4B,INF_MD5 = 0x4C,INF_IDA_VERSION = 0x4D,INF_STR_ENCODINGS = 0x4E,INF_DBG_BINPATHS = 0x4F,INF_SHA256 = 0x50,INF_ABINAME = 0x51,INF_ARCHIVE_PATH = 0x52,INF_PROBLEMS = 0x53,INF_SELECTORS = 0x54,INF_NOTEPAD = 0x55,INF_SRCDBG_PATHS = 0x56,INF_SRCDBG_UNDESIRED = 0x57,INF_INITIAL_VERSION = 0x58,INF_CTIME = 0x59,INF_ELAPSED = 0x5A,INF_NOPENS = 0x5B,INF_CRC32 = 0x5C,INF_IMAGEBASE = 0x5D,INF_IDSNODE = 0x5E,INF_FSIZE = 0x5F,INF_OUTFILEENC = 0x60,INF_INPUT_FILE_PATH = 0x61,INF_LAST = 0x62,};
typedef __int64 intmax_t;
typedef __int64 intptr_t;
struct linput_t;
struct llabel_t;
typedef __int64 longlong;
typedef __qmutex_t *qmutex_t;
typedef __qtimer_t *qtimer_t;
struct reader_t;
enum sclass_t : unsigned __int32 {sc_unk = 0x0,sc_type = 0x1,sc_ext = 0x2,sc_stat = 0x3,sc_reg = 0x4,sc_auto = 0x5,sc_friend = 0x6,sc_virt = 0x7,};
typedef unsigned __int16 uint16_t;
typedef unsigned int uint32_t;
typedef unsigned __int64 uint64_t;
typedef unsigned __int16 wctype_t;
struct TWidget;
struct _LDBL12 {unsigned __int8 ld12[12];};
typedef __int16 _Wint_t;
struct _ldiv_t {__int32 quot;__int32 rem;};
typedef int atype_t;
typedef __int32 clock_t;
struct dbctx_t;
enum dterr_t : unsigned __int32 {DTE_OK = 0x0,DTE_ALREADY_EXISTS = 0x1,DTE_NOT_FOUND = 0x2,DTE_NOT_DIRECTORY = 0x3,DTE_NOT_EMPTY = 0x4,DTE_BAD_PATH = 0x5,DTE_CANT_RENAME = 0x6,DTE_OWN_CHILD = 0x7,DTE_MAX_DIR = 0x8,DTE_LAST = 0x9,};
typedef int errno_t;
typedef int error_t;
typedef float float_t;
typedef __int16 int16_t;
typedef int int32_t;
typedef __int64 int64_t;
enum jtype_t : unsigned __int32 {JT_UNKNOWN = 0x0,JT_NUM = 0x1,JT_STR = 0x2,JT_OBJ = 0x3,JT_ARR = 0x4,JT_BOOL = 0x5,};
struct lexer_t;
struct minsn_t;
struct place_t {place_t_vtbl *__vftable /*VFT*/;int lnnum;};
struct point_t {int x;int y;};
typedef unsigned __int8 uint8_t;
typedef char *va_list;
typedef void *_HFILE;
typedef unsigned int _dev_t;
struct _div_t {int quot;int rem;};
typedef unsigned __int16 _ino_t;
struct _iobuf {void *_Placeholder;};
typedef __int32 _off_t;
enum beep_t : unsigned __int32 {beep_default = 0x0,};
struct cast_t {bool is_unsigned;int size;};
enum cref_t : unsigned __int32 {fl_U = 0x0,fl_CF = 0x10,fl_CN = 0x11,fl_JF = 0x12,fl_JN = 0x13,fl_USobsolete = 0x14,fl_F = 0x15,};
enum dref_t : unsigned __int32 {dr_U = 0x0,dr_O = 0x1,dr_W = 0x2,dr_R = 0x3,dr_T = 0x4,dr_I = 0x5,dr_S = 0x6,};
struct edge_t {int src;int dst;};
typedef __int64 fpos_t;
typedef int help_t;
typedef char int8_t;
struct rect_t {int left;int top;int right;int bottom;};
typedef unsigned __int64 size_t;
typedef int thid_t;
typedef unsigned __int16 uint16;
typedef unsigned int uint32;
typedef unsigned __int16 ushort;
typedef unsigned __int16 wint_t;
enum abs_t : unsigned __int32 {abs_unk = 0x0,abs_no = 0x1,abs_yes = 0x2,};
enum cb_id : unsigned __int32 {CB_INIT = 0xFFFFFFFF,CB_YES = 0xFFFFFFFE,CB_CLOSE = 0xFFFFFFFD,CB_INVISIBLE = 0xFFFFFFFC,CB_DESTROYING = 0xFFFFFFFB,};
enum drc_t : unsigned __int32 {DRC_EVENTS = 0x3,DRC_CRC = 0x2,DRC_OK = 0x1,DRC_NONE = 0x0,DRC_FAILED = 0xFFFFFFFF,DRC_NETERR = 0xFFFFFFFE,DRC_NOFILE = 0xFFFFFFFD,DRC_IDBSEG = 0xFFFFFFFC,DRC_NOPROC = 0xFFFFFFFB,DRC_NOCHG = 0xFFFFFFFA,DRC_ERROR = 0xFFFFFFF9,};
typedef __int16 int16;
typedef int int32;
typedef int pid_t;
typedef char sint8;
typedef unsigned __int8 uchar;
typedef unsigned __int8 uint8;
typedef char int8;
typedef unsigned int uint;
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;};
typedef struct std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_compare std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____value_compare;
typedef std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___key_type std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____key_type;
typedef std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__ std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Alnode;
typedef std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__ std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___allocator_type;
typedef std__less_unsigned_long_long_ std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___key_compare;
typedef std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______difference_type;
typedef struct std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_compare std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____value_compare;
typedef std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______reference;
typedef std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______difference_type;
typedef std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__ std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Alnode;
typedef struct std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_compare std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____value_compare;
typedef std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______reference;
typedef std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___ std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___allocator_type;
typedef std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___key_type std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____key_type;
typedef std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__ std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Alnode;
typedef std__less__qstring_char__ std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___key_compare;
typedef std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long__ std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___allocator_type;
typedef std__less_unsigned_long_long_ std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___key_compare;
typedef std__pair_const_unsigned_long_long__unsigned_long_long_ std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_type;
typedef std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________difference_type;
typedef std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______difference_type;
typedef std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________reference;
typedef std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________difference_type;
typedef std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______reference;
typedef std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______difference_type;
typedef std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________reference;
typedef size_t std___Default_allocator_traits_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____size_type;
typedef std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______reference;
struct std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___P_ {std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_ *_Parent;std___Tree_child _Child;};
typedef std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______difference_type;
typedef std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__ std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____Nodeptr;
typedef std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______reference;
typedef std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______difference_type;
typedef size_t std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____size_type;
typedef std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______reference;
typedef struct std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_compare std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____value_compare;
typedef size_t std___Default_allocator_traits_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______size_type;
typedef std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___key_type std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____key_type;
typedef std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____ std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______difference_type;
typedef std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____ std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______difference_type;
typedef size_t std___Default_allocator_traits_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long_____size_type;
typedef std__allocator_std___Tree_node_std__pair_const_int__int___void__P__ std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Alnode;
typedef std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____ std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______difference_type;
typedef std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char____ std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______difference_type;
typedef std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____ std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______difference_type;
typedef std__allocator_std__pair_const_int__int__ std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___allocator_type;
typedef std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____ std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______reference;
typedef std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____ std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______reference;
typedef std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char16_t____ std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______difference_type;
typedef std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char32_t____ std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______difference_type;
typedef std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____ std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______reference;
typedef std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_wchar_t____ std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______difference_type;
typedef std__less_int_ std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___key_compare;
typedef std__pair_const_int__int_ std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_type;
typedef std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char____ std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______reference;
typedef std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char____ std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______difference_type;
typedef std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____ std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______reference;
struct std___Tree_id_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___P_ {std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_ *_Parent;std___Tree_child _Child;};
typedef std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char16_t____ std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______reference;
typedef std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char32_t____ std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______reference;
typedef std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_wchar_t____ std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______reference;
typedef std__less_unsigned_long_long_ std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___key_compare;
struct std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___P_ {std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_ *_Parent;std___Tree_child _Child;};
typedef std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char____ std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______reference;
typedef std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__ std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____Nodeptr;
typedef std__pair_const_unsigned_long_long__unsigned_long_long_ std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___value_type;
typedef size_t std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____size_type;
typedef std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__ std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____Nodeptr;
typedef std___Tset_traits_int__std__less_int___std__allocator_int___false___value_type std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____value_type;
typedef std___Tset_traits_int__std__less_int___std__allocator_int___false___key_type std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____key_type;
typedef std__pair_const_unsigned_long_long__unsigned_long_long_ std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____value_type;
typedef std__allocator_std___Tree_node_int__void__P__ std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Alnode;
typedef bool (**qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R____const_iterator)(syntax_highlight_style *, const _qstring_char_ *);
typedef size_t std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____size_type;
typedef size_t std___Default_allocator_traits_std__allocator_std__pair_const_int__int_____size_type;
typedef std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____value_type *std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____pointer;
typedef std__allocator_int_ std___Tset_traits_int__std__less_int___std__allocator_int___false___allocator_type;
typedef __int64 (**qvector_long_long___P__syntax_highlight_style__P__const_char__P____const_iterator)(syntax_highlight_style *, const char *);
typedef bool (**qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R____iterator)(syntax_highlight_style *, const _qstring_char_ *);
typedef std__less_int_ std___Tset_traits_int__std__less_int___std__allocator_int___false___key_compare;
typedef __int64 (**qvector_long_long___P__syntax_highlight_style__P__const_char__P____iterator)(syntax_highlight_style *, const char *);
struct std___Tree_id_std___Tree_node_std__pair_const_int__int___void__P___P_ {std___Tree_node_std__pair_const_int__int___void__P_ *_Parent;std___Tree_child _Child;};
typedef size_t std___Default_allocator_traits_std__allocator_char16_t____size_type;
typedef size_t std___Default_allocator_traits_std__allocator_char32_t____size_type;
typedef size_t std___Default_allocator_traits_std__allocator_wchar_t____size_type;
typedef std__less__qstring_char__ std__map__qstring_char___qrefcnt_t_refcnted_regex_t____key_compare;
typedef qrefcnt_t_refcnted_regex_t_ std__map__qstring_char___qrefcnt_t_refcnted_regex_t____mapped_type;
typedef size_t std___Default_allocator_traits_std__allocator_char____size_type;
typedef std__pair_const_int__int_ std___Tree_node_std__pair_const_int__int___void__P___value_type;
typedef size_t std___Default_allocator_traits_std__allocator_int____size_type;
typedef std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_int__int___void__P__ std___Tree_node_std__pair_const_int__int___void__P____Nodeptr;
typedef std__less_unsigned_long_long_ std__map_unsigned_long_long__unsigned_long_long___key_compare;
typedef std___Simple_types_char16_t___value_type std___String_val_std___Simple_types_char16_t____value_type;
typedef std___Simple_types_char32_t___value_type std___String_val_std___Simple_types_char32_t____value_type;
typedef std__pair_const_int__int_ std___Simple_types_std__pair_const_int__int____value_type;
typedef std___Simple_types_wchar_t___value_type std___String_val_std___Simple_types_wchar_t____value_type;
typedef size_t std___Simple_types_std__pair_const_int__int____size_type;
typedef std___Simple_types_int___value_type std___Tree_val_std___Tree_simple_types_int____value_type;
typedef std___Simple_types_std__pair_const_int__int____value_type *std___Simple_types_std__pair_const_int__int____pointer;
typedef std___Simple_types_char___value_type std___String_val_std___Simple_types_char____value_type;
union typedef_type_data_t___F773DD8B4C420A056648FD7EB1349F55 {const char *name;uint32 ordinal;};
struct qvector_ida_syntax_highlighter_t__keywords_style_t_ {ida_syntax_highlighter_t__keywords_style_t *array;size_t n;size_t alloc;};
struct qvector_ida_syntax_highlighter_t__plain_char_ptr_t_ {ida_syntax_highlighter_t__plain_char_ptr_t *array;size_t n;size_t alloc;};
struct std___Tree_id_std___Tree_node_int__void__P___P_ {std___Tree_node_int__void__P_ *_Parent;std___Tree_child _Child;};
struct qvector_ida_syntax_highlighter_t__multicmt_t_ {ida_syntax_highlighter_t__multicmt_t *array;size_t n;size_t alloc;};
typedef ptrdiff_t std___Simple_types_char16_t___difference_type;
typedef ptrdiff_t std___Simple_types_char32_t___difference_type;
typedef ptrdiff_t std___Simple_types_wchar_t___difference_type;
typedef const std__basic_string_char16_t___value_type *std__basic_string_char16_t___const_reference;
typedef const std__basic_string_char32_t___value_type *std__basic_string_char32_t___const_reference;
typedef const std___Simple_types_char16_t___value_type *std___Simple_types_char16_t___const_pointer;
typedef const std___Simple_types_char32_t___value_type *std___Simple_types_char32_t___const_pointer;
typedef std__allocator_char16_t_ std__basic_string_char16_t___allocator_type;
typedef std__allocator_char32_t_ std__basic_string_char32_t___allocator_type;
typedef const std__basic_string_wchar_t___value_type *std__basic_string_wchar_t___const_reference;
typedef const std___Simple_types_wchar_t___value_type *std___Simple_types_wchar_t___const_pointer;
typedef std__allocator_wchar_t_ std__basic_string_wchar_t___allocator_type;
struct qvector_line_rendering_output_entry_t__P_ {line_rendering_output_entry_t **array;size_t n;size_t alloc;};
typedef ptrdiff_t std___Simple_types_char___difference_type;
struct qiterator_qrefcnt_t_source_file_t___vtbl; /* qiterator_qrefcnt_t_source_file_t___vtbl {void (*release)(qrefcnt_obj_t *__hidden this);bool (*first)(qiterator_qrefcnt_t_source_file_t__ *__hidden this);bool (*next)(qiterator_qrefcnt_t_source_file_t__ *__hidden this);qrefcnt_t_source_file_t_ (*operator*)(qiterator_qrefcnt_t_source_file_t__ *__hidden this);qrefcnt_t_source_file_t_ (*get)(qiterator_qrefcnt_t_source_file_t__ *__hidden this);};*/
struct qiterator_qrefcnt_t_source_item_t___vtbl; /* qiterator_qrefcnt_t_source_item_t___vtbl {void (*release)(qrefcnt_obj_t *__hidden this);bool (*first)(qiterator_qrefcnt_t_source_item_t__ *__hidden this);bool (*next)(qiterator_qrefcnt_t_source_item_t__ *__hidden this);qrefcnt_t_source_item_t_ (*operator*)(qiterator_qrefcnt_t_source_item_t__ *__hidden this);qrefcnt_t_source_item_t_ (*get)(qiterator_qrefcnt_t_source_item_t__ *__hidden this);};*/
typedef const std__basic_string_char___value_type *std__basic_string_char___const_reference;
typedef qvector_ida_syntax_highlighter_t__multicmt_t_ ida_syntax_highlighter_t__multicmtvec_t;
struct input_event_t__input_event_mouse_data_t {int x;int y;vme_button_t button;};
union op_t___9FE5DDDE6246481B3EE86C7EEB25DDF5 {uint16 reg;uint16 phrase;};
struct std___Floating_type_traits_long_double_ : std___Floating_type_traits_double_ {};
typedef size_t std___Simple_types_char16_t___size_type;
typedef size_t std___Simple_types_char32_t___size_type;
typedef const std___Simple_types_char___value_type *std___Simple_types_char___const_pointer;
typedef std___Rebind_pointer_t_void__P__std___Tree_node_int__void__P__ std___Tree_node_int__void__P____Nodeptr;
typedef std__allocator_char_ std__basic_string_char___allocator_type;
typedef movbpt_code_t *qvector_movbpt_code_t___const_iterator;
typedef const std___Simple_types_int___value_type *std___Simple_types_int___const_pointer;
typedef size_t std___Simple_types_wchar_t___size_type;
typedef std__basic_string_char16_t___value_type *std__basic_string_char16_t___reference;
typedef std___Default_allocator_traits_std__allocator_char16_t____size_type std__basic_string_char16_t___size_type;
typedef std__basic_string_char32_t___value_type *std__basic_string_char32_t___reference;
typedef std___Default_allocator_traits_std__allocator_char32_t____size_type std__basic_string_char32_t___size_type;
struct qvector_qvector_const_twinline_t__P__ {qvector_const_twinline_t__P_ *array;size_t n;size_t alloc;};
typedef std___Simple_types_char16_t___value_type *std___Simple_types_char16_t___pointer;
typedef std___Simple_types_char32_t___value_type *std___Simple_types_char32_t___pointer;
typedef std__basic_string_wchar_t___value_type *std__basic_string_wchar_t___reference;
typedef std___Default_allocator_traits_std__allocator_wchar_t____size_type std__basic_string_wchar_t___size_type;
typedef qvector_ida_syntax_highlighter_t__keywords_style_t_ ida_syntax_highlighter_t__keywords_t;
typedef qvector_line_rendering_output_entry_t__P_ line_rendering_output_entries_refs_t;
typedef std___Simple_types_wchar_t___value_type *std___Simple_types_wchar_t___pointer;
struct qiterator_qrefcnt_t_source_file_t__ : qrefcnt_obj_t {};
struct qiterator_qrefcnt_t_source_item_t__ : qrefcnt_obj_t {};
struct std___Narrow_char_traits_char__int_ : std___Char_traits_char__int_ {};
typedef size_t std___Simple_types_char___size_type;
typedef size_t std___Simple_types_int___size_type;
struct std___WChar_traits_unsigned_short_ : std___Char_traits_unsigned_short__unsigned_short_ {};
typedef std__allocator_char16_t_ std__basic_string_char16_t____Alty;
typedef std__allocator_char32_t_ std__basic_string_char32_t____Alty;
typedef std__basic_string_char___value_type *std__basic_string_char___reference;
typedef std___Default_allocator_traits_std__allocator_char____size_type std__basic_string_char___size_type;
struct _0B605D7B00AC5C12C153272CF5BD15AF {uint16 low;uint16 high;};
typedef error_t _486A9EF9057A4F79C352527BA63EDFD3(idc_value_t *, idc_value_t *);
typedef int _5199E2C0DF2CA3E7E8DCA56464B8E928(uint32, const tinfo_t *, void *);
struct _C21FB2E1BAA97F44BFD298211C4C916B {bool (*ptr)(void);size_t adj;};
struct qvector_qrefcnt_t_source_item_t__ {qrefcnt_t_source_item_t_ *array;size_t n;size_t alloc;};
typedef std___Simple_types_char___value_type *std___Simple_types_char___pointer;
typedef std__allocator_wchar_t_ std__basic_string_wchar_t____Alty;
struct qvector__qstring_unsigned_char__ {_qstring_unsigned_char_ *array;size_t n;size_t alloc;};
typedef movbpt_code_t *qvector_movbpt_code_t___iterator;
struct std__char_traits_unsigned_short_ : std___WChar_traits_unsigned_short_ {};
struct qvector_qvector_const_char__P__ {qvector_const_char__P_ *array;size_t n;size_t alloc;};
typedef std__less_int_ std__map_int__int___key_compare;
typedef std__allocator_char_ std__basic_string_char____Alty;
typedef _C21FB2E1BAA97F44BFD298211C4C916B jump_pattern_t__check_insn_t;
struct qvector_const_rangeset_t__P_ {const rangeset_t **array;size_t n;size_t alloc;};
struct qvector_const_twinline_t__P_ {const twinline_t **array;size_t n;size_t alloc;};
struct std___WChar_traits_char16_t_ : std___Char_traits_char16_t__unsigned_short_ {};
struct qvector_qvector_long_long__ {qvector_long_long_ *array;size_t n;size_t alloc;};
struct qvector_unsigned_long_long_ {unsigned __int64 *array;size_t n;size_t alloc;};
struct std___WChar_traits_wchar_t_ : std___Char_traits_wchar_t__unsigned_short_ {};
typedef void (*_invalid_parameter_handler)(const __int16 *, const __int16 *, const __int16 *, unsigned int, uintptr_t);
struct qvector__qstring_wchar_t__ {_qstring_wchar_t_ *array;size_t n;size_t alloc;};
struct qvector_call_stack_info_t_ {call_stack_info_t *array;size_t n;size_t alloc;};
struct qvector_compiled_binpat_t_ {compiled_binpat_t *array;size_t n;size_t alloc;};
struct qvector_update_bpt_info_t_ {update_bpt_info_t *array;size_t n;size_t alloc;};
typedef qvector_range_t___const_iterator rangeset_t__const_iterator;
struct std__char_traits_char16_t_ : std___WChar_traits_char16_t_ {};
struct std__char_traits_char32_t_ : std___Char_traits_char32_t__unsigned_int_ {};
typedef std__less_int_ std__set_int___key_compare;
struct action_ctx_base_cur_sel_t {twinpos_t from;twinpos_t to;};
struct qvector_dirtree_cursor_t_ {dirtree_cursor_t *array;size_t n;size_t alloc;};
struct qvector_exception_info_t_ {exception_info_t *array;size_t n;size_t alloc;};
struct qvector_scattered_segm_t_ {scattered_segm_t *array;size_t n;size_t alloc;};
struct qvector_segm_move_info_t_ {segm_move_info_t *array;size_t n;size_t alloc;};
struct qvector_selection_item_t_ {selection_item_t *array;size_t n;size_t alloc;};
struct qvector_xreflist_entry_t_ {xreflist_entry_t *array;size_t n;size_t alloc;};
struct std__char_traits_wchar_t_ : std___WChar_traits_wchar_t_ {};
struct std__forward_iterator_tag : std__input_iterator_tag {};
struct qvector_channel_redir_t_ {channel_redir_t *array;size_t n;size_t alloc;};
struct qvector_lochist_entry_t_ {lochist_entry_t *array;size_t n;size_t alloc;};
struct qvector_register_info_t_ {register_info_t *array;size_t n;size_t alloc;};
struct qvector_tev_reg_value_t_ {tev_reg_value_t *array;size_t n;size_t alloc;};
struct qvector__qstring_char__ {_qstring_char_ *array;size_t n;size_t alloc;};
struct qvector_const_bpt_t__P_ {const bpt_t **array;size_t n;size_t alloc;};
struct qvector_group_crinfo_t_ {group_crinfo_t *array;size_t n;size_t alloc;};
struct qvector_process_info_t_ {process_info_t *array;size_t n;size_t alloc;};
struct qvector_qbasic_block_t_ {qbasic_block_t *array;size_t n;size_t alloc;};
struct qvector_refinfo_desc_t_ {refinfo_desc_t *array;size_t n;size_t alloc;};
struct qvector_tev_info_reg_t_ {tev_info_reg_t *array;size_t n;size_t alloc;};
struct custom_data_type_ids_t {int16 dtid;int16 fids[8];};
struct qvector_const_char__P_ {const char **array;size_t n;size_t alloc;};
struct qvector_debug_event_t_ {debug_event_t *array;size_t n;size_t alloc;};
struct qvector_enum_member_t_ {enum_member_t *array;size_t n;size_t alloc;};
struct qvector_memory_info_t_ {memory_info_t *array;size_t n;size_t alloc;};
struct qvector_memreg_info_t_ {memreg_info_t *array;size_t n;size_t alloc;};
struct qvector_movbpt_info_t_ {movbpt_info_t *array;size_t n;size_t alloc;};
struct qvector_snapshot_t__P_ {snapshot_t **array;size_t n;size_t alloc;};
struct qvector_sync_source_t_ {sync_source_t *array;size_t n;size_t alloc;};
struct qvector_thread_name_t_ {thread_name_t *array;size_t n;size_t alloc;};
struct qvector_unsigned_char_ {unsigned __int8 *array;size_t n;size_t alloc;};
typedef renderer_info_pos_t renderer_info_t__pos_t;
struct std__char_traits_char_ : std___Narrow_char_traits_char__int_ {};
typedef qiterator_qrefcnt_t_source_file_t__ _source_file_iterator;
typedef qiterator_qrefcnt_t_source_item_t__ _source_item_iterator;
typedef qvector_compiled_binpat_t_ compiled_binpat_vec_t;
struct memory_deserializer_t {const uchar *ptr;const uchar *end;};
struct qvector_cfgopt_set_t_ {cfgopt_set_t *array;size_t n;size_t alloc;};
struct qvector_extlang_t__P_ {extlang_t **array;size_t n;size_t alloc;};
struct qvector_fixup_info_t_ {fixup_info_t *array;size_t n;size_t alloc;};
struct qvector_idc_global_t_ {idc_global_t *array;size_t n;size_t alloc;};
struct qvector_ioport_bit_t_ {ioport_bit_t *array;size_t n;size_t alloc;};
struct qvector_qvector_int__ {qvector_int_ *array;size_t n;size_t alloc;};
struct qvector_reg_access_t_ {reg_access_t *array;size_t n;size_t alloc;};
struct qvector_simpleline_t_ {simpleline_t *array;size_t n;size_t alloc;};
struct qvector_udt_member_t_ {udt_member_t *array;size_t n;size_t alloc;};
struct qvector_unsigned_int_ {unsigned int *array;size_t n;size_t alloc;};
typedef qvector_qvector_const_twinline_t__P__ sections_lines_refs_t;
struct std__nested_exception {std__nested_exception_vtbl *__vftable /*VFT*/;std__exception_ptr _Exc;};
struct bitfield_type_data_t {uchar nbytes;uchar width;bool is_unsigned;};
typedef qvector_dirtree_cursor_t_ dirtree_cursor_vec_t;
struct graph_visitor_t_vtbl; /* graph_visitor_t_vtbl {int (*visit_node)(graph_visitor_t *__hidden this, int n, rect_t *r);int (*visit_edge)(graph_visitor_t *__hidden this, edge_t e, edge_info_t *ei);};*/
struct qvector_simd_info_t_ {simd_info_t *array;size_t n;size_t alloc;};
struct qvector_type_attr_t_ {type_attr_t *array;size_t n;size_t alloc;};
typedef qvector_range_t___iterator rangeset_t__iterator;
typedef qvector_const_twinline_t__P_ section_lines_refs_t;
typedef qvector_segm_move_info_t_ segm_move_info_vec_t;
typedef qrefcnt_t_qiterator_qrefcnt_t_source_file_t___ source_file_iterator;
typedef qrefcnt_t_qiterator_qrefcnt_t_source_item_t___ source_item_iterator;
typedef std___Container_base0 std___Container_base;
struct std___Num_float_base : std___Num_base {};
typedef size_t argloc_t__biggest_t;
struct cancellable_graph_t : gdl_graph_t {bool cancelled;char padding[3];};
struct dirtree_selection_t : dirtree_cursor_vec_t {};
struct edge_layout_point_t {int pidx;edge_t e;};
typedef qvector_lochist_entry_t_ lochist_entry_vec_t;
struct macro_constructor_t {macro_constructor_t_vtbl *__vftable /*VFT*/;size_t reserved;};
struct qvector_bptaddrs_t_ {bptaddrs_t *array;size_t n;size_t alloc;};
struct qvector_direntry_t_ {direntry_t *array;size_t n;size_t alloc;};
struct qvector_idp_desc_t_ {idp_desc_t *array;size_t n;size_t alloc;};
struct qvector_idp_name_t_ {idp_name_t *array;size_t n;size_t alloc;};
struct qvector_node_set_t_ {node_set_t *array;size_t n;size_t alloc;};
struct qvector_rangeset_t_ {rangeset_t *array;size_t n;size_t alloc;};
struct qvector_reg_info_t_ {reg_info_t *array;size_t n;size_t alloc;};
struct qvector_row_info_t_ {row_info_t *array;size_t n;size_t alloc;};
struct qvector_tev_info_t_ {tev_info_t *array;size_t n;size_t alloc;};
struct qvector_twinline_t_ {twinline_t *array;size_t n;size_t alloc;};
typedef qvector_register_info_t_ register_info_vec_t;
typedef std___Iterator_base0 std___Iterator_base;
typedef struct std__basic_istringstream_wchar_t_ std__wistringstream;
typedef struct std__basic_ostringstream_wchar_t_ std__wostringstream;
struct typedef_type_data_t {const til_t *til;union {const char *name;uint32 ordinal;};bool is_ordref;bool resolve;};
typedef qvector_rangeset_t_ array_of_rangesets;
struct array_parameters_t {int32 flags;int32 lineitems;int32 alignment;};
typedef qvector_const_bpt_t__P_ bpt_constptr_vec_t;
struct qvector_argpart_t_ {argpart_t *array;size_t n;size_t alloc;};
struct qvector_ea_name_t_ {ea_name_t *array;size_t n;size_t alloc;};
struct qvector_funcarg_t_ {funcarg_t *array;size_t n;size_t alloc;};
struct qvector_long_long_ {__int64 *array;size_t n;size_t alloc;};
struct qvector_modinfo_t_ {modinfo_t *array;size_t n;size_t alloc;};
typedef qvector_const_rangeset_t__P_ rangeset_crefvec_t;
typedef qvector_refinfo_desc_t_ refinfo_desc_vec_t;
struct srcinfo_provider_t {srcinfo_provider_t_vtbl *__vftable /*VFT*/;size_t cb;int flags;const char *name;const char *display_name;};
struct std___Num_int_base : std___Num_base {};
typedef struct std__basic_istringstream_char_ std__istringstream;
typedef struct std__basic_ostringstream_char_ std__ostringstream;
typedef struct std__basic_stringstream_wchar_t_ std__wstringstream;
struct user_graph_place_t : place_t {int node;};
typedef input_event_modifiers_t view_event_state_t;
struct _wfinddata32i64_t {unsigned int attrib;__time32_t time_create;__time32_t time_access;__time32_t time_write;__int64 size;__int16 name[260];};
struct argtinfo_helper_t {argtinfo_helper_t_vtbl *__vftable /*VFT*/;size_t reserved;};
typedef qvector_qvector_int__ array_of_intvec_t;
typedef qvector_enum_member_t_ enum_member_vec_t;
struct qvector_argloc_t_ {argloc_t *array;size_t n;size_t alloc;};
struct qvector_bpt_t__P_ {bpt_t **array;size_t n;size_t alloc;};
struct qvector_cliopt_t_ {cliopt_t *array;size_t n;size_t alloc;};
struct qvector_intmap_t_ {intmap_t *array;size_t n;size_t alloc;};
struct qvector_ioport_t_ {ioport_t *array;size_t n;size_t alloc;};
struct qvector_jvalue_t_ {jvalue_t *array;size_t n;size_t alloc;};
struct qvector_lowcnd_t_ {lowcnd_t *array;size_t n;size_t alloc;};
struct qvector_regobj_t_ {regobj_t *array;size_t n;size_t alloc;};
struct qvector_regval_t_ {regval_t *array;size_t n;size_t alloc;};
struct qvector_stkpnt_t_ {stkpnt_t *array;size_t n;size_t alloc;};
struct qvector_tryblk_t_ {tryblk_t *array;size_t n;size_t alloc;};
struct qvector_valstr_t_ {valstr_t *array;size_t n;size_t alloc;};
typedef qvector_scattered_segm_t_ scattered_image_t;
struct segm_move_infos_t : segm_move_info_vec_t {};
typedef struct std__basic_stringstream_char_ std__stringstream;
typedef qvector_sync_source_t_ sync_source_vec_t;
typedef qvector_thread_name_t_ thread_name_vec_t;
typedef void (*_CRT_DUMP_CLIENT)(void *, size_t);
struct _finddata32i64_t {unsigned int attrib;__time32_t time_create;__time32_t time_access;__time32_t time_write;__int64 size;char name[260];};
struct cfgopt_set_vec_t : qvector_cfgopt_set_t_ {};
typedef qvector_channel_redir_t_ channel_redirs_t;
struct event_listener_t {event_listener_t_vtbl *__vftable /*VFT*/;size_t listener_flags;};
typedef qrefcnt_t_extlang_t_ extlang_object_t;
typedef qvector_row_info_t_ graph_row_info_t;
typedef qvector_group_crinfo_t_ groups_crinfos_t;
typedef janitor_t_linput_t__P_ linput_janitor_t;
struct qvector_catch_t_ {catch_t *array;size_t n;size_t alloc;};
struct qvector_point_t_ {point_t *array;size_t n;size_t alloc;};
struct qvector_range_t_ {range_t *array;size_t n;size_t alloc;};
struct qvector_tinfo_t_ {tinfo_t *array;size_t n;size_t alloc;};
struct qvector_token_t_ {token_t *array;size_t n;size_t alloc;};
struct qvector_wchar_t_ {__int16 *array;size_t n;size_t alloc;};
typedef qvector_reg_access_t_ reg_access_vec_t;
struct selection_item_t {bool is_node;int node;edge_layout_point_t elp;};
typedef qvector_tev_reg_value_t_ tev_reg_values_t;
typedef qvector_tev_info_reg_t_ tevinforeg_vec_t;
typedef qvector_update_bpt_info_t_ update_bpt_vec_t;
typedef int (*_CRT_ALLOC_HOOK)(int, void *, size_t, int, __int32, const unsigned __int8 *, int);
typedef error_t lx_parse_cast_t(lexer_t *, cast_t *, token_t *);
struct qmutex_locker_t {qmutex_t lock;};
struct qstack_token_t_ : qvector_token_t_ {};
struct qvector_edge_t_ {edge_t *array;size_t n;size_t alloc;};
struct qvector_rect_t_ {rect_t *array;size_t n;size_t alloc;};
typedef qvector_range_t_ rangevec_base_t;
typedef qvector_simd_info_t_ simd_info_vec_t;
typedef qrefcnt_t_source_file_t_ source_file_ptr;
typedef qrefcnt_t_source_item_t_ source_item_ptr;
struct std___Maximum__ : std__integral_constant_unsigned_long_long__0_ {};
typedef std__integral_constant_bool__false_ std__false_type;
typedef struct std__basic_streambuf_wchar_t_ std__wstreambuf;
typedef struct std__basic_stringbuf_wchar_t_ std__wstringbuf;
struct __finddata64_t {unsigned int attrib;__time64_t time_create;__time64_t time_access;__time64_t time_write;__int64 size;char name[260];};
struct _wfinddata64_t {unsigned int attrib;__time64_t time_create;__time64_t time_access;__time64_t time_write;__int64 size;__int16 name[260];};
typedef qvector_direntry_t_ direntry_vec_t;
struct edge_segment_t {edge_t e;int nseg;int x0;int x1;};
struct exec_request_t {exec_request_t_vtbl *__vftable /*VFT*/;int code;qsemaphore_t sem;};
typedef janitor_t__iobuf__P_ file_janitor_t;
typedef struct TWidget graph_viewer_t;
struct locchange_md_t {uchar cb;uchar r;uchar f;uchar reserved;};
typedef qvector_memreg_info_t_ memreg_infos_t;
typedef qvector_movbpt_info_t_ movbpt_infos_t;
struct plugmod_t_vtbl; /* plugmod_t_vtbl {bool (*run)(plugmod_t *__hidden this, size_t arg);void (*_del_plugmod_t)(plugmod_t *__hidden this);};*/
typedef qvector_process_info_t_ procinfo_vec_t;
struct qvector_bpt_t_ {bpt_t *array;size_t n;size_t alloc;};
struct qvector_kvp_t_ {kvp_t *array;size_t n;size_t alloc;};
struct refinfo_desc_t {uint32 type;const char *name;const char *desc;};
struct reg_accesses_t : reg_access_vec_t {};
typedef qvector_qrefcnt_t_source_item_t__ source_items_t;
struct std__exception {std__exception_vtbl *__vftable /*VFT*/;__std_exception_data _Data;};
typedef struct std__basic_streambuf_char_ std__streambuf;
typedef struct std__basic_stringbuf_char_ std__stringbuf;
typedef std__integral_constant_bool__true_ std__true_type;
typedef struct std__basic_ifstream_wchar_t_ std__wifstream;
typedef struct std__basic_iostream_wchar_t_ std__wiostream;
typedef struct std__basic_ofstream_wchar_t_ std__wofstream;
struct synced_group_t : sync_source_vec_t {};
struct udtmembervec_t : qvector_udt_member_t_ {};
typedef qvector_ea_name_t_ ea_name_vec_t;
struct ext_idcfunc_t {const char *name;error_t (*fptr)(idc_value_t *, idc_value_t *);const char *args;const idc_value_t *defvals;int ndefvals;int flags;};
typedef qvector_ioport_bit_t_ ioport_bits_t;
typedef qvector_memory_info_t_ meminfo_vec_t;
typedef uchar problist_id_t;
struct qvector_bool_ {bool *array;size_t n;size_t alloc;};
struct qvector_char_ {char *array;size_t n;size_t alloc;};
struct qvector_op_t_ {op_t *array;size_t n;size_t alloc;};
struct source_file_t : qrefcnt_obj_t {};
struct source_item_t : qrefcnt_obj_t {};
typedef std___Unused_parameter std___Any_tag;
typedef struct std__basic_ifstream_char_ std__ifstream;
typedef struct std__basic_iostream_char_ std__iostream;
typedef struct std__basic_ofstream_char_ std__ofstream;
typedef struct std__basic_filebuf_wchar_t_ std__wfilebuf;
typedef struct std__basic_fstream_wchar_t_ std__wfstream;
typedef struct std__basic_istream_wchar_t_ std__wistream;
typedef struct std__basic_ostream_wchar_t_ std__wostream;
struct sync_source_t {uchar storage[16];};
typedef qvector_tev_info_t_ tevinfo_vec_t;
struct value_u__dq_t {uint32 low;uint32 high;};
struct _CrtMemState {_CrtMemBlockHeader *pBlockHeader;size_t lCounts[5];size_t lSizes[5];size_t lHighWaterCount;size_t lTotalCount;};
struct addon_info_t {size_t cb;const char *id;const char *name;const char *producer;const char *version;const char *url;const char *freeform;const void *custom_data;size_t custom_size;};
typedef qvector_argpart_t_ argpartvec_t;
typedef qvector_bpt_t__P_ bptptr_vec_t;
struct call_stack_t : qvector_call_stack_info_t_ {};
struct cfgopt_set_t {const cfgopt_t *opts;size_t nopts;void (*cb)(const cfgopt_t *, int, const void *);void *obj;};
typedef qvector_debug_event_t_ dbgevt_vec_t;
typedef uint16 fixup_type_t;
typedef qvector_funcarg_t_ funcargvec_t;
struct interr_exc_t : std__exception {int code;};
typedef qvector_lowcnd_t_ lowcnd_vec_t;
typedef qvector_modinfo_t_ modinfovec_t;
struct qvector_int_ {int *array;size_t n;size_t alloc;};
typedef qvector_reg_info_t_ reginfovec_t;
typedef struct std__basic_filebuf_char_ std__filebuf;
typedef struct std__basic_fstream_char_ std__fstream;
typedef struct std__basic_istream_char_ std__istream;
typedef struct std__basic_ostream_char_ std__ostream;
typedef qstack_token_t_ tokenstack_t;
typedef qvector_type_attr_t_ type_attrs_t;
struct _timespec32 {__time32_t tv_sec;__int32 tv_nsec;};
struct _timespec64 {__time64_t tv_sec;__int32 tv_nsec;};
typedef qvector_idp_desc_t_ idp_descs_t;
typedef qvector_idp_name_t_ idp_names_t;
typedef qrefcnt_t_refcnted_regex_t_ regex_ptr_t;
typedef qvector_regobj_t_ regobjvec_t;
typedef qvector_snapshot_t__P_ snapshots_t;
typedef qvector_valstr_t_ valstrvec_t;
struct MD5Context {uint32 buf[4];uint32 bits[2];unsigned __int8 in[64];};
struct bitrange_t {uint16 offset;uint16 nbits;};
typedef qvector_catch_t_ catchvec_t;
typedef qvector_extlang_t__P_ extlangs_t;
typedef qvector_idc_global_t_ idc_vars_t;
typedef qvector_unsigned_long_long_ inodevec_t;
typedef uint8 op_dtype_t;
typedef qvector_point_t_ pointvec_t;
typedef qvector__qstring_wchar_t__ qwstrvec_t;
struct rangevec_t : rangevec_base_t {};
typedef qvector_tinfo_t_ tinfovec_t;
typedef qvector_xreflist_entry_t_ xreflist_t;
struct _heapinfo {int *_pentry;size_t _size;int _useflag;};
typedef qvector_argloc_t_ arglocs_t;
typedef uint32 bgcolor_t;
typedef qvector_bool_ boolvec_t;
typedef qvector_bpt_t_ bpt_vec_t;
struct bytevec_t : qvector_unsigned_char_ {};
typedef qvector_qvector_long_long__ casevec_t;
typedef qvector_unsigned_char_ compvec_t;
typedef size_t diffpos_t;
typedef qvector_edge_t_ edgevec_t;
struct fpvalue_t {uint16 w[6];};
struct instruc_t {const char *name;uint32 feature;};
typedef qvector_ioport_t_ ioports_t;
typedef qvector_jvalue_t_ jvalues_t;
struct plugmod_t {plugmod_t_vtbl *__vftable /*VFT*/;size_t owner;size_t reserved;};
typedef qvector__qstring_char__ qstrvec_t;
typedef int32 qtime32_t;
typedef uchar reftype_t;
struct regobjs_t : regobjvec_t {};
typedef qvector_regval_t_ regvals_t;
typedef qvector_unsigned_long_long_ sizevec_t;
typedef struct std__basic_ios_wchar_t_ std__wios;
struct stkpnts_t : qvector_stkpnt_t_ {};
typedef qvector_long_long_ svalvec_t;
typedef qvector_tryblk_t_ tryblks_t;
typedef qvector_unsigned_long_long_ uvalvec_t;
struct valstrs_t : valstrvec_t {};
typedef uint32 wchar32_t;
typedef qvector_bptaddrs_t_ bpteas_t;
struct cliopt_t {char shortname;const char *longname;const char *help;cliopt_handler_t *handler;int nargs;};
typedef qvector_unsigned_long_long_ dirvec_t;
typedef qvector_exception_info_t_ excvec_t;
typedef qvector_fixup_info_t_ fixups_t;
typedef qvector_int_ intvec_t;
typedef uchar optype_t;
typedef qvector_unsigned_int_ ordvec_t;
typedef uchar p_string;
struct plugin_t {int version;int flags;plugmod_t *(*init)(void);void (*term)(void);bool (*run)(size_t);const char *comment;const char *help;const char *wanted_name;const char *wanted_hotkey;};
struct regobj_t {int regidx;int relocate;bytevec_t value;};
typedef struct std__basic_ios_char_ std__ios;
typedef qvector_simpleline_t_ strvec_t;
struct bytes_t {uchar len;const uchar *bytes;};
typedef uchar color_t;
typedef qvector_unsigned_long_long_ eavec_t;
typedef uint32 flags_t;
typedef _lldiv_t lldiv_t;
struct regex_t {int re_magic;size_t re_nsub;const char *re_endp;void *re_g;};
typedef size_t rsize_t;
typedef ptrdiff_t ssize_t;
struct tinfo_t {uint32 typid;};
struct uint128 {ulonglong l;ulonglong h;};
typedef uchar comp_t;
struct exehdr {uint16 exe_ident;uint16 PartPag;uint16 PageCnt;uint16 ReloCnt;uint16 HdrSize;uint16 MinMem;uint16 MaxMem;uint16 ReloSS;uint16 ExeSP;uint16 ChkSum;uint16 ExeIP;uint16 ReloCS;uint16 TablOff;uint16 Overlay;};
struct jarr_t {jvalues_t values;};
struct jobj_t : qvector_kvp_t_ {};
typedef _ldiv_t ldiv_t;
typedef ushort lxtype;
typedef uchar p_list;
typedef qvector_twinline_t_ text_t;
typedef __time64_t time_t;
typedef uchar type_t;
typedef ulonglong uint64;
typedef uchar bte_t;
typedef _dev_t dev_t;
typedef _div_t div_t;
typedef _ino_t ino_t;
typedef longlong int64;
typedef _off_t off_t;
typedef uint64 sel_t;
typedef _iobuf FILE;
typedef uchar cm_t;
typedef uint64 ea_t;
typedef uint16 eNI[9];
struct std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_ {std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____Nodeptr _Left;std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____Nodeptr _Parent;std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____Nodeptr _Right;char _Color;char _Isnil;std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___value_type _Myval;};
struct qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R__ {bool (**array)(syntax_highlight_style *, const _qstring_char_ *);size_t n;size_t alloc;};
struct qvector_long_long___P__syntax_highlight_style__P__const_char__P__ {__int64 (**array)(syntax_highlight_style *, const char *);size_t n;size_t alloc;};
struct backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t {no_regs_t regs;uint insn_cnt;};
struct std___Tree_node_std__pair_const_int__int___void__P_ {std___Tree_node_std__pair_const_int__int___void__P____Nodeptr _Left;std___Tree_node_std__pair_const_int__int___void__P____Nodeptr _Parent;std___Tree_node_std__pair_const_int__int___void__P____Nodeptr _Right;char _Color;char _Isnil;std___Tree_node_std__pair_const_int__int___void__P___value_type _Myval;};
union lex_value_t___6E94C03EE084EC1E8773E8F11C206FDC {int64 val;uint64 uval;};
struct ida_syntax_highlighter_t__keywords_style_t {qvector_ida_syntax_highlighter_t__plain_char_ptr_t_ keywords;syntax_highlight_style style;};
union token_t___EFD300335D00E904D0DC340AFA3DF967 {fpvalue_t fnum;int64 i64;};
union op_t___03EE851906E7470B48652C42A8F5F22F {ea_t specval;_0B605D7B00AC5C12C153272CF5BD15AF specval_shorts;};
union op_t___63479489C28A4014434636A3BFC4DC99 {ea_t addr;_0B605D7B00AC5C12C153272CF5BD15AF addr_shorts;};
typedef lecvt_code_t _47EB95A8857FB680635907AB7DCDCDE8(lochist_entry_t *, const lochist_entry_t *, TWidget *, uint32);
typedef ssize_t _492C834E753BED590AB0BAB80BEB78E7(syntax_highlight_style *, const char *);
typedef ssize_t _C09AF1331CFCFC509FB4233AA5230FB3(void *, int, va_list);
struct line_rendering_output_entry_t {const twinline_t *line;uint32 flags;bgcolor_t bg_color;int cpx;int nchars;};
struct std___Tree_node_int__void__P_ {std___Tree_node_int__void__P____Nodeptr _Left;std___Tree_node_int__void__P____Nodeptr _Parent;std___Tree_node_int__void__P____Nodeptr _Right;char _Color;char _Isnil;std___Tree_node_int__void__P___value_type _Myval;};
union view_mouse_event_location_t {ea_t ea;const selection_item_t *item;};
struct post_event_visitor_t_vtbl; /* post_event_visitor_t_vtbl {ssize_t (*handle_post_event)(post_event_visitor_t *__hidden this, ssize_t code, int notification_code, va_list va);void (*_del_post_event_visitor_t)(post_event_visitor_t *__hidden this);};*/
struct cancellable_graph_t_vtbl; /* cancellable_graph_t_vtbl {void (*_del_cancellable_graph_t)(cancellable_graph_t *__hidden this);char *(*get_node_label)(const gdl_graph_t *__hidden this, char *iobuf, int iobufsize, int n);void (*print_graph_attributes)(const gdl_graph_t *__hidden this, FILE *fp);bool (*print_node)(const gdl_graph_t *__hidden this, FILE *fp, int n);bool (*print_edge)(const gdl_graph_t *__hidden this, FILE *fp, int i, int j);void (*print_node_attributes)(const gdl_graph_t *__hidden this, FILE *fp, int n);int (*size)(const gdl_graph_t *__hidden this);int (*node_qty)(const gdl_graph_t *__hidden this);bool (*exists)(const gdl_graph_t *__hidden this, int node);int (*entry)(const gdl_graph_t *__hidden this);int (*exit)(const gdl_graph_t *__hidden this);int (*nsucc)(const gdl_graph_t *__hidden this, int node);int (*npred)(const gdl_graph_t *__hidden this, int node);int (*succ)(const gdl_graph_t *__hidden this, int node, int i);int (*pred)(const gdl_graph_t *__hidden this, int node, int i);bool (*empty)(const gdl_graph_t *__hidden this);bgcolor_t (*get_node_color)(const gdl_graph_t *__hidden this, int n);bgcolor_t (*get_edge_color)(const gdl_graph_t *__hidden this, int i, int j);};*/
struct lines_rendering_output_t {line_rendering_output_entries_refs_t entries;uint32 flags;};
struct launch_process_params_t {size_t cb;int flags;const char *path;const char *args;ssize_t in_handle;ssize_t out_handle;ssize_t err_handle;char *env;const char *startdir;void *info;};
struct highlighter_cbs_t_vtbl; /* highlighter_cbs_t_vtbl {void (*_del_highlighter_cbs_t)(highlighter_cbs_t *__hidden this);void (*set_style)(highlighter_cbs_t *__hidden this, int32, int32, syntax_highlight_style);int32 (*prev_block_state)(highlighter_cbs_t *__hidden this);int32 (*cur_block_state)(highlighter_cbs_t *__hidden this);void (*set_block_state)(highlighter_cbs_t *__hidden this, int32);};*/
struct ida_lowertype_helper_t : lowertype_helper_t {const tinfo_t *tif;ea_t ea;int purged_bytes;};
struct qlist_ui_request_t__P_ {qlist_ui_request_t__P___listnode_t node;size_t length;};
struct qvector_movbpt_code_t_ {movbpt_code_t *array;size_t n;size_t alloc;};
struct event_listener_t_vtbl; /* event_listener_t_vtbl {ssize_t (*on_event)(event_listener_t *__hidden this, ssize_t code, va_list va);void (*_del_event_listener_t)(event_listener_t *__hidden this);};*/
struct std__fpos__Mbstatet_ {std__streamoff _Myoff;fpos_t _Fpos;_Mbstatet _Mystate;};
struct form_actions_t_vtbl; /* form_actions_t_vtbl {bool (*_get_field_value)(form_actions_t *__hidden this, int field_id, void *buf);bool (*_set_field_value)(form_actions_t *__hidden this, int field_id, const void *buf);bool (*enable_field)(form_actions_t *__hidden this, int field_id, bool enable);bool (*show_field)(form_actions_t *__hidden this, int field_id, bool display);bool (*move_field)(form_actions_t *__hidden this, int field_id, int x, int y, int w, int h);int (*get_focused_field)(form_actions_t *__hidden this);bool (*set_focused_field)(form_actions_t *__hidden this, int field_id);void (*refresh_field)(form_actions_t *__hidden this, int field_id);void (*close)(form_actions_t *__hidden this, int close_normally);void *(*get_ud)(form_actions_t *__hidden this);bool (*_get_str_field_value)(form_actions_t *__hidden this, int field_id, char *buf, const size_t bufsize);bool (*enable_dialog_button)(form_actions_t *__hidden this, form_actions_t__dlgbtn_t btn, bool enabled);bool (*is_dialog_button_enabled)(form_actions_t *__hidden this, form_actions_t__dlgbtn_t btn);};*/
struct chooser_t__cbret_t {ssize_t idx;chooser_base_t__cbres_t changed;};
struct qflow_chart_t_vtbl; /* qflow_chart_t_vtbl {void (*_del_qflow_chart_t)(qflow_chart_t *__hidden this);char *(*get_node_label)(const qflow_chart_t *__hidden this, char *iobuf, int iobufsize, int n);void (*print_graph_attributes)(const gdl_graph_t *__hidden this, FILE *fp);bool (*print_node)(const gdl_graph_t *__hidden this, FILE *fp, int n);bool (*print_edge)(const gdl_graph_t *__hidden this, FILE *fp, int i, int j);void (*print_node_attributes)(const qflow_chart_t *__hidden this, FILE *fp, int n);int (*size)(const qflow_chart_t *__hidden this);int (*node_qty)(const gdl_graph_t *__hidden this);bool (*exists)(const gdl_graph_t *__hidden this, int node);int (*entry)(const gdl_graph_t *__hidden this);int (*exit)(const gdl_graph_t *__hidden this);int (*nsucc)(const qflow_chart_t *__hidden this, int node);int (*npred)(const qflow_chart_t *__hidden this, int node);int (*succ)(const qflow_chart_t *__hidden this, int node, int i);int (*pred)(const qflow_chart_t *__hidden this, int node, int i);bool (*empty)(const gdl_graph_t *__hidden this);bgcolor_t (*get_node_color)(const gdl_graph_t *__hidden this, int n);bgcolor_t (*get_edge_color)(const gdl_graph_t *__hidden this, int i, int j);};*/
struct simpleline_place_t : place_t {uint32 n;};
struct _wfinddata64i32_t {unsigned int attrib;__time64_t time_create;__time64_t time_access;__time64_t time_write;_fsize_t size;__int16 name[260];};
struct array_type_data_t {tinfo_t elem_type;uint32 base;uint32 nelems;};
struct compiled_binpat_t {bytevec_t bytes;bytevec_t mask;rangevec_t strlits;int encidx;};
struct _finddata64i32_t {unsigned int attrib;__time64_t time_create;__time64_t time_access;__time64_t time_write;_fsize_t size;char name[260];};
struct gdl_graph_t_vtbl; /* gdl_graph_t_vtbl {void (*_del_gdl_graph_t)(gdl_graph_t *__hidden this);char *(*get_node_label)(const gdl_graph_t *__hidden this, char *iobuf, int iobufsize, int n);void (*print_graph_attributes)(const gdl_graph_t *__hidden this, FILE *fp);bool (*print_node)(const gdl_graph_t *__hidden this, FILE *fp, int n);bool (*print_edge)(const gdl_graph_t *__hidden this, FILE *fp, int i, int j);void (*print_node_attributes)(const gdl_graph_t *__hidden this, FILE *fp, int n);int (*size)(const gdl_graph_t *__hidden this);int (*node_qty)(const gdl_graph_t *__hidden this);bool (*exists)(const gdl_graph_t *__hidden this, int node);int (*entry)(const gdl_graph_t *__hidden this);int (*exit)(const gdl_graph_t *__hidden this);int (*nsucc)(const gdl_graph_t *__hidden this, int node);int (*npred)(const gdl_graph_t *__hidden this, int node);int (*succ)(const gdl_graph_t *__hidden this, int node, int i);int (*pred)(const gdl_graph_t *__hidden this, int node, int i);bool (*empty)(const gdl_graph_t *__hidden this);bgcolor_t (*get_node_color)(const gdl_graph_t *__hidden this, int n);bgcolor_t (*get_edge_color)(const gdl_graph_t *__hidden this, int i, int j);};*/
struct generic_linput_t {generic_linput_t_vtbl *__vftable /*VFT*/;uint64 filesize;uint32 blocksize;};
struct predicate_t_vtbl; /* predicate_t_vtbl {bool (*should_display)(predicate_t *__hidden this, const til_t *til, const char *name, const type_t *type, const p_list *fields);void (*_del_predicate_t)(predicate_t *__hidden this);};*/
struct refcnted_regex_t : qrefcnt_obj_t {regex_t regex;};
struct segm_move_info_t {ea_t from;ea_t to;size_t size;};
struct xreflist_entry_t {ea_t ea;uchar opnum;uchar type;};
struct _wfinddata32_t {unsigned int attrib;__time32_t time_create;__time32_t time_access;__time32_t time_write;_fsize_t size;__int16 name[260];};
struct bpt_location_t {ea_t info;int index;bpt_loctype_t loctype;};
struct getname_info_t {size_t cb;int32 inhibitor;int32 demform;int32 demcode;};
struct procmod_t_vtbl; /* procmod_t_vtbl {ssize_t (*on_event)(event_listener_t *__hidden this, ssize_t code, va_list va);void (*_del_procmod_t)(procmod_t *__hidden this);};*/
struct _finddata32_t {unsigned int attrib;__time32_t time_create;__time32_t time_access;__time32_t time_write;_fsize_t size;char name[260];};
struct memreg_info_t {ea_t ea;bytevec_t bytes;};
struct value_u__dt_t {uint32 low;uint32 high;uint16 upper;};
struct lex_value_t {bool is_unsigned;union {int64 val;uint64 uval;};};
struct callregs_t {argreg_policy_t policy;int nregs;intvec_t gpregs;intvec_t fpregs;};
struct idaplace_t : place_t {ea_t ea;};
struct xrefblk_t {ea_t from;ea_t to;uchar iscode;uchar type;uchar user;};
struct xrefpos_t {ea_t ea;uchar type;};
struct qffblk_t {unsigned int attrib;__time64_t time_create;__time64_t time_access;__time64_t time_write;__int64 size;char name[260];intptr_t handle;int attr;unsigned __int16 ff_ftime;unsigned __int16 ff_fdate;};
struct tryblk_t : rangevec_t {char reserve[72];uchar cb;uchar kind;uchar level;};
struct int128 {ulonglong l;longlong h;};
union input_event_t___4953DA15226C435F033B39D89D558652 {input_event_t__input_event_shortcut_data_t shortcut;input_event_t__input_event_keyboard_data_t keyboard;input_event_t__input_event_mouse_data_t mouse;};
union regval_t___E2461B07C1F03128F15079BB1FB5F381 {uint64 ival;fpvalue_t fval;uchar reserve[24];};
union insn_t___F4FA00FEEF275F329AD5381050035CF8 {uint32 auxpref;uint16 auxpref_u16[2];uint8 auxpref_u8[4];};
typedef int32 _5D6657710F2FD348305D4B59534642C3(char *, uint, const char *, uint32);
struct abstract_graph_t_vtbl; /* abstract_graph_t_vtbl {void (*_del_abstract_graph_t)(abstract_graph_t *__hidden this);char *(*get_node_label)(const gdl_graph_t *__hidden this, char *iobuf, int iobufsize, int n);void (*print_graph_attributes)(const gdl_graph_t *__hidden this, FILE *fp);bool (*print_node)(const gdl_graph_t *__hidden this, FILE *fp, int n);bool (*print_edge)(const gdl_graph_t *__hidden this, FILE *fp, int i, int j);void (*print_node_attributes)(const gdl_graph_t *__hidden this, FILE *fp, int n);int (*size)(const gdl_graph_t *__hidden this);int (*node_qty)(const gdl_graph_t *__hidden this);bool (*exists)(const gdl_graph_t *__hidden this, int node);int (*entry)(const gdl_graph_t *__hidden this);int (*exit)(const gdl_graph_t *__hidden this);int (*nsucc)(const gdl_graph_t *__hidden this, int node);int (*npred)(const gdl_graph_t *__hidden this, int node);int (*succ)(const gdl_graph_t *__hidden this, int node, int i);int (*pred)(const gdl_graph_t *__hidden this, int node, int i);bool (*empty)(const gdl_graph_t *__hidden this);bgcolor_t (*get_node_color)(const gdl_graph_t *__hidden this, int n);bgcolor_t (*get_edge_color)(const gdl_graph_t *__hidden this, int i, int j);rect_t *(*nrect)(abstract_graph_t *__hidden this, int n);edge_info_t *(*get_edge)(abstract_graph_t *__hidden this, edge_t e);abstract_graph_t *(*clone)(const abstract_graph_t *__hidden this);};*/
struct generic_linput_t_vtbl; /* generic_linput_t_vtbl {ssize_t (*read)(generic_linput_t *__hidden this, int64 off, void *buffer, size_t nbytes);void (*_del_generic_linput_t)(generic_linput_t *__hidden this);};*/
struct chooser_base_t_vtbl; /* chooser_base_t_vtbl {void (*_del_chooser_base_t)(chooser_base_t *__hidden this);void *(*get_chooser_obj)(chooser_base_t *__hidden this);const void *(*get_obj_id)(const chooser_base_t *__hidden this, size_t *len);bool (*init)(chooser_base_t *__hidden this);size_t (*get_count)(const chooser_base_t *__hidden this);void (*get_row)(const chooser_base_t *__hidden this, qstrvec_t *out, int *out_icon, chooser_item_attrs_t *out_attrs, size_t n);ea_t (*get_ea)(const chooser_base_t *__hidden this, size_t);void (*closed)(chooser_base_t *__hidden this);};*/
struct compiler_info_t {comp_t id;cm_t cm;uchar size_i;uchar size_b;uchar size_e;uchar defalign;uchar size_s;uchar size_l;uchar size_ll;uchar size_ldbl;};
struct ptr_type_data_t {tinfo_t obj_type;tinfo_t closure;uchar based_ptr_size;uchar taptr_bits;tinfo_t parent;int32 delta;};
struct renderer_info_t {graph_location_info_t gli;renderer_info_t__pos_t pos;tcc_renderer_type_t rtype;};
struct auto_display_t {atype_t type;ea_t ea;idastate_t state;};
struct plugin_info_t {plugin_info_t *next;char *path;char *org_name;char *name;ushort org_hotkey;ushort hotkey;size_t arg;plugin_t *entry;idadll_t dllmem;int flags;char *comment;};
struct reg_access_t {int regnum;bitrange_t range;access_type_t access_type;uchar opnum;};
struct exehdr_full : exehdr {uint16 res[4];uint16 oemid;uint16 oeminfo;uint16 res2[10];uint32 lfanew;};
struct simd_info_t {const char *name;tinfo_t tif;uint16 size;type_t memtype;};
struct _stat32i64 {_dev_t st_dev;_ino_t st_ino;unsigned __int16 st_mode;__int16 st_nlink;__int16 st_uid;__int16 st_gid;_dev_t st_rdev;__int64 st_size;__time32_t st_atime;__time32_t st_mtime;__time32_t st_ctime;};
struct idcfuncs_t {size_t qnty;ext_idcfunc_t *funcs;error_t (*startup)(void);error_t (*shutdown)(void);void (*init_idc)(void);void (*term_idc)(void);bool (*is_database_open)(void);size_t (*ea2str)(char *, size_t, ea_t);bool (*undeclared_variable_ok)(const char *);int get_unkvar;int set_unkvar;int exec_resolved_func;int calc_sizeof;int get_field_ea;};
struct qffblk64_t {int attrib;char name[260];uint64 size;uint16 ff_fdate;uint16 ff_ftime;qffblk_t base;};
struct tev_info_t {tev_type_t type;thid_t tid;ea_t ea;};
struct _stat64 {_dev_t st_dev;_ino_t st_ino;unsigned __int16 st_mode;__int16 st_nlink;__int16 st_uid;__int16 st_gid;_dev_t st_rdev;__int64 st_size;__time64_t st_atime;__time64_t st_mtime;__time64_t st_ctime;};
struct enum_type_data_t : enum_member_vec_t {intvec_t group_sizes;uint32 taenum_bits;bte_t bte;};
struct udt_type_data_t : udtmembervec_t {size_t total_size;size_t unpadded_size;uint32 effalign;uint32 taudt_bits;uchar sda;uchar pack;bool is_union;};
struct debug_event_t {pid_t pid;thid_t tid;ea_t ea;bool handled;event_id_t _eid;char bytes[48];};
struct graph_item_t {graph_item_type_t type;edge_t e;int n;int b;point_t p;edge_layout_point_t elp;};
struct _stat64i32 {_dev_t st_dev;_ino_t st_ino;unsigned __int16 st_mode;__int16 st_nlink;__int16 st_uid;__int16 st_gid;_dev_t st_rdev;_off_t st_size;__time64_t st_atime;__time64_t st_mtime;__time64_t st_ctime;};
struct regval_t {int32 rvtype;union {uint64 ival;fpvalue_t fval;uchar reserve[24];};};
struct _stat32 {_dev_t st_dev;_ino_t st_ino;unsigned __int16 st_mode;__int16 st_nlink;__int16 st_uid;__int16 st_gid;_dev_t st_rdev;_off_t st_size;__time32_t st_atime;__time32_t st_mtime;__time32_t st_ctime;};
struct stat {_dev_t st_dev;_ino_t st_ino;unsigned __int16 st_mode;__int16 st_nlink;__int16 st_uid;__int16 st_gid;_dev_t st_rdev;_off_t st_size;time_t st_atime;time_t st_mtime;time_t st_ctime;};
struct input_event_t {int cb;input_event_kind_t kind;input_event_modifiers_t modifiers;TWidget *target;void *source;union {input_event_t__input_event_shortcut_data_t shortcut;input_event_t__input_event_keyboard_data_t keyboard;input_event_t__input_event_mouse_data_t mouse;};};
struct processor_t {int32 version;int32 id;uint32 flag;uint32 flag2;int32 cnbits;int32 dnbits;const char *const *psnames;const char *const *plnames;const asm_t *const *assemblers;ssize_t (*_notify)(void *, int, va_list);const char *const *reg_names;int32 regs_num;int32 reg_first_sreg;int32 reg_last_sreg;int32 segreg_size;int32 reg_code_sreg;int32 reg_data_sreg;const bytes_t *codestart;const bytes_t *retcodes;int32 instruc_start;int32 instruc_end;const instruc_t *instruc;size_t tbyte_size;char real_width[4];int32 icode_return;void *unused_slot;};
struct debugger_t {int version;const char *name;int id;const char *processor;uint32 flags;uint32 flags2;const char **regclasses;int default_regclasses;register_info_t *registers;int nregs;int memory_page_size;const uchar *bpt_bytes;uchar bpt_size;uchar filetype;ushort resume_modes;const char *(*set_dbg_options)(const char *, int, int, const void *);ssize_t (*callback)(void *, int, va_list);};
struct mutable_graph_t_vtbl; /* mutable_graph_t_vtbl {void (*_del_mutable_graph_t)(mutable_graph_t *__hidden this);char *(*get_node_label)(const gdl_graph_t *__hidden this, char *iobuf, int iobufsize, int n);void (*print_graph_attributes)(const gdl_graph_t *__hidden this, FILE *fp);bool (*print_node)(const gdl_graph_t *__hidden this, FILE *fp, int n);bool (*print_edge)(const gdl_graph_t *__hidden this, FILE *fp, int i, int j);void (*print_node_attributes)(const gdl_graph_t *__hidden this, FILE *fp, int n);int (*size)(const mutable_graph_t *__hidden this);int (*node_qty)(const mutable_graph_t *__hidden this);bool (*exists)(const mutable_graph_t *__hidden this, int node);int (*entry)(const gdl_graph_t *__hidden this);int (*exit)(const gdl_graph_t *__hidden this);int (*nsucc)(const mutable_graph_t *__hidden this, int b);int (*npred)(const mutable_graph_t *__hidden this, int b);int (*succ)(const mutable_graph_t *__hidden this, int b, int i);int (*pred)(const mutable_graph_t *__hidden this, int b, int i);bool (*empty)(const mutable_graph_t *__hidden this);bgcolor_t (*get_node_color)(const gdl_graph_t *__hidden this, int n);bgcolor_t (*get_edge_color)(const gdl_graph_t *__hidden this, int i, int j);rect_t *(*nrect)(mutable_graph_t *__hidden this, int n);edge_info_t *(*get_edge)(mutable_graph_t *__hidden this, edge_t e);mutable_graph_t *(*clone)(const mutable_graph_t *__hidden this);bool (*redo_layout)(mutable_graph_t *__hidden this);void (*resize)(mutable_graph_t *__hidden this, int n);int (*add_node)(mutable_graph_t *__hidden this, const rect_t *r);ssize_t (*del_node)(mutable_graph_t *__hidden this, int n);bool (*add_edge)(mutable_graph_t *__hidden this, int i, int j, const edge_info_t *ei);bool (*del_edge)(mutable_graph_t *__hidden this, int i, int j);bool (*replace_edge)(mutable_graph_t *__hidden this, int i, int j, int x, int y);bool (*refresh)(mutable_graph_t *__hidden this);bool (*set_nrect)(mutable_graph_t *__hidden this, int n, const rect_t *r);bool (*set_edge)(mutable_graph_t *__hidden this, edge_t e, const edge_info_t *ei);ea_t (*calc_group_ea)(mutable_graph_t *__hidden this, const intvec_t *);bool (*is_user_graph)(mutable_graph_t *__hidden this);};*/
struct update_bpt_info_t {ea_t ea;bytevec_t orgbytes;bpttype_t type;int size;uchar code;pid_t pid;thid_t tid;};
typedef std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___allocator_type std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____allocator_type;
typedef std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___key_compare std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____key_compare;
typedef std___Default_allocator_traits_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____size_type std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____size_type;
typedef std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___allocator_type std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____allocator_type;
typedef std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___key_compare std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____key_compare;
typedef std___Default_allocator_traits_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______size_type std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____size_type;
typedef std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___allocator_type std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____allocator_type;
typedef std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___key_compare std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____key_compare;
typedef std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_type std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____value_type;
typedef std___Default_allocator_traits_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long_____size_type std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____size_type;
typedef std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____size_type std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____size_type;
typedef std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___allocator_type std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____allocator_type;
typedef std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___key_compare std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____key_compare;
typedef std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_type std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____value_type;
typedef std___Default_allocator_traits_std__allocator_std__pair_const_int__int_____size_type std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____size_type;
typedef std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____size_type std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______size_type;
typedef std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_ std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____value_type;
typedef std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____value_type std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____value_type;
typedef std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____size_type std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____size_type;
typedef std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____pointer std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____pointer;
typedef std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____allocator_type std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___allocator_type;
typedef backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___mapped_type;
struct std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_ {const unsigned __int64 first;backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t second;};
typedef std___Tset_traits_int__std__less_int___std__allocator_int___false___allocator_type std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____allocator_type;
typedef std___Tree_val_std___Tree_simple_types_int____value_type std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____value_type;
typedef const std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____value_type *std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____reference;
typedef std___Tset_traits_int__std__less_int___std__allocator_int___false___key_compare std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____key_compare;
typedef const std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____value_type *std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____const_pointer;
typedef std___Default_allocator_traits_std__allocator_int____size_type std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____size_type;
typedef std___String_val_std___Simple_types_char16_t____value_type std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____value_type;
typedef std___String_val_std___Simple_types_char32_t____value_type std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____value_type;
typedef std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_ std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____Node;
typedef const std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____value_type *std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____reference;
typedef const std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____value_type *std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____reference;
typedef std___String_val_std___Simple_types_wchar_t____value_type std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____value_type;
typedef const std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____value_type *std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____reference;
typedef std___String_val_std___Simple_types_char____value_type std___String_const_iterator_std___String_val_std___Simple_types_char_____value_type;
typedef std___Tree_val_std___Tree_simple_types_int____value_type std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____value_type;
typedef const std___String_const_iterator_std___String_val_std___Simple_types_char_____value_type *std___String_const_iterator_std___String_val_std___Simple_types_char_____reference;
typedef const std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____value_type *std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____reference;
typedef std___String_val_std___Simple_types_char16_t____value_type std___String_iterator_std___String_val_std___Simple_types_char16_t_____value_type;
typedef std___String_val_std___Simple_types_char32_t____value_type std___String_iterator_std___String_val_std___Simple_types_char32_t_____value_type;
typedef std___Tset_traits_int__std__less_int___std__allocator_int___false___key_compare std___Tset_traits_int__std__less_int___std__allocator_int___false___value_compare;
typedef std___String_iterator_std___String_val_std___Simple_types_char16_t_____value_type *std___String_iterator_std___String_val_std___Simple_types_char16_t_____reference;
typedef std___String_iterator_std___String_val_std___Simple_types_char32_t_____value_type *std___String_iterator_std___String_val_std___Simple_types_char32_t_____reference;
typedef std___String_val_std___Simple_types_wchar_t____value_type std___String_iterator_std___String_val_std___Simple_types_wchar_t_____value_type;
typedef std___String_iterator_std___String_val_std___Simple_types_wchar_t_____value_type *std___String_iterator_std___String_val_std___Simple_types_wchar_t_____reference;
typedef std___Tree_node_std__pair_const_int__int___void__P_ std__allocator_std___Tree_node_std__pair_const_int__int___void__P____value_type;
typedef std___Simple_types_std__pair_const_int__int____value_type std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____value_type;
typedef std___String_val_std___Simple_types_char____value_type std___String_iterator_std___String_val_std___Simple_types_char_____value_type;
typedef std___Simple_types_std__pair_const_int__int____size_type std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____size_type;
typedef std___String_iterator_std___String_val_std___Simple_types_char_____value_type *std___String_iterator_std___String_val_std___Simple_types_char_____reference;
typedef std___Simple_types_std__pair_const_int__int____pointer std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____pointer;
typedef std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____allocator_type std__map__qstring_char___qrefcnt_t_refcnted_regex_t____allocator_type;
typedef std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____allocator_type std__map_unsigned_long_long__unsigned_long_long___allocator_type;
typedef std___Simple_types_char16_t___difference_type std___String_val_std___Simple_types_char16_t____difference_type;
typedef std___Simple_types_char32_t___difference_type std___String_val_std___Simple_types_char32_t____difference_type;
typedef std___Simple_types_wchar_t___difference_type std___String_val_std___Simple_types_wchar_t____difference_type;
typedef std___Simple_types_char16_t___const_pointer std___String_val_std___Simple_types_char16_t____const_pointer;
typedef std___Simple_types_char32_t___const_pointer std___String_val_std___Simple_types_char32_t____const_pointer;
typedef const std___Simple_types_std__pair_const_int__int____value_type *std___Simple_types_std__pair_const_int__int____const_pointer;
typedef std___Simple_types_wchar_t___const_pointer std___String_val_std___Simple_types_wchar_t____const_pointer;
typedef std___Simple_types_char___difference_type std___String_val_std___Simple_types_char____difference_type;
typedef std___Simple_types_int___const_pointer std___Tree_val_std___Tree_simple_types_int____const_pointer;
typedef std___Simple_types_char16_t___size_type std___String_val_std___Simple_types_char16_t____size_type;
typedef std___Simple_types_char32_t___size_type std___String_val_std___Simple_types_char32_t____size_type;
typedef std___Simple_types_char___const_pointer std___String_val_std___Simple_types_char____const_pointer;
typedef std___Tree_node_std__pair_const_int__int___void__P_ std___Tree_simple_types_std__pair_const_int__int_____Node;
typedef std___Tree_node_int__void__P_ std__allocator_std___Tree_node_int__void__P____value_type;
typedef std___Simple_types_wchar_t___size_type std___String_val_std___Simple_types_wchar_t____size_type;
typedef std___Simple_types_char16_t___pointer std___String_val_std___Simple_types_char16_t____pointer;
typedef std___Simple_types_char32_t___pointer std___String_val_std___Simple_types_char32_t____pointer;
typedef std___Simple_types_int___size_type std___Tree_val_std___Tree_simple_types_int____size_type;
typedef std___Simple_types_wchar_t___pointer std___String_val_std___Simple_types_wchar_t____pointer;
typedef std___Simple_types_char___size_type std___String_val_std___Simple_types_char____size_type;
typedef std___Simple_types_char___pointer std___String_val_std___Simple_types_char____pointer;
typedef qvector_const_char__P_ dynamic_register_set_t__const_char_vec_t;
struct std__numeric_limits_unsigned_long_long_ : std___Num_int_base {};
typedef std___Tree_node_int__void__P_ std___Tree_simple_types_int____Node;
struct std__numeric_limits_unsigned_short_ : std___Num_int_base {};
typedef std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____allocator_type std__map_int__int___allocator_type;
struct std__numeric_limits_unsigned_char_ : std___Num_int_base {};
struct std__numeric_limits_unsigned_long_ : std___Num_int_base {};
typedef int _13DEA147606768949B8709A1F27A1AE6(FILE *);
typedef const char *_403A3450421E1FA417431FD6F5C6B815(lexer_t *, const token_t *, const token_t *, int64, int64);
typedef const char *_40A15942B64B468D028A9EDC3BF273C3(lexer_t *, const token_t *, const token_t *, int64, int64, void *);
typedef bool _77081ABAD94FC9A5EE14B650E0DBF110(flags_t, void *);
typedef bool _9E76F4EBF8BA4D34546A573D2A95E8EF(ea_t);
typedef int _A2117BA638E63C1EAFEA64D9666358AE(const char *, const tinfo_t *, const char *, const uint64 *, void *);
struct _EBE02DBEC342F8268AFE19180D75885B {ea_t owner;int refqty;ea_t *referers;};
struct std___Is_character_unsigned_char_ : std__true_type {};
struct std__numeric_limits_unsigned_int_ : std___Num_int_base {};
struct std___Is_character_or_bool_bool_ : std__true_type {};
struct std__numeric_limits_long_double_ : std___Num_float_base {};
struct std__numeric_limits_signed_char_ : std___Num_int_base {};
struct std___Is_character_signed_char_ : std__true_type {};
struct std__bidirectional_iterator_tag : std__forward_iterator_tag {};
struct std__random_access_iterator_tag : std__bidirectional_iterator_tag {};
typedef qvector_rect_t_ mutable_graph_t__node_layout_t;
struct std__numeric_limits_long_long_ : std___Num_int_base {};
typedef view_mouse_event_location_t view_mouse_event_t__location_t;
typedef qvector_selection_item_t_ screen_graph_selection_base_t;
typedef std__false_type std___No_propagate_allocators;
struct std__numeric_limits_char16_t_ : std___Num_int_base {};
struct std__numeric_limits_char32_t_ : std___Num_int_base {};
typedef std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____allocator_type std__set_int___allocator_type;
struct std__numeric_limits_wchar_t_ : std___Num_int_base {};
typedef qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R__ external_ident_colorizers_t;
struct std__numeric_limits_double_ : std___Num_float_base {};
typedef std__true_type std___Propagate_allocators;
struct std__numeric_limits_float_ : std___Num_float_base {};
struct std__numeric_limits_short_ : std___Num_int_base {};
struct std__numeric_limits_bool_ : std___Num_int_base {};
struct std__numeric_limits_char_ : std___Num_int_base {};
struct std__numeric_limits_long_ : std___Num_int_base {};
struct screen_graph_selection_t : screen_graph_selection_base_t {};
struct std___Is_character_char_ : std__true_type {};
struct std__numeric_limits_int_ : std___Num_int_base {};
struct _qstring_unsigned_char_ {qvector_unsigned_char_ body;};
struct lines_rendering_input_t {int cb;sections_lines_refs_t sections_lines;const synced_group_t *sync_group;};
typedef qvector_qbasic_block_t_ qflow_chart_t__blocks_t;
struct argtinfo_helper_t_vtbl; /* argtinfo_helper_t_vtbl {void (*_del_argtinfo_helper_t)(argtinfo_helper_t *__hidden this);bool (*set_op_tinfo)(argtinfo_helper_t *__hidden this, const insn_t *insn, const op_t *x, const tinfo_t *tif, const char *name);bool (*is_stkarg_load)(argtinfo_helper_t *__hidden this, const insn_t *insn, int *src, int *dst);bool (*has_delay_slot)(argtinfo_helper_t *__hidden this, ea_t);};*/
struct dirtree_visitor_t_vtbl; /* dirtree_visitor_t_vtbl {ssize_t (*visit)(dirtree_visitor_t *__hidden this, const dirtree_cursor_t *c, const direntry_t *de);};*/
struct extlang_visitor_t_vtbl; /* extlang_visitor_t_vtbl {ssize_t (*visit_extlang)(extlang_visitor_t *__hidden this, extlang_t *extlang);};*/
struct cfgopt_t__num_range_t {int64 minval;int64 maxval;};
typedef qvector_long_long___P__syntax_highlight_style__P__const_char__P__ external_colorizers_t;
struct chooser_item_attrs_t {int cb;int flags;bgcolor_t color;};
struct graph_path_visitor_t {graph_path_visitor_t_vtbl *__vftable /*VFT*/;intvec_t path;bool prune;};
typedef qvector_node_set_t_ array_of_node_set_t;
struct cfgopt_t__params_t {int64 p1;int64 p2;};
struct std__bad_exception : std__exception {};
struct _qstring_wchar_t_ {qvector_wchar_t_ body;};
typedef qvector_intmap_t_ array_of_intmap_t;
struct call_stack_info_t {ea_t callea;ea_t funcea;ea_t fp;bool funcok;};
struct scattered_aloc_t : argpartvec_t {};
struct linput_buffer_t {linput_t *li;int64 lsize;};
struct lochist_entry_t {renderer_info_t rinfo;place_t *plce;};
struct node_ordering_t {intvec_t node_by_order;intvec_t order_by_node;};
typedef int table_checker_t(switch_info_t *, ea_t, int, procmod_t *);
struct tev_reg_value_t {regval_t value;int reg_idx;};
struct value_u__d128_t {uint64 low;uint64 high;};
struct _qstring_char_ {qvector_char_ body;};
typedef qvector_movbpt_code_t_ movbpt_codes_t;
struct std__bad_alloc : std__exception {};
typedef std__fpos__Mbstatet_ std__streampos;
typedef qvector_op_t_ tracked_regs_t;
struct movbpt_info_t {bpt_location_t from;bpt_location_t to;};
struct string_info_t {ea_t ea;int length;int type;};
struct ui_requests_t : qlist_ui_request_t__P_ {};
struct reloc_info_t : bytevec_t {};
typedef ea_t blob_idx_t;
struct bptaddrs_t : eavec_t {bpt_t *bpt;};
struct eval_ctx_t {int size_cb;ea_t ea;};
typedef ea_t graph_id_t;
struct pointseq_t : pointvec_t {};
struct rangeset_t {rangevec_t bag;const range_t *cache;int undo_code;};
struct row_info_t {intvec_t nodes;int top;int bottom;};
typedef _heapinfo _HEAPINFO;
struct bptaddr_t {ea_t hea;ea_t kea;};
typedef uint64 nodeidx_t;
typedef uint64 qtime64_t;
typedef flags_t aflags_t;
typedef _qstring_wchar_t_ qwstring;
struct regarg_t {int reg;type_t *type;char *name;};
typedef off_t regoff_t;
struct timespec {time_t tv_sec;__int32 tv_nsec;};
typedef int64 adiff_t;
typedef uint64 asize_t;
struct netnode {nodeidx_t netnodenumber;};
typedef _qstring_char_ qstring;
struct range_t {ea_t start_ea;ea_t end_ea;};
typedef uint64 ea64_t;
typedef adiff_t sval_t;
typedef asize_t uval_t;
typedef _qstring_unsigned_char_ qtype;
typedef ea_t tid_t;
struct std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__ {const _qstring_char_ first;qrefcnt_t_refcnted_regex_t_ second;};
union std___String_val_std___Simple_types_char16_t_____Bxty {std___String_val_std___Simple_types_char16_t____value_type _Buf[8];std___String_val_std___Simple_types_char16_t____pointer _Ptr;char _Alias[8];};
union std___String_val_std___Simple_types_char32_t_____Bxty {std___String_val_std___Simple_types_char32_t____value_type _Buf[4];std___String_val_std___Simple_types_char32_t____pointer _Ptr;char _Alias[4];};
union std___String_val_std___Simple_types_wchar_t_____Bxty {std___String_val_std___Simple_types_wchar_t____value_type _Buf[8];std___String_val_std___Simple_types_wchar_t____pointer _Ptr;char _Alias[8];};
union std___String_val_std___Simple_types_char_____Bxty {std___String_val_std___Simple_types_char____value_type _Buf[16];std___String_val_std___Simple_types_char____pointer _Ptr;char _Alias[16];};
union switch_info_t___76B1A80AA47B7214ED24D33A3285D956 {ea_t values;uval_t lowcase;};
union op_t___1DAE607E75260845BFCA6DE571F2D359 {uval_t value;_0B605D7B00AC5C12C153272CF5BD15AF value_shorts;};
typedef bool _94760D3F2768AB73DF4E13DC5B377508(syntax_highlight_style *, const qstring *);
typedef int _BCFAB6CAE5EB6A58B72F2C0C12D28D2B(ea_t, const char *, uval_t, void *);
struct user_defined_prefix_t_vtbl; /* user_defined_prefix_t_vtbl {void (*_del_user_defined_prefix_t)(user_defined_prefix_t *__hidden this);void (*get_user_defined_prefix)(user_defined_prefix_t *__hidden this, qstring *vout, ea_t ea, const insn_t *insn, int lnnum, int indent, const char *line);};*/
struct range_marker_suspender_t {void (*backup)(ea_t, asize_t);};
struct ioports_fallback_t_vtbl; /* ioports_fallback_t_vtbl {bool (*handle)(ioports_fallback_t *__hidden this, qstring *errbuf, const ioports_t *ports, const char *line);};*/
struct source_file_t_vtbl; /* source_file_t_vtbl {void (*release)(source_file_t *__hidden this);srcinfo_provider_t *(*get_provider)(const source_file_t *__hidden this);const char *(*get_path)(source_file_t *__hidden this, qstring *errbuf);TWidget *(*open_srcview)(source_file_t *__hidden this, strvec_t **strvec, TWidget **pview, int lnnum, int colnum);bool (*read_file)(source_file_t *__hidden this, strvec_t *buf, qstring *errbuf);};*/
struct stkarg_area_info_t {size_t cb;sval_t stkarg_offset;sval_t shadow_size;sval_t linkage_area;};
struct scattered_segm_t : range_t {qstring name;};
struct chooser_base_t {chooser_base_t_vtbl *__vftable /*VFT*/;uint32 version;uint32 flags;int x0;int y0;int x1;int y1;int width;int height;const char *title;int columns;const int *widths;const char *const *header;int icon;qstring popup_names[4];int deflt_col;};
struct debapp_attrs_t {int32 cbsize;int addrsize;qstring platform;int is_be;};
struct encoder_t_vtbl; /* encoder_t_vtbl {void (*_del_encoder_t)(encoder_t *__hidden this);bool (*get_bom)(const encoder_t *__hidden this, bytevec_t *out);bool (*encode)(const encoder_t *__hidden this, qstring *s);bool (*print)(const encoder_t *__hidden this, FILE *out, const char *format, ...);bool (*requires_binary_mode)(const encoder_t *__hidden this);};*/
struct group_crinfo_t {intvec_t nodes;qstring text;};
struct hidden_range_t : range_t {char *description;char *header;char *footer;bool visible;bgcolor_t color;};
struct process_info_t {pid_t pid;qstring name;};
struct qbasic_block_t : range_t {intvec_t succ;intvec_t pred;};
struct tev_info_reg_t {tev_info_t info;tev_reg_values_t registers;};
struct enum_member_t {qstring name;qstring cmt;uint64 value;};
typedef error_t lx_resolver_t(lexer_t *, void *, token_t *, sval_t *);
struct structplace_t : place_t {uval_t idx;uval_t offset;};
struct thread_name_t {thid_t tid;qstring name;};
struct try_handler_t : rangevec_t {sval_t disp;int fpreg;};
struct enum_const_t {tid_t tid;uchar serial;};
struct idd_opinfo_t {bool modified;ea_t ea;regval_t value;int debregidx;int value_size;};
struct edge_info_t {bgcolor_t color;int width;int srcoff;int dstoff;pointseq_t layout;};
struct type_attr_t {qstring key;bytevec_t value;};
struct type_mods_t {tinfo_t type;qstring name;qstring cmt;int flags;};
struct hexplace_t : idaplace_t {ea_t sol;};
struct dirspec_t {dirspec_t_vtbl *__vftable /*VFT*/;uint32 flags;qstring id;};
struct ea_name_t {ea_t ea;qstring name;};
struct strpath_t {int len;tid_t ids[32];adiff_t delta;};
struct stkpnt_t {ea_t ea;sval_t spd;};
struct valstr_t {qstring oneline;size_t length;valstrs_t *members;valinfo_t *info;int props;};
struct catch_t : try_handler_t {sval_t obj;sval_t type_id;};
struct til_t {char *name;char *desc;int nbases;til_t **base;uint32 flags;compiler_info_t cc;til_bucket_t *syms;til_bucket_t *types;til_bucket_t *macros;int nrefs;int nstreams;til_stream_t **streams;};
struct std___String_val_std___Simple_types_char16_t__ : std___Container_base {std___String_val_std___Simple_types_char16_t_____Bxty _Bx;std___String_val_std___Simple_types_char16_t____size_type _Mysize;std___String_val_std___Simple_types_char16_t____size_type _Myres;};
struct std___String_val_std___Simple_types_char32_t__ : std___Container_base {std___String_val_std___Simple_types_char32_t_____Bxty _Bx;std___String_val_std___Simple_types_char32_t____size_type _Mysize;std___String_val_std___Simple_types_char32_t____size_type _Myres;};
struct std___String_val_std___Simple_types_wchar_t__ : std___Container_base {std___String_val_std___Simple_types_wchar_t_____Bxty _Bx;std___String_val_std___Simple_types_wchar_t____size_type _Mysize;std___String_val_std___Simple_types_wchar_t____size_type _Myres;};
struct std___String_val_std___Simple_types_char__ : std___Container_base {std___String_val_std___Simple_types_char_____Bxty _Bx;std___String_val_std___Simple_types_char____size_type _Mysize;std___String_val_std___Simple_types_char____size_type _Myres;};
typedef int _06ACCA0CDDC5718C62D5A4485E2E115D(FILE *, const qstring *, bgcolor_t, bgcolor_t);
typedef uint32 _5DBD8E863343736E5AD8CF23F5B72447(ea_t, asize_t, void *);
struct jump_pattern_t_vtbl; /* jump_pattern_t_vtbl {void (*process_delay_slot)(const jump_pattern_t *__hidden this, ea_t *, bool);bool (*equal_ops)(const jump_pattern_t *__hidden this, const op_t *x, const op_t *y);bool (*handle_mov)(jump_pattern_t *__hidden this, tracked_regs_t *);void (*check_spoiled)(const jump_pattern_t *__hidden this, tracked_regs_t *_regs);op_dtype_t (*extend_dtype)(const jump_pattern_t *__hidden this, const op_t *op);bool (*jpi0)(jump_pattern_t *__hidden this);bool (*jpi1)(jump_pattern_t *__hidden this);bool (*jpi2)(jump_pattern_t *__hidden this);bool (*jpi3)(jump_pattern_t *__hidden this);bool (*jpi4)(jump_pattern_t *__hidden this);bool (*jpi5)(jump_pattern_t *__hidden this);bool (*jpi6)(jump_pattern_t *__hidden this);bool (*jpi7)(jump_pattern_t *__hidden this);bool (*jpi8)(jump_pattern_t *__hidden this);bool (*jpi9)(jump_pattern_t *__hidden this);bool (*jpia)(jump_pattern_t *__hidden this);bool (*jpib)(jump_pattern_t *__hidden this);bool (*jpic)(jump_pattern_t *__hidden this);bool (*jpid)(jump_pattern_t *__hidden this);bool (*jpie)(jump_pattern_t *__hidden this);bool (*jpif)(jump_pattern_t *__hidden this);bool (*pre_jpi)(jump_pattern_t *__hidden this, int);void (*_del_jump_pattern_t)(jump_pattern_t *__hidden this);};*/
struct exception_info_t {uint code;uint32 flags;qstring name;qstring desc;};
struct textctrl_info_t {size_t cb;qstring text;uint16 flags;uint16 tabsize;};
struct strwinsetup_t {bytevec_t strtypes;sval_t minlen;uchar display_only_existing_strings;uchar only_7bit;uchar ignore_heads;};
struct simpleline_t {qstring line;color_t color;bgcolor_t bgcolor;};
struct sreg_range_t : range_t {sel_t val;uchar tag;};
struct data_type_t {int cbsize;void *ud;int props;const char *name;const char *menu_name;const char *hotkey;const char *asm_keyword;asize_t value_size;bool (*may_create_at)(void *, ea_t, size_t);asize_t (*calc_item_size)(void *, ea_t, asize_t);};
struct load_info_t {load_info_t *next;qstring dllname;qstring ftypename;qstring processor;filetype_t ftype;uint32 loader_flags;uint32 lflags;int pri;};
struct idp_desc_t {qstring path;time_t mtime;qstring family;idp_names_t names;bool is_script;bool checked;};
struct snapshot_t {qtime64_t id;uint16 flags;char desc[128];char filename[260];snapshots_t children;};
struct twinline_t {place_t *at;qstring line;color_t prefix_color;bgcolor_t bg_color;bool is_default;};
struct cliopts_t : qvector_cliopt_t_ {qstring prog_name;qstring epilog;cliopts_t__usage_printer_t *printer;};
struct excinfo_t {uint32 code;bool can_cont;ea_t ea;qstring info;};
struct lochist_t {void *ud;lochist_entry_t cur;netnode node;uint32 flags;};
struct modinfo_t {qstring name;ea_t base;asize_t size;ea_t rebase_to;};
struct refinfo_t {ea_t target;ea_t base;adiff_t tdelta;uint32 flags;};
struct ioport_t {ea_t address;qstring name;qstring cmt;ioport_bits_t bits;void *userdata;};
struct jvalue_t {jtype_t _type;union {int64 _num;qstring *_str;jobj_t *_obj;jarr_t *_arr;bool _bool;};};
struct relobj_t : bytevec_t {ea_t base;reloc_info_t ri;};
struct seh_t : try_handler_t {rangevec_t filter;ea_t seh_code;};
union cfgopt_t___275FC9DDBA9D1187AC5032610B4D4F63 {size_t buf_size;cfgopt_t__num_range_t num_range;uint32 bit_flags;cfgopt_t__params_t params;void *mbroff_obj;};
union jvalue_t___86FD308AB52B8F8AFE7E7C65068A43C3 {int64 _num;qstring *_str;jobj_t *_obj;jarr_t *_arr;bool _bool;};
struct custom_refinfo_handler_t {int32 cbsize;const char *name;const char *desc;int props;int (*gen_expr)(qstring *, qstring *, ea_t, int, const refinfo_t *, ea_t, adiff_t *, ea_t *, ea_t *, int);bool (*calc_reference_data)(ea_t *, ea_t *, ea_t, const refinfo_t *, adiff_t);void (*get_format)(qstring *);};
struct dynamic_register_set_t {register_info_vec_t ri_vec;qstrvec_t strvec;dynamic_register_set_t__const_char_vec_t classname_ptrs;qvector_qvector_const_char__P__ bit_strings_ptrs_vec;};
struct register_info_t {const char *name;uint32 flags;register_class_t register_class;op_dtype_t dtype;const char *const *bit_strings;uval_t default_bit_strings_mask;};
struct data_format_t {int32 cbsize;void *ud;int props;const char *name;const char *menu_name;const char *hotkey;asize_t value_size;int32 text_width;bool (*print)(void *, qstring *, const void *, asize_t, ea_t, int, int);bool (*scan)(void *, bytevec_t *, const char *, ea_t, int, qstring *);void (*analyze)(void *, ea_t, int);};
struct memory_info_t : range_t {qstring name;qstring sclass;ea_t sbase;uchar bitness;uchar perm;};
struct qflow_chart_t : cancellable_graph_t {qstring title;range_t bounds;func_t *pfn;int flags;qflow_chart_t__blocks_t blocks;int nproper;};
struct idc_value_t {char vtype;union {sval_t num;fpvalue_t e;idc_object_t *obj;int funcidx;void *pvoid;int64 i64;uchar reserve[24];};};
struct linearray_t {qstrvec_t lines;place_t *at;void *ud;color_t prefix_color;bgcolor_t bg_color;qstring extra;int dlnnum;};
struct argloc_t {argloc_type_t type;union {sval_t sval;uint32 reginfo;rrel_t *rrel;scattered_aloc_t *dist;void *custom;argloc_t__biggest_t biggest;};};
struct member_t {tid_t id;ea_t soff;ea_t eoff;flags_t flag;uint32 props;};
struct struc_t {tid_t id;uint32 memqty;member_t *members;ushort age;uint32 props;int32 ordinal;};
struct cli_t {size_t size;int32 flags;const char *sname;const char *lname;const char *hint;bool (*execute_line)(const char *);void *unused;bool (*keydown)(qstring *, int *, int *, int *, int);bool (*find_completions)(qstrvec_t *, int *, int *, const char *, int);};
union idc_value_t___D589224ACA3955A7C89073061DACDDE8 {sval_t num;fpvalue_t e;idc_object_t *obj;int funcidx;void *pvoid;int64 i64;uchar reserve[24];};
struct _37EC8ECBAB39934116D1B12D6D12C693 {uval_t frame;asize_t frsize;ushort frregs;asize_t argsize;asize_t fpd;bgcolor_t color;uint32 pntqty;stkpnt_t *points;int regvarqty;regvar_t *regvars;int llabelqty;llabel_t *llabels;int regargqty;regarg_t *regargs;int tailqty;range_t *tails;};
struct fixup_handler_t {int32 cbsize;const char *name;uint32 props;uint8 size;uint8 width;uint8 shift;uint8 rsrv4;uint32 reftype;bool (*apply)(const fixup_handler_t *, ea_t, ea_t, int, bool, const fixup_data_t *);uval_t (*get_value)(const fixup_handler_t *, ea_t);bool (*patch_value)(const fixup_handler_t *, ea_t, const fixup_data_t *);};
struct udt_member_t {uint64 offset;uint64 size;qstring name;qstring cmt;tinfo_t type;int effalign;uint32 tafld_bits;uchar fda;};
struct node_info_t {size_t cb;bgcolor_t bg_color;bgcolor_t frame_color;uint32 flags;ea_t ea;qstring text;};
struct extlang_t {size_t size;uint32 flags;int32 refcnt;const char *name;const char *fileext;syntax_highlighter_t *highlighter;bool (*compile_expr)(const char *, ea_t, const char *, qstring *);bool (*compile_file)(const char *, qstring *);bool (*call_func)(idc_value_t *, const char *, const idc_value_t[], size_t, qstring *);bool (*eval_expr)(idc_value_t *, ea_t, const char *, qstring *);bool (*eval_snippet)(const char *, qstring *);bool (*create_object)(idc_value_t *, const char *, const idc_value_t[], size_t, qstring *);bool (*get_attr)(idc_value_t *, const idc_value_t *, const char *);bool (*set_attr)(idc_value_t *, const char *, const idc_value_t *);bool (*call_method)(idc_value_t *, const idc_value_t *, const char *, const idc_value_t[], size_t, qstring *);bool (*load_procmod)(idc_value_t *, const char *, qstring *);bool (*unload_procmod)(const char *, qstring *);};
struct cfgopt_t {const char *name;union {void *ptr;size_t mbroff;const char *(*hnd)(lexer_t *, const token_t *, const token_t *);const char *(*hnd2)(lexer_t *, const token_t *, const token_t *, int64, int64);const char *(*hnd3)(lexer_t *, const token_t *, const token_t *, int64, int64, void *);};int flags;union {size_t buf_size;cfgopt_t__num_range_t num_range;uint32 bit_flags;cfgopt_t__params_t params;void *mbroff_obj;};};
struct qstatbuf {uint64 qst_dev;uint32 qst_ino;uint32 qst_mode;uint32 qst_nlink;uint32 qst_uid;uint32 qst_gid;uint64 qst_rdev;int64 qst_size;int32 qst_blksize;int32 qst_blocks;qtime64_t qst_atime;qtime64_t qst_mtime;qtime64_t qst_ctime;};
struct token_t {qstring str;lxtype type;sval_t num;union {bool unicode;bool is_unsigned;};union {fpvalue_t fnum;int64 i64;};};
struct srcinfo_provider_t_vtbl; /* srcinfo_provider_t_vtbl {bool (*enable_provider)(srcinfo_provider_t *__hidden this, bool enable);const char *(*set_options)(srcinfo_provider_t *__hidden this, const char *keyword, int value_type, const void *value);void (*add_module)(srcinfo_provider_t *__hidden this, const char *path, ea_t base, asize_t size);void (*del_module)(srcinfo_provider_t *__hidden this, ea_t base);void (*get_ready)(srcinfo_provider_t *__hidden this);int (*get_change_flags)(srcinfo_provider_t *__hidden this);source_item_iterator (*find_source_items)(srcinfo_provider_t *__hidden this, source_file_t *sf, int lnnum, int colnum);source_item_iterator (*find_source_items_0)(srcinfo_provider_t *__hidden this, ea_t ea, asize_t size, src_item_kind_t level, bool may_decompile);source_file_iterator (*create_file_iterator)(srcinfo_provider_t *__hidden this, const char *filename);source_item_iterator (*create_item_iterator)(srcinfo_provider_t *__hidden this, const source_file_t *sf);bool (*apply_module_info)(srcinfo_provider_t *__hidden this, const char *);source_item_ptr (*find_static_item)(srcinfo_provider_t *__hidden this, const char *name, ea_t ea);};*/
struct hexplace_gen_t_vtbl; /* hexplace_gen_t_vtbl {bool (*is_editing)(const hexplace_gen_t *__hidden this);bool (*is_editing_text)(const hexplace_gen_t *__hidden this);bool (*is_curitem_changed)(const hexplace_gen_t *__hidden this);bool (*is_edited_byte)(const hexplace_gen_t *__hidden this, ea_t ea, uint64 *out_value);hexplace_gen_t__byte_kind_t (*get_byte_value)(const hexplace_gen_t *__hidden this, ea_t ea, uint64 *out_value, bool *out_edited);void (*get_encoding)(const hexplace_gen_t *__hidden this, qstring *out);ea_t (*get_cur_item_ea)(const hexplace_gen_t *__hidden this);void (*get_cur_item_text)(const hexplace_gen_t *__hidden this, qstring *out);int (*get_alignment)(const hexplace_gen_t *__hidden this);int (*get_line_len)(const hexplace_gen_t *__hidden this, ea_t ea);int (*get_items_per_line)(const hexplace_gen_t *__hidden this);int (*get_bytes_per_item)(const hexplace_gen_t *__hidden this);int (*get_item_width)(const hexplace_gen_t *__hidden this, ea_t ea);hexplace_gen_t__data_kind_t (*get_data_kind)(const hexplace_gen_t *__hidden this);hexplace_gen_t__int_format_t (*get_int_format)(const hexplace_gen_t *__hidden this);bool (*has_central_separator)(const hexplace_gen_t *__hidden this);bool (*show_text)(const hexplace_gen_t *__hidden this);bool (*show_segaddr)(const hexplace_gen_t *__hidden this);int (*get_bitness)(const hexplace_gen_t *__hidden this);};*/
struct view_mouse_event_t {tcc_renderer_type_t rtype;uint32 x;uint32 y;view_mouse_event_t__location_t location;view_event_state_t state;vme_button_t button;renderer_pos_info_t renderer_pos;};
struct abstract_graph_t : gdl_graph_t {qstring title;bool rect_edges_made;layout_type_t current_layout;point_t circle_center;int circle_radius;ssize_t (*callback)(void *, int, va_list);void *callback_ud;};
struct func_type_data_t : funcargvec_t {int flags;tinfo_t rettype;argloc_t retloc;uval_t stkargs;reginfovec_t spoiled;cm_t cc;};
struct fixup_data_t {fixup_type_t type;uint32 flags;uval_t base;sel_t sel;ea_t off;adiff_t displacement;};
struct segment_t : range_t {uval_t name;uval_t sclass;uval_t orgbase;uchar align;uchar comb;uchar perm;uchar bitness;ushort flags;sel_t sel;sel_t defsr[16];uchar type;bgcolor_t color;};
struct loader_t {uint32 version;uint32 flags;int (*accept_file)(qstring *, qstring *, linput_t *, const char *);void (*load_file)(linput_t *, ushort, const char *);int (*save_file)(FILE *, const char *);int (*move_segm)(ea_t, ea_t, asize_t, const char *);int (*process_archive)(qstring *, linput_t *, qstring *, ushort *, const char *, const char *, qstring *);};
union opinfo_t {refinfo_t ri;tid_t tid;strpath_t path;int32 strtype;enum_const_t ec;custom_data_type_ids_t cd;};
struct source_item_t_vtbl; /* source_item_t_vtbl {void (*release)(source_item_t *__hidden this);source_file_iterator (*get_source_files)(source_item_t *__hidden this);bool (*get_name)(const source_item_t *__hidden this, qstring *buf);int (*get_lnnum)(const source_item_t *__hidden this);int (*get_end_lnnum)(const source_item_t *__hidden this);int (*get_colnum)(const source_item_t *__hidden this);int (*get_end_colnum)(const source_item_t *__hidden this);ea_t (*get_ea)(const source_item_t *__hidden this);asize_t (*get_size)(const source_item_t *__hidden this);bool (*get_item_bounds)(const source_item_t *__hidden this, rangeset_t *set);source_item_ptr (*get_parent)(const source_item_t *__hidden this, src_item_kind_t max_kind);source_item_iterator (*create_children_iterator)(source_item_t *__hidden this);bool (*get_hint)(const source_item_t *__hidden this, qstring *hint, const eval_ctx_t *ctx, int *nlines);bool (*evaluate)(const source_item_t *__hidden this, const eval_ctx_t *ctx, idc_value_t *res, qstring *errbuf);bool (*equals)(const source_item_t *__hidden this, const source_item_t *other);src_item_kind_t (*get_item_kind)(const source_item_t *__hidden this, const eval_ctx_t *);srcinfo_provider_t *(*get_provider)(const source_item_t *__hidden this);bool (*get_location)(const source_item_t *__hidden this, argloc_t *, const eval_ctx_t *);bool (*get_expr_tinfo)(const source_item_t *__hidden this, tinfo_t *tif);};*/
struct mutable_graph_t : abstract_graph_t {uval_t gid;intvec_t belongs;bytevec_t node_flags;array_of_intvec_t org_succs;array_of_intvec_t org_preds;array_of_intvec_t succs;array_of_intvec_t preds;mutable_graph_t__node_layout_t nodes;edge_infos_wrapper_t edges;};
struct outctx_base_t {outctx_base_t_vtbl *__vftable /*VFT*/;ea_t insn_ea;qstring outbuf;ssize_t regname_idx;int suspop;flags_t F;uval_t *outvalues;int outvalue_getn_flags;void *user_data;void *kern_data;qstrvec_t *lnar;int lnar_maxsize;int default_lnnum;qstring line_prefix;ssize_t prefix_len;int ctxflags;int ind0;ea_t cmt_ea;qstring cmtbuf;const char *cmtptr;color_t cmtcolor;};
struct switch_info_t {uint32 flags;ushort ncases;ea_t jumps;union {ea_t values;uval_t lowcase;};ea_t defjump;ea_t startea;int jcases;sval_t ind_lowcase;ea_t elbase;int regnum;op_dtype_t regdtype;uval_t custom;int version;ea_t expr_ea;eavec_t marks;};
struct func_t : range_t {uint64 flags;union {struct {uval_t frame;asize_t frsize;ushort frregs;asize_t argsize;asize_t fpd;bgcolor_t color;uint32 pntqty;stkpnt_t *points;int regvarqty;regvar_t *regvars;int llabelqty;llabel_t *llabels;int regargqty;regarg_t *regargs;int tailqty;range_t *tails;};struct {ea_t owner;int refqty;ea_t *referers;};};};
struct asm_t {uint32 flag;uint16 uflag;const char *name;help_t help;const char *const *header;const char *origin;const char *end;const char *cmnt;char ascsep;char accsep;const char *esccodes;const char *a_ascii;const char *a_byte;const char *a_word;const char *a_dword;const char *a_qword;const char *a_oword;const char *a_float;const char *a_double;const char *a_tbyte;const char *a_packreal;const char *a_dups;const char *a_bss;const char *a_equ;const char *a_seg;const char *a_curip;void (*out_func_header)(outctx_t *, func_t *);void (*out_func_footer)(outctx_t *, func_t *);const char *a_public;const char *a_weak;const char *a_extrn;const char *a_comdef;ssize_t (*get_type_name)(qstring *, flags_t, ea_t);const char *a_align;char lbrace;char rbrace;const char *a_mod;const char *a_band;const char *a_bor;const char *a_xor;const char *a_bnot;const char *a_shl;const char *a_shr;const char *a_sizeof_fmt;uint32 flag2;const char *cmnt2;const char *low8;const char *high8;const char *low16;const char *high16;const char *a_include_fmt;const char *a_vstruc_fmt;const char *a_rva;const char *a_yword;const char *a_zword;};
struct op_t {uchar n;optype_t type;char offb;char offo;uchar flags;op_dtype_t dtype;union {uint16 reg;uint16 phrase;};union {uval_t value;_0B605D7B00AC5C12C153272CF5BD15AF value_shorts;};union {ea_t addr;_0B605D7B00AC5C12C153272CF5BD15AF addr_shorts;};union {ea_t specval;_0B605D7B00AC5C12C153272CF5BD15AF specval_shorts;};char specflag1;char specflag2;char specflag3;char specflag4;};
struct simpleline_place_t_vtbl; /* simpleline_place_t_vtbl {void (*print)(const simpleline_place_t *__hidden this, qstring *buf, void *ud);uval_t (*touval)(const simpleline_place_t *__hidden this, void *ud);place_t *(*clone)(const simpleline_place_t *__hidden this);void (*copyfrom)(simpleline_place_t *__hidden this, const place_t *from);place_t *(*makeplace)(const simpleline_place_t *__hidden this, void *ud, uval_t x, int _lnnum);int (*compare)(const simpleline_place_t *__hidden this, const place_t *t2);void (*adjust)(simpleline_place_t *__hidden this, void *ud);bool (*prev)(simpleline_place_t *__hidden this, void *ud);bool (*next)(simpleline_place_t *__hidden this, void *ud);bool (*beginning)(const simpleline_place_t *__hidden this, void *ud);bool (*ending)(const simpleline_place_t *__hidden this, void *ud);int (*generate)(const simpleline_place_t *__hidden this, qstrvec_t *_out, int *_out_lnnum, color_t *_out_pfx_color, bgcolor_t *_out_bg_color, void *_ud, int _max);void (*serialize)(const simpleline_place_t *__hidden this, bytevec_t *out);bool (*deserialize)(simpleline_place_t *__hidden this, const uchar **pptr, const uchar *end);int (*id)(const simpleline_place_t *__hidden this);const char *(*name)(const simpleline_place_t *__hidden this);ea_t (*toea)(const simpleline_place_t *__hidden this);bool (*rebase)(simpleline_place_t *__hidden this, const segm_move_infos_t *infos);place_t *(*enter)(const simpleline_place_t *__hidden this, uint32 *out_flags);void (*leave)(const simpleline_place_t *__hidden this, uint32 flags);int (*compare2)(const simpleline_place_t *__hidden this, const place_t *t2, void *ud);};*/
struct user_graph_place_t_vtbl; /* user_graph_place_t_vtbl {void (*print)(const place_t *__hidden this, qstring *vout, void *ud);uval_t (*touval)(const place_t *__hidden this, void *ud);place_t *(*clone)(const place_t *__hidden this);void (*copyfrom)(place_t *__hidden this, const place_t *from);place_t *(*makeplace)(const place_t *__hidden this, void *ud, uval_t x, int lnnum);int (*compare)(const place_t *__hidden this, const place_t *t2);void (*adjust)(place_t *__hidden this, void *ud);bool (*prev)(place_t *__hidden this, void *ud);bool (*next)(place_t *__hidden this, void *ud);bool (*beginning)(const place_t *__hidden this, void *ud);bool (*ending)(const place_t *__hidden this, void *ud);int (*generate)(const place_t *__hidden this, qstrvec_t *out, int *out_deflnnum, color_t *out_pfx_color, bgcolor_t *out_bgcolor, void *ud, int maxsize);void (*serialize)(const place_t *__hidden this, bytevec_t *out);bool (*deserialize)(place_t *__hidden this, const uchar **pptr, const uchar *end);int (*id)(const place_t *__hidden this);const char *(*name)(const place_t *__hidden this);ea_t (*toea)(const place_t *__hidden this);bool (*rebase)(place_t *__hidden this, const segm_move_infos_t *);place_t *(*enter)(const place_t *__hidden this, uint32 *);void (*leave)(const place_t *__hidden this, uint32);int (*compare2)(const place_t *__hidden this, const place_t *t2, void *);};*/
struct structplace_t_vtbl; /* structplace_t_vtbl {void (*print)(const structplace_t *__hidden this, qstring *buf, void *ud);uval_t (*touval)(const structplace_t *__hidden this, void *ud);place_t *(*clone)(const structplace_t *__hidden this);void (*copyfrom)(structplace_t *__hidden this, const place_t *from);place_t *(*makeplace)(const structplace_t *__hidden this, void *ud, uval_t x, int _lnnum);int (*compare)(const structplace_t *__hidden this, const place_t *t2);void (*adjust)(structplace_t *__hidden this, void *ud);bool (*prev)(structplace_t *__hidden this, void *ud);bool (*next)(structplace_t *__hidden this, void *ud);bool (*beginning)(const structplace_t *__hidden this, void *ud);bool (*ending)(const structplace_t *__hidden this, void *ud);int (*generate)(const structplace_t *__hidden this, qstrvec_t *_out, int *_out_lnnum, color_t *_out_pfx_color, bgcolor_t *_out_bg_color, void *_ud, int _max);void (*serialize)(const structplace_t *__hidden this, bytevec_t *out);bool (*deserialize)(structplace_t *__hidden this, const uchar **pptr, const uchar *end);int (*id)(const structplace_t *__hidden this);const char *(*name)(const structplace_t *__hidden this);ea_t (*toea)(const structplace_t *__hidden this);bool (*rebase)(structplace_t *__hidden this, const segm_move_infos_t *infos);place_t *(*enter)(const structplace_t *__hidden this, uint32 *out_flags);void (*leave)(const structplace_t *__hidden this, uint32 flags);int (*compare2)(const structplace_t *__hidden this, const place_t *t2, void *ud);};*/
struct enumplace_t_vtbl; /* enumplace_t_vtbl {void (*print)(const enumplace_t *__hidden this, qstring *buf, void *ud);uval_t (*touval)(const enumplace_t *__hidden this, void *ud);place_t *(*clone)(const enumplace_t *__hidden this);void (*copyfrom)(enumplace_t *__hidden this, const place_t *from);place_t *(*makeplace)(const enumplace_t *__hidden this, void *ud, uval_t x, int _lnnum);int (*compare)(const enumplace_t *__hidden this, const place_t *t2);void (*adjust)(enumplace_t *__hidden this, void *ud);bool (*prev)(enumplace_t *__hidden this, void *ud);bool (*next)(enumplace_t *__hidden this, void *ud);bool (*beginning)(const enumplace_t *__hidden this, void *ud);bool (*ending)(const enumplace_t *__hidden this, void *ud);int (*generate)(const enumplace_t *__hidden this, qstrvec_t *_out, int *_out_lnnum, color_t *_out_pfx_color, bgcolor_t *_out_bg_color, void *_ud, int _max);void (*serialize)(const enumplace_t *__hidden this, bytevec_t *out);bool (*deserialize)(enumplace_t *__hidden this, const uchar **pptr, const uchar *end);int (*id)(const enumplace_t *__hidden this);const char *(*name)(const enumplace_t *__hidden this);ea_t (*toea)(const enumplace_t *__hidden this);bool (*rebase)(enumplace_t *__hidden this, const segm_move_infos_t *infos);place_t *(*enter)(const enumplace_t *__hidden this, uint32 *out_flags);void (*leave)(const enumplace_t *__hidden this, uint32 flags);int (*compare2)(const enumplace_t *__hidden this, const place_t *t2, void *ud);};*/
struct hexplace_t_vtbl; /* hexplace_t_vtbl {void (*print)(const hexplace_t *__hidden this, qstring *buf, void *ud);uval_t (*touval)(const hexplace_t *__hidden this, void *ud);place_t *(*clone)(const hexplace_t *__hidden this);void (*copyfrom)(hexplace_t *__hidden this, const place_t *from);place_t *(*makeplace)(const hexplace_t *__hidden this, void *ud, uval_t x, int _lnnum);int (*compare)(const hexplace_t *__hidden this, const place_t *t2);void (*adjust)(hexplace_t *__hidden this, void *ud);bool (*prev)(hexplace_t *__hidden this, void *ud);bool (*next)(hexplace_t *__hidden this, void *ud);bool (*beginning)(const hexplace_t *__hidden this, void *ud);bool (*ending)(const hexplace_t *__hidden this, void *ud);int (*generate)(const hexplace_t *__hidden this, qstrvec_t *_out, int *_out_lnnum, color_t *_out_pfx_color, bgcolor_t *_out_bg_color, void *_ud, int _max);void (*serialize)(const hexplace_t *__hidden this, bytevec_t *out);bool (*deserialize)(hexplace_t *__hidden this, const uchar **pptr, const uchar *end);int (*id)(const hexplace_t *__hidden this);const char *(*name)(const hexplace_t *__hidden this);ea_t (*toea)(const hexplace_t *__hidden this);bool (*rebase)(hexplace_t *__hidden this, const segm_move_infos_t *infos);place_t *(*enter)(const hexplace_t *__hidden this, uint32 *out_flags);void (*leave)(const hexplace_t *__hidden this, uint32 flags);int (*compare2)(const hexplace_t *__hidden this, const place_t *t2, void *ud);};*/
struct idaplace_t_vtbl; /* idaplace_t_vtbl {void (*print)(const idaplace_t *__hidden this, qstring *buf, void *ud);uval_t (*touval)(const idaplace_t *__hidden this, void *ud);place_t *(*clone)(const idaplace_t *__hidden this);void (*copyfrom)(idaplace_t *__hidden this, const place_t *from);place_t *(*makeplace)(const idaplace_t *__hidden this, void *ud, uval_t x, int _lnnum);int (*compare)(const idaplace_t *__hidden this, const place_t *t2);void (*adjust)(idaplace_t *__hidden this, void *ud);bool (*prev)(idaplace_t *__hidden this, void *ud);bool (*next)(idaplace_t *__hidden this, void *ud);bool (*beginning)(const idaplace_t *__hidden this, void *ud);bool (*ending)(const idaplace_t *__hidden this, void *ud);int (*generate)(const idaplace_t *__hidden this, qstrvec_t *_out, int *_out_lnnum, color_t *_out_pfx_color, bgcolor_t *_out_bg_color, void *_ud, int _max);void (*serialize)(const idaplace_t *__hidden this, bytevec_t *out);bool (*deserialize)(idaplace_t *__hidden this, const uchar **pptr, const uchar *end);int (*id)(const idaplace_t *__hidden this);const char *(*name)(const idaplace_t *__hidden this);ea_t (*toea)(const idaplace_t *__hidden this);bool (*rebase)(idaplace_t *__hidden this, const segm_move_infos_t *infos);place_t *(*enter)(const idaplace_t *__hidden this, uint32 *out_flags);void (*leave)(const idaplace_t *__hidden this, uint32 flags);int (*compare2)(const idaplace_t *__hidden this, const place_t *t2, void *ud);};*/
struct place_t_vtbl; /* place_t_vtbl {void (*print)(const place_t *__hidden this, qstring *vout, void *ud);uval_t (*touval)(const place_t *__hidden this, void *ud);place_t *(*clone)(const place_t *__hidden this);void (*copyfrom)(place_t *__hidden this, const place_t *from);place_t *(*makeplace)(const place_t *__hidden this, void *ud, uval_t x, int lnnum);int (*compare)(const place_t *__hidden this, const place_t *t2);void (*adjust)(place_t *__hidden this, void *ud);bool (*prev)(place_t *__hidden this, void *ud);bool (*next)(place_t *__hidden this, void *ud);bool (*beginning)(const place_t *__hidden this, void *ud);bool (*ending)(const place_t *__hidden this, void *ud);int (*generate)(const place_t *__hidden this, qstrvec_t *out, int *out_deflnnum, color_t *out_pfx_color, bgcolor_t *out_bgcolor, void *ud, int maxsize);void (*serialize)(const place_t *__hidden this, bytevec_t *out);bool (*deserialize)(place_t *__hidden this, const uchar **pptr, const uchar *end);int (*id)(const place_t *__hidden this);const char *(*name)(const place_t *__hidden this);ea_t (*toea)(const place_t *__hidden this);bool (*rebase)(place_t *__hidden this, const segm_move_infos_t *);place_t *(*enter)(const place_t *__hidden this, uint32 *);void (*leave)(const place_t *__hidden this, uint32);int (*compare2)(const place_t *__hidden this, const place_t *t2, void *);};*/
union value_u {uint8 v_char;uint16 v_short;uint32 v_long;uint64 v_int64;uval_t v_uval;value_u__dq_t _dq;value_u__dt_t dt;value_u__d128_t d128;uint8 byte16[16];uint32 dword3[3];};
struct outctx_base_t_vtbl; /* outctx_base_t_vtbl {void (*_del_outctx_base_t)(outctx_base_t *__hidden this);void (*out_vprintf)(outctx_base_t *__hidden this, const char *format, va_list va);flags_t (*out_value)(outctx_base_t *__hidden this, const op_t *x, int outf);void (*out_symbol)(outctx_base_t *__hidden this, char c);void (*out_chars)(outctx_base_t *__hidden this, char c, int n);void (*add_spaces)(outctx_base_t *__hidden this, qstring *buf, ssize_t len);void (*out_line)(outctx_base_t *__hidden this, const char *str, color_t color);void (*out_tagon)(outctx_base_t *__hidden this, color_t tag);void (*out_tagoff)(outctx_base_t *__hidden this, color_t tag);void (*out_addr_tag)(outctx_base_t *__hidden this, ea_t ea);void (*out_colored_register_line)(outctx_base_t *__hidden this, const char *str);void (*out_char)(outctx_base_t *__hidden this, char c);void (*out_btoa)(outctx_base_t *__hidden this, uval_t Word, char radix);void (*out_long)(outctx_base_t *__hidden this, sval_t v, char radix);bool (*out_name_expr)(outctx_base_t *__hidden this, const op_t *x, ea_t ea, adiff_t off);bool (*flush_outbuf)(outctx_base_t *__hidden this, int indent);bool (*flush_buf)(outctx_base_t *__hidden this, const char *buf, int indent);int (*term_outctx)(outctx_base_t *__hidden this, const char *prefix);bool (*gen_vprintf)(outctx_base_t *__hidden this, int indent, const char *format, va_list va);bool (*gen_empty_line)(outctx_base_t *__hidden this);bool (*gen_border_line)(outctx_base_t *__hidden this, bool solid);bool (*gen_colored_cmt_line_v)(outctx_base_t *__hidden this, color_t color, const char *format, va_list va);bool (*gen_block_cmt)(outctx_base_t *__hidden this, const char *cmt, color_t color);void (*setup_outctx)(outctx_base_t *__hidden this, const char *prefix, int makeline_flags);ssize_t (*retrieve_cmt)(outctx_base_t *__hidden this);ssize_t (*retrieve_name)(outctx_base_t *__hidden this, qstring *, color_t *);bool (*gen_xref_lines)(outctx_base_t *__hidden this);void (*init_lines_array)(outctx_base_t *__hidden this, qstrvec_t *answers, int maxsize);member_t *(*get_stkvar)(outctx_base_t *__hidden this, const op_t *, uval_t, sval_t *, int *);bool (*flush_and_reinit)(outctx_base_t *__hidden this);void (*append_user_prefix)(outctx_base_t *__hidden this, const char *, int);void (*add_aux_prefix)(outctx_base_t *__hidden this, const char *, int);void (*out_label_addr_tag)(outctx_base_t *__hidden this);void (*out_aux_cmts)(outctx_base_t *__hidden this);};*/
union callui_t {bool cnd;char i8;int i;__int16 i16;int32 i32;uchar u8;ushort u16;uint32 u32;char *cptr;void *vptr;ssize_t ssize;func_t *fptr;segment_t *segptr;struc_t *strptr;plugin_t *pluginptr;sreg_range_t *sraptr;};
struct idainfo {char tag[3];char zero;ushort version;char procname[16];ushort s_genflags;uint32 lflags;uint32 database_change_count;ushort filetype;ushort ostype;ushort apptype;uchar asmtype;uchar specsegs;uint32 af;uint32 af2;uval_t baseaddr;sel_t start_ss;sel_t start_cs;ea_t start_ip;ea_t start_ea;ea_t start_sp;ea_t main;ea_t min_ea;ea_t max_ea;ea_t omin_ea;ea_t omax_ea;ea_t lowoff;ea_t highoff;uval_t maxref;range_t privrange;sval_t netdelta;uchar xrefnum;uchar type_xrefnum;uchar refcmtnum;uchar s_xrefflag;ushort max_autoname_len;char nametype;uint32 short_demnames;uint32 long_demnames;uchar demnames;uchar listnames;uchar indent;uchar cmt_indent;ushort margin;ushort lenxref;uint32 outflags;uchar s_cmtflg;uchar s_limiter;__int16 bin_prefix_size;uchar s_prefflag;uchar strlit_flags;uchar strlit_break;char strlit_zeroes;int32 strtype;char strlit_pref[16];uval_t strlit_sernum;uval_t datatypes;compiler_info_t cc;uint32 abibits;uint32 appcall_options;uint32 padding;};
struct outctx_t_vtbl; /* outctx_t_vtbl {void (*_del_outctx_t)(outctx_t *__hidden this);void (*out_vprintf)(outctx_base_t *__hidden this, const char *format, va_list va);flags_t (*out_value)(outctx_base_t *__hidden this, const op_t *x, int outf);void (*out_symbol)(outctx_base_t *__hidden this, char c);void (*out_chars)(outctx_base_t *__hidden this, char c, int n);void (*add_spaces)(outctx_base_t *__hidden this, qstring *buf, ssize_t len);void (*out_line)(outctx_base_t *__hidden this, const char *str, color_t color);void (*out_tagon)(outctx_base_t *__hidden this, color_t tag);void (*out_tagoff)(outctx_base_t *__hidden this, color_t tag);void (*out_addr_tag)(outctx_base_t *__hidden this, ea_t ea);void (*out_colored_register_line)(outctx_base_t *__hidden this, const char *str);void (*out_char)(outctx_base_t *__hidden this, char c);void (*out_btoa)(outctx_base_t *__hidden this, uval_t Word, char radix);void (*out_long)(outctx_base_t *__hidden this, sval_t v, char radix);bool (*out_name_expr)(outctx_base_t *__hidden this, const op_t *x, ea_t ea, adiff_t off);bool (*flush_outbuf)(outctx_base_t *__hidden this, int indent);bool (*flush_buf)(outctx_base_t *__hidden this, const char *buf, int indent);int (*term_outctx)(outctx_base_t *__hidden this, const char *prefix);bool (*gen_vprintf)(outctx_base_t *__hidden this, int indent, const char *format, va_list va);bool (*gen_empty_line)(outctx_base_t *__hidden this);bool (*gen_border_line)(outctx_base_t *__hidden this, bool solid);bool (*gen_colored_cmt_line_v)(outctx_base_t *__hidden this, color_t color, const char *format, va_list va);bool (*gen_block_cmt)(outctx_base_t *__hidden this, const char *cmt, color_t color);void (*setup_outctx)(outctx_t *__hidden this, const char *prefix, int flags);ssize_t (*retrieve_cmt)(outctx_t *__hidden this);ssize_t (*retrieve_name)(outctx_t *__hidden this, qstring *, color_t *);bool (*gen_xref_lines)(outctx_t *__hidden this);void (*init_lines_array)(outctx_base_t *__hidden this, qstrvec_t *answers, int maxsize);member_t *(*get_stkvar)(outctx_base_t *__hidden this, const op_t *, uval_t, sval_t *, int *);bool (*flush_and_reinit)(outctx_base_t *__hidden this);void (*append_user_prefix)(outctx_base_t *__hidden this, const char *, int);void (*add_aux_prefix)(outctx_base_t *__hidden this, const char *, int);void (*out_label_addr_tag)(outctx_base_t *__hidden this);void (*out_aux_cmts)(outctx_base_t *__hidden this);void (*out_mnem)(outctx_t *__hidden this, int width, const char *postfix);void (*out_custom_mnem)(outctx_t *__hidden this, const char *mnem, int width, const char *postfix);void (*out_mnemonic)(outctx_t *__hidden this);bool (*out_one_operand)(outctx_t *__hidden this, int n);size_t (*get_immvals)(outctx_t *__hidden this, uval_t *out, int i);void (*out_immchar_cmts)(outctx_t *__hidden this);void (*gen_func_header)(outctx_t *__hidden this, func_t *pfn);void (*gen_func_footer)(outctx_t *__hidden this, const func_t *pfn);void (*out_data)(outctx_t *__hidden this, bool analyze_only);bool (*out_specea)(outctx_t *__hidden this, uchar segtype);void (*gen_header_extra)(outctx_t *__hidden this);void (*gen_header)(outctx_t *__hidden this, int flags, const char *proc_name, const char *proc_flavour);};*/
typedef std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_ std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_type;
typedef std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__ std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_type;
typedef _qstring_char_ std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___key_type;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____value_type std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type;
typedef const std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type *std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference;
typedef std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____value_type std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_____value_type;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____value_type std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type;
typedef std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_____value_type *std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_____pointer;
typedef std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type *std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____pointer std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____value_type std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type;
typedef const std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type *std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference;
typedef std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_ std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___value_type;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____value_type std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type;
typedef std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type *std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference;
typedef std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_ std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____value_type;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____pointer std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer;
typedef std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____value_type *std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____value_type std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type;
typedef const std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type *std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference;
typedef std__allocator_std___Tree_node_std__pair_const_int__int___void__P____value_type std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_int__int___void__P_____value_type;
typedef std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____const_pointer std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____const_pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____value_type std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type;
typedef std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_int__int___void__P_____value_type *std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_int__int___void__P_____pointer;
typedef std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type *std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____pointer std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____value_type std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type;
typedef const std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type *std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____value_type std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type;
typedef std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type *std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference;
typedef std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__ std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___value_type;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____pointer std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer;
typedef std___Tset_traits_int__std__less_int___std__allocator_int___false___value_compare std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____value_compare;
typedef std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__ std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____value_type;
typedef std___String_val_std___Simple_types_char16_t____difference_type std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____difference_type;
typedef std___String_val_std___Simple_types_char32_t____difference_type std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____difference_type;
typedef std___String_val_std___Simple_types_wchar_t____difference_type std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____difference_type;
typedef std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____Node *std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____Nodeptr;
typedef std___Tree_val_std___Tree_simple_types_int____const_pointer std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____pointer;
typedef std__allocator_std___Tree_node_int__void__P____value_type std___Default_allocator_traits_std__allocator_std___Tree_node_int__void__P_____value_type;
typedef std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____value_type *std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____pointer;
typedef std___String_val_std___Simple_types_char____difference_type std___String_const_iterator_std___String_val_std___Simple_types_char_____difference_type;
typedef std___Default_allocator_traits_std__allocator_std___Tree_node_int__void__P_____value_type *std___Default_allocator_traits_std__allocator_std___Tree_node_int__void__P_____pointer;
typedef std___String_val_std___Simple_types_char16_t____difference_type std___String_iterator_std___String_val_std___Simple_types_char16_t_____difference_type;
typedef std___String_val_std___Simple_types_char32_t____difference_type std___String_iterator_std___String_val_std___Simple_types_char32_t_____difference_type;
typedef std___String_val_std___Simple_types_wchar_t____difference_type std___String_iterator_std___String_val_std___Simple_types_wchar_t_____difference_type;
typedef std___String_val_std___Simple_types_char16_t____const_pointer std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____pointer;
typedef std___String_val_std___Simple_types_char32_t____const_pointer std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____pointer;
typedef std___String_val_std___Simple_types_wchar_t____const_pointer std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____pointer;
typedef std___String_val_std___Simple_types_char____difference_type std___String_iterator_std___String_val_std___Simple_types_char_____difference_type;
typedef std___Simple_types_std__pair_const_int__int____const_pointer std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____const_pointer;
typedef std___String_val_std___Simple_types_char____const_pointer std___String_const_iterator_std___String_val_std___Simple_types_char_____pointer;
typedef std___Tree_val_std___Tree_simple_types_int____const_pointer std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____pointer;
typedef std___String_val_std___Simple_types_char16_t____pointer std___String_iterator_std___String_val_std___Simple_types_char16_t_____pointer;
typedef std___String_val_std___Simple_types_char32_t____pointer std___String_iterator_std___String_val_std___Simple_types_char32_t_____pointer;
typedef std___String_val_std___Simple_types_wchar_t____pointer std___String_iterator_std___String_val_std___Simple_types_wchar_t_____pointer;
typedef std___String_val_std___Simple_types_char____pointer std___String_iterator_std___String_val_std___Simple_types_char_____pointer;
typedef _qstring_char_ std__map__qstring_char___qrefcnt_t_refcnted_regex_t____key_type;
typedef std___Tree_simple_types_std__pair_const_int__int_____Node *std___Tree_simple_types_std__pair_const_int__int_____Nodeptr;
typedef std___String_val_std___Simple_types_char16_t__ std__basic_string_char16_t____Scary_val;
typedef std___String_val_std___Simple_types_char32_t__ std__basic_string_char32_t____Scary_val;
typedef std___Tree_simple_types_int____Node *std___Tree_simple_types_int____Nodeptr;
typedef std___String_val_std___Simple_types_wchar_t__ std__basic_string_wchar_t____Scary_val;
struct ida_syntax_highlighter_t__multicmt_t {qstring open_multicmt;qstring close_multicmt;};
typedef std___String_val_std___Simple_types_char__ std__basic_string_char____Scary_val;
typedef bool _F6553CF4C635466D7A900A328CA0BFD3(TWidget *, const place_t *, uval_t *, void *);
struct choose_ioport_parser_t_vtbl; /* choose_ioport_parser_t_vtbl {bool (*parse)(choose_ioport_parser_t *__hidden this, qstring *param, const char *line);};*/
struct std__bad_array_new_length : std__bad_alloc {};
union action_ctx_base_source_t {chooser_base_t *chooser;};
struct altadjust_visitor_t_vtbl; /* altadjust_visitor_t_vtbl {bool (*should_skip)(altadjust_visitor_t *__hidden this, nodeidx_t ea);};*/
struct func_tail_iterator_t {func_t *pfn;int idx;range_t seglim;};
struct syntax_highlighter_t {syntax_highlighter_t_vtbl *__vftable /*VFT*/;void (*highlight_block)(void *, highlighter_cbs_t *, const qstring *);};
struct idc_resolver_t_vtbl; /* idc_resolver_t_vtbl {uval_t (*resolve_name)(idc_resolver_t *__hidden this, const char *name);};*/
struct instant_dbgopts_t {qstring debmod;qstring env;qstring host;qstring pass;int port;int pid;int event_id;bool attach;};
typedef std__streampos std__u16streampos;
typedef std__streampos std__u32streampos;
struct channel_redir_t {int fd;qstring file;int flags;int start;int length;};
struct chooser_multi_t : chooser_base_t {};
typedef std__streampos std__wstreampos;
struct ignore_micro_t {netnode ignore_micro;};
struct bpt_visitor_t {bpt_visitor_t_vtbl *__vftable /*VFT*/;range_t range;const char *name;};
struct ioport_bit_t {qstring name;qstring cmt;};
struct direntry_t {uval_t idx;bool isdir;};
struct idp_name_t {qstring lname;qstring sname;bool hidden;};
struct regmatch_t {regoff_t rm_so;regoff_t rm_eo;};
struct chooser_t : chooser_base_t {};
struct impinfo_t {const char *dllname;void (*func)(uval_t, const char *, uval_t);uval_t node;};
typedef uval_t diridx_t;
struct regvar_t : range_t {char *canon;char *user;char *cmt;};
typedef uval_t bmask_t;
typedef uval_t const_t;
typedef uval_t inode_t;
typedef tid_t enum_t;
struct rrel_t {sval_t off;int reg;};
struct std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_ {std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____Nodeptr _Left;std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____Nodeptr _Parent;std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____Nodeptr _Right;char _Color;char _Isnil;std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___value_type _Myval;};
struct std___Compressed_pair_std__allocator_char16_t___std___String_val_std___Simple_types_char16_t____true_ : std__allocator_char16_t_ {std___String_val_std___Simple_types_char16_t__ _Myval2;};
struct std___Compressed_pair_std__allocator_char32_t___std___String_val_std___Simple_types_char32_t____true_ : std__allocator_char32_t_ {std___String_val_std___Simple_types_char32_t__ _Myval2;};
struct std___Compressed_pair_std__allocator_wchar_t___std___String_val_std___Simple_types_wchar_t____true_ : std__allocator_wchar_t_ {std___String_val_std___Simple_types_wchar_t__ _Myval2;};
struct std___Compressed_pair_std__allocator_char___std___String_val_std___Simple_types_char____true_ : std__allocator_char_ {std___String_val_std___Simple_types_char__ _Myval2;};
struct std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_ {std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____Nodeptr _Left;std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____Nodeptr _Parent;std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____Nodeptr _Right;char _Color;char _Isnil;std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___value_type _Myval;};
struct std___String_const_iterator_std___String_val_std___Simple_types_char16_t___ : std___Iterator_base {std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____pointer _Ptr;};
struct std___String_const_iterator_std___String_val_std___Simple_types_char32_t___ : std___Iterator_base {std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____pointer _Ptr;};
struct std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___ : std___Iterator_base {std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____pointer _Ptr;};
struct std___String_const_iterator_std___String_val_std___Simple_types_char___ : std___Iterator_base {std___String_const_iterator_std___String_val_std___Simple_types_char_____pointer _Ptr;};
struct enum_member_visitor_t_vtbl; /* enum_member_visitor_t_vtbl {int (*visit_enum_member)(enum_member_visitor_t *__hidden this, const_t cid, uval_t value);};*/
struct func_item_iterator_t {func_tail_iterator_t fti;ea_t ea;};
struct dirtree_cursor_t {diridx_t parent;size_t rank;};
struct fixup_info_t {ea_t ea;fixup_data_t fd;};
struct idc_global_t {qstring name;idc_value_t value;};
struct argpart_t : argloc_t {ushort off;ushort size;};
struct kvp_t {qstring key;jvalue_t value;};
struct dirspec_t_vtbl; /* dirspec_t_vtbl {void (*_del_dirspec_t)(dirspec_t *__hidden this);bool (*get_name)(dirspec_t *__hidden this, qstring *out, inode_t inode, uint32 name_flags);inode_t (*get_inode)(dirspec_t *__hidden this, const char *dirpath, const char *name);qstring (*get_attrs)(const dirspec_t *__hidden this, inode_t inode);bool (*rename_inode)(dirspec_t *__hidden this, inode_t inode, const char *newname);void (*unlink_inode)(dirspec_t *__hidden this, inode_t inode);};*/
struct procmod_t : event_listener_t, ignore_micro_t {processor_t *ph;asm_t *ash;size_t procmod_flags;size_t reserved;};
struct valinfo_t {argloc_t loc;qstring label;tinfo_t type;};
union cfgopt_t___072F956EBF1D0FA65345CBEA02E26438 {void *ptr;size_t mbroff;const char *(*hnd)(lexer_t *, const token_t *, const token_t *);const char *(*hnd2)(lexer_t *, const token_t *, const token_t *, int64, int64);const char *(*hnd3)(lexer_t *, const token_t *, const token_t *, int64, int64, void *);};
struct custloc_desc_t {size_t cbsize;const char *name;void (*copy)(argloc_t *, const argloc_t *);void (*cleanup)(argloc_t *);bool (*verify)(const argloc_t *, int, const rangeset_t *, bool);int (*compare)(const argloc_t *, const argloc_t *);size_t (*print)(char *, size_t, const argloc_t *, asize_t, int);bool (*deref_field)(argloc_t *, tinfo_t *, const argloc_t *, const tinfo_t *, asize_t, const qstring *);bool (*deref_array)(argloc_t *, tinfo_t *, const argloc_t *, const tinfo_t *, asize_t, asize_t);bool (*deref_ptr)(argloc_t *, tinfo_t *, const argloc_t *);bool (*read_value)(value_u *, const argloc_t *, int, const tinfo_t *);bool (*write_value)(const argloc_t *, const idc_value_t *, const value_u *, int, qstring *);asize_t (*calc_string_length)(const argloc_t *, const tinfo_t *);bool (*get_string)(qstring *, tinfo_t *, const argloc_t *, const tinfo_t *, size_t);asize_t (*guess_array_size)(const argloc_t *, const tinfo_t *);bool (*get_tinfo)(tinfo_t *, const argloc_t *);int (*calc_number_of_children)(const argloc_t *, const tinfo_t *);size_t (*print_ptr_value)(char *, size_t, bool *, const argloc_t *, const tinfo_t *);};
struct funcarg_t {argloc_t argloc;qstring name;qstring cmt;tinfo_t type;uint32 flags;};
struct printop_t {flags_t flags;opinfo_t ti;uchar features;int suspop;aflags_t aflags;};
union argloc_t___F4A6A313BC9EA9730D72EF3AFDF761E4 {sval_t sval;uint32 reginfo;rrel_t *rrel;scattered_aloc_t *dist;void *custom;argloc_t__biggest_t biggest;};
struct enumplace_t : place_t {size_t idx;bmask_t bmask;uval_t value;uchar serial;};
struct insn_t {ea_t cs;ea_t ip;ea_t ea;uint16 itype;uint16 size;union {uint32 auxpref;uint16 auxpref_u16[2];uint8 auxpref_u8[4];};char segpref;char insnpref;int16 flags;op_t ops[8];};
struct chooser_multi_t_vtbl; /* chooser_multi_t_vtbl {void (*_del_chooser_multi_t)(chooser_multi_t *__hidden this);void *(*get_chooser_obj)(chooser_base_t *__hidden this);const void *(*get_obj_id)(const chooser_base_t *__hidden this, size_t *len);bool (*init)(chooser_base_t *__hidden this);size_t (*get_count)(const chooser_base_t *__hidden this);void (*get_row)(const chooser_base_t *__hidden this, qstrvec_t *out, int *out_icon, chooser_item_attrs_t *out_attrs, size_t n);ea_t (*get_ea)(const chooser_base_t *__hidden this, size_t);void (*closed)(chooser_base_t *__hidden this);void (*get_item_index)(const chooser_multi_t *__hidden this, sizevec_t *sel, const void *item_data);chooser_base_t__cbres_t (*ins)(chooser_multi_t *__hidden this, sizevec_t *);chooser_base_t__cbres_t (*del)(chooser_multi_t *__hidden this, sizevec_t *);chooser_base_t__cbres_t (*edit)(chooser_multi_t *__hidden this, sizevec_t *);chooser_base_t__cbres_t (*enter)(chooser_multi_t *__hidden this, sizevec_t *sel);chooser_base_t__cbres_t (*refresh)(chooser_multi_t *__hidden this, sizevec_t *);void (*select)(const chooser_multi_t *__hidden this, const sizevec_t *);dirtree_t *(*get_dirtree)(chooser_multi_t *__hidden this);inode_t (*index_to_inode)(const chooser_multi_t *__hidden this, size_t);diffpos_t (*index_to_diffpos)(const chooser_multi_t *__hidden this, size_t);};*/
struct chooser_t_vtbl; /* chooser_t_vtbl {void (*_del_chooser_t)(chooser_t *__hidden this);void *(*get_chooser_obj)(chooser_base_t *__hidden this);const void *(*get_obj_id)(const chooser_base_t *__hidden this, size_t *len);bool (*init)(chooser_base_t *__hidden this);size_t (*get_count)(const chooser_base_t *__hidden this);void (*get_row)(const chooser_base_t *__hidden this, qstrvec_t *out, int *out_icon, chooser_item_attrs_t *out_attrs, size_t n);ea_t (*get_ea)(const chooser_base_t *__hidden this, size_t);void (*closed)(chooser_base_t *__hidden this);ssize_t (*get_item_index)(const chooser_t *__hidden this, const void *item_data);chooser_t__cbret_t (*ins)(chooser_t *__hidden this, ssize_t);chooser_t__cbret_t (*del)(chooser_t *__hidden this, size_t);chooser_t__cbret_t (*edit)(chooser_t *__hidden this, size_t);chooser_t__cbret_t (*enter)(chooser_t *__hidden this, size_t n);chooser_t__cbret_t (*refresh)(chooser_t *__hidden this, ssize_t n);void (*select)(const chooser_t *__hidden this, ssize_t);dirtree_t *(*get_dirtree)(chooser_t *__hidden this);inode_t (*index_to_inode)(const chooser_t *__hidden this, size_t);diffpos_t (*index_to_diffpos)(const chooser_t *__hidden this, size_t);};*/
struct ida_syntax_highlighter_t : syntax_highlighter_t {qstrvec_t keyword_memory;ida_syntax_highlighter_t__keywords_t keywords;qstring open_cmt;ida_syntax_highlighter_t__multicmtvec_t multicmts;char literal_closer;syntax_highlight_style text_color;syntax_highlight_style comment_color;syntax_highlight_style string_color;syntax_highlight_style preprocessor_color;external_colorizers_t external_colorizers;external_ident_colorizers_t external_ident_colorizers;const char *input;const char *pending;syntax_highlight_style style;char open_strconst;char close_strconst;char open_chrconst;char close_chrconst;char escape_char;char preprocessor_char;};
struct bpt_t {size_t cb;qstring cndbody;bpt_location_t loc;pid_t pid;thid_t tid;ea_t ea;bpttype_t type;int pass_count;uint32 flags;uint32 props;int size;int cndidx;inode_t bptid;};
struct action_ctx_base_t {TWidget *widget;twidget_type_t widget_type;qstring widget_title;sizevec_t chooser_selection;const char *action;uint32 cur_flags;ea_t cur_ea;uval_t cur_value;func_t *cur_func;func_t *cur_fchunk;struc_t *cur_struc;member_t *cur_strmem;enum_t cur_enum;segment_t *cur_seg;action_ctx_base_cur_sel_t cur_sel;const char *regname;TWidget *focus;screen_graph_selection_t *graph_selection;const_t cur_enum_member;dirtree_selection_t *dirtree_selection;action_ctx_base_source_t source;};
union func_t___C940058B2272AD9112E2141245617273 {struct {uval_t frame;asize_t frsize;ushort frregs;asize_t argsize;asize_t fpd;bgcolor_t color;uint32 pntqty;stkpnt_t *points;int regvarqty;regvar_t *regvars;int llabelqty;llabel_t *llabels;int regargqty;regarg_t *regargs;int tailqty;range_t *tails;};struct {ea_t owner;int refqty;ea_t *referers;};};
typedef std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_type std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____value_type;
typedef std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_type std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____value_type;
typedef std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___key_type std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____key_type;
typedef std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_____pointer std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Nodeptr;
typedef std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer;
typedef std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_ std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____value_type;
typedef std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer;
typedef std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____value_type std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____value_type;
typedef std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____pointer std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____const_pointer std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____const_pointer std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer;
typedef const std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____value_type *std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____const_pointer;
typedef std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_ std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____Node;
typedef std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer;
typedef std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer;
typedef std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_int__int___void__P_____pointer std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Nodeptr;
typedef std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_ std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____value_type;
typedef std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____value_type std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______value_type;
typedef std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____pointer std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______pointer;
typedef std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____pointer std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____const_pointer std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer;
typedef std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____pointer std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______pointer;
typedef std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____pointer std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______pointer;
typedef std___String_const_iterator_std___String_val_std___Simple_types_char_____pointer std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char______pointer;
typedef std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____pointer std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______pointer;
typedef std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______pointer std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______pointer;
typedef std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______pointer std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______pointer;
typedef std___String_iterator_std___String_val_std___Simple_types_char16_t_____pointer std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char16_t______pointer;
typedef std___String_iterator_std___String_val_std___Simple_types_char32_t_____pointer std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char32_t______pointer;
typedef std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____Nodeptr std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______Nodeptr;
typedef std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______pointer std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______pointer;
typedef std___String_iterator_std___String_val_std___Simple_types_wchar_t_____pointer std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_wchar_t______pointer;
typedef std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char______pointer std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______pointer;
typedef std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______pointer std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______pointer;
typedef std___String_iterator_std___String_val_std___Simple_types_char_____pointer std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char______pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____const_pointer std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer;
typedef std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char16_t______pointer std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______pointer;
typedef std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char32_t______pointer std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______pointer;
typedef std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_wchar_t______pointer std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______pointer;
struct std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____ {std___String_const_iterator_std___String_val_std___Simple_types_char16_t___ current;};
struct std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____ {std___String_const_iterator_std___String_val_std___Simple_types_char32_t___ current;};
struct std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____ {std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___ current;};
typedef std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char______pointer std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______pointer;
typedef const std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____value_type *std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____const_pointer;
struct std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char____ {std___String_const_iterator_std___String_val_std___Simple_types_char___ current;};
typedef std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_ std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______Node;
typedef std___Default_allocator_traits_std__allocator_std___Tree_node_int__void__P_____pointer std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Nodeptr;
typedef std___Tree_simple_types_std__pair_const_int__int_____Nodeptr std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______Nodeptr;
struct std___String_iterator_std___String_val_std___Simple_types_char16_t___ : std___String_const_iterator_std___String_val_std___Simple_types_char16_t___ {};
struct std___String_iterator_std___String_val_std___Simple_types_char32_t___ : std___String_const_iterator_std___String_val_std___Simple_types_char32_t___ {};
struct std___String_iterator_std___String_val_std___Simple_types_wchar_t___ : std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___ {};
struct std___String_iterator_std___String_val_std___Simple_types_char___ : std___String_const_iterator_std___String_val_std___Simple_types_char___ {};
typedef std___Tree_simple_types_int____Nodeptr std___Tree_val_std___Tree_simple_types_int_____Nodeptr;
typedef std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____ std__basic_string_char16_t___const_reverse_iterator;
typedef std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____ std__basic_string_char32_t___const_reverse_iterator;
typedef std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____ std__basic_string_wchar_t___const_reverse_iterator;
typedef std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char____ std__basic_string_char___const_reverse_iterator;
typedef std___String_const_iterator_std___String_val_std___Simple_types_char16_t___ std__basic_string_char16_t___const_iterator;
typedef std___String_const_iterator_std___String_val_std___Simple_types_char32_t___ std__basic_string_char32_t___const_iterator;
typedef std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___ std__basic_string_wchar_t___const_iterator;
typedef std___String_const_iterator_std___String_val_std___Simple_types_char___ std__basic_string_char___const_iterator;
typedef std___String_iterator_std___String_val_std___Simple_types_char16_t___ std__basic_string_char16_t___iterator;
typedef std___String_iterator_std___String_val_std___Simple_types_char32_t___ std__basic_string_char32_t___iterator;
typedef std___String_iterator_std___String_val_std___Simple_types_wchar_t___ std__basic_string_wchar_t___iterator;
typedef std___String_iterator_std___String_val_std___Simple_types_char___ std__basic_string_char___iterator;
struct std__basic_string_char16_t_ {std___Compressed_pair_std__allocator_char16_t___std___String_val_std___Simple_types_char16_t____true_ _Mypair;};
struct std__basic_string_char32_t_ {std___Compressed_pair_std__allocator_char32_t___std___String_val_std___Simple_types_char32_t____true_ _Mypair;};
struct std__basic_string_wchar_t_ {std___Compressed_pair_std__allocator_wchar_t___std___String_val_std___Simple_types_wchar_t____true_ _Mypair;};
typedef action_ctx_base_t action_activation_ctx_t;
struct std__basic_string_char_ {std___Compressed_pair_std__allocator_char___std___String_val_std___Simple_types_char____true_ _Mypair;};
typedef action_ctx_base_t action_update_ctx_t;
typedef std__basic_string_char16_t_ std__u16string;
typedef std__basic_string_char32_t_ std__u32string;
typedef std__basic_string_wchar_t_ std__wstring;
typedef std__basic_string_char_ std__string;
struct dirtree_iterator_t {qstring pattern;dirtree_cursor_t cursor;};
struct std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___ : std___Container_base {std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______Nodeptr _Myhead;std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____size_type _Mysize;};
struct std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___ : std___Container_base {std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______Nodeptr _Myhead;std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____size_type _Mysize;};
struct std___Tree_val_std___Tree_simple_types_int__ : std___Container_base {std___Tree_val_std___Tree_simple_types_int_____Nodeptr _Myhead;std___Tree_val_std___Tree_simple_types_int____size_type _Mysize;};
struct action_handler_t_vtbl; /* action_handler_t_vtbl {int (*activate)(action_handler_t *__hidden this, action_activation_ctx_t *ctx);action_state_t (*update)(action_handler_t *__hidden this, action_update_ctx_t *ctx);void (*_del_action_handler_t)(action_handler_t *__hidden this);};*/
struct jump_pattern_t {jump_pattern_t_vtbl *__vftable /*VFT*/;bool modifying_r32_spoils_r64;insn_t insn;switch_info_t *si;ea_t eas[16];bool skip[16];int non_spoiled_reg;jump_pattern_t__check_insn_t check[16];bool stop_matching;bool in_linear_flow;ea_t block_end;const char (*depends)[4];eavec_t remote_code;eavec_t extra_insn_eas;tracked_regs_t regs;};
struct lowcnd_t {ea_t ea;qstring cndbody;bpttype_t type;bytevec_t orgbytes;insn_t cmd;bool compiled;int size;};
struct outctx_t : outctx_base_t {ea_t bin_ea;char bin_state;int gl_bpsize;int bin_width;insn_t insn;qstring curlabel;const printop_t *wif;procmod_t *procmod;processor_t *ph;asm_t *ash;uval_t saved_immvals[8];};
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___ std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Scary_val;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____value_type std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type;
typedef const std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type *std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference;
typedef std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____value_type std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_____value_type;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____value_type std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type;
typedef std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_____value_type *std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_____pointer;
typedef std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type *std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____pointer std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____value_type std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type;
typedef const std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type *std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____value_type std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type;
typedef std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type *std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____pointer std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer;
typedef std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer;
typedef std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer;
typedef std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____const_pointer std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____const_pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______value_type std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type;
typedef const std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type *std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference;
typedef std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____value_type std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_____value_type;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______value_type std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type;
typedef std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_____value_type *std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_____pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______Nodeptr std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______Nodeptr;
typedef std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type *std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______pointer std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______value_type std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type;
typedef const std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type *std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______value_type std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type;
typedef std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type *std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______pointer std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer;
typedef std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer;
typedef std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____Node *std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____Nodeptr;
typedef std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___ std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Scary_val;
typedef std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____const_pointer std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______const_pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______Nodeptr std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______Nodeptr;
typedef std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______Node *std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______Nodeptr;
struct std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t____ {std___String_iterator_std___String_val_std___Simple_types_char16_t___ current;};
struct std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t____ {std___String_iterator_std___String_val_std___Simple_types_char32_t___ current;};
typedef std___Tree_val_std___Tree_simple_types_int_____Nodeptr std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int______Nodeptr;
struct std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t____ {std___String_iterator_std___String_val_std___Simple_types_wchar_t___ current;};
typedef std___Tree_val_std___Tree_simple_types_int__ std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Scary_val;
struct std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char____ {std___String_iterator_std___String_val_std___Simple_types_char___ current;};
typedef std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t____ std__basic_string_char16_t___reverse_iterator;
typedef std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t____ std__basic_string_char32_t___reverse_iterator;
typedef std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t____ std__basic_string_wchar_t___reverse_iterator;
typedef std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char____ std__basic_string_char___reverse_iterator;
struct std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true_ : std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__ {std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___ _Myval2;};
struct std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true_ : std__allocator_std___Tree_node_std__pair_const_int__int___void__P__ {std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___ _Myval2;};
struct std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ : std___Iterator_base0 {std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______Nodeptr _Ptr;};
struct std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true_ : std__allocator_std___Tree_node_int__void__P__ {std___Tree_val_std___Tree_simple_types_int__ _Myval2;};
struct std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ : std___Iterator_base0 {std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______Nodeptr _Ptr;};
struct std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___ : std___Iterator_base0 {std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int______Nodeptr _Ptr;};
typedef std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_____pointer std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Nodeptr;
typedef std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Unchecked_const_iterator;
typedef std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_____pointer std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Nodeptr;
typedef std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer;
typedef std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____const_pointer std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____const_pointer std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer;
typedef std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer;
typedef std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______const_pointer std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer;
typedef std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____Nodeptr std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______Nodeptr;
typedef std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______const_pointer std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer;
typedef std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Unchecked_const_iterator;
struct std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ : std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ {};
struct std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ : std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ {};
typedef std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______Unchecked_const_iterator;
struct std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ : std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ {};
typedef std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______Nodeptr std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______Nodeptr;
typedef std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___ std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Unchecked_const_iterator;
typedef std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___ std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Unchecked_iterator;
struct std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ : std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ {};
struct std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ : std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ {};
typedef std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______Unchecked_const_iterator;
struct std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ : std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ {};
struct std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___ : std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___ {};
typedef std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___ std___Tree_val_std___Tree_simple_types_int_____Unchecked_const_iterator;
struct std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true___true_ : std__less_unsigned_long_long_ {std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true_ _Myval2;};
struct std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true___true_ : std__less_int_ {std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true_ _Myval2;};
struct std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true___true_ : std__less_int_ {std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true_ _Myval2;};
struct std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___ : std___Container_base {std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______Nodeptr _Myhead;std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____size_type _Mysize;};
struct std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____ : std___Container_base {std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______Nodeptr _Myhead;std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______size_type _Mysize;};
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___ std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Scary_val;
struct std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ {std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ first;std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ second;};
struct std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ {std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ first;std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ second;};
typedef std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Unchecked_iterator;
typedef std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer;
struct std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ {std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ first;std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ second;};
typedef std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____ std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Scary_val;
typedef std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____const_iterator;
typedef std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer;
typedef std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____iterator;
struct std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ {std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ first;std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ second;};
typedef std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______Nodeptr std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______Nodeptr;
struct std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false__ {std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true___true_ _Mypair;};
typedef std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer;
typedef std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer;
struct std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____ {std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___ first;std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___ second;};
typedef std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______Nodeptr std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________Nodeptr;
struct std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ {std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ current;};
struct std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ {std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____ current;};
typedef std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Unchecked_iterator;
typedef std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____const_iterator;
struct std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ {std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ current;};
typedef std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____iterator;
struct std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ {std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____ current;};
struct std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false__ {std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true___true_ _Mypair;};
typedef std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___ std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____const_iterator;
struct std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____ {std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___ current;};
typedef std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___ std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____iterator;
struct std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false__ {std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true___true_ _Mypair;};
struct std__map_unsigned_long_long__unsigned_long_long_ : std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false__ {};
struct std__map_int__int_ : std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false__ {};
struct std__set_int_ : std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false__ {};
struct intmap_t : std__map_int__int_ {};
struct intset_t : std__set_int_ {};
struct std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true_ : std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__ {std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___ _Myval2;};
struct std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true_ : std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__ {std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____ _Myval2;};
struct std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ : std___Iterator_base0 {std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______Nodeptr _Ptr;};
struct std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ : std___Iterator_base0 {std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________Nodeptr _Ptr;};
typedef std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Unchecked_const_iterator;
typedef std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Unchecked_const_iterator;
typedef std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____const_reverse_iterator;
typedef std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____reverse_iterator;
struct std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ : std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ {};
struct std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ : std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ {};
typedef std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______Unchecked_const_iterator;
struct std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ : std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ {};
struct std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ : std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ {};
typedef std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____const_reverse_iterator;
struct std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ : std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ {};
typedef std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______Unchecked_const_iterator;
typedef std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____reverse_iterator;
struct std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ : std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ {};
typedef std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____ std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____const_reverse_iterator;
typedef std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____ std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____reverse_iterator;
typedef std__map_unsigned_long_long__unsigned_long_long_ backward_flow_iterator_t_State__Ctrl___visited_t;
struct node_set_t : intset_t {};
struct std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true___true_ : std__less_unsigned_long_long_ {std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true_ _Myval2;};
struct std___Compressed_pair_std__less__qstring_char____std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true___true_ : std__less__qstring_char__ {std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true_ _Myval2;};
struct std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ {std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ first;std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ second;};
struct std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ {std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ first;std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ second;};
typedef std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Unchecked_iterator;
typedef std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____const_iterator;
typedef std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____iterator;
struct std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ {std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ first;std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ second;};
struct std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false__ {std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true___true_ _Mypair;};
struct std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ {std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ first;std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ second;};
typedef std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Unchecked_iterator;
typedef std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____const_iterator;
typedef std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____iterator;
struct std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false__ {std___Compressed_pair_std__less__qstring_char____std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true___true_ _Mypair;};
struct std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ {std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ current;};
struct std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ {std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____ current;};
struct std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ {std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ current;};
struct std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ {std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____ current;};
struct std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_ : std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false__ {};
typedef std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_ backward_flow_iterator_t_no_regs_t__simple_bfi_t___waiting_t;
struct std__map__qstring_char___qrefcnt_t_refcnted_regex_t__ : std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false__ {};
typedef std__map__qstring_char___qrefcnt_t_refcnted_regex_t__ regex_cache_t__regex_cache_map_t;
struct graph_node_visitor_t {graph_node_visitor_t_vtbl *__vftable /*VFT*/;node_set_t visited;};
struct regex_cache_t {regex_cache_t__regex_cache_map_t cache;};
struct backward_flow_iterator_t_no_regs_t__simple_bfi_t_ {ea_t cur_ea;no_regs_t *regs;simple_bfi_t *ctrl;bool only_near;uint max_insn_cnt;func_t *pfn;const segment_t *seg;ea_t start_ea;ea_t cur_end;uint insn_cnt;backward_flow_iterator_t_State__Ctrl___visited_t visited;backward_flow_iterator_t_no_regs_t__simple_bfi_t___waiting_t waiting;};
typedef std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____const_reverse_iterator;
typedef std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____reverse_iterator;
typedef std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____const_reverse_iterator;
typedef std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____reverse_iterator;
struct simple_bfi_t : backward_flow_iterator_t_no_regs_t__simple_bfi_t_ {no_regs_t regs_;};

namespace SymbolsNamespace {
// action_attr_t AA_CHECKABLE;
// action_attr_t AA_CHECKED;
// action_attr_t AA_ICON;
// action_attr_t AA_LABEL;
// action_attr_t AA_NONE;
// action_attr_t AA_SHORTCUT;
// action_attr_t AA_STATE;
// action_attr_t AA_TOOLTIP;
// action_attr_t AA_VISIBILITY;
// chooser_base_t__cbres_t ALL_CHANGED;
// argreg_policy_t ARGREGS_BY_SLOTS;
// argreg_policy_t ARGREGS_FP_CONSUME_GP;
// argreg_policy_t ARGREGS_GP_ONLY;
// argreg_policy_t ARGREGS_INDEPENDENT;
// argreg_policy_t ARGREGS_MIPS_O32;
// argreg_policy_t ARGREGS_POLICY_UNDEFINED;
// action_state_t AST_DISABLE;
// action_state_t AST_DISABLE_ALWAYS;
// action_state_t AST_DISABLE_FOR_IDB;
// action_state_t AST_DISABLE_FOR_WIDGET;
// action_state_t AST_ENABLE;
// action_state_t AST_ENABLE_ALWAYS;
// action_state_t AST_ENABLE_FOR_IDB;
// action_state_t AST_ENABLE_FOR_WIDGET;
// hexplace_gen_t__byte_kind_t BK_INVALIDADDR;
// hexplace_gen_t__byte_kind_t BK_NOVALUE;
// hexplace_gen_t__byte_kind_t BK_VALID;
// bpt_loctype_t BPLT_ABS;
// bpt_loctype_t BPLT_REL;
// bpt_loctype_t BPLT_SRC;
// bpt_loctype_t BPLT_SYM;
// event_id_t BREAKPOINT;
// cb_id CB_CLOSE;
// cb_id CB_DESTROYING;
// cb_id CB_INIT;
// cb_id CB_INVISIBLE;
// cb_id CB_YES;
// custom_viewer_handler_id_t CDVH_LINES_ALIGNMENT;
// custom_viewer_handler_id_t CDVH_LINES_CLICK;
// custom_viewer_handler_id_t CDVH_LINES_DBLCLICK;
// custom_viewer_handler_id_t CDVH_LINES_DRAWICON;
// custom_viewer_handler_id_t CDVH_LINES_ICONMARGIN;
// custom_viewer_handler_id_t CDVH_LINES_LINENUM;
// custom_viewer_handler_id_t CDVH_LINES_POPUP;
// custom_viewer_handler_id_t CDVH_LINES_RADIX;
// custom_viewer_handler_id_t CDVH_SRCVIEW;
// custom_viewer_handler_id_t CDVH_USERDATA;
// custom_viewer_handler_id_t CVH_CLICK;
// custom_viewer_handler_id_t CVH_CLOSE;
// custom_viewer_handler_id_t CVH_CURPOS;
// custom_viewer_handler_id_t CVH_DBLCLICK;
// custom_viewer_handler_id_t CVH_HELP;
// custom_viewer_handler_id_t CVH_KEYDOWN;
// custom_viewer_handler_id_t CVH_MOUSEMOVE;
// custom_viewer_handler_id_t CVH_POPUP;
// custom_viewer_handler_id_t CVH_QT_AWARE;
// custom_viewer_handler_id_t CVH_USERDATA;
// debug_name_how_t DEBNAME_EXACT;
// debug_name_how_t DEBNAME_LOWER;
// debug_name_how_t DEBNAME_NICE;
// debug_name_how_t DEBNAME_UPPER;
// dbg_event_code_t DEC_ERROR;
// dbg_event_code_t DEC_NOTASK;
// dbg_event_code_t DEC_TIMEOUT;
// dirtree_id_t DIRTREE_BPTS;
// dirtree_id_t DIRTREE_END;
// dirtree_id_t DIRTREE_ENUMS;
// dirtree_id_t DIRTREE_ENUMS_BOOKMARKS;
// dirtree_id_t DIRTREE_FUNCS;
// dirtree_id_t DIRTREE_IDAPLACE_BOOKMARKS;
// dirtree_id_t DIRTREE_IMPORTS;
// dirtree_id_t DIRTREE_LOCAL_TYPES;
// dirtree_id_t DIRTREE_NAMES;
// dirtree_id_t DIRTREE_STRUCTS;
// dirtree_id_t DIRTREE_STRUCTS_BOOKMARKS;
// demreq_type_t DQT_COMPILER;
// demreq_type_t DQT_FULL;
// demreq_type_t DQT_NAME_TYPE;
// demreq_type_t DQT_NPURGED_2;
// demreq_type_t DQT_NPURGED_4;
// demreq_type_t DQT_NPURGED_8;
// drc_t DRC_CRC;
// drc_t DRC_ERROR;
// drc_t DRC_EVENTS;
// drc_t DRC_FAILED;
// drc_t DRC_IDBSEG;
// drc_t DRC_NETERR;
// drc_t DRC_NOCHG;
// drc_t DRC_NOFILE;
// drc_t DRC_NONE;
// drc_t DRC_NOPROC;
// drc_t DRC_OK;
// dterr_t DTE_ALREADY_EXISTS;
// dterr_t DTE_BAD_PATH;
// dterr_t DTE_CANT_RENAME;
// dterr_t DTE_LAST;
// dterr_t DTE_MAX_DIR;
// dterr_t DTE_NOT_DIRECTORY;
// dterr_t DTE_NOT_EMPTY;
// dterr_t DTE_NOT_FOUND;
// dterr_t DTE_OK;
// dterr_t DTE_OWN_CHILD;
// _7014156F94AE1B7FC5F5E3560392A8C4 DTN_DISPLAY_NAME;
// _7014156F94AE1B7FC5F5E3560392A8C4 DTN_FULL_NAME;
// event_id_t EXCEPTION;
// find_extlang_kind_t FIND_EXTLANG_BY_EXT;
// find_extlang_kind_t FIND_EXTLANG_BY_IDX;
// find_extlang_kind_t FIND_EXTLANG_BY_NAME;
// format_functype_t FMTFUNC_PRINTF;
// format_functype_t FMTFUNC_SCANF;
// format_functype_t FMTFUNC_STRFMON;
// format_functype_t FMTFUNC_STRFTIME;
// frame_part_t FPC_ARGS;
// frame_part_t FPC_LVARS;
// frame_part_t FPC_RETADDR;
// frame_part_t FPC_SAVREGS;
// fpvalue_kind_t FPV_BADARG;
// fpvalue_kind_t FPV_NAN;
// fpvalue_kind_t FPV_NINF;
// fpvalue_kind_t FPV_NORM;
// fpvalue_kind_t FPV_PINF;
// gdecode_t GDE_ERROR;
// gdecode_t GDE_MANY_EVENTS;
// gdecode_t GDE_NO_EVENT;
// gdecode_t GDE_ONE_EVENT;
// gtd_func_t GTD_CALC_ARGLOCS;
// gtd_udt_t GTD_CALC_LAYOUT;
// gtd_udt_t GTD_DEL_BITFLDS;
// gtd_func_t GTD_NO_ARGLOCS;
// gtd_udt_t GTD_NO_LAYOUT;
// gts_code_t GTS_BASECLASS;
// gts_code_t GTS_NESTED;
// syntax_highlight_style HF_COMMENT;
// syntax_highlight_style HF_DEFAULT;
// syntax_highlight_style HF_KEYWORD1;
// syntax_highlight_style HF_KEYWORD2;
// syntax_highlight_style HF_KEYWORD3;
// syntax_highlight_style HF_MAX;
// syntax_highlight_style HF_NUMBER;
// syntax_highlight_style HF_PREPROC;
// syntax_highlight_style HF_STRING;
// hook_type_t HT_DBG;
// hook_type_t HT_DEV;
// hook_type_t HT_GRAPH;
// hook_type_t HT_IDB;
// hook_type_t HT_IDD;
// hook_type_t HT_IDP;
// hook_type_t HT_LAST;
// hook_type_t HT_OUTPUT;
// hook_type_t HT_UI;
// hook_type_t HT_VIEW;
// event_id_t INFORMATION;
// inftag_t INF_ABIBITS;
// inftag_t INF_ABINAME;
// inftag_t INF_AF;
// inftag_t INF_AF2;
// inftag_t INF_APPCALL_OPTIONS;
// inftag_t INF_APPTYPE;
// inftag_t INF_ARCHIVE_PATH;
// inftag_t INF_ASMTYPE;
// inftag_t INF_BASEADDR;
// inftag_t INF_BIN_PREFIX_SIZE;
// inftag_t INF_CC;
// inftag_t INF_CC_CM;
// inftag_t INF_CC_DEFALIGN;
// inftag_t INF_CC_ID;
// inftag_t INF_CC_SIZE_B;
// inftag_t INF_CC_SIZE_E;
// inftag_t INF_CC_SIZE_I;
// inftag_t INF_CC_SIZE_L;
// inftag_t INF_CC_SIZE_LDBL;
// inftag_t INF_CC_SIZE_LL;
// inftag_t INF_CC_SIZE_S;
// inftag_t INF_CMTFLG;
// inftag_t INF_CMT_INDENT;
// inftag_t INF_CRC32;
// inftag_t INF_CTIME;
// inftag_t INF_C_MACROS;
// inftag_t INF_DATABASE_CHANGE_COUNT;
// inftag_t INF_DATATYPES;
// inftag_t INF_DBG_BINPATHS;
// inftag_t INF_DEMNAMES;
// inftag_t INF_DUALOP_GRAPH;
// inftag_t INF_DUALOP_TEXT;
// inftag_t INF_ELAPSED;
// inftag_t INF_FILETYPE;
// inftag_t INF_FILE_FORMAT_NAME;
// inftag_t INF_FSIZE;
// inftag_t INF_GENFLAGS;
// inftag_t INF_GROUPS;
// inftag_t INF_HIGHOFF;
// inftag_t INF_H_PATH;
// inftag_t INF_IDA_VERSION;
// inftag_t INF_IDSNODE;
// inftag_t INF_IMAGEBASE;
// inftag_t INF_INCLUDE;
// inftag_t INF_INDENT;
// inftag_t INF_INITIAL_VERSION;
// inftag_t INF_INPUT_FILE_PATH;
// inftag_t INF_LAST;
// inftag_t INF_LENXREF;
// inftag_t INF_LFLAGS;
// inftag_t INF_LIMITER;
// inftag_t INF_LISTNAMES;
// inftag_t INF_LONG_DEMNAMES;
// inftag_t INF_LOWOFF;
// inftag_t INF_MAIN;
// inftag_t INF_MARGIN;
// inftag_t INF_MAXREF;
// inftag_t INF_MAX_AUTONAME_LEN;
// inftag_t INF_MAX_EA;
// inftag_t INF_MD5;
// inftag_t INF_MIN_EA;
// inftag_t INF_NAMETYPE;
// inftag_t INF_NETDELTA;
// inftag_t INF_NOPENS;
// inftag_t INF_NOTEPAD;
// inftag_t INF_OMAX_EA;
// inftag_t INF_OMIN_EA;
// inftag_t INF_OSTYPE;
// inftag_t INF_OUTFILEENC;
// inftag_t INF_OUTFLAGS;
// inftag_t INF_PREFFLAG;
// inftag_t INF_PRIVRANGE;
// inftag_t INF_PRIVRANGE_END_EA;
// inftag_t INF_PRIVRANGE_START_EA;
// inftag_t INF_PROBLEMS;
// inftag_t INF_PROCNAME;
// inftag_t INF_REFCMTNUM;
// inftag_t INF_SELECTORS;
// inftag_t INF_SHA256;
// inftag_t INF_SHORT_DEMNAMES;
// inftag_t INF_SPECSEGS;
// inftag_t INF_SRCDBG_PATHS;
// inftag_t INF_SRCDBG_UNDESIRED;
// inftag_t INF_START_CS;
// inftag_t INF_START_EA;
// inftag_t INF_START_IP;
// inftag_t INF_START_SP;
// inftag_t INF_START_SS;
// inftag_t INF_STRLIT_BREAK;
// inftag_t INF_STRLIT_FLAGS;
// inftag_t INF_STRLIT_PREF;
// inftag_t INF_STRLIT_SERNUM;
// inftag_t INF_STRLIT_ZEROES;
// inftag_t INF_STRTYPE;
// inftag_t INF_STR_ENCODINGS;
// inftag_t INF_TYPE_XREFNUM;
// inftag_t INF_VERSION;
// inftag_t INF_XREFFLAG;
// inftag_t INF_XREFNUM;
// jtype_t JT_ARR;
// jtype_t JT_BOOL;
// _94D4D585A38CDA12BD4A7F760DAFD340 JT_CALL;
// _94D4D585A38CDA12BD4A7F760DAFD340 JT_NONE;
// jtype_t JT_NUM;
// jtype_t JT_OBJ;
// jtype_t JT_STR;
// _94D4D585A38CDA12BD4A7F760DAFD340 JT_SWITCH;
// jtype_t JT_UNKNOWN;
// lecvt_code_t LECVT_CANCELED;
// lecvt_code_t LECVT_ERROR;
// lecvt_code_t LECVT_OK;
// event_id_t LIB_LOADED;
// event_id_t LIB_UNLOADED;
// linput_type_t LINPUT_GENERIC;
// linput_type_t LINPUT_LOCAL;
// linput_type_t LINPUT_NONE;
// linput_type_t LINPUT_PROCMEM;
// linput_type_t LINPUT_RFILE;
// linput_close_code_t LOC_CLOSE;
// linput_close_code_t LOC_KEEP;
// linput_close_code_t LOC_UNMAKE;
// movbpt_code_t MOVBPT_BAD_TYPE;
// movbpt_code_t MOVBPT_DEST_BUSY;
// movbpt_code_t MOVBPT_NOT_FOUND;
// movbpt_code_t MOVBPT_OK;
// chooser_base_t__cbres_t NOTHING_CHANGED;
// access_type_t NO_ACCESS;
// event_id_t NO_EVENT;
// ofile_type_t OFILE_ASM;
// ofile_type_t OFILE_DIF;
// ofile_type_t OFILE_EXE;
// ofile_type_t OFILE_IDC;
// ofile_type_t OFILE_LST;
// ofile_type_t OFILE_MAP;
// path_type_t PATH_TYPE_CMD;
// path_type_t PATH_TYPE_ID0;
// path_type_t PATH_TYPE_IDB;
// event_id_t PROCESS_ATTACHED;
// event_id_t PROCESS_DETACHED;
// event_id_t PROCESS_EXITED;
// event_id_t PROCESS_STARTED;
// event_id_t PROCESS_SUSPENDED;
// _A32948CF266C727D9CC1D79F2B35CC28 QMOVE_CROSS_FS;
// _A32948CF266C727D9CC1D79F2B35CC28 QMOVE_OVERWRITE;
// _A32948CF266C727D9CC1D79F2B35CC28 QMOVE_OVR_RO;
// range_kind_t RANGE_KIND_FUNC;
// range_kind_t RANGE_KIND_HIDDEN_RANGE;
// range_kind_t RANGE_KIND_SEGMENT;
// range_kind_t RANGE_KIND_UNKNOWN;
// access_type_t READ_ACCESS;
// fpvalue_error_t REAL_ERROR_BADDATA;
// fpvalue_error_t REAL_ERROR_BADSTR;
// fpvalue_error_t REAL_ERROR_FORMAT;
// fpvalue_error_t REAL_ERROR_FPOVER;
// fpvalue_error_t REAL_ERROR_INTOVER;
// fpvalue_error_t REAL_ERROR_OK;
// fpvalue_error_t REAL_ERROR_RANGE;
// fpvalue_error_t REAL_ERROR_ZERODIV;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_ASSERT;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_BADBR;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_BADPAT;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_BADRPT;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_EBRACE;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_EBRACK;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_ECOLLATE;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_ECTYPE;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_EESCAPE;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_EMPTY;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_EPAREN;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_ERANGE;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_ESIZE;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_ESPACE;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_ESUBREG;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_INVARG;
// _C7C212E52085C0E483DB7F2B4EDAB218 REG_NOMATCH;
// resume_mode_t RESMOD_HANDLE;
// resume_mode_t RESMOD_INTO;
// resume_mode_t RESMOD_MAX;
// resume_mode_t RESMOD_NONE;
// resume_mode_t RESMOD_OUT;
// resume_mode_t RESMOD_OVER;
// resume_mode_t RESMOD_SRCINTO;
// resume_mode_t RESMOD_SRCOUT;
// resume_mode_t RESMOD_SRCOVER;
// resume_mode_t RESMOD_USER;
// access_type_t RW_ACCESS;
// save_reg_values_t SAVE_ALL_VALUES;
// save_reg_values_t SAVE_DIFF;
// save_reg_values_t SAVE_NONE;
// chooser_base_t__cbres_t SELECTION_CHANGED;
// setproc_level_t SETPROC_IDB;
// setproc_level_t SETPROC_LOADER;
// setproc_level_t SETPROC_LOADER_NON_FATAL;
// setproc_level_t SETPROC_USER;
// smt_code_t SMT_ARRAY;
// smt_code_t SMT_BADARG;
// smt_code_t SMT_FAILED;
// smt_code_t SMT_KEEP;
// smt_code_t SMT_NOCOMPAT;
// smt_code_t SMT_OK;
// smt_code_t SMT_OVERLAP;
// smt_code_t SMT_SIZE;
// smt_code_t SMT_WORSE;
// src_item_kind_t SRCIT_EXPR;
// src_item_kind_t SRCIT_FUNC;
// src_item_kind_t SRCIT_LOCVAR;
// src_item_kind_t SRCIT_MODULE;
// src_item_kind_t SRCIT_NONE;
// src_item_kind_t SRCIT_STMT;
// src_item_kind_t SRCIT_STTVAR;
// event_id_t STEP;
// stock_type_id_t STI_ACCHAR;
// stock_type_id_t STI_ACHAR;
// stock_type_id_t STI_ACUCHAR;
// stock_type_id_t STI_AEABI_LCMP;
// stock_type_id_t STI_AEABI_MEMCLR;
// stock_type_id_t STI_AEABI_MEMCPY;
// stock_type_id_t STI_AEABI_MEMSET;
// stock_type_id_t STI_AEABI_ULCMP;
// stock_type_id_t STI_AUCHAR;
// stock_type_id_t STI_COMPLEX128;
// stock_type_id_t STI_COMPLEX64;
// stock_type_id_t STI_DONT_USE;
// stock_type_id_t STI_FDELOP;
// stock_type_id_t STI_FPURGING;
// stock_type_id_t STI_LAST;
// stock_type_id_t STI_MSGSEND;
// stock_type_id_t STI_PBYTE;
// stock_type_id_t STI_PCCHAR;
// stock_type_id_t STI_PCHAR;
// stock_type_id_t STI_PCUCHAR;
// stock_type_id_t STI_PCVOID;
// stock_type_id_t STI_PINT;
// stock_type_id_t STI_PPVOID;
// stock_type_id_t STI_PUCHAR;
// stock_type_id_t STI_PUINT;
// stock_type_id_t STI_PVOID;
// stock_type_id_t STI_RTC_CHECK_2;
// stock_type_id_t STI_RTC_CHECK_4;
// stock_type_id_t STI_RTC_CHECK_8;
// stock_type_id_t STI_SIZE_T;
// stock_type_id_t STI_SSIZE_T;
// struc_error_t STRUC_ERROR_MEMBER_NAME;
// struc_error_t STRUC_ERROR_MEMBER_NESTED;
// struc_error_t STRUC_ERROR_MEMBER_OFFSET;
// struc_error_t STRUC_ERROR_MEMBER_OK;
// struc_error_t STRUC_ERROR_MEMBER_SIZE;
// struc_error_t STRUC_ERROR_MEMBER_STRUCT;
// struc_error_t STRUC_ERROR_MEMBER_TINFO;
// struc_error_t STRUC_ERROR_MEMBER_UNIVAR;
// struc_error_t STRUC_ERROR_MEMBER_VARLAST;
// storage_type_t STT_CUR;
// storage_type_t STT_DBG;
// storage_type_t STT_MM;
// storage_type_t STT_VA;
// tcc_place_type_t TCCPT_ENUMPLACE;
// tcc_place_type_t TCCPT_IDAPLACE;
// tcc_place_type_t TCCPT_INVALID;
// tcc_place_type_t TCCPT_PLACE;
// tcc_place_type_t TCCPT_SIMPLELINE_PLACE;
// tcc_place_type_t TCCPT_STRUCTPLACE;
// tcc_renderer_type_t TCCRT_FLAT;
// tcc_renderer_type_t TCCRT_GRAPH;
// tcc_renderer_type_t TCCRT_INVALID;
// tcc_renderer_type_t TCCRT_PROXIMITY;
// tty_control_t TCT_NOT_OWNER;
// tty_control_t TCT_OWNER;
// tty_control_t TCT_UNKNOWN;
// tinfo_code_t TERR_BADSYNC;
// tinfo_code_t TERR_OK;
// tinfo_code_t TERR_SAVE;
// tinfo_code_t TERR_SERIALIZE;
// tinfo_code_t TERR_WRONGNAME;
// event_id_t THREAD_EXITED;
// event_id_t THREAD_STARTED;
// event_id_t TRACE_FULL;
// ucdr_kind_t UCDR_MANGLED;
// ucdr_kind_t UCDR_NAME;
// ucdr_kind_t UCDR_STRLIT;
// ucdr_kind_t UCDR_TYPE;
// update_type_t UTP_ENUM;
// update_type_t UTP_STRUCT;
// vme_button_t VME_LEFT_BUTTON;
// vme_button_t VME_MID_BUTTON;
// vme_button_t VME_RIGHT_BUTTON;
// vme_button_t VME_UNKNOWN;
// nametype_t VNT_IDENT;
// nametype_t VNT_STRLIT;
// nametype_t VNT_TYPE;
// nametype_t VNT_UDTMEM;
// nametype_t VNT_VISIBLE;
// access_type_t WRITE_ACCESS;
void __noreturn Err(help_t format, ...);
// std___Invoker_strategy Functor;
double HUGE;
void Info(help_t format, ...);
// std___Tree_child _Left;
void __cdecl MD5Final(uchar digest[16], MD5Context *context);
void __cdecl MD5Init(MD5Context *context);
void __cdecl MD5Transform(uint32 buf[4], const uint32 in[16]);
void __cdecl MD5Update(MD5Context *context, const void *buf, size_t len);
int Message(help_t format, ...);
// std___Uninitialized Noinit;
plugin_t PLUGIN;
// std___Invoker_strategy _Pmd_object;
// std___Invoker_strategy _Pmd_pointer;
// std___Invoker_strategy _Pmd_refwrap;
// std___Invoker_strategy _Pmf_object;
// std___Invoker_strategy _Pmf_pointer;
// std___Invoker_strategy _Pmf_refwrap;
// std___Tree_child Right;
// std___Tree_child _Unused;
void Warn(help_t format, ...);
void __cdecl _Adjust_manually_vector_aligned(void **_Ptr, size_t *_Bytes);
unsigned __int8 __cdecl _BitScanForward(unsigned __int32 *_Index, unsigned __int32 _Mask);
unsigned __int8 __cdecl _BitScanForward64(unsigned __int32 *_Index, unsigned __int64 _Mask);
unsigned __int8 __cdecl _BitScanReverse(unsigned __int32 *_Index, unsigned __int32 _Mask);
unsigned __int8 __cdecl _BitScanReverse64(unsigned __int32 *_Index, unsigned __int64 _Mask);
size_t __cdecl _Convert_size(const size_t _Len);
const _float_const _Denorm_C;
const _float_const _Eps_C;
void __cdecl __noreturn _Exit(int _Code);
const _float_const _FDenorm_C;
const _float_const _FEps_C;
const _float_const _FInf_C;
const _float_const _FNan_C;
const _float_const _FRteps_C;
const _float_const _FSnan_C;
const float _FXbig_C;
const float _FZero_C;
size_t __cdecl _Fnv1a_append_bytes(size_t _Val, const unsigned __int8 *const _First, const size_t _Count);
const double _HUGE;
const _float_const _Hugeval_C;
// ISA_AVAILABILITY _ISA_AVAILABLE_ARMNT;
// ISA_AVAILABILITY __ISA_AVAILABLE_AVX;
// ISA_AVAILABILITY __ISA_AVAILABLE_AVX2;
// ISA_AVAILABILITY __ISA_AVAILABLE_AVX512;
// ISA_AVAILABILITY __ISA_AVAILABLE_ENFSTRG;
// ISA_AVAILABILITY __ISA_AVAILABLE_NEON;
// ISA_AVAILABILITY __ISA_AVAILABLE_NEON_ARM64;
// ISA_AVAILABILITY __ISA_AVAILABLE_SSE2;
// ISA_AVAILABILITY __ISA_AVAILABLE_SSE42;
// ISA_AVAILABILITY _ISA_AVAILABLE_X86;
std___Distance_unknown __cdecl _Idl_dist_add(std___Distance_unknown, std___Distance_unknown);
const _float_const _Inf_C;
__int32 __cdecl _InterlockedAnd(__int32 *_Value, __int32 _Mask);
__int16 __cdecl _InterlockedAnd16(__int16 *_Value, __int16 _Mask);
__int64 __cdecl _InterlockedAnd64(__int64 *_Value, __int64 _Mask);
char __cdecl _InterlockedAnd8(char *_Value, char _Mask);
__int32 __cdecl _InterlockedCompareExchange(__int32 *_Destination, __int32 _Exchange, __int32 _Comparand);
unsigned __int8 __cdecl _InterlockedCompareExchange128(__int64 *_Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 *_ComparandResult);
__int16 __cdecl _InterlockedCompareExchange16(__int16 *_Destination, __int16 _Exchange, __int16 _Comparand);
__int64 __cdecl _InterlockedCompareExchange64(__int64 *_Destination, __int64 _Exchange, __int64 _Comparand);
char __cdecl _InterlockedCompareExchange8(char *_Destination, char _Exchange, char _Comparand);
__int32 __cdecl _InterlockedDecrement(__int32 *_Addend);
__int16 __cdecl _InterlockedDecrement16(__int16 *_Addend);
__int64 __cdecl _InterlockedDecrement64(__int64 *_Addend);
__int32 __cdecl _InterlockedExchange(__int32 *_Target, __int32 _Value);
__int16 __cdecl _InterlockedExchange16(__int16 *_Target, __int16 _Value);
__int64 __cdecl _InterlockedExchange64(__int64 *_Target, __int64 _Value);
char __cdecl _InterlockedExchange8(char *_Target, char _Value);
__int32 __cdecl _InterlockedExchangeAdd(__int32 *_Addend, __int32 _Value);
__int16 __cdecl _InterlockedExchangeAdd16(__int16 *_Addend, __int16 _Value);
__int64 __cdecl _InterlockedExchangeAdd64(__int64 *_Addend, __int64 _Value);
char __cdecl _InterlockedExchangeAdd8(char *_Addend, char _Value);
__int32 __cdecl _InterlockedIncrement(__int32 *_Addend);
__int16 __cdecl _InterlockedIncrement16(__int16 *_Addend);
__int64 __cdecl _InterlockedIncrement64(__int64 *_Addend);
__int32 __cdecl _InterlockedOr(__int32 *_Value, __int32 _Mask);
__int16 __cdecl _InterlockedOr16(__int16 *_Value, __int16 _Mask);
__int64 __cdecl _InterlockedOr64(__int64 *_Value, __int64 _Mask);
char __cdecl _InterlockedOr8(char *_Value, char _Mask);
__int32 __cdecl _InterlockedXor(__int32 *_Value, __int32 _Mask);
__int16 __cdecl _InterlockedXor16(__int16 *_Value, __int16 _Mask);
__int64 __cdecl _InterlockedXor64(__int64 *_Value, __int64 _Mask);
char __cdecl _InterlockedXor8(char *_Value, char _Mask);
bool __cdecl _Is_pow_2(const size_t _Value);
const _float_const _LDenorm_C;
const _float_const _LEps_C;
const _float_const _LInf_C;
const _float_const _LNan_C;
const _float_const _LRteps_C;
const _float_const _LSnan_C;
const long double _LXbig_C;
const long double _LZero_C;
size_t __cdecl _MallocaComputeSize(size_t _Size);
void *__cdecl _MarkAllocaS(void *_Ptr, unsigned int _Marker);
const _float_const _Nan_C;
void _ReadWriteBarrier(void);
const _float_const _Rteps_C;
const _float_const _Snan_C;
void _Throw_bad_array_new_length(void);
void _Throw_tree_length_error(void);
void _XGetLastError(void);
void _Xbad_alloc(void);
const double _Xbig_C;
void __cdecl _Xinvalid_argument(const char *);
void _Xlen_string(void);
void __cdecl _Xlength_error(const char *);
void __cdecl _Xout_of_range(const char *);
void __cdecl _Xoverflow_error(const char *);
void __cdecl _Xruntime_error(const char *);
const double _Zero_C;
void __cdecl __ExceptionPtrAssign(void *, const void *);
bool __cdecl __ExceptionPtrCompare(const void *, const void *);
void __cdecl __ExceptionPtrCopy(void *, const void *);
void __cdecl __ExceptionPtrCopyException(void *, const void *, const void *);
void __cdecl __ExceptionPtrCreate(void *);
void __cdecl __ExceptionPtrCurrentException(void *);
void __cdecl __ExceptionPtrDestroy(void *);
void __cdecl __ExceptionPtrRethrow(const void *);
void __cdecl __ExceptionPtrSwap(void *, void *);
bool __cdecl __ExceptionPtrToBool(const void *);
int ___mb_cur_max_func(void);
int __cdecl ___mb_cur_max_l_func(_locale_t _Locale);
__crt_locale_data_public *__cdecl __acrt_get_locale_data_prefix(const void *const _LocalePointers);
FILE *__cdecl __acrt_iob_func(unsigned int _Ix);
int __cdecl __acrt_locale_get_ctype_array_value(const unsigned __int16 *const _Locale_pctype_array, const int _Char_value, const int _Mask);
int __cdecl __ascii_iswalpha(const int _C);
int __cdecl __ascii_iswdigit(const int _C);
int __cdecl __ascii_tolower(const int _C);
int __cdecl __ascii_toupper(const int _C);
int __cdecl __ascii_towlower(const int _C);
int __cdecl __ascii_towupper(const int _C);
void *__builtin_assume_aligned(const void *, size_t, ...);
double __cdecl __ceil(double);
float __cdecl __ceilf(float);
int __cdecl __conio_common_vcwprintf(unsigned __int64 _Options, const __int16 *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __conio_common_vcwprintf_p(unsigned __int64 _Options, const __int16 *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __conio_common_vcwprintf_s(unsigned __int64 _Options, const __int16 *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __conio_common_vcwscanf(unsigned __int64 _Options, const __int16 *_Format, _locale_t _Locale, va_list _ArgList);
double __cdecl __copysign(double, double);
float __cdecl __copysignf(float, float);
int *__daylight(void);
unsigned __int32 *__doserrno(void);
__int32 *__dstbias(void);
double __cdecl __floor(double);
float __cdecl __floorf(float);
int __fpe_flt_rounds(void);
int *__fpecode(void);
int __isa_available;
int __cdecl __isascii(int _C);
int __cdecl __iscsym(int _C);
int __cdecl __iscsymf(int _C);
__int16 __cdecl __iso_volatile_load16(const __int16 *);
int __cdecl __iso_volatile_load32(const int *);
__int64 __cdecl __iso_volatile_load64(const __int64 *);
char __cdecl __iso_volatile_load8(const char *);
void __cdecl __iso_volatile_store16(__int16 *, __int16);
void __cdecl __iso_volatile_store32(int *, int);
void __cdecl __iso_volatile_store64(__int64 *, __int64);
void __cdecl __iso_volatile_store8(char *, char);
int __cdecl __iswcsym(wint_t _C);
int __cdecl __iswcsymf(wint_t _C);
unsigned __int64 *__local_stdio_printf_options(void);
unsigned __int64 *__local_stdio_scanf_options(void);
unsigned int __cdecl __lzcnt(unsigned int);
unsigned __int16 __cdecl __lzcnt16(unsigned __int16);
unsigned __int64 __cdecl __lzcnt64(unsigned __int64);
int *__p___argc(void);
char ***__p___argv(void);
__int16 ***__p___wargv(void);
int *__p__commode(void);
char ***__p__environ(void);
int *__p__fmode(void);
char **__p__pgmptr(void);
__int16 ***__p__wenviron(void);
__int16 **__p__wpgmptr(void);
const unsigned __int16 *__pctype_func(void);
unsigned int __cdecl __popcnt(unsigned int);
unsigned __int16 __cdecl __popcnt16(unsigned __int16);
unsigned __int64 __cdecl __popcnt64(unsigned __int64);
const wctype_t *__pwctype_func(void);
void __cdecl __noreturn __report_gsfailure(uintptr_t _StackCookie);
double __cdecl __round(double);
float __cdecl __roundf(float);
void __cdecl __security_check_cookie(uintptr_t _StackCookie);
uintptr_t __security_cookie;
void __security_init_cookie(void);
unsigned __int64 __cdecl __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned __int8 _Shift);
unsigned int __cdecl __signbitvalue(double);
unsigned int __cdecl __signbitvaluef(float);
void __cdecl __std_exception_copy(const __std_exception_data *_From, __std_exception_data *_To);
void __cdecl __std_exception_destroy(__std_exception_data *_Data);
void __cdecl __std_reverse_copy_trivially_copyable_1(const void *_First, const void *_Last, void *_Dest);
void __cdecl __std_reverse_copy_trivially_copyable_2(const void *_First, const void *_Last, void *_Dest);
void __cdecl __std_reverse_copy_trivially_copyable_4(const void *_First, const void *_Last, void *_Dest);
void __cdecl __std_reverse_copy_trivially_copyable_8(const void *_First, const void *_Last, void *_Dest);
void __cdecl __std_reverse_trivially_swappable_1(void *_First, void *_Last);
void __cdecl __std_reverse_trivially_swappable_2(void *_First, void *_Last);
void __cdecl __std_reverse_trivially_swappable_4(void *_First, void *_Last);
void __cdecl __std_reverse_trivially_swappable_8(void *_First, void *_Last);
void __cdecl __std_swap_ranges_trivially_swappable_noalias(void *_First1, void *_Last1, void *_First2);
int __cdecl __stdio_common_vfprintf(unsigned __int64 _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vfprintf_p(unsigned __int64 _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vfprintf_s(unsigned __int64 _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vfscanf(unsigned __int64 _Options, FILE *_Stream, const char *_Format, _locale_t _Locale, va_list _Arglist);
int __cdecl __stdio_common_vfwprintf(unsigned __int64 _Options, FILE *_Stream, const __int16 *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vfwprintf_p(unsigned __int64 _Options, FILE *_Stream, const __int16 *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vfwprintf_s(unsigned __int64 _Options, FILE *_Stream, const __int16 *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vfwscanf(unsigned __int64 _Options, FILE *_Stream, const __int16 *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vsnprintf_s(unsigned __int64 _Options, char *_Buffer, size_t _BufferCount, size_t _MaxCount, const char *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vsnwprintf_s(unsigned __int64 _Options, __int16 *_Buffer, size_t _BufferCount, size_t _MaxCount, const __int16 *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vsprintf(unsigned __int64 _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vsprintf_p(unsigned __int64 _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vsprintf_s(unsigned __int64 _Options, char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vsscanf(unsigned __int64 _Options, const char *_Buffer, size_t _BufferCount, const char *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vswprintf(unsigned __int64 _Options, __int16 *_Buffer, size_t _BufferCount, const __int16 *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vswprintf_p(unsigned __int64 _Options, __int16 *_Buffer, size_t _BufferCount, const __int16 *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vswprintf_s(unsigned __int64 _Options, __int16 *_Buffer, size_t _BufferCount, const __int16 *_Format, _locale_t _Locale, va_list _ArgList);
int __cdecl __stdio_common_vswscanf(unsigned __int64 _Options, const __int16 *_Buffer, size_t _BufferCount, const __int16 *_Format, _locale_t _Locale, va_list _ArgList);
size_t __cdecl __strncnt(const char *_String, size_t _Count);
int __swprintf_l(__int16 *_Buffer, const __int16 *_Format, _locale_t _Locale, ...);
char **__sys_errlist(void);
int *__sys_nerr(void);
uintptr_t __threadhandle(void);
unsigned __int32 __threadid(void);
__int32 *__timezone(void);
int __cdecl __toascii(int _C);
double __cdecl __trunc(double);
float __cdecl __truncf(float);
char **__tzname(void);
bool __uncaught_exception(void);
int __uncaught_exceptions(void);
void __va_start(va_list *, ...);
int __cdecl __vswprintf_l(__int16 *_Buffer, const __int16 *_Format, _locale_t _Locale, va_list _Args);
__int16 *__cdecl __wcserror(const __int16 *_String);
errno_t __cdecl __wcserror_s(__int16 *_Buffer, size_t _SizeInWords, const __int16 *_ErrorMessage);
__int64 __cdecl _abs64(__int64 _Number);
int __cdecl _access(const char *_FileName, int _AccessMode);
errno_t __cdecl _access_s(const char *_FileName, int _AccessMode);
void __cdecl _aligned_free(void *_Block);
void *__cdecl _aligned_malloc(size_t _Size, size_t _Alignment);
size_t __cdecl _aligned_msize(void *_Block, size_t _Alignment, size_t _Offset);
void *__cdecl _aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset);
void *__cdecl _aligned_offset_realloc(void *_Block, size_t _Size, size_t _Alignment, size_t _Offset);
void *__cdecl _aligned_offset_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset);
void *__cdecl _aligned_realloc(void *_Block, size_t _Size, size_t _Alignment);
void *__cdecl _aligned_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment);
void *__cdecl _alloca(size_t _Size);
int __cdecl _atodbl(_CRT_DOUBLE *_Result, char *_String);
int __cdecl _atodbl_l(_CRT_DOUBLE *_Result, char *_String, _locale_t _Locale);
double __cdecl _atof_l(const char *_String, _locale_t _Locale);
int __cdecl _atoflt(_CRT_FLOAT *_Result, const char *_String);
int __cdecl _atoflt_l(_CRT_FLOAT *_Result, const char *_String, _locale_t _Locale);
__int64 __cdecl _atoi64(const char *_String);
__int64 __cdecl _atoi64_l(const char *_String, _locale_t _Locale);
int __cdecl _atoi_l(const char *_String, _locale_t _Locale);
__int32 __cdecl _atol_l(const char *_String, _locale_t _Locale);
int __cdecl _atoldbl(_LDOUBLE *_Result, char *_String);
int __cdecl _atoldbl_l(_LDOUBLE *_Result, char *_String, _locale_t _Locale);
__int64 __cdecl _atoll_l(const char *_String, _locale_t _Locale);
void __cdecl _beep(unsigned int _Frequency, unsigned int _Duration);
unsigned __int8 __cdecl _bittest(const __int32 *, __int32);
unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 _Number);
unsigned __int32 __cdecl _byteswap_ulong(unsigned __int32 _Number);
unsigned __int16 __cdecl _byteswap_ushort(unsigned __int16 _Number);
double __cdecl _cabs(_complex _Complex_value);
int __cdecl _callnewh(size_t _Size);
void *__cdecl _calloc_base(size_t _Count, size_t _Size);
errno_t __cdecl _cgetws_s(__int16 *_Buffer, size_t _BufferCount, size_t *_SizeRead);
int __cdecl _chdir(const char *_Path);
int __cdecl _chdrive(int _Drive);
double __cdecl _chgsign(double _X);
float __cdecl _chgsignf(float _X);
long double __cdecl _chgsignl(long double _X);
int __cdecl _chmod(const char *_FileName, int _Mode);
int __cdecl _chsize(int _FileHandle, __int32 _Size);
errno_t __cdecl _chsize_s(int _FileHandle, __int64 _Size);
int __cdecl _chvalidchk_l(const int _C, const int _Mask, const _locale_t _Locale);
unsigned int _clearfp(void);
int __cdecl _close(int _FileHandle);
int __cdecl _commit(int _FileHandle);
unsigned int __cdecl _control87(unsigned int _NewValue, unsigned int _Mask);
unsigned int __cdecl _controlfp(unsigned int _NewValue, unsigned int _Mask);
errno_t __cdecl _controlfp_s(unsigned int *_CurrentState, unsigned int _NewValue, unsigned int _Mask);
double __cdecl _copysign(double _Number, double _Sign);
float __cdecl _copysignf(float _Number, float _Sign);
long double __cdecl _copysignl(long double _Number, long double _Sign);
int __cdecl _cputws(const __int16 *_Buffer);
int __cdecl _creat(const char *_FileName, int _PermissionMode);
char *__cdecl _ctime32(const __time32_t *_Time);
errno_t __cdecl _ctime32_s(char *_Buffer, size_t _SizeInBytes, const __time32_t *_Time);
char *__cdecl _ctime64(const __time64_t *_Time);
errno_t __cdecl _ctime64_s(char *_Buffer, size_t _SizeInBytes, const __time64_t *_Time);
int __cdecl _cvt_dtoi_sat(double a);
int __cdecl _cvt_dtoi_sent(double a);
__int64 __cdecl _cvt_dtoll_sat(double a);
__int64 __cdecl _cvt_dtoll_sent(double a);
unsigned int __cdecl _cvt_dtoui_sat(double a);
unsigned int __cdecl _cvt_dtoui_sent(double a);
unsigned __int64 __cdecl _cvt_dtoull_sat(double a);
unsigned __int64 __cdecl _cvt_dtoull_sent(double a);
int __cdecl _cvt_ftoi_sat(float a);
int __cdecl _cvt_ftoi_sent(float a);
__int64 __cdecl _cvt_ftoll_sat(float a);
__int64 __cdecl _cvt_ftoll_sent(float a);
unsigned int __cdecl _cvt_ftoui_sat(float a);
unsigned int __cdecl _cvt_ftoui_sent(float a);
unsigned __int64 __cdecl _cvt_ftoull_sat(float a);
unsigned __int64 __cdecl _cvt_ftoull_sent(float a);
int _cwprintf(const __int16 *const _Format, ...);
int _cwprintf_l(const __int16 *const _Format, const _locale_t _Locale, ...);
int _cwprintf_p(const __int16 *const _Format, ...);
int _cwprintf_p_l(const __int16 *const _Format, const _locale_t _Locale, ...);
int _cwprintf_s(const __int16 *const _Format, ...);
int _cwprintf_s_l(const __int16 *const _Format, const _locale_t _Locale, ...);
int _cwscanf(const __int16 *const _Format, ...);
int _cwscanf_l(const __int16 *const _Format, const _locale_t _Locale, ...);
int _cwscanf_s(const __int16 *const _Format, ...);
int _cwscanf_s_l(const __int16 *const _Format, const _locale_t _Locale, ...);
__int16 __cdecl _d_int(double *_Px, __int16 _Xexp);
__int16 __cdecl _dclass(double _X);
__int16 __cdecl _dexp(double *_Px, double _Y, __int32 _Eoff);
double __cdecl _difftime32(__time32_t _Time1, __time32_t _Time2);
double __cdecl _difftime64(__time64_t _Time1, __time64_t _Time2);
double __cdecl _dlog(double _X, int _Baseflag);
__int16 __cdecl _dnorm(unsigned __int16 *_Ps);
int __cdecl _dpcomp(double _X, double _Y);
double __cdecl _dpoly(double _X, const double *_Tab, int _N);
__int16 __cdecl _dscale(double *_Px, __int32 _Lexp);
int __cdecl _dsign(double _X);
double __cdecl _dsin(double _X, unsigned int _Qoff);
__int16 __cdecl _dtest(double *_Px);
__int16 __cdecl _dunscale(__int16 *_Pex, double *_Px);
int __cdecl _dup(int _FileHandle);
int __cdecl _dup2(int _FileHandleSrc, int _FileHandleDst);
errno_t __cdecl _dupenv_s(char **_Buffer, size_t *_BufferCount, const char *_VarName);
char *__cdecl _ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign);
errno_t __cdecl _ecvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount, int *_PtDec, int *_PtSign);
int __cdecl _eof(int _FileHandle);
int *_errno(void);
void __cdecl __noreturn _exit(int _Code);
void *__cdecl _expand(void *_Block, size_t _Size);
int __cdecl _fclose_nolock(FILE *_Stream);
int _fcloseall(void);
char *__cdecl _fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign);
errno_t __cdecl _fcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign);
__int16 __cdecl _fd_int(float *_Px, __int16 _Xexp);
__int16 __cdecl _fdclass(float _X);
__int16 __cdecl _fdexp(float *_Px, float _Y, __int32 _Eoff);
float __cdecl _fdlog(float _X, int _Baseflag);
__int16 __cdecl _fdnorm(unsigned __int16 *_Ps);
FILE *__cdecl _fdopen(int _FileHandle, const char *_Mode);
int __cdecl _fdpcomp(float _X, float _Y);
float __cdecl _fdpoly(float _X, const float *_Tab, int _N);
__int16 __cdecl _fdscale(float *_Px, __int32 _Lexp);
int __cdecl _fdsign(float _X);
float __cdecl _fdsin(float _X, unsigned int _Qoff);
__int16 __cdecl _fdtest(float *_Px);
__int16 __cdecl _fdunscale(__int16 *_Pex, float *_Px);
int __cdecl _fflush_nolock(FILE *_Stream);
int __cdecl _fgetc_nolock(FILE *_Stream);
int _fgetchar(void);
wint_t __cdecl _fgetwc_nolock(FILE *_Stream);
wint_t _fgetwchar(void);
__int32 __cdecl _filelength(int _FileHandle);
__int64 __cdecl _filelengthi64(int _FileHandle);
int __cdecl _fileno(FILE *_Stream);
int __cdecl _findclose(intptr_t _FindHandle);
intptr_t __cdecl _findfirst32(const char *_FileName, _finddata32_t *_FindData);
intptr_t __cdecl _findfirst32i64(const char *_FileName, _finddata32i64_t *_FindData);
intptr_t __cdecl _findfirst64(const char *_FileName, __finddata64_t *_FindData);
intptr_t __cdecl _findfirst64i32(const char *_FileName, _finddata64i32_t *_FindData);
int __cdecl _findnext32(intptr_t _FindHandle, _finddata32_t *_FindData);
int __cdecl _findnext32i64(intptr_t _FindHandle, _finddata32i64_t *_FindData);
int __cdecl _findnext64(intptr_t _FindHandle, __finddata64_t *_FindData);
int __cdecl _findnext64i32(intptr_t _FindHandle, _finddata64i32_t *_FindData);
int __cdecl _finite(double _X);
int __cdecl _finitef(float _X);
int _flushall(void);
int __cdecl _fpclass(double _X);
int __cdecl _fpclassf(float _X);
int __cdecl _fpcomp(long double _X, long double _Y);
void __cdecl _fperrraise(int _Except);
void _fpreset(void);
int _fprintf_l(FILE *const _Stream, const char *const _Format, const _locale_t _Locale, ...);
int _fprintf_p(FILE *const _Stream, const char *const _Format, ...);
int _fprintf_p_l(FILE *const _Stream, const char *const _Format, const _locale_t _Locale, ...);
int _fprintf_s_l(FILE *const _Stream, const char *const _Format, const _locale_t _Locale, ...);
int __cdecl _fputc_nolock(int _Character, FILE *_Stream);
int __cdecl _fputchar(int _Character);
wint_t __cdecl _fputwc_nolock(__int16 _Character, FILE *_Stream);
wint_t __cdecl _fputwchar(__int16 _Character);
size_t __cdecl _fread_nolock(void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream);
size_t __cdecl _fread_nolock_s(void *_Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE *_Stream);
void __cdecl _free_base(void *_Block);
void __cdecl _freea(void *_Memory);
int _fscanf_l(FILE *const _Stream, const char *const _Format, const _locale_t _Locale, ...);
int _fscanf_s_l(FILE *const _Stream, const char *const _Format, const _locale_t _Locale, ...);
int __cdecl _fseek_nolock(FILE *_Stream, __int32 _Offset, int _Origin);
int __cdecl _fseeki64(FILE *_Stream, __int64 _Offset, int _Origin);
int __cdecl _fseeki64_nolock(FILE *_Stream, __int64 _Offset, int _Origin);
FILE *__cdecl _fsopen(const char *_FileName, const char *_Mode, int _ShFlag);
int __cdecl _fstat32(int _FileHandle, struct _stat32 *_Stat);
int __cdecl _fstat32i64(int _FileHandle, struct _stat32i64 *_Stat);
int __cdecl _fstat64(int _FileHandle, struct _stat64 *_Stat);
int __cdecl _fstat64i32(int _FileHandle, struct _stat64i32 *_Stat);
__int32 __cdecl _ftell_nolock(FILE *_Stream);
__int64 __cdecl _ftelli64(FILE *_Stream);
__int64 __cdecl _ftelli64_nolock(FILE *_Stream);
char *__cdecl _fullpath(char *_Buffer, const char *_Path, size_t _BufferCount);
int _fwprintf_l(FILE *const _Stream, const __int16 *const _Format, const _locale_t _Locale, ...);
int _fwprintf_p(FILE *const _Stream, const __int16 *const _Format, ...);
int _fwprintf_p_l(FILE *const _Stream, const __int16 *const _Format, const _locale_t _Locale, ...);
int _fwprintf_s_l(FILE *const _Stream, const __int16 *const _Format, const _locale_t _Locale, ...);
size_t __cdecl _fwrite_nolock(const void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream);
int _fwscanf_l(FILE *const _Stream, const __int16 *const _Format, const _locale_t _Locale, ...);
int _fwscanf_s_l(FILE *const _Stream, const __int16 *const _Format, const _locale_t _Locale, ...);
char *__cdecl _gcvt(double _Value, int _DigitCount, char *_Buffer);
errno_t __cdecl _gcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount);
int _get_FMA3_enable(void);
errno_t __cdecl _get_daylight(int *_Daylight);
errno_t __cdecl _get_doserrno(unsigned __int32 *_Value);
errno_t __cdecl _get_dstbias(__int32 *_DaylightSavingsBias);
errno_t __cdecl _get_errno(int *_Value);
errno_t __cdecl _get_fmode(int *_PMode);
intptr_t _get_heap_handle(void);
_invalid_parameter_handler _get_invalid_parameter_handler(void);
intptr_t __cdecl _get_osfhandle(int _FileHandle);
errno_t __cdecl _get_pgmptr(char **_Value);
int _get_printf_count_output(void);
_purecall_handler _get_purecall_handler(void);
errno_t __cdecl _get_stream_buffer_pointers(FILE *_Stream, char ***_Base, char ***_Pointer, int **_Count);
terminate_handler _get_terminate(void);
_invalid_parameter_handler _get_thread_local_invalid_parameter_handler(void);
errno_t __cdecl _get_timezone(__int32 *_TimeZone);
errno_t __cdecl _get_tzname(size_t *_ReturnValue, char *_Buffer, size_t _SizeInBytes, int _Index);
unexpected_handler _get_unexpected(void);
errno_t __cdecl _get_wpgmptr(__int16 **_Value);
int __cdecl _getc_nolock(FILE *_Stream);
char *__cdecl _getcwd(char *_DstBuf, int _SizeInBytes);
char *__cdecl _getdcwd(int _Drive, char *_DstBuf, int _SizeInBytes);
unsigned int __cdecl _getdiskfree(unsigned int _Drive, _diskfree_t *_DiskFree);
int _getdrive(void);
unsigned __int32 _getdrives(void);
int _getmaxstdio(void);
unsigned int __cdecl _getsystime(tm *_Tm);
int __cdecl _getw(FILE *_Stream);
wint_t __cdecl _getwc_nolock(FILE *_Stream);
wint_t _getwch(void);
wint_t _getwch_nolock(void);
wint_t _getwche(void);
wint_t _getwche_nolock(void);
__int16 *__cdecl _getws_s(__int16 *_Buffer, size_t _BufferCount);
tm *__cdecl _gmtime32(const __time32_t *_Time);
errno_t __cdecl _gmtime32_s(tm *_Tm, const __time32_t *_Time);
tm *__cdecl _gmtime64(const __time64_t *_Time);
errno_t __cdecl _gmtime64_s(tm *_Tm, const __time64_t *_Time);
int _heapchk(void);
int _heapmin(void);
int __cdecl _heapwalk(_HEAPINFO *_EntryInfo);
double __cdecl _hypot(double _X, double _Y);
float __cdecl _hypotf(float _X, float _Y);
long double __cdecl _hypotl(long double _X, long double _Y);
char *__cdecl _i64toa(__int64 _Value, char *_Buffer, int _Radix);
errno_t __cdecl _i64toa_s(__int64 _Value, char *_Buffer, size_t _BufferCount, int _Radix);
__int16 *__cdecl _i64tow(__int64 _Value, __int16 *_Buffer, int _Radix);
errno_t __cdecl _i64tow_s(__int64 _Value, __int16 *_Buffer, size_t _BufferCount, int _Radix);
__int64 __cdecl _interlockedand64(__int64 *_Value, __int64 _Mask);
unsigned __int8 __cdecl _interlockedbittestandset(__int32 *, __int32);
__int64 __cdecl _interlockeddecrement64(__int64 *_Addend);
__int64 __cdecl _interlockedexchange64(__int64 *_Target, __int64 _Value);
__int64 __cdecl _interlockedexchangeadd64(__int64 *_Addend, __int64 _Value);
__int64 __cdecl _interlockedincrement64(__int64 *_Addend);
__int64 __cdecl _interlockedor64(__int64 *_Value, __int64 _Mask);
__int64 __cdecl _interlockedxor64(__int64 *_Value, __int64 _Mask);
void _invalid_parameter_noinfo(void);
void __noreturn _invalid_parameter_noinfo_noreturn(void);
void __cdecl __noreturn _invoke_watson(const __int16 *_Expression, const __int16 *_FunctionName, const __int16 *_FileName, unsigned int _LineNo, uintptr_t _Reserved);
int __cdecl _is_exception_typeof(const type_info *_Type, _EXCEPTION_POINTERS *_ExceptionPtr);
int __cdecl _isalnum_l(int _C, _locale_t _Locale);
int __cdecl _isalpha_l(int _C, _locale_t _Locale);
int __cdecl _isatty(int _FileHandle);
int __cdecl _isblank_l(int _C, _locale_t _Locale);
int __cdecl _ischartype_l(const int _C, const int _Mask, const _locale_t _Locale);
int __cdecl _iscntrl_l(int _C, _locale_t _Locale);
int __cdecl _isctype(int _C, int _Type);
int __cdecl _isctype_l(int _C, int _Type, _locale_t _Locale);
int __cdecl _isdigit_l(int _C, _locale_t _Locale);
int __cdecl _isgraph_l(int _C, _locale_t _Locale);
int __cdecl _isleadbyte_l(int _C, _locale_t _Locale);
int __cdecl _islower_l(int _C, _locale_t _Locale);
int __cdecl _isnan(double _X);
int __cdecl _isnanf(float _X);
int __cdecl _isprint_l(int _C, _locale_t _Locale);
int __cdecl _ispunct_l(int _C, _locale_t _Locale);
int __cdecl _isspace_l(int _C, _locale_t _Locale);
int __cdecl _isupper_l(int _C, _locale_t _Locale);
int __cdecl _iswalnum_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswalpha_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswblank_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswcntrl_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswcsym_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswcsymf_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswctype_l(wint_t _C, wctype_t _Type, _locale_t _Locale);
int __cdecl _iswdigit_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswgraph_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswlower_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswprint_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswpunct_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswspace_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswupper_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswxdigit_l(wint_t _C, _locale_t _Locale);
int __cdecl _isxdigit_l(int _C, _locale_t _Locale);
char *__cdecl _itoa(int _Value, char *_Buffer, int _Radix);
errno_t __cdecl _itoa_s(int _Value, char *_Buffer, size_t _BufferCount, int _Radix);
__int16 *__cdecl _itow(int _Value, __int16 *_Buffer, int _Radix);
errno_t __cdecl _itow_s(int _Value, __int16 *_Buffer, size_t _BufferCount, int _Radix);
double __cdecl _j0(double _X);
double __cdecl _j1(double _X);
double __cdecl _jn(int _X, double _Y);
__int16 __cdecl _ld_int(long double *_Px, __int16 _Xexp);
__int16 __cdecl _ldclass(long double _X);
__int16 __cdecl _ldexp(long double *_Px, long double _Y, __int32 _Eoff);
long double __cdecl _ldlog(long double _X, int _Baseflag);
int __cdecl _ldpcomp(long double _X, long double _Y);
long double __cdecl _ldpoly(long double _X, const long double *_Tab, int _N);
__int16 __cdecl _ldscale(long double *_Px, __int32 _Lexp);
int __cdecl _ldsign(long double _X);
long double __cdecl _ldsin(long double _X, unsigned int _Qoff);
__int16 __cdecl _ldtest(long double *_Px);
__int16 __cdecl _ldunscale(__int16 *_Pex, long double *_Px);
void *__cdecl _lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
void *__cdecl _lfind_s(const void *_Key, const void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context);
int __cdecl _load_core_module(idadll_t *dllmem, const char *file, const char *entry);
tm *__cdecl _localtime32(const __time32_t *_Time);
errno_t __cdecl _localtime32_s(tm *_Tm, const __time32_t *_Time);
tm *__cdecl _localtime64(const __time64_t *_Time);
errno_t __cdecl _localtime64_s(tm *_Tm, const __time64_t *_Time);
void __cdecl _lock_file(FILE *_Stream);
int __cdecl _locking(int _FileHandle, int _LockMode, __int32 _NumOfBytes);
double __cdecl _logb(double _X);
float __cdecl _logbf(float _X);
unsigned __int32 __cdecl _lrotl(unsigned __int32 _Value, int _Shift);
unsigned __int32 __cdecl _lrotr(unsigned __int32 _Value, int _Shift);
void *__cdecl _lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
void *__cdecl _lsearch_s(const void *_Key, void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context);
__int32 __cdecl _lseek(int _FileHandle, __int32 _Offset, int _Origin);
__int64 __cdecl _lseeki64(int _FileHandle, __int64 _Offset, int _Origin);
char *__cdecl _ltoa(__int32 _Value, char *_Buffer, int _Radix);
errno_t __cdecl _ltoa_s(__int32 _Value, char *_Buffer, size_t _BufferCount, int _Radix);
__int16 *__cdecl _ltow(__int32 _Value, __int16 *_Buffer, int _Radix);
errno_t __cdecl _ltow_s(__int32 _Value, __int16 *_Buffer, size_t _BufferCount, int _Radix);
void __cdecl _makepath(char *_Buffer, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext);
errno_t __cdecl _makepath_s(char *_Buffer, size_t _BufferCount, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext);
void *__cdecl _malloc_base(size_t _Size);
int __cdecl _matherr(_exception *_Except);
int __cdecl _mblen_l(const char *_Ch, size_t _MaxCount, _locale_t _Locale);
size_t __cdecl _mbstowcs_l(__int16 *_Dest, const char *_Source, size_t _MaxCount, _locale_t _Locale);
errno_t __cdecl _mbstowcs_s_l(size_t *_PtNumOfCharConverted, __int16 *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount, _locale_t _Locale);
size_t __cdecl _mbstrlen(const char *_String);
size_t __cdecl _mbstrlen_l(const char *_String, _locale_t _Locale);
size_t __cdecl _mbstrnlen(const char *_String, size_t _MaxCount);
size_t __cdecl _mbstrnlen_l(const char *_String, size_t _MaxCount, _locale_t _Locale);
int __cdecl _mbtowc_l(__int16 *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale);
void *__cdecl _memccpy(void *_Dst, const void *_Src, int _Val, size_t _MaxCount);
int __cdecl _memicmp(const void *_Buf1, const void *_Buf2, size_t _Size);
int __cdecl _memicmp_l(const void *_Buf1, const void *_Buf2, size_t _Size, _locale_t _Locale);
int __cdecl _mkdir(const char *_Path);
__time32_t __cdecl _mkgmtime32(tm *_Tm);
__time64_t __cdecl _mkgmtime64(tm *_Tm);
char *__cdecl _mktemp(char *_TemplateName);
errno_t __cdecl _mktemp_s(char *_TemplateName, size_t _Size);
__time32_t __cdecl _mktime32(tm *_Tm);
__time64_t __cdecl _mktime64(tm *_Tm);
void _mm_pause(void);
size_t __cdecl _msize(void *_Block);
size_t __cdecl _msize_base(void *_Block);
double __cdecl _nextafter(double _X, double _Y);
float __cdecl _nextafterf(float _X, float _Y);
_onexit_t __cdecl _onexit(_onexit_t _Func);
int __cdecl _open(const char *const _FileName, const int _OFlag, const int _PMode);
int __cdecl _open_osfhandle(intptr_t _OSFileHandle, int _Flags);
int __cdecl _pclose(FILE *_Stream);
int __cdecl _pipe(int *_PtHandles, unsigned int _PipeSize, int _TextMode);
FILE *__cdecl _popen(const char *_Command, const char *_Mode);
int _printf_l(const char *const _Format, const _locale_t _Locale, ...);
int _printf_p(const char *const _Format, ...);
int _printf_p_l(const char *const _Format, const _locale_t _Locale, ...);
int _printf_s_l(const char *const _Format, const _locale_t _Locale, ...);
int __cdecl _putc_nolock(int _Character, FILE *_Stream);
int __cdecl _putenv(const char *_EnvString);
errno_t __cdecl _putenv_s(const char *_Name, const char *_Value);
int __cdecl _putw(int _Word, FILE *_Stream);
wint_t __cdecl _putwc_nolock(__int16 _Character, FILE *_Stream);
wint_t __cdecl _putwch(__int16 _Character);
wint_t __cdecl _putwch_nolock(__int16 _Character);
int __cdecl _putws(const __int16 *_Buffer);
int __cdecl _read(int _FileHandle, void *_DstBuf, unsigned int _MaxCharCount);
void *__cdecl _realloc_base(void *_Block, size_t _Size);
void *__cdecl _recalloc(void *_Block, size_t _Count, size_t _Size);
void *__cdecl _recalloc_base(void *_Block, size_t _Count, size_t _Size);
int _resetstkoflw(void);
int __cdecl _rmdir(const char *_Path);
int _rmtmp(void);
unsigned int __cdecl _rotl(unsigned int _Value, int _Shift);
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift);
unsigned int __cdecl _rotr(unsigned int _Value, int _Shift);
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift);
double __cdecl _scalb(double _X, __int32 _Y);
float __cdecl _scalbf(float _X, __int32 _Y);
int _scanf_l(const char *const _Format, const _locale_t _Locale, ...);
int _scanf_s_l(const char *const _Format, const _locale_t _Locale, ...);
int _scprintf(const char *const _Format, ...);
int _scprintf_l(const char *const _Format, const _locale_t _Locale, ...);
int _scprintf_p(const char *const _Format, ...);
int _scprintf_p_l(const char *const _Format, const _locale_t _Locale, ...);
int _scwprintf(const __int16 *const _Format, ...);
int _scwprintf_l(const __int16 *const _Format, const _locale_t _Locale, ...);
int _scwprintf_p(const __int16 *const _Format, ...);
int _scwprintf_p_l(const __int16 *const _Format, const _locale_t _Locale, ...);
void __cdecl _searchenv(const char *_Filename, const char *_VarName, char *_Buffer);
errno_t __cdecl _searchenv_s(const char *_Filename, const char *_VarName, char *_Buffer, size_t _BufferCount);
int __cdecl _set_FMA3_enable(int _Flag);
unsigned int __cdecl _set_abort_behavior(unsigned int _Flags, unsigned int _Mask);
void __cdecl _set_controlfp(unsigned int _NewValue, unsigned int _Mask);
errno_t __cdecl _set_doserrno(unsigned __int32 _Value);
errno_t __cdecl _set_errno(int _Value);
int __cdecl _set_error_mode(int _Mode);
errno_t __cdecl _set_fmode(int _Mode);
_invalid_parameter_handler __cdecl _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
int __cdecl _set_printf_count_output(int _Value);
_purecall_handler __cdecl _set_purecall_handler(_purecall_handler _Handler);
_se_translator_function __cdecl _set_se_translator(_se_translator_function _NewSETranslator);
_invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler);
void __cdecl _seterrormode(int _Mode);
int __cdecl _setmaxstdio(int _Maximum);
int __cdecl _setmode(int _FileHandle, int _Mode);
unsigned int __cdecl _setsystime(tm *_Tm, unsigned int _Milliseconds);
void __cdecl _sleep(unsigned __int32 _Duration);
int _snprintf(char *_Buffer, size_t _BufferCount, const char *_Format, ...);
int _snprintf_c(char *const _Buffer, const size_t _BufferCount, const char *const _Format, ...);
int _snprintf_c_l(char *const _Buffer, const size_t _BufferCount, const char *const _Format, const _locale_t _Locale, ...);
int _snprintf_l(char *const _Buffer, const size_t _BufferCount, const char *const _Format, const _locale_t _Locale, ...);
int _snprintf_s(char *const _Buffer, const size_t _BufferCount, const size_t _MaxCount, const char *const _Format, ...);
int _snprintf_s_l(char *const _Buffer, const size_t _BufferCount, const size_t _MaxCount, const char *const _Format, const _locale_t _Locale, ...);
int _snscanf(const char *const _Buffer, const size_t _BufferCount, const char *const _Format, ...);
int _snscanf_l(const char *const _Buffer, const size_t _BufferCount, const char *const _Format, const _locale_t _Locale, ...);
int _snscanf_s(const char *const _Buffer, const size_t _BufferCount, const char *const _Format, ...);
int _snscanf_s_l(const char *const _Buffer, const size_t _BufferCount, const char *const _Format, const _locale_t _Locale, ...);
int _snwprintf(__int16 *_Buffer, size_t _BufferCount, const __int16 *_Format, ...);
int _snwprintf_l(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, const _locale_t _Locale, ...);
int _snwprintf_s(__int16 *const _Buffer, const size_t _BufferCount, const size_t _MaxCount, const __int16 *const _Format, ...);
int _snwprintf_s_l(__int16 *const _Buffer, const size_t _BufferCount, const size_t _MaxCount, const __int16 *const _Format, const _locale_t _Locale, ...);
int _snwscanf(const __int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, ...);
int _snwscanf_l(const __int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, const _locale_t _Locale, ...);
int _snwscanf_s(const __int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, ...);
int _snwscanf_s_l(const __int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, const _locale_t _Locale, ...);
int __cdecl _sopen(const char *const _FileName, const int _OFlag, const int _ShFlag, const int _PMode);
errno_t __cdecl _sopen_dispatch(const char *_FileName, int _OFlag, int _ShFlag, int _PMode, int *_PFileHandle, int _BSecure);
errno_t __cdecl _sopen_s(int *_FileHandle, const char *_FileName, int _OpenFlag, int _ShareFlag, int _PermissionMode);
errno_t __cdecl _sopen_s_nolock(int *_FileHandle, const char *_FileName, int _OpenFlag, int _ShareFlag, int _PermissionMode);
void __cdecl _splitpath(const char *_FullPath, char *_Drive, char *_Dir, char *_Filename, char *_Ext);
errno_t __cdecl _splitpath_s(const char *_FullPath, char *_Drive, size_t _DriveCount, char *_Dir, size_t _DirCount, char *_Filename, size_t _FilenameCount, char *_Ext, size_t _ExtCount);
int _sprintf_l(char *const _Buffer, const char *const _Format, const _locale_t _Locale, ...);
int _sprintf_p(char *const _Buffer, const size_t _BufferCount, const char *const _Format, ...);
int _sprintf_p_l(char *const _Buffer, const size_t _BufferCount, const char *const _Format, const _locale_t _Locale, ...);
int _sprintf_s_l(char *const _Buffer, const size_t _BufferCount, const char *const _Format, const _locale_t _Locale, ...);
int _sscanf_l(const char *const _Buffer, const char *const _Format, const _locale_t _Locale, ...);
int _sscanf_s_l(const char *const _Buffer, const char *const _Format, const _locale_t _Locale, ...);
int __cdecl _stat32(const char *_FileName, struct _stat32 *_Stat);
int __cdecl _stat32i64(const char *_FileName, struct _stat32i64 *_Stat);
int __cdecl _stat64(const char *_FileName, struct _stat64 *_Stat);
int __cdecl _stat64i32(const char *_FileName, struct _stat64i32 *_Stat);
unsigned int _statusfp(void);
int __cdecl _strcmpi(const char *_String1, const char *_String2);
int __cdecl _strcoll_l(const char *_String1, const char *_String2, _locale_t _Locale);
char *__cdecl _strdate(char *_Buffer);
errno_t __cdecl _strdate_s(char *_Buffer, size_t _SizeInBytes);
char *__cdecl _strdup(const char *_Source);
char *__cdecl _strerror(const char *_ErrorMessage);
errno_t __cdecl _strerror_s(char *_Buffer, size_t _SizeInBytes, const char *_ErrorMessage);
size_t __cdecl _strftime_l(char *_Buffer, size_t _MaxSize, const char *_Format, const tm *_Tm, _locale_t _Locale);
int __cdecl _stricmp(const char *_String1, const char *_String2);
int __cdecl _stricmp_l(const char *_String1, const char *_String2, _locale_t _Locale);
int __cdecl _stricoll(const char *_String1, const char *_String2);
int __cdecl _stricoll_l(const char *_String1, const char *_String2, _locale_t _Locale);
char *__cdecl _strlwr(char *_String);
char *__cdecl _strlwr_l(char *_String, _locale_t _Locale);
errno_t __cdecl _strlwr_s(char *_String, size_t _Size);
errno_t __cdecl _strlwr_s_l(char *_String, size_t _Size, _locale_t _Locale);
int __cdecl _strncoll(const char *_String1, const char *_String2, size_t _MaxCount);
int __cdecl _strncoll_l(const char *_String1, const char *_String2, size_t _MaxCount, _locale_t _Locale);
int __cdecl _strnicmp(const char *_String1, const char *_String2, size_t _MaxCount);
int __cdecl _strnicmp_l(const char *_String1, const char *_String2, size_t _MaxCount, _locale_t _Locale);
int __cdecl _strnicoll(const char *_String1, const char *_String2, size_t _MaxCount);
int __cdecl _strnicoll_l(const char *_String1, const char *_String2, size_t _MaxCount, _locale_t _Locale);
char *__cdecl _strnset(char *_Destination, int _Value, size_t _Count);
errno_t __cdecl _strnset_s(char *_String, size_t _SizeInBytes, int _Value, size_t _MaxCount);
char *__cdecl _strrev(char *_Str);
char *__cdecl _strset(char *_Destination, int _Value);
errno_t __cdecl _strset_s(char *_Destination, size_t _DestinationSize, int _Value);
char *__cdecl _strtime(char *_Buffer);
errno_t __cdecl _strtime_s(char *_Buffer, size_t _SizeInBytes);
double __cdecl _strtod_l(const char *_String, char **_EndPtr, _locale_t _Locale);
float __cdecl _strtof_l(const char *_String, char **_EndPtr, _locale_t _Locale);
__int64 __cdecl _strtoi64(const char *_String, char **_EndPtr, int _Radix);
__int64 __cdecl _strtoi64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale);
__int32 __cdecl _strtol_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale);
long double __cdecl _strtold_l(const char *_String, char **_EndPtr, _locale_t _Locale);
__int64 __cdecl _strtoll_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale);
unsigned __int64 __cdecl _strtoui64(const char *_String, char **_EndPtr, int _Radix);
unsigned __int64 __cdecl _strtoui64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale);
unsigned __int32 __cdecl _strtoul_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale);
unsigned __int64 __cdecl _strtoull_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale);
char *__cdecl _strupr(char *_String);
char *__cdecl _strupr_l(char *_String, _locale_t _Locale);
errno_t __cdecl _strupr_s(char *_String, size_t _Size);
errno_t __cdecl _strupr_s_l(char *_String, size_t _Size, _locale_t _Locale);
size_t __cdecl _strxfrm_l(char *_Destination, const char *_Source, size_t _MaxCount, _locale_t _Locale);
void __cdecl _swab(char *_Buf1, char *_Buf2, int _SizeInBytes);
int _swprintf(__int16 *_Buffer, const __int16 *_Format, ...);
int _swprintf_c(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, ...);
int _swprintf_c_l(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, const _locale_t _Locale, ...);
int _swprintf_l(__int16 *const _Buffer, const __int16 *const _Format, const _locale_t _Locale, ...);
int _swprintf_p(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, ...);
int _swprintf_p_l(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, const _locale_t _Locale, ...);
int _swprintf_s_l(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, const _locale_t _Locale, ...);
int _swscanf_l(const __int16 *const _Buffer, const __int16 *const _Format, _locale_t _Locale, ...);
int _swscanf_s_l(const __int16 *const _Buffer, const __int16 *const _Format, const _locale_t _Locale, ...);
__int32 __cdecl _tell(int _FileHandle);
__int64 __cdecl _telli64(int _FileHandle);
char *__cdecl _tempnam(const char *_DirectoryName, const char *_FilePrefix);
__time32_t __cdecl _time32(__time32_t *_Time);
__time64_t __cdecl _time64(__time64_t *_Time);
int __cdecl _timespec32_get(_timespec32 *_Ts, int _Base);
int __cdecl _timespec64_get(_timespec64 *_Ts, int _Base);
int __cdecl _tolower(int _C);
int __cdecl _tolower_l(int _C, _locale_t _Locale);
int __cdecl _toupper(int _C);
int __cdecl _toupper_l(int _C, _locale_t _Locale);
wint_t __cdecl _towlower_l(wint_t _C, _locale_t _Locale);
wint_t __cdecl _towupper_l(wint_t _C, _locale_t _Locale);
void _tzset(void);
char *__cdecl _ui64toa(unsigned __int64 _Value, char *_Buffer, int _Radix);
errno_t __cdecl _ui64toa_s(unsigned __int64 _Value, char *_Buffer, size_t _BufferCount, int _Radix);
__int16 *__cdecl _ui64tow(unsigned __int64 _Value, __int16 *_Buffer, int _Radix);
errno_t __cdecl _ui64tow_s(unsigned __int64 _Value, __int16 *_Buffer, size_t _BufferCount, int _Radix);
char *__cdecl _ultoa(unsigned __int32 _Value, char *_Buffer, int _Radix);
errno_t __cdecl _ultoa_s(unsigned __int32 _Value, char *_Buffer, size_t _BufferCount, int _Radix);
__int16 *__cdecl _ultow(unsigned __int32 _Value, __int16 *_Buffer, int _Radix);
errno_t __cdecl _ultow_s(unsigned __int32 _Value, __int16 *_Buffer, size_t _BufferCount, int _Radix);
int __cdecl _umask(int _Mode);
errno_t __cdecl _umask_s(int _NewMode, int *_OldMode);
unsigned __int64 __cdecl _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 *_HighProduct);
int __cdecl _ungetc_nolock(int _Character, FILE *_Stream);
wint_t __cdecl _ungetwc_nolock(wint_t _Character, FILE *_Stream);
wint_t __cdecl _ungetwch(wint_t _Character);
wint_t __cdecl _ungetwch_nolock(wint_t _Character);
int __cdecl _unlink(const char *_FileName);
void __cdecl _unlock_file(FILE *_Stream);
int __cdecl _vcwprintf(const __int16 *const _Format, va_list _ArgList);
int __cdecl _vcwprintf_l(const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vcwprintf_p(const __int16 *const _Format, va_list _ArgList);
int __cdecl _vcwprintf_p_l(const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vcwprintf_s(const __int16 *const _Format, va_list _ArgList);
int __cdecl _vcwprintf_s_l(const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vcwscanf(const __int16 *const _Format, va_list _ArgList);
int __cdecl _vcwscanf_l(const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vcwscanf_s(const __int16 *const _Format, va_list _ArgList);
int __cdecl _vcwscanf_s_l(const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vfprintf_l(FILE *const _Stream, const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vfprintf_p(FILE *const _Stream, const char *const _Format, va_list _ArgList);
int __cdecl _vfprintf_p_l(FILE *const _Stream, const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vfprintf_s_l(FILE *const _Stream, const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vfscanf_l(FILE *const _Stream, const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vfscanf_s_l(FILE *const _Stream, const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vfwprintf_l(FILE *const _Stream, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vfwprintf_p(FILE *const _Stream, const __int16 *const _Format, va_list _ArgList);
int __cdecl _vfwprintf_p_l(FILE *const _Stream, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vfwprintf_s_l(FILE *const _Stream, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vfwscanf_l(FILE *const _Stream, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vfwscanf_s_l(FILE *const _Stream, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vprintf_l(const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vprintf_p(const char *const _Format, va_list _ArgList);
int __cdecl _vprintf_p_l(const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vprintf_s_l(const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vscanf_l(const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vscanf_s_l(const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vscprintf(const char *const _Format, va_list _ArgList);
int __cdecl _vscprintf_l(const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vscprintf_p(const char *const _Format, va_list _ArgList);
int __cdecl _vscprintf_p_l(const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vscwprintf(const __int16 *const _Format, va_list _ArgList);
int __cdecl _vscwprintf_l(const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vscwprintf_p(const __int16 *const _Format, va_list _ArgList);
int __cdecl _vscwprintf_p_l(const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vsnprintf(char *_Buffer, size_t _BufferCount, const char *_Format, va_list _Args);
int __cdecl _vsnprintf_c(char *const _Buffer, const size_t _BufferCount, const char *const _Format, va_list _ArgList);
int __cdecl _vsnprintf_c_l(char *const _Buffer, const size_t _BufferCount, const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vsnprintf_l(char *const _Buffer, const size_t _BufferCount, const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vsnprintf_s(char *const _Buffer, const size_t _BufferCount, const size_t _MaxCount, const char *const _Format, va_list _ArgList);
int __cdecl _vsnprintf_s_l(char *const _Buffer, const size_t _BufferCount, const size_t _MaxCount, const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vsnwprintf(__int16 *_Buffer, size_t _BufferCount, const __int16 *_Format, va_list _ArgList);
int __cdecl _vsnwprintf_l(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vsnwprintf_s(__int16 *const _Buffer, const size_t _BufferCount, const size_t _MaxCount, const __int16 *const _Format, va_list _ArgList);
int __cdecl _vsnwprintf_s_l(__int16 *const _Buffer, const size_t _BufferCount, const size_t _MaxCount, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vsnwscanf_l(const __int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vsnwscanf_s_l(const __int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vsprintf_l(char *const _Buffer, const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vsprintf_p(char *const _Buffer, const size_t _BufferCount, const char *const _Format, va_list _ArgList);
int __cdecl _vsprintf_p_l(char *const _Buffer, const size_t _BufferCount, const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vsprintf_s_l(char *const _Buffer, const size_t _BufferCount, const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vsscanf_l(const char *const _Buffer, const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vsscanf_s_l(const char *const _Buffer, const char *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vswprintf(__int16 *_Buffer, const __int16 *_Format, va_list _Args);
int __cdecl _vswprintf_c(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, va_list _ArgList);
int __cdecl _vswprintf_c_l(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vswprintf_l(__int16 *const _Buffer, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vswprintf_p(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, va_list _ArgList);
int __cdecl _vswprintf_p_l(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vswprintf_s_l(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vswscanf_l(const __int16 *const _Buffer, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vswscanf_s_l(const __int16 *const _Buffer, const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vwprintf_l(const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vwprintf_p(const __int16 *const _Format, va_list _ArgList);
int __cdecl _vwprintf_p_l(const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vwprintf_s_l(const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vwscanf_l(const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _vwscanf_s_l(const __int16 *const _Format, const _locale_t _Locale, va_list _ArgList);
int __cdecl _waccess(const __int16 *_FileName, int _AccessMode);
errno_t __cdecl _waccess_s(const __int16 *_FileName, int _AccessMode);
__int16 *__cdecl _wasctime(const tm *_Tm);
errno_t __cdecl _wasctime_s(__int16 *_Buffer, size_t _SizeInWords, const tm *_Tm);
void __cdecl _wassert(const __int16 *_Message, const __int16 *_File, unsigned int _Line);
int __cdecl _wchdir(const __int16 *_Path);
int __cdecl _wchmod(const __int16 *_FileName, int _Mode);
int __cdecl _wcreat(const __int16 *_FileName, int _PermissionMode);
_locale_t __cdecl _wcreate_locale(int _Category, const __int16 *_Locale);
int __cdecl _wcscoll_l(const __int16 *_String1, const __int16 *_String2, _locale_t _Locale);
__int16 *__cdecl _wcsdup(const __int16 *_String);
__int16 *__cdecl _wcserror(int _ErrorNumber);
errno_t __cdecl _wcserror_s(__int16 *_Buffer, size_t _SizeInWords, int _ErrorNumber);
size_t __cdecl _wcsftime_l(__int16 *_Buffer, size_t _SizeInWords, const __int16 *_Format, const tm *_Tm, _locale_t _Locale);
int __cdecl _wcsicmp(const __int16 *_String1, const __int16 *_String2);
int __cdecl _wcsicmp_l(const __int16 *_String1, const __int16 *_String2, _locale_t _Locale);
int __cdecl _wcsicoll(const __int16 *_String1, const __int16 *_String2);
int __cdecl _wcsicoll_l(const __int16 *_String1, const __int16 *_String2, _locale_t _Locale);
__int16 *__cdecl _wcslwr(__int16 *_String);
__int16 *__cdecl _wcslwr_l(__int16 *_String, _locale_t _Locale);
errno_t __cdecl _wcslwr_s(__int16 *_String, size_t _SizeInWords);
errno_t __cdecl _wcslwr_s_l(__int16 *_String, size_t _SizeInWords, _locale_t _Locale);
int __cdecl _wcsncoll(const __int16 *_String1, const __int16 *_String2, size_t _MaxCount);
int __cdecl _wcsncoll_l(const __int16 *_String1, const __int16 *_String2, size_t _MaxCount, _locale_t _Locale);
int __cdecl _wcsnicmp(const __int16 *_String1, const __int16 *_String2, size_t _MaxCount);
int __cdecl _wcsnicmp_l(const __int16 *_String1, const __int16 *_String2, size_t _MaxCount, _locale_t _Locale);
int __cdecl _wcsnicoll(const __int16 *_String1, const __int16 *_String2, size_t _MaxCount);
int __cdecl _wcsnicoll_l(const __int16 *_String1, const __int16 *_String2, size_t _MaxCount, _locale_t _Locale);
__int16 *__cdecl _wcsnset(__int16 *_String, __int16 _Value, size_t _MaxCount);
errno_t __cdecl _wcsnset_s(__int16 *_Destination, size_t _SizeInWords, __int16 _Value, size_t _MaxCount);
__int16 *__cdecl _wcsrev(__int16 *_String);
__int16 *__cdecl _wcsset(__int16 *_String, __int16 _Value);
errno_t __cdecl _wcsset_s(__int16 *_Destination, size_t _SizeInWords, __int16 _Value);
double __cdecl _wcstod_l(const __int16 *_String, __int16 **_EndPtr, _locale_t _Locale);
float __cdecl _wcstof_l(const __int16 *_String, __int16 **_EndPtr, _locale_t _Locale);
__int64 __cdecl _wcstoi64(const __int16 *_String, __int16 **_EndPtr, int _Radix);
__int64 __cdecl _wcstoi64_l(const __int16 *_String, __int16 **_EndPtr, int _Radix, _locale_t _Locale);
__int32 __cdecl _wcstol_l(const __int16 *_String, __int16 **_EndPtr, int _Radix, _locale_t _Locale);
long double __cdecl _wcstold_l(const __int16 *_String, __int16 **_EndPtr, _locale_t _Locale);
__int64 __cdecl _wcstoll_l(const __int16 *_String, __int16 **_EndPtr, int _Radix, _locale_t _Locale);
size_t __cdecl _wcstombs_l(char *_Dest, const __int16 *_Source, size_t _MaxCount, _locale_t _Locale);
errno_t __cdecl _wcstombs_s_l(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const __int16 *_Src, size_t _MaxCountInBytes, _locale_t _Locale);
unsigned __int64 __cdecl _wcstoui64(const __int16 *_String, __int16 **_EndPtr, int _Radix);
unsigned __int64 __cdecl _wcstoui64_l(const __int16 *_String, __int16 **_EndPtr, int _Radix, _locale_t _Locale);
unsigned __int32 __cdecl _wcstoul_l(const __int16 *_String, __int16 **_EndPtr, int _Radix, _locale_t _Locale);
unsigned __int64 __cdecl _wcstoull_l(const __int16 *_String, __int16 **_EndPtr, int _Radix, _locale_t _Locale);
__int16 *__cdecl _wcsupr(__int16 *_String);
__int16 *__cdecl _wcsupr_l(__int16 *_String, _locale_t _Locale);
errno_t __cdecl _wcsupr_s(__int16 *_String, size_t _Size);
errno_t __cdecl _wcsupr_s_l(__int16 *_String, size_t _Size, _locale_t _Locale);
size_t __cdecl _wcsxfrm_l(__int16 *_Destination, const __int16 *_Source, size_t _MaxCount, _locale_t _Locale);
__int16 *__cdecl _wctime32(const __time32_t *_Time);
errno_t __cdecl _wctime32_s(__int16 *_Buffer, size_t _SizeInWords, const __time32_t *_Time);
__int16 *__cdecl _wctime64(const __time64_t *_Time);
errno_t __cdecl _wctime64_s(__int16 *_Buffer, size_t _SizeInWords, const __time64_t *_Time);
int __cdecl _wctomb_l(char *_MbCh, __int16 _WCh, _locale_t _Locale);
errno_t __cdecl _wctomb_s_l(int *_SizeConverted, char *_MbCh, size_t _SizeInBytes, __int16 _WCh, _locale_t _Locale);
errno_t __cdecl _wdupenv_s(__int16 **_Buffer, size_t *_BufferCount, const __int16 *_VarName);
intptr_t _wexecl(const __int16 *_FileName, const __int16 *_ArgList, ...);
intptr_t _wexecle(const __int16 *_FileName, const __int16 *_ArgList, ...);
intptr_t _wexeclp(const __int16 *_FileName, const __int16 *_ArgList, ...);
intptr_t _wexeclpe(const __int16 *_FileName, const __int16 *_ArgList, ...);
intptr_t __cdecl _wexecv(const __int16 *_FileName, const __int16 *const *_ArgList);
intptr_t __cdecl _wexecve(const __int16 *_FileName, const __int16 *const *_ArgList, const __int16 *const *_Env);
intptr_t __cdecl _wexecvp(const __int16 *_FileName, const __int16 *const *_ArgList);
intptr_t __cdecl _wexecvpe(const __int16 *_FileName, const __int16 *const *_ArgList, const __int16 *const *_Env);
FILE *__cdecl _wfdopen(int _FileHandle, const __int16 *_Mode);
intptr_t __cdecl _wfindfirst32(const __int16 *_FileName, _wfinddata32_t *_FindData);
intptr_t __cdecl _wfindfirst32i64(const __int16 *_FileName, _wfinddata32i64_t *_FindData);
intptr_t __cdecl _wfindfirst64(const __int16 *_FileName, _wfinddata64_t *_FindData);
intptr_t __cdecl _wfindfirst64i32(const __int16 *_FileName, _wfinddata64i32_t *_FindData);
int __cdecl _wfindnext32(intptr_t _FindHandle, _wfinddata32_t *_FindData);
int __cdecl _wfindnext32i64(intptr_t _FindHandle, _wfinddata32i64_t *_FindData);
int __cdecl _wfindnext64(intptr_t _FindHandle, _wfinddata64_t *_FindData);
int __cdecl _wfindnext64i32(intptr_t _FindHandle, _wfinddata64i32_t *_FindData);
FILE *__cdecl _wfopen(const __int16 *_FileName, const __int16 *_Mode);
errno_t __cdecl _wfopen_s(FILE **_Stream, const __int16 *_FileName, const __int16 *_Mode);
FILE *__cdecl _wfreopen(const __int16 *_FileName, const __int16 *_Mode, FILE *_OldStream);
errno_t __cdecl _wfreopen_s(FILE **_Stream, const __int16 *_FileName, const __int16 *_Mode, FILE *_OldStream);
FILE *__cdecl _wfsopen(const __int16 *_FileName, const __int16 *_Mode, int _ShFlag);
__int16 *__cdecl _wfullpath(__int16 *_Buffer, const __int16 *_Path, size_t _BufferCount);
__int16 *__cdecl _wgetcwd(__int16 *_DstBuf, int _SizeInWords);
__int16 *__cdecl _wgetdcwd(int _Drive, __int16 *_DstBuf, int _SizeInWords);
__int16 *__cdecl _wgetenv(const __int16 *_VarName);
errno_t __cdecl _wgetenv_s(size_t *_RequiredCount, __int16 *_Buffer, size_t _BufferCount, const __int16 *_VarName);
void __cdecl _wmakepath(__int16 *_Buffer, const __int16 *_Drive, const __int16 *_Dir, const __int16 *_Filename, const __int16 *_Ext);
errno_t __cdecl _wmakepath_s(__int16 *_Buffer, size_t _BufferCount, const __int16 *_Drive, const __int16 *_Dir, const __int16 *_Filename, const __int16 *_Ext);
int __cdecl _wmkdir(const __int16 *_Path);
__int16 *__cdecl _wmktemp(__int16 *_TemplateName);
errno_t __cdecl _wmktemp_s(__int16 *_TemplateName, size_t _SizeInWords);
int __cdecl _wopen(const __int16 *_FileName, int _OFlag, int _PMode);
void __cdecl _wperror(const __int16 *_ErrorMessage);
FILE *__cdecl _wpopen(const __int16 *_Command, const __int16 *_Mode);
int _wprintf_l(const __int16 *const _Format, const _locale_t _Locale, ...);
int _wprintf_p(const __int16 *const _Format, ...);
int _wprintf_p_l(const __int16 *const _Format, const _locale_t _Locale, ...);
int _wprintf_s_l(const __int16 *const _Format, const _locale_t _Locale, ...);
int __cdecl _wputenv(const __int16 *_EnvString);
errno_t __cdecl _wputenv_s(const __int16 *_Name, const __int16 *_Value);
int __cdecl _wremove(const __int16 *_FileName);
int __cdecl _wrename(const __int16 *_OldFileName, const __int16 *_NewFileName);
int __cdecl _write(int _FileHandle, const void *_Buf, unsigned int _MaxCharCount);
int __cdecl _wrmdir(const __int16 *_Path);
int _wscanf_l(const __int16 *const _Format, const _locale_t _Locale, ...);
int _wscanf_s_l(const __int16 *const _Format, const _locale_t _Locale, ...);
void __cdecl _wsearchenv(const __int16 *_Filename, const __int16 *_VarName, __int16 *_ResultPath);
errno_t __cdecl _wsearchenv_s(const __int16 *_Filename, const __int16 *_VarName, __int16 *_Buffer, size_t _BufferCount);
__int16 *__cdecl _wsetlocale(int _Category, const __int16 *_Locale);
int __cdecl _wsopen(const __int16 *_FileName, int _OFlag, int _ShFlag, int _PMode);
errno_t __cdecl _wsopen_dispatch(const __int16 *_FileName, int _OFlag, int _ShFlag, int _PMode, int *_PFileHandle, int _BSecure);
errno_t __cdecl _wsopen_s(int *_FileHandle, const __int16 *_FileName, int _OpenFlag, int _ShareFlag, int _PermissionFlag);
intptr_t _wspawnl(int _Mode, const __int16 *_FileName, const __int16 *_ArgList, ...);
intptr_t _wspawnle(int _Mode, const __int16 *_FileName, const __int16 *_ArgList, ...);
intptr_t _wspawnlp(int _Mode, const __int16 *_FileName, const __int16 *_ArgList, ...);
intptr_t _wspawnlpe(int _Mode, const __int16 *_FileName, const __int16 *_ArgList, ...);
intptr_t __cdecl _wspawnv(int _Mode, const __int16 *_FileName, const __int16 *const *_ArgList);
intptr_t __cdecl _wspawnve(int _Mode, const __int16 *_FileName, const __int16 *const *_ArgList, const __int16 *const *_Env);
intptr_t __cdecl _wspawnvp(int _Mode, const __int16 *_FileName, const __int16 *const *_ArgList);
intptr_t __cdecl _wspawnvpe(int _Mode, const __int16 *_FileName, const __int16 *const *_ArgList, const __int16 *const *_Env);
void __cdecl _wsplitpath(const __int16 *_FullPath, __int16 *_Drive, __int16 *_Dir, __int16 *_Filename, __int16 *_Ext);
errno_t __cdecl _wsplitpath_s(const __int16 *_FullPath, __int16 *_Drive, size_t _DriveCount, __int16 *_Dir, size_t _DirCount, __int16 *_Filename, size_t _FilenameCount, __int16 *_Ext, size_t _ExtCount);
int __cdecl _wstat32(const __int16 *_FileName, struct _stat32 *_Stat);
int __cdecl _wstat32i64(const __int16 *_FileName, struct _stat32i64 *_Stat);
int __cdecl _wstat64(const __int16 *_FileName, struct _stat64 *_Stat);
int __cdecl _wstat64i32(const __int16 *_FileName, struct _stat64i32 *_Stat);
__int16 *__cdecl _wstrdate(__int16 *_Buffer);
errno_t __cdecl _wstrdate_s(__int16 *_Buffer, size_t _SizeInWords);
__int16 *__cdecl _wstrtime(__int16 *_Buffer);
errno_t __cdecl _wstrtime_s(__int16 *_Buffer, size_t _SizeInWords);
int __cdecl _wsystem(const __int16 *_Command);
__int16 *__cdecl _wtempnam(const __int16 *_Directory, const __int16 *_FilePrefix);
__int16 *__cdecl _wtmpnam(__int16 *_Buffer);
errno_t __cdecl _wtmpnam_s(__int16 *_Buffer, size_t _BufferCount);
double __cdecl _wtof(const __int16 *_String);
double __cdecl _wtof_l(const __int16 *_String, _locale_t _Locale);
int __cdecl _wtoi(const __int16 *_String);
__int64 __cdecl _wtoi64(const __int16 *_String);
__int64 __cdecl _wtoi64_l(const __int16 *_String, _locale_t _Locale);
int __cdecl _wtoi_l(const __int16 *_String, _locale_t _Locale);
__int32 __cdecl _wtol(const __int16 *_String);
__int32 __cdecl _wtol_l(const __int16 *_String, _locale_t _Locale);
__int64 __cdecl _wtoll(const __int16 *_String);
__int64 __cdecl _wtoll_l(const __int16 *_String, _locale_t _Locale);
int __cdecl _wunlink(const __int16 *_FileName);
double __cdecl _y0(double _X);
double __cdecl _y1(double _X);
double __cdecl _yn(int _X, double _Y);
void __noreturn abort(void);
long double __cdecl abs(long double _Xx);
int __cdecl access(const char *_FileName, int _AccessMode);
double __cdecl acos(double _X);
float __cdecl acosf(float _X);
double __cdecl acosh(double _X);
float __cdecl acoshf(float _X);
long double __cdecl acoshl(long double _X);
long double __cdecl acosl(long double _X);
bool __cdecl acp_utf8(qstring *out, const char *in);
void __cdecl activate_widget(TWidget *widget, bool take_focus);
bool __cdecl add_auto_stkpnt(func_t *pfn, ea_t ea, sval_t delta);
int __cdecl add_base_tils(qstring *errbuf, til_t *ti, const char *tildir, const char *bases, bool gen_events);
bool __cdecl add_bpt(const bpt_t *bpt);
void __cdecl add_byte(ea_t ea, uint32 value);
bool __cdecl add_cref(ea_t from, ea_t to, cref_t type);
bool __cdecl add_dref(ea_t from, ea_t to, dref_t type);
void __cdecl add_dword(ea_t ea, uint64 value);
int __cdecl add_encoding(const char *encname);
bool __cdecl add_entry(uval_t ord, ea_t ea, const char *name, bool makecode, int flags);
enum_t __cdecl add_enum(size_t idx, const char *name, flags_t flag);
int __cdecl add_enum_member(enum_t id, const char *name, uval_t value, bmask_t bmask);
bool add_extra_cmt(ea_t ea, bool isprev, const char *format, ...);
bool add_extra_line(ea_t ea, bool isprev, const char *format, ...);
bool __cdecl add_frame(func_t *pfn, sval_t frsize, ushort frregs, asize_t argsize);
bool __cdecl add_func(ea_t ea1, ea_t ea2);
bool __cdecl add_func_ex(func_t *pfn);
bool __cdecl add_hidden_range(ea_t ea1, ea_t ea2, const char *description, const char *header, const char *footer, bgcolor_t color);
idc_class_t *__cdecl add_idc_class(const char *name, const idc_class_t *super);
bool __cdecl add_idc_func(const ext_idcfunc_t *func);
idc_value_t *__cdecl add_idc_gvar(const char *name);
int __cdecl add_idc_hotkey(const char *hotkey, const char *idcfunc);
bool __cdecl add_mapping(ea_t from, ea_t to, asize_t size);
void __cdecl add_path_mapping(const char *src, const char *dst);
bool add_pgm_cmt(const char *format, ...);
void __cdecl add_qword(ea_t ea, uint64 value);
ea_t __cdecl add_refinfo_dref(const insn_t *insn, ea_t from, const refinfo_t *ri, adiff_t opval, dref_t type, int opoff);
void __cdecl add_regarg(func_t *pfn, int reg, const tinfo_t *tif, const char *name);
int __cdecl add_regvar(func_t *pfn, ea_t ea1, ea_t ea2, const char *canon, const char *user, const char *cmt);
bool __cdecl add_segm(ea_t para, ea_t start, ea_t end, const char *name, const char *sclass, int flags);
bool __cdecl add_segm_ex(segment_t *s, const char *name, const char *sclass, int flags);
bool __cdecl add_segment_translation(ea_t segstart, ea_t mappedseg);
bool __cdecl add_sourcefile(ea_t ea1, ea_t ea2, const char *filename);
char *__cdecl add_spaces(char *str, size_t bufsize, ssize_t len);
bool __cdecl add_stkvar(const insn_t *insn, const op_t *x, sval_t v, int flags);
tid_t __cdecl add_struc(uval_t idx, const char *name, bool is_union);
struc_error_t __cdecl add_struc_member(struc_t *sptr, const char *fieldname, ea_t offset, flags_t flag, const opinfo_t *mt, asize_t nbytes);
int __cdecl add_til(const char *name, int flags);
int __cdecl add_tryblk(const tryblk_t *tb);
bool __cdecl add_user_stkpnt(ea_t ea, sval_t delta);
bool __cdecl add_virt_module(const modinfo_t *mod);
void __cdecl add_word(ea_t ea, uint64 value);
int addon_count(void);
ea_t __cdecl adjust_visea(ea_t ea);
ea_t __cdecl align_down_to_stack(ea_t newea);
flags_t align_flag(void);
void __cdecl align_size(size_t *cur_tot_size, size_t elem_size, size_t algn);
sval_t __cdecl align_stkarg_up(sval_t spoff, const tinfo_t *tif, int slotsize, cm_t cc);
ea_t __cdecl align_up_to_stack(ea_t ea1, ea_t ea2);
uint32 __cdecl alloc_type_ordinal(til_t *ti);
uint32 __cdecl alloc_type_ordinals(til_t *ti, int qty);
sel_t __cdecl allocate_selector(ea_t segbase);
void analyzer_options(void);
bool __cdecl append_abi_opts(const char *abi_opts, bool user_level);
bool __cdecl append_argloc(qtype *out, const argloc_t *vloc);
bool __cdecl append_cmt(ea_t ea, const char *str, bool rptble);
void __cdecl append_disp(qstring *buf, adiff_t disp, bool tag);
bool __cdecl append_func_tail(func_t *pfn, ea_t ea1, ea_t ea2);
void __cdecl append_regval(bytevec_t *s, const regval_t *value);
int append_snprintf(char *buf, const char *end, const char *format, ...);
flags_t __cdecl append_struct_fields(qstring *out, adiff_t *disp, int n, const tid_t *path, int plen, flags_t flags, adiff_t delta, bool appzero);
bool __cdecl append_tinfo_covered(rangeset_t *out, uint32 typid, uint64 offset);
bool __cdecl append_to_flowchart(qflow_chart_t *, ea_t, ea_t);
bool __cdecl apply_callee_tinfo(ea_t caller, const tinfo_t *tif);
bool __cdecl apply_cdecl(til_t *til, ea_t ea, const char *decl, int flags);
bool __cdecl apply_fixup(ea_t item_ea, ea_t fixup_ea, int n, bool is_macro);
int __cdecl apply_idasgn_to(const char *signame, ea_t ea, bool is_startup);
bool __cdecl apply_named_type(ea_t ea, const char *name);
bool __cdecl apply_once_tinfo_and_name(ea_t dea, const tinfo_t *tif, const char *name);
bool __cdecl apply_startup_sig(ea_t ea, const char *startup);
bool __cdecl apply_tinfo(ea_t ea, const tinfo_t *tif, uint32 flags);
bool __cdecl apply_tinfo_to_stkarg(const insn_t *insn, const op_t *x, uval_t v, const tinfo_t *tif, const char *name);
int __cdecl asc_to_r50(ushort *r, const char *p, int k);
char *__cdecl asctime(const tm *_Tm);
errno_t __cdecl asctime_s(char *_Buffer, size_t _SizeInBytes, const tm *_Tm);
fpvalue_error_t __cdecl asctoreal(const char **sss, fpvalue_t *out);
asm_t ash;
double __cdecl asin(double _X);
float __cdecl asinf(float _X);
double __cdecl asinh(double _X);
float __cdecl asinhf(float _X);
long double __cdecl asinhl(long double _X);
long double __cdecl asinl(long double _X);
bool ask_addr(ea_t *addr, const char *format, ...);
int ask_buttons(const char *Yes, const char *No, const char *Cancel, int deflt, const char *format, ...);
char *ask_file(bool for_saving, const char *defval, const char *format, ...);
void ask_for_feedback(const char *format, ...);
int ask_form(const char *form, ...);
bool ask_ident(qstring *str, const char *format, ...);
bool ask_long(sval_t *value, const char *format, ...);
bool ask_seg(sel_t *sel, const char *format, ...);
bool ask_str(qstring *str, int hist, const char *format, ...);
bool ask_text(qstring *answer, size_t max_size, const char *defval, const char *format, ...);
int ask_yn(int deflt, help_t format, ...);
int __cdecl at_quick_exit(void (*)(void));
double __cdecl atan(double _X);
double __cdecl atan2(double _Y, double _X);
float __cdecl atan2f(float _Y, float _X);
long double __cdecl atan2l(long double _Y, long double _X);
float __cdecl atanf(float _X);
double __cdecl atanh(double _X);
float __cdecl atanhf(float _X);
long double __cdecl atanhl(long double _X);
long double __cdecl atanl(long double _X);
int __cdecl atexit(void (*)(void));
bool __cdecl atob32(uint32 *x, const char *str);
bool __cdecl atob64(uint64 *x, const char *str);
bool __cdecl atoea(ea_t *pea, const char *str);
double __cdecl atof(const char *_String);
int __cdecl atoi(const char *_String);
__int32 __cdecl atol(const char *_String);
__int64 __cdecl atoll(const char *_String);
int __cdecl atos(sel_t *seg, const char *str);
bool __cdecl attach_action_to_menu(const char *menupath, const char *name, int flags);
bool __cdecl attach_action_to_popup(TWidget *widget, TPopupMenu *popup_handle, const char *name, const char *popuppath, int flags);
bool __cdecl attach_action_to_toolbar(const char *toolbar_name, const char *name);
bool __cdecl attach_custom_data_format(int dtid, int dfid);
bool __cdecl attach_dynamic_action_to_popup(TWidget *widget, TPopupMenu *popup_handle, const action_desc_t *desc, const char *popuppath, int flags, qstring *buf);
int __cdecl attach_process(pid_t pid, int event_id);
void __cdecl auto_apply_tail(ea_t tail_ea, ea_t parent_ea);
void __cdecl auto_apply_type(ea_t caller, ea_t callee);
void __cdecl auto_cancel(ea_t ea1, ea_t ea2);
ea_t __cdecl auto_get(atype_t *type, ea_t lowEA, ea_t highEA);
bool auto_is_ok(void);
void __cdecl auto_make_code(ea_t ea);
void __cdecl auto_make_proc(ea_t ea);
bool __cdecl auto_make_step(ea_t ea1, ea_t ea2);
void __cdecl auto_mark(ea_t ea, atype_t type);
void __cdecl auto_mark_range(ea_t start, ea_t end, atype_t type);
int __cdecl auto_recreate_insn(ea_t ea);
void __cdecl auto_unmark(ea_t start, ea_t end, atype_t type);
bool auto_wait(void);
ssize_t __cdecl auto_wait_range(ea_t ea1, ea_t ea2);
size_t __cdecl b2a32(char *buf, size_t bufsize, uint32 x, int nbytes, int radix);
size_t __cdecl b2a64(char *buf, size_t bufsize, uint64 x, int nbytes, int radix);
size_t __cdecl b2a_width(int nbytes, int radix);
fpvalue_error_t __cdecl b_realcvt(void *m, fpvalue_t *out, uint16 swt);
char __cdecl back_char(const char **p);
bool __cdecl banner(int dont_use_wait);
int __cdecl base2file(FILE *fp, int64 pos, ea_t ea1, ea_t ea2);
bool __cdecl base64_decode(bytevec_t *output, const char *input, size_t size);
bool __cdecl base64_encode(qstring *output, const void *input, size_t size);
bool batch;
void __cdecl beep(beep_t beep_type);
void __cdecl begin_type_updating(update_type_t utp);
flags_t bin_flag(void);
ea_t __cdecl bin_search(ea_t, ea_t, const uchar *, const uchar *, size_t, int, int);
ea_t __cdecl bin_search2(ea_t start_ea, ea_t end_ea, const uchar *image, const uchar *mask, size_t len, int flags);
ea_t __cdecl bin_search3(size_t *out_matched_idx, ea_t start_ea, ea_t end_ea, const compiled_binpat_vec_t *data, int flags);
int __cdecl bitcount(uint64 x);
bool __cdecl bitrange_t_extract_using_bitrange(const bitrange_t *bm, void *dst, size_t dst_size, const void *src, size_t src_size, bool is_mf);
bool __cdecl bitrange_t_inject_using_bitrange(const bitrange_t *bm, void *dst, size_t dst_size, const void *src, size_t src_size, bool is_mf);
bool __cdecl bookmarks_t_erase(const lochist_entry_t *, uint32, void *);
uint32 __cdecl bookmarks_t_find_index(const lochist_entry_t *, void *);
bool __cdecl bookmarks_t_get(lochist_entry_t *, qstring *, uint32 *, void *);
bool __cdecl bookmarks_t_get_desc(qstring *, const lochist_entry_t *, uint32, void *);
dirtree_id_t __cdecl bookmarks_t_get_dirtree_id(const lochist_entry_t *, void *);
uint32 __cdecl bookmarks_t_mark(const lochist_entry_t *, uint32, const char *, const char *, void *);
bool __cdecl bookmarks_t_set_desc(qstring, const lochist_entry_t *, uint32, void *);
uint32 __cdecl bookmarks_t_size(const lochist_entry_t *, void *);
void bring_debugger_to_front(void);
void *__cdecl bsearch(const void *_Key, const void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
void *__cdecl bsearch_s(const void *_Key, const void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context);
size_t __cdecl btoa128(char *buf, size_t bufsize, uint128 x, int radix);
size_t __cdecl btoa32(char *buf, size_t bufsize, uint32 x, int radix);
size_t __cdecl btoa64(char *buf, size_t bufsize, uint64 x, int radix);
size_t __cdecl btoa_width(int nbytes, flags_t flag, int n);
wint_t __cdecl btowc(int _Ch);
void __cdecl build_anon_type_name(qstring *buf, const type_t *type, const p_list *fields);
load_info_t *__cdecl build_loaders_list(linput_t *li, const char *filename);
bool __cdecl build_snapshot_tree(snapshot_t *root);
ssize_t __cdecl build_stkvar_name(qstring *buf, const func_t *pfn, sval_t v);
void __cdecl build_stkvar_xrefs(xreflist_t *out, func_t *pfn, const member_t *mptr);
void build_strlist(void);
flags_t byte_flag(void);
int __cdecl bytesize(ea_t ea);
ea_t __cdecl calc_basevalue(ea_t target, ea_t base);
bgcolor_t __cdecl calc_bg_color(ea_t ea);
ssize_t __cdecl calc_c_cpp_name(qstring *out, const char *name, const tinfo_t *type, int ccn_flags);
uint32 __cdecl calc_crc32(uint32 crc, const void *buf, size_t len);
ea_t __cdecl calc_dataseg(const insn_t *insn, int n, int rgnum);
int __cdecl calc_def_align(ea_t ea, int mina, int maxa);
int calc_default_idaplace_flags(void);
flags_t __cdecl calc_dflags(flags_t f, bool force);
double __cdecl calc_dist(point_t p, point_t q);
uint32 __cdecl calc_file_crc32(linput_t *fp);
int __cdecl calc_fixup_size(fixup_type_t type);
asize_t __cdecl calc_func_size(func_t *pfn);
int __cdecl calc_gtn_flags(ea_t from, ea_t ea);
int __cdecl calc_idasgn_state(int n);
int __cdecl calc_max_align(ea_t endea);
ea_t __cdecl calc_max_item_end(ea_t ea, int how);
int __cdecl calc_min_align(asize_t length);
int __cdecl calc_number_of_children(const argloc_t *loc, const tinfo_t *tif, bool dont_deref_ptr);
ea_t __cdecl calc_offset_base(ea_t ea, int n);
color_t __cdecl calc_prefix_color(ea_t ea);
ea_t __cdecl calc_probable_base_by_value(ea_t ea, uval_t off);
bool __cdecl calc_reference_data(ea_t *target, ea_t *base, ea_t from, const refinfo_t *ri, adiff_t opval);
ea_t __cdecl calc_stkvar_struc_offset(func_t *pfn, const insn_t *insn, int n);
bool __cdecl calc_switch_cases(casevec_t *casevec, eavec_t *targets, ea_t insn_ea, const switch_info_t *si);
ea_t __cdecl calc_target(ea_t from, ea_t ea, int n, adiff_t opval);
ea_t __cdecl calc_thunk_func_target(func_t *pfn, ea_t *fptr);
bool __cdecl calc_tinfo_gaps(rangeset_t *out, uint32 typid);
bool __cdecl call_idc_func(idc_value_t *result, const char *fname, const idc_value_t args[], size_t argsnum, qstring *errbuf, idc_resolver_t *resolver);
int __cdecl call_system(const char *command);
void *__cdecl calloc(size_t _Count, size_t _Size);
callui_t (*callui)(ui_notification_t, ...);
ea_t __cdecl can_be_off32(ea_t ea);
bool __cdecl can_decode(ea_t ea);
bool __cdecl can_define_item(ea_t ea, asize_t length, flags_t flags);
bool __cdecl cancel_exec_request(int req_id);
int __cdecl cancel_thread_exec_requests(qthread_t tid);
double __cdecl cbrt(double _X);
float __cdecl cbrtf(float _X);
long double __cdecl cbrtl(long double _X);
double __cdecl ceil(double _X);
float __cdecl ceilf(float _X);
long double __cdecl ceill(long double _X);
const char *__cdecl cfgopt_t__apply(const cfgopt_t *_this, int vtype, const void *vdata);
const char *__cdecl cfgopt_t__apply2(const cfgopt_t *_this, int vtype, const void *vdata, void *obj);
const char *__cdecl cfgopt_t__apply3(const cfgopt_t *_this, lexer_t *lx, int vtype, const void *vdata, void *obj);
int __cdecl change_bptlocs(const movbpt_infos_t *movinfo, movbpt_codes_t *codes, bool del_hindering_bpts);
bool __cdecl change_codepage(qstring *out, const char *in, int incp, int outcp);
int __cdecl change_segment_status(segment_t *s, bool is_deb_segm);
error_t __cdecl change_storage_type(ea_t start_ea, ea_t end_ea, storage_type_t stt);
flags_t char_flag(void);
int __cdecl chdir(const char *_Path);
int __cdecl check_bpt(ea_t ea);
int __cdecl check_flat_jump_table(switch_info_t *si, ea_t jump_ea, int is_pattern_res);
bool __cdecl check_for_table_jump(switch_info_t *si, const insn_t *insn, is_pattern_t *const patterns[], size_t qty, table_checker_t *check_table, const char *name);
int __cdecl check_process_exit(void *handle, int *exit_code, int msecs);
void __cdecl check_spoiled_jpt(const jump_pattern_t *_this, tracked_regs_t *_regs);
int __cdecl chmod(const char *_FileName, int _AccessMode);
ssize_t __cdecl choose(chooser_base_t *ch, const void *def_item);
ea_t __cdecl choose_entry(const char *title);
enum_t __cdecl choose_enum(const char *title, enum_t default_id);
enum_t __cdecl choose_enum_by_value(const char *title, enum_t default_id, uint64 value, int nbytes, uchar *serial);
func_t *__cdecl choose_func(const char *title, ea_t default_ea);
char *choose_idasgn(void);
bool __cdecl choose_ioport_device(qstring *_device, const char *file, const char *(__cdecl *parse_params)(qstring *, const char *));
bool __cdecl choose_ioport_device2(qstring *_device, const char *file, choose_ioport_parser_t *parse_params);
uint32 __cdecl choose_local_tinfo(const til_t *ti, const char *title, int (__cdecl *func)(uint32, const tinfo_t *, void *), uint32 def_ord, void *ud);
uint32 __cdecl choose_local_tinfo_and_delta(int32 *delta, const til_t *ti, const char *title, int (__cdecl *func)(uint32, const tinfo_t *, void *), uint32 def_ord, void *ud);
ea_t __cdecl choose_name(const char *title);
bool __cdecl choose_named_type(til_symbol_t *out_sym, const til_t *root_til, const char *title, int ntf_flags, predicate_t *predicate);
segment_t *__cdecl choose_segm(const char *title, ea_t default_ea);
sreg_range_t *__cdecl choose_srcp(const char *title);
ea_t __cdecl choose_stkvar_xref(func_t *pfn, member_t *mptr);
struc_t *__cdecl choose_struc(const char *title);
int __cdecl choose_struc_path(const char *title, tid_t strid, uval_t offset, adiff_t delta, bool appzero, tid_t *path);
bool __cdecl choose_til(qstring *buf);
bool __cdecl choose_trace_file(qstring *buf);
ea_t __cdecl choose_xref(ea_t to);
int __cdecl chsize(int _FileHandle, __int32 _Size);
asize_t __cdecl chunk_size(ea_t ea);
ea_t __cdecl chunk_start(ea_t ea);
error_t __cdecl cleanup_appcall(thid_t tid);
void __cdecl cleanup_argloc(argloc_t *vloc);
bool __cdecl cleanup_name(qstring *out, ea_t ea, const char *name, uint32 flags);
void __cdecl clear_all_bits(uchar *bitmap, size_t nbits);
void __cdecl clear_bit(uchar *bitmap, size_t bit);
void __cdecl clear_bits(uchar *bitmap, size_t low, size_t high);
void __cdecl clear_refresh_request(uint64 mask);
void clear_requests_queue(void);
void clear_strlist(void);
void __cdecl clear_tinfo_t(tinfo_t *_this);
void clear_trace(void);
void __cdecl clearerr(FILE *_Stream);
errno_t __cdecl clearerr_s(FILE *_Stream);
void __cdecl cliopts_t_add(cliopts_t *, const cliopt_t *, size_t);
void __cdecl cliopts_t_apply(cliopts_t *, int, const char *[], void *);
const cliopt_t *__cdecl cliopts_t_find_long(const cliopts_t *, const char *);
const cliopt_t *__cdecl cliopts_t_find_short(const cliopts_t *, char);
void __cdecl __noreturn cliopts_t_usage(const cliopts_t *, bool);
clock_t clock(void);
int __cdecl close(int _FileHandle);
bool __cdecl close_chooser(const char *title);
void __cdecl close_linput(linput_t *li);
void __cdecl close_widget(TWidget *widget, int options);
const char *closing_comment(void);
void __cdecl clr__bnot0(ea_t ea);
void __cdecl clr__bnot1(ea_t ea);
void __cdecl clr__invsign0(ea_t ea);
void __cdecl clr__invsign1(ea_t ea);
void __cdecl clr_abits(ea_t ea, aflags_t bits);
void __cdecl clr_align_flow(ea_t ea);
void clr_cancelled(void);
void __cdecl clr_colored_item(ea_t ea);
void __cdecl clr_database_flag(uint32 dbfl);
void __cdecl clr_fixed_spd(ea_t ea);
void __cdecl clr_has_lname(ea_t ea);
void __cdecl clr_has_ti(ea_t ea);
void __cdecl clr_has_ti0(ea_t ea);
void __cdecl clr_has_ti1(ea_t ea);
void __cdecl clr_ignore_micro(ea_t ea);
void __cdecl clr_libitem(ea_t ea);
bool __cdecl clr_lzero(ea_t ea, int n);
void __cdecl clr_lzero0(ea_t ea);
void __cdecl clr_lzero1(ea_t ea);
void *__cdecl clr_module_data(int data_id);
void __cdecl clr_node_info(graph_id_t gid, int node, uint32 flags);
void __cdecl clr_noret(ea_t ea);
void __cdecl clr_notcode(ea_t ea);
void __cdecl clr_notproc(ea_t ea);
bool __cdecl clr_op_type(ea_t ea, int n);
void __cdecl clr_retfp(ea_t ea);
void __cdecl clr_terse_struc(ea_t ea);
void __cdecl clr_tilcmt(ea_t ea);
void __cdecl clr_usemodsp(ea_t ea);
void __cdecl clr_usersp(ea_t ea);
void __cdecl clr_userti(ea_t ea);
void __cdecl clr_zstroff(ea_t ea);
flags_t code_flag(void);
void __cdecl code_highlight_block(void *context, highlighter_cbs_t *highlighter_cbs, const qstring *text);
bool __cdecl collect_stack_trace(thid_t tid, call_stack_t *trace);
void __cdecl combine_regs_jpt(jump_pattern_t *_this, tracked_regs_t *dst, const tracked_regs_t *src, ea_t ea);
int __cdecl compact_numbered_types(til_t *ti, uint32 min_ord, intvec_t *p_ordmap, int flags);
bool __cdecl compact_til(til_t *ti);
int __cdecl compare_arglocs(const argloc_t *a, const argloc_t *b);
bool __cdecl compare_tinfo(uint32 t1, uint32 t2, int tcflags);
bool __cdecl compile_idc_file(const char *file, qstring *errbuf, int cpl_flags);
bool __cdecl compile_idc_snippet(const char *func, const char *text, qstring *errbuf, idc_resolver_t *resolver, bool only_safe_funcs);
bool __cdecl compile_idc_text(const char *line, qstring *errbuf, idc_resolver_t *resolver, bool only_safe_funcs);
bool __cdecl construct_macro(insn_t *insn, bool enable, bool (__cdecl *build_macro)(insn_t *, bool));
bool __cdecl construct_macro2(macro_constructor_t *_this, insn_t *insn, bool enable);
bool __cdecl contains(uval_t off1, asize_t s1, uval_t off);
bool __cdecl contains_fixups(ea_t ea, asize_t size);
bool continue_process(void);
ssize_t __cdecl convert_encoding(bytevec_t *out, const char *fromcode, const char *tocode, const bytevec_t *indata, int flags);
int __cdecl convert_pt_flags_to_hti(int pt_flags);
void __cdecl copy_argloc(argloc_t *dst, const argloc_t *src);
void __cdecl copy_debug_event(debug_event_t *ev, const debug_event_t *r);
error_t __cdecl copy_idcv(idc_value_t *dst, const idc_value_t *src);
uint32 __cdecl copy_named_type(til_t *dsttil, const til_t *srctil, const char *name);
void __cdecl copy_sreg_ranges(int dst_rg, int src_rg, bool map_selector);
void __cdecl copy_tinfo_t(tinfo_t *_this, const tinfo_t *r);
double __cdecl copysign(double _Number, double _Sign);
float __cdecl copysignf(float _Number, float _Sign);
long double __cdecl copysignl(long double _Number, long double _Sign);
ea_t __cdecl correct_address(ea_t ea, ea_t from, ea_t to, ea_t size, bool skip_check);
double __cdecl cos(double _X);
float __cdecl cosf(float _X);
double __cdecl cosh(double _X);
float __cdecl coshf(float _X);
long double __cdecl coshl(long double _X);
long double __cdecl cosl(long double _X);
int __cdecl creat(const char *_FileName, int _PermissionMode);
bool __cdecl create_16bit_data(ea_t ea, asize_t length);
bool __cdecl create_32bit_data(ea_t ea, asize_t length);
bool __cdecl create_align(ea_t ea, asize_t length, int alignment);
bool __cdecl create_byte(ea_t ea, asize_t length, bool force);
linput_t *__cdecl create_bytearray_linput(const uchar *start, size_t size);
TWidget *__cdecl create_code_viewer(TWidget *custview, int flags, TWidget *parent);
bool __cdecl create_custdata(ea_t ea, asize_t length, int dtid, int fid, bool force);
TWidget *__cdecl create_custom_viewer(const char *title, const place_t *minplace, const place_t *maxplace, const place_t *curplace, const renderer_info_t *rinfo, void *ud, const custom_viewer_handlers_t *cvhandlers, void *cvhandlers_ud, TWidget *parent);
bool __cdecl create_data(ea_t ea, flags_t dataflag, asize_t size, tid_t tid);
dirtree_impl_t *__cdecl create_dirtree(dirtree_t *dt, dirspec_t *ds);
mutable_graph_t *__cdecl create_disasm_graph(const rangevec_t *ranges);
bool __cdecl create_double(ea_t ea, asize_t length, bool force);
bool __cdecl create_dword(ea_t ea, asize_t length, bool force);
TWidget *__cdecl create_empty_widget(const char *title, int icon);
encoder_t *__cdecl create_encoding_helper(int encidx, encoder_t__notify_recerr_t nr);
void create_filename_cmt(void);
bool __cdecl create_float(ea_t ea, asize_t length, bool force);
linput_t *__cdecl create_generic_linput(generic_linput_t *gl);
graph_viewer_t *__cdecl create_graph_viewer(const char *title, uval_t id, ssize_t (__cdecl *callback)(void *, int, va_list), void *ud, int title_height, TWidget *parent);
bool __cdecl create_idcv_ref(idc_value_t *ref, const idc_value_t *v);
int __cdecl create_insn(ea_t ea, insn_t *out);
lexer_t *__cdecl create_lexer(const char *const *keys, size_t size, void *ud);
linput_t *__cdecl create_memory_linput(ea_t start, asize_t size);
bool __cdecl create_menu(const char *name, const char *label, const char *menupath);
bool __cdecl create_multirange_qflow_chart(qflow_chart_t *, const rangevec_t *);
mutable_graph_t *__cdecl create_mutable_graph(uval_t id);
ssize_t __cdecl create_numbered_type_name(qstring *buf, int32 ord);
outctx_base_t *__cdecl create_outctx(ea_t ea, flags_t F, int suspop);
bool __cdecl create_oword(ea_t ea, asize_t length, bool force);
bool __cdecl create_packed_real(ea_t ea, asize_t length, bool force);
void __cdecl create_qflow_chart(qflow_chart_t *);
bool __cdecl create_qword(ea_t ea, asize_t length, bool force);
source_view_t *__cdecl create_source_viewer(TWidget **out_ccv, TWidget *parent, TWidget *custview, source_file_ptr sf, strvec_t *lines, int lnnum, int colnum, int flags);
bool __cdecl create_strlit(ea_t start, size_t len, int32 strtype);
bool __cdecl create_struct(ea_t ea, asize_t length, tid_t tid, bool force);
bool __cdecl create_switch_table(ea_t insn_ea, const switch_info_t *si);
void __cdecl create_switch_xrefs(ea_t insn_ea, const switch_info_t *si);
bool __cdecl create_tbyte(ea_t ea, asize_t length, bool force);
bool __cdecl create_tinfo(tinfo_t *_this, type_t bt, type_t bt2, void *ptr);
bool __cdecl create_toolbar(const char *name, const char *label, const char *before, int flags);
user_graph_place_t *__cdecl create_user_graph_place(int node, int lnnum);
bool __cdecl create_word(ea_t ea, asize_t length, bool force);
bool __cdecl create_xrefs_from(ea_t ea);
bool __cdecl create_yword(ea_t ea, asize_t length, bool force);
linput_t *__cdecl create_zip_linput(linput_t *in, ssize_t insize, linput_close_code_t loc);
bool __cdecl create_zword(ea_t ea, asize_t length, bool force);
std__exception_ptr current_exception(void);
flags_t cust_flag(void);
flags_t custfmt_flag(void);
bool __cdecl custom_viewer_jump(TWidget *v, const lochist_entry_t *loc, uint32 flags);
debugger_t *dbg;
bool __cdecl dbg_add_bpt_tev(thid_t tid, ea_t ea, ea_t bp);
void __cdecl dbg_add_call_tev(thid_t tid, ea_t caller, ea_t callee);
void __cdecl dbg_add_debug_event(debug_event_t *event);
bool __cdecl dbg_add_insn_tev(thid_t tid, ea_t ea, save_reg_values_t save);
bool __cdecl dbg_add_many_tevs(tevinforeg_vec_t *new_tevs);
void __cdecl dbg_add_ret_tev(thid_t tid, ea_t ret_insn, ea_t return_to);
void __cdecl dbg_add_tev(tev_type_t type, thid_t tid, ea_t address);
void __cdecl dbg_add_thread(thid_t tid);
error_t __cdecl dbg_appcall(idc_value_t *retval, ea_t func_ea, thid_t tid, const tinfo_t *ptif, idc_value_t *argv, size_t argnum);
drc_t __cdecl dbg_bin_search(ea_t *out, ea_t start_ea, ea_t end_ea, const compiled_binpat_vec_t *data, int srch_flags, qstring *errbuf);
bool dbg_can_query(void);
void __cdecl dbg_del_thread(thid_t tid);
ssize_t __cdecl dbg_get_input_path(char *buf, size_t bufsize);
int __cdecl dd_size(uchar first_byte);
uint32 debug;
flags_t dec_flag(void);
int __cdecl decode_insn(insn_t *out, ea_t ea);
ea_t __cdecl decode_preceding_insn(insn_t *out, ea_t ea, bool *p_farref);
ea_t __cdecl decode_prev_insn(insn_t *out, ea_t ea);
bool __cdecl decorate_name(qstring *out, const char *name, bool mangle, cm_t cc, const tinfo_t *type);
error_t __cdecl deep_copy_idcv(idc_value_t *dst, const idc_value_t *src);
comp_t default_compiler(void);
const char *__cdecl define_exception(uint code, const char *name, const char *desc, int flags);
bool __cdecl define_stkvar(func_t *pfn, const char *name, sval_t off, flags_t flags, const opinfo_t *ti, asize_t nbytes);
void __cdecl del_absbase(ea_t ea);
void __cdecl del_aflags(ea_t ea);
void __cdecl del_alignment(ea_t ea);
void __cdecl del_array_parameters(ea_t ea);
bool __cdecl del_bpt(const bpt_location_t *bptloc);
bool __cdecl del_bptgrp(const char *name);
bool __cdecl del_cref(ea_t from, ea_t to, bool expand);
void __cdecl del_custom_data_type_ids(ea_t ea);
void __cdecl del_debug_names(ea_t ea1, ea_t ea2);
void __cdecl del_dref(ea_t from, ea_t to);
bool __cdecl del_encoding(int idx);
void __cdecl del_enum(enum_t id);
bool __cdecl del_enum_member(enum_t id, uval_t value, uchar serial, bmask_t bmask);
void __cdecl del_extra_cmt(ea_t ea, int what);
void __cdecl del_fixup(ea_t source);
bool __cdecl del_frame(func_t *pfn);
bool __cdecl del_func(ea_t ea);
bool __cdecl del_global_name(ea_t ea);
bool __cdecl del_hidden_range(ea_t ea);
int __cdecl del_idasgn(int n);
bool __cdecl del_idc_func(const char *name);
bool __cdecl del_idc_hotkey(const char *hotkey);
error_t __cdecl del_idcv_attr(idc_value_t *obj, const char *attr);
void __cdecl del_ind_purged(ea_t ea);
bool __cdecl del_item_color(ea_t ea);
bool __cdecl del_items(ea_t ea, int flags, asize_t nbytes, bool (__cdecl *may_destroy)(ea_t));
bool __cdecl del_local_name(ea_t ea);
void __cdecl del_mapping(ea_t ea);
bool __cdecl del_member_tinfo(struc_t *sptr, member_t *mptr);
bool __cdecl del_named_type(til_t *ti, const char *name, int ntf_flags);
void __cdecl del_node_info(graph_id_t gid, int node);
bool __cdecl del_numbered_type(til_t *ti, uint32 ordinal);
void __cdecl del_op_tinfo(ea_t ea, int n);
void __cdecl del_qatexit(void (*func)(void));
bool __cdecl del_refinfo(ea_t ea, int n);
int __cdecl del_regvar(func_t *pfn, ea_t ea1, ea_t ea2, const char *canon);
bool __cdecl del_segm(ea_t ea, int flags);
void __cdecl del_segment_translations(ea_t segstart);
void __cdecl del_selector(sel_t selector);
void __cdecl del_source_linnum(ea_t ea);
bool __cdecl del_sourcefile(ea_t ea);
bool __cdecl del_sreg_range(ea_t ea, int rg);
bool __cdecl del_stkpnt(func_t *pfn, ea_t ea);
void __cdecl del_str_type(ea_t ea);
bool __cdecl del_struc(struc_t *sptr);
bool __cdecl del_struc_member(struc_t *sptr, ea_t offset);
int __cdecl del_struc_members(struc_t *sptr, ea_t off1, ea_t off2);
void __cdecl del_switch_info(ea_t ea);
void __cdecl del_switch_parent(ea_t ea);
bool __cdecl del_til(const char *name);
void __cdecl del_tinfo(ea_t ea);
bool __cdecl del_tinfo_attr(tinfo_t *tif, const qstring *key, bool make_copy);
void __cdecl del_tryblks(const range_t *range);
void __cdecl del_value(ea_t ea);
bool __cdecl del_vftable_ea(uint32 ordinal);
bool __cdecl del_virt_module(const ea_t base);
void __cdecl del_xrefpos(ea_t ea);
void __cdecl delete_all_xrefs_from(ea_t ea, bool expand);
void __cdecl delete_dirtree(dirtree_impl_t *d);
void __cdecl delete_extra_cmts(ea_t ea, int what);
void delete_imports(void);
bool __cdecl delete_menu(const char *name);
void __cdecl delete_mutable_graph(mutable_graph_t *g);
void __cdecl delete_switch_table(ea_t jump_ea, const switch_info_t *si);
bool __cdecl delete_toolbar(const char *name);
int __cdecl delete_unreferenced_stkvars(func_t *pfn);
int __cdecl delete_wrong_stkvar_ops(func_t *pfn);
bool __cdecl delinf(inftag_t tag);
int32 __cdecl demangle(char *, uint, const char *, uint32);
qstring __cdecl demangle_name(const char *name, uint32 disable_mask, demreq_type_t demreq);
idc_value_t *__cdecl deref_idcv(idc_value_t *v, int vref_flags);
bool __cdecl deref_ptr(ea_t *ptr_ea, const tinfo_t *tif, ea_t *closure_obj);
void __cdecl deserialize_dynamic_register_set(dynamic_register_set_t *idaregs, memory_deserializer_t *mmdsr);
bool __cdecl deserialize_tinfo(tinfo_t *tif, const til_t *til, const type_t **ptype, const p_list **pfields, const p_list **pfldcmts);
void __cdecl destroy_custom_viewer(TWidget *custom_viewer);
void __cdecl destroy_lexer(lexer_t *lx);
bool __cdecl detach_action_from_menu(const char *menupath, const char *name);
bool __cdecl detach_action_from_popup(TWidget *widget, const char *name);
bool __cdecl detach_action_from_toolbar(const char *toolbar_name, const char *name);
bool __cdecl detach_custom_data_format(int dtid, int dfid);
bool detach_process(void);
int32 __cdecl detect_compiler_using_demangler(const char *name);
void determine_rtl(void);
bool __cdecl diff_trace_file(const char *filename);
dterr_t __cdecl dirtree_change_rank(dirtree_impl_t *d, const char *path, ssize_t rank_delta);
dterr_t __cdecl dirtree_chdir(dirtree_impl_t *d, const char *path);
const char *__cdecl dirtree_errstr(dterr_t err);
dterr_t __cdecl dirtree_find_entry(dirtree_cursor_t *out, const dirtree_t *_dt, const direntry_t *_de);
bool __cdecl dirtree_findfirst(dirtree_impl_t *d, dirtree_iterator_t *ff, const char *pattern);
bool __cdecl dirtree_findnext(dirtree_impl_t *d, dirtree_iterator_t *ff);
bool __cdecl dirtree_get_abspath_by_cursor(qstring *out, const dirtree_impl_t *d, const dirtree_cursor_t *cursor);
bool __cdecl dirtree_get_abspath_by_relpath(qstring *out, const dirtree_impl_t *d, const char *relpath);
ssize_t __cdecl dirtree_get_dir_size(dirtree_impl_t *d, diridx_t diridx);
void __cdecl dirtree_get_entry_attrs(qstring *out, const dirtree_impl_t *d, const direntry_t *de);
bool __cdecl dirtree_get_entry_name(qstring *out, const dirtree_impl_t *d, const direntry_t *de, uint32 name_flags);
const char *__cdecl dirtree_get_id(const dirtree_impl_t *d);
const char *__cdecl dirtree_get_nodename(const dirtree_impl_t *d);
void __cdecl dirtree_get_parent_cursor(dirtree_cursor_t *out, const dirtree_impl_t *d, const dirtree_cursor_t *cursor);
ssize_t __cdecl dirtree_get_rank(const dirtree_impl_t *d, diridx_t diridx, const direntry_t *de);
void __cdecl dirtree_getcwd(qstring *out, const dirtree_impl_t *d);
dterr_t __cdecl dirtree_link(dirtree_impl_t *d, const char *path, bool do_link);
dterr_t __cdecl dirtree_link_inode(dirtree_impl_t *d, inode_t inode, bool do_link);
dterr_t __cdecl dirtree_mkdir(dirtree_impl_t *d, const char *path);
dterr_t __cdecl dirtree_rename(dirtree_impl_t *d, const char *from, const char *to);
void __cdecl dirtree_resolve_cursor(direntry_t *de, const dirtree_impl_t *d, const dirtree_cursor_t *cursor);
void __cdecl dirtree_resolve_path(direntry_t *de, const dirtree_impl_t *d, const char *path);
dterr_t __cdecl dirtree_rmdir(dirtree_impl_t *d, const char *path);
void __cdecl dirtree_set_id(dirtree_impl_t *d, const char *nm);
void __cdecl dirtree_set_nodename(dirtree_impl_t *d, const char *nm);
ssize_t __cdecl dirtree_traverse(dirtree_impl_t *d, dirtree_visitor_t *v);
bool disable_bblk_trace(void);
bool __cdecl disable_bpt(const bpt_location_t *bptloc);
error_t __cdecl disable_flags(ea_t start_ea, ea_t end_ea);
bool disable_func_trace(void);
bool disable_insn_trace(void);
bool disable_step_trace(void);
bool display_copyright_warning(void);
int __cdecl display_gdl(const char *fname);
void __cdecl display_widget(TWidget *widget, uint32 options, const char *dest_ctrl);
lldiv_t __cdecl div(const __int64 _A1, const __int64 _A2);
flags_t double_flag(void);
int __cdecl ds_packed_size(const char *s);
const char *__cdecl dstr_tinfo(const tinfo_t *tif);
ea_t __cdecl dummy_name_ea(const char *name);
bool __cdecl dump_func_type_data(qstring *out, const func_type_data_t *fti, int praloc_bits);
int __cdecl dup(int _FileHandle);
int __cdecl dup2(int _FileHandleSrc, int _FileHandleDst);
int __cdecl dw_size(uchar first_byte);
flags_t dword_flag(void);
nodeidx_t __cdecl ea2node(ea_t ea);
bool __cdecl ea2str(qstring *out, ea_t ea);
bool __cdecl ea_viewer_history_push_and_jump(TWidget *v, ea_t ea, int x, int y, int lnnum);
fpvalue_error_t __cdecl eadd(const fpvalue_t *a, const fpvalue_t *b, fpvalue_t *zout, bool subflg);
void __cdecl echsize(FILE *fp, uint64 size);
void __cdecl ecleaz(eNI x);
void __cdecl eclose(FILE *fp);
int __cdecl ecmp(const fpvalue_t *a, const fpvalue_t *b);
FILE *__cdecl ecreate(const char *file);
char *__cdecl ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign);
void edit_manual_regions(void);
fpvalue_error_t __cdecl ediv(const fpvalue_t *a, const fpvalue_t *b, fpvalue_t *zout);
fpvalue_error_t __cdecl eetol(sval_t *out, const fpvalue_t *a, bool roundflg);
fpvalue_error_t __cdecl eetol64(int64 *out, const fpvalue_t *a, bool roundflg);
fpvalue_error_t __cdecl eetol64u(uint64 *out, const fpvalue_t *a, bool roundflg);
fpvalue_error_t __cdecl eldexp(const fpvalue_t *a, int32 pwr2, fpvalue_t *zout);
void __cdecl eltoe(sval_t l, fpvalue_t *vout);
void __cdecl eltoe64(int64 l, fpvalue_t *vout);
void __cdecl eltoe64u(uint64 l, fpvalue_t *vout);
bool __cdecl emdnorm(eNI s, bool lost, bool subflg, int32 exp, int rndbase);
void __cdecl emovi(const fpvalue_t *a, eNI vout);
void __cdecl emovo(const eNI a, fpvalue_t *vout);
fpvalue_error_t __cdecl emul(const fpvalue_t *a, const fpvalue_t *b, fpvalue_t *zout);
bool __cdecl enable_auto(bool enable);
bool __cdecl enable_bblk_trace(bool enable);
bool __cdecl enable_bpt(const bpt_location_t *bptloc, bool enable);
int __cdecl enable_bptgrp(const char *bptgrp_name, bool enable);
bool __cdecl enable_chooser_item_attrs(const char *chooser_caption, bool enable);
error_t __cdecl enable_flags(ea_t start_ea, ea_t end_ea, storage_type_t stt);
bool __cdecl enable_func_trace(bool enable);
bool __cdecl enable_insn_trace(bool enable);
void __cdecl enable_manual_regions(bool enable);
bool __cdecl enable_numbered_types(til_t *ti, bool enable);
bool __cdecl enable_step_trace(int enable);
const char *__cdecl encoding_from_strtype(int32 strtype);
void __cdecl end_type_updating(update_type_t utp);
flags_t enum_flag(void);
int __cdecl enum_import_names(int mod_index, int (__cdecl *callback)(ea_t, const char *, uval_t, void *), void *param);
int __cdecl enumerate_files(char *answer, size_t answer_size, const char *path, const char *fname, int (__cdecl *func)(const char *, void *), void *ud);
int __cdecl enumerate_files2(char *answer, size_t answer_size, const char *path, const char *fname, file_enumerator_t *fv);
ea_t __cdecl enumerate_segments_with_selector(sel_t selector, ea_t (__cdecl *func)(segment_t *, void *), void *ud);
int __cdecl enumerate_selectors(int (__cdecl *func)(sel_t, ea_t));
void __cdecl enumplace_t__adjust(enumplace_t *, void *);
bool __cdecl enumplace_t__beginning(const enumplace_t *, void *);
place_t *__cdecl enumplace_t__clone(const enumplace_t *);
int __cdecl enumplace_t__compare(const enumplace_t *, const place_t *);
int __cdecl enumplace_t__compare2(const enumplace_t *, const place_t *, void *);
void __cdecl enumplace_t__copyfrom(enumplace_t *, const place_t *);
bool __cdecl enumplace_t__deserialize(enumplace_t *, const uchar **, const uchar *);
bool __cdecl enumplace_t__ending(const enumplace_t *, void *);
place_t *__cdecl enumplace_t__enter(const enumplace_t *, uint32 *);
int __cdecl enumplace_t__generate(const enumplace_t *, qstrvec_t *, int *, color_t *, bgcolor_t *, void *, int);
int __cdecl enumplace_t__id(const enumplace_t *);
void __cdecl enumplace_t__leave(const enumplace_t *, uint32);
place_t *__cdecl enumplace_t__makeplace(const enumplace_t *, void *, uval_t, int);
const char *__cdecl enumplace_t__name(const enumplace_t *);
bool __cdecl enumplace_t__next(enumplace_t *, void *);
bool __cdecl enumplace_t__prev(enumplace_t *, void *);
void __cdecl enumplace_t__print(const enumplace_t *, qstring *, void *);
bool __cdecl enumplace_t__rebase(enumplace_t *, const segm_move_infos_t *);
void __cdecl enumplace_t__serialize(const enumplace_t *, bytevec_t *out);
ea_t __cdecl enumplace_t__toea(const enumplace_t *);
uval_t __cdecl enumplace_t__touval(const enumplace_t *, void *);
int __cdecl eof(int _FileHandle);
bool __cdecl equal_bytes(ea_t ea, const uchar *image, const uchar *mask, size_t len, int bin_search_flags);
void __cdecl eread(FILE *fp, void *buf, size_t size);
double __cdecl erf(double _X);
double __cdecl erfc(double _X);
float __cdecl erfcf(float _X);
long double __cdecl erfcl(long double _X);
float __cdecl erff(float _X);
long double __cdecl erfl(long double _X);
void __noreturn error(const char *format, ...);
int errorexit;
void __cdecl eseek(FILE *fp, int64 pos);
int __cdecl eshift(eNI x, int sc);
bool __cdecl eval_expr(idc_value_t *rv, ea_t where, const char *line, qstring *errbuf);
bool __cdecl eval_expr_long(uval_t *res, ea_t where, const char *line, qstring *errbuf);
bool __cdecl eval_idc_expr(idc_value_t *rv, ea_t where, const char *buf, qstring *errbuf);
bool __cdecl eval_idc_snippet(idc_value_t *result, const char *line, qstring *errbuf, idc_resolver_t *resolver);
void __cdecl ewrite(FILE *fp, const void *buf, size_t size);
bool __cdecl exec_idc_script(idc_value_t *result, const char *path, const char *func, const idc_value_t args[], size_t argsnum, qstring *errbuf);
bool __cdecl exec_system_script(const char *file, bool complain_if_no_file);
int __cdecl execute_sync(exec_request_t *req, int reqf);
int execute_ui_requests(ui_request_t *req, ...);
bool __cdecl exist_bpt(ea_t ea);
bool __cdecl exists_fixup(ea_t source);
void __cdecl __noreturn exit(int _Code);
bool exit_process(void);
double __cdecl exp(double _X);
double __cdecl exp2(double _X);
float __cdecl exp2f(float _X);
long double __cdecl exp2l(long double _X);
char **__cdecl expand_argv(int *p_argc, int argc, const char *const argv[]);
bool __cdecl expand_struc(struc_t *sptr, ea_t offset, adiff_t delta, bool recalc);
float __cdecl expf(float _X);
long double __cdecl expl(long double _X);
double __cdecl expm1(double _X);
float __cdecl expm1f(float _X);
long double __cdecl expm1l(long double _X);
uint64 __cdecl extend_sign(uint64 v, int nbytes, bool sign_extend);
bool __cdecl extract_argloc(argloc_t *vloc, const type_t **ptype, bool forbid_stkoff);
bool __cdecl extract_module_from_archive(char *filename, size_t bufsize, char **temp_file_ptr, bool is_remote);
ssize_t __cdecl extract_name(qstring *out, const char *line, int x);
bool __cdecl f_any(flags_t, void *);
bool __cdecl f_has_cmt(flags_t f, void *);
bool __cdecl f_has_dummy_name(flags_t f, void *);
bool __cdecl f_has_extra_cmts(flags_t f, void *);
bool __cdecl f_has_name(flags_t f, void *);
bool __cdecl f_has_user_name(flags_t F, void *);
bool __cdecl f_has_xref(flags_t f, void *);
bool __cdecl f_is_align(flags_t F, void *);
bool __cdecl f_is_byte(flags_t F, void *);
bool __cdecl f_is_code(flags_t F, void *);
bool __cdecl f_is_custom(flags_t F, void *);
bool __cdecl f_is_data(flags_t F, void *);
bool __cdecl f_is_double(flags_t F, void *);
bool __cdecl f_is_dword(flags_t F, void *);
bool __cdecl f_is_float(flags_t F, void *);
bool __cdecl f_is_head(flags_t F, void *);
bool __cdecl f_is_not_tail(flags_t F, void *);
bool __cdecl f_is_oword(flags_t F, void *);
bool __cdecl f_is_pack_real(flags_t F, void *);
bool __cdecl f_is_qword(flags_t F, void *);
bool __cdecl f_is_strlit(flags_t F, void *);
bool __cdecl f_is_struct(flags_t F, void *);
bool __cdecl f_is_tail(flags_t F, void *);
bool __cdecl f_is_tbyte(flags_t F, void *);
bool __cdecl f_is_word(flags_t F, void *);
bool __cdecl f_is_yword(flags_t F, void *);
double __cdecl fabs(double _X);
float __cdecl fabsf(float _X);
long double __cdecl fabsl(long double _X);
fc_block_type_t __cdecl fc_calc_block_type(const qflow_chart_t *, size_t);
int __cdecl fclose(FILE *_Stream);
int fcloseall(void);
char *__cdecl fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign);
double __cdecl fdim(double _X, double _Y);
float __cdecl fdimf(float _X, float _Y);
long double __cdecl fdiml(long double _X, long double _Y);
FILE *__cdecl fdopen(int _FileHandle, const char *_Format);
int __cdecl feof(FILE *_Stream);
int __cdecl ferror(FILE *_Stream);
int __cdecl fflush(FILE *_Stream);
int __cdecl fgetc(FILE *_Stream);
int fgetchar(void);
int __cdecl fgetpos(FILE *_Stream, fpos_t *_Position);
char *__cdecl fgets(char *_Buffer, int _MaxCount, FILE *_Stream);
wint_t __cdecl fgetwc(FILE *_Stream);
__int16 *__cdecl fgetws(__int16 *_Buffer, int _BufferCount, FILE *_Stream);
int __cdecl file2base(linput_t *li, int64 pos, ea_t ea1, ea_t ea2, int patchable);
__int32 __cdecl filelength(int _FileHandle);
int __cdecl fileno(FILE *_Stream);
ea_t __cdecl find_binary(ea_t, ea_t, const char *, int, int);
bool __cdecl find_bpt(const bpt_location_t *bptloc, bpt_t *bpt);
ea_t __cdecl find_byte(ea_t sEA, asize_t size, uchar value, int bin_search_flags);
ea_t __cdecl find_byter(ea_t sEA, asize_t size, uchar value, int bin_search_flags);
ea_t __cdecl find_code(ea_t ea, int sflag);
int __cdecl find_custom_data_format(const char *name);
int __cdecl find_custom_data_type(const char *name);
fixup_type_t __cdecl find_custom_fixup(const char *name);
int __cdecl find_custom_refinfo(const char *name);
ea_t __cdecl find_data(ea_t ea, int sflag);
ea_t __cdecl find_defined(ea_t ea, int sflag);
ea_t __cdecl find_defjump_from_table(ea_t jump_ea, const switch_info_t *si);
ea_t __cdecl find_error(ea_t ea, int sflag, int *opnum);
void *__cdecl find_extlang(const void *str, find_extlang_kind_t kind);
extlang_object_t __cdecl find_extlang_by_ext(const char *ext);
extlang_object_t __cdecl find_extlang_by_index(size_t idx);
extlang_object_t __cdecl find_extlang_by_name(const char *name);
sel_t find_free_selector(void);
int __cdecl find_func_bounds(func_t *nfn, int flags);
idc_class_t *__cdecl find_idc_class(const char *name);
bool __cdecl find_idc_func(qstring *out, const char *prefix, int n);
idc_value_t *__cdecl find_idc_gvar(const char *name);
ea_t __cdecl find_imm(ea_t ea, int sflag, uval_t search_value, int *opnum);
const ioport_t *__cdecl find_ioport(const ioports_t *ports, ea_t address);
const ioport_bit_t *__cdecl find_ioport_bit(const ioports_t *ports, ea_t address, size_t bit);
bool __cdecl find_jtable_size(switch_info_t *si);
ea_t __cdecl find_not_func(ea_t ea, int sflag);
ea_t __cdecl find_notype(ea_t ea, int sflag, int *opnum);
plugin_t *__cdecl find_plugin(const char *name, bool load_if_needed);
ea_t __cdecl find_reg_access(reg_access_t *out, ea_t start_ea, ea_t end_ea, const char *regname, int sflag);
regvar_t *__cdecl find_regvar(func_t *pfn, ea_t ea, const char *canon);
sel_t __cdecl find_selector(ea_t base);
ea_t __cdecl find_suspop(ea_t ea, int sflag, int *opnum);
ea_t __cdecl find_syseh(ea_t ea);
ea_t __cdecl find_text(ea_t start_ea, int y, int x, const char *ustr, int sflag);
int __cdecl find_tinfo_udt_member(udt_member_t *udm, uint32 typid, int strmem_flags);
ea_t __cdecl find_unknown(ea_t ea, int sflag);
TWidget *__cdecl find_widget(const char *caption);
const char *__cdecl first_idcv_attr(const idc_value_t *obj);
const char *__cdecl first_named_type(const til_t *ti, int ntf_flags);
flags_t float_flag(void);
double __cdecl floor(double _X);
float __cdecl floorf(float _X);
long double __cdecl floorl(long double _X);
flags_t flt_flag(void);
int flush_buffers(void);
int flushall(void);
double __cdecl fma(double _X, double _Y, double _Z);
float __cdecl fmaf(float _X, float _Y, float _Z);
long double __cdecl fmal(long double _X, long double _Y, long double _Z);
double __cdecl fmax(double _X, double _Y);
float __cdecl fmaxf(float _X, float _Y);
long double __cdecl fmaxl(long double _X, long double _Y);
double __cdecl fmin(double _X, double _Y);
float __cdecl fminf(float _X, float _Y);
long double __cdecl fminl(long double _X, long double _Y);
double __cdecl fmod(double _X, double _Y);
float __cdecl fmodf(float _X, float _Y);
long double __cdecl fmodl(long double _X, long double _Y);
FILE *__cdecl fopen(const char *_FileName, const char *_Mode);
FILE *__cdecl fopenA(const char *file);
FILE *__cdecl fopenM(const char *file);
FILE *__cdecl fopenRB(const char *file);
FILE *__cdecl fopenRT(const char *file);
FILE *__cdecl fopenWB(const char *file);
FILE *__cdecl fopenWT(const char *file);
errno_t __cdecl fopen_s(FILE **_Stream, const char *_FileName, const char *_Mode);
int __cdecl for_all_arglocs(aloc_visitor_t *vv, argloc_t *vloc, int size, int off);
int __cdecl for_all_const_arglocs(const_aloc_visitor_t *vv, const argloc_t *vloc, int size, int off);
int __cdecl for_all_enum_members(enum_t id, enum_member_visitor_t *cv);
ssize_t __cdecl for_all_extlangs(extlang_visitor_t *ev, bool select);
bool __cdecl force_name(ea_t ea, const char *name, int flags);
bool __cdecl forget_problem(problist_id_t type, ea_t ea);
size_t __cdecl format_c_number(char *buf, size_t bufsize, uint128 value, int size, int pcn);
bool __cdecl format_cdata(qstrvec_t *outvec, const idc_value_t *idc_value, const tinfo_t *tif, valstr_t *vtree, const format_data_info_t *fdi);
bool __cdecl format_charlit(qstring *out, const uchar **ptr, size_t size, uint32 flags, int encidx);
int __cdecl fpclassify(long double _X);
void fpreset(void);
int fprintf(FILE *const _Stream, const char *const _Format, ...);
int fprintf_s(FILE *const _Stream, const char *const _Format, ...);
int __cdecl fputc(int _Character, FILE *_Stream);
int __cdecl fputchar(int _Ch);
int __cdecl fputs(const char *_Buffer, FILE *_Stream);
wint_t __cdecl fputwc(__int16 _Character, FILE *_Stream);
int __cdecl fputws(const __int16 *_Buffer, FILE *_Stream);
ea_t __cdecl frame_off_args(const func_t *pfn);
ea_t __cdecl frame_off_lvars(const func_t *pfn);
ea_t __cdecl frame_off_retaddr(const func_t *pfn);
ea_t __cdecl frame_off_savregs(const func_t *pfn);
size_t __cdecl fread(void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream);
int __cdecl fread2bytes(FILE *fp, uint16 *res, bool mostfirst);
int __cdecl fread4bytes(FILE *fp, uint32 *res, bool mostfirst);
int __cdecl fread8bytes(FILE *fp, ulonglong *res, bool mostfirst);
size_t __cdecl fread_s(void *_Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE *_Stream);
int __cdecl freadbytes(FILE *fp, void *res, int size, int mostfirst);
void __cdecl free(void *_Block);
void __cdecl free_argv(int argc, char **argv);
ea_t __cdecl free_chunk(ea_t bottom, asize_t size, int32 step);
void __cdecl free_custom_icon(int icon_id);
void __cdecl free_debug_event(debug_event_t *ev);
void __cdecl free_dll(idadll_t *dllmem);
void __cdecl free_idcv(idc_value_t *v);
void __cdecl free_loaders_list(load_info_t *list);
void __cdecl free_regarg(regarg_t *v);
void __cdecl free_regvar(regvar_t *v);
void __cdecl free_til(til_t *ti);
FILE *__cdecl freopen(const char *_FileName, const char *_Mode, FILE *_Stream);
errno_t __cdecl freopen_s(FILE **_Stream, const char *_FileName, const char *_Mode, FILE *_OldStream);
double __cdecl frexp(double _X, int *_Y);
float __cdecl frexpf(float _X, int *_Y);
long double __cdecl frexpl(long double _X, int *_Y);
int fscanf(FILE *const _Stream, const char *const _Format, ...);
int fscanf_s(FILE *const _Stream, const char *const _Format, ...);
int __cdecl fseek(FILE *_Stream, __int32 _Offset, int _Origin);
int __cdecl fsetpos(FILE *_Stream, const fpos_t *_Position);
__int32 __cdecl ftell(FILE *_Stream);
bool __cdecl func_contains(func_t *pfn, ea_t ea);
bool __cdecl func_does_return(ea_t callee);
bool __cdecl func_has_stkframe_hole(ea_t ea, const func_type_data_t *fti);
bool __cdecl func_item_iterator_decode_preceding_insn(func_item_iterator_t *fii, eavec_t *visited, bool *p_farref, insn_t *out);
bool __cdecl func_item_iterator_decode_prev_insn(func_item_iterator_t *fii, insn_t *out);
bool __cdecl func_item_iterator_next(func_item_iterator_t *fii, bool (__cdecl *testf)(flags_t, void *), void *ud);
bool __cdecl func_item_iterator_prev(func_item_iterator_t *fii, bool (__cdecl *testf)(flags_t, void *), void *ud);
bool __cdecl func_item_iterator_succ(func_item_iterator_t *fii, bool (__cdecl *testf)(flags_t, void *), void *ud);
bool __cdecl func_parent_iterator_set(func_parent_iterator_t *fpi, func_t *pfn);
bool __cdecl func_tail_iterator_set(func_tail_iterator_t *fti, func_t *pfn, ea_t ea);
bool __cdecl func_tail_iterator_set_ea(func_tail_iterator_t *fti, ea_t ea);
int __cdecl fwide(FILE *_F, int _M);
int fwprintf(FILE *const _Stream, const __int16 *const _Format, ...);
int fwprintf_s(FILE *const _Stream, const __int16 *const _Format, ...);
size_t __cdecl fwrite(const void *_Buffer, size_t _ElementSize, size_t _ElementCount, FILE *_Stream);
int __cdecl fwrite2bytes(FILE *fp, const uint16 *res, bool mostfirst);
int __cdecl fwrite4bytes(FILE *fp, const uint32 *res, bool mostfirst);
int __cdecl fwrite8bytes(FILE *fp, const ulonglong *res, bool mostfirst);
int __cdecl fwritebytes(FILE *fp, const void *l, int size, int mostfirst);
int fwscanf(FILE *const _Stream, const __int16 *const _Format, ...);
int fwscanf_s(FILE *const _Stream, const __int16 *const _Format, ...);
bool gcc_layout(void);
char *__cdecl gcvt(double _Value, int _DigitCount, char *_DstBuf);
bool __cdecl gen_complex_call_chart(const char *filename, const char *dont_use_wait, const char *title, ea_t ea1, ea_t ea2, int flags, int32 recursion_depth);
bool __cdecl gen_decorate_name(qstring *out, const char *name, bool mangle, cm_t cc, const tinfo_t *type);
void __cdecl gen_disasm_text(text_t *text, ea_t ea1, ea_t ea2, bool truncate_lines);
int __cdecl gen_exe_file(FILE *fp);
int __cdecl gen_file(ofile_type_t otype, FILE *fp, ea_t ea1, ea_t ea2, int flags);
void __cdecl gen_fix_fixups(ea_t from, ea_t to, asize_t size);
bool __cdecl gen_flow_graph(const char *filename, const char *title, func_t *pfn, ea_t ea1, ea_t ea2, int gflags);
void __cdecl gen_gdl(const gdl_graph_t *g, const char *fname);
void gen_idb_event(idb_event__event_code_t code, ...);
bool __cdecl gen_rand_buf(void *buffer, size_t bufsz);
bool __cdecl gen_simple_call_chart(const char *filename, const char *dont_use_wait, const char *title, int gflags);
void __cdecl gen_use_arg_tinfos(ea_t caller, func_type_data_t *fti, funcargvec_t *rargs, bool (__cdecl *set_optype)(const insn_t *, const op_t *, const tinfo_t *, const char *), bool (__cdecl *is_stkarg_load)(const insn_t *, int *, int *), bool (__cdecl *has_delay_slot)(ea_t));
void __cdecl gen_use_arg_tinfos2(argtinfo_helper_t *_this, ea_t caller, func_type_data_t *fti, funcargvec_t *rargs);
bool __cdecl generate_disasm_line(qstring *buf, ea_t ea, int flags);
int __cdecl generate_disassembly(qstrvec_t *out, int *lnnum, ea_t ea, int maxsize, bool as_stack);
uint32 __cdecl get_16bit(ea_t ea);
uint32 __cdecl get_32bit(ea_t ea);
uint64 __cdecl get_64bit(ea_t ea);
uchar __cdecl get_8bit(ea_t *ea, uint32 *v, int *nbit);
ssize_t __cdecl get_abi_name(qstring *out);
ea_t __cdecl get_absbase(ea_t ea);
bool __cdecl get_action_checkable(const char *name, bool *checkable);
bool __cdecl get_action_checked(const char *name, bool *checked);
bool __cdecl get_action_icon(const char *name, int *icon);
bool __cdecl get_action_label(qstring *label, const char *name);
bool __cdecl get_action_shortcut(qstring *shortcut, const char *name);
bool __cdecl get_action_state(const char *name, action_state_t *state);
bool __cdecl get_action_tooltip(qstring *tooltip, const char *name);
bool __cdecl get_action_visibility(const char *name, bool *visibility);
TWidget *get_active_modal_widget(void);
bool __cdecl get_addon_info(const char *id, addon_info_t *info);
bool __cdecl get_addon_info_idx(int index, addon_info_t *info);
aflags_t __cdecl get_aflags(ea_t ea);
uint32 __cdecl get_alias_target(const til_t *ti, uint32 ordinal);
uint32 __cdecl get_alignment(ea_t ea);
ssize_t __cdecl get_archive_path(qstring *out);
bool __cdecl get_arg_addrs(eavec_t *out, ea_t caller);
int __cdecl get_arg_align(const tinfo_t *tif, int slotsize, cm_t cc);
ssize_t __cdecl get_array_parameters(array_parameters_t *out, ea_t ea);
asm_t *get_ash(void);
ssize_t __cdecl get_asm_inc_file(qstring *buf);
bool __cdecl get_auto_display(auto_display_t *auto_display);
atype_t get_auto_state(void);
type_t __cdecl get_base_type(type_t t);
filetype_t __cdecl get_basic_file_type(linput_t *li);
int get_bblk_trace_options(void);
member_t *__cdecl get_best_fit_member(const struc_t *sptr, asize_t offset);
ssize_t __cdecl get_bmask_cmt(qstring *buf, enum_t id, bmask_t bmask, bool repeatable);
ssize_t __cdecl get_bmask_name(qstring *out, enum_t id, bmask_t bmask);
bool __cdecl get_bpt(ea_t ea, bpt_t *bpt);
bool __cdecl get_bpt_group(qstring *grp_name, const bpt_location_t *bptloc);
int get_bpt_qty(void);
ea_t __cdecl get_bpt_tev_ea(int n);
const char *__cdecl get_bptloc_string(int i);
uchar __cdecl get_byte(ea_t ea);
ssize_t __cdecl get_bytes(void *buf, ssize_t size, ea_t ea, int gmb_flags, void *mask);
ssize_t __cdecl get_c_header_path(qstring *buf);
ssize_t __cdecl get_c_macros(qstring *buf);
ea_t __cdecl get_call_tev_callee(int n);
cm_t __cdecl get_cc(cm_t cm);
bool __cdecl get_chooser_data(qstrvec_t *out, const char *chooser_caption, int n);
void *__cdecl get_chooser_obj(const char *chooser_caption);
ssize_t __cdecl get_cmt(qstring *buf, ea_t ea, bool rptble);
qstring __cdecl get_colored_demangled_name(ea_t ea, int32 inhibitor, int demform, int gtn_flags);
qstring __cdecl get_colored_long_name(ea_t ea, int gtn_flags);
qstring __cdecl get_colored_name(ea_t ea, int gtn_flags);
qstring __cdecl get_colored_short_name(ea_t ea, int gtn_flags);
comp_t __cdecl get_comp(comp_t comp);
const char *__cdecl get_compiler_abbr(comp_t id);
const char *__cdecl get_compiler_name(comp_t id);
void __cdecl get_compilers(compvec_t *ids, qstrvec_t *names, qstrvec_t *abbrs);
bool __cdecl get_cp_validity(ucdr_kind_t kind, wchar32_t cp, wchar32_t endcp);
const char *get_curline(void);
void *get_current_extlang(void);
int get_current_idasgn(void);
bool __cdecl get_current_source_file(qstring *out);
int get_current_source_line(void);
thid_t get_current_thread(void);
TWidget *get_current_viewer(void);
TWidget *get_current_widget(void);
bool __cdecl get_cursor(int *x, int *y);
const data_format_t *__cdecl get_custom_data_format(int dfid);
int __cdecl get_custom_data_formats(intvec_t *out, int dtid);
const data_type_t *__cdecl get_custom_data_type(int dtid);
int __cdecl get_custom_data_type_ids(custom_data_type_ids_t *cdis, ea_t ea);
int __cdecl get_custom_data_types(intvec_t *out, asize_t min_size, asize_t max_size);
const custom_refinfo_handler_t *__cdecl get_custom_refinfo(int crid);
const custom_refinfo_handler_t *__cdecl get_custom_refinfo_handler(const refinfo_t *ri);
const char *__cdecl get_custom_viewer_curline(TWidget *custom_viewer, bool mouse);
bool __cdecl get_custom_viewer_location(lochist_entry_t *out, TWidget *custom_viewer, bool mouse);
place_t *__cdecl get_custom_viewer_place(TWidget *custom_viewer, bool mouse, int *x, int *y);
int __cdecl get_custom_viewer_place_xcoord(TWidget *custom_viewer, const place_t *pline, const place_t *pitem);
asize_t __cdecl get_data_elsize(ea_t ea, flags_t F, const opinfo_t *ti);
bool __cdecl get_data_value(uval_t *v, ea_t ea, asize_t size);
uchar __cdecl get_db_byte(ea_t ea);
ssize_t get_dbctx_id(void);
size_t get_dbctx_qty(void);
bool __cdecl get_dbg_byte(uint32 *x, ea_t ea);
int __cdecl get_dbg_memory_info(meminfo_vec_t *ranges);
bool __cdecl get_dbg_reg_info(const char *regname, register_info_t *ri);
const debug_event_t *get_debug_event(void);
ssize_t __cdecl get_debug_name(qstring *out, ea_t *ea_ptr, debug_name_how_t how);
ea_t __cdecl get_debug_name_ea(const char *name);
void __cdecl get_debug_names(ea_name_vec_t *names, ea_t ea1, ea_t ea2);
const char *get_debugger_event_cond(void);
size_t __cdecl get_debugger_plugins(const dbg_info_t **array);
size_t get_default_align(void);
int __cdecl get_default_encoding_idx(int bpu);
int get_default_radix(void);
reftype_t __cdecl get_default_reftype(ea_t ea);
qstring __cdecl get_demangled_name(ea_t ea, int32 inhibitor, int demform, int gtn_flags);
uint64 get_dirty_infos(void);
op_dtype_t __cdecl get_dtype_by_size(asize_t size);
flags_t __cdecl get_dtype_flag(op_dtype_t dtype);
size_t __cdecl get_dtype_size(op_dtype_t dtype);
uint32 __cdecl get_dword(ea_t ea);
ssize_t __cdecl get_ea_name(qstring *out, ea_t ea, int gtn_flags, getname_info_t *gtni);
bool __cdecl get_ea_viewer_history_info(int *nback, int *nfwd, TWidget *v);
cm_t __cdecl get_effective_cc(cm_t cm);
sval_t __cdecl get_effective_spd(func_t *pfn, ea_t ea);
size_t get_elapsed_secs(void);
const char *get_elf_debug_file_directory(void);
int __cdecl get_encoding_bpu(int idx);
int __cdecl get_encoding_bpu_by_name(const char *encname);
const char *__cdecl get_encoding_name(int idx);
int get_encoding_qty(void);
ea_t __cdecl get_entry(uval_t ord);
ssize_t __cdecl get_entry_forwarder(qstring *buf, uval_t ord);
ssize_t __cdecl get_entry_name(qstring *buf, uval_t ord);
uval_t __cdecl get_entry_ordinal(size_t idx);
size_t get_entry_qty(void);
enum_t __cdecl get_enum(const char *name);
ssize_t __cdecl get_enum_cmt(qstring *buf, enum_t id, bool repeatable);
flags_t __cdecl get_enum_flag(enum_t id);
enum_t __cdecl get_enum_id(uchar *serial, ea_t ea, int n);
uval_t __cdecl get_enum_idx(enum_t id);
const_t __cdecl get_enum_member(enum_t id, uval_t value, int serial, bmask_t mask);
bmask_t __cdecl get_enum_member_bmask(const_t id);
const_t __cdecl get_enum_member_by_name(const char *name);
ssize_t __cdecl get_enum_member_cmt(qstring *buf, const_t id, bool repeatable);
enum_t __cdecl get_enum_member_enum(const_t id);
bool __cdecl get_enum_member_expr(qstring *buf, const tinfo_t *tif, int serial, uint64 value);
ssize_t __cdecl get_enum_member_name(qstring *out, const_t id);
uchar __cdecl get_enum_member_serial(const_t cid);
uval_t __cdecl get_enum_member_value(const_t id);
qstring __cdecl get_enum_name(tid_t id, int flags);
ssize_t __cdecl get_enum_name2(qstring *out, enum_t id, int flags);
size_t get_enum_qty(void);
size_t __cdecl get_enum_size(enum_t id);
int32 __cdecl get_enum_type_ordinal(enum_t id);
size_t __cdecl get_enum_width(enum_t id);
char *__cdecl get_errdesc(const char *header, error_t _qerrno);
size_t __cdecl get_error_data(int n);
const char *__cdecl get_error_string(int n);
extlang_object_t get_extlang(void);
ssize_t __cdecl get_extra_cmt(qstring *buf, ea_t ea, int what);
func_t *__cdecl get_fchunk(ea_t ea);
int __cdecl get_fchunk_num(ea_t ea);
size_t get_fchunk_qty(void);
const char *__cdecl get_file_ext(const char *file);
size_t __cdecl get_file_type_name(char *buf, size_t bufsize);
ea_t __cdecl get_fileregion_ea(int64 offset);
int64 __cdecl get_fileregion_offset(ea_t ea);
bmask_t __cdecl get_first_bmask(enum_t id);
ea_t __cdecl get_first_cref_from(ea_t from);
ea_t __cdecl get_first_cref_to(ea_t to);
ea_t __cdecl get_first_dref_from(ea_t from);
ea_t __cdecl get_first_dref_to(ea_t to);
uval_t __cdecl get_first_enum_member(enum_t id, bmask_t bmask);
ea_t __cdecl get_first_fcref_from(ea_t from);
ea_t __cdecl get_first_fcref_to(ea_t to);
ea_t get_first_fixup_ea(void);
int __cdecl get_first_free_extra_cmtidx(ea_t ea, int start);
hidden_range_t *get_first_hidden_range(void);
bool __cdecl get_first_module(modinfo_t *modinfo);
segment_t *get_first_seg(void);
const_t __cdecl get_first_serial_enum_member(uchar *out_serial, enum_t id, uval_t value, bmask_t bmask);
uval_t get_first_struc_idx(void);
bool __cdecl get_fixup(fixup_data_t *fd, ea_t source);
const char *__cdecl get_fixup_desc(qstring *buf, ea_t source, const fixup_data_t *fd);
const fixup_handler_t *__cdecl get_fixup_handler(fixup_type_t type);
uval_t __cdecl get_fixup_value(ea_t ea, fixup_type_t type);
bool __cdecl get_fixups(fixups_t *out, ea_t ea, asize_t size);
flags_t __cdecl get_flags(ea_t ea);
flags_t __cdecl get_flags_by_size(size_t size);
flags_t __cdecl get_flags_ex(ea_t ea, int how);
ssize_t __cdecl get_forced_operand(qstring *buf, ea_t ea, int n);
fpvalue_kind_t __cdecl get_fpvalue_kind(const fpvalue_t *a, uint16 reserved);
struc_t *__cdecl get_frame(ea_t ea);
void __cdecl get_frame_part(range_t *range, const func_t *pfn, frame_part_t part);
int __cdecl get_frame_retsize(const func_t *pfn);
asize_t __cdecl get_frame_size(const func_t *pfn);
uint64 __cdecl get_free_disk_space(const char *path);
asize_t __cdecl get_full_data_elsize(ea_t ea, flags_t F, const opinfo_t *ti);
flags_t __cdecl get_full_flags(ea_t ea);
type_t __cdecl get_full_type(type_t t);
func_t *__cdecl get_func(ea_t ea);
int __cdecl get_func_bitness(const func_t *pfn);
int __cdecl get_func_bits(const func_t *pfn);
ea_t __cdecl get_func_by_frame(tid_t frame_id);
int __cdecl get_func_bytes(const func_t *pfn);
int __cdecl get_func_chunknum(func_t *pfn, ea_t ea);
ssize_t __cdecl get_func_cmt(qstring *buf, const func_t *pfn, bool repeatable);
ssize_t __cdecl get_func_name(qstring *out, ea_t ea);
int __cdecl get_func_num(ea_t ea);
size_t get_func_qty(void);
ea_t __cdecl get_func_ranges(rangeset_t *ranges, func_t *pfn);
int get_func_trace_options(void);
bool __cdecl get_global_var(srcinfo_provider_t *prov, ea_t ea, const char *name, source_item_ptr *out);
ea_t get_gotea(void);
graph_viewer_t *__cdecl get_graph_viewer(TWidget *parent);
sel_t __cdecl get_group_selector(sel_t grpsel);
ssize_t __cdecl get_grp_bpts(bpt_vec_t *bpts, const char *grp_name);
ssize_t __cdecl get_hex_string(char *buf, size_t bufsize, const uchar *bytes, size_t len);
hexdsp_t *get_hexdsp(void);
ea_t __cdecl get_hexdump_ea(int hexdump_num);
hidden_range_t *__cdecl get_hidden_range(ea_t ea);
int __cdecl get_hidden_range_num(ea_t ea);
int get_hidden_range_qty(void);
bool __cdecl get_highlight(qstring *out_str, TWidget *viewer, uint32 *out_flags, uint32 flags);
ssize_t __cdecl get_ida_notepad_text(qstring *out);
int __cdecl get_ida_subdirs(qstrvec_t *dirs, const char *subdir, int flags);
bool __cdecl get_idainfo_by_type(size_t *out_size, flags_t *out_flags, opinfo_t *out_mt, const tinfo_t *tif, size_t *out_alsize);
int32 __cdecl get_idasgn_desc(qstring *signame, qstring *optlibs, int n);
idasgn_t *__cdecl get_idasgn_header_by_short_name(const char *name);
int get_idasgn_qty(void);
ssize_t __cdecl get_idasgn_title(qstring *buf, const char *name);
const til_t *get_idati(void);
time_t get_idb_ctime(void);
size_t get_idb_nopens(void);
char *__cdecl get_idc_filename(char *buf, size_t bufsize, const char *file);
error_t __cdecl get_idcv_attr(idc_value_t *res, const idc_value_t *obj, const char *attr, bool may_use_getattr);
error_t __cdecl get_idcv_class_name(qstring *out, const idc_value_t *obj);
error_t __cdecl get_idcv_slice(idc_value_t *res, const idc_value_t *v, uval_t i1, uval_t i2, int flags);
const idp_descs_t *get_idp_descs(void);
char *__cdecl get_idp_name(char *buf, size_t bufsize);
bool __cdecl get_idptype_and_data(int *vtype, const void **vdata, const idc_value_t *v);
netnode get_ids_modnode(void);
char __cdecl get_ignore_micro(ea_t ea);
ea_t get_imagebase(void);
size_t __cdecl get_immvals(uval_t *out, ea_t ea, int n, flags_t F, insn_t *cache);
bool __cdecl get_import_module_name(qstring *buf, int mod_index);
uint get_import_module_qty(void);
ea_t __cdecl get_ind_purged(ea_t ea);
ssize_t __cdecl get_initial_ida_version(qstring *out);
ushort get_initial_idb_version(void);
member_t *__cdecl get_innermost_member(struc_t **sptr, asize_t *offset);
ssize_t __cdecl get_input_file_path(char *buf, size_t bufsize);
bool __cdecl get_insn_tev_reg_mem(int n, memreg_infos_t *memmap);
bool __cdecl get_insn_tev_reg_result(int n, const char *regname, uint64 *ival);
bool __cdecl get_insn_tev_reg_val(int n, const char *regname, uint64 *ival);
int get_insn_trace_options(void);
bool __cdecl get_ip_val(ea_t *out);
bgcolor_t __cdecl get_item_color(ea_t ea);
ea_t __cdecl get_item_end(ea_t ea);
flags_t __cdecl get_item_flag(ea_t from, int n, ea_t ea, bool appzero);
ea_t __cdecl get_item_head(ea_t ea);
asize_t __cdecl get_item_size(ea_t ea);
ea_t __cdecl get_jtable_target(ea_t jump_ea, const switch_info_t *si, int i);
ssize_t __cdecl get_kernel_version(char *buf, size_t bufsize);
ushort __cdecl get_key_code(const char *keyname);
bmask_t __cdecl get_last_bmask(enum_t id);
uval_t __cdecl get_last_enum_member(enum_t id, bmask_t bmask);
hidden_range_t *get_last_hidden_range(void);
int get_last_pfxlen(void);
segment_t *get_last_seg(void);
const_t __cdecl get_last_serial_enum_member(uchar *out_serial, enum_t id, uval_t value, bmask_t bmask);
uval_t get_last_struc_idx(void);
linput_type_t __cdecl get_linput_type(linput_t *li);
ssize_t __cdecl get_loader_format_name(qstring *out);
ssize_t __cdecl get_loader_name(char *buf, size_t bufsize);
char *__cdecl get_loader_name_from_dll(char *dllname);
bool __cdecl get_local_var(srcinfo_provider_t *prov, ea_t ea, const char *name, source_item_ptr *out);
bool __cdecl get_local_vars(srcinfo_provider_t *prov, ea_t ea, source_items_t *out);
qstring __cdecl get_long_name(ea_t ea, int gtn_flags);
int get_lookback(void);
mangled_name_type_t __cdecl get_mangled_name_type(const char *name);
ssize_t __cdecl get_manual_insn(qstring *buf, ea_t ea);
void __cdecl get_manual_regions(meminfo_vec_t *ranges);
bool __cdecl get_mapping(ea_t *from, ea_t *to, asize_t *size, size_t n);
size_t get_mappings_qty(void);
ea_t __cdecl get_max_offset(struc_t *sptr);
size_t __cdecl get_max_strlit_length(ea_t ea, int32 strtype, int options);
member_t *__cdecl get_member(const struc_t *sptr, asize_t offset);
member_t *__cdecl get_member_by_fullname(struc_t **sptr_place, const char *fullname);
member_t *__cdecl get_member_by_id(tid_t mid, struc_t **sptr_place);
member_t *__cdecl get_member_by_name(const struc_t *sptr, const char *membername);
ssize_t __cdecl get_member_cmt(qstring *buf, tid_t mid, bool repeatable);
ssize_t __cdecl get_member_fullname(qstring *out, tid_t mid);
tid_t __cdecl get_member_id(const struc_t *sptr, asize_t offset);
qstring __cdecl get_member_name(tid_t mid);
asize_t __cdecl get_member_size(const member_t *mptr);
struc_t *__cdecl get_member_struc(const char *fullname);
bool __cdecl get_member_tinfo(tinfo_t *tif, const member_t *mptr);
ea_t __cdecl get_min_spd_ea(func_t *pfn);
void *__cdecl get_module_data(int data_id);
bool __cdecl get_module_info(ea_t ea, modinfo_t *modinfo);
qstring __cdecl get_name(ea_t ea, int gtn_flags);
ea_t __cdecl get_name_base_ea(ea_t from, ea_t to);
color_t __cdecl get_name_color(ea_t from, ea_t ea);
ea_t __cdecl get_name_ea(ea_t from, const char *name);
ssize_t __cdecl get_name_expr(qstring *out, ea_t from, int n, ea_t ea, uval_t off, int flags);
int __cdecl get_name_value(uval_t *value, ea_t from, const char *name);
int __cdecl get_named_type(const til_t *ti, const char *name, int ntf_flags, const type_t **type, const p_list **fields, const char **cmt, const p_list **fieldcmts, sclass_t *sclass, uint32 *value);
int __cdecl get_named_type64(const til_t *ti, const char *name, int ntf_flags, const type_t **type, const p_list **fields, const char **cmt, const p_list **fieldcmts, sclass_t *sclass, uint64 *value);
ea_t __cdecl get_navband_ea(int pixel);
int __cdecl get_navband_pixel(bool *out_is_vertical, ea_t ea);
std__new_handler get_new_handler(void);
bmask_t __cdecl get_next_bmask(enum_t id, bmask_t bmask);
ea_t __cdecl get_next_cref_from(ea_t from, ea_t current);
ea_t __cdecl get_next_cref_to(ea_t to, ea_t current);
ea_t __cdecl get_next_dref_from(ea_t from, ea_t current);
ea_t __cdecl get_next_dref_to(ea_t to, ea_t current);
uval_t __cdecl get_next_enum_member(enum_t id, uval_t value, bmask_t bmask);
func_t *__cdecl get_next_fchunk(ea_t ea);
ea_t __cdecl get_next_fcref_from(ea_t from, ea_t current);
ea_t __cdecl get_next_fcref_to(ea_t to, ea_t current);
ea_t __cdecl get_next_fixup_ea(ea_t ea);
func_t *__cdecl get_next_func(ea_t ea);
ea_t __cdecl get_next_func_addr(func_t *pfn, ea_t ea);
hidden_range_t *__cdecl get_next_hidden_range(ea_t ea);
ssize_t __cdecl get_next_member_idx(const struc_t *sptr, asize_t off);
bool __cdecl get_next_module(modinfo_t *modinfo);
segment_t *__cdecl get_next_seg(ea_t ea);
const_t __cdecl get_next_serial_enum_member(uchar *in_out_serial, const_t first_cid);
uval_t __cdecl get_next_struc_idx(uval_t idx);
ssize_t __cdecl get_nice_colored_name(qstring *buf, ea_t ea, int flags);
ea_t __cdecl get_nlist_ea(size_t idx);
size_t __cdecl get_nlist_idx(ea_t ea);
const char *__cdecl get_nlist_name(size_t idx);
size_t get_nlist_size(void);
bool __cdecl get_node_info(node_info_t *out, graph_id_t gid, int node);
uint64 get_nsec_stamp(void);
bool __cdecl get_numbered_type(const til_t *ti, uint32 ordinal, const type_t **type, const p_list **fields, const char **cmt, const p_list **fieldcmts, sclass_t *sclass);
const char *__cdecl get_numbered_type_name(const til_t *ti, uint32 ordinal);
uchar __cdecl get_octet(ea_t *ea, uint64 *v, int *nbit);
ea_t __cdecl get_offbase(ea_t ea, int n);
int __cdecl get_offset_expr(qstring *buf, ea_t ea, int n, const refinfo_t *ri, ea_t from, adiff_t offset, int getn_flags);
int __cdecl get_offset_expression(qstring *buf, ea_t ea, int n, ea_t from, adiff_t offset, int getn_flags);
bool __cdecl get_op_tinfo(tinfo_t *tif, ea_t ea, int n);
opinfo_t *__cdecl get_opinfo(opinfo_t *buf, ea_t ea, int n, flags_t flags);
int get_opnum(void);
flags_t __cdecl get_optype_flags0(flags_t F);
flags_t __cdecl get_optype_flags1(flags_t F);
bool __cdecl get_or_guess_member_tinfo(tinfo_t *tif, const member_t *mptr);
int __cdecl get_ordinal_from_idb_type(const char *name, const type_t *type);
uint32 __cdecl get_ordinal_qty(const til_t *ti);
uint64 __cdecl get_original_byte(ea_t ea);
uint64 __cdecl get_original_dword(ea_t ea);
uint64 __cdecl get_original_qword(ea_t ea);
uint64 __cdecl get_original_word(ea_t ea);
int get_outfile_encoding_idx(void);
bool __cdecl get_output_curline(qstring *buf, bool mouse);
bool __cdecl get_output_cursor(int *x, int *y);
bool __cdecl get_output_selected_text(qstring *buf);
const char *__cdecl get_path(path_type_t pt);
processor_t *get_ph(void);
const place_t *__cdecl get_place_class(int *out_flags, int *out_sdk_version, int id);
int __cdecl get_place_class_id(const char *name);
const place_t *__cdecl get_place_class_template(int id);
const char *__cdecl get_plugin_options(const char *plugin);
plugin_info_t *get_plugins(void);
ssize_t __cdecl get_predef_insn_cmt(qstring *buf, const insn_t *ins);
bmask_t __cdecl get_prev_bmask(enum_t id, bmask_t bmask);
uval_t __cdecl get_prev_enum_member(enum_t id, uval_t value, bmask_t bmask);
func_t *__cdecl get_prev_fchunk(ea_t ea);
ea_t __cdecl get_prev_fixup_ea(ea_t ea);
func_t *__cdecl get_prev_func(ea_t ea);
ea_t __cdecl get_prev_func_addr(func_t *pfn, ea_t ea);
hidden_range_t *__cdecl get_prev_hidden_range(ea_t ea);
ssize_t __cdecl get_prev_member_idx(const struc_t *sptr, asize_t off);
segment_t *__cdecl get_prev_seg(ea_t ea);
const_t __cdecl get_prev_serial_enum_member(uchar *in_out_serial, const_t first_cid);
bool __cdecl get_prev_sreg_range(sreg_range_t *out, ea_t ea, int rg);
uval_t __cdecl get_prev_struc_idx(uval_t idx);
size_t __cdecl get_printable_immvals(uval_t *out, ea_t ea, int n, flags_t F, insn_t *cache);
ea_t __cdecl get_problem(problist_id_t type, ea_t lowea);
ssize_t __cdecl get_problem_desc(qstring *buf, problist_id_t t, ea_t ea);
const char *__cdecl get_problem_name(problist_id_t type, bool longname);
void __cdecl get_process_options(qstring *path, qstring *args, qstring *sdir, qstring *host, qstring *pass, int *port);
int get_process_state(void);
ssize_t __cdecl get_processes(procinfo_vec_t *proclist);
error_t get_qerrno(void);
uint64 __cdecl get_qword(ea_t ea);
int __cdecl get_radix(flags_t F, int n);
bool __cdecl get_refinfo(refinfo_t *ri, ea_t ea, int n);
void __cdecl get_refinfo_descs(refinfo_desc_vec_t *descs);
reftype_t __cdecl get_reftype_by_size(size_t size);
ssize_t __cdecl get_reg_name(qstring *buf, int reg, size_t width, int reghi);
bool __cdecl get_reg_val(const char *regname, uint64 *ival);
int __cdecl get_reg_vals(thid_t tid, int clsmask, regval_t *values);
void __cdecl get_registered_actions(qstrvec_t *out);
ea_t __cdecl get_ret_tev_return(int n);
ssize_t __cdecl get_root_filename(char *buf, size_t bufsize);
// dbg_notification_t get_running_notification(void);
// ui_notification_t get_running_request(void);
type_t __cdecl get_scalar_bt(int size);
ea_t get_screen_ea(void);
uint32 __cdecl get_secs(qtime64_t t);
ea_t __cdecl get_segm_base(const segment_t *s);
segment_t *__cdecl get_segm_by_name(const char *name);
segment_t *__cdecl get_segm_by_sel(sel_t selector);
ssize_t __cdecl get_segm_class(qstring *buf, const segment_t *s);
ssize_t __cdecl get_segm_expr(qstring *buf, ea_t from, sel_t sel);
ssize_t __cdecl get_segm_name(qstring *buf, const segment_t *s, int flags);
int __cdecl get_segm_num(ea_t ea);
ea_t __cdecl get_segm_para(const segment_t *s);
int get_segm_qty(void);
const char *__cdecl get_segment_alignment(uchar align);
ssize_t __cdecl get_segment_cmt(qstring *buf, const segment_t *s, bool repeatable);
const char *__cdecl get_segment_combination(uchar comb);
ssize_t __cdecl get_segment_translations(eavec_t *transmap, ea_t segstart);
size_t get_selector_qty(void);
qstring __cdecl get_short_name(ea_t ea, int gtn_flags);
uval_t __cdecl get_source_linnum(ea_t ea);
const char *__cdecl get_sourcefile(ea_t ea, range_t *bounds);
sval_t __cdecl get_sp_delta(func_t *pfn, ea_t ea);
bool __cdecl get_sp_val(ea_t *out);
sval_t __cdecl get_spd(func_t *pfn, ea_t ea);
bool __cdecl get_special_folder(char *buf, size_t bufsize, int csidl);
int __cdecl get_spoiled_reg(const insn_t *insn, const uint32 *regs, size_t n);
struc_t *__cdecl get_sptr(const member_t *mptr);
ssize_t __cdecl get_srcdbg_paths(qstring *out);
ssize_t __cdecl get_srcdbg_undesired_paths(qstring *out);
srcinfo_provider_t *__cdecl get_srcinfo_provider(const char *name);
sel_t __cdecl get_sreg(ea_t ea, int rg);
bool __cdecl get_sreg_range(sreg_range_t *out, ea_t ea, int rg);
int __cdecl get_sreg_range_num(ea_t ea, int rg);
size_t __cdecl get_sreg_ranges_qty(int rg);
dirtree_t *__cdecl get_std_dirtree(dirtree_id_t id);
int get_step_trace_options(void);
member_t *__cdecl get_stkvar(sval_t *actval, const insn_t *insn, const op_t *x, sval_t v);
bool __cdecl get_stock_tinfo(tinfo_t *tif, stock_type_id_t id);
uchar __cdecl get_str_encoding_idx(int32 strtype);
char __cdecl get_str_term1(int32 strtype);
char __cdecl get_str_term2(int32 strtype);
uint32 __cdecl get_str_type(ea_t ea);
uchar __cdecl get_str_type_code(int32 strtype);
size_t __cdecl get_str_type_prefix_length(int32 strtype);
tid_t __cdecl get_strid(ea_t ea);
bool __cdecl get_strlist_item(string_info_t *si, size_t n);
const strwinsetup_t *get_strlist_options(void);
size_t get_strlist_qty(void);
ssize_t __cdecl get_strlit_contents(qstring *utf8, ea_t ea, size_t len, int32 type, size_t *maxcps, int flags);
int __cdecl get_stroff_path(tid_t *path, adiff_t *delta, ea_t ea, int n);
int __cdecl get_strtype_bpu(int32 strtype);
struc_t *__cdecl get_struc(tid_t id);
tid_t __cdecl get_struc_by_idx(uval_t idx);
ssize_t __cdecl get_struc_cmt(qstring *buf, tid_t id, bool repeatable);
ea_t __cdecl get_struc_first_offset(const struc_t *sptr);
tid_t __cdecl get_struc_id(const char *name);
uval_t __cdecl get_struc_idx(tid_t id);
ea_t __cdecl get_struc_last_offset(const struc_t *sptr);
qstring __cdecl get_struc_name(tid_t id, int flags);
ea_t __cdecl get_struc_next_offset(const struc_t *sptr, ea_t offset);
ea_t __cdecl get_struc_prev_offset(const struc_t *sptr, ea_t offset);
size_t get_struc_qty(void);
asize_t __cdecl get_struc_size(tid_t id);
int __cdecl get_struct_operand(adiff_t *disp, adiff_t *delta, tid_t *path, ea_t ea, int n);
ssize_t __cdecl get_switch_info(switch_info_t *out, ea_t ea);
ea_t __cdecl get_switch_parent(ea_t ea);
const synced_group_t *__cdecl get_synced_group(const TWidget *w);
int __cdecl get_tab_size(const char *path);
terminate_handler get_terminate(void);
ea_t __cdecl get_tev_ea(int n);
bool __cdecl get_tev_event(int n, debug_event_t *d);
bool __cdecl get_tev_info(int n, tev_info_t *tev_info);
bool __cdecl get_tev_memory_info(int n, meminfo_vec_t *mi);
int get_tev_qty(void);
int __cdecl get_tev_tid(int n);
int __cdecl get_tev_type(int n);
int get_thread_qty(void);
bool __cdecl get_tinfo(tinfo_t *tif, ea_t ea);
bool __cdecl get_tinfo_attr(uint32 typid, const qstring *key, bytevec_t *bv, bool all_attrs);
bool __cdecl get_tinfo_attrs(uint32 typid, type_attrs_t *tav, bool include_ref_attrs);
bool __cdecl get_tinfo_details(uint32 typid, type_t bt2, void *buf);
size_t __cdecl get_tinfo_pdata(void *outptr, uint32 typid, int what);
size_t __cdecl get_tinfo_property(uint32 typid, int gta_prop);
size_t __cdecl get_tinfo_size(uint32 *p_effalign, uint32 typid, int gts_code);
bool __cdecl get_token(token_t *t, lexer_t *lx, tokenstack_t *buf);
ea_t get_trace_base_address(void);
void __cdecl get_trace_dynamic_register_set(dynamic_register_set_t *idaregs);
bool __cdecl get_trace_file_desc(qstring *buf, const char *filename);
const char *get_trace_platform(void);
size_t __cdecl get_tryblks(tryblks_t *tbv, const range_t *range);
type_t __cdecl get_type_flags(type_t t);
int32 __cdecl get_type_ordinal(const til_t *ti, const char *name);
unexpected_handler get_unexpected(void);
uint32 __cdecl get_usecs(qtime64_t t);
const char *get_user_idadir(void);
bool __cdecl get_user_input_event(input_event_t *out);
void __cdecl get_user_strlist_options(strwinsetup_t *out);
wchar32_t __cdecl get_utf8_char(const char **pptr);
ea_t __cdecl get_vftable_ea(uint32 ordinal);
uint32 __cdecl get_vftable_ordinal(ea_t vftable_ea);
tcc_renderer_type_t __cdecl get_view_renderer_type(TWidget *v);
mutable_graph_t *__cdecl get_viewer_graph(graph_viewer_t *gv);
tcc_place_type_t __cdecl get_viewer_place_type(TWidget *viewer);
void *__cdecl get_viewer_user_data(TWidget *viewer);
qstring __cdecl get_visible_name(ea_t ea, int gtn_flags);
ssize_t __cdecl get_visible_segm_name(qstring *buf, const segment_t *s);
uint64 __cdecl get_wide_byte(ea_t ea);
uint64 __cdecl get_wide_dword(ea_t ea);
uint64 __cdecl get_wide_word(ea_t ea);
bool __cdecl get_widget_title(qstring *buf, TWidget *widget);
twidget_type_t __cdecl get_widget_type(TWidget *widget);
void *__cdecl get_window_id(const char *name);
ushort __cdecl get_word(ea_t ea);
ssize_t __cdecl get_xrefpos(xrefpos_t *out, ea_t ea);
bool __cdecl get_zero_ranges(rangeset_t *zranges, const range_t *range);
int __cdecl getc(FILE *_Stream);
int getchar(void);
char *__cdecl getcwd(char *_DstBuf, int _SizeInBytes);
char *__cdecl getenv(const char *_VarName);
errno_t __cdecl getenv_s(size_t *_RequiredCount, char *_Buffer, rsize_t _BufferCount, const char *_VarName);
size_t __cdecl getinf(inftag_t tag);
ssize_t __cdecl getinf_buf(inftag_t tag, void *buf, size_t bufsize);
bool __cdecl getinf_flag(inftag_t tag, uint32 flag);
ssize_t __cdecl getinf_str(qstring *buf, inftag_t tag);
bool __cdecl getn_bpt(int n, bpt_t *bpt);
enum_t __cdecl getn_enum(size_t idx);
func_t *__cdecl getn_fchunk(int n);
func_t *__cdecl getn_func(size_t n);
hidden_range_t *__cdecl getn_hidden_range(int n);
bool __cdecl getn_selector(sel_t *sel, ea_t *base, int n);
bool __cdecl getn_sreg_range(sreg_range_t *out, int rg, int n);
thid_t __cdecl getn_thread(int n);
const char *__cdecl getn_thread_name(int n);
netnode __cdecl getnode(ea_t ea);
segment_t *__cdecl getnseg(int n);
char *__cdecl gets_s(char *_Buffer, rsize_t _Size);
segment_t *__cdecl getseg(ea_t ea);
char *__cdecl getsysfile(char *buf, size_t bufsize, const char *filename, const char *subdir);
int __cdecl getw(FILE *_Stream);
wint_t __cdecl getwc(FILE *_Stream);
wint_t getwchar(void);
bool graph_trace(void);
ssize_t grentry(graph_notification_t event_code, ...);
cm_t __cdecl guess_func_cc(const func_type_data_t *fti, int npurged, int cc_flags);
int __cdecl guess_tinfo(tinfo_t *tif, tid_t id);
int __cdecl h2ti(til_t *ti, lexer_t *lx, const char *input, int flags, int (__cdecl *type_cb)(const char *, const tinfo_t *, const char *, const uint64 *, void *), int (__cdecl *var_cb)(const char *, const tinfo_t *, const char *, const uint64 *, void *), printer_t *print_cb, void *_cb_data, abs_t _isabs);
int __cdecl handle_debug_event(const debug_event_t *ev, int rqflags);
bool __cdecl handle_fixups_in_macro(refinfo_t *ri, ea_t ea, fixup_type_t other, uint32 macro_reft_and_flags);
bool __cdecl has_aflag_linnum(aflags_t flags);
bool __cdecl has_aflag_lname(aflags_t flags);
bool __cdecl has_aflag_ti(aflags_t flags);
bool __cdecl has_aflag_ti0(aflags_t flags);
bool __cdecl has_aflag_ti1(aflags_t flags);
bool __cdecl has_any_name(flags_t F);
bool __cdecl has_auto_name(flags_t F);
bool __cdecl has_cf_chg(uint32 feature, uint opnum);
bool __cdecl has_cf_use(uint32 feature, uint opnum);
bool __cdecl has_cmt(flags_t F);
bool __cdecl has_dummy_name(flags_t F);
bool __cdecl has_external_refs(func_t *pfn, ea_t ea);
bool __cdecl has_extra_cmts(flags_t F);
bool __cdecl has_file_ext(const char *file);
bool __cdecl has_immd(flags_t F);
bool __cdecl has_insn_feature(int icode, uint32 bit);
bool __cdecl has_lname(ea_t ea);
bool __cdecl has_name(flags_t F);
bool __cdecl has_regvar(func_t *pfn, ea_t ea);
bool __cdecl has_ti(ea_t ea);
bool __cdecl has_ti0(ea_t ea);
bool __cdecl has_ti1(ea_t ea);
bool __cdecl has_user_name(flags_t F);
bool __cdecl has_value(flags_t F);
bool __cdecl has_xref(flags_t F);
bool __cdecl have_set_options(const debugger_t *_dbg);
flags_t hex_flag(void);
void __cdecl hexplace_t__adjust(hexplace_t *, void *);
bool __cdecl hexplace_t__beginning(const hexplace_t *, void *);
place_t *__cdecl hexplace_t__clone(const hexplace_t *);
int __cdecl hexplace_t__compare(const hexplace_t *, const place_t *);
int __cdecl hexplace_t__compare2(const hexplace_t *, const place_t *, void *);
void __cdecl hexplace_t__copyfrom(hexplace_t *, const place_t *);
bool __cdecl hexplace_t__deserialize(hexplace_t *, const uchar **, const uchar *);
size_t __cdecl hexplace_t__ea2str(char *buf, size_t bufsize, const hexplace_gen_t *hg, ea_t ea);
bool __cdecl hexplace_t__ending(const hexplace_t *, void *);
place_t *__cdecl hexplace_t__enter(const hexplace_t *, uint32 *);
int __cdecl hexplace_t__generate(const hexplace_t *, qstrvec_t *, int *, color_t *, bgcolor_t *, void *, int);
int __cdecl hexplace_t__id(const hexplace_t *);
void __cdecl hexplace_t__leave(const hexplace_t *, uint32);
place_t *__cdecl hexplace_t__makeplace(const hexplace_t *, void *, uval_t, int);
const char *__cdecl hexplace_t__name(const hexplace_t *);
bool __cdecl hexplace_t__next(hexplace_t *, void *);
void __cdecl hexplace_t__out_one_item(const hexplace_t *_this, outctx_base_t *ctx, const hexplace_gen_t *hg, int itemno, color_t *color, color_t patch_or_edit);
bool __cdecl hexplace_t__prev(hexplace_t *, void *);
void __cdecl hexplace_t__print(const hexplace_t *, qstring *, void *);
bool __cdecl hexplace_t__rebase(hexplace_t *, const segm_move_infos_t *);
void __cdecl hexplace_t__serialize(const hexplace_t *, bytevec_t *out);
ea_t __cdecl hexplace_t__toea(const hexplace_t *);
uval_t __cdecl hexplace_t__touval(const hexplace_t *, void *);
int hide_all_bpts(void);
void __cdecl hide_border(ea_t ea);
void __cdecl hide_item(ea_t ea);
void __cdecl hide_name(ea_t ea);
void hide_wait_box(void);
int32 __cdecl high(const longlong *x);
bool __cdecl hook_event_listener(hook_type_t hook_type, event_listener_t *cb, const void *owner, int hkcb_flags);
bool __cdecl hook_to_notification_point(hook_type_t hook_type, ssize_t (__cdecl *cb)(void *, int, va_list), void *user_data);
double __cdecl hypot(double _X, double _Y);
float __cdecl hypotf(float _X, float _Y);
long double __cdecl hypotl(long double _X, long double _Y);
void __cdecl ida_checkmem(const char *file, int line);
int ida_deb(const char *format, ...);
const char *__cdecl idadir(const char *subdir);
void __cdecl idaplace_t__adjust(idaplace_t *, void *);
bool __cdecl idaplace_t__beginning(const idaplace_t *, void *);
place_t *__cdecl idaplace_t__clone(const idaplace_t *);
int __cdecl idaplace_t__compare(const idaplace_t *, const place_t *);
int __cdecl idaplace_t__compare2(const idaplace_t *, const place_t *, void *);
void __cdecl idaplace_t__copyfrom(idaplace_t *, const place_t *);
bool __cdecl idaplace_t__deserialize(idaplace_t *, const uchar **, const uchar *);
bool __cdecl idaplace_t__ending(const idaplace_t *, void *);
place_t *__cdecl idaplace_t__enter(const idaplace_t *, uint32 *);
int __cdecl idaplace_t__generate(const idaplace_t *, qstrvec_t *, int *, color_t *, bgcolor_t *, void *, int);
int __cdecl idaplace_t__id(const idaplace_t *);
void __cdecl idaplace_t__leave(const idaplace_t *, uint32);
place_t *__cdecl idaplace_t__makeplace(const idaplace_t *, void *, uval_t, int);
const char *__cdecl idaplace_t__name(const idaplace_t *);
bool __cdecl idaplace_t__next(idaplace_t *, void *);
bool __cdecl idaplace_t__prev(idaplace_t *, void *);
void __cdecl idaplace_t__print(const idaplace_t *, qstring *, void *);
bool __cdecl idaplace_t__rebase(idaplace_t *, const segm_move_infos_t *);
void __cdecl idaplace_t__serialize(const idaplace_t *, bytevec_t *out);
ea_t __cdecl idaplace_t__toea(const idaplace_t *);
uval_t __cdecl idaplace_t__touval(const idaplace_t *, void *);
bool __cdecl idb_utf8(qstring *out, const char *in, int nsyms, int flags);
error_t __cdecl idcv_float(idc_value_t *v);
error_t __cdecl idcv_int64(idc_value_t *v);
error_t __cdecl idcv_long(idc_value_t *v);
error_t __cdecl idcv_num(idc_value_t *v);
error_t __cdecl idcv_object(idc_value_t *v, const idc_class_t *icls);
error_t __cdecl idcv_string(idc_value_t *v);
const fpvalue_t ieee_e32;
const fpvalue_t ieee_eeul;
const fpvalue_t ieee_elog2;
const fpvalue_t ieee_eone;
const fpvalue_t ieee_eoneopi;
const fpvalue_t ieee_epi;
const fpvalue_t ieee_esqrt2;
const fpvalue_t ieee_etwo;
const fpvalue_t ieee_ezero;
fpvalue_error_t __cdecl ieee_realcvt(void *m, fpvalue_t *out, uint16 swt);
netnode ignore_micro;
int __cdecl ilogb(double _X);
int __cdecl ilogbf(float _X);
int __cdecl ilogbl(long double _X);
void __cdecl import_module(const char *module, const char *windir, uval_t modnode, int (__cdecl *importer)(linput_t *, impinfo_t *), const char *ostype);
tid_t __cdecl import_type(const til_t *til, int idx, const char *name, int flags);
bool __cdecl includes(uval_t off1, asize_t s1, uval_t off2, asize_t s2);
idainfo inf;
bool inf_abi_set_by_user(void);
bool inf_allow_non_matched_ops(void);
bool inf_allow_sigmulti(void);
bool inf_append_sigcmt(void);
bool __cdecl inf_big_arg_align(cm_t cc);
bool inf_check_manual_ops(void);
bool inf_check_unicode_strlits(void);
bool inf_coagulate_code(void);
bool inf_coagulate_data(void);
bool inf_compress_idb(void);
bool inf_create_all_xrefs(void);
bool inf_create_func_from_call(void);
bool inf_create_func_from_ptr(void);
bool inf_create_func_tails(void);
bool inf_create_jump_tables(void);
bool inf_create_off_on_dref(void);
bool inf_create_off_using_fixup(void);
bool inf_create_strlit_on_xref(void);
bool inf_data_offset(void);
bool inf_dbg_no_store_path(void);
bool inf_decode_fpp(void);
bool inf_del_no_xref_insns(void);
bool inf_final_pass(void);
bool inf_full_sp_ana(void);
bool inf_gen_assume(void);
bool inf_gen_lzero(void);
bool inf_gen_null(void);
bool inf_gen_org(void);
bool inf_gen_tryblks(void);
uint32 inf_get_abibits(void);
uint32 inf_get_af(void);
uint32 inf_get_af2(void);
ushort inf_get_af2_low(void);
ushort inf_get_af_high(void);
ushort inf_get_af_low(void);
uint inf_get_app_bitness(void);
uint32 inf_get_appcall_options(void);
ushort inf_get_apptype(void);
uchar inf_get_asmtype(void);
uval_t inf_get_baseaddr(void);
__int16 inf_get_bin_prefix_size(void);
bool __cdecl inf_get_cc(compiler_info_t *out);
cm_t inf_get_cc_cm(void);
uchar inf_get_cc_defalign(void);
comp_t inf_get_cc_id(void);
uchar inf_get_cc_size_b(void);
uchar inf_get_cc_size_e(void);
uchar inf_get_cc_size_i(void);
uchar inf_get_cc_size_l(void);
uchar inf_get_cc_size_ldbl(void);
uchar inf_get_cc_size_ll(void);
uchar inf_get_cc_size_s(void);
uchar inf_get_cmt_indent(void);
uchar inf_get_cmtflg(void);
uint32 inf_get_database_change_count(void);
uval_t inf_get_datatypes(void);
uchar inf_get_demname_form(void);
uchar inf_get_demnames(void);
// filetype_t inf_get_filetype(void);
ushort inf_get_genflags(void);
ea_t inf_get_highoff(void);
uchar inf_get_indent(void);
ushort inf_get_lenxref(void);
uint32 inf_get_lflags(void);
uchar inf_get_limiter(void);
uchar inf_get_listnames(void);
uint32 inf_get_long_demnames(void);
ea_t inf_get_lowoff(void);
ea_t inf_get_main(void);
ushort inf_get_margin(void);
ushort inf_get_max_autoname_len(void);
ea_t inf_get_max_ea(void);
uval_t inf_get_maxref(void);
ea_t inf_get_min_ea(void);
char inf_get_nametype(void);
sval_t inf_get_netdelta(void);
ea_t inf_get_omax_ea(void);
ea_t inf_get_omin_ea(void);
ushort inf_get_ostype(void);
uint32 inf_get_outflags(void);
int inf_get_pack_mode(void);
uchar inf_get_prefflag(void);
range_t inf_get_privrange(void);
ea_t inf_get_privrange_end_ea(void);
ea_t inf_get_privrange_start_ea(void);
qstring inf_get_procname(void);
uchar inf_get_refcmtnum(void);
uint32 inf_get_short_demnames(void);
uchar inf_get_specsegs(void);
sel_t inf_get_start_cs(void);
ea_t inf_get_start_ea(void);
ea_t inf_get_start_ip(void);
ea_t inf_get_start_sp(void);
sel_t inf_get_start_ss(void);
uchar inf_get_strlit_break(void);
uchar inf_get_strlit_flags(void);
qstring inf_get_strlit_pref(void);
uval_t inf_get_strlit_sernum(void);
char inf_get_strlit_zeroes(void);
int32 inf_get_strtype(void);
uchar inf_get_type_xrefnum(void);
ushort inf_get_version(void);
uchar inf_get_xrefflag(void);
uchar inf_get_xrefnum(void);
bool inf_guess_func_type(void);
bool inf_handle_eh(void);
bool inf_handle_rtti(void);
bool inf_hide_comments(void);
bool inf_hide_libfuncs(void);
bool inf_huge_arg_align(void);
void __cdecl inf_inc_database_change_count(int cnt);
bool inf_is_16bit(void);
bool inf_is_32bit_exactly(void);
bool inf_is_32bit_or_higher(void);
bool inf_is_64bit(void);
bool inf_is_auto_enabled(void);
bool inf_is_be(void);
bool inf_is_dll(void);
bool inf_is_flat_off32(void);
bool inf_is_graph_view(void);
bool inf_is_hard_float(void);
bool inf_is_kernel_mode(void);
bool inf_is_limiter_empty(void);
bool inf_is_limiter_thick(void);
bool inf_is_limiter_thin(void);
bool inf_is_mem_aligned4(void);
bool inf_is_snapshot(void);
bool inf_is_wide_high_byte_first(void);
bool inf_like_binary(void);
bool inf_line_pref_with_seg(void);
bool inf_loading_idc(void);
bool inf_macros_enabled(void);
bool inf_map_stkargs(void);
bool inf_mark_code(void);
bool inf_no_store_user_info(void);
bool inf_noflow_to_data(void);
bool inf_noret_ana(void);
bool inf_op_offset(void);
bool inf_pack_idb(void);
bool __cdecl inf_pack_stkargs(cm_t cc);
uval_t __cdecl inf_postinc_strlit_sernum(uval_t cnt);
bool inf_prefix_show_funcoff(void);
bool inf_prefix_show_segaddr(void);
bool inf_prefix_show_stack(void);
bool inf_prefix_truncate_opcode_bytes(void);
bool inf_propagate_regargs(void);
bool inf_propagate_stkargs(void);
bool inf_readonly_idb(void);
bool inf_rename_jumpfunc(void);
bool inf_rename_nullsub(void);
bool __cdecl inf_set_32bit(bool _v);
bool __cdecl inf_set_64bit(bool _v);
bool __cdecl inf_set_abi_set_by_user(bool _v);
bool __cdecl inf_set_abibits(uint32 _v);
bool __cdecl inf_set_af(uint32 _v);
bool __cdecl inf_set_af2(uint32 _v);
void __cdecl inf_set_af2_low(ushort saf);
void __cdecl inf_set_af_high(ushort saf2);
void __cdecl inf_set_af_low(ushort saf);
bool __cdecl inf_set_allow_non_matched_ops(bool _v);
bool __cdecl inf_set_allow_sigmulti(bool _v);
bool __cdecl inf_set_appcall_options(uint32 _v);
bool __cdecl inf_set_append_sigcmt(bool _v);
bool __cdecl inf_set_apptype(ushort _v);
bool __cdecl inf_set_asmtype(uchar _v);
bool __cdecl inf_set_auto_enabled(bool _v);
bool __cdecl inf_set_baseaddr(uval_t _v);
bool __cdecl inf_set_be(bool _v);
bool __cdecl inf_set_big_arg_align(bool _v);
bool __cdecl inf_set_bin_prefix_size(__int16 _v);
bool __cdecl inf_set_cc(const compiler_info_t *_v);
bool __cdecl inf_set_cc_cm(cm_t _v);
bool __cdecl inf_set_cc_defalign(uchar _v);
bool __cdecl inf_set_cc_id(comp_t _v);
bool __cdecl inf_set_cc_size_b(uchar _v);
bool __cdecl inf_set_cc_size_e(uchar _v);
bool __cdecl inf_set_cc_size_i(uchar _v);
bool __cdecl inf_set_cc_size_l(uchar _v);
bool __cdecl inf_set_cc_size_ldbl(uchar _v);
bool __cdecl inf_set_cc_size_ll(uchar _v);
bool __cdecl inf_set_cc_size_s(uchar _v);
bool __cdecl inf_set_check_manual_ops(bool _v);
bool __cdecl inf_set_check_unicode_strlits(bool _v);
bool __cdecl inf_set_cmt_indent(uchar _v);
bool __cdecl inf_set_cmtflg(uchar _v);
bool __cdecl inf_set_coagulate_code(bool _v);
bool __cdecl inf_set_coagulate_data(bool _v);
bool __cdecl inf_set_compress_idb(bool _v);
bool __cdecl inf_set_create_all_xrefs(bool _v);
bool __cdecl inf_set_create_func_from_call(bool _v);
bool __cdecl inf_set_create_func_from_ptr(bool _v);
bool __cdecl inf_set_create_func_tails(bool _v);
bool __cdecl inf_set_create_jump_tables(bool _v);
bool __cdecl inf_set_create_off_on_dref(bool _v);
bool __cdecl inf_set_create_off_using_fixup(bool _v);
bool __cdecl inf_set_create_strlit_on_xref(bool _v);
bool __cdecl inf_set_data_offset(bool _v);
bool __cdecl inf_set_database_change_count(uint32 _v);
bool __cdecl inf_set_datatypes(uval_t _v);
bool __cdecl inf_set_dbg_no_store_path(bool _v);
bool __cdecl inf_set_decode_fpp(bool _v);
bool __cdecl inf_set_del_no_xref_insns(bool _v);
bool __cdecl inf_set_demnames(uchar _v);
bool __cdecl inf_set_dll(bool _v);
bool __cdecl inf_set_filetype(filetype_t _v);
bool __cdecl inf_set_final_pass(bool _v);
bool __cdecl inf_set_flat_off32(bool _v);
bool __cdecl inf_set_full_sp_ana(bool _v);
bool __cdecl inf_set_gen_assume(bool _v);
bool __cdecl inf_set_gen_lzero(bool _v);
bool __cdecl inf_set_gen_null(bool _v);
bool __cdecl inf_set_gen_org(bool _v);
bool __cdecl inf_set_gen_tryblks(bool _v);
bool __cdecl inf_set_genflags(ushort _v);
bool __cdecl inf_set_graph_view(bool _v);
bool __cdecl inf_set_guess_func_type(bool _v);
bool __cdecl inf_set_handle_eh(bool _v);
bool __cdecl inf_set_handle_rtti(bool _v);
bool __cdecl inf_set_hard_float(bool _v);
bool __cdecl inf_set_hide_comments(bool _v);
bool __cdecl inf_set_hide_libfuncs(bool _v);
bool __cdecl inf_set_highoff(ea_t _v);
bool __cdecl inf_set_huge_arg_align(bool _v);
bool __cdecl inf_set_indent(uchar _v);
bool __cdecl inf_set_kernel_mode(bool _v);
bool __cdecl inf_set_lenxref(ushort _v);
bool __cdecl inf_set_lflags(uint32 _v);
bool __cdecl inf_set_limiter(uchar _v);
bool __cdecl inf_set_limiter_empty(bool _v);
bool __cdecl inf_set_limiter_thick(bool _v);
bool __cdecl inf_set_limiter_thin(bool _v);
bool __cdecl inf_set_line_pref_with_seg(bool _v);
bool __cdecl inf_set_listnames(uchar _v);
bool __cdecl inf_set_loading_idc(bool _v);
bool __cdecl inf_set_long_demnames(uint32 _v);
bool __cdecl inf_set_lowoff(ea_t _v);
bool __cdecl inf_set_macros_enabled(bool _v);
bool __cdecl inf_set_main(ea_t _v);
bool __cdecl inf_set_map_stkargs(bool _v);
bool __cdecl inf_set_margin(ushort _v);
bool __cdecl inf_set_mark_code(bool _v);
bool __cdecl inf_set_max_autoname_len(ushort _v);
bool __cdecl inf_set_max_ea(ea_t _v);
bool __cdecl inf_set_maxref(uval_t _v);
bool __cdecl inf_set_mem_aligned4(bool _v);
bool __cdecl inf_set_min_ea(ea_t _v);
bool __cdecl inf_set_nametype(char _v);
bool __cdecl inf_set_netdelta(sval_t _v);
bool __cdecl inf_set_no_store_user_info(bool _v);
bool __cdecl inf_set_noflow_to_data(bool _v);
bool __cdecl inf_set_noret_ana(bool _v);
bool __cdecl inf_set_omax_ea(ea_t _v);
bool __cdecl inf_set_omin_ea(ea_t _v);
bool __cdecl inf_set_op_offset(bool _v);
bool __cdecl inf_set_ostype(ushort _v);
bool __cdecl inf_set_outflags(uint32 _v);
bool __cdecl inf_set_pack_idb(bool _v);
int __cdecl inf_set_pack_mode(int pack_mode);
bool __cdecl inf_set_pack_stkargs(bool _v);
bool __cdecl inf_set_prefflag(uchar _v);
bool __cdecl inf_set_prefix_show_funcoff(bool _v);
bool __cdecl inf_set_prefix_show_segaddr(bool _v);
bool __cdecl inf_set_prefix_show_stack(bool _v);
bool __cdecl inf_set_prefix_truncate_opcode_bytes(bool _v);
bool __cdecl inf_set_privrange(const range_t *_v);
bool __cdecl inf_set_privrange_end_ea(ea_t _v);
bool __cdecl inf_set_privrange_start_ea(ea_t _v);
bool __cdecl inf_set_procname(const char *_v, size_t len);
bool __cdecl inf_set_propagate_regargs(bool _v);
bool __cdecl inf_set_propagate_stkargs(bool _v);
bool __cdecl inf_set_readonly_idb(bool _v);
bool __cdecl inf_set_refcmtnum(uchar _v);
bool __cdecl inf_set_rename_jumpfunc(bool _v);
bool __cdecl inf_set_rename_nullsub(bool _v);
bool __cdecl inf_set_short_demnames(uint32 _v);
bool __cdecl inf_set_should_create_stkvars(bool _v);
bool __cdecl inf_set_should_trace_sp(bool _v);
bool __cdecl inf_set_show_all_comments(bool _v);
bool __cdecl inf_set_show_auto(bool _v);
bool __cdecl inf_set_show_hidden_funcs(bool _v);
bool __cdecl inf_set_show_hidden_insns(bool _v);
bool __cdecl inf_set_show_hidden_segms(bool _v);
bool __cdecl inf_set_show_line_pref(bool _v);
bool __cdecl inf_set_show_repeatables(bool _v);
bool __cdecl inf_set_show_src_linnum(bool _v);
bool __cdecl inf_set_show_void(bool _v);
bool __cdecl inf_set_show_xref_fncoff(bool _v);
bool __cdecl inf_set_show_xref_seg(bool _v);
bool __cdecl inf_set_show_xref_tmarks(bool _v);
bool __cdecl inf_set_show_xref_val(bool _v);
bool __cdecl inf_set_snapshot(bool _v);
bool __cdecl inf_set_specsegs(uchar _v);
bool __cdecl inf_set_stack_ldbl(bool _v);
bool __cdecl inf_set_stack_varargs(bool _v);
bool __cdecl inf_set_start_cs(sel_t _v);
bool __cdecl inf_set_start_ea(ea_t _v);
bool __cdecl inf_set_start_ip(ea_t _v);
bool __cdecl inf_set_start_sp(ea_t _v);
bool __cdecl inf_set_start_ss(sel_t _v);
bool __cdecl inf_set_strlit_autocmt(bool _v);
bool __cdecl inf_set_strlit_break(uchar _v);
bool __cdecl inf_set_strlit_flags(uchar _v);
bool __cdecl inf_set_strlit_name_bit(bool _v);
bool __cdecl inf_set_strlit_names(bool _v);
bool __cdecl inf_set_strlit_pref(const char *_v, size_t len);
bool __cdecl inf_set_strlit_savecase(bool _v);
bool __cdecl inf_set_strlit_serial_names(bool _v);
bool __cdecl inf_set_strlit_sernum(uval_t _v);
bool __cdecl inf_set_strlit_zeroes(char _v);
bool __cdecl inf_set_strtype(int32 _v);
bool __cdecl inf_set_trace_flow(bool _v);
bool __cdecl inf_set_truncate_on_del(bool _v);
bool __cdecl inf_set_type_xrefnum(uchar _v);
bool __cdecl inf_set_unicode_strlits(bool _v);
bool __cdecl inf_set_use_allasm(bool _v);
bool __cdecl inf_set_use_flirt(bool _v);
bool __cdecl inf_set_use_gcc_layout(bool _v);
bool __cdecl inf_set_version(ushort _v);
bool __cdecl inf_set_wide_high_byte_first(bool _v);
bool __cdecl inf_set_xrefflag(uchar _v);
bool __cdecl inf_set_xrefnum(uchar _v);
bool inf_should_create_stkvars(void);
bool inf_should_trace_sp(void);
bool inf_show_all_comments(void);
bool inf_show_auto(void);
bool inf_show_hidden_funcs(void);
bool inf_show_hidden_insns(void);
bool inf_show_hidden_segms(void);
bool inf_show_line_pref(void);
bool inf_show_repeatables(void);
bool inf_show_src_linnum(void);
bool inf_show_void(void);
bool inf_show_xref_fncoff(void);
bool inf_show_xref_seg(void);
bool inf_show_xref_tmarks(void);
bool inf_show_xref_val(void);
bool inf_stack_ldbl(void);
bool inf_stack_varargs(void);
bool inf_strlit_autocmt(void);
bool inf_strlit_name_bit(void);
bool inf_strlit_names(void);
bool inf_strlit_savecase(void);
bool inf_strlit_serial_names(void);
bool inf_test_mode(void);
bool inf_trace_flow(void);
bool inf_truncate_on_del(void);
bool inf_unicode_strlits(void);
bool inf_use_allasm(void);
bool inf_use_flirt(void);
bool inf_use_gcc_layout(void);
void info(const char *format, ...);
int __cdecl init_database(int argc, const char *const *argv, int *newfile);
void init_ignore_micro(void);
void __cdecl init_plugins(int flag);
void __cdecl insn_add_cref(const insn_t *insn, ea_t to, int opoff, cref_t type);
void __cdecl insn_add_dref(const insn_t *insn, ea_t to, int opoff, dref_t type);
ea_t __cdecl insn_add_off_drefs(const insn_t *insn, const op_t *x, dref_t type, int outf);
bool __cdecl insn_create_op_data(const insn_t *insn, ea_t ea, int opoff, op_dtype_t dtype);
bool __cdecl insn_create_stkvar(const insn_t *insn, const op_t *x, adiff_t v, int flags);
void __cdecl install_command_interpreter(const cli_t *cp);
int __cdecl install_custom_argloc(const custloc_desc_t *custloc);
ssize_t __cdecl install_extlang(extlang_t *el);
bool __cdecl install_user_defined_prefix(size_t prefix_len, user_defined_prefix_t *udp, const void *owner);
int __cdecl internal_cleanup_appcall(thid_t tid);
int __cdecl internal_get_sreg_base(ea_t *answer, thid_t tid, int sreg_value);
int __cdecl internal_ioctl(int fn, const void *buf, size_t size, void **poutbuf, ssize_t *poutsize);
int __cdecl internal_register_place_class(const place_t *tmplate, int flags, const plugin_t *owner, int sdk_version);
void __cdecl __noreturn interr(int code);
bool interr_should_throw;
int __cdecl invalidate_dbg_state(int dbginv);
void invalidate_dbgmem_config(void);
void __cdecl invalidate_dbgmem_contents(ea_t ea, asize_t size);
bool __cdecl invalidate_sp_analysis(ea_t ea);
ssize_t __cdecl invoke_callbacks(hook_type_t hook_type, int notification_code, va_list va);
bool __cdecl invoke_plugin(plugin_info_t *ptr);
bool __cdecl is__bnot0(ea_t ea);
bool __cdecl is__bnot1(ea_t ea);
bool __cdecl is__invsign0(ea_t ea);
bool __cdecl is__invsign1(ea_t ea);
bool __cdecl is_action_enabled(action_state_t s);
bool __cdecl is_aflag__bnot0(aflags_t flags);
bool __cdecl is_aflag__bnot1(aflags_t flags);
bool __cdecl is_aflag__invsign0(aflags_t flags);
bool __cdecl is_aflag__invsign1(aflags_t flags);
bool __cdecl is_aflag_align_flow(aflags_t flags);
bool __cdecl is_aflag_colored_item(aflags_t flags);
bool __cdecl is_aflag_data_guessed_by_hexrays(aflags_t flags);
bool __cdecl is_aflag_fixed_spd(aflags_t flags);
bool __cdecl is_aflag_func_guessed_by_hexrays(aflags_t flags);
bool __cdecl is_aflag_hidden_border(aflags_t flags);
bool __cdecl is_aflag_hidden_item(aflags_t flags);
bool __cdecl is_aflag_libitem(aflags_t flags);
bool __cdecl is_aflag_lzero0(aflags_t flags);
bool __cdecl is_aflag_lzero1(aflags_t flags);
bool __cdecl is_aflag_manual_insn(aflags_t flags);
bool __cdecl is_aflag_noret(aflags_t flags);
bool __cdecl is_aflag_notcode(aflags_t flags);
bool __cdecl is_aflag_notproc(aflags_t flags);
bool __cdecl is_aflag_public_name(aflags_t flags);
bool __cdecl is_aflag_retfp(aflags_t flags);
bool __cdecl is_aflag_terse_struc(aflags_t flags);
bool __cdecl is_aflag_tilcmt(aflags_t flags);
bool __cdecl is_aflag_type_determined_by_hexrays(aflags_t flags);
bool __cdecl is_aflag_type_guessed_by_hexrays(aflags_t flags);
bool __cdecl is_aflag_type_guessed_by_ida(aflags_t flags);
bool __cdecl is_aflag_usersp(aflags_t flags);
bool __cdecl is_aflag_userti(aflags_t flags);
bool __cdecl is_aflag_weak_name(aflags_t flags);
bool __cdecl is_aflag_zstroff(aflags_t flags);
bool __cdecl is_align(flags_t F);
bool __cdecl is_align_flow(ea_t ea);
int __cdecl is_align_insn(ea_t ea);
bool __cdecl is_anonymous_member_name(const char *name);
bool __cdecl is_attached_custom_data_format(int dtid, int dfid);
bool is_auto_enabled(void);
bool __cdecl is_autosync(const char *name, const tinfo_t *tif);
bool __cdecl is_basic_block_end(const insn_t *insn, bool call_insn_stops_block);
bool is_bblk_trace_enabled(void);
bool __cdecl is_bf(enum_t id);
bool __cdecl is_bnot(ea_t ea, flags_t F, int n);
bool __cdecl is_byte(flags_t F);
bool __cdecl is_call_insn(const insn_t *insn);
bool __cdecl is_char(flags_t F, int n);
bool __cdecl is_char0(flags_t F);
bool __cdecl is_char1(flags_t F);
bool __cdecl is_chooser_widget(twidget_type_t t);
bool __cdecl is_code(flags_t F);
bool __cdecl is_code_far(cm_t cm);
bool __cdecl is_colored_item(ea_t ea);
comp_t __cdecl is_comp_unsure(comp_t comp);
tty_control_t __cdecl is_control_tty(int fd);
bool __cdecl is_cp_graphical(wchar32_t cp);
bool __cdecl is_custfmt(flags_t F, int n);
bool __cdecl is_custfmt0(flags_t F);
bool __cdecl is_custfmt1(flags_t F);
bool __cdecl is_custom(flags_t F);
bool __cdecl is_data(flags_t F);
bool __cdecl is_data_far(cm_t cm);
bool __cdecl is_data_guessed_by_hexrays(ea_t ea);
bool __cdecl is_database_ext(const char *ext);
bool __cdecl is_database_flag(uint32 dbfl);
bool is_debugger_busy(void);
bool __cdecl is_debugger_memory(ea_t ea);
bool is_debugger_on(void);
bool __cdecl is_debugger_segm(ea_t ea);
bool __cdecl is_defarg(flags_t F, int n);
bool __cdecl is_defarg0(flags_t F);
bool __cdecl is_defarg1(flags_t F);
bool __cdecl is_double(flags_t F);
bool __cdecl is_dummy_member_name(const char *name);
bool __cdecl is_dword(flags_t F);
bool __cdecl is_ea_tryblks(ea_t ea, uint32 flags);
bool __cdecl is_enum(flags_t F, int n);
bool __cdecl is_enum0(flags_t F);
bool __cdecl is_enum1(flags_t F);
bool __cdecl is_enum_fromtil(enum_t id);
bool __cdecl is_enum_hidden(enum_t id);
bool __cdecl is_ephemeral_segm(ea_t ea);
bool __cdecl is_epilog_insn(ea_t ea);
bool __cdecl is_filetype_like_binary(filetype_t ft);
bool __cdecl is_finally_visible_func(func_t *pfn);
bool __cdecl is_finally_visible_item(ea_t ea);
bool __cdecl is_finally_visible_segm(segment_t *s);
bool __cdecl is_first_visea(ea_t ea);
bool __cdecl is_fixed_spd(ea_t ea);
bool __cdecl is_fixup_custom(fixup_type_t type);
bool __cdecl is_float(flags_t F);
bool __cdecl is_float0(flags_t F);
bool __cdecl is_float1(flags_t F);
bool __cdecl is_floating_dtype(op_dtype_t dtype);
bool __cdecl is_flow(flags_t F);
bool __cdecl is_fltnum(flags_t F, int n);
bool __cdecl is_forced_operand(ea_t ea, int n);
bool __cdecl is_func(flags_t F);
bool __cdecl is_func_entry(const func_t *pfn);
bool __cdecl is_func_guessed_by_hexrays(ea_t ea);
bool __cdecl is_func_locked(const func_t *pfn);
bool __cdecl is_func_tail(const func_t *pfn);
bool is_func_trace_enabled(void);
bool is_gcc(void);
bool is_gcc32(void);
bool is_gcc64(void);
bool __cdecl is_ghost_enum(enum_t id);
bool __cdecl is_golang_cc(cm_t cc);
bool __cdecl is_head(flags_t F);
bool __cdecl is_hidden_border(ea_t ea);
bool __cdecl is_hidden_item(ea_t ea);
bool is_ida_kernel;
bool is_idaq(void);
bool __cdecl is_idaview(TWidget *v);
bool __cdecl is_ident(const char *name);
bool __cdecl is_ident_cp(wchar32_t cp);
bool __cdecl is_in_nlist(ea_t ea);
bool __cdecl is_indirect_jump_insn(const insn_t *insn);
bool is_insn_trace_enabled(void);
bool __cdecl is_invsign(ea_t ea, flags_t F, int n);
bool __cdecl is_last_visea(ea_t ea);
bool __cdecl is_lead_surrogate(wchar32_t wch);
bool __cdecl is_libitem(ea_t ea);
bool __cdecl is_loaded(ea_t ea);
bool __cdecl is_lzero(ea_t ea, int n);
bool __cdecl is_lzero0(ea_t ea);
bool __cdecl is_lzero1(ea_t ea);
bool is_main_thread(void);
bool __cdecl is_manual(flags_t F, int n);
bool __cdecl is_manual_insn(ea_t ea);
bool __cdecl is_mapped(ea_t ea);
bool __cdecl is_member_id(tid_t mid);
bool is_miniidb(void);
bool is_msg_inited(void);
bool __cdecl is_name_defined_locally(func_t *pfn, const char *name, ignore_name_def_t ignore_name_def, ea_t ea1, ea_t ea2);
bool __cdecl is_noret(ea_t ea);
bool __cdecl is_noret_block(fc_block_type_t btype);
bool __cdecl is_not_tail(flags_t F);
bool __cdecl is_notcode(ea_t ea);
bool __cdecl is_notproc(ea_t ea);
bool __cdecl is_numop(flags_t F, int n);
bool __cdecl is_numop0(flags_t F);
bool __cdecl is_numop1(flags_t F);
bool __cdecl is_off(flags_t F, int n);
bool __cdecl is_off0(flags_t F);
bool __cdecl is_off1(flags_t F);
bool __cdecl is_one_bit_mask(bmask_t mask);
bool __cdecl is_ordinal_name(const char *name, uint32 *ord);
bool __cdecl is_oword(flags_t F);
bool __cdecl is_pack_real(flags_t F);
bool __cdecl is_pascal(int32 strtype);
bool __cdecl is_place_class_ea_capable(int id);
bool __cdecl is_problem_present(problist_id_t t, ea_t ea);
bool __cdecl is_prolog_insn(ea_t ea);
bool __cdecl is_public_name(ea_t ea);
bool __cdecl is_purging_cc(cm_t cm);
bool __cdecl is_qword(flags_t F);
bool __cdecl is_refresh_requested(uint64 mask);
bool __cdecl is_reftype_target_optional(reftype_t type);
bool __cdecl is_reg_custom(const char *regname);
bool __cdecl is_reg_float(const char *regname);
bool __cdecl is_reg_integer(const char *regname);
bool is_request_running(void);
bool __cdecl is_restype_enum(const til_t *til, const type_t *type);
bool __cdecl is_restype_struct(const til_t *til, const type_t *type);
bool __cdecl is_restype_struni(const til_t *til, const type_t *type);
bool __cdecl is_restype_void(const til_t *til, const type_t *type);
bool __cdecl is_ret_block(fc_block_type_t btype);
bool __cdecl is_ret_insn(const insn_t *insn, bool strict);
bool __cdecl is_retfp(ea_t ea);
bool __cdecl is_same_data_type(flags_t F1, flags_t F2);
bool __cdecl is_same_func(ea_t ea1, ea_t ea2);
bool __cdecl is_sdacl_byte(type_t t);
bool __cdecl is_seg(flags_t F, int n);
bool __cdecl is_seg0(flags_t F);
bool __cdecl is_seg1(flags_t F);
bool __cdecl is_segm_locked(const segment_t *segm);
bool __cdecl is_spec_ea(ea_t ea);
bool __cdecl is_spec_segm(uchar seg_type);
bool __cdecl is_special_member(tid_t id);
bool is_step_trace_enabled(void);
bool __cdecl is_stkvar(flags_t F, int n);
bool __cdecl is_stkvar0(flags_t F);
bool __cdecl is_stkvar1(flags_t F);
bool __cdecl is_strlit(flags_t F);
bool __cdecl is_strlit_cp(wchar32_t cp, const rangeset_crefvec_t *specific_ranges);
bool __cdecl is_stroff(flags_t F, int n);
bool __cdecl is_stroff0(flags_t F);
bool __cdecl is_stroff1(flags_t F);
bool __cdecl is_struct(flags_t F);
bool __cdecl is_suspop(ea_t ea, flags_t F, int n);
bool __cdecl is_switch_insn(ea_t ea);
bool __cdecl is_tah_byte(type_t t);
bool __cdecl is_tail(flags_t F);
bool __cdecl is_tail_surrogate(wchar32_t wch);
bool __cdecl is_tbyte(flags_t F);
bool is_temp_database(void);
bool __cdecl is_terse_struc(ea_t ea);
bool __cdecl is_tilcmt(ea_t ea);
bool is_trusted_idb(void);
bool __cdecl is_type_arithmetic(type_t t);
bool __cdecl is_type_array(type_t t);
bool __cdecl is_type_bitfld(type_t t);
bool __cdecl is_type_bool(type_t t);
bool __cdecl is_type_char(type_t t);
bool __cdecl is_type_complex(type_t t);
bool __cdecl is_type_const(type_t t);
bool __cdecl is_type_determined_by_hexrays(ea_t ea);
bool __cdecl is_type_double(type_t t);
bool __cdecl is_type_enum(type_t t);
bool __cdecl is_type_ext_arithmetic(type_t t);
bool __cdecl is_type_ext_integral(type_t t);
bool __cdecl is_type_float(type_t t);
bool __cdecl is_type_floating(type_t t);
bool __cdecl is_type_func(type_t t);
bool __cdecl is_type_guessed_by_hexrays(ea_t ea);
bool __cdecl is_type_guessed_by_ida(ea_t ea);
bool __cdecl is_type_int(type_t bt);
bool __cdecl is_type_int128(type_t t);
bool __cdecl is_type_int16(type_t t);
bool __cdecl is_type_int32(type_t t);
bool __cdecl is_type_int64(type_t t);
bool __cdecl is_type_integral(type_t t);
bool __cdecl is_type_ldouble(type_t t);
bool __cdecl is_type_paf(type_t t);
bool __cdecl is_type_partial(type_t t);
bool __cdecl is_type_ptr(type_t t);
bool __cdecl is_type_ptr_or_array(type_t t);
bool __cdecl is_type_struct(type_t t);
bool __cdecl is_type_struni(type_t t);
bool __cdecl is_type_sue(type_t t);
bool __cdecl is_type_tbyte(type_t t);
bool __cdecl is_type_typedef(type_t t);
bool __cdecl is_type_uchar(type_t t);
bool __cdecl is_type_uint(type_t t);
bool __cdecl is_type_uint128(type_t t);
bool __cdecl is_type_uint16(type_t t);
bool __cdecl is_type_uint32(type_t t);
bool __cdecl is_type_uint64(type_t t);
bool __cdecl is_type_union(type_t t);
bool __cdecl is_type_unknown(type_t t);
bool __cdecl is_type_void(type_t t);
bool __cdecl is_type_volatile(type_t t);
bool __cdecl is_typeid_last(type_t t);
bool __cdecl is_uname(const char *name);
bool __cdecl is_union(tid_t id);
bool __cdecl is_unknown(flags_t F);
bool __cdecl is_user_cc(cm_t cm);
bool __cdecl is_usersp(ea_t ea);
bool __cdecl is_userti(ea_t ea);
bool __cdecl is_valid_cp(wchar32_t cp, nametype_t kind, void *data);
bool __cdecl is_valid_trace_file(const char *filename);
bool __cdecl is_valid_typename(const char *name);
bool __cdecl is_valid_utf8(const char *in);
bool __cdecl is_vararg_cc(cm_t cm);
bool __cdecl is_varmember(const member_t *mptr);
int __cdecl is_varsize_item(ea_t ea, flags_t F, const opinfo_t *ti, asize_t *itemsize);
bool __cdecl is_varstr(tid_t id);
bool __cdecl is_visible_cp(wchar32_t cp);
bool __cdecl is_visible_finally(ea_t ea);
bool __cdecl is_visible_func(func_t *pfn);
bool __cdecl is_visible_item(ea_t ea);
bool __cdecl is_visible_segm(segment_t *s);
int __cdecl is_wctype(wint_t _C, wctype_t _Type);
bool __cdecl is_weak_name(ea_t ea);
bool __cdecl is_word(flags_t F);
bool __cdecl is_yword(flags_t F);
bool __cdecl is_zstroff(ea_t ea);
bool __cdecl is_zword(flags_t F);
int __cdecl isalnum(int _C);
int __cdecl isalpha(int _C);
int __cdecl isatty(int _FileHandle);
int __cdecl isblank(int _C);
int __cdecl iscntrl(int _C);
int __cdecl isdigit(int _C);
int __cdecl isgraph(int _C);
int __cdecl isleadbyte(int _C);
int __cdecl islower(int _C);
int __cdecl isprint(int _C);
int __cdecl ispunct(int _C);
int __cdecl isspace(int _C);
int __cdecl isupper(int _C);
int __cdecl iswalnum(wint_t _C);
int __cdecl iswalpha(wint_t _C);
int __cdecl iswascii(wint_t _C);
int __cdecl iswblank(wint_t _C);
int __cdecl iswcntrl(wint_t _C);
int __cdecl iswctype(wint_t _C, wctype_t _Type);
int __cdecl iswdigit(wint_t _C);
int __cdecl iswgraph(wint_t _C);
int __cdecl iswlower(wint_t _C);
int __cdecl iswprint(wint_t _C);
int __cdecl iswpunct(wint_t _C);
int __cdecl iswspace(wint_t _C);
int __cdecl iswupper(wint_t _C);
int __cdecl iswxdigit(wint_t _C);
int __cdecl isxdigit(int _C);
void __cdecl iterate_func_chunks(func_t *pfn, void (__cdecl *func)(ea_t, ea_t, void *), void *ud, bool include_parents);
const char *__cdecl itext(help_t msg_id);
char *__cdecl itoa(int _Value, char *_Buffer, int _Radix);
double __cdecl j0(double _X);
double __cdecl j1(double _X);
double __cdecl jn(int _X, double _Y);
bool __cdecl jumpto(TWidget *custom_viewer, place_t *place, int x, int y);
void __cdecl jvalue_t_clear(jvalue_t *);
void __cdecl jvalue_t_copy(jvalue_t *, const jvalue_t *);
int __cdecl l_compare(const place_t *t1, const place_t *t2);
int __cdecl l_compare2(const place_t *t1, const place_t *t2, void *ud);
fpvalue_error_t __cdecl l_realcvt(void *m, fpvalue_t *out, uint16 swt);
__int32 __cdecl labs(__int32 _X);
uval_t __cdecl last(uval_t off, asize_t s);
const char *__cdecl last_idcv_attr(const idc_value_t *obj);
void *__cdecl launch_process(const launch_process_params_t *lpp, qstring *errbuf);
double __cdecl ldexp(double _X, int _Y);
float __cdecl ldexpf(float _X, int _Y);
long double __cdecl ldexpl(long double _X, int _Y);
ldiv_t __cdecl ldiv(__int32 _Numerator, __int32 _Denominator);
bool __cdecl leading_zero_important(ea_t ea, int n);
bool legacy_idb;
error_t __cdecl lex_define_macro(lexer_t *lx, const char *macro, const char *body, int nargs, bool isfunc);
const char *__cdecl lex_get_file_line(lexer_t *lx, int32 *linenum, const char **lineptr, int level);
error_t __cdecl lex_get_token(lexer_t *lx, token_t *t);
error_t __cdecl lex_get_token2(lexer_t *lx, token_t *t, int32 *p_lnnum);
error_t __cdecl lex_init_file(lexer_t *lx, const char *file);
error_t __cdecl lex_init_string(lexer_t *lx, const char *line, void *macros);
const char *__cdecl lex_print_token(qstring *buf, const token_t *t);
int __cdecl lex_set_options(lexer_t *lx, int options);
void __cdecl lex_term_file(lexer_t *lx, bool del_macros);
void __cdecl lex_undefine_macro(lexer_t *lx, const char *macro);
int __cdecl lexcompare_tinfo(uint32 t1, uint32 t2, int);
void *__cdecl lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
double __cdecl lgamma(double _X);
float __cdecl lgammaf(float _X);
long double __cdecl lgammal(long double _X);
bool __cdecl linearray_t_beginning(const linearray_t *);
void __cdecl linearray_t_ctr(linearray_t *, void *ud);
const qstring *__cdecl linearray_t_down(linearray_t *);
void __cdecl linearray_t_dtr(linearray_t *);
bool __cdecl linearray_t_ending(const linearray_t *);
int __cdecl linearray_t_set_place(linearray_t *, const place_t *new_at);
const qstring *__cdecl linearray_t_up(linearray_t *);
size_t __cdecl list_bptgrps(qstrvec_t *bptgrps);
__int64 __cdecl llabs(__int64 _X);
lldiv_t __cdecl lldiv(__int64 _Numerator, __int64 _Denominator);
longlong __cdecl llong_scan(const char *buf, int radix, const char **end);
__int64 __cdecl llrint(double _X);
__int64 __cdecl llrintf(float _X);
__int64 __cdecl llrintl(long double _X);
__int64 __cdecl llround(double _X);
__int64 __cdecl llroundf(float _X);
__int64 __cdecl llroundl(long double _X);
bool __cdecl load_and_run_plugin(const char *name, size_t arg);
bool __cdecl load_binary_file(const char *filename, linput_t *li, ushort _neflags, int64 fileoff, ea_t basepara, ea_t binoff, uint64 nbytes);
bool __cdecl load_core_module(idadll_t *dllmem, const char *file, const char *entry);
void __cdecl load_core_module_or_die(idadll_t *dllmem, const char *file, const char *entry);
int __cdecl load_custom_icon(const void *ptr, unsigned int len, const char *format);
bool __cdecl load_dbg_dbginfo(const char *path, linput_t *li, ea_t base, bool verbose);
bool __cdecl load_debugger(const char *dbgname, bool use_remote);
bool __cdecl load_dirtree(dirtree_impl_t *d);
int __cdecl load_ids_module(char *fname);
bool __cdecl load_nonbinary_file(const char *filename, linput_t *li, const char *sysdlldir, ushort _neflags, load_info_t *loader);
plugin_t *__cdecl load_plugin(const char *name);
til_t *__cdecl load_til(const char *name, qstring *errbuf, const char *tildir);
til_t *__cdecl load_til_header(const char *tildir, const char *name, qstring *errbuf);
bool __cdecl load_trace_file(qstring *buf, const char *filename);
void __noreturn loader_failure(const char *format, ...);
bool __cdecl lochist_entry_t_deserialize(lochist_entry_t *, const uchar **, const uchar *const, const place_t *);
void __cdecl lochist_entry_t_serialize(bytevec_t *, const lochist_entry_t *);
bool __cdecl lochist_t_back(lochist_t *, uint32 cnt, bool try_to_unhide);
void __cdecl lochist_t_clear(lochist_t *);
uint32 __cdecl lochist_t_current_index(const lochist_t *);
void __cdecl lochist_t_deregister_live(lochist_t *);
bool __cdecl lochist_t_fwd(lochist_t *, uint32 cnt, bool try_to_unhide);
bool __cdecl lochist_t_get(lochist_entry_t *, const lochist_t *, uint32);
const lochist_entry_t *__cdecl lochist_t_get_current(const lochist_t *);
bool __cdecl lochist_t_init(lochist_t *, const char *, const place_t *, void *, uint32);
void __cdecl lochist_t_jump(lochist_t *, bool try_to_unhide, const lochist_entry_t *e);
void __cdecl lochist_t_register_live(lochist_t *);
void __cdecl lochist_t_save(const lochist_t *);
bool __cdecl lochist_t_seek(lochist_t *, uint32 index, bool try_to_unhide, bool apply_cur);
void __cdecl lochist_t_set(lochist_t *, uint32, const lochist_entry_t *);
uint32 __cdecl lochist_t_size(const lochist_t *);
void lock_dbgmem_config(void);
void __cdecl lock_func_range(const func_t *pfn, bool lock);
void __cdecl lock_segm(const segment_t *segm, bool lock);
int __cdecl locking(int _FileHandle, int _LockMode, __int32 _NumOfBytes);
double __cdecl log(double _X);
double __cdecl log10(double _X);
float __cdecl log10f(float _X);
long double __cdecl log10l(long double _X);
double __cdecl log1p(double _X);
float __cdecl log1pf(float _X);
long double __cdecl log1pl(long double _X);
double __cdecl log2(double _X);
int __cdecl log2ceil(uint64 d64);
float __cdecl log2f(float _X);
int __cdecl log2floor(uint64 d64);
long double __cdecl log2l(long double _X);
double __cdecl logb(double _X);
float __cdecl logbf(float _X);
long double __cdecl logbl(long double _X);
float __cdecl logf(float _X);
long double __cdecl logl(long double _X);
ushort __cdecl lookup_key_code(int key, int shift, bool is_qt);
lecvt_code_t (__cdecl *__cdecl lookup_loc_converter2(const char *p1, const char *p2))(lochist_entry_t *, const lochist_entry_t *, TWidget *, uint32);
uint32 __cdecl low(const longlong *x);
int __cdecl lower_type(til_t *til, tinfo_t *tif, const char *name, lowertype_helper_t *_helper);
void __cdecl lread(linput_t *li, void *buf, size_t size);
int __cdecl lread2bytes(linput_t *li, uint16 *res, bool mf);
int __cdecl lread4bytes(linput_t *li, uint32 *res, bool mf);
int __cdecl lread8bytes(linput_t *li, uint64 *res, bool mf);
int __cdecl lreadbytes(linput_t *li, void *buf, size_t size, bool mf);
__int32 __cdecl lrint(double _X);
__int32 __cdecl lrintf(float _X);
__int32 __cdecl lrintl(long double _X);
__int32 __cdecl lround(double _X);
__int32 __cdecl lroundf(float _X);
__int32 __cdecl lroundl(long double _X);
void *__cdecl lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
__int32 __cdecl lseek(int _FileHandle, __int32 _Offset, int _Origin);
char *__cdecl ltoa(__int32 _Value, char *_Buffer, int _Radix);
char *__cdecl make_file_ext(char *buf, size_t bufsize, const char *file, const char *ext);
int128 __cdecl make_int128(ulonglong ll, longlong hh);
linput_t *__cdecl make_linput(FILE *fp);
longlong __cdecl make_longlong(uint32 ll, int32 hh);
bool __cdecl make_name_auto(ea_t ea);
void __cdecl make_name_non_public(ea_t ea);
void __cdecl make_name_non_weak(ea_t ea);
void __cdecl make_name_public(ea_t ea);
bool __cdecl make_name_user(ea_t ea);
void __cdecl make_name_weak(ea_t ea);
qtime64_t __cdecl make_qtime64(uint32 secs, int32 usecs);
int32 __cdecl make_str_type(uchar type_code, int encoding_idx, uchar term1, uchar term2);
uint128 __cdecl make_uint128(ulonglong ll, longlong hh);
ulonglong __cdecl make_ulonglong(uint32 ll, int32 hh);
void *__cdecl malloc(size_t _Size);
ea_t __cdecl map_code_ea(const insn_t *insn, const op_t *op);
ea_t __cdecl map_data_ea(const insn_t *insn, const op_t *op);
ea_t __cdecl map_ea(const insn_t *insn, ea_t addr, int opnum, bool iscode);
void mark_all_eaviews_for_refresh(void);
void __cdecl mark_epilog_insn(ea_t ea);
void __cdecl mark_prolog_insn(ea_t ea);
void __cdecl mark_range_for_refresh(ea_t ea, asize_t size);
void __cdecl mark_switch_insn(ea_t ea);
void __cdecl mark_switch_insns_jpt(const jump_pattern_t *_this, int last, int);
bool __cdecl match_jpt(jump_pattern_t *_this);
unsigned __int64 *__cdecl max(unsigned __int64 *_Left, unsigned __int64 *_Right);
int max_history_files;
bool may_create_stkvars(void);
bool may_trace_sp(void);
int __cdecl mblen(const char *_Ch, size_t _MaxCount);
size_t __cdecl mbrlen(const char *_Ch, size_t _SizeInBytes, mbstate_t *_State);
size_t __cdecl mbrtowc(__int16 *_DstCh, const char *_SrcCh, size_t _SizeInBytes, mbstate_t *_State);
int __cdecl mbsinit(const mbstate_t *_P);
size_t __cdecl mbsrtowcs(__int16 *_Dest, const char **_PSrc, size_t _Count, mbstate_t *_State);
errno_t __cdecl mbsrtowcs_s(size_t *_Retval, __int16 *_Dst, size_t _Size, const char **_PSrc, size_t _N, mbstate_t *_State);
size_t __cdecl mbstowcs(__int16 *_Dest, const char *_Source, size_t _MaxCount);
errno_t __cdecl mbstowcs_s(size_t *_PtNumOfCharConverted, __int16 *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount);
int __cdecl mbtowc(__int16 *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes);
int __cdecl mem2base(const void *memptr, ea_t ea1, ea_t ea2, int64 fpos);
void *__cdecl memccpy(void *_Dst, const void *_Src, int _Val, size_t _Size);
void *__cdecl memchr(void *_Pv, int _C, size_t _N);
int __cdecl memcmp(const void *_Buf1, const void *_Buf2, size_t _Size);
void *__cdecl memcpy(void *_Dst, const void *_Src, size_t _Size);
int __cdecl memicmp(const void *_Buf1, const void *_Buf2, size_t _Size);
void *__cdecl memmove(void *_Dst, const void *_Src, size_t _Size);
void *__cdecl memrev(void *buf, ssize_t size);
void *__cdecl memset(void *_Dst, int _Val, size_t _Size);
unsigned __int64 *__cdecl min(unsigned __int64 *_Left, unsigned __int64 *_Right);
int __cdecl mkdir(const char *_Path);
char *__cdecl mktemp(char *_TemplateName);
double __cdecl modf(double _X, double *_Y);
float __cdecl modff(float _X, float *_Y);
long double __cdecl modfl(long double _X, long double *_Y);
error_t __cdecl move_idcv(idc_value_t *dst, idc_value_t *src);
int __cdecl move_segm(segment_t *s, ea_t to, int flags);
bool __cdecl move_segm_start(ea_t ea, ea_t newstart, int mode);
int msg(const char *format, ...);
void msg_clear(void);
void __cdecl msg_get_lines(qstrvec_t *out, int count);
bool __cdecl msg_save(qstring *path);
bool __cdecl name_requires_qualifier(qstring *out, uint32 typid, const char *name, uint64 offset);
double __cdecl nan(const char *_X);
float __cdecl nanf(const char *_X);
long double __cdecl nanl(const char *_X);
int __cdecl nbits(ea_t ea);
double __cdecl nearbyint(double _X);
float __cdecl nearbyintf(float _X);
long double __cdecl nearbyintl(long double _X);
void __cdecl netnode_altadjust(nodeidx_t num, nodeidx_t from, nodeidx_t to, nodeidx_t size, bool (__cdecl *should_skip)(nodeidx_t));
void __cdecl netnode_altadjust2(nodeidx_t num, nodeidx_t from, nodeidx_t to, nodeidx_t size, altadjust_visitor_t *av);
size_t __cdecl netnode_altshift(nodeidx_t num, nodeidx_t from, nodeidx_t to, nodeidx_t size, int tag);
nodeidx_t __cdecl netnode_altval(nodeidx_t num, nodeidx_t alt, int tag);
nodeidx_t __cdecl netnode_altval_idx8(nodeidx_t num, uchar alt, int tag);
size_t __cdecl netnode_blobsize(nodeidx_t num, nodeidx_t start, int tag);
size_t __cdecl netnode_charshift(nodeidx_t num, nodeidx_t from, nodeidx_t to, nodeidx_t size, int tag);
uchar __cdecl netnode_charval(nodeidx_t num, nodeidx_t alt, int tag);
uchar __cdecl netnode_charval_idx8(nodeidx_t num, uchar alt, int tag);
bool __cdecl netnode_check(netnode *, const char *name, size_t namlen, bool create);
size_t __cdecl netnode_copy(nodeidx_t num, nodeidx_t count, nodeidx_t target, bool move);
int __cdecl netnode_delblob(nodeidx_t num, nodeidx_t start, int tag);
bool __cdecl netnode_delvalue(nodeidx_t num);
bool __cdecl netnode_end(netnode *);
bool __cdecl netnode_exist(const netnode *n);
ssize_t __cdecl netnode_get_name(nodeidx_t num, qstring *out);
void *__cdecl netnode_getblob(nodeidx_t num, void *buf, size_t *bufsize, nodeidx_t start, int tag);
bool __cdecl netnode_hashdel(nodeidx_t num, const char *idx, int tag);
ssize_t __cdecl netnode_hashfirst(nodeidx_t num, char *buf, size_t bufsize, int tag);
ssize_t __cdecl netnode_hashlast(nodeidx_t num, char *buf, size_t bufsize, int tag);
ssize_t __cdecl netnode_hashnext(nodeidx_t num, const char *idx, char *buf, size_t bufsize, int tag);
ssize_t __cdecl netnode_hashprev(nodeidx_t num, const char *idx, char *buf, size_t bufsize, int tag);
bool __cdecl netnode_hashset(nodeidx_t num, const char *idx, const void *value, size_t length, int tag);
ssize_t __cdecl netnode_hashstr(nodeidx_t num, const char *idx, char *buf, size_t bufsize, int tag);
ssize_t __cdecl netnode_hashval(nodeidx_t num, const char *idx, void *buf, size_t bufsize, int tag);
nodeidx_t __cdecl netnode_hashval_long(nodeidx_t num, const char *idx, int tag);
bool netnode_inited(void);
bool netnode_is_available(void);
void __cdecl netnode_kill(netnode *);
nodeidx_t __cdecl netnode_lower_bound(nodeidx_t num, nodeidx_t cur, int tag);
nodeidx_t __cdecl netnode_lower_bound_idx8(nodeidx_t num, uchar alt, int tag);
bool __cdecl netnode_next(netnode *);
bool __cdecl netnode_prev(netnode *);
ssize_t __cdecl netnode_qgetblob(nodeidx_t num, bytevec_t *buf, size_t elsize, nodeidx_t start, int tag);
ssize_t __cdecl netnode_qhashfirst(nodeidx_t num, qstring *buf, int tag);
ssize_t __cdecl netnode_qhashlast(nodeidx_t num, qstring *buf, int tag);
ssize_t __cdecl netnode_qhashnext(nodeidx_t num, qstring *buf, const char *idx, int tag);
ssize_t __cdecl netnode_qhashprev(nodeidx_t num, qstring *buf, const char *idx, int tag);
ssize_t __cdecl netnode_qhashstr(nodeidx_t num, qstring *buf, const char *idx, int tag);
ssize_t __cdecl netnode_qsupstr(nodeidx_t num, qstring *buf, nodeidx_t alt, int tag);
ssize_t __cdecl netnode_qsupstr_idx8(nodeidx_t num, qstring *buf, uchar alt, int tag);
ssize_t __cdecl netnode_qvalstr(nodeidx_t num, qstring *buf);
bool __cdecl netnode_rename(nodeidx_t num, const char *newname, size_t namlen);
bool __cdecl netnode_set(nodeidx_t num, const void *value, size_t length);
bool __cdecl netnode_setblob(nodeidx_t num, const void *buf, size_t size, nodeidx_t start, int tag);
bool __cdecl netnode_start(netnode *);
bool __cdecl netnode_supdel(nodeidx_t num, nodeidx_t alt, int tag);
bool __cdecl netnode_supdel_all(nodeidx_t num, int tag);
bool __cdecl netnode_supdel_idx8(nodeidx_t num, uchar alt, int tag);
int __cdecl netnode_supdel_range(nodeidx_t num, nodeidx_t idx1, nodeidx_t idx2, int tag);
int __cdecl netnode_supdel_range_idx8(nodeidx_t num, nodeidx_t idx1, nodeidx_t idx2, int tag);
nodeidx_t __cdecl netnode_supfirst(nodeidx_t num, int tag);
nodeidx_t __cdecl netnode_supfirst_idx8(nodeidx_t num, int tag);
nodeidx_t __cdecl netnode_suplast(nodeidx_t num, int tag);
nodeidx_t __cdecl netnode_suplast_idx8(nodeidx_t num, int tag);
nodeidx_t __cdecl netnode_supnext(nodeidx_t num, nodeidx_t cur, int tag);
nodeidx_t __cdecl netnode_supnext_idx8(nodeidx_t num, uchar alt, int tag);
nodeidx_t __cdecl netnode_supprev(nodeidx_t num, nodeidx_t cur, int tag);
nodeidx_t __cdecl netnode_supprev_idx8(nodeidx_t num, uchar alt, int tag);
bool __cdecl netnode_supset(nodeidx_t num, nodeidx_t alt, const void *value, size_t length, int tag);
bool __cdecl netnode_supset_idx8(nodeidx_t num, uchar alt, const void *value, size_t length, int tag);
size_t __cdecl netnode_supshift(nodeidx_t num, nodeidx_t from, nodeidx_t to, nodeidx_t size, int tag);
ssize_t __cdecl netnode_supstr(nodeidx_t num, nodeidx_t alt, char *buf, size_t bufsize, int tag);
ssize_t __cdecl netnode_supstr_idx8(nodeidx_t num, uchar alt, char *buf, size_t bufsize, int tag);
ssize_t __cdecl netnode_supval(nodeidx_t num, nodeidx_t alt, void *buf, size_t bufsize, int tag);
ssize_t __cdecl netnode_supval_idx8(nodeidx_t num, uchar alt, void *buf, size_t bufsize, int tag);
ssize_t __cdecl netnode_valobj(nodeidx_t num, void *buf, size_t bufsize);
ssize_t __cdecl netnode_valstr(nodeidx_t num, char *buf, size_t bufsize);
til_t *__cdecl new_til(const char *name, const char *desc);
ea_t __cdecl next_addr(ea_t ea);
ea_t __cdecl next_chunk(ea_t ea);
ea_t __cdecl next_head(ea_t ea, ea_t maxea);
const char *__cdecl next_idcv_attr(const idc_value_t *obj, const char *attr);
ea_t __cdecl next_inited(ea_t ea, ea_t maxea);
ea_t __cdecl next_marked_insn(ea_t ea);
const char *__cdecl next_named_type(const til_t *ti, const char *name, int ntf_flags);
ea_t __cdecl next_not_tail(ea_t ea);
ea_t __cdecl next_that(ea_t ea, ea_t maxea, bool (__cdecl *testf)(flags_t, void *), void *ud);
ea_t __cdecl next_unknown(ea_t ea, ea_t maxea);
ea_t __cdecl next_visea(ea_t ea);
double __cdecl nextafter(double _X, double _Y);
float __cdecl nextafterf(float _X, float _Y);
long double __cdecl nextafterl(long double _X, long double _Y);
double __cdecl nexttoward(double _X, long double _Y);
float __cdecl nexttowardf(float _X, long double _Y);
long double __cdecl nexttowardl(long double _X, long double _Y);
ea_t __cdecl node2ea(nodeidx_t ndx);
node_iterator *__cdecl node_iterator_goup(node_iterator *);
void __noreturn nomem(const char *format, ...);
const std__nothrow_t nothrow;
void __cdecl notify_dirtree(dirtree_impl_t *d, bool added, inode_t inode);
int nowarn_qsnprintf(char *buf, size_t size, const char *format, ...);
flags_t num_flag(void);
size_t __cdecl numop2str(char *buf, size_t bufsize, ea_t ea, int n, uint64 x, int nbytes, int radix);
flags_t oct_flag(void);
flags_t off_flag(void);
_onexit_t __cdecl onexit(_onexit_t _Func);
bool __cdecl op_adds_xrefs(flags_t F, int n);
bool __cdecl op_bin(ea_t ea, int n);
bool __cdecl op_chr(ea_t ea, int n);
bool __cdecl op_custfmt(ea_t ea, int n, int fid);
bool __cdecl op_dec(ea_t ea, int n);
bool __cdecl op_enum(ea_t ea, int n, enum_t id, uchar serial);
bool __cdecl op_flt(ea_t ea, int n);
bool __cdecl op_hex(ea_t ea, int n);
bool __cdecl op_num(ea_t ea, int n);
bool __cdecl op_oct(ea_t ea, int n);
bool __cdecl op_offset(ea_t ea, int n, uint32 type_and_flags, ea_t target, ea_t base, adiff_t tdelta);
bool __cdecl op_offset_ex(ea_t ea, int n, const refinfo_t *ri);
bool __cdecl op_plain_offset(ea_t ea, int n, ea_t base);
bool __cdecl op_seg(ea_t ea, int n);
bool __cdecl op_stkvar(ea_t ea, int n);
bool __cdecl op_stroff(const insn_t *insn, int n, const tid_t *path, int path_len, adiff_t delta);
int open(const char *_FileName, int _OpenFlag, ...);
FILE *__cdecl openM(const char *file);
FILE *__cdecl openR(const char *file);
FILE *__cdecl openRT(const char *file);
TWidget *__cdecl open_bookmarks_window(TWidget *w);
TWidget *__cdecl open_bpts_window(ea_t ea);
TWidget *__cdecl open_calls_window(ea_t ea);
TWidget *__cdecl open_disasm_window(const char *window_title, const rangevec_t *ranges);
TWidget *__cdecl open_enums_window(tid_t const_id);
TWidget *__cdecl open_exports_window(ea_t ea);
TWidget *open_form(const char *form, uint32 flags, ...);
TWidget *__cdecl open_frame_window(func_t *pfn, uval_t offset);
TWidget *__cdecl open_funcs_window(ea_t ea);
TWidget *__cdecl open_hexdump_window(const char *window_title);
TWidget *__cdecl open_imports_window(ea_t ea);
linput_t *__cdecl open_linput(const char *file, bool remote);
TWidget *__cdecl open_loctypes_window(int ordinal);
TWidget *open_modules_window(void);
TWidget *__cdecl open_names_window(ea_t ea);
TWidget *__cdecl open_navband_window(ea_t ea, int zoom);
TWidget *open_notepad_window(void);
TWidget *__cdecl open_problems_window(ea_t ea);
TWidget *__cdecl open_segments_window(ea_t ea);
TWidget *__cdecl open_segregs_window(ea_t ea);
TWidget *open_selectors_window(void);
TWidget *open_signatures_window(void);
TWidget *open_stack_window(void);
TWidget *__cdecl open_strings_window(ea_t ea, ea_t selstart, ea_t selend);
TWidget *__cdecl open_structs_window(tid_t id, uval_t offset);
TWidget *open_threads_window(void);
TWidget *open_tils_window(void);
TWidget *open_trace_window(void);
void __cdecl open_url(const char *url);
TWidget *__cdecl open_xrefs_window(ea_t ea);
bool __cdecl optimize_argloc(argloc_t *vloc, int size, const rangeset_t *gaps);
bool __cdecl overlap(uval_t off1, asize_t s1, uval_t off2, asize_t s2);
flags_t oword_flag(void);
uchar *__cdecl pack_db(uchar *ptr, uchar *end, uchar x);
uchar *__cdecl pack_dd(uchar *ptr, uchar *end, uint32 x);
uchar *__cdecl pack_dq(uchar *ptr, uchar *end, uint64 x);
uchar *__cdecl pack_ds(uchar *ptr, uchar *end, const char *x, size_t len);
uchar *__cdecl pack_dw(uchar *ptr, uchar *end, uint16 x);
uchar *__cdecl pack_ea(uchar *ptr, uchar *end, ea_t ea);
error_t __cdecl pack_idcobj_to_bv(const idc_value_t *obj, const tinfo_t *tif, relobj_t *bytes, void *objoff, int pio_flags);
error_t __cdecl pack_idcobj_to_idb(const idc_value_t *obj, const tinfo_t *tif, ea_t ea, int pio_flags);
flags_t packreal_flag(void);
bool __cdecl parse_binpat_str(compiled_binpat_vec_t *out, ea_t ea, const char *in, int radix, int strlits_encoding, qstring *errbuf);
size_t __cdecl parse_command_line(qstrvec_t *args, channel_redirs_t *redirs, const char *cmdline, int flags);
bool __cdecl parse_config_value(idc_value_t *out, lexer_t *lx, const token_t *value);
bool __cdecl parse_dbgopts(instant_dbgopts_t *ido, const char *r_switch);
bool __cdecl parse_decl(tinfo_t *tif, qstring *out, til_t *til, const char *decl, int flags);
int __cdecl parse_decls(til_t *til, const char *input, printer_t *printer, int hti_flags);
error_t __cdecl parse_json(jvalue_t *out, lexer_t *lx, tokenstack_t *ungot_tokens);
error_t __cdecl parse_json_string(jvalue_t *out, const char *s);
bool __cdecl parse_reg_name(reg_info_t *ri, const char *regname);
bool __cdecl patch_byte(ea_t ea, uint64 x);
void __cdecl patch_bytes(ea_t ea, const void *buf, size_t size);
bool __cdecl patch_dword(ea_t ea, uint64 x);
bool __cdecl patch_fixup_value(ea_t ea, const fixup_data_t *fd);
bool __cdecl patch_qword(ea_t ea, uint64 x);
bool __cdecl patch_word(ea_t ea, uint64 x);
ea_t __cdecl peek_auto_queue(ea_t low_ea, atype_t type);
void __cdecl perror(const char *_ErrorMessage);
processor_t ph;
bool __cdecl place_t__deserialize(place_t *_this, const uchar **pptr, const uchar *end);
void __cdecl place_t__serialize(const place_t *_this, bytevec_t *out);
int __cdecl plan_and_wait(ea_t ea1, ea_t ea2, bool final_pass);
void __cdecl plan_ea(ea_t ea);
void __cdecl plan_range(ea_t sEA, ea_t eEA);
int __cdecl plan_to_apply_idasgn(const char *fname);
double __cdecl pow(double _X, double _Y);
float __cdecl powf(float _X, float _Y);
long double __cdecl powl(long double _X, long double _Y);
ea_t __cdecl prev_addr(ea_t ea);
ea_t __cdecl prev_chunk(ea_t ea);
ea_t __cdecl prev_head(ea_t ea, ea_t minea);
const char *__cdecl prev_idcv_attr(const idc_value_t *obj, const char *attr);
ea_t __cdecl prev_inited(ea_t ea, ea_t minea);
ea_t __cdecl prev_not_tail(ea_t ea);
ea_t __cdecl prev_that(ea_t ea, ea_t minea, bool (__cdecl *testf)(flags_t, void *), void *ud);
ea_t __cdecl prev_unknown(ea_t ea, ea_t minea);
bool __cdecl prev_utf8_char(wchar32_t *out_cp, const char **p, const char *begin);
ea_t __cdecl prev_visea(ea_t ea);
size_t __cdecl print_argloc(char *buf, size_t bufsize, const argloc_t *vloc, int size, int vflags);
int __cdecl print_cdata(text_sink_t *printer, const idc_value_t *idc_value, const tinfo_t *tif, const format_data_info_t *fdi);
bool __cdecl print_charlit(char *buf, const void *ptr, int size);
int __cdecl print_decls(text_sink_t *printer, til_t *til, const ordvec_t *ordinals, uint32 flags);
bool __cdecl print_fpval(char *buf, size_t bufsize, const void *v, int size);
bool __cdecl print_idcv(qstring *out, const idc_value_t *v, const char *name, int indent);
bool __cdecl print_insn_mnem(qstring *out, ea_t ea);
bool __cdecl print_operand(qstring *out, ea_t ea, int n, int getn_flags, printop_t *newtype);
bool __cdecl print_strlit_type(qstring *out, int32 strtype, qstring *out_tooltip, int flags);
bool __cdecl print_tinfo(qstring *result, const char *prefix, int indent, int cmtindent, int flags, const tinfo_t *tif, const char *name, const char *cmt);
bool __cdecl print_type(qstring *out, ea_t ea, int prtype_flags);
int printf(const char *const _Format, ...);
int printf_s(const char *const _Format, ...);
int __cdecl process_archive(qstring *temp_file, linput_t *li, qstring *module_name, ushort *neflags, const char *defmember, const load_info_t *loader, qstring *errbuf);
bool __cdecl process_ui_action(const char *name, int flags, void *param);
int __cdecl process_zip_linput(linput_t *li, int (__cdecl *callback)(void *, int64, int, uint64, uint64, uint32, const char *), void *ud);
int __cdecl process_zipfile(const char *zipfile, int (__cdecl *callback)(void *, int64, int, uint64, uint64, uint32, const char *), void *ud);
int __cdecl process_zipfile_entry(const char *zipfile, const char *entry, int (__cdecl *callback)(void *, int64, int, uint64, uint64, uint32, const char *), void *ud, bool case_sensitive);
bool __cdecl put_byte(ea_t ea, uint64 x);
void __cdecl put_bytes(ea_t ea, const void *buf, size_t size);
bool __cdecl put_dbg_byte(ea_t ea, uint32 x);
void __cdecl put_dword(ea_t ea, uint64 x);
void __cdecl put_qword(ea_t ea, uint64 x);
ssize_t __cdecl put_utf8_char(char *out, wchar32_t cp);
void __cdecl put_word(ea_t ea, uint64 x);
int __cdecl putc(int _Character, FILE *_Stream);
int __cdecl putchar(int _Character);
int __cdecl putenv(const char *_EnvString);
int __cdecl puts(const char *_Buffer);
int __cdecl putw(int _Ch, FILE *_Stream);
wint_t __cdecl putwc(__int16 _Character, FILE *_Stream);
wint_t __cdecl putwchar(__int16 _Character);
int __cdecl qaccess(const char *fname, int mode);
void *__cdecl qalloc(size_t size);
void *__cdecl qalloc_or_throw(size_t size);
void __cdecl qatexit(void (*func)(void));
int64 __cdecl qatoll(const char *nptr);
char *__cdecl qbasename(char *path);
void *__cdecl qcalloc(size_t nitems, size_t itemsize);
int __cdecl qchdir(const char *path);
int __cdecl qchsize(int h, uint64 fsize);
ssize_t __cdecl qcleanline(qstring *buf, char cmt_char, uint32 flags);
int __cdecl qclose(int h);
void qcontrol_tty(void);
int __cdecl qcopyfile(const char *from, const char *to, bool overwrite, bool (__cdecl *cb)(uint64, uint64, void *), void *ud, int flags);
int __cdecl qcreate(const char *file, int stat);
bool __cdecl qctime(char *buf, size_t bufsize, qtime32_t t);
bool __cdecl qctime_utc(char *buf, size_t bufsize, qtime32_t t);
void qdetach_tty(void);
bool __cdecl qdirname(char *buf, size_t bufsize, const char *path);
int __cdecl qdup(int h);
int qeprintf(const char *format, ...);
int __cdecl qerrcode(int new_code);
const char *__cdecl qerrstr(int code);
void __cdecl __noreturn qexit(int code);
int __cdecl qfclose(FILE *fp);
int __cdecl qfgetc(FILE *fp);
char *__cdecl qfgets(char *s, size_t len, FILE *fp);
bool __cdecl qfileexist(const char *file);
uint64 __cdecl qfilelength(int h);
uint64 __cdecl qfilesize(const char *fname);
void __cdecl qfindclose(qffblk64_t *blk);
int __cdecl qfindfirst(const char *pattern, qffblk64_t *blk, int attr);
int __cdecl qfindnext(qffblk64_t *blk);
int __cdecl qflush(FILE *fp);
FILE *__cdecl qfopen(const char *file, const char *mode);
int qfprintf(FILE *fp, const char *format, ...);
int __cdecl qfputc(int chr, FILE *fp);
int __cdecl qfputs(const char *s, FILE *fp);
ssize_t __cdecl qfread(FILE *fp, void *buf, size_t n);
void __cdecl qfree(void *alloc);
int qfscanf(FILE *fp, const char *format, ...);
int __cdecl qfseek(FILE *fp, int64 offset, int whence);
uint64 __cdecl qfsize(FILE *fp);
int __cdecl qfstat(int fd, qstatbuf *buf);
int __cdecl qfsync(int h);
int64 __cdecl qftell(FILE *fp);
ssize_t __cdecl qfwrite(FILE *fp, const void *buf, size_t n);
void __cdecl qgetcwd(char *buf, size_t bufsize);
bool __cdecl qgetenv(const char *varname, qstring *buf);
ssize_t __cdecl qgetline(qstring *buf, FILE *fp);
char *__cdecl qgets(char *line, size_t linesize);
bool __cdecl qgmtime(tm *_tm, qtime32_t t);
bool __cdecl qgmtime64(tm *_tm, qtime64_t t);
bool __cdecl qisabspath(const char *file);
bool __cdecl qisalnum(char c);
bool __cdecl qisalpha(char c);
bool __cdecl qisascii(char c);
bool __cdecl qisdigit(char c);
bool __cdecl qisdir(const char *file);
bool __cdecl qislower(char c);
bool __cdecl qisprint(char c);
bool __cdecl qispunct(char c);
bool __cdecl qisspace(char c);
bool __cdecl qisupper(char c);
bool __cdecl qisxdigit(char c);
FILE *__cdecl qlfile(linput_t *li);
int __cdecl qlgetc(linput_t *li);
char *__cdecl qlgets(char *s, size_t len, linput_t *li);
char *__cdecl qlgetz(linput_t *li, int64 fpos, char *buf, size_t bufsize);
bool __cdecl qlocaltime(tm *_tm, qtime32_t t);
bool __cdecl qlocaltime64(tm *_tm, qtime64_t t);
ssize_t __cdecl qlread(linput_t *li, void *buf, size_t size);
int64 __cdecl qlseek(linput_t *li, int64 pos, int whence);
int64 __cdecl qlsize(linput_t *li);
int64 __cdecl qltell(linput_t *li);
char *__cdecl qmake_full_path(char *dst, size_t dstsize, const char *src);
char *__cdecl qmakefile(char *buf, size_t bufsize, const char *base, const char *ext);
char *qmakepath(char *buf, size_t bufsize, const char *s1, ...);
int __cdecl qmkdir(const char *file, int mode);
int __cdecl qmove(const char *oldfname, const char *newfname, uint32 flags);
qmutex_t qmutex_create(void);
bool __cdecl qmutex_free(qmutex_t m);
bool __cdecl qmutex_lock(qmutex_t m);
bool __cdecl qmutex_unlock(qmutex_t m);
int __cdecl qopen(const char *file, int mode);
int __cdecl qopen_shared(const char *file, int mode, int share_mode);
void qperror(const char *format, ...);
int __cdecl qpipe_close(qhandle_t handle);
int __cdecl qpipe_create(qhandle_t handles[2]);
ssize_t __cdecl qpipe_read(qhandle_t handle, void *buf, size_t size);
ssize_t __cdecl qpipe_write(qhandle_t handle, const void *buf, size_t size);
int qprintf(const char *format, ...);
int __cdecl qread(int h, void *buf, size_t n);
void *__cdecl qrealloc(void *alloc, size_t newsize);
void *__cdecl qrealloc_or_throw(void *ptr, size_t size);
int __cdecl qregcomp(regex_t *preg, const char *pattern, int cflags);
size_t __cdecl qregerror(int errcode, const regex_t *preg, char *errbuf, size_t errbuf_size);
int __cdecl qregexec(const regex_t *preg, const char *str, size_t nmatch, regmatch_t pmatch[], int eflags);
void __cdecl qregfree(regex_t *preg);
int __cdecl qrename(const char *oldfname, const char *newfname);
int __cdecl qrmdir(const char *file);
int64 __cdecl qseek(int h, int64 offset, int whence);
qsemaphore_t __cdecl qsem_create(const char *name, int init_count);
bool __cdecl qsem_free(qsemaphore_t sem);
bool __cdecl qsem_post(qsemaphore_t sem);
bool __cdecl qsem_wait(qsemaphore_t sem, int timeout_ms);
bool __cdecl qsetenv(const char *varname, const char *value);
void __cdecl qsleep(int milliseconds);
int qsnprintf(char *buffer, size_t n, const char *format, ...);
void __cdecl qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction);
void __cdecl qsort_s(void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context);
char *__cdecl qsplitfile(char *file, char **base, char **ext);
int qsscanf(const char *input, const char *format, ...);
int __cdecl qstat(const char *path, qstatbuf *buf);
char *__cdecl qstpncpy(char *dst, const char *src, size_t dstsize);
void __cdecl qstr2user(qstring *dst, const qstring *src);
wchar16_t *__cdecl qstrchr(wchar16_t *s1, wchar16_t c);
int __cdecl qstrcmp(const wchar16_t *s1, const wchar16_t *s2);
char *__cdecl qstrdup(const char *string);
const char *__cdecl qstrerror(error_t _qerrno);
size_t __cdecl qstrftime(char *buf, size_t bufsize, const char *format, qtime32_t t);
size_t __cdecl qstrftime64(char *buf, size_t bufsize, const char *format, qtime64_t t);
size_t __cdecl qstrlen(const wchar16_t *s);
char *__cdecl qstrlwr(char *str);
char *__cdecl qstrncat(char *dst, const char *src, size_t dstsize);
char *__cdecl qstrncpy(char *dst, const char *src, size_t dstsize);
wchar16_t *__cdecl qstrrchr(wchar16_t *s1, wchar16_t c);
const uchar *__cdecl qstrstr(const uchar *s1, const uchar *s2);
char *__cdecl qstrtok(char *s, const char *delim, char **save_ptr);
char *__cdecl qstrupr(char *str);
int64 __cdecl qtell(int h);
qthread_t __cdecl qthread_create(int (__cdecl *thread_cb)(void *), void *ud);
bool __cdecl qthread_equal(qthread_t q1, qthread_t q2);
void __cdecl qthread_free(qthread_t q);
bool __cdecl qthread_join(qthread_t q);
bool __cdecl qthread_kill(qthread_t q);
bool __cdecl qthread_same(qthread_t q);
qthread_t qthread_self(void);
qtime64_t qtime64(void);
qtime32_t __cdecl qtimegm(const tm *ptm);
FILE *qtmpfile(void);
char *__cdecl qtmpnam(char *buf, size_t bufsize);
int __cdecl qtolower(char c);
int __cdecl qtoupper(char c);
void __cdecl __noreturn quick_exit(int _Code);
int __cdecl qunlink(const char *fname);
bool __cdecl quote_cmdline_arg(qstring *arg);
size_t __cdecl qustrlen(const char *utf8);
bool __cdecl qustrncpy(char *dst, const char *utf8, size_t dstsize);
void *__cdecl qvector_reserve(void *vec, void *old, size_t cnt, size_t elsize);
int __cdecl qveprintf(const char *format, va_list va);
int __cdecl qvfprintf(FILE *fp, const char *format, va_list va);
int __cdecl qvfscanf(FILE *fp, const char *format, va_list va);
int __cdecl qvprintf(const char *format, va_list va);
int __cdecl qvsnprintf(char *buffer, size_t n, const char *format, va_list va);
int __cdecl qvsscanf(const char *input, const char *format, va_list va);
int __cdecl qwait_for_handles(int *idx, const qhandle_t *handles, int n, uint32 write_bitmask, int timeout_ms);
int __cdecl qwait_timed(int *status, int child, int flags, int timeout_ms);
flags_t qword_flag(void);
int __cdecl qwrite(int h, const void *buf, size_t n);
int __cdecl r50_to_asc(char *p, const ushort *r, int k);
int rand(void);
void (__cdecl *range_marker)(ea_t, asize_t);
size_t __cdecl range_t_print(const range_t *, char *buf, size_t bufsize);
bool __cdecl rangeset_t_add(rangeset_t *, const range_t *range);
bool __cdecl rangeset_t_add2(rangeset_t *, const rangeset_t *aset);
bool __cdecl rangeset_t_contains(const rangeset_t *, const rangeset_t *aset);
const range_t *__cdecl rangeset_t_find_range(const rangeset_t *, ea_t ea);
bool __cdecl rangeset_t_has_common(const rangeset_t *, const range_t *range, bool strict);
bool __cdecl rangeset_t_has_common2(const rangeset_t *, const rangeset_t *aset);
bool __cdecl rangeset_t_intersect(rangeset_t *, const rangeset_t *aset);
qvector_range_t___const_iterator __cdecl rangeset_t_lower_bound(const rangeset_t *, ea_t ea);
ea_t __cdecl rangeset_t_next_addr(const rangeset_t *, ea_t ea);
ea_t __cdecl rangeset_t_next_range(const rangeset_t *, ea_t ea);
ea_t __cdecl rangeset_t_prev_addr(const rangeset_t *, ea_t ea);
ea_t __cdecl rangeset_t_prev_range(const rangeset_t *, ea_t ea);
size_t __cdecl rangeset_t_print(const rangeset_t *, char *buf, size_t bufsize);
bool __cdecl rangeset_t_sub(rangeset_t *, const range_t *range);
bool __cdecl rangeset_t_sub2(rangeset_t *, const rangeset_t *aset);
void __cdecl rangeset_t_swap(rangeset_t *, rangeset_t *r);
qvector_range_t___const_iterator __cdecl rangeset_t_upper_bound(const rangeset_t *, ea_t ea);
int __cdecl read(int _FileHandle, void *_DstBuf, unsigned int _MaxCharCount);
int __cdecl read2bytes(int h, uint16 *res, bool mf);
bool __cdecl read_config(const char *input, bool is_file, const cfgopt_t opts[], size_t nopts, const char *(__cdecl *defhdlr)(lexer_t *, const token_t *, const token_t *), const char *const *defines, size_t ndefines);
bool __cdecl read_config2(const char *input, bool is_file, const cfgopt_t opts[], size_t nopts, const char *(__cdecl *defhdlr)(lexer_t *, const token_t *, const token_t *), const char *const *defines, size_t ndefines, void *obj);
bool __cdecl read_config_file(const char *filename, const cfgopt_t opts[], size_t nopts, const char *(__cdecl *defhdlr)(lexer_t *, const token_t *, const token_t *), const char *const *defines, size_t ndefines);
bool __cdecl read_config_file2(const char *filename, const cfgopt_t opts[], size_t nopts, const char *(__cdecl *defhdlr)(lexer_t *, const token_t *, const token_t *), const char *const *defines, size_t ndefines, void *obj);
bool __cdecl read_config_string(const char *string, const cfgopt_t opts[], size_t nopts, const char *(__cdecl *defhdlr)(lexer_t *, const token_t *, const token_t *), const char *const *defines, size_t ndefines);
ssize_t __cdecl read_dbg_memory(ea_t ea, void *buffer, size_t size);
ssize_t __cdecl read_ioports(ioports_t *ports, qstring *device, const char *file, const char *(__cdecl *callback)(const ioports_t *, const char *));
ssize_t __cdecl read_ioports2(ioports_t *ports, qstring *device, const char *file, ioports_fallback_t *callback);
bool __cdecl read_range_selection(TWidget *v, ea_t *ea1, ea_t *ea2);
void __cdecl read_regargs(func_t *pfn);
bool __cdecl read_selection(TWidget *v, twinpos_t *p1, twinpos_t *p2);
int __cdecl read_struc_path(tid_t *path, adiff_t *delta, ea_t ea, int idx);
uint64 __cdecl read_tinfo_bitfield_value(uint32 typid, uint64 v, int bitoff);
int __cdecl readbytes(int h, uint32 *res, int size, bool mf);
fpvalue_error_t __cdecl realcvt(void *m, fpvalue_t *out, uint16 swt);
void *__cdecl realloc(void *_Block, size_t _Size);
void __cdecl realtoasc(char *buf, size_t bufsize, const fpvalue_t *x, uint mode);
void __cdecl reanalyze_callers(ea_t ea, bool noret);
void __cdecl reanalyze_function(func_t *pfn, ea_t ea1, ea_t ea2, bool analyze_parents);
bool __cdecl reanalyze_noret_flag(ea_t ea);
int __cdecl rebase_program(adiff_t delta, int flags);
void rebuild_nlist(void);
bool __cdecl recalc_spd(ea_t cur_ea);
bool __cdecl refresh_chooser(const char *title);
void __cdecl refresh_custom_viewer(TWidget *custom_viewer);
void refresh_idaview(void);
void refresh_idaview_anyway(void);
void __cdecl refresh_navband(bool force);
void __cdecl refresh_viewer(graph_viewer_t *gv);
bool __cdecl reg_bin_op(const char *name, bool save, void *data, size_t datalen, const char *subkey, int mode);
bool __cdecl reg_data_type(regval_type_t *out, const char *name, const char *subkey);
bool __cdecl reg_delete(const char *name, const char *subkey);
bool __cdecl reg_delete_subkey(const char *name);
bool __cdecl reg_delete_tree(const char *name);
bool __cdecl reg_exists(const char *name, const char *subkey);
void reg_flush(void);
void reg_history_size_truncate(void);
int __cdecl reg_int_op(const char *name, bool save, int value, const char *subkey);
void reg_load(void);
bool __cdecl reg_read_binary(const char *name, bytevec_t *data, const char *subkey);
bool __cdecl reg_read_binary_part(const char *name, void *data, size_t datalen, const char *subkey);
bool __cdecl reg_read_bool(const char *name, bool defval, const char *subkey);
int __cdecl reg_read_int(const char *name, int defval, const char *subkey);
bool __cdecl reg_read_string(qstring *utf8, const char *name, const char *subkey);
void __cdecl reg_read_strlist(qstrvec_t *list, const char *subkey);
bool __cdecl reg_str_get(qstring *buf, const char *name, const char *subkey);
void __cdecl reg_str_set(const char *name, const char *subkey, const char *buf);
bool __cdecl reg_subkey_children(qstrvec_t *out, const char *name, bool subkeys);
bool __cdecl reg_subkey_exists(const char *name);
bool __cdecl reg_subkey_subkeys(qstrvec_t *out, const char *name);
bool __cdecl reg_subkey_values(qstrvec_t *out, const char *name);
void __cdecl reg_update_filestrlist(const char *subkey, const char *add, size_t maxrecs, const char *rem);
void __cdecl reg_update_history(const char *addfile, const char *removefile);
void __cdecl reg_update_strlist(const char *subkey, const char *add, size_t maxrecs, const char *rem, bool ignorecase);
void __cdecl reg_write_binary(const char *name, const void *data, size_t datalen, const char *subkey);
void __cdecl reg_write_bool(const char *name, int value, const char *subkey);
void __cdecl reg_write_int(const char *name, int value, const char *subkey);
void __cdecl reg_write_string(const char *name, const char *utf8, const char *subkey);
int __cdecl regcomp(regex_t *preg, const char *pattern, int cflags);
size_t __cdecl regerror(int errcode, const regex_t *preg, char *errbuf, size_t errbuf_size);
int __cdecl regex_match(const char *str, const char *pattern, bool sense_case);
int __cdecl regexec(const regex_t *preg, const char *str, size_t nmatch, regmatch_t pmatch[], int eflags);
void __cdecl regfree(regex_t *preg);
void __cdecl regget_history(qstrvec_t *list);
bool __cdecl register_action(const action_desc_t *desc);
int __cdecl register_addon(const addon_info_t *info);
bool __cdecl register_and_attach_to_menu(const char *menupath, const char *name, const char *label, const char *shortcut, int flags, action_handler_t *handler, void *owner, int action_desc_t_flags);
int __cdecl register_custom_data_format(const data_format_t *dtform);
int __cdecl register_custom_data_type(const data_type_t *dtinfo);
fixup_type_t __cdecl register_custom_fixup(const fixup_handler_t *cfh);
int __cdecl register_custom_refinfo(const custom_refinfo_handler_t *crh);
void __cdecl register_loc_converter2(const char *p1, const char *p2, lecvt_code_t (__cdecl *cvt)(lochist_entry_t *, const lochist_entry_t *, TWidget *, uint32));
int __cdecl register_place_class(const place_t *tmplate, int flags, const plugin_t *owner);
bool __cdecl register_post_event_visitor(hook_type_t hook_type, post_event_visitor_t *visitor, const plugmod_t *owner);
bool __cdecl register_srcinfo_provider(srcinfo_provider_t *sp);
qtimer_t __cdecl register_timer(int interval_ms, int (__cdecl *callback)(void *), void *ud);
bool __cdecl reload_file(const char *file, bool is_remote);
void __cdecl reloc_value(void *value, int size, adiff_t delta, bool mf);
bool __cdecl relocate_relobj(relobj_t *_relobj, ea_t ea, bool mf);
double __cdecl remainder(double _X, double _Y);
float __cdecl remainderf(float _X, float _Y);
long double __cdecl remainderl(long double _X, long double _Y);
void __cdecl remember_problem(problist_id_t type, ea_t ea, const char *msg);
int __cdecl remove(const char *_FileName);
bool __cdecl remove_abi_opts(const char *abi_opts, bool user_level);
void __cdecl remove_command_interpreter(const cli_t *cp);
bool __cdecl remove_custom_argloc(int idx);
void __cdecl remove_event_listener(event_listener_t *cb);
bool __cdecl remove_extlang(extlang_t *el);
bool __cdecl remove_func_tail(func_t *pfn, ea_t tail_ea);
tinfo_t __cdecl remove_pointer(const tinfo_t *tif);
bool __cdecl remove_tinfo_pointer(tinfo_t *tif, const char **pname, const til_t *til);
double __cdecl remquo(double _X, double _Y, int *_Z);
float __cdecl remquof(float _X, float _Y, int *_Z);
long double __cdecl remquol(long double _X, long double _Y, int *_Z);
int __cdecl rename(const char *_OldFilename, const char *_NewFilename);
bool __cdecl rename_bptgrp(const char *old_name, const char *new_name);
bool __cdecl rename_encoding(int idx, const char *encname);
bool __cdecl rename_entry(uval_t ord, const char *name, int flags);
int __cdecl rename_regvar(func_t *pfn, regvar_t *v, const char *user);
void reorder_dummy_names(void);
void __cdecl repaint_custom_viewer(TWidget *custom_viewer);
int __cdecl replace_ordinal_typerefs(til_t *til, tinfo_t *tif);
bool __cdecl replace_tabs(qstring *out, const char *str, int tabsize);
void replace_wait_box(const char *format, ...);
bool __cdecl request_add_bpt(const bpt_t *bpt);
int __cdecl request_attach_process(pid_t pid, int event_id);
void request_clear_trace(void);
bool request_continue_process(void);
bool __cdecl request_del_bpt(const bpt_location_t *bptloc);
bool request_detach_process(void);
bool request_disable_bblk_trace(void);
bool __cdecl request_disable_bpt(const bpt_location_t *bptloc);
bool request_disable_func_trace(void);
bool request_disable_insn_trace(void);
bool request_disable_step_trace(void);
bool __cdecl request_enable_bblk_trace(bool enable);
bool __cdecl request_enable_bpt(const bpt_location_t *bptloc, bool enable);
bool __cdecl request_enable_func_trace(bool enable);
bool __cdecl request_enable_insn_trace(bool enable);
bool __cdecl request_enable_step_trace(int enable);
bool request_exit_process(void);
void __cdecl request_refresh(uint64 mask, bool cnd);
int __cdecl request_resume_thread(thid_t tid);
bool __cdecl request_run_to(ea_t ea, pid_t pid, thid_t tid);
bool __cdecl request_select_thread(thid_t tid);
void __cdecl request_set_bblk_trace_options(int options);
void __cdecl request_set_func_trace_options(int options);
void __cdecl request_set_insn_trace_options(int options);
bool __cdecl request_set_reg_val(const char *regname, const regval_t *regval);
bool __cdecl request_set_resume_mode(thid_t tid, resume_mode_t mode);
void __cdecl request_set_step_trace_options(int options);
int __cdecl request_start_process(const char *path, const char *args, const char *sdir);
bool request_step_into(void);
bool request_step_over(void);
bool request_step_until_ret(void);
bool request_suspend_process(void);
int __cdecl request_suspend_thread(thid_t tid);
bool __cdecl requires_color_esc(char c);
void __cdecl reset_dirtree(dirtree_impl_t *d);
const type_t *__cdecl resolve_typedef(const til_t *til, const type_t *type);
bool __cdecl restore_database_snapshot(const snapshot_t *ss, void (__cdecl *cb)(const char *, void *), void *ud);
int __cdecl resume_thread(thid_t tid);
void __cdecl rethrow_exception(std__exception_ptr _Ptr);
const custloc_desc_t *__cdecl retrieve_custom_argloc(int idx);
excvec_t *retrieve_exceptions(void);
uint32 retrieve_input_file_crc32(void);
bool __cdecl retrieve_input_file_md5(uchar hash[16]);
bool __cdecl retrieve_input_file_sha256(uchar hash[32]);
size_t retrieve_input_file_size(void);
opinfo_t *__cdecl retrieve_member_info(opinfo_t *buf, const member_t *mptr);
bool __cdecl revert_byte(ea_t ea);
void __cdecl revert_ida_decisions(ea_t ea1, ea_t ea2);
void __cdecl rewind(FILE *_Stream);
double __cdecl rint(double _X);
float __cdecl rintf(float _X);
long double __cdecl rintl(long double _X);
int __cdecl rmdir(const char *_Path);
int rmtmp(void);
netnode root_node;
uval_t __cdecl rotate_left(uval_t x, int count, size_t bits, size_t offset);
double __cdecl round(double _X);
uint32 __cdecl round_down_power2(uint32 x);
uint32 __cdecl round_up_power2(uint32 x);
float __cdecl roundf(float _X);
long double __cdecl roundl(long double _X);
bool __cdecl run_plugin(const plugin_t *ptr, size_t arg);
bool run_requests(void);
bool __cdecl run_to(ea_t ea, pid_t pid, thid_t tid);
bool __cdecl same_value_jpt(jump_pattern_t *_this, const op_t *op, int r_i);
bool __cdecl sanitize_file_name(char *name, size_t namesize);
bool __cdecl save_database(const char *outfile, uint32 flags, const snapshot_t *root, const snapshot_t *attr);
bool __cdecl save_dirtree(dirtree_impl_t *d);
void save_signatures(void);
void __cdecl save_struc(struc_t *sptr, bool may_update_ltypes);
void save_structs(void);
tinfo_code_t __cdecl save_tinfo(tinfo_t *tif, til_t *til, size_t ord, const char *name, int ntf_flags);
bool __cdecl save_trace_file(const char *filename, const char *description);
double __cdecl scalbln(double _X, __int32 _Y);
float __cdecl scalblnf(float _X, __int32 _Y);
long double __cdecl scalblnl(long double _X, __int32 _Y);
double __cdecl scalbn(double _X, int _Y);
float __cdecl scalbnf(float _X, int _Y);
long double __cdecl scalbnl(long double _X, int _Y);
int scanf(const char *const _Format, ...);
int scanf_s(const char *const _Format, ...);
uint32 __cdecl score_tinfo(const tinfo_t *tif);
int __cdecl search(void *ud, place_t *start, const place_t *end, int *startx, const char *str, int sflag);
bool __cdecl search_down(int sflag);
bool __cdecl search_path(char *buf, size_t bufsize, const char *file, bool search_cwd);
flags_t seg_flag(void);
adiff_t __cdecl segm_adjust_diff(const segment_t *s, adiff_t delta);
ea_t __cdecl segm_adjust_ea(const segment_t *s, ea_t ea);
uchar __cdecl segtype(ea_t ea);
ea_t __cdecl sel2ea(sel_t selector);
ea_t __cdecl sel2para(sel_t selector);
bool __cdecl select_extlang(extlang_t *el);
bool __cdecl select_thread(thid_t tid);
void __cdecl serialize_dynamic_register_set(bytevec_t *buf, dynamic_register_set_t *idaregs);
bool __cdecl serialize_json(qstring *out, const jobj_t *o, uint32 flags);
bool __cdecl serialize_tinfo(qtype *type, qtype *fields, qtype *fldcmts, const tinfo_t *tif, int sudt_flags);
void __cdecl set__bnot0(ea_t ea);
void __cdecl set__bnot1(ea_t ea);
void __cdecl set__invsign0(ea_t ea);
void __cdecl set__invsign1(ea_t ea);
bool __cdecl set_abi_name(const char *abiname, bool user_level);
void __cdecl set_abits(ea_t ea, aflags_t bits);
void __cdecl set_absbase(ea_t ea, ea_t x);
void __cdecl set_aflags(ea_t ea, aflags_t flags);
void __cdecl set_align_flow(ea_t ea);
void __cdecl set_alignment(ea_t ea, uint32 x);
void __cdecl set_all_bits(uchar *bitmap, size_t nbits);
bool __cdecl set_archive_path(const char *file);
void __cdecl set_array_parameters(ea_t ea, const array_parameters_t *in);
bool __cdecl set_asm_inc_file(const char *file);
atype_t __cdecl set_auto_state(atype_t new_state);
void __cdecl set_bblk_trace_options(int options);
void __cdecl set_bit(uchar *bitmap, size_t bit);
void __cdecl set_bits(uchar *bitmap, size_t low, size_t high);
bool __cdecl set_bmask_cmt(enum_t id, bmask_t bmask, const char *cmt, bool repeatable);
bool __cdecl set_bmask_name(enum_t id, bmask_t bmask, const char *name);
bool __cdecl set_bpt_group(bpt_t *bpt, const char *grp_name);
bool __cdecl set_bptloc_group(const bpt_location_t *bptloc, const char *grp_name);
int __cdecl set_bptloc_string(const char *s);
void __cdecl set_c_header_path(const char *incdir);
void __cdecl set_c_macros(const char *macros);
void set_cancelled(void);
bool __cdecl set_cmt(ea_t ea, const char *comm, bool rptble);
void *__cdecl set_code_viewer_handler(TWidget *code_viewer, custom_viewer_handler_id_t handler_id, void *handler_or_data);
bool __cdecl set_code_viewer_is_source(TWidget *code_viewer);
void __cdecl set_code_viewer_line_handlers(TWidget *code_viewer, void (__cdecl *click_handler)(TWidget *, const place_t *, int, int, void *), void (__cdecl *popup_handler)(TWidget *, const place_t *, int, int, void *), void (__cdecl *dblclick_handler)(TWidget *, const place_t *, int, int, void *), int (__cdecl *drawicon_handler)(TWidget *, const place_t *, int *, void *), bool (__cdecl *linenum_handler)(TWidget *, const place_t *, uval_t *, void *));
bool __cdecl set_code_viewer_lines_alignment(TWidget *code_viewer, int align);
bool __cdecl set_code_viewer_lines_icon_margin(TWidget *code_viewer, int margin);
bool __cdecl set_code_viewer_lines_radix(TWidget *code_viewer, int radix);
bool __cdecl set_code_viewer_user_data(TWidget *code_viewer, void *ud);
void __cdecl set_colored_item(ea_t ea);
bool __cdecl set_compiler(const compiler_info_t *cc, int flags, const char *abiname);
bool __cdecl set_compiler_id(comp_t id, const char *abiname);
bool __cdecl set_compiler_string(const char *compstr, bool user_level);
void __cdecl set_cp_validity(ucdr_kind_t kind, wchar32_t cp, wchar32_t endcp, bool valid);
void __cdecl set_custom_data_type_ids(ea_t ea, const custom_data_type_ids_t *cdis);
void *__cdecl set_custom_viewer_handler(TWidget *custom_viewer, custom_viewer_handler_id_t handler_id, void *handler_or_data);
void __cdecl set_custom_viewer_handlers(TWidget *custom_viewer, const custom_viewer_handlers_t *cvh, void *cvh_ud);
bool __cdecl set_custom_viewer_qt_aware(TWidget *custom_viewer);
void __cdecl set_custom_viewer_range(TWidget *custom_viewer, const place_t *minplace, const place_t *maxplace);
void __cdecl set_data_guessed_by_hexrays(ea_t ea);
void __cdecl set_database_flag(uint32 dbfl, bool cnd);
const char *__cdecl set_dbg_default_options(const char *keyword, int value_type, const void *value);
const char *__cdecl set_dbg_options(const char *keyword, int pri, int value_type, const void *value);
void __cdecl set_dbgmem_source(range_t *(__cdecl *dbg_get_memory_config)(int *), int (__cdecl *memory_read)(ea_t, void *, int), int (__cdecl *memory_write)(ea_t, const void *, int));
void __cdecl set_debug_event_code(debug_event_t *ev, event_id_t id);
bool __cdecl set_debug_name(ea_t ea, const char *name);
int __cdecl set_debug_names(const ea_t *addrs, const char *const *names, int qty);
void __cdecl set_debugger_event_cond(const char *evcond);
uint __cdecl set_debugger_options(uint options);
void __cdecl set_default_dataseg(sel_t ds_sel);
bool __cdecl set_default_encoding_idx(int bpu, int idx);
bool __cdecl set_default_sreg_value(segment_t *sg, int rg, sel_t value);
bool __cdecl set_dock_pos(const char *src_ctrl, const char *dest_ctrl, int orient, int left, int top, int right, int bottom);
bool __cdecl set_dummy_name(ea_t from, ea_t ea);
bool __cdecl set_entry_forwarder(uval_t ord, const char *name, int flags);
bool __cdecl set_enum_bf(enum_t id, bool bf);
bool __cdecl set_enum_cmt(enum_t id, const char *cmt, bool repeatable);
bool __cdecl set_enum_flag(enum_t id, flags_t flag);
bool __cdecl set_enum_fromtil(enum_t id, bool fromtil);
bool __cdecl set_enum_ghost(enum_t id, bool ghost);
bool __cdecl set_enum_hidden(enum_t id, bool hidden);
bool __cdecl set_enum_idx(enum_t id, size_t idx);
bool __cdecl set_enum_member_cmt(const_t id, const char *cmt, bool repeatable);
bool __cdecl set_enum_member_name(const_t id, const char *name);
bool __cdecl set_enum_name(enum_t id, const char *name);
void __cdecl set_enum_type_ordinal(enum_t id, int32 ord);
bool __cdecl set_enum_width(enum_t id, int width);
void __cdecl set_errno(int code);
void __cdecl set_error_data(int n, size_t data);
void __cdecl set_error_string(int n, const char *str);
char *__cdecl set_file_ext(char *outbuf, size_t bufsize, const char *file, const char *ext);
void __cdecl set_fixed_spd(ea_t ea);
void __cdecl set_fixup(ea_t source, const fixup_data_t *fd);
bool __cdecl set_forced_operand(ea_t ea, int n, const char *op);
bool __cdecl set_frame_size(func_t *pfn, asize_t frsize, ushort frregs, asize_t argsize);
bool __cdecl set_func_cmt(const func_t *pfn, const char *cmt, bool repeatable);
bool __cdecl set_func_end(ea_t ea, ea_t newend);
void __cdecl set_func_guessed_by_hexrays(ea_t ea);
int __cdecl set_func_name_if_jumpfunc(func_t *pfn, const char *oldname);
int __cdecl set_func_start(ea_t ea, ea_t newstart);
void __cdecl set_func_trace_options(int options);
void __cdecl set_gotea(ea_t gotea);
int __cdecl set_group_selector(sel_t grp, sel_t sel);
void __cdecl set_has_lname(ea_t ea);
void __cdecl set_has_ti(ea_t ea);
void __cdecl set_has_ti0(ea_t ea);
void __cdecl set_has_ti1(ea_t ea);
bool __cdecl set_header_path(const char *path, bool add);
void __cdecl set_hexdsp(hexdsp_t hrdsp);
bool __cdecl set_highlight(TWidget *viewer, const char *str, int flags);
void __cdecl set_highlight_trace_options(bool hilight, bgcolor_t color, bgcolor_t diff);
void __cdecl set_ida_notepad_text(const char *text, size_t size);
idastate_t __cdecl set_ida_state(idastate_t st);
const char *__cdecl set_idc_dtor(idc_class_t *icls, const char *fullfuncname);
const char *__cdecl set_idc_getattr(idc_class_t *icls, const char *fullfuncname);
bool __cdecl set_idc_method(idc_class_t *icls, const char *fullfuncname);
const char *__cdecl set_idc_setattr(idc_class_t *icls, const char *fullfuncname);
error_t __cdecl set_idcv_attr(idc_value_t *obj, const char *attr, const idc_value_t *value, bool may_use_setattr);
error_t __cdecl set_idcv_slice(idc_value_t *v, uval_t i1, uval_t i2, const idc_value_t *in, int flags);
void __cdecl set_ids_modnode(netnode id);
void __cdecl set_ignore_micro(ea_t ea, uchar im_type);
void __cdecl set_imagebase(ea_t base);
bool __cdecl set_immd(ea_t ea);
void __cdecl set_import_name(uval_t modnode, ea_t ea, const char *name);
void __cdecl set_import_ordinal(uval_t modnode, ea_t ea, uval_t ord);
void __cdecl set_ind_purged(ea_t ea, ea_t x);
void __cdecl set_insn_trace_options(int options);
const char *__cdecl set_int_dbg_options(const char *keyword, int32 value);
void __cdecl set_item_color(ea_t ea, bgcolor_t color);
void __cdecl set_libitem(ea_t ea);
void __cdecl set_loader_format_name(const char *name);
bool __cdecl set_lzero(ea_t ea, int n);
void __cdecl set_lzero0(ea_t ea);
void __cdecl set_lzero1(ea_t ea);
void __cdecl set_manual_insn(ea_t ea, const char *manual_insn);
void __cdecl set_manual_regions(const meminfo_vec_t *ranges);
bool __cdecl set_member_cmt(member_t *mptr, const char *cmt, bool repeatable);
bool __cdecl set_member_name(struc_t *sptr, ea_t offset, const char *name);
smt_code_t __cdecl set_member_tinfo(struc_t *sptr, member_t *mptr, uval_t memoff, const tinfo_t *tif, int flags);
bool __cdecl set_member_type(struc_t *sptr, ea_t offset, flags_t flag, const opinfo_t *mt, asize_t nbytes);
void *__cdecl set_module_data(int *data_id, void *data_ptr);
bool __cdecl set_moved_jpt(const jump_pattern_t *_this, const op_t *dst, const op_t *src, tracked_regs_t *_regs, op_dtype_t real_dst_dtype, op_dtype_t real_src_dtype);
bool __cdecl set_name(ea_t ea, const char *name, int flags);
void __cdecl set_nav_colorizer(uint32 (__cdecl **out_was_func)(ea_t, asize_t, void *), void **out_was_ud, uint32 (__cdecl *func)(ea_t, asize_t, void *), void *ud);
std__new_handler __cdecl set_new_handler(std__new_handler);
void __cdecl set_node_info(graph_id_t gid, int node, const node_info_t *ni, uint32 flags);
void __cdecl set_noret(ea_t ea);
bool __cdecl set_noret_insn(ea_t insn_ea, bool noret);
void __cdecl set_notcode(ea_t ea);
void __cdecl set_notproc(ea_t ea);
tinfo_code_t __cdecl set_numbered_type(til_t *ti, uint32 ordinal, int ntf_flags, const char *name, const type_t *type, const p_list *fields, const char *cmt, const p_list *fldcmts, const sclass_t *sclass);
bool __cdecl set_op_tinfo(ea_t ea, int n, const tinfo_t *tif);
bool __cdecl set_op_type(ea_t ea, flags_t type, int n);
bool __cdecl set_opinfo(ea_t ea, int n, flags_t flag, const opinfo_t *ti, bool suppress_events);
bool __cdecl set_outfile_encoding_idx(int idx);
void __cdecl set_path(path_type_t pt, const char *path);
void __cdecl set_process_options(const char *path, const char *args, const char *sdir, const char *host, const char *pass, int port);
int __cdecl set_process_state(int newstate, thid_t *p_thid, int dbginv);
bool __cdecl set_processor_type(const char *procname, setproc_level_t level);
bool __cdecl set_purged(ea_t ea, int nbytes, bool override_old_value);
error_t __cdecl set_qerrno(error_t code);
bool __cdecl set_refinfo(ea_t ea, int n, reftype_t type, ea_t target, ea_t base, adiff_t tdelta);
bool __cdecl set_refinfo_ex(ea_t ea, int n, const refinfo_t *ri);
int __cdecl set_reg_val(thid_t tid, int regidx, const regval_t *value);
int __cdecl set_regvar_cmt(func_t *pfn, regvar_t *v, const char *cmt);
void __cdecl set_remote_debugger(const char *host, const char *pass, int port);
bool __cdecl set_resume_mode(thid_t tid, resume_mode_t mode);
void __cdecl set_retfp(ea_t ea);
void __cdecl set_root_filename(const char *file);
bool __cdecl set_segm_addressing(segment_t *s, size_t bitness);
bool __cdecl set_segm_base(segment_t *s, ea_t newbase);
int __cdecl set_segm_class(segment_t *s, const char *sclass, int flags);
bool __cdecl set_segm_end(ea_t ea, ea_t newend, int flags);
int __cdecl set_segm_name(segment_t *s, const char *name, int flags);
bool __cdecl set_segm_start(ea_t ea, ea_t newstart, int flags);
void __cdecl set_segment_cmt(const segment_t *s, const char *cmt, bool repeatable);
bool __cdecl set_segment_translations(ea_t segstart, const eavec_t *transmap);
int __cdecl set_selector(sel_t selector, ea_t paragraph);
void __cdecl set_source_linnum(ea_t ea, uval_t lnnum);
void __cdecl set_srcdbg_paths(const char *paths);
void __cdecl set_srcdbg_undesired_paths(const char *paths);
void __cdecl set_sreg_at_next_code(ea_t ea1, ea_t ea2, int rg, sel_t value);
void __cdecl set_step_trace_options(int options);
int32 __cdecl set_str_encoding_idx(int32 strtype, int encoding_idx);
void __cdecl set_str_type(ea_t ea, uint32 x);
bool __cdecl set_struc_align(struc_t *sptr, int shift);
bool __cdecl set_struc_cmt(tid_t id, const char *cmt, bool repeatable);
void __cdecl set_struc_hidden(struc_t *sptr, bool is_hidden);
bool __cdecl set_struc_idx(const struc_t *sptr, uval_t idx);
void __cdecl set_struc_listed(struc_t *sptr, bool is_listed);
bool __cdecl set_struc_name(tid_t id, const char *name);
void __cdecl set_switch_info(ea_t ea, const switch_info_t *in);
void __cdecl set_switch_parent(ea_t ea, ea_t x);
bool __cdecl set_tail_owner(func_t *fnt, ea_t func_start);
bool __cdecl set_target_assembler(int asmnum);
terminate_handler __cdecl set_terminate(terminate_handler _NewTerminateHandler);
void __cdecl set_terse_struc(ea_t ea);
void __cdecl set_tilcmt(ea_t ea);
bool __cdecl set_tinfo(ea_t ea, const tinfo_t *tif);
bool __cdecl set_tinfo_attr(tinfo_t *tif, const type_attr_t *ta, bool may_overwrite);
bool __cdecl set_tinfo_attrs(tinfo_t *tif, type_attrs_t *ta);
size_t __cdecl set_tinfo_property(tinfo_t *tif, int sta_prop, size_t x);
void __cdecl set_trace_base_address(ea_t ea);
void __cdecl set_trace_dynamic_register_set(dynamic_register_set_t *idaregs);
bool __cdecl set_trace_file_desc(const char *filename, const char *description);
void __cdecl set_trace_platform(const char *platform);
bool __cdecl set_trace_size(int size);
bool __cdecl set_type_alias(til_t *ti, uint32 src_ordinal, uint32 dst_ordinal);
void __cdecl set_type_determined_by_hexrays(ea_t ea);
void __cdecl set_type_guessed_by_ida(ea_t ea);
unexpected_handler __cdecl set_unexpected(unexpected_handler _NewUnexpectedHandler);
void __cdecl set_usemodsp(ea_t ea);
void __cdecl set_user_defined_prefix(size_t width, void (__cdecl *get_user_defined_prefix)(qstring *, ea_t, int, int, const char *));
void __cdecl set_usersp(ea_t ea);
void __cdecl set_userti(ea_t ea);
bool __cdecl set_vftable_ea(uint32 ordinal, ea_t vftable_ea);
void __cdecl set_view_renderer_type(TWidget *v, tcc_renderer_type_t rt);
void __cdecl set_viewer_graph(graph_viewer_t *gv, mutable_graph_t *g);
void __cdecl set_visible_func(func_t *pfn, bool visible);
void __cdecl set_visible_item(ea_t ea, bool visible);
void __cdecl set_visible_segm(segment_t *s, bool visible);
void __cdecl set_xrefpos(ea_t ea, const xrefpos_t *in);
void __cdecl set_zstroff(ea_t ea);
void __cdecl setbuf(FILE *_Stream, char *_Buffer);
bool __cdecl setinf(inftag_t tag, ssize_t value);
bool __cdecl setinf_buf(inftag_t tag, const void *buf, size_t bufsize);
bool __cdecl setinf_flag(inftag_t tag, uint32 flag, bool value);
int __cdecl setmode(int _FileHandle, int _Mode);
void __cdecl setup_graph_subsystem(const char *_grapher, bgcolor_t (__cdecl *get_graph_color)(int));
void __cdecl setup_lowcnd_regfuncs(error_t (__cdecl *getreg)(idc_value_t *, idc_value_t *), error_t (__cdecl *setreg)(idc_value_t *, idc_value_t *));
void setup_range_marker(void);
sel_t __cdecl setup_selector(ea_t segbase);
int __cdecl setvbuf(FILE *_Stream, char *_Buffer, int _Mode, size_t _Size);
bool __cdecl should_ignore_micro(ea_t ea);
void __cdecl show_addr(ea_t ea);
void __cdecl show_auto(ea_t ea, atype_t type);
void show_hex(const void *dataptr, size_t len, const char *format, ...);
void show_hex_file(linput_t *li, int64 pos, size_t count, const char *format, ...);
void __cdecl show_name(ea_t ea);
void show_wait_box(const char *format, ...);
void __cdecl show_wait_box_v(const char *format, va_list va);
bool __cdecl signbit(long double _X);
void __cdecl simpleline_place_t__adjust(simpleline_place_t *, void *);
bool __cdecl simpleline_place_t__beginning(const simpleline_place_t *, void *);
place_t *__cdecl simpleline_place_t__clone(const simpleline_place_t *);
int __cdecl simpleline_place_t__compare(const simpleline_place_t *, const place_t *);
int __cdecl simpleline_place_t__compare2(const simpleline_place_t *, const place_t *, void *);
void __cdecl simpleline_place_t__copyfrom(simpleline_place_t *, const place_t *);
bool __cdecl simpleline_place_t__deserialize(simpleline_place_t *, const uchar **, const uchar *);
bool __cdecl simpleline_place_t__ending(const simpleline_place_t *, void *);
place_t *__cdecl simpleline_place_t__enter(const simpleline_place_t *, uint32 *);
int __cdecl simpleline_place_t__generate(const simpleline_place_t *, qstrvec_t *, int *, color_t *, bgcolor_t *, void *, int);
int __cdecl simpleline_place_t__id(const simpleline_place_t *);
void __cdecl simpleline_place_t__leave(const simpleline_place_t *, uint32);
place_t *__cdecl simpleline_place_t__makeplace(const simpleline_place_t *, void *, uval_t, int);
const char *__cdecl simpleline_place_t__name(const simpleline_place_t *);
bool __cdecl simpleline_place_t__next(simpleline_place_t *, void *);
bool __cdecl simpleline_place_t__prev(simpleline_place_t *, void *);
void __cdecl simpleline_place_t__print(const simpleline_place_t *, qstring *, void *);
bool __cdecl simpleline_place_t__rebase(simpleline_place_t *, const segm_move_infos_t *);
void __cdecl simpleline_place_t__serialize(const simpleline_place_t *, bytevec_t *out);
ea_t __cdecl simpleline_place_t__toea(const simpleline_place_t *);
uval_t __cdecl simpleline_place_t__touval(const simpleline_place_t *, void *);
double __cdecl sin(double _X);
float __cdecl sinf(float _X);
double __cdecl sinh(double _X);
float __cdecl sinhf(float _X);
long double __cdecl sinhl(long double _X);
long double __cdecl sinl(long double _X);
char *__cdecl skip_spaces(char *ptr);
size_t __cdecl skip_utf8(const char **putf8, size_t n);
int snprintf(char *const _Buffer, const size_t _BufferCount, const char *const _Format, ...);
sval_t __cdecl soff_to_fpoff(func_t *pfn, uval_t soff);
int sopen(const char *_FileName, int _OpenFlag, int _ShareFlag, ...);
bool __cdecl sort_til(til_t *ti);
bool __cdecl split_sreg_range(ea_t ea, int rg, sel_t v, uchar tag, bool silent);
int sprintf(char *_Buffer, const char *_Format, ...);
int sprintf_s(char *const _Buffer, const size_t _BufferCount, const char *const _Format, ...);
double __cdecl sqrt(double _X);
float __cdecl sqrtf(float _X);
long double __cdecl sqrtl(long double _X);
void __cdecl srand(unsigned int _Seed);
bool srcdbg_request_step_into(void);
bool srcdbg_request_step_over(void);
bool srcdbg_request_step_until_ret(void);
bool srcdbg_step_into(void);
bool srcdbg_step_over(void);
bool srcdbg_step_until_ret(void);
int sscanf(const char *const _Buffer, const char *const _Format, ...);
int sscanf_s(const char *const _Buffer, const char *const _Format, ...);
int __cdecl start_process(const char *path, const char *args, const char *sdir);
void __cdecl std_out_segm_footer(outctx_t *ctx, segment_t *seg);
bool step_into(void);
bool step_over(void);
bool step_until_ret(void);
flags_t stkvar_flag(void);
size_t __cdecl stoa(qstring *buf, ea_t from, sel_t seg);
double __cdecl stod(const std__wstring *_Str, size_t *_Idx);
float __cdecl stof(const std__wstring *_Str, size_t *_Idx);
int __cdecl stoi(const std__wstring *_Str, size_t *_Idx, int _Base);
__int32 __cdecl stol(const std__wstring *_Str, size_t *_Idx, int _Base);
long double __cdecl stold(const std__wstring *_Str, size_t *_Idx);
__int64 __cdecl stoll(const std__wstring *_Str, size_t *_Idx, int _Base);
bool store_exceptions(void);
bool __cdecl store_til(til_t *ti, const char *tildir, const char *name);
unsigned __int32 __cdecl stoul(const std__wstring *_Str, size_t *_Idx, int _Base);
unsigned __int64 __cdecl stoull(const std__wstring *_Str, size_t *_Idx, int _Base);
bool __cdecl str2ea(ea_t *ea_ptr, const char *str, ea_t screen_ea);
bool __cdecl str2ea_ex(ea_t *ea_ptr, const char *str, ea_t screen_ea, int flags);
int __cdecl str2reg(const char *p);
char *__cdecl str2user(char *dst, const char *src, size_t dstsize);
const char *__cdecl strarray(const strarray_t *array, size_t array_size, int code);
char *__cdecl strcat(char *_Destination, const char *_Source);
errno_t __cdecl strcat_s(char *_Destination, rsize_t _SizeInBytes, const char *_Source);
char *__cdecl strchr(char *const _String, const int _Ch);
int __cdecl strcmp(const char *_Str1, const char *_Str2);
int __cdecl strcmpi(const char *_String1, const char *_String2);
int __cdecl strcoll(const char *_String1, const char *_String2);
char *__cdecl strcpy(char *_Destination, const char *_Source);
errno_t __cdecl strcpy_s(char *_Destination, rsize_t _SizeInBytes, const char *_Source);
size_t __cdecl strcspn(const char *_Str, const char *_Control);
char *__cdecl strdup(const char *_String);
char *__cdecl strerror(int _ErrorMessage);
errno_t __cdecl strerror_s(char *_Buffer, size_t _SizeInBytes, int _ErrorNumber);
size_t __cdecl strftime(char *_Buffer, size_t _SizeInBytes, const char *_Format, const tm *_Tm);
int __cdecl stricmp(const char *_String1, const char *_String2);
char *__cdecl stristr(char *s1, const char *s2);
size_t __cdecl strlen(const char *_Str);
flags_t strlit_flag(void);
char *__cdecl strlwr(char *_String);
char *__cdecl strncat(char *_Destination, const char *_Source, size_t _Count);
errno_t __cdecl strncat_s(char *_Destination, rsize_t _SizeInBytes, const char *_Source, rsize_t _MaxCount);
int __cdecl strncmp(const char *_Str1, const char *_Str2, size_t _MaxCount);
char *__cdecl strncpy(char *_Destination, const char *_Source, size_t _Count);
errno_t __cdecl strncpy_s(char *_Destination, rsize_t _SizeInBytes, const char *_Source, rsize_t _MaxCount);
int __cdecl strnicmp(const char *_String1, const char *_String2, size_t _MaxCount);
size_t __cdecl strnlen(const char *_String, size_t _MaxCount);
char *__cdecl strnset(char *_String, int _Value, size_t _MaxCount);
bool __cdecl stroff_as_size(int plen, const struc_t *sptr, asize_t value);
flags_t stroff_flag(void);
char *__cdecl strpbrk(char *const _String, const char *const _Control);
char *__cdecl strrchr(char *const _String, const int _Ch);
char *__cdecl strrev(char *_String);
char *__cdecl strrpl(char *str, int char1, int char2);
char *__cdecl strset(char *_String, int _Value);
size_t __cdecl strspn(const char *_Str, const char *_Control);
char *__cdecl strstr(char *const _String, const char *const _SubString);
double __cdecl strtod(const char *_String, char **_EndPtr);
float __cdecl strtof(const char *_String, char **_EndPtr);
char *__cdecl strtok(char *_String, const char *_Delimiter);
char *__cdecl strtok_s(char *_String, const char *_Delimiter, char **_Context);
__int32 __cdecl strtol(const char *_String, char **_EndPtr, int _Radix);
long double __cdecl strtold(const char *_String, char **_EndPtr);
__int64 __cdecl strtoll(const char *_String, char **_EndPtr, int _Radix);
unsigned __int32 __cdecl strtoul(const char *_String, char **_EndPtr, int _Radix);
unsigned __int64 __cdecl strtoull(const char *_String, char **_EndPtr, int _Radix);
flags_t stru_flag(void);
void __cdecl structplace_t__adjust(structplace_t *, void *);
bool __cdecl structplace_t__beginning(const structplace_t *, void *);
place_t *__cdecl structplace_t__clone(const structplace_t *);
int __cdecl structplace_t__compare(const structplace_t *, const place_t *);
int __cdecl structplace_t__compare2(const structplace_t *, const place_t *, void *);
void __cdecl structplace_t__copyfrom(structplace_t *, const place_t *);
bool __cdecl structplace_t__deserialize(structplace_t *, const uchar **, const uchar *);
bool __cdecl structplace_t__ending(const structplace_t *, void *);
place_t *__cdecl structplace_t__enter(const structplace_t *, uint32 *);
int __cdecl structplace_t__generate(const structplace_t *, qstrvec_t *, int *, color_t *, bgcolor_t *, void *, int);
int __cdecl structplace_t__id(const structplace_t *);
void __cdecl structplace_t__leave(const structplace_t *, uint32);
place_t *__cdecl structplace_t__makeplace(const structplace_t *, void *, uval_t, int);
const char *__cdecl structplace_t__name(const structplace_t *);
bool __cdecl structplace_t__next(structplace_t *, void *);
bool __cdecl structplace_t__prev(structplace_t *, void *);
void __cdecl structplace_t__print(const structplace_t *, qstring *, void *);
bool __cdecl structplace_t__rebase(structplace_t *, const segm_move_infos_t *);
void __cdecl structplace_t__serialize(const structplace_t *, bytevec_t *out);
ea_t __cdecl structplace_t__toea(const structplace_t *);
uval_t __cdecl structplace_t__touval(const structplace_t *, void *);
char *__cdecl strupr(char *_String);
size_t __cdecl strxfrm(char *_Destination, const char *_Source, size_t _MaxCount);
bool suspend_process(void);
int __cdecl suspend_thread(thid_t tid);
void __cdecl swab(char *_Buf1, char *_Buf2, int _SizeInBytes);
void swap(void);
void __cdecl swap128(uint128 *x);
ushort __cdecl swap16(ushort x);
uint32 __cdecl swap32(uint32 x);
longlong __cdecl swap64(longlong x);
void __cdecl swap_idcvs(idc_value_t *v1, idc_value_t *v2);
void __cdecl swap_value(void *dst, const void *src, int size);
dbctx_t *__cdecl switch_dbctx(size_t idx);
void switch_to_golang(void);
int swprintf(__int16 *const _Buffer, const __int16 *const _Format, ...);
int swprintf_s(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, ...);
int swscanf(const __int16 *const _Buffer, const __int16 *const _Format, ...);
int swscanf_s(const __int16 *const _Buffer, const __int16 *const _Format, ...);
bool __cdecl sync_sources(const sync_source_t *what, const sync_source_t *with, bool sync);
int __cdecl system(const char *_Command);
void __cdecl tag_addr(qstring *buf, ea_t ea, bool ins);
const char *__cdecl tag_advance(const char *line, int cnt);
ssize_t __cdecl tag_remove(qstring *buf, int init_level);
const char *__cdecl tag_skipcode(const char *line);
const char *__cdecl tag_skipcodes(const char *line);
ssize_t __cdecl tag_strlen(const char *line);
const char *__cdecl tail(const char *str);
bool __cdecl take_database_snapshot(snapshot_t *ss, qstring *err_msg);
bool __cdecl take_memory_snapshot(bool only_loader_segs);
double __cdecl tan(double _X);
float __cdecl tanf(float _X);
double __cdecl tanh(double _X);
float __cdecl tanhf(float _X);
long double __cdecl tanhl(long double _X);
long double __cdecl tanl(long double _X);
flags_t tbyte_flag(void);
__int32 __cdecl tell(int _FileHandle);
char *__cdecl tempnam(const char *_Directory, const char *_FilePrefix);
void term_database(void);
void term_ignore_micro(void);
void __cdecl term_plugins(int flag);
int __cdecl term_process(void *handle);
void __noreturn terminate(void);
bool __cdecl test_bit(const uchar *bitmap, size_t bit);
double __cdecl tgamma(double _X);
float __cdecl tgammaf(float _X);
long double __cdecl tgammal(long double _X);
error_t __cdecl throw_idc_exception(idc_value_t *r, const char *desc);
FILE *tmpfile(void);
errno_t __cdecl tmpfile_s(FILE **_Stream);
char *__cdecl tmpnam(char *_Buffer);
errno_t __cdecl tmpnam_s(char *_Buffer, rsize_t _Size);
ea_t __cdecl to_ea(sel_t reg_cs, uval_t reg_ip);
std__string __cdecl to_string(long double _Val);
std__wstring __cdecl to_wstring(long double _Val);
bool __cdecl toggle_bnot(ea_t ea, int n);
bool __cdecl toggle_lzero(ea_t ea, int n);
bool __cdecl toggle_sign(ea_t ea, int n);
int __cdecl tolower(int _C);
int __cdecl toupper(int _C);
wint_t __cdecl towlower(wint_t _C);
wint_t __cdecl towupper(wint_t _C);
bool __cdecl track_value_until_address_jpt(jump_pattern_t *_this, op_t *op, ea_t ea);
char *__cdecl trim(char *str);
void __cdecl trim_jtable(switch_info_t *si, ea_t jump_ea, bool ignore_refs);
double __cdecl trunc(double _X);
float __cdecl truncf(float _X);
long double __cdecl truncl(long double _X);
int __cdecl try_to_add_libfunc(ea_t ea);
void tzset(void);
bool __cdecl ui_load_new_file(qstring *temp_file, qstring *filename, linput_t **pli, ushort neflags, load_info_t **ploaders);
bool __cdecl ui_run_debugger(const char *dbgopts, const char *exename, int argc, const char *const *argv);
char *__cdecl ultoa(unsigned __int32 _Value, char *_Buffer, int _Radix);
int __cdecl umask(int _Mode);
bool uncaught_exception(void);
int uncaught_exceptions(void);
bool under_debugger;
void __noreturn unexpected(void);
void __cdecl unget_token(const token_t *t, tokenstack_t *buf);
int __cdecl ungetc(int _Character, FILE *_Stream);
wint_t __cdecl ungetwc(wint_t _Character, FILE *_Stream);
void __cdecl unhide_border(ea_t ea);
void __cdecl unhide_item(ea_t ea);
bool __cdecl unhook_event_listener(hook_type_t hook_type, event_listener_t *cb);
int __cdecl unhook_from_notification_point(hook_type_t hook_type, ssize_t (__cdecl *cb)(void *, int, va_list), void *user_data);
int __cdecl unlink(const char *_FileName);
void unlock_dbgmem_config(void);
void __cdecl unmake_linput(linput_t *li);
void unmark_selection(void);
void *__cdecl unpack_buf(const uchar **pptr, const uchar *end);
const void *__cdecl unpack_buf_inplace(const uchar **pptr, const uchar *end);
bool __cdecl unpack_bytevec(bytevec_t *out, const uchar **pptr, const uchar *end);
uchar __cdecl unpack_db(const uchar **pptr, const uchar *end);
uint32 __cdecl unpack_dd(const uchar **pptr, const uchar *end);
uint64 __cdecl unpack_dq(const uchar **pptr, const uchar *end);
char *__cdecl unpack_ds(const uchar **pptr, const uchar *end, bool empty_null);
bool __cdecl unpack_ds_to_buf(char *dst, size_t dstsize, const uchar **pptr, const uchar *end);
ushort __cdecl unpack_dw(const uchar **pptr, const uchar *end);
ea_t __cdecl unpack_ea(const uchar **ptr, const uchar *end);
ea64_t __cdecl unpack_ea64(const uchar **ptr, const uchar *end);
void __cdecl unpack_eavec(eavec_t *vec, ea_t ea, const uchar **ptr, const uchar *end);
error_t __cdecl unpack_idcobj_from_bv(idc_value_t *obj, const tinfo_t *tif, const bytevec_t *bytes, int pio_flags);
error_t __cdecl unpack_idcobj_from_idb(idc_value_t *obj, const tinfo_t *tif, ea_t ea, const bytevec_t *off0, int pio_flags);
bool __cdecl unpack_memory(void *buf, size_t size, const uchar **pptr, const uchar *end);
void *__cdecl unpack_obj(void *destbuf, size_t destsize, const uchar **pptr, const uchar *end);
const void *__cdecl unpack_obj_inplace(const uchar **pptr, const uchar *end, size_t objsize);
void __cdecl unpack_regvals(regval_t *values, int n, const uchar *regmap, memory_deserializer_t *mmdsr);
bool __cdecl unpack_str(qstring *out, const uchar **pptr, const uchar *end);
bool __cdecl unpack_xleb128(void *res, int nbits, bool is_signed, const uchar **pptr, const uchar *end);
bool __cdecl unregister_action(const char *name);
bool __cdecl unregister_custom_data_format(int dfid);
bool __cdecl unregister_custom_data_type(int dtid);
bool __cdecl unregister_custom_fixup(fixup_type_t type);
bool __cdecl unregister_custom_refinfo(int crid);
bool __cdecl unregister_post_event_visitor(hook_type_t hook_type, post_event_visitor_t *visitor);
bool __cdecl unregister_srcinfo_provider(srcinfo_provider_t *sp);
bool __cdecl unregister_timer(qtimer_t t);
void __cdecl upd_abits(ea_t ea, aflags_t clr_bits, aflags_t set_bits);
bool __cdecl update_action_checkable(const char *name, bool checkable);
bool __cdecl update_action_checked(const char *name, bool checked);
bool __cdecl update_action_icon(const char *name, int icon);
bool __cdecl update_action_label(const char *name, const char *label);
bool __cdecl update_action_shortcut(const char *name, const char *shortcut);
bool __cdecl update_action_state(const char *name, action_state_t state);
bool __cdecl update_action_tooltip(const char *name, const char *tooltip);
bool __cdecl update_action_visibility(const char *name, bool visible);
bool __cdecl update_bpt(const bpt_t *bpt);
void __cdecl update_extra_cmt(ea_t ea, int what, const char *str);
bool __cdecl update_fpd(func_t *pfn, asize_t fpd);
bool __cdecl update_func(func_t *pfn);
bool __cdecl update_hidden_range(const hidden_range_t *ha);
bool __cdecl update_segm(segment_t *s);
bool __cdecl update_snapshot_attributes(const char *filename, const snapshot_t *root, const snapshot_t *attr, int uf);
bool use_golang_cc(void);
ea_t __cdecl use_mapping(ea_t ea);
int __cdecl user2bin(uchar *, uchar *, ea_t, const char *, int, bool);
void __cdecl user2qstr(qstring *dst, const qstring *src);
char *__cdecl user2str(char *dst, const char *src, size_t dstsize);
bool user_cancelled(void);
bool __cdecl uses_aflag_modsp(aflags_t flags);
bool __cdecl uses_modsp(ea_t ea);
wchar32_t __cdecl utf16_surrogates_to_cp(wchar16_t lead_surrogate, wchar16_t tail_surrogate);
bool __cdecl utf16_utf8(qstring *out, const wchar16_t *in, int nsyms);
bool __cdecl utf8_utf16(qwstring *out, const char *in, int nsyms);
wchar16_t __cdecl utf8_wchar16(uchar b0, uchar b1, uchar b2);
wchar32_t __cdecl utf8_wchar32(uchar b0, uchar b1, uchar b2, uchar b3);
bool __cdecl vadd_extra_line(ea_t ea, int vel_flags, const char *format, va_list va);
int validate_idb_names(void);
int __cdecl validate_idb_names2(bool do_repair);
bool __cdecl validate_name(qstring *name, nametype_t type, int flags);
int __cdecl vask_buttons(const char *Yes, const char *No, const char *Cancel, int deflt, const char *format, va_list va);
char *__cdecl vask_file(bool for_saving, const char *defval, const char *format, va_list va);
int __cdecl vask_form(const char *format, va_list va);
bool __cdecl vask_str(qstring *str, int hist, const char *format, va_list va);
bool __cdecl vask_text(qstring *answer, size_t max_size, const char *defval, const char *format, va_list va);
int __cdecl vask_yn(int deflt, help_t format, va_list va);
int __cdecl verify_argloc(const argloc_t *vloc, int size, const rangeset_t *gaps);
int __cdecl verify_tinfo(uint32 typid);
void __cdecl __noreturn verror(const char *format, va_list va);
int __cdecl vfprintf(FILE *const _Stream, const char *const _Format, va_list _ArgList);
int __cdecl vfprintf_s(FILE *const _Stream, const char *const _Format, va_list _ArgList);
int __cdecl vfscanf(FILE *const _Stream, const char *const _Format, va_list _ArgList);
int __cdecl vfscanf_s(FILE *const _Stream, const char *const _Format, va_list _ArgList);
int __cdecl vfwprintf(FILE *const _Stream, const __int16 *const _Format, va_list _ArgList);
int __cdecl vfwprintf_s(FILE *const _Stream, const __int16 *const _Format, va_list _ArgList);
int __cdecl vfwscanf(FILE *const _Stream, const __int16 *const _Format, va_list _ArgList);
int __cdecl vfwscanf_s(FILE *const _Stream, const __int16 *const _Format, va_list _ArgList);
bool __cdecl viewer_attach_menu_item(graph_viewer_t *g, const char *name);
void __cdecl viewer_center_on(graph_viewer_t *gv, int node);
bool __cdecl viewer_create_groups(graph_viewer_t *gv, intvec_t *out_group_nodes, const groups_crinfos_t *gi);
void __cdecl viewer_del_node_info(graph_viewer_t *gv, int n);
bool __cdecl viewer_delete_groups(graph_viewer_t *gv, const intvec_t *groups, int new_current);
void __cdecl viewer_fit_window(graph_viewer_t *gv);
int __cdecl viewer_get_curnode(graph_viewer_t *gv);
bool __cdecl viewer_get_gli(graph_location_info_t *out, graph_viewer_t *gv, uint32 flags);
bool __cdecl viewer_get_node_info(graph_viewer_t *gv, node_info_t *out, int n);
bool __cdecl viewer_get_selection(graph_viewer_t *gv, screen_graph_selection_t *sgs);
void __cdecl viewer_set_gli(graph_viewer_t *gv, const graph_location_info_t *gli, uint32 flags);
bool __cdecl viewer_set_groups_visibility(graph_viewer_t *gv, const intvec_t *groups, bool expand, int new_current);
void __cdecl viewer_set_node_info(graph_viewer_t *gv, int n, const node_info_t *ni, uint32 flags);
int __cdecl viewer_set_titlebar_height(graph_viewer_t *gv, int height);
void __cdecl vinfo(const char *format, va_list va);
int __cdecl visit_patched_bytes(ea_t ea1, ea_t ea2, int (__cdecl *cb)(ea_t, int64, uint64, uint64, void *), void *ud);
int __cdecl visit_snapshot_tree(snapshot_t *root, int (__cdecl *callback)(snapshot_t *, void *), void *ud);
flags_t __cdecl visit_stroff_fields(struct_field_visitor_t *sfv, const tid_t *path, int plen, adiff_t *disp, bool appzero);
int __cdecl visit_subtypes(tinfo_visitor_t *visitor, type_mods_t *out, const tinfo_t *tif, const char *name, const char *cmt);
void __cdecl __noreturn vloader_failure(const char *format, va_list va);
int __cdecl vmsg(const char *format, va_list va);
void __cdecl __noreturn vnomem(const char *format, va_list va);
TWidget *__cdecl vopen_form(const char *format, uint32 flags, va_list va);
int __cdecl vprintf(const char *const _Format, va_list _ArgList);
int __cdecl vprintf_s(const char *const _Format, va_list _ArgList);
char *__cdecl vqmakepath(char *buf, size_t bufsize, const char *s1, va_list);
void __cdecl vqperror(const char *format, va_list va);
int __cdecl vscanf(const char *const _Format, va_list _ArgList);
int __cdecl vscanf_s(const char *const _Format, va_list _ArgList);
void __cdecl vshow_hex(const void *dataptr, size_t len, const char *format, va_list va);
void __cdecl vshow_hex_file(linput_t *li, int64 pos, size_t count, const char *format, va_list va);
int __cdecl vsnprintf(char *const _Buffer, const size_t _BufferCount, const char *const _Format, va_list _ArgList);
int __cdecl vsnprintf_s(char *const _Buffer, const size_t _BufferCount, const size_t _MaxCount, const char *const _Format, va_list _ArgList);
int __cdecl vsprintf(char *_Buffer, const char *_Format, va_list _Args);
int __cdecl vsprintf_s(char *const _Buffer, const size_t _BufferCount, const char *const _Format, va_list _ArgList);
int __cdecl vsscanf(const char *const _Buffer, const char *const _Format, va_list _ArgList);
int __cdecl vsscanf_s(const char *const _Buffer, const char *const _Format, va_list _ArgList);
int __cdecl vswprintf(__int16 *const _Buffer, const __int16 *const _Format, va_list _ArgList);
int __cdecl vswprintf_s(__int16 *const _Buffer, const size_t _BufferCount, const __int16 *const _Format, va_list _ArgList);
int __cdecl vswscanf(const __int16 *_Buffer, const __int16 *_Format, va_list _ArgList);
int __cdecl vswscanf_s(const __int16 *const _Buffer, const __int16 *const _Format, va_list _ArgList);
void __cdecl vwarning(const char *format, va_list va);
int __cdecl vwprintf(const __int16 *const _Format, va_list _ArgList);
int __cdecl vwprintf_s(const __int16 *const _Format, va_list _ArgList);
int __cdecl vwscanf(const __int16 *const _Format, va_list _ArgList);
int __cdecl vwscanf_s(const __int16 *const _Format, va_list _ArgList);
dbg_event_code_t __cdecl wait_for_next_event(int wfne, int timeout);
void warning(const char *format, ...);
bool __cdecl was_ida_decision(ea_t ea);
size_t __cdecl wcrtomb(char *_Dest, __int16 _Source, mbstate_t *_State);
errno_t __cdecl wcrtomb_s(size_t *_Retval, char *_Dst, size_t _SizeInBytes, __int16 _Ch, mbstate_t *_State);
__int16 *__cdecl wcscat(__int16 *_Destination, const __int16 *_Source);
errno_t __cdecl wcscat_s(__int16 *_Destination, rsize_t _SizeInWords, const __int16 *_Source);
__int16 *__cdecl wcschr(__int16 *_String, __int16 _C);
int __cdecl wcscmp(const __int16 *_String1, const __int16 *_String2);
int __cdecl wcscoll(const __int16 *_String1, const __int16 *_String2);
__int16 *__cdecl wcscpy(__int16 *_Destination, const __int16 *_Source);
errno_t __cdecl wcscpy_s(__int16 *_Destination, rsize_t _SizeInWords, const __int16 *_Source);
size_t __cdecl wcscspn(const __int16 *_String, const __int16 *_Control);
__int16 *__cdecl wcsdup(const __int16 *_String);
size_t __cdecl wcsftime(__int16 *_Buffer, size_t _SizeInWords, const __int16 *_Format, const tm *_Tm);
int __cdecl wcsicmp(const __int16 *_String1, const __int16 *_String2);
int __cdecl wcsicoll(const __int16 *_String1, const __int16 *_String2);
size_t __cdecl wcslen(const __int16 *_String);
__int16 *__cdecl wcslwr(__int16 *_String);
__int16 *__cdecl wcsncat(__int16 *_Destination, const __int16 *_Source, size_t _Count);
errno_t __cdecl wcsncat_s(__int16 *_Destination, rsize_t _SizeInWords, const __int16 *_Source, rsize_t _MaxCount);
int __cdecl wcsncmp(const __int16 *_String1, const __int16 *_String2, size_t _MaxCount);
__int16 *__cdecl wcsncpy(__int16 *_Destination, const __int16 *_Source, size_t _Count);
errno_t __cdecl wcsncpy_s(__int16 *_Destination, rsize_t _SizeInWords, const __int16 *_Source, rsize_t _MaxCount);
int __cdecl wcsnicmp(const __int16 *_String1, const __int16 *_String2, size_t _MaxCount);
size_t __cdecl wcsnlen(const __int16 *_Source, size_t _MaxCount);
__int16 *__cdecl wcsnset(__int16 *_String, __int16 _Value, size_t _MaxCount);
__int16 *__cdecl wcspbrk(__int16 *_String, const __int16 *_Control);
__int16 *__cdecl wcsrchr(__int16 *_String, __int16 _C);
__int16 *__cdecl wcsrev(__int16 *_String);
size_t __cdecl wcsrtombs(char *_Dest, const __int16 **_PSource, size_t _Count, mbstate_t *_State);
errno_t __cdecl wcsrtombs_s(size_t *_Retval, char *_Dst, size_t _SizeInBytes, const __int16 **_Src, size_t _Size, mbstate_t *_State);
__int16 *__cdecl wcsset(__int16 *_String, __int16 _Value);
size_t __cdecl wcsspn(const __int16 *_String, const __int16 *_Control);
__int16 *__cdecl wcsstr(__int16 *_String, const __int16 *_SubStr);
double __cdecl wcstod(const __int16 *_String, __int16 **_EndPtr);
float __cdecl wcstof(const __int16 *_String, __int16 **_EndPtr);
__int16 *__cdecl wcstok(__int16 *_String, const __int16 *_Delimiter);
__int16 *__cdecl wcstok_s(__int16 *_String, const __int16 *_Delimiter, __int16 **_Context);
__int32 __cdecl wcstol(const __int16 *_String, __int16 **_EndPtr, int _Radix);
long double __cdecl wcstold(const __int16 *_String, __int16 **_EndPtr);
__int64 __cdecl wcstoll(const __int16 *_String, __int16 **_EndPtr, int _Radix);
size_t __cdecl wcstombs(char *_Dest, const __int16 *_Source, size_t _MaxCount);
errno_t __cdecl wcstombs_s(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const __int16 *_Src, size_t _MaxCountInBytes);
unsigned __int32 __cdecl wcstoul(const __int16 *_String, __int16 **_EndPtr, int _Radix);
unsigned __int64 __cdecl wcstoull(const __int16 *_String, __int16 **_EndPtr, int _Radix);
__int16 *__cdecl wcsupr(__int16 *_String);
size_t __cdecl wcsxfrm(__int16 *_Destination, const __int16 *_Source, size_t _MaxCount);
int __cdecl wctob(wint_t _WCh);
int __cdecl wctomb(char *_MbCh, __int16 _WCh);
errno_t __cdecl wctomb_s(int *_SizeConverted, char *_MbCh, rsize_t _SizeInBytes, __int16 _WCh);
bool __cdecl wildcard_match(const char *name, const char *pattern);
char *__cdecl winerr(int code);
__int16 *__cdecl wmemchr(__int16 *_S, __int16 _C, size_t _N);
int __cdecl wmemcmp(const __int16 *_S1, const __int16 *_S2, size_t _N);
__int16 *__cdecl wmemcpy(__int16 *_S1, const __int16 *_S2, size_t _N);
errno_t __cdecl wmemcpy_s(__int16 *_S1, rsize_t _N1, const __int16 *_S2, rsize_t _N);
__int16 *__cdecl wmemmove(__int16 *_S1, const __int16 *_S2, size_t _N);
errno_t __cdecl wmemmove_s(__int16 *_S1, rsize_t _N1, const __int16 *_S2, rsize_t _N);
__int16 *__cdecl wmemset(__int16 *_S, __int16 _C, size_t _N);
flags_t word_flag(void);
int wprintf(const __int16 *const _Format, ...);
int wprintf_s(const __int16 *const _Format, ...);
int __cdecl write(int _FileHandle, const void *_Buf, unsigned int _MaxCharCount);
ssize_t __cdecl write_dbg_memory(ea_t ea, const void *buffer, size_t size);
void __cdecl write_struc_path(ea_t ea, int idx, const tid_t *path, int plen, adiff_t delta);
uint64 __cdecl write_tinfo_bitfield_value(uint32 typid, uint64 dst, uint64 v, int bitoff);
int __cdecl writebytes(int h, uint32 l, int size, bool mf);
int wscanf(const __int16 *const _Format, ...);
int wscanf_s(const __int16 *const _Format, ...);
bool __cdecl xrefblk_t_first_from(xrefblk_t *, ea_t from, int flags);
bool __cdecl xrefblk_t_first_to(xrefblk_t *, ea_t to, int flags);
bool __cdecl xrefblk_t_next_from(xrefblk_t *);
bool __cdecl xrefblk_t_next_to(xrefblk_t *);
char __cdecl xrefchar(char xrtype);
double __cdecl y0(double _X);
double __cdecl y1(double _X);
double __cdecl yn(int _X, double _Y);
flags_t yword_flag(void);
int __cdecl zip_deflate(void *ud, ssize_t (__cdecl *file_reader)(void *, void *, size_t), ssize_t (__cdecl *file_writer)(void *, const void *, size_t));
int __cdecl zip_inflate(void *ud, ssize_t (__cdecl *file_reader)(void *, void *, size_t), ssize_t (__cdecl *file_writer)(void *, const void *, size_t));
flags_t zword_flag(void);
// abs_t abs_no;
// abs_t abs_unk;
// abs_t abs_yes;
// idb_event__event_code_t adding_segm;
// idb_event__event_code_t allsegs_moved;
// idb_event__event_code_t auto_empty;
// idb_event__event_code_t auto_empty_finally;
// beep_t beep_default;
// idb_event__event_code_t bookmark_changed;
// idb_event__event_code_t byte_patched;
// idb_event__event_code_t callee_addr_changed;
// idb_event__event_code_t changing_cmt;
// idb_event__event_code_t changing_enum_bf;
// idb_event__event_code_t changing_enum_cmt;
// idb_event__event_code_t changing_op_ti;
// idb_event__event_code_t changing_op_type;
// idb_event__event_code_t changing_range_cmt;
// idb_event__event_code_t changing_segm_class;
// idb_event__event_code_t changing_segm_end;
// idb_event__event_code_t changing_segm_name;
// idb_event__event_code_t changing_segm_start;
// idb_event__event_code_t changing_struc_align;
// idb_event__event_code_t changing_struc_cmt;
// idb_event__event_code_t changing_struc_member;
// idb_event__event_code_t changing_ti;
// choose_type_t chtype_entry;
// choose_type_t chtype_enum;
// choose_type_t chtype_enum_by_value;
// choose_type_t chtype_enum_by_value_and_size;
// choose_type_t chtype_func;
// choose_type_t chtype_generic;
// choose_type_t chtype_idasgn;
// choose_type_t chtype_idatil;
// choose_type_t chtype_name;
// choose_type_t chtype_segm;
// choose_type_t chtype_srcp;
// choose_type_t chtype_stkvar_xref;
// choose_type_t chtype_strpath;
// choose_type_t chtype_struc;
// choose_type_t chtype_xref;
// idb_event__event_code_t closebase;
// idb_event__event_code_t cmt_changed;
// idb_event__event_code_t compiler_changed;
// dbg_notification_t dbg_bpt;
// dbg_notification_t dbg_bpt_changed;
// dbg_notification_t dbg_exception;
// dbg_notification_t dbg_finished_loading_bpts;
// dbg_notification_t dbg_information;
// dbg_notification_t dbg_last;
// dbg_notification_t dbg_library_load;
// dbg_notification_t dbg_library_unload;
// dbg_notification_t dbg_null;
// dbg_notification_t dbg_process_attach;
// dbg_notification_t dbg_process_detach;
// dbg_notification_t dbg_process_exit;
// dbg_notification_t dbg_process_start;
// dbg_notification_t dbg_request_error;
// dbg_notification_t dbg_run_to;
// dbg_notification_t dbg_started_loading_bpts;
// dbg_notification_t dbg_step_into;
// dbg_notification_t dbg_step_over;
// dbg_notification_t dbg_step_until_ret;
// dbg_notification_t dbg_suspend_process;
// dbg_notification_t dbg_thread_exit;
// dbg_notification_t dbg_thread_start;
// dbg_notification_t dbg_trace;
// form_actions_t__dlgbtn_t dbt_cancel;
// form_actions_t__dlgbtn_t dbt_no;
// form_actions_t__dlgbtn_t dbt_yes;
// idb_event__event_code_t deleting_enum;
// idb_event__event_code_t deleting_enum_member;
// idb_event__event_code_t deleting_func;
// idb_event__event_code_t deleting_func_tail;
// idb_event__event_code_t deleting_segm;
// idb_event__event_code_t deleting_struc;
// idb_event__event_code_t deleting_struc_member;
// idb_event__event_code_t deleting_tryblks;
// std__float_denorm_style denorm_absent;
// std__float_denorm_style denorm_indeterminate;
// std__float_denorm_style denorm_present;
// idb_event__event_code_t destroyed_items;
// idb_event__event_code_t determined_main;
// idb_event__event_code_t dirtree_link;
// idb_event__event_code_t dirtree_mkdir;
// idb_event__event_code_t dirtree_move;
// idb_event__event_code_t dirtree_rank;
// idb_event__event_code_t dirtree_rmdir;
// idb_event__event_code_t dirtree_rminode;
// idb_event__event_code_t dirtree_segm_moved;
// hexplace_gen_t__data_kind_t dk_addr_names;
// hexplace_gen_t__data_kind_t dk_addr_text;
// hexplace_gen_t__data_kind_t dk_float;
// hexplace_gen_t__data_kind_t dk_int;
// dref_t dr_I;
// dref_t dr_O;
// dref_t dr_R;
// dref_t dr_S;
// dref_t dr_T;
// dref_t dr_U;
// dref_t dr_W;
// edge_type_t edge_back;
// edge_type_t edge_cross;
// edge_type_t edge_error;
// edge_type_t edge_forward;
// edge_type_t edge_subgraph;
// edge_type_t edge_tree;
// idb_event__event_code_t enum_bf_changed;
// idb_event__event_code_t enum_cmt_changed;
// idb_event__event_code_t enum_created;
// idb_event__event_code_t enum_deleted;
// idb_event__event_code_t enum_flag_changed;
// idb_event__event_code_t enum_member_created;
// idb_event__event_code_t enum_member_deleted;
// idb_event__event_code_t enum_ordinal_changed;
// idb_event__event_code_t enum_renamed;
// idb_event__event_code_t enum_width_changed;
// processor_t__event_t ev_add_cref;
// processor_t__event_t ev_add_dref;
// processor_t__event_t ev_adjust_argloc;
// processor_t__event_t ev_adjust_libfunc_ea;
// processor_t__event_t ev_adjust_refinfo;
// processor_t__event_t ev_ana_insn;
// processor_t__event_t ev_analyze_prolog;
// debugger_t__event_t ev_appcall;
// processor_t__event_t ev_arch_changed;
// processor_t__event_t ev_arg_addrs_ready;
// processor_t__event_t ev_asm_installed;
// processor_t__event_t ev_assemble;
// debugger_t__event_t ev_attach_process;
// processor_t__event_t ev_auto_queue_empty;
// debugger_t__event_t ev_bin_search;
// processor_t__event_t ev_broadcast;
// processor_t__event_t ev_calc_arglocs;
// processor_t__event_t ev_calc_cdecl_purged_bytes;
// processor_t__event_t ev_calc_next_eas;
// processor_t__event_t ev_calc_purged_bytes;
// processor_t__event_t ev_calc_retloc;
// processor_t__event_t ev_calc_spdelta;
// processor_t__event_t ev_calc_step_over;
// processor_t__event_t ev_calc_switch_cases;
// processor_t__event_t ev_calc_varglocs;
// processor_t__event_t ev_calcrel;
// processor_t__event_t ev_can_have_type;
// debugger_t__event_t ev_check_bpt;
// processor_t__event_t ev_clean_tbit;
// debugger_t__event_t ev_cleanup_appcall;
// debugger_t__event_t ev_close_file;
// processor_t__event_t ev_cmp_operands;
// processor_t__event_t ev_coagulate;
// processor_t__event_t ev_coagulate_dref;
// processor_t__event_t ev_create_flat_group;
// processor_t__event_t ev_create_func_frame;
// processor_t__event_t ev_create_merge_handlers;
// processor_t__event_t ev_create_switch_xrefs;
// processor_t__event_t ev_creating_segm;
// debugger_t__event_t ev_dbg_enable_trace;
// processor_t__event_t ev_decorate_name;
// processor_t__event_t ev_del_cref;
// processor_t__event_t ev_del_dref;
// processor_t__event_t ev_delay_slot_insn;
// processor_t__event_t ev_demangle_name;
// debugger_t__event_t ev_detach_process;
// processor_t__event_t ev_emu_insn;
// processor_t__event_t ev_endbinary;
// processor_t__event_t ev_ending_undo;
// processor_t__event_t ev_equal_reglocs;
// debugger_t__event_t ev_eval_lowcnd;
// debugger_t__event_t ev_exit_process;
// processor_t__event_t ev_extract_address;
// processor_t__event_t ev_find_op_value;
// processor_t__event_t ev_find_reg_value;
// processor_t__event_t ev_func_bounds;
// processor_t__event_t ev_gen_asm_or_lst;
// processor_t__event_t ev_gen_map_file;
// processor_t__event_t ev_gen_regvar_def;
// processor_t__event_t ev_gen_src_file_lnnum;
// processor_t__event_t ev_gen_stkvar_def;
// processor_t__event_t ev_get_abi_info;
// processor_t__event_t ev_get_autocmt;
// processor_t__event_t ev_get_bg_color;
// processor_t__event_t ev_get_cc_regs;
// processor_t__event_t ev_get_code16_mode;
// processor_t__event_t ev_get_dbr_opnum;
// debugger_t__event_t ev_get_debapp_attrs;
// debugger_t__event_t ev_get_debmod_extensions;
// debugger_t__event_t ev_get_debug_event;
// processor_t__event_t ev_get_default_enum_size;
// processor_t__event_t ev_get_frame_retsize;
// processor_t__event_t ev_get_idd_opinfo;
// processor_t__event_t ev_get_macro_insn_head;
// debugger_t__event_t ev_get_memory_info;
// processor_t__event_t ev_get_operand_string;
// debugger_t__event_t ev_get_processes;
// processor_t__event_t ev_get_procmod;
// processor_t__event_t ev_get_reg_accesses;
// processor_t__event_t ev_get_reg_info;
// processor_t__event_t ev_get_reg_name;
// processor_t__event_t ev_get_simd_types;
// debugger_t__event_t ev_get_srcinfo_path;
// processor_t__event_t ev_get_stkarg_area_info;
// processor_t__event_t ev_get_stkvar_scale_factor;
// processor_t__event_t ev_getreg;
// processor_t__event_t ev_init;
// debugger_t__event_t ev_init_debugger;
// processor_t__event_t ev_insn_reads_tbit;
// processor_t__event_t ev_is_align_insn;
// processor_t__event_t ev_is_alloca_probe;
// processor_t__event_t ev_is_basic_block_end;
// processor_t__event_t ev_is_call_insn;
// processor_t__event_t ev_is_cond_insn;
// processor_t__event_t ev_is_control_flow_guard;
// processor_t__event_t ev_is_far_jump;
// processor_t__event_t ev_is_indirect_jump;
// processor_t__event_t ev_is_insn_table_jump;
// processor_t__event_t ev_is_jump_func;
// processor_t__event_t ev_is_ret_insn;
// processor_t__event_t ev_is_sane_insn;
// processor_t__event_t ev_is_sp_based;
// processor_t__event_t ev_is_switch;
// debugger_t__event_t ev_is_tracing_enabled;
// processor_t__event_t ev_last_cb_before_debugger;
// processor_t__event_t ev_last_cb_before_loader;
// processor_t__event_t ev_last_cb_before_type_callbacks;
// processor_t__event_t ev_loader;
// processor_t__event_t ev_loader_elf_machine;
// processor_t__event_t ev_lower_func_type;
// debugger_t__event_t ev_map_address;
// processor_t__event_t ev_max_ptr_size;
// processor_t__event_t ev_may_be_func;
// processor_t__event_t ev_may_show_sreg;
// processor_t__event_t ev_moving_segm;
// processor_t__event_t ev_newasm;
// processor_t__event_t ev_newbinary;
// processor_t__event_t ev_newfile;
// processor_t__event_t ev_newprc;
// processor_t__event_t ev_next_exec_insn;
// processor_t__event_t ev_obsolete1;
// processor_t__event_t ev_obsolete2;
// processor_t__event_t ev_oldfile;
// debugger_t__event_t ev_open_file;
// processor_t__event_t ev_out_assumes;
// processor_t__event_t ev_out_data;
// processor_t__event_t ev_out_footer;
// processor_t__event_t ev_out_header;
// processor_t__event_t ev_out_insn;
// processor_t__event_t ev_out_label;
// processor_t__event_t ev_out_mnem;
// processor_t__event_t ev_out_operand;
// processor_t__event_t ev_out_segend;
// processor_t__event_t ev_out_segstart;
// processor_t__event_t ev_out_special_item;
// processor_t__event_t ev_privrange_changed;
// debugger_t__event_t ev_read_file;
// debugger_t__event_t ev_read_memory;
// debugger_t__event_t ev_read_registers;
// processor_t__event_t ev_realcvt;
// debugger_t__event_t ev_rebase_if_required_to;
// processor_t__event_t ev_rename;
// processor_t__event_t ev_replaying_undo;
// debugger_t__event_t ev_request_pause;
// debugger_t__event_t ev_resume;
// debugger_t__event_t ev_rexec;
// debugger_t__event_t ev_send_ioctl;
// processor_t__event_t ev_set_code16_mode;
// debugger_t__event_t ev_set_exception_info;
// processor_t__event_t ev_set_idp_options;
// processor_t__event_t ev_set_proc_options;
// debugger_t__event_t ev_set_resume_mode;
// processor_t__event_t ev_setup_til;
// debugger_t__event_t ev_start_process;
// processor_t__event_t ev_str2reg;
// debugger_t__event_t ev_suspended;
// processor_t__event_t ev_term;
// debugger_t__event_t ev_term_debugger;
// debugger_t__event_t ev_thread_continue;
// debugger_t__event_t ev_thread_get_sreg_base;
// debugger_t__event_t ev_thread_suspend;
// processor_t__event_t ev_treat_hindering_item;
// processor_t__event_t ev_undefine;
// debugger_t__event_t ev_update_bpts;
// debugger_t__event_t ev_update_call_stack;
// debugger_t__event_t ev_update_lowcnds;
// processor_t__event_t ev_use_arg_types;
// processor_t__event_t ev_use_regarg_type;
// processor_t__event_t ev_use_stkarg_type;
// processor_t__event_t ev_validate_flirt_func;
// processor_t__event_t ev_verify_noreturn;
// processor_t__event_t ev_verify_sp;
// debugger_t__event_t ev_write_file;
// debugger_t__event_t ev_write_memory;
// debugger_t__event_t ev_write_register;
// idb_event__event_code_t expanding_struc;
// idb_event__event_code_t extlang_changed;
// idb_event__event_code_t extra_cmt_changed;
// filetype_t f_AIXAR;
// filetype_t f_AOUT;
// filetype_t f_AR;
// filetype_t f_BIN;
// filetype_t f_COFF;
// filetype_t f_COM;
// filetype_t f_COM_old;
// filetype_t f_DRV;
// filetype_t f_ELF;
// filetype_t f_EXE;
// filetype_t f_EXE_old;
// filetype_t f_HEX;
// filetype_t f_LE;
// filetype_t f_LOADER;
// filetype_t f_LX;
// filetype_t f_MACHO;
// filetype_t f_MEX;
// filetype_t f_NLM;
// filetype_t f_OMF;
// filetype_t f_OMFLIB;
// filetype_t f_PE;
// filetype_t f_PRC;
// filetype_t f_PSXOBJ;
// filetype_t f_SREC;
// filetype_t f_W32RUN;
// filetype_t f_WIN;
// filetype_t f_ZIP;
// fc_block_type_t fcb_cndret;
// fc_block_type_t fcb_enoret;
// fc_block_type_t fcb_error;
// fc_block_type_t fcb_extern;
// fc_block_type_t fcb_indjump;
// fc_block_type_t fcb_noret;
// fc_block_type_t fcb_normal;
// fc_block_type_t fcb_ret;
// cref_t fl_CF;
// cref_t fl_CN;
// cref_t fl_F;
// cref_t fl_JF;
// cref_t fl_JN;
// cref_t fl_U;
// cref_t fl_USobsolete;
// idb_event__event_code_t flow_chart_created;
// idb_event__event_code_t frame_deleted;
// idb_event__event_code_t func_added;
// idb_event__event_code_t func_deleted;
// idb_event__event_code_t func_noret_changed;
// idb_event__event_code_t func_tail_appended;
// idb_event__event_code_t func_tail_deleted;
// idb_event__event_code_t func_updated;
// graph_item_type_t git_edge;
// graph_item_type_t git_elp;
// graph_item_type_t git_node;
// graph_item_type_t git_none;
// graph_item_type_t git_text;
// graph_item_type_t git_tool;
// graph_notification_t grcode_attach_menu_item;
// graph_notification_t grcode_calculating_layout;
// graph_notification_t grcode_center_on;
// graph_notification_t grcode_change_group_visibility;
// graph_notification_t grcode_changed_graph;
// graph_notification_t grcode_clear;
// graph_notification_t grcode_clicked;
// graph_notification_t grcode_create_circle_layout;
// graph_notification_t grcode_create_digraph_layout;
// graph_notification_t grcode_create_disasm_graph1;
// graph_notification_t grcode_create_disasm_graph2;
// graph_notification_t grcode_create_graph_viewer;
// graph_notification_t grcode_create_group;
// graph_notification_t grcode_create_mutable_graph;
// graph_notification_t grcode_create_tree_layout;
// graph_notification_t grcode_create_user_graph_place;
// graph_notification_t grcode_creating_group;
// graph_notification_t grcode_dblclicked;
// graph_notification_t grcode_del_custom_layout;
// graph_notification_t grcode_del_node_info;
// graph_notification_t grcode_delete_group;
// graph_notification_t grcode_delete_mutable_graph;
// graph_notification_t grcode_deleting_group;
// graph_notification_t grcode_destroyed;
// graph_notification_t grcode_edge_infos_wrapper_clear;
// graph_notification_t grcode_edge_infos_wrapper_copy;
// graph_notification_t grcode_empty;
// graph_notification_t grcode_find_subgraph_node;
// graph_notification_t grcode_fit_window;
// graph_notification_t grcode_get_curnode;
// graph_notification_t grcode_get_custom_layout;
// graph_notification_t grcode_get_gli;
// graph_notification_t grcode_get_graph_groups;
// graph_notification_t grcode_get_graph_viewer;
// graph_notification_t grcode_get_node_info;
// graph_notification_t grcode_get_node_representative;
// graph_notification_t grcode_get_selection;
// graph_notification_t grcode_get_viewer_graph;
// graph_notification_t grcode_gotfocus;
// graph_notification_t grcode_group_visibility;
// graph_notification_t grcode_is_visible_node;
// graph_notification_t grcode_layout_calculated;
// graph_notification_t grcode_lostfocus;
// graph_notification_t grcode_node_qty;
// graph_notification_t grcode_nrect;
// graph_notification_t grcode_refresh_viewer;
// graph_notification_t grcode_reserved;
// graph_notification_t grcode_reserved2;
// graph_notification_t grcode_set_custom_layout;
// graph_notification_t grcode_set_edge;
// graph_notification_t grcode_set_gli;
// graph_notification_t grcode_set_graph_groups;
// graph_notification_t grcode_set_node_info;
// graph_notification_t grcode_set_titlebar_height;
// graph_notification_t grcode_set_viewer_graph;
// graph_notification_t grcode_user_draw;
// graph_notification_t grcode_user_hint;
// graph_notification_t grcode_user_refresh;
// graph_notification_t grcode_user_size;
// graph_notification_t grcode_user_text;
// graph_notification_t grcode_user_title;
// graph_notification_t grcode_viewer_create_groups;
// graph_notification_t grcode_viewer_create_groups_vec;
// graph_notification_t grcode_viewer_delete_groups;
// graph_notification_t grcode_viewer_delete_groups_vec;
// graph_notification_t grcode_viewer_groups_visibility;
// graph_notification_t grcode_viewer_groups_visibility_vec;
// idb_event__event_code_t idasgn_loaded;
// input_event_kind_t iek_key_press;
// input_event_kind_t iek_key_release;
// input_event_kind_t iek_mouse_button_press;
// input_event_kind_t iek_mouse_button_release;
// input_event_kind_t iek_mouse_wheel;
// input_event_kind_t iek_shortcut;
// input_event_kind_t iek_unknown;
// hexplace_gen_t__int_format_t if_hex;
// hexplace_gen_t__int_format_t if_signed;
// hexplace_gen_t__int_format_t if_unsigned;
// idb_event__event_code_t item_color_changed;
// idb_event__event_code_t kernel_config_loaded;
// locchange_reason_t lcr_auto_switch;
// locchange_reason_t lcr_goto;
// locchange_reason_t lcr_internal;
// locchange_reason_t lcr_jump;
// locchange_reason_t lcr_navigate;
// locchange_reason_t lcr_scroll;
// locchange_reason_t lcr_unknown;
// locchange_reason_t lcr_user_switch;
// idb_event__event_code_t loader_finished;
// idb_event__event_code_t local_types_changed;
// idb_event__event_code_t make_code;
// idb_event__event_code_t make_data;
// mbox_kind_t mbox_error;
// mbox_kind_t mbox_feedback;
// mbox_kind_t mbox_filestruct;
// mbox_kind_t mbox_hide;
// mbox_kind_t mbox_info;
// mbox_kind_t mbox_internal;
// mbox_kind_t mbox_nomem;
// mbox_kind_t mbox_readerror;
// mbox_kind_t mbox_replace;
// mbox_kind_t mbox_wait;
// mbox_kind_t mbox_warning;
// mbox_kind_t mbox_writeerror;
// std__memory_order memory_order_acq_rel;
// std__memory_order memory_order_acquire;
// std__memory_order memory_order_consume;
// std__memory_order memory_order_relaxed;
// std__memory_order memory_order_release;
// std__memory_order memory_order_seq_cst;
// msg_notification_t msg_activated;
// msg_notification_t msg_click;
// msg_notification_t msg_closed;
// msg_notification_t msg_dblclick;
// msg_notification_t msg_deactivated;
// msg_notification_t msg_keydown;
// navaddr_type_t nat_auto;
// navaddr_type_t nat_cod;
// navaddr_type_t nat_cur;
// navaddr_type_t nat_dat;
// navaddr_type_t nat_err;
// navaddr_type_t nat_ext;
// navaddr_type_t nat_fun;
// navaddr_type_t nat_gap;
// navaddr_type_t nat_hlo;
// navaddr_type_t nat_last;
// navaddr_type_t nat_lib;
// navaddr_type_t nat_lum;
// navaddr_type_t nat_und;
// encoder_t__notify_recerr_t nr_none;
// encoder_t__notify_recerr_t nr_once;
// idb_event__event_code_t op_ti_changed;
// idb_event__event_code_t op_type_changed;
// idb_event__event_code_t range_cmt_changed;
// regval_type_t reg_binary;
// regval_type_t reg_dword;
// regval_type_t reg_sz;
// regval_type_t reg_unknown;
// idb_event__event_code_t renamed;
// idb_event__event_code_t renaming_enum;
// idb_event__event_code_t renaming_struc;
// idb_event__event_code_t renaming_struc_member;
// std__float_round_style round_indeterminate;
// std__float_round_style round_to_nearest;
// std__float_round_style round_toward_infinity;
// std__float_round_style round_toward_neg_infinity;
// std__float_round_style round_toward_zero;
// idb_event__event_code_t savebase;
// sclass_t sc_auto;
// sclass_t sc_ext;
// sclass_t sc_friend;
// sclass_t sc_reg;
// sclass_t sc_stat;
// sclass_t sc_type;
// sclass_t sc_unk;
// sclass_t sc_virt;
// idb_event__event_code_t segm_added;
// idb_event__event_code_t segm_attrs_updated;
// idb_event__event_code_t segm_class_changed;
// idb_event__event_code_t segm_deleted;
// idb_event__event_code_t segm_end_changed;
// idb_event__event_code_t segm_moved;
// idb_event__event_code_t segm_name_changed;
// idb_event__event_code_t segm_start_changed;
// idb_event__event_code_t set_func_end;
// idb_event__event_code_t set_func_start;
// idb_event__event_code_t sgr_changed;
// idb_event__event_code_t sgr_deleted;
// idb_event__event_code_t stkpnts_changed;
// idb_event__event_code_t struc_align_changed;
// idb_event__event_code_t struc_cmt_changed;
// idb_event__event_code_t struc_created;
// idb_event__event_code_t struc_deleted;
// idb_event__event_code_t struc_expanded;
// idb_event__event_code_t struc_member_changed;
// idb_event__event_code_t struc_member_created;
// idb_event__event_code_t struc_member_deleted;
// idb_event__event_code_t struc_member_renamed;
// idb_event__event_code_t struc_renamed;
// idb_event__event_code_t tail_owner_changed;
// tev_type_t tev_bpt;
// tev_type_t tev_call;
// tev_type_t tev_event;
// tev_type_t tev_insn;
// tev_type_t tev_max;
// tev_type_t tev_mem;
// tev_type_t tev_none;
// tev_type_t tev_ret;
// idb_event__event_code_t thunk_func_created;
// idb_event__event_code_t ti_changed;
// idb_event__event_code_t tryblks_updated;
// ui_notification_t ui_activate_widget;
// ui_notification_t ui_add_idckey;
// ui_notification_t ui_addons;
// ui_notification_t ui_analyzer_options;
// ui_notification_t ui_ask_addr;
// ui_notification_t ui_ask_buttons;
// ui_notification_t ui_ask_file;
// ui_notification_t ui_ask_form;
// ui_notification_t ui_ask_long;
// ui_notification_t ui_ask_seg;
// ui_notification_t ui_ask_str;
// ui_notification_t ui_ask_text;
// ui_notification_t ui_attach_action_to_menu;
// ui_notification_t ui_attach_action_to_popup;
// ui_notification_t ui_attach_action_to_toolbar;
// ui_notification_t ui_attach_dynamic_action_to_popup;
// ui_notification_t ui_banner;
// ui_notification_t ui_beep;
// ui_notification_t ui_broadcast;
// ui_notification_t ui_cancel_exec_request;
// ui_notification_t ui_cancel_thread_exec_requests;
// ui_notification_t ui_choose;
// ui_notification_t ui_choose_bookmark;
// ui_notification_t ui_chooser_default_enter;
// ui_notification_t ui_close_chooser;
// ui_notification_t ui_close_widget;
// ui_notification_t ui_clr_cancelled;
// ui_notification_t ui_copywarn;
// ui_notification_t ui_create_code_viewer;
// ui_notification_t ui_create_custom_viewer;
// ui_notification_t ui_create_desktop_widget;
// ui_notification_t ui_create_empty_widget;
// ui_notification_t ui_create_menu;
// ui_notification_t ui_create_source_viewer;
// ui_notification_t ui_create_toolbar;
// ui_notification_t ui_current_widget_changed;
// ui_notification_t ui_custom_viewer_jump;
// ui_notification_t ui_custom_viewer_set_userdata;
// ui_notification_t ui_database_closed;
// ui_notification_t ui_database_inited;
// ui_notification_t ui_dbg_add_bpt;
// ui_notification_t ui_dbg_add_bpt_tev;
// ui_notification_t ui_dbg_add_call_tev;
// ui_notification_t ui_dbg_add_debug_event;
// ui_notification_t ui_dbg_add_insn_tev;
// ui_notification_t ui_dbg_add_many_tevs;
// ui_notification_t ui_dbg_add_oldbpt;
// ui_notification_t ui_dbg_add_path_mapping;
// ui_notification_t ui_dbg_add_ret_tev;
// ui_notification_t ui_dbg_add_tev;
// ui_notification_t ui_dbg_add_thread;
// ui_notification_t ui_dbg_add_vmod;
// ui_notification_t ui_dbg_attach_process;
// ui_notification_t ui_dbg_begin;
// ui_notification_t ui_dbg_bin_search;
// ui_notification_t ui_dbg_bring_to_front;
// ui_notification_t ui_dbg_change_bptlocs;
// ui_notification_t ui_dbg_check_bpt;
// ui_notification_t ui_dbg_choose_trace_file;
// ui_notification_t ui_dbg_clear_requests_queue;
// ui_notification_t ui_dbg_clear_trace;
// ui_notification_t ui_dbg_collect_stack_trace;
// ui_notification_t ui_dbg_compare_bpt_locs;
// ui_notification_t ui_dbg_continue_process;
// ui_notification_t ui_dbg_define_exception;
// ui_notification_t ui_dbg_del_bpt;
// ui_notification_t ui_dbg_del_bptgrp;
// ui_notification_t ui_dbg_del_oldbpt;
// ui_notification_t ui_dbg_del_thread;
// ui_notification_t ui_dbg_del_vmod;
// ui_notification_t ui_dbg_detach_process;
// ui_notification_t ui_dbg_diff_trace_file;
// ui_notification_t ui_dbg_edit_manual_regions;
// ui_notification_t ui_dbg_enable_bblk_trace;
// ui_notification_t ui_dbg_enable_bpt;
// ui_notification_t ui_dbg_enable_bptgrp;
// ui_notification_t ui_dbg_enable_func_trace;
// ui_notification_t ui_dbg_enable_insn_trace;
// ui_notification_t ui_dbg_enable_manual_regions;
// ui_notification_t ui_dbg_enable_oldbpt;
// ui_notification_t ui_dbg_enable_step_trace;
// ui_notification_t ui_dbg_end;
// ui_notification_t ui_dbg_exit_process;
// ui_notification_t ui_dbg_find_bpt;
// ui_notification_t ui_dbg_for_all_bpts;
// ui_notification_t ui_dbg_get_bblk_trace_options;
// ui_notification_t ui_dbg_get_bpt;
// ui_notification_t ui_dbg_get_bpt_group;
// ui_notification_t ui_dbg_get_bpt_qty;
// ui_notification_t ui_dbg_get_bpt_tev_ea;
// ui_notification_t ui_dbg_get_bptloc_string;
// ui_notification_t ui_dbg_get_call_tev_callee;
// ui_notification_t ui_dbg_get_current_source_file;
// ui_notification_t ui_dbg_get_current_source_line;
// ui_notification_t ui_dbg_get_current_thread;
// ui_notification_t ui_dbg_get_debug_event;
// ui_notification_t ui_dbg_get_event_cond;
// ui_notification_t ui_dbg_get_first_module;
// ui_notification_t ui_dbg_get_func_trace_options;
// ui_notification_t ui_dbg_get_global_var;
// ui_notification_t ui_dbg_get_grp_bpts;
// ui_notification_t ui_dbg_get_insn_tev_reg_mem;
// ui_notification_t ui_dbg_get_insn_tev_reg_result;
// ui_notification_t ui_dbg_get_insn_tev_reg_result_i;
// ui_notification_t ui_dbg_get_insn_tev_reg_val;
// ui_notification_t ui_dbg_get_insn_tev_reg_val_i;
// ui_notification_t ui_dbg_get_insn_trace_options;
// ui_notification_t ui_dbg_get_ip_val;
// ui_notification_t ui_dbg_get_local_var;
// ui_notification_t ui_dbg_get_local_vars;
// ui_notification_t ui_dbg_get_manual_regions;
// ui_notification_t ui_dbg_get_memory_info;
// ui_notification_t ui_dbg_get_module_info;
// ui_notification_t ui_dbg_get_next_module;
// ui_notification_t ui_dbg_get_process_options;
// ui_notification_t ui_dbg_get_process_state;
// ui_notification_t ui_dbg_get_processes;
// ui_notification_t ui_dbg_get_reg_info;
// ui_notification_t ui_dbg_get_reg_val;
// ui_notification_t ui_dbg_get_reg_val_i;
// ui_notification_t ui_dbg_get_reg_value_type;
// ui_notification_t ui_dbg_get_ret_tev_return;
// ui_notification_t ui_dbg_get_running_notification;
// ui_notification_t ui_dbg_get_running_request;
// ui_notification_t ui_dbg_get_sp_val;
// ui_notification_t ui_dbg_get_srcinfo_provider;
// ui_notification_t ui_dbg_get_step_trace_options;
// ui_notification_t ui_dbg_get_tev_ea;
// ui_notification_t ui_dbg_get_tev_event;
// ui_notification_t ui_dbg_get_tev_info;
// ui_notification_t ui_dbg_get_tev_memory_info;
// ui_notification_t ui_dbg_get_tev_qty;
// ui_notification_t ui_dbg_get_tev_tid;
// ui_notification_t ui_dbg_get_tev_type;
// ui_notification_t ui_dbg_get_thread_qty;
// ui_notification_t ui_dbg_get_trace_base_address;
// ui_notification_t ui_dbg_get_trace_dynamic_register_set;
// ui_notification_t ui_dbg_get_trace_file_desc;
// ui_notification_t ui_dbg_get_trace_platform;
// ui_notification_t ui_dbg_getn_bpt;
// ui_notification_t ui_dbg_getn_thread;
// ui_notification_t ui_dbg_getn_thread_name;
// ui_notification_t ui_dbg_graph_trace;
// ui_notification_t ui_dbg_handle_debug_event;
// ui_notification_t ui_dbg_hide_all_bpts;
// ui_notification_t ui_dbg_internal_appcall;
// ui_notification_t ui_dbg_internal_cleanup_appcall;
// ui_notification_t ui_dbg_internal_get_elang;
// ui_notification_t ui_dbg_internal_get_sreg_base;
// ui_notification_t ui_dbg_internal_ioctl;
// ui_notification_t ui_dbg_internal_set_elang;
// ui_notification_t ui_dbg_is_bblk_trace_enabled;
// ui_notification_t ui_dbg_is_busy;
// ui_notification_t ui_dbg_is_func_trace_enabled;
// ui_notification_t ui_dbg_is_insn_trace_enabled;
// ui_notification_t ui_dbg_is_step_trace_enabled;
// ui_notification_t ui_dbg_is_valid_trace_file;
// ui_notification_t ui_dbg_list_bptgrps;
// ui_notification_t ui_dbg_load_dbg_dbginfo;
// ui_notification_t ui_dbg_load_debugger;
// ui_notification_t ui_dbg_load_trace_file;
// ui_notification_t ui_dbg_map_source_file_path;
// ui_notification_t ui_dbg_map_source_path;
// ui_notification_t ui_dbg_modify_source_paths;
// ui_notification_t ui_dbg_read_memory;
// ui_notification_t ui_dbg_read_registers;
// ui_notification_t ui_dbg_register_provider;
// ui_notification_t ui_dbg_rename_bptgrp;
// ui_notification_t ui_dbg_request_add_bpt;
// ui_notification_t ui_dbg_request_add_oldbpt;
// ui_notification_t ui_dbg_request_attach_process;
// ui_notification_t ui_dbg_request_clear_trace;
// ui_notification_t ui_dbg_request_continue_process;
// ui_notification_t ui_dbg_request_del_bpt;
// ui_notification_t ui_dbg_request_del_oldbpt;
// ui_notification_t ui_dbg_request_detach_process;
// ui_notification_t ui_dbg_request_enable_bblk_trace;
// ui_notification_t ui_dbg_request_enable_bpt;
// ui_notification_t ui_dbg_request_enable_func_trace;
// ui_notification_t ui_dbg_request_enable_insn_trace;
// ui_notification_t ui_dbg_request_enable_oldbpt;
// ui_notification_t ui_dbg_request_enable_step_trace;
// ui_notification_t ui_dbg_request_exit_process;
// ui_notification_t ui_dbg_request_resume_thread;
// ui_notification_t ui_dbg_request_run_to;
// ui_notification_t ui_dbg_request_select_thread;
// ui_notification_t ui_dbg_request_set_bblk_trace_options;
// ui_notification_t ui_dbg_request_set_func_trace_options;
// ui_notification_t ui_dbg_request_set_insn_trace_options;
// ui_notification_t ui_dbg_request_set_reg_val;
// ui_notification_t ui_dbg_request_set_resume_mode;
// ui_notification_t ui_dbg_request_set_step_trace_options;
// ui_notification_t ui_dbg_request_start_process;
// ui_notification_t ui_dbg_request_step_into;
// ui_notification_t ui_dbg_request_step_over;
// ui_notification_t ui_dbg_request_step_until_ret;
// ui_notification_t ui_dbg_request_suspend_process;
// ui_notification_t ui_dbg_request_suspend_thread;
// ui_notification_t ui_dbg_resume_thread;
// ui_notification_t ui_dbg_retrieve_exceptions;
// ui_notification_t ui_dbg_run_requests;
// ui_notification_t ui_dbg_run_to;
// ui_notification_t ui_dbg_save_trace_file;
// ui_notification_t ui_dbg_select_thread;
// ui_notification_t ui_dbg_set_bblk_trace_options;
// ui_notification_t ui_dbg_set_bpt_group;
// ui_notification_t ui_dbg_set_bptloc_group;
// ui_notification_t ui_dbg_set_bptloc_string;
// ui_notification_t ui_dbg_set_debugger_options;
// ui_notification_t ui_dbg_set_event_cond;
// ui_notification_t ui_dbg_set_func_trace_options;
// ui_notification_t ui_dbg_set_highlight_trace_options;
// ui_notification_t ui_dbg_set_insn_trace_options;
// ui_notification_t ui_dbg_set_manual_regions;
// ui_notification_t ui_dbg_set_process_options;
// ui_notification_t ui_dbg_set_process_state;
// ui_notification_t ui_dbg_set_reg_val;
// ui_notification_t ui_dbg_set_reg_val_i;
// ui_notification_t ui_dbg_set_remote_debugger;
// ui_notification_t ui_dbg_set_resume_mode;
// ui_notification_t ui_dbg_set_step_trace_options;
// ui_notification_t ui_dbg_set_trace_base_address;
// ui_notification_t ui_dbg_set_trace_dynamic_register_set;
// ui_notification_t ui_dbg_set_trace_file_desc;
// ui_notification_t ui_dbg_set_trace_platform;
// ui_notification_t ui_dbg_set_trace_size;
// ui_notification_t ui_dbg_srcdbg_request_step_into;
// ui_notification_t ui_dbg_srcdbg_request_step_over;
// ui_notification_t ui_dbg_srcdbg_request_step_until_ret;
// ui_notification_t ui_dbg_srcdbg_step_into;
// ui_notification_t ui_dbg_srcdbg_step_over;
// ui_notification_t ui_dbg_srcdbg_step_until_ret;
// ui_notification_t ui_dbg_start_process;
// ui_notification_t ui_dbg_step_into;
// ui_notification_t ui_dbg_step_over;
// ui_notification_t ui_dbg_step_until_ret;
// ui_notification_t ui_dbg_store_exceptions;
// ui_notification_t ui_dbg_suspend_process;
// ui_notification_t ui_dbg_suspend_thread;
// ui_notification_t ui_dbg_unregister_provider;
// ui_notification_t ui_dbg_update_bpt;
// ui_notification_t ui_dbg_wait_for_next_event;
// ui_notification_t ui_dbg_write_memory;
// ui_notification_t ui_dbg_write_register;
// ui_notification_t ui_debugger_menu_change;
// ui_notification_t ui_delete_menu;
// ui_notification_t ui_delete_toolbar;
// ui_notification_t ui_desktop_applied;
// ui_notification_t ui_destroy_custom_viewer;
// ui_notification_t ui_destroying_plugmod;
// ui_notification_t ui_destroying_procmod;
// ui_notification_t ui_detach_action_from_menu;
// ui_notification_t ui_detach_action_from_popup;
// ui_notification_t ui_detach_action_from_toolbar;
// ui_notification_t ui_display_widget;
// ui_notification_t ui_ea_viewer_history_info;
// ui_notification_t ui_ea_viewer_history_push_and_jump;
// ui_notification_t ui_enable_chooser_item_attrs;
// ui_notification_t ui_execute_sync;
// ui_notification_t ui_execute_ui_requests;
// ui_notification_t ui_execute_ui_requests_list;
// ui_notification_t ui_find_widget;
// ui_notification_t ui_finish_populating_widget_popup;
// ui_notification_t ui_free_custom_icon;
// ui_notification_t ui_gen_disasm_text;
// ui_notification_t ui_gen_idanode_text;
// ui_notification_t ui_genfile_callback;
// ui_notification_t ui_get_action_attr;
// ui_notification_t ui_get_active_modal_widget;
// ui_notification_t ui_get_chooser_data;
// ui_notification_t ui_get_chooser_item_attrs;
// ui_notification_t ui_get_chooser_obj;
// ui_notification_t ui_get_curline;
// ui_notification_t ui_get_curplace;
// ui_notification_t ui_get_current_viewer;
// ui_notification_t ui_get_current_widget;
// ui_notification_t ui_get_cursor;
// ui_notification_t ui_get_custom_viewer_curline;
// ui_notification_t ui_get_custom_viewer_hint;
// ui_notification_t ui_get_custom_viewer_location;
// ui_notification_t ui_get_custom_viewer_place_xcoord;
// ui_notification_t ui_get_ea_hint;
// ui_notification_t ui_get_highlight_2;
// ui_notification_t ui_get_item_hint;
// ui_notification_t ui_get_kernel_version;
// ui_notification_t ui_get_key_code;
// ui_notification_t ui_get_lines_rendering_info;
// ui_notification_t ui_get_opnum;
// ui_notification_t ui_get_output_curline;
// ui_notification_t ui_get_output_cursor;
// ui_notification_t ui_get_output_selected_text;
// ui_notification_t ui_get_range_marker;
// ui_notification_t ui_get_registered_actions;
// ui_notification_t ui_get_renderer_type;
// ui_notification_t ui_get_synced_group;
// ui_notification_t ui_get_tab_size;
// ui_notification_t ui_get_user_input_event;
// ui_notification_t ui_get_viewer_place_type;
// ui_notification_t ui_get_viewer_user_data;
// ui_notification_t ui_get_widget_config;
// ui_notification_t ui_get_widget_title;
// ui_notification_t ui_get_widget_type;
// ui_notification_t ui_get_window_id;
// ui_notification_t ui_hexdumpea;
// ui_notification_t ui_idcstart;
// ui_notification_t ui_idcstop;
// ui_notification_t ui_initing_database;
// ui_notification_t ui_install_cli;
// ui_notification_t ui_install_custom_datatype_menu;
// ui_notification_t ui_install_custom_optype_menu;
// ui_notification_t ui_is_idaq;
// ui_notification_t ui_is_idaview;
// ui_notification_t ui_is_msg_inited;
// ui_notification_t ui_jump_in_custom_viewer;
// ui_notification_t ui_jumpto;
// ui_notification_t ui_last;
// ui_notification_t ui_load_custom_icon;
// ui_notification_t ui_load_custom_icon_file;
// ui_notification_t ui_load_file;
// ui_notification_t ui_lock_range_refresh;
// ui_notification_t ui_lookup_key_code;
// ui_notification_t ui_mbox;
// ui_notification_t ui_msg;
// ui_notification_t ui_msg_clear;
// ui_notification_t ui_msg_get_lines;
// ui_notification_t ui_msg_save;
// ui_notification_t ui_navband_ea;
// ui_notification_t ui_navband_pixel;
// ui_notification_t ui_noabort;
// ui_notification_t ui_null;
// ui_notification_t ui_obsolete_dbg_save_bpts;
// ui_notification_t ui_obsolete_del_idckey;
// ui_notification_t ui_obsolete_display_widget;
// ui_notification_t ui_obsolete_get_highlight;
// ui_notification_t ui_obsolete_get_user_strlist_options;
// ui_notification_t ui_obsolete_refresh_custom_code_viewer;
// ui_notification_t ui_obsolete_set_nav_colorizer;
// ui_notification_t ui_open_builtin;
// ui_notification_t ui_open_form;
// ui_notification_t ui_open_url;
// ui_notification_t ui_plugin_loaded;
// ui_notification_t ui_plugin_unloading;
// ui_notification_t ui_populating_widget_popup;
// ui_notification_t ui_postprocess_action;
// ui_notification_t ui_preprocess_action;
// ui_notification_t ui_process_action;
// ui_notification_t ui_range;
// ui_notification_t ui_read_range_selection;
// ui_notification_t ui_read_selection;
// ui_notification_t ui_ready_to_run;
// ui_notification_t ui_refresh;
// ui_notification_t ui_refresh_chooser;
// ui_notification_t ui_refresh_choosers;
// ui_notification_t ui_refresh_custom_viewer;
// ui_notification_t ui_refresh_navband;
// ui_notification_t ui_refreshmarked;
// ui_notification_t ui_register_action;
// ui_notification_t ui_register_timer;
// ui_notification_t ui_repaint_qwidget;
// ui_notification_t ui_restore_database_snapshot;
// ui_notification_t ui_resume;
// ui_notification_t ui_run_dbg;
// ui_notification_t ui_saved;
// ui_notification_t ui_saving;
// ui_notification_t ui_screen_ea_changed;
// ui_notification_t ui_screenea;
// ui_notification_t ui_set_cancelled;
// ui_notification_t ui_set_code_viewer_line_handlers;
// ui_notification_t ui_set_custom_viewer_handler;
// ui_notification_t ui_set_custom_viewer_handlers;
// ui_notification_t ui_set_custom_viewer_mode;
// ui_notification_t ui_set_custom_viewer_range;
// ui_notification_t ui_set_dock_pos;
// ui_notification_t ui_set_highlight;
// ui_notification_t ui_set_mappings;
// ui_notification_t ui_set_nav_colorizer;
// ui_notification_t ui_set_renderer_type;
// ui_notification_t ui_set_widget_config;
// ui_notification_t ui_setidle;
// ui_notification_t ui_setup_plugins_menu;
// ui_notification_t ui_show_rename_dialog;
// ui_notification_t ui_strchoose;
// ui_notification_t ui_suspend;
// ui_notification_t ui_sync_sources;
// ui_notification_t ui_take_database_snapshot;
// ui_notification_t ui_test_cancelled;
// ui_notification_t ui_unlock_range_refresh;
// ui_notification_t ui_unmarksel;
// ui_notification_t ui_unrecognized_config_directive;
// ui_notification_t ui_unregister_action;
// ui_notification_t ui_unregister_timer;
// ui_notification_t ui_update_action_attr;
// ui_notification_t ui_update_file_history;
// ui_notification_t ui_updated_actions;
// ui_notification_t ui_updating_actions;
// ui_notification_t ui_widget_closing;
// ui_notification_t ui_widget_invisible;
// ui_notification_t ui_widget_visible;
// idb_event__event_code_t updating_tryblks;
// idb_event__event_code_t upgraded;
// view_notification_t view_activated;
// view_notification_t view_click;
// view_notification_t view_close;
// view_notification_t view_created;
// view_notification_t view_curpos;
// view_notification_t view_dblclick;
// view_notification_t view_deactivated;
// view_notification_t view_keydown;
// view_notification_t view_loc_changed;
// view_notification_t view_mouse_moved;
// view_notification_t view_mouse_over;
// view_notification_t view_switched;

}