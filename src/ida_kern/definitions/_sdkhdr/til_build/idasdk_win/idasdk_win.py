# -*- coding: utf-8 -*-
#
# TARGET arch is: []
# WORD_SIZE is: 4
# POINTER_SIZE is: 8
# LONGDOUBLE_SIZE is: 8
#
import ctypes


class AsDictMixin:
    @classmethod
    def as_dict(cls, self):
        result = {}
        if not isinstance(self, AsDictMixin):
            # not a structure, assume it's already a python object
            return self
        if not hasattr(cls, "_fields_"):
            return result
        # sys.version_info >= (3, 5)
        # for (field, *_) in cls._fields_:  # noqa
        for field_tuple in cls._fields_:  # noqa
            field = field_tuple[0]
            if field.startswith('PADDING_'):
                continue
            value = getattr(self, field)
            type_ = type(value)
            if hasattr(value, "_length_") and hasattr(value, "_type_"):
                # array
                if not hasattr(type_, "as_dict"):
                    value = [v for v in value]
                else:
                    type_ = type_._type_
                    value = [type_.as_dict(v) for v in value]
            elif hasattr(value, "contents") and hasattr(value, "_type_"):
                # pointer
                try:
                    if not hasattr(type_, "as_dict"):
                        value = value.contents
                    else:
                        type_ = type_._type_
                        value = type_.as_dict(value.contents)
                except ValueError:
                    # nullptr
                    value = None
            elif isinstance(value, AsDictMixin):
                # other structure
                value = type_.as_dict(value)
            result[field] = value
        return result


class Structure(ctypes.Structure, AsDictMixin):

    def __init__(self, *args, **kwds):
        # We don't want to use positional arguments fill PADDING_* fields

        args = dict(zip(self.__class__._field_names_(), args))
        args.update(kwds)
        super(Structure, self).__init__(**args)

    def get_cfield(self, field):
        fieldType = None
        for fn, ftype in self._fields_:
            if fn == field:
                fieldType = ftype
                break
        else:
            raise AttributeError('Field %s not found' % field)

        fieldAttr = getattr(self.__class__, field)
        return fieldType.from_buffer(self, fieldAttr.offset)

    @classmethod
    def _field_names_(cls):
        if hasattr(cls, '_fields_'):
            return (f[0] for f in cls._fields_ if not f[0].startswith('PADDING'))
        else:
            return ()

    @classmethod
    def get_type(cls, field):
        for f in cls._fields_:
            if f[0] == field:
                return f[1]
        return None

    @classmethod
    def bind(cls, bound_fields):
        fields = {}
        for name, type_ in cls._fields_:
            if hasattr(type_, "restype"):
                if name in bound_fields:
                    if bound_fields[name] is None:
                        fields[name] = type_()
                    else:
                        # use a closure to capture the callback from the loop scope
                        fields[name] = (
                            type_((lambda callback: lambda *args: callback(*args))(
                                bound_fields[name]))
                        )
                    del bound_fields[name]
                else:
                    # default callback implementation (does nothing)
                    try:
                        default_ = type_(0).restype().value
                    except TypeError:
                        default_ = None
                    fields[name] = type_((
                        lambda default_: lambda *args: default_)(default_))
            else:
                # not a callback function, use default initialization
                if name in bound_fields:
                    fields[name] = bound_fields[name]
                    del bound_fields[name]
                else:
                    fields[name] = type_()
        if len(bound_fields) != 0:
            raise ValueError(
                "Cannot bind the following unknown callback(s) {}.{}".format(
                    cls.__name__, bound_fields.keys()
            ))
        return cls(**fields)


class Union(ctypes.Union, AsDictMixin):
    pass



def string_cast(char_pointer, encoding='utf-8', errors='strict'):
    value = ctypes.cast(char_pointer, ctypes.c_char_p).value
    if value is not None and encoding is not None:
        value = value.decode(encoding, errors=errors)
    return value


def char_pointer_cast(string, encoding='utf-8'):
    if encoding is not None:
        try:
            string = string.encode(encoding)
        except AttributeError:
            # In Python3, bytes has no encode attribute
            pass
    string = ctypes.c_char_p(string)
    return ctypes.cast(string, ctypes.POINTER(ctypes.c_char))



c_int128 = ctypes.c_ubyte*16
c_uint128 = c_int128
void = None
if ctypes.sizeof(ctypes.c_longdouble) == 8:
    c_long_double_t = ctypes.c_longdouble
else:
    c_long_double_t = ctypes.c_ubyte*8

class FunctionFactoryStub:
    def __getattr__(self, _):
      return ctypes.CFUNCTYPE(lambda y:y)

# libraries['FIXME_STUB'] explanation
# As you did not list (-l libraryname.so) a library that exports this function
# This is a non-working stub instead. 
# You can either re-run clan2py with -l /path/to/library.so
# Or manually fix this by comment the ctypes.CDLL loading
_libraries = {}
_libraries['FIXME_STUB'] = FunctionFactoryStub() #  ctypes.CDLL('FIXME_STUB')


def ctypeslib_define():
    
    class struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true___true_(Structure):
        pass
    
    class struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true_(Structure):
        pass
    
    class struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___(Structure):
        pass
    
    class struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_(Structure):
        pass
    
    struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___._pack_ = 1 # source:False
    struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___._fields_ = [
        ('_Myhead', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)),
        ('_Mysize', ctypes.c_uint64),
    ]
    
    struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true_._fields_ = [
        ('_Myval2', struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___),
    ]
    
    struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true___true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true___true_._fields_ = [
        ('_Myval2', struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true_),
    ]
    
    class struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____(Structure):
        pass
    
    class struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____(Structure):
        pass
    
    struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____._pack_ = 1 # source:False
    struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____._pack_ = 1 # source:False
    struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____._fields_ = [
        ('first', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____),
        ('second', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____),
    ]
    
    class struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____(Structure):
        pass
    
    class struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____(Structure):
        pass
    
    struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____._pack_ = 1 # source:False
    struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____._pack_ = 1 # source:False
    struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____._fields_ = [
        ('first', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____),
        ('second', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____),
    ]
    
    class struct_std___Compressed_pair_std__less__qstring_char____std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true___true_(Structure):
        pass
    
    class struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true_(Structure):
        pass
    
    class struct_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____(Structure):
        pass
    
    class struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_(Structure):
        pass
    
    struct_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____._pack_ = 1 # source:False
    struct_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____._fields_ = [
        ('_Myhead', ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)),
        ('_Mysize', ctypes.c_uint64),
    ]
    
    struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true_._fields_ = [
        ('_Myval2', struct_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____),
    ]
    
    struct_std___Compressed_pair_std__less__qstring_char____std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true___true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__less__qstring_char____std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true___true_._fields_ = [
        ('_Myval2', struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true_),
    ]
    
    class struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true___true_(Structure):
        pass
    
    class struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true_(Structure):
        pass
    
    class struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___(Structure):
        pass
    
    class struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_(Structure):
        pass
    
    struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___._pack_ = 1 # source:False
    struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___._fields_ = [
        ('_Myhead', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)),
        ('_Mysize', ctypes.c_uint64),
    ]
    
    struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true_._fields_ = [
        ('_Myval2', struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___),
    ]
    
    struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true___true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true___true_._fields_ = [
        ('_Myval2', struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true_),
    ]
    
    class struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______(Structure):
        pass
    
    class struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____(Structure):
        pass
    
    struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____._pack_ = 1 # source:False
    struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______._pack_ = 1 # source:False
    struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______._fields_ = [
        ('first', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____),
        ('second', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____),
    ]
    
    class struct_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_compare(Structure):
        pass
    
    class struct_std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false__(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('_Mypair', struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true___true_),
         ]
    
    class struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____(Structure):
        pass
    
    class struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____(Structure):
        pass
    
    struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____._pack_ = 1 # source:False
    struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____._pack_ = 1 # source:False
    struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____._fields_ = [
        ('first', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____),
        ('second', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____),
    ]
    
    class struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______(Structure):
        pass
    
    class struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____(Structure):
        pass
    
    struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____._pack_ = 1 # source:False
    struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______._pack_ = 1 # source:False
    struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______._fields_ = [
        ('first', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____),
        ('second', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____),
    ]
    
    class struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____(Structure):
        pass
    
    class struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____(Structure):
        pass
    
    struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____._pack_ = 1 # source:False
    struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____._pack_ = 1 # source:False
    struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____._fields_ = [
        ('first', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____),
        ('second', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____),
    ]
    
    class struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true___true_(Structure):
        pass
    
    class struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true_(Structure):
        pass
    
    class struct_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___(Structure):
        pass
    
    class struct_std___Tree_node_std__pair_const_int__int___void__P_(Structure):
        pass
    
    struct_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___._pack_ = 1 # source:False
    struct_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___._fields_ = [
        ('_Myhead', ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)),
        ('_Mysize', ctypes.c_uint64),
    ]
    
    struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true_._fields_ = [
        ('_Myval2', struct_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___),
    ]
    
    struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true___true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true___true_._fields_ = [
        ('_Myval2', struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true_),
    ]
    
    class struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____(Structure):
        pass
    
    class struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____(Structure):
        pass
    
    struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____._pack_ = 1 # source:False
    struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____._pack_ = 1 # source:False
    struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____._fields_ = [
        ('first', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____),
        ('second', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____),
    ]
    
    class struct_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_compare(Structure):
        pass
    
    class struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____(Structure):
        pass
    
    class struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____(Structure):
        pass
    
    struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____._pack_ = 1 # source:False
    struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____._pack_ = 1 # source:False
    struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____._fields_ = [
        ('first', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____),
        ('second', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____),
    ]
    
    class struct_std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false__(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('_Mypair', struct_std___Compressed_pair_std__less__qstring_char____std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true___true_),
         ]
    
    class struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('current', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____),
         ]
    
    class struct_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_compare(Structure):
        pass
    
    class struct_std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false__(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('_Mypair', struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true___true_),
         ]
    
    class struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('current', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____),
         ]
    
    class struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____(Structure):
        pass
    
    struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____._pack_ = 1 # source:False
    struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____._fields_ = [
        ('_Ptr', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)),
    ]
    
    class struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____(Structure):
        pass
    
    struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____._pack_ = 1 # source:False
    struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    class struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true___true_(Structure):
        pass
    
    class struct_std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true_(Structure):
        pass
    
    class struct_std___Tree_val_std___Tree_simple_types_int__(Structure):
        pass
    
    class struct_std___Tree_node_int__void__P_(Structure):
        pass
    
    struct_std___Tree_val_std___Tree_simple_types_int__._pack_ = 1 # source:False
    struct_std___Tree_val_std___Tree_simple_types_int__._fields_ = [
        ('_Myhead', ctypes.POINTER(struct_std___Tree_node_int__void__P_)),
        ('_Mysize', ctypes.c_uint64),
    ]
    
    struct_std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true_._fields_ = [
        ('_Myval2', struct_std___Tree_val_std___Tree_simple_types_int__),
    ]
    
    struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true___true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true___true_._fields_ = [
        ('_Myval2', struct_std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true_),
    ]
    
    class struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____(Structure):
        pass
    
    class struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___(Structure):
        pass
    
    struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___._pack_ = 1 # source:False
    struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____._pack_ = 1 # source:False
    struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____._fields_ = [
        ('first', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___),
        ('second', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___),
    ]
    
    class struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('current', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____),
         ]
    
    class struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('current', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____),
         ]
    
    class struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('current', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____),
         ]
    
    class struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('current', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____),
         ]
    
    class struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___P_(Structure):
        pass
    
    
    # values for enumeration 'std___Tree_child'
    std___Tree_child__enumvalues = {
        0: '_Right',
        1: '_Left',
        2: '_Unused',
    }
    _Right = 0
    _Left = 1
    _Unused = 2
    std___Tree_child = ctypes.c_uint32 # enum
    struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___P_._pack_ = 1 # source:False
    struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___P_._fields_ = [
        ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)),
        ('_Child', std___Tree_child),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____(Structure):
        pass
    
    struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____._pack_ = 1 # source:False
    struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____._fields_ = [
        ('_Ptr', ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)),
    ]
    
    class struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__(Structure):
        pass
    
    class struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____(Structure):
        pass
    
    struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____._pack_ = 1 # source:False
    struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____._fields_ = [
        ('_Ptr', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)),
    ]
    
    class struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____(Structure):
        pass
    
    struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____._pack_ = 1 # source:False
    struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    class struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____(Structure):
        pass
    
    struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____._pack_ = 1 # source:False
    struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    class struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_(Structure):
        pass
    
    class struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t(Structure):
        pass
    
    class struct_no_regs_t(Structure):
        pass
    
    struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t._pack_ = 1 # source:False
    struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t._fields_ = [
        ('regs', struct_no_regs_t),
        ('PADDING_0', ctypes.c_ubyte * 3),
        ('insn_cnt', ctypes.c_uint32),
    ]
    
    struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_._pack_ = 1 # source:False
    struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_._fields_ = [
        ('first', ctypes.c_uint64),
        ('second', struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t),
    ]
    
    std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
    struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_._pack_ = 1 # source:False
    struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_._fields_ = [
        ('_Left', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)),
        ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)),
        ('_Right', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)),
        ('_Color', ctypes.c_char),
        ('_Isnil', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 6),
        ('_Myval', std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___value_type),
    ]
    
    class struct_std__initializer_list_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__(Structure):
        pass
    
    struct_std__initializer_list_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__._pack_ = 1 # source:False
    struct_std__initializer_list_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__._fields_ = [
        ('_First', ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)),
        ('_Last', ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)),
    ]
    
    class struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('current', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____),
         ]
    
    class struct_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__(Structure):
        pass
    
    class struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('current', struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____),
         ]
    
    class struct_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_compare(Structure):
        pass
    
    class struct_std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false__(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('_Mypair', struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true___true_),
         ]
    
    class struct_std___Tree_id_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___P_(Structure):
        pass
    
    struct_std___Tree_id_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___P_._pack_ = 1 # source:False
    struct_std___Tree_id_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___P_._fields_ = [
        ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)),
        ('_Child', std___Tree_child),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____(Structure):
        pass
    
    struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____._pack_ = 1 # source:False
    struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____._fields_ = [
        ('_Ptr', ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)),
    ]
    
    class struct_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__(Structure):
        pass
    
    class struct_std___Compressed_pair_std__allocator_char16_t___std___String_val_std___Simple_types_char16_t____true_(Structure):
        pass
    
    class struct_std___String_val_std___Simple_types_char16_t__(Structure):
        pass
    
    class union_std___String_val_std___Simple_types_char16_t_____Bxty(Union):
        pass
    
    union_std___String_val_std___Simple_types_char16_t_____Bxty._pack_ = 1 # source:False
    union_std___String_val_std___Simple_types_char16_t_____Bxty._fields_ = [
        ('_Buf', ctypes.c_int16 * 8),
        ('_Ptr', ctypes.POINTER(ctypes.c_int16)),
        ('_Alias', ctypes.c_char * 8),
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std___String_val_std___Simple_types_char16_t__._pack_ = 1 # source:False
    struct_std___String_val_std___Simple_types_char16_t__._fields_ = [
        ('_Bx', union_std___String_val_std___Simple_types_char16_t_____Bxty),
        ('_Mysize', ctypes.c_uint64),
        ('_Myres', ctypes.c_uint64),
    ]
    
    struct_std___Compressed_pair_std__allocator_char16_t___std___String_val_std___Simple_types_char16_t____true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__allocator_char16_t___std___String_val_std___Simple_types_char16_t____true_._fields_ = [
        ('_Myval2', struct_std___String_val_std___Simple_types_char16_t__),
    ]
    
    class struct_std___Compressed_pair_std__allocator_char32_t___std___String_val_std___Simple_types_char32_t____true_(Structure):
        pass
    
    class struct_std___String_val_std___Simple_types_char32_t__(Structure):
        pass
    
    class union_std___String_val_std___Simple_types_char32_t_____Bxty(Union):
        pass
    
    union_std___String_val_std___Simple_types_char32_t_____Bxty._pack_ = 1 # source:False
    union_std___String_val_std___Simple_types_char32_t_____Bxty._fields_ = [
        ('_Buf', ctypes.c_int32 * 4),
        ('_Ptr', ctypes.POINTER(ctypes.c_int32)),
        ('_Alias', ctypes.c_char * 4),
        ('PADDING_0', ctypes.c_ubyte * 12),
    ]
    
    struct_std___String_val_std___Simple_types_char32_t__._pack_ = 1 # source:False
    struct_std___String_val_std___Simple_types_char32_t__._fields_ = [
        ('_Bx', union_std___String_val_std___Simple_types_char32_t_____Bxty),
        ('_Mysize', ctypes.c_uint64),
        ('_Myres', ctypes.c_uint64),
    ]
    
    struct_std___Compressed_pair_std__allocator_char32_t___std___String_val_std___Simple_types_char32_t____true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__allocator_char32_t___std___String_val_std___Simple_types_char32_t____true_._fields_ = [
        ('_Myval2', struct_std___String_val_std___Simple_types_char32_t__),
    ]
    
    class struct_std___Compressed_pair_std__allocator_wchar_t___std___String_val_std___Simple_types_wchar_t____true_(Structure):
        pass
    
    class struct_std___String_val_std___Simple_types_wchar_t__(Structure):
        pass
    
    class union_std___String_val_std___Simple_types_wchar_t_____Bxty(Union):
        pass
    
    union_std___String_val_std___Simple_types_wchar_t_____Bxty._pack_ = 1 # source:False
    union_std___String_val_std___Simple_types_wchar_t_____Bxty._fields_ = [
        ('_Buf', ctypes.c_int16 * 8),
        ('_Ptr', ctypes.POINTER(ctypes.c_int16)),
        ('_Alias', ctypes.c_char * 8),
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std___String_val_std___Simple_types_wchar_t__._pack_ = 1 # source:False
    struct_std___String_val_std___Simple_types_wchar_t__._fields_ = [
        ('_Bx', union_std___String_val_std___Simple_types_wchar_t_____Bxty),
        ('_Mysize', ctypes.c_uint64),
        ('_Myres', ctypes.c_uint64),
    ]
    
    struct_std___Compressed_pair_std__allocator_wchar_t___std___String_val_std___Simple_types_wchar_t____true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__allocator_wchar_t___std___String_val_std___Simple_types_wchar_t____true_._fields_ = [
        ('_Myval2', struct_std___String_val_std___Simple_types_wchar_t__),
    ]
    
    class struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___P_(Structure):
        pass
    
    struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___P_._pack_ = 1 # source:False
    struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___P_._fields_ = [
        ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)),
        ('_Child', std___Tree_child),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____(Structure):
        pass
    
    class struct_std___String_const_iterator_std___String_val_std___Simple_types_char16_t___(Structure):
        pass
    
    struct_std___String_const_iterator_std___String_val_std___Simple_types_char16_t___._pack_ = 1 # source:False
    struct_std___String_const_iterator_std___String_val_std___Simple_types_char16_t___._fields_ = [
        ('_Ptr', ctypes.POINTER(ctypes.c_int16)),
    ]
    
    struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____._pack_ = 1 # source:False
    struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____._fields_ = [
        ('current', struct_std___String_const_iterator_std___String_val_std___Simple_types_char16_t___),
    ]
    
    class struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____(Structure):
        pass
    
    class struct_std___String_const_iterator_std___String_val_std___Simple_types_char32_t___(Structure):
        pass
    
    struct_std___String_const_iterator_std___String_val_std___Simple_types_char32_t___._pack_ = 1 # source:False
    struct_std___String_const_iterator_std___String_val_std___Simple_types_char32_t___._fields_ = [
        ('_Ptr', ctypes.POINTER(ctypes.c_int32)),
    ]
    
    struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____._pack_ = 1 # source:False
    struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____._fields_ = [
        ('current', struct_std___String_const_iterator_std___String_val_std___Simple_types_char32_t___),
    ]
    
    class struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____(Structure):
        pass
    
    struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____._pack_ = 1 # source:False
    struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    class struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__(Structure):
        pass
    
    class struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____(Structure):
        pass
    
    class struct_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___(Structure):
        pass
    
    struct_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___._pack_ = 1 # source:False
    struct_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___._fields_ = [
        ('_Ptr', ctypes.POINTER(ctypes.c_int16)),
    ]
    
    struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____._pack_ = 1 # source:False
    struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____._fields_ = [
        ('current', struct_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___),
    ]
    
    class struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char____(Structure):
        pass
    
    class struct_std___String_const_iterator_std___String_val_std___Simple_types_char___(Structure):
        pass
    
    struct_std___String_const_iterator_std___String_val_std___Simple_types_char___._pack_ = 1 # source:False
    struct_std___String_const_iterator_std___String_val_std___Simple_types_char___._fields_ = [
        ('_Ptr', ctypes.c_char_p),
    ]
    
    struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char____._pack_ = 1 # source:False
    struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char____._fields_ = [
        ('current', struct_std___String_const_iterator_std___String_val_std___Simple_types_char___),
    ]
    
    class struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('current', struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___),
         ]
    
    class struct_std___Compressed_pair_std__allocator_char___std___String_val_std___Simple_types_char____true_(Structure):
        pass
    
    class struct_std___String_val_std___Simple_types_char__(Structure):
        pass
    
    class union_std___String_val_std___Simple_types_char_____Bxty(Union):
        pass
    
    union_std___String_val_std___Simple_types_char_____Bxty._pack_ = 1 # source:False
    union_std___String_val_std___Simple_types_char_____Bxty._fields_ = [
        ('_Buf', ctypes.c_char * 16),
        ('_Ptr', ctypes.c_char_p),
        ('_Alias', ctypes.c_char * 16),
    ]
    
    struct_std___String_val_std___Simple_types_char__._pack_ = 1 # source:False
    struct_std___String_val_std___Simple_types_char__._fields_ = [
        ('_Bx', union_std___String_val_std___Simple_types_char_____Bxty),
        ('_Mysize', ctypes.c_uint64),
        ('_Myres', ctypes.c_uint64),
    ]
    
    struct_std___Compressed_pair_std__allocator_char___std___String_val_std___Simple_types_char____true_._pack_ = 1 # source:False
    struct_std___Compressed_pair_std__allocator_char___std___String_val_std___Simple_types_char____true_._fields_ = [
        ('_Myval2', struct_std___String_val_std___Simple_types_char__),
    ]
    
    class struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t____(Structure):
        pass
    
    class struct_std___String_iterator_std___String_val_std___Simple_types_char16_t___(Structure):
        pass
    
    struct_std___String_iterator_std___String_val_std___Simple_types_char16_t___._pack_ = 1 # source:False
    struct_std___String_iterator_std___String_val_std___Simple_types_char16_t___._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t____._pack_ = 1 # source:False
    struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t____._fields_ = [
        ('current', struct_std___String_iterator_std___String_val_std___Simple_types_char16_t___),
    ]
    
    class struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t____(Structure):
        pass
    
    class struct_std___String_iterator_std___String_val_std___Simple_types_char32_t___(Structure):
        pass
    
    struct_std___String_iterator_std___String_val_std___Simple_types_char32_t___._pack_ = 1 # source:False
    struct_std___String_iterator_std___String_val_std___Simple_types_char32_t___._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t____._pack_ = 1 # source:False
    struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t____._fields_ = [
        ('current', struct_std___String_iterator_std___String_val_std___Simple_types_char32_t___),
    ]
    
    class struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t____(Structure):
        pass
    
    class struct_std___String_iterator_std___String_val_std___Simple_types_wchar_t___(Structure):
        pass
    
    struct_std___String_iterator_std___String_val_std___Simple_types_wchar_t___._pack_ = 1 # source:False
    struct_std___String_iterator_std___String_val_std___Simple_types_wchar_t___._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t____._pack_ = 1 # source:False
    struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t____._fields_ = [
        ('current', struct_std___String_iterator_std___String_val_std___Simple_types_wchar_t___),
    ]
    
    class struct_std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_(Structure):
        pass
    
    struct_std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_._pack_ = 1 # source:False
    struct_std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
    ]
    
    class struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char____(Structure):
        pass
    
    class struct_std___String_iterator_std___String_val_std___Simple_types_char___(Structure):
        pass
    
    struct_std___String_iterator_std___String_val_std___Simple_types_char___._pack_ = 1 # source:False
    struct_std___String_iterator_std___String_val_std___Simple_types_char___._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char____._pack_ = 1 # source:False
    struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char____._fields_ = [
        ('current', struct_std___String_iterator_std___String_val_std___Simple_types_char___),
    ]
    
    class struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__(Structure):
        pass
    
    class struct__qstring_char_(Structure):
        pass
    
    class struct_qvector_char_(Structure):
        pass
    
    struct_qvector_char_._pack_ = 1 # source:False
    struct_qvector_char_._fields_ = [
        ('array', ctypes.c_char_p),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    struct__qstring_char_._pack_ = 1 # source:False
    struct__qstring_char_._fields_ = [
        ('body', struct_qvector_char_),
    ]
    
    class struct_qrefcnt_t_refcnted_regex_t_(Structure):
        pass
    
    class struct_refcnted_regex_t(Structure):
        pass
    
    struct_qrefcnt_t_refcnted_regex_t_._pack_ = 1 # source:False
    struct_qrefcnt_t_refcnted_regex_t_._fields_ = [
        ('ptr', ctypes.POINTER(struct_refcnted_regex_t)),
    ]
    
    struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__._pack_ = 1 # source:False
    struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__._fields_ = [
        ('first', struct__qstring_char_),
        ('second', struct_qrefcnt_t_refcnted_regex_t_),
    ]
    
    std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
    struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_._pack_ = 1 # source:False
    struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_._fields_ = [
        ('_Left', ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)),
        ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)),
        ('_Right', ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)),
        ('_Color', ctypes.c_char),
        ('_Isnil', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 6),
        ('_Myval', std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___value_type),
    ]
    
    class struct_std__initializer_list_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___(Structure):
        pass
    
    struct_std__initializer_list_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___._pack_ = 1 # source:False
    struct_std__initializer_list_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___._fields_ = [
        ('_First', ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)),
        ('_Last', ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)),
    ]
    
    class struct_std__pair_const_unsigned_long_long__unsigned_long_long_(Structure):
        pass
    
    struct_std__pair_const_unsigned_long_long__unsigned_long_long_._pack_ = 1 # source:False
    struct_std__pair_const_unsigned_long_long__unsigned_long_long_._fields_ = [
        ('first', ctypes.c_uint64),
        ('second', ctypes.c_uint64),
    ]
    
    std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
    struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_._pack_ = 1 # source:False
    struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_._fields_ = [
        ('_Left', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)),
        ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)),
        ('_Right', ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)),
        ('_Color', ctypes.c_char),
        ('_Isnil', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 6),
        ('_Myval', std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___value_type),
    ]
    
    class struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___(Structure):
        pass
    
    struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___._pack_ = 1 # source:False
    struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___._fields_ = [
        ('_Ptr', ctypes.POINTER(struct_std___Tree_node_int__void__P_)),
    ]
    
    class struct_std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false__(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('_Mypair', struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true___true_),
         ]
    
    class struct_std__initializer_list_std__pair_const_unsigned_long_long__unsigned_long_long__(Structure):
        pass
    
    struct_std__initializer_list_std__pair_const_unsigned_long_long__unsigned_long_long__._pack_ = 1 # source:False
    struct_std__initializer_list_std__pair_const_unsigned_long_long__unsigned_long_long__._fields_ = [
        ('_First', ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)),
        ('_Last', ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)),
    ]
    
    class struct_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___(Structure):
        pass
    
    class struct_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long__(Structure):
        pass
    
    class struct_qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R__(Structure):
        pass
    
    
    # values for enumeration 'syntax_highlight_style'
    syntax_highlight_style__enumvalues = {
        0: 'HF_DEFAULT',
        1: 'HF_KEYWORD1',
        2: 'HF_KEYWORD2',
        3: 'HF_KEYWORD3',
        4: 'HF_STRING',
        5: 'HF_COMMENT',
        6: 'HF_PREPROC',
        7: 'HF_NUMBER',
        8: 'HF_MAX',
    }
    HF_DEFAULT = 0
    HF_KEYWORD1 = 1
    HF_KEYWORD2 = 2
    HF_KEYWORD3 = 3
    HF_STRING = 4
    HF_COMMENT = 5
    HF_PREPROC = 6
    HF_NUMBER = 7
    HF_MAX = 8
    syntax_highlight_style = ctypes.c_uint32 # enum
    struct_qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R__._pack_ = 1 # source:False
    struct_qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R__._fields_ = [
        ('array', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(syntax_highlight_style), ctypes.POINTER(struct__qstring_char_))),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std___Tree_id_std___Tree_node_std__pair_const_int__int___void__P___P_(Structure):
        pass
    
    struct_std___Tree_id_std___Tree_node_std__pair_const_int__int___void__P___P_._pack_ = 1 # source:False
    struct_std___Tree_id_std___Tree_node_std__pair_const_int__int___void__P___P_._fields_ = [
        ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)),
        ('_Child', std___Tree_child),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_std__allocator_std___Tree_node_std__pair_const_int__int___void__P__(Structure):
        pass
    
    class struct_qvector_long_long___P__syntax_highlight_style__P__const_char__P__(Structure):
        pass
    
    struct_qvector_long_long___P__syntax_highlight_style__P__const_char__P__._pack_ = 1 # source:False
    struct_qvector_long_long___P__syntax_highlight_style__P__const_char__P__._fields_ = [
        ('array', ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(syntax_highlight_style), ctypes.c_char_p)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std__map__qstring_char___qrefcnt_t_refcnted_regex_t__(Structure):
        pass
    
    struct_std__map__qstring_char___qrefcnt_t_refcnted_regex_t__._pack_ = 1 # source:False
    struct_std__map__qstring_char___qrefcnt_t_refcnted_regex_t__._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
    ]
    
    class struct_qvector_ida_syntax_highlighter_t__keywords_style_t_(Structure):
        pass
    
    class struct_ida_syntax_highlighter_t__keywords_style_t(Structure):
        pass
    
    struct_qvector_ida_syntax_highlighter_t__keywords_style_t_._pack_ = 1 # source:False
    struct_qvector_ida_syntax_highlighter_t__keywords_style_t_._fields_ = [
        ('array', ctypes.POINTER(struct_ida_syntax_highlighter_t__keywords_style_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_ida_syntax_highlighter_t__plain_char_ptr_t_(Structure):
        pass
    
    class struct_ida_syntax_highlighter_t__plain_char_ptr_t(Structure):
        pass
    
    struct_qvector_ida_syntax_highlighter_t__plain_char_ptr_t_._pack_ = 1 # source:False
    struct_qvector_ida_syntax_highlighter_t__plain_char_ptr_t_._fields_ = [
        ('array', ctypes.POINTER(struct_ida_syntax_highlighter_t__plain_char_ptr_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std__pair_const_int__int_(Structure):
        pass
    
    struct_std__pair_const_int__int_._pack_ = 1 # source:False
    struct_std__pair_const_int__int_._fields_ = [
        ('first', ctypes.c_int32),
        ('second', ctypes.c_int32),
    ]
    
    std___Tree_node_std__pair_const_int__int___void__P___value_type = struct_std__pair_const_int__int_
    struct_std___Tree_node_std__pair_const_int__int___void__P_._pack_ = 1 # source:False
    struct_std___Tree_node_std__pair_const_int__int___void__P_._fields_ = [
        ('_Left', ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)),
        ('_Parent', ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)),
        ('_Right', ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)),
        ('_Color', ctypes.c_char),
        ('_Isnil', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 2),
        ('_Myval', std___Tree_node_std__pair_const_int__int___void__P___value_type),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t_(Structure):
        pass
    
    class struct_func_t(Structure):
        pass
    
    class struct_segment_t(Structure):
        pass
    
    class struct_simple_bfi_t(Structure):
        pass
    
    class struct_std__map_unsigned_long_long__unsigned_long_long_(Structure):
        pass
    
    struct_std__map_unsigned_long_long__unsigned_long_long_._pack_ = 1 # source:False
    struct_std__map_unsigned_long_long__unsigned_long_long_._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
    ]
    
    backward_flow_iterator_t_State__Ctrl___visited_t = struct_std__map_unsigned_long_long__unsigned_long_long_
    backward_flow_iterator_t_no_regs_t__simple_bfi_t___waiting_t = struct_std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
    struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t_._pack_ = 1 # source:False
    struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t_._fields_ = [
        ('cur_ea', ctypes.c_uint64),
        ('regs', ctypes.POINTER(struct_no_regs_t)),
        ('ctrl', ctypes.POINTER(struct_simple_bfi_t)),
        ('only_near', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 3),
        ('max_insn_cnt', ctypes.c_uint32),
        ('pfn', ctypes.POINTER(struct_func_t)),
        ('seg', ctypes.POINTER(struct_segment_t)),
        ('start_ea', ctypes.c_uint64),
        ('cur_end', ctypes.c_uint64),
        ('insn_cnt', ctypes.c_uint32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('visited', backward_flow_iterator_t_State__Ctrl___visited_t),
        ('waiting', backward_flow_iterator_t_no_regs_t__simple_bfi_t___waiting_t),
    ]
    
    class struct_std___Char_traits_unsigned_short__unsigned_short_(Structure):
        pass
    
    class struct_std__initializer_list_std__pair_const_int__int__(Structure):
        pass
    
    struct_std__initializer_list_std__pair_const_int__int__._pack_ = 1 # source:False
    struct_std__initializer_list_std__pair_const_int__int__._fields_ = [
        ('_First', ctypes.POINTER(struct_std__pair_const_int__int_)),
        ('_Last', ctypes.POINTER(struct_std__pair_const_int__int_)),
    ]
    
    class struct_ida_movable_type_line_rendering_output_entry_t_(Structure):
        pass
    
    class struct_std___Tree_id_std___Tree_node_int__void__P___P_(Structure):
        pass
    
    struct_std___Tree_id_std___Tree_node_int__void__P___P_._pack_ = 1 # source:False
    struct_std___Tree_id_std___Tree_node_int__void__P___P_._fields_ = [
        ('_Parent', ctypes.POINTER(struct_std___Tree_node_int__void__P_)),
        ('_Child', std___Tree_child),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_qlist_ui_request_t__P___const_reverse_iterator(Structure):
        pass
    
    class struct_qrefcnt_t_qiterator_qrefcnt_t_source_file_t___(Structure):
        pass
    
    class struct_qiterator_qrefcnt_t_source_file_t__(Structure):
        pass
    
    struct_qrefcnt_t_qiterator_qrefcnt_t_source_file_t___._pack_ = 1 # source:False
    struct_qrefcnt_t_qiterator_qrefcnt_t_source_file_t___._fields_ = [
        ('ptr', ctypes.POINTER(struct_qiterator_qrefcnt_t_source_file_t__)),
    ]
    
    class struct_qrefcnt_t_qiterator_qrefcnt_t_source_item_t___(Structure):
        pass
    
    class struct_qiterator_qrefcnt_t_source_item_t__(Structure):
        pass
    
    struct_qrefcnt_t_qiterator_qrefcnt_t_source_item_t___._pack_ = 1 # source:False
    struct_qrefcnt_t_qiterator_qrefcnt_t_source_item_t___._fields_ = [
        ('ptr', ctypes.POINTER(struct_qiterator_qrefcnt_t_source_item_t__)),
    ]
    
    class struct_qvector_ida_syntax_highlighter_t__multicmt_t_(Structure):
        pass
    
    class struct_ida_syntax_highlighter_t__multicmt_t(Structure):
        pass
    
    struct_qvector_ida_syntax_highlighter_t__multicmt_t_._pack_ = 1 # source:False
    struct_qvector_ida_syntax_highlighter_t__multicmt_t_._fields_ = [
        ('array', ctypes.POINTER(struct_ida_syntax_highlighter_t__multicmt_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std___String_constructor_rvalue_allocator_tag(Structure):
        pass
    
    class struct_std__allocator_std___Tree_node_int__void__P__(Structure):
        pass
    
    class struct_std__integral_constant_unsigned_long_long__0_(Structure):
        pass
    
    class struct_std___Char_traits_char16_t__unsigned_short_(Structure):
        pass
    
    struct_ida_syntax_highlighter_t__keywords_style_t._pack_ = 1 # source:False
    struct_ida_syntax_highlighter_t__keywords_style_t._fields_ = [
        ('keywords', struct_qvector_ida_syntax_highlighter_t__plain_char_ptr_t_),
        ('style', syntax_highlight_style),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    struct_ida_syntax_highlighter_t__plain_char_ptr_t._pack_ = 1 # source:False
    struct_ida_syntax_highlighter_t__plain_char_ptr_t._fields_ = [
        ('ptr', ctypes.c_char_p),
    ]
    
    class struct_input_event_t__input_event_keyboard_data_t(Structure):
        pass
    
    struct_input_event_t__input_event_keyboard_data_t._pack_ = 1 # source:False
    struct_input_event_t__input_event_keyboard_data_t._fields_ = [
        ('key', ctypes.c_int32),
        ('text', ctypes.c_char * 8),
    ]
    
    class struct_input_event_t__input_event_shortcut_data_t(Structure):
        pass
    
    struct_input_event_t__input_event_shortcut_data_t._pack_ = 1 # source:False
    struct_input_event_t__input_event_shortcut_data_t._fields_ = [
        ('action_name', ctypes.c_char_p),
    ]
    
    class struct_std___Char_traits_wchar_t__unsigned_short_(Structure):
        pass
    
    class struct_qvector_line_rendering_output_entry_t__P_(Structure):
        pass
    
    class struct_line_rendering_output_entry_t(Structure):
        pass
    
    struct_qvector_line_rendering_output_entry_t__P_._pack_ = 1 # source:False
    struct_qvector_line_rendering_output_entry_t__P_._fields_ = [
        ('array', ctypes.POINTER(ctypes.POINTER(struct_line_rendering_output_entry_t))),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std___Char_traits_char32_t__unsigned_int_(Structure):
        pass
    
    class struct_std__allocator_std__pair_const_int__int__(Structure):
        pass
    
    class struct_qiterator_qrefcnt_t_source_file_t___vtbl(Structure):
        pass
    
    class struct_qiterator_qrefcnt_t_source_item_t___vtbl(Structure):
        pass
    
    class struct_qlist_ui_request_t__P___reverse_iterator(Structure):
        pass
    
    class struct_input_event_t__input_event_mouse_data_t(Structure):
        pass
    
    
    # values for enumeration 'vme_button_t'
    vme_button_t__enumvalues = {
        0: 'VME_UNKNOWN',
        1: 'VME_LEFT_BUTTON',
        2: 'VME_RIGHT_BUTTON',
        3: 'VME_MID_BUTTON',
    }
    VME_UNKNOWN = 0
    VME_LEFT_BUTTON = 1
    VME_RIGHT_BUTTON = 2
    VME_MID_BUTTON = 3
    vme_button_t = ctypes.c_uint32 # enum
    struct_input_event_t__input_event_mouse_data_t._pack_ = 1 # source:False
    struct_input_event_t__input_event_mouse_data_t._fields_ = [
        ('x', ctypes.c_int32),
        ('y', ctypes.c_int32),
        ('button', vme_button_t),
    ]
    
    class struct_std___Floating_type_traits_long_double_(Structure):
        pass
    
    class struct_std__numeric_limits_unsigned_long_long_(Structure):
        pass
    
    class struct_ida_movable_type_bitfield_type_data_t_(Structure):
        pass
    
    class struct_qlist_ui_request_t__P___const_iterator(Structure):
        pass
    
    class struct_ida_movable_type_typedef_type_data_t_(Structure):
        pass
    
    class struct_qvector_qvector_const_twinline_t__P__(Structure):
        pass
    
    class struct_qvector_const_twinline_t__P_(Structure):
        pass
    
    struct_qvector_qvector_const_twinline_t__P__._pack_ = 1 # source:False
    struct_qvector_qvector_const_twinline_t__P__._fields_ = [
        ('array', ctypes.POINTER(struct_qvector_const_twinline_t__P_)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    qstring = struct__qstring_char_
    struct_ida_syntax_highlighter_t__multicmt_t._pack_ = 1 # source:False
    struct_ida_syntax_highlighter_t__multicmt_t._fields_ = [
        ('open_multicmt', qstring),
        ('close_multicmt', qstring),
    ]
    
    class struct_ida_movable_type_array_type_data_t_(Structure):
        pass
    
    class struct_ida_movable_type_call_stack_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_compiled_binpat_t_(Structure):
        pass
    
    class struct_ida_movable_type_update_bpt_info_t_(Structure):
        pass
    
    struct_qiterator_qrefcnt_t_source_file_t__._pack_ = 1 # source:False
    struct_qiterator_qrefcnt_t_source_file_t__._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
    ]
    
    struct_qiterator_qrefcnt_t_source_item_t__._pack_ = 1 # source:False
    struct_qiterator_qrefcnt_t_source_item_t__._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
    ]
    
    class struct_std___Narrow_char_traits_char__int_(Structure):
        pass
    
    class struct_std___String_constructor_concat_tag(Structure):
        pass
    
    class struct_std__integral_constant_bool__false_(Structure):
        pass
    
    class struct_std__numeric_limits_unsigned_short_(Structure):
        pass
    
    class struct__Combined_type_float__long_double_(Structure):
        pass
    
    class struct_ida_movable_type_dirtree_cursor_t_(Structure):
        pass
    
    class struct_ida_movable_type_enum_type_data_t_(Structure):
        pass
    
    class struct_ida_movable_type_exception_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_scattered_aloc_t_(Structure):
        pass
    
    class struct_ida_movable_type_scattered_segm_t_(Structure):
        pass
    
    class struct_ida_movable_type_segm_move_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_xreflist_entry_t_(Structure):
        pass
    
    class struct_qlist_ui_request_t__P___listnode_t(Structure):
        pass
    
    struct_qlist_ui_request_t__P___listnode_t._pack_ = 1 # source:False
    struct_qlist_ui_request_t__P___listnode_t._fields_ = [
        ('next', ctypes.POINTER(struct_qlist_ui_request_t__P___listnode_t)),
        ('prev', ctypes.POINTER(struct_qlist_ui_request_t__P___listnode_t)),
    ]
    
    class struct_std___Floating_type_traits_double_(Structure):
        pass
    
    class struct_std___WChar_traits_unsigned_short_(Structure):
        pass
    
    class struct_std__integral_constant_bool__true_(Structure):
        pass
    
    class struct_std__numeric_limits_unsigned_char_(Structure):
        pass
    
    class struct_std__numeric_limits_unsigned_long_(Structure):
        pass
    
    class struct__0B605D7B00AC5C12C153272CF5BD15AF(Structure):
        pass
    
    struct__0B605D7B00AC5C12C153272CF5BD15AF._pack_ = 1 # source:False
    struct__0B605D7B00AC5C12C153272CF5BD15AF._fields_ = [
        ('low', ctypes.c_uint16),
        ('high', ctypes.c_uint16),
    ]
    
    class struct__37EC8ECBAB39934116D1B12D6D12C693(Structure):
        pass
    
    class struct_llabel_t(Structure):
        pass
    
    class struct_regvar_t(Structure):
        pass
    
    class struct_range_t(Structure):
        pass
    
    class struct_stkpnt_t(Structure):
        pass
    
    class struct_regarg_t(Structure):
        pass
    
    struct__37EC8ECBAB39934116D1B12D6D12C693._pack_ = 1 # source:False
    struct__37EC8ECBAB39934116D1B12D6D12C693._fields_ = [
        ('frame', ctypes.c_uint64),
        ('frsize', ctypes.c_uint64),
        ('frregs', ctypes.c_uint16),
        ('PADDING_0', ctypes.c_ubyte * 6),
        ('argsize', ctypes.c_uint64),
        ('fpd', ctypes.c_uint64),
        ('color', ctypes.c_uint32),
        ('pntqty', ctypes.c_uint32),
        ('points', ctypes.POINTER(struct_stkpnt_t)),
        ('regvarqty', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('regvars', ctypes.POINTER(struct_regvar_t)),
        ('llabelqty', ctypes.c_int32),
        ('PADDING_2', ctypes.c_ubyte * 4),
        ('llabels', ctypes.POINTER(struct_llabel_t)),
        ('regargqty', ctypes.c_int32),
        ('PADDING_3', ctypes.c_ubyte * 4),
        ('regargs', ctypes.POINTER(struct_regarg_t)),
        ('tailqty', ctypes.c_int32),
        ('PADDING_4', ctypes.c_ubyte * 4),
        ('tails', ctypes.POINTER(struct_range_t)),
    ]
    
    class struct__C21FB2E1BAA97F44BFD298211C4C916B(Structure):
        pass
    
    struct__C21FB2E1BAA97F44BFD298211C4C916B._pack_ = 1 # source:False
    struct__C21FB2E1BAA97F44BFD298211C4C916B._fields_ = [
        ('ptr', ctypes.CFUNCTYPE(ctypes.c_char)),
        ('adj', ctypes.c_uint64),
    ]
    
    class struct__EBE02DBEC342F8268AFE19180D75885B(Structure):
        pass
    
    struct__EBE02DBEC342F8268AFE19180D75885B._pack_ = 1 # source:False
    struct__EBE02DBEC342F8268AFE19180D75885B._fields_ = [
        ('owner', ctypes.c_uint64),
        ('refqty', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('referers', ctypes.POINTER(ctypes.c_uint64)),
    ]
    
    class struct_ida_movable_type_lochist_entry_t_(Structure):
        pass
    
    class struct_ida_movable_type_ptr_type_data_t_(Structure):
        pass
    
    class struct_ida_movable_type_register_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_tev_reg_value_t_(Structure):
        pass
    
    class struct_ida_movable_type_udt_type_data_t_(Structure):
        pass
    
    class struct_qvector_qrefcnt_t_source_item_t__(Structure):
        pass
    
    class struct_qrefcnt_t_source_item_t_(Structure):
        pass
    
    struct_qvector_qrefcnt_t_source_item_t__._pack_ = 1 # source:False
    struct_qvector_qrefcnt_t_source_item_t__._fields_ = [
        ('array', ctypes.POINTER(struct_qrefcnt_t_source_item_t_)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std___Basic_container_proxy_ptr12(Structure):
        pass
    
    class struct_std___Container_proxy(Structure):
        pass
    
    struct_std___Basic_container_proxy_ptr12._pack_ = 1 # source:False
    struct_std___Basic_container_proxy_ptr12._fields_ = [
        ('_Ptr', ctypes.POINTER(struct_std___Container_proxy)),
    ]
    
    class struct_std___Floating_type_traits_float_(Structure):
        pass
    
    class struct_std___Is_character_unsigned_char_(Structure):
        pass
    
    class struct_std__basic_istringstream_wchar_t_(Structure):
        pass
    
    class struct_std__basic_ostringstream_wchar_t_(Structure):
        pass
    
    class struct_std__numeric_limits_unsigned_int_(Structure):
        pass
    
    class struct_ida_movable_type_bpt_location_t_(Structure):
        pass
    
    class struct_ida_movable_type_locchange_md_t_(Structure):
        pass
    
    class struct_ida_movable_type_process_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_refinfo_desc_t_(Structure):
        pass
    
    class struct_ida_movable_type_tev_info_reg_t_(Structure):
        pass
    
    class struct_qlist_ui_request_t__P___iterator(Structure):
        pass
    
    class struct_qvector__qstring_unsigned_char__(Structure):
        pass
    
    class struct__qstring_unsigned_char_(Structure):
        pass
    
    struct_qvector__qstring_unsigned_char__._pack_ = 1 # source:False
    struct_qvector__qstring_unsigned_char__._fields_ = [
        ('array', ctypes.POINTER(struct__qstring_unsigned_char_)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std___Is_character_or_bool_bool_(Structure):
        pass
    
    class struct_std__basic_stringstream_wchar_t_(Structure):
        pass
    
    class struct_std__char_traits_unsigned_short_(Structure):
        pass
    
    class struct_std__numeric_limits_long_double_(Structure):
        pass
    
    class struct_std__numeric_limits_signed_char_(Structure):
        pass
    
    class struct_ida_movable_type_debug_event_t_(Structure):
        pass
    
    class struct_ida_movable_type_enum_member_t_(Structure):
        pass
    
    class struct_ida_movable_type_memory_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_memreg_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_movbpt_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_string_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_sync_source_t_(Structure):
        pass
    
    class struct_ida_movable_type_try_handler_t_(Structure):
        pass
    
    class struct_qvector_qvector_const_char__P__(Structure):
        pass
    
    class struct_qvector_const_char__P_(Structure):
        pass
    
    struct_qvector_qvector_const_char__P__._pack_ = 1 # source:False
    struct_qvector_qvector_const_char__P__._fields_ = [
        ('array', ctypes.POINTER(struct_qvector_const_char__P_)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std___Is_character_signed_char_(Structure):
        pass
    
    class struct_std___Zero_then_variadic_args_t(Structure):
        pass
    
    class struct_std__bidirectional_iterator_tag(Structure):
        pass
    
    class struct_std__initializer_list_char16_t_(Structure):
        pass
    
    struct_std__initializer_list_char16_t_._pack_ = 1 # source:False
    struct_std__initializer_list_char16_t_._fields_ = [
        ('_First', ctypes.POINTER(ctypes.c_int16)),
        ('_Last', ctypes.POINTER(ctypes.c_int16)),
    ]
    
    class struct_std__initializer_list_char32_t_(Structure):
        pass
    
    struct_std__initializer_list_char32_t_._pack_ = 1 # source:False
    struct_std__initializer_list_char32_t_._fields_ = [
        ('_First', ctypes.POINTER(ctypes.c_int32)),
        ('_Last', ctypes.POINTER(ctypes.c_int32)),
    ]
    
    class struct_std__random_access_iterator_tag(Structure):
        pass
    
    class struct_ida_movable_type_fixup_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_idc_global_t_(Structure):
        pass
    
    class struct_ida_movable_type_ioport_bit_t_(Structure):
        pass
    
    class struct_ida_movable_type_reg_access_t_(Structure):
        pass
    
    class struct_ida_movable_type_sreg_range_t_(Structure):
        pass
    
    class struct_ida_movable_type_til_symbol_t_(Structure):
        pass
    
    class struct_ida_movable_type_udt_member_t_(Structure):
        pass
    
    class struct_std___One_then_variadic_args_t(Structure):
        pass
    
    class struct_std__bad_array_new_length_vtbl(Structure):
        pass
    
    class struct_std__basic_istringstream_char_(Structure):
        pass
    
    class struct_std__basic_ostringstream_char_(Structure):
        pass
    
    class struct_std__initializer_list_wchar_t_(Structure):
        pass
    
    struct_std__initializer_list_wchar_t_._pack_ = 1 # source:False
    struct_std__initializer_list_wchar_t_._fields_ = [
        ('_First', ctypes.POINTER(ctypes.c_int16)),
        ('_Last', ctypes.POINTER(ctypes.c_int16)),
    ]
    
    class struct_std__numeric_limits_long_long_(Structure):
        pass
    
    class struct__Combined_type_float__double_(Structure):
        pass
    
    class struct__Real_widened_double__double_(Structure):
        pass
    
    class struct_ida_movable_type_idc_value_t_(Structure):
        pass
    
    class struct_ida_movable_type_load_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_simd_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_type_attr_t_(Structure):
        pass
    
    class struct_ida_syntax_highlighter_t_vtbl(Structure):
        pass
    
    class struct_twinline_t(Structure):
        pass
    
    struct_line_rendering_output_entry_t._pack_ = 1 # source:False
    struct_line_rendering_output_entry_t._fields_ = [
        ('line', ctypes.POINTER(struct_twinline_t)),
        ('flags', ctypes.c_uint32),
        ('bg_color', ctypes.c_uint32),
        ('cpx', ctypes.c_int32),
        ('nchars', ctypes.c_int32),
    ]
    
    class struct_std___Default_allocate_traits(Structure):
        pass
    
    struct_std___Tree_node_int__void__P_._pack_ = 1 # source:False
    struct_std___Tree_node_int__void__P_._fields_ = [
        ('_Left', ctypes.POINTER(struct_std___Tree_node_int__void__P_)),
        ('_Parent', ctypes.POINTER(struct_std___Tree_node_int__void__P_)),
        ('_Right', ctypes.POINTER(struct_std___Tree_node_int__void__P_)),
        ('_Color', ctypes.c_char),
        ('_Isnil', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 2),
        ('_Myval', ctypes.c_int32),
    ]
    
    class struct_std__basic_streambuf_wchar_t_(Structure):
        pass
    
    class struct_std__basic_stringbuf_wchar_t_(Structure):
        pass
    
    class struct_std__basic_stringstream_char_(Structure):
        pass
    
    class struct_std__less_unsigned_long_long_(Structure):
        pass
    
    class struct_std__numeric_limits_char16_t_(Structure):
        pass
    
    class struct_std__numeric_limits_char32_t_(Structure):
        pass
    
    class struct__Real_widened_double__float_(Structure):
        pass
    
    class struct__Real_widened_float__double_(Structure):
        pass
    
    class struct_ida_movable_type_dbg_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_direntry_t_(Structure):
        pass
    
    class struct_ida_movable_type_idp_desc_t_(Structure):
        pass
    
    class struct_ida_movable_type_idp_name_t_(Structure):
        pass
    
    class struct_ida_movable_type_rangeset_t_(Structure):
        pass
    
    class struct_ida_movable_type_reg_info_t_(Structure):
        pass
    
    class struct_ida_movable_type_snapshot_t_(Structure):
        pass
    
    class struct_ida_movable_type_twinline_t_(Structure):
        pass
    
    class struct_qvector_const_rangeset_t__P_(Structure):
        pass
    
    class struct_rangeset_t(Structure):
        pass
    
    struct_qvector_const_rangeset_t__P_._pack_ = 1 # source:False
    struct_qvector_const_rangeset_t__P_._fields_ = [
        ('array', ctypes.POINTER(ctypes.POINTER(struct_rangeset_t))),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    struct_qvector_const_twinline_t__P_._pack_ = 1 # source:False
    struct_qvector_const_twinline_t__P_._fields_ = [
        ('array', ctypes.POINTER(ctypes.POINTER(struct_twinline_t))),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std___Char_traits_char__int_(Structure):
        pass
    
    class struct_std___WChar_traits_char16_t_(Structure):
        pass
    
    class struct_std__basic_ifstream_wchar_t_(Structure):
        pass
    
    class struct_std__basic_iostream_wchar_t_(Structure):
        pass
    
    class struct_std__basic_ofstream_wchar_t_(Structure):
        pass
    
    class struct_std__numeric_limits_wchar_t_(Structure):
        pass
    
    class struct__Real_widened_float__float_(Structure):
        pass
    
    class struct_choose_ioport_parser_t_vtbl(Structure):
        pass
    
    class struct_ida_lowertype_helper_t_vtbl(Structure):
        pass
    
    class struct_ida_movable_type_argpart_t_(Structure):
        pass
    
    class struct_ida_movable_type_ea_name_t_(Structure):
        pass
    
    class struct_ida_movable_type_funcarg_t_(Structure):
        pass
    
    class struct_ida_movable_type_lochist_t_(Structure):
        pass
    
    class struct_ida_movable_type_modinfo_t_(Structure):
        pass
    
    class struct_ida_movable_type_valinfo_t_(Structure):
        pass
    
    class struct_qvector_qvector_long_long__(Structure):
        pass
    
    class struct_qvector_long_long_(Structure):
        pass
    
    struct_qvector_qvector_long_long__._pack_ = 1 # source:False
    struct_qvector_qvector_long_long__._fields_ = [
        ('array', ctypes.POINTER(struct_qvector_long_long_)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_unsigned_long_long_(Structure):
        pass
    
    struct_qvector_unsigned_long_long_._pack_ = 1 # source:False
    struct_qvector_unsigned_long_long_._fields_ = [
        ('array', ctypes.POINTER(ctypes.c_uint64)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std___Nontrivial_dummy_type(Structure):
        pass
    
    class struct_std___WChar_traits_wchar_t_(Structure):
        pass
    
    class struct_std__basic_filebuf_wchar_t_(Structure):
        pass
    
    class struct_std__basic_fstream_wchar_t_(Structure):
        pass
    
    class struct_std__basic_istream_wchar_t_(Structure):
        pass
    
    class struct_std__basic_ostream_wchar_t_(Structure):
        pass
    
    class struct_std__basic_string_char16_t_(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('_Mypair', struct_std___Compressed_pair_std__allocator_char16_t___std___String_val_std___Simple_types_char16_t____true_),
         ]
    
    class struct_std__basic_string_char32_t_(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('_Mypair', struct_std___Compressed_pair_std__allocator_char32_t___std___String_val_std___Simple_types_char32_t____true_),
         ]
    
    class struct_std__initializer_list_char_(Structure):
        pass
    
    struct_std__initializer_list_char_._pack_ = 1 # source:False
    struct_std__initializer_list_char_._fields_ = [
        ('_First', ctypes.c_char_p),
        ('_Last', ctypes.c_char_p),
    ]
    
    class struct_std__numeric_limits_double_(Structure):
        pass
    
    class struct_struct_field_visitor_t_vtbl(Structure):
        pass
    
    class struct_enum_member_visitor_t_vtbl(Structure):
        pass
    
    class struct_ida_movable_type_argloc_t_(Structure):
        pass
    
    class struct_ida_movable_type_cliopt_t_(Structure):
        pass
    
    class struct_ida_movable_type_ioport_t_(Structure):
        pass
    
    class struct_ida_movable_type_jvalue_t_(Structure):
        pass
    
    class struct_ida_movable_type_regarg_t_(Structure):
        pass
    
    class struct_ida_movable_type_regobj_t_(Structure):
        pass
    
    class struct_ida_movable_type_regval_t_(Structure):
        pass
    
    class struct_ida_movable_type_regvar_t_(Structure):
        pass
    
    class struct_ida_movable_type_stkpnt_t_(Structure):
        pass
    
    class struct_ida_movable_type_tryblk_t_(Structure):
        pass
    
    class struct_ida_movable_type_valstr_t_(Structure):
        pass
    
    class struct_qvector__qstring_wchar_t__(Structure):
        pass
    
    class struct__qstring_wchar_t_(Structure):
        pass
    
    struct_qvector__qstring_wchar_t__._pack_ = 1 # source:False
    struct_qvector__qstring_wchar_t__._fields_ = [
        ('array', ctypes.POINTER(struct__qstring_wchar_t_)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_call_stack_info_t_(Structure):
        pass
    
    class struct_call_stack_info_t(Structure):
        pass
    
    struct_qvector_call_stack_info_t_._pack_ = 1 # source:False
    struct_qvector_call_stack_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_call_stack_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_compiled_binpat_t_(Structure):
        pass
    
    class struct_compiled_binpat_t(Structure):
        pass
    
    struct_qvector_compiled_binpat_t_._pack_ = 1 # source:False
    struct_qvector_compiled_binpat_t_._fields_ = [
        ('array', ctypes.POINTER(struct_compiled_binpat_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_update_bpt_info_t_(Structure):
        pass
    
    class struct_update_bpt_info_t(Structure):
        pass
    
    struct_qvector_update_bpt_info_t_._pack_ = 1 # source:False
    struct_qvector_update_bpt_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_update_bpt_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std___Alloc_unpack_tuple_t(Structure):
        pass
    
    class struct_std__basic_streambuf_char_(Structure):
        pass
    
    class struct_std__basic_string_wchar_t_(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('_Mypair', struct_std___Compressed_pair_std__allocator_wchar_t___std___String_val_std___Simple_types_wchar_t____true_),
         ]
    
    class struct_std__basic_stringbuf_char_(Structure):
        pass
    
    class struct_std__char_traits_char16_t_(Structure):
        pass
    
    class struct_std__char_traits_char32_t_(Structure):
        pass
    
    class struct_std__initializer_list_int_(Structure):
        pass
    
    struct_std__initializer_list_int_._pack_ = 1 # source:False
    struct_std__initializer_list_int_._fields_ = [
        ('_First', ctypes.POINTER(ctypes.c_int32)),
        ('_Last', ctypes.POINTER(ctypes.c_int32)),
    ]
    
    class struct_std__nested_exception_vtbl(Structure):
        pass
    
    class struct_std__numeric_limits_float_(Structure):
        pass
    
    class struct_std__numeric_limits_short_(Structure):
        pass
    
    class struct_std__piecewise_construct_t(Structure):
        pass
    
    class struct_user_defined_prefix_t_vtbl(Structure):
        pass
    
    class struct_action_ctx_base_cur_sel_t(Structure):
        pass
    
    class struct_twinpos_t(Structure):
        pass
    
    class struct_place_t(Structure):
        pass
    
    struct_twinpos_t._pack_ = 1 # source:False
    struct_twinpos_t._fields_ = [
        ('at', ctypes.POINTER(struct_place_t)),
        ('x', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    struct_action_ctx_base_cur_sel_t._pack_ = 1 # source:False
    struct_action_ctx_base_cur_sel_t._fields_ = [
        ('from', struct_twinpos_t),
        ('to', struct_twinpos_t),
    ]
    
    class struct_const_aloc_visitor_t_vtbl(Structure):
        pass
    
    class struct_graph_node_visitor_t_vtbl(Structure):
        pass
    
    class struct_graph_path_visitor_t_vtbl(Structure):
        pass
    
    class struct_ida_movable_type_catch_t_(Structure):
        pass
    
    class struct_ida_movable_type_point_t_(Structure):
        pass
    
    class struct_ida_movable_type_range_t_(Structure):
        pass
    
    class struct_ida_movable_type_tinfo_t_(Structure):
        pass
    
    class struct_ida_movable_type_token_t_(Structure):
        pass
    
    class struct_post_event_visitor_t_vtbl(Structure):
        pass
    
    class struct_qvector_dirtree_cursor_t_(Structure):
        pass
    
    class struct_dirtree_cursor_t(Structure):
        pass
    
    struct_qvector_dirtree_cursor_t_._pack_ = 1 # source:False
    struct_qvector_dirtree_cursor_t_._fields_ = [
        ('array', ctypes.POINTER(struct_dirtree_cursor_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_exception_info_t_(Structure):
        pass
    
    class struct_exception_info_t(Structure):
        pass
    
    struct_qvector_exception_info_t_._pack_ = 1 # source:False
    struct_qvector_exception_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_exception_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_scattered_segm_t_(Structure):
        pass
    
    class struct_scattered_segm_t(Structure):
        pass
    
    struct_qvector_scattered_segm_t_._pack_ = 1 # source:False
    struct_qvector_scattered_segm_t_._fields_ = [
        ('array', ctypes.POINTER(struct_scattered_segm_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_segm_move_info_t_(Structure):
        pass
    
    class struct_segm_move_info_t(Structure):
        pass
    
    struct_qvector_segm_move_info_t_._pack_ = 1 # source:False
    struct_qvector_segm_move_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_segm_move_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_selection_item_t_(Structure):
        pass
    
    class struct_selection_item_t(Structure):
        pass
    
    struct_qvector_selection_item_t_._pack_ = 1 # source:False
    struct_qvector_selection_item_t_._fields_ = [
        ('array', ctypes.POINTER(struct_selection_item_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_xreflist_entry_t_(Structure):
        pass
    
    class struct_xreflist_entry_t(Structure):
        pass
    
    struct_qvector_xreflist_entry_t_._pack_ = 1 # source:False
    struct_qvector_xreflist_entry_t_._fields_ = [
        ('array', ctypes.POINTER(struct_xreflist_entry_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std___Fake_proxy_ptr_impl(Structure):
        pass
    
    class struct_std___Invoker_pmd_pointer(Structure):
        pass
    
    class struct_std___Invoker_pmd_refwrap(Structure):
        pass
    
    class struct_std___Invoker_pmf_pointer(Structure):
        pass
    
    class struct_std___Invoker_pmf_refwrap(Structure):
        pass
    
    class struct_std___Leave_proxy_unbound(Structure):
        pass
    
    class struct_std___Rand_urng_from_func(Structure):
        pass
    
    class struct_std__bad_array_new_length(Structure):
        pass
    
    struct_std__bad_array_new_length._pack_ = 1 # source:False
    struct_std__bad_array_new_length._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_std__basic_ifstream_char_(Structure):
        pass
    
    class struct_std__basic_iostream_char_(Structure):
        pass
    
    class struct_std__basic_ofstream_char_(Structure):
        pass
    
    class struct_std__char_traits_wchar_t_(Structure):
        pass
    
    class struct_std__forward_iterator_tag(Structure):
        pass
    
    class struct_std__hash_std__nullptr_t_(Structure):
        pass
    
    class struct_std__less__qstring_char__(Structure):
        pass
    
    class struct_std__numeric_limits_bool_(Structure):
        pass
    
    class struct_std__numeric_limits_char_(Structure):
        pass
    
    class struct_std__numeric_limits_long_(Structure):
        pass
    
    class struct_syntax_highlighter_t_vtbl(Structure):
        pass
    
    class struct___crt_locale_data_public(Structure):
        pass
    
    struct___crt_locale_data_public._pack_ = 1 # source:False
    struct___crt_locale_data_public._fields_ = [
        ('_locale_pctype', ctypes.POINTER(ctypes.c_uint16)),
        ('_locale_mb_cur_max', ctypes.c_int32),
        ('_locale_lc_codepage', ctypes.c_uint32),
    ]
    
    class struct_altadjust_visitor_t_vtbl(Structure):
        pass
    
    class struct_cancellable_graph_t_vtbl(Structure):
        pass
    
    class struct_custom_refinfo_handler_t(Structure):
        pass
    
    class struct_refinfo_t(Structure):
        pass
    
    struct_custom_refinfo_handler_t._pack_ = 1 # source:False
    struct_custom_refinfo_handler_t._fields_ = [
        ('cbsize', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('name', ctypes.c_char_p),
        ('desc', ctypes.c_char_p),
        ('props', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('gen_expr', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(struct__qstring_char_), ctypes.c_uint64, ctypes.c_int32, ctypes.POINTER(struct_refinfo_t), ctypes.c_uint64, ctypes.POINTER(ctypes.c_int64), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64), ctypes.c_int32)),
        ('calc_reference_data', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64), ctypes.c_uint64, ctypes.POINTER(struct_refinfo_t), ctypes.c_int64)),
        ('get_format', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct__qstring_char_))),
    ]
    
    class struct_custom_viewer_handlers_t(Structure):
        pass
    
    class struct_TWidget(Structure):
        pass
    
    class struct_lochist_entry_t(Structure):
        pass
    
    class struct_locchange_md_t(Structure):
        pass
    
    class struct_view_mouse_event_t(Structure):
        pass
    
    struct_custom_viewer_handlers_t._pack_ = 1 # source:False
    struct_custom_viewer_handlers_t._fields_ = [
        ('cb', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('keyboard', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(None))),
        ('popup', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))),
        ('mouse_moved', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.POINTER(struct_view_mouse_event_t), ctypes.POINTER(None))),
        ('click', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.POINTER(None))),
        ('dblclick', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.POINTER(None))),
        ('curpos', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))),
        ('close', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))),
        ('help', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))),
        ('adjust_place', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(None))),
        ('get_place_xcoord', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_place_t), ctypes.POINTER(struct_place_t), ctypes.POINTER(None))),
        ('location_changed', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_locchange_md_t), ctypes.POINTER(None))),
        ('can_navigate', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_locchange_md_t), ctypes.POINTER(None))),
    ]
    
    class struct_ida_movable_type_edge_t_(Structure):
        pass
    
    class struct_ida_movable_type_func_t_(Structure):
        pass
    
    class struct_ida_movable_type_jarr_t_(Structure):
        pass
    
    class struct_ida_movable_type_jobj_t_(Structure):
        pass
    
    class struct_ida_movable_type_rect_t_(Structure):
        pass
    
    class struct_ida_syntax_highlighter_t(Structure):
        pass
    
    external_ident_colorizers_t = struct_qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R__
    ida_syntax_highlighter_t__multicmtvec_t = struct_qvector_ida_syntax_highlighter_t__multicmt_t_
    ida_syntax_highlighter_t__keywords_t = struct_qvector_ida_syntax_highlighter_t__keywords_style_t_
    external_colorizers_t = struct_qvector_long_long___P__syntax_highlight_style__P__const_char__P__
    class struct_qvector__qstring_char__(Structure):
        pass
    
    struct_qvector__qstring_char__._pack_ = 1 # source:False
    struct_qvector__qstring_char__._fields_ = [
        ('array', ctypes.POINTER(struct__qstring_char_)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    qstrvec_t = struct_qvector__qstring_char__
    struct_ida_syntax_highlighter_t._pack_ = 1 # source:False
    struct_ida_syntax_highlighter_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('keyword_memory', qstrvec_t),
        ('keywords', ida_syntax_highlighter_t__keywords_t),
        ('open_cmt', qstring),
        ('multicmts', ida_syntax_highlighter_t__multicmtvec_t),
        ('literal_closer', ctypes.c_char),
        ('PADDING_1', ctypes.c_ubyte * 3),
        ('text_color', syntax_highlight_style),
        ('comment_color', syntax_highlight_style),
        ('string_color', syntax_highlight_style),
        ('preprocessor_color', syntax_highlight_style),
        ('PADDING_2', ctypes.c_ubyte * 4),
        ('external_colorizers', external_colorizers_t),
        ('external_ident_colorizers', external_ident_colorizers_t),
        ('input', ctypes.c_char_p),
        ('pending', ctypes.c_char_p),
        ('style', syntax_highlight_style),
        ('open_strconst', ctypes.c_char),
        ('close_strconst', ctypes.c_char),
        ('open_chrconst', ctypes.c_char),
        ('close_chrconst', ctypes.c_char),
        ('escape_char', ctypes.c_char),
        ('preprocessor_char', ctypes.c_char),
        ('PADDING_3', ctypes.c_ubyte * 6),
    ]
    
    class struct_lines_rendering_output_t(Structure):
        pass
    
    line_rendering_output_entries_refs_t = struct_qvector_line_rendering_output_entry_t__P_
    struct_lines_rendering_output_t._pack_ = 1 # source:False
    struct_lines_rendering_output_t._fields_ = [
        ('entries', line_rendering_output_entries_refs_t),
        ('flags', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_macro_constructor_t_vtbl(Structure):
        pass
    
    class struct_qrefcnt_t_source_file_t_(Structure):
        pass
    
    class struct_source_file_t(Structure):
        pass
    
    struct_qrefcnt_t_source_file_t_._pack_ = 1 # source:False
    struct_qrefcnt_t_source_file_t_._fields_ = [
        ('ptr', ctypes.POINTER(struct_source_file_t)),
    ]
    
    class struct_source_item_t(Structure):
        pass
    
    struct_qrefcnt_t_source_item_t_._pack_ = 1 # source:False
    struct_qrefcnt_t_source_item_t_._fields_ = [
        ('ptr', ctypes.POINTER(struct_source_item_t)),
    ]
    
    class struct_qvector_channel_redir_t_(Structure):
        pass
    
    class struct_channel_redir_t(Structure):
        pass
    
    struct_qvector_channel_redir_t_._pack_ = 1 # source:False
    struct_qvector_channel_redir_t_._fields_ = [
        ('array', ctypes.POINTER(struct_channel_redir_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_lochist_entry_t_(Structure):
        pass
    
    struct_qvector_lochist_entry_t_._pack_ = 1 # source:False
    struct_qvector_lochist_entry_t_._fields_ = [
        ('array', ctypes.POINTER(struct_lochist_entry_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_register_info_t_(Structure):
        pass
    
    class struct_register_info_t(Structure):
        pass
    
    struct_qvector_register_info_t_._pack_ = 1 # source:False
    struct_qvector_register_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_register_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_tev_reg_value_t_(Structure):
        pass
    
    class struct_tev_reg_value_t(Structure):
        pass
    
    struct_qvector_tev_reg_value_t_._pack_ = 1 # source:False
    struct_qvector_tev_reg_value_t_._fields_ = [
        ('array', ctypes.POINTER(struct_tev_reg_value_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_range_marker_suspender_t(Structure):
        pass
    
    struct_range_marker_suspender_t._pack_ = 1 # source:False
    struct_range_marker_suspender_t._fields_ = [
        ('backup', ctypes.CFUNCTYPE(None, ctypes.c_uint64, ctypes.c_uint64)),
    ]
    
    class struct_screen_graph_selection_t(Structure):
        pass
    
    struct_screen_graph_selection_t._pack_ = 1 # source:False
    struct_screen_graph_selection_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_std___Alloc_exact_args_t(Structure):
        pass
    
    class struct_std___Invoker_pmd_object(Structure):
        pass
    
    class struct_std___Invoker_pmf_object(Structure):
        pass
    
    class struct_std___Is_character_char_(Structure):
        pass
    
    class struct_std___Move_allocator_tag(Structure):
        pass
    
    class struct_std__allocator_char16_t_(Structure):
        pass
    
    class struct_std__allocator_char32_t_(Structure):
        pass
    
    class struct_std__basic_filebuf_char_(Structure):
        pass
    
    class struct_std__basic_fstream_char_(Structure):
        pass
    
    class struct_std__basic_istream_char_(Structure):
        pass
    
    class struct_std__basic_ostream_char_(Structure):
        pass
    
    class struct_std__greater_equal_void_(Structure):
        pass
    
    class struct_std__numeric_limits_int_(Structure):
        pass
    
    class struct_std__output_iterator_tag(Structure):
        pass
    
    class struct_valstr_t__flatten_args_t(Structure):
        pass
    
    class struct_valstr_t(Structure):
        pass
    
    struct_valstr_t__flatten_args_t._pack_ = 1 # source:False
    struct_valstr_t__flatten_args_t._fields_ = [
        ('may_not_collapse', ctypes.POINTER(struct_valstr_t)),
        ('ptvf', ctypes.c_int32),
        ('max_length', ctypes.c_int32),
        ('margin', ctypes.c_int32),
        ('indent', ctypes.c_int32),
    ]
    
    class struct__Real_type_long_double_(Structure):
        pass
    
    class struct_qvector_unsigned_char_(Structure):
        pass
    
    struct_qvector_unsigned_char_._pack_ = 1 # source:False
    struct_qvector_unsigned_char_._fields_ = [
        ('array', ctypes.POINTER(ctypes.c_ubyte)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    struct__qstring_unsigned_char_._pack_ = 1 # source:False
    struct__qstring_unsigned_char_._fields_ = [
        ('body', struct_qvector_unsigned_char_),
    ]
    
    class struct_ida_movable_type_bpt_t_(Structure):
        pass
    
    class struct_ida_movable_type_kvp_t_(Structure):
        pass
    
    class struct_ida_movable_type_seh_t_(Structure):
        pass
    
    class struct_ioports_fallback_t_vtbl(Structure):
        pass
    
    class struct_launch_process_params_t(Structure):
        pass
    
    struct_launch_process_params_t._pack_ = 1 # source:False
    struct_launch_process_params_t._fields_ = [
        ('cb', ctypes.c_uint64),
        ('flags', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('path', ctypes.c_char_p),
        ('args', ctypes.c_char_p),
        ('in_handle', ctypes.c_int64),
        ('out_handle', ctypes.c_int64),
        ('err_handle', ctypes.c_int64),
        ('env', ctypes.c_char_p),
        ('startdir', ctypes.c_char_p),
        ('info', ctypes.POINTER(None)),
    ]
    
    class struct_lines_rendering_input_t(Structure):
        pass
    
    class struct_synced_group_t(Structure):
        pass
    
    sections_lines_refs_t = struct_qvector_qvector_const_twinline_t__P__
    struct_lines_rendering_input_t._pack_ = 1 # source:False
    struct_lines_rendering_input_t._fields_ = [
        ('cb', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('sections_lines', sections_lines_refs_t),
        ('sync_group', ctypes.POINTER(struct_synced_group_t)),
    ]
    
    class struct_lowertype_helper_t_vtbl(Structure):
        pass
    
    class struct_qvector_const_bpt_t__P_(Structure):
        pass
    
    class struct_bpt_t(Structure):
        pass
    
    struct_qvector_const_bpt_t__P_._pack_ = 1 # source:False
    struct_qvector_const_bpt_t__P_._fields_ = [
        ('array', ctypes.POINTER(ctypes.POINTER(struct_bpt_t))),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_group_crinfo_t_(Structure):
        pass
    
    class struct_group_crinfo_t(Structure):
        pass
    
    struct_qvector_group_crinfo_t_._pack_ = 1 # source:False
    struct_qvector_group_crinfo_t_._fields_ = [
        ('array', ctypes.POINTER(struct_group_crinfo_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_process_info_t_(Structure):
        pass
    
    class struct_process_info_t(Structure):
        pass
    
    struct_qvector_process_info_t_._pack_ = 1 # source:False
    struct_qvector_process_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_process_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_qbasic_block_t_(Structure):
        pass
    
    class struct_qbasic_block_t(Structure):
        pass
    
    struct_qvector_qbasic_block_t_._pack_ = 1 # source:False
    struct_qvector_qbasic_block_t_._fields_ = [
        ('array', ctypes.POINTER(struct_qbasic_block_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_refinfo_desc_t_(Structure):
        pass
    
    class struct_refinfo_desc_t(Structure):
        pass
    
    struct_qvector_refinfo_desc_t_._pack_ = 1 # source:False
    struct_qvector_refinfo_desc_t_._fields_ = [
        ('array', ctypes.POINTER(struct_refinfo_desc_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_tev_info_reg_t_(Structure):
        pass
    
    class struct_tev_info_reg_t(Structure):
        pass
    
    struct_qvector_tev_info_reg_t_._pack_ = 1 # source:False
    struct_qvector_tev_info_reg_t_._fields_ = [
        ('array', ctypes.POINTER(struct_tev_info_reg_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_simpleline_place_t_vtbl(Structure):
        pass
    
    class struct_srcinfo_provider_t_vtbl(Structure):
        pass
    
    class struct_std___Make_unsigned2_1_(Structure):
        pass
    
    class struct_std___Make_unsigned2_2_(Structure):
        pass
    
    class struct_std___Make_unsigned2_4_(Structure):
        pass
    
    class struct_std___Make_unsigned2_8_(Structure):
        pass
    
    class struct_std__allocator_wchar_t_(Structure):
        pass
    
    class struct_std__bad_exception_vtbl(Structure):
        pass
    
    class struct_std__basic_ios_wchar_t_(Structure):
        pass
    
    class struct_std__basic_string_char_(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('_Mypair', struct_std___Compressed_pair_std__allocator_char___std___String_val_std___Simple_types_char____true_),
         ]
    
    class struct_std__input_iterator_tag(Structure):
        pass
    
    class struct_std__not_equal_to_void_(Structure):
        pass
    
    class struct_user_graph_place_t_vtbl(Structure):
        pass
    
    class struct_argtinfo_helper_t_vtbl(Structure):
        pass
    
    class struct_choose_ioport_parser_t(Structure):
        pass
    
    struct_choose_ioport_parser_t._pack_ = 1 # source:False
    struct_choose_ioport_parser_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_choose_ioport_parser_t_vtbl)),
    ]
    
    class struct_custom_data_type_ids_t(Structure):
        pass
    
    struct_custom_data_type_ids_t._pack_ = 1 # source:False
    struct_custom_data_type_ids_t._fields_ = [
        ('dtid', ctypes.c_int16),
        ('fids', ctypes.c_int16 * 8),
    ]
    
    class struct_dirtree_visitor_t_vtbl(Structure):
        pass
    
    class struct_dynamic_register_set_t(Structure):
        pass
    
    struct_qvector_const_char__P_._pack_ = 1 # source:False
    struct_qvector_const_char__P_._fields_ = [
        ('array', ctypes.POINTER(ctypes.c_char_p)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    dynamic_register_set_t__const_char_vec_t = struct_qvector_const_char__P_
    register_info_vec_t = struct_qvector_register_info_t_
    struct_dynamic_register_set_t._pack_ = 1 # source:False
    struct_dynamic_register_set_t._fields_ = [
        ('ri_vec', register_info_vec_t),
        ('strvec', qstrvec_t),
        ('classname_ptrs', dynamic_register_set_t__const_char_vec_t),
        ('bit_strings_ptrs_vec', struct_qvector_qvector_const_char__P__),
    ]
    
    class struct_extlang_visitor_t_vtbl(Structure):
        pass
    
    class struct_file_enumerator_t_vtbl(Structure):
        pass
    
    class struct_func_parent_iterator_t(Structure):
        pass
    
    struct_func_parent_iterator_t._pack_ = 1 # source:False
    struct_func_parent_iterator_t._fields_ = [
        ('fnt', ctypes.POINTER(struct_func_t)),
        ('idx', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_highlighter_cbs_t_vtbl(Structure):
        pass
    
    class struct_ida_lowertype_helper_t(Structure):
        pass
    
    class struct_tinfo_t(Structure):
        pass
    
    struct_ida_lowertype_helper_t._pack_ = 1 # source:False
    struct_ida_lowertype_helper_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
        ('tif', ctypes.POINTER(struct_tinfo_t)),
        ('ea', ctypes.c_uint64),
        ('purged_bytes', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct_janitor_t_linput_t__P_(Structure):
        pass
    
    class struct_linput_t(Structure):
        pass
    
    struct_janitor_t_linput_t__P_._pack_ = 1 # source:False
    struct_janitor_t_linput_t__P_._fields_ = [
        ('resource', ctypes.POINTER(ctypes.POINTER(struct_linput_t))),
    ]
    
    class struct_qlist_ui_request_t__P_(Structure):
        pass
    
    struct_qlist_ui_request_t__P_._pack_ = 1 # source:False
    struct_qlist_ui_request_t__P_._fields_ = [
        ('node', struct_qlist_ui_request_t__P___listnode_t),
        ('length', ctypes.c_uint64),
    ]
    
    class struct_qvector_debug_event_t_(Structure):
        pass
    
    class struct_debug_event_t(Structure):
        pass
    
    struct_qvector_debug_event_t_._pack_ = 1 # source:False
    struct_qvector_debug_event_t_._fields_ = [
        ('array', ctypes.POINTER(struct_debug_event_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_enum_member_t_(Structure):
        pass
    
    class struct_enum_member_t(Structure):
        pass
    
    struct_qvector_enum_member_t_._pack_ = 1 # source:False
    struct_qvector_enum_member_t_._fields_ = [
        ('array', ctypes.POINTER(struct_enum_member_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_memory_info_t_(Structure):
        pass
    
    class struct_memory_info_t(Structure):
        pass
    
    struct_qvector_memory_info_t_._pack_ = 1 # source:False
    struct_qvector_memory_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_memory_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_memreg_info_t_(Structure):
        pass
    
    class struct_memreg_info_t(Structure):
        pass
    
    struct_qvector_memreg_info_t_._pack_ = 1 # source:False
    struct_qvector_memreg_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_memreg_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_movbpt_code_t_(Structure):
        pass
    
    
    # values for enumeration 'movbpt_code_t'
    movbpt_code_t__enumvalues = {
        0: 'MOVBPT_OK',
        1: 'MOVBPT_NOT_FOUND',
        2: 'MOVBPT_DEST_BUSY',
        3: 'MOVBPT_BAD_TYPE',
    }
    MOVBPT_OK = 0
    MOVBPT_NOT_FOUND = 1
    MOVBPT_DEST_BUSY = 2
    MOVBPT_BAD_TYPE = 3
    movbpt_code_t = ctypes.c_uint32 # enum
    struct_qvector_movbpt_code_t_._pack_ = 1 # source:False
    struct_qvector_movbpt_code_t_._fields_ = [
        ('array', ctypes.POINTER(movbpt_code_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_movbpt_info_t_(Structure):
        pass
    
    class struct_movbpt_info_t(Structure):
        pass
    
    struct_qvector_movbpt_info_t_._pack_ = 1 # source:False
    struct_qvector_movbpt_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_movbpt_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_snapshot_t__P_(Structure):
        pass
    
    class struct_snapshot_t(Structure):
        pass
    
    struct_qvector_snapshot_t__P_._pack_ = 1 # source:False
    struct_qvector_snapshot_t__P_._fields_ = [
        ('array', ctypes.POINTER(ctypes.POINTER(struct_snapshot_t))),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_sync_source_t_(Structure):
        pass
    
    class struct_sync_source_t(Structure):
        pass
    
    struct_qvector_sync_source_t_._pack_ = 1 # source:False
    struct_qvector_sync_source_t_._fields_ = [
        ('array', ctypes.POINTER(struct_sync_source_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_thread_name_t_(Structure):
        pass
    
    class struct_thread_name_t(Structure):
        pass
    
    struct_qvector_thread_name_t_._pack_ = 1 # source:False
    struct_qvector_thread_name_t_._fields_ = [
        ('array', ctypes.POINTER(struct_thread_name_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std___Container_base12(Structure):
        pass
    
    struct_std___Container_base12._pack_ = 1 # source:False
    struct_std___Container_base12._fields_ = [
        ('_Myproxy', ctypes.POINTER(struct_std___Container_proxy)),
    ]
    
    class struct_std___Default_sentinel(Structure):
        pass
    
    class struct_std___Distance_unknown(Structure):
        pass
    
    class struct_std___Equal_allocators(Structure):
        pass
    
    class struct_std___Unused_parameter(Structure):
        pass
    
    class struct_std__char_traits_char_(Structure):
        pass
    
    class struct_std__hash_long_double_(Structure):
        pass
    
    class struct_struct_field_visitor_t(Structure):
        pass
    
    struct_struct_field_visitor_t._pack_ = 1 # source:False
    struct_struct_field_visitor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_struct_field_visitor_t_vtbl)),
    ]
    
    class struct___crt_locale_pointers(Structure):
        pass
    
    class struct___crt_multibyte_data(Structure):
        pass
    
    class struct___crt_locale_data(Structure):
        pass
    
    struct___crt_locale_pointers._pack_ = 1 # source:False
    struct___crt_locale_pointers._fields_ = [
        ('locinfo', ctypes.POINTER(struct___crt_locale_data)),
        ('mbcinfo', ctypes.POINTER(struct___crt_multibyte_data)),
    ]
    
    class struct_abstract_graph_t_vtbl(Structure):
        pass
    
    class struct_action_handler_t_vtbl(Structure):
        pass
    
    class struct_cfgopt_t__num_range_t(Structure):
        pass
    
    struct_cfgopt_t__num_range_t._pack_ = 1 # source:False
    struct_cfgopt_t__num_range_t._fields_ = [
        ('minval', ctypes.c_int64),
        ('maxval', ctypes.c_int64),
    ]
    
    class struct_enum_member_visitor_t(Structure):
        pass
    
    struct_enum_member_visitor_t._pack_ = 1 # source:False
    struct_enum_member_visitor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_enum_member_visitor_t_vtbl)),
    ]
    
    class struct_event_listener_t_vtbl(Structure):
        pass
    
    class struct_generic_linput_t_vtbl(Structure):
        pass
    
    class struct_graph_location_info_t(Structure):
        pass
    
    struct_graph_location_info_t._pack_ = 1 # source:False
    struct_graph_location_info_t._fields_ = [
        ('zoom', ctypes.c_double),
        ('orgx', ctypes.c_double),
        ('orgy', ctypes.c_double),
    ]
    
    class struct_memory_deserializer_t(Structure):
        pass
    
    struct_memory_deserializer_t._pack_ = 1 # source:False
    struct_memory_deserializer_t._fields_ = [
        ('ptr', ctypes.POINTER(ctypes.c_ubyte)),
        ('end', ctypes.POINTER(ctypes.c_ubyte)),
    ]
    
    class struct_qvector_cfgopt_set_t_(Structure):
        pass
    
    class struct_cfgopt_set_t(Structure):
        pass
    
    struct_qvector_cfgopt_set_t_._pack_ = 1 # source:False
    struct_qvector_cfgopt_set_t_._fields_ = [
        ('array', ctypes.POINTER(struct_cfgopt_set_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_extlang_t__P_(Structure):
        pass
    
    class struct_extlang_t(Structure):
        pass
    
    struct_qvector_extlang_t__P_._pack_ = 1 # source:False
    struct_qvector_extlang_t__P_._fields_ = [
        ('array', ctypes.POINTER(ctypes.POINTER(struct_extlang_t))),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_fixup_info_t_(Structure):
        pass
    
    class struct_fixup_info_t(Structure):
        pass
    
    struct_qvector_fixup_info_t_._pack_ = 1 # source:False
    struct_qvector_fixup_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_fixup_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_idc_global_t_(Structure):
        pass
    
    class struct_idc_global_t(Structure):
        pass
    
    struct_qvector_idc_global_t_._pack_ = 1 # source:False
    struct_qvector_idc_global_t_._fields_ = [
        ('array', ctypes.POINTER(struct_idc_global_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_ioport_bit_t_(Structure):
        pass
    
    class struct_ioport_bit_t(Structure):
        pass
    
    struct_qvector_ioport_bit_t_._pack_ = 1 # source:False
    struct_qvector_ioport_bit_t_._fields_ = [
        ('array', ctypes.POINTER(struct_ioport_bit_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_qvector_int__(Structure):
        pass
    
    class struct_qvector_int_(Structure):
        pass
    
    struct_qvector_qvector_int__._pack_ = 1 # source:False
    struct_qvector_qvector_int__._fields_ = [
        ('array', ctypes.POINTER(struct_qvector_int_)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_reg_access_t_(Structure):
        pass
    
    class struct_reg_access_t(Structure):
        pass
    
    struct_qvector_reg_access_t_._pack_ = 1 # source:False
    struct_qvector_reg_access_t_._fields_ = [
        ('array', ctypes.POINTER(struct_reg_access_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_simpleline_t_(Structure):
        pass
    
    class struct_simpleline_t(Structure):
        pass
    
    struct_qvector_simpleline_t_._pack_ = 1 # source:False
    struct_qvector_simpleline_t_._fields_ = [
        ('array', ctypes.POINTER(struct_simpleline_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_udt_member_t_(Structure):
        pass
    
    class struct_udt_member_t(Structure):
        pass
    
    struct_qvector_udt_member_t_._pack_ = 1 # source:False
    struct_qvector_udt_member_t_._fields_ = [
        ('array', ctypes.POINTER(struct_udt_member_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_unsigned_int_(Structure):
        pass
    
    struct_qvector_unsigned_int_._pack_ = 1 # source:False
    struct_qvector_unsigned_int_._fields_ = [
        ('array', ctypes.POINTER(ctypes.c_uint32)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_refcnted_regex_t_vtbl(Structure):
        pass
    
    class struct_std___Container_base0(Structure):
        pass
    
    class struct_std___Iterator_base12(Structure):
        pass
    
    struct_std___Container_proxy._pack_ = 1 # source:False
    struct_std___Container_proxy._fields_ = [
        ('_Mycont', ctypes.POINTER(struct_std___Container_base12)),
        ('_Myfirstiter', ctypes.POINTER(struct_std___Iterator_base12)),
    ]
    
    class struct_std___Invoker_functor(Structure):
        pass
    
    struct_std___Iterator_base12._pack_ = 1 # source:False
    struct_std___Iterator_base12._fields_ = [
        ('_Myproxy', ctypes.POINTER(struct_std___Container_proxy)),
        ('_Mynextiter', ctypes.POINTER(struct_std___Iterator_base12)),
    ]
    
    class struct_std___Make_signed2_1_(Structure):
        pass
    
    class struct_std___Make_signed2_2_(Structure):
        pass
    
    class struct_std___Make_signed2_4_(Structure):
        pass
    
    class struct_std___Make_signed2_8_(Structure):
        pass
    
    class struct_std__less_equal_void_(Structure):
        pass
    
    class struct_std__multiplies_void_(Structure):
        pass
    
    class struct_std__nested_exception(Structure):
        pass
    
    class struct_std__exception_ptr(Structure):
        pass
    
    struct_std__exception_ptr._pack_ = 1 # source:False
    struct_std__exception_ptr._fields_ = [
        ('_Data1', ctypes.POINTER(None)),
        ('_Data2', ctypes.POINTER(None)),
    ]
    
    struct_std__nested_exception._pack_ = 1 # source:False
    struct_std__nested_exception._fields_ = [
        ('__vftable', ctypes.POINTER(struct_std__nested_exception_vtbl)),
        ('_Exc', struct_std__exception_ptr),
    ]
    
    class struct_user_defined_prefix_t(Structure):
        pass
    
    struct_user_defined_prefix_t._pack_ = 1 # source:False
    struct_user_defined_prefix_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_user_defined_prefix_t_vtbl)),
    ]
    
    class struct___std_exception_data(Structure):
        pass
    
    struct___std_exception_data._pack_ = 1 # source:False
    struct___std_exception_data._fields_ = [
        ('_What', ctypes.c_char_p),
        ('_DoFree', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 7),
    ]
    
    class struct_bitfield_type_data_t(Structure):
        pass
    
    struct_bitfield_type_data_t._pack_ = 1 # source:False
    struct_bitfield_type_data_t._fields_ = [
        ('nbytes', ctypes.c_ubyte),
        ('width', ctypes.c_ubyte),
        ('is_unsigned', ctypes.c_char),
    ]
    
    class struct_chooser_item_attrs_t(Structure):
        pass
    
    struct_chooser_item_attrs_t._pack_ = 1 # source:False
    struct_chooser_item_attrs_t._fields_ = [
        ('cb', ctypes.c_int32),
        ('flags', ctypes.c_int32),
        ('color', ctypes.c_uint32),
    ]
    
    class struct_chooser_multi_t_vtbl(Structure):
        pass
    
    class struct_const_aloc_visitor_t(Structure):
        pass
    
    struct_const_aloc_visitor_t._pack_ = 1 # source:False
    struct_const_aloc_visitor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_const_aloc_visitor_t_vtbl)),
    ]
    
    class struct_edge_infos_wrapper_t(Structure):
        pass
    
    class struct_edge_infos_t(Structure):
        pass
    
    struct_edge_infos_wrapper_t._pack_ = 1 # source:False
    struct_edge_infos_wrapper_t._fields_ = [
        ('ptr', ctypes.POINTER(struct_edge_infos_t)),
    ]
    
    class struct_func_item_iterator_t(Structure):
        pass
    
    class struct_func_tail_iterator_t(Structure):
        pass
    
    struct_range_t._pack_ = 1 # source:False
    struct_range_t._fields_ = [
        ('start_ea', ctypes.c_uint64),
        ('end_ea', ctypes.c_uint64),
    ]
    
    struct_func_tail_iterator_t._pack_ = 1 # source:False
    struct_func_tail_iterator_t._fields_ = [
        ('pfn', ctypes.POINTER(struct_func_t)),
        ('idx', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('seglim', struct_range_t),
    ]
    
    struct_func_item_iterator_t._pack_ = 1 # source:False
    struct_func_item_iterator_t._fields_ = [
        ('fti', struct_func_tail_iterator_t),
        ('ea', ctypes.c_uint64),
    ]
    
    class struct_graph_node_visitor_t(Structure):
        pass
    
    class struct_node_set_t(Structure):
        pass
    
    struct_node_set_t._pack_ = 1 # source:False
    struct_node_set_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
    ]
    
    struct_graph_node_visitor_t._pack_ = 1 # source:False
    struct_graph_node_visitor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_graph_node_visitor_t_vtbl)),
        ('visited', struct_node_set_t),
    ]
    
    class struct_graph_path_visitor_t(Structure):
        pass
    
    struct_qvector_int_._pack_ = 1 # source:False
    struct_qvector_int_._fields_ = [
        ('array', ctypes.POINTER(ctypes.c_int32)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    intvec_t = struct_qvector_int_
    struct_graph_path_visitor_t._pack_ = 1 # source:False
    struct_graph_path_visitor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_graph_path_visitor_t_vtbl)),
        ('path', intvec_t),
        ('prune', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 7),
    ]
    
    class struct_graph_visitor_t_vtbl(Structure):
        pass
    
    class struct_janitor_t__iobuf__P_(Structure):
        pass
    
    class struct__iobuf(Structure):
        pass
    
    struct_janitor_t__iobuf__P_._pack_ = 1 # source:False
    struct_janitor_t__iobuf__P_._fields_ = [
        ('resource', ctypes.POINTER(ctypes.POINTER(struct__iobuf))),
    ]
    
    class struct_mutable_graph_t_vtbl(Structure):
        pass
    
    class struct_post_event_visitor_t(Structure):
        pass
    
    struct_post_event_visitor_t._pack_ = 1 # source:False
    struct_post_event_visitor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_post_event_visitor_t_vtbl)),
    ]
    
    class struct_qrefcnt_t_extlang_t_(Structure):
        pass
    
    struct_qrefcnt_t_extlang_t_._pack_ = 1 # source:False
    struct_qrefcnt_t_extlang_t_._fields_ = [
        ('ptr', ctypes.POINTER(struct_extlang_t)),
    ]
    
    class struct_qvector_simd_info_t_(Structure):
        pass
    
    class struct_simd_info_t(Structure):
        pass
    
    struct_qvector_simd_info_t_._pack_ = 1 # source:False
    struct_qvector_simd_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_simd_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_type_attr_t_(Structure):
        pass
    
    class struct_type_attr_t(Structure):
        pass
    
    struct_qvector_type_attr_t_._pack_ = 1 # source:False
    struct_qvector_type_attr_t_._fields_ = [
        ('array', ctypes.POINTER(struct_type_attr_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_std___Fake_allocator(Structure):
        pass
    
    class struct_std___False_copy_cat(Structure):
        pass
    
    class struct_std___Iterator_base0(Structure):
        pass
    
    class struct_std___Num_float_base(Structure):
        pass
    
    class struct_std___Unpack_tuple_t(Structure):
        pass
    
    class struct_std__allocator_char_(Structure):
        pass
    
    class struct_std__allocator_void_(Structure):
        pass
    
    class struct_std__allocator_arg_t(Structure):
        pass
    
    class struct_std__basic_ios_char_(Structure):
        pass
    
    class struct_std__fpos__Mbstatet_(Structure):
        pass
    
    struct_std__fpos__Mbstatet_._pack_ = 1 # source:False
    struct_std__fpos__Mbstatet_._fields_ = [
        ('_Myoff', ctypes.c_int64),
        ('_Fpos', ctypes.c_int64),
        ('_Mystate', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 7),
    ]
    
    class struct_syntax_highlighter_t(Structure):
        pass
    
    class struct_highlighter_cbs_t(Structure):
        pass
    
    struct_syntax_highlighter_t._pack_ = 1 # source:False
    struct_syntax_highlighter_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_syntax_highlighter_t_vtbl)),
        ('highlight_block', ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.POINTER(struct_highlighter_cbs_t), ctypes.POINTER(struct__qstring_char_))),
    ]
    
    class struct_tinfo_visitor_t_vtbl(Structure):
        pass
    
    class struct__EXCEPTION_POINTERS(Structure):
        pass
    
    class struct_aloc_visitor_t_vtbl(Structure):
        pass
    
    class struct_altadjust_visitor_t(Structure):
        pass
    
    struct_altadjust_visitor_t._pack_ = 1 # source:False
    struct_altadjust_visitor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_altadjust_visitor_t_vtbl)),
    ]
    
    class struct_cancellable_graph_t(Structure):
        pass
    
    struct_cancellable_graph_t._pack_ = 1 # source:False
    struct_cancellable_graph_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
        ('cancelled', ctypes.c_char),
        ('padding', ctypes.c_char * 3),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct_chooser_base_t_vtbl(Structure):
        pass
    
    class struct_dirtree_selection_t(Structure):
        pass
    
    struct_dirtree_selection_t._pack_ = 1 # source:False
    struct_dirtree_selection_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_edge_layout_point_t(Structure):
        pass
    
    class struct_edge_t(Structure):
        pass
    
    struct_edge_t._pack_ = 1 # source:False
    struct_edge_t._fields_ = [
        ('src', ctypes.c_int32),
        ('dst', ctypes.c_int32),
    ]
    
    struct_edge_layout_point_t._pack_ = 1 # source:False
    struct_edge_layout_point_t._fields_ = [
        ('pidx', ctypes.c_int32),
        ('e', struct_edge_t),
    ]
    
    class struct_exec_request_t_vtbl(Structure):
        pass
    
    class struct_form_actions_t_vtbl(Structure):
        pass
    
    class struct_hexplace_gen_t_vtbl(Structure):
        pass
    
    class struct_idc_resolver_t_vtbl(Structure):
        pass
    
    class struct_jump_pattern_t_vtbl(Structure):
        pass
    
    class struct_macro_constructor_t(Structure):
        pass
    
    struct_macro_constructor_t._pack_ = 1 # source:False
    struct_macro_constructor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_macro_constructor_t_vtbl)),
        ('reserved', ctypes.c_uint64),
    ]
    
    class struct_qvector_bptaddrs_t_(Structure):
        pass
    
    class struct_bptaddrs_t(Structure):
        pass
    
    struct_qvector_bptaddrs_t_._pack_ = 1 # source:False
    struct_qvector_bptaddrs_t_._fields_ = [
        ('array', ctypes.POINTER(struct_bptaddrs_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_direntry_t_(Structure):
        pass
    
    class struct_direntry_t(Structure):
        pass
    
    struct_qvector_direntry_t_._pack_ = 1 # source:False
    struct_qvector_direntry_t_._fields_ = [
        ('array', ctypes.POINTER(struct_direntry_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_idp_desc_t_(Structure):
        pass
    
    class struct_idp_desc_t(Structure):
        pass
    
    struct_qvector_idp_desc_t_._pack_ = 1 # source:False
    struct_qvector_idp_desc_t_._fields_ = [
        ('array', ctypes.POINTER(struct_idp_desc_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_idp_name_t_(Structure):
        pass
    
    class struct_idp_name_t(Structure):
        pass
    
    struct_qvector_idp_name_t_._pack_ = 1 # source:False
    struct_qvector_idp_name_t_._fields_ = [
        ('array', ctypes.POINTER(struct_idp_name_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_node_set_t_(Structure):
        pass
    
    struct_qvector_node_set_t_._pack_ = 1 # source:False
    struct_qvector_node_set_t_._fields_ = [
        ('array', ctypes.POINTER(struct_node_set_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_rangeset_t_(Structure):
        pass
    
    struct_qvector_rangeset_t_._pack_ = 1 # source:False
    struct_qvector_rangeset_t_._fields_ = [
        ('array', ctypes.POINTER(struct_rangeset_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_reg_info_t_(Structure):
        pass
    
    class struct_reg_info_t(Structure):
        pass
    
    struct_qvector_reg_info_t_._pack_ = 1 # source:False
    struct_qvector_reg_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_reg_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_row_info_t_(Structure):
        pass
    
    class struct_row_info_t(Structure):
        pass
    
    struct_qvector_row_info_t_._pack_ = 1 # source:False
    struct_qvector_row_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_row_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_tev_info_t_(Structure):
        pass
    
    class struct_tev_info_t(Structure):
        pass
    
    struct_qvector_tev_info_t_._pack_ = 1 # source:False
    struct_qvector_tev_info_t_._fields_ = [
        ('array', ctypes.POINTER(struct_tev_info_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_twinline_t_(Structure):
        pass
    
    struct_qvector_twinline_t_._pack_ = 1 # source:False
    struct_qvector_twinline_t_._fields_ = [
        ('array', ctypes.POINTER(struct_twinline_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_renderer_info_pos_t(Structure):
        pass
    
    struct_renderer_info_pos_t._pack_ = 1 # source:False
    struct_renderer_info_pos_t._fields_ = [
        ('node', ctypes.c_int32),
        ('cx', ctypes.c_int16),
        ('cy', ctypes.c_int16),
    ]
    
    class struct_renderer_pos_info_t(Structure):
        pass
    
    struct_renderer_pos_info_t._pack_ = 1 # source:False
    struct_renderer_pos_info_t._fields_ = [
        ('node', ctypes.c_int32),
        ('cx', ctypes.c_int16),
        ('cy', ctypes.c_int16),
        ('sx', ctypes.c_int16),
        ('PADDING_0', ctypes.c_ubyte * 2),
    ]
    
    class struct_std___Select_false_(Structure):
        pass
    
    class struct_std__allocator_int_(Structure):
        pass
    
    class struct_std__bad_alloc_vtbl(Structure):
        pass
    
    class struct_std__equal_to_void_(Structure):
        pass
    
    class struct_std__exception_vtbl(Structure):
        pass
    
    class struct_typedef_type_data_t(Structure):
        pass
    
    class struct_til_t(Structure):
        pass
    
    class union_typedef_type_data_t_0(Union):
        pass
    
    union_typedef_type_data_t_0._pack_ = 1 # source:False
    union_typedef_type_data_t_0._fields_ = [
        ('name', ctypes.c_char_p),
        ('ordinal', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    struct_typedef_type_data_t._pack_ = 1 # source:False
    struct_typedef_type_data_t._anonymous_ = ('_0',)
    struct_typedef_type_data_t._fields_ = [
        ('til', ctypes.POINTER(struct_til_t)),
        ('_0', union_typedef_type_data_t_0),
        ('is_ordref', ctypes.c_char),
        ('resolve', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 6),
    ]
    
    class struct__CrtMemBlockHeader(Structure):
        pass
    
    class struct_array_parameters_t(Structure):
        pass
    
    struct_array_parameters_t._pack_ = 1 # source:False
    struct_array_parameters_t._fields_ = [
        ('flags', ctypes.c_int32),
        ('lineitems', ctypes.c_int32),
        ('alignment', ctypes.c_int32),
    ]
    
    class struct_bpt_visitor_t_vtbl(Structure):
        pass
    
    class struct_cfgopt_t__params_t(Structure):
        pass
    
    struct_cfgopt_t__params_t._pack_ = 1 # source:False
    struct_cfgopt_t__params_t._fields_ = [
        ('p1', ctypes.c_int64),
        ('p2', ctypes.c_int64),
    ]
    
    class struct_chooser_t__cbret_t(Structure):
        pass
    
    
    # values for enumeration 'chooser_base_t__cbres_t'
    chooser_base_t__cbres_t__enumvalues = {
        0: 'NOTHING_CHANGED',
        1: 'ALL_CHANGED',
        2: 'SELECTION_CHANGED',
    }
    NOTHING_CHANGED = 0
    ALL_CHANGED = 1
    SELECTION_CHANGED = 2
    chooser_base_t__cbres_t = ctypes.c_uint32 # enum
    struct_chooser_t__cbret_t._pack_ = 1 # source:False
    struct_chooser_t__cbret_t._fields_ = [
        ('idx', ctypes.c_int64),
        ('changed', chooser_base_t__cbres_t),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_depth_first_info_t(Structure):
        pass
    
    class struct_dirtree_iterator_t(Structure):
        pass
    
    struct_dirtree_cursor_t._pack_ = 1 # source:False
    struct_dirtree_cursor_t._fields_ = [
        ('parent', ctypes.c_uint64),
        ('rank', ctypes.c_uint64),
    ]
    
    struct_dirtree_iterator_t._pack_ = 1 # source:False
    struct_dirtree_iterator_t._fields_ = [
        ('pattern', qstring),
        ('cursor', struct_dirtree_cursor_t),
    ]
    
    class struct_format_data_info_t(Structure):
        pass
    
    struct_format_data_info_t._pack_ = 1 # source:False
    struct_format_data_info_t._fields_ = [
        ('ptvf', ctypes.c_int32),
        ('radix', ctypes.c_int32),
        ('max_length', ctypes.c_int32),
        ('arrbase', ctypes.c_int32),
        ('arrnelems', ctypes.c_int32),
        ('margin', ctypes.c_int32),
        ('indent', ctypes.c_int32),
    ]
    
    class struct_ioports_fallback_t(Structure):
        pass
    
    struct_ioports_fallback_t._pack_ = 1 # source:False
    struct_ioports_fallback_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_ioports_fallback_t_vtbl)),
    ]
    
    class struct_lowertype_helper_t(Structure):
        pass
    
    struct_lowertype_helper_t._pack_ = 1 # source:False
    struct_lowertype_helper_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_lowertype_helper_t_vtbl)),
    ]
    
    class struct_outctx_base_t_vtbl(Structure):
        pass
    
    class struct_qflow_chart_t_vtbl(Structure):
        pass
    
    class struct_qrefcnt_obj_t_vtbl(Structure):
        pass
    
    class struct_qvector_argpart_t_(Structure):
        pass
    
    class struct_argpart_t(Structure):
        pass
    
    struct_qvector_argpart_t_._pack_ = 1 # source:False
    struct_qvector_argpart_t_._fields_ = [
        ('array', ctypes.POINTER(struct_argpart_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_ea_name_t_(Structure):
        pass
    
    class struct_ea_name_t(Structure):
        pass
    
    struct_qvector_ea_name_t_._pack_ = 1 # source:False
    struct_qvector_ea_name_t_._fields_ = [
        ('array', ctypes.POINTER(struct_ea_name_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_funcarg_t_(Structure):
        pass
    
    class struct_funcarg_t(Structure):
        pass
    
    struct_qvector_funcarg_t_._pack_ = 1 # source:False
    struct_qvector_funcarg_t_._fields_ = [
        ('array', ctypes.POINTER(struct_funcarg_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    struct_qvector_long_long_._pack_ = 1 # source:False
    struct_qvector_long_long_._fields_ = [
        ('array', ctypes.POINTER(ctypes.c_int64)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_modinfo_t_(Structure):
        pass
    
    class struct_modinfo_t(Structure):
        pass
    
    struct_qvector_modinfo_t_._pack_ = 1 # source:False
    struct_qvector_modinfo_t_._fields_ = [
        ('array', ctypes.POINTER(struct_modinfo_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_simpleline_place_t(Structure):
        pass
    
    struct_simpleline_place_t._pack_ = 1 # source:False
    struct_simpleline_place_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('n', ctypes.c_uint32),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct_source_file_t_vtbl(Structure):
        pass
    
    class struct_source_item_t_vtbl(Structure):
        pass
    
    class struct_srcinfo_provider_t(Structure):
        pass
    
    struct_srcinfo_provider_t._pack_ = 1 # source:False
    struct_srcinfo_provider_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_srcinfo_provider_t_vtbl)),
        ('cb', ctypes.c_uint64),
        ('flags', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('name', ctypes.c_char_p),
        ('display_name', ctypes.c_char_p),
    ]
    
    class struct_std___Exact_args_t(Structure):
        pass
    
    class struct_std___Num_int_base(Structure):
        pass
    
    class struct_std__bad_exception(Structure):
        pass
    
    struct_std__bad_exception._pack_ = 1 # source:False
    struct_std__bad_exception._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_std__common_type__(Structure):
        pass
    
    class struct_std__greater_void_(Structure):
        pass
    
    class struct_std__map_int__int_(Structure):
        pass
    
    struct_std__map_int__int_._pack_ = 1 # source:False
    struct_std__map_int__int_._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
    ]
    
    class struct_stkarg_area_info_t(Structure):
        pass
    
    struct_stkarg_area_info_t._pack_ = 1 # source:False
    struct_stkarg_area_info_t._fields_ = [
        ('cb', ctypes.c_uint64),
        ('stkarg_offset', ctypes.c_int64),
        ('shadow_size', ctypes.c_int64),
        ('linkage_area', ctypes.c_int64),
    ]
    
    class struct_structplace_t_vtbl(Structure):
        pass
    
    class struct_user_graph_place_t(Structure):
        pass
    
    struct_user_graph_place_t._pack_ = 1 # source:False
    struct_user_graph_place_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('node', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class union_view_mouse_event_location_t(Union):
        pass
    
    union_view_mouse_event_location_t._pack_ = 1 # source:False
    union_view_mouse_event_location_t._fields_ = [
        ('ea', ctypes.c_uint64),
        ('item', ctypes.POINTER(struct_selection_item_t)),
    ]
    
    view_mouse_event_t__location_t = union_view_mouse_event_location_t
    
    # values for enumeration 'tcc_renderer_type_t'
    tcc_renderer_type_t__enumvalues = {
        0: 'TCCRT_INVALID',
        1: 'TCCRT_FLAT',
        2: 'TCCRT_GRAPH',
        3: 'TCCRT_PROXIMITY',
    }
    TCCRT_INVALID = 0
    TCCRT_FLAT = 1
    TCCRT_GRAPH = 2
    TCCRT_PROXIMITY = 3
    tcc_renderer_type_t = ctypes.c_uint32 # enum
    struct_view_mouse_event_t._pack_ = 1 # source:False
    struct_view_mouse_event_t._fields_ = [
        ('rtype', tcc_renderer_type_t),
        ('x', ctypes.c_uint32),
        ('y', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('location', view_mouse_event_t__location_t),
        ('state', ctypes.c_int32),
        ('button', vme_button_t),
        ('renderer_pos', struct_renderer_pos_info_t),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct__Real_type_float_(Structure):
        pass
    
    class struct_qvector_wchar_t_(Structure):
        pass
    
    struct_qvector_wchar_t_._pack_ = 1 # source:False
    struct_qvector_wchar_t_._fields_ = [
        ('array', ctypes.POINTER(ctypes.c_int16)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    struct__qstring_wchar_t_._pack_ = 1 # source:False
    struct__qstring_wchar_t_._fields_ = [
        ('body', struct_qvector_wchar_t_),
    ]
    
    class struct__wfinddata32i64_t(Structure):
        pass
    
    struct__wfinddata32i64_t._pack_ = 1 # source:False
    struct__wfinddata32i64_t._fields_ = [
        ('attrib', ctypes.c_uint32),
        ('time_create', ctypes.c_int32),
        ('time_access', ctypes.c_int32),
        ('time_write', ctypes.c_int32),
        ('size', ctypes.c_int64),
        ('name', ctypes.c_int16 * 260),
    ]
    
    class struct__wfinddata64i32_t(Structure):
        pass
    
    struct__wfinddata64i32_t._pack_ = 1 # source:False
    struct__wfinddata64i32_t._fields_ = [
        ('attrib', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('time_create', ctypes.c_int64),
        ('time_access', ctypes.c_int64),
        ('time_write', ctypes.c_int64),
        ('size', ctypes.c_uint32),
        ('name', ctypes.c_int16 * 260),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct_action_ctx_base_t(Structure):
        pass
    
    class struct_member_t(Structure):
        pass
    
    class struct_struc_t(Structure):
        pass
    
    sizevec_t = struct_qvector_unsigned_long_long_
    class union_action_ctx_base_source_t(Union):
        pass
    
    class struct_chooser_base_t(Structure):
        pass
    
    union_action_ctx_base_source_t._pack_ = 1 # source:False
    union_action_ctx_base_source_t._fields_ = [
        ('chooser', ctypes.POINTER(struct_chooser_base_t)),
    ]
    
    struct_action_ctx_base_t._pack_ = 1 # source:False
    struct_action_ctx_base_t._fields_ = [
        ('widget', ctypes.POINTER(struct_TWidget)),
        ('widget_type', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('widget_title', qstring),
        ('chooser_selection', sizevec_t),
        ('action', ctypes.c_char_p),
        ('cur_flags', ctypes.c_uint32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('cur_ea', ctypes.c_uint64),
        ('cur_value', ctypes.c_uint64),
        ('cur_func', ctypes.POINTER(struct_func_t)),
        ('cur_fchunk', ctypes.POINTER(struct_func_t)),
        ('cur_struc', ctypes.POINTER(struct_struc_t)),
        ('cur_strmem', ctypes.POINTER(struct_member_t)),
        ('cur_enum', ctypes.c_uint64),
        ('cur_seg', ctypes.POINTER(struct_segment_t)),
        ('cur_sel', struct_action_ctx_base_cur_sel_t),
        ('regname', ctypes.c_char_p),
        ('focus', ctypes.POINTER(struct_TWidget)),
        ('graph_selection', ctypes.POINTER(struct_screen_graph_selection_t)),
        ('cur_enum_member', ctypes.c_uint64),
        ('dirtree_selection', ctypes.POINTER(struct_dirtree_selection_t)),
        ('source', union_action_ctx_base_source_t),
    ]
    
    class struct_argtinfo_helper_t(Structure):
        pass
    
    struct_argtinfo_helper_t._pack_ = 1 # source:False
    struct_argtinfo_helper_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_argtinfo_helper_t_vtbl)),
        ('reserved', ctypes.c_uint64),
    ]
    
    class struct_array_type_data_t(Structure):
        pass
    
    struct_tinfo_t._pack_ = 1 # source:False
    struct_tinfo_t._fields_ = [
        ('typid', ctypes.c_uint32),
    ]
    
    struct_array_type_data_t._pack_ = 1 # source:False
    struct_array_type_data_t._fields_ = [
        ('elem_type', struct_tinfo_t),
        ('base', ctypes.c_uint32),
        ('nelems', ctypes.c_uint32),
    ]
    
    struct_call_stack_info_t._pack_ = 1 # source:False
    struct_call_stack_info_t._fields_ = [
        ('callea', ctypes.c_uint64),
        ('funcea', ctypes.c_uint64),
        ('fp', ctypes.c_uint64),
        ('funcok', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 7),
    ]
    
    class struct_bytevec_t(Structure):
        pass
    
    struct_bytevec_t._pack_ = 1 # source:False
    struct_bytevec_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_rangevec_t(Structure):
        pass
    
    struct_rangevec_t._pack_ = 1 # source:False
    struct_rangevec_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    struct_compiled_binpat_t._pack_ = 1 # source:False
    struct_compiled_binpat_t._fields_ = [
        ('bytes', struct_bytevec_t),
        ('mask', struct_bytevec_t),
        ('strlits', struct_rangevec_t),
        ('encidx', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_dirtree_visitor_t(Structure):
        pass
    
    struct_dirtree_visitor_t._pack_ = 1 # source:False
    struct_dirtree_visitor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_dirtree_visitor_t_vtbl)),
    ]
    
    class struct_extlang_visitor_t(Structure):
        pass
    
    struct_extlang_visitor_t._pack_ = 1 # source:False
    struct_extlang_visitor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_extlang_visitor_t_vtbl)),
    ]
    
    class struct_file_enumerator_t(Structure):
        pass
    
    struct_file_enumerator_t._pack_ = 1 # source:False
    struct_file_enumerator_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_file_enumerator_t_vtbl)),
    ]
    
    struct_highlighter_cbs_t._pack_ = 1 # source:False
    struct_highlighter_cbs_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_highlighter_cbs_t_vtbl)),
    ]
    
    class struct_instant_dbgopts_t(Structure):
        pass
    
    struct_instant_dbgopts_t._pack_ = 1 # source:False
    struct_instant_dbgopts_t._fields_ = [
        ('debmod', qstring),
        ('env', qstring),
        ('host', qstring),
        ('pass', qstring),
        ('port', ctypes.c_int32),
        ('pid', ctypes.c_int32),
        ('event_id', ctypes.c_int32),
        ('attach', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 3),
    ]
    
    class struct_interr_exc_t_vtbl(Structure):
        pass
    
    class struct_qvector_argloc_t_(Structure):
        pass
    
    class struct_argloc_t(Structure):
        pass
    
    struct_qvector_argloc_t_._pack_ = 1 # source:False
    struct_qvector_argloc_t_._fields_ = [
        ('array', ctypes.POINTER(struct_argloc_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_bpt_t__P_(Structure):
        pass
    
    struct_qvector_bpt_t__P_._pack_ = 1 # source:False
    struct_qvector_bpt_t__P_._fields_ = [
        ('array', ctypes.POINTER(ctypes.POINTER(struct_bpt_t))),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_cliopt_t_(Structure):
        pass
    
    class struct_cliopt_t(Structure):
        pass
    
    struct_qvector_cliopt_t_._pack_ = 1 # source:False
    struct_qvector_cliopt_t_._fields_ = [
        ('array', ctypes.POINTER(struct_cliopt_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_intmap_t_(Structure):
        pass
    
    class struct_intmap_t(Structure):
        pass
    
    struct_qvector_intmap_t_._pack_ = 1 # source:False
    struct_qvector_intmap_t_._fields_ = [
        ('array', ctypes.POINTER(struct_intmap_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_ioport_t_(Structure):
        pass
    
    class struct_ioport_t(Structure):
        pass
    
    struct_qvector_ioport_t_._pack_ = 1 # source:False
    struct_qvector_ioport_t_._fields_ = [
        ('array', ctypes.POINTER(struct_ioport_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_jvalue_t_(Structure):
        pass
    
    class struct_jvalue_t(Structure):
        pass
    
    struct_qvector_jvalue_t_._pack_ = 1 # source:False
    struct_qvector_jvalue_t_._fields_ = [
        ('array', ctypes.POINTER(struct_jvalue_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_lowcnd_t_(Structure):
        pass
    
    class struct_lowcnd_t(Structure):
        pass
    
    struct_qvector_lowcnd_t_._pack_ = 1 # source:False
    struct_qvector_lowcnd_t_._fields_ = [
        ('array', ctypes.POINTER(struct_lowcnd_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_regobj_t_(Structure):
        pass
    
    class struct_regobj_t(Structure):
        pass
    
    struct_qvector_regobj_t_._pack_ = 1 # source:False
    struct_qvector_regobj_t_._fields_ = [
        ('array', ctypes.POINTER(struct_regobj_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_regval_t_(Structure):
        pass
    
    class struct_regval_t(Structure):
        pass
    
    struct_qvector_regval_t_._pack_ = 1 # source:False
    struct_qvector_regval_t_._fields_ = [
        ('array', ctypes.POINTER(struct_regval_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_stkpnt_t_(Structure):
        pass
    
    struct_qvector_stkpnt_t_._pack_ = 1 # source:False
    struct_qvector_stkpnt_t_._fields_ = [
        ('array', ctypes.POINTER(struct_stkpnt_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_tryblk_t_(Structure):
        pass
    
    class struct_tryblk_t(Structure):
        pass
    
    struct_qvector_tryblk_t_._pack_ = 1 # source:False
    struct_qvector_tryblk_t_._fields_ = [
        ('array', ctypes.POINTER(struct_tryblk_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_valstr_t_(Structure):
        pass
    
    struct_qvector_valstr_t_._pack_ = 1 # source:False
    struct_qvector_valstr_t_._fields_ = [
        ('array', ctypes.POINTER(struct_valstr_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_segm_move_infos_t(Structure):
        pass
    
    struct_segm_move_infos_t._pack_ = 1 # source:False
    struct_segm_move_infos_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_std__hash_double_(Structure):
        pass
    
    class struct_ui_request_t_vtbl(Structure):
        pass
    
    struct_update_bpt_info_t._pack_ = 1 # source:False
    struct_update_bpt_info_t._fields_ = [
        ('ea', ctypes.c_uint64),
        ('orgbytes', struct_bytevec_t),
        ('type', ctypes.c_int32),
        ('size', ctypes.c_int32),
        ('code', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 3),
        ('pid', ctypes.c_int32),
        ('tid', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct__finddata32i64_t(Structure):
        pass
    
    struct__finddata32i64_t._pack_ = 1 # source:False
    struct__finddata32i64_t._fields_ = [
        ('attrib', ctypes.c_uint32),
        ('time_create', ctypes.c_int32),
        ('time_access', ctypes.c_int32),
        ('time_write', ctypes.c_int32),
        ('size', ctypes.c_int64),
        ('name', ctypes.c_char * 260),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct__finddata64i32_t(Structure):
        pass
    
    struct__finddata64i32_t._pack_ = 1 # source:False
    struct__finddata64i32_t._fields_ = [
        ('attrib', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('time_create', ctypes.c_int64),
        ('time_access', ctypes.c_int64),
        ('time_write', ctypes.c_int64),
        ('size', ctypes.c_uint32),
        ('name', ctypes.c_char * 260),
    ]
    
    class struct_abstract_graph_t(Structure):
        pass
    
    class struct_point_t(Structure):
        pass
    
    struct_point_t._pack_ = 1 # source:False
    struct_point_t._fields_ = [
        ('x', ctypes.c_int32),
        ('y', ctypes.c_int32),
    ]
    
    struct_abstract_graph_t._pack_ = 1 # source:False
    struct_abstract_graph_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 8),
        ('title', qstring),
        ('rect_edges_made', ctypes.c_char),
        ('PADDING_1', ctypes.c_ubyte * 3),
        ('current_layout', ctypes.c_int32),
        ('circle_center', struct_point_t),
        ('circle_radius', ctypes.c_int32),
        ('PADDING_2', ctypes.c_ubyte * 4),
        ('callback', ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(None), ctypes.c_int32, ctypes.POINTER(ctypes.POINTER(None)))),
        ('callback_ud', ctypes.POINTER(None)),
    ]
    
    class struct_action_handler_t(Structure):
        pass
    
    struct_action_handler_t._pack_ = 1 # source:False
    struct_action_handler_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_action_handler_t_vtbl)),
        ('flags', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_cfgopt_set_vec_t(Structure):
        pass
    
    struct_cfgopt_set_vec_t._pack_ = 1 # source:False
    struct_cfgopt_set_vec_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_enum_type_data_t(Structure):
        pass
    
    struct_enum_type_data_t._pack_ = 1 # source:False
    struct_enum_type_data_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
        ('group_sizes', intvec_t),
        ('taenum_bits', ctypes.c_uint32),
        ('bte', ctypes.c_ubyte),
        ('PADDING_1', ctypes.c_ubyte * 3),
    ]
    
    class struct_enumplace_t_vtbl(Structure):
        pass
    
    class struct_event_listener_t(Structure):
        pass
    
    struct_event_listener_t._pack_ = 1 # source:False
    struct_event_listener_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_event_listener_t_vtbl)),
        ('listener_flags', ctypes.c_uint64),
    ]
    
    struct_exception_info_t._pack_ = 1 # source:False
    struct_exception_info_t._fields_ = [
        ('code', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('name', qstring),
        ('desc', qstring),
    ]
    
    class struct_func_type_data_t(Structure):
        pass
    
    reginfovec_t = struct_qvector_reg_info_t_
    class union_argloc_t_0(Union):
        pass
    
    class struct_rrel_t(Structure):
        pass
    
    class struct_scattered_aloc_t(Structure):
        pass
    
    union_argloc_t_0._pack_ = 1 # source:False
    union_argloc_t_0._fields_ = [
        ('sval', ctypes.c_int64),
        ('reginfo', ctypes.c_uint32),
        ('rrel', ctypes.POINTER(struct_rrel_t)),
        ('dist', ctypes.POINTER(struct_scattered_aloc_t)),
        ('custom', ctypes.POINTER(None)),
        ('biggest', ctypes.c_uint64),
    ]
    
    struct_argloc_t._pack_ = 1 # source:False
    struct_argloc_t._anonymous_ = ('_0',)
    struct_argloc_t._fields_ = [
        ('type', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('_0', union_argloc_t_0),
    ]
    
    struct_func_type_data_t._pack_ = 1 # source:False
    struct_func_type_data_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
        ('flags', ctypes.c_int32),
        ('rettype', struct_tinfo_t),
        ('retloc', struct_argloc_t),
        ('stkargs', ctypes.c_uint64),
        ('spoiled', reginfovec_t),
        ('cc', ctypes.c_ubyte),
        ('PADDING_1', ctypes.c_ubyte * 7),
    ]
    
    class struct_gdl_graph_t_vtbl(Structure):
        pass
    
    class struct_generic_linput_t(Structure):
        pass
    
    struct_generic_linput_t._pack_ = 1 # source:False
    struct_generic_linput_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_generic_linput_t_vtbl)),
        ('filesize', ctypes.c_uint64),
        ('blocksize', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_predicate_t_vtbl(Structure):
        pass
    
    class struct_qvector_catch_t_(Structure):
        pass
    
    class struct_catch_t(Structure):
        pass
    
    struct_qvector_catch_t_._pack_ = 1 # source:False
    struct_qvector_catch_t_._fields_ = [
        ('array', ctypes.POINTER(struct_catch_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_point_t_(Structure):
        pass
    
    struct_qvector_point_t_._pack_ = 1 # source:False
    struct_qvector_point_t_._fields_ = [
        ('array', ctypes.POINTER(struct_point_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_range_t_(Structure):
        pass
    
    struct_qvector_range_t_._pack_ = 1 # source:False
    struct_qvector_range_t_._fields_ = [
        ('array', ctypes.POINTER(struct_range_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_tinfo_t_(Structure):
        pass
    
    struct_qvector_tinfo_t_._pack_ = 1 # source:False
    struct_qvector_tinfo_t_._fields_ = [
        ('array', ctypes.POINTER(struct_tinfo_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_token_t_(Structure):
        pass
    
    class struct_token_t(Structure):
        pass
    
    struct_qvector_token_t_._pack_ = 1 # source:False
    struct_qvector_token_t_._fields_ = [
        ('array', ctypes.POINTER(struct_token_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_regex_t(Structure):
        pass
    
    struct_regex_t._pack_ = 1 # source:False
    struct_regex_t._fields_ = [
        ('re_magic', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('re_nsub', ctypes.c_uint64),
        ('re_endp', ctypes.c_char_p),
        ('re_g', ctypes.POINTER(None)),
    ]
    
    struct_refcnted_regex_t._pack_ = 1 # source:False
    struct_refcnted_regex_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('regex', struct_regex_t),
    ]
    
    struct_scattered_aloc_t._pack_ = 1 # source:False
    struct_scattered_aloc_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    struct_scattered_segm_t._pack_ = 1 # source:False
    struct_scattered_segm_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('name', qstring),
    ]
    
    struct_segm_move_info_t._pack_ = 1 # source:False
    struct_segm_move_info_t._fields_ = [
        ('from', ctypes.c_uint64),
        ('to', ctypes.c_uint64),
        ('size', ctypes.c_uint64),
    ]
    
    struct_selection_item_t._pack_ = 1 # source:False
    struct_selection_item_t._fields_ = [
        ('is_node', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 3),
        ('node', ctypes.c_int32),
        ('elp', struct_edge_layout_point_t),
    ]
    
    class struct_std___Init_locks(Structure):
        pass
    
    class struct_std__hash_float_(Structure):
        pass
    
    class struct_std__minus_void_(Structure):
        pass
    
    class struct_text_sink_t_vtbl(Structure):
        pass
    
    struct_xreflist_entry_t._pack_ = 1 # source:False
    struct_xreflist_entry_t._fields_ = [
        ('ea', ctypes.c_uint64),
        ('opnum', ctypes.c_ubyte),
        ('type', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 6),
    ]
    
    struct_channel_redir_t._pack_ = 1 # source:False
    struct_channel_redir_t._fields_ = [
        ('fd', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('file', qstring),
        ('flags', ctypes.c_int32),
        ('start', ctypes.c_int32),
        ('length', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct_chooser_multi_t(Structure):
        pass
    
    struct_chooser_multi_t._pack_ = 1 # source:False
    struct_chooser_multi_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 184),
    ]
    
    class struct_compiler_info_t(Structure):
        pass
    
    struct_compiler_info_t._pack_ = 1 # source:False
    struct_compiler_info_t._fields_ = [
        ('id', ctypes.c_ubyte),
        ('cm', ctypes.c_ubyte),
        ('size_i', ctypes.c_ubyte),
        ('size_b', ctypes.c_ubyte),
        ('size_e', ctypes.c_ubyte),
        ('defalign', ctypes.c_ubyte),
        ('size_s', ctypes.c_ubyte),
        ('size_l', ctypes.c_ubyte),
        ('size_ll', ctypes.c_ubyte),
        ('size_ldbl', ctypes.c_ubyte),
    ]
    
    class struct_edge_segs_vec_t(Structure):
        pass
    
    class struct_expanded_area_t(Structure):
        pass
    
    class struct_fixup_handler_t(Structure):
        pass
    
    class struct_fixup_data_t(Structure):
        pass
    
    struct_fixup_handler_t._pack_ = 1 # source:False
    struct_fixup_handler_t._fields_ = [
        ('cbsize', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('name', ctypes.c_char_p),
        ('props', ctypes.c_uint32),
        ('size', ctypes.c_ubyte),
        ('width', ctypes.c_ubyte),
        ('shift', ctypes.c_ubyte),
        ('rsrv4', ctypes.c_ubyte),
        ('reftype', ctypes.c_uint32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('apply', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_fixup_handler_t), ctypes.c_uint64, ctypes.c_uint64, ctypes.c_int32, ctypes.c_char, ctypes.POINTER(struct_fixup_data_t))),
        ('get_value', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_fixup_handler_t), ctypes.c_uint64)),
        ('patch_value', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_fixup_handler_t), ctypes.c_uint64, ctypes.POINTER(struct_fixup_data_t))),
    ]
    
    class struct_graph_visitor_t(Structure):
        pass
    
    struct_graph_visitor_t._pack_ = 1 # source:False
    struct_graph_visitor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_graph_visitor_t_vtbl)),
        ('g', ctypes.POINTER(struct_abstract_graph_t)),
    ]
    
    class struct_hexplace_t_vtbl(Structure):
        pass
    
    class struct_idaplace_t_vtbl(Structure):
        pass
    
    class struct_linput_buffer_t(Structure):
        pass
    
    struct_linput_buffer_t._pack_ = 1 # source:False
    struct_linput_buffer_t._fields_ = [
        ('li', ctypes.POINTER(struct_linput_t)),
        ('lsize', ctypes.c_int64),
    ]
    
    class struct_renderer_info_t(Structure):
        pass
    
    renderer_info_t__pos_t = struct_renderer_info_pos_t
    struct_renderer_info_t._pack_ = 1 # source:False
    struct_renderer_info_t._fields_ = [
        ('gli', struct_graph_location_info_t),
        ('pos', renderer_info_t__pos_t),
        ('rtype', tcc_renderer_type_t),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    struct_lochist_entry_t._pack_ = 1 # source:False
    struct_lochist_entry_t._fields_ = [
        ('rinfo', struct_renderer_info_t),
        ('plce', ctypes.POINTER(struct_place_t)),
    ]
    
    class struct_mutable_graph_t(Structure):
        pass
    
    array_of_intvec_t = struct_qvector_qvector_int__
    class struct_qvector_rect_t_(Structure):
        pass
    
    class struct_rect_t(Structure):
        pass
    
    struct_qvector_rect_t_._pack_ = 1 # source:False
    struct_qvector_rect_t_._fields_ = [
        ('array', ctypes.POINTER(struct_rect_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    mutable_graph_t__node_layout_t = struct_qvector_rect_t_
    struct_mutable_graph_t._pack_ = 1 # source:False
    struct_mutable_graph_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 72),
        ('gid', ctypes.c_uint64),
        ('belongs', intvec_t),
        ('node_flags', struct_bytevec_t),
        ('org_succs', array_of_intvec_t),
        ('org_preds', array_of_intvec_t),
        ('succs', array_of_intvec_t),
        ('preds', array_of_intvec_t),
        ('nodes', mutable_graph_t__node_layout_t),
        ('edges', struct_edge_infos_wrapper_t),
    ]
    
    class struct_node_ordering_t(Structure):
        _pack_ = 1 # source:False
        _fields_ = [
        ('node_by_order', intvec_t),
        ('order_by_node', intvec_t),
         ]
    
    class struct_ptr_type_data_t(Structure):
        pass
    
    struct_ptr_type_data_t._pack_ = 1 # source:False
    struct_ptr_type_data_t._fields_ = [
        ('obj_type', struct_tinfo_t),
        ('closure', struct_tinfo_t),
        ('based_ptr_size', ctypes.c_ubyte),
        ('taptr_bits', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 2),
        ('parent', struct_tinfo_t),
        ('delta', ctypes.c_int32),
    ]
    
    class struct_qmutex_locker_t(Structure):
        pass
    
    class struct___qmutex_t(Structure):
        pass
    
    struct_qmutex_locker_t._pack_ = 1 # source:False
    struct_qmutex_locker_t._fields_ = [
        ('lock', ctypes.POINTER(struct___qmutex_t)),
    ]
    
    class struct_qstack_token_t_(Structure):
        pass
    
    struct_qstack_token_t_._pack_ = 1 # source:False
    struct_qstack_token_t_._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_qvector_edge_t_(Structure):
        pass
    
    struct_qvector_edge_t_._pack_ = 1 # source:False
    struct_qvector_edge_t_._fields_ = [
        ('array', ctypes.POINTER(struct_edge_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    struct_register_info_t._pack_ = 1 # source:False
    struct_register_info_t._fields_ = [
        ('name', ctypes.c_char_p),
        ('flags', ctypes.c_uint32),
        ('register_class', ctypes.c_ubyte),
        ('dtype', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 2),
        ('bit_strings', ctypes.POINTER(ctypes.c_char_p)),
        ('default_bit_strings_mask', ctypes.c_uint64),
    ]
    
    class struct_std___Maximum__(Structure):
        pass
    
    class struct_std__less_void_(Structure):
        pass
    
    class struct_std__plus_void_(Structure):
        pass
    
    class union_regval_t_0(Union):
        pass
    
    class struct_fpvalue_t(Structure):
        pass
    
    struct_fpvalue_t._pack_ = 1 # source:False
    struct_fpvalue_t._fields_ = [
        ('w', ctypes.c_uint16 * 6),
    ]
    
    union_regval_t_0._pack_ = 1 # source:False
    union_regval_t_0._fields_ = [
        ('ival', ctypes.c_uint64),
        ('fval', struct_fpvalue_t),
        ('reserve', ctypes.c_ubyte * 24),
    ]
    
    struct_regval_t._pack_ = 1 # source:False
    struct_regval_t._anonymous_ = ('_0',)
    struct_regval_t._fields_ = [
        ('rvtype', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('_0', union_regval_t_0),
    ]
    
    struct_tev_reg_value_t._pack_ = 1 # source:False
    struct_tev_reg_value_t._fields_ = [
        ('value', struct_regval_t),
        ('reg_idx', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_textctrl_info_t(Structure):
        pass
    
    struct_textctrl_info_t._pack_ = 1 # source:False
    struct_textctrl_info_t._fields_ = [
        ('cb', ctypes.c_uint64),
        ('text', qstring),
        ('flags', ctypes.c_uint16),
        ('tabsize', ctypes.c_uint16),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_tinfo_visitor_t(Structure):
        pass
    
    struct_tinfo_visitor_t._pack_ = 1 # source:False
    struct_tinfo_visitor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_tinfo_visitor_t_vtbl)),
        ('state', ctypes.c_int32),
        ('level', ctypes.c_int32),
    ]
    
    class struct_udt_type_data_t(Structure):
        pass
    
    struct_udt_type_data_t._pack_ = 1 # source:False
    struct_udt_type_data_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
        ('total_size', ctypes.c_uint64),
        ('unpadded_size', ctypes.c_uint64),
        ('effalign', ctypes.c_uint32),
        ('taudt_bits', ctypes.c_uint32),
        ('sda', ctypes.c_ubyte),
        ('pack', ctypes.c_ubyte),
        ('is_union', ctypes.c_char),
        ('PADDING_1', ctypes.c_ubyte * 5),
    ]
    
    class struct_value_u__d128_t(Structure):
        pass
    
    struct_value_u__d128_t._pack_ = 1 # source:False
    struct_value_u__d128_t._fields_ = [
        ('low', ctypes.c_uint64),
        ('high', ctypes.c_uint64),
    ]
    
    class struct___finddata64_t(Structure):
        pass
    
    struct___finddata64_t._pack_ = 1 # source:False
    struct___finddata64_t._fields_ = [
        ('attrib', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('time_create', ctypes.c_int64),
        ('time_access', ctypes.c_int64),
        ('time_write', ctypes.c_int64),
        ('size', ctypes.c_int64),
        ('name', ctypes.c_char * 260),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct___qsemaphore_t(Structure):
        pass
    
    class struct__wfinddata32_t(Structure):
        pass
    
    struct__wfinddata32_t._pack_ = 1 # source:False
    struct__wfinddata32_t._fields_ = [
        ('attrib', ctypes.c_uint32),
        ('time_create', ctypes.c_int32),
        ('time_access', ctypes.c_int32),
        ('time_write', ctypes.c_int32),
        ('size', ctypes.c_uint32),
        ('name', ctypes.c_int16 * 260),
    ]
    
    class struct__wfinddata64_t(Structure):
        pass
    
    struct__wfinddata64_t._pack_ = 1 # source:False
    struct__wfinddata64_t._fields_ = [
        ('attrib', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('time_create', ctypes.c_int64),
        ('time_access', ctypes.c_int64),
        ('time_write', ctypes.c_int64),
        ('size', ctypes.c_int64),
        ('name', ctypes.c_int16 * 260),
    ]
    
    class struct_aloc_visitor_t(Structure):
        pass
    
    struct_aloc_visitor_t._pack_ = 1 # source:False
    struct_aloc_visitor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_aloc_visitor_t_vtbl)),
    ]
    
    class struct_auto_display_t(Structure):
        pass
    
    struct_auto_display_t._pack_ = 1 # source:False
    struct_auto_display_t._fields_ = [
        ('type', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('ea', ctypes.c_uint64),
        ('state', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct_bpt_location_t(Structure):
        pass
    
    
    # values for enumeration 'bpt_loctype_t'
    bpt_loctype_t__enumvalues = {
        0: 'BPLT_ABS',
        1: 'BPLT_REL',
        2: 'BPLT_SYM',
        3: 'BPLT_SRC',
    }
    BPLT_ABS = 0
    BPLT_REL = 1
    BPLT_SYM = 2
    BPLT_SRC = 3
    bpt_loctype_t = ctypes.c_uint32 # enum
    struct_bpt_location_t._pack_ = 1 # source:False
    struct_bpt_location_t._fields_ = [
        ('info', ctypes.c_uint64),
        ('index', ctypes.c_int32),
        ('loctype', bpt_loctype_t),
    ]
    
    struct_chooser_base_t._pack_ = 1 # source:False
    struct_chooser_base_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_chooser_base_t_vtbl)),
        ('version', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('x0', ctypes.c_int32),
        ('y0', ctypes.c_int32),
        ('x1', ctypes.c_int32),
        ('y1', ctypes.c_int32),
        ('width', ctypes.c_int32),
        ('height', ctypes.c_int32),
        ('title', ctypes.c_char_p),
        ('columns', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('widths', ctypes.POINTER(ctypes.c_int32)),
        ('header', ctypes.POINTER(ctypes.c_char_p)),
        ('icon', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('popup_names', struct__qstring_char_ * 4),
        ('deflt_col', ctypes.c_int32),
        ('PADDING_2', ctypes.c_ubyte * 4),
    ]
    
    class struct_chooser_t_vtbl(Structure):
        pass
    
    class struct_custloc_desc_t(Structure):
        pass
    
    class struct_idc_value_t(Structure):
        pass
    
    class union_value_u(Union):
        pass
    
    struct_custloc_desc_t._pack_ = 1 # source:False
    struct_custloc_desc_t._fields_ = [
        ('cbsize', ctypes.c_uint64),
        ('name', ctypes.c_char_p),
        ('copy', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_argloc_t))),
        ('cleanup', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_argloc_t))),
        ('verify', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_argloc_t), ctypes.c_int32, ctypes.POINTER(struct_rangeset_t), ctypes.c_char)),
        ('compare', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_argloc_t))),
        ('print', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.c_char_p, ctypes.c_uint64, ctypes.POINTER(struct_argloc_t), ctypes.c_uint64, ctypes.c_int32)),
        ('deref_field', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t), ctypes.c_uint64, ctypes.POINTER(struct__qstring_char_))),
        ('deref_array', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t), ctypes.c_uint64, ctypes.c_uint64)),
        ('deref_ptr', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_argloc_t))),
        ('read_value', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(union_value_u), ctypes.POINTER(struct_argloc_t), ctypes.c_int32, ctypes.POINTER(struct_tinfo_t))),
        ('write_value', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(union_value_u), ctypes.c_int32, ctypes.POINTER(struct__qstring_char_))),
        ('calc_string_length', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t))),
        ('get_string', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t), ctypes.c_uint64)),
        ('guess_array_size', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t))),
        ('get_tinfo', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_argloc_t))),
        ('calc_number_of_children', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t))),
        ('print_ptr_value', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.c_char_p, ctypes.c_uint64, ctypes.c_char_p, ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t))),
    ]
    
    class struct_debapp_attrs_t(Structure):
        pass
    
    struct_debapp_attrs_t._pack_ = 1 # source:False
    struct_debapp_attrs_t._fields_ = [
        ('cbsize', ctypes.c_int32),
        ('addrsize', ctypes.c_int32),
        ('platform', qstring),
        ('is_be', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_dirspec_t_vtbl(Structure):
        pass
    
    class struct_dirtree_impl_t(Structure):
        pass
    
    class struct_edge_segment_t(Structure):
        pass
    
    struct_edge_segment_t._pack_ = 1 # source:False
    struct_edge_segment_t._fields_ = [
        ('e', struct_edge_t),
        ('nseg', ctypes.c_int32),
        ('x0', ctypes.c_int32),
        ('x1', ctypes.c_int32),
    ]
    
    class struct_encoder_t_vtbl(Structure):
        pass
    
    class struct_exec_request_t(Structure):
        pass
    
    struct_exec_request_t._pack_ = 1 # source:False
    struct_exec_request_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_exec_request_t_vtbl)),
        ('code', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('sem', ctypes.POINTER(struct___qsemaphore_t)),
    ]
    
    class struct_form_actions_t(Structure):
        pass
    
    struct_form_actions_t._pack_ = 1 # source:False
    struct_form_actions_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_form_actions_t_vtbl)),
    ]
    
    class struct_getname_info_t(Structure):
        pass
    
    struct_getname_info_t._pack_ = 1 # source:False
    struct_getname_info_t._fields_ = [
        ('cb', ctypes.c_uint64),
        ('inhibitor', ctypes.c_int32),
        ('demform', ctypes.c_int32),
        ('demcode', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    struct_group_crinfo_t._pack_ = 1 # source:False
    struct_group_crinfo_t._fields_ = [
        ('nodes', intvec_t),
        ('text', qstring),
    ]
    
    class struct_hexplace_gen_t(Structure):
        pass
    
    struct_hexplace_gen_t._pack_ = 1 # source:False
    struct_hexplace_gen_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_hexplace_gen_t_vtbl)),
    ]
    
    class struct_hidden_range_t(Structure):
        pass
    
    struct_hidden_range_t._pack_ = 1 # source:False
    struct_hidden_range_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('description', ctypes.c_char_p),
        ('header', ctypes.c_char_p),
        ('footer', ctypes.c_char_p),
        ('visible', ctypes.c_char),
        ('PADDING_1', ctypes.c_ubyte * 3),
        ('color', ctypes.c_uint32),
    ]
    
    class struct_idc_resolver_t(Structure):
        pass
    
    struct_idc_resolver_t._pack_ = 1 # source:False
    struct_idc_resolver_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_idc_resolver_t_vtbl)),
    ]
    
    class struct_ignore_micro_t(Structure):
        pass
    
    class struct_netnode(Structure):
        pass
    
    struct_netnode._pack_ = 1 # source:False
    struct_netnode._fields_ = [
        ('netnodenumber', ctypes.c_uint64),
    ]
    
    struct_ignore_micro_t._pack_ = 1 # source:False
    struct_ignore_micro_t._fields_ = [
        ('ignore_micro', struct_netnode),
    ]
    
    class struct_jump_pattern_t(Structure):
        pass
    
    class struct_switch_info_t(Structure):
        pass
    
    class struct_qvector_op_t_(Structure):
        pass
    
    class struct_op_t(Structure):
        pass
    
    struct_qvector_op_t_._pack_ = 1 # source:False
    struct_qvector_op_t_._fields_ = [
        ('array', ctypes.POINTER(struct_op_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    tracked_regs_t = struct_qvector_op_t_
    class struct_insn_t(Structure):
        pass
    
    class union_op_t_1(Union):
        pass
    
    union_op_t_1._pack_ = 1 # source:False
    union_op_t_1._fields_ = [
        ('value', ctypes.c_uint64),
        ('value_shorts', struct__0B605D7B00AC5C12C153272CF5BD15AF),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class union_op_t_0(Union):
        pass
    
    union_op_t_0._pack_ = 1 # source:False
    union_op_t_0._fields_ = [
        ('reg', ctypes.c_uint16),
        ('phrase', ctypes.c_uint16),
    ]
    
    class union_op_t_3(Union):
        pass
    
    union_op_t_3._pack_ = 1 # source:False
    union_op_t_3._fields_ = [
        ('specval', ctypes.c_uint64),
        ('specval_shorts', struct__0B605D7B00AC5C12C153272CF5BD15AF),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class union_op_t_2(Union):
        pass
    
    union_op_t_2._pack_ = 1 # source:False
    union_op_t_2._fields_ = [
        ('addr', ctypes.c_uint64),
        ('addr_shorts', struct__0B605D7B00AC5C12C153272CF5BD15AF),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    struct_op_t._pack_ = 1 # source:False
    struct_op_t._anonymous_ = ('_0', '_1', '_2', '_3',)
    struct_op_t._fields_ = [
        ('n', ctypes.c_ubyte),
        ('type', ctypes.c_ubyte),
        ('offb', ctypes.c_char),
        ('offo', ctypes.c_char),
        ('flags', ctypes.c_ubyte),
        ('dtype', ctypes.c_ubyte),
        ('_0', union_op_t_0),
        ('_1', union_op_t_1),
        ('_2', union_op_t_2),
        ('_3', union_op_t_3),
        ('specflag1', ctypes.c_char),
        ('specflag2', ctypes.c_char),
        ('specflag3', ctypes.c_char),
        ('specflag4', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class union_insn_t_0(Union):
        pass
    
    union_insn_t_0._pack_ = 1 # source:False
    union_insn_t_0._fields_ = [
        ('auxpref', ctypes.c_uint32),
        ('auxpref_u16', ctypes.c_uint16 * 2),
        ('auxpref_u8', ctypes.c_ubyte * 4),
    ]
    
    struct_insn_t._pack_ = 1 # source:False
    struct_insn_t._anonymous_ = ('_0',)
    struct_insn_t._fields_ = [
        ('cs', ctypes.c_uint64),
        ('ip', ctypes.c_uint64),
        ('ea', ctypes.c_uint64),
        ('itype', ctypes.c_uint16),
        ('size', ctypes.c_uint16),
        ('_0', union_insn_t_0),
        ('segpref', ctypes.c_char),
        ('insnpref', ctypes.c_char),
        ('flags', ctypes.c_int16),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('ops', struct_op_t * 8),
    ]
    
    eavec_t = struct_qvector_unsigned_long_long_
    struct_jump_pattern_t._pack_ = 1 # source:False
    struct_jump_pattern_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_jump_pattern_t_vtbl)),
        ('modifying_r32_spoils_r64', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 7),
        ('insn', struct_insn_t),
        ('si', ctypes.POINTER(struct_switch_info_t)),
        ('eas', ctypes.c_uint64 * 16),
        ('skip', ctypes.c_char * 16),
        ('non_spoiled_reg', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('check', struct__C21FB2E1BAA97F44BFD298211C4C916B * 16),
        ('stop_matching', ctypes.c_char),
        ('in_linear_flow', ctypes.c_char),
        ('PADDING_2', ctypes.c_ubyte * 6),
        ('block_end', ctypes.c_uint64),
        ('depends', ctypes.POINTER(ctypes.c_char * 4)),
        ('remote_code', eavec_t),
        ('extra_insn_eas', eavec_t),
        ('regs', tracked_regs_t),
    ]
    
    struct_locchange_md_t._pack_ = 1 # source:False
    struct_locchange_md_t._fields_ = [
        ('cb', ctypes.c_ubyte),
        ('r', ctypes.c_ubyte),
        ('f', ctypes.c_ubyte),
        ('reserved', ctypes.c_ubyte),
    ]
    
    class struct_plugmod_t_vtbl(Structure):
        pass
    
    struct_process_info_t._pack_ = 1 # source:False
    struct_process_info_t._fields_ = [
        ('pid', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('name', qstring),
    ]
    
    class struct_procmod_t_vtbl(Structure):
        pass
    
    struct_qbasic_block_t._pack_ = 1 # source:False
    struct_qbasic_block_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('succ', intvec_t),
        ('pred', intvec_t),
    ]
    
    class struct_qvector_bpt_t_(Structure):
        pass
    
    struct_qvector_bpt_t_._pack_ = 1 # source:False
    struct_qvector_bpt_t_._fields_ = [
        ('array', ctypes.POINTER(struct_bpt_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_qvector_kvp_t_(Structure):
        pass
    
    class struct_kvp_t(Structure):
        pass
    
    struct_qvector_kvp_t_._pack_ = 1 # source:False
    struct_qvector_kvp_t_._fields_ = [
        ('array', ctypes.POINTER(struct_kvp_t)),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    struct_refinfo_desc_t._pack_ = 1 # source:False
    struct_refinfo_desc_t._fields_ = [
        ('type', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('name', ctypes.c_char_p),
        ('desc', ctypes.c_char_p),
    ]
    
    class struct_reg_accesses_t(Structure):
        pass
    
    struct_reg_accesses_t._pack_ = 1 # source:False
    struct_reg_accesses_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_std___Num_base(Structure):
        pass
    
    class struct_std__bad_alloc(Structure):
        pass
    
    struct_std__bad_alloc._pack_ = 1 # source:False
    struct_std__bad_alloc._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_std__exception(Structure):
        pass
    
    struct_std__exception._pack_ = 1 # source:False
    struct_std__exception._fields_ = [
        ('__vftable', ctypes.POINTER(struct_std__exception_vtbl)),
        ('_Data', struct___std_exception_data),
    ]
    
    class struct_std__less_int_(Structure):
        pass
    
    class struct_std__nothrow_t(Structure):
        pass
    
    struct_synced_group_t._pack_ = 1 # source:False
    struct_synced_group_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    
    # values for enumeration 'tev_type_t'
    tev_type_t__enumvalues = {
        0: 'tev_none',
        1: 'tev_insn',
        2: 'tev_call',
        3: 'tev_ret',
        4: 'tev_bpt',
        5: 'tev_mem',
        6: 'tev_event',
        7: 'tev_max',
    }
    tev_none = 0
    tev_insn = 1
    tev_call = 2
    tev_ret = 3
    tev_bpt = 4
    tev_mem = 5
    tev_event = 6
    tev_max = 7
    tev_type_t = ctypes.c_uint32 # enum
    struct_tev_info_t._pack_ = 1 # source:False
    struct_tev_info_t._fields_ = [
        ('type', tev_type_t),
        ('tid', ctypes.c_int32),
        ('ea', ctypes.c_uint64),
    ]
    
    tev_reg_values_t = struct_qvector_tev_reg_value_t_
    struct_tev_info_reg_t._pack_ = 1 # source:False
    struct_tev_info_reg_t._fields_ = [
        ('info', struct_tev_info_t),
        ('registers', tev_reg_values_t),
    ]
    
    class struct_udtmembervec_t(Structure):
        pass
    
    struct_udtmembervec_t._pack_ = 1 # source:False
    struct_udtmembervec_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct__finddata32_t(Structure):
        pass
    
    struct__finddata32_t._pack_ = 1 # source:False
    struct__finddata32_t._fields_ = [
        ('attrib', ctypes.c_uint32),
        ('time_create', ctypes.c_int32),
        ('time_access', ctypes.c_int32),
        ('time_write', ctypes.c_int32),
        ('size', ctypes.c_uint32),
        ('name', ctypes.c_char * 260),
    ]
    
    class struct_action_desc_t(Structure):
        pass
    
    struct_action_desc_t._pack_ = 1 # source:False
    struct_action_desc_t._fields_ = [
        ('cb', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('name', ctypes.c_char_p),
        ('label', ctypes.c_char_p),
        ('handler', ctypes.POINTER(struct_action_handler_t)),
        ('owner', ctypes.POINTER(None)),
        ('shortcut', ctypes.c_char_p),
        ('tooltip', ctypes.c_char_p),
        ('icon', ctypes.c_int32),
        ('flags', ctypes.c_int32),
    ]
    
    class struct_bpt_visitor_t(Structure):
        pass
    
    struct_bpt_visitor_t._pack_ = 1 # source:False
    struct_bpt_visitor_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_bpt_visitor_t_vtbl)),
        ('range', struct_range_t),
        ('name', ctypes.c_char_p),
    ]
    
    class struct_data_format_t(Structure):
        pass
    
    struct_data_format_t._pack_ = 1 # source:False
    struct_data_format_t._fields_ = [
        ('cbsize', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('ud', ctypes.POINTER(None)),
        ('props', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('name', ctypes.c_char_p),
        ('menu_name', ctypes.c_char_p),
        ('hotkey', ctypes.c_char_p),
        ('value_size', ctypes.c_uint64),
        ('text_width', ctypes.c_int32),
        ('PADDING_2', ctypes.c_ubyte * 4),
        ('print', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(None), ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_uint64, ctypes.c_int32, ctypes.c_int32)),
        ('scan', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(None), ctypes.POINTER(struct_bytevec_t), ctypes.c_char_p, ctypes.c_uint64, ctypes.c_int32, ctypes.POINTER(struct__qstring_char_))),
        ('analyze', ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_int32)),
    ]
    
    
    # values for enumeration 'event_id_t'
    event_id_t__enumvalues = {
        0: 'NO_EVENT',
        1: 'PROCESS_STARTED',
        2: 'PROCESS_EXITED',
        4: 'THREAD_STARTED',
        8: 'THREAD_EXITED',
        16: 'BREAKPOINT',
        32: 'STEP',
        64: 'EXCEPTION',
        128: 'LIB_LOADED',
        256: 'LIB_UNLOADED',
        512: 'INFORMATION',
        1024: 'PROCESS_ATTACHED',
        2048: 'PROCESS_DETACHED',
        4096: 'PROCESS_SUSPENDED',
        8192: 'TRACE_FULL',
    }
    NO_EVENT = 0
    PROCESS_STARTED = 1
    PROCESS_EXITED = 2
    THREAD_STARTED = 4
    THREAD_EXITED = 8
    BREAKPOINT = 16
    STEP = 32
    EXCEPTION = 64
    LIB_LOADED = 128
    LIB_UNLOADED = 256
    INFORMATION = 512
    PROCESS_ATTACHED = 1024
    PROCESS_DETACHED = 2048
    PROCESS_SUSPENDED = 4096
    TRACE_FULL = 8192
    event_id_t = ctypes.c_uint32 # enum
    struct_debug_event_t._pack_ = 1 # source:False
    struct_debug_event_t._fields_ = [
        ('pid', ctypes.c_int32),
        ('tid', ctypes.c_int32),
        ('ea', ctypes.c_uint64),
        ('handled', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 3),
        ('_eid', event_id_t),
        ('bytes', ctypes.c_char * 48),
    ]
    
    struct_enum_member_t._pack_ = 1 # source:False
    struct_enum_member_t._fields_ = [
        ('name', qstring),
        ('cmt', qstring),
        ('value', ctypes.c_uint64),
    ]
    
    class struct_ext_idcfunc_t(Structure):
        pass
    
    struct_ext_idcfunc_t._pack_ = 1 # source:False
    struct_ext_idcfunc_t._fields_ = [
        ('name', ctypes.c_char_p),
        ('fptr', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t))),
        ('args', ctypes.c_char_p),
        ('defvals', ctypes.POINTER(struct_idc_value_t)),
        ('ndefvals', ctypes.c_int32),
        ('flags', ctypes.c_int32),
    ]
    
    class struct_input_event_t(Structure):
        pass
    
    class union_input_event_t_0(Union):
        pass
    
    union_input_event_t_0._pack_ = 1 # source:False
    union_input_event_t_0._fields_ = [
        ('shortcut', struct_input_event_t__input_event_shortcut_data_t),
        ('keyboard', struct_input_event_t__input_event_keyboard_data_t),
        ('mouse', struct_input_event_t__input_event_mouse_data_t),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    
    # values for enumeration 'input_event_kind_t'
    input_event_kind_t__enumvalues = {
        0: 'iek_unknown',
        1: 'iek_shortcut',
        2: 'iek_key_press',
        3: 'iek_key_release',
        4: 'iek_mouse_button_press',
        5: 'iek_mouse_button_release',
        6: 'iek_mouse_wheel',
    }
    iek_unknown = 0
    iek_shortcut = 1
    iek_key_press = 2
    iek_key_release = 3
    iek_mouse_button_press = 4
    iek_mouse_button_release = 5
    iek_mouse_wheel = 6
    input_event_kind_t = ctypes.c_uint32 # enum
    struct_input_event_t._pack_ = 1 # source:False
    struct_input_event_t._anonymous_ = ('_0',)
    struct_input_event_t._fields_ = [
        ('cb', ctypes.c_int32),
        ('kind', input_event_kind_t),
        ('modifiers', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('target', ctypes.POINTER(struct_TWidget)),
        ('source', ctypes.POINTER(None)),
        ('_0', union_input_event_t_0),
    ]
    
    struct_memory_info_t._pack_ = 1 # source:False
    struct_memory_info_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('name', qstring),
        ('sclass', qstring),
        ('sbase', ctypes.c_uint64),
        ('bitness', ctypes.c_ubyte),
        ('perm', ctypes.c_ubyte),
        ('PADDING_1', ctypes.c_ubyte * 6),
    ]
    
    struct_memreg_info_t._pack_ = 1 # source:False
    struct_memreg_info_t._fields_ = [
        ('ea', ctypes.c_uint64),
        ('bytes', struct_bytevec_t),
    ]
    
    struct_movbpt_info_t._pack_ = 1 # source:False
    struct_movbpt_info_t._fields_ = [
        ('from', struct_bpt_location_t),
        ('to', struct_bpt_location_t),
    ]
    
    class struct_node_iterator(Structure):
        pass
    
    class struct_gdl_graph_t(Structure):
        pass
    
    struct_node_iterator._pack_ = 1 # source:False
    struct_node_iterator._fields_ = [
        ('g', ctypes.POINTER(struct_gdl_graph_t)),
        ('i', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_outctx_base_t(Structure):
        pass
    
    struct_outctx_base_t._pack_ = 1 # source:False
    struct_outctx_base_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_outctx_base_t_vtbl)),
        ('insn_ea', ctypes.c_uint64),
        ('outbuf', qstring),
        ('regname_idx', ctypes.c_int64),
        ('suspop', ctypes.c_int32),
        ('F', ctypes.c_uint32),
        ('outvalues', ctypes.POINTER(ctypes.c_uint64)),
        ('outvalue_getn_flags', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('user_data', ctypes.POINTER(None)),
        ('kern_data', ctypes.POINTER(None)),
        ('lnar', ctypes.POINTER(struct_qvector__qstring_char__)),
        ('lnar_maxsize', ctypes.c_int32),
        ('default_lnnum', ctypes.c_int32),
        ('line_prefix', qstring),
        ('prefix_len', ctypes.c_int64),
        ('ctxflags', ctypes.c_int32),
        ('ind0', ctypes.c_int32),
        ('cmt_ea', ctypes.c_uint64),
        ('cmtbuf', qstring),
        ('cmtptr', ctypes.c_char_p),
        ('cmtcolor', ctypes.c_ubyte),
        ('PADDING_1', ctypes.c_ubyte * 7),
    ]
    
    class struct_outctx_t_vtbl(Structure):
        pass
    
    class struct_plugin_info_t(Structure):
        pass
    
    class struct_plugin_t(Structure):
        pass
    
    class struct_idadll_t(Structure):
        pass
    
    struct_idadll_t._pack_ = 1 # source:False
    struct_idadll_t._fields_ = [
        ('dllinfo', ctypes.POINTER(None) * 10),
        ('entry', ctypes.POINTER(None)),
    ]
    
    struct_plugin_info_t._pack_ = 1 # source:False
    struct_plugin_info_t._fields_ = [
        ('next', ctypes.POINTER(struct_plugin_info_t)),
        ('path', ctypes.c_char_p),
        ('org_name', ctypes.c_char_p),
        ('name', ctypes.c_char_p),
        ('org_hotkey', ctypes.c_uint16),
        ('hotkey', ctypes.c_uint16),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('arg', ctypes.c_uint64),
        ('entry', ctypes.POINTER(struct_plugin_t)),
        ('dllmem', struct_idadll_t),
        ('flags', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('comment', ctypes.c_char_p),
    ]
    
    class struct_qflow_chart_t(Structure):
        pass
    
    qflow_chart_t__blocks_t = struct_qvector_qbasic_block_t_
    struct_qflow_chart_t._pack_ = 1 # source:False
    struct_qflow_chart_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('title', qstring),
        ('bounds', struct_range_t),
        ('pfn', ctypes.POINTER(struct_func_t)),
        ('flags', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('blocks', qflow_chart_t__blocks_t),
        ('nproper', ctypes.c_int32),
        ('PADDING_2', ctypes.c_ubyte * 4),
    ]
    
    class struct_qrefcnt_obj_t(Structure):
        pass
    
    struct_qrefcnt_obj_t._pack_ = 1 # source:False
    struct_qrefcnt_obj_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_qrefcnt_obj_t_vtbl)),
        ('refcnt', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_qvector_bool_(Structure):
        pass
    
    struct_qvector_bool_._pack_ = 1 # source:False
    struct_qvector_bool_._fields_ = [
        ('array', ctypes.c_char_p),
        ('n', ctypes.c_uint64),
        ('alloc', ctypes.c_uint64),
    ]
    
    class struct_regex_cache_t(Structure):
        pass
    
    regex_cache_t__regex_cache_map_t = struct_std__map__qstring_char___qrefcnt_t_refcnted_regex_t__
    struct_regex_cache_t._pack_ = 1 # source:False
    struct_regex_cache_t._fields_ = [
        ('cache', regex_cache_t__regex_cache_map_t),
    ]
    
    struct_source_file_t._pack_ = 1 # source:False
    struct_source_file_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
    ]
    
    struct_source_item_t._pack_ = 1 # source:False
    struct_source_item_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
    ]
    
    class struct_source_view_t(Structure):
        pass
    
    class struct_std__ios_base(Structure):
        pass
    
    class struct_std__set_int_(Structure):
        pass
    
    struct_std__set_int_._pack_ = 1 # source:False
    struct_std__set_int_._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
    ]
    
    class struct_string_info_t(Structure):
        pass
    
    struct_string_info_t._pack_ = 1 # source:False
    struct_string_info_t._fields_ = [
        ('ea', ctypes.c_uint64),
        ('length', ctypes.c_int32),
        ('type', ctypes.c_int32),
    ]
    
    class struct_structplace_t(Structure):
        pass
    
    struct_structplace_t._pack_ = 1 # source:False
    struct_structplace_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('idx', ctypes.c_uint64),
        ('offset', ctypes.c_uint64),
    ]
    
    class struct_strwinsetup_t(Structure):
        pass
    
    struct_strwinsetup_t._pack_ = 1 # source:False
    struct_strwinsetup_t._fields_ = [
        ('strtypes', struct_bytevec_t),
        ('minlen', ctypes.c_int64),
        ('display_only_existing_strings', ctypes.c_ubyte),
        ('only_7bit', ctypes.c_ubyte),
        ('ignore_heads', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 5),
    ]
    
    class union_switch_info_t_0(Union):
        pass
    
    union_switch_info_t_0._pack_ = 1 # source:False
    union_switch_info_t_0._fields_ = [
        ('values', ctypes.c_uint64),
        ('lowcase', ctypes.c_uint64),
    ]
    
    struct_switch_info_t._pack_ = 1 # source:False
    struct_switch_info_t._anonymous_ = ('_0',)
    struct_switch_info_t._fields_ = [
        ('flags', ctypes.c_uint32),
        ('ncases', ctypes.c_uint16),
        ('PADDING_0', ctypes.c_ubyte * 2),
        ('jumps', ctypes.c_uint64),
        ('_0', union_switch_info_t_0),
        ('defjump', ctypes.c_uint64),
        ('startea', ctypes.c_uint64),
        ('jcases', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('ind_lowcase', ctypes.c_int64),
        ('elbase', ctypes.c_uint64),
        ('regnum', ctypes.c_int32),
        ('regdtype', ctypes.c_ubyte),
        ('PADDING_2', ctypes.c_ubyte * 3),
        ('custom', ctypes.c_uint64),
        ('version', ctypes.c_int32),
        ('PADDING_3', ctypes.c_ubyte * 4),
        ('expr_ea', ctypes.c_uint64),
        ('marks', eavec_t),
    ]
    
    struct_sync_source_t._pack_ = 1 # source:False
    struct_sync_source_t._fields_ = [
        ('storage', ctypes.c_ubyte * 16),
    ]
    
    struct_thread_name_t._pack_ = 1 # source:False
    struct_thread_name_t._fields_ = [
        ('tid', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('name', qstring),
    ]
    
    class struct_try_handler_t(Structure):
        pass
    
    struct_try_handler_t._pack_ = 1 # source:False
    struct_try_handler_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
        ('disp', ctypes.c_int64),
        ('fpreg', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct_ui_requests_t(Structure):
        pass
    
    struct_ui_requests_t._pack_ = 1 # source:False
    struct_ui_requests_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_value_u__dq_t(Structure):
        pass
    
    struct_value_u__dq_t._pack_ = 1 # source:False
    struct_value_u__dq_t._fields_ = [
        ('low', ctypes.c_uint32),
        ('high', ctypes.c_uint32),
    ]
    
    class struct_value_u__dt_t(Structure):
        pass
    
    struct_value_u__dt_t._pack_ = 1 # source:False
    struct_value_u__dt_t._fields_ = [
        ('low', ctypes.c_uint32),
        ('high', ctypes.c_uint32),
        ('upper', ctypes.c_uint16),
        ('PADDING_0', ctypes.c_ubyte * 2),
    ]
    
    class struct_TPointDouble(Structure):
        pass
    
    struct_TPointDouble._pack_ = 1 # source:False
    struct_TPointDouble._fields_ = [
        ('x', ctypes.c_double),
        ('y', ctypes.c_double),
    ]
    
    class struct__CrtMemState(Structure):
        pass
    
    struct__CrtMemState._pack_ = 1 # source:False
    struct__CrtMemState._fields_ = [
        ('pBlockHeader', ctypes.POINTER(struct__CrtMemBlockHeader)),
        ('lCounts', ctypes.c_uint64 * 5),
        ('lSizes', ctypes.c_uint64 * 5),
        ('lHighWaterCount', ctypes.c_uint64),
        ('lTotalCount', ctypes.c_uint64),
    ]
    
    class struct_addon_info_t(Structure):
        pass
    
    struct_addon_info_t._pack_ = 1 # source:False
    struct_addon_info_t._fields_ = [
        ('cb', ctypes.c_uint64),
        ('id', ctypes.c_char_p),
        ('name', ctypes.c_char_p),
        ('producer', ctypes.c_char_p),
        ('version', ctypes.c_char_p),
        ('url', ctypes.c_char_p),
        ('freeform', ctypes.c_char_p),
        ('custom_data', ctypes.POINTER(None)),
        ('custom_size', ctypes.c_uint64),
    ]
    
    class struct_call_stack_t(Structure):
        pass
    
    struct_call_stack_t._pack_ = 1 # source:False
    struct_call_stack_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_cfgopt_t(Structure):
        pass
    
    struct_cfgopt_set_t._pack_ = 1 # source:False
    struct_cfgopt_set_t._fields_ = [
        ('opts', ctypes.POINTER(struct_cfgopt_t)),
        ('nopts', ctypes.c_uint64),
        ('cb', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_cfgopt_t), ctypes.c_int32, ctypes.POINTER(None))),
        ('obj', ctypes.POINTER(None)),
    ]
    
    class struct_edge_typer_t(Structure):
        pass
    
    class struct_elf_loader_t(Structure):
        pass
    
    class struct_enum_const_t(Structure):
        pass
    
    struct_enum_const_t._pack_ = 1 # source:False
    struct_enum_const_t._fields_ = [
        ('tid', ctypes.c_uint64),
        ('serial', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 7),
    ]
    
    struct_fixup_data_t._pack_ = 1 # source:False
    struct_fixup_data_t._fields_ = [
        ('type', ctypes.c_uint16),
        ('PADDING_0', ctypes.c_ubyte * 2),
        ('flags', ctypes.c_uint32),
        ('base', ctypes.c_uint64),
        ('sel', ctypes.c_uint64),
        ('off', ctypes.c_uint64),
        ('displacement', ctypes.c_int64),
    ]
    
    struct_fixup_info_t._pack_ = 1 # source:False
    struct_fixup_info_t._fields_ = [
        ('ea', ctypes.c_uint64),
        ('fd', struct_fixup_data_t),
    ]
    
    class struct_graph_item_t(Structure):
        pass
    
    
    # values for enumeration 'graph_item_type_t'
    graph_item_type_t__enumvalues = {
        0: 'git_none',
        1: 'git_edge',
        2: 'git_node',
        3: 'git_tool',
        4: 'git_text',
        5: 'git_elp',
    }
    git_none = 0
    git_edge = 1
    git_node = 2
    git_tool = 3
    git_text = 4
    git_elp = 5
    graph_item_type_t = ctypes.c_uint32 # enum
    struct_graph_item_t._pack_ = 1 # source:False
    struct_graph_item_t._fields_ = [
        ('type', graph_item_type_t),
        ('e', struct_edge_t),
        ('n', ctypes.c_int32),
        ('b', ctypes.c_int32),
        ('p', struct_point_t),
        ('elp', struct_edge_layout_point_t),
    ]
    
    class union_idc_value_t_0(Union):
        pass
    
    class struct_idc_object_t(Structure):
        pass
    
    union_idc_value_t_0._pack_ = 1 # source:False
    union_idc_value_t_0._fields_ = [
        ('num', ctypes.c_int64),
        ('e', struct_fpvalue_t),
        ('obj', ctypes.POINTER(struct_idc_object_t)),
        ('funcidx', ctypes.c_int32),
        ('pvoid', ctypes.POINTER(None)),
        ('i64', ctypes.c_int64),
        ('reserve', ctypes.c_ubyte * 24),
    ]
    
    struct_idc_value_t._pack_ = 1 # source:False
    struct_idc_value_t._anonymous_ = ('_0',)
    struct_idc_value_t._fields_ = [
        ('vtype', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 7),
        ('_0', union_idc_value_t_0),
    ]
    
    struct_idc_global_t._pack_ = 1 # source:False
    struct_idc_global_t._fields_ = [
        ('name', qstring),
        ('value', struct_idc_value_t),
    ]
    
    class struct_idd_opinfo_t(Structure):
        pass
    
    struct_idd_opinfo_t._pack_ = 1 # source:False
    struct_idd_opinfo_t._fields_ = [
        ('modified', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 7),
        ('ea', ctypes.c_uint64),
        ('value', struct_regval_t),
        ('debregidx', ctypes.c_int32),
        ('value_size', ctypes.c_int32),
    ]
    
    class struct_interr_exc_t(Structure):
        pass
    
    struct_interr_exc_t._pack_ = 1 # source:False
    struct_interr_exc_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
        ('code', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    struct_ioport_bit_t._pack_ = 1 # source:False
    struct_ioport_bit_t._fields_ = [
        ('name', qstring),
        ('cmt', qstring),
    ]
    
    class struct_lock_segment(Structure):
        pass
    
    struct_lock_segment._pack_ = 1 # source:False
    struct_lock_segment._fields_ = [
        ('segm', ctypes.POINTER(struct_segment_t)),
    ]
    
    class struct_merge_data_t(Structure):
        pass
    
    class struct_place_t_vtbl(Structure):
        pass
    
    
    # values for enumeration 'access_type_t'
    access_type_t__enumvalues = {
        0: 'NO_ACCESS',
        1: 'WRITE_ACCESS',
        2: 'READ_ACCESS',
        3: 'RW_ACCESS',
    }
    NO_ACCESS = 0
    WRITE_ACCESS = 1
    READ_ACCESS = 2
    RW_ACCESS = 3
    access_type_t = ctypes.c_uint8 # enum
    class struct_bitrange_t(Structure):
        pass
    
    struct_bitrange_t._pack_ = 1 # source:False
    struct_bitrange_t._fields_ = [
        ('offset', ctypes.c_uint16),
        ('nbits', ctypes.c_uint16),
    ]
    
    struct_reg_access_t._pack_ = 1 # source:False
    struct_reg_access_t._fields_ = [
        ('regnum', ctypes.c_int32),
        ('range', struct_bitrange_t),
        ('access_type', access_type_t),
        ('opnum', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 2),
    ]
    
    class struct_reloc_info_t(Structure):
        pass
    
    struct_reloc_info_t._pack_ = 1 # source:False
    struct_reloc_info_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    struct_simple_bfi_t._pack_ = 1 # source:False
    struct_simple_bfi_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 104),
        ('regs_', struct_no_regs_t),
        ('PADDING_1', ctypes.c_ubyte * 7),
    ]
    
    struct_simpleline_t._pack_ = 1 # source:False
    struct_simpleline_t._fields_ = [
        ('line', qstring),
        ('color', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 3),
        ('bgcolor', ctypes.c_uint32),
    ]
    
    class struct_sreg_range_t(Structure):
        pass
    
    struct_sreg_range_t._pack_ = 1 # source:False
    struct_sreg_range_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('val', ctypes.c_uint64),
        ('tag', ctypes.c_ubyte),
        ('PADDING_1', ctypes.c_ubyte * 7),
    ]
    
    class struct_std___Ignore(Structure):
        pass
    
    class struct_std___Lockit(Structure):
        pass
    
    struct_std___Lockit._pack_ = 1 # source:False
    struct_std___Lockit._fields_ = [
        ('_Locktype', ctypes.c_int32),
    ]
    
    class struct_std__tuple__(Structure):
        pass
    
    class struct_til_bucket_t(Structure):
        pass
    
    class struct_til_stream_t(Structure):
        pass
    
    class struct_til_symbol_t(Structure):
        pass
    
    struct_til_symbol_t._pack_ = 1 # source:False
    struct_til_symbol_t._fields_ = [
        ('name', ctypes.c_char_p),
        ('til', ctypes.POINTER(struct_til_t)),
    ]
    
    struct_udt_member_t._pack_ = 1 # source:False
    struct_udt_member_t._fields_ = [
        ('offset', ctypes.c_uint64),
        ('size', ctypes.c_uint64),
        ('name', qstring),
        ('cmt', qstring),
        ('type', struct_tinfo_t),
        ('effalign', ctypes.c_int32),
        ('tafld_bits', ctypes.c_uint32),
        ('fda', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 3),
    ]
    
    class struct_ui_request_t(Structure):
        pass
    
    struct_ui_request_t._pack_ = 1 # source:False
    struct_ui_request_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_ui_request_t_vtbl)),
    ]
    
    class struct__CRT_DOUBLE(Structure):
        pass
    
    struct__CRT_DOUBLE._pack_ = 1 # source:False
    struct__CRT_DOUBLE._fields_ = [
        ('x', ctypes.c_double),
    ]
    
    class struct__LONGDOUBLE(Structure):
        pass
    
    struct__LONGDOUBLE._pack_ = 1 # source:False
    struct__LONGDOUBLE._fields_ = [
        ('x', ctypes.c_double),
    ]
    
    class struct___qthread_t(Structure):
        pass
    
    class struct__diskfree_t(Structure):
        pass
    
    struct__diskfree_t._pack_ = 1 # source:False
    struct__diskfree_t._fields_ = [
        ('total_clusters', ctypes.c_uint32),
        ('avail_clusters', ctypes.c_uint32),
        ('sectors_per_cluster', ctypes.c_uint32),
        ('bytes_per_sector', ctypes.c_uint32),
    ]
    
    class struct__timespec32(Structure):
        pass
    
    struct__timespec32._pack_ = 1 # source:False
    struct__timespec32._fields_ = [
        ('tv_sec', ctypes.c_int32),
        ('tv_nsec', ctypes.c_int32),
    ]
    
    class struct__timespec64(Structure):
        pass
    
    struct__timespec64._pack_ = 1 # source:False
    struct__timespec64._fields_ = [
        ('tv_sec', ctypes.c_int64),
        ('tv_nsec', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_bookmarks_t(Structure):
        pass
    
    class struct_data_type_t(Structure):
        pass
    
    struct_data_type_t._pack_ = 1 # source:False
    struct_data_type_t._fields_ = [
        ('cbsize', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('ud', ctypes.POINTER(None)),
        ('props', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('name', ctypes.c_char_p),
        ('menu_name', ctypes.c_char_p),
        ('hotkey', ctypes.c_char_p),
        ('asm_keyword', ctypes.c_char_p),
        ('value_size', ctypes.c_uint64),
        ('may_create_at', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_uint64)),
        ('calc_item_size', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_uint64)),
    ]
    
    class struct_edge_info_t(Structure):
        pass
    
    class struct_pointseq_t(Structure):
        pass
    
    struct_pointseq_t._pack_ = 1 # source:False
    struct_pointseq_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    struct_edge_info_t._pack_ = 1 # source:False
    struct_edge_info_t._fields_ = [
        ('color', ctypes.c_uint32),
        ('width', ctypes.c_int32),
        ('srcoff', ctypes.c_int32),
        ('dstoff', ctypes.c_int32),
        ('layout', struct_pointseq_t),
    ]
    
    class struct_enumplace_t(Structure):
        pass
    
    struct_enumplace_t._pack_ = 1 # source:False
    struct_enumplace_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('idx', ctypes.c_uint64),
        ('bmask', ctypes.c_uint64),
        ('value', ctypes.c_uint64),
        ('serial', ctypes.c_ubyte),
        ('PADDING_1', ctypes.c_ubyte * 7),
    ]
    
    class struct_exehdr_full(Structure):
        pass
    
    struct_exehdr_full._pack_ = 1 # source:False
    struct_exehdr_full._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 28),
        ('res', ctypes.c_uint16 * 4),
        ('oemid', ctypes.c_uint16),
        ('oeminfo', ctypes.c_uint16),
        ('res2', ctypes.c_uint16 * 10),
        ('lfanew', ctypes.c_uint32),
    ]
    
    struct_gdl_graph_t._pack_ = 1 # source:False
    struct_gdl_graph_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_gdl_graph_t_vtbl)),
    ]
    
    class struct_idc_class_t(Structure):
        pass
    
    class struct_lex_value_t(Structure):
        pass
    
    class union_lex_value_t_0(Union):
        pass
    
    union_lex_value_t_0._pack_ = 1 # source:False
    union_lex_value_t_0._fields_ = [
        ('val', ctypes.c_int64),
        ('uval', ctypes.c_uint64),
    ]
    
    struct_lex_value_t._pack_ = 1 # source:False
    struct_lex_value_t._anonymous_ = ('_0',)
    struct_lex_value_t._fields_ = [
        ('is_unsigned', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 7),
        ('_0', union_lex_value_t_0),
    ]
    
    class struct_linearray_t(Structure):
        pass
    
    struct_linearray_t._pack_ = 1 # source:False
    struct_linearray_t._fields_ = [
        ('lines', qstrvec_t),
        ('at', ctypes.POINTER(struct_place_t)),
        ('ud', ctypes.POINTER(None)),
        ('prefix_color', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 3),
        ('bg_color', ctypes.c_uint32),
        ('extra', qstring),
        ('dlnnum', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct_load_info_t(Structure):
        pass
    
    
    # values for enumeration 'filetype_t'
    filetype_t__enumvalues = {
        0: 'f_EXE_old',
        1: 'f_COM_old',
        2: 'f_BIN',
        3: 'f_DRV',
        4: 'f_WIN',
        5: 'f_HEX',
        6: 'f_MEX',
        7: 'f_LX',
        8: 'f_LE',
        9: 'f_NLM',
        10: 'f_COFF',
        11: 'f_PE',
        12: 'f_OMF',
        13: 'f_SREC',
        14: 'f_ZIP',
        15: 'f_OMFLIB',
        16: 'f_AR',
        17: 'f_LOADER',
        18: 'f_ELF',
        19: 'f_W32RUN',
        20: 'f_AOUT',
        21: 'f_PRC',
        22: 'f_EXE',
        23: 'f_COM',
        24: 'f_AIXAR',
        25: 'f_MACHO',
        26: 'f_PSXOBJ',
    }
    f_EXE_old = 0
    f_COM_old = 1
    f_BIN = 2
    f_DRV = 3
    f_WIN = 4
    f_HEX = 5
    f_MEX = 6
    f_LX = 7
    f_LE = 8
    f_NLM = 9
    f_COFF = 10
    f_PE = 11
    f_OMF = 12
    f_SREC = 13
    f_ZIP = 14
    f_OMFLIB = 15
    f_AR = 16
    f_LOADER = 17
    f_ELF = 18
    f_W32RUN = 19
    f_AOUT = 20
    f_PRC = 21
    f_EXE = 22
    f_COM = 23
    f_AIXAR = 24
    f_MACHO = 25
    f_PSXOBJ = 26
    filetype_t = ctypes.c_uint32 # enum
    struct_load_info_t._pack_ = 1 # source:False
    struct_load_info_t._fields_ = [
        ('next', ctypes.POINTER(struct_load_info_t)),
        ('dllname', qstring),
        ('ftypename', qstring),
        ('processor', qstring),
        ('ftype', filetype_t),
        ('loader_flags', ctypes.c_uint32),
        ('lflags', ctypes.c_uint32),
        ('pri', ctypes.c_int32),
    ]
    
    class struct_node_info_t(Structure):
        pass
    
    struct_node_info_t._pack_ = 1 # source:False
    struct_node_info_t._fields_ = [
        ('cb', ctypes.c_uint64),
        ('bg_color', ctypes.c_uint32),
        ('frame_color', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('ea', ctypes.c_uint64),
        ('text', qstring),
    ]
    
    class struct_predicate_t(Structure):
        pass
    
    struct_predicate_t._pack_ = 1 # source:False
    struct_predicate_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_predicate_t_vtbl)),
    ]
    
    class struct_processor_t(Structure):
        pass
    
    class struct_bytes_t(Structure):
        pass
    
    class struct_instruc_t(Structure):
        pass
    
    class struct_asm_t(Structure):
        pass
    
    struct_processor_t._pack_ = 1 # source:False
    struct_processor_t._fields_ = [
        ('version', ctypes.c_int32),
        ('id', ctypes.c_int32),
        ('flag', ctypes.c_uint32),
        ('flag2', ctypes.c_uint32),
        ('cnbits', ctypes.c_int32),
        ('dnbits', ctypes.c_int32),
        ('psnames', ctypes.POINTER(ctypes.c_char_p)),
        ('plnames', ctypes.POINTER(ctypes.c_char_p)),
        ('assemblers', ctypes.POINTER(ctypes.POINTER(struct_asm_t))),
        ('_notify', ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(None), ctypes.c_int32, ctypes.POINTER(ctypes.POINTER(None)))),
        ('reg_names', ctypes.POINTER(ctypes.c_char_p)),
        ('regs_num', ctypes.c_int32),
        ('reg_first_sreg', ctypes.c_int32),
        ('reg_last_sreg', ctypes.c_int32),
        ('segreg_size', ctypes.c_int32),
        ('reg_code_sreg', ctypes.c_int32),
        ('reg_data_sreg', ctypes.c_int32),
        ('codestart', ctypes.POINTER(struct_bytes_t)),
        ('retcodes', ctypes.POINTER(struct_bytes_t)),
        ('instruc_start', ctypes.c_int32),
        ('instruc_end', ctypes.c_int32),
        ('instruc', ctypes.POINTER(struct_instruc_t)),
        ('tbyte_size', ctypes.c_uint64),
        ('real_width', ctypes.c_char * 4),
        ('icode_return', ctypes.c_int32),
        ('unused_slot', ctypes.POINTER(None)),
    ]
    
    struct_simd_info_t._pack_ = 1 # source:False
    struct_simd_info_t._fields_ = [
        ('name', ctypes.c_char_p),
        ('tif', struct_tinfo_t),
        ('size', ctypes.c_uint16),
        ('memtype', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte),
    ]
    
    class struct_std__locale(Structure):
        pass
    
    class struct_text_sink_t(Structure):
        pass
    
    struct_text_sink_t._pack_ = 1 # source:False
    struct_text_sink_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_text_sink_t_vtbl)),
    ]
    
    struct_type_attr_t._pack_ = 1 # source:False
    struct_type_attr_t._fields_ = [
        ('key', qstring),
        ('value', struct_bytevec_t),
    ]
    
    class struct_type_mods_t(Structure):
        pass
    
    struct_type_mods_t._pack_ = 1 # source:False
    struct_type_mods_t._fields_ = [
        ('type', struct_tinfo_t),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('name', qstring),
        ('cmt', qstring),
        ('flags', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct_MD5Context(Structure):
        pass
    
    struct_MD5Context._pack_ = 1 # source:False
    struct_MD5Context._fields_ = [
        ('buf', ctypes.c_uint32 * 4),
        ('bits', ctypes.c_uint32 * 2),
        ('in', ctypes.c_ubyte * 64),
    ]
    
    class struct_TPopupMenu(Structure):
        pass
    
    class struct__CRT_FLOAT(Structure):
        pass
    
    struct__CRT_FLOAT._pack_ = 1 # source:False
    struct__CRT_FLOAT._fields_ = [
        ('f', ctypes.c_float),
    ]
    
    class struct___qtimer_t(Structure):
        pass
    
    class struct__exception(Structure):
        pass
    
    struct__exception._pack_ = 1 # source:False
    struct__exception._fields_ = [
        ('type', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('name', ctypes.c_char_p),
        ('arg1', ctypes.c_double),
        ('arg2', ctypes.c_double),
        ('retval', ctypes.c_double),
    ]
    
    class struct__stat32i64(Structure):
        pass
    
    struct__stat32i64._pack_ = 1 # source:False
    struct__stat32i64._fields_ = [
        ('st_dev', ctypes.c_uint32),
        ('st_ino', ctypes.c_uint16),
        ('st_mode', ctypes.c_uint16),
        ('st_nlink', ctypes.c_int16),
        ('st_uid', ctypes.c_int16),
        ('st_gid', ctypes.c_int16),
        ('PADDING_0', ctypes.c_ubyte * 2),
        ('st_rdev', ctypes.c_uint32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('st_size', ctypes.c_int64),
        ('st_atime', ctypes.c_int32),
        ('st_mtime', ctypes.c_int32),
        ('st_ctime', ctypes.c_int32),
        ('PADDING_2', ctypes.c_ubyte * 4),
    ]
    
    class struct__stat64i32(Structure):
        pass
    
    struct__stat64i32._pack_ = 1 # source:False
    struct__stat64i32._fields_ = [
        ('st_dev', ctypes.c_uint32),
        ('st_ino', ctypes.c_uint16),
        ('st_mode', ctypes.c_uint16),
        ('st_nlink', ctypes.c_int16),
        ('st_uid', ctypes.c_int16),
        ('st_gid', ctypes.c_int16),
        ('PADDING_0', ctypes.c_ubyte * 2),
        ('st_rdev', ctypes.c_uint32),
        ('st_size', ctypes.c_int32),
        ('st_atime', ctypes.c_int64),
        ('st_mtime', ctypes.c_int64),
        ('st_ctime', ctypes.c_int64),
    ]
    
    struct_bptaddrs_t._pack_ = 1 # source:False
    struct_bptaddrs_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
        ('bpt', ctypes.POINTER(struct_bpt_t)),
    ]
    
    class struct_callregs_t(Structure):
        pass
    
    
    # values for enumeration 'argreg_policy_t'
    argreg_policy_t__enumvalues = {
        0: 'ARGREGS_POLICY_UNDEFINED',
        1: 'ARGREGS_GP_ONLY',
        2: 'ARGREGS_INDEPENDENT',
        3: 'ARGREGS_BY_SLOTS',
        4: 'ARGREGS_FP_CONSUME_GP',
        5: 'ARGREGS_MIPS_O32',
    }
    ARGREGS_POLICY_UNDEFINED = 0
    ARGREGS_GP_ONLY = 1
    ARGREGS_INDEPENDENT = 2
    ARGREGS_BY_SLOTS = 3
    ARGREGS_FP_CONSUME_GP = 4
    ARGREGS_MIPS_O32 = 5
    argreg_policy_t = ctypes.c_uint32 # enum
    struct_callregs_t._pack_ = 1 # source:False
    struct_callregs_t._fields_ = [
        ('policy', argreg_policy_t),
        ('nregs', ctypes.c_int32),
        ('gpregs', intvec_t),
        ('fpregs', intvec_t),
    ]
    
    class struct_dbg_info_t(Structure):
        pass
    
    class struct_debugger_t(Structure):
        pass
    
    struct_dbg_info_t._pack_ = 1 # source:False
    struct_dbg_info_t._fields_ = [
        ('pi', ctypes.POINTER(struct_plugin_info_t)),
        ('dbg', ctypes.POINTER(struct_debugger_t)),
    ]
    
    struct_debugger_t._pack_ = 1 # source:False
    struct_debugger_t._fields_ = [
        ('version', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('name', ctypes.c_char_p),
        ('id', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('processor', ctypes.c_char_p),
        ('flags', ctypes.c_uint32),
        ('flags2', ctypes.c_uint32),
        ('regclasses', ctypes.POINTER(ctypes.c_char_p)),
        ('default_regclasses', ctypes.c_int32),
        ('PADDING_2', ctypes.c_ubyte * 4),
        ('registers', ctypes.POINTER(struct_register_info_t)),
        ('nregs', ctypes.c_int32),
        ('memory_page_size', ctypes.c_int32),
        ('bpt_bytes', ctypes.POINTER(ctypes.c_ubyte)),
        ('bpt_size', ctypes.c_ubyte),
        ('filetype', ctypes.c_ubyte),
        ('resume_modes', ctypes.c_uint16),
        ('PADDING_3', ctypes.c_ubyte * 4),
        ('set_dbg_options', ctypes.CFUNCTYPE(ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(None))),
        ('callback', ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(None), ctypes.c_int32, ctypes.POINTER(ctypes.POINTER(None)))),
    ]
    
    struct_direntry_t._pack_ = 1 # source:False
    struct_direntry_t._fields_ = [
        ('idx', ctypes.c_uint64),
        ('isdir', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 7),
    ]
    
    class struct_eval_ctx_t(Structure):
        pass
    
    struct_eval_ctx_t._pack_ = 1 # source:False
    struct_eval_ctx_t._fields_ = [
        ('size_cb', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('ea', ctypes.c_uint64),
    ]
    
    class struct_hexplace_t(Structure):
        pass
    
    struct_hexplace_t._pack_ = 1 # source:False
    struct_hexplace_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
        ('sol', ctypes.c_uint64),
    ]
    
    class struct_idaplace_t(Structure):
        pass
    
    struct_idaplace_t._pack_ = 1 # source:False
    struct_idaplace_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('ea', ctypes.c_uint64),
    ]
    
    class struct_idcfuncs_t(Structure):
        pass
    
    struct_idcfuncs_t._pack_ = 1 # source:False
    struct_idcfuncs_t._fields_ = [
        ('qnty', ctypes.c_uint64),
        ('funcs', ctypes.POINTER(struct_ext_idcfunc_t)),
        ('startup', ctypes.CFUNCTYPE(ctypes.c_int32)),
        ('shutdown', ctypes.CFUNCTYPE(ctypes.c_int32)),
        ('init_idc', ctypes.CFUNCTYPE(None)),
        ('term_idc', ctypes.CFUNCTYPE(None)),
        ('is_database_open', ctypes.CFUNCTYPE(ctypes.c_char)),
        ('ea2str', ctypes.CFUNCTYPE(ctypes.c_uint64, ctypes.c_char_p, ctypes.c_uint64, ctypes.c_uint64)),
        ('undeclared_variable_ok', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.c_char_p)),
        ('get_unkvar', ctypes.c_int32),
        ('set_unkvar', ctypes.c_int32),
        ('exec_resolved_func', ctypes.c_int32),
        ('calc_sizeof', ctypes.c_int32),
        ('get_field_ea', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    idp_names_t = struct_qvector_idp_name_t_
    struct_idp_desc_t._pack_ = 1 # source:False
    struct_idp_desc_t._fields_ = [
        ('path', qstring),
        ('mtime', ctypes.c_int64),
        ('family', qstring),
        ('names', idp_names_t),
        ('is_script', ctypes.c_char),
        ('checked', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 6),
    ]
    
    struct_idp_name_t._pack_ = 1 # source:False
    struct_idp_name_t._fields_ = [
        ('lname', qstring),
        ('sname', qstring),
        ('hidden', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 7),
    ]
    
    class struct_interval_t(Structure):
        pass
    
    struct_interval_t._pack_ = 1 # source:False
    struct_interval_t._fields_ = [
        ('x0', ctypes.c_int32),
        ('x1', ctypes.c_int32),
    ]
    
    class struct_location_t(Structure):
        pass
    
    class struct_proc_def_t(Structure):
        pass
    
    class struct_qffblk64_t(Structure):
        pass
    
    class struct_qffblk_t(Structure):
        pass
    
    struct_qffblk_t._pack_ = 1 # source:False
    struct_qffblk_t._fields_ = [
        ('attrib', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('time_create', ctypes.c_int64),
        ('time_access', ctypes.c_int64),
        ('time_write', ctypes.c_int64),
        ('size', ctypes.c_int64),
        ('name', ctypes.c_char * 260),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('handle', ctypes.c_int64),
        ('attr', ctypes.c_int32),
        ('ff_ftime', ctypes.c_uint16),
        ('ff_fdate', ctypes.c_uint16),
    ]
    
    struct_qffblk64_t._pack_ = 1 # source:False
    struct_qffblk64_t._fields_ = [
        ('attrib', ctypes.c_int32),
        ('name', ctypes.c_char * 260),
        ('size', ctypes.c_uint64),
        ('ff_fdate', ctypes.c_uint16),
        ('ff_ftime', ctypes.c_uint16),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('base', struct_qffblk_t),
    ]
    
    struct_rangeset_t._pack_ = 1 # source:False
    struct_rangeset_t._fields_ = [
        ('bag', struct_rangevec_t),
        ('cache', ctypes.POINTER(struct_range_t)),
        ('undo_code', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    struct_reg_info_t._pack_ = 1 # source:False
    struct_reg_info_t._fields_ = [
        ('reg', ctypes.c_int32),
        ('size', ctypes.c_int32),
    ]
    
    class struct_regmatch_t(Structure):
        pass
    
    struct_regmatch_t._pack_ = 1 # source:False
    struct_regmatch_t._fields_ = [
        ('rm_so', ctypes.c_int32),
        ('rm_eo', ctypes.c_int32),
    ]
    
    struct_row_info_t._pack_ = 1 # source:False
    struct_row_info_t._fields_ = [
        ('nodes', intvec_t),
        ('top', ctypes.c_int32),
        ('bottom', ctypes.c_int32),
    ]
    
    snapshots_t = struct_qvector_snapshot_t__P_
    struct_snapshot_t._pack_ = 1 # source:False
    struct_snapshot_t._fields_ = [
        ('id', ctypes.c_uint64),
        ('flags', ctypes.c_uint16),
        ('desc', ctypes.c_char * 128),
        ('filename', ctypes.c_char * 260),
        ('PADDING_0', ctypes.c_ubyte * 2),
        ('children', snapshots_t),
    ]
    
    class struct_strarray_t(Structure):
        pass
    
    struct_strarray_t._pack_ = 1 # source:False
    struct_strarray_t._fields_ = [
        ('code', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('text', ctypes.c_char_p),
    ]
    
    struct_twinline_t._pack_ = 1 # source:False
    struct_twinline_t._fields_ = [
        ('at', ctypes.POINTER(struct_place_t)),
        ('line', qstring),
        ('prefix_color', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 3),
        ('bg_color', ctypes.c_uint32),
        ('is_default', ctypes.c_char),
        ('PADDING_1', ctypes.c_ubyte * 7),
    ]
    
    class struct__heapinfo(Structure):
        pass
    
    struct__heapinfo._pack_ = 1 # source:False
    struct__heapinfo._fields_ = [
        ('_pentry', ctypes.POINTER(ctypes.c_int32)),
        ('_size', ctypes.c_uint64),
        ('_useflag', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    struct_argpart_t._pack_ = 1 # source:False
    struct_argpart_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('off', ctypes.c_uint16),
        ('size', ctypes.c_uint16),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct_bptaddr_t(Structure):
        pass
    
    struct_bptaddr_t._pack_ = 1 # source:False
    struct_bptaddr_t._fields_ = [
        ('hea', ctypes.c_uint64),
        ('kea', ctypes.c_uint64),
    ]
    
    class struct_chooser_t(Structure):
        pass
    
    struct_chooser_t._pack_ = 1 # source:False
    struct_chooser_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 184),
    ]
    
    class struct_cliopts_t(Structure):
        pass
    
    struct_cliopts_t._pack_ = 1 # source:False
    struct_cliopts_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
        ('prog_name', qstring),
        ('epilog', qstring),
        ('printer', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_char_p)),
    ]
    
    class struct_destset_t(Structure):
        pass
    
    class struct_dirspec_t(Structure):
        pass
    
    struct_dirspec_t._pack_ = 1 # source:False
    struct_dirspec_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_dirspec_t_vtbl)),
        ('flags', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('id', qstring),
    ]
    
    class struct_dirtree_t(Structure):
        pass
    
    struct_dirtree_t._pack_ = 1 # source:False
    struct_dirtree_t._fields_ = [
        ('d', ctypes.POINTER(struct_dirtree_impl_t)),
    ]
    
    struct_ea_name_t._pack_ = 1 # source:False
    struct_ea_name_t._fields_ = [
        ('ea', ctypes.c_uint64),
        ('name', qstring),
    ]
    
    class struct_edgeset_t(Structure):
        pass
    
    class struct_encoder_t(Structure):
        pass
    
    struct_encoder_t._pack_ = 1 # source:False
    struct_encoder_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_encoder_t_vtbl)),
    ]
    
    class struct_excinfo_t(Structure):
        pass
    
    struct_excinfo_t._pack_ = 1 # source:False
    struct_excinfo_t._fields_ = [
        ('code', ctypes.c_uint32),
        ('can_cont', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 3),
        ('ea', ctypes.c_uint64),
        ('info', qstring),
    ]
    
    struct_extlang_t._pack_ = 1 # source:False
    struct_extlang_t._fields_ = [
        ('size', ctypes.c_uint64),
        ('flags', ctypes.c_uint32),
        ('refcnt', ctypes.c_int32),
        ('name', ctypes.c_char_p),
        ('fileext', ctypes.c_char_p),
        ('highlighter', ctypes.POINTER(struct_syntax_highlighter_t)),
        ('compile_expr', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.c_char_p, ctypes.c_uint64, ctypes.c_char_p, ctypes.POINTER(struct__qstring_char_))),
        ('compile_file', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.c_char_p, ctypes.POINTER(struct__qstring_char_))),
        ('call_func', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p, ctypes.POINTER(struct_idc_value_t), ctypes.c_uint64, ctypes.POINTER(struct__qstring_char_))),
        ('eval_expr', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.c_uint64, ctypes.c_char_p, ctypes.POINTER(struct__qstring_char_))),
        ('eval_snippet', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.c_char_p, ctypes.POINTER(struct__qstring_char_))),
        ('create_object', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p, ctypes.POINTER(struct_idc_value_t), ctypes.c_uint64, ctypes.POINTER(struct__qstring_char_))),
        ('get_attr', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p)),
        ('set_attr', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p, ctypes.POINTER(struct_idc_value_t))),
        ('call_method', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p, ctypes.POINTER(struct_idc_value_t), ctypes.c_uint64, ctypes.POINTER(struct__qstring_char_))),
        ('load_procmod', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p, ctypes.POINTER(struct__qstring_char_))),
        ('unload_procmod', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.c_char_p, ctypes.POINTER(struct__qstring_char_))),
    ]
    
    struct_funcarg_t._pack_ = 1 # source:False
    struct_funcarg_t._fields_ = [
        ('argloc', struct_argloc_t),
        ('name', qstring),
        ('cmt', qstring),
        ('type', struct_tinfo_t),
        ('flags', ctypes.c_uint32),
    ]
    
    class struct_hexview_t(Structure):
        pass
    
    class struct_impinfo_t(Structure):
        pass
    
    struct_impinfo_t._pack_ = 1 # source:False
    struct_impinfo_t._fields_ = [
        ('dllname', ctypes.c_char_p),
        ('func', ctypes.CFUNCTYPE(None, ctypes.c_uint64, ctypes.c_char_p, ctypes.c_uint64)),
        ('node', ctypes.c_uint64),
    ]
    
    struct_instruc_t._pack_ = 1 # source:False
    struct_instruc_t._fields_ = [
        ('name', ctypes.c_char_p),
        ('feature', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_libfunc_t(Structure):
        pass
    
    class struct_lochist_t(Structure):
        pass
    
    struct_lochist_t._pack_ = 1 # source:False
    struct_lochist_t._fields_ = [
        ('ud', ctypes.POINTER(None)),
        ('cur', struct_lochist_entry_t),
        ('node', struct_netnode),
        ('flags', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_lock_func(Structure):
        pass
    
    struct_lock_func._pack_ = 1 # source:False
    struct_lock_func._fields_ = [
        ('pfn', ctypes.POINTER(struct_func_t)),
    ]
    
    struct_modinfo_t._pack_ = 1 # source:False
    struct_modinfo_t._fields_ = [
        ('name', qstring),
        ('base', ctypes.c_uint64),
        ('size', ctypes.c_uint64),
        ('rebase_to', ctypes.c_uint64),
    ]
    
    class struct_plugmod_t(Structure):
        pass
    
    struct_plugmod_t._pack_ = 1 # source:False
    struct_plugmod_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_plugmod_t_vtbl)),
        ('owner', ctypes.c_uint64),
        ('reserved', ctypes.c_uint64),
    ]
    
    class struct_printop_t(Structure):
        pass
    
    class union_opinfo_t(Union):
        pass
    
    class struct_strpath_t(Structure):
        pass
    
    struct_strpath_t._pack_ = 1 # source:False
    struct_strpath_t._fields_ = [
        ('len', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('ids', ctypes.c_uint64 * 32),
        ('delta', ctypes.c_int64),
    ]
    
    struct_refinfo_t._pack_ = 1 # source:False
    struct_refinfo_t._fields_ = [
        ('target', ctypes.c_uint64),
        ('base', ctypes.c_uint64),
        ('tdelta', ctypes.c_int64),
        ('flags', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    union_opinfo_t._pack_ = 1 # source:False
    union_opinfo_t._fields_ = [
        ('ri', struct_refinfo_t),
        ('tid', ctypes.c_uint64),
        ('path', struct_strpath_t),
        ('strtype', ctypes.c_int32),
        ('ec', struct_enum_const_t),
        ('cd', struct_custom_data_type_ids_t),
        ('PADDING_0', ctypes.c_ubyte * 254),
    ]
    
    struct_printop_t._pack_ = 1 # source:False
    struct_printop_t._fields_ = [
        ('flags', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('ti', union_opinfo_t),
        ('features', ctypes.c_ubyte),
        ('PADDING_1', ctypes.c_ubyte * 3),
        ('suspop', ctypes.c_int32),
        ('aflags', ctypes.c_uint32),
        ('PADDING_2', ctypes.c_ubyte * 4),
    ]
    
    class struct_procmod_t(Structure):
        pass
    
    struct_procmod_t._pack_ = 1 # source:False
    struct_procmod_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
        ('ph', ctypes.POINTER(struct_processor_t)),
        ('ash', ctypes.POINTER(struct_asm_t)),
        ('procmod_flags', ctypes.c_uint64),
        ('reserved', ctypes.c_uint64),
    ]
    
    class struct_regobjs_t(Structure):
        pass
    
    struct_regobjs_t._pack_ = 1 # source:False
    struct_regobjs_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    struct_segment_t._pack_ = 1 # source:False
    struct_segment_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('name', ctypes.c_uint64),
        ('sclass', ctypes.c_uint64),
        ('orgbase', ctypes.c_uint64),
        ('align', ctypes.c_ubyte),
        ('comb', ctypes.c_ubyte),
        ('perm', ctypes.c_ubyte),
        ('bitness', ctypes.c_ubyte),
        ('flags', ctypes.c_uint16),
        ('PADDING_1', ctypes.c_ubyte * 2),
        ('sel', ctypes.c_uint64),
        ('defsr', ctypes.c_uint64 * 16),
        ('type', ctypes.c_ubyte),
        ('PADDING_2', ctypes.c_ubyte * 3),
        ('color', ctypes.c_uint32),
    ]
    
    class struct_stkpnts_t(Structure):
        pass
    
    struct_stkpnts_t._pack_ = 1 # source:False
    struct_stkpnts_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_type_info(Structure):
        pass
    
    class struct_valinfo_t(Structure):
        pass
    
    struct_valinfo_t._pack_ = 1 # source:False
    struct_valinfo_t._fields_ = [
        ('loc', struct_argloc_t),
        ('label', qstring),
        ('type', struct_tinfo_t),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct_valstrs_t(Structure):
        pass
    
    struct_valstrs_t._pack_ = 1 # source:False
    struct_valstrs_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    class struct_xrefblk_t(Structure):
        pass
    
    struct_xrefblk_t._pack_ = 1 # source:False
    struct_xrefblk_t._fields_ = [
        ('from', ctypes.c_uint64),
        ('to', ctypes.c_uint64),
        ('iscode', ctypes.c_ubyte),
        ('type', ctypes.c_ubyte),
        ('user', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 5),
    ]
    
    class struct_xrefpos_t(Structure):
        pass
    
    struct_xrefpos_t._pack_ = 1 # source:False
    struct_xrefpos_t._fields_ = [
        ('ea', ctypes.c_uint64),
        ('type', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 7),
    ]
    
    class struct__LDOUBLE(Structure):
        pass
    
    struct__LDOUBLE._pack_ = 1 # source:False
    struct__LDOUBLE._fields_ = [
        ('ld', ctypes.c_ubyte * 10),
    ]
    
    class struct__complex(Structure):
        pass
    
    struct__complex._pack_ = 1 # source:False
    struct__complex._fields_ = [
        ('x', ctypes.c_double),
        ('y', ctypes.c_double),
    ]
    
    class struct__lldiv_t(Structure):
        pass
    
    struct__lldiv_t._pack_ = 1 # source:False
    struct__lldiv_t._fields_ = [
        ('quot', ctypes.c_int64),
        ('rem', ctypes.c_int64),
    ]
    
    class union_cfgopt_t_0(Union):
        pass
    
    class struct_lexer_t(Structure):
        pass
    
    union_cfgopt_t_0._pack_ = 1 # source:False
    union_cfgopt_t_0._fields_ = [
        ('ptr', ctypes.POINTER(None)),
        ('mbroff', ctypes.c_uint64),
        ('hnd', ctypes.CFUNCTYPE(ctypes.c_char_p, ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t))),
        ('hnd2', ctypes.CFUNCTYPE(ctypes.c_char_p, ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t), ctypes.c_int64, ctypes.c_int64)),
        ('hnd3', ctypes.CFUNCTYPE(ctypes.c_char_p, ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t), ctypes.c_int64, ctypes.c_int64, ctypes.POINTER(None))),
    ]
    
    class union_cfgopt_t_1(Union):
        pass
    
    union_cfgopt_t_1._pack_ = 1 # source:False
    union_cfgopt_t_1._fields_ = [
        ('buf_size', ctypes.c_uint64),
        ('num_range', struct_cfgopt_t__num_range_t),
        ('bit_flags', ctypes.c_uint32),
        ('params', struct_cfgopt_t__params_t),
        ('mbroff_obj', ctypes.POINTER(None)),
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_cfgopt_t._pack_ = 1 # source:False
    struct_cfgopt_t._anonymous_ = ('_0', '_1',)
    struct_cfgopt_t._fields_ = [
        ('name', ctypes.c_char_p),
        ('_0', union_cfgopt_t_0),
        ('flags', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('_1', union_cfgopt_t_1),
    ]
    
    struct_cliopt_t._pack_ = 1 # source:False
    struct_cliopt_t._fields_ = [
        ('shortname', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 7),
        ('longname', ctypes.c_char_p),
        ('help', ctypes.c_char_p),
        ('handler', ctypes.CFUNCTYPE(None, ctypes.c_char_p, ctypes.POINTER(None))),
        ('nargs', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
    ]
    
    class struct_idasgn_t(Structure):
        pass
    
    struct_intmap_t._pack_ = 1 # source:False
    struct_intmap_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
    ]
    
    class struct_intset_t(Structure):
        pass
    
    struct_intset_t._pack_ = 1 # source:False
    struct_intset_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
    ]
    
    ioport_bits_t = struct_qvector_ioport_bit_t_
    struct_ioport_t._pack_ = 1 # source:False
    struct_ioport_t._fields_ = [
        ('address', ctypes.c_uint64),
        ('name', qstring),
        ('cmt', qstring),
        ('bits', ioport_bits_t),
        ('userdata', ctypes.POINTER(None)),
    ]
    
    class union_jvalue_t_0(Union):
        pass
    
    class struct_jarr_t(Structure):
        pass
    
    class struct_jobj_t(Structure):
        pass
    
    union_jvalue_t_0._pack_ = 1 # source:False
    union_jvalue_t_0._fields_ = [
        ('_num', ctypes.c_int64),
        ('_str', ctypes.POINTER(struct__qstring_char_)),
        ('_obj', ctypes.POINTER(struct_jobj_t)),
        ('_arr', ctypes.POINTER(struct_jarr_t)),
        ('_bool', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 7),
    ]
    
    
    # values for enumeration 'jtype_t'
    jtype_t__enumvalues = {
        0: 'JT_UNKNOWN',
        1: 'JT_NUM',
        2: 'JT_STR',
        3: 'JT_OBJ',
        4: 'JT_ARR',
        5: 'JT_BOOL',
    }
    JT_UNKNOWN = 0
    JT_NUM = 1
    JT_STR = 2
    JT_OBJ = 3
    JT_ARR = 4
    JT_BOOL = 5
    jtype_t = ctypes.c_uint32 # enum
    struct_jvalue_t._pack_ = 1 # source:False
    struct_jvalue_t._anonymous_ = ('_0',)
    struct_jvalue_t._fields_ = [
        ('_type', jtype_t),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('_0', union_jvalue_t_0),
    ]
    
    class struct_loader_t(Structure):
        pass
    
    struct_loader_t._pack_ = 1 # source:False
    struct_loader_t._fields_ = [
        ('version', ctypes.c_uint32),
        ('flags', ctypes.c_uint32),
        ('accept_file', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(struct_linput_t), ctypes.c_char_p)),
        ('load_file', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_linput_t), ctypes.c_uint16, ctypes.c_char_p)),
        ('save_file', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__iobuf), ctypes.c_char_p)),
        ('move_segm', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint64, ctypes.c_char_p)),
        ('process_archive', ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(struct_linput_t), ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(ctypes.c_uint16), ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(struct__qstring_char_))),
    ]
    
    struct_lowcnd_t._pack_ = 1 # source:False
    struct_lowcnd_t._fields_ = [
        ('ea', ctypes.c_uint64),
        ('cndbody', qstring),
        ('type', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('orgbytes', struct_bytevec_t),
        ('cmd', struct_insn_t),
        ('compiled', ctypes.c_char),
        ('PADDING_1', ctypes.c_ubyte * 3),
        ('size', ctypes.c_int32),
    ]
    
    struct_member_t._pack_ = 1 # source:False
    struct_member_t._fields_ = [
        ('id', ctypes.c_uint64),
        ('soff', ctypes.c_uint64),
        ('eoff', ctypes.c_uint64),
        ('flag', ctypes.c_uint32),
        ('props', ctypes.c_uint32),
    ]
    
    class struct_outctx_t(Structure):
        pass
    
    struct_outctx_t._pack_ = 1 # source:False
    struct_outctx_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 192),
        ('bin_ea', ctypes.c_uint64),
        ('bin_state', ctypes.c_char),
        ('PADDING_1', ctypes.c_ubyte * 3),
        ('gl_bpsize', ctypes.c_int32),
        ('bin_width', ctypes.c_int32),
        ('PADDING_2', ctypes.c_ubyte * 4),
        ('insn', struct_insn_t),
        ('curlabel', qstring),
        ('wif', ctypes.POINTER(struct_printop_t)),
        ('procmod', ctypes.POINTER(struct_procmod_t)),
        ('ph', ctypes.POINTER(struct_processor_t)),
        ('ash', ctypes.POINTER(struct_asm_t)),
        ('saved_immvals', ctypes.c_uint64 * 8),
    ]
    
    struct_plugin_t._pack_ = 1 # source:False
    struct_plugin_t._fields_ = [
        ('version', ctypes.c_int32),
        ('flags', ctypes.c_int32),
        ('init', ctypes.CFUNCTYPE(ctypes.POINTER(struct_plugmod_t))),
        ('term', ctypes.CFUNCTYPE(None)),
        ('run', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.c_uint64)),
        ('comment', ctypes.c_char_p),
        ('help', ctypes.c_char_p),
        ('wanted_name', ctypes.c_char_p),
        ('wanted_hotkey', ctypes.c_char_p),
    ]
    
    class struct_qstatbuf(Structure):
        pass
    
    struct_qstatbuf._pack_ = 1 # source:False
    struct_qstatbuf._fields_ = [
        ('qst_dev', ctypes.c_uint64),
        ('qst_ino', ctypes.c_uint32),
        ('qst_mode', ctypes.c_uint32),
        ('qst_nlink', ctypes.c_uint32),
        ('qst_uid', ctypes.c_uint32),
        ('qst_gid', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('qst_rdev', ctypes.c_uint64),
        ('qst_size', ctypes.c_int64),
        ('qst_blksize', ctypes.c_int32),
        ('qst_blocks', ctypes.c_int32),
        ('qst_atime', ctypes.c_uint64),
        ('qst_mtime', ctypes.c_uint64),
        ('qst_ctime', ctypes.c_uint64),
    ]
    
    class struct_reader_t(Structure):
        pass
    
    struct_regarg_t._pack_ = 1 # source:False
    struct_regarg_t._fields_ = [
        ('reg', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('type', ctypes.POINTER(ctypes.c_ubyte)),
        ('name', ctypes.c_char_p),
    ]
    
    struct_regobj_t._pack_ = 1 # source:False
    struct_regobj_t._fields_ = [
        ('regidx', ctypes.c_int32),
        ('relocate', ctypes.c_int32),
        ('value', struct_bytevec_t),
    ]
    
    struct_regvar_t._pack_ = 1 # source:False
    struct_regvar_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('canon', ctypes.c_char_p),
        ('user', ctypes.c_char_p),
        ('cmt', ctypes.c_char_p),
    ]
    
    class struct_relobj_t(Structure):
        pass
    
    struct_relobj_t._pack_ = 1 # source:False
    struct_relobj_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
        ('base', ctypes.c_uint64),
        ('ri', struct_reloc_info_t),
    ]
    
    struct_stkpnt_t._pack_ = 1 # source:False
    struct_stkpnt_t._fields_ = [
        ('ea', ctypes.c_uint64),
        ('spd', ctypes.c_int64),
    ]
    
    class struct_timespec(Structure):
        pass
    
    struct_timespec._pack_ = 1 # source:False
    struct_timespec._fields_ = [
        ('tv_sec', ctypes.c_int64),
        ('tv_nsec', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    struct_tryblk_t._pack_ = 1 # source:False
    struct_tryblk_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
        ('reserve', ctypes.c_char * 72),
        ('cb', ctypes.c_ubyte),
        ('kind', ctypes.c_ubyte),
        ('level', ctypes.c_ubyte),
        ('PADDING_1', ctypes.c_ubyte * 5),
    ]
    
    struct_valstr_t._pack_ = 1 # source:False
    struct_valstr_t._fields_ = [
        ('oneline', qstring),
        ('length', ctypes.c_uint64),
        ('members', ctypes.POINTER(struct_valstrs_t)),
        ('info', ctypes.POINTER(struct_valinfo_t)),
        ('props', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class struct__LDBL12(Structure):
        pass
    
    struct__LDBL12._pack_ = 1 # source:False
    struct__LDBL12._fields_ = [
        ('ld12', ctypes.c_ubyte * 12),
    ]
    
    class struct__ldiv_t(Structure):
        pass
    
    struct__ldiv_t._pack_ = 1 # source:False
    struct__ldiv_t._fields_ = [
        ('quot', ctypes.c_int32),
        ('rem', ctypes.c_int32),
    ]
    
    class struct__stat32(Structure):
        pass
    
    struct__stat32._pack_ = 1 # source:False
    struct__stat32._fields_ = [
        ('st_dev', ctypes.c_uint32),
        ('st_ino', ctypes.c_uint16),
        ('st_mode', ctypes.c_uint16),
        ('st_nlink', ctypes.c_int16),
        ('st_uid', ctypes.c_int16),
        ('st_gid', ctypes.c_int16),
        ('PADDING_0', ctypes.c_ubyte * 2),
        ('st_rdev', ctypes.c_uint32),
        ('st_size', ctypes.c_int32),
        ('st_atime', ctypes.c_int32),
        ('st_mtime', ctypes.c_int32),
        ('st_ctime', ctypes.c_int32),
    ]
    
    class struct__stat64(Structure):
        pass
    
    struct__stat64._pack_ = 1 # source:False
    struct__stat64._fields_ = [
        ('st_dev', ctypes.c_uint32),
        ('st_ino', ctypes.c_uint16),
        ('st_mode', ctypes.c_uint16),
        ('st_nlink', ctypes.c_int16),
        ('st_uid', ctypes.c_int16),
        ('st_gid', ctypes.c_int16),
        ('PADDING_0', ctypes.c_ubyte * 2),
        ('st_rdev', ctypes.c_uint32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('st_size', ctypes.c_int64),
        ('st_atime', ctypes.c_int64),
        ('st_mtime', ctypes.c_int64),
        ('st_ctime', ctypes.c_int64),
    ]
    
    struct_bytes_t._pack_ = 1 # source:False
    struct_bytes_t._fields_ = [
        ('len', ctypes.c_ubyte),
        ('PADDING_0', ctypes.c_ubyte * 7),
        ('bytes', ctypes.POINTER(ctypes.c_ubyte)),
    ]
    
    struct_catch_t._pack_ = 1 # source:False
    struct_catch_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 40),
        ('obj', ctypes.c_int64),
        ('type_id', ctypes.c_int64),
    ]
    
    class struct_dbctx_t(Structure):
        pass
    
    class struct_idainfo(Structure):
        pass
    
    struct_idainfo._pack_ = 1 # source:False
    struct_idainfo._fields_ = [
        ('tag', ctypes.c_char * 3),
        ('zero', ctypes.c_char),
        ('version', ctypes.c_uint16),
        ('procname', ctypes.c_char * 16),
        ('s_genflags', ctypes.c_uint16),
        ('lflags', ctypes.c_uint32),
        ('database_change_count', ctypes.c_uint32),
        ('filetype', ctypes.c_uint16),
        ('ostype', ctypes.c_uint16),
        ('apptype', ctypes.c_uint16),
        ('asmtype', ctypes.c_ubyte),
        ('specsegs', ctypes.c_ubyte),
        ('af', ctypes.c_uint32),
        ('af2', ctypes.c_uint32),
        ('baseaddr', ctypes.c_uint64),
        ('start_ss', ctypes.c_uint64),
        ('start_cs', ctypes.c_uint64),
        ('start_ip', ctypes.c_uint64),
        ('start_ea', ctypes.c_uint64),
        ('start_sp', ctypes.c_uint64),
        ('main', ctypes.c_uint64),
        ('min_ea', ctypes.c_uint64),
        ('max_ea', ctypes.c_uint64),
        ('omin_ea', ctypes.c_uint64),
        ('omax_ea', ctypes.c_uint64),
        ('lowoff', ctypes.c_uint64),
        ('highoff', ctypes.c_uint64),
        ('maxref', ctypes.c_uint64),
        ('privrange', struct_range_t),
        ('netdelta', ctypes.c_int64),
        ('xrefnum', ctypes.c_ubyte),
        ('type_xrefnum', ctypes.c_ubyte),
        ('refcmtnum', ctypes.c_ubyte),
        ('s_xrefflag', ctypes.c_ubyte),
        ('max_autoname_len', ctypes.c_uint16),
        ('nametype', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte),
        ('short_demnames', ctypes.c_uint32),
        ('long_demnames', ctypes.c_uint32),
        ('demnames', ctypes.c_ubyte),
        ('listnames', ctypes.c_ubyte),
        ('indent', ctypes.c_ubyte),
        ('cmt_indent', ctypes.c_ubyte),
        ('margin', ctypes.c_uint16),
        ('lenxref', ctypes.c_uint16),
        ('outflags', ctypes.c_uint32),
        ('s_cmtflg', ctypes.c_ubyte),
        ('s_limiter', ctypes.c_ubyte),
        ('bin_prefix_size', ctypes.c_int16),
        ('s_prefflag', ctypes.c_ubyte),
        ('strlit_flags', ctypes.c_ubyte),
        ('strlit_break', ctypes.c_ubyte),
        ('strlit_zeroes', ctypes.c_char),
        ('strtype', ctypes.c_int32),
        ('strlit_pref', ctypes.c_char * 16),
        ('strlit_sernum', ctypes.c_uint64),
        ('datatypes', ctypes.c_uint64),
        ('cc', struct_compiler_info_t),
        ('PADDING_1', ctypes.c_ubyte * 2),
        ('abibits', ctypes.c_uint32),
        ('appcall_options', ctypes.c_uint32),
        ('padding', ctypes.c_uint32),
    ]
    
    class struct_minsn_t(Structure):
        pass
    
    struct_place_t._pack_ = 1 # source:False
    struct_place_t._fields_ = [
        ('__vftable', ctypes.POINTER(struct_place_t_vtbl)),
        ('lnnum', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    struct_struc_t._pack_ = 1 # source:False
    struct_struc_t._fields_ = [
        ('id', ctypes.c_uint64),
        ('memqty', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('members', ctypes.POINTER(struct_member_t)),
        ('age', ctypes.c_uint16),
        ('PADDING_1', ctypes.c_ubyte * 2),
        ('props', ctypes.c_uint32),
        ('ordinal', ctypes.c_int32),
        ('PADDING_2', ctypes.c_ubyte * 4),
    ]
    
    class union_token_t_0(Union):
        pass
    
    union_token_t_0._pack_ = 1 # source:False
    union_token_t_0._fields_ = [
        ('unicode', ctypes.c_char),
        ('is_unsigned', ctypes.c_char),
    ]
    
    class union_token_t_1(Union):
        pass
    
    union_token_t_1._pack_ = 1 # source:False
    union_token_t_1._fields_ = [
        ('fnum', struct_fpvalue_t),
        ('i64', ctypes.c_int64),
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    struct_token_t._pack_ = 1 # source:False
    struct_token_t._anonymous_ = ('_0', '_1',)
    struct_token_t._fields_ = [
        ('str', qstring),
        ('type', ctypes.c_uint16),
        ('PADDING_0', ctypes.c_ubyte * 6),
        ('num', ctypes.c_int64),
        ('_0', union_token_t_0),
        ('PADDING_1', ctypes.c_ubyte * 7),
        ('_1', union_token_t_1),
    ]
    
    class struct_uint128(Structure):
        pass
    
    struct_uint128._pack_ = 1 # source:False
    struct_uint128._fields_ = [
        ('l', ctypes.c_uint64),
        ('h', ctypes.c_uint64),
    ]
    
    class struct__div_t(Structure):
        pass
    
    struct__div_t._pack_ = 1 # source:False
    struct__div_t._fields_ = [
        ('quot', ctypes.c_int32),
        ('rem', ctypes.c_int32),
    ]
    
    struct__iobuf._pack_ = 1 # source:False
    struct__iobuf._fields_ = [
        ('_Placeholder', ctypes.POINTER(None)),
    ]
    
    class struct_cast_t(Structure):
        pass
    
    struct_cast_t._pack_ = 1 # source:False
    struct_cast_t._fields_ = [
        ('is_unsigned', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 3),
        ('size', ctypes.c_int32),
    ]
    
    class struct_exehdr(Structure):
        pass
    
    struct_exehdr._pack_ = 1 # source:False
    struct_exehdr._fields_ = [
        ('exe_ident', ctypes.c_uint16),
        ('PartPag', ctypes.c_uint16),
        ('PageCnt', ctypes.c_uint16),
        ('ReloCnt', ctypes.c_uint16),
        ('HdrSize', ctypes.c_uint16),
        ('MinMem', ctypes.c_uint16),
        ('MaxMem', ctypes.c_uint16),
        ('ReloSS', ctypes.c_uint16),
        ('ExeSP', ctypes.c_uint16),
        ('ChkSum', ctypes.c_uint16),
        ('ExeIP', ctypes.c_uint16),
        ('ReloCS', ctypes.c_uint16),
        ('TablOff', ctypes.c_uint16),
        ('Overlay', ctypes.c_uint16),
    ]
    
    class union_func_t_0(Union):
        pass
    
    class struct_func_t_0_0(Structure):
        pass
    
    struct_func_t_0_0._pack_ = 1 # source:False
    struct_func_t_0_0._fields_ = [
        ('frame', ctypes.c_uint64),
        ('frsize', ctypes.c_uint64),
        ('frregs', ctypes.c_uint16),
        ('PADDING_0', ctypes.c_ubyte * 6),
        ('argsize', ctypes.c_uint64),
        ('fpd', ctypes.c_uint64),
        ('color', ctypes.c_uint32),
        ('pntqty', ctypes.c_uint32),
        ('points', ctypes.POINTER(struct_stkpnt_t)),
        ('regvarqty', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('regvars', ctypes.POINTER(struct_regvar_t)),
        ('llabelqty', ctypes.c_int32),
        ('PADDING_2', ctypes.c_ubyte * 4),
        ('llabels', ctypes.POINTER(struct_llabel_t)),
        ('regargqty', ctypes.c_int32),
        ('PADDING_3', ctypes.c_ubyte * 4),
        ('regargs', ctypes.POINTER(struct_regarg_t)),
        ('tailqty', ctypes.c_int32),
        ('PADDING_4', ctypes.c_ubyte * 4),
        ('tails', ctypes.POINTER(struct_range_t)),
    ]
    
    class struct_func_t_0_1(Structure):
        pass
    
    struct_func_t_0_1._pack_ = 1 # source:False
    struct_func_t_0_1._fields_ = [
        ('owner', ctypes.c_uint64),
        ('refqty', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('referers', ctypes.POINTER(ctypes.c_uint64)),
    ]
    
    union_func_t_0._pack_ = 1 # source:False
    union_func_t_0._anonymous_ = ('_0', '_1',)
    union_func_t_0._fields_ = [
        ('_0', struct_func_t_0_0),
        ('_1', struct_func_t_0_1),
        ('PADDING_0', ctypes.c_ubyte * 96),
    ]
    
    struct_func_t._pack_ = 1 # source:False
    struct_func_t._anonymous_ = ('_0',)
    struct_func_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 16),
        ('flags', ctypes.c_uint64),
        ('_0', union_func_t_0),
    ]
    
    class struct_int128(Structure):
        pass
    
    struct_int128._pack_ = 1 # source:False
    struct_int128._fields_ = [
        ('l', ctypes.c_uint64),
        ('h', ctypes.c_int64),
    ]
    
    jvalues_t = struct_qvector_jvalue_t_
    struct_jarr_t._pack_ = 1 # source:False
    struct_jarr_t._fields_ = [
        ('values', jvalues_t),
    ]
    
    struct_jobj_t._pack_ = 1 # source:False
    struct_jobj_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 24),
    ]
    
    struct_rect_t._pack_ = 1 # source:False
    struct_rect_t._fields_ = [
        ('left', ctypes.c_int32),
        ('top', ctypes.c_int32),
        ('right', ctypes.c_int32),
        ('bottom', ctypes.c_int32),
    ]
    
    struct_rrel_t._pack_ = 1 # source:False
    struct_rrel_t._fields_ = [
        ('off', ctypes.c_int64),
        ('reg', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    struct_asm_t._pack_ = 1 # source:False
    struct_asm_t._fields_ = [
        ('flag', ctypes.c_uint32),
        ('uflag', ctypes.c_uint16),
        ('PADDING_0', ctypes.c_ubyte * 2),
        ('name', ctypes.c_char_p),
        ('help', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('header', ctypes.POINTER(ctypes.c_char_p)),
        ('origin', ctypes.c_char_p),
        ('end', ctypes.c_char_p),
        ('cmnt', ctypes.c_char_p),
        ('ascsep', ctypes.c_char),
        ('accsep', ctypes.c_char),
        ('PADDING_2', ctypes.c_ubyte * 6),
        ('esccodes', ctypes.c_char_p),
        ('a_ascii', ctypes.c_char_p),
        ('a_byte', ctypes.c_char_p),
        ('a_word', ctypes.c_char_p),
        ('a_dword', ctypes.c_char_p),
        ('a_qword', ctypes.c_char_p),
        ('a_oword', ctypes.c_char_p),
        ('a_float', ctypes.c_char_p),
        ('a_double', ctypes.c_char_p),
        ('a_tbyte', ctypes.c_char_p),
        ('a_packreal', ctypes.c_char_p),
        ('a_dups', ctypes.c_char_p),
        ('a_bss', ctypes.c_char_p),
        ('a_equ', ctypes.c_char_p),
        ('a_seg', ctypes.c_char_p),
        ('a_curip', ctypes.c_char_p),
        ('out_func_header', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_outctx_t), ctypes.POINTER(struct_func_t))),
        ('out_func_footer', ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_outctx_t), ctypes.POINTER(struct_func_t))),
        ('a_public', ctypes.c_char_p),
        ('a_weak', ctypes.c_char_p),
        ('a_extrn', ctypes.c_char_p),
        ('a_comdef', ctypes.c_char_p),
        ('get_type_name', ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(struct__qstring_char_), ctypes.c_uint32, ctypes.c_uint64)),
        ('a_align', ctypes.c_char_p),
        ('lbrace', ctypes.c_char),
        ('rbrace', ctypes.c_char),
        ('PADDING_3', ctypes.c_ubyte * 6),
        ('a_mod', ctypes.c_char_p),
        ('a_band', ctypes.c_char_p),
        ('a_bor', ctypes.c_char_p),
        ('a_xor', ctypes.c_char_p),
        ('a_bnot', ctypes.c_char_p),
        ('a_shl', ctypes.c_char_p),
        ('a_shr', ctypes.c_char_p),
        ('a_sizeof_fmt', ctypes.c_char_p),
        ('flag2', ctypes.c_uint32),
        ('PADDING_4', ctypes.c_ubyte * 4),
        ('cmnt2', ctypes.c_char_p),
        ('low8', ctypes.c_char_p),
        ('high8', ctypes.c_char_p),
        ('low16', ctypes.c_char_p),
        ('high16', ctypes.c_char_p),
        ('a_include_fmt', ctypes.c_char_p),
        ('a_vstruc_fmt', ctypes.c_char_p),
        ('a_rva', ctypes.c_char_p),
        ('a_yword', ctypes.c_char_p),
        ('a_zword', ctypes.c_char_p),
    ]
    
    struct_bpt_t._pack_ = 1 # source:False
    struct_bpt_t._fields_ = [
        ('cb', ctypes.c_uint64),
        ('cndbody', qstring),
        ('loc', struct_bpt_location_t),
        ('pid', ctypes.c_int32),
        ('tid', ctypes.c_int32),
        ('ea', ctypes.c_uint64),
        ('type', ctypes.c_int32),
        ('pass_count', ctypes.c_int32),
        ('flags', ctypes.c_uint32),
        ('props', ctypes.c_uint32),
        ('size', ctypes.c_int32),
        ('cndidx', ctypes.c_int32),
        ('bptid', ctypes.c_uint64),
    ]
    
    class struct_cli_t(Structure):
        pass
    
    struct_cli_t._pack_ = 1 # source:False
    struct_cli_t._fields_ = [
        ('size', ctypes.c_uint64),
        ('flags', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('sname', ctypes.c_char_p),
        ('lname', ctypes.c_char_p),
        ('hint', ctypes.c_char_p),
        ('execute_line', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.c_char_p)),
        ('unused', ctypes.POINTER(None)),
        ('keydown', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct__qstring_char_), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32), ctypes.c_int32)),
        ('find_completions', ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_qvector__qstring_char__), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32), ctypes.c_char_p, ctypes.c_int32)),
    ]
    
    struct_kvp_t._pack_ = 1 # source:False
    struct_kvp_t._fields_ = [
        ('key', qstring),
        ('value', struct_jvalue_t),
    ]
    
    class struct_seh_t(Structure):
        pass
    
    struct_seh_t._pack_ = 1 # source:False
    struct_seh_t._fields_ = [
        ('PADDING_0', ctypes.c_ubyte * 40),
        ('filter', struct_rangevec_t),
        ('seh_code', ctypes.c_uint64),
    ]
    
    struct_til_t._pack_ = 1 # source:False
    struct_til_t._fields_ = [
        ('name', ctypes.c_char_p),
        ('desc', ctypes.c_char_p),
        ('nbases', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('base', ctypes.POINTER(ctypes.POINTER(struct_til_t))),
        ('flags', ctypes.c_uint32),
        ('cc', struct_compiler_info_t),
        ('PADDING_1', ctypes.c_ubyte * 2),
        ('syms', ctypes.POINTER(struct_til_bucket_t)),
        ('types', ctypes.POINTER(struct_til_bucket_t)),
        ('macros', ctypes.POINTER(struct_til_bucket_t)),
        ('nrefs', ctypes.c_int32),
        ('nstreams', ctypes.c_int32),
        ('streams', ctypes.POINTER(ctypes.POINTER(struct_til_stream_t))),
    ]
    
    class struct_stat(Structure):
        pass
    
    struct_stat._pack_ = 1 # source:False
    struct_stat._fields_ = [
        ('st_dev', ctypes.c_uint32),
        ('st_ino', ctypes.c_uint16),
        ('st_mode', ctypes.c_uint16),
        ('st_nlink', ctypes.c_int16),
        ('st_uid', ctypes.c_int16),
        ('st_gid', ctypes.c_int16),
        ('PADDING_0', ctypes.c_ubyte * 2),
        ('st_rdev', ctypes.c_uint32),
        ('st_size', ctypes.c_int32),
        ('st_atime', ctypes.c_int64),
        ('st_mtime', ctypes.c_int64),
        ('st_ctime', ctypes.c_int64),
    ]
    
    class struct_tm(Structure):
        pass
    
    struct_tm._pack_ = 1 # source:False
    struct_tm._fields_ = [
        ('tm_sec', ctypes.c_int32),
        ('tm_min', ctypes.c_int32),
        ('tm_hour', ctypes.c_int32),
        ('tm_mday', ctypes.c_int32),
        ('tm_mon', ctypes.c_int32),
        ('tm_year', ctypes.c_int32),
        ('tm_wday', ctypes.c_int32),
        ('tm_yday', ctypes.c_int32),
        ('tm_isdst', ctypes.c_int32),
    ]
    
    std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___key_type = ctypes.c_uint64
    std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ = ctypes.c_int64
    std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___key_type = ctypes.c_uint64
    std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ = ctypes.c_int64
    std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____ = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__ = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
    std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ = ctypes.c_int64
    std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ = ctypes.c_int64
    std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ = ctypes.c_int64
    std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______ = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ = ctypes.c_int64
    std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____ = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__ = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
    std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__ = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
    std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ = ctypes.c_int64
    std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ = ctypes.c_int64
    std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____ = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___key_type = ctypes.c_int32
    std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___key_type = ctypes.c_uint64
    std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____ = ctypes.c_int64
    std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____ = ctypes.c_int64
    std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____ = ctypes.c_int64
    std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____ = ctypes.POINTER(ctypes.c_int16)
    std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____ = ctypes.POINTER(ctypes.c_int32)
    std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____ = ctypes.POINTER(ctypes.c_int16)
    std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char____ = ctypes.c_int64
    std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____ = ctypes.c_int64
    std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char____ = ctypes.c_char_p
    std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____ = ctypes.POINTER(ctypes.c_int32)
    std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char16_t____ = ctypes.c_int64
    std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char32_t____ = ctypes.c_int64
    std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_wchar_t____ = ctypes.c_int64
    std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char16_t____ = ctypes.POINTER(ctypes.c_int16)
    std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char32_t____ = ctypes.POINTER(ctypes.c_int32)
    std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_wchar_t____ = ctypes.POINTER(ctypes.c_int16)
    std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char____ = ctypes.c_int64
    std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_int__int___void__P__ = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
    std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char____ = ctypes.c_char_p
    std___Tset_traits_int__std__less_int___std__allocator_int___false___value_type = ctypes.c_int32
    std___Tset_traits_int__std__less_int___std__allocator_int___false___key_type = ctypes.c_int32
    qvector_ida_syntax_highlighter_t__keywords_style_t___const_iterator = ctypes.POINTER(struct_ida_syntax_highlighter_t__keywords_style_t)
    qvector_ida_syntax_highlighter_t__plain_char_ptr_t___const_iterator = ctypes.POINTER(struct_ida_syntax_highlighter_t__plain_char_ptr_t)
    std___Rebind_pointer_t_void__P__std___Tree_node_int__void__P__ = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
    qvector_ida_syntax_highlighter_t__keywords_style_t___iterator = ctypes.POINTER(struct_ida_syntax_highlighter_t__keywords_style_t)
    qvector_ida_syntax_highlighter_t__multicmt_t___const_iterator = ctypes.POINTER(struct_ida_syntax_highlighter_t__multicmt_t)
    qvector_ida_syntax_highlighter_t__plain_char_ptr_t___iterator = ctypes.POINTER(struct_ida_syntax_highlighter_t__plain_char_ptr_t)
    std__map_unsigned_long_long__unsigned_long_long___mapped_type = ctypes.c_uint64
    std___Char_traits_unsigned_short__unsigned_short___int_type = ctypes.c_uint16
    std__map_unsigned_long_long__unsigned_long_long___key_type = ctypes.c_uint64
    qvector_line_rendering_output_entry_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_line_rendering_output_entry_t))
    std__integral_constant_unsigned_long_long__0___value_type = ctypes.c_uint64
    qvector_ida_syntax_highlighter_t__multicmt_t___iterator = ctypes.POINTER(struct_ida_syntax_highlighter_t__multicmt_t)
    qvector_qvector_const_twinline_t__P____const_iterator = ctypes.POINTER(struct_qvector_const_twinline_t__P_)
    std___Char_traits_char16_t__unsigned_short___int_type = ctypes.c_uint16
    std___Char_traits_wchar_t__unsigned_short___int_type = ctypes.c_uint16
    qvector_line_rendering_output_entry_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_line_rendering_output_entry_t))
    std___Char_traits_char32_t__unsigned_int___int_type = ctypes.c_uint32
    qvector_qrefcnt_t_source_item_t____const_iterator = ctypes.POINTER(struct_qrefcnt_t_source_item_t_)
    qvector__qstring_unsigned_char____const_iterator = ctypes.POINTER(struct__qstring_unsigned_char_)
    qvector_qvector_const_char__P____const_iterator = ctypes.POINTER(struct_qvector_const_char__P_)
    qvector_qvector_const_twinline_t__P____iterator = ctypes.POINTER(struct_qvector_const_twinline_t__P_)
    std__integral_constant_bool__false___value_type = ctypes.c_char
    std__integral_constant_bool__true___value_type = ctypes.c_char
    std___Narrow_char_traits_char__int___int_type = ctypes.c_int32
    qvector_const_rangeset_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_rangeset_t))
    qvector_const_twinline_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_twinline_t))
    std___WChar_traits_unsigned_short___int_type = ctypes.c_uint16
    qvector_qrefcnt_t_source_item_t____iterator = ctypes.POINTER(struct_qrefcnt_t_source_item_t_)
    qvector_qvector_long_long____const_iterator = ctypes.POINTER(struct_qvector_long_long_)
    qvector_unsigned_long_long___const_iterator = ctypes.POINTER(ctypes.c_uint64)
    _CoreCrtNonSecureSearchSortCompareFunction = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), ctypes.POINTER(None))
    qvector__qstring_unsigned_char____iterator = ctypes.POINTER(struct__qstring_unsigned_char_)
    qvector__qstring_wchar_t____const_iterator = ctypes.POINTER(struct__qstring_wchar_t_)
    qvector_call_stack_info_t___const_iterator = ctypes.POINTER(struct_call_stack_info_t)
    qvector_compiled_binpat_t___const_iterator = ctypes.POINTER(struct_compiled_binpat_t)
    qvector_update_bpt_info_t___const_iterator = ctypes.POINTER(struct_update_bpt_info_t)
    class union_token_t___8299423771E115C2E8FEC5C7170C0424(Union):
        pass
    
    union_token_t___8299423771E115C2E8FEC5C7170C0424._pack_ = 1 # source:False
    union_token_t___8299423771E115C2E8FEC5C7170C0424._fields_ = [
        ('unicode', ctypes.c_char),
        ('is_unsigned', ctypes.c_char),
    ]
    
    qvector_dirtree_cursor_t___const_iterator = ctypes.POINTER(struct_dirtree_cursor_t)
    qvector_exception_info_t___const_iterator = ctypes.POINTER(struct_exception_info_t)
    qvector_qvector_const_char__P____iterator = ctypes.POINTER(struct_qvector_const_char__P_)
    qvector_scattered_segm_t___const_iterator = ctypes.POINTER(struct_scattered_segm_t)
    qvector_segm_move_info_t___const_iterator = ctypes.POINTER(struct_segm_move_info_t)
    qvector_selection_item_t___const_iterator = ctypes.POINTER(struct_selection_item_t)
    qvector_xreflist_entry_t___const_iterator = ctypes.POINTER(struct_xreflist_entry_t)
    std___Tree_node_int__void__P___value_type = ctypes.c_int32
    qvector_channel_redir_t___const_iterator = ctypes.POINTER(struct_channel_redir_t)
    qvector_lochist_entry_t___const_iterator = ctypes.POINTER(struct_lochist_entry_t)
    qvector_register_info_t___const_iterator = ctypes.POINTER(struct_register_info_t)
    qvector_tev_reg_value_t___const_iterator = ctypes.POINTER(struct_tev_reg_value_t)
    std___Simple_types_char16_t___value_type = ctypes.c_int16
    std___Simple_types_char32_t___value_type = ctypes.c_int32
    _CoreCrtSecureSearchSortCompareFunction = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(None))
    _qstring_unsigned_char___const_iterator = ctypes.POINTER(ctypes.c_ubyte)
    qvector__qstring_char____const_iterator = ctypes.POINTER(struct__qstring_char_)
    qvector_const_bpt_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_bpt_t))
    qvector_group_crinfo_t___const_iterator = ctypes.POINTER(struct_group_crinfo_t)
    qvector_process_info_t___const_iterator = ctypes.POINTER(struct_process_info_t)
    qvector_qbasic_block_t___const_iterator = ctypes.POINTER(struct_qbasic_block_t)
    qvector_refinfo_desc_t___const_iterator = ctypes.POINTER(struct_refinfo_desc_t)
    qvector_tev_info_reg_t___const_iterator = ctypes.POINTER(struct_tev_info_reg_t)
    std___Simple_types_wchar_t___value_type = ctypes.c_int16
    std__basic_string_char16_t___value_type = ctypes.c_int16
    std__basic_string_char32_t___value_type = ctypes.c_int32
    qvector_const_char__P___const_iterator = ctypes.POINTER(ctypes.c_char_p)
    qvector_const_rangeset_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_rangeset_t))
    qvector_const_twinline_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_twinline_t))
    qvector_debug_event_t___const_iterator = ctypes.POINTER(struct_debug_event_t)
    qvector_enum_member_t___const_iterator = ctypes.POINTER(struct_enum_member_t)
    qvector_memory_info_t___const_iterator = ctypes.POINTER(struct_memory_info_t)
    qvector_memreg_info_t___const_iterator = ctypes.POINTER(struct_memreg_info_t)
    qvector_movbpt_info_t___const_iterator = ctypes.POINTER(struct_movbpt_info_t)
    qvector_snapshot_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_snapshot_t))
    qvector_sync_source_t___const_iterator = ctypes.POINTER(struct_sync_source_t)
    qvector_thread_name_t___const_iterator = ctypes.POINTER(struct_thread_name_t)
    qvector_unsigned_char___const_iterator = ctypes.POINTER(ctypes.c_ubyte)
    std___Char_traits_char__int___int_type = ctypes.c_int32
    std___Rand_urng_from_func__result_type = ctypes.c_uint32
    std___WChar_traits_char16_t___int_type = ctypes.c_uint16
    std__basic_string_wchar_t___value_type = ctypes.c_int16
    qvector_cfgopt_set_t___const_iterator = ctypes.POINTER(struct_cfgopt_set_t)
    qvector_extlang_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_extlang_t))
    qvector_fixup_info_t___const_iterator = ctypes.POINTER(struct_fixup_info_t)
    qvector_idc_global_t___const_iterator = ctypes.POINTER(struct_idc_global_t)
    qvector_ioport_bit_t___const_iterator = ctypes.POINTER(struct_ioport_bit_t)
    qvector_qvector_int____const_iterator = ctypes.POINTER(struct_qvector_int_)
    qvector_qvector_long_long____iterator = ctypes.POINTER(struct_qvector_long_long_)
    qvector_reg_access_t___const_iterator = ctypes.POINTER(struct_reg_access_t)
    qvector_simpleline_t___const_iterator = ctypes.POINTER(struct_simpleline_t)
    qvector_udt_member_t___const_iterator = ctypes.POINTER(struct_udt_member_t)
    qvector_unsigned_int___const_iterator = ctypes.POINTER(ctypes.c_uint32)
    qvector_unsigned_long_long___iterator = ctypes.POINTER(ctypes.c_uint64)
    std___WChar_traits_wchar_t___int_type = ctypes.c_uint16
    qvector__qstring_wchar_t____iterator = ctypes.POINTER(struct__qstring_wchar_t_)
    qvector_call_stack_info_t___iterator = ctypes.POINTER(struct_call_stack_info_t)
    qvector_compiled_binpat_t___iterator = ctypes.POINTER(struct_compiled_binpat_t)
    qvector_simd_info_t___const_iterator = ctypes.POINTER(struct_simd_info_t)
    qvector_type_attr_t___const_iterator = ctypes.POINTER(struct_type_attr_t)
    qvector_update_bpt_info_t___iterator = ctypes.POINTER(struct_update_bpt_info_t)
    std___Simple_types_char___value_type = ctypes.c_char
    qvector_bptaddrs_t___const_iterator = ctypes.POINTER(struct_bptaddrs_t)
    qvector_direntry_t___const_iterator = ctypes.POINTER(struct_direntry_t)
    qvector_dirtree_cursor_t___iterator = ctypes.POINTER(struct_dirtree_cursor_t)
    qvector_exception_info_t___iterator = ctypes.POINTER(struct_exception_info_t)
    qvector_idp_desc_t___const_iterator = ctypes.POINTER(struct_idp_desc_t)
    qvector_idp_name_t___const_iterator = ctypes.POINTER(struct_idp_name_t)
    qvector_node_set_t___const_iterator = ctypes.POINTER(struct_node_set_t)
    qvector_rangeset_t___const_iterator = ctypes.POINTER(struct_rangeset_t)
    qvector_reg_info_t___const_iterator = ctypes.POINTER(struct_reg_info_t)
    qvector_row_info_t___const_iterator = ctypes.POINTER(struct_row_info_t)
    qvector_scattered_segm_t___iterator = ctypes.POINTER(struct_scattered_segm_t)
    qvector_segm_move_info_t___iterator = ctypes.POINTER(struct_segm_move_info_t)
    qvector_selection_item_t___iterator = ctypes.POINTER(struct_selection_item_t)
    qvector_tev_info_t___const_iterator = ctypes.POINTER(struct_tev_info_t)
    qvector_twinline_t___const_iterator = ctypes.POINTER(struct_twinline_t)
    qvector_xreflist_entry_t___iterator = ctypes.POINTER(struct_xreflist_entry_t)
    std___Simple_types_int___value_type = ctypes.c_int32
    std___WChar_traits__Elem___int_type = ctypes.c_uint16
    std__basic_string_char___value_type = ctypes.c_char
    qvector_argpart_t___const_iterator = ctypes.POINTER(struct_argpart_t)
    qvector_channel_redir_t___iterator = ctypes.POINTER(struct_channel_redir_t)
    qvector_ea_name_t___const_iterator = ctypes.POINTER(struct_ea_name_t)
    qvector_funcarg_t___const_iterator = ctypes.POINTER(struct_funcarg_t)
    qvector_lochist_entry_t___iterator = ctypes.POINTER(struct_lochist_entry_t)
    qvector_long_long___const_iterator = ctypes.POINTER(ctypes.c_int64)
    qvector_modinfo_t___const_iterator = ctypes.POINTER(struct_modinfo_t)
    qvector_register_info_t___iterator = ctypes.POINTER(struct_register_info_t)
    qvector_tev_reg_value_t___iterator = ctypes.POINTER(struct_tev_reg_value_t)
    
    # values for enumeration '_7014156F94AE1B7FC5F5E3560392A8C4'
    _7014156F94AE1B7FC5F5E3560392A8C4__enumvalues = {
        0: 'DTN_FULL_NAME',
        1: 'DTN_DISPLAY_NAME',
    }
    DTN_FULL_NAME = 0
    DTN_DISPLAY_NAME = 1
    _7014156F94AE1B7FC5F5E3560392A8C4 = ctypes.c_uint32 # enum
    
    # values for enumeration '_94D4D585A38CDA12BD4A7F760DAFD340'
    _94D4D585A38CDA12BD4A7F760DAFD340__enumvalues = {
        0: 'JT_NONE',
        1: 'JT_SWITCH',
        2: 'JT_CALL',
    }
    JT_NONE = 0
    JT_SWITCH = 1
    JT_CALL = 2
    _94D4D585A38CDA12BD4A7F760DAFD340 = ctypes.c_uint32 # enum
    
    # values for enumeration '_A32948CF266C727D9CC1D79F2B35CC28'
    _A32948CF266C727D9CC1D79F2B35CC28__enumvalues = {
        1: 'QMOVE_CROSS_FS',
        2: 'QMOVE_OVERWRITE',
        4: 'QMOVE_OVR_RO',
    }
    QMOVE_CROSS_FS = 1
    QMOVE_OVERWRITE = 2
    QMOVE_OVR_RO = 4
    _A32948CF266C727D9CC1D79F2B35CC28 = ctypes.c_uint32 # enum
    
    # values for enumeration '_C7C212E52085C0E483DB7F2B4EDAB218'
    _C7C212E52085C0E483DB7F2B4EDAB218__enumvalues = {
        1: 'REG_ASSERT',
        2: 'REG_BADBR',
        3: 'REG_BADPAT',
        4: 'REG_BADRPT',
        5: 'REG_EBRACE',
        6: 'REG_EBRACK',
        7: 'REG_ECOLLATE',
        8: 'REG_ECTYPE',
        9: 'REG_EESCAPE',
        10: 'REG_EMPTY',
        11: 'REG_EPAREN',
        12: 'REG_ERANGE',
        13: 'REG_ESIZE',
        14: 'REG_ESPACE',
        15: 'REG_ESUBREG',
        16: 'REG_INVARG',
        17: 'REG_NOMATCH',
    }
    REG_ASSERT = 1
    REG_BADBR = 2
    REG_BADPAT = 3
    REG_BADRPT = 4
    REG_EBRACE = 5
    REG_EBRACK = 6
    REG_ECOLLATE = 7
    REG_ECTYPE = 8
    REG_EESCAPE = 9
    REG_EMPTY = 10
    REG_EPAREN = 11
    REG_ERANGE = 12
    REG_ESIZE = 13
    REG_ESPACE = 14
    REG_ESUBREG = 15
    REG_INVARG = 16
    REG_NOMATCH = 17
    _C7C212E52085C0E483DB7F2B4EDAB218 = ctypes.c_uint32 # enum
    _qstring_unsigned_char___iterator = ctypes.POINTER(ctypes.c_ubyte)
    _qstring_wchar_t___const_iterator = ctypes.POINTER(ctypes.c_int16)
    qvector__qstring_char____iterator = ctypes.POINTER(struct__qstring_char_)
    qvector_argloc_t___const_iterator = ctypes.POINTER(struct_argloc_t)
    qvector_bpt_t__P___const_iterator = ctypes.POINTER(ctypes.POINTER(struct_bpt_t))
    qvector_cliopt_t___const_iterator = ctypes.POINTER(struct_cliopt_t)
    qvector_const_bpt_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_bpt_t))
    qvector_group_crinfo_t___iterator = ctypes.POINTER(struct_group_crinfo_t)
    qvector_intmap_t___const_iterator = ctypes.POINTER(struct_intmap_t)
    qvector_ioport_t___const_iterator = ctypes.POINTER(struct_ioport_t)
    qvector_jvalue_t___const_iterator = ctypes.POINTER(struct_jvalue_t)
    qvector_lowcnd_t___const_iterator = ctypes.POINTER(struct_lowcnd_t)
    qvector_process_info_t___iterator = ctypes.POINTER(struct_process_info_t)
    qvector_qbasic_block_t___iterator = ctypes.POINTER(struct_qbasic_block_t)
    qvector_refinfo_desc_t___iterator = ctypes.POINTER(struct_refinfo_desc_t)
    qvector_regobj_t___const_iterator = ctypes.POINTER(struct_regobj_t)
    qvector_regval_t___const_iterator = ctypes.POINTER(struct_regval_t)
    qvector_stkpnt_t___const_iterator = ctypes.POINTER(struct_stkpnt_t)
    qvector_tev_info_reg_t___iterator = ctypes.POINTER(struct_tev_info_reg_t)
    qvector_tryblk_t___const_iterator = ctypes.POINTER(struct_tryblk_t)
    qvector_valstr_t___const_iterator = ctypes.POINTER(struct_valstr_t)
    custom_viewer_get_place_xcoord_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_place_t), ctypes.POINTER(struct_place_t), ctypes.POINTER(None))
    custom_viewer_location_changed_t = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_locchange_md_t), ctypes.POINTER(None))
    qvector_catch_t___const_iterator = ctypes.POINTER(struct_catch_t)
    qvector_const_char__P___iterator = ctypes.POINTER(ctypes.c_char_p)
    qvector_debug_event_t___iterator = ctypes.POINTER(struct_debug_event_t)
    qvector_enum_member_t___iterator = ctypes.POINTER(struct_enum_member_t)
    qvector_memory_info_t___iterator = ctypes.POINTER(struct_memory_info_t)
    qvector_memreg_info_t___iterator = ctypes.POINTER(struct_memreg_info_t)
    qvector_movbpt_info_t___iterator = ctypes.POINTER(struct_movbpt_info_t)
    qvector_point_t___const_iterator = ctypes.POINTER(struct_point_t)
    qvector_range_t___const_iterator = ctypes.POINTER(struct_range_t)
    qvector_snapshot_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_snapshot_t))
    qvector_sync_source_t___iterator = ctypes.POINTER(struct_sync_source_t)
    qvector_thread_name_t___iterator = ctypes.POINTER(struct_thread_name_t)
    qvector_tinfo_t___const_iterator = ctypes.POINTER(struct_tinfo_t)
    qvector_token_t___const_iterator = ctypes.POINTER(struct_token_t)
    qvector_unsigned_char___iterator = ctypes.POINTER(ctypes.c_ubyte)
    qvector_wchar_t___const_iterator = ctypes.POINTER(ctypes.c_int16)
    qvector_cfgopt_set_t___iterator = ctypes.POINTER(struct_cfgopt_set_t)
    qvector_edge_t___const_iterator = ctypes.POINTER(struct_edge_t)
    qvector_extlang_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_extlang_t))
    qvector_fixup_info_t___iterator = ctypes.POINTER(struct_fixup_info_t)
    qvector_idc_global_t___iterator = ctypes.POINTER(struct_idc_global_t)
    qvector_ioport_bit_t___iterator = ctypes.POINTER(struct_ioport_bit_t)
    qvector_qvector_int____iterator = ctypes.POINTER(struct_qvector_int_)
    qvector_rect_t___const_iterator = ctypes.POINTER(struct_rect_t)
    qvector_reg_access_t___iterator = ctypes.POINTER(struct_reg_access_t)
    qvector_simpleline_t___iterator = ctypes.POINTER(struct_simpleline_t)
    qvector_udt_member_t___iterator = ctypes.POINTER(struct_udt_member_t)
    qvector_unsigned_int___iterator = ctypes.POINTER(ctypes.c_uint32)
    std__map_int__int___mapped_type = ctypes.c_int32
    _qstring_char___const_iterator = ctypes.c_char_p
    qvector_bpt_t___const_iterator = ctypes.POINTER(struct_bpt_t)
    qvector_kvp_t___const_iterator = ctypes.POINTER(struct_kvp_t)
    qvector_simd_info_t___iterator = ctypes.POINTER(struct_simd_info_t)
    qvector_type_attr_t___iterator = ctypes.POINTER(struct_type_attr_t)
    qvector_bool___const_iterator = ctypes.c_char_p
    qvector_bptaddrs_t___iterator = ctypes.POINTER(struct_bptaddrs_t)
    qvector_char___const_iterator = ctypes.c_char_p
    qvector_direntry_t___iterator = ctypes.POINTER(struct_direntry_t)
    qvector_idp_desc_t___iterator = ctypes.POINTER(struct_idp_desc_t)
    qvector_idp_name_t___iterator = ctypes.POINTER(struct_idp_name_t)
    qvector_node_set_t___iterator = ctypes.POINTER(struct_node_set_t)
    qvector_op_t___const_iterator = ctypes.POINTER(struct_op_t)
    qvector_rangeset_t___iterator = ctypes.POINTER(struct_rangeset_t)
    qvector_reg_info_t___iterator = ctypes.POINTER(struct_reg_info_t)
    qvector_row_info_t___iterator = ctypes.POINTER(struct_row_info_t)
    qvector_tev_info_t___iterator = ctypes.POINTER(struct_tev_info_t)
    qvector_twinline_t___iterator = ctypes.POINTER(struct_twinline_t)
    custom_viewer_adjust_place_t = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(None))
    custom_viewer_can_navigate_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_locchange_md_t), ctypes.POINTER(None))
    
    # values for enumeration 'hexplace_gen_t__int_format_t'
    hexplace_gen_t__int_format_t__enumvalues = {
        0: 'if_hex',
        1: 'if_signed',
        2: 'if_unsigned',
    }
    if_hex = 0
    if_signed = 1
    if_unsigned = 2
    hexplace_gen_t__int_format_t = ctypes.c_uint32 # enum
    processor_t__regval_getter_t = ctypes.CFUNCTYPE(ctypes.POINTER(struct_regval_t), ctypes.c_char_p, ctypes.POINTER(struct_regval_t))
    qvector_argpart_t___iterator = ctypes.POINTER(struct_argpart_t)
    qvector_ea_name_t___iterator = ctypes.POINTER(struct_ea_name_t)
    qvector_funcarg_t___iterator = ctypes.POINTER(struct_funcarg_t)
    qvector_int___const_iterator = ctypes.POINTER(ctypes.c_int32)
    qvector_long_long___iterator = ctypes.POINTER(ctypes.c_int64)
    qvector_modinfo_t___iterator = ctypes.POINTER(struct_modinfo_t)
    std__map_int__int___key_type = ctypes.c_int32
    _qstring_wchar_t___iterator = ctypes.POINTER(ctypes.c_int16)
    custom_viewer_mouse_moved_t = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.POINTER(struct_view_mouse_event_t), ctypes.POINTER(None))
    
    # values for enumeration 'hexplace_gen_t__byte_kind_t'
    hexplace_gen_t__byte_kind_t__enumvalues = {
        0: 'BK_VALID',
        1: 'BK_INVALIDADDR',
        2: 'BK_NOVALUE',
    }
    BK_VALID = 0
    BK_INVALIDADDR = 1
    BK_NOVALUE = 2
    hexplace_gen_t__byte_kind_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'hexplace_gen_t__data_kind_t'
    hexplace_gen_t__data_kind_t__enumvalues = {
        0: 'dk_float',
        1: 'dk_int',
        2: 'dk_addr_names',
        3: 'dk_addr_text',
    }
    dk_float = 0
    dk_int = 1
    dk_addr_names = 2
    dk_addr_text = 3
    hexplace_gen_t__data_kind_t = ctypes.c_uint32 # enum
    qvector_argloc_t___iterator = ctypes.POINTER(struct_argloc_t)
    qvector_bpt_t__P___iterator = ctypes.POINTER(ctypes.POINTER(struct_bpt_t))
    qvector_cliopt_t___iterator = ctypes.POINTER(struct_cliopt_t)
    qvector_intmap_t___iterator = ctypes.POINTER(struct_intmap_t)
    qvector_ioport_t___iterator = ctypes.POINTER(struct_ioport_t)
    qvector_jvalue_t___iterator = ctypes.POINTER(struct_jvalue_t)
    qvector_lowcnd_t___iterator = ctypes.POINTER(struct_lowcnd_t)
    qvector_regobj_t___iterator = ctypes.POINTER(struct_regobj_t)
    qvector_regval_t___iterator = ctypes.POINTER(struct_regval_t)
    qvector_stkpnt_t___iterator = ctypes.POINTER(struct_stkpnt_t)
    qvector_tryblk_t___iterator = ctypes.POINTER(struct_tryblk_t)
    qvector_valstr_t___iterator = ctypes.POINTER(struct_valstr_t)
    cliopts_t__usage_printer_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_char_p)
    
    # values for enumeration 'custom_viewer_handler_id_t'
    custom_viewer_handler_id_t__enumvalues = {
        0: 'CVH_USERDATA',
        1: 'CVH_KEYDOWN',
        2: 'CVH_POPUP',
        3: 'CVH_DBLCLICK',
        4: 'CVH_CURPOS',
        5: 'CVH_CLOSE',
        6: 'CVH_CLICK',
        7: 'CVH_QT_AWARE',
        8: 'CVH_HELP',
        9: 'CVH_MOUSEMOVE',
        1000: 'CDVH_USERDATA',
        1001: 'CDVH_SRCVIEW',
        1002: 'CDVH_LINES_CLICK',
        1003: 'CDVH_LINES_DBLCLICK',
        1004: 'CDVH_LINES_POPUP',
        1005: 'CDVH_LINES_DRAWICON',
        1006: 'CDVH_LINES_LINENUM',
        1007: 'CDVH_LINES_ICONMARGIN',
        1008: 'CDVH_LINES_RADIX',
        1009: 'CDVH_LINES_ALIGNMENT',
    }
    CVH_USERDATA = 0
    CVH_KEYDOWN = 1
    CVH_POPUP = 2
    CVH_DBLCLICK = 3
    CVH_CURPOS = 4
    CVH_CLOSE = 5
    CVH_CLICK = 6
    CVH_QT_AWARE = 7
    CVH_HELP = 8
    CVH_MOUSEMOVE = 9
    CDVH_USERDATA = 1000
    CDVH_SRCVIEW = 1001
    CDVH_LINES_CLICK = 1002
    CDVH_LINES_DBLCLICK = 1003
    CDVH_LINES_POPUP = 1004
    CDVH_LINES_DRAWICON = 1005
    CDVH_LINES_LINENUM = 1006
    CDVH_LINES_ICONMARGIN = 1007
    CDVH_LINES_RADIX = 1008
    CDVH_LINES_ALIGNMENT = 1009
    custom_viewer_handler_id_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'encoder_t__notify_recerr_t'
    encoder_t__notify_recerr_t__enumvalues = {
        0: 'nr_none',
        1: 'nr_once',
    }
    nr_none = 0
    nr_once = 1
    encoder_t__notify_recerr_t = ctypes.c_uint32 # enum
    qvector_catch_t___iterator = ctypes.POINTER(struct_catch_t)
    qvector_point_t___iterator = ctypes.POINTER(struct_point_t)
    qvector_range_t___iterator = ctypes.POINTER(struct_range_t)
    qvector_tinfo_t___iterator = ctypes.POINTER(struct_tinfo_t)
    qvector_token_t___iterator = ctypes.POINTER(struct_token_t)
    qvector_wchar_t___iterator = ctypes.POINTER(ctypes.c_int16)
    code_viewer_lines_click_t = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_place_t), ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(None))
    qvector_edge_t___iterator = ctypes.POINTER(struct_edge_t)
    qvector_rect_t___iterator = ctypes.POINTER(struct_rect_t)
    _qstring_char___iterator = ctypes.c_char_p
    code_viewer_lines_icon_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_place_t), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(None))
    custom_viewer_dblclick_t = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.POINTER(None))
    
    # values for enumeration 'form_actions_t__dlgbtn_t'
    form_actions_t__dlgbtn_t__enumvalues = {
        0: 'dbt_yes',
        1: 'dbt_cancel',
        2: 'dbt_no',
    }
    dbt_yes = 0
    dbt_cancel = 1
    dbt_no = 2
    form_actions_t__dlgbtn_t = ctypes.c_uint32 # enum
    qvector_bpt_t___iterator = ctypes.POINTER(struct_bpt_t)
    qvector_kvp_t___iterator = ctypes.POINTER(struct_kvp_t)
    _se_translator_function = ctypes.CFUNCTYPE(None, ctypes.c_uint32, ctypes.POINTER(struct__EXCEPTION_POINTERS))
    custom_viewer_keydown_t = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(None))
    
    # values for enumeration 'idb_event__event_code_t'
    idb_event__event_code_t__enumvalues = {
        0: 'closebase',
        1: 'savebase',
        2: 'upgraded',
        3: 'auto_empty',
        4: 'auto_empty_finally',
        5: 'determined_main',
        6: 'local_types_changed',
        7: 'extlang_changed',
        8: 'idasgn_loaded',
        9: 'kernel_config_loaded',
        10: 'loader_finished',
        11: 'flow_chart_created',
        12: 'compiler_changed',
        13: 'changing_ti',
        14: 'ti_changed',
        15: 'changing_op_ti',
        16: 'op_ti_changed',
        17: 'changing_op_type',
        18: 'op_type_changed',
        19: 'enum_created',
        20: 'deleting_enum',
        21: 'enum_deleted',
        22: 'renaming_enum',
        23: 'enum_renamed',
        24: 'changing_enum_bf',
        25: 'enum_bf_changed',
        26: 'changing_enum_cmt',
        27: 'enum_cmt_changed',
        28: 'enum_member_created',
        29: 'deleting_enum_member',
        30: 'enum_member_deleted',
        31: 'struc_created',
        32: 'deleting_struc',
        33: 'struc_deleted',
        34: 'changing_struc_align',
        35: 'struc_align_changed',
        36: 'renaming_struc',
        37: 'struc_renamed',
        38: 'expanding_struc',
        39: 'struc_expanded',
        40: 'struc_member_created',
        41: 'deleting_struc_member',
        42: 'struc_member_deleted',
        43: 'renaming_struc_member',
        44: 'struc_member_renamed',
        45: 'changing_struc_member',
        46: 'struc_member_changed',
        47: 'changing_struc_cmt',
        48: 'struc_cmt_changed',
        49: 'segm_added',
        50: 'deleting_segm',
        51: 'segm_deleted',
        52: 'changing_segm_start',
        53: 'segm_start_changed',
        54: 'changing_segm_end',
        55: 'segm_end_changed',
        56: 'changing_segm_name',
        57: 'segm_name_changed',
        58: 'changing_segm_class',
        59: 'segm_class_changed',
        60: 'segm_attrs_updated',
        61: 'segm_moved',
        62: 'allsegs_moved',
        63: 'func_added',
        64: 'func_updated',
        65: 'set_func_start',
        66: 'set_func_end',
        67: 'deleting_func',
        68: 'frame_deleted',
        69: 'thunk_func_created',
        70: 'func_tail_appended',
        71: 'deleting_func_tail',
        72: 'func_tail_deleted',
        73: 'tail_owner_changed',
        74: 'func_noret_changed',
        75: 'stkpnts_changed',
        76: 'updating_tryblks',
        77: 'tryblks_updated',
        78: 'deleting_tryblks',
        79: 'sgr_changed',
        80: 'make_code',
        81: 'make_data',
        82: 'destroyed_items',
        83: 'renamed',
        84: 'byte_patched',
        85: 'changing_cmt',
        86: 'cmt_changed',
        87: 'changing_range_cmt',
        88: 'range_cmt_changed',
        89: 'extra_cmt_changed',
        90: 'item_color_changed',
        91: 'callee_addr_changed',
        92: 'bookmark_changed',
        93: 'sgr_deleted',
        94: 'adding_segm',
        95: 'func_deleted',
        96: 'dirtree_mkdir',
        97: 'dirtree_rmdir',
        98: 'dirtree_link',
        99: 'dirtree_move',
        100: 'dirtree_rank',
        101: 'dirtree_rminode',
        102: 'dirtree_segm_moved',
        103: 'enum_width_changed',
        104: 'enum_flag_changed',
        105: 'enum_ordinal_changed',
    }
    closebase = 0
    savebase = 1
    upgraded = 2
    auto_empty = 3
    auto_empty_finally = 4
    determined_main = 5
    local_types_changed = 6
    extlang_changed = 7
    idasgn_loaded = 8
    kernel_config_loaded = 9
    loader_finished = 10
    flow_chart_created = 11
    compiler_changed = 12
    changing_ti = 13
    ti_changed = 14
    changing_op_ti = 15
    op_ti_changed = 16
    changing_op_type = 17
    op_type_changed = 18
    enum_created = 19
    deleting_enum = 20
    enum_deleted = 21
    renaming_enum = 22
    enum_renamed = 23
    changing_enum_bf = 24
    enum_bf_changed = 25
    changing_enum_cmt = 26
    enum_cmt_changed = 27
    enum_member_created = 28
    deleting_enum_member = 29
    enum_member_deleted = 30
    struc_created = 31
    deleting_struc = 32
    struc_deleted = 33
    changing_struc_align = 34
    struc_align_changed = 35
    renaming_struc = 36
    struc_renamed = 37
    expanding_struc = 38
    struc_expanded = 39
    struc_member_created = 40
    deleting_struc_member = 41
    struc_member_deleted = 42
    renaming_struc_member = 43
    struc_member_renamed = 44
    changing_struc_member = 45
    struc_member_changed = 46
    changing_struc_cmt = 47
    struc_cmt_changed = 48
    segm_added = 49
    deleting_segm = 50
    segm_deleted = 51
    changing_segm_start = 52
    segm_start_changed = 53
    changing_segm_end = 54
    segm_end_changed = 55
    changing_segm_name = 56
    segm_name_changed = 57
    changing_segm_class = 58
    segm_class_changed = 59
    segm_attrs_updated = 60
    segm_moved = 61
    allsegs_moved = 62
    func_added = 63
    func_updated = 64
    set_func_start = 65
    set_func_end = 66
    deleting_func = 67
    frame_deleted = 68
    thunk_func_created = 69
    func_tail_appended = 70
    deleting_func_tail = 71
    func_tail_deleted = 72
    tail_owner_changed = 73
    func_noret_changed = 74
    stkpnts_changed = 75
    updating_tryblks = 76
    tryblks_updated = 77
    deleting_tryblks = 78
    sgr_changed = 79
    make_code = 80
    make_data = 81
    destroyed_items = 82
    renamed = 83
    byte_patched = 84
    changing_cmt = 85
    cmt_changed = 86
    changing_range_cmt = 87
    range_cmt_changed = 88
    extra_cmt_changed = 89
    item_color_changed = 90
    callee_addr_changed = 91
    bookmark_changed = 92
    sgr_deleted = 93
    adding_segm = 94
    func_deleted = 95
    dirtree_mkdir = 96
    dirtree_rmdir = 97
    dirtree_link = 98
    dirtree_move = 99
    dirtree_rank = 100
    dirtree_rminode = 101
    dirtree_segm_moved = 102
    enum_width_changed = 103
    enum_flag_changed = 104
    enum_ordinal_changed = 105
    idb_event__event_code_t = ctypes.c_uint32 # enum
    input_event_modifiers_t = ctypes.c_int32
    qvector_bool___iterator = ctypes.c_char_p
    qvector_char___iterator = ctypes.c_char_p
    qvector_op_t___iterator = ctypes.POINTER(struct_op_t)
    
    # values for enumeration 'std__float_denorm_style'
    std__float_denorm_style__enumvalues = {
        4294967295: 'denorm_indeterminate',
        0: 'denorm_absent',
        1: 'denorm_present',
    }
    denorm_indeterminate = 4294967295
    denorm_absent = 0
    denorm_present = 1
    std__float_denorm_style = ctypes.c_uint32 # enum
    custom_viewer_curpos_t = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))
    qvector_int___iterator = ctypes.POINTER(ctypes.c_int32)
    std___Atomic_counter_t = ctypes.c_uint32
    
    # values for enumeration 'std___Invoker_strategy'
    std___Invoker_strategy__enumvalues = {
        0: '_Functor',
        1: '_Pmf_object',
        2: '_Pmf_refwrap',
        3: '_Pmf_pointer',
        4: '_Pmd_object',
        5: '_Pmd_refwrap',
        6: '_Pmd_pointer',
    }
    _Functor = 0
    _Pmf_object = 1
    _Pmf_refwrap = 2
    _Pmf_pointer = 3
    _Pmd_object = 4
    _Pmd_refwrap = 5
    _Pmd_pointer = 6
    std___Invoker_strategy = ctypes.c_uint32 # enum
    
    # values for enumeration 'std__float_round_style'
    std__float_round_style__enumvalues = {
        4294967295: 'round_indeterminate',
        0: 'round_toward_zero',
        1: 'round_to_nearest',
        2: 'round_toward_infinity',
        3: 'round_toward_neg_infinity',
    }
    round_indeterminate = 4294967295
    round_toward_zero = 0
    round_to_nearest = 1
    round_toward_infinity = 2
    round_toward_neg_infinity = 3
    std__float_round_style = ctypes.c_uint32 # enum
    cliopt_poly_handler_t = ctypes.CFUNCTYPE(None, ctypes.c_int32, ctypes.POINTER(ctypes.c_char_p), ctypes.POINTER(None))
    custom_viewer_click_t = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.POINTER(None))
    custom_viewer_close_t = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))
    custom_viewer_popup_t = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))
    custom_viewer_help_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_TWidget), ctypes.POINTER(None))
    
    # values for enumeration 'graph_notification_t'
    graph_notification_t__enumvalues = {
        0: 'grcode_calculating_layout',
        1: 'grcode_layout_calculated',
        2: 'grcode_changed_graph',
        3: 'grcode_reserved',
        4: 'grcode_clicked',
        5: 'grcode_dblclicked',
        6: 'grcode_creating_group',
        7: 'grcode_deleting_group',
        8: 'grcode_group_visibility',
        9: 'grcode_gotfocus',
        10: 'grcode_lostfocus',
        11: 'grcode_user_refresh',
        12: 'grcode_reserved2',
        13: 'grcode_user_text',
        14: 'grcode_user_size',
        15: 'grcode_user_title',
        16: 'grcode_user_draw',
        17: 'grcode_user_hint',
        18: 'grcode_destroyed',
        256: 'grcode_create_graph_viewer',
        257: 'grcode_get_graph_viewer',
        258: 'grcode_get_viewer_graph',
        259: 'grcode_create_mutable_graph',
        260: 'grcode_set_viewer_graph',
        261: 'grcode_refresh_viewer',
        262: 'grcode_fit_window',
        263: 'grcode_get_curnode',
        264: 'grcode_center_on',
        265: 'grcode_get_selection',
        266: 'grcode_del_custom_layout',
        267: 'grcode_set_custom_layout',
        268: 'grcode_set_graph_groups',
        269: 'grcode_clear',
        270: 'grcode_create_digraph_layout',
        271: 'grcode_create_tree_layout',
        272: 'grcode_create_circle_layout',
        273: 'grcode_get_node_representative',
        274: 'grcode_find_subgraph_node',
        275: 'grcode_create_group',
        276: 'grcode_get_custom_layout',
        277: 'grcode_get_graph_groups',
        278: 'grcode_empty',
        279: 'grcode_is_visible_node',
        280: 'grcode_delete_group',
        281: 'grcode_change_group_visibility',
        282: 'grcode_set_edge',
        283: 'grcode_node_qty',
        284: 'grcode_nrect',
        285: 'grcode_set_titlebar_height',
        286: 'grcode_create_user_graph_place',
        287: 'grcode_create_disasm_graph1',
        288: 'grcode_create_disasm_graph2',
        289: 'grcode_set_node_info',
        290: 'grcode_get_node_info',
        291: 'grcode_del_node_info',
        292: 'grcode_viewer_create_groups',
        293: 'grcode_viewer_delete_groups',
        294: 'grcode_viewer_groups_visibility',
        295: 'grcode_viewer_create_groups_vec',
        296: 'grcode_viewer_delete_groups_vec',
        297: 'grcode_viewer_groups_visibility_vec',
        298: 'grcode_delete_mutable_graph',
        299: 'grcode_edge_infos_wrapper_copy',
        300: 'grcode_edge_infos_wrapper_clear',
        301: 'grcode_attach_menu_item',
        302: 'grcode_set_gli',
        303: 'grcode_get_gli',
    }
    grcode_calculating_layout = 0
    grcode_layout_calculated = 1
    grcode_changed_graph = 2
    grcode_reserved = 3
    grcode_clicked = 4
    grcode_dblclicked = 5
    grcode_creating_group = 6
    grcode_deleting_group = 7
    grcode_group_visibility = 8
    grcode_gotfocus = 9
    grcode_lostfocus = 10
    grcode_user_refresh = 11
    grcode_reserved2 = 12
    grcode_user_text = 13
    grcode_user_size = 14
    grcode_user_title = 15
    grcode_user_draw = 16
    grcode_user_hint = 17
    grcode_destroyed = 18
    grcode_create_graph_viewer = 256
    grcode_get_graph_viewer = 257
    grcode_get_viewer_graph = 258
    grcode_create_mutable_graph = 259
    grcode_set_viewer_graph = 260
    grcode_refresh_viewer = 261
    grcode_fit_window = 262
    grcode_get_curnode = 263
    grcode_center_on = 264
    grcode_get_selection = 265
    grcode_del_custom_layout = 266
    grcode_set_custom_layout = 267
    grcode_set_graph_groups = 268
    grcode_clear = 269
    grcode_create_digraph_layout = 270
    grcode_create_tree_layout = 271
    grcode_create_circle_layout = 272
    grcode_get_node_representative = 273
    grcode_find_subgraph_node = 274
    grcode_create_group = 275
    grcode_get_custom_layout = 276
    grcode_get_graph_groups = 277
    grcode_empty = 278
    grcode_is_visible_node = 279
    grcode_delete_group = 280
    grcode_change_group_visibility = 281
    grcode_set_edge = 282
    grcode_node_qty = 283
    grcode_nrect = 284
    grcode_set_titlebar_height = 285
    grcode_create_user_graph_place = 286
    grcode_create_disasm_graph1 = 287
    grcode_create_disasm_graph2 = 288
    grcode_set_node_info = 289
    grcode_get_node_info = 290
    grcode_del_node_info = 291
    grcode_viewer_create_groups = 292
    grcode_viewer_delete_groups = 293
    grcode_viewer_groups_visibility = 294
    grcode_viewer_create_groups_vec = 295
    grcode_viewer_delete_groups_vec = 296
    grcode_viewer_groups_visibility_vec = 297
    grcode_delete_mutable_graph = 298
    grcode_edge_infos_wrapper_copy = 299
    grcode_edge_infos_wrapper_clear = 300
    grcode_attach_menu_item = 301
    grcode_set_gli = 302
    grcode_get_gli = 303
    graph_notification_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'processor_t__event_t'
    processor_t__event_t__enumvalues = {
        0: 'ev_init',
        1: 'ev_term',
        2: 'ev_newprc',
        3: 'ev_newasm',
        4: 'ev_newfile',
        5: 'ev_oldfile',
        6: 'ev_newbinary',
        7: 'ev_endbinary',
        8: 'ev_set_idp_options',
        9: 'ev_set_proc_options',
        10: 'ev_ana_insn',
        11: 'ev_emu_insn',
        12: 'ev_out_header',
        13: 'ev_out_footer',
        14: 'ev_out_segstart',
        15: 'ev_out_segend',
        16: 'ev_out_assumes',
        17: 'ev_out_insn',
        18: 'ev_out_mnem',
        19: 'ev_out_operand',
        20: 'ev_out_data',
        21: 'ev_out_label',
        22: 'ev_out_special_item',
        23: 'ev_gen_stkvar_def',
        24: 'ev_gen_regvar_def',
        25: 'ev_gen_src_file_lnnum',
        26: 'ev_creating_segm',
        27: 'ev_moving_segm',
        28: 'ev_coagulate',
        29: 'ev_undefine',
        30: 'ev_treat_hindering_item',
        31: 'ev_rename',
        32: 'ev_is_far_jump',
        33: 'ev_is_sane_insn',
        34: 'ev_is_cond_insn',
        35: 'ev_is_call_insn',
        36: 'ev_is_ret_insn',
        37: 'ev_may_be_func',
        38: 'ev_is_basic_block_end',
        39: 'ev_is_indirect_jump',
        40: 'ev_is_insn_table_jump',
        41: 'ev_is_switch',
        42: 'ev_calc_switch_cases',
        43: 'ev_create_switch_xrefs',
        44: 'ev_is_align_insn',
        45: 'ev_is_alloca_probe',
        46: 'ev_delay_slot_insn',
        47: 'ev_is_sp_based',
        48: 'ev_can_have_type',
        49: 'ev_cmp_operands',
        50: 'ev_adjust_refinfo',
        51: 'ev_get_operand_string',
        52: 'ev_get_reg_name',
        53: 'ev_str2reg',
        54: 'ev_get_autocmt',
        55: 'ev_get_bg_color',
        56: 'ev_is_jump_func',
        57: 'ev_func_bounds',
        58: 'ev_verify_sp',
        59: 'ev_verify_noreturn',
        60: 'ev_create_func_frame',
        61: 'ev_get_frame_retsize',
        62: 'ev_get_stkvar_scale_factor',
        63: 'ev_demangle_name',
        64: 'ev_add_cref',
        65: 'ev_add_dref',
        66: 'ev_del_cref',
        67: 'ev_del_dref',
        68: 'ev_coagulate_dref',
        69: 'ev_may_show_sreg',
        70: 'ev_loader_elf_machine',
        71: 'ev_auto_queue_empty',
        72: 'ev_validate_flirt_func',
        73: 'ev_adjust_libfunc_ea',
        74: 'ev_assemble',
        75: 'ev_extract_address',
        76: 'ev_realcvt',
        77: 'ev_gen_asm_or_lst',
        78: 'ev_gen_map_file',
        79: 'ev_create_flat_group',
        80: 'ev_getreg',
        81: 'ev_analyze_prolog',
        82: 'ev_calc_spdelta',
        83: 'ev_calcrel',
        84: 'ev_find_reg_value',
        85: 'ev_find_op_value',
        86: 'ev_replaying_undo',
        87: 'ev_ending_undo',
        88: 'ev_set_code16_mode',
        89: 'ev_get_code16_mode',
        90: 'ev_get_procmod',
        91: 'ev_asm_installed',
        92: 'ev_get_reg_accesses',
        93: 'ev_is_control_flow_guard',
        94: 'ev_broadcast',
        95: 'ev_create_merge_handlers',
        96: 'ev_privrange_changed',
        97: 'ev_last_cb_before_debugger',
        1000: 'ev_next_exec_insn',
        1001: 'ev_calc_step_over',
        1002: 'ev_calc_next_eas',
        1003: 'ev_get_macro_insn_head',
        1004: 'ev_get_dbr_opnum',
        1005: 'ev_insn_reads_tbit',
        1006: 'ev_clean_tbit',
        1007: 'ev_get_idd_opinfo',
        1008: 'ev_get_reg_info',
        1010: 'ev_last_cb_before_type_callbacks',
        2000: 'ev_setup_til',
        2001: 'ev_get_abi_info',
        2002: 'ev_max_ptr_size',
        2003: 'ev_get_default_enum_size',
        2004: 'ev_get_cc_regs',
        2005: 'ev_obsolete1',
        2006: 'ev_obsolete2',
        2007: 'ev_get_simd_types',
        2008: 'ev_calc_cdecl_purged_bytes',
        2009: 'ev_calc_purged_bytes',
        2010: 'ev_calc_retloc',
        2011: 'ev_calc_arglocs',
        2012: 'ev_calc_varglocs',
        2013: 'ev_adjust_argloc',
        2014: 'ev_lower_func_type',
        2015: 'ev_equal_reglocs',
        2016: 'ev_use_stkarg_type',
        2017: 'ev_use_regarg_type',
        2018: 'ev_use_arg_types',
        2019: 'ev_arg_addrs_ready',
        2020: 'ev_decorate_name',
        2021: 'ev_arch_changed',
        2022: 'ev_get_stkarg_area_info',
        2023: 'ev_last_cb_before_loader',
        3000: 'ev_loader',
    }
    ev_init = 0
    ev_term = 1
    ev_newprc = 2
    ev_newasm = 3
    ev_newfile = 4
    ev_oldfile = 5
    ev_newbinary = 6
    ev_endbinary = 7
    ev_set_idp_options = 8
    ev_set_proc_options = 9
    ev_ana_insn = 10
    ev_emu_insn = 11
    ev_out_header = 12
    ev_out_footer = 13
    ev_out_segstart = 14
    ev_out_segend = 15
    ev_out_assumes = 16
    ev_out_insn = 17
    ev_out_mnem = 18
    ev_out_operand = 19
    ev_out_data = 20
    ev_out_label = 21
    ev_out_special_item = 22
    ev_gen_stkvar_def = 23
    ev_gen_regvar_def = 24
    ev_gen_src_file_lnnum = 25
    ev_creating_segm = 26
    ev_moving_segm = 27
    ev_coagulate = 28
    ev_undefine = 29
    ev_treat_hindering_item = 30
    ev_rename = 31
    ev_is_far_jump = 32
    ev_is_sane_insn = 33
    ev_is_cond_insn = 34
    ev_is_call_insn = 35
    ev_is_ret_insn = 36
    ev_may_be_func = 37
    ev_is_basic_block_end = 38
    ev_is_indirect_jump = 39
    ev_is_insn_table_jump = 40
    ev_is_switch = 41
    ev_calc_switch_cases = 42
    ev_create_switch_xrefs = 43
    ev_is_align_insn = 44
    ev_is_alloca_probe = 45
    ev_delay_slot_insn = 46
    ev_is_sp_based = 47
    ev_can_have_type = 48
    ev_cmp_operands = 49
    ev_adjust_refinfo = 50
    ev_get_operand_string = 51
    ev_get_reg_name = 52
    ev_str2reg = 53
    ev_get_autocmt = 54
    ev_get_bg_color = 55
    ev_is_jump_func = 56
    ev_func_bounds = 57
    ev_verify_sp = 58
    ev_verify_noreturn = 59
    ev_create_func_frame = 60
    ev_get_frame_retsize = 61
    ev_get_stkvar_scale_factor = 62
    ev_demangle_name = 63
    ev_add_cref = 64
    ev_add_dref = 65
    ev_del_cref = 66
    ev_del_dref = 67
    ev_coagulate_dref = 68
    ev_may_show_sreg = 69
    ev_loader_elf_machine = 70
    ev_auto_queue_empty = 71
    ev_validate_flirt_func = 72
    ev_adjust_libfunc_ea = 73
    ev_assemble = 74
    ev_extract_address = 75
    ev_realcvt = 76
    ev_gen_asm_or_lst = 77
    ev_gen_map_file = 78
    ev_create_flat_group = 79
    ev_getreg = 80
    ev_analyze_prolog = 81
    ev_calc_spdelta = 82
    ev_calcrel = 83
    ev_find_reg_value = 84
    ev_find_op_value = 85
    ev_replaying_undo = 86
    ev_ending_undo = 87
    ev_set_code16_mode = 88
    ev_get_code16_mode = 89
    ev_get_procmod = 90
    ev_asm_installed = 91
    ev_get_reg_accesses = 92
    ev_is_control_flow_guard = 93
    ev_broadcast = 94
    ev_create_merge_handlers = 95
    ev_privrange_changed = 96
    ev_last_cb_before_debugger = 97
    ev_next_exec_insn = 1000
    ev_calc_step_over = 1001
    ev_calc_next_eas = 1002
    ev_get_macro_insn_head = 1003
    ev_get_dbr_opnum = 1004
    ev_insn_reads_tbit = 1005
    ev_clean_tbit = 1006
    ev_get_idd_opinfo = 1007
    ev_get_reg_info = 1008
    ev_last_cb_before_type_callbacks = 1010
    ev_setup_til = 2000
    ev_get_abi_info = 2001
    ev_max_ptr_size = 2002
    ev_get_default_enum_size = 2003
    ev_get_cc_regs = 2004
    ev_obsolete1 = 2005
    ev_obsolete2 = 2006
    ev_get_simd_types = 2007
    ev_calc_cdecl_purged_bytes = 2008
    ev_calc_purged_bytes = 2009
    ev_calc_retloc = 2010
    ev_calc_arglocs = 2011
    ev_calc_varglocs = 2012
    ev_adjust_argloc = 2013
    ev_lower_func_type = 2014
    ev_equal_reglocs = 2015
    ev_use_stkarg_type = 2016
    ev_use_regarg_type = 2017
    ev_use_arg_types = 2018
    ev_arg_addrs_ready = 2019
    ev_decorate_name = 2020
    ev_arch_changed = 2021
    ev_get_stkarg_area_info = 2022
    ev_last_cb_before_loader = 2023
    ev_loader = 3000
    processor_t__event_t = ctypes.c_uint32 # enum
    config_changed_cb_t = ctypes.CFUNCTYPE(None, ctypes.POINTER(struct_cfgopt_t), ctypes.c_int32, ctypes.POINTER(None))
    
    # values for enumeration 'debugger_t__event_t'
    debugger_t__event_t__enumvalues = {
        0: 'ev_init_debugger',
        1: 'ev_term_debugger',
        2: 'ev_get_processes',
        3: 'ev_start_process',
        4: 'ev_attach_process',
        5: 'ev_detach_process',
        6: 'ev_get_debapp_attrs',
        7: 'ev_rebase_if_required_to',
        8: 'ev_request_pause',
        9: 'ev_exit_process',
        10: 'ev_get_debug_event',
        11: 'ev_resume',
        12: 'ev_set_exception_info',
        13: 'ev_suspended',
        14: 'ev_thread_suspend',
        15: 'ev_thread_continue',
        16: 'ev_set_resume_mode',
        17: 'ev_read_registers',
        18: 'ev_write_register',
        19: 'ev_thread_get_sreg_base',
        20: 'ev_get_memory_info',
        21: 'ev_read_memory',
        22: 'ev_write_memory',
        23: 'ev_check_bpt',
        24: 'ev_update_bpts',
        25: 'ev_update_lowcnds',
        26: 'ev_open_file',
        27: 'ev_close_file',
        28: 'ev_read_file',
        29: 'ev_write_file',
        30: 'ev_map_address',
        31: 'ev_get_debmod_extensions',
        32: 'ev_update_call_stack',
        33: 'ev_appcall',
        34: 'ev_cleanup_appcall',
        35: 'ev_eval_lowcnd',
        36: 'ev_send_ioctl',
        37: 'ev_dbg_enable_trace',
        38: 'ev_is_tracing_enabled',
        39: 'ev_rexec',
        40: 'ev_get_srcinfo_path',
        41: 'ev_bin_search',
    }
    ev_init_debugger = 0
    ev_term_debugger = 1
    ev_get_processes = 2
    ev_start_process = 3
    ev_attach_process = 4
    ev_detach_process = 5
    ev_get_debapp_attrs = 6
    ev_rebase_if_required_to = 7
    ev_request_pause = 8
    ev_exit_process = 9
    ev_get_debug_event = 10
    ev_resume = 11
    ev_set_exception_info = 12
    ev_suspended = 13
    ev_thread_suspend = 14
    ev_thread_continue = 15
    ev_set_resume_mode = 16
    ev_read_registers = 17
    ev_write_register = 18
    ev_thread_get_sreg_base = 19
    ev_get_memory_info = 20
    ev_read_memory = 21
    ev_write_memory = 22
    ev_check_bpt = 23
    ev_update_bpts = 24
    ev_update_lowcnds = 25
    ev_open_file = 26
    ev_close_file = 27
    ev_read_file = 28
    ev_write_file = 29
    ev_map_address = 30
    ev_get_debmod_extensions = 31
    ev_update_call_stack = 32
    ev_appcall = 33
    ev_cleanup_appcall = 34
    ev_eval_lowcnd = 35
    ev_send_ioctl = 36
    ev_dbg_enable_trace = 37
    ev_is_tracing_enabled = 38
    ev_rexec = 39
    ev_get_srcinfo_path = 40
    ev_bin_search = 41
    debugger_t__event_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'find_extlang_kind_t'
    find_extlang_kind_t__enumvalues = {
        0: 'FIND_EXTLANG_BY_EXT',
        1: 'FIND_EXTLANG_BY_NAME',
        2: 'FIND_EXTLANG_BY_IDX',
    }
    FIND_EXTLANG_BY_EXT = 0
    FIND_EXTLANG_BY_NAME = 1
    FIND_EXTLANG_BY_IDX = 2
    find_extlang_kind_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'linput_close_code_t'
    linput_close_code_t__enumvalues = {
        0: 'LOC_CLOSE',
        1: 'LOC_UNMAKE',
        2: 'LOC_KEEP',
    }
    LOC_CLOSE = 0
    LOC_UNMAKE = 1
    LOC_KEEP = 2
    linput_close_code_t = ctypes.c_uint32 # enum
    mangled_name_type_t = ctypes.c_int32
    
    # values for enumeration 'std___Uninitialized'
    std___Uninitialized__enumvalues = {
        0: '_Noinit',
    }
    _Noinit = 0
    std___Uninitialized = ctypes.c_uint32 # enum
    unexpected_function = ctypes.CFUNCTYPE(None)
    
    # values for enumeration 'view_notification_t'
    view_notification_t__enumvalues = {
        0: 'view_activated',
        1: 'view_deactivated',
        2: 'view_keydown',
        3: 'view_click',
        4: 'view_dblclick',
        5: 'view_curpos',
        6: 'view_created',
        7: 'view_close',
        8: 'view_switched',
        9: 'view_mouse_over',
        10: 'view_loc_changed',
        11: 'view_mouse_moved',
    }
    view_activated = 0
    view_deactivated = 1
    view_keydown = 2
    view_click = 3
    view_dblclick = 4
    view_curpos = 5
    view_created = 6
    view_close = 7
    view_switched = 8
    view_mouse_over = 9
    view_loc_changed = 10
    view_mouse_moved = 11
    view_notification_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'dbg_notification_t'
    dbg_notification_t__enumvalues = {
        0: 'dbg_null',
        1: 'dbg_process_start',
        2: 'dbg_process_exit',
        3: 'dbg_process_attach',
        4: 'dbg_process_detach',
        5: 'dbg_thread_start',
        6: 'dbg_thread_exit',
        7: 'dbg_library_load',
        8: 'dbg_library_unload',
        9: 'dbg_information',
        10: 'dbg_exception',
        11: 'dbg_suspend_process',
        12: 'dbg_bpt',
        13: 'dbg_trace',
        14: 'dbg_request_error',
        15: 'dbg_step_into',
        16: 'dbg_step_over',
        17: 'dbg_run_to',
        18: 'dbg_step_until_ret',
        19: 'dbg_bpt_changed',
        20: 'dbg_started_loading_bpts',
        21: 'dbg_finished_loading_bpts',
        22: 'dbg_last',
    }
    dbg_null = 0
    dbg_process_start = 1
    dbg_process_exit = 2
    dbg_process_attach = 3
    dbg_process_detach = 4
    dbg_thread_start = 5
    dbg_thread_exit = 6
    dbg_library_load = 7
    dbg_library_unload = 8
    dbg_information = 9
    dbg_exception = 10
    dbg_suspend_process = 11
    dbg_bpt = 12
    dbg_trace = 13
    dbg_request_error = 14
    dbg_step_into = 15
    dbg_step_over = 16
    dbg_run_to = 17
    dbg_step_until_ret = 18
    dbg_bpt_changed = 19
    dbg_started_loading_bpts = 20
    dbg_finished_loading_bpts = 21
    dbg_last = 22
    dbg_notification_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'locchange_reason_t'
    locchange_reason_t__enumvalues = {
        0: 'lcr_unknown',
        1: 'lcr_goto',
        2: 'lcr_user_switch',
        3: 'lcr_auto_switch',
        4: 'lcr_jump',
        5: 'lcr_navigate',
        6: 'lcr_scroll',
        7: 'lcr_internal',
    }
    lcr_unknown = 0
    lcr_goto = 1
    lcr_user_switch = 2
    lcr_auto_switch = 3
    lcr_jump = 4
    lcr_navigate = 5
    lcr_scroll = 6
    lcr_internal = 7
    locchange_reason_t = ctypes.c_uint32 # enum
    lx_preprocessor_cb = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), ctypes.c_char_p, ctypes.c_int32, ctypes.c_char_p)
    
    # values for enumeration 'msg_notification_t'
    msg_notification_t__enumvalues = {
        0: 'msg_activated',
        1: 'msg_deactivated',
        2: 'msg_click',
        3: 'msg_dblclick',
        4: 'msg_closed',
        5: 'msg_keydown',
    }
    msg_activated = 0
    msg_deactivated = 1
    msg_click = 2
    msg_dblclick = 3
    msg_closed = 4
    msg_keydown = 5
    msg_notification_t = ctypes.c_uint32 # enum
    terminate_function = ctypes.CFUNCTYPE(None)
    unexpected_handler = ctypes.CFUNCTYPE(None)
    _CRT_REPORT_HOOKW = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int32))
    _purecall_handler = ctypes.CFUNCTYPE(None)
    
    # values for enumeration 'format_functype_t'
    format_functype_t__enumvalues = {
        0: 'FMTFUNC_PRINTF',
        1: 'FMTFUNC_SCANF',
        2: 'FMTFUNC_STRFTIME',
        3: 'FMTFUNC_STRFMON',
    }
    FMTFUNC_PRINTF = 0
    FMTFUNC_SCANF = 1
    FMTFUNC_STRFTIME = 2
    FMTFUNC_STRFMON = 3
    format_functype_t = ctypes.c_uint32 # enum
    ignore_name_def_t = ctypes.c_int32
    
    # values for enumeration 'save_reg_values_t'
    save_reg_values_t__enumvalues = {
        0: 'SAVE_ALL_VALUES',
        1: 'SAVE_DIFF',
        2: 'SAVE_NONE',
    }
    SAVE_ALL_VALUES = 0
    SAVE_DIFF = 1
    SAVE_NONE = 2
    save_reg_values_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'std__memory_order'
    std__memory_order__enumvalues = {
        0: 'memory_order_relaxed',
        1: 'memory_order_consume',
        2: 'memory_order_acquire',
        3: 'memory_order_release',
        4: 'memory_order_acq_rel',
        5: 'memory_order_seq_cst',
    }
    memory_order_relaxed = 0
    memory_order_consume = 1
    memory_order_acquire = 2
    memory_order_release = 3
    memory_order_acq_rel = 4
    memory_order_seq_cst = 5
    std__memory_order = ctypes.c_uint32 # enum
    terminate_handler = ctypes.CFUNCTYPE(None)
    
    # values for enumeration 'ui_notification_t'
    ui_notification_t__enumvalues = {
        0: 'ui_null',
        1: 'ui_range',
        2: 'ui_refresh_choosers',
        3: 'ui_idcstart',
        4: 'ui_idcstop',
        5: 'ui_suspend',
        6: 'ui_resume',
        7: 'ui_broadcast',
        8: 'ui_read_selection',
        9: 'ui_read_range_selection',
        10: 'ui_unmarksel',
        11: 'ui_screenea',
        12: 'ui_saving',
        13: 'ui_saved',
        14: 'ui_refreshmarked',
        15: 'ui_refresh',
        16: 'ui_choose',
        17: 'ui_close_chooser',
        18: 'ui_banner',
        19: 'ui_setidle',
        20: 'ui_database_closed',
        21: 'ui_beep',
        22: 'ui_is_msg_inited',
        23: 'ui_msg',
        24: 'ui_mbox',
        25: 'ui_clr_cancelled',
        26: 'ui_set_cancelled',
        27: 'ui_test_cancelled',
        28: 'ui_ask_buttons',
        29: 'ui_ask_file',
        30: 'ui_ask_form',
        31: 'ui_ask_text',
        32: 'ui_ask_str',
        33: 'ui_ask_addr',
        34: 'ui_ask_seg',
        35: 'ui_ask_long',
        36: 'ui_add_idckey',
        37: 'ui_obsolete_del_idckey',
        38: 'ui_analyzer_options',
        39: 'ui_load_file',
        40: 'ui_run_dbg',
        41: 'ui_get_cursor',
        42: 'ui_get_curline',
        43: 'ui_copywarn',
        44: 'ui_noabort',
        45: 'ui_lock_range_refresh',
        46: 'ui_unlock_range_refresh',
        47: 'ui_genfile_callback',
        48: 'ui_open_url',
        49: 'ui_hexdumpea',
        50: 'ui_get_key_code',
        51: 'ui_setup_plugins_menu',
        52: 'ui_get_kernel_version',
        53: 'ui_is_idaq',
        54: 'ui_refresh_navband',
        55: 'ui_debugger_menu_change',
        56: 'ui_get_curplace',
        57: 'ui_obsolete_display_widget',
        58: 'ui_close_widget',
        59: 'ui_activate_widget',
        60: 'ui_find_widget',
        61: 'ui_get_current_widget',
        62: 'ui_widget_visible',
        63: 'ui_widget_closing',
        64: 'ui_widget_invisible',
        65: 'ui_get_ea_hint',
        66: 'ui_get_item_hint',
        67: 'ui_refresh_custom_viewer',
        68: 'ui_destroy_custom_viewer',
        69: 'ui_jump_in_custom_viewer',
        70: 'ui_get_custom_viewer_curline',
        71: 'ui_get_current_viewer',
        72: 'ui_is_idaview',
        73: 'ui_get_custom_viewer_hint',
        74: 'ui_set_custom_viewer_range',
        75: 'ui_database_inited',
        76: 'ui_ready_to_run',
        77: 'ui_set_custom_viewer_handler',
        78: 'ui_refresh_chooser',
        79: 'ui_open_builtin',
        80: 'ui_preprocess_action',
        81: 'ui_postprocess_action',
        82: 'ui_set_custom_viewer_mode',
        83: 'ui_gen_disasm_text',
        84: 'ui_gen_idanode_text',
        85: 'ui_install_cli',
        86: 'ui_execute_sync',
        87: 'ui_get_chooser_obj',
        88: 'ui_enable_chooser_item_attrs',
        89: 'ui_get_chooser_item_attrs',
        90: 'ui_set_dock_pos',
        91: 'ui_get_opnum',
        92: 'ui_install_custom_datatype_menu',
        93: 'ui_install_custom_optype_menu',
        94: 'ui_get_range_marker',
        95: 'ui_lookup_key_code',
        96: 'ui_load_custom_icon_file',
        97: 'ui_load_custom_icon',
        98: 'ui_free_custom_icon',
        99: 'ui_process_action',
        100: 'ui_create_code_viewer',
        101: 'ui_addons',
        102: 'ui_execute_ui_requests',
        103: 'ui_execute_ui_requests_list',
        104: 'ui_register_timer',
        105: 'ui_unregister_timer',
        106: 'ui_take_database_snapshot',
        107: 'ui_restore_database_snapshot',
        108: 'ui_set_code_viewer_line_handlers',
        109: 'ui_obsolete_refresh_custom_code_viewer',
        110: 'ui_create_source_viewer',
        111: 'ui_get_tab_size',
        112: 'ui_repaint_qwidget',
        113: 'ui_custom_viewer_set_userdata',
        114: 'ui_jumpto',
        115: 'ui_cancel_exec_request',
        116: 'ui_open_form',
        117: 'ui_unrecognized_config_directive',
        118: 'ui_get_output_cursor',
        119: 'ui_get_output_curline',
        120: 'ui_get_output_selected_text',
        121: 'ui_get_renderer_type',
        122: 'ui_set_renderer_type',
        123: 'ui_get_viewer_user_data',
        124: 'ui_get_viewer_place_type',
        125: 'ui_ea_viewer_history_push_and_jump',
        126: 'ui_ea_viewer_history_info',
        127: 'ui_register_action',
        128: 'ui_unregister_action',
        129: 'ui_attach_action_to_menu',
        130: 'ui_detach_action_from_menu',
        131: 'ui_attach_action_to_popup',
        132: 'ui_detach_action_from_popup',
        133: 'ui_attach_dynamic_action_to_popup',
        134: 'ui_attach_action_to_toolbar',
        135: 'ui_detach_action_from_toolbar',
        136: 'ui_updating_actions',
        137: 'ui_updated_actions',
        138: 'ui_populating_widget_popup',
        139: 'ui_finish_populating_widget_popup',
        140: 'ui_update_action_attr',
        141: 'ui_get_action_attr',
        142: 'ui_plugin_loaded',
        143: 'ui_plugin_unloading',
        144: 'ui_get_widget_type',
        145: 'ui_current_widget_changed',
        146: 'ui_get_widget_title',
        147: 'ui_obsolete_get_user_strlist_options',
        148: 'ui_create_custom_viewer',
        149: 'ui_custom_viewer_jump',
        150: 'ui_set_custom_viewer_handlers',
        151: 'ui_get_registered_actions',
        152: 'ui_create_toolbar',
        153: 'ui_delete_toolbar',
        154: 'ui_create_menu',
        155: 'ui_delete_menu',
        156: 'ui_obsolete_set_nav_colorizer',
        157: 'ui_get_chooser_data',
        158: 'ui_obsolete_get_highlight',
        159: 'ui_set_highlight',
        160: 'ui_set_mappings',
        161: 'ui_create_empty_widget',
        162: 'ui_msg_clear',
        163: 'ui_msg_save',
        164: 'ui_msg_get_lines',
        165: 'ui_chooser_default_enter',
        166: 'ui_screen_ea_changed',
        167: 'ui_get_active_modal_widget',
        168: 'ui_navband_pixel',
        169: 'ui_navband_ea',
        170: 'ui_get_window_id',
        171: 'ui_create_desktop_widget',
        172: 'ui_strchoose',
        173: 'ui_set_nav_colorizer',
        174: 'ui_display_widget',
        175: 'ui_get_lines_rendering_info',
        176: 'ui_sync_sources',
        177: 'ui_get_widget_config',
        178: 'ui_set_widget_config',
        179: 'ui_get_custom_viewer_location',
        180: 'ui_initing_database',
        181: 'ui_destroying_procmod',
        182: 'ui_destroying_plugmod',
        183: 'ui_update_file_history',
        184: 'ui_cancel_thread_exec_requests',
        185: 'ui_get_synced_group',
        186: 'ui_show_rename_dialog',
        187: 'ui_desktop_applied',
        188: 'ui_choose_bookmark',
        189: 'ui_get_custom_viewer_place_xcoord',
        190: 'ui_get_user_input_event',
        191: 'ui_get_highlight_2',
        192: 'ui_last',
        1000: 'ui_dbg_begin',
        1000: 'ui_dbg_run_requests',
        1001: 'ui_dbg_get_running_request',
        1002: 'ui_dbg_get_running_notification',
        1003: 'ui_dbg_clear_requests_queue',
        1004: 'ui_dbg_get_process_state',
        1005: 'ui_dbg_start_process',
        1006: 'ui_dbg_request_start_process',
        1007: 'ui_dbg_suspend_process',
        1008: 'ui_dbg_request_suspend_process',
        1009: 'ui_dbg_continue_process',
        1010: 'ui_dbg_request_continue_process',
        1011: 'ui_dbg_exit_process',
        1012: 'ui_dbg_request_exit_process',
        1013: 'ui_dbg_get_thread_qty',
        1014: 'ui_dbg_getn_thread',
        1015: 'ui_dbg_select_thread',
        1016: 'ui_dbg_request_select_thread',
        1017: 'ui_dbg_step_into',
        1018: 'ui_dbg_request_step_into',
        1019: 'ui_dbg_step_over',
        1020: 'ui_dbg_request_step_over',
        1021: 'ui_dbg_run_to',
        1022: 'ui_dbg_request_run_to',
        1023: 'ui_dbg_step_until_ret',
        1024: 'ui_dbg_request_step_until_ret',
        1025: 'ui_dbg_get_bpt_qty',
        1026: 'ui_dbg_add_oldbpt',
        1027: 'ui_dbg_request_add_oldbpt',
        1028: 'ui_dbg_del_oldbpt',
        1029: 'ui_dbg_request_del_oldbpt',
        1030: 'ui_dbg_enable_oldbpt',
        1031: 'ui_dbg_request_enable_oldbpt',
        1032: 'ui_dbg_set_trace_size',
        1033: 'ui_dbg_clear_trace',
        1034: 'ui_dbg_request_clear_trace',
        1035: 'ui_dbg_is_step_trace_enabled',
        1036: 'ui_dbg_enable_step_trace',
        1037: 'ui_dbg_request_enable_step_trace',
        1038: 'ui_dbg_get_step_trace_options',
        1039: 'ui_dbg_set_step_trace_options',
        1040: 'ui_dbg_request_set_step_trace_options',
        1041: 'ui_dbg_is_insn_trace_enabled',
        1042: 'ui_dbg_enable_insn_trace',
        1043: 'ui_dbg_request_enable_insn_trace',
        1044: 'ui_dbg_get_insn_trace_options',
        1045: 'ui_dbg_set_insn_trace_options',
        1046: 'ui_dbg_request_set_insn_trace_options',
        1047: 'ui_dbg_is_func_trace_enabled',
        1048: 'ui_dbg_enable_func_trace',
        1049: 'ui_dbg_request_enable_func_trace',
        1050: 'ui_dbg_get_func_trace_options',
        1051: 'ui_dbg_set_func_trace_options',
        1052: 'ui_dbg_request_set_func_trace_options',
        1053: 'ui_dbg_get_tev_qty',
        1054: 'ui_dbg_get_tev_info',
        1055: 'ui_dbg_get_call_tev_callee',
        1056: 'ui_dbg_get_ret_tev_return',
        1057: 'ui_dbg_get_bpt_tev_ea',
        1058: 'ui_dbg_get_reg_value_type',
        1059: 'ui_dbg_get_processes',
        1060: 'ui_dbg_attach_process',
        1061: 'ui_dbg_request_attach_process',
        1062: 'ui_dbg_detach_process',
        1063: 'ui_dbg_request_detach_process',
        1064: 'ui_dbg_get_first_module',
        1065: 'ui_dbg_get_next_module',
        1066: 'ui_dbg_bring_to_front',
        1067: 'ui_dbg_get_current_thread',
        1068: 'ui_dbg_wait_for_next_event',
        1069: 'ui_dbg_get_debug_event',
        1070: 'ui_dbg_set_debugger_options',
        1071: 'ui_dbg_set_remote_debugger',
        1072: 'ui_dbg_load_debugger',
        1073: 'ui_dbg_retrieve_exceptions',
        1074: 'ui_dbg_store_exceptions',
        1075: 'ui_dbg_define_exception',
        1076: 'ui_dbg_suspend_thread',
        1077: 'ui_dbg_request_suspend_thread',
        1078: 'ui_dbg_resume_thread',
        1079: 'ui_dbg_request_resume_thread',
        1080: 'ui_dbg_get_process_options',
        1081: 'ui_dbg_check_bpt',
        1082: 'ui_dbg_set_process_state',
        1083: 'ui_dbg_get_manual_regions',
        1084: 'ui_dbg_set_manual_regions',
        1085: 'ui_dbg_enable_manual_regions',
        1086: 'ui_dbg_set_process_options',
        1087: 'ui_dbg_is_busy',
        1088: 'ui_dbg_hide_all_bpts',
        1089: 'ui_dbg_edit_manual_regions',
        1090: 'ui_dbg_get_sp_val',
        1091: 'ui_dbg_get_ip_val',
        1092: 'ui_dbg_get_reg_val',
        1093: 'ui_dbg_set_reg_val',
        1094: 'ui_dbg_request_set_reg_val',
        1095: 'ui_dbg_get_insn_tev_reg_val',
        1096: 'ui_dbg_get_insn_tev_reg_result',
        1097: 'ui_dbg_register_provider',
        1098: 'ui_dbg_unregister_provider',
        1099: 'ui_dbg_handle_debug_event',
        1100: 'ui_dbg_add_vmod',
        1101: 'ui_dbg_del_vmod',
        1102: 'ui_dbg_compare_bpt_locs',
        1103: 'ui_obsolete_dbg_save_bpts',
        1104: 'ui_dbg_set_bptloc_string',
        1105: 'ui_dbg_get_bptloc_string',
        1106: 'ui_dbg_internal_appcall',
        1107: 'ui_dbg_internal_cleanup_appcall',
        1108: 'ui_dbg_internal_get_sreg_base',
        1109: 'ui_dbg_internal_ioctl',
        1110: 'ui_dbg_read_memory',
        1111: 'ui_dbg_write_memory',
        1112: 'ui_dbg_read_registers',
        1113: 'ui_dbg_write_register',
        1114: 'ui_dbg_get_memory_info',
        1115: 'ui_dbg_get_event_cond',
        1116: 'ui_dbg_set_event_cond',
        1117: 'ui_dbg_enable_bpt',
        1118: 'ui_dbg_request_enable_bpt',
        1119: 'ui_dbg_del_bpt',
        1120: 'ui_dbg_request_del_bpt',
        1121: 'ui_dbg_map_source_path',
        1122: 'ui_dbg_map_source_file_path',
        1123: 'ui_dbg_modify_source_paths',
        1124: 'ui_dbg_is_bblk_trace_enabled',
        1125: 'ui_dbg_enable_bblk_trace',
        1126: 'ui_dbg_request_enable_bblk_trace',
        1127: 'ui_dbg_get_bblk_trace_options',
        1128: 'ui_dbg_set_bblk_trace_options',
        1129: 'ui_dbg_request_set_bblk_trace_options',
        1130: 'ui_dbg_load_trace_file',
        1131: 'ui_dbg_save_trace_file',
        1132: 'ui_dbg_is_valid_trace_file',
        1133: 'ui_dbg_set_trace_file_desc',
        1134: 'ui_dbg_get_trace_file_desc',
        1135: 'ui_dbg_choose_trace_file',
        1136: 'ui_dbg_diff_trace_file',
        1137: 'ui_dbg_graph_trace',
        1138: 'ui_dbg_get_tev_memory_info',
        1139: 'ui_dbg_get_tev_event',
        1140: 'ui_dbg_get_insn_tev_reg_mem',
        1141: 'ui_dbg_getn_bpt',
        1142: 'ui_dbg_get_bpt',
        1143: 'ui_dbg_find_bpt',
        1144: 'ui_dbg_add_bpt',
        1145: 'ui_dbg_request_add_bpt',
        1146: 'ui_dbg_update_bpt',
        1147: 'ui_dbg_for_all_bpts',
        1148: 'ui_dbg_get_tev_ea',
        1149: 'ui_dbg_get_tev_type',
        1150: 'ui_dbg_get_tev_tid',
        1151: 'ui_dbg_get_trace_base_address',
        1152: 'ui_dbg_set_trace_base_address',
        1153: 'ui_dbg_add_tev',
        1154: 'ui_dbg_add_insn_tev',
        1155: 'ui_dbg_add_call_tev',
        1156: 'ui_dbg_add_ret_tev',
        1157: 'ui_dbg_add_bpt_tev',
        1158: 'ui_dbg_add_debug_event',
        1159: 'ui_dbg_add_thread',
        1160: 'ui_dbg_del_thread',
        1161: 'ui_dbg_add_many_tevs',
        1162: 'ui_dbg_set_bpt_group',
        1163: 'ui_dbg_set_highlight_trace_options',
        1164: 'ui_dbg_set_trace_platform',
        1165: 'ui_dbg_get_trace_platform',
        1166: 'ui_dbg_internal_get_elang',
        1167: 'ui_dbg_internal_set_elang',
        1168: 'ui_dbg_load_dbg_dbginfo',
        1169: 'ui_dbg_set_resume_mode',
        1170: 'ui_dbg_request_set_resume_mode',
        1171: 'ui_dbg_set_bptloc_group',
        1172: 'ui_dbg_list_bptgrps',
        1173: 'ui_dbg_rename_bptgrp',
        1174: 'ui_dbg_del_bptgrp',
        1175: 'ui_dbg_get_grp_bpts',
        1176: 'ui_dbg_get_bpt_group',
        1177: 'ui_dbg_change_bptlocs',
        1178: 'ui_dbg_collect_stack_trace',
        1179: 'ui_dbg_get_module_info',
        1180: 'ui_dbg_get_srcinfo_provider',
        1181: 'ui_dbg_get_global_var',
        1182: 'ui_dbg_get_local_var',
        1183: 'ui_dbg_get_local_vars',
        1184: 'ui_dbg_add_path_mapping',
        1185: 'ui_dbg_get_current_source_file',
        1186: 'ui_dbg_get_current_source_line',
        1187: 'ui_dbg_srcdbg_step_into',
        1188: 'ui_dbg_srcdbg_request_step_into',
        1189: 'ui_dbg_srcdbg_step_over',
        1190: 'ui_dbg_srcdbg_request_step_over',
        1191: 'ui_dbg_srcdbg_step_until_ret',
        1192: 'ui_dbg_srcdbg_request_step_until_ret',
        1193: 'ui_dbg_getn_thread_name',
        1194: 'ui_dbg_bin_search',
        1195: 'ui_dbg_get_insn_tev_reg_val_i',
        1196: 'ui_dbg_get_insn_tev_reg_result_i',
        1197: 'ui_dbg_get_reg_val_i',
        1198: 'ui_dbg_set_reg_val_i',
        1199: 'ui_dbg_get_reg_info',
        1200: 'ui_dbg_set_trace_dynamic_register_set',
        1201: 'ui_dbg_get_trace_dynamic_register_set',
        1202: 'ui_dbg_enable_bptgrp',
        1203: 'ui_dbg_end',
    }
    ui_null = 0
    ui_range = 1
    ui_refresh_choosers = 2
    ui_idcstart = 3
    ui_idcstop = 4
    ui_suspend = 5
    ui_resume = 6
    ui_broadcast = 7
    ui_read_selection = 8
    ui_read_range_selection = 9
    ui_unmarksel = 10
    ui_screenea = 11
    ui_saving = 12
    ui_saved = 13
    ui_refreshmarked = 14
    ui_refresh = 15
    ui_choose = 16
    ui_close_chooser = 17
    ui_banner = 18
    ui_setidle = 19
    ui_database_closed = 20
    ui_beep = 21
    ui_is_msg_inited = 22
    ui_msg = 23
    ui_mbox = 24
    ui_clr_cancelled = 25
    ui_set_cancelled = 26
    ui_test_cancelled = 27
    ui_ask_buttons = 28
    ui_ask_file = 29
    ui_ask_form = 30
    ui_ask_text = 31
    ui_ask_str = 32
    ui_ask_addr = 33
    ui_ask_seg = 34
    ui_ask_long = 35
    ui_add_idckey = 36
    ui_obsolete_del_idckey = 37
    ui_analyzer_options = 38
    ui_load_file = 39
    ui_run_dbg = 40
    ui_get_cursor = 41
    ui_get_curline = 42
    ui_copywarn = 43
    ui_noabort = 44
    ui_lock_range_refresh = 45
    ui_unlock_range_refresh = 46
    ui_genfile_callback = 47
    ui_open_url = 48
    ui_hexdumpea = 49
    ui_get_key_code = 50
    ui_setup_plugins_menu = 51
    ui_get_kernel_version = 52
    ui_is_idaq = 53
    ui_refresh_navband = 54
    ui_debugger_menu_change = 55
    ui_get_curplace = 56
    ui_obsolete_display_widget = 57
    ui_close_widget = 58
    ui_activate_widget = 59
    ui_find_widget = 60
    ui_get_current_widget = 61
    ui_widget_visible = 62
    ui_widget_closing = 63
    ui_widget_invisible = 64
    ui_get_ea_hint = 65
    ui_get_item_hint = 66
    ui_refresh_custom_viewer = 67
    ui_destroy_custom_viewer = 68
    ui_jump_in_custom_viewer = 69
    ui_get_custom_viewer_curline = 70
    ui_get_current_viewer = 71
    ui_is_idaview = 72
    ui_get_custom_viewer_hint = 73
    ui_set_custom_viewer_range = 74
    ui_database_inited = 75
    ui_ready_to_run = 76
    ui_set_custom_viewer_handler = 77
    ui_refresh_chooser = 78
    ui_open_builtin = 79
    ui_preprocess_action = 80
    ui_postprocess_action = 81
    ui_set_custom_viewer_mode = 82
    ui_gen_disasm_text = 83
    ui_gen_idanode_text = 84
    ui_install_cli = 85
    ui_execute_sync = 86
    ui_get_chooser_obj = 87
    ui_enable_chooser_item_attrs = 88
    ui_get_chooser_item_attrs = 89
    ui_set_dock_pos = 90
    ui_get_opnum = 91
    ui_install_custom_datatype_menu = 92
    ui_install_custom_optype_menu = 93
    ui_get_range_marker = 94
    ui_lookup_key_code = 95
    ui_load_custom_icon_file = 96
    ui_load_custom_icon = 97
    ui_free_custom_icon = 98
    ui_process_action = 99
    ui_create_code_viewer = 100
    ui_addons = 101
    ui_execute_ui_requests = 102
    ui_execute_ui_requests_list = 103
    ui_register_timer = 104
    ui_unregister_timer = 105
    ui_take_database_snapshot = 106
    ui_restore_database_snapshot = 107
    ui_set_code_viewer_line_handlers = 108
    ui_obsolete_refresh_custom_code_viewer = 109
    ui_create_source_viewer = 110
    ui_get_tab_size = 111
    ui_repaint_qwidget = 112
    ui_custom_viewer_set_userdata = 113
    ui_jumpto = 114
    ui_cancel_exec_request = 115
    ui_open_form = 116
    ui_unrecognized_config_directive = 117
    ui_get_output_cursor = 118
    ui_get_output_curline = 119
    ui_get_output_selected_text = 120
    ui_get_renderer_type = 121
    ui_set_renderer_type = 122
    ui_get_viewer_user_data = 123
    ui_get_viewer_place_type = 124
    ui_ea_viewer_history_push_and_jump = 125
    ui_ea_viewer_history_info = 126
    ui_register_action = 127
    ui_unregister_action = 128
    ui_attach_action_to_menu = 129
    ui_detach_action_from_menu = 130
    ui_attach_action_to_popup = 131
    ui_detach_action_from_popup = 132
    ui_attach_dynamic_action_to_popup = 133
    ui_attach_action_to_toolbar = 134
    ui_detach_action_from_toolbar = 135
    ui_updating_actions = 136
    ui_updated_actions = 137
    ui_populating_widget_popup = 138
    ui_finish_populating_widget_popup = 139
    ui_update_action_attr = 140
    ui_get_action_attr = 141
    ui_plugin_loaded = 142
    ui_plugin_unloading = 143
    ui_get_widget_type = 144
    ui_current_widget_changed = 145
    ui_get_widget_title = 146
    ui_obsolete_get_user_strlist_options = 147
    ui_create_custom_viewer = 148
    ui_custom_viewer_jump = 149
    ui_set_custom_viewer_handlers = 150
    ui_get_registered_actions = 151
    ui_create_toolbar = 152
    ui_delete_toolbar = 153
    ui_create_menu = 154
    ui_delete_menu = 155
    ui_obsolete_set_nav_colorizer = 156
    ui_get_chooser_data = 157
    ui_obsolete_get_highlight = 158
    ui_set_highlight = 159
    ui_set_mappings = 160
    ui_create_empty_widget = 161
    ui_msg_clear = 162
    ui_msg_save = 163
    ui_msg_get_lines = 164
    ui_chooser_default_enter = 165
    ui_screen_ea_changed = 166
    ui_get_active_modal_widget = 167
    ui_navband_pixel = 168
    ui_navband_ea = 169
    ui_get_window_id = 170
    ui_create_desktop_widget = 171
    ui_strchoose = 172
    ui_set_nav_colorizer = 173
    ui_display_widget = 174
    ui_get_lines_rendering_info = 175
    ui_sync_sources = 176
    ui_get_widget_config = 177
    ui_set_widget_config = 178
    ui_get_custom_viewer_location = 179
    ui_initing_database = 180
    ui_destroying_procmod = 181
    ui_destroying_plugmod = 182
    ui_update_file_history = 183
    ui_cancel_thread_exec_requests = 184
    ui_get_synced_group = 185
    ui_show_rename_dialog = 186
    ui_desktop_applied = 187
    ui_choose_bookmark = 188
    ui_get_custom_viewer_place_xcoord = 189
    ui_get_user_input_event = 190
    ui_get_highlight_2 = 191
    ui_last = 192
    ui_dbg_begin = 1000
    ui_dbg_run_requests = 1000
    ui_dbg_get_running_request = 1001
    ui_dbg_get_running_notification = 1002
    ui_dbg_clear_requests_queue = 1003
    ui_dbg_get_process_state = 1004
    ui_dbg_start_process = 1005
    ui_dbg_request_start_process = 1006
    ui_dbg_suspend_process = 1007
    ui_dbg_request_suspend_process = 1008
    ui_dbg_continue_process = 1009
    ui_dbg_request_continue_process = 1010
    ui_dbg_exit_process = 1011
    ui_dbg_request_exit_process = 1012
    ui_dbg_get_thread_qty = 1013
    ui_dbg_getn_thread = 1014
    ui_dbg_select_thread = 1015
    ui_dbg_request_select_thread = 1016
    ui_dbg_step_into = 1017
    ui_dbg_request_step_into = 1018
    ui_dbg_step_over = 1019
    ui_dbg_request_step_over = 1020
    ui_dbg_run_to = 1021
    ui_dbg_request_run_to = 1022
    ui_dbg_step_until_ret = 1023
    ui_dbg_request_step_until_ret = 1024
    ui_dbg_get_bpt_qty = 1025
    ui_dbg_add_oldbpt = 1026
    ui_dbg_request_add_oldbpt = 1027
    ui_dbg_del_oldbpt = 1028
    ui_dbg_request_del_oldbpt = 1029
    ui_dbg_enable_oldbpt = 1030
    ui_dbg_request_enable_oldbpt = 1031
    ui_dbg_set_trace_size = 1032
    ui_dbg_clear_trace = 1033
    ui_dbg_request_clear_trace = 1034
    ui_dbg_is_step_trace_enabled = 1035
    ui_dbg_enable_step_trace = 1036
    ui_dbg_request_enable_step_trace = 1037
    ui_dbg_get_step_trace_options = 1038
    ui_dbg_set_step_trace_options = 1039
    ui_dbg_request_set_step_trace_options = 1040
    ui_dbg_is_insn_trace_enabled = 1041
    ui_dbg_enable_insn_trace = 1042
    ui_dbg_request_enable_insn_trace = 1043
    ui_dbg_get_insn_trace_options = 1044
    ui_dbg_set_insn_trace_options = 1045
    ui_dbg_request_set_insn_trace_options = 1046
    ui_dbg_is_func_trace_enabled = 1047
    ui_dbg_enable_func_trace = 1048
    ui_dbg_request_enable_func_trace = 1049
    ui_dbg_get_func_trace_options = 1050
    ui_dbg_set_func_trace_options = 1051
    ui_dbg_request_set_func_trace_options = 1052
    ui_dbg_get_tev_qty = 1053
    ui_dbg_get_tev_info = 1054
    ui_dbg_get_call_tev_callee = 1055
    ui_dbg_get_ret_tev_return = 1056
    ui_dbg_get_bpt_tev_ea = 1057
    ui_dbg_get_reg_value_type = 1058
    ui_dbg_get_processes = 1059
    ui_dbg_attach_process = 1060
    ui_dbg_request_attach_process = 1061
    ui_dbg_detach_process = 1062
    ui_dbg_request_detach_process = 1063
    ui_dbg_get_first_module = 1064
    ui_dbg_get_next_module = 1065
    ui_dbg_bring_to_front = 1066
    ui_dbg_get_current_thread = 1067
    ui_dbg_wait_for_next_event = 1068
    ui_dbg_get_debug_event = 1069
    ui_dbg_set_debugger_options = 1070
    ui_dbg_set_remote_debugger = 1071
    ui_dbg_load_debugger = 1072
    ui_dbg_retrieve_exceptions = 1073
    ui_dbg_store_exceptions = 1074
    ui_dbg_define_exception = 1075
    ui_dbg_suspend_thread = 1076
    ui_dbg_request_suspend_thread = 1077
    ui_dbg_resume_thread = 1078
    ui_dbg_request_resume_thread = 1079
    ui_dbg_get_process_options = 1080
    ui_dbg_check_bpt = 1081
    ui_dbg_set_process_state = 1082
    ui_dbg_get_manual_regions = 1083
    ui_dbg_set_manual_regions = 1084
    ui_dbg_enable_manual_regions = 1085
    ui_dbg_set_process_options = 1086
    ui_dbg_is_busy = 1087
    ui_dbg_hide_all_bpts = 1088
    ui_dbg_edit_manual_regions = 1089
    ui_dbg_get_sp_val = 1090
    ui_dbg_get_ip_val = 1091
    ui_dbg_get_reg_val = 1092
    ui_dbg_set_reg_val = 1093
    ui_dbg_request_set_reg_val = 1094
    ui_dbg_get_insn_tev_reg_val = 1095
    ui_dbg_get_insn_tev_reg_result = 1096
    ui_dbg_register_provider = 1097
    ui_dbg_unregister_provider = 1098
    ui_dbg_handle_debug_event = 1099
    ui_dbg_add_vmod = 1100
    ui_dbg_del_vmod = 1101
    ui_dbg_compare_bpt_locs = 1102
    ui_obsolete_dbg_save_bpts = 1103
    ui_dbg_set_bptloc_string = 1104
    ui_dbg_get_bptloc_string = 1105
    ui_dbg_internal_appcall = 1106
    ui_dbg_internal_cleanup_appcall = 1107
    ui_dbg_internal_get_sreg_base = 1108
    ui_dbg_internal_ioctl = 1109
    ui_dbg_read_memory = 1110
    ui_dbg_write_memory = 1111
    ui_dbg_read_registers = 1112
    ui_dbg_write_register = 1113
    ui_dbg_get_memory_info = 1114
    ui_dbg_get_event_cond = 1115
    ui_dbg_set_event_cond = 1116
    ui_dbg_enable_bpt = 1117
    ui_dbg_request_enable_bpt = 1118
    ui_dbg_del_bpt = 1119
    ui_dbg_request_del_bpt = 1120
    ui_dbg_map_source_path = 1121
    ui_dbg_map_source_file_path = 1122
    ui_dbg_modify_source_paths = 1123
    ui_dbg_is_bblk_trace_enabled = 1124
    ui_dbg_enable_bblk_trace = 1125
    ui_dbg_request_enable_bblk_trace = 1126
    ui_dbg_get_bblk_trace_options = 1127
    ui_dbg_set_bblk_trace_options = 1128
    ui_dbg_request_set_bblk_trace_options = 1129
    ui_dbg_load_trace_file = 1130
    ui_dbg_save_trace_file = 1131
    ui_dbg_is_valid_trace_file = 1132
    ui_dbg_set_trace_file_desc = 1133
    ui_dbg_get_trace_file_desc = 1134
    ui_dbg_choose_trace_file = 1135
    ui_dbg_diff_trace_file = 1136
    ui_dbg_graph_trace = 1137
    ui_dbg_get_tev_memory_info = 1138
    ui_dbg_get_tev_event = 1139
    ui_dbg_get_insn_tev_reg_mem = 1140
    ui_dbg_getn_bpt = 1141
    ui_dbg_get_bpt = 1142
    ui_dbg_find_bpt = 1143
    ui_dbg_add_bpt = 1144
    ui_dbg_request_add_bpt = 1145
    ui_dbg_update_bpt = 1146
    ui_dbg_for_all_bpts = 1147
    ui_dbg_get_tev_ea = 1148
    ui_dbg_get_tev_type = 1149
    ui_dbg_get_tev_tid = 1150
    ui_dbg_get_trace_base_address = 1151
    ui_dbg_set_trace_base_address = 1152
    ui_dbg_add_tev = 1153
    ui_dbg_add_insn_tev = 1154
    ui_dbg_add_call_tev = 1155
    ui_dbg_add_ret_tev = 1156
    ui_dbg_add_bpt_tev = 1157
    ui_dbg_add_debug_event = 1158
    ui_dbg_add_thread = 1159
    ui_dbg_del_thread = 1160
    ui_dbg_add_many_tevs = 1161
    ui_dbg_set_bpt_group = 1162
    ui_dbg_set_highlight_trace_options = 1163
    ui_dbg_set_trace_platform = 1164
    ui_dbg_get_trace_platform = 1165
    ui_dbg_internal_get_elang = 1166
    ui_dbg_internal_set_elang = 1167
    ui_dbg_load_dbg_dbginfo = 1168
    ui_dbg_set_resume_mode = 1169
    ui_dbg_request_set_resume_mode = 1170
    ui_dbg_set_bptloc_group = 1171
    ui_dbg_list_bptgrps = 1172
    ui_dbg_rename_bptgrp = 1173
    ui_dbg_del_bptgrp = 1174
    ui_dbg_get_grp_bpts = 1175
    ui_dbg_get_bpt_group = 1176
    ui_dbg_change_bptlocs = 1177
    ui_dbg_collect_stack_trace = 1178
    ui_dbg_get_module_info = 1179
    ui_dbg_get_srcinfo_provider = 1180
    ui_dbg_get_global_var = 1181
    ui_dbg_get_local_var = 1182
    ui_dbg_get_local_vars = 1183
    ui_dbg_add_path_mapping = 1184
    ui_dbg_get_current_source_file = 1185
    ui_dbg_get_current_source_line = 1186
    ui_dbg_srcdbg_step_into = 1187
    ui_dbg_srcdbg_request_step_into = 1188
    ui_dbg_srcdbg_step_over = 1189
    ui_dbg_srcdbg_request_step_over = 1190
    ui_dbg_srcdbg_step_until_ret = 1191
    ui_dbg_srcdbg_request_step_until_ret = 1192
    ui_dbg_getn_thread_name = 1193
    ui_dbg_bin_search = 1194
    ui_dbg_get_insn_tev_reg_val_i = 1195
    ui_dbg_get_insn_tev_reg_result_i = 1196
    ui_dbg_get_reg_val_i = 1197
    ui_dbg_set_reg_val_i = 1198
    ui_dbg_get_reg_info = 1199
    ui_dbg_set_trace_dynamic_register_set = 1200
    ui_dbg_get_trace_dynamic_register_set = 1201
    ui_dbg_enable_bptgrp = 1202
    ui_dbg_end = 1203
    ui_notification_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'ISA_AVAILABILITY'
    ISA_AVAILABILITY__enumvalues = {
        0: '__ISA_AVAILABLE_X86',
        1: '__ISA_AVAILABLE_SSE2',
        2: '__ISA_AVAILABLE_SSE42',
        3: '__ISA_AVAILABLE_AVX',
        4: '__ISA_AVAILABLE_ENFSTRG',
        5: '__ISA_AVAILABLE_AVX2',
        6: '__ISA_AVAILABLE_AVX512',
        0: '__ISA_AVAILABLE_ARMNT',
        1: '__ISA_AVAILABLE_NEON',
        2: '__ISA_AVAILABLE_NEON_ARM64',
    }
    __ISA_AVAILABLE_X86 = 0
    __ISA_AVAILABLE_SSE2 = 1
    __ISA_AVAILABLE_SSE42 = 2
    __ISA_AVAILABLE_AVX = 3
    __ISA_AVAILABLE_ENFSTRG = 4
    __ISA_AVAILABLE_AVX2 = 5
    __ISA_AVAILABLE_AVX512 = 6
    __ISA_AVAILABLE_ARMNT = 0
    __ISA_AVAILABLE_NEON = 1
    __ISA_AVAILABLE_NEON_ARM64 = 2
    ISA_AVAILABILITY = ctypes.c_uint32 # enum
    _CRT_REPORT_HOOK = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_int32, ctypes.c_char_p, ctypes.POINTER(ctypes.c_int32))
    cfgopt_handler_t = ctypes.CFUNCTYPE(ctypes.c_char_p, ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t))
    cliopt_handler_t = ctypes.CFUNCTYPE(None, ctypes.c_char_p, ctypes.POINTER(None))
    
    # values for enumeration 'dbg_event_code_t'
    dbg_event_code_t__enumvalues = {
        4294967294: 'DEC_NOTASK',
        4294967295: 'DEC_ERROR',
        0: 'DEC_TIMEOUT',
    }
    DEC_NOTASK = 4294967294
    DEC_ERROR = 4294967295
    DEC_TIMEOUT = 0
    dbg_event_code_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'debug_name_how_t'
    debug_name_how_t__enumvalues = {
        0: 'DEBNAME_EXACT',
        1: 'DEBNAME_LOWER',
        2: 'DEBNAME_UPPER',
        3: 'DEBNAME_NICE',
    }
    DEBNAME_EXACT = 0
    DEBNAME_LOWER = 1
    DEBNAME_UPPER = 2
    DEBNAME_NICE = 3
    debug_name_how_t = ctypes.c_uint32 # enum
    is_stkarg_load_t = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_insn_t), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32))
    register_class_t = ctypes.c_ubyte
    std__max_align_t = ctypes.c_double
    std__new_handler = ctypes.CFUNCTYPE(None)
    
    # values for enumeration 'tcc_place_type_t'
    tcc_place_type_t__enumvalues = {
        0: 'TCCPT_INVALID',
        1: 'TCCPT_PLACE',
        2: 'TCCPT_SIMPLELINE_PLACE',
        3: 'TCCPT_IDAPLACE',
        4: 'TCCPT_ENUMPLACE',
        5: 'TCCPT_STRUCTPLACE',
    }
    TCCPT_INVALID = 0
    TCCPT_PLACE = 1
    TCCPT_SIMPLELINE_PLACE = 2
    TCCPT_IDAPLACE = 3
    TCCPT_ENUMPLACE = 4
    TCCPT_STRUCTPLACE = 5
    tcc_place_type_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'fc_block_type_t'
    fc_block_type_t__enumvalues = {
        0: 'fcb_normal',
        1: 'fcb_indjump',
        2: 'fcb_ret',
        3: 'fcb_cndret',
        4: 'fcb_noret',
        5: 'fcb_enoret',
        6: 'fcb_extern',
        7: 'fcb_error',
    }
    fcb_normal = 0
    fcb_indjump = 1
    fcb_ret = 2
    fcb_cndret = 3
    fcb_noret = 4
    fcb_enoret = 5
    fcb_extern = 6
    fcb_error = 7
    fc_block_type_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'fpvalue_error_t'
    fpvalue_error_t__enumvalues = {
        0: 'REAL_ERROR_OK',
        4294967295: 'REAL_ERROR_FORMAT',
        4294967294: 'REAL_ERROR_RANGE',
        4294967293: 'REAL_ERROR_BADDATA',
        1: 'REAL_ERROR_FPOVER',
        2: 'REAL_ERROR_BADSTR',
        3: 'REAL_ERROR_ZERODIV',
        4: 'REAL_ERROR_INTOVER',
    }
    REAL_ERROR_OK = 0
    REAL_ERROR_FORMAT = 4294967295
    REAL_ERROR_RANGE = 4294967294
    REAL_ERROR_BADDATA = 4294967293
    REAL_ERROR_FPOVER = 1
    REAL_ERROR_BADSTR = 2
    REAL_ERROR_ZERODIV = 3
    REAL_ERROR_INTOVER = 4
    fpvalue_error_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'setproc_level_t'
    setproc_level_t__enumvalues = {
        0: 'SETPROC_IDB',
        1: 'SETPROC_LOADER',
        2: 'SETPROC_LOADER_NON_FATAL',
        3: 'SETPROC_USER',
    }
    SETPROC_IDB = 0
    SETPROC_LOADER = 1
    SETPROC_LOADER_NON_FATAL = 2
    SETPROC_USER = 3
    setproc_level_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'src_item_kind_t'
    src_item_kind_t__enumvalues = {
        0: 'SRCIT_NONE',
        1: 'SRCIT_MODULE',
        2: 'SRCIT_FUNC',
        3: 'SRCIT_STMT',
        4: 'SRCIT_EXPR',
        5: 'SRCIT_STTVAR',
        6: 'SRCIT_LOCVAR',
    }
    SRCIT_NONE = 0
    SRCIT_MODULE = 1
    SRCIT_FUNC = 2
    SRCIT_STMT = 3
    SRCIT_EXPR = 4
    SRCIT_STTVAR = 5
    SRCIT_LOCVAR = 6
    src_item_kind_t = ctypes.c_uint32 # enum
    ss_restore_cb_t = ctypes.CFUNCTYPE(None, ctypes.c_char_p, ctypes.POINTER(None))
    std__streamsize = ctypes.c_int64
    
    # values for enumeration 'stock_type_id_t'
    stock_type_id_t__enumvalues = {
        0: 'STI_PCHAR',
        1: 'STI_PUCHAR',
        2: 'STI_PCCHAR',
        3: 'STI_PCUCHAR',
        4: 'STI_PBYTE',
        5: 'STI_PINT',
        6: 'STI_PUINT',
        7: 'STI_PVOID',
        8: 'STI_PPVOID',
        9: 'STI_PCVOID',
        10: 'STI_ACHAR',
        11: 'STI_AUCHAR',
        12: 'STI_ACCHAR',
        13: 'STI_ACUCHAR',
        14: 'STI_FPURGING',
        15: 'STI_FDELOP',
        16: 'STI_MSGSEND',
        17: 'STI_AEABI_LCMP',
        18: 'STI_AEABI_ULCMP',
        19: 'STI_DONT_USE',
        20: 'STI_SIZE_T',
        21: 'STI_SSIZE_T',
        22: 'STI_AEABI_MEMCPY',
        23: 'STI_AEABI_MEMSET',
        24: 'STI_AEABI_MEMCLR',
        25: 'STI_RTC_CHECK_2',
        26: 'STI_RTC_CHECK_4',
        27: 'STI_RTC_CHECK_8',
        28: 'STI_COMPLEX64',
        29: 'STI_COMPLEX128',
        30: 'STI_LAST',
    }
    STI_PCHAR = 0
    STI_PUCHAR = 1
    STI_PCCHAR = 2
    STI_PCUCHAR = 3
    STI_PBYTE = 4
    STI_PINT = 5
    STI_PUINT = 6
    STI_PVOID = 7
    STI_PPVOID = 8
    STI_PCVOID = 9
    STI_ACHAR = 10
    STI_AUCHAR = 11
    STI_ACCHAR = 12
    STI_ACUCHAR = 13
    STI_FPURGING = 14
    STI_FDELOP = 15
    STI_MSGSEND = 16
    STI_AEABI_LCMP = 17
    STI_AEABI_ULCMP = 18
    STI_DONT_USE = 19
    STI_SIZE_T = 20
    STI_SSIZE_T = 21
    STI_AEABI_MEMCPY = 22
    STI_AEABI_MEMSET = 23
    STI_AEABI_MEMCLR = 24
    STI_RTC_CHECK_2 = 25
    STI_RTC_CHECK_4 = 26
    STI_RTC_CHECK_8 = 27
    STI_COMPLEX64 = 28
    STI_COMPLEX128 = 29
    STI_LAST = 30
    stock_type_id_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'action_state_t'
    action_state_t__enumvalues = {
        0: 'AST_ENABLE_ALWAYS',
        1: 'AST_ENABLE_FOR_IDB',
        2: 'AST_ENABLE_FOR_WIDGET',
        3: 'AST_ENABLE',
        4: 'AST_DISABLE_ALWAYS',
        5: 'AST_DISABLE_FOR_IDB',
        6: 'AST_DISABLE_FOR_WIDGET',
        7: 'AST_DISABLE',
    }
    AST_ENABLE_ALWAYS = 0
    AST_ENABLE_FOR_IDB = 1
    AST_ENABLE_FOR_WIDGET = 2
    AST_ENABLE = 3
    AST_DISABLE_ALWAYS = 4
    AST_DISABLE_FOR_IDB = 5
    AST_DISABLE_FOR_WIDGET = 6
    AST_DISABLE = 7
    action_state_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'fpvalue_kind_t'
    fpvalue_kind_t__enumvalues = {
        0: 'FPV_BADARG',
        1: 'FPV_NORM',
        2: 'FPV_NAN',
        3: 'FPV_PINF',
        4: 'FPV_NINF',
    }
    FPV_BADARG = 0
    FPV_NORM = 1
    FPV_NAN = 2
    FPV_PINF = 3
    FPV_NINF = 4
    fpvalue_kind_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'navaddr_type_t'
    navaddr_type_t__enumvalues = {
        0: 'nat_lib',
        1: 'nat_fun',
        2: 'nat_cod',
        3: 'nat_dat',
        4: 'nat_und',
        5: 'nat_ext',
        6: 'nat_err',
        7: 'nat_gap',
        8: 'nat_cur',
        9: 'nat_auto',
        10: 'nat_lum',
        11: 'nat_hlo',
        12: 'nat_last',
    }
    nat_lib = 0
    nat_fun = 1
    nat_cod = 2
    nat_dat = 3
    nat_und = 4
    nat_ext = 5
    nat_err = 6
    nat_gap = 7
    nat_cur = 8
    nat_auto = 9
    nat_lum = 10
    nat_hlo = 11
    nat_last = 12
    navaddr_type_t = ctypes.c_uint32 # enum
    set_op_tinfo_t = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_insn_t), ctypes.POINTER(struct_op_t), ctypes.POINTER(struct_tinfo_t), ctypes.c_char_p)
    std__nullptr_t = ctypes.c_int64
    std__streamoff = ctypes.c_int64
    
    # values for enumeration 'storage_type_t'
    storage_type_t__enumvalues = {
        4294967295: 'STT_CUR',
        0: 'STT_VA',
        1: 'STT_MM',
        2: 'STT_DBG',
    }
    STT_CUR = 4294967295
    STT_VA = 0
    STT_MM = 1
    STT_DBG = 2
    storage_type_t = ctypes.c_uint32 # enum
    twidget_type_t = ctypes.c_int32
    uint_least16_t = ctypes.c_uint16
    uint_least32_t = ctypes.c_uint32
    uint_least64_t = ctypes.c_uint64
    
    # values for enumeration 'action_attr_t'
    action_attr_t__enumvalues = {
        0: 'AA_NONE',
        1: 'AA_LABEL',
        2: 'AA_SHORTCUT',
        3: 'AA_TOOLTIP',
        4: 'AA_ICON',
        5: 'AA_STATE',
        6: 'AA_CHECKABLE',
        7: 'AA_CHECKED',
        8: 'AA_VISIBILITY',
    }
    AA_NONE = 0
    AA_LABEL = 1
    AA_SHORTCUT = 2
    AA_TOOLTIP = 3
    AA_ICON = 4
    AA_STATE = 5
    AA_CHECKABLE = 6
    AA_CHECKED = 7
    AA_VISIBILITY = 8
    action_attr_t = ctypes.c_uint32 # enum
    argloc_type_t = ctypes.c_int32
    
    # values for enumeration 'choose_type_t'
    choose_type_t__enumvalues = {
        0: 'chtype_generic',
        1: 'chtype_idasgn',
        2: 'chtype_entry',
        3: 'chtype_name',
        4: 'chtype_stkvar_xref',
        5: 'chtype_xref',
        6: 'chtype_enum',
        7: 'chtype_enum_by_value',
        8: 'chtype_func',
        9: 'chtype_segm',
        10: 'chtype_struc',
        11: 'chtype_strpath',
        12: 'chtype_idatil',
        13: 'chtype_enum_by_value_and_size',
        14: 'chtype_srcp',
    }
    chtype_generic = 0
    chtype_idasgn = 1
    chtype_entry = 2
    chtype_name = 3
    chtype_stkvar_xref = 4
    chtype_xref = 5
    chtype_enum = 6
    chtype_enum_by_value = 7
    chtype_func = 8
    chtype_segm = 9
    chtype_struc = 10
    chtype_strpath = 11
    chtype_idatil = 12
    chtype_enum_by_value_and_size = 13
    chtype_srcp = 14
    choose_type_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'demreq_type_t'
    demreq_type_t__enumvalues = {
        4294967288: 'DQT_NPURGED_8',
        4294967292: 'DQT_NPURGED_4',
        4294967294: 'DQT_NPURGED_2',
        0: 'DQT_COMPILER',
        1: 'DQT_NAME_TYPE',
        2: 'DQT_FULL',
    }
    DQT_NPURGED_8 = 4294967288
    DQT_NPURGED_4 = 4294967292
    DQT_NPURGED_2 = 4294967294
    DQT_COMPILER = 0
    DQT_NAME_TYPE = 1
    DQT_FULL = 2
    demreq_type_t = ctypes.c_uint32 # enum
    int_least16_t = ctypes.c_int16
    int_least32_t = ctypes.c_int32
    int_least64_t = ctypes.c_int64
    layout_type_t = ctypes.c_int32
    
    # values for enumeration 'linput_type_t'
    linput_type_t__enumvalues = {
        0: 'LINPUT_NONE',
        1: 'LINPUT_LOCAL',
        2: 'LINPUT_RFILE',
        3: 'LINPUT_PROCMEM',
        4: 'LINPUT_GENERIC',
    }
    LINPUT_NONE = 0
    LINPUT_LOCAL = 1
    LINPUT_RFILE = 2
    LINPUT_PROCMEM = 3
    LINPUT_GENERIC = 4
    linput_type_t = ctypes.c_uint32 # enum
    lx_warning_cb = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), ctypes.c_char_p)
    
    # values for enumeration 'regval_type_t'
    regval_type_t__enumvalues = {
        0: 'reg_unknown',
        1: 'reg_sz',
        3: 'reg_binary',
        4: 'reg_dword',
    }
    reg_unknown = 0
    reg_sz = 1
    reg_binary = 3
    reg_dword = 4
    regval_type_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'resume_mode_t'
    resume_mode_t__enumvalues = {
        0: 'RESMOD_NONE',
        1: 'RESMOD_INTO',
        2: 'RESMOD_OVER',
        3: 'RESMOD_OUT',
        4: 'RESMOD_SRCINTO',
        5: 'RESMOD_SRCOVER',
        6: 'RESMOD_SRCOUT',
        7: 'RESMOD_USER',
        8: 'RESMOD_HANDLE',
        9: 'RESMOD_MAX',
    }
    RESMOD_NONE = 0
    RESMOD_INTO = 1
    RESMOD_OVER = 2
    RESMOD_OUT = 3
    RESMOD_SRCINTO = 4
    RESMOD_SRCOVER = 5
    RESMOD_SRCOUT = 6
    RESMOD_USER = 7
    RESMOD_HANDLE = 8
    RESMOD_MAX = 9
    resume_mode_t = ctypes.c_uint32 # enum
    set_options_t = ctypes.CFUNCTYPE(ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32, ctypes.POINTER(None), ctypes.c_char)
    
    # values for enumeration 'struc_error_t'
    struc_error_t__enumvalues = {
        0: 'STRUC_ERROR_MEMBER_OK',
        4294967295: 'STRUC_ERROR_MEMBER_NAME',
        4294967294: 'STRUC_ERROR_MEMBER_OFFSET',
        4294967293: 'STRUC_ERROR_MEMBER_SIZE',
        4294967292: 'STRUC_ERROR_MEMBER_TINFO',
        4294967291: 'STRUC_ERROR_MEMBER_STRUCT',
        4294967290: 'STRUC_ERROR_MEMBER_UNIVAR',
        4294967289: 'STRUC_ERROR_MEMBER_VARLAST',
        4294967288: 'STRUC_ERROR_MEMBER_NESTED',
    }
    STRUC_ERROR_MEMBER_OK = 0
    STRUC_ERROR_MEMBER_NAME = 4294967295
    STRUC_ERROR_MEMBER_OFFSET = 4294967294
    STRUC_ERROR_MEMBER_SIZE = 4294967293
    STRUC_ERROR_MEMBER_TINFO = 4294967292
    STRUC_ERROR_MEMBER_STRUCT = 4294967291
    STRUC_ERROR_MEMBER_UNIVAR = 4294967290
    STRUC_ERROR_MEMBER_VARLAST = 4294967289
    STRUC_ERROR_MEMBER_NESTED = 4294967288
    struc_error_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'tty_control_t'
    tty_control_t__enumvalues = {
        0: 'TCT_UNKNOWN',
        1: 'TCT_OWNER',
        2: 'TCT_NOT_OWNER',
    }
    TCT_UNKNOWN = 0
    TCT_OWNER = 1
    TCT_NOT_OWNER = 2
    tty_control_t = ctypes.c_uint32 # enum
    uint_fast16_t = ctypes.c_uint32
    uint_fast32_t = ctypes.c_uint32
    uint_fast64_t = ctypes.c_uint64
    uint_least8_t = ctypes.c_ubyte
    
    # values for enumeration 'update_type_t'
    update_type_t__enumvalues = {
        0: 'UTP_ENUM',
        1: 'UTP_STRUCT',
    }
    UTP_ENUM = 0
    UTP_STRUCT = 1
    update_type_t = ctypes.c_uint32 # enum
    class union__float_const(Union):
        pass
    
    union__float_const._pack_ = 1 # source:False
    union__float_const._fields_ = [
        ('_Word', ctypes.c_uint16 * 4),
        ('_Float', ctypes.c_float),
        ('_Double', ctypes.c_double),
        ('_Long_double', ctypes.c_double),
    ]
    
    class union__ldouble_val(Union):
        pass
    
    union__ldouble_val._pack_ = 1 # source:False
    union__ldouble_val._fields_ = [
        ('_Sh', ctypes.c_uint16 * 4),
        ('_Val', ctypes.c_double),
    ]
    
    
    # values for enumeration 'dirtree_id_t'
    dirtree_id_t__enumvalues = {
        0: 'DIRTREE_LOCAL_TYPES',
        1: 'DIRTREE_STRUCTS',
        2: 'DIRTREE_ENUMS',
        3: 'DIRTREE_FUNCS',
        4: 'DIRTREE_NAMES',
        5: 'DIRTREE_IMPORTS',
        6: 'DIRTREE_IDAPLACE_BOOKMARKS',
        7: 'DIRTREE_STRUCTS_BOOKMARKS',
        8: 'DIRTREE_ENUMS_BOOKMARKS',
        9: 'DIRTREE_BPTS',
        10: 'DIRTREE_END',
    }
    DIRTREE_LOCAL_TYPES = 0
    DIRTREE_STRUCTS = 1
    DIRTREE_ENUMS = 2
    DIRTREE_FUNCS = 3
    DIRTREE_NAMES = 4
    DIRTREE_IMPORTS = 5
    DIRTREE_IDAPLACE_BOOKMARKS = 6
    DIRTREE_STRUCTS_BOOKMARKS = 7
    DIRTREE_ENUMS_BOOKMARKS = 8
    DIRTREE_BPTS = 9
    DIRTREE_END = 10
    dirtree_id_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'frame_part_t'
    frame_part_t__enumvalues = {
        0: 'FPC_ARGS',
        1: 'FPC_RETADDR',
        2: 'FPC_SAVREGS',
        3: 'FPC_LVARS',
    }
    FPC_ARGS = 0
    FPC_RETADDR = 1
    FPC_SAVREGS = 2
    FPC_LVARS = 3
    frame_part_t = ctypes.c_uint32 # enum
    int_fast16_t = ctypes.c_int32
    int_fast32_t = ctypes.c_int32
    int_fast64_t = ctypes.c_int64
    int_least8_t = ctypes.c_char
    is_pattern_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_switch_info_t), ctypes.POINTER(struct_insn_t), ctypes.POINTER(struct_procmod_t))
    
    # values for enumeration 'lecvt_code_t'
    lecvt_code_t__enumvalues = {
        4294967295: 'LECVT_CANCELED',
        0: 'LECVT_ERROR',
        1: 'LECVT_OK',
    }
    LECVT_CANCELED = 4294967295
    LECVT_ERROR = 0
    LECVT_OK = 1
    lecvt_code_t = ctypes.c_uint32 # enum
    lx_pragma_cb = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), ctypes.c_char_p)
    
    # values for enumeration 'ofile_type_t'
    ofile_type_t__enumvalues = {
        0: 'OFILE_MAP',
        1: 'OFILE_EXE',
        2: 'OFILE_IDC',
        3: 'OFILE_LST',
        4: 'OFILE_ASM',
        5: 'OFILE_DIF',
    }
    OFILE_MAP = 0
    OFILE_EXE = 1
    OFILE_IDC = 2
    OFILE_LST = 3
    OFILE_ASM = 4
    OFILE_DIF = 5
    ofile_type_t = ctypes.c_uint32 # enum
    qsemaphore_t = ctypes.POINTER(struct___qsemaphore_t)
    qthread_cb_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None))
    
    # values for enumeration 'range_kind_t'
    range_kind_t__enumvalues = {
        0: 'RANGE_KIND_UNKNOWN',
        1: 'RANGE_KIND_FUNC',
        2: 'RANGE_KIND_SEGMENT',
        3: 'RANGE_KIND_HIDDEN_RANGE',
    }
    RANGE_KIND_UNKNOWN = 0
    RANGE_KIND_FUNC = 1
    RANGE_KIND_SEGMENT = 2
    RANGE_KIND_HIDDEN_RANGE = 3
    range_kind_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'tinfo_code_t'
    tinfo_code_t__enumvalues = {
        0: 'TERR_OK',
        4294967295: 'TERR_SAVE',
        4294967294: 'TERR_SERIALIZE',
        4294967293: 'TERR_WRONGNAME',
        4294967292: 'TERR_BADSYNC',
    }
    TERR_OK = 0
    TERR_SAVE = 4294967295
    TERR_SERIALIZE = 4294967294
    TERR_WRONGNAME = 4294967293
    TERR_BADSYNC = 4294967292
    tinfo_code_t = ctypes.c_uint32 # enum
    uint_fast8_t = ctypes.c_ubyte
    __vcrt_bool = ctypes.c_char
    class union__double_val(Union):
        pass
    
    union__double_val._pack_ = 1 # source:False
    union__double_val._fields_ = [
        ('_Sh', ctypes.c_uint16 * 4),
        ('_Val', ctypes.c_double),
    ]
    
    
    # values for enumeration 'edge_type_t'
    edge_type_t__enumvalues = {
        0: 'edge_error',
        1: 'edge_tree',
        2: 'edge_forward',
        3: 'edge_back',
        4: 'edge_cross',
        5: 'edge_subgraph',
    }
    edge_error = 0
    edge_tree = 1
    edge_forward = 2
    edge_back = 3
    edge_cross = 4
    edge_subgraph = 5
    edge_type_t = ctypes.c_uint32 # enum
    formchgcb_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(struct_form_actions_t))
    
    # values for enumeration 'hook_type_t'
    hook_type_t__enumvalues = {
        0: 'HT_IDP',
        1: 'HT_UI',
        2: 'HT_DBG',
        3: 'HT_IDB',
        4: 'HT_DEV',
        5: 'HT_VIEW',
        6: 'HT_OUTPUT',
        7: 'HT_GRAPH',
        8: 'HT_IDD',
        9: 'HT_LAST',
    }
    HT_IDP = 0
    HT_UI = 1
    HT_DBG = 2
    HT_IDB = 3
    HT_DEV = 4
    HT_VIEW = 5
    HT_OUTPUT = 6
    HT_GRAPH = 7
    HT_IDD = 8
    HT_LAST = 9
    hook_type_t = ctypes.c_uint32 # enum
    int_fast8_t = ctypes.c_char
    lx_macro_cb = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32, ctypes.c_char, ctypes.c_char)
    lx_undef_cb = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), ctypes.c_char_p)
    
    # values for enumeration 'mbox_kind_t'
    mbox_kind_t__enumvalues = {
        0: 'mbox_internal',
        1: 'mbox_info',
        2: 'mbox_warning',
        3: 'mbox_error',
        4: 'mbox_nomem',
        5: 'mbox_feedback',
        6: 'mbox_readerror',
        7: 'mbox_writeerror',
        8: 'mbox_filestruct',
        9: 'mbox_wait',
        10: 'mbox_hide',
        11: 'mbox_replace',
    }
    mbox_internal = 0
    mbox_info = 1
    mbox_warning = 2
    mbox_error = 3
    mbox_nomem = 4
    mbox_feedback = 5
    mbox_readerror = 6
    mbox_writeerror = 7
    mbox_filestruct = 8
    mbox_wait = 9
    mbox_hide = 10
    mbox_replace = 11
    mbox_kind_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'path_type_t'
    path_type_t__enumvalues = {
        0: 'PATH_TYPE_CMD',
        1: 'PATH_TYPE_IDB',
        2: 'PATH_TYPE_ID0',
    }
    PATH_TYPE_CMD = 0
    PATH_TYPE_IDB = 1
    PATH_TYPE_ID0 = 2
    path_type_t = ctypes.c_uint32 # enum
    type_sign_t = ctypes.c_int32
    
    # values for enumeration 'ucdr_kind_t'
    ucdr_kind_t__enumvalues = {
        1: 'UCDR_STRLIT',
        2: 'UCDR_NAME',
        4: 'UCDR_MANGLED',
        8: 'UCDR_TYPE',
    }
    UCDR_STRLIT = 1
    UCDR_NAME = 2
    UCDR_MANGLED = 4
    UCDR_TYPE = 8
    ucdr_kind_t = ctypes.c_uint32 # enum
    __crt_bool = ctypes.c_char
    __time32_t = ctypes.c_int32
    __time64_t = ctypes.c_int64
    class union__float_val(Union):
        pass
    
    union__float_val._pack_ = 1 # source:False
    union__float_val._fields_ = [
        ('_Sh', ctypes.c_uint16 * 2),
        ('_Val', ctypes.c_float),
    ]
    
    buttoncb_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(struct_form_actions_t))
    
    # values for enumeration 'gtd_func_t'
    gtd_func_t__enumvalues = {
        0: 'GTD_CALC_ARGLOCS',
        128: 'GTD_NO_ARGLOCS',
    }
    GTD_CALC_ARGLOCS = 0
    GTD_NO_ARGLOCS = 128
    gtd_func_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'gts_code_t'
    gts_code_t__enumvalues = {
        1: 'GTS_NESTED',
        2: 'GTS_BASECLASS',
    }
    GTS_NESTED = 1
    GTS_BASECLASS = 2
    gts_code_t = ctypes.c_uint32 # enum
    idastate_t = ctypes.c_int32
    importer_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_linput_t), ctypes.POINTER(struct_impinfo_t))
    
    # values for enumeration 'nametype_t'
    nametype_t__enumvalues = {
        6: 'VNT_IDENT',
        8: 'VNT_TYPE',
        2: 'VNT_UDTMEM',
        1: 'VNT_STRLIT',
        2: 'VNT_VISIBLE',
    }
    VNT_IDENT = 6
    VNT_TYPE = 8
    VNT_UDTMEM = 2
    VNT_STRLIT = 1
    VNT_VISIBLE = 2
    nametype_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'smt_code_t'
    smt_code_t__enumvalues = {
        4294967290: 'SMT_BADARG',
        4294967291: 'SMT_NOCOMPAT',
        4294967292: 'SMT_WORSE',
        4294967293: 'SMT_SIZE',
        4294967294: 'SMT_ARRAY',
        4294967295: 'SMT_OVERLAP',
        0: 'SMT_FAILED',
        1: 'SMT_OK',
        2: 'SMT_KEEP',
    }
    SMT_BADARG = 4294967290
    SMT_NOCOMPAT = 4294967291
    SMT_WORSE = 4294967292
    SMT_SIZE = 4294967293
    SMT_ARRAY = 4294967294
    SMT_OVERLAP = 4294967295
    SMT_FAILED = 0
    SMT_OK = 1
    SMT_KEEP = 2
    smt_code_t = ctypes.c_uint32 # enum
    _locale_t = ctypes.POINTER(struct___crt_locale_pointers)
    _onexit_t = ctypes.CFUNCTYPE(ctypes.c_int32)
    bpttype_t = ctypes.c_int32
    
    # values for enumeration 'gdecode_t'
    gdecode_t__enumvalues = {
        4294967295: 'GDE_ERROR',
        0: 'GDE_NO_EVENT',
        1: 'GDE_ONE_EVENT',
        2: 'GDE_MANY_EVENTS',
    }
    GDE_ERROR = 4294967295
    GDE_NO_EVENT = 0
    GDE_ONE_EVENT = 1
    GDE_MANY_EVENTS = 2
    gdecode_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'gtd_udt_t'
    gtd_udt_t__enumvalues = {
        0: 'GTD_CALC_LAYOUT',
        128: 'GTD_NO_LAYOUT',
        64: 'GTD_DEL_BITFLDS',
    }
    GTD_CALC_LAYOUT = 0
    GTD_NO_LAYOUT = 128
    GTD_DEL_BITFLDS = 64
    gtd_udt_t = ctypes.c_uint32 # enum
    mbstate_t = ctypes.c_char
    printer_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_char_p)
    ptrdiff_t = ctypes.c_int64
    qhandle_t = ctypes.POINTER(None)
    qthread_t = ctypes.POINTER(struct___qthread_t)
    uintmax_t = ctypes.c_uint64
    uintptr_t = ctypes.c_uint64
    ulonglong = ctypes.c_uint64
    wchar16_t = ctypes.c_int16
    _fsize_t = ctypes.c_uint32
    double_t = ctypes.c_double
    hexdsp_t = ctypes.CFUNCTYPE(ctypes.POINTER(None), ctypes.c_int32)
    
    # values for enumeration 'inftag_t'
    inftag_t__enumvalues = {
        0: 'INF_VERSION',
        1: 'INF_PROCNAME',
        2: 'INF_GENFLAGS',
        3: 'INF_LFLAGS',
        4: 'INF_DATABASE_CHANGE_COUNT',
        5: 'INF_FILETYPE',
        6: 'INF_OSTYPE',
        7: 'INF_APPTYPE',
        8: 'INF_ASMTYPE',
        9: 'INF_SPECSEGS',
        10: 'INF_AF',
        11: 'INF_AF2',
        12: 'INF_BASEADDR',
        13: 'INF_START_SS',
        14: 'INF_START_CS',
        15: 'INF_START_IP',
        16: 'INF_START_EA',
        17: 'INF_START_SP',
        18: 'INF_MAIN',
        19: 'INF_MIN_EA',
        20: 'INF_MAX_EA',
        21: 'INF_OMIN_EA',
        22: 'INF_OMAX_EA',
        23: 'INF_LOWOFF',
        24: 'INF_HIGHOFF',
        25: 'INF_MAXREF',
        26: 'INF_PRIVRANGE',
        27: 'INF_PRIVRANGE_START_EA',
        28: 'INF_PRIVRANGE_END_EA',
        29: 'INF_NETDELTA',
        30: 'INF_XREFNUM',
        31: 'INF_TYPE_XREFNUM',
        32: 'INF_REFCMTNUM',
        33: 'INF_XREFFLAG',
        34: 'INF_MAX_AUTONAME_LEN',
        35: 'INF_NAMETYPE',
        36: 'INF_SHORT_DEMNAMES',
        37: 'INF_LONG_DEMNAMES',
        38: 'INF_DEMNAMES',
        39: 'INF_LISTNAMES',
        40: 'INF_INDENT',
        41: 'INF_CMT_INDENT',
        42: 'INF_MARGIN',
        43: 'INF_LENXREF',
        44: 'INF_OUTFLAGS',
        45: 'INF_CMTFLG',
        46: 'INF_LIMITER',
        47: 'INF_BIN_PREFIX_SIZE',
        48: 'INF_PREFFLAG',
        49: 'INF_STRLIT_FLAGS',
        50: 'INF_STRLIT_BREAK',
        51: 'INF_STRLIT_ZEROES',
        52: 'INF_STRTYPE',
        53: 'INF_STRLIT_PREF',
        54: 'INF_STRLIT_SERNUM',
        55: 'INF_DATATYPES',
        56: 'INF_CC',
        57: 'INF_CC_ID',
        58: 'INF_CC_CM',
        59: 'INF_CC_SIZE_I',
        60: 'INF_CC_SIZE_B',
        61: 'INF_CC_SIZE_E',
        62: 'INF_CC_DEFALIGN',
        63: 'INF_CC_SIZE_S',
        64: 'INF_CC_SIZE_L',
        65: 'INF_CC_SIZE_LL',
        66: 'INF_CC_SIZE_LDBL',
        67: 'INF_ABIBITS',
        68: 'INF_APPCALL_OPTIONS',
        69: 'INF_FILE_FORMAT_NAME',
        70: 'INF_GROUPS',
        71: 'INF_H_PATH',
        72: 'INF_C_MACROS',
        73: 'INF_INCLUDE',
        74: 'INF_DUALOP_GRAPH',
        75: 'INF_DUALOP_TEXT',
        76: 'INF_MD5',
        77: 'INF_IDA_VERSION',
        78: 'INF_STR_ENCODINGS',
        79: 'INF_DBG_BINPATHS',
        80: 'INF_SHA256',
        81: 'INF_ABINAME',
        82: 'INF_ARCHIVE_PATH',
        83: 'INF_PROBLEMS',
        84: 'INF_SELECTORS',
        85: 'INF_NOTEPAD',
        86: 'INF_SRCDBG_PATHS',
        87: 'INF_SRCDBG_UNDESIRED',
        88: 'INF_INITIAL_VERSION',
        89: 'INF_CTIME',
        90: 'INF_ELAPSED',
        91: 'INF_NOPENS',
        92: 'INF_CRC32',
        93: 'INF_IMAGEBASE',
        94: 'INF_IDSNODE',
        95: 'INF_FSIZE',
        96: 'INF_OUTFILEENC',
        97: 'INF_INPUT_FILE_PATH',
        98: 'INF_LAST',
    }
    INF_VERSION = 0
    INF_PROCNAME = 1
    INF_GENFLAGS = 2
    INF_LFLAGS = 3
    INF_DATABASE_CHANGE_COUNT = 4
    INF_FILETYPE = 5
    INF_OSTYPE = 6
    INF_APPTYPE = 7
    INF_ASMTYPE = 8
    INF_SPECSEGS = 9
    INF_AF = 10
    INF_AF2 = 11
    INF_BASEADDR = 12
    INF_START_SS = 13
    INF_START_CS = 14
    INF_START_IP = 15
    INF_START_EA = 16
    INF_START_SP = 17
    INF_MAIN = 18
    INF_MIN_EA = 19
    INF_MAX_EA = 20
    INF_OMIN_EA = 21
    INF_OMAX_EA = 22
    INF_LOWOFF = 23
    INF_HIGHOFF = 24
    INF_MAXREF = 25
    INF_PRIVRANGE = 26
    INF_PRIVRANGE_START_EA = 27
    INF_PRIVRANGE_END_EA = 28
    INF_NETDELTA = 29
    INF_XREFNUM = 30
    INF_TYPE_XREFNUM = 31
    INF_REFCMTNUM = 32
    INF_XREFFLAG = 33
    INF_MAX_AUTONAME_LEN = 34
    INF_NAMETYPE = 35
    INF_SHORT_DEMNAMES = 36
    INF_LONG_DEMNAMES = 37
    INF_DEMNAMES = 38
    INF_LISTNAMES = 39
    INF_INDENT = 40
    INF_CMT_INDENT = 41
    INF_MARGIN = 42
    INF_LENXREF = 43
    INF_OUTFLAGS = 44
    INF_CMTFLG = 45
    INF_LIMITER = 46
    INF_BIN_PREFIX_SIZE = 47
    INF_PREFFLAG = 48
    INF_STRLIT_FLAGS = 49
    INF_STRLIT_BREAK = 50
    INF_STRLIT_ZEROES = 51
    INF_STRTYPE = 52
    INF_STRLIT_PREF = 53
    INF_STRLIT_SERNUM = 54
    INF_DATATYPES = 55
    INF_CC = 56
    INF_CC_ID = 57
    INF_CC_CM = 58
    INF_CC_SIZE_I = 59
    INF_CC_SIZE_B = 60
    INF_CC_SIZE_E = 61
    INF_CC_DEFALIGN = 62
    INF_CC_SIZE_S = 63
    INF_CC_SIZE_L = 64
    INF_CC_SIZE_LL = 65
    INF_CC_SIZE_LDBL = 66
    INF_ABIBITS = 67
    INF_APPCALL_OPTIONS = 68
    INF_FILE_FORMAT_NAME = 69
    INF_GROUPS = 70
    INF_H_PATH = 71
    INF_C_MACROS = 72
    INF_INCLUDE = 73
    INF_DUALOP_GRAPH = 74
    INF_DUALOP_TEXT = 75
    INF_MD5 = 76
    INF_IDA_VERSION = 77
    INF_STR_ENCODINGS = 78
    INF_DBG_BINPATHS = 79
    INF_SHA256 = 80
    INF_ABINAME = 81
    INF_ARCHIVE_PATH = 82
    INF_PROBLEMS = 83
    INF_SELECTORS = 84
    INF_NOTEPAD = 85
    INF_SRCDBG_PATHS = 86
    INF_SRCDBG_UNDESIRED = 87
    INF_INITIAL_VERSION = 88
    INF_CTIME = 89
    INF_ELAPSED = 90
    INF_NOPENS = 91
    INF_CRC32 = 92
    INF_IMAGEBASE = 93
    INF_IDSNODE = 94
    INF_FSIZE = 95
    INF_OUTFILEENC = 96
    INF_INPUT_FILE_PATH = 97
    INF_LAST = 98
    inftag_t = ctypes.c_uint32 # enum
    intmax_t = ctypes.c_int64
    intptr_t = ctypes.c_int64
    longlong = ctypes.c_int64
    qmutex_t = ctypes.POINTER(struct___qmutex_t)
    qtimer_t = ctypes.POINTER(struct___qtimer_t)
    
    # values for enumeration 'sclass_t'
    sclass_t__enumvalues = {
        0: 'sc_unk',
        1: 'sc_type',
        2: 'sc_ext',
        3: 'sc_stat',
        4: 'sc_reg',
        5: 'sc_auto',
        6: 'sc_friend',
        7: 'sc_virt',
    }
    sc_unk = 0
    sc_type = 1
    sc_ext = 2
    sc_stat = 3
    sc_reg = 4
    sc_auto = 5
    sc_friend = 6
    sc_virt = 7
    sclass_t = ctypes.c_uint32 # enum
    uint16_t = ctypes.c_uint16
    uint32_t = ctypes.c_uint32
    uint64_t = ctypes.c_uint64
    wctype_t = ctypes.c_uint16
    _Wint_t = ctypes.c_int16
    atype_t = ctypes.c_int32
    clock_t = ctypes.c_int32
    
    # values for enumeration 'dterr_t'
    dterr_t__enumvalues = {
        0: 'DTE_OK',
        1: 'DTE_ALREADY_EXISTS',
        2: 'DTE_NOT_FOUND',
        3: 'DTE_NOT_DIRECTORY',
        4: 'DTE_NOT_EMPTY',
        5: 'DTE_BAD_PATH',
        6: 'DTE_CANT_RENAME',
        7: 'DTE_OWN_CHILD',
        8: 'DTE_MAX_DIR',
        9: 'DTE_LAST',
    }
    DTE_OK = 0
    DTE_ALREADY_EXISTS = 1
    DTE_NOT_FOUND = 2
    DTE_NOT_DIRECTORY = 3
    DTE_NOT_EMPTY = 4
    DTE_BAD_PATH = 5
    DTE_CANT_RENAME = 6
    DTE_OWN_CHILD = 7
    DTE_MAX_DIR = 8
    DTE_LAST = 9
    dterr_t = ctypes.c_uint32 # enum
    errno_t = ctypes.c_int32
    error_t = ctypes.c_int32
    float_t = ctypes.c_float
    int16_t = ctypes.c_int16
    int32_t = ctypes.c_int32
    int64_t = ctypes.c_int64
    uint8_t = ctypes.c_uint8
    _HFILE = ctypes.POINTER(None)
    _dev_t = ctypes.c_uint32
    _ino_t = ctypes.c_uint16
    _off_t = ctypes.c_int32
    
    # values for enumeration 'beep_t'
    beep_t__enumvalues = {
        0: 'beep_default',
    }
    beep_default = 0
    beep_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'cref_t'
    cref_t__enumvalues = {
        0: 'fl_U',
        16: 'fl_CF',
        17: 'fl_CN',
        18: 'fl_JF',
        19: 'fl_JN',
        20: 'fl_USobsolete',
        21: 'fl_F',
    }
    fl_U = 0
    fl_CF = 16
    fl_CN = 17
    fl_JF = 18
    fl_JN = 19
    fl_USobsolete = 20
    fl_F = 21
    cref_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'dref_t'
    dref_t__enumvalues = {
        0: 'dr_U',
        1: 'dr_O',
        2: 'dr_W',
        3: 'dr_R',
        4: 'dr_T',
        5: 'dr_I',
        6: 'dr_S',
    }
    dr_U = 0
    dr_O = 1
    dr_W = 2
    dr_R = 3
    dr_T = 4
    dr_I = 5
    dr_S = 6
    dref_t = ctypes.c_uint32 # enum
    fpos_t = ctypes.c_int64
    help_t = ctypes.c_int32
    int8_t = ctypes.c_int8
    size_t = ctypes.c_uint64
    thid_t = ctypes.c_int32
    uint16 = ctypes.c_uint16
    uint32 = ctypes.c_uint32
    ushort = ctypes.c_uint16
    wint_t = ctypes.c_uint16
    
    # values for enumeration 'abs_t'
    abs_t__enumvalues = {
        0: 'abs_unk',
        1: 'abs_no',
        2: 'abs_yes',
    }
    abs_unk = 0
    abs_no = 1
    abs_yes = 2
    abs_t = ctypes.c_uint32 # enum
    
    # values for enumeration 'cb_id'
    cb_id__enumvalues = {
        4294967295: 'CB_INIT',
        4294967294: 'CB_YES',
        4294967293: 'CB_CLOSE',
        4294967292: 'CB_INVISIBLE',
        4294967291: 'CB_DESTROYING',
    }
    CB_INIT = 4294967295
    CB_YES = 4294967294
    CB_CLOSE = 4294967293
    CB_INVISIBLE = 4294967292
    CB_DESTROYING = 4294967291
    cb_id = ctypes.c_uint32 # enum
    
    # values for enumeration 'drc_t'
    drc_t__enumvalues = {
        3: 'DRC_EVENTS',
        2: 'DRC_CRC',
        1: 'DRC_OK',
        0: 'DRC_NONE',
        4294967295: 'DRC_FAILED',
        4294967294: 'DRC_NETERR',
        4294967293: 'DRC_NOFILE',
        4294967292: 'DRC_IDBSEG',
        4294967291: 'DRC_NOPROC',
        4294967290: 'DRC_NOCHG',
        4294967289: 'DRC_ERROR',
    }
    DRC_EVENTS = 3
    DRC_CRC = 2
    DRC_OK = 1
    DRC_NONE = 0
    DRC_FAILED = 4294967295
    DRC_NETERR = 4294967294
    DRC_NOFILE = 4294967293
    DRC_IDBSEG = 4294967292
    DRC_NOPROC = 4294967291
    DRC_NOCHG = 4294967290
    DRC_ERROR = 4294967289
    drc_t = ctypes.c_uint32 # enum
    int16 = ctypes.c_int16
    int32 = ctypes.c_int32
    pid_t = ctypes.c_int32
    sint8 = ctypes.c_char
    uchar = ctypes.c_ubyte
    uint8 = ctypes.c_ubyte
    int8 = ctypes.c_char
    uint = ctypes.c_uint32
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____value_compare = struct_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_compare
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____key_type = ctypes.c_uint64
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Alnode = struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__
    std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___allocator_type = struct_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__
    std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___key_compare = struct_std__less_unsigned_long_long_
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______difference_type = ctypes.c_int64
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____value_compare = struct_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_compare
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______difference_type = ctypes.c_int64
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Alnode = struct_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____value_compare = struct_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_compare
    std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___allocator_type = struct_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____key_type = ctypes.c_uint64
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Alnode = struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__
    std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___key_compare = struct_std__less__qstring_char__
    std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___allocator_type = struct_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long__
    std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___key_compare = struct_std__less_unsigned_long_long_
    std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________difference_type = ctypes.c_int64
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______difference_type = ctypes.c_int64
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________reference = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________difference_type = ctypes.c_int64
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______difference_type = ctypes.c_int64
    std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________reference = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Default_allocator_traits_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____size_type = ctypes.c_uint64
    std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______difference_type = ctypes.c_int64
    std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______reference = ctypes.POINTER(struct_std__pair_const_int__int_)
    std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______difference_type = ctypes.c_int64
    std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____size_type = ctypes.c_uint64
    std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______reference = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____value_compare = struct_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_compare
    std___Default_allocator_traits_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______size_type = ctypes.c_uint64
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____key_type = ctypes.c_int32
    std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______difference_type = ctypes.c_int64
    std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______difference_type = ctypes.c_int64
    std___Default_allocator_traits_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long_____size_type = ctypes.c_uint64
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Alnode = struct_std__allocator_std___Tree_node_std__pair_const_int__int___void__P__
    std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______difference_type = ctypes.c_int64
    std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______difference_type = ctypes.c_int64
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______difference_type = ctypes.c_int64
    std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___allocator_type = struct_std__allocator_std__pair_const_int__int__
    std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______reference = ctypes.POINTER(ctypes.c_int16)
    std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______reference = ctypes.POINTER(ctypes.c_int32)
    std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______difference_type = ctypes.c_int64
    std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______difference_type = ctypes.c_int64
    std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______reference = ctypes.POINTER(ctypes.c_int16)
    std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______difference_type = ctypes.c_int64
    std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___key_compare = struct_std__less_int_
    std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_type = struct_std__pair_const_int__int_
    std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______reference = ctypes.c_char_p
    std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______difference_type = ctypes.c_int64
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______reference = ctypes.POINTER(ctypes.c_int32)
    std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______reference = ctypes.POINTER(ctypes.c_int16)
    std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______reference = ctypes.POINTER(ctypes.c_int32)
    std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______reference = ctypes.POINTER(ctypes.c_int16)
    std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___key_compare = struct_std__less_unsigned_long_long_
    std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______reference = ctypes.c_char_p
    std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
    std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____size_type = ctypes.c_uint64
    std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____value_type = ctypes.c_int32
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____key_type = ctypes.c_int32
    std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Alnode = struct_std__allocator_std___Tree_node_int__void__P__
    qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R____const_iterator = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(syntax_highlight_style), ctypes.POINTER(struct__qstring_char_))
    std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____size_type = ctypes.c_uint64
    std___Default_allocator_traits_std__allocator_std__pair_const_int__int_____size_type = ctypes.c_uint64
    std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Tset_traits_int__std__less_int___std__allocator_int___false___allocator_type = struct_std__allocator_int_
    qvector_long_long___P__syntax_highlight_style__P__const_char__P____const_iterator = ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(syntax_highlight_style), ctypes.c_char_p)
    qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R____iterator = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(syntax_highlight_style), ctypes.POINTER(struct__qstring_char_))
    std___Tset_traits_int__std__less_int___std__allocator_int___false___key_compare = struct_std__less_int_
    qvector_long_long___P__syntax_highlight_style__P__const_char__P____iterator = ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(syntax_highlight_style), ctypes.c_char_p)
    std___Default_allocator_traits_std__allocator_char16_t____size_type = ctypes.c_uint64
    std___Default_allocator_traits_std__allocator_char32_t____size_type = ctypes.c_uint64
    std___Default_allocator_traits_std__allocator_wchar_t____size_type = ctypes.c_uint64
    std__map__qstring_char___qrefcnt_t_refcnted_regex_t____key_compare = struct_std__less__qstring_char__
    std__map__qstring_char___qrefcnt_t_refcnted_regex_t____mapped_type = struct_qrefcnt_t_refcnted_regex_t_
    std___Default_allocator_traits_std__allocator_char____size_type = ctypes.c_uint64
    std___Default_allocator_traits_std__allocator_int____size_type = ctypes.c_uint64
    std___Tree_node_std__pair_const_int__int___void__P____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
    std__map_unsigned_long_long__unsigned_long_long___key_compare = struct_std__less_unsigned_long_long_
    std___String_val_std___Simple_types_char16_t____value_type = ctypes.c_int16
    std___String_val_std___Simple_types_char32_t____value_type = ctypes.c_int32
    std___Simple_types_std__pair_const_int__int____value_type = struct_std__pair_const_int__int_
    std___String_val_std___Simple_types_wchar_t____value_type = ctypes.c_int16
    std___Simple_types_std__pair_const_int__int____size_type = ctypes.c_uint64
    std___Tree_val_std___Tree_simple_types_int____value_type = ctypes.c_int32
    std___Simple_types_std__pair_const_int__int____pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___String_val_std___Simple_types_char____value_type = ctypes.c_char
    class union_typedef_type_data_t___F773DD8B4C420A056648FD7EB1349F55(Union):
        pass
    
    union_typedef_type_data_t___F773DD8B4C420A056648FD7EB1349F55._pack_ = 1 # source:False
    union_typedef_type_data_t___F773DD8B4C420A056648FD7EB1349F55._fields_ = [
        ('name', ctypes.c_char_p),
        ('ordinal', ctypes.c_uint32),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    std___Simple_types_char16_t___difference_type = ctypes.c_int64
    std___Simple_types_char32_t___difference_type = ctypes.c_int64
    std___Simple_types_wchar_t___difference_type = ctypes.c_int64
    std__basic_string_char16_t___const_reference = ctypes.POINTER(ctypes.c_int16)
    std__basic_string_char32_t___const_reference = ctypes.POINTER(ctypes.c_int32)
    std___Simple_types_char16_t___const_pointer = ctypes.POINTER(ctypes.c_int16)
    std___Simple_types_char32_t___const_pointer = ctypes.POINTER(ctypes.c_int32)
    std__basic_string_char16_t___allocator_type = struct_std__allocator_char16_t_
    std__basic_string_char32_t___allocator_type = struct_std__allocator_char32_t_
    std__basic_string_wchar_t___const_reference = ctypes.POINTER(ctypes.c_int16)
    std___Simple_types_wchar_t___const_pointer = ctypes.POINTER(ctypes.c_int16)
    std__basic_string_wchar_t___allocator_type = struct_std__allocator_wchar_t_
    std___Simple_types_char___difference_type = ctypes.c_int64
    std__basic_string_char___const_reference = ctypes.c_char_p
    class union_op_t___9FE5DDDE6246481B3EE86C7EEB25DDF5(Union):
        pass
    
    union_op_t___9FE5DDDE6246481B3EE86C7EEB25DDF5._pack_ = 1 # source:False
    union_op_t___9FE5DDDE6246481B3EE86C7EEB25DDF5._fields_ = [
        ('reg', ctypes.c_uint16),
        ('phrase', ctypes.c_uint16),
    ]
    
    std___Simple_types_char16_t___size_type = ctypes.c_uint64
    std___Simple_types_char32_t___size_type = ctypes.c_uint64
    std___Simple_types_char___const_pointer = ctypes.c_char_p
    std___Tree_node_int__void__P____Nodeptr = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
    std__basic_string_char___allocator_type = struct_std__allocator_char_
    qvector_movbpt_code_t___const_iterator = ctypes.POINTER(movbpt_code_t)
    std___Simple_types_int___const_pointer = ctypes.POINTER(ctypes.c_int32)
    std___Simple_types_wchar_t___size_type = ctypes.c_uint64
    std__basic_string_char16_t___reference = ctypes.POINTER(ctypes.c_int16)
    std__basic_string_char16_t___size_type = ctypes.c_uint64
    std__basic_string_char32_t___reference = ctypes.POINTER(ctypes.c_int32)
    std__basic_string_char32_t___size_type = ctypes.c_uint64
    std___Simple_types_char16_t___pointer = ctypes.POINTER(ctypes.c_int16)
    std___Simple_types_char32_t___pointer = ctypes.POINTER(ctypes.c_int32)
    std__basic_string_wchar_t___reference = ctypes.POINTER(ctypes.c_int16)
    std__basic_string_wchar_t___size_type = ctypes.c_uint64
    std___Simple_types_wchar_t___pointer = ctypes.POINTER(ctypes.c_int16)
    std___Simple_types_char___size_type = ctypes.c_uint64
    std___Simple_types_int___size_type = ctypes.c_uint64
    std__basic_string_char16_t____Alty = struct_std__allocator_char16_t_
    std__basic_string_char32_t____Alty = struct_std__allocator_char32_t_
    std__basic_string_char___reference = ctypes.c_char_p
    std__basic_string_char___size_type = ctypes.c_uint64
    std___Simple_types_char___pointer = ctypes.c_char_p
    std__basic_string_wchar_t____Alty = struct_std__allocator_wchar_t_
    qvector_movbpt_code_t___iterator = ctypes.POINTER(movbpt_code_t)
    std__map_int__int___key_compare = struct_std__less_int_
    std__basic_string_char____Alty = struct_std__allocator_char_
    jump_pattern_t__check_insn_t = struct__C21FB2E1BAA97F44BFD298211C4C916B
    _invalid_parameter_handler = ctypes.CFUNCTYPE(None, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.c_uint32, ctypes.c_uint64)
    rangeset_t__const_iterator = ctypes.POINTER(struct_range_t)
    std__set_int___key_compare = struct_std__less_int_
    local_tinfo_predicate_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint32, ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(None))
    _source_file_iterator = struct_qiterator_qrefcnt_t_source_file_t__
    _source_item_iterator = struct_qiterator_qrefcnt_t_source_item_t__
    compiled_binpat_vec_t = struct_qvector_compiled_binpat_t_
    dirtree_cursor_vec_t = struct_qvector_dirtree_cursor_t_
    rangeset_t__iterator = ctypes.POINTER(struct_range_t)
    section_lines_refs_t = struct_qvector_const_twinline_t__P_
    segm_move_info_vec_t = struct_qvector_segm_move_info_t_
    source_file_iterator = struct_qrefcnt_t_qiterator_qrefcnt_t_source_file_t___
    source_item_iterator = struct_qrefcnt_t_qiterator_qrefcnt_t_source_item_t___
    std___Container_base = struct_std___Container_base0
    argloc_t__biggest_t = ctypes.c_uint64
    lochist_entry_vec_t = struct_qvector_lochist_entry_t_
    std___Iterator_base = struct_std___Iterator_base0
    std__wistringstream = struct_std__basic_istringstream_wchar_t_
    std__wostringstream = struct_std__basic_ostringstream_wchar_t_
    array_of_rangesets = struct_qvector_rangeset_t_
    bpt_constptr_vec_t = struct_qvector_const_bpt_t__P_
    rangeset_crefvec_t = struct_qvector_const_rangeset_t__P_
    refinfo_desc_vec_t = struct_qvector_refinfo_desc_t_
    std__istringstream = struct_std__basic_istringstream_char_
    std__ostringstream = struct_std__basic_ostringstream_char_
    std__wstringstream = struct_std__basic_stringstream_wchar_t_
    view_event_state_t = ctypes.c_int32
    enum_member_vec_t = struct_qvector_enum_member_t_
    scattered_image_t = struct_qvector_scattered_segm_t_
    std__stringstream = struct_std__basic_stringstream_char_
    sync_source_vec_t = struct_qvector_sync_source_t_
    thread_name_vec_t = struct_qvector_thread_name_t_
    _CRT_DUMP_CLIENT = ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.c_uint64)
    channel_redirs_t = struct_qvector_channel_redir_t_
    extlang_object_t = struct_qrefcnt_t_extlang_t_
    graph_row_info_t = struct_qvector_row_info_t_
    groups_crinfos_t = struct_qvector_group_crinfo_t_
    linput_janitor_t = struct_janitor_t_linput_t__P_
    reg_access_vec_t = struct_qvector_reg_access_t_
    tevinforeg_vec_t = struct_qvector_tev_info_reg_t_
    update_bpt_vec_t = struct_qvector_update_bpt_info_t_
    _CRT_ALLOC_HOOK = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(None), ctypes.c_uint64, ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(ctypes.c_ubyte), ctypes.c_int32)
    lx_parse_cast_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_cast_t), ctypes.POINTER(struct_token_t))
    rangevec_base_t = struct_qvector_range_t_
    simd_info_vec_t = struct_qvector_simd_info_t_
    source_file_ptr = struct_qrefcnt_t_source_file_t_
    source_item_ptr = struct_qrefcnt_t_source_item_t_
    std__false_type = struct_std__integral_constant_bool__false_
    std__wstreambuf = struct_std__basic_streambuf_wchar_t_
    std__wstringbuf = struct_std__basic_stringbuf_wchar_t_
    direntry_vec_t = struct_qvector_direntry_t_
    file_janitor_t = struct_janitor_t__iobuf__P_
    graph_viewer_t = struct_TWidget
    memreg_infos_t = struct_qvector_memreg_info_t_
    movbpt_infos_t = struct_qvector_movbpt_info_t_
    procinfo_vec_t = struct_qvector_process_info_t_
    source_items_t = struct_qvector_qrefcnt_t_source_item_t__
    std__streambuf = struct_std__basic_streambuf_char_
    std__stringbuf = struct_std__basic_stringbuf_char_
    std__true_type = struct_std__integral_constant_bool__true_
    std__wifstream = struct_std__basic_ifstream_wchar_t_
    std__wiostream = struct_std__basic_iostream_wchar_t_
    std__wofstream = struct_std__basic_ofstream_wchar_t_
    ea_name_vec_t = struct_qvector_ea_name_t_
    meminfo_vec_t = struct_qvector_memory_info_t_
    problist_id_t = ctypes.c_ubyte
    std___Any_tag = struct_std___Unused_parameter
    std__ifstream = struct_std__basic_ifstream_char_
    std__iostream = struct_std__basic_iostream_char_
    std__ofstream = struct_std__basic_ofstream_char_
    std__wfilebuf = struct_std__basic_filebuf_wchar_t_
    std__wfstream = struct_std__basic_fstream_wchar_t_
    std__wistream = struct_std__basic_istream_wchar_t_
    std__wostream = struct_std__basic_ostream_wchar_t_
    tevinfo_vec_t = struct_qvector_tev_info_t_
    argpartvec_t = struct_qvector_argpart_t_
    bptptr_vec_t = struct_qvector_bpt_t__P_
    dbgevt_vec_t = struct_qvector_debug_event_t_
    fixup_type_t = ctypes.c_uint16
    funcargvec_t = struct_qvector_funcarg_t_
    lowcnd_vec_t = struct_qvector_lowcnd_t_
    modinfovec_t = struct_qvector_modinfo_t_
    std__filebuf = struct_std__basic_filebuf_char_
    std__fstream = struct_std__basic_fstream_char_
    std__istream = struct_std__basic_istream_char_
    std__ostream = struct_std__basic_ostream_char_
    tokenstack_t = struct_qstack_token_t_
    type_attrs_t = struct_qvector_type_attr_t_
    idp_descs_t = struct_qvector_idp_desc_t_
    regex_ptr_t = struct_qrefcnt_t_refcnted_regex_t_
    regobjvec_t = struct_qvector_regobj_t_
    valstrvec_t = struct_qvector_valstr_t_
    catchvec_t = struct_qvector_catch_t_
    extlangs_t = struct_qvector_extlang_t__P_
    idc_func_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t))
    idc_vars_t = struct_qvector_idc_global_t_
    inodevec_t = struct_qvector_unsigned_long_long_
    op_dtype_t = ctypes.c_ubyte
    pointvec_t = struct_qvector_point_t_
    qwstrvec_t = struct_qvector__qstring_wchar_t__
    tinfovec_t = struct_qvector_tinfo_t_
    xreflist_t = struct_qvector_xreflist_entry_t_
    arglocs_t = struct_qvector_argloc_t_
    bgcolor_t = ctypes.c_uint32
    boolvec_t = struct_qvector_bool_
    bpt_vec_t = struct_qvector_bpt_t_
    casevec_t = struct_qvector_qvector_long_long__
    compvec_t = struct_qvector_unsigned_char_
    diffpos_t = ctypes.c_uint64
    edgevec_t = struct_qvector_edge_t_
    ioports_t = struct_qvector_ioport_t_
    qtime32_t = ctypes.c_int32
    reftype_t = ctypes.c_ubyte
    regvals_t = struct_qvector_regval_t_
    std__wios = struct_std__basic_ios_wchar_t_
    svalvec_t = struct_qvector_long_long_
    tryblks_t = struct_qvector_tryblk_t_
    uvalvec_t = struct_qvector_unsigned_long_long_
    wchar32_t = ctypes.c_uint32
    bpteas_t = struct_qvector_bptaddrs_t_
    dirvec_t = struct_qvector_unsigned_long_long_
    excvec_t = struct_qvector_exception_info_t_
    fixups_t = struct_qvector_fixup_info_t_
    optype_t = ctypes.c_ubyte
    ordvec_t = struct_qvector_unsigned_int_
    p_string = ctypes.c_ubyte
    std__ios = struct_std__basic_ios_char_
    strvec_t = struct_qvector_simpleline_t_
    color_t = ctypes.c_ubyte
    flags_t = ctypes.c_uint32
    lldiv_t = struct__lldiv_t
    rsize_t = ctypes.c_uint64
    ssize_t = ctypes.c_int64
    testf_t = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.c_uint32, ctypes.POINTER(None))
    comp_t = ctypes.c_ubyte
    ldiv_t = struct__ldiv_t
    lxtype = ctypes.c_uint16
    p_list = ctypes.c_ubyte
    text_t = struct_qvector_twinline_t_
    time_t = ctypes.c_int64
    type_t = ctypes.c_ubyte
    uint64 = ctypes.c_uint64
    bte_t = ctypes.c_ubyte
    dev_t = ctypes.c_uint32
    div_t = struct__div_t
    ino_t = ctypes.c_uint16
    int64 = ctypes.c_int64
    off_t = ctypes.c_int32
    sel_t = ctypes.c_uint64
    FILE = struct__iobuf
    cm_t = ctypes.c_ubyte
    ea_t = ctypes.c_uint64
    eNI = ctypes.c_uint16 * 9
    class union_lex_value_t___6E94C03EE084EC1E8773E8F11C206FDC(Union):
        pass
    
    union_lex_value_t___6E94C03EE084EC1E8773E8F11C206FDC._pack_ = 1 # source:False
    union_lex_value_t___6E94C03EE084EC1E8773E8F11C206FDC._fields_ = [
        ('val', ctypes.c_int64),
        ('uval', ctypes.c_uint64),
    ]
    
    class union_token_t___EFD300335D00E904D0DC340AFA3DF967(Union):
        pass
    
    union_token_t___EFD300335D00E904D0DC340AFA3DF967._pack_ = 1 # source:False
    union_token_t___EFD300335D00E904D0DC340AFA3DF967._fields_ = [
        ('fnum', struct_fpvalue_t),
        ('i64', ctypes.c_int64),
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    class union_op_t___03EE851906E7470B48652C42A8F5F22F(Union):
        pass
    
    union_op_t___03EE851906E7470B48652C42A8F5F22F._pack_ = 1 # source:False
    union_op_t___03EE851906E7470B48652C42A8F5F22F._fields_ = [
        ('specval', ctypes.c_uint64),
        ('specval_shorts', struct__0B605D7B00AC5C12C153272CF5BD15AF),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class union_op_t___63479489C28A4014434636A3BFC4DC99(Union):
        pass
    
    union_op_t___63479489C28A4014434636A3BFC4DC99._pack_ = 1 # source:False
    union_op_t___63479489C28A4014434636A3BFC4DC99._fields_ = [
        ('addr', ctypes.c_uint64),
        ('addr_shorts', struct__0B605D7B00AC5C12C153272CF5BD15AF),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    external_colorizer_t = ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(syntax_highlight_style), ctypes.c_char_p)
    lochist_entry_cvt2_t = ctypes.CFUNCTYPE(lecvt_code_t, ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_TWidget), ctypes.c_uint32)
    class union_input_event_t___4953DA15226C435F033B39D89D558652(Union):
        pass
    
    union_input_event_t___4953DA15226C435F033B39D89D558652._pack_ = 1 # source:False
    union_input_event_t___4953DA15226C435F033B39D89D558652._fields_ = [
        ('shortcut', struct_input_event_t__input_event_shortcut_data_t),
        ('keyboard', struct_input_event_t__input_event_keyboard_data_t),
        ('mouse', struct_input_event_t__input_event_mouse_data_t),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class union_regval_t___E2461B07C1F03128F15079BB1FB5F381(Union):
        pass
    
    union_regval_t___E2461B07C1F03128F15079BB1FB5F381._pack_ = 1 # source:False
    union_regval_t___E2461B07C1F03128F15079BB1FB5F381._fields_ = [
        ('ival', ctypes.c_uint64),
        ('fval', struct_fpvalue_t),
        ('reserve', ctypes.c_ubyte * 24),
    ]
    
    class union_insn_t___F4FA00FEEF275F329AD5381050035CF8(Union):
        pass
    
    union_insn_t___F4FA00FEEF275F329AD5381050035CF8._pack_ = 1 # source:False
    union_insn_t___F4FA00FEEF275F329AD5381050035CF8._fields_ = [
        ('auxpref', ctypes.c_uint32),
        ('auxpref_u16', ctypes.c_uint16 * 2),
        ('auxpref_u8', ctypes.c_ubyte * 4),
    ]
    
    demangler_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_char_p, ctypes.c_uint32, ctypes.c_char_p, ctypes.c_uint32)
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____allocator_type = struct_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____key_compare = struct_std__less_unsigned_long_long_
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____size_type = ctypes.c_uint64
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____allocator_type = struct_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____key_compare = struct_std__less__qstring_char__
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____size_type = ctypes.c_uint64
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____allocator_type = struct_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long__
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____key_compare = struct_std__less_unsigned_long_long_
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____size_type = ctypes.c_uint64
    std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____size_type = ctypes.c_uint64
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____allocator_type = struct_std__allocator_std__pair_const_int__int__
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____key_compare = struct_std__less_int_
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____value_type = struct_std__pair_const_int__int_
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____size_type = ctypes.c_uint64
    std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______size_type = ctypes.c_uint64
    std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____value_type = struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_
    std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
    std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____size_type = ctypes.c_uint64
    std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___allocator_type = struct_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__
    std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___mapped_type = struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____allocator_type = struct_std__allocator_int_
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____value_type = ctypes.c_int32
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____reference = ctypes.POINTER(ctypes.c_int32)
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____key_compare = struct_std__less_int_
    std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____const_pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____size_type = ctypes.c_uint64
    std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____value_type = ctypes.c_int16
    std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____value_type = ctypes.c_int32
    std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____Node = struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_
    std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____reference = ctypes.POINTER(ctypes.c_int16)
    std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____reference = ctypes.POINTER(ctypes.c_int32)
    std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____value_type = ctypes.c_int16
    std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____reference = ctypes.POINTER(ctypes.c_int16)
    std___String_const_iterator_std___String_val_std___Simple_types_char_____value_type = ctypes.c_char
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____value_type = ctypes.c_int32
    std___String_const_iterator_std___String_val_std___Simple_types_char_____reference = ctypes.c_char_p
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____reference = ctypes.POINTER(ctypes.c_int32)
    std___String_iterator_std___String_val_std___Simple_types_char16_t_____value_type = ctypes.c_int16
    std___String_iterator_std___String_val_std___Simple_types_char32_t_____value_type = ctypes.c_int32
    std___Tset_traits_int__std__less_int___std__allocator_int___false___value_compare = struct_std__less_int_
    std___String_iterator_std___String_val_std___Simple_types_char16_t_____reference = ctypes.POINTER(ctypes.c_int16)
    std___String_iterator_std___String_val_std___Simple_types_char32_t_____reference = ctypes.POINTER(ctypes.c_int32)
    std___String_iterator_std___String_val_std___Simple_types_wchar_t_____value_type = ctypes.c_int16
    std___String_iterator_std___String_val_std___Simple_types_wchar_t_____reference = ctypes.POINTER(ctypes.c_int16)
    std__allocator_std___Tree_node_std__pair_const_int__int___void__P____value_type = struct_std___Tree_node_std__pair_const_int__int___void__P_
    std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____value_type = struct_std__pair_const_int__int_
    std___String_iterator_std___String_val_std___Simple_types_char_____value_type = ctypes.c_char
    std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____size_type = ctypes.c_uint64
    std___String_iterator_std___String_val_std___Simple_types_char_____reference = ctypes.c_char_p
    std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
    std__map__qstring_char___qrefcnt_t_refcnted_regex_t____allocator_type = struct_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___
    std__map_unsigned_long_long__unsigned_long_long___allocator_type = struct_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long__
    std___String_val_std___Simple_types_char16_t____difference_type = ctypes.c_int64
    std___String_val_std___Simple_types_char32_t____difference_type = ctypes.c_int64
    std___String_val_std___Simple_types_wchar_t____difference_type = ctypes.c_int64
    std___String_val_std___Simple_types_char16_t____const_pointer = ctypes.POINTER(ctypes.c_int16)
    std___String_val_std___Simple_types_char32_t____const_pointer = ctypes.POINTER(ctypes.c_int32)
    std___Simple_types_std__pair_const_int__int____const_pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___String_val_std___Simple_types_wchar_t____const_pointer = ctypes.POINTER(ctypes.c_int16)
    std___String_val_std___Simple_types_char____difference_type = ctypes.c_int64
    std___Tree_val_std___Tree_simple_types_int____const_pointer = ctypes.POINTER(ctypes.c_int32)
    std___String_val_std___Simple_types_char16_t____size_type = ctypes.c_uint64
    std___String_val_std___Simple_types_char32_t____size_type = ctypes.c_uint64
    std___String_val_std___Simple_types_char____const_pointer = ctypes.c_char_p
    std___Tree_simple_types_std__pair_const_int__int_____Node = struct_std___Tree_node_std__pair_const_int__int___void__P_
    std__allocator_std___Tree_node_int__void__P____value_type = struct_std___Tree_node_int__void__P_
    std___String_val_std___Simple_types_wchar_t____size_type = ctypes.c_uint64
    std___String_val_std___Simple_types_char16_t____pointer = ctypes.POINTER(ctypes.c_int16)
    std___String_val_std___Simple_types_char32_t____pointer = ctypes.POINTER(ctypes.c_int32)
    std___Tree_val_std___Tree_simple_types_int____size_type = ctypes.c_uint64
    std___String_val_std___Simple_types_wchar_t____pointer = ctypes.POINTER(ctypes.c_int16)
    std___String_val_std___Simple_types_char____size_type = ctypes.c_uint64
    std___String_val_std___Simple_types_char____pointer = ctypes.c_char_p
    std___Tree_simple_types_int____Node = struct_std___Tree_node_int__void__P_
    std__map_int__int___allocator_type = struct_std__allocator_std__pair_const_int__int__
    screen_graph_selection_base_t = struct_qvector_selection_item_t_
    std___No_propagate_allocators = struct_std__integral_constant_bool__false_
    std__set_int___allocator_type = struct_std__allocator_int_
    std___Propagate_allocators = struct_std__integral_constant_bool__true_
    array_of_node_set_t = struct_qvector_node_set_t_
    array_of_intmap_t = struct_qvector_intmap_t_
    cfgopt_handler2_t = ctypes.CFUNCTYPE(ctypes.c_char_p, ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t), ctypes.c_int64, ctypes.c_int64)
    cfgopt_handler3_t = ctypes.CFUNCTYPE(ctypes.c_char_p, ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t), ctypes.c_int64, ctypes.c_int64, ctypes.POINTER(None))
    has_delay_slot_t = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.c_uint64)
    html_footer_cb_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__iobuf))
    html_header_cb_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__iobuf))
    may_destroy_cb_t = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.c_uint64)
    table_checker_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_switch_info_t), ctypes.c_uint64, ctypes.c_int32, ctypes.POINTER(struct_procmod_t))
    movbpt_codes_t = struct_qvector_movbpt_code_t_
    std__streampos = struct_std__fpos__Mbstatet_
    h2ti_type_cb = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_char_p, ctypes.POINTER(struct_tinfo_t), ctypes.c_char_p, ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None))
    blob_idx_t = ctypes.c_uint64
    graph_id_t = ctypes.c_uint64
    _HEAPINFO = struct__heapinfo
    hook_cb_t = ctypes.CFUNCTYPE(ctypes.c_int64, ctypes.POINTER(None), ctypes.c_int32, ctypes.POINTER(ctypes.POINTER(None)))
    nodeidx_t = ctypes.c_uint64
    qtime64_t = ctypes.c_uint64
    aflags_t = ctypes.c_uint32
    qwstring = struct__qstring_wchar_t_
    regoff_t = ctypes.c_int32
    adiff_t = ctypes.c_int64
    asize_t = ctypes.c_uint64
    ea64_t = ctypes.c_uint64
    sval_t = ctypes.c_int64
    uval_t = ctypes.c_uint64
    qtype = struct__qstring_unsigned_char_
    tid_t = ctypes.c_uint64
    class union_switch_info_t___76B1A80AA47B7214ED24D33A3285D956(Union):
        pass
    
    union_switch_info_t___76B1A80AA47B7214ED24D33A3285D956._pack_ = 1 # source:False
    union_switch_info_t___76B1A80AA47B7214ED24D33A3285D956._fields_ = [
        ('values', ctypes.c_uint64),
        ('lowcase', ctypes.c_uint64),
    ]
    
    class union_op_t___1DAE607E75260845BFCA6DE571F2D359(Union):
        pass
    
    union_op_t___1DAE607E75260845BFCA6DE571F2D359._pack_ = 1 # source:False
    union_op_t___1DAE607E75260845BFCA6DE571F2D359._fields_ = [
        ('value', ctypes.c_uint64),
        ('value_shorts', struct__0B605D7B00AC5C12C153272CF5BD15AF),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    external_ident_colorizer_t = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(syntax_highlight_style), ctypes.POINTER(struct__qstring_char_))
    import_enum_cb_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_uint64, ctypes.c_char_p, ctypes.c_uint64, ctypes.POINTER(None))
    lx_resolver_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_lexer_t), ctypes.POINTER(None), ctypes.POINTER(struct_token_t), ctypes.POINTER(ctypes.c_int64))
    nav_colorizer_t = ctypes.CFUNCTYPE(ctypes.c_uint32, ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(None))
    html_line_cb_t = ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct__iobuf), ctypes.POINTER(struct__qstring_char_), ctypes.c_uint32, ctypes.c_uint32)
    class union_cfgopt_t___275FC9DDBA9D1187AC5032610B4D4F63(Union):
        pass
    
    union_cfgopt_t___275FC9DDBA9D1187AC5032610B4D4F63._pack_ = 1 # source:False
    union_cfgopt_t___275FC9DDBA9D1187AC5032610B4D4F63._fields_ = [
        ('buf_size', ctypes.c_uint64),
        ('num_range', struct_cfgopt_t__num_range_t),
        ('bit_flags', ctypes.c_uint32),
        ('params', struct_cfgopt_t__params_t),
        ('mbroff_obj', ctypes.POINTER(None)),
        ('PADDING_0', ctypes.c_ubyte * 8),
    ]
    
    class union_cfgopt_t___99DF67CCA67C584E9D46033DDA6FC151(Union):
        pass
    
    union_cfgopt_t___99DF67CCA67C584E9D46033DDA6FC151._pack_ = 1 # source:False
    union_cfgopt_t___99DF67CCA67C584E9D46033DDA6FC151._fields_ = [
        ('ptr', ctypes.POINTER(None)),
        ('mbroff', ctypes.c_uint64),
        ('hnd', ctypes.CFUNCTYPE(ctypes.c_char_p, ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t))),
        ('hnd2', ctypes.CFUNCTYPE(ctypes.c_char_p, ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t), ctypes.c_int64, ctypes.c_int64)),
        ('hnd3', ctypes.CFUNCTYPE(ctypes.c_char_p, ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_token_t), ctypes.c_int64, ctypes.c_int64, ctypes.POINTER(None))),
    ]
    
    class union_jvalue_t___86FD308AB52B8F8AFE7E7C65068A43C3(Union):
        pass
    
    union_jvalue_t___86FD308AB52B8F8AFE7E7C65068A43C3._pack_ = 1 # source:False
    union_jvalue_t___86FD308AB52B8F8AFE7E7C65068A43C3._fields_ = [
        ('_num', ctypes.c_int64),
        ('_str', ctypes.POINTER(struct__qstring_char_)),
        ('_obj', ctypes.POINTER(struct_jobj_t)),
        ('_arr', ctypes.POINTER(struct_jarr_t)),
        ('_bool', ctypes.c_char),
        ('PADDING_0', ctypes.c_ubyte * 7),
    ]
    
    class union_idc_value_t___D589224ACA3955A7C89073061DACDDE8(Union):
        pass
    
    union_idc_value_t___D589224ACA3955A7C89073061DACDDE8._pack_ = 1 # source:False
    union_idc_value_t___D589224ACA3955A7C89073061DACDDE8._fields_ = [
        ('num', ctypes.c_int64),
        ('e', struct_fpvalue_t),
        ('obj', ctypes.POINTER(struct_idc_object_t)),
        ('funcidx', ctypes.c_int32),
        ('pvoid', ctypes.POINTER(None)),
        ('i64', ctypes.c_int64),
        ('reserve', ctypes.c_ubyte * 24),
    ]
    
    union_value_u._pack_ = 1 # source:False
    union_value_u._fields_ = [
        ('v_char', ctypes.c_ubyte),
        ('v_short', ctypes.c_uint16),
        ('v_long', ctypes.c_uint32),
        ('v_int64', ctypes.c_uint64),
        ('v_uval', ctypes.c_uint64),
        ('_dq', struct_value_u__dq_t),
        ('dt', struct_value_u__dt_t),
        ('d128', struct_value_u__d128_t),
        ('byte16', ctypes.c_ubyte * 16),
        ('dword3', ctypes.c_uint32 * 3),
        ('PADDING_0', ctypes.c_ubyte * 4),
    ]
    
    class union_callui_t(Union):
        pass
    
    union_callui_t._pack_ = 1 # source:False
    union_callui_t._fields_ = [
        ('cnd', ctypes.c_char),
        ('i8', ctypes.c_char),
        ('i', ctypes.c_int32),
        ('i16', ctypes.c_int16),
        ('i32', ctypes.c_int32),
        ('u8', ctypes.c_ubyte),
        ('u16', ctypes.c_uint16),
        ('u32', ctypes.c_uint32),
        ('cptr', ctypes.c_char_p),
        ('vptr', ctypes.POINTER(None)),
        ('ssize', ctypes.c_int64),
        ('fptr', ctypes.POINTER(struct_func_t)),
        ('segptr', ctypes.POINTER(struct_segment_t)),
        ('strptr', ctypes.POINTER(struct_struc_t)),
        ('pluginptr', ctypes.POINTER(struct_plugin_t)),
        ('sraptr', ctypes.POINTER(struct_sreg_range_t)),
    ]
    
    std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
    std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
    std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___key_type = struct__qstring_char_
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_____value_type = struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_
    std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
    std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_____pointer = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
    std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type = struct_std__pair_const_unsigned_long_long__unsigned_long_long_
    std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
    std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type = struct_std__pair_const_int__int_
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_int__int___void__P_____value_type = struct_std___Tree_node_std__pair_const_int__int___void__P_
    std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____const_pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type = struct_std__pair_const_int__int_
    std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_int__int___void__P_____pointer = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
    std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type = struct_std__pair_const_int__int_
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type = struct_std__pair_const_int__int_
    std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____value_compare = struct_std__less_int_
    std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
    std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____difference_type = ctypes.c_int64
    std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____difference_type = ctypes.c_int64
    std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____difference_type = ctypes.c_int64
    std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____pointer = ctypes.POINTER(ctypes.c_int32)
    std___Default_allocator_traits_std__allocator_std___Tree_node_int__void__P_____value_type = struct_std___Tree_node_int__void__P_
    std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___String_const_iterator_std___String_val_std___Simple_types_char_____difference_type = ctypes.c_int64
    std___Default_allocator_traits_std__allocator_std___Tree_node_int__void__P_____pointer = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
    std___String_iterator_std___String_val_std___Simple_types_char16_t_____difference_type = ctypes.c_int64
    std___String_iterator_std___String_val_std___Simple_types_char32_t_____difference_type = ctypes.c_int64
    std___String_iterator_std___String_val_std___Simple_types_wchar_t_____difference_type = ctypes.c_int64
    std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____pointer = ctypes.POINTER(ctypes.c_int16)
    std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____pointer = ctypes.POINTER(ctypes.c_int32)
    std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____pointer = ctypes.POINTER(ctypes.c_int16)
    std___String_iterator_std___String_val_std___Simple_types_char_____difference_type = ctypes.c_int64
    std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____const_pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___String_const_iterator_std___String_val_std___Simple_types_char_____pointer = ctypes.c_char_p
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____pointer = ctypes.POINTER(ctypes.c_int32)
    std___String_iterator_std___String_val_std___Simple_types_char16_t_____pointer = ctypes.POINTER(ctypes.c_int16)
    std___String_iterator_std___String_val_std___Simple_types_char32_t_____pointer = ctypes.POINTER(ctypes.c_int32)
    std___String_iterator_std___String_val_std___Simple_types_wchar_t_____pointer = ctypes.POINTER(ctypes.c_int16)
    std___String_iterator_std___String_val_std___Simple_types_char_____pointer = ctypes.c_char_p
    std__map__qstring_char___qrefcnt_t_refcnted_regex_t____key_type = struct__qstring_char_
    std___Tree_simple_types_std__pair_const_int__int_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
    syntax_highlighter_t__block_highlighter_t = ctypes.CFUNCTYPE(None, ctypes.POINTER(None), ctypes.POINTER(struct_highlighter_cbs_t), ctypes.POINTER(struct__qstring_char_))
    std__basic_string_char16_t____Scary_val = struct_std___String_val_std___Simple_types_char16_t__
    std__basic_string_char32_t____Scary_val = struct_std___String_val_std___Simple_types_char32_t__
    std___Tree_simple_types_int____Nodeptr = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
    std__basic_string_wchar_t____Scary_val = struct_std___String_val_std___Simple_types_wchar_t__
    std__basic_string_char____Scary_val = struct_std___String_val_std___Simple_types_char__
    code_viewer_lines_linenum_t = ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_place_t), ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(None))
    std__u16streampos = struct_std__fpos__Mbstatet_
    std__u32streampos = struct_std__fpos__Mbstatet_
    std__wstreampos = struct_std__fpos__Mbstatet_
    diridx_t = ctypes.c_uint64
    bmask_t = ctypes.c_uint64
    const_t = ctypes.c_uint64
    inode_t = ctypes.c_uint64
    enum_t = ctypes.c_uint64
    class union_argloc_t___F4A6A313BC9EA9730D72EF3AFDF761E4(Union):
        pass
    
    union_argloc_t___F4A6A313BC9EA9730D72EF3AFDF761E4._pack_ = 1 # source:False
    union_argloc_t___F4A6A313BC9EA9730D72EF3AFDF761E4._fields_ = [
        ('sval', ctypes.c_int64),
        ('reginfo', ctypes.c_uint32),
        ('rrel', ctypes.POINTER(struct_rrel_t)),
        ('dist', ctypes.POINTER(struct_scattered_aloc_t)),
        ('custom', ctypes.POINTER(None)),
        ('biggest', ctypes.c_uint64),
    ]
    
    class union_func_t___C940058B2272AD9112E2141245617273(Union):
        pass
    
    class struct_func_t___C940058B2272AD9112E2141245617273_0(Structure):
        pass
    
    struct_func_t___C940058B2272AD9112E2141245617273_0._pack_ = 1 # source:False
    struct_func_t___C940058B2272AD9112E2141245617273_0._fields_ = [
        ('frame', ctypes.c_uint64),
        ('frsize', ctypes.c_uint64),
        ('frregs', ctypes.c_uint16),
        ('PADDING_0', ctypes.c_ubyte * 6),
        ('argsize', ctypes.c_uint64),
        ('fpd', ctypes.c_uint64),
        ('color', ctypes.c_uint32),
        ('pntqty', ctypes.c_uint32),
        ('points', ctypes.POINTER(struct_stkpnt_t)),
        ('regvarqty', ctypes.c_int32),
        ('PADDING_1', ctypes.c_ubyte * 4),
        ('regvars', ctypes.POINTER(struct_regvar_t)),
        ('llabelqty', ctypes.c_int32),
        ('PADDING_2', ctypes.c_ubyte * 4),
        ('llabels', ctypes.POINTER(struct_llabel_t)),
        ('regargqty', ctypes.c_int32),
        ('PADDING_3', ctypes.c_ubyte * 4),
        ('regargs', ctypes.POINTER(struct_regarg_t)),
        ('tailqty', ctypes.c_int32),
        ('PADDING_4', ctypes.c_ubyte * 4),
        ('tails', ctypes.POINTER(struct_range_t)),
    ]
    
    class struct_func_t___C940058B2272AD9112E2141245617273_1(Structure):
        pass
    
    struct_func_t___C940058B2272AD9112E2141245617273_1._pack_ = 1 # source:False
    struct_func_t___C940058B2272AD9112E2141245617273_1._fields_ = [
        ('owner', ctypes.c_uint64),
        ('refqty', ctypes.c_int32),
        ('PADDING_0', ctypes.c_ubyte * 4),
        ('referers', ctypes.POINTER(ctypes.c_uint64)),
    ]
    
    union_func_t___C940058B2272AD9112E2141245617273._pack_ = 1 # source:False
    union_func_t___C940058B2272AD9112E2141245617273._anonymous_ = ('_0', '_1',)
    union_func_t___C940058B2272AD9112E2141245617273._fields_ = [
        ('_0', struct_func_t___C940058B2272AD9112E2141245617273_0),
        ('_1', struct_func_t___C940058B2272AD9112E2141245617273_1),
        ('PADDING_0', ctypes.c_ubyte * 96),
    ]
    
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____key_type = struct__qstring_char_
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
    std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____value_type = struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_
    std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
    std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____const_pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____Node = struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_
    std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
    std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
    std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____value_type = struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_
    std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
    std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______pointer = ctypes.POINTER(ctypes.c_int16)
    std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______pointer = ctypes.POINTER(ctypes.c_int32)
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______pointer = ctypes.POINTER(ctypes.c_int16)
    std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char______pointer = ctypes.c_char_p
    std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______pointer = ctypes.POINTER(ctypes.c_int32)
    std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______pointer = ctypes.POINTER(ctypes.c_int16)
    std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______pointer = ctypes.POINTER(ctypes.c_int32)
    std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char16_t______pointer = ctypes.POINTER(ctypes.c_int16)
    std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char32_t______pointer = ctypes.POINTER(ctypes.c_int32)
    std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
    std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______pointer = ctypes.POINTER(ctypes.c_int16)
    std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_wchar_t______pointer = ctypes.POINTER(ctypes.c_int16)
    std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______pointer = ctypes.c_char_p
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______pointer = ctypes.POINTER(ctypes.c_int32)
    std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char______pointer = ctypes.c_char_p
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
    std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______pointer = ctypes.POINTER(ctypes.c_int16)
    std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______pointer = ctypes.POINTER(ctypes.c_int32)
    std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______pointer = ctypes.POINTER(ctypes.c_int16)
    std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______pointer = ctypes.c_char_p
    std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____const_pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______Node = struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
    std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
    std___Tree_val_std___Tree_simple_types_int_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
    std__basic_string_char16_t___const_reverse_iterator = struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____
    std__basic_string_char32_t___const_reverse_iterator = struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____
    std__basic_string_wchar_t___const_reverse_iterator = struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____
    std__basic_string_char___const_reverse_iterator = struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char____
    std__basic_string_char16_t___const_iterator = struct_std___String_const_iterator_std___String_val_std___Simple_types_char16_t___
    std__basic_string_char32_t___const_iterator = struct_std___String_const_iterator_std___String_val_std___Simple_types_char32_t___
    std__basic_string_wchar_t___const_iterator = struct_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___
    std__basic_string_char___const_iterator = struct_std___String_const_iterator_std___String_val_std___Simple_types_char___
    std__basic_string_char16_t___iterator = struct_std___String_iterator_std___String_val_std___Simple_types_char16_t___
    std__basic_string_char32_t___iterator = struct_std___String_iterator_std___String_val_std___Simple_types_char32_t___
    std__basic_string_wchar_t___iterator = struct_std___String_iterator_std___String_val_std___Simple_types_wchar_t___
    std__basic_string_char___iterator = struct_std___String_iterator_std___String_val_std___Simple_types_char___
    action_activation_ctx_t = struct_action_ctx_base_t
    action_update_ctx_t = struct_action_ctx_base_t
    std__u16string = struct_std__basic_string_char16_t_
    std__u32string = struct_std__basic_string_char32_t_
    std__wstring = struct_std__basic_string_wchar_t_
    std__string = struct_std__basic_string_char_
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Scary_val = struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_____value_type = struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_
    std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
    std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_____pointer = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
    std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type = struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_
    std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__unsigned_long_long_)
    std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____const_pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_____value_type = struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_
    std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
    std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_____pointer = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_)
    std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type = struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__
    std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer = ctypes.POINTER(struct_std__pair_const_int__int_)
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Scary_val = struct_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___
    std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______const_pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_int__int___void__P_)
    std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int______Nodeptr = ctypes.POINTER(struct_std___Tree_node_int__void__P_)
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Scary_val = struct_std___Tree_val_std___Tree_simple_types_int__
    std__basic_string_char16_t___reverse_iterator = struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t____
    std__basic_string_char32_t___reverse_iterator = struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t____
    std__basic_string_wchar_t___reverse_iterator = struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t____
    std__basic_string_char___reverse_iterator = struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char____
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
    std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
    std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____
    std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____
    std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Unchecked_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___
    std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____
    std___Tree_val_std___Tree_simple_types_int_____Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Scary_val = struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Unchecked_iterator = struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____
    std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Scary_val = struct_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____const_iterator = struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer = ctypes.POINTER(struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_)
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____iterator = struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_)
    std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer = ctypes.POINTER(struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__)
    std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________Nodeptr = ctypes.POINTER(struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_)
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Unchecked_iterator = struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____const_iterator = struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____iterator = struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____const_iterator = struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____iterator = struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____const_reverse_iterator = struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____
    std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____reverse_iterator = struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____
    std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____const_reverse_iterator = struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____
    std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______Unchecked_const_iterator = struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____
    std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____reverse_iterator = struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____const_reverse_iterator = struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____
    std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____reverse_iterator = struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Unchecked_iterator = struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____const_iterator = struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____iterator = struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Unchecked_iterator = struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____const_iterator = struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____iterator = struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____const_reverse_iterator = struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____
    std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____reverse_iterator = struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____const_reverse_iterator = struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______
    std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____reverse_iterator = struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______
    Err = _libraries['FIXME_STUB'].Err
    Err.restype = None
    Err.argtypes = [help_t]
    HUGE = (ctypes.c_double).in_dll(_libraries['FIXME_STUB'], 'HUGE') if getattr(_libraries['FIXME_STUB'], 'HUGE', None) else None
    Info = _libraries['FIXME_STUB'].Info
    Info.restype = None
    Info.argtypes = [help_t]
    MD5Final = _libraries['FIXME_STUB'].MD5Final
    MD5Final.restype = None
    MD5Final.argtypes = [ctypes.c_ubyte * 16, ctypes.POINTER(struct_MD5Context)]
    MD5Init = _libraries['FIXME_STUB'].MD5Init
    MD5Init.restype = None
    MD5Init.argtypes = [ctypes.POINTER(struct_MD5Context)]
    MD5Transform = _libraries['FIXME_STUB'].MD5Transform
    MD5Transform.restype = None
    MD5Transform.argtypes = [ctypes.c_uint32 * 4, ctypes.c_uint32 * 16]
    MD5Update = _libraries['FIXME_STUB'].MD5Update
    MD5Update.restype = None
    MD5Update.argtypes = [ctypes.POINTER(struct_MD5Context), ctypes.POINTER(None), size_t]
    Message = _libraries['FIXME_STUB'].Message
    Message.restype = ctypes.c_int32
    Message.argtypes = [help_t]
    PLUGIN = (struct_plugin_t).in_dll(_libraries['FIXME_STUB'], 'PLUGIN') if getattr(_libraries['FIXME_STUB'], 'PLUGIN', None) else None
    Warn = _libraries['FIXME_STUB'].Warn
    Warn.restype = None
    Warn.argtypes = [help_t]
    _Adjust_manually_vector_aligned = _libraries['FIXME_STUB']._Adjust_manually_vector_aligned
    _Adjust_manually_vector_aligned.restype = None
    _Adjust_manually_vector_aligned.argtypes = [ctypes.POINTER(ctypes.POINTER(None)), ctypes.POINTER(size_t)]
    _BitScanForward = _libraries['FIXME_STUB']._BitScanForward
    _BitScanForward.restype = ctypes.c_ubyte
    _BitScanForward.argtypes = [ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32]
    _BitScanForward64 = _libraries['FIXME_STUB']._BitScanForward64
    _BitScanForward64.restype = ctypes.c_ubyte
    _BitScanForward64.argtypes = [ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint64]
    _BitScanReverse = _libraries['FIXME_STUB']._BitScanReverse
    _BitScanReverse.restype = ctypes.c_ubyte
    _BitScanReverse.argtypes = [ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32]
    _BitScanReverse64 = _libraries['FIXME_STUB']._BitScanReverse64
    _BitScanReverse64.restype = ctypes.c_ubyte
    _BitScanReverse64.argtypes = [ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint64]
    _Convert_size = _libraries['FIXME_STUB']._Convert_size
    _Convert_size.restype = size_t
    _Convert_size.argtypes = [size_t]
    _Denorm_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_Denorm_C') if getattr(_libraries['FIXME_STUB'], '_Denorm_C', None) else None
    _Eps_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_Eps_C') if getattr(_libraries['FIXME_STUB'], '_Eps_C', None) else None
    _Exit = _libraries['FIXME_STUB']._Exit
    _Exit.restype = None
    _Exit.argtypes = [ctypes.c_int32]
    _FDenorm_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_FDenorm_C') if getattr(_libraries['FIXME_STUB'], '_FDenorm_C', None) else None
    _FEps_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_FEps_C') if getattr(_libraries['FIXME_STUB'], '_FEps_C', None) else None
    _FInf_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_FInf_C') if getattr(_libraries['FIXME_STUB'], '_FInf_C', None) else None
    _FNan_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_FNan_C') if getattr(_libraries['FIXME_STUB'], '_FNan_C', None) else None
    _FRteps_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_FRteps_C') if getattr(_libraries['FIXME_STUB'], '_FRteps_C', None) else None
    _FSnan_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_FSnan_C') if getattr(_libraries['FIXME_STUB'], '_FSnan_C', None) else None
    _FXbig_C = (ctypes.c_float).in_dll(_libraries['FIXME_STUB'], '_FXbig_C') if getattr(_libraries['FIXME_STUB'], '_FXbig_C', None) else None
    _FZero_C = (ctypes.c_float).in_dll(_libraries['FIXME_STUB'], '_FZero_C') if getattr(_libraries['FIXME_STUB'], '_FZero_C', None) else None
    _Fnv1a_append_bytes = _libraries['FIXME_STUB']._Fnv1a_append_bytes
    _Fnv1a_append_bytes.restype = size_t
    _Fnv1a_append_bytes.argtypes = [size_t, ctypes.POINTER(ctypes.c_ubyte), size_t]
    _HUGE = (ctypes.c_double).in_dll(_libraries['FIXME_STUB'], '_HUGE') if getattr(_libraries['FIXME_STUB'], '_HUGE', None) else None
    _Hugeval_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_Hugeval_C') if getattr(_libraries['FIXME_STUB'], '_Hugeval_C', None) else None
    _Idl_dist_add = _libraries['FIXME_STUB']._Idl_dist_add
    _Idl_dist_add.restype = struct_std___Distance_unknown
    _Idl_dist_add.argtypes = [struct_std___Distance_unknown, struct_std___Distance_unknown]
    _Inf_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_Inf_C') if getattr(_libraries['FIXME_STUB'], '_Inf_C', None) else None
    _InterlockedAnd = _libraries['FIXME_STUB']._InterlockedAnd
    _InterlockedAnd.restype = ctypes.c_int32
    _InterlockedAnd.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_int32]
    _InterlockedAnd16 = _libraries['FIXME_STUB']._InterlockedAnd16
    _InterlockedAnd16.restype = ctypes.c_int16
    _InterlockedAnd16.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16]
    _InterlockedAnd64 = _libraries['FIXME_STUB']._InterlockedAnd64
    _InterlockedAnd64.restype = ctypes.c_int64
    _InterlockedAnd64.argtypes = [ctypes.POINTER(ctypes.c_int64), ctypes.c_int64]
    _InterlockedAnd8 = _libraries['FIXME_STUB']._InterlockedAnd8
    _InterlockedAnd8.restype = ctypes.c_char
    _InterlockedAnd8.argtypes = [ctypes.c_char_p, ctypes.c_char]
    _InterlockedCompareExchange = _libraries['FIXME_STUB']._InterlockedCompareExchange
    _InterlockedCompareExchange.restype = ctypes.c_int32
    _InterlockedCompareExchange.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_int32, ctypes.c_int32]
    _InterlockedCompareExchange128 = _libraries['FIXME_STUB']._InterlockedCompareExchange128
    _InterlockedCompareExchange128.restype = ctypes.c_ubyte
    _InterlockedCompareExchange128.argtypes = [ctypes.POINTER(ctypes.c_int64), ctypes.c_int64, ctypes.c_int64, ctypes.POINTER(ctypes.c_int64)]
    _InterlockedCompareExchange16 = _libraries['FIXME_STUB']._InterlockedCompareExchange16
    _InterlockedCompareExchange16.restype = ctypes.c_int16
    _InterlockedCompareExchange16.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16, ctypes.c_int16]
    _InterlockedCompareExchange64 = _libraries['FIXME_STUB']._InterlockedCompareExchange64
    _InterlockedCompareExchange64.restype = ctypes.c_int64
    _InterlockedCompareExchange64.argtypes = [ctypes.POINTER(ctypes.c_int64), ctypes.c_int64, ctypes.c_int64]
    _InterlockedCompareExchange8 = _libraries['FIXME_STUB']._InterlockedCompareExchange8
    _InterlockedCompareExchange8.restype = ctypes.c_char
    _InterlockedCompareExchange8.argtypes = [ctypes.c_char_p, ctypes.c_char, ctypes.c_char]
    _InterlockedDecrement = _libraries['FIXME_STUB']._InterlockedDecrement
    _InterlockedDecrement.restype = ctypes.c_int32
    _InterlockedDecrement.argtypes = [ctypes.POINTER(ctypes.c_int32)]
    _InterlockedDecrement16 = _libraries['FIXME_STUB']._InterlockedDecrement16
    _InterlockedDecrement16.restype = ctypes.c_int16
    _InterlockedDecrement16.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _InterlockedDecrement64 = _libraries['FIXME_STUB']._InterlockedDecrement64
    _InterlockedDecrement64.restype = ctypes.c_int64
    _InterlockedDecrement64.argtypes = [ctypes.POINTER(ctypes.c_int64)]
    _InterlockedExchange = _libraries['FIXME_STUB']._InterlockedExchange
    _InterlockedExchange.restype = ctypes.c_int32
    _InterlockedExchange.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_int32]
    _InterlockedExchange16 = _libraries['FIXME_STUB']._InterlockedExchange16
    _InterlockedExchange16.restype = ctypes.c_int16
    _InterlockedExchange16.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16]
    _InterlockedExchange64 = _libraries['FIXME_STUB']._InterlockedExchange64
    _InterlockedExchange64.restype = ctypes.c_int64
    _InterlockedExchange64.argtypes = [ctypes.POINTER(ctypes.c_int64), ctypes.c_int64]
    _InterlockedExchange8 = _libraries['FIXME_STUB']._InterlockedExchange8
    _InterlockedExchange8.restype = ctypes.c_char
    _InterlockedExchange8.argtypes = [ctypes.c_char_p, ctypes.c_char]
    _InterlockedExchangeAdd = _libraries['FIXME_STUB']._InterlockedExchangeAdd
    _InterlockedExchangeAdd.restype = ctypes.c_int32
    _InterlockedExchangeAdd.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_int32]
    _InterlockedExchangeAdd16 = _libraries['FIXME_STUB']._InterlockedExchangeAdd16
    _InterlockedExchangeAdd16.restype = ctypes.c_int16
    _InterlockedExchangeAdd16.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16]
    _InterlockedExchangeAdd64 = _libraries['FIXME_STUB']._InterlockedExchangeAdd64
    _InterlockedExchangeAdd64.restype = ctypes.c_int64
    _InterlockedExchangeAdd64.argtypes = [ctypes.POINTER(ctypes.c_int64), ctypes.c_int64]
    _InterlockedExchangeAdd8 = _libraries['FIXME_STUB']._InterlockedExchangeAdd8
    _InterlockedExchangeAdd8.restype = ctypes.c_char
    _InterlockedExchangeAdd8.argtypes = [ctypes.c_char_p, ctypes.c_char]
    _InterlockedIncrement = _libraries['FIXME_STUB']._InterlockedIncrement
    _InterlockedIncrement.restype = ctypes.c_int32
    _InterlockedIncrement.argtypes = [ctypes.POINTER(ctypes.c_int32)]
    _InterlockedIncrement16 = _libraries['FIXME_STUB']._InterlockedIncrement16
    _InterlockedIncrement16.restype = ctypes.c_int16
    _InterlockedIncrement16.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _InterlockedIncrement64 = _libraries['FIXME_STUB']._InterlockedIncrement64
    _InterlockedIncrement64.restype = ctypes.c_int64
    _InterlockedIncrement64.argtypes = [ctypes.POINTER(ctypes.c_int64)]
    _InterlockedOr = _libraries['FIXME_STUB']._InterlockedOr
    _InterlockedOr.restype = ctypes.c_int32
    _InterlockedOr.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_int32]
    _InterlockedOr16 = _libraries['FIXME_STUB']._InterlockedOr16
    _InterlockedOr16.restype = ctypes.c_int16
    _InterlockedOr16.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16]
    _InterlockedOr64 = _libraries['FIXME_STUB']._InterlockedOr64
    _InterlockedOr64.restype = ctypes.c_int64
    _InterlockedOr64.argtypes = [ctypes.POINTER(ctypes.c_int64), ctypes.c_int64]
    _InterlockedOr8 = _libraries['FIXME_STUB']._InterlockedOr8
    _InterlockedOr8.restype = ctypes.c_char
    _InterlockedOr8.argtypes = [ctypes.c_char_p, ctypes.c_char]
    _InterlockedXor = _libraries['FIXME_STUB']._InterlockedXor
    _InterlockedXor.restype = ctypes.c_int32
    _InterlockedXor.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_int32]
    _InterlockedXor16 = _libraries['FIXME_STUB']._InterlockedXor16
    _InterlockedXor16.restype = ctypes.c_int16
    _InterlockedXor16.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16]
    _InterlockedXor64 = _libraries['FIXME_STUB']._InterlockedXor64
    _InterlockedXor64.restype = ctypes.c_int64
    _InterlockedXor64.argtypes = [ctypes.POINTER(ctypes.c_int64), ctypes.c_int64]
    _InterlockedXor8 = _libraries['FIXME_STUB']._InterlockedXor8
    _InterlockedXor8.restype = ctypes.c_char
    _InterlockedXor8.argtypes = [ctypes.c_char_p, ctypes.c_char]
    _Is_pow_2 = _libraries['FIXME_STUB']._Is_pow_2
    _Is_pow_2.restype = ctypes.c_char
    _Is_pow_2.argtypes = [size_t]
    _LDenorm_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_LDenorm_C') if getattr(_libraries['FIXME_STUB'], '_LDenorm_C', None) else None
    _LEps_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_LEps_C') if getattr(_libraries['FIXME_STUB'], '_LEps_C', None) else None
    _LInf_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_LInf_C') if getattr(_libraries['FIXME_STUB'], '_LInf_C', None) else None
    _LNan_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_LNan_C') if getattr(_libraries['FIXME_STUB'], '_LNan_C', None) else None
    _LRteps_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_LRteps_C') if getattr(_libraries['FIXME_STUB'], '_LRteps_C', None) else None
    _LSnan_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_LSnan_C') if getattr(_libraries['FIXME_STUB'], '_LSnan_C', None) else None
    _LXbig_C = (ctypes.c_double).in_dll(_libraries['FIXME_STUB'], '_LXbig_C') if getattr(_libraries['FIXME_STUB'], '_LXbig_C', None) else None
    _LZero_C = (ctypes.c_double).in_dll(_libraries['FIXME_STUB'], '_LZero_C') if getattr(_libraries['FIXME_STUB'], '_LZero_C', None) else None
    _MallocaComputeSize = _libraries['FIXME_STUB']._MallocaComputeSize
    _MallocaComputeSize.restype = size_t
    _MallocaComputeSize.argtypes = [size_t]
    _MarkAllocaS = _libraries['FIXME_STUB']._MarkAllocaS
    _MarkAllocaS.restype = ctypes.POINTER(None)
    _MarkAllocaS.argtypes = [ctypes.POINTER(None), ctypes.c_uint32]
    _Nan_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_Nan_C') if getattr(_libraries['FIXME_STUB'], '_Nan_C', None) else None
    _ReadWriteBarrier = _libraries['FIXME_STUB']._ReadWriteBarrier
    _ReadWriteBarrier.restype = None
    _ReadWriteBarrier.argtypes = []
    _Rteps_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_Rteps_C') if getattr(_libraries['FIXME_STUB'], '_Rteps_C', None) else None
    _Snan_C = (union__float_const).in_dll(_libraries['FIXME_STUB'], '_Snan_C') if getattr(_libraries['FIXME_STUB'], '_Snan_C', None) else None
    _Throw_bad_array_new_length = _libraries['FIXME_STUB']._Throw_bad_array_new_length
    _Throw_bad_array_new_length.restype = None
    _Throw_bad_array_new_length.argtypes = []
    _Throw_tree_length_error = _libraries['FIXME_STUB']._Throw_tree_length_error
    _Throw_tree_length_error.restype = None
    _Throw_tree_length_error.argtypes = []
    _XGetLastError = _libraries['FIXME_STUB']._XGetLastError
    _XGetLastError.restype = None
    _XGetLastError.argtypes = []
    _Xbad_alloc = _libraries['FIXME_STUB']._Xbad_alloc
    _Xbad_alloc.restype = None
    _Xbad_alloc.argtypes = []
    _Xbig_C = (ctypes.c_double).in_dll(_libraries['FIXME_STUB'], '_Xbig_C') if getattr(_libraries['FIXME_STUB'], '_Xbig_C', None) else None
    _Xinvalid_argument = _libraries['FIXME_STUB']._Xinvalid_argument
    _Xinvalid_argument.restype = None
    _Xinvalid_argument.argtypes = [ctypes.c_char_p]
    _Xlen_string = _libraries['FIXME_STUB']._Xlen_string
    _Xlen_string.restype = None
    _Xlen_string.argtypes = []
    _Xlength_error = _libraries['FIXME_STUB']._Xlength_error
    _Xlength_error.restype = None
    _Xlength_error.argtypes = [ctypes.c_char_p]
    _Xout_of_range = _libraries['FIXME_STUB']._Xout_of_range
    _Xout_of_range.restype = None
    _Xout_of_range.argtypes = [ctypes.c_char_p]
    _Xoverflow_error = _libraries['FIXME_STUB']._Xoverflow_error
    _Xoverflow_error.restype = None
    _Xoverflow_error.argtypes = [ctypes.c_char_p]
    _Xruntime_error = _libraries['FIXME_STUB']._Xruntime_error
    _Xruntime_error.restype = None
    _Xruntime_error.argtypes = [ctypes.c_char_p]
    _Zero_C = (ctypes.c_double).in_dll(_libraries['FIXME_STUB'], '_Zero_C') if getattr(_libraries['FIXME_STUB'], '_Zero_C', None) else None
    __ExceptionPtrAssign = _libraries['FIXME_STUB'].__ExceptionPtrAssign
    __ExceptionPtrAssign.restype = None
    __ExceptionPtrAssign.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None)]
    __ExceptionPtrCompare = _libraries['FIXME_STUB'].__ExceptionPtrCompare
    __ExceptionPtrCompare.restype = ctypes.c_char
    __ExceptionPtrCompare.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None)]
    __ExceptionPtrCopy = _libraries['FIXME_STUB'].__ExceptionPtrCopy
    __ExceptionPtrCopy.restype = None
    __ExceptionPtrCopy.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None)]
    __ExceptionPtrCopyException = _libraries['FIXME_STUB'].__ExceptionPtrCopyException
    __ExceptionPtrCopyException.restype = None
    __ExceptionPtrCopyException.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(None)]
    __ExceptionPtrCreate = _libraries['FIXME_STUB'].__ExceptionPtrCreate
    __ExceptionPtrCreate.restype = None
    __ExceptionPtrCreate.argtypes = [ctypes.POINTER(None)]
    __ExceptionPtrCurrentException = _libraries['FIXME_STUB'].__ExceptionPtrCurrentException
    __ExceptionPtrCurrentException.restype = None
    __ExceptionPtrCurrentException.argtypes = [ctypes.POINTER(None)]
    __ExceptionPtrDestroy = _libraries['FIXME_STUB'].__ExceptionPtrDestroy
    __ExceptionPtrDestroy.restype = None
    __ExceptionPtrDestroy.argtypes = [ctypes.POINTER(None)]
    __ExceptionPtrRethrow = _libraries['FIXME_STUB'].__ExceptionPtrRethrow
    __ExceptionPtrRethrow.restype = None
    __ExceptionPtrRethrow.argtypes = [ctypes.POINTER(None)]
    __ExceptionPtrSwap = _libraries['FIXME_STUB'].__ExceptionPtrSwap
    __ExceptionPtrSwap.restype = None
    __ExceptionPtrSwap.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None)]
    __ExceptionPtrToBool = _libraries['FIXME_STUB'].__ExceptionPtrToBool
    __ExceptionPtrToBool.restype = ctypes.c_char
    __ExceptionPtrToBool.argtypes = [ctypes.POINTER(None)]
    ___mb_cur_max_func = _libraries['FIXME_STUB'].___mb_cur_max_func
    ___mb_cur_max_func.restype = ctypes.c_int32
    ___mb_cur_max_func.argtypes = []
    ___mb_cur_max_l_func = _libraries['FIXME_STUB'].___mb_cur_max_l_func
    ___mb_cur_max_l_func.restype = ctypes.c_int32
    ___mb_cur_max_l_func.argtypes = [_locale_t]
    __acrt_get_locale_data_prefix = _libraries['FIXME_STUB'].__acrt_get_locale_data_prefix
    __acrt_get_locale_data_prefix.restype = ctypes.POINTER(struct___crt_locale_data_public)
    __acrt_get_locale_data_prefix.argtypes = [ctypes.POINTER(None)]
    __acrt_iob_func = _libraries['FIXME_STUB'].__acrt_iob_func
    __acrt_iob_func.restype = ctypes.POINTER(FILE)
    __acrt_iob_func.argtypes = [ctypes.c_uint32]
    __acrt_locale_get_ctype_array_value = _libraries['FIXME_STUB'].__acrt_locale_get_ctype_array_value
    __acrt_locale_get_ctype_array_value.restype = ctypes.c_int32
    __acrt_locale_get_ctype_array_value.argtypes = [ctypes.POINTER(ctypes.c_uint16), ctypes.c_int32, ctypes.c_int32]
    __ascii_iswalpha = _libraries['FIXME_STUB'].__ascii_iswalpha
    __ascii_iswalpha.restype = ctypes.c_int32
    __ascii_iswalpha.argtypes = [ctypes.c_int32]
    __ascii_iswdigit = _libraries['FIXME_STUB'].__ascii_iswdigit
    __ascii_iswdigit.restype = ctypes.c_int32
    __ascii_iswdigit.argtypes = [ctypes.c_int32]
    __ascii_tolower = _libraries['FIXME_STUB'].__ascii_tolower
    __ascii_tolower.restype = ctypes.c_int32
    __ascii_tolower.argtypes = [ctypes.c_int32]
    __ascii_toupper = _libraries['FIXME_STUB'].__ascii_toupper
    __ascii_toupper.restype = ctypes.c_int32
    __ascii_toupper.argtypes = [ctypes.c_int32]
    __ascii_towlower = _libraries['FIXME_STUB'].__ascii_towlower
    __ascii_towlower.restype = ctypes.c_int32
    __ascii_towlower.argtypes = [ctypes.c_int32]
    __ascii_towupper = _libraries['FIXME_STUB'].__ascii_towupper
    __ascii_towupper.restype = ctypes.c_int32
    __ascii_towupper.argtypes = [ctypes.c_int32]
    __builtin_assume_aligned = _libraries['FIXME_STUB'].__builtin_assume_aligned
    __builtin_assume_aligned.restype = ctypes.POINTER(None)
    __builtin_assume_aligned.argtypes = [ctypes.POINTER(None), size_t]
    __ceil = _libraries['FIXME_STUB'].__ceil
    __ceil.restype = ctypes.c_double
    __ceil.argtypes = [ctypes.c_double]
    __ceilf = _libraries['FIXME_STUB'].__ceilf
    __ceilf.restype = ctypes.c_float
    __ceilf.argtypes = [ctypes.c_float]
    va_list = ctypes.POINTER(ctypes.POINTER(None))
    __conio_common_vcwprintf = _libraries['FIXME_STUB'].__conio_common_vcwprintf
    __conio_common_vcwprintf.restype = ctypes.c_int32
    __conio_common_vcwprintf.argtypes = [ctypes.c_uint64, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __conio_common_vcwprintf_p = _libraries['FIXME_STUB'].__conio_common_vcwprintf_p
    __conio_common_vcwprintf_p.restype = ctypes.c_int32
    __conio_common_vcwprintf_p.argtypes = [ctypes.c_uint64, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __conio_common_vcwprintf_s = _libraries['FIXME_STUB'].__conio_common_vcwprintf_s
    __conio_common_vcwprintf_s.restype = ctypes.c_int32
    __conio_common_vcwprintf_s.argtypes = [ctypes.c_uint64, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __conio_common_vcwscanf = _libraries['FIXME_STUB'].__conio_common_vcwscanf
    __conio_common_vcwscanf.restype = ctypes.c_int32
    __conio_common_vcwscanf.argtypes = [ctypes.c_uint64, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __copysign = _libraries['FIXME_STUB'].__copysign
    __copysign.restype = ctypes.c_double
    __copysign.argtypes = [ctypes.c_double, ctypes.c_double]
    __copysignf = _libraries['FIXME_STUB'].__copysignf
    __copysignf.restype = ctypes.c_float
    __copysignf.argtypes = [ctypes.c_float, ctypes.c_float]
    __daylight = _libraries['FIXME_STUB'].__daylight
    __daylight.restype = ctypes.POINTER(ctypes.c_int32)
    __daylight.argtypes = []
    __doserrno = _libraries['FIXME_STUB'].__doserrno
    __doserrno.restype = ctypes.POINTER(ctypes.c_uint32)
    __doserrno.argtypes = []
    __dstbias = _libraries['FIXME_STUB'].__dstbias
    __dstbias.restype = ctypes.POINTER(ctypes.c_int32)
    __dstbias.argtypes = []
    __floor = _libraries['FIXME_STUB'].__floor
    __floor.restype = ctypes.c_double
    __floor.argtypes = [ctypes.c_double]
    __floorf = _libraries['FIXME_STUB'].__floorf
    __floorf.restype = ctypes.c_float
    __floorf.argtypes = [ctypes.c_float]
    __fpe_flt_rounds = _libraries['FIXME_STUB'].__fpe_flt_rounds
    __fpe_flt_rounds.restype = ctypes.c_int32
    __fpe_flt_rounds.argtypes = []
    __fpecode = _libraries['FIXME_STUB'].__fpecode
    __fpecode.restype = ctypes.POINTER(ctypes.c_int32)
    __fpecode.argtypes = []
    __isa_available = (ctypes.c_int32).in_dll(_libraries['FIXME_STUB'], '__isa_available') if getattr(_libraries['FIXME_STUB'], '__isa_available', None) else None
    __isascii = _libraries['FIXME_STUB'].__isascii
    __isascii.restype = ctypes.c_int32
    __isascii.argtypes = [ctypes.c_int32]
    __iscsym = _libraries['FIXME_STUB'].__iscsym
    __iscsym.restype = ctypes.c_int32
    __iscsym.argtypes = [ctypes.c_int32]
    __iscsymf = _libraries['FIXME_STUB'].__iscsymf
    __iscsymf.restype = ctypes.c_int32
    __iscsymf.argtypes = [ctypes.c_int32]
    __iso_volatile_load16 = _libraries['FIXME_STUB'].__iso_volatile_load16
    __iso_volatile_load16.restype = ctypes.c_int16
    __iso_volatile_load16.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    __iso_volatile_load32 = _libraries['FIXME_STUB'].__iso_volatile_load32
    __iso_volatile_load32.restype = ctypes.c_int32
    __iso_volatile_load32.argtypes = [ctypes.POINTER(ctypes.c_int32)]
    __iso_volatile_load64 = _libraries['FIXME_STUB'].__iso_volatile_load64
    __iso_volatile_load64.restype = ctypes.c_int64
    __iso_volatile_load64.argtypes = [ctypes.POINTER(ctypes.c_int64)]
    __iso_volatile_load8 = _libraries['FIXME_STUB'].__iso_volatile_load8
    __iso_volatile_load8.restype = ctypes.c_char
    __iso_volatile_load8.argtypes = [ctypes.c_char_p]
    __iso_volatile_store16 = _libraries['FIXME_STUB'].__iso_volatile_store16
    __iso_volatile_store16.restype = None
    __iso_volatile_store16.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16]
    __iso_volatile_store32 = _libraries['FIXME_STUB'].__iso_volatile_store32
    __iso_volatile_store32.restype = None
    __iso_volatile_store32.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_int32]
    __iso_volatile_store64 = _libraries['FIXME_STUB'].__iso_volatile_store64
    __iso_volatile_store64.restype = None
    __iso_volatile_store64.argtypes = [ctypes.POINTER(ctypes.c_int64), ctypes.c_int64]
    __iso_volatile_store8 = _libraries['FIXME_STUB'].__iso_volatile_store8
    __iso_volatile_store8.restype = None
    __iso_volatile_store8.argtypes = [ctypes.c_char_p, ctypes.c_char]
    __iswcsym = _libraries['FIXME_STUB'].__iswcsym
    __iswcsym.restype = ctypes.c_int32
    __iswcsym.argtypes = [wint_t]
    __iswcsymf = _libraries['FIXME_STUB'].__iswcsymf
    __iswcsymf.restype = ctypes.c_int32
    __iswcsymf.argtypes = [wint_t]
    __local_stdio_printf_options = _libraries['FIXME_STUB'].__local_stdio_printf_options
    __local_stdio_printf_options.restype = ctypes.POINTER(ctypes.c_uint64)
    __local_stdio_printf_options.argtypes = []
    __local_stdio_scanf_options = _libraries['FIXME_STUB'].__local_stdio_scanf_options
    __local_stdio_scanf_options.restype = ctypes.POINTER(ctypes.c_uint64)
    __local_stdio_scanf_options.argtypes = []
    __lzcnt = _libraries['FIXME_STUB'].__lzcnt
    __lzcnt.restype = ctypes.c_uint32
    __lzcnt.argtypes = [ctypes.c_uint32]
    __lzcnt16 = _libraries['FIXME_STUB'].__lzcnt16
    __lzcnt16.restype = ctypes.c_uint16
    __lzcnt16.argtypes = [ctypes.c_uint16]
    __lzcnt64 = _libraries['FIXME_STUB'].__lzcnt64
    __lzcnt64.restype = ctypes.c_uint64
    __lzcnt64.argtypes = [ctypes.c_uint64]
    __p___argc = _libraries['FIXME_STUB'].__p___argc
    __p___argc.restype = ctypes.POINTER(ctypes.c_int32)
    __p___argc.argtypes = []
    __p___argv = _libraries['FIXME_STUB'].__p___argv
    __p___argv.restype = ctypes.POINTER(ctypes.POINTER(ctypes.c_char_p))
    __p___argv.argtypes = []
    __p___wargv = _libraries['FIXME_STUB'].__p___wargv
    __p___wargv.restype = ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)))
    __p___wargv.argtypes = []
    __p__commode = _libraries['FIXME_STUB'].__p__commode
    __p__commode.restype = ctypes.POINTER(ctypes.c_int32)
    __p__commode.argtypes = []
    __p__environ = _libraries['FIXME_STUB'].__p__environ
    __p__environ.restype = ctypes.POINTER(ctypes.POINTER(ctypes.c_char_p))
    __p__environ.argtypes = []
    __p__fmode = _libraries['FIXME_STUB'].__p__fmode
    __p__fmode.restype = ctypes.POINTER(ctypes.c_int32)
    __p__fmode.argtypes = []
    __p__pgmptr = _libraries['FIXME_STUB'].__p__pgmptr
    __p__pgmptr.restype = ctypes.POINTER(ctypes.c_char_p)
    __p__pgmptr.argtypes = []
    __p__wenviron = _libraries['FIXME_STUB'].__p__wenviron
    __p__wenviron.restype = ctypes.POINTER(ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)))
    __p__wenviron.argtypes = []
    __p__wpgmptr = _libraries['FIXME_STUB'].__p__wpgmptr
    __p__wpgmptr.restype = ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))
    __p__wpgmptr.argtypes = []
    __pctype_func = _libraries['FIXME_STUB'].__pctype_func
    __pctype_func.restype = ctypes.POINTER(ctypes.c_uint16)
    __pctype_func.argtypes = []
    __popcnt = _libraries['FIXME_STUB'].__popcnt
    __popcnt.restype = ctypes.c_uint32
    __popcnt.argtypes = [ctypes.c_uint32]
    __popcnt16 = _libraries['FIXME_STUB'].__popcnt16
    __popcnt16.restype = ctypes.c_uint16
    __popcnt16.argtypes = [ctypes.c_uint16]
    __popcnt64 = _libraries['FIXME_STUB'].__popcnt64
    __popcnt64.restype = ctypes.c_uint64
    __popcnt64.argtypes = [ctypes.c_uint64]
    __pwctype_func = _libraries['FIXME_STUB'].__pwctype_func
    __pwctype_func.restype = ctypes.POINTER(wctype_t)
    __pwctype_func.argtypes = []
    __report_gsfailure = _libraries['FIXME_STUB'].__report_gsfailure
    __report_gsfailure.restype = None
    __report_gsfailure.argtypes = [uintptr_t]
    __round = _libraries['FIXME_STUB'].__round
    __round.restype = ctypes.c_double
    __round.argtypes = [ctypes.c_double]
    __roundf = _libraries['FIXME_STUB'].__roundf
    __roundf.restype = ctypes.c_float
    __roundf.argtypes = [ctypes.c_float]
    __security_check_cookie = _libraries['FIXME_STUB'].__security_check_cookie
    __security_check_cookie.restype = None
    __security_check_cookie.argtypes = [uintptr_t]
    __security_cookie = (ctypes.c_uint64).in_dll(_libraries['FIXME_STUB'], '__security_cookie') if getattr(_libraries['FIXME_STUB'], '__security_cookie', None) else None
    __security_init_cookie = _libraries['FIXME_STUB'].__security_init_cookie
    __security_init_cookie.restype = None
    __security_init_cookie.argtypes = []
    __shiftright128 = _libraries['FIXME_STUB'].__shiftright128
    __shiftright128.restype = ctypes.c_uint64
    __shiftright128.argtypes = [ctypes.c_uint64, ctypes.c_uint64, ctypes.c_ubyte]
    __signbitvalue = _libraries['FIXME_STUB'].__signbitvalue
    __signbitvalue.restype = ctypes.c_uint32
    __signbitvalue.argtypes = [ctypes.c_double]
    __signbitvaluef = _libraries['FIXME_STUB'].__signbitvaluef
    __signbitvaluef.restype = ctypes.c_uint32
    __signbitvaluef.argtypes = [ctypes.c_float]
    __std_exception_copy = _libraries['FIXME_STUB'].__std_exception_copy
    __std_exception_copy.restype = None
    __std_exception_copy.argtypes = [ctypes.POINTER(struct___std_exception_data), ctypes.POINTER(struct___std_exception_data)]
    __std_exception_destroy = _libraries['FIXME_STUB'].__std_exception_destroy
    __std_exception_destroy.restype = None
    __std_exception_destroy.argtypes = [ctypes.POINTER(struct___std_exception_data)]
    __std_reverse_copy_trivially_copyable_1 = _libraries['FIXME_STUB'].__std_reverse_copy_trivially_copyable_1
    __std_reverse_copy_trivially_copyable_1.restype = None
    __std_reverse_copy_trivially_copyable_1.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(None)]
    __std_reverse_copy_trivially_copyable_2 = _libraries['FIXME_STUB'].__std_reverse_copy_trivially_copyable_2
    __std_reverse_copy_trivially_copyable_2.restype = None
    __std_reverse_copy_trivially_copyable_2.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(None)]
    __std_reverse_copy_trivially_copyable_4 = _libraries['FIXME_STUB'].__std_reverse_copy_trivially_copyable_4
    __std_reverse_copy_trivially_copyable_4.restype = None
    __std_reverse_copy_trivially_copyable_4.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(None)]
    __std_reverse_copy_trivially_copyable_8 = _libraries['FIXME_STUB'].__std_reverse_copy_trivially_copyable_8
    __std_reverse_copy_trivially_copyable_8.restype = None
    __std_reverse_copy_trivially_copyable_8.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(None)]
    __std_reverse_trivially_swappable_1 = _libraries['FIXME_STUB'].__std_reverse_trivially_swappable_1
    __std_reverse_trivially_swappable_1.restype = None
    __std_reverse_trivially_swappable_1.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None)]
    __std_reverse_trivially_swappable_2 = _libraries['FIXME_STUB'].__std_reverse_trivially_swappable_2
    __std_reverse_trivially_swappable_2.restype = None
    __std_reverse_trivially_swappable_2.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None)]
    __std_reverse_trivially_swappable_4 = _libraries['FIXME_STUB'].__std_reverse_trivially_swappable_4
    __std_reverse_trivially_swappable_4.restype = None
    __std_reverse_trivially_swappable_4.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None)]
    __std_reverse_trivially_swappable_8 = _libraries['FIXME_STUB'].__std_reverse_trivially_swappable_8
    __std_reverse_trivially_swappable_8.restype = None
    __std_reverse_trivially_swappable_8.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None)]
    __std_swap_ranges_trivially_swappable_noalias = _libraries['FIXME_STUB'].__std_swap_ranges_trivially_swappable_noalias
    __std_swap_ranges_trivially_swappable_noalias.restype = None
    __std_swap_ranges_trivially_swappable_noalias.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(None)]
    __stdio_common_vfprintf = _libraries['FIXME_STUB'].__stdio_common_vfprintf
    __stdio_common_vfprintf.restype = ctypes.c_int32
    __stdio_common_vfprintf.argtypes = [ctypes.c_uint64, ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t, va_list]
    __stdio_common_vfprintf_p = _libraries['FIXME_STUB'].__stdio_common_vfprintf_p
    __stdio_common_vfprintf_p.restype = ctypes.c_int32
    __stdio_common_vfprintf_p.argtypes = [ctypes.c_uint64, ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t, va_list]
    __stdio_common_vfprintf_s = _libraries['FIXME_STUB'].__stdio_common_vfprintf_s
    __stdio_common_vfprintf_s.restype = ctypes.c_int32
    __stdio_common_vfprintf_s.argtypes = [ctypes.c_uint64, ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t, va_list]
    __stdio_common_vfscanf = _libraries['FIXME_STUB'].__stdio_common_vfscanf
    __stdio_common_vfscanf.restype = ctypes.c_int32
    __stdio_common_vfscanf.argtypes = [ctypes.c_uint64, ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t, va_list]
    __stdio_common_vfwprintf = _libraries['FIXME_STUB'].__stdio_common_vfwprintf
    __stdio_common_vfwprintf.restype = ctypes.c_int32
    __stdio_common_vfwprintf.argtypes = [ctypes.c_uint64, ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __stdio_common_vfwprintf_p = _libraries['FIXME_STUB'].__stdio_common_vfwprintf_p
    __stdio_common_vfwprintf_p.restype = ctypes.c_int32
    __stdio_common_vfwprintf_p.argtypes = [ctypes.c_uint64, ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __stdio_common_vfwprintf_s = _libraries['FIXME_STUB'].__stdio_common_vfwprintf_s
    __stdio_common_vfwprintf_s.restype = ctypes.c_int32
    __stdio_common_vfwprintf_s.argtypes = [ctypes.c_uint64, ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __stdio_common_vfwscanf = _libraries['FIXME_STUB'].__stdio_common_vfwscanf
    __stdio_common_vfwscanf.restype = ctypes.c_int32
    __stdio_common_vfwscanf.argtypes = [ctypes.c_uint64, ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __stdio_common_vsnprintf_s = _libraries['FIXME_STUB'].__stdio_common_vsnprintf_s
    __stdio_common_vsnprintf_s.restype = ctypes.c_int32
    __stdio_common_vsnprintf_s.argtypes = [ctypes.c_uint64, ctypes.c_char_p, size_t, size_t, ctypes.c_char_p, _locale_t, va_list]
    __stdio_common_vsnwprintf_s = _libraries['FIXME_STUB'].__stdio_common_vsnwprintf_s
    __stdio_common_vsnwprintf_s.restype = ctypes.c_int32
    __stdio_common_vsnwprintf_s.argtypes = [ctypes.c_uint64, ctypes.POINTER(ctypes.c_int16), size_t, size_t, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __stdio_common_vsprintf = _libraries['FIXME_STUB'].__stdio_common_vsprintf
    __stdio_common_vsprintf.restype = ctypes.c_int32
    __stdio_common_vsprintf.argtypes = [ctypes.c_uint64, ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t, va_list]
    __stdio_common_vsprintf_p = _libraries['FIXME_STUB'].__stdio_common_vsprintf_p
    __stdio_common_vsprintf_p.restype = ctypes.c_int32
    __stdio_common_vsprintf_p.argtypes = [ctypes.c_uint64, ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t, va_list]
    __stdio_common_vsprintf_s = _libraries['FIXME_STUB'].__stdio_common_vsprintf_s
    __stdio_common_vsprintf_s.restype = ctypes.c_int32
    __stdio_common_vsprintf_s.argtypes = [ctypes.c_uint64, ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t, va_list]
    __stdio_common_vsscanf = _libraries['FIXME_STUB'].__stdio_common_vsscanf
    __stdio_common_vsscanf.restype = ctypes.c_int32
    __stdio_common_vsscanf.argtypes = [ctypes.c_uint64, ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t, va_list]
    __stdio_common_vswprintf = _libraries['FIXME_STUB'].__stdio_common_vswprintf
    __stdio_common_vswprintf.restype = ctypes.c_int32
    __stdio_common_vswprintf.argtypes = [ctypes.c_uint64, ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __stdio_common_vswprintf_p = _libraries['FIXME_STUB'].__stdio_common_vswprintf_p
    __stdio_common_vswprintf_p.restype = ctypes.c_int32
    __stdio_common_vswprintf_p.argtypes = [ctypes.c_uint64, ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __stdio_common_vswprintf_s = _libraries['FIXME_STUB'].__stdio_common_vswprintf_s
    __stdio_common_vswprintf_s.restype = ctypes.c_int32
    __stdio_common_vswprintf_s.argtypes = [ctypes.c_uint64, ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __stdio_common_vswscanf = _libraries['FIXME_STUB'].__stdio_common_vswscanf
    __stdio_common_vswscanf.restype = ctypes.c_int32
    __stdio_common_vswscanf.argtypes = [ctypes.c_uint64, ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __strncnt = _libraries['FIXME_STUB'].__strncnt
    __strncnt.restype = size_t
    __strncnt.argtypes = [ctypes.c_char_p, size_t]
    __swprintf_l = _libraries['FIXME_STUB'].__swprintf_l
    __swprintf_l.restype = ctypes.c_int32
    __swprintf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), _locale_t]
    __sys_errlist = _libraries['FIXME_STUB'].__sys_errlist
    __sys_errlist.restype = ctypes.POINTER(ctypes.c_char_p)
    __sys_errlist.argtypes = []
    __sys_nerr = _libraries['FIXME_STUB'].__sys_nerr
    __sys_nerr.restype = ctypes.POINTER(ctypes.c_int32)
    __sys_nerr.argtypes = []
    __threadhandle = _libraries['FIXME_STUB'].__threadhandle
    __threadhandle.restype = uintptr_t
    __threadhandle.argtypes = []
    __threadid = _libraries['FIXME_STUB'].__threadid
    __threadid.restype = ctypes.c_uint32
    __threadid.argtypes = []
    __timezone = _libraries['FIXME_STUB'].__timezone
    __timezone.restype = ctypes.POINTER(ctypes.c_int32)
    __timezone.argtypes = []
    __toascii = _libraries['FIXME_STUB'].__toascii
    __toascii.restype = ctypes.c_int32
    __toascii.argtypes = [ctypes.c_int32]
    __trunc = _libraries['FIXME_STUB'].__trunc
    __trunc.restype = ctypes.c_double
    __trunc.argtypes = [ctypes.c_double]
    __truncf = _libraries['FIXME_STUB'].__truncf
    __truncf.restype = ctypes.c_float
    __truncf.argtypes = [ctypes.c_float]
    __tzname = _libraries['FIXME_STUB'].__tzname
    __tzname.restype = ctypes.POINTER(ctypes.c_char_p)
    __tzname.argtypes = []
    __uncaught_exception = _libraries['FIXME_STUB'].__uncaught_exception
    __uncaught_exception.restype = ctypes.c_char
    __uncaught_exception.argtypes = []
    __uncaught_exceptions = _libraries['FIXME_STUB'].__uncaught_exceptions
    __uncaught_exceptions.restype = ctypes.c_int32
    __uncaught_exceptions.argtypes = []
    __va_start = _libraries['FIXME_STUB'].__va_start
    __va_start.restype = None
    __va_start.argtypes = [ctypes.POINTER(va_list)]
    __vswprintf_l = _libraries['FIXME_STUB'].__vswprintf_l
    __vswprintf_l.restype = ctypes.c_int32
    __vswprintf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    __wcserror = _libraries['FIXME_STUB'].__wcserror
    __wcserror.restype = ctypes.POINTER(ctypes.c_int16)
    __wcserror.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    __wcserror_s = _libraries['FIXME_STUB'].__wcserror_s
    __wcserror_s.restype = errno_t
    __wcserror_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16)]
    _abs64 = _libraries['FIXME_STUB']._abs64
    _abs64.restype = ctypes.c_int64
    _abs64.argtypes = [ctypes.c_int64]
    _access = _libraries['FIXME_STUB']._access
    _access.restype = ctypes.c_int32
    _access.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    _access_s = _libraries['FIXME_STUB']._access_s
    _access_s.restype = errno_t
    _access_s.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    _aligned_free = _libraries['FIXME_STUB']._aligned_free
    _aligned_free.restype = None
    _aligned_free.argtypes = [ctypes.POINTER(None)]
    _aligned_malloc = _libraries['FIXME_STUB']._aligned_malloc
    _aligned_malloc.restype = ctypes.POINTER(None)
    _aligned_malloc.argtypes = [size_t, size_t]
    _aligned_msize = _libraries['FIXME_STUB']._aligned_msize
    _aligned_msize.restype = size_t
    _aligned_msize.argtypes = [ctypes.POINTER(None), size_t, size_t]
    _aligned_offset_malloc = _libraries['FIXME_STUB']._aligned_offset_malloc
    _aligned_offset_malloc.restype = ctypes.POINTER(None)
    _aligned_offset_malloc.argtypes = [size_t, size_t, size_t]
    _aligned_offset_realloc = _libraries['FIXME_STUB']._aligned_offset_realloc
    _aligned_offset_realloc.restype = ctypes.POINTER(None)
    _aligned_offset_realloc.argtypes = [ctypes.POINTER(None), size_t, size_t, size_t]
    _aligned_offset_recalloc = _libraries['FIXME_STUB']._aligned_offset_recalloc
    _aligned_offset_recalloc.restype = ctypes.POINTER(None)
    _aligned_offset_recalloc.argtypes = [ctypes.POINTER(None), size_t, size_t, size_t, size_t]
    _aligned_realloc = _libraries['FIXME_STUB']._aligned_realloc
    _aligned_realloc.restype = ctypes.POINTER(None)
    _aligned_realloc.argtypes = [ctypes.POINTER(None), size_t, size_t]
    _aligned_recalloc = _libraries['FIXME_STUB']._aligned_recalloc
    _aligned_recalloc.restype = ctypes.POINTER(None)
    _aligned_recalloc.argtypes = [ctypes.POINTER(None), size_t, size_t, size_t]
    _alloca = _libraries['FIXME_STUB']._alloca
    _alloca.restype = ctypes.POINTER(None)
    _alloca.argtypes = [size_t]
    _atodbl = _libraries['FIXME_STUB']._atodbl
    _atodbl.restype = ctypes.c_int32
    _atodbl.argtypes = [ctypes.POINTER(struct__CRT_DOUBLE), ctypes.c_char_p]
    _atodbl_l = _libraries['FIXME_STUB']._atodbl_l
    _atodbl_l.restype = ctypes.c_int32
    _atodbl_l.argtypes = [ctypes.POINTER(struct__CRT_DOUBLE), ctypes.c_char_p, _locale_t]
    _atof_l = _libraries['FIXME_STUB']._atof_l
    _atof_l.restype = ctypes.c_double
    _atof_l.argtypes = [ctypes.c_char_p, _locale_t]
    _atoflt = _libraries['FIXME_STUB']._atoflt
    _atoflt.restype = ctypes.c_int32
    _atoflt.argtypes = [ctypes.POINTER(struct__CRT_FLOAT), ctypes.c_char_p]
    _atoflt_l = _libraries['FIXME_STUB']._atoflt_l
    _atoflt_l.restype = ctypes.c_int32
    _atoflt_l.argtypes = [ctypes.POINTER(struct__CRT_FLOAT), ctypes.c_char_p, _locale_t]
    _atoi64 = _libraries['FIXME_STUB']._atoi64
    _atoi64.restype = ctypes.c_int64
    _atoi64.argtypes = [ctypes.c_char_p]
    _atoi64_l = _libraries['FIXME_STUB']._atoi64_l
    _atoi64_l.restype = ctypes.c_int64
    _atoi64_l.argtypes = [ctypes.c_char_p, _locale_t]
    _atoi_l = _libraries['FIXME_STUB']._atoi_l
    _atoi_l.restype = ctypes.c_int32
    _atoi_l.argtypes = [ctypes.c_char_p, _locale_t]
    _atol_l = _libraries['FIXME_STUB']._atol_l
    _atol_l.restype = ctypes.c_int32
    _atol_l.argtypes = [ctypes.c_char_p, _locale_t]
    _atoldbl = _libraries['FIXME_STUB']._atoldbl
    _atoldbl.restype = ctypes.c_int32
    _atoldbl.argtypes = [ctypes.POINTER(struct__LDOUBLE), ctypes.c_char_p]
    _atoldbl_l = _libraries['FIXME_STUB']._atoldbl_l
    _atoldbl_l.restype = ctypes.c_int32
    _atoldbl_l.argtypes = [ctypes.POINTER(struct__LDOUBLE), ctypes.c_char_p, _locale_t]
    _atoll_l = _libraries['FIXME_STUB']._atoll_l
    _atoll_l.restype = ctypes.c_int64
    _atoll_l.argtypes = [ctypes.c_char_p, _locale_t]
    _beep = _libraries['FIXME_STUB']._beep
    _beep.restype = None
    _beep.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
    _bittest = _libraries['FIXME_STUB']._bittest
    _bittest.restype = ctypes.c_ubyte
    _bittest.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_int32]
    _byteswap_uint64 = _libraries['FIXME_STUB']._byteswap_uint64
    _byteswap_uint64.restype = ctypes.c_uint64
    _byteswap_uint64.argtypes = [ctypes.c_uint64]
    _byteswap_ulong = _libraries['FIXME_STUB']._byteswap_ulong
    _byteswap_ulong.restype = ctypes.c_uint32
    _byteswap_ulong.argtypes = [ctypes.c_uint32]
    _byteswap_ushort = _libraries['FIXME_STUB']._byteswap_ushort
    _byteswap_ushort.restype = ctypes.c_uint16
    _byteswap_ushort.argtypes = [ctypes.c_uint16]
    _cabs = _libraries['FIXME_STUB']._cabs
    _cabs.restype = ctypes.c_double
    _cabs.argtypes = [struct__complex]
    _callnewh = _libraries['FIXME_STUB']._callnewh
    _callnewh.restype = ctypes.c_int32
    _callnewh.argtypes = [size_t]
    _calloc_base = _libraries['FIXME_STUB']._calloc_base
    _calloc_base.restype = ctypes.POINTER(None)
    _calloc_base.argtypes = [size_t, size_t]
    _cgetws_s = _libraries['FIXME_STUB']._cgetws_s
    _cgetws_s.restype = errno_t
    _cgetws_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(size_t)]
    _chdir = _libraries['FIXME_STUB']._chdir
    _chdir.restype = ctypes.c_int32
    _chdir.argtypes = [ctypes.c_char_p]
    _chdrive = _libraries['FIXME_STUB']._chdrive
    _chdrive.restype = ctypes.c_int32
    _chdrive.argtypes = [ctypes.c_int32]
    _chgsign = _libraries['FIXME_STUB']._chgsign
    _chgsign.restype = ctypes.c_double
    _chgsign.argtypes = [ctypes.c_double]
    _chgsignf = _libraries['FIXME_STUB']._chgsignf
    _chgsignf.restype = ctypes.c_float
    _chgsignf.argtypes = [ctypes.c_float]
    _chgsignl = _libraries['FIXME_STUB']._chgsignl
    _chgsignl.restype = ctypes.c_double
    _chgsignl.argtypes = [ctypes.c_double]
    _chmod = _libraries['FIXME_STUB']._chmod
    _chmod.restype = ctypes.c_int32
    _chmod.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    _chsize = _libraries['FIXME_STUB']._chsize
    _chsize.restype = ctypes.c_int32
    _chsize.argtypes = [ctypes.c_int32, ctypes.c_int32]
    _chsize_s = _libraries['FIXME_STUB']._chsize_s
    _chsize_s.restype = errno_t
    _chsize_s.argtypes = [ctypes.c_int32, ctypes.c_int64]
    _chvalidchk_l = _libraries['FIXME_STUB']._chvalidchk_l
    _chvalidchk_l.restype = ctypes.c_int32
    _chvalidchk_l.argtypes = [ctypes.c_int32, ctypes.c_int32, _locale_t]
    _clearfp = _libraries['FIXME_STUB']._clearfp
    _clearfp.restype = ctypes.c_uint32
    _clearfp.argtypes = []
    _close = _libraries['FIXME_STUB']._close
    _close.restype = ctypes.c_int32
    _close.argtypes = [ctypes.c_int32]
    _commit = _libraries['FIXME_STUB']._commit
    _commit.restype = ctypes.c_int32
    _commit.argtypes = [ctypes.c_int32]
    _control87 = _libraries['FIXME_STUB']._control87
    _control87.restype = ctypes.c_uint32
    _control87.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
    _controlfp = _libraries['FIXME_STUB']._controlfp
    _controlfp.restype = ctypes.c_uint32
    _controlfp.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
    _controlfp_s = _libraries['FIXME_STUB']._controlfp_s
    _controlfp_s.restype = errno_t
    _controlfp_s.argtypes = [ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32, ctypes.c_uint32]
    _copysign = _libraries['FIXME_STUB']._copysign
    _copysign.restype = ctypes.c_double
    _copysign.argtypes = [ctypes.c_double, ctypes.c_double]
    _copysignf = _libraries['FIXME_STUB']._copysignf
    _copysignf.restype = ctypes.c_float
    _copysignf.argtypes = [ctypes.c_float, ctypes.c_float]
    _copysignl = _libraries['FIXME_STUB']._copysignl
    _copysignl.restype = ctypes.c_double
    _copysignl.argtypes = [ctypes.c_double, ctypes.c_double]
    _cputws = _libraries['FIXME_STUB']._cputws
    _cputws.restype = ctypes.c_int32
    _cputws.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _creat = _libraries['FIXME_STUB']._creat
    _creat.restype = ctypes.c_int32
    _creat.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    _ctime32 = _libraries['FIXME_STUB']._ctime32
    _ctime32.restype = ctypes.c_char_p
    _ctime32.argtypes = [ctypes.POINTER(__time32_t)]
    _ctime32_s = _libraries['FIXME_STUB']._ctime32_s
    _ctime32_s.restype = errno_t
    _ctime32_s.argtypes = [ctypes.c_char_p, size_t, ctypes.POINTER(__time32_t)]
    _ctime64 = _libraries['FIXME_STUB']._ctime64
    _ctime64.restype = ctypes.c_char_p
    _ctime64.argtypes = [ctypes.POINTER(__time64_t)]
    _ctime64_s = _libraries['FIXME_STUB']._ctime64_s
    _ctime64_s.restype = errno_t
    _ctime64_s.argtypes = [ctypes.c_char_p, size_t, ctypes.POINTER(__time64_t)]
    _cvt_dtoi_sat = _libraries['FIXME_STUB']._cvt_dtoi_sat
    _cvt_dtoi_sat.restype = ctypes.c_int32
    _cvt_dtoi_sat.argtypes = [ctypes.c_double]
    _cvt_dtoi_sent = _libraries['FIXME_STUB']._cvt_dtoi_sent
    _cvt_dtoi_sent.restype = ctypes.c_int32
    _cvt_dtoi_sent.argtypes = [ctypes.c_double]
    _cvt_dtoll_sat = _libraries['FIXME_STUB']._cvt_dtoll_sat
    _cvt_dtoll_sat.restype = ctypes.c_int64
    _cvt_dtoll_sat.argtypes = [ctypes.c_double]
    _cvt_dtoll_sent = _libraries['FIXME_STUB']._cvt_dtoll_sent
    _cvt_dtoll_sent.restype = ctypes.c_int64
    _cvt_dtoll_sent.argtypes = [ctypes.c_double]
    _cvt_dtoui_sat = _libraries['FIXME_STUB']._cvt_dtoui_sat
    _cvt_dtoui_sat.restype = ctypes.c_uint32
    _cvt_dtoui_sat.argtypes = [ctypes.c_double]
    _cvt_dtoui_sent = _libraries['FIXME_STUB']._cvt_dtoui_sent
    _cvt_dtoui_sent.restype = ctypes.c_uint32
    _cvt_dtoui_sent.argtypes = [ctypes.c_double]
    _cvt_dtoull_sat = _libraries['FIXME_STUB']._cvt_dtoull_sat
    _cvt_dtoull_sat.restype = ctypes.c_uint64
    _cvt_dtoull_sat.argtypes = [ctypes.c_double]
    _cvt_dtoull_sent = _libraries['FIXME_STUB']._cvt_dtoull_sent
    _cvt_dtoull_sent.restype = ctypes.c_uint64
    _cvt_dtoull_sent.argtypes = [ctypes.c_double]
    _cvt_ftoi_sat = _libraries['FIXME_STUB']._cvt_ftoi_sat
    _cvt_ftoi_sat.restype = ctypes.c_int32
    _cvt_ftoi_sat.argtypes = [ctypes.c_float]
    _cvt_ftoi_sent = _libraries['FIXME_STUB']._cvt_ftoi_sent
    _cvt_ftoi_sent.restype = ctypes.c_int32
    _cvt_ftoi_sent.argtypes = [ctypes.c_float]
    _cvt_ftoll_sat = _libraries['FIXME_STUB']._cvt_ftoll_sat
    _cvt_ftoll_sat.restype = ctypes.c_int64
    _cvt_ftoll_sat.argtypes = [ctypes.c_float]
    _cvt_ftoll_sent = _libraries['FIXME_STUB']._cvt_ftoll_sent
    _cvt_ftoll_sent.restype = ctypes.c_int64
    _cvt_ftoll_sent.argtypes = [ctypes.c_float]
    _cvt_ftoui_sat = _libraries['FIXME_STUB']._cvt_ftoui_sat
    _cvt_ftoui_sat.restype = ctypes.c_uint32
    _cvt_ftoui_sat.argtypes = [ctypes.c_float]
    _cvt_ftoui_sent = _libraries['FIXME_STUB']._cvt_ftoui_sent
    _cvt_ftoui_sent.restype = ctypes.c_uint32
    _cvt_ftoui_sent.argtypes = [ctypes.c_float]
    _cvt_ftoull_sat = _libraries['FIXME_STUB']._cvt_ftoull_sat
    _cvt_ftoull_sat.restype = ctypes.c_uint64
    _cvt_ftoull_sat.argtypes = [ctypes.c_float]
    _cvt_ftoull_sent = _libraries['FIXME_STUB']._cvt_ftoull_sent
    _cvt_ftoull_sent.restype = ctypes.c_uint64
    _cvt_ftoull_sent.argtypes = [ctypes.c_float]
    _cwprintf = _libraries['FIXME_STUB']._cwprintf
    _cwprintf.restype = ctypes.c_int32
    _cwprintf.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _cwprintf_l = _libraries['FIXME_STUB']._cwprintf_l
    _cwprintf_l.restype = ctypes.c_int32
    _cwprintf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _cwprintf_p = _libraries['FIXME_STUB']._cwprintf_p
    _cwprintf_p.restype = ctypes.c_int32
    _cwprintf_p.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _cwprintf_p_l = _libraries['FIXME_STUB']._cwprintf_p_l
    _cwprintf_p_l.restype = ctypes.c_int32
    _cwprintf_p_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _cwprintf_s = _libraries['FIXME_STUB']._cwprintf_s
    _cwprintf_s.restype = ctypes.c_int32
    _cwprintf_s.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _cwprintf_s_l = _libraries['FIXME_STUB']._cwprintf_s_l
    _cwprintf_s_l.restype = ctypes.c_int32
    _cwprintf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _cwscanf = _libraries['FIXME_STUB']._cwscanf
    _cwscanf.restype = ctypes.c_int32
    _cwscanf.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _cwscanf_l = _libraries['FIXME_STUB']._cwscanf_l
    _cwscanf_l.restype = ctypes.c_int32
    _cwscanf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _cwscanf_s = _libraries['FIXME_STUB']._cwscanf_s
    _cwscanf_s.restype = ctypes.c_int32
    _cwscanf_s.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _cwscanf_s_l = _libraries['FIXME_STUB']._cwscanf_s_l
    _cwscanf_s_l.restype = ctypes.c_int32
    _cwscanf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _d_int = _libraries['FIXME_STUB']._d_int
    _d_int.restype = ctypes.c_int16
    _d_int.argtypes = [ctypes.POINTER(ctypes.c_double), ctypes.c_int16]
    _dclass = _libraries['FIXME_STUB']._dclass
    _dclass.restype = ctypes.c_int16
    _dclass.argtypes = [ctypes.c_double]
    _dexp = _libraries['FIXME_STUB']._dexp
    _dexp.restype = ctypes.c_int16
    _dexp.argtypes = [ctypes.POINTER(ctypes.c_double), ctypes.c_double, ctypes.c_int32]
    _difftime32 = _libraries['FIXME_STUB']._difftime32
    _difftime32.restype = ctypes.c_double
    _difftime32.argtypes = [__time32_t, __time32_t]
    _difftime64 = _libraries['FIXME_STUB']._difftime64
    _difftime64.restype = ctypes.c_double
    _difftime64.argtypes = [__time64_t, __time64_t]
    _dlog = _libraries['FIXME_STUB']._dlog
    _dlog.restype = ctypes.c_double
    _dlog.argtypes = [ctypes.c_double, ctypes.c_int32]
    _dnorm = _libraries['FIXME_STUB']._dnorm
    _dnorm.restype = ctypes.c_int16
    _dnorm.argtypes = [ctypes.POINTER(ctypes.c_uint16)]
    _dpcomp = _libraries['FIXME_STUB']._dpcomp
    _dpcomp.restype = ctypes.c_int32
    _dpcomp.argtypes = [ctypes.c_double, ctypes.c_double]
    _dpoly = _libraries['FIXME_STUB']._dpoly
    _dpoly.restype = ctypes.c_double
    _dpoly.argtypes = [ctypes.c_double, ctypes.POINTER(ctypes.c_double), ctypes.c_int32]
    _dscale = _libraries['FIXME_STUB']._dscale
    _dscale.restype = ctypes.c_int16
    _dscale.argtypes = [ctypes.POINTER(ctypes.c_double), ctypes.c_int32]
    _dsign = _libraries['FIXME_STUB']._dsign
    _dsign.restype = ctypes.c_int32
    _dsign.argtypes = [ctypes.c_double]
    _dsin = _libraries['FIXME_STUB']._dsin
    _dsin.restype = ctypes.c_double
    _dsin.argtypes = [ctypes.c_double, ctypes.c_uint32]
    _dtest = _libraries['FIXME_STUB']._dtest
    _dtest.restype = ctypes.c_int16
    _dtest.argtypes = [ctypes.POINTER(ctypes.c_double)]
    _dunscale = _libraries['FIXME_STUB']._dunscale
    _dunscale.restype = ctypes.c_int16
    _dunscale.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_double)]
    _dup = _libraries['FIXME_STUB']._dup
    _dup.restype = ctypes.c_int32
    _dup.argtypes = [ctypes.c_int32]
    _dup2 = _libraries['FIXME_STUB']._dup2
    _dup2.restype = ctypes.c_int32
    _dup2.argtypes = [ctypes.c_int32, ctypes.c_int32]
    _dupenv_s = _libraries['FIXME_STUB']._dupenv_s
    _dupenv_s.restype = errno_t
    _dupenv_s.argtypes = [ctypes.POINTER(ctypes.c_char_p), ctypes.POINTER(size_t), ctypes.c_char_p]
    _ecvt = _libraries['FIXME_STUB']._ecvt
    _ecvt.restype = ctypes.c_char_p
    _ecvt.argtypes = [ctypes.c_double, ctypes.c_int32, ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32)]
    _ecvt_s = _libraries['FIXME_STUB']._ecvt_s
    _ecvt_s.restype = errno_t
    _ecvt_s.argtypes = [ctypes.c_char_p, size_t, ctypes.c_double, ctypes.c_int32, ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32)]
    _eof = _libraries['FIXME_STUB']._eof
    _eof.restype = ctypes.c_int32
    _eof.argtypes = [ctypes.c_int32]
    _errno = _libraries['FIXME_STUB']._errno
    _errno.restype = ctypes.POINTER(ctypes.c_int32)
    _errno.argtypes = []
    _exit = _libraries['FIXME_STUB']._exit
    _exit.restype = None
    _exit.argtypes = [ctypes.c_int32]
    _expand = _libraries['FIXME_STUB']._expand
    _expand.restype = ctypes.POINTER(None)
    _expand.argtypes = [ctypes.POINTER(None), size_t]
    _fclose_nolock = _libraries['FIXME_STUB']._fclose_nolock
    _fclose_nolock.restype = ctypes.c_int32
    _fclose_nolock.argtypes = [ctypes.POINTER(FILE)]
    _fcloseall = _libraries['FIXME_STUB']._fcloseall
    _fcloseall.restype = ctypes.c_int32
    _fcloseall.argtypes = []
    _fcvt = _libraries['FIXME_STUB']._fcvt
    _fcvt.restype = ctypes.c_char_p
    _fcvt.argtypes = [ctypes.c_double, ctypes.c_int32, ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32)]
    _fcvt_s = _libraries['FIXME_STUB']._fcvt_s
    _fcvt_s.restype = errno_t
    _fcvt_s.argtypes = [ctypes.c_char_p, size_t, ctypes.c_double, ctypes.c_int32, ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32)]
    _fd_int = _libraries['FIXME_STUB']._fd_int
    _fd_int.restype = ctypes.c_int16
    _fd_int.argtypes = [ctypes.POINTER(ctypes.c_float), ctypes.c_int16]
    _fdclass = _libraries['FIXME_STUB']._fdclass
    _fdclass.restype = ctypes.c_int16
    _fdclass.argtypes = [ctypes.c_float]
    _fdexp = _libraries['FIXME_STUB']._fdexp
    _fdexp.restype = ctypes.c_int16
    _fdexp.argtypes = [ctypes.POINTER(ctypes.c_float), ctypes.c_float, ctypes.c_int32]
    _fdlog = _libraries['FIXME_STUB']._fdlog
    _fdlog.restype = ctypes.c_float
    _fdlog.argtypes = [ctypes.c_float, ctypes.c_int32]
    _fdnorm = _libraries['FIXME_STUB']._fdnorm
    _fdnorm.restype = ctypes.c_int16
    _fdnorm.argtypes = [ctypes.POINTER(ctypes.c_uint16)]
    _fdopen = _libraries['FIXME_STUB']._fdopen
    _fdopen.restype = ctypes.POINTER(FILE)
    _fdopen.argtypes = [ctypes.c_int32, ctypes.c_char_p]
    _fdpcomp = _libraries['FIXME_STUB']._fdpcomp
    _fdpcomp.restype = ctypes.c_int32
    _fdpcomp.argtypes = [ctypes.c_float, ctypes.c_float]
    _fdpoly = _libraries['FIXME_STUB']._fdpoly
    _fdpoly.restype = ctypes.c_float
    _fdpoly.argtypes = [ctypes.c_float, ctypes.POINTER(ctypes.c_float), ctypes.c_int32]
    _fdscale = _libraries['FIXME_STUB']._fdscale
    _fdscale.restype = ctypes.c_int16
    _fdscale.argtypes = [ctypes.POINTER(ctypes.c_float), ctypes.c_int32]
    _fdsign = _libraries['FIXME_STUB']._fdsign
    _fdsign.restype = ctypes.c_int32
    _fdsign.argtypes = [ctypes.c_float]
    _fdsin = _libraries['FIXME_STUB']._fdsin
    _fdsin.restype = ctypes.c_float
    _fdsin.argtypes = [ctypes.c_float, ctypes.c_uint32]
    _fdtest = _libraries['FIXME_STUB']._fdtest
    _fdtest.restype = ctypes.c_int16
    _fdtest.argtypes = [ctypes.POINTER(ctypes.c_float)]
    _fdunscale = _libraries['FIXME_STUB']._fdunscale
    _fdunscale.restype = ctypes.c_int16
    _fdunscale.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_float)]
    _fflush_nolock = _libraries['FIXME_STUB']._fflush_nolock
    _fflush_nolock.restype = ctypes.c_int32
    _fflush_nolock.argtypes = [ctypes.POINTER(FILE)]
    _fgetc_nolock = _libraries['FIXME_STUB']._fgetc_nolock
    _fgetc_nolock.restype = ctypes.c_int32
    _fgetc_nolock.argtypes = [ctypes.POINTER(FILE)]
    _fgetchar = _libraries['FIXME_STUB']._fgetchar
    _fgetchar.restype = ctypes.c_int32
    _fgetchar.argtypes = []
    _fgetwc_nolock = _libraries['FIXME_STUB']._fgetwc_nolock
    _fgetwc_nolock.restype = wint_t
    _fgetwc_nolock.argtypes = [ctypes.POINTER(FILE)]
    _fgetwchar = _libraries['FIXME_STUB']._fgetwchar
    _fgetwchar.restype = wint_t
    _fgetwchar.argtypes = []
    _filelength = _libraries['FIXME_STUB']._filelength
    _filelength.restype = ctypes.c_int32
    _filelength.argtypes = [ctypes.c_int32]
    _filelengthi64 = _libraries['FIXME_STUB']._filelengthi64
    _filelengthi64.restype = ctypes.c_int64
    _filelengthi64.argtypes = [ctypes.c_int32]
    _fileno = _libraries['FIXME_STUB']._fileno
    _fileno.restype = ctypes.c_int32
    _fileno.argtypes = [ctypes.POINTER(FILE)]
    _findclose = _libraries['FIXME_STUB']._findclose
    _findclose.restype = ctypes.c_int32
    _findclose.argtypes = [intptr_t]
    _findfirst32 = _libraries['FIXME_STUB']._findfirst32
    _findfirst32.restype = intptr_t
    _findfirst32.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct__finddata32_t)]
    _findfirst32i64 = _libraries['FIXME_STUB']._findfirst32i64
    _findfirst32i64.restype = intptr_t
    _findfirst32i64.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct__finddata32i64_t)]
    _findfirst64 = _libraries['FIXME_STUB']._findfirst64
    _findfirst64.restype = intptr_t
    _findfirst64.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct___finddata64_t)]
    _findfirst64i32 = _libraries['FIXME_STUB']._findfirst64i32
    _findfirst64i32.restype = intptr_t
    _findfirst64i32.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct__finddata64i32_t)]
    _findnext32 = _libraries['FIXME_STUB']._findnext32
    _findnext32.restype = ctypes.c_int32
    _findnext32.argtypes = [intptr_t, ctypes.POINTER(struct__finddata32_t)]
    _findnext32i64 = _libraries['FIXME_STUB']._findnext32i64
    _findnext32i64.restype = ctypes.c_int32
    _findnext32i64.argtypes = [intptr_t, ctypes.POINTER(struct__finddata32i64_t)]
    _findnext64 = _libraries['FIXME_STUB']._findnext64
    _findnext64.restype = ctypes.c_int32
    _findnext64.argtypes = [intptr_t, ctypes.POINTER(struct___finddata64_t)]
    _findnext64i32 = _libraries['FIXME_STUB']._findnext64i32
    _findnext64i32.restype = ctypes.c_int32
    _findnext64i32.argtypes = [intptr_t, ctypes.POINTER(struct__finddata64i32_t)]
    _finite = _libraries['FIXME_STUB']._finite
    _finite.restype = ctypes.c_int32
    _finite.argtypes = [ctypes.c_double]
    _finitef = _libraries['FIXME_STUB']._finitef
    _finitef.restype = ctypes.c_int32
    _finitef.argtypes = [ctypes.c_float]
    _flushall = _libraries['FIXME_STUB']._flushall
    _flushall.restype = ctypes.c_int32
    _flushall.argtypes = []
    _fpclass = _libraries['FIXME_STUB']._fpclass
    _fpclass.restype = ctypes.c_int32
    _fpclass.argtypes = [ctypes.c_double]
    _fpclassf = _libraries['FIXME_STUB']._fpclassf
    _fpclassf.restype = ctypes.c_int32
    _fpclassf.argtypes = [ctypes.c_float]
    _fpcomp = _libraries['FIXME_STUB']._fpcomp
    _fpcomp.restype = ctypes.c_int32
    _fpcomp.argtypes = [ctypes.c_double, ctypes.c_double]
    _fperrraise = _libraries['FIXME_STUB']._fperrraise
    _fperrraise.restype = None
    _fperrraise.argtypes = [ctypes.c_int32]
    _fpreset = _libraries['FIXME_STUB']._fpreset
    _fpreset.restype = None
    _fpreset.argtypes = []
    _fprintf_l = _libraries['FIXME_STUB']._fprintf_l
    _fprintf_l.restype = ctypes.c_int32
    _fprintf_l.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t]
    _fprintf_p = _libraries['FIXME_STUB']._fprintf_p
    _fprintf_p.restype = ctypes.c_int32
    _fprintf_p.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p]
    _fprintf_p_l = _libraries['FIXME_STUB']._fprintf_p_l
    _fprintf_p_l.restype = ctypes.c_int32
    _fprintf_p_l.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t]
    _fprintf_s_l = _libraries['FIXME_STUB']._fprintf_s_l
    _fprintf_s_l.restype = ctypes.c_int32
    _fprintf_s_l.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t]
    _fputc_nolock = _libraries['FIXME_STUB']._fputc_nolock
    _fputc_nolock.restype = ctypes.c_int32
    _fputc_nolock.argtypes = [ctypes.c_int32, ctypes.POINTER(FILE)]
    _fputchar = _libraries['FIXME_STUB']._fputchar
    _fputchar.restype = ctypes.c_int32
    _fputchar.argtypes = [ctypes.c_int32]
    _fputwc_nolock = _libraries['FIXME_STUB']._fputwc_nolock
    _fputwc_nolock.restype = wint_t
    _fputwc_nolock.argtypes = [ctypes.c_int16, ctypes.POINTER(FILE)]
    _fputwchar = _libraries['FIXME_STUB']._fputwchar
    _fputwchar.restype = wint_t
    _fputwchar.argtypes = [ctypes.c_int16]
    _fread_nolock = _libraries['FIXME_STUB']._fread_nolock
    _fread_nolock.restype = size_t
    _fread_nolock.argtypes = [ctypes.POINTER(None), size_t, size_t, ctypes.POINTER(FILE)]
    _fread_nolock_s = _libraries['FIXME_STUB']._fread_nolock_s
    _fread_nolock_s.restype = size_t
    _fread_nolock_s.argtypes = [ctypes.POINTER(None), size_t, size_t, size_t, ctypes.POINTER(FILE)]
    _free_base = _libraries['FIXME_STUB']._free_base
    _free_base.restype = None
    _free_base.argtypes = [ctypes.POINTER(None)]
    _freea = _libraries['FIXME_STUB']._freea
    _freea.restype = None
    _freea.argtypes = [ctypes.POINTER(None)]
    _fscanf_l = _libraries['FIXME_STUB']._fscanf_l
    _fscanf_l.restype = ctypes.c_int32
    _fscanf_l.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t]
    _fscanf_s_l = _libraries['FIXME_STUB']._fscanf_s_l
    _fscanf_s_l.restype = ctypes.c_int32
    _fscanf_s_l.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t]
    _fseek_nolock = _libraries['FIXME_STUB']._fseek_nolock
    _fseek_nolock.restype = ctypes.c_int32
    _fseek_nolock.argtypes = [ctypes.POINTER(FILE), ctypes.c_int32, ctypes.c_int32]
    _fseeki64 = _libraries['FIXME_STUB']._fseeki64
    _fseeki64.restype = ctypes.c_int32
    _fseeki64.argtypes = [ctypes.POINTER(FILE), ctypes.c_int64, ctypes.c_int32]
    _fseeki64_nolock = _libraries['FIXME_STUB']._fseeki64_nolock
    _fseeki64_nolock.restype = ctypes.c_int32
    _fseeki64_nolock.argtypes = [ctypes.POINTER(FILE), ctypes.c_int64, ctypes.c_int32]
    _fsopen = _libraries['FIXME_STUB']._fsopen
    _fsopen.restype = ctypes.POINTER(FILE)
    _fsopen.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32]
    _fstat32 = _libraries['FIXME_STUB']._fstat32
    _fstat32.restype = ctypes.c_int32
    _fstat32.argtypes = [ctypes.c_int32, ctypes.POINTER(struct__stat32)]
    _fstat32i64 = _libraries['FIXME_STUB']._fstat32i64
    _fstat32i64.restype = ctypes.c_int32
    _fstat32i64.argtypes = [ctypes.c_int32, ctypes.POINTER(struct__stat32i64)]
    _fstat64 = _libraries['FIXME_STUB']._fstat64
    _fstat64.restype = ctypes.c_int32
    _fstat64.argtypes = [ctypes.c_int32, ctypes.POINTER(struct__stat64)]
    _fstat64i32 = _libraries['FIXME_STUB']._fstat64i32
    _fstat64i32.restype = ctypes.c_int32
    _fstat64i32.argtypes = [ctypes.c_int32, ctypes.POINTER(struct__stat64i32)]
    _ftell_nolock = _libraries['FIXME_STUB']._ftell_nolock
    _ftell_nolock.restype = ctypes.c_int32
    _ftell_nolock.argtypes = [ctypes.POINTER(FILE)]
    _ftelli64 = _libraries['FIXME_STUB']._ftelli64
    _ftelli64.restype = ctypes.c_int64
    _ftelli64.argtypes = [ctypes.POINTER(FILE)]
    _ftelli64_nolock = _libraries['FIXME_STUB']._ftelli64_nolock
    _ftelli64_nolock.restype = ctypes.c_int64
    _ftelli64_nolock.argtypes = [ctypes.POINTER(FILE)]
    _fullpath = _libraries['FIXME_STUB']._fullpath
    _fullpath.restype = ctypes.c_char_p
    _fullpath.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    _fwprintf_l = _libraries['FIXME_STUB']._fwprintf_l
    _fwprintf_l.restype = ctypes.c_int32
    _fwprintf_l.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t]
    _fwprintf_p = _libraries['FIXME_STUB']._fwprintf_p
    _fwprintf_p.restype = ctypes.c_int32
    _fwprintf_p.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16)]
    _fwprintf_p_l = _libraries['FIXME_STUB']._fwprintf_p_l
    _fwprintf_p_l.restype = ctypes.c_int32
    _fwprintf_p_l.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t]
    _fwprintf_s_l = _libraries['FIXME_STUB']._fwprintf_s_l
    _fwprintf_s_l.restype = ctypes.c_int32
    _fwprintf_s_l.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t]
    _fwrite_nolock = _libraries['FIXME_STUB']._fwrite_nolock
    _fwrite_nolock.restype = size_t
    _fwrite_nolock.argtypes = [ctypes.POINTER(None), size_t, size_t, ctypes.POINTER(FILE)]
    _fwscanf_l = _libraries['FIXME_STUB']._fwscanf_l
    _fwscanf_l.restype = ctypes.c_int32
    _fwscanf_l.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t]
    _fwscanf_s_l = _libraries['FIXME_STUB']._fwscanf_s_l
    _fwscanf_s_l.restype = ctypes.c_int32
    _fwscanf_s_l.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t]
    _gcvt = _libraries['FIXME_STUB']._gcvt
    _gcvt.restype = ctypes.c_char_p
    _gcvt.argtypes = [ctypes.c_double, ctypes.c_int32, ctypes.c_char_p]
    _gcvt_s = _libraries['FIXME_STUB']._gcvt_s
    _gcvt_s.restype = errno_t
    _gcvt_s.argtypes = [ctypes.c_char_p, size_t, ctypes.c_double, ctypes.c_int32]
    _get_FMA3_enable = _libraries['FIXME_STUB']._get_FMA3_enable
    _get_FMA3_enable.restype = ctypes.c_int32
    _get_FMA3_enable.argtypes = []
    _get_daylight = _libraries['FIXME_STUB']._get_daylight
    _get_daylight.restype = errno_t
    _get_daylight.argtypes = [ctypes.POINTER(ctypes.c_int32)]
    _get_doserrno = _libraries['FIXME_STUB']._get_doserrno
    _get_doserrno.restype = errno_t
    _get_doserrno.argtypes = [ctypes.POINTER(ctypes.c_uint32)]
    _get_dstbias = _libraries['FIXME_STUB']._get_dstbias
    _get_dstbias.restype = errno_t
    _get_dstbias.argtypes = [ctypes.POINTER(ctypes.c_int32)]
    _get_errno = _libraries['FIXME_STUB']._get_errno
    _get_errno.restype = errno_t
    _get_errno.argtypes = [ctypes.POINTER(ctypes.c_int32)]
    _get_fmode = _libraries['FIXME_STUB']._get_fmode
    _get_fmode.restype = errno_t
    _get_fmode.argtypes = [ctypes.POINTER(ctypes.c_int32)]
    _get_heap_handle = _libraries['FIXME_STUB']._get_heap_handle
    _get_heap_handle.restype = intptr_t
    _get_heap_handle.argtypes = []
    _get_invalid_parameter_handler = _libraries['FIXME_STUB']._get_invalid_parameter_handler
    _get_invalid_parameter_handler.restype = _invalid_parameter_handler
    _get_invalid_parameter_handler.argtypes = []
    _get_osfhandle = _libraries['FIXME_STUB']._get_osfhandle
    _get_osfhandle.restype = intptr_t
    _get_osfhandle.argtypes = [ctypes.c_int32]
    _get_pgmptr = _libraries['FIXME_STUB']._get_pgmptr
    _get_pgmptr.restype = errno_t
    _get_pgmptr.argtypes = [ctypes.POINTER(ctypes.c_char_p)]
    _get_printf_count_output = _libraries['FIXME_STUB']._get_printf_count_output
    _get_printf_count_output.restype = ctypes.c_int32
    _get_printf_count_output.argtypes = []
    _get_purecall_handler = _libraries['FIXME_STUB']._get_purecall_handler
    _get_purecall_handler.restype = _purecall_handler
    _get_purecall_handler.argtypes = []
    _get_stream_buffer_pointers = _libraries['FIXME_STUB']._get_stream_buffer_pointers
    _get_stream_buffer_pointers.restype = errno_t
    _get_stream_buffer_pointers.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.POINTER(ctypes.c_char_p)), ctypes.POINTER(ctypes.POINTER(ctypes.c_char_p)), ctypes.POINTER(ctypes.POINTER(ctypes.c_int32))]
    _get_terminate = _libraries['FIXME_STUB']._get_terminate
    _get_terminate.restype = terminate_handler
    _get_terminate.argtypes = []
    _get_thread_local_invalid_parameter_handler = _libraries['FIXME_STUB']._get_thread_local_invalid_parameter_handler
    _get_thread_local_invalid_parameter_handler.restype = _invalid_parameter_handler
    _get_thread_local_invalid_parameter_handler.argtypes = []
    _get_timezone = _libraries['FIXME_STUB']._get_timezone
    _get_timezone.restype = errno_t
    _get_timezone.argtypes = [ctypes.POINTER(ctypes.c_int32)]
    _get_tzname = _libraries['FIXME_STUB']._get_tzname
    _get_tzname.restype = errno_t
    _get_tzname.argtypes = [ctypes.POINTER(size_t), ctypes.c_char_p, size_t, ctypes.c_int32]
    _get_unexpected = _libraries['FIXME_STUB']._get_unexpected
    _get_unexpected.restype = unexpected_handler
    _get_unexpected.argtypes = []
    _get_wpgmptr = _libraries['FIXME_STUB']._get_wpgmptr
    _get_wpgmptr.restype = errno_t
    _get_wpgmptr.argtypes = [ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))]
    _getc_nolock = _libraries['FIXME_STUB']._getc_nolock
    _getc_nolock.restype = ctypes.c_int32
    _getc_nolock.argtypes = [ctypes.POINTER(FILE)]
    _getcwd = _libraries['FIXME_STUB']._getcwd
    _getcwd.restype = ctypes.c_char_p
    _getcwd.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    _getdcwd = _libraries['FIXME_STUB']._getdcwd
    _getdcwd.restype = ctypes.c_char_p
    _getdcwd.argtypes = [ctypes.c_int32, ctypes.c_char_p, ctypes.c_int32]
    _getdiskfree = _libraries['FIXME_STUB']._getdiskfree
    _getdiskfree.restype = ctypes.c_uint32
    _getdiskfree.argtypes = [ctypes.c_uint32, ctypes.POINTER(struct__diskfree_t)]
    _getdrive = _libraries['FIXME_STUB']._getdrive
    _getdrive.restype = ctypes.c_int32
    _getdrive.argtypes = []
    _getdrives = _libraries['FIXME_STUB']._getdrives
    _getdrives.restype = ctypes.c_uint32
    _getdrives.argtypes = []
    _getmaxstdio = _libraries['FIXME_STUB']._getmaxstdio
    _getmaxstdio.restype = ctypes.c_int32
    _getmaxstdio.argtypes = []
    _getsystime = _libraries['FIXME_STUB']._getsystime
    _getsystime.restype = ctypes.c_uint32
    _getsystime.argtypes = [ctypes.POINTER(struct_tm)]
    _getw = _libraries['FIXME_STUB']._getw
    _getw.restype = ctypes.c_int32
    _getw.argtypes = [ctypes.POINTER(FILE)]
    _getwc_nolock = _libraries['FIXME_STUB']._getwc_nolock
    _getwc_nolock.restype = wint_t
    _getwc_nolock.argtypes = [ctypes.POINTER(FILE)]
    _getwch = _libraries['FIXME_STUB']._getwch
    _getwch.restype = wint_t
    _getwch.argtypes = []
    _getwch_nolock = _libraries['FIXME_STUB']._getwch_nolock
    _getwch_nolock.restype = wint_t
    _getwch_nolock.argtypes = []
    _getwche = _libraries['FIXME_STUB']._getwche
    _getwche.restype = wint_t
    _getwche.argtypes = []
    _getwche_nolock = _libraries['FIXME_STUB']._getwche_nolock
    _getwche_nolock.restype = wint_t
    _getwche_nolock.argtypes = []
    _getws_s = _libraries['FIXME_STUB']._getws_s
    _getws_s.restype = ctypes.POINTER(ctypes.c_int16)
    _getws_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t]
    _gmtime32 = _libraries['FIXME_STUB']._gmtime32
    _gmtime32.restype = ctypes.POINTER(struct_tm)
    _gmtime32.argtypes = [ctypes.POINTER(__time32_t)]
    _gmtime32_s = _libraries['FIXME_STUB']._gmtime32_s
    _gmtime32_s.restype = errno_t
    _gmtime32_s.argtypes = [ctypes.POINTER(struct_tm), ctypes.POINTER(__time32_t)]
    _gmtime64 = _libraries['FIXME_STUB']._gmtime64
    _gmtime64.restype = ctypes.POINTER(struct_tm)
    _gmtime64.argtypes = [ctypes.POINTER(__time64_t)]
    _gmtime64_s = _libraries['FIXME_STUB']._gmtime64_s
    _gmtime64_s.restype = errno_t
    _gmtime64_s.argtypes = [ctypes.POINTER(struct_tm), ctypes.POINTER(__time64_t)]
    _heapchk = _libraries['FIXME_STUB']._heapchk
    _heapchk.restype = ctypes.c_int32
    _heapchk.argtypes = []
    _heapmin = _libraries['FIXME_STUB']._heapmin
    _heapmin.restype = ctypes.c_int32
    _heapmin.argtypes = []
    _heapwalk = _libraries['FIXME_STUB']._heapwalk
    _heapwalk.restype = ctypes.c_int32
    _heapwalk.argtypes = [ctypes.POINTER(_HEAPINFO)]
    _hypot = _libraries['FIXME_STUB']._hypot
    _hypot.restype = ctypes.c_double
    _hypot.argtypes = [ctypes.c_double, ctypes.c_double]
    _hypotf = _libraries['FIXME_STUB']._hypotf
    _hypotf.restype = ctypes.c_float
    _hypotf.argtypes = [ctypes.c_float, ctypes.c_float]
    _hypotl = _libraries['FIXME_STUB']._hypotl
    _hypotl.restype = ctypes.c_double
    _hypotl.argtypes = [ctypes.c_double, ctypes.c_double]
    _i64toa = _libraries['FIXME_STUB']._i64toa
    _i64toa.restype = ctypes.c_char_p
    _i64toa.argtypes = [ctypes.c_int64, ctypes.c_char_p, ctypes.c_int32]
    _i64toa_s = _libraries['FIXME_STUB']._i64toa_s
    _i64toa_s.restype = errno_t
    _i64toa_s.argtypes = [ctypes.c_int64, ctypes.c_char_p, size_t, ctypes.c_int32]
    _i64tow = _libraries['FIXME_STUB']._i64tow
    _i64tow.restype = ctypes.POINTER(ctypes.c_int16)
    _i64tow.argtypes = [ctypes.c_int64, ctypes.POINTER(ctypes.c_int16), ctypes.c_int32]
    _i64tow_s = _libraries['FIXME_STUB']._i64tow_s
    _i64tow_s.restype = errno_t
    _i64tow_s.argtypes = [ctypes.c_int64, ctypes.POINTER(ctypes.c_int16), size_t, ctypes.c_int32]
    _interlockedand64 = _libraries['FIXME_STUB']._interlockedand64
    _interlockedand64.restype = ctypes.c_int64
    _interlockedand64.argtypes = [ctypes.POINTER(ctypes.c_int64), ctypes.c_int64]
    _interlockedbittestandset = _libraries['FIXME_STUB']._interlockedbittestandset
    _interlockedbittestandset.restype = ctypes.c_ubyte
    _interlockedbittestandset.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_int32]
    _interlockeddecrement64 = _libraries['FIXME_STUB']._interlockeddecrement64
    _interlockeddecrement64.restype = ctypes.c_int64
    _interlockeddecrement64.argtypes = [ctypes.POINTER(ctypes.c_int64)]
    _interlockedexchange64 = _libraries['FIXME_STUB']._interlockedexchange64
    _interlockedexchange64.restype = ctypes.c_int64
    _interlockedexchange64.argtypes = [ctypes.POINTER(ctypes.c_int64), ctypes.c_int64]
    _interlockedexchangeadd64 = _libraries['FIXME_STUB']._interlockedexchangeadd64
    _interlockedexchangeadd64.restype = ctypes.c_int64
    _interlockedexchangeadd64.argtypes = [ctypes.POINTER(ctypes.c_int64), ctypes.c_int64]
    _interlockedincrement64 = _libraries['FIXME_STUB']._interlockedincrement64
    _interlockedincrement64.restype = ctypes.c_int64
    _interlockedincrement64.argtypes = [ctypes.POINTER(ctypes.c_int64)]
    _interlockedor64 = _libraries['FIXME_STUB']._interlockedor64
    _interlockedor64.restype = ctypes.c_int64
    _interlockedor64.argtypes = [ctypes.POINTER(ctypes.c_int64), ctypes.c_int64]
    _interlockedxor64 = _libraries['FIXME_STUB']._interlockedxor64
    _interlockedxor64.restype = ctypes.c_int64
    _interlockedxor64.argtypes = [ctypes.POINTER(ctypes.c_int64), ctypes.c_int64]
    _invalid_parameter_noinfo = _libraries['FIXME_STUB']._invalid_parameter_noinfo
    _invalid_parameter_noinfo.restype = None
    _invalid_parameter_noinfo.argtypes = []
    _invalid_parameter_noinfo_noreturn = _libraries['FIXME_STUB']._invalid_parameter_noinfo_noreturn
    _invalid_parameter_noinfo_noreturn.restype = None
    _invalid_parameter_noinfo_noreturn.argtypes = []
    _invoke_watson = _libraries['FIXME_STUB']._invoke_watson
    _invoke_watson.restype = None
    _invoke_watson.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.c_uint32, uintptr_t]
    _is_exception_typeof = _libraries['FIXME_STUB']._is_exception_typeof
    _is_exception_typeof.restype = ctypes.c_int32
    _is_exception_typeof.argtypes = [ctypes.POINTER(struct_type_info), ctypes.POINTER(struct__EXCEPTION_POINTERS)]
    _isalnum_l = _libraries['FIXME_STUB']._isalnum_l
    _isalnum_l.restype = ctypes.c_int32
    _isalnum_l.argtypes = [ctypes.c_int32, _locale_t]
    _isalpha_l = _libraries['FIXME_STUB']._isalpha_l
    _isalpha_l.restype = ctypes.c_int32
    _isalpha_l.argtypes = [ctypes.c_int32, _locale_t]
    _isatty = _libraries['FIXME_STUB']._isatty
    _isatty.restype = ctypes.c_int32
    _isatty.argtypes = [ctypes.c_int32]
    _isblank_l = _libraries['FIXME_STUB']._isblank_l
    _isblank_l.restype = ctypes.c_int32
    _isblank_l.argtypes = [ctypes.c_int32, _locale_t]
    _ischartype_l = _libraries['FIXME_STUB']._ischartype_l
    _ischartype_l.restype = ctypes.c_int32
    _ischartype_l.argtypes = [ctypes.c_int32, ctypes.c_int32, _locale_t]
    _iscntrl_l = _libraries['FIXME_STUB']._iscntrl_l
    _iscntrl_l.restype = ctypes.c_int32
    _iscntrl_l.argtypes = [ctypes.c_int32, _locale_t]
    _isctype = _libraries['FIXME_STUB']._isctype
    _isctype.restype = ctypes.c_int32
    _isctype.argtypes = [ctypes.c_int32, ctypes.c_int32]
    _isctype_l = _libraries['FIXME_STUB']._isctype_l
    _isctype_l.restype = ctypes.c_int32
    _isctype_l.argtypes = [ctypes.c_int32, ctypes.c_int32, _locale_t]
    _isdigit_l = _libraries['FIXME_STUB']._isdigit_l
    _isdigit_l.restype = ctypes.c_int32
    _isdigit_l.argtypes = [ctypes.c_int32, _locale_t]
    _isgraph_l = _libraries['FIXME_STUB']._isgraph_l
    _isgraph_l.restype = ctypes.c_int32
    _isgraph_l.argtypes = [ctypes.c_int32, _locale_t]
    _isleadbyte_l = _libraries['FIXME_STUB']._isleadbyte_l
    _isleadbyte_l.restype = ctypes.c_int32
    _isleadbyte_l.argtypes = [ctypes.c_int32, _locale_t]
    _islower_l = _libraries['FIXME_STUB']._islower_l
    _islower_l.restype = ctypes.c_int32
    _islower_l.argtypes = [ctypes.c_int32, _locale_t]
    _isnan = _libraries['FIXME_STUB']._isnan
    _isnan.restype = ctypes.c_int32
    _isnan.argtypes = [ctypes.c_double]
    _isnanf = _libraries['FIXME_STUB']._isnanf
    _isnanf.restype = ctypes.c_int32
    _isnanf.argtypes = [ctypes.c_float]
    _isprint_l = _libraries['FIXME_STUB']._isprint_l
    _isprint_l.restype = ctypes.c_int32
    _isprint_l.argtypes = [ctypes.c_int32, _locale_t]
    _ispunct_l = _libraries['FIXME_STUB']._ispunct_l
    _ispunct_l.restype = ctypes.c_int32
    _ispunct_l.argtypes = [ctypes.c_int32, _locale_t]
    _isspace_l = _libraries['FIXME_STUB']._isspace_l
    _isspace_l.restype = ctypes.c_int32
    _isspace_l.argtypes = [ctypes.c_int32, _locale_t]
    _isupper_l = _libraries['FIXME_STUB']._isupper_l
    _isupper_l.restype = ctypes.c_int32
    _isupper_l.argtypes = [ctypes.c_int32, _locale_t]
    _iswalnum_l = _libraries['FIXME_STUB']._iswalnum_l
    _iswalnum_l.restype = ctypes.c_int32
    _iswalnum_l.argtypes = [wint_t, _locale_t]
    _iswalpha_l = _libraries['FIXME_STUB']._iswalpha_l
    _iswalpha_l.restype = ctypes.c_int32
    _iswalpha_l.argtypes = [wint_t, _locale_t]
    _iswblank_l = _libraries['FIXME_STUB']._iswblank_l
    _iswblank_l.restype = ctypes.c_int32
    _iswblank_l.argtypes = [wint_t, _locale_t]
    _iswcntrl_l = _libraries['FIXME_STUB']._iswcntrl_l
    _iswcntrl_l.restype = ctypes.c_int32
    _iswcntrl_l.argtypes = [wint_t, _locale_t]
    _iswcsym_l = _libraries['FIXME_STUB']._iswcsym_l
    _iswcsym_l.restype = ctypes.c_int32
    _iswcsym_l.argtypes = [wint_t, _locale_t]
    _iswcsymf_l = _libraries['FIXME_STUB']._iswcsymf_l
    _iswcsymf_l.restype = ctypes.c_int32
    _iswcsymf_l.argtypes = [wint_t, _locale_t]
    _iswctype_l = _libraries['FIXME_STUB']._iswctype_l
    _iswctype_l.restype = ctypes.c_int32
    _iswctype_l.argtypes = [wint_t, wctype_t, _locale_t]
    _iswdigit_l = _libraries['FIXME_STUB']._iswdigit_l
    _iswdigit_l.restype = ctypes.c_int32
    _iswdigit_l.argtypes = [wint_t, _locale_t]
    _iswgraph_l = _libraries['FIXME_STUB']._iswgraph_l
    _iswgraph_l.restype = ctypes.c_int32
    _iswgraph_l.argtypes = [wint_t, _locale_t]
    _iswlower_l = _libraries['FIXME_STUB']._iswlower_l
    _iswlower_l.restype = ctypes.c_int32
    _iswlower_l.argtypes = [wint_t, _locale_t]
    _iswprint_l = _libraries['FIXME_STUB']._iswprint_l
    _iswprint_l.restype = ctypes.c_int32
    _iswprint_l.argtypes = [wint_t, _locale_t]
    _iswpunct_l = _libraries['FIXME_STUB']._iswpunct_l
    _iswpunct_l.restype = ctypes.c_int32
    _iswpunct_l.argtypes = [wint_t, _locale_t]
    _iswspace_l = _libraries['FIXME_STUB']._iswspace_l
    _iswspace_l.restype = ctypes.c_int32
    _iswspace_l.argtypes = [wint_t, _locale_t]
    _iswupper_l = _libraries['FIXME_STUB']._iswupper_l
    _iswupper_l.restype = ctypes.c_int32
    _iswupper_l.argtypes = [wint_t, _locale_t]
    _iswxdigit_l = _libraries['FIXME_STUB']._iswxdigit_l
    _iswxdigit_l.restype = ctypes.c_int32
    _iswxdigit_l.argtypes = [wint_t, _locale_t]
    _isxdigit_l = _libraries['FIXME_STUB']._isxdigit_l
    _isxdigit_l.restype = ctypes.c_int32
    _isxdigit_l.argtypes = [ctypes.c_int32, _locale_t]
    _itoa = _libraries['FIXME_STUB']._itoa
    _itoa.restype = ctypes.c_char_p
    _itoa.argtypes = [ctypes.c_int32, ctypes.c_char_p, ctypes.c_int32]
    _itoa_s = _libraries['FIXME_STUB']._itoa_s
    _itoa_s.restype = errno_t
    _itoa_s.argtypes = [ctypes.c_int32, ctypes.c_char_p, size_t, ctypes.c_int32]
    _itow = _libraries['FIXME_STUB']._itow
    _itow.restype = ctypes.POINTER(ctypes.c_int16)
    _itow.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int32]
    _itow_s = _libraries['FIXME_STUB']._itow_s
    _itow_s.restype = errno_t
    _itow_s.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), size_t, ctypes.c_int32]
    _j0 = _libraries['FIXME_STUB']._j0
    _j0.restype = ctypes.c_double
    _j0.argtypes = [ctypes.c_double]
    _j1 = _libraries['FIXME_STUB']._j1
    _j1.restype = ctypes.c_double
    _j1.argtypes = [ctypes.c_double]
    _jn = _libraries['FIXME_STUB']._jn
    _jn.restype = ctypes.c_double
    _jn.argtypes = [ctypes.c_int32, ctypes.c_double]
    _ld_int = _libraries['FIXME_STUB']._ld_int
    _ld_int.restype = ctypes.c_int16
    _ld_int.argtypes = [ctypes.POINTER(ctypes.c_double), ctypes.c_int16]
    _ldclass = _libraries['FIXME_STUB']._ldclass
    _ldclass.restype = ctypes.c_int16
    _ldclass.argtypes = [ctypes.c_double]
    _ldexp = _libraries['FIXME_STUB']._ldexp
    _ldexp.restype = ctypes.c_int16
    _ldexp.argtypes = [ctypes.POINTER(ctypes.c_double), ctypes.c_double, ctypes.c_int32]
    _ldlog = _libraries['FIXME_STUB']._ldlog
    _ldlog.restype = ctypes.c_double
    _ldlog.argtypes = [ctypes.c_double, ctypes.c_int32]
    _ldpcomp = _libraries['FIXME_STUB']._ldpcomp
    _ldpcomp.restype = ctypes.c_int32
    _ldpcomp.argtypes = [ctypes.c_double, ctypes.c_double]
    _ldpoly = _libraries['FIXME_STUB']._ldpoly
    _ldpoly.restype = ctypes.c_double
    _ldpoly.argtypes = [ctypes.c_double, ctypes.POINTER(ctypes.c_double), ctypes.c_int32]
    _ldscale = _libraries['FIXME_STUB']._ldscale
    _ldscale.restype = ctypes.c_int16
    _ldscale.argtypes = [ctypes.POINTER(ctypes.c_double), ctypes.c_int32]
    _ldsign = _libraries['FIXME_STUB']._ldsign
    _ldsign.restype = ctypes.c_int32
    _ldsign.argtypes = [ctypes.c_double]
    _ldsin = _libraries['FIXME_STUB']._ldsin
    _ldsin.restype = ctypes.c_double
    _ldsin.argtypes = [ctypes.c_double, ctypes.c_uint32]
    _ldtest = _libraries['FIXME_STUB']._ldtest
    _ldtest.restype = ctypes.c_int16
    _ldtest.argtypes = [ctypes.POINTER(ctypes.c_double)]
    _ldunscale = _libraries['FIXME_STUB']._ldunscale
    _ldunscale.restype = ctypes.c_int16
    _ldunscale.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_double)]
    _lfind = _libraries['FIXME_STUB']._lfind
    _lfind.restype = ctypes.POINTER(None)
    _lfind.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32, _CoreCrtNonSecureSearchSortCompareFunction]
    _lfind_s = _libraries['FIXME_STUB']._lfind_s
    _lfind_s.restype = ctypes.POINTER(None)
    _lfind_s.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), size_t, _CoreCrtSecureSearchSortCompareFunction, ctypes.POINTER(None)]
    _load_core_module = _libraries['FIXME_STUB']._load_core_module
    _load_core_module.restype = ctypes.c_int32
    _load_core_module.argtypes = [ctypes.POINTER(struct_idadll_t), ctypes.c_char_p, ctypes.c_char_p]
    _localtime32 = _libraries['FIXME_STUB']._localtime32
    _localtime32.restype = ctypes.POINTER(struct_tm)
    _localtime32.argtypes = [ctypes.POINTER(__time32_t)]
    _localtime32_s = _libraries['FIXME_STUB']._localtime32_s
    _localtime32_s.restype = errno_t
    _localtime32_s.argtypes = [ctypes.POINTER(struct_tm), ctypes.POINTER(__time32_t)]
    _localtime64 = _libraries['FIXME_STUB']._localtime64
    _localtime64.restype = ctypes.POINTER(struct_tm)
    _localtime64.argtypes = [ctypes.POINTER(__time64_t)]
    _localtime64_s = _libraries['FIXME_STUB']._localtime64_s
    _localtime64_s.restype = errno_t
    _localtime64_s.argtypes = [ctypes.POINTER(struct_tm), ctypes.POINTER(__time64_t)]
    _lock_file = _libraries['FIXME_STUB']._lock_file
    _lock_file.restype = None
    _lock_file.argtypes = [ctypes.POINTER(FILE)]
    _locking = _libraries['FIXME_STUB']._locking
    _locking.restype = ctypes.c_int32
    _locking.argtypes = [ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
    _logb = _libraries['FIXME_STUB']._logb
    _logb.restype = ctypes.c_double
    _logb.argtypes = [ctypes.c_double]
    _logbf = _libraries['FIXME_STUB']._logbf
    _logbf.restype = ctypes.c_float
    _logbf.argtypes = [ctypes.c_float]
    _lrotl = _libraries['FIXME_STUB']._lrotl
    _lrotl.restype = ctypes.c_uint32
    _lrotl.argtypes = [ctypes.c_uint32, ctypes.c_int32]
    _lrotr = _libraries['FIXME_STUB']._lrotr
    _lrotr.restype = ctypes.c_uint32
    _lrotr.argtypes = [ctypes.c_uint32, ctypes.c_int32]
    _lsearch = _libraries['FIXME_STUB']._lsearch
    _lsearch.restype = ctypes.POINTER(None)
    _lsearch.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32, _CoreCrtNonSecureSearchSortCompareFunction]
    _lsearch_s = _libraries['FIXME_STUB']._lsearch_s
    _lsearch_s.restype = ctypes.POINTER(None)
    _lsearch_s.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), size_t, _CoreCrtSecureSearchSortCompareFunction, ctypes.POINTER(None)]
    _lseek = _libraries['FIXME_STUB']._lseek
    _lseek.restype = ctypes.c_int32
    _lseek.argtypes = [ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
    _lseeki64 = _libraries['FIXME_STUB']._lseeki64
    _lseeki64.restype = ctypes.c_int64
    _lseeki64.argtypes = [ctypes.c_int32, ctypes.c_int64, ctypes.c_int32]
    _ltoa = _libraries['FIXME_STUB']._ltoa
    _ltoa.restype = ctypes.c_char_p
    _ltoa.argtypes = [ctypes.c_int32, ctypes.c_char_p, ctypes.c_int32]
    _ltoa_s = _libraries['FIXME_STUB']._ltoa_s
    _ltoa_s.restype = errno_t
    _ltoa_s.argtypes = [ctypes.c_int32, ctypes.c_char_p, size_t, ctypes.c_int32]
    _ltow = _libraries['FIXME_STUB']._ltow
    _ltow.restype = ctypes.POINTER(ctypes.c_int16)
    _ltow.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int32]
    _ltow_s = _libraries['FIXME_STUB']._ltow_s
    _ltow_s.restype = errno_t
    _ltow_s.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), size_t, ctypes.c_int32]
    _makepath = _libraries['FIXME_STUB']._makepath
    _makepath.restype = None
    _makepath.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p]
    _makepath_s = _libraries['FIXME_STUB']._makepath_s
    _makepath_s.restype = errno_t
    _makepath_s.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p]
    _malloc_base = _libraries['FIXME_STUB']._malloc_base
    _malloc_base.restype = ctypes.POINTER(None)
    _malloc_base.argtypes = [size_t]
    _matherr = _libraries['FIXME_STUB']._matherr
    _matherr.restype = ctypes.c_int32
    _matherr.argtypes = [ctypes.POINTER(struct__exception)]
    _mblen_l = _libraries['FIXME_STUB']._mblen_l
    _mblen_l.restype = ctypes.c_int32
    _mblen_l.argtypes = [ctypes.c_char_p, size_t, _locale_t]
    _mbstowcs_l = _libraries['FIXME_STUB']._mbstowcs_l
    _mbstowcs_l.restype = size_t
    _mbstowcs_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_char_p, size_t, _locale_t]
    _mbstowcs_s_l = _libraries['FIXME_STUB']._mbstowcs_s_l
    _mbstowcs_s_l.restype = errno_t
    _mbstowcs_s_l.argtypes = [ctypes.POINTER(size_t), ctypes.POINTER(ctypes.c_int16), size_t, ctypes.c_char_p, size_t, _locale_t]
    _mbstrlen = _libraries['FIXME_STUB']._mbstrlen
    _mbstrlen.restype = size_t
    _mbstrlen.argtypes = [ctypes.c_char_p]
    _mbstrlen_l = _libraries['FIXME_STUB']._mbstrlen_l
    _mbstrlen_l.restype = size_t
    _mbstrlen_l.argtypes = [ctypes.c_char_p, _locale_t]
    _mbstrnlen = _libraries['FIXME_STUB']._mbstrnlen
    _mbstrnlen.restype = size_t
    _mbstrnlen.argtypes = [ctypes.c_char_p, size_t]
    _mbstrnlen_l = _libraries['FIXME_STUB']._mbstrnlen_l
    _mbstrnlen_l.restype = size_t
    _mbstrnlen_l.argtypes = [ctypes.c_char_p, size_t, _locale_t]
    _mbtowc_l = _libraries['FIXME_STUB']._mbtowc_l
    _mbtowc_l.restype = ctypes.c_int32
    _mbtowc_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_char_p, size_t, _locale_t]
    _memccpy = _libraries['FIXME_STUB']._memccpy
    _memccpy.restype = ctypes.POINTER(None)
    _memccpy.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.c_int32, size_t]
    _memicmp = _libraries['FIXME_STUB']._memicmp
    _memicmp.restype = ctypes.c_int32
    _memicmp.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), size_t]
    _memicmp_l = _libraries['FIXME_STUB']._memicmp_l
    _memicmp_l.restype = ctypes.c_int32
    _memicmp_l.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), size_t, _locale_t]
    _mkdir = _libraries['FIXME_STUB']._mkdir
    _mkdir.restype = ctypes.c_int32
    _mkdir.argtypes = [ctypes.c_char_p]
    _mkgmtime32 = _libraries['FIXME_STUB']._mkgmtime32
    _mkgmtime32.restype = __time32_t
    _mkgmtime32.argtypes = [ctypes.POINTER(struct_tm)]
    _mkgmtime64 = _libraries['FIXME_STUB']._mkgmtime64
    _mkgmtime64.restype = __time64_t
    _mkgmtime64.argtypes = [ctypes.POINTER(struct_tm)]
    _mktemp = _libraries['FIXME_STUB']._mktemp
    _mktemp.restype = ctypes.c_char_p
    _mktemp.argtypes = [ctypes.c_char_p]
    _mktemp_s = _libraries['FIXME_STUB']._mktemp_s
    _mktemp_s.restype = errno_t
    _mktemp_s.argtypes = [ctypes.c_char_p, size_t]
    _mktime32 = _libraries['FIXME_STUB']._mktime32
    _mktime32.restype = __time32_t
    _mktime32.argtypes = [ctypes.POINTER(struct_tm)]
    _mktime64 = _libraries['FIXME_STUB']._mktime64
    _mktime64.restype = __time64_t
    _mktime64.argtypes = [ctypes.POINTER(struct_tm)]
    _mm_pause = _libraries['FIXME_STUB']._mm_pause
    _mm_pause.restype = None
    _mm_pause.argtypes = []
    _msize = _libraries['FIXME_STUB']._msize
    _msize.restype = size_t
    _msize.argtypes = [ctypes.POINTER(None)]
    _msize_base = _libraries['FIXME_STUB']._msize_base
    _msize_base.restype = size_t
    _msize_base.argtypes = [ctypes.POINTER(None)]
    _nextafter = _libraries['FIXME_STUB']._nextafter
    _nextafter.restype = ctypes.c_double
    _nextafter.argtypes = [ctypes.c_double, ctypes.c_double]
    _nextafterf = _libraries['FIXME_STUB']._nextafterf
    _nextafterf.restype = ctypes.c_float
    _nextafterf.argtypes = [ctypes.c_float, ctypes.c_float]
    _onexit = _libraries['FIXME_STUB']._onexit
    _onexit.restype = _onexit_t
    _onexit.argtypes = [_onexit_t]
    _open = _libraries['FIXME_STUB']._open
    _open.restype = ctypes.c_int32
    _open.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32]
    _open_osfhandle = _libraries['FIXME_STUB']._open_osfhandle
    _open_osfhandle.restype = ctypes.c_int32
    _open_osfhandle.argtypes = [intptr_t, ctypes.c_int32]
    _pclose = _libraries['FIXME_STUB']._pclose
    _pclose.restype = ctypes.c_int32
    _pclose.argtypes = [ctypes.POINTER(FILE)]
    _pipe = _libraries['FIXME_STUB']._pipe
    _pipe.restype = ctypes.c_int32
    _pipe.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_uint32, ctypes.c_int32]
    _popen = _libraries['FIXME_STUB']._popen
    _popen.restype = ctypes.POINTER(FILE)
    _popen.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    _printf_l = _libraries['FIXME_STUB']._printf_l
    _printf_l.restype = ctypes.c_int32
    _printf_l.argtypes = [ctypes.c_char_p, _locale_t]
    _printf_p = _libraries['FIXME_STUB']._printf_p
    _printf_p.restype = ctypes.c_int32
    _printf_p.argtypes = [ctypes.c_char_p]
    _printf_p_l = _libraries['FIXME_STUB']._printf_p_l
    _printf_p_l.restype = ctypes.c_int32
    _printf_p_l.argtypes = [ctypes.c_char_p, _locale_t]
    _printf_s_l = _libraries['FIXME_STUB']._printf_s_l
    _printf_s_l.restype = ctypes.c_int32
    _printf_s_l.argtypes = [ctypes.c_char_p, _locale_t]
    _putc_nolock = _libraries['FIXME_STUB']._putc_nolock
    _putc_nolock.restype = ctypes.c_int32
    _putc_nolock.argtypes = [ctypes.c_int32, ctypes.POINTER(FILE)]
    _putenv = _libraries['FIXME_STUB']._putenv
    _putenv.restype = ctypes.c_int32
    _putenv.argtypes = [ctypes.c_char_p]
    _putenv_s = _libraries['FIXME_STUB']._putenv_s
    _putenv_s.restype = errno_t
    _putenv_s.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    _putw = _libraries['FIXME_STUB']._putw
    _putw.restype = ctypes.c_int32
    _putw.argtypes = [ctypes.c_int32, ctypes.POINTER(FILE)]
    _putwc_nolock = _libraries['FIXME_STUB']._putwc_nolock
    _putwc_nolock.restype = wint_t
    _putwc_nolock.argtypes = [ctypes.c_int16, ctypes.POINTER(FILE)]
    _putwch = _libraries['FIXME_STUB']._putwch
    _putwch.restype = wint_t
    _putwch.argtypes = [ctypes.c_int16]
    _putwch_nolock = _libraries['FIXME_STUB']._putwch_nolock
    _putwch_nolock.restype = wint_t
    _putwch_nolock.argtypes = [ctypes.c_int16]
    _putws = _libraries['FIXME_STUB']._putws
    _putws.restype = ctypes.c_int32
    _putws.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _read = _libraries['FIXME_STUB']._read
    _read.restype = ctypes.c_int32
    _read.argtypes = [ctypes.c_int32, ctypes.POINTER(None), ctypes.c_uint32]
    _realloc_base = _libraries['FIXME_STUB']._realloc_base
    _realloc_base.restype = ctypes.POINTER(None)
    _realloc_base.argtypes = [ctypes.POINTER(None), size_t]
    _recalloc = _libraries['FIXME_STUB']._recalloc
    _recalloc.restype = ctypes.POINTER(None)
    _recalloc.argtypes = [ctypes.POINTER(None), size_t, size_t]
    _recalloc_base = _libraries['FIXME_STUB']._recalloc_base
    _recalloc_base.restype = ctypes.POINTER(None)
    _recalloc_base.argtypes = [ctypes.POINTER(None), size_t, size_t]
    _resetstkoflw = _libraries['FIXME_STUB']._resetstkoflw
    _resetstkoflw.restype = ctypes.c_int32
    _resetstkoflw.argtypes = []
    _rmdir = _libraries['FIXME_STUB']._rmdir
    _rmdir.restype = ctypes.c_int32
    _rmdir.argtypes = [ctypes.c_char_p]
    _rmtmp = _libraries['FIXME_STUB']._rmtmp
    _rmtmp.restype = ctypes.c_int32
    _rmtmp.argtypes = []
    _rotl = _libraries['FIXME_STUB']._rotl
    _rotl.restype = ctypes.c_uint32
    _rotl.argtypes = [ctypes.c_uint32, ctypes.c_int32]
    _rotl64 = _libraries['FIXME_STUB']._rotl64
    _rotl64.restype = ctypes.c_uint64
    _rotl64.argtypes = [ctypes.c_uint64, ctypes.c_int32]
    _rotr = _libraries['FIXME_STUB']._rotr
    _rotr.restype = ctypes.c_uint32
    _rotr.argtypes = [ctypes.c_uint32, ctypes.c_int32]
    _rotr64 = _libraries['FIXME_STUB']._rotr64
    _rotr64.restype = ctypes.c_uint64
    _rotr64.argtypes = [ctypes.c_uint64, ctypes.c_int32]
    _scalb = _libraries['FIXME_STUB']._scalb
    _scalb.restype = ctypes.c_double
    _scalb.argtypes = [ctypes.c_double, ctypes.c_int32]
    _scalbf = _libraries['FIXME_STUB']._scalbf
    _scalbf.restype = ctypes.c_float
    _scalbf.argtypes = [ctypes.c_float, ctypes.c_int32]
    _scanf_l = _libraries['FIXME_STUB']._scanf_l
    _scanf_l.restype = ctypes.c_int32
    _scanf_l.argtypes = [ctypes.c_char_p, _locale_t]
    _scanf_s_l = _libraries['FIXME_STUB']._scanf_s_l
    _scanf_s_l.restype = ctypes.c_int32
    _scanf_s_l.argtypes = [ctypes.c_char_p, _locale_t]
    _scprintf = _libraries['FIXME_STUB']._scprintf
    _scprintf.restype = ctypes.c_int32
    _scprintf.argtypes = [ctypes.c_char_p]
    _scprintf_l = _libraries['FIXME_STUB']._scprintf_l
    _scprintf_l.restype = ctypes.c_int32
    _scprintf_l.argtypes = [ctypes.c_char_p, _locale_t]
    _scprintf_p = _libraries['FIXME_STUB']._scprintf_p
    _scprintf_p.restype = ctypes.c_int32
    _scprintf_p.argtypes = [ctypes.c_char_p]
    _scprintf_p_l = _libraries['FIXME_STUB']._scprintf_p_l
    _scprintf_p_l.restype = ctypes.c_int32
    _scprintf_p_l.argtypes = [ctypes.c_char_p, _locale_t]
    _scwprintf = _libraries['FIXME_STUB']._scwprintf
    _scwprintf.restype = ctypes.c_int32
    _scwprintf.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _scwprintf_l = _libraries['FIXME_STUB']._scwprintf_l
    _scwprintf_l.restype = ctypes.c_int32
    _scwprintf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _scwprintf_p = _libraries['FIXME_STUB']._scwprintf_p
    _scwprintf_p.restype = ctypes.c_int32
    _scwprintf_p.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _scwprintf_p_l = _libraries['FIXME_STUB']._scwprintf_p_l
    _scwprintf_p_l.restype = ctypes.c_int32
    _scwprintf_p_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _searchenv = _libraries['FIXME_STUB']._searchenv
    _searchenv.restype = None
    _searchenv.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p]
    _searchenv_s = _libraries['FIXME_STUB']._searchenv_s
    _searchenv_s.restype = errno_t
    _searchenv_s.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, size_t]
    _set_FMA3_enable = _libraries['FIXME_STUB']._set_FMA3_enable
    _set_FMA3_enable.restype = ctypes.c_int32
    _set_FMA3_enable.argtypes = [ctypes.c_int32]
    _set_abort_behavior = _libraries['FIXME_STUB']._set_abort_behavior
    _set_abort_behavior.restype = ctypes.c_uint32
    _set_abort_behavior.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
    _set_controlfp = _libraries['FIXME_STUB']._set_controlfp
    _set_controlfp.restype = None
    _set_controlfp.argtypes = [ctypes.c_uint32, ctypes.c_uint32]
    _set_doserrno = _libraries['FIXME_STUB']._set_doserrno
    _set_doserrno.restype = errno_t
    _set_doserrno.argtypes = [ctypes.c_uint32]
    _set_errno = _libraries['FIXME_STUB']._set_errno
    _set_errno.restype = errno_t
    _set_errno.argtypes = [ctypes.c_int32]
    _set_error_mode = _libraries['FIXME_STUB']._set_error_mode
    _set_error_mode.restype = ctypes.c_int32
    _set_error_mode.argtypes = [ctypes.c_int32]
    _set_fmode = _libraries['FIXME_STUB']._set_fmode
    _set_fmode.restype = errno_t
    _set_fmode.argtypes = [ctypes.c_int32]
    _set_invalid_parameter_handler = _libraries['FIXME_STUB']._set_invalid_parameter_handler
    _set_invalid_parameter_handler.restype = _invalid_parameter_handler
    _set_invalid_parameter_handler.argtypes = [_invalid_parameter_handler]
    _set_printf_count_output = _libraries['FIXME_STUB']._set_printf_count_output
    _set_printf_count_output.restype = ctypes.c_int32
    _set_printf_count_output.argtypes = [ctypes.c_int32]
    _set_purecall_handler = _libraries['FIXME_STUB']._set_purecall_handler
    _set_purecall_handler.restype = _purecall_handler
    _set_purecall_handler.argtypes = [_purecall_handler]
    _set_se_translator = _libraries['FIXME_STUB']._set_se_translator
    _set_se_translator.restype = _se_translator_function
    _set_se_translator.argtypes = [_se_translator_function]
    _set_thread_local_invalid_parameter_handler = _libraries['FIXME_STUB']._set_thread_local_invalid_parameter_handler
    _set_thread_local_invalid_parameter_handler.restype = _invalid_parameter_handler
    _set_thread_local_invalid_parameter_handler.argtypes = [_invalid_parameter_handler]
    _seterrormode = _libraries['FIXME_STUB']._seterrormode
    _seterrormode.restype = None
    _seterrormode.argtypes = [ctypes.c_int32]
    _setmaxstdio = _libraries['FIXME_STUB']._setmaxstdio
    _setmaxstdio.restype = ctypes.c_int32
    _setmaxstdio.argtypes = [ctypes.c_int32]
    _setmode = _libraries['FIXME_STUB']._setmode
    _setmode.restype = ctypes.c_int32
    _setmode.argtypes = [ctypes.c_int32, ctypes.c_int32]
    _setsystime = _libraries['FIXME_STUB']._setsystime
    _setsystime.restype = ctypes.c_uint32
    _setsystime.argtypes = [ctypes.POINTER(struct_tm), ctypes.c_uint32]
    _sleep = _libraries['FIXME_STUB']._sleep
    _sleep.restype = None
    _sleep.argtypes = [ctypes.c_uint32]
    _snprintf = _libraries['FIXME_STUB']._snprintf
    _snprintf.restype = ctypes.c_int32
    _snprintf.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    _snprintf_c = _libraries['FIXME_STUB']._snprintf_c
    _snprintf_c.restype = ctypes.c_int32
    _snprintf_c.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    _snprintf_c_l = _libraries['FIXME_STUB']._snprintf_c_l
    _snprintf_c_l.restype = ctypes.c_int32
    _snprintf_c_l.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t]
    _snprintf_l = _libraries['FIXME_STUB']._snprintf_l
    _snprintf_l.restype = ctypes.c_int32
    _snprintf_l.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t]
    _snprintf_s = _libraries['FIXME_STUB']._snprintf_s
    _snprintf_s.restype = ctypes.c_int32
    _snprintf_s.argtypes = [ctypes.c_char_p, size_t, size_t, ctypes.c_char_p]
    _snprintf_s_l = _libraries['FIXME_STUB']._snprintf_s_l
    _snprintf_s_l.restype = ctypes.c_int32
    _snprintf_s_l.argtypes = [ctypes.c_char_p, size_t, size_t, ctypes.c_char_p, _locale_t]
    _snscanf = _libraries['FIXME_STUB']._snscanf
    _snscanf.restype = ctypes.c_int32
    _snscanf.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    _snscanf_l = _libraries['FIXME_STUB']._snscanf_l
    _snscanf_l.restype = ctypes.c_int32
    _snscanf_l.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t]
    _snscanf_s = _libraries['FIXME_STUB']._snscanf_s
    _snscanf_s.restype = ctypes.c_int32
    _snscanf_s.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    _snscanf_s_l = _libraries['FIXME_STUB']._snscanf_s_l
    _snscanf_s_l.restype = ctypes.c_int32
    _snscanf_s_l.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t]
    _snwprintf = _libraries['FIXME_STUB']._snwprintf
    _snwprintf.restype = ctypes.c_int32
    _snwprintf.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16)]
    _snwprintf_l = _libraries['FIXME_STUB']._snwprintf_l
    _snwprintf_l.restype = ctypes.c_int32
    _snwprintf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t]
    _snwprintf_s = _libraries['FIXME_STUB']._snwprintf_s
    _snwprintf_s.restype = ctypes.c_int32
    _snwprintf_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, size_t, ctypes.POINTER(ctypes.c_int16)]
    _snwprintf_s_l = _libraries['FIXME_STUB']._snwprintf_s_l
    _snwprintf_s_l.restype = ctypes.c_int32
    _snwprintf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, size_t, ctypes.POINTER(ctypes.c_int16), _locale_t]
    _snwscanf = _libraries['FIXME_STUB']._snwscanf
    _snwscanf.restype = ctypes.c_int32
    _snwscanf.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16)]
    _snwscanf_l = _libraries['FIXME_STUB']._snwscanf_l
    _snwscanf_l.restype = ctypes.c_int32
    _snwscanf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t]
    _snwscanf_s = _libraries['FIXME_STUB']._snwscanf_s
    _snwscanf_s.restype = ctypes.c_int32
    _snwscanf_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16)]
    _snwscanf_s_l = _libraries['FIXME_STUB']._snwscanf_s_l
    _snwscanf_s_l.restype = ctypes.c_int32
    _snwscanf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t]
    _sopen = _libraries['FIXME_STUB']._sopen
    _sopen.restype = ctypes.c_int32
    _sopen.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
    _sopen_dispatch = _libraries['FIXME_STUB']._sopen_dispatch
    _sopen_dispatch.restype = errno_t
    _sopen_dispatch.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(ctypes.c_int32), ctypes.c_int32]
    _sopen_s = _libraries['FIXME_STUB']._sopen_s
    _sopen_s.restype = errno_t
    _sopen_s.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
    _sopen_s_nolock = _libraries['FIXME_STUB']._sopen_s_nolock
    _sopen_s_nolock.restype = errno_t
    _sopen_s_nolock.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
    _splitpath = _libraries['FIXME_STUB']._splitpath
    _splitpath.restype = None
    _splitpath.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p]
    _splitpath_s = _libraries['FIXME_STUB']._splitpath_s
    _splitpath_s.restype = errno_t
    _splitpath_s.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t, ctypes.c_char_p, size_t, ctypes.c_char_p, size_t, ctypes.c_char_p, size_t]
    _sprintf_l = _libraries['FIXME_STUB']._sprintf_l
    _sprintf_l.restype = ctypes.c_int32
    _sprintf_l.argtypes = [ctypes.c_char_p, ctypes.c_char_p, _locale_t]
    _sprintf_p = _libraries['FIXME_STUB']._sprintf_p
    _sprintf_p.restype = ctypes.c_int32
    _sprintf_p.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    _sprintf_p_l = _libraries['FIXME_STUB']._sprintf_p_l
    _sprintf_p_l.restype = ctypes.c_int32
    _sprintf_p_l.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t]
    _sprintf_s_l = _libraries['FIXME_STUB']._sprintf_s_l
    _sprintf_s_l.restype = ctypes.c_int32
    _sprintf_s_l.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t]
    _sscanf_l = _libraries['FIXME_STUB']._sscanf_l
    _sscanf_l.restype = ctypes.c_int32
    _sscanf_l.argtypes = [ctypes.c_char_p, ctypes.c_char_p, _locale_t]
    _sscanf_s_l = _libraries['FIXME_STUB']._sscanf_s_l
    _sscanf_s_l.restype = ctypes.c_int32
    _sscanf_s_l.argtypes = [ctypes.c_char_p, ctypes.c_char_p, _locale_t]
    _stat32 = _libraries['FIXME_STUB']._stat32
    _stat32.restype = ctypes.c_int32
    _stat32.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct__stat32)]
    _stat32i64 = _libraries['FIXME_STUB']._stat32i64
    _stat32i64.restype = ctypes.c_int32
    _stat32i64.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct__stat32i64)]
    _stat64 = _libraries['FIXME_STUB']._stat64
    _stat64.restype = ctypes.c_int32
    _stat64.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct__stat64)]
    _stat64i32 = _libraries['FIXME_STUB']._stat64i32
    _stat64i32.restype = ctypes.c_int32
    _stat64i32.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct__stat64i32)]
    _statusfp = _libraries['FIXME_STUB']._statusfp
    _statusfp.restype = ctypes.c_uint32
    _statusfp.argtypes = []
    _strcmpi = _libraries['FIXME_STUB']._strcmpi
    _strcmpi.restype = ctypes.c_int32
    _strcmpi.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    _strcoll_l = _libraries['FIXME_STUB']._strcoll_l
    _strcoll_l.restype = ctypes.c_int32
    _strcoll_l.argtypes = [ctypes.c_char_p, ctypes.c_char_p, _locale_t]
    _strdate = _libraries['FIXME_STUB']._strdate
    _strdate.restype = ctypes.c_char_p
    _strdate.argtypes = [ctypes.c_char_p]
    _strdate_s = _libraries['FIXME_STUB']._strdate_s
    _strdate_s.restype = errno_t
    _strdate_s.argtypes = [ctypes.c_char_p, size_t]
    _strdup = _libraries['FIXME_STUB']._strdup
    _strdup.restype = ctypes.c_char_p
    _strdup.argtypes = [ctypes.c_char_p]
    _strerror = _libraries['FIXME_STUB']._strerror
    _strerror.restype = ctypes.c_char_p
    _strerror.argtypes = [ctypes.c_char_p]
    _strerror_s = _libraries['FIXME_STUB']._strerror_s
    _strerror_s.restype = errno_t
    _strerror_s.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    _strftime_l = _libraries['FIXME_STUB']._strftime_l
    _strftime_l.restype = size_t
    _strftime_l.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, ctypes.POINTER(struct_tm), _locale_t]
    _stricmp = _libraries['FIXME_STUB']._stricmp
    _stricmp.restype = ctypes.c_int32
    _stricmp.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    _stricmp_l = _libraries['FIXME_STUB']._stricmp_l
    _stricmp_l.restype = ctypes.c_int32
    _stricmp_l.argtypes = [ctypes.c_char_p, ctypes.c_char_p, _locale_t]
    _stricoll = _libraries['FIXME_STUB']._stricoll
    _stricoll.restype = ctypes.c_int32
    _stricoll.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    _stricoll_l = _libraries['FIXME_STUB']._stricoll_l
    _stricoll_l.restype = ctypes.c_int32
    _stricoll_l.argtypes = [ctypes.c_char_p, ctypes.c_char_p, _locale_t]
    _strlwr = _libraries['FIXME_STUB']._strlwr
    _strlwr.restype = ctypes.c_char_p
    _strlwr.argtypes = [ctypes.c_char_p]
    _strlwr_l = _libraries['FIXME_STUB']._strlwr_l
    _strlwr_l.restype = ctypes.c_char_p
    _strlwr_l.argtypes = [ctypes.c_char_p, _locale_t]
    _strlwr_s = _libraries['FIXME_STUB']._strlwr_s
    _strlwr_s.restype = errno_t
    _strlwr_s.argtypes = [ctypes.c_char_p, size_t]
    _strlwr_s_l = _libraries['FIXME_STUB']._strlwr_s_l
    _strlwr_s_l.restype = errno_t
    _strlwr_s_l.argtypes = [ctypes.c_char_p, size_t, _locale_t]
    _strncoll = _libraries['FIXME_STUB']._strncoll
    _strncoll.restype = ctypes.c_int32
    _strncoll.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    _strncoll_l = _libraries['FIXME_STUB']._strncoll_l
    _strncoll_l.restype = ctypes.c_int32
    _strncoll_l.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t, _locale_t]
    _strnicmp = _libraries['FIXME_STUB']._strnicmp
    _strnicmp.restype = ctypes.c_int32
    _strnicmp.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    _strnicmp_l = _libraries['FIXME_STUB']._strnicmp_l
    _strnicmp_l.restype = ctypes.c_int32
    _strnicmp_l.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t, _locale_t]
    _strnicoll = _libraries['FIXME_STUB']._strnicoll
    _strnicoll.restype = ctypes.c_int32
    _strnicoll.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    _strnicoll_l = _libraries['FIXME_STUB']._strnicoll_l
    _strnicoll_l.restype = ctypes.c_int32
    _strnicoll_l.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t, _locale_t]
    _strnset = _libraries['FIXME_STUB']._strnset
    _strnset.restype = ctypes.c_char_p
    _strnset.argtypes = [ctypes.c_char_p, ctypes.c_int32, size_t]
    _strnset_s = _libraries['FIXME_STUB']._strnset_s
    _strnset_s.restype = errno_t
    _strnset_s.argtypes = [ctypes.c_char_p, size_t, ctypes.c_int32, size_t]
    _strrev = _libraries['FIXME_STUB']._strrev
    _strrev.restype = ctypes.c_char_p
    _strrev.argtypes = [ctypes.c_char_p]
    _strset = _libraries['FIXME_STUB']._strset
    _strset.restype = ctypes.c_char_p
    _strset.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    _strset_s = _libraries['FIXME_STUB']._strset_s
    _strset_s.restype = errno_t
    _strset_s.argtypes = [ctypes.c_char_p, size_t, ctypes.c_int32]
    _strtime = _libraries['FIXME_STUB']._strtime
    _strtime.restype = ctypes.c_char_p
    _strtime.argtypes = [ctypes.c_char_p]
    _strtime_s = _libraries['FIXME_STUB']._strtime_s
    _strtime_s.restype = errno_t
    _strtime_s.argtypes = [ctypes.c_char_p, size_t]
    _strtod_l = _libraries['FIXME_STUB']._strtod_l
    _strtod_l.restype = ctypes.c_double
    _strtod_l.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), _locale_t]
    _strtof_l = _libraries['FIXME_STUB']._strtof_l
    _strtof_l.restype = ctypes.c_float
    _strtof_l.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), _locale_t]
    _strtoi64 = _libraries['FIXME_STUB']._strtoi64
    _strtoi64.restype = ctypes.c_int64
    _strtoi64.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32]
    _strtoi64_l = _libraries['FIXME_STUB']._strtoi64_l
    _strtoi64_l.restype = ctypes.c_int64
    _strtoi64_l.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32, _locale_t]
    _strtol_l = _libraries['FIXME_STUB']._strtol_l
    _strtol_l.restype = ctypes.c_int32
    _strtol_l.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32, _locale_t]
    _strtold_l = _libraries['FIXME_STUB']._strtold_l
    _strtold_l.restype = ctypes.c_double
    _strtold_l.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), _locale_t]
    _strtoll_l = _libraries['FIXME_STUB']._strtoll_l
    _strtoll_l.restype = ctypes.c_int64
    _strtoll_l.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32, _locale_t]
    _strtoui64 = _libraries['FIXME_STUB']._strtoui64
    _strtoui64.restype = ctypes.c_uint64
    _strtoui64.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32]
    _strtoui64_l = _libraries['FIXME_STUB']._strtoui64_l
    _strtoui64_l.restype = ctypes.c_uint64
    _strtoui64_l.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32, _locale_t]
    _strtoul_l = _libraries['FIXME_STUB']._strtoul_l
    _strtoul_l.restype = ctypes.c_uint32
    _strtoul_l.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32, _locale_t]
    _strtoull_l = _libraries['FIXME_STUB']._strtoull_l
    _strtoull_l.restype = ctypes.c_uint64
    _strtoull_l.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32, _locale_t]
    _strupr = _libraries['FIXME_STUB']._strupr
    _strupr.restype = ctypes.c_char_p
    _strupr.argtypes = [ctypes.c_char_p]
    _strupr_l = _libraries['FIXME_STUB']._strupr_l
    _strupr_l.restype = ctypes.c_char_p
    _strupr_l.argtypes = [ctypes.c_char_p, _locale_t]
    _strupr_s = _libraries['FIXME_STUB']._strupr_s
    _strupr_s.restype = errno_t
    _strupr_s.argtypes = [ctypes.c_char_p, size_t]
    _strupr_s_l = _libraries['FIXME_STUB']._strupr_s_l
    _strupr_s_l.restype = errno_t
    _strupr_s_l.argtypes = [ctypes.c_char_p, size_t, _locale_t]
    _strxfrm_l = _libraries['FIXME_STUB']._strxfrm_l
    _strxfrm_l.restype = size_t
    _strxfrm_l.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t, _locale_t]
    _swab = _libraries['FIXME_STUB']._swab
    _swab.restype = None
    _swab.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32]
    _swprintf = _libraries['FIXME_STUB']._swprintf
    _swprintf.restype = ctypes.c_int32
    _swprintf.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _swprintf_c = _libraries['FIXME_STUB']._swprintf_c
    _swprintf_c.restype = ctypes.c_int32
    _swprintf_c.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16)]
    _swprintf_c_l = _libraries['FIXME_STUB']._swprintf_c_l
    _swprintf_c_l.restype = ctypes.c_int32
    _swprintf_c_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t]
    _swprintf_l = _libraries['FIXME_STUB']._swprintf_l
    _swprintf_l.restype = ctypes.c_int32
    _swprintf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), _locale_t]
    _swprintf_p = _libraries['FIXME_STUB']._swprintf_p
    _swprintf_p.restype = ctypes.c_int32
    _swprintf_p.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16)]
    _swprintf_p_l = _libraries['FIXME_STUB']._swprintf_p_l
    _swprintf_p_l.restype = ctypes.c_int32
    _swprintf_p_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t]
    _swprintf_s_l = _libraries['FIXME_STUB']._swprintf_s_l
    _swprintf_s_l.restype = ctypes.c_int32
    _swprintf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t]
    _swscanf_l = _libraries['FIXME_STUB']._swscanf_l
    _swscanf_l.restype = ctypes.c_int32
    _swscanf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), _locale_t]
    _swscanf_s_l = _libraries['FIXME_STUB']._swscanf_s_l
    _swscanf_s_l.restype = ctypes.c_int32
    _swscanf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), _locale_t]
    _tell = _libraries['FIXME_STUB']._tell
    _tell.restype = ctypes.c_int32
    _tell.argtypes = [ctypes.c_int32]
    _telli64 = _libraries['FIXME_STUB']._telli64
    _telli64.restype = ctypes.c_int64
    _telli64.argtypes = [ctypes.c_int32]
    _tempnam = _libraries['FIXME_STUB']._tempnam
    _tempnam.restype = ctypes.c_char_p
    _tempnam.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    _time32 = _libraries['FIXME_STUB']._time32
    _time32.restype = __time32_t
    _time32.argtypes = [ctypes.POINTER(__time32_t)]
    _time64 = _libraries['FIXME_STUB']._time64
    _time64.restype = __time64_t
    _time64.argtypes = [ctypes.POINTER(__time64_t)]
    _timespec32_get = _libraries['FIXME_STUB']._timespec32_get
    _timespec32_get.restype = ctypes.c_int32
    _timespec32_get.argtypes = [ctypes.POINTER(struct__timespec32), ctypes.c_int32]
    _timespec64_get = _libraries['FIXME_STUB']._timespec64_get
    _timespec64_get.restype = ctypes.c_int32
    _timespec64_get.argtypes = [ctypes.POINTER(struct__timespec64), ctypes.c_int32]
    _tolower = _libraries['FIXME_STUB']._tolower
    _tolower.restype = ctypes.c_int32
    _tolower.argtypes = [ctypes.c_int32]
    _tolower_l = _libraries['FIXME_STUB']._tolower_l
    _tolower_l.restype = ctypes.c_int32
    _tolower_l.argtypes = [ctypes.c_int32, _locale_t]
    _toupper = _libraries['FIXME_STUB']._toupper
    _toupper.restype = ctypes.c_int32
    _toupper.argtypes = [ctypes.c_int32]
    _toupper_l = _libraries['FIXME_STUB']._toupper_l
    _toupper_l.restype = ctypes.c_int32
    _toupper_l.argtypes = [ctypes.c_int32, _locale_t]
    _towlower_l = _libraries['FIXME_STUB']._towlower_l
    _towlower_l.restype = wint_t
    _towlower_l.argtypes = [wint_t, _locale_t]
    _towupper_l = _libraries['FIXME_STUB']._towupper_l
    _towupper_l.restype = wint_t
    _towupper_l.argtypes = [wint_t, _locale_t]
    _tzset = _libraries['FIXME_STUB']._tzset
    _tzset.restype = None
    _tzset.argtypes = []
    _ui64toa = _libraries['FIXME_STUB']._ui64toa
    _ui64toa.restype = ctypes.c_char_p
    _ui64toa.argtypes = [ctypes.c_uint64, ctypes.c_char_p, ctypes.c_int32]
    _ui64toa_s = _libraries['FIXME_STUB']._ui64toa_s
    _ui64toa_s.restype = errno_t
    _ui64toa_s.argtypes = [ctypes.c_uint64, ctypes.c_char_p, size_t, ctypes.c_int32]
    _ui64tow = _libraries['FIXME_STUB']._ui64tow
    _ui64tow.restype = ctypes.POINTER(ctypes.c_int16)
    _ui64tow.argtypes = [ctypes.c_uint64, ctypes.POINTER(ctypes.c_int16), ctypes.c_int32]
    _ui64tow_s = _libraries['FIXME_STUB']._ui64tow_s
    _ui64tow_s.restype = errno_t
    _ui64tow_s.argtypes = [ctypes.c_uint64, ctypes.POINTER(ctypes.c_int16), size_t, ctypes.c_int32]
    _ultoa = _libraries['FIXME_STUB']._ultoa
    _ultoa.restype = ctypes.c_char_p
    _ultoa.argtypes = [ctypes.c_uint32, ctypes.c_char_p, ctypes.c_int32]
    _ultoa_s = _libraries['FIXME_STUB']._ultoa_s
    _ultoa_s.restype = errno_t
    _ultoa_s.argtypes = [ctypes.c_uint32, ctypes.c_char_p, size_t, ctypes.c_int32]
    _ultow = _libraries['FIXME_STUB']._ultow
    _ultow.restype = ctypes.POINTER(ctypes.c_int16)
    _ultow.argtypes = [ctypes.c_uint32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int32]
    _ultow_s = _libraries['FIXME_STUB']._ultow_s
    _ultow_s.restype = errno_t
    _ultow_s.argtypes = [ctypes.c_uint32, ctypes.POINTER(ctypes.c_int16), size_t, ctypes.c_int32]
    _umask = _libraries['FIXME_STUB']._umask
    _umask.restype = ctypes.c_int32
    _umask.argtypes = [ctypes.c_int32]
    _umask_s = _libraries['FIXME_STUB']._umask_s
    _umask_s.restype = errno_t
    _umask_s.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int32)]
    _umul128 = _libraries['FIXME_STUB']._umul128
    _umul128.restype = ctypes.c_uint64
    _umul128.argtypes = [ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(ctypes.c_uint64)]
    _ungetc_nolock = _libraries['FIXME_STUB']._ungetc_nolock
    _ungetc_nolock.restype = ctypes.c_int32
    _ungetc_nolock.argtypes = [ctypes.c_int32, ctypes.POINTER(FILE)]
    _ungetwc_nolock = _libraries['FIXME_STUB']._ungetwc_nolock
    _ungetwc_nolock.restype = wint_t
    _ungetwc_nolock.argtypes = [wint_t, ctypes.POINTER(FILE)]
    _ungetwch = _libraries['FIXME_STUB']._ungetwch
    _ungetwch.restype = wint_t
    _ungetwch.argtypes = [wint_t]
    _ungetwch_nolock = _libraries['FIXME_STUB']._ungetwch_nolock
    _ungetwch_nolock.restype = wint_t
    _ungetwch_nolock.argtypes = [wint_t]
    _unlink = _libraries['FIXME_STUB']._unlink
    _unlink.restype = ctypes.c_int32
    _unlink.argtypes = [ctypes.c_char_p]
    _unlock_file = _libraries['FIXME_STUB']._unlock_file
    _unlock_file.restype = None
    _unlock_file.argtypes = [ctypes.POINTER(FILE)]
    _vcwprintf = _libraries['FIXME_STUB']._vcwprintf
    _vcwprintf.restype = ctypes.c_int32
    _vcwprintf.argtypes = [ctypes.POINTER(ctypes.c_int16), va_list]
    _vcwprintf_l = _libraries['FIXME_STUB']._vcwprintf_l
    _vcwprintf_l.restype = ctypes.c_int32
    _vcwprintf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vcwprintf_p = _libraries['FIXME_STUB']._vcwprintf_p
    _vcwprintf_p.restype = ctypes.c_int32
    _vcwprintf_p.argtypes = [ctypes.POINTER(ctypes.c_int16), va_list]
    _vcwprintf_p_l = _libraries['FIXME_STUB']._vcwprintf_p_l
    _vcwprintf_p_l.restype = ctypes.c_int32
    _vcwprintf_p_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vcwprintf_s = _libraries['FIXME_STUB']._vcwprintf_s
    _vcwprintf_s.restype = ctypes.c_int32
    _vcwprintf_s.argtypes = [ctypes.POINTER(ctypes.c_int16), va_list]
    _vcwprintf_s_l = _libraries['FIXME_STUB']._vcwprintf_s_l
    _vcwprintf_s_l.restype = ctypes.c_int32
    _vcwprintf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vcwscanf = _libraries['FIXME_STUB']._vcwscanf
    _vcwscanf.restype = ctypes.c_int32
    _vcwscanf.argtypes = [ctypes.POINTER(ctypes.c_int16), va_list]
    _vcwscanf_l = _libraries['FIXME_STUB']._vcwscanf_l
    _vcwscanf_l.restype = ctypes.c_int32
    _vcwscanf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vcwscanf_s = _libraries['FIXME_STUB']._vcwscanf_s
    _vcwscanf_s.restype = ctypes.c_int32
    _vcwscanf_s.argtypes = [ctypes.POINTER(ctypes.c_int16), va_list]
    _vcwscanf_s_l = _libraries['FIXME_STUB']._vcwscanf_s_l
    _vcwscanf_s_l.restype = ctypes.c_int32
    _vcwscanf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vfprintf_l = _libraries['FIXME_STUB']._vfprintf_l
    _vfprintf_l.restype = ctypes.c_int32
    _vfprintf_l.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t, va_list]
    _vfprintf_p = _libraries['FIXME_STUB']._vfprintf_p
    _vfprintf_p.restype = ctypes.c_int32
    _vfprintf_p.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, va_list]
    _vfprintf_p_l = _libraries['FIXME_STUB']._vfprintf_p_l
    _vfprintf_p_l.restype = ctypes.c_int32
    _vfprintf_p_l.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t, va_list]
    _vfprintf_s_l = _libraries['FIXME_STUB']._vfprintf_s_l
    _vfprintf_s_l.restype = ctypes.c_int32
    _vfprintf_s_l.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t, va_list]
    _vfscanf_l = _libraries['FIXME_STUB']._vfscanf_l
    _vfscanf_l.restype = ctypes.c_int32
    _vfscanf_l.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t, va_list]
    _vfscanf_s_l = _libraries['FIXME_STUB']._vfscanf_s_l
    _vfscanf_s_l.restype = ctypes.c_int32
    _vfscanf_s_l.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, _locale_t, va_list]
    _vfwprintf_l = _libraries['FIXME_STUB']._vfwprintf_l
    _vfwprintf_l.restype = ctypes.c_int32
    _vfwprintf_l.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vfwprintf_p = _libraries['FIXME_STUB']._vfwprintf_p
    _vfwprintf_p.restype = ctypes.c_int32
    _vfwprintf_p.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), va_list]
    _vfwprintf_p_l = _libraries['FIXME_STUB']._vfwprintf_p_l
    _vfwprintf_p_l.restype = ctypes.c_int32
    _vfwprintf_p_l.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vfwprintf_s_l = _libraries['FIXME_STUB']._vfwprintf_s_l
    _vfwprintf_s_l.restype = ctypes.c_int32
    _vfwprintf_s_l.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vfwscanf_l = _libraries['FIXME_STUB']._vfwscanf_l
    _vfwscanf_l.restype = ctypes.c_int32
    _vfwscanf_l.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vfwscanf_s_l = _libraries['FIXME_STUB']._vfwscanf_s_l
    _vfwscanf_s_l.restype = ctypes.c_int32
    _vfwscanf_s_l.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vprintf_l = _libraries['FIXME_STUB']._vprintf_l
    _vprintf_l.restype = ctypes.c_int32
    _vprintf_l.argtypes = [ctypes.c_char_p, _locale_t, va_list]
    _vprintf_p = _libraries['FIXME_STUB']._vprintf_p
    _vprintf_p.restype = ctypes.c_int32
    _vprintf_p.argtypes = [ctypes.c_char_p, va_list]
    _vprintf_p_l = _libraries['FIXME_STUB']._vprintf_p_l
    _vprintf_p_l.restype = ctypes.c_int32
    _vprintf_p_l.argtypes = [ctypes.c_char_p, _locale_t, va_list]
    _vprintf_s_l = _libraries['FIXME_STUB']._vprintf_s_l
    _vprintf_s_l.restype = ctypes.c_int32
    _vprintf_s_l.argtypes = [ctypes.c_char_p, _locale_t, va_list]
    _vscanf_l = _libraries['FIXME_STUB']._vscanf_l
    _vscanf_l.restype = ctypes.c_int32
    _vscanf_l.argtypes = [ctypes.c_char_p, _locale_t, va_list]
    _vscanf_s_l = _libraries['FIXME_STUB']._vscanf_s_l
    _vscanf_s_l.restype = ctypes.c_int32
    _vscanf_s_l.argtypes = [ctypes.c_char_p, _locale_t, va_list]
    _vscprintf = _libraries['FIXME_STUB']._vscprintf
    _vscprintf.restype = ctypes.c_int32
    _vscprintf.argtypes = [ctypes.c_char_p, va_list]
    _vscprintf_l = _libraries['FIXME_STUB']._vscprintf_l
    _vscprintf_l.restype = ctypes.c_int32
    _vscprintf_l.argtypes = [ctypes.c_char_p, _locale_t, va_list]
    _vscprintf_p = _libraries['FIXME_STUB']._vscprintf_p
    _vscprintf_p.restype = ctypes.c_int32
    _vscprintf_p.argtypes = [ctypes.c_char_p, va_list]
    _vscprintf_p_l = _libraries['FIXME_STUB']._vscprintf_p_l
    _vscprintf_p_l.restype = ctypes.c_int32
    _vscprintf_p_l.argtypes = [ctypes.c_char_p, _locale_t, va_list]
    _vscwprintf = _libraries['FIXME_STUB']._vscwprintf
    _vscwprintf.restype = ctypes.c_int32
    _vscwprintf.argtypes = [ctypes.POINTER(ctypes.c_int16), va_list]
    _vscwprintf_l = _libraries['FIXME_STUB']._vscwprintf_l
    _vscwprintf_l.restype = ctypes.c_int32
    _vscwprintf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vscwprintf_p = _libraries['FIXME_STUB']._vscwprintf_p
    _vscwprintf_p.restype = ctypes.c_int32
    _vscwprintf_p.argtypes = [ctypes.POINTER(ctypes.c_int16), va_list]
    _vscwprintf_p_l = _libraries['FIXME_STUB']._vscwprintf_p_l
    _vscwprintf_p_l.restype = ctypes.c_int32
    _vscwprintf_p_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vsnprintf = _libraries['FIXME_STUB']._vsnprintf
    _vsnprintf.restype = ctypes.c_int32
    _vsnprintf.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, va_list]
    _vsnprintf_c = _libraries['FIXME_STUB']._vsnprintf_c
    _vsnprintf_c.restype = ctypes.c_int32
    _vsnprintf_c.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, va_list]
    _vsnprintf_c_l = _libraries['FIXME_STUB']._vsnprintf_c_l
    _vsnprintf_c_l.restype = ctypes.c_int32
    _vsnprintf_c_l.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t, va_list]
    _vsnprintf_l = _libraries['FIXME_STUB']._vsnprintf_l
    _vsnprintf_l.restype = ctypes.c_int32
    _vsnprintf_l.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t, va_list]
    _vsnprintf_s = _libraries['FIXME_STUB']._vsnprintf_s
    _vsnprintf_s.restype = ctypes.c_int32
    _vsnprintf_s.argtypes = [ctypes.c_char_p, size_t, size_t, ctypes.c_char_p, va_list]
    _vsnprintf_s_l = _libraries['FIXME_STUB']._vsnprintf_s_l
    _vsnprintf_s_l.restype = ctypes.c_int32
    _vsnprintf_s_l.argtypes = [ctypes.c_char_p, size_t, size_t, ctypes.c_char_p, _locale_t, va_list]
    _vsnwprintf = _libraries['FIXME_STUB']._vsnwprintf
    _vsnwprintf.restype = ctypes.c_int32
    _vsnwprintf.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), va_list]
    _vsnwprintf_l = _libraries['FIXME_STUB']._vsnwprintf_l
    _vsnwprintf_l.restype = ctypes.c_int32
    _vsnwprintf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vsnwprintf_s = _libraries['FIXME_STUB']._vsnwprintf_s
    _vsnwprintf_s.restype = ctypes.c_int32
    _vsnwprintf_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, size_t, ctypes.POINTER(ctypes.c_int16), va_list]
    _vsnwprintf_s_l = _libraries['FIXME_STUB']._vsnwprintf_s_l
    _vsnwprintf_s_l.restype = ctypes.c_int32
    _vsnwprintf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, size_t, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vsnwscanf_l = _libraries['FIXME_STUB']._vsnwscanf_l
    _vsnwscanf_l.restype = ctypes.c_int32
    _vsnwscanf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vsnwscanf_s_l = _libraries['FIXME_STUB']._vsnwscanf_s_l
    _vsnwscanf_s_l.restype = ctypes.c_int32
    _vsnwscanf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vsprintf_l = _libraries['FIXME_STUB']._vsprintf_l
    _vsprintf_l.restype = ctypes.c_int32
    _vsprintf_l.argtypes = [ctypes.c_char_p, ctypes.c_char_p, _locale_t, va_list]
    _vsprintf_p = _libraries['FIXME_STUB']._vsprintf_p
    _vsprintf_p.restype = ctypes.c_int32
    _vsprintf_p.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, va_list]
    _vsprintf_p_l = _libraries['FIXME_STUB']._vsprintf_p_l
    _vsprintf_p_l.restype = ctypes.c_int32
    _vsprintf_p_l.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t, va_list]
    _vsprintf_s_l = _libraries['FIXME_STUB']._vsprintf_s_l
    _vsprintf_s_l.restype = ctypes.c_int32
    _vsprintf_s_l.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, _locale_t, va_list]
    _vsscanf_l = _libraries['FIXME_STUB']._vsscanf_l
    _vsscanf_l.restype = ctypes.c_int32
    _vsscanf_l.argtypes = [ctypes.c_char_p, ctypes.c_char_p, _locale_t, va_list]
    _vsscanf_s_l = _libraries['FIXME_STUB']._vsscanf_s_l
    _vsscanf_s_l.restype = ctypes.c_int32
    _vsscanf_s_l.argtypes = [ctypes.c_char_p, ctypes.c_char_p, _locale_t, va_list]
    _vswprintf = _libraries['FIXME_STUB']._vswprintf
    _vswprintf.restype = ctypes.c_int32
    _vswprintf.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), va_list]
    _vswprintf_c = _libraries['FIXME_STUB']._vswprintf_c
    _vswprintf_c.restype = ctypes.c_int32
    _vswprintf_c.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), va_list]
    _vswprintf_c_l = _libraries['FIXME_STUB']._vswprintf_c_l
    _vswprintf_c_l.restype = ctypes.c_int32
    _vswprintf_c_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vswprintf_l = _libraries['FIXME_STUB']._vswprintf_l
    _vswprintf_l.restype = ctypes.c_int32
    _vswprintf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vswprintf_p = _libraries['FIXME_STUB']._vswprintf_p
    _vswprintf_p.restype = ctypes.c_int32
    _vswprintf_p.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), va_list]
    _vswprintf_p_l = _libraries['FIXME_STUB']._vswprintf_p_l
    _vswprintf_p_l.restype = ctypes.c_int32
    _vswprintf_p_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vswprintf_s_l = _libraries['FIXME_STUB']._vswprintf_s_l
    _vswprintf_s_l.restype = ctypes.c_int32
    _vswprintf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vswscanf_l = _libraries['FIXME_STUB']._vswscanf_l
    _vswscanf_l.restype = ctypes.c_int32
    _vswscanf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vswscanf_s_l = _libraries['FIXME_STUB']._vswscanf_s_l
    _vswscanf_s_l.restype = ctypes.c_int32
    _vswscanf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vwprintf_l = _libraries['FIXME_STUB']._vwprintf_l
    _vwprintf_l.restype = ctypes.c_int32
    _vwprintf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vwprintf_p = _libraries['FIXME_STUB']._vwprintf_p
    _vwprintf_p.restype = ctypes.c_int32
    _vwprintf_p.argtypes = [ctypes.POINTER(ctypes.c_int16), va_list]
    _vwprintf_p_l = _libraries['FIXME_STUB']._vwprintf_p_l
    _vwprintf_p_l.restype = ctypes.c_int32
    _vwprintf_p_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vwprintf_s_l = _libraries['FIXME_STUB']._vwprintf_s_l
    _vwprintf_s_l.restype = ctypes.c_int32
    _vwprintf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vwscanf_l = _libraries['FIXME_STUB']._vwscanf_l
    _vwscanf_l.restype = ctypes.c_int32
    _vwscanf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _vwscanf_s_l = _libraries['FIXME_STUB']._vwscanf_s_l
    _vwscanf_s_l.restype = ctypes.c_int32
    _vwscanf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t, va_list]
    _waccess = _libraries['FIXME_STUB']._waccess
    _waccess.restype = ctypes.c_int32
    _waccess.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int32]
    _waccess_s = _libraries['FIXME_STUB']._waccess_s
    _waccess_s.restype = errno_t
    _waccess_s.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int32]
    _wasctime = _libraries['FIXME_STUB']._wasctime
    _wasctime.restype = ctypes.POINTER(ctypes.c_int16)
    _wasctime.argtypes = [ctypes.POINTER(struct_tm)]
    _wasctime_s = _libraries['FIXME_STUB']._wasctime_s
    _wasctime_s.restype = errno_t
    _wasctime_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(struct_tm)]
    _wassert = _libraries['FIXME_STUB']._wassert
    _wassert.restype = None
    _wassert.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.c_uint32]
    _wchdir = _libraries['FIXME_STUB']._wchdir
    _wchdir.restype = ctypes.c_int32
    _wchdir.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wchmod = _libraries['FIXME_STUB']._wchmod
    _wchmod.restype = ctypes.c_int32
    _wchmod.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int32]
    _wcreat = _libraries['FIXME_STUB']._wcreat
    _wcreat.restype = ctypes.c_int32
    _wcreat.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int32]
    _wcreate_locale = _libraries['FIXME_STUB']._wcreate_locale
    _wcreate_locale.restype = _locale_t
    _wcreate_locale.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16)]
    _wcscoll_l = _libraries['FIXME_STUB']._wcscoll_l
    _wcscoll_l.restype = ctypes.c_int32
    _wcscoll_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wcsdup = _libraries['FIXME_STUB']._wcsdup
    _wcsdup.restype = ctypes.POINTER(ctypes.c_int16)
    _wcsdup.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wcserror = _libraries['FIXME_STUB']._wcserror
    _wcserror.restype = ctypes.POINTER(ctypes.c_int16)
    _wcserror.argtypes = [ctypes.c_int32]
    _wcserror_s = _libraries['FIXME_STUB']._wcserror_s
    _wcserror_s.restype = errno_t
    _wcserror_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.c_int32]
    _wcsftime_l = _libraries['FIXME_STUB']._wcsftime_l
    _wcsftime_l.restype = size_t
    _wcsftime_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(struct_tm), _locale_t]
    _wcsicmp = _libraries['FIXME_STUB']._wcsicmp
    _wcsicmp.restype = ctypes.c_int32
    _wcsicmp.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wcsicmp_l = _libraries['FIXME_STUB']._wcsicmp_l
    _wcsicmp_l.restype = ctypes.c_int32
    _wcsicmp_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wcsicoll = _libraries['FIXME_STUB']._wcsicoll
    _wcsicoll.restype = ctypes.c_int32
    _wcsicoll.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wcsicoll_l = _libraries['FIXME_STUB']._wcsicoll_l
    _wcsicoll_l.restype = ctypes.c_int32
    _wcsicoll_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wcslwr = _libraries['FIXME_STUB']._wcslwr
    _wcslwr.restype = ctypes.POINTER(ctypes.c_int16)
    _wcslwr.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wcslwr_l = _libraries['FIXME_STUB']._wcslwr_l
    _wcslwr_l.restype = ctypes.POINTER(ctypes.c_int16)
    _wcslwr_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wcslwr_s = _libraries['FIXME_STUB']._wcslwr_s
    _wcslwr_s.restype = errno_t
    _wcslwr_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t]
    _wcslwr_s_l = _libraries['FIXME_STUB']._wcslwr_s_l
    _wcslwr_s_l.restype = errno_t
    _wcslwr_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, _locale_t]
    _wcsncoll = _libraries['FIXME_STUB']._wcsncoll
    _wcsncoll.restype = ctypes.c_int32
    _wcsncoll.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t]
    _wcsncoll_l = _libraries['FIXME_STUB']._wcsncoll_l
    _wcsncoll_l.restype = ctypes.c_int32
    _wcsncoll_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t, _locale_t]
    _wcsnicmp = _libraries['FIXME_STUB']._wcsnicmp
    _wcsnicmp.restype = ctypes.c_int32
    _wcsnicmp.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t]
    _wcsnicmp_l = _libraries['FIXME_STUB']._wcsnicmp_l
    _wcsnicmp_l.restype = ctypes.c_int32
    _wcsnicmp_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t, _locale_t]
    _wcsnicoll = _libraries['FIXME_STUB']._wcsnicoll
    _wcsnicoll.restype = ctypes.c_int32
    _wcsnicoll.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t]
    _wcsnicoll_l = _libraries['FIXME_STUB']._wcsnicoll_l
    _wcsnicoll_l.restype = ctypes.c_int32
    _wcsnicoll_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t, _locale_t]
    _wcsnset = _libraries['FIXME_STUB']._wcsnset
    _wcsnset.restype = ctypes.POINTER(ctypes.c_int16)
    _wcsnset.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16, size_t]
    _wcsnset_s = _libraries['FIXME_STUB']._wcsnset_s
    _wcsnset_s.restype = errno_t
    _wcsnset_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.c_int16, size_t]
    _wcsrev = _libraries['FIXME_STUB']._wcsrev
    _wcsrev.restype = ctypes.POINTER(ctypes.c_int16)
    _wcsrev.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wcsset = _libraries['FIXME_STUB']._wcsset
    _wcsset.restype = ctypes.POINTER(ctypes.c_int16)
    _wcsset.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16]
    _wcsset_s = _libraries['FIXME_STUB']._wcsset_s
    _wcsset_s.restype = errno_t
    _wcsset_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.c_int16]
    _wcstod_l = _libraries['FIXME_STUB']._wcstod_l
    _wcstod_l.restype = ctypes.c_double
    _wcstod_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), _locale_t]
    _wcstof_l = _libraries['FIXME_STUB']._wcstof_l
    _wcstof_l.restype = ctypes.c_float
    _wcstof_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), _locale_t]
    _wcstoi64 = _libraries['FIXME_STUB']._wcstoi64
    _wcstoi64.restype = ctypes.c_int64
    _wcstoi64.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.c_int32]
    _wcstoi64_l = _libraries['FIXME_STUB']._wcstoi64_l
    _wcstoi64_l.restype = ctypes.c_int64
    _wcstoi64_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.c_int32, _locale_t]
    _wcstol_l = _libraries['FIXME_STUB']._wcstol_l
    _wcstol_l.restype = ctypes.c_int32
    _wcstol_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.c_int32, _locale_t]
    _wcstold_l = _libraries['FIXME_STUB']._wcstold_l
    _wcstold_l.restype = ctypes.c_double
    _wcstold_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), _locale_t]
    _wcstoll_l = _libraries['FIXME_STUB']._wcstoll_l
    _wcstoll_l.restype = ctypes.c_int64
    _wcstoll_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.c_int32, _locale_t]
    _wcstombs_l = _libraries['FIXME_STUB']._wcstombs_l
    _wcstombs_l.restype = size_t
    _wcstombs_l.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_int16), size_t, _locale_t]
    _wcstombs_s_l = _libraries['FIXME_STUB']._wcstombs_s_l
    _wcstombs_s_l.restype = errno_t
    _wcstombs_s_l.argtypes = [ctypes.POINTER(size_t), ctypes.c_char_p, size_t, ctypes.POINTER(ctypes.c_int16), size_t, _locale_t]
    _wcstoui64 = _libraries['FIXME_STUB']._wcstoui64
    _wcstoui64.restype = ctypes.c_uint64
    _wcstoui64.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.c_int32]
    _wcstoui64_l = _libraries['FIXME_STUB']._wcstoui64_l
    _wcstoui64_l.restype = ctypes.c_uint64
    _wcstoui64_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.c_int32, _locale_t]
    _wcstoul_l = _libraries['FIXME_STUB']._wcstoul_l
    _wcstoul_l.restype = ctypes.c_uint32
    _wcstoul_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.c_int32, _locale_t]
    _wcstoull_l = _libraries['FIXME_STUB']._wcstoull_l
    _wcstoull_l.restype = ctypes.c_uint64
    _wcstoull_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.c_int32, _locale_t]
    _wcsupr = _libraries['FIXME_STUB']._wcsupr
    _wcsupr.restype = ctypes.POINTER(ctypes.c_int16)
    _wcsupr.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wcsupr_l = _libraries['FIXME_STUB']._wcsupr_l
    _wcsupr_l.restype = ctypes.POINTER(ctypes.c_int16)
    _wcsupr_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wcsupr_s = _libraries['FIXME_STUB']._wcsupr_s
    _wcsupr_s.restype = errno_t
    _wcsupr_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t]
    _wcsupr_s_l = _libraries['FIXME_STUB']._wcsupr_s_l
    _wcsupr_s_l.restype = errno_t
    _wcsupr_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, _locale_t]
    _wcsxfrm_l = _libraries['FIXME_STUB']._wcsxfrm_l
    _wcsxfrm_l.restype = size_t
    _wcsxfrm_l.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t, _locale_t]
    _wctime32 = _libraries['FIXME_STUB']._wctime32
    _wctime32.restype = ctypes.POINTER(ctypes.c_int16)
    _wctime32.argtypes = [ctypes.POINTER(__time32_t)]
    _wctime32_s = _libraries['FIXME_STUB']._wctime32_s
    _wctime32_s.restype = errno_t
    _wctime32_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(__time32_t)]
    _wctime64 = _libraries['FIXME_STUB']._wctime64
    _wctime64.restype = ctypes.POINTER(ctypes.c_int16)
    _wctime64.argtypes = [ctypes.POINTER(__time64_t)]
    _wctime64_s = _libraries['FIXME_STUB']._wctime64_s
    _wctime64_s.restype = errno_t
    _wctime64_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(__time64_t)]
    _wctomb_l = _libraries['FIXME_STUB']._wctomb_l
    _wctomb_l.restype = ctypes.c_int32
    _wctomb_l.argtypes = [ctypes.c_char_p, ctypes.c_int16, _locale_t]
    _wctomb_s_l = _libraries['FIXME_STUB']._wctomb_s_l
    _wctomb_s_l.restype = errno_t
    _wctomb_s_l.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_char_p, size_t, ctypes.c_int16, _locale_t]
    _wdupenv_s = _libraries['FIXME_STUB']._wdupenv_s
    _wdupenv_s.restype = errno_t
    _wdupenv_s.argtypes = [ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.POINTER(size_t), ctypes.POINTER(ctypes.c_int16)]
    _wexecl = _libraries['FIXME_STUB']._wexecl
    _wexecl.restype = intptr_t
    _wexecl.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wexecle = _libraries['FIXME_STUB']._wexecle
    _wexecle.restype = intptr_t
    _wexecle.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wexeclp = _libraries['FIXME_STUB']._wexeclp
    _wexeclp.restype = intptr_t
    _wexeclp.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wexeclpe = _libraries['FIXME_STUB']._wexeclpe
    _wexeclpe.restype = intptr_t
    _wexeclpe.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wexecv = _libraries['FIXME_STUB']._wexecv
    _wexecv.restype = intptr_t
    _wexecv.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))]
    _wexecve = _libraries['FIXME_STUB']._wexecve
    _wexecve.restype = intptr_t
    _wexecve.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))]
    _wexecvp = _libraries['FIXME_STUB']._wexecvp
    _wexecvp.restype = intptr_t
    _wexecvp.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))]
    _wexecvpe = _libraries['FIXME_STUB']._wexecvpe
    _wexecvpe.restype = intptr_t
    _wexecvpe.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))]
    _wfdopen = _libraries['FIXME_STUB']._wfdopen
    _wfdopen.restype = ctypes.POINTER(FILE)
    _wfdopen.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16)]
    _wfindfirst32 = _libraries['FIXME_STUB']._wfindfirst32
    _wfindfirst32.restype = intptr_t
    _wfindfirst32.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(struct__wfinddata32_t)]
    _wfindfirst32i64 = _libraries['FIXME_STUB']._wfindfirst32i64
    _wfindfirst32i64.restype = intptr_t
    _wfindfirst32i64.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(struct__wfinddata32i64_t)]
    _wfindfirst64 = _libraries['FIXME_STUB']._wfindfirst64
    _wfindfirst64.restype = intptr_t
    _wfindfirst64.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(struct__wfinddata64_t)]
    _wfindfirst64i32 = _libraries['FIXME_STUB']._wfindfirst64i32
    _wfindfirst64i32.restype = intptr_t
    _wfindfirst64i32.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(struct__wfinddata64i32_t)]
    _wfindnext32 = _libraries['FIXME_STUB']._wfindnext32
    _wfindnext32.restype = ctypes.c_int32
    _wfindnext32.argtypes = [intptr_t, ctypes.POINTER(struct__wfinddata32_t)]
    _wfindnext32i64 = _libraries['FIXME_STUB']._wfindnext32i64
    _wfindnext32i64.restype = ctypes.c_int32
    _wfindnext32i64.argtypes = [intptr_t, ctypes.POINTER(struct__wfinddata32i64_t)]
    _wfindnext64 = _libraries['FIXME_STUB']._wfindnext64
    _wfindnext64.restype = ctypes.c_int32
    _wfindnext64.argtypes = [intptr_t, ctypes.POINTER(struct__wfinddata64_t)]
    _wfindnext64i32 = _libraries['FIXME_STUB']._wfindnext64i32
    _wfindnext64i32.restype = ctypes.c_int32
    _wfindnext64i32.argtypes = [intptr_t, ctypes.POINTER(struct__wfinddata64i32_t)]
    _wfopen = _libraries['FIXME_STUB']._wfopen
    _wfopen.restype = ctypes.POINTER(FILE)
    _wfopen.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wfopen_s = _libraries['FIXME_STUB']._wfopen_s
    _wfopen_s.restype = errno_t
    _wfopen_s.argtypes = [ctypes.POINTER(ctypes.POINTER(FILE)), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wfreopen = _libraries['FIXME_STUB']._wfreopen
    _wfreopen.restype = ctypes.POINTER(FILE)
    _wfreopen.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(FILE)]
    _wfreopen_s = _libraries['FIXME_STUB']._wfreopen_s
    _wfreopen_s.restype = errno_t
    _wfreopen_s.argtypes = [ctypes.POINTER(ctypes.POINTER(FILE)), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(FILE)]
    _wfsopen = _libraries['FIXME_STUB']._wfsopen
    _wfsopen.restype = ctypes.POINTER(FILE)
    _wfsopen.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.c_int32]
    _wfullpath = _libraries['FIXME_STUB']._wfullpath
    _wfullpath.restype = ctypes.POINTER(ctypes.c_int16)
    _wfullpath.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t]
    _wgetcwd = _libraries['FIXME_STUB']._wgetcwd
    _wgetcwd.restype = ctypes.POINTER(ctypes.c_int16)
    _wgetcwd.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int32]
    _wgetdcwd = _libraries['FIXME_STUB']._wgetdcwd
    _wgetdcwd.restype = ctypes.POINTER(ctypes.c_int16)
    _wgetdcwd.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.c_int32]
    _wgetenv = _libraries['FIXME_STUB']._wgetenv
    _wgetenv.restype = ctypes.POINTER(ctypes.c_int16)
    _wgetenv.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wgetenv_s = _libraries['FIXME_STUB']._wgetenv_s
    _wgetenv_s.restype = errno_t
    _wgetenv_s.argtypes = [ctypes.POINTER(size_t), ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16)]
    _wmakepath = _libraries['FIXME_STUB']._wmakepath
    _wmakepath.restype = None
    _wmakepath.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wmakepath_s = _libraries['FIXME_STUB']._wmakepath_s
    _wmakepath_s.restype = errno_t
    _wmakepath_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wmkdir = _libraries['FIXME_STUB']._wmkdir
    _wmkdir.restype = ctypes.c_int32
    _wmkdir.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wmktemp = _libraries['FIXME_STUB']._wmktemp
    _wmktemp.restype = ctypes.POINTER(ctypes.c_int16)
    _wmktemp.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wmktemp_s = _libraries['FIXME_STUB']._wmktemp_s
    _wmktemp_s.restype = errno_t
    _wmktemp_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t]
    _wopen = _libraries['FIXME_STUB']._wopen
    _wopen.restype = ctypes.c_int32
    _wopen.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int32, ctypes.c_int32]
    _wperror = _libraries['FIXME_STUB']._wperror
    _wperror.restype = None
    _wperror.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wpopen = _libraries['FIXME_STUB']._wpopen
    _wpopen.restype = ctypes.POINTER(FILE)
    _wpopen.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wprintf_l = _libraries['FIXME_STUB']._wprintf_l
    _wprintf_l.restype = ctypes.c_int32
    _wprintf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wprintf_p = _libraries['FIXME_STUB']._wprintf_p
    _wprintf_p.restype = ctypes.c_int32
    _wprintf_p.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wprintf_p_l = _libraries['FIXME_STUB']._wprintf_p_l
    _wprintf_p_l.restype = ctypes.c_int32
    _wprintf_p_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wprintf_s_l = _libraries['FIXME_STUB']._wprintf_s_l
    _wprintf_s_l.restype = ctypes.c_int32
    _wprintf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wputenv = _libraries['FIXME_STUB']._wputenv
    _wputenv.restype = ctypes.c_int32
    _wputenv.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wputenv_s = _libraries['FIXME_STUB']._wputenv_s
    _wputenv_s.restype = errno_t
    _wputenv_s.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wremove = _libraries['FIXME_STUB']._wremove
    _wremove.restype = ctypes.c_int32
    _wremove.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wrename = _libraries['FIXME_STUB']._wrename
    _wrename.restype = ctypes.c_int32
    _wrename.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _write = _libraries['FIXME_STUB']._write
    _write.restype = ctypes.c_int32
    _write.argtypes = [ctypes.c_int32, ctypes.POINTER(None), ctypes.c_uint32]
    _wrmdir = _libraries['FIXME_STUB']._wrmdir
    _wrmdir.restype = ctypes.c_int32
    _wrmdir.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wscanf_l = _libraries['FIXME_STUB']._wscanf_l
    _wscanf_l.restype = ctypes.c_int32
    _wscanf_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wscanf_s_l = _libraries['FIXME_STUB']._wscanf_s_l
    _wscanf_s_l.restype = ctypes.c_int32
    _wscanf_s_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wsearchenv = _libraries['FIXME_STUB']._wsearchenv
    _wsearchenv.restype = None
    _wsearchenv.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wsearchenv_s = _libraries['FIXME_STUB']._wsearchenv_s
    _wsearchenv_s.restype = errno_t
    _wsearchenv_s.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t]
    _wsetlocale = _libraries['FIXME_STUB']._wsetlocale
    _wsetlocale.restype = ctypes.POINTER(ctypes.c_int16)
    _wsetlocale.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16)]
    _wsopen = _libraries['FIXME_STUB']._wsopen
    _wsopen.restype = ctypes.c_int32
    _wsopen.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
    _wsopen_dispatch = _libraries['FIXME_STUB']._wsopen_dispatch
    _wsopen_dispatch.restype = errno_t
    _wsopen_dispatch.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int32, ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(ctypes.c_int32), ctypes.c_int32]
    _wsopen_s = _libraries['FIXME_STUB']._wsopen_s
    _wsopen_s.restype = errno_t
    _wsopen_s.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int16), ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
    _wspawnl = _libraries['FIXME_STUB']._wspawnl
    _wspawnl.restype = intptr_t
    _wspawnl.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wspawnle = _libraries['FIXME_STUB']._wspawnle
    _wspawnle.restype = intptr_t
    _wspawnle.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wspawnlp = _libraries['FIXME_STUB']._wspawnlp
    _wspawnlp.restype = intptr_t
    _wspawnlp.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wspawnlpe = _libraries['FIXME_STUB']._wspawnlpe
    _wspawnlpe.restype = intptr_t
    _wspawnlpe.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wspawnv = _libraries['FIXME_STUB']._wspawnv
    _wspawnv.restype = intptr_t
    _wspawnv.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))]
    _wspawnve = _libraries['FIXME_STUB']._wspawnve
    _wspawnve.restype = intptr_t
    _wspawnve.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))]
    _wspawnvp = _libraries['FIXME_STUB']._wspawnvp
    _wspawnvp.restype = intptr_t
    _wspawnvp.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))]
    _wspawnvpe = _libraries['FIXME_STUB']._wspawnvpe
    _wspawnvpe.restype = intptr_t
    _wspawnvpe.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))]
    _wsplitpath = _libraries['FIXME_STUB']._wsplitpath
    _wsplitpath.restype = None
    _wsplitpath.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wsplitpath_s = _libraries['FIXME_STUB']._wsplitpath_s
    _wsplitpath_s.restype = errno_t
    _wsplitpath_s.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), size_t]
    _wstat32 = _libraries['FIXME_STUB']._wstat32
    _wstat32.restype = ctypes.c_int32
    _wstat32.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(struct__stat32)]
    _wstat32i64 = _libraries['FIXME_STUB']._wstat32i64
    _wstat32i64.restype = ctypes.c_int32
    _wstat32i64.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(struct__stat32i64)]
    _wstat64 = _libraries['FIXME_STUB']._wstat64
    _wstat64.restype = ctypes.c_int32
    _wstat64.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(struct__stat64)]
    _wstat64i32 = _libraries['FIXME_STUB']._wstat64i32
    _wstat64i32.restype = ctypes.c_int32
    _wstat64i32.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(struct__stat64i32)]
    _wstrdate = _libraries['FIXME_STUB']._wstrdate
    _wstrdate.restype = ctypes.POINTER(ctypes.c_int16)
    _wstrdate.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wstrdate_s = _libraries['FIXME_STUB']._wstrdate_s
    _wstrdate_s.restype = errno_t
    _wstrdate_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t]
    _wstrtime = _libraries['FIXME_STUB']._wstrtime
    _wstrtime.restype = ctypes.POINTER(ctypes.c_int16)
    _wstrtime.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wstrtime_s = _libraries['FIXME_STUB']._wstrtime_s
    _wstrtime_s.restype = errno_t
    _wstrtime_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t]
    _wsystem = _libraries['FIXME_STUB']._wsystem
    _wsystem.restype = ctypes.c_int32
    _wsystem.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wtempnam = _libraries['FIXME_STUB']._wtempnam
    _wtempnam.restype = ctypes.POINTER(ctypes.c_int16)
    _wtempnam.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    _wtmpnam = _libraries['FIXME_STUB']._wtmpnam
    _wtmpnam.restype = ctypes.POINTER(ctypes.c_int16)
    _wtmpnam.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wtmpnam_s = _libraries['FIXME_STUB']._wtmpnam_s
    _wtmpnam_s.restype = errno_t
    _wtmpnam_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t]
    _wtof = _libraries['FIXME_STUB']._wtof
    _wtof.restype = ctypes.c_double
    _wtof.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wtof_l = _libraries['FIXME_STUB']._wtof_l
    _wtof_l.restype = ctypes.c_double
    _wtof_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wtoi = _libraries['FIXME_STUB']._wtoi
    _wtoi.restype = ctypes.c_int32
    _wtoi.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wtoi64 = _libraries['FIXME_STUB']._wtoi64
    _wtoi64.restype = ctypes.c_int64
    _wtoi64.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wtoi64_l = _libraries['FIXME_STUB']._wtoi64_l
    _wtoi64_l.restype = ctypes.c_int64
    _wtoi64_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wtoi_l = _libraries['FIXME_STUB']._wtoi_l
    _wtoi_l.restype = ctypes.c_int32
    _wtoi_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wtol = _libraries['FIXME_STUB']._wtol
    _wtol.restype = ctypes.c_int32
    _wtol.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wtol_l = _libraries['FIXME_STUB']._wtol_l
    _wtol_l.restype = ctypes.c_int32
    _wtol_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wtoll = _libraries['FIXME_STUB']._wtoll
    _wtoll.restype = ctypes.c_int64
    _wtoll.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _wtoll_l = _libraries['FIXME_STUB']._wtoll_l
    _wtoll_l.restype = ctypes.c_int64
    _wtoll_l.argtypes = [ctypes.POINTER(ctypes.c_int16), _locale_t]
    _wunlink = _libraries['FIXME_STUB']._wunlink
    _wunlink.restype = ctypes.c_int32
    _wunlink.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    _y0 = _libraries['FIXME_STUB']._y0
    _y0.restype = ctypes.c_double
    _y0.argtypes = [ctypes.c_double]
    _y1 = _libraries['FIXME_STUB']._y1
    _y1.restype = ctypes.c_double
    _y1.argtypes = [ctypes.c_double]
    _yn = _libraries['FIXME_STUB']._yn
    _yn.restype = ctypes.c_double
    _yn.argtypes = [ctypes.c_int32, ctypes.c_double]
    abort = _libraries['FIXME_STUB'].abort
    abort.restype = None
    abort.argtypes = []
    abs = _libraries['FIXME_STUB'].abs
    abs.restype = ctypes.c_double
    abs.argtypes = [ctypes.c_double]
    access = _libraries['FIXME_STUB'].access
    access.restype = ctypes.c_int32
    access.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    acos = _libraries['FIXME_STUB'].acos
    acos.restype = ctypes.c_double
    acos.argtypes = [ctypes.c_double]
    acosf = _libraries['FIXME_STUB'].acosf
    acosf.restype = ctypes.c_float
    acosf.argtypes = [ctypes.c_float]
    acosh = _libraries['FIXME_STUB'].acosh
    acosh.restype = ctypes.c_double
    acosh.argtypes = [ctypes.c_double]
    acoshf = _libraries['FIXME_STUB'].acoshf
    acoshf.restype = ctypes.c_float
    acoshf.argtypes = [ctypes.c_float]
    acoshl = _libraries['FIXME_STUB'].acoshl
    acoshl.restype = ctypes.c_double
    acoshl.argtypes = [ctypes.c_double]
    acosl = _libraries['FIXME_STUB'].acosl
    acosl.restype = ctypes.c_double
    acosl.argtypes = [ctypes.c_double]
    acp_utf8 = _libraries['FIXME_STUB'].acp_utf8
    acp_utf8.restype = ctypes.c_char
    acp_utf8.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p]
    activate_widget = _libraries['FIXME_STUB'].activate_widget
    activate_widget.restype = None
    activate_widget.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.c_char]
    add_auto_stkpnt = _libraries['FIXME_STUB'].add_auto_stkpnt
    add_auto_stkpnt.restype = ctypes.c_char
    add_auto_stkpnt.argtypes = [ctypes.POINTER(struct_func_t), ea_t, sval_t]
    add_base_tils = _libraries['FIXME_STUB'].add_base_tils
    add_base_tils.restype = ctypes.c_int32
    add_base_tils.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_til_t), ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char]
    add_bpt = _libraries['FIXME_STUB'].add_bpt
    add_bpt.restype = ctypes.c_char
    add_bpt.argtypes = [ctypes.POINTER(struct_bpt_t)]
    add_byte = _libraries['FIXME_STUB'].add_byte
    add_byte.restype = None
    add_byte.argtypes = [ea_t, uint32]
    add_cref = _libraries['FIXME_STUB'].add_cref
    add_cref.restype = ctypes.c_char
    add_cref.argtypes = [ea_t, ea_t, cref_t]
    add_dref = _libraries['FIXME_STUB'].add_dref
    add_dref.restype = ctypes.c_char
    add_dref.argtypes = [ea_t, ea_t, dref_t]
    add_dword = _libraries['FIXME_STUB'].add_dword
    add_dword.restype = None
    add_dword.argtypes = [ea_t, uint64]
    add_encoding = _libraries['FIXME_STUB'].add_encoding
    add_encoding.restype = ctypes.c_int32
    add_encoding.argtypes = [ctypes.c_char_p]
    add_entry = _libraries['FIXME_STUB'].add_entry
    add_entry.restype = ctypes.c_char
    add_entry.argtypes = [uval_t, ea_t, ctypes.c_char_p, ctypes.c_char, ctypes.c_int32]
    add_enum = _libraries['FIXME_STUB'].add_enum
    add_enum.restype = enum_t
    add_enum.argtypes = [size_t, ctypes.c_char_p, flags_t]
    add_enum_member = _libraries['FIXME_STUB'].add_enum_member
    add_enum_member.restype = ctypes.c_int32
    add_enum_member.argtypes = [enum_t, ctypes.c_char_p, uval_t, bmask_t]
    add_extra_cmt = _libraries['FIXME_STUB'].add_extra_cmt
    add_extra_cmt.restype = ctypes.c_char
    add_extra_cmt.argtypes = [ea_t, ctypes.c_char, ctypes.c_char_p]
    add_extra_line = _libraries['FIXME_STUB'].add_extra_line
    add_extra_line.restype = ctypes.c_char
    add_extra_line.argtypes = [ea_t, ctypes.c_char, ctypes.c_char_p]
    add_frame = _libraries['FIXME_STUB'].add_frame
    add_frame.restype = ctypes.c_char
    add_frame.argtypes = [ctypes.POINTER(struct_func_t), sval_t, ushort, asize_t]
    add_func = _libraries['FIXME_STUB'].add_func
    add_func.restype = ctypes.c_char
    add_func.argtypes = [ea_t, ea_t]
    add_func_ex = _libraries['FIXME_STUB'].add_func_ex
    add_func_ex.restype = ctypes.c_char
    add_func_ex.argtypes = [ctypes.POINTER(struct_func_t)]
    add_hidden_range = _libraries['FIXME_STUB'].add_hidden_range
    add_hidden_range.restype = ctypes.c_char
    add_hidden_range.argtypes = [ea_t, ea_t, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, bgcolor_t]
    add_idc_class = _libraries['FIXME_STUB'].add_idc_class
    add_idc_class.restype = ctypes.POINTER(struct_idc_class_t)
    add_idc_class.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_idc_class_t)]
    add_idc_func = _libraries['FIXME_STUB'].add_idc_func
    add_idc_func.restype = ctypes.c_char
    add_idc_func.argtypes = [ctypes.POINTER(struct_ext_idcfunc_t)]
    add_idc_gvar = _libraries['FIXME_STUB'].add_idc_gvar
    add_idc_gvar.restype = ctypes.POINTER(struct_idc_value_t)
    add_idc_gvar.argtypes = [ctypes.c_char_p]
    add_idc_hotkey = _libraries['FIXME_STUB'].add_idc_hotkey
    add_idc_hotkey.restype = ctypes.c_int32
    add_idc_hotkey.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    add_mapping = _libraries['FIXME_STUB'].add_mapping
    add_mapping.restype = ctypes.c_char
    add_mapping.argtypes = [ea_t, ea_t, asize_t]
    add_path_mapping = _libraries['FIXME_STUB'].add_path_mapping
    add_path_mapping.restype = None
    add_path_mapping.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    add_pgm_cmt = _libraries['FIXME_STUB'].add_pgm_cmt
    add_pgm_cmt.restype = ctypes.c_char
    add_pgm_cmt.argtypes = [ctypes.c_char_p]
    add_qword = _libraries['FIXME_STUB'].add_qword
    add_qword.restype = None
    add_qword.argtypes = [ea_t, uint64]
    add_refinfo_dref = _libraries['FIXME_STUB'].add_refinfo_dref
    add_refinfo_dref.restype = ea_t
    add_refinfo_dref.argtypes = [ctypes.POINTER(struct_insn_t), ea_t, ctypes.POINTER(struct_refinfo_t), adiff_t, dref_t, ctypes.c_int32]
    add_regarg = _libraries['FIXME_STUB'].add_regarg
    add_regarg.restype = None
    add_regarg.argtypes = [ctypes.POINTER(struct_func_t), ctypes.c_int32, ctypes.POINTER(struct_tinfo_t), ctypes.c_char_p]
    add_regvar = _libraries['FIXME_STUB'].add_regvar
    add_regvar.restype = ctypes.c_int32
    add_regvar.argtypes = [ctypes.POINTER(struct_func_t), ea_t, ea_t, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p]
    add_segm = _libraries['FIXME_STUB'].add_segm
    add_segm.restype = ctypes.c_char
    add_segm.argtypes = [ea_t, ea_t, ea_t, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32]
    add_segm_ex = _libraries['FIXME_STUB'].add_segm_ex
    add_segm_ex.restype = ctypes.c_char
    add_segm_ex.argtypes = [ctypes.POINTER(struct_segment_t), ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32]
    add_segment_translation = _libraries['FIXME_STUB'].add_segment_translation
    add_segment_translation.restype = ctypes.c_char
    add_segment_translation.argtypes = [ea_t, ea_t]
    add_sourcefile = _libraries['FIXME_STUB'].add_sourcefile
    add_sourcefile.restype = ctypes.c_char
    add_sourcefile.argtypes = [ea_t, ea_t, ctypes.c_char_p]
    add_spaces = _libraries['FIXME_STUB'].add_spaces
    add_spaces.restype = ctypes.c_char_p
    add_spaces.argtypes = [ctypes.c_char_p, size_t, ssize_t]
    add_stkvar = _libraries['FIXME_STUB'].add_stkvar
    add_stkvar.restype = ctypes.c_char
    add_stkvar.argtypes = [ctypes.POINTER(struct_insn_t), ctypes.POINTER(struct_op_t), sval_t, ctypes.c_int32]
    add_struc = _libraries['FIXME_STUB'].add_struc
    add_struc.restype = tid_t
    add_struc.argtypes = [uval_t, ctypes.c_char_p, ctypes.c_char]
    add_struc_member = _libraries['FIXME_STUB'].add_struc_member
    add_struc_member.restype = struc_error_t
    add_struc_member.argtypes = [ctypes.POINTER(struct_struc_t), ctypes.c_char_p, ea_t, flags_t, ctypes.POINTER(union_opinfo_t), asize_t]
    add_til = _libraries['FIXME_STUB'].add_til
    add_til.restype = ctypes.c_int32
    add_til.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    add_tryblk = _libraries['FIXME_STUB'].add_tryblk
    add_tryblk.restype = ctypes.c_int32
    add_tryblk.argtypes = [ctypes.POINTER(struct_tryblk_t)]
    add_user_stkpnt = _libraries['FIXME_STUB'].add_user_stkpnt
    add_user_stkpnt.restype = ctypes.c_char
    add_user_stkpnt.argtypes = [ea_t, sval_t]
    add_virt_module = _libraries['FIXME_STUB'].add_virt_module
    add_virt_module.restype = ctypes.c_char
    add_virt_module.argtypes = [ctypes.POINTER(struct_modinfo_t)]
    add_word = _libraries['FIXME_STUB'].add_word
    add_word.restype = None
    add_word.argtypes = [ea_t, uint64]
    addon_count = _libraries['FIXME_STUB'].addon_count
    addon_count.restype = ctypes.c_int32
    addon_count.argtypes = []
    adjust_visea = _libraries['FIXME_STUB'].adjust_visea
    adjust_visea.restype = ea_t
    adjust_visea.argtypes = [ea_t]
    align_down_to_stack = _libraries['FIXME_STUB'].align_down_to_stack
    align_down_to_stack.restype = ea_t
    align_down_to_stack.argtypes = [ea_t]
    align_flag = _libraries['FIXME_STUB'].align_flag
    align_flag.restype = flags_t
    align_flag.argtypes = []
    align_size = _libraries['FIXME_STUB'].align_size
    align_size.restype = None
    align_size.argtypes = [ctypes.POINTER(size_t), size_t, size_t]
    align_stkarg_up = _libraries['FIXME_STUB'].align_stkarg_up
    align_stkarg_up.restype = sval_t
    align_stkarg_up.argtypes = [sval_t, ctypes.POINTER(struct_tinfo_t), ctypes.c_int32, cm_t]
    align_up_to_stack = _libraries['FIXME_STUB'].align_up_to_stack
    align_up_to_stack.restype = ea_t
    align_up_to_stack.argtypes = [ea_t, ea_t]
    alloc_type_ordinal = _libraries['FIXME_STUB'].alloc_type_ordinal
    alloc_type_ordinal.restype = uint32
    alloc_type_ordinal.argtypes = [ctypes.POINTER(struct_til_t)]
    alloc_type_ordinals = _libraries['FIXME_STUB'].alloc_type_ordinals
    alloc_type_ordinals.restype = uint32
    alloc_type_ordinals.argtypes = [ctypes.POINTER(struct_til_t), ctypes.c_int32]
    allocate_selector = _libraries['FIXME_STUB'].allocate_selector
    allocate_selector.restype = sel_t
    allocate_selector.argtypes = [ea_t]
    analyzer_options = _libraries['FIXME_STUB'].analyzer_options
    analyzer_options.restype = None
    analyzer_options.argtypes = []
    append_abi_opts = _libraries['FIXME_STUB'].append_abi_opts
    append_abi_opts.restype = ctypes.c_char
    append_abi_opts.argtypes = [ctypes.c_char_p, ctypes.c_char]
    append_argloc = _libraries['FIXME_STUB'].append_argloc
    append_argloc.restype = ctypes.c_char
    append_argloc.argtypes = [ctypes.POINTER(qtype), ctypes.POINTER(struct_argloc_t)]
    append_cmt = _libraries['FIXME_STUB'].append_cmt
    append_cmt.restype = ctypes.c_char
    append_cmt.argtypes = [ea_t, ctypes.c_char_p, ctypes.c_char]
    append_disp = _libraries['FIXME_STUB'].append_disp
    append_disp.restype = None
    append_disp.argtypes = [ctypes.POINTER(qstring), adiff_t, ctypes.c_char]
    append_func_tail = _libraries['FIXME_STUB'].append_func_tail
    append_func_tail.restype = ctypes.c_char
    append_func_tail.argtypes = [ctypes.POINTER(struct_func_t), ea_t, ea_t]
    append_regval = _libraries['FIXME_STUB'].append_regval
    append_regval.restype = None
    append_regval.argtypes = [ctypes.POINTER(struct_bytevec_t), ctypes.POINTER(struct_regval_t)]
    append_snprintf = _libraries['FIXME_STUB'].append_snprintf
    append_snprintf.restype = ctypes.c_int32
    append_snprintf.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p]
    append_struct_fields = _libraries['FIXME_STUB'].append_struct_fields
    append_struct_fields.restype = flags_t
    append_struct_fields.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(adiff_t), ctypes.c_int32, ctypes.POINTER(tid_t), ctypes.c_int32, flags_t, adiff_t, ctypes.c_char]
    append_tinfo_covered = _libraries['FIXME_STUB'].append_tinfo_covered
    append_tinfo_covered.restype = ctypes.c_char
    append_tinfo_covered.argtypes = [ctypes.POINTER(struct_rangeset_t), uint32, uint64]
    append_to_flowchart = _libraries['FIXME_STUB'].append_to_flowchart
    append_to_flowchart.restype = ctypes.c_char
    append_to_flowchart.argtypes = [ctypes.POINTER(struct_qflow_chart_t), ea_t, ea_t]
    apply_callee_tinfo = _libraries['FIXME_STUB'].apply_callee_tinfo
    apply_callee_tinfo.restype = ctypes.c_char
    apply_callee_tinfo.argtypes = [ea_t, ctypes.POINTER(struct_tinfo_t)]
    apply_cdecl = _libraries['FIXME_STUB'].apply_cdecl
    apply_cdecl.restype = ctypes.c_char
    apply_cdecl.argtypes = [ctypes.POINTER(struct_til_t), ea_t, ctypes.c_char_p, ctypes.c_int32]
    apply_fixup = _libraries['FIXME_STUB'].apply_fixup
    apply_fixup.restype = ctypes.c_char
    apply_fixup.argtypes = [ea_t, ea_t, ctypes.c_int32, ctypes.c_char]
    apply_idasgn_to = _libraries['FIXME_STUB'].apply_idasgn_to
    apply_idasgn_to.restype = ctypes.c_int32
    apply_idasgn_to.argtypes = [ctypes.c_char_p, ea_t, ctypes.c_char]
    apply_named_type = _libraries['FIXME_STUB'].apply_named_type
    apply_named_type.restype = ctypes.c_char
    apply_named_type.argtypes = [ea_t, ctypes.c_char_p]
    apply_once_tinfo_and_name = _libraries['FIXME_STUB'].apply_once_tinfo_and_name
    apply_once_tinfo_and_name.restype = ctypes.c_char
    apply_once_tinfo_and_name.argtypes = [ea_t, ctypes.POINTER(struct_tinfo_t), ctypes.c_char_p]
    apply_startup_sig = _libraries['FIXME_STUB'].apply_startup_sig
    apply_startup_sig.restype = ctypes.c_char
    apply_startup_sig.argtypes = [ea_t, ctypes.c_char_p]
    apply_tinfo = _libraries['FIXME_STUB'].apply_tinfo
    apply_tinfo.restype = ctypes.c_char
    apply_tinfo.argtypes = [ea_t, ctypes.POINTER(struct_tinfo_t), uint32]
    apply_tinfo_to_stkarg = _libraries['FIXME_STUB'].apply_tinfo_to_stkarg
    apply_tinfo_to_stkarg.restype = ctypes.c_char
    apply_tinfo_to_stkarg.argtypes = [ctypes.POINTER(struct_insn_t), ctypes.POINTER(struct_op_t), uval_t, ctypes.POINTER(struct_tinfo_t), ctypes.c_char_p]
    asc_to_r50 = _libraries['FIXME_STUB'].asc_to_r50
    asc_to_r50.restype = ctypes.c_int32
    asc_to_r50.argtypes = [ctypes.POINTER(ushort), ctypes.c_char_p, ctypes.c_int32]
    asctime = _libraries['FIXME_STUB'].asctime
    asctime.restype = ctypes.c_char_p
    asctime.argtypes = [ctypes.POINTER(struct_tm)]
    asctime_s = _libraries['FIXME_STUB'].asctime_s
    asctime_s.restype = errno_t
    asctime_s.argtypes = [ctypes.c_char_p, size_t, ctypes.POINTER(struct_tm)]
    asctoreal = _libraries['FIXME_STUB'].asctoreal
    asctoreal.restype = fpvalue_error_t
    asctoreal.argtypes = [ctypes.POINTER(ctypes.c_char_p), ctypes.POINTER(struct_fpvalue_t)]
    ash = (struct_asm_t).in_dll(_libraries['FIXME_STUB'], 'ash') if getattr(_libraries['FIXME_STUB'], 'ash', None) else None
    asin = _libraries['FIXME_STUB'].asin
    asin.restype = ctypes.c_double
    asin.argtypes = [ctypes.c_double]
    asinf = _libraries['FIXME_STUB'].asinf
    asinf.restype = ctypes.c_float
    asinf.argtypes = [ctypes.c_float]
    asinh = _libraries['FIXME_STUB'].asinh
    asinh.restype = ctypes.c_double
    asinh.argtypes = [ctypes.c_double]
    asinhf = _libraries['FIXME_STUB'].asinhf
    asinhf.restype = ctypes.c_float
    asinhf.argtypes = [ctypes.c_float]
    asinhl = _libraries['FIXME_STUB'].asinhl
    asinhl.restype = ctypes.c_double
    asinhl.argtypes = [ctypes.c_double]
    asinl = _libraries['FIXME_STUB'].asinl
    asinl.restype = ctypes.c_double
    asinl.argtypes = [ctypes.c_double]
    ask_addr = _libraries['FIXME_STUB'].ask_addr
    ask_addr.restype = ctypes.c_char
    ask_addr.argtypes = [ctypes.POINTER(ea_t), ctypes.c_char_p]
    ask_buttons = _libraries['FIXME_STUB'].ask_buttons
    ask_buttons.restype = ctypes.c_int32
    ask_buttons.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32, ctypes.c_char_p]
    ask_file = _libraries['FIXME_STUB'].ask_file
    ask_file.restype = ctypes.c_char_p
    ask_file.argtypes = [ctypes.c_char, ctypes.c_char_p, ctypes.c_char_p]
    ask_for_feedback = _libraries['FIXME_STUB'].ask_for_feedback
    ask_for_feedback.restype = None
    ask_for_feedback.argtypes = [ctypes.c_char_p]
    ask_form = _libraries['FIXME_STUB'].ask_form
    ask_form.restype = ctypes.c_int32
    ask_form.argtypes = [ctypes.c_char_p]
    ask_ident = _libraries['FIXME_STUB'].ask_ident
    ask_ident.restype = ctypes.c_char
    ask_ident.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p]
    ask_long = _libraries['FIXME_STUB'].ask_long
    ask_long.restype = ctypes.c_char
    ask_long.argtypes = [ctypes.POINTER(sval_t), ctypes.c_char_p]
    ask_seg = _libraries['FIXME_STUB'].ask_seg
    ask_seg.restype = ctypes.c_char
    ask_seg.argtypes = [ctypes.POINTER(sel_t), ctypes.c_char_p]
    ask_str = _libraries['FIXME_STUB'].ask_str
    ask_str.restype = ctypes.c_char
    ask_str.argtypes = [ctypes.POINTER(qstring), ctypes.c_int32, ctypes.c_char_p]
    ask_text = _libraries['FIXME_STUB'].ask_text
    ask_text.restype = ctypes.c_char
    ask_text.argtypes = [ctypes.POINTER(qstring), size_t, ctypes.c_char_p, ctypes.c_char_p]
    ask_yn = _libraries['FIXME_STUB'].ask_yn
    ask_yn.restype = ctypes.c_int32
    ask_yn.argtypes = [ctypes.c_int32, help_t]
    at_quick_exit = _libraries['FIXME_STUB'].at_quick_exit
    at_quick_exit.restype = ctypes.c_int32
    at_quick_exit.argtypes = [ctypes.CFUNCTYPE(None)]
    atan = _libraries['FIXME_STUB'].atan
    atan.restype = ctypes.c_double
    atan.argtypes = [ctypes.c_double]
    atan2 = _libraries['FIXME_STUB'].atan2
    atan2.restype = ctypes.c_double
    atan2.argtypes = [ctypes.c_double, ctypes.c_double]
    atan2f = _libraries['FIXME_STUB'].atan2f
    atan2f.restype = ctypes.c_float
    atan2f.argtypes = [ctypes.c_float, ctypes.c_float]
    atan2l = _libraries['FIXME_STUB'].atan2l
    atan2l.restype = ctypes.c_double
    atan2l.argtypes = [ctypes.c_double, ctypes.c_double]
    atanf = _libraries['FIXME_STUB'].atanf
    atanf.restype = ctypes.c_float
    atanf.argtypes = [ctypes.c_float]
    atanh = _libraries['FIXME_STUB'].atanh
    atanh.restype = ctypes.c_double
    atanh.argtypes = [ctypes.c_double]
    atanhf = _libraries['FIXME_STUB'].atanhf
    atanhf.restype = ctypes.c_float
    atanhf.argtypes = [ctypes.c_float]
    atanhl = _libraries['FIXME_STUB'].atanhl
    atanhl.restype = ctypes.c_double
    atanhl.argtypes = [ctypes.c_double]
    atanl = _libraries['FIXME_STUB'].atanl
    atanl.restype = ctypes.c_double
    atanl.argtypes = [ctypes.c_double]
    atexit = _libraries['FIXME_STUB'].atexit
    atexit.restype = ctypes.c_int32
    atexit.argtypes = [ctypes.CFUNCTYPE(None)]
    atob32 = _libraries['FIXME_STUB'].atob32
    atob32.restype = ctypes.c_char
    atob32.argtypes = [ctypes.POINTER(uint32), ctypes.c_char_p]
    atob64 = _libraries['FIXME_STUB'].atob64
    atob64.restype = ctypes.c_char
    atob64.argtypes = [ctypes.POINTER(uint64), ctypes.c_char_p]
    atoea = _libraries['FIXME_STUB'].atoea
    atoea.restype = ctypes.c_char
    atoea.argtypes = [ctypes.POINTER(ea_t), ctypes.c_char_p]
    atof = _libraries['FIXME_STUB'].atof
    atof.restype = ctypes.c_double
    atof.argtypes = [ctypes.c_char_p]
    atoi = _libraries['FIXME_STUB'].atoi
    atoi.restype = ctypes.c_int32
    atoi.argtypes = [ctypes.c_char_p]
    atol = _libraries['FIXME_STUB'].atol
    atol.restype = ctypes.c_int32
    atol.argtypes = [ctypes.c_char_p]
    atoll = _libraries['FIXME_STUB'].atoll
    atoll.restype = ctypes.c_int64
    atoll.argtypes = [ctypes.c_char_p]
    atos = _libraries['FIXME_STUB'].atos
    atos.restype = ctypes.c_int32
    atos.argtypes = [ctypes.POINTER(sel_t), ctypes.c_char_p]
    attach_action_to_menu = _libraries['FIXME_STUB'].attach_action_to_menu
    attach_action_to_menu.restype = ctypes.c_char
    attach_action_to_menu.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32]
    attach_action_to_popup = _libraries['FIXME_STUB'].attach_action_to_popup
    attach_action_to_popup.restype = ctypes.c_char
    attach_action_to_popup.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_TPopupMenu), ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32]
    attach_action_to_toolbar = _libraries['FIXME_STUB'].attach_action_to_toolbar
    attach_action_to_toolbar.restype = ctypes.c_char
    attach_action_to_toolbar.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    attach_custom_data_format = _libraries['FIXME_STUB'].attach_custom_data_format
    attach_custom_data_format.restype = ctypes.c_char
    attach_custom_data_format.argtypes = [ctypes.c_int32, ctypes.c_int32]
    attach_dynamic_action_to_popup = _libraries['FIXME_STUB'].attach_dynamic_action_to_popup
    attach_dynamic_action_to_popup.restype = ctypes.c_char
    attach_dynamic_action_to_popup.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_TPopupMenu), ctypes.POINTER(struct_action_desc_t), ctypes.c_char_p, ctypes.c_int32, ctypes.POINTER(qstring)]
    attach_process = _libraries['FIXME_STUB'].attach_process
    attach_process.restype = ctypes.c_int32
    attach_process.argtypes = [pid_t, ctypes.c_int32]
    auto_apply_tail = _libraries['FIXME_STUB'].auto_apply_tail
    auto_apply_tail.restype = None
    auto_apply_tail.argtypes = [ea_t, ea_t]
    auto_apply_type = _libraries['FIXME_STUB'].auto_apply_type
    auto_apply_type.restype = None
    auto_apply_type.argtypes = [ea_t, ea_t]
    auto_cancel = _libraries['FIXME_STUB'].auto_cancel
    auto_cancel.restype = None
    auto_cancel.argtypes = [ea_t, ea_t]
    auto_get = _libraries['FIXME_STUB'].auto_get
    auto_get.restype = ea_t
    auto_get.argtypes = [ctypes.POINTER(atype_t), ea_t, ea_t]
    auto_is_ok = _libraries['FIXME_STUB'].auto_is_ok
    auto_is_ok.restype = ctypes.c_char
    auto_is_ok.argtypes = []
    auto_make_code = _libraries['FIXME_STUB'].auto_make_code
    auto_make_code.restype = None
    auto_make_code.argtypes = [ea_t]
    auto_make_proc = _libraries['FIXME_STUB'].auto_make_proc
    auto_make_proc.restype = None
    auto_make_proc.argtypes = [ea_t]
    auto_make_step = _libraries['FIXME_STUB'].auto_make_step
    auto_make_step.restype = ctypes.c_char
    auto_make_step.argtypes = [ea_t, ea_t]
    auto_mark = _libraries['FIXME_STUB'].auto_mark
    auto_mark.restype = None
    auto_mark.argtypes = [ea_t, atype_t]
    auto_mark_range = _libraries['FIXME_STUB'].auto_mark_range
    auto_mark_range.restype = None
    auto_mark_range.argtypes = [ea_t, ea_t, atype_t]
    auto_recreate_insn = _libraries['FIXME_STUB'].auto_recreate_insn
    auto_recreate_insn.restype = ctypes.c_int32
    auto_recreate_insn.argtypes = [ea_t]
    auto_unmark = _libraries['FIXME_STUB'].auto_unmark
    auto_unmark.restype = None
    auto_unmark.argtypes = [ea_t, ea_t, atype_t]
    auto_wait = _libraries['FIXME_STUB'].auto_wait
    auto_wait.restype = ctypes.c_char
    auto_wait.argtypes = []
    auto_wait_range = _libraries['FIXME_STUB'].auto_wait_range
    auto_wait_range.restype = ssize_t
    auto_wait_range.argtypes = [ea_t, ea_t]
    b2a32 = _libraries['FIXME_STUB'].b2a32
    b2a32.restype = size_t
    b2a32.argtypes = [ctypes.c_char_p, size_t, uint32, ctypes.c_int32, ctypes.c_int32]
    b2a64 = _libraries['FIXME_STUB'].b2a64
    b2a64.restype = size_t
    b2a64.argtypes = [ctypes.c_char_p, size_t, uint64, ctypes.c_int32, ctypes.c_int32]
    b2a_width = _libraries['FIXME_STUB'].b2a_width
    b2a_width.restype = size_t
    b2a_width.argtypes = [ctypes.c_int32, ctypes.c_int32]
    b_realcvt = _libraries['FIXME_STUB'].b_realcvt
    b_realcvt.restype = fpvalue_error_t
    b_realcvt.argtypes = [ctypes.POINTER(None), ctypes.POINTER(struct_fpvalue_t), uint16]
    back_char = _libraries['FIXME_STUB'].back_char
    back_char.restype = ctypes.c_char
    back_char.argtypes = [ctypes.POINTER(ctypes.c_char_p)]
    banner = _libraries['FIXME_STUB'].banner
    banner.restype = ctypes.c_char
    banner.argtypes = [ctypes.c_int32]
    base2file = _libraries['FIXME_STUB'].base2file
    base2file.restype = ctypes.c_int32
    base2file.argtypes = [ctypes.POINTER(FILE), int64, ea_t, ea_t]
    base64_decode = _libraries['FIXME_STUB'].base64_decode
    base64_decode.restype = ctypes.c_char
    base64_decode.argtypes = [ctypes.POINTER(struct_bytevec_t), ctypes.c_char_p, size_t]
    base64_encode = _libraries['FIXME_STUB'].base64_encode
    base64_encode.restype = ctypes.c_char
    base64_encode.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(None), size_t]
    batch = (ctypes.c_char).in_dll(_libraries['FIXME_STUB'], 'batch') if getattr(_libraries['FIXME_STUB'], 'batch', None) else None
    beep = _libraries['FIXME_STUB'].beep
    beep.restype = None
    beep.argtypes = [beep_t]
    begin_type_updating = _libraries['FIXME_STUB'].begin_type_updating
    begin_type_updating.restype = None
    begin_type_updating.argtypes = [update_type_t]
    bin_flag = _libraries['FIXME_STUB'].bin_flag
    bin_flag.restype = flags_t
    bin_flag.argtypes = []
    bin_search = _libraries['FIXME_STUB'].bin_search
    bin_search.restype = ea_t
    bin_search.argtypes = [ea_t, ea_t, ctypes.POINTER(uchar), ctypes.POINTER(uchar), size_t, ctypes.c_int32, ctypes.c_int32]
    bin_search2 = _libraries['FIXME_STUB'].bin_search2
    bin_search2.restype = ea_t
    bin_search2.argtypes = [ea_t, ea_t, ctypes.POINTER(uchar), ctypes.POINTER(uchar), size_t, ctypes.c_int32]
    bin_search3 = _libraries['FIXME_STUB'].bin_search3
    bin_search3.restype = ea_t
    bin_search3.argtypes = [ctypes.POINTER(size_t), ea_t, ea_t, ctypes.POINTER(compiled_binpat_vec_t), ctypes.c_int32]
    bitcount = _libraries['FIXME_STUB'].bitcount
    bitcount.restype = ctypes.c_int32
    bitcount.argtypes = [uint64]
    bitrange_t_extract_using_bitrange = _libraries['FIXME_STUB'].bitrange_t_extract_using_bitrange
    bitrange_t_extract_using_bitrange.restype = ctypes.c_char
    bitrange_t_extract_using_bitrange.argtypes = [ctypes.POINTER(struct_bitrange_t), ctypes.POINTER(None), size_t, ctypes.POINTER(None), size_t, ctypes.c_char]
    bitrange_t_inject_using_bitrange = _libraries['FIXME_STUB'].bitrange_t_inject_using_bitrange
    bitrange_t_inject_using_bitrange.restype = ctypes.c_char
    bitrange_t_inject_using_bitrange.argtypes = [ctypes.POINTER(struct_bitrange_t), ctypes.POINTER(None), size_t, ctypes.POINTER(None), size_t, ctypes.c_char]
    bookmarks_t_erase = _libraries['FIXME_STUB'].bookmarks_t_erase
    bookmarks_t_erase.restype = ctypes.c_char
    bookmarks_t_erase.argtypes = [ctypes.POINTER(struct_lochist_entry_t), uint32, ctypes.POINTER(None)]
    bookmarks_t_find_index = _libraries['FIXME_STUB'].bookmarks_t_find_index
    bookmarks_t_find_index.restype = uint32
    bookmarks_t_find_index.argtypes = [ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(None)]
    bookmarks_t_get = _libraries['FIXME_STUB'].bookmarks_t_get
    bookmarks_t_get.restype = ctypes.c_char
    bookmarks_t_get.argtypes = [ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(qstring), ctypes.POINTER(uint32), ctypes.POINTER(None)]
    bookmarks_t_get_desc = _libraries['FIXME_STUB'].bookmarks_t_get_desc
    bookmarks_t_get_desc.restype = ctypes.c_char
    bookmarks_t_get_desc.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_lochist_entry_t), uint32, ctypes.POINTER(None)]
    bookmarks_t_get_dirtree_id = _libraries['FIXME_STUB'].bookmarks_t_get_dirtree_id
    bookmarks_t_get_dirtree_id.restype = dirtree_id_t
    bookmarks_t_get_dirtree_id.argtypes = [ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(None)]
    bookmarks_t_mark = _libraries['FIXME_STUB'].bookmarks_t_mark
    bookmarks_t_mark.restype = uint32
    bookmarks_t_mark.argtypes = [ctypes.POINTER(struct_lochist_entry_t), uint32, ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(None)]
    bookmarks_t_set_desc = _libraries['FIXME_STUB'].bookmarks_t_set_desc
    bookmarks_t_set_desc.restype = ctypes.c_char
    bookmarks_t_set_desc.argtypes = [qstring, ctypes.POINTER(struct_lochist_entry_t), uint32, ctypes.POINTER(None)]
    bookmarks_t_size = _libraries['FIXME_STUB'].bookmarks_t_size
    bookmarks_t_size.restype = uint32
    bookmarks_t_size.argtypes = [ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(None)]
    bring_debugger_to_front = _libraries['FIXME_STUB'].bring_debugger_to_front
    bring_debugger_to_front.restype = None
    bring_debugger_to_front.argtypes = []
    bsearch = _libraries['FIXME_STUB'].bsearch
    bsearch.restype = ctypes.POINTER(None)
    bsearch.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), size_t, size_t, _CoreCrtNonSecureSearchSortCompareFunction]
    bsearch_s = _libraries['FIXME_STUB'].bsearch_s
    bsearch_s.restype = ctypes.POINTER(None)
    bsearch_s.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), rsize_t, rsize_t, _CoreCrtSecureSearchSortCompareFunction, ctypes.POINTER(None)]
    btoa128 = _libraries['FIXME_STUB'].btoa128
    btoa128.restype = size_t
    btoa128.argtypes = [ctypes.c_char_p, size_t, struct_uint128, ctypes.c_int32]
    btoa32 = _libraries['FIXME_STUB'].btoa32
    btoa32.restype = size_t
    btoa32.argtypes = [ctypes.c_char_p, size_t, uint32, ctypes.c_int32]
    btoa64 = _libraries['FIXME_STUB'].btoa64
    btoa64.restype = size_t
    btoa64.argtypes = [ctypes.c_char_p, size_t, uint64, ctypes.c_int32]
    btoa_width = _libraries['FIXME_STUB'].btoa_width
    btoa_width.restype = size_t
    btoa_width.argtypes = [ctypes.c_int32, flags_t, ctypes.c_int32]
    btowc = _libraries['FIXME_STUB'].btowc
    btowc.restype = wint_t
    btowc.argtypes = [ctypes.c_int32]
    build_anon_type_name = _libraries['FIXME_STUB'].build_anon_type_name
    build_anon_type_name.restype = None
    build_anon_type_name.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(type_t), ctypes.POINTER(p_list)]
    build_loaders_list = _libraries['FIXME_STUB'].build_loaders_list
    build_loaders_list.restype = ctypes.POINTER(struct_load_info_t)
    build_loaders_list.argtypes = [ctypes.POINTER(struct_linput_t), ctypes.c_char_p]
    build_snapshot_tree = _libraries['FIXME_STUB'].build_snapshot_tree
    build_snapshot_tree.restype = ctypes.c_char
    build_snapshot_tree.argtypes = [ctypes.POINTER(struct_snapshot_t)]
    build_stkvar_name = _libraries['FIXME_STUB'].build_stkvar_name
    build_stkvar_name.restype = ssize_t
    build_stkvar_name.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_func_t), sval_t]
    build_stkvar_xrefs = _libraries['FIXME_STUB'].build_stkvar_xrefs
    build_stkvar_xrefs.restype = None
    build_stkvar_xrefs.argtypes = [ctypes.POINTER(xreflist_t), ctypes.POINTER(struct_func_t), ctypes.POINTER(struct_member_t)]
    build_strlist = _libraries['FIXME_STUB'].build_strlist
    build_strlist.restype = None
    build_strlist.argtypes = []
    byte_flag = _libraries['FIXME_STUB'].byte_flag
    byte_flag.restype = flags_t
    byte_flag.argtypes = []
    bytesize = _libraries['FIXME_STUB'].bytesize
    bytesize.restype = ctypes.c_int32
    bytesize.argtypes = [ea_t]
    calc_basevalue = _libraries['FIXME_STUB'].calc_basevalue
    calc_basevalue.restype = ea_t
    calc_basevalue.argtypes = [ea_t, ea_t]
    calc_bg_color = _libraries['FIXME_STUB'].calc_bg_color
    calc_bg_color.restype = bgcolor_t
    calc_bg_color.argtypes = [ea_t]
    calc_c_cpp_name = _libraries['FIXME_STUB'].calc_c_cpp_name
    calc_c_cpp_name.restype = ssize_t
    calc_c_cpp_name.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.POINTER(struct_tinfo_t), ctypes.c_int32]
    calc_crc32 = _libraries['FIXME_STUB'].calc_crc32
    calc_crc32.restype = uint32
    calc_crc32.argtypes = [uint32, ctypes.POINTER(None), size_t]
    calc_dataseg = _libraries['FIXME_STUB'].calc_dataseg
    calc_dataseg.restype = ea_t
    calc_dataseg.argtypes = [ctypes.POINTER(struct_insn_t), ctypes.c_int32, ctypes.c_int32]
    calc_def_align = _libraries['FIXME_STUB'].calc_def_align
    calc_def_align.restype = ctypes.c_int32
    calc_def_align.argtypes = [ea_t, ctypes.c_int32, ctypes.c_int32]
    calc_default_idaplace_flags = _libraries['FIXME_STUB'].calc_default_idaplace_flags
    calc_default_idaplace_flags.restype = ctypes.c_int32
    calc_default_idaplace_flags.argtypes = []
    calc_dflags = _libraries['FIXME_STUB'].calc_dflags
    calc_dflags.restype = flags_t
    calc_dflags.argtypes = [flags_t, ctypes.c_char]
    calc_dist = _libraries['FIXME_STUB'].calc_dist
    calc_dist.restype = ctypes.c_double
    calc_dist.argtypes = [struct_point_t, struct_point_t]
    calc_file_crc32 = _libraries['FIXME_STUB'].calc_file_crc32
    calc_file_crc32.restype = uint32
    calc_file_crc32.argtypes = [ctypes.POINTER(struct_linput_t)]
    calc_fixup_size = _libraries['FIXME_STUB'].calc_fixup_size
    calc_fixup_size.restype = ctypes.c_int32
    calc_fixup_size.argtypes = [fixup_type_t]
    calc_func_size = _libraries['FIXME_STUB'].calc_func_size
    calc_func_size.restype = asize_t
    calc_func_size.argtypes = [ctypes.POINTER(struct_func_t)]
    calc_gtn_flags = _libraries['FIXME_STUB'].calc_gtn_flags
    calc_gtn_flags.restype = ctypes.c_int32
    calc_gtn_flags.argtypes = [ea_t, ea_t]
    calc_idasgn_state = _libraries['FIXME_STUB'].calc_idasgn_state
    calc_idasgn_state.restype = ctypes.c_int32
    calc_idasgn_state.argtypes = [ctypes.c_int32]
    calc_max_align = _libraries['FIXME_STUB'].calc_max_align
    calc_max_align.restype = ctypes.c_int32
    calc_max_align.argtypes = [ea_t]
    calc_max_item_end = _libraries['FIXME_STUB'].calc_max_item_end
    calc_max_item_end.restype = ea_t
    calc_max_item_end.argtypes = [ea_t, ctypes.c_int32]
    calc_min_align = _libraries['FIXME_STUB'].calc_min_align
    calc_min_align.restype = ctypes.c_int32
    calc_min_align.argtypes = [asize_t]
    calc_number_of_children = _libraries['FIXME_STUB'].calc_number_of_children
    calc_number_of_children.restype = ctypes.c_int32
    calc_number_of_children.argtypes = [ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_tinfo_t), ctypes.c_char]
    calc_offset_base = _libraries['FIXME_STUB'].calc_offset_base
    calc_offset_base.restype = ea_t
    calc_offset_base.argtypes = [ea_t, ctypes.c_int32]
    calc_prefix_color = _libraries['FIXME_STUB'].calc_prefix_color
    calc_prefix_color.restype = color_t
    calc_prefix_color.argtypes = [ea_t]
    calc_probable_base_by_value = _libraries['FIXME_STUB'].calc_probable_base_by_value
    calc_probable_base_by_value.restype = ea_t
    calc_probable_base_by_value.argtypes = [ea_t, uval_t]
    calc_reference_data = _libraries['FIXME_STUB'].calc_reference_data
    calc_reference_data.restype = ctypes.c_char
    calc_reference_data.argtypes = [ctypes.POINTER(ea_t), ctypes.POINTER(ea_t), ea_t, ctypes.POINTER(struct_refinfo_t), adiff_t]
    calc_stkvar_struc_offset = _libraries['FIXME_STUB'].calc_stkvar_struc_offset
    calc_stkvar_struc_offset.restype = ea_t
    calc_stkvar_struc_offset.argtypes = [ctypes.POINTER(struct_func_t), ctypes.POINTER(struct_insn_t), ctypes.c_int32]
    calc_switch_cases = _libraries['FIXME_STUB'].calc_switch_cases
    calc_switch_cases.restype = ctypes.c_char
    calc_switch_cases.argtypes = [ctypes.POINTER(casevec_t), ctypes.POINTER(eavec_t), ea_t, ctypes.POINTER(struct_switch_info_t)]
    calc_target = _libraries['FIXME_STUB'].calc_target
    calc_target.restype = ea_t
    calc_target.argtypes = [ea_t, ea_t, ctypes.c_int32, adiff_t]
    calc_thunk_func_target = _libraries['FIXME_STUB'].calc_thunk_func_target
    calc_thunk_func_target.restype = ea_t
    calc_thunk_func_target.argtypes = [ctypes.POINTER(struct_func_t), ctypes.POINTER(ea_t)]
    calc_tinfo_gaps = _libraries['FIXME_STUB'].calc_tinfo_gaps
    calc_tinfo_gaps.restype = ctypes.c_char
    calc_tinfo_gaps.argtypes = [ctypes.POINTER(struct_rangeset_t), uint32]
    call_idc_func = _libraries['FIXME_STUB'].call_idc_func
    call_idc_func.restype = ctypes.c_char
    call_idc_func.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p, struct_idc_value_t * 0, size_t, ctypes.POINTER(qstring), ctypes.POINTER(struct_idc_resolver_t)]
    call_system = _libraries['FIXME_STUB'].call_system
    call_system.restype = ctypes.c_int32
    call_system.argtypes = [ctypes.c_char_p]
    calloc = _libraries['FIXME_STUB'].calloc
    calloc.restype = ctypes.POINTER(None)
    calloc.argtypes = [size_t, size_t]
    callui = (ctypes.CFUNCTYPE(union_callui_t, ui_notification_t)).in_dll(_libraries['FIXME_STUB'], 'callui') if getattr(_libraries['FIXME_STUB'], 'callui', None) else None
    can_be_off32 = _libraries['FIXME_STUB'].can_be_off32
    can_be_off32.restype = ea_t
    can_be_off32.argtypes = [ea_t]
    can_decode = _libraries['FIXME_STUB'].can_decode
    can_decode.restype = ctypes.c_char
    can_decode.argtypes = [ea_t]
    can_define_item = _libraries['FIXME_STUB'].can_define_item
    can_define_item.restype = ctypes.c_char
    can_define_item.argtypes = [ea_t, asize_t, flags_t]
    cancel_exec_request = _libraries['FIXME_STUB'].cancel_exec_request
    cancel_exec_request.restype = ctypes.c_char
    cancel_exec_request.argtypes = [ctypes.c_int32]
    cancel_thread_exec_requests = _libraries['FIXME_STUB'].cancel_thread_exec_requests
    cancel_thread_exec_requests.restype = ctypes.c_int32
    cancel_thread_exec_requests.argtypes = [qthread_t]
    cbrt = _libraries['FIXME_STUB'].cbrt
    cbrt.restype = ctypes.c_double
    cbrt.argtypes = [ctypes.c_double]
    cbrtf = _libraries['FIXME_STUB'].cbrtf
    cbrtf.restype = ctypes.c_float
    cbrtf.argtypes = [ctypes.c_float]
    cbrtl = _libraries['FIXME_STUB'].cbrtl
    cbrtl.restype = ctypes.c_double
    cbrtl.argtypes = [ctypes.c_double]
    ceil = _libraries['FIXME_STUB'].ceil
    ceil.restype = ctypes.c_double
    ceil.argtypes = [ctypes.c_double]
    ceilf = _libraries['FIXME_STUB'].ceilf
    ceilf.restype = ctypes.c_float
    ceilf.argtypes = [ctypes.c_float]
    ceill = _libraries['FIXME_STUB'].ceill
    ceill.restype = ctypes.c_double
    ceill.argtypes = [ctypes.c_double]
    cfgopt_t__apply = _libraries['FIXME_STUB'].cfgopt_t__apply
    cfgopt_t__apply.restype = ctypes.c_char_p
    cfgopt_t__apply.argtypes = [ctypes.POINTER(struct_cfgopt_t), ctypes.c_int32, ctypes.POINTER(None)]
    cfgopt_t__apply2 = _libraries['FIXME_STUB'].cfgopt_t__apply2
    cfgopt_t__apply2.restype = ctypes.c_char_p
    cfgopt_t__apply2.argtypes = [ctypes.POINTER(struct_cfgopt_t), ctypes.c_int32, ctypes.POINTER(None), ctypes.POINTER(None)]
    cfgopt_t__apply3 = _libraries['FIXME_STUB'].cfgopt_t__apply3
    cfgopt_t__apply3.restype = ctypes.c_char_p
    cfgopt_t__apply3.argtypes = [ctypes.POINTER(struct_cfgopt_t), ctypes.POINTER(struct_lexer_t), ctypes.c_int32, ctypes.POINTER(None), ctypes.POINTER(None)]
    change_bptlocs = _libraries['FIXME_STUB'].change_bptlocs
    change_bptlocs.restype = ctypes.c_int32
    change_bptlocs.argtypes = [ctypes.POINTER(movbpt_infos_t), ctypes.POINTER(movbpt_codes_t), ctypes.c_char]
    change_codepage = _libraries['FIXME_STUB'].change_codepage
    change_codepage.restype = ctypes.c_char
    change_codepage.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32]
    change_segment_status = _libraries['FIXME_STUB'].change_segment_status
    change_segment_status.restype = ctypes.c_int32
    change_segment_status.argtypes = [ctypes.POINTER(struct_segment_t), ctypes.c_char]
    change_storage_type = _libraries['FIXME_STUB'].change_storage_type
    change_storage_type.restype = error_t
    change_storage_type.argtypes = [ea_t, ea_t, storage_type_t]
    char_flag = _libraries['FIXME_STUB'].char_flag
    char_flag.restype = flags_t
    char_flag.argtypes = []
    chdir = _libraries['FIXME_STUB'].chdir
    chdir.restype = ctypes.c_int32
    chdir.argtypes = [ctypes.c_char_p]
    check_bpt = _libraries['FIXME_STUB'].check_bpt
    check_bpt.restype = ctypes.c_int32
    check_bpt.argtypes = [ea_t]
    check_flat_jump_table = _libraries['FIXME_STUB'].check_flat_jump_table
    check_flat_jump_table.restype = ctypes.c_int32
    check_flat_jump_table.argtypes = [ctypes.POINTER(struct_switch_info_t), ea_t, ctypes.c_int32]
    check_for_table_jump = _libraries['FIXME_STUB'].check_for_table_jump
    check_for_table_jump.restype = ctypes.c_char
    check_for_table_jump.argtypes = [ctypes.POINTER(struct_switch_info_t), ctypes.POINTER(struct_insn_t), ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_switch_info_t), ctypes.POINTER(struct_insn_t), ctypes.POINTER(struct_procmod_t)) * 0, size_t, table_checker_t, ctypes.c_char_p]
    check_process_exit = _libraries['FIXME_STUB'].check_process_exit
    check_process_exit.restype = ctypes.c_int32
    check_process_exit.argtypes = [ctypes.POINTER(None), ctypes.POINTER(ctypes.c_int32), ctypes.c_int32]
    check_spoiled_jpt = _libraries['FIXME_STUB'].check_spoiled_jpt
    check_spoiled_jpt.restype = None
    check_spoiled_jpt.argtypes = [ctypes.POINTER(struct_jump_pattern_t), ctypes.POINTER(tracked_regs_t)]
    chmod = _libraries['FIXME_STUB'].chmod
    chmod.restype = ctypes.c_int32
    chmod.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    choose = _libraries['FIXME_STUB'].choose
    choose.restype = ssize_t
    choose.argtypes = [ctypes.POINTER(struct_chooser_base_t), ctypes.POINTER(None)]
    choose_entry = _libraries['FIXME_STUB'].choose_entry
    choose_entry.restype = ea_t
    choose_entry.argtypes = [ctypes.c_char_p]
    choose_enum = _libraries['FIXME_STUB'].choose_enum
    choose_enum.restype = enum_t
    choose_enum.argtypes = [ctypes.c_char_p, enum_t]
    choose_enum_by_value = _libraries['FIXME_STUB'].choose_enum_by_value
    choose_enum_by_value.restype = enum_t
    choose_enum_by_value.argtypes = [ctypes.c_char_p, enum_t, uint64, ctypes.c_int32, ctypes.POINTER(uchar)]
    choose_func = _libraries['FIXME_STUB'].choose_func
    choose_func.restype = ctypes.POINTER(struct_func_t)
    choose_func.argtypes = [ctypes.c_char_p, ea_t]
    choose_idasgn = _libraries['FIXME_STUB'].choose_idasgn
    choose_idasgn.restype = ctypes.c_char_p
    choose_idasgn.argtypes = []
    choose_ioport_device = _libraries['FIXME_STUB'].choose_ioport_device
    choose_ioport_device.restype = ctypes.c_char
    choose_ioport_device.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.CFUNCTYPE(ctypes.c_char_p, ctypes.POINTER(qstring), ctypes.c_char_p)]
    choose_ioport_device2 = _libraries['FIXME_STUB'].choose_ioport_device2
    choose_ioport_device2.restype = ctypes.c_char
    choose_ioport_device2.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.POINTER(struct_choose_ioport_parser_t)]
    choose_local_tinfo = _libraries['FIXME_STUB'].choose_local_tinfo
    choose_local_tinfo.restype = uint32
    choose_local_tinfo.argtypes = [ctypes.POINTER(struct_til_t), ctypes.c_char_p, local_tinfo_predicate_t, uint32, ctypes.POINTER(None)]
    choose_local_tinfo_and_delta = _libraries['FIXME_STUB'].choose_local_tinfo_and_delta
    choose_local_tinfo_and_delta.restype = uint32
    choose_local_tinfo_and_delta.argtypes = [ctypes.POINTER(int32), ctypes.POINTER(struct_til_t), ctypes.c_char_p, local_tinfo_predicate_t, uint32, ctypes.POINTER(None)]
    choose_name = _libraries['FIXME_STUB'].choose_name
    choose_name.restype = ea_t
    choose_name.argtypes = [ctypes.c_char_p]
    choose_named_type = _libraries['FIXME_STUB'].choose_named_type
    choose_named_type.restype = ctypes.c_char
    choose_named_type.argtypes = [ctypes.POINTER(struct_til_symbol_t), ctypes.POINTER(struct_til_t), ctypes.c_char_p, ctypes.c_int32, ctypes.POINTER(struct_predicate_t)]
    choose_segm = _libraries['FIXME_STUB'].choose_segm
    choose_segm.restype = ctypes.POINTER(struct_segment_t)
    choose_segm.argtypes = [ctypes.c_char_p, ea_t]
    choose_srcp = _libraries['FIXME_STUB'].choose_srcp
    choose_srcp.restype = ctypes.POINTER(struct_sreg_range_t)
    choose_srcp.argtypes = [ctypes.c_char_p]
    choose_stkvar_xref = _libraries['FIXME_STUB'].choose_stkvar_xref
    choose_stkvar_xref.restype = ea_t
    choose_stkvar_xref.argtypes = [ctypes.POINTER(struct_func_t), ctypes.POINTER(struct_member_t)]
    choose_struc = _libraries['FIXME_STUB'].choose_struc
    choose_struc.restype = ctypes.POINTER(struct_struc_t)
    choose_struc.argtypes = [ctypes.c_char_p]
    choose_struc_path = _libraries['FIXME_STUB'].choose_struc_path
    choose_struc_path.restype = ctypes.c_int32
    choose_struc_path.argtypes = [ctypes.c_char_p, tid_t, uval_t, adiff_t, ctypes.c_char, ctypes.POINTER(tid_t)]
    choose_til = _libraries['FIXME_STUB'].choose_til
    choose_til.restype = ctypes.c_char
    choose_til.argtypes = [ctypes.POINTER(qstring)]
    choose_trace_file = _libraries['FIXME_STUB'].choose_trace_file
    choose_trace_file.restype = ctypes.c_char
    choose_trace_file.argtypes = [ctypes.POINTER(qstring)]
    choose_xref = _libraries['FIXME_STUB'].choose_xref
    choose_xref.restype = ea_t
    choose_xref.argtypes = [ea_t]
    chsize = _libraries['FIXME_STUB'].chsize
    chsize.restype = ctypes.c_int32
    chsize.argtypes = [ctypes.c_int32, ctypes.c_int32]
    chunk_size = _libraries['FIXME_STUB'].chunk_size
    chunk_size.restype = asize_t
    chunk_size.argtypes = [ea_t]
    chunk_start = _libraries['FIXME_STUB'].chunk_start
    chunk_start.restype = ea_t
    chunk_start.argtypes = [ea_t]
    cleanup_appcall = _libraries['FIXME_STUB'].cleanup_appcall
    cleanup_appcall.restype = error_t
    cleanup_appcall.argtypes = [thid_t]
    cleanup_argloc = _libraries['FIXME_STUB'].cleanup_argloc
    cleanup_argloc.restype = None
    cleanup_argloc.argtypes = [ctypes.POINTER(struct_argloc_t)]
    cleanup_name = _libraries['FIXME_STUB'].cleanup_name
    cleanup_name.restype = ctypes.c_char
    cleanup_name.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.c_char_p, uint32]
    clear_all_bits = _libraries['FIXME_STUB'].clear_all_bits
    clear_all_bits.restype = None
    clear_all_bits.argtypes = [ctypes.POINTER(uchar), size_t]
    clear_bit = _libraries['FIXME_STUB'].clear_bit
    clear_bit.restype = None
    clear_bit.argtypes = [ctypes.POINTER(uchar), size_t]
    clear_bits = _libraries['FIXME_STUB'].clear_bits
    clear_bits.restype = None
    clear_bits.argtypes = [ctypes.POINTER(uchar), size_t, size_t]
    clear_refresh_request = _libraries['FIXME_STUB'].clear_refresh_request
    clear_refresh_request.restype = None
    clear_refresh_request.argtypes = [uint64]
    clear_requests_queue = _libraries['FIXME_STUB'].clear_requests_queue
    clear_requests_queue.restype = None
    clear_requests_queue.argtypes = []
    clear_strlist = _libraries['FIXME_STUB'].clear_strlist
    clear_strlist.restype = None
    clear_strlist.argtypes = []
    clear_tinfo_t = _libraries['FIXME_STUB'].clear_tinfo_t
    clear_tinfo_t.restype = None
    clear_tinfo_t.argtypes = [ctypes.POINTER(struct_tinfo_t)]
    clear_trace = _libraries['FIXME_STUB'].clear_trace
    clear_trace.restype = None
    clear_trace.argtypes = []
    clearerr = _libraries['FIXME_STUB'].clearerr
    clearerr.restype = None
    clearerr.argtypes = [ctypes.POINTER(FILE)]
    clearerr_s = _libraries['FIXME_STUB'].clearerr_s
    clearerr_s.restype = errno_t
    clearerr_s.argtypes = [ctypes.POINTER(FILE)]
    cliopts_t_add = _libraries['FIXME_STUB'].cliopts_t_add
    cliopts_t_add.restype = None
    cliopts_t_add.argtypes = [ctypes.POINTER(struct_cliopts_t), ctypes.POINTER(struct_cliopt_t), size_t]
    cliopts_t_apply = _libraries['FIXME_STUB'].cliopts_t_apply
    cliopts_t_apply.restype = None
    cliopts_t_apply.argtypes = [ctypes.POINTER(struct_cliopts_t), ctypes.c_int32, ctypes.c_char_p * 0, ctypes.POINTER(None)]
    cliopts_t_find_long = _libraries['FIXME_STUB'].cliopts_t_find_long
    cliopts_t_find_long.restype = ctypes.POINTER(struct_cliopt_t)
    cliopts_t_find_long.argtypes = [ctypes.POINTER(struct_cliopts_t), ctypes.c_char_p]
    cliopts_t_find_short = _libraries['FIXME_STUB'].cliopts_t_find_short
    cliopts_t_find_short.restype = ctypes.POINTER(struct_cliopt_t)
    cliopts_t_find_short.argtypes = [ctypes.POINTER(struct_cliopts_t), ctypes.c_char]
    cliopts_t_usage = _libraries['FIXME_STUB'].cliopts_t_usage
    cliopts_t_usage.restype = None
    cliopts_t_usage.argtypes = [ctypes.POINTER(struct_cliopts_t), ctypes.c_char]
    clock = _libraries['FIXME_STUB'].clock
    clock.restype = clock_t
    clock.argtypes = []
    close = _libraries['FIXME_STUB'].close
    close.restype = ctypes.c_int32
    close.argtypes = [ctypes.c_int32]
    close_chooser = _libraries['FIXME_STUB'].close_chooser
    close_chooser.restype = ctypes.c_char
    close_chooser.argtypes = [ctypes.c_char_p]
    close_linput = _libraries['FIXME_STUB'].close_linput
    close_linput.restype = None
    close_linput.argtypes = [ctypes.POINTER(struct_linput_t)]
    close_widget = _libraries['FIXME_STUB'].close_widget
    close_widget.restype = None
    close_widget.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.c_int32]
    closing_comment = _libraries['FIXME_STUB'].closing_comment
    closing_comment.restype = ctypes.c_char_p
    closing_comment.argtypes = []
    clr__bnot0 = _libraries['FIXME_STUB'].clr__bnot0
    clr__bnot0.restype = None
    clr__bnot0.argtypes = [ea_t]
    clr__bnot1 = _libraries['FIXME_STUB'].clr__bnot1
    clr__bnot1.restype = None
    clr__bnot1.argtypes = [ea_t]
    clr__invsign0 = _libraries['FIXME_STUB'].clr__invsign0
    clr__invsign0.restype = None
    clr__invsign0.argtypes = [ea_t]
    clr__invsign1 = _libraries['FIXME_STUB'].clr__invsign1
    clr__invsign1.restype = None
    clr__invsign1.argtypes = [ea_t]
    clr_abits = _libraries['FIXME_STUB'].clr_abits
    clr_abits.restype = None
    clr_abits.argtypes = [ea_t, aflags_t]
    clr_align_flow = _libraries['FIXME_STUB'].clr_align_flow
    clr_align_flow.restype = None
    clr_align_flow.argtypes = [ea_t]
    clr_cancelled = _libraries['FIXME_STUB'].clr_cancelled
    clr_cancelled.restype = None
    clr_cancelled.argtypes = []
    clr_colored_item = _libraries['FIXME_STUB'].clr_colored_item
    clr_colored_item.restype = None
    clr_colored_item.argtypes = [ea_t]
    clr_database_flag = _libraries['FIXME_STUB'].clr_database_flag
    clr_database_flag.restype = None
    clr_database_flag.argtypes = [uint32]
    clr_fixed_spd = _libraries['FIXME_STUB'].clr_fixed_spd
    clr_fixed_spd.restype = None
    clr_fixed_spd.argtypes = [ea_t]
    clr_has_lname = _libraries['FIXME_STUB'].clr_has_lname
    clr_has_lname.restype = None
    clr_has_lname.argtypes = [ea_t]
    clr_has_ti = _libraries['FIXME_STUB'].clr_has_ti
    clr_has_ti.restype = None
    clr_has_ti.argtypes = [ea_t]
    clr_has_ti0 = _libraries['FIXME_STUB'].clr_has_ti0
    clr_has_ti0.restype = None
    clr_has_ti0.argtypes = [ea_t]
    clr_has_ti1 = _libraries['FIXME_STUB'].clr_has_ti1
    clr_has_ti1.restype = None
    clr_has_ti1.argtypes = [ea_t]
    clr_ignore_micro = _libraries['FIXME_STUB'].clr_ignore_micro
    clr_ignore_micro.restype = None
    clr_ignore_micro.argtypes = [ea_t]
    clr_libitem = _libraries['FIXME_STUB'].clr_libitem
    clr_libitem.restype = None
    clr_libitem.argtypes = [ea_t]
    clr_lzero = _libraries['FIXME_STUB'].clr_lzero
    clr_lzero.restype = ctypes.c_char
    clr_lzero.argtypes = [ea_t, ctypes.c_int32]
    clr_lzero0 = _libraries['FIXME_STUB'].clr_lzero0
    clr_lzero0.restype = None
    clr_lzero0.argtypes = [ea_t]
    clr_lzero1 = _libraries['FIXME_STUB'].clr_lzero1
    clr_lzero1.restype = None
    clr_lzero1.argtypes = [ea_t]
    clr_module_data = _libraries['FIXME_STUB'].clr_module_data
    clr_module_data.restype = ctypes.POINTER(None)
    clr_module_data.argtypes = [ctypes.c_int32]
    clr_node_info = _libraries['FIXME_STUB'].clr_node_info
    clr_node_info.restype = None
    clr_node_info.argtypes = [graph_id_t, ctypes.c_int32, uint32]
    clr_noret = _libraries['FIXME_STUB'].clr_noret
    clr_noret.restype = None
    clr_noret.argtypes = [ea_t]
    clr_notcode = _libraries['FIXME_STUB'].clr_notcode
    clr_notcode.restype = None
    clr_notcode.argtypes = [ea_t]
    clr_notproc = _libraries['FIXME_STUB'].clr_notproc
    clr_notproc.restype = None
    clr_notproc.argtypes = [ea_t]
    clr_op_type = _libraries['FIXME_STUB'].clr_op_type
    clr_op_type.restype = ctypes.c_char
    clr_op_type.argtypes = [ea_t, ctypes.c_int32]
    clr_retfp = _libraries['FIXME_STUB'].clr_retfp
    clr_retfp.restype = None
    clr_retfp.argtypes = [ea_t]
    clr_terse_struc = _libraries['FIXME_STUB'].clr_terse_struc
    clr_terse_struc.restype = None
    clr_terse_struc.argtypes = [ea_t]
    clr_tilcmt = _libraries['FIXME_STUB'].clr_tilcmt
    clr_tilcmt.restype = None
    clr_tilcmt.argtypes = [ea_t]
    clr_usemodsp = _libraries['FIXME_STUB'].clr_usemodsp
    clr_usemodsp.restype = None
    clr_usemodsp.argtypes = [ea_t]
    clr_usersp = _libraries['FIXME_STUB'].clr_usersp
    clr_usersp.restype = None
    clr_usersp.argtypes = [ea_t]
    clr_userti = _libraries['FIXME_STUB'].clr_userti
    clr_userti.restype = None
    clr_userti.argtypes = [ea_t]
    clr_zstroff = _libraries['FIXME_STUB'].clr_zstroff
    clr_zstroff.restype = None
    clr_zstroff.argtypes = [ea_t]
    code_flag = _libraries['FIXME_STUB'].code_flag
    code_flag.restype = flags_t
    code_flag.argtypes = []
    code_highlight_block = _libraries['FIXME_STUB'].code_highlight_block
    code_highlight_block.restype = None
    code_highlight_block.argtypes = [ctypes.POINTER(None), ctypes.POINTER(struct_highlighter_cbs_t), ctypes.POINTER(qstring)]
    collect_stack_trace = _libraries['FIXME_STUB'].collect_stack_trace
    collect_stack_trace.restype = ctypes.c_char
    collect_stack_trace.argtypes = [thid_t, ctypes.POINTER(struct_call_stack_t)]
    combine_regs_jpt = _libraries['FIXME_STUB'].combine_regs_jpt
    combine_regs_jpt.restype = None
    combine_regs_jpt.argtypes = [ctypes.POINTER(struct_jump_pattern_t), ctypes.POINTER(tracked_regs_t), ctypes.POINTER(tracked_regs_t), ea_t]
    compact_numbered_types = _libraries['FIXME_STUB'].compact_numbered_types
    compact_numbered_types.restype = ctypes.c_int32
    compact_numbered_types.argtypes = [ctypes.POINTER(struct_til_t), uint32, ctypes.POINTER(intvec_t), ctypes.c_int32]
    compact_til = _libraries['FIXME_STUB'].compact_til
    compact_til.restype = ctypes.c_char
    compact_til.argtypes = [ctypes.POINTER(struct_til_t)]
    compare_arglocs = _libraries['FIXME_STUB'].compare_arglocs
    compare_arglocs.restype = ctypes.c_int32
    compare_arglocs.argtypes = [ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_argloc_t)]
    compare_tinfo = _libraries['FIXME_STUB'].compare_tinfo
    compare_tinfo.restype = ctypes.c_char
    compare_tinfo.argtypes = [uint32, uint32, ctypes.c_int32]
    compile_idc_file = _libraries['FIXME_STUB'].compile_idc_file
    compile_idc_file.restype = ctypes.c_char
    compile_idc_file.argtypes = [ctypes.c_char_p, ctypes.POINTER(qstring), ctypes.c_int32]
    compile_idc_snippet = _libraries['FIXME_STUB'].compile_idc_snippet
    compile_idc_snippet.restype = ctypes.c_char
    compile_idc_snippet.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(qstring), ctypes.POINTER(struct_idc_resolver_t), ctypes.c_char]
    compile_idc_text = _libraries['FIXME_STUB'].compile_idc_text
    compile_idc_text.restype = ctypes.c_char
    compile_idc_text.argtypes = [ctypes.c_char_p, ctypes.POINTER(qstring), ctypes.POINTER(struct_idc_resolver_t), ctypes.c_char]
    construct_macro = _libraries['FIXME_STUB'].construct_macro
    construct_macro.restype = ctypes.c_char
    construct_macro.argtypes = [ctypes.POINTER(struct_insn_t), ctypes.c_char, ctypes.CFUNCTYPE(ctypes.c_char, ctypes.POINTER(struct_insn_t), ctypes.c_char)]
    construct_macro2 = _libraries['FIXME_STUB'].construct_macro2
    construct_macro2.restype = ctypes.c_char
    construct_macro2.argtypes = [ctypes.POINTER(struct_macro_constructor_t), ctypes.POINTER(struct_insn_t), ctypes.c_char]
    contains = _libraries['FIXME_STUB'].contains
    contains.restype = ctypes.c_char
    contains.argtypes = [uval_t, asize_t, uval_t]
    contains_fixups = _libraries['FIXME_STUB'].contains_fixups
    contains_fixups.restype = ctypes.c_char
    contains_fixups.argtypes = [ea_t, asize_t]
    continue_process = _libraries['FIXME_STUB'].continue_process
    continue_process.restype = ctypes.c_char
    continue_process.argtypes = []
    convert_encoding = _libraries['FIXME_STUB'].convert_encoding
    convert_encoding.restype = ssize_t
    convert_encoding.argtypes = [ctypes.POINTER(struct_bytevec_t), ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(struct_bytevec_t), ctypes.c_int32]
    convert_pt_flags_to_hti = _libraries['FIXME_STUB'].convert_pt_flags_to_hti
    convert_pt_flags_to_hti.restype = ctypes.c_int32
    convert_pt_flags_to_hti.argtypes = [ctypes.c_int32]
    copy_argloc = _libraries['FIXME_STUB'].copy_argloc
    copy_argloc.restype = None
    copy_argloc.argtypes = [ctypes.POINTER(struct_argloc_t), ctypes.POINTER(struct_argloc_t)]
    copy_debug_event = _libraries['FIXME_STUB'].copy_debug_event
    copy_debug_event.restype = None
    copy_debug_event.argtypes = [ctypes.POINTER(struct_debug_event_t), ctypes.POINTER(struct_debug_event_t)]
    copy_idcv = _libraries['FIXME_STUB'].copy_idcv
    copy_idcv.restype = error_t
    copy_idcv.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t)]
    copy_named_type = _libraries['FIXME_STUB'].copy_named_type
    copy_named_type.restype = uint32
    copy_named_type.argtypes = [ctypes.POINTER(struct_til_t), ctypes.POINTER(struct_til_t), ctypes.c_char_p]
    copy_sreg_ranges = _libraries['FIXME_STUB'].copy_sreg_ranges
    copy_sreg_ranges.restype = None
    copy_sreg_ranges.argtypes = [ctypes.c_int32, ctypes.c_int32, ctypes.c_char]
    copy_tinfo_t = _libraries['FIXME_STUB'].copy_tinfo_t
    copy_tinfo_t.restype = None
    copy_tinfo_t.argtypes = [ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_tinfo_t)]
    copysign = _libraries['FIXME_STUB'].copysign
    copysign.restype = ctypes.c_double
    copysign.argtypes = [ctypes.c_double, ctypes.c_double]
    copysignf = _libraries['FIXME_STUB'].copysignf
    copysignf.restype = ctypes.c_float
    copysignf.argtypes = [ctypes.c_float, ctypes.c_float]
    copysignl = _libraries['FIXME_STUB'].copysignl
    copysignl.restype = ctypes.c_double
    copysignl.argtypes = [ctypes.c_double, ctypes.c_double]
    correct_address = _libraries['FIXME_STUB'].correct_address
    correct_address.restype = ea_t
    correct_address.argtypes = [ea_t, ea_t, ea_t, ea_t, ctypes.c_char]
    cos = _libraries['FIXME_STUB'].cos
    cos.restype = ctypes.c_double
    cos.argtypes = [ctypes.c_double]
    cosf = _libraries['FIXME_STUB'].cosf
    cosf.restype = ctypes.c_float
    cosf.argtypes = [ctypes.c_float]
    cosh = _libraries['FIXME_STUB'].cosh
    cosh.restype = ctypes.c_double
    cosh.argtypes = [ctypes.c_double]
    coshf = _libraries['FIXME_STUB'].coshf
    coshf.restype = ctypes.c_float
    coshf.argtypes = [ctypes.c_float]
    coshl = _libraries['FIXME_STUB'].coshl
    coshl.restype = ctypes.c_double
    coshl.argtypes = [ctypes.c_double]
    cosl = _libraries['FIXME_STUB'].cosl
    cosl.restype = ctypes.c_double
    cosl.argtypes = [ctypes.c_double]
    creat = _libraries['FIXME_STUB'].creat
    creat.restype = ctypes.c_int32
    creat.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    create_16bit_data = _libraries['FIXME_STUB'].create_16bit_data
    create_16bit_data.restype = ctypes.c_char
    create_16bit_data.argtypes = [ea_t, asize_t]
    create_32bit_data = _libraries['FIXME_STUB'].create_32bit_data
    create_32bit_data.restype = ctypes.c_char
    create_32bit_data.argtypes = [ea_t, asize_t]
    create_align = _libraries['FIXME_STUB'].create_align
    create_align.restype = ctypes.c_char
    create_align.argtypes = [ea_t, asize_t, ctypes.c_int32]
    create_byte = _libraries['FIXME_STUB'].create_byte
    create_byte.restype = ctypes.c_char
    create_byte.argtypes = [ea_t, asize_t, ctypes.c_char]
    create_bytearray_linput = _libraries['FIXME_STUB'].create_bytearray_linput
    create_bytearray_linput.restype = ctypes.POINTER(struct_linput_t)
    create_bytearray_linput.argtypes = [ctypes.POINTER(uchar), size_t]
    create_code_viewer = _libraries['FIXME_STUB'].create_code_viewer
    create_code_viewer.restype = ctypes.POINTER(struct_TWidget)
    create_code_viewer.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.c_int32, ctypes.POINTER(struct_TWidget)]
    create_custdata = _libraries['FIXME_STUB'].create_custdata
    create_custdata.restype = ctypes.c_char
    create_custdata.argtypes = [ea_t, asize_t, ctypes.c_int32, ctypes.c_int32, ctypes.c_char]
    create_custom_viewer = _libraries['FIXME_STUB'].create_custom_viewer
    create_custom_viewer.restype = ctypes.POINTER(struct_TWidget)
    create_custom_viewer.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_place_t), ctypes.POINTER(struct_place_t), ctypes.POINTER(struct_place_t), ctypes.POINTER(struct_renderer_info_t), ctypes.POINTER(None), ctypes.POINTER(struct_custom_viewer_handlers_t), ctypes.POINTER(None), ctypes.POINTER(struct_TWidget)]
    create_data = _libraries['FIXME_STUB'].create_data
    create_data.restype = ctypes.c_char
    create_data.argtypes = [ea_t, flags_t, asize_t, tid_t]
    create_dirtree = _libraries['FIXME_STUB'].create_dirtree
    create_dirtree.restype = ctypes.POINTER(struct_dirtree_impl_t)
    create_dirtree.argtypes = [ctypes.POINTER(struct_dirtree_t), ctypes.POINTER(struct_dirspec_t)]
    create_disasm_graph = _libraries['FIXME_STUB'].create_disasm_graph
    create_disasm_graph.restype = ctypes.POINTER(struct_mutable_graph_t)
    create_disasm_graph.argtypes = [ctypes.POINTER(struct_rangevec_t)]
    create_double = _libraries['FIXME_STUB'].create_double
    create_double.restype = ctypes.c_char
    create_double.argtypes = [ea_t, asize_t, ctypes.c_char]
    create_dword = _libraries['FIXME_STUB'].create_dword
    create_dword.restype = ctypes.c_char
    create_dword.argtypes = [ea_t, asize_t, ctypes.c_char]
    create_empty_widget = _libraries['FIXME_STUB'].create_empty_widget
    create_empty_widget.restype = ctypes.POINTER(struct_TWidget)
    create_empty_widget.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    create_encoding_helper = _libraries['FIXME_STUB'].create_encoding_helper
    create_encoding_helper.restype = ctypes.POINTER(struct_encoder_t)
    create_encoding_helper.argtypes = [ctypes.c_int32, encoder_t__notify_recerr_t]
    create_filename_cmt = _libraries['FIXME_STUB'].create_filename_cmt
    create_filename_cmt.restype = None
    create_filename_cmt.argtypes = []
    create_float = _libraries['FIXME_STUB'].create_float
    create_float.restype = ctypes.c_char
    create_float.argtypes = [ea_t, asize_t, ctypes.c_char]
    create_generic_linput = _libraries['FIXME_STUB'].create_generic_linput
    create_generic_linput.restype = ctypes.POINTER(struct_linput_t)
    create_generic_linput.argtypes = [ctypes.POINTER(struct_generic_linput_t)]
    create_graph_viewer = _libraries['FIXME_STUB'].create_graph_viewer
    create_graph_viewer.restype = ctypes.POINTER(graph_viewer_t)
    create_graph_viewer.argtypes = [ctypes.c_char_p, uval_t, hook_cb_t, ctypes.POINTER(None), ctypes.c_int32, ctypes.POINTER(struct_TWidget)]
    create_idcv_ref = _libraries['FIXME_STUB'].create_idcv_ref
    create_idcv_ref.restype = ctypes.c_char
    create_idcv_ref.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t)]
    create_insn = _libraries['FIXME_STUB'].create_insn
    create_insn.restype = ctypes.c_int32
    create_insn.argtypes = [ea_t, ctypes.POINTER(struct_insn_t)]
    create_lexer = _libraries['FIXME_STUB'].create_lexer
    create_lexer.restype = ctypes.POINTER(struct_lexer_t)
    create_lexer.argtypes = [ctypes.POINTER(ctypes.c_char_p), size_t, ctypes.POINTER(None)]
    create_memory_linput = _libraries['FIXME_STUB'].create_memory_linput
    create_memory_linput.restype = ctypes.POINTER(struct_linput_t)
    create_memory_linput.argtypes = [ea_t, asize_t]
    create_menu = _libraries['FIXME_STUB'].create_menu
    create_menu.restype = ctypes.c_char
    create_menu.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p]
    create_multirange_qflow_chart = _libraries['FIXME_STUB'].create_multirange_qflow_chart
    create_multirange_qflow_chart.restype = ctypes.c_char
    create_multirange_qflow_chart.argtypes = [ctypes.POINTER(struct_qflow_chart_t), ctypes.POINTER(struct_rangevec_t)]
    create_mutable_graph = _libraries['FIXME_STUB'].create_mutable_graph
    create_mutable_graph.restype = ctypes.POINTER(struct_mutable_graph_t)
    create_mutable_graph.argtypes = [uval_t]
    create_numbered_type_name = _libraries['FIXME_STUB'].create_numbered_type_name
    create_numbered_type_name.restype = ssize_t
    create_numbered_type_name.argtypes = [ctypes.POINTER(qstring), int32]
    create_outctx = _libraries['FIXME_STUB'].create_outctx
    create_outctx.restype = ctypes.POINTER(struct_outctx_base_t)
    create_outctx.argtypes = [ea_t, flags_t, ctypes.c_int32]
    create_oword = _libraries['FIXME_STUB'].create_oword
    create_oword.restype = ctypes.c_char
    create_oword.argtypes = [ea_t, asize_t, ctypes.c_char]
    create_packed_real = _libraries['FIXME_STUB'].create_packed_real
    create_packed_real.restype = ctypes.c_char
    create_packed_real.argtypes = [ea_t, asize_t, ctypes.c_char]
    create_qflow_chart = _libraries['FIXME_STUB'].create_qflow_chart
    create_qflow_chart.restype = None
    create_qflow_chart.argtypes = [ctypes.POINTER(struct_qflow_chart_t)]
    create_qword = _libraries['FIXME_STUB'].create_qword
    create_qword.restype = ctypes.c_char
    create_qword.argtypes = [ea_t, asize_t, ctypes.c_char]
    create_source_viewer = _libraries['FIXME_STUB'].create_source_viewer
    create_source_viewer.restype = ctypes.POINTER(struct_source_view_t)
    create_source_viewer.argtypes = [ctypes.POINTER(ctypes.POINTER(struct_TWidget)), ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_TWidget), source_file_ptr, ctypes.POINTER(strvec_t), ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
    create_strlit = _libraries['FIXME_STUB'].create_strlit
    create_strlit.restype = ctypes.c_char
    create_strlit.argtypes = [ea_t, size_t, int32]
    create_struct = _libraries['FIXME_STUB'].create_struct
    create_struct.restype = ctypes.c_char
    create_struct.argtypes = [ea_t, asize_t, tid_t, ctypes.c_char]
    create_switch_table = _libraries['FIXME_STUB'].create_switch_table
    create_switch_table.restype = ctypes.c_char
    create_switch_table.argtypes = [ea_t, ctypes.POINTER(struct_switch_info_t)]
    create_switch_xrefs = _libraries['FIXME_STUB'].create_switch_xrefs
    create_switch_xrefs.restype = None
    create_switch_xrefs.argtypes = [ea_t, ctypes.POINTER(struct_switch_info_t)]
    create_tbyte = _libraries['FIXME_STUB'].create_tbyte
    create_tbyte.restype = ctypes.c_char
    create_tbyte.argtypes = [ea_t, asize_t, ctypes.c_char]
    create_tinfo = _libraries['FIXME_STUB'].create_tinfo
    create_tinfo.restype = ctypes.c_char
    create_tinfo.argtypes = [ctypes.POINTER(struct_tinfo_t), type_t, type_t, ctypes.POINTER(None)]
    create_toolbar = _libraries['FIXME_STUB'].create_toolbar
    create_toolbar.restype = ctypes.c_char
    create_toolbar.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32]
    create_user_graph_place = _libraries['FIXME_STUB'].create_user_graph_place
    create_user_graph_place.restype = ctypes.POINTER(struct_user_graph_place_t)
    create_user_graph_place.argtypes = [ctypes.c_int32, ctypes.c_int32]
    create_word = _libraries['FIXME_STUB'].create_word
    create_word.restype = ctypes.c_char
    create_word.argtypes = [ea_t, asize_t, ctypes.c_char]
    create_xrefs_from = _libraries['FIXME_STUB'].create_xrefs_from
    create_xrefs_from.restype = ctypes.c_char
    create_xrefs_from.argtypes = [ea_t]
    create_yword = _libraries['FIXME_STUB'].create_yword
    create_yword.restype = ctypes.c_char
    create_yword.argtypes = [ea_t, asize_t, ctypes.c_char]
    create_zip_linput = _libraries['FIXME_STUB'].create_zip_linput
    create_zip_linput.restype = ctypes.POINTER(struct_linput_t)
    create_zip_linput.argtypes = [ctypes.POINTER(struct_linput_t), ssize_t, linput_close_code_t]
    create_zword = _libraries['FIXME_STUB'].create_zword
    create_zword.restype = ctypes.c_char
    create_zword.argtypes = [ea_t, asize_t, ctypes.c_char]
    current_exception = _libraries['FIXME_STUB'].current_exception
    current_exception.restype = struct_std__exception_ptr
    current_exception.argtypes = []
    cust_flag = _libraries['FIXME_STUB'].cust_flag
    cust_flag.restype = flags_t
    cust_flag.argtypes = []
    custfmt_flag = _libraries['FIXME_STUB'].custfmt_flag
    custfmt_flag.restype = flags_t
    custfmt_flag.argtypes = []
    custom_viewer_jump = _libraries['FIXME_STUB'].custom_viewer_jump
    custom_viewer_jump.restype = ctypes.c_char
    custom_viewer_jump.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_lochist_entry_t), uint32]
    dbg = (ctypes.POINTER(struct_debugger_t)).in_dll(_libraries['FIXME_STUB'], 'dbg') if getattr(_libraries['FIXME_STUB'], 'dbg', None) else None
    dbg_add_bpt_tev = _libraries['FIXME_STUB'].dbg_add_bpt_tev
    dbg_add_bpt_tev.restype = ctypes.c_char
    dbg_add_bpt_tev.argtypes = [thid_t, ea_t, ea_t]
    dbg_add_call_tev = _libraries['FIXME_STUB'].dbg_add_call_tev
    dbg_add_call_tev.restype = None
    dbg_add_call_tev.argtypes = [thid_t, ea_t, ea_t]
    dbg_add_debug_event = _libraries['FIXME_STUB'].dbg_add_debug_event
    dbg_add_debug_event.restype = None
    dbg_add_debug_event.argtypes = [ctypes.POINTER(struct_debug_event_t)]
    dbg_add_insn_tev = _libraries['FIXME_STUB'].dbg_add_insn_tev
    dbg_add_insn_tev.restype = ctypes.c_char
    dbg_add_insn_tev.argtypes = [thid_t, ea_t, save_reg_values_t]
    dbg_add_many_tevs = _libraries['FIXME_STUB'].dbg_add_many_tevs
    dbg_add_many_tevs.restype = ctypes.c_char
    dbg_add_many_tevs.argtypes = [ctypes.POINTER(tevinforeg_vec_t)]
    dbg_add_ret_tev = _libraries['FIXME_STUB'].dbg_add_ret_tev
    dbg_add_ret_tev.restype = None
    dbg_add_ret_tev.argtypes = [thid_t, ea_t, ea_t]
    dbg_add_tev = _libraries['FIXME_STUB'].dbg_add_tev
    dbg_add_tev.restype = None
    dbg_add_tev.argtypes = [tev_type_t, thid_t, ea_t]
    dbg_add_thread = _libraries['FIXME_STUB'].dbg_add_thread
    dbg_add_thread.restype = None
    dbg_add_thread.argtypes = [thid_t]
    dbg_appcall = _libraries['FIXME_STUB'].dbg_appcall
    dbg_appcall.restype = error_t
    dbg_appcall.argtypes = [ctypes.POINTER(struct_idc_value_t), ea_t, thid_t, ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_idc_value_t), size_t]
    dbg_bin_search = _libraries['FIXME_STUB'].dbg_bin_search
    dbg_bin_search.restype = drc_t
    dbg_bin_search.argtypes = [ctypes.POINTER(ea_t), ea_t, ea_t, ctypes.POINTER(compiled_binpat_vec_t), ctypes.c_int32, ctypes.POINTER(qstring)]
    dbg_can_query = _libraries['FIXME_STUB'].dbg_can_query
    dbg_can_query.restype = ctypes.c_char
    dbg_can_query.argtypes = []
    dbg_del_thread = _libraries['FIXME_STUB'].dbg_del_thread
    dbg_del_thread.restype = None
    dbg_del_thread.argtypes = [thid_t]
    dbg_get_input_path = _libraries['FIXME_STUB'].dbg_get_input_path
    dbg_get_input_path.restype = ssize_t
    dbg_get_input_path.argtypes = [ctypes.c_char_p, size_t]
    dd_size = _libraries['FIXME_STUB'].dd_size
    dd_size.restype = ctypes.c_int32
    dd_size.argtypes = [uchar]
    debug = (ctypes.c_uint32).in_dll(_libraries['FIXME_STUB'], 'debug') if getattr(_libraries['FIXME_STUB'], 'debug', None) else None
    dec_flag = _libraries['FIXME_STUB'].dec_flag
    dec_flag.restype = flags_t
    dec_flag.argtypes = []
    decode_insn = _libraries['FIXME_STUB'].decode_insn
    decode_insn.restype = ctypes.c_int32
    decode_insn.argtypes = [ctypes.POINTER(struct_insn_t), ea_t]
    decode_preceding_insn = _libraries['FIXME_STUB'].decode_preceding_insn
    decode_preceding_insn.restype = ea_t
    decode_preceding_insn.argtypes = [ctypes.POINTER(struct_insn_t), ea_t, ctypes.c_char_p]
    decode_prev_insn = _libraries['FIXME_STUB'].decode_prev_insn
    decode_prev_insn.restype = ea_t
    decode_prev_insn.argtypes = [ctypes.POINTER(struct_insn_t), ea_t]
    decorate_name = _libraries['FIXME_STUB'].decorate_name
    decorate_name.restype = ctypes.c_char
    decorate_name.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.c_char, cm_t, ctypes.POINTER(struct_tinfo_t)]
    deep_copy_idcv = _libraries['FIXME_STUB'].deep_copy_idcv
    deep_copy_idcv.restype = error_t
    deep_copy_idcv.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t)]
    default_compiler = _libraries['FIXME_STUB'].default_compiler
    default_compiler.restype = comp_t
    default_compiler.argtypes = []
    define_exception = _libraries['FIXME_STUB'].define_exception
    define_exception.restype = ctypes.c_char_p
    define_exception.argtypes = [uint, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32]
    define_stkvar = _libraries['FIXME_STUB'].define_stkvar
    define_stkvar.restype = ctypes.c_char
    define_stkvar.argtypes = [ctypes.POINTER(struct_func_t), ctypes.c_char_p, sval_t, flags_t, ctypes.POINTER(union_opinfo_t), asize_t]
    del_absbase = _libraries['FIXME_STUB'].del_absbase
    del_absbase.restype = None
    del_absbase.argtypes = [ea_t]
    del_aflags = _libraries['FIXME_STUB'].del_aflags
    del_aflags.restype = None
    del_aflags.argtypes = [ea_t]
    del_alignment = _libraries['FIXME_STUB'].del_alignment
    del_alignment.restype = None
    del_alignment.argtypes = [ea_t]
    del_array_parameters = _libraries['FIXME_STUB'].del_array_parameters
    del_array_parameters.restype = None
    del_array_parameters.argtypes = [ea_t]
    del_bpt = _libraries['FIXME_STUB'].del_bpt
    del_bpt.restype = ctypes.c_char
    del_bpt.argtypes = [ctypes.POINTER(struct_bpt_location_t)]
    del_bptgrp = _libraries['FIXME_STUB'].del_bptgrp
    del_bptgrp.restype = ctypes.c_char
    del_bptgrp.argtypes = [ctypes.c_char_p]
    del_cref = _libraries['FIXME_STUB'].del_cref
    del_cref.restype = ctypes.c_char
    del_cref.argtypes = [ea_t, ea_t, ctypes.c_char]
    del_custom_data_type_ids = _libraries['FIXME_STUB'].del_custom_data_type_ids
    del_custom_data_type_ids.restype = None
    del_custom_data_type_ids.argtypes = [ea_t]
    del_debug_names = _libraries['FIXME_STUB'].del_debug_names
    del_debug_names.restype = None
    del_debug_names.argtypes = [ea_t, ea_t]
    del_dref = _libraries['FIXME_STUB'].del_dref
    del_dref.restype = None
    del_dref.argtypes = [ea_t, ea_t]
    del_encoding = _libraries['FIXME_STUB'].del_encoding
    del_encoding.restype = ctypes.c_char
    del_encoding.argtypes = [ctypes.c_int32]
    del_enum = _libraries['FIXME_STUB'].del_enum
    del_enum.restype = None
    del_enum.argtypes = [enum_t]
    del_enum_member = _libraries['FIXME_STUB'].del_enum_member
    del_enum_member.restype = ctypes.c_char
    del_enum_member.argtypes = [enum_t, uval_t, uchar, bmask_t]
    del_extra_cmt = _libraries['FIXME_STUB'].del_extra_cmt
    del_extra_cmt.restype = None
    del_extra_cmt.argtypes = [ea_t, ctypes.c_int32]
    del_fixup = _libraries['FIXME_STUB'].del_fixup
    del_fixup.restype = None
    del_fixup.argtypes = [ea_t]
    del_frame = _libraries['FIXME_STUB'].del_frame
    del_frame.restype = ctypes.c_char
    del_frame.argtypes = [ctypes.POINTER(struct_func_t)]
    del_func = _libraries['FIXME_STUB'].del_func
    del_func.restype = ctypes.c_char
    del_func.argtypes = [ea_t]
    del_global_name = _libraries['FIXME_STUB'].del_global_name
    del_global_name.restype = ctypes.c_char
    del_global_name.argtypes = [ea_t]
    del_hidden_range = _libraries['FIXME_STUB'].del_hidden_range
    del_hidden_range.restype = ctypes.c_char
    del_hidden_range.argtypes = [ea_t]
    del_idasgn = _libraries['FIXME_STUB'].del_idasgn
    del_idasgn.restype = ctypes.c_int32
    del_idasgn.argtypes = [ctypes.c_int32]
    del_idc_func = _libraries['FIXME_STUB'].del_idc_func
    del_idc_func.restype = ctypes.c_char
    del_idc_func.argtypes = [ctypes.c_char_p]
    del_idc_hotkey = _libraries['FIXME_STUB'].del_idc_hotkey
    del_idc_hotkey.restype = ctypes.c_char
    del_idc_hotkey.argtypes = [ctypes.c_char_p]
    del_idcv_attr = _libraries['FIXME_STUB'].del_idcv_attr
    del_idcv_attr.restype = error_t
    del_idcv_attr.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p]
    del_ind_purged = _libraries['FIXME_STUB'].del_ind_purged
    del_ind_purged.restype = None
    del_ind_purged.argtypes = [ea_t]
    del_item_color = _libraries['FIXME_STUB'].del_item_color
    del_item_color.restype = ctypes.c_char
    del_item_color.argtypes = [ea_t]
    del_items = _libraries['FIXME_STUB'].del_items
    del_items.restype = ctypes.c_char
    del_items.argtypes = [ea_t, ctypes.c_int32, asize_t, may_destroy_cb_t]
    del_local_name = _libraries['FIXME_STUB'].del_local_name
    del_local_name.restype = ctypes.c_char
    del_local_name.argtypes = [ea_t]
    del_mapping = _libraries['FIXME_STUB'].del_mapping
    del_mapping.restype = None
    del_mapping.argtypes = [ea_t]
    del_member_tinfo = _libraries['FIXME_STUB'].del_member_tinfo
    del_member_tinfo.restype = ctypes.c_char
    del_member_tinfo.argtypes = [ctypes.POINTER(struct_struc_t), ctypes.POINTER(struct_member_t)]
    del_named_type = _libraries['FIXME_STUB'].del_named_type
    del_named_type.restype = ctypes.c_char
    del_named_type.argtypes = [ctypes.POINTER(struct_til_t), ctypes.c_char_p, ctypes.c_int32]
    del_node_info = _libraries['FIXME_STUB'].del_node_info
    del_node_info.restype = None
    del_node_info.argtypes = [graph_id_t, ctypes.c_int32]
    del_numbered_type = _libraries['FIXME_STUB'].del_numbered_type
    del_numbered_type.restype = ctypes.c_char
    del_numbered_type.argtypes = [ctypes.POINTER(struct_til_t), uint32]
    del_op_tinfo = _libraries['FIXME_STUB'].del_op_tinfo
    del_op_tinfo.restype = None
    del_op_tinfo.argtypes = [ea_t, ctypes.c_int32]
    del_qatexit = _libraries['FIXME_STUB'].del_qatexit
    del_qatexit.restype = None
    del_qatexit.argtypes = [ctypes.CFUNCTYPE(None)]
    del_refinfo = _libraries['FIXME_STUB'].del_refinfo
    del_refinfo.restype = ctypes.c_char
    del_refinfo.argtypes = [ea_t, ctypes.c_int32]
    del_regvar = _libraries['FIXME_STUB'].del_regvar
    del_regvar.restype = ctypes.c_int32
    del_regvar.argtypes = [ctypes.POINTER(struct_func_t), ea_t, ea_t, ctypes.c_char_p]
    del_segm = _libraries['FIXME_STUB'].del_segm
    del_segm.restype = ctypes.c_char
    del_segm.argtypes = [ea_t, ctypes.c_int32]
    del_segment_translations = _libraries['FIXME_STUB'].del_segment_translations
    del_segment_translations.restype = None
    del_segment_translations.argtypes = [ea_t]
    del_selector = _libraries['FIXME_STUB'].del_selector
    del_selector.restype = None
    del_selector.argtypes = [sel_t]
    del_source_linnum = _libraries['FIXME_STUB'].del_source_linnum
    del_source_linnum.restype = None
    del_source_linnum.argtypes = [ea_t]
    del_sourcefile = _libraries['FIXME_STUB'].del_sourcefile
    del_sourcefile.restype = ctypes.c_char
    del_sourcefile.argtypes = [ea_t]
    del_sreg_range = _libraries['FIXME_STUB'].del_sreg_range
    del_sreg_range.restype = ctypes.c_char
    del_sreg_range.argtypes = [ea_t, ctypes.c_int32]
    del_stkpnt = _libraries['FIXME_STUB'].del_stkpnt
    del_stkpnt.restype = ctypes.c_char
    del_stkpnt.argtypes = [ctypes.POINTER(struct_func_t), ea_t]
    del_str_type = _libraries['FIXME_STUB'].del_str_type
    del_str_type.restype = None
    del_str_type.argtypes = [ea_t]
    del_struc = _libraries['FIXME_STUB'].del_struc
    del_struc.restype = ctypes.c_char
    del_struc.argtypes = [ctypes.POINTER(struct_struc_t)]
    del_struc_member = _libraries['FIXME_STUB'].del_struc_member
    del_struc_member.restype = ctypes.c_char
    del_struc_member.argtypes = [ctypes.POINTER(struct_struc_t), ea_t]
    del_struc_members = _libraries['FIXME_STUB'].del_struc_members
    del_struc_members.restype = ctypes.c_int32
    del_struc_members.argtypes = [ctypes.POINTER(struct_struc_t), ea_t, ea_t]
    del_switch_info = _libraries['FIXME_STUB'].del_switch_info
    del_switch_info.restype = None
    del_switch_info.argtypes = [ea_t]
    del_switch_parent = _libraries['FIXME_STUB'].del_switch_parent
    del_switch_parent.restype = None
    del_switch_parent.argtypes = [ea_t]
    del_til = _libraries['FIXME_STUB'].del_til
    del_til.restype = ctypes.c_char
    del_til.argtypes = [ctypes.c_char_p]
    del_tinfo = _libraries['FIXME_STUB'].del_tinfo
    del_tinfo.restype = None
    del_tinfo.argtypes = [ea_t]
    del_tinfo_attr = _libraries['FIXME_STUB'].del_tinfo_attr
    del_tinfo_attr.restype = ctypes.c_char
    del_tinfo_attr.argtypes = [ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(qstring), ctypes.c_char]
    del_tryblks = _libraries['FIXME_STUB'].del_tryblks
    del_tryblks.restype = None
    del_tryblks.argtypes = [ctypes.POINTER(struct_range_t)]
    del_value = _libraries['FIXME_STUB'].del_value
    del_value.restype = None
    del_value.argtypes = [ea_t]
    del_vftable_ea = _libraries['FIXME_STUB'].del_vftable_ea
    del_vftable_ea.restype = ctypes.c_char
    del_vftable_ea.argtypes = [uint32]
    del_virt_module = _libraries['FIXME_STUB'].del_virt_module
    del_virt_module.restype = ctypes.c_char
    del_virt_module.argtypes = [ea_t]
    del_xrefpos = _libraries['FIXME_STUB'].del_xrefpos
    del_xrefpos.restype = None
    del_xrefpos.argtypes = [ea_t]
    delete_all_xrefs_from = _libraries['FIXME_STUB'].delete_all_xrefs_from
    delete_all_xrefs_from.restype = None
    delete_all_xrefs_from.argtypes = [ea_t, ctypes.c_char]
    delete_dirtree = _libraries['FIXME_STUB'].delete_dirtree
    delete_dirtree.restype = None
    delete_dirtree.argtypes = [ctypes.POINTER(struct_dirtree_impl_t)]
    delete_extra_cmts = _libraries['FIXME_STUB'].delete_extra_cmts
    delete_extra_cmts.restype = None
    delete_extra_cmts.argtypes = [ea_t, ctypes.c_int32]
    delete_imports = _libraries['FIXME_STUB'].delete_imports
    delete_imports.restype = None
    delete_imports.argtypes = []
    delete_menu = _libraries['FIXME_STUB'].delete_menu
    delete_menu.restype = ctypes.c_char
    delete_menu.argtypes = [ctypes.c_char_p]
    delete_mutable_graph = _libraries['FIXME_STUB'].delete_mutable_graph
    delete_mutable_graph.restype = None
    delete_mutable_graph.argtypes = [ctypes.POINTER(struct_mutable_graph_t)]
    delete_switch_table = _libraries['FIXME_STUB'].delete_switch_table
    delete_switch_table.restype = None
    delete_switch_table.argtypes = [ea_t, ctypes.POINTER(struct_switch_info_t)]
    delete_toolbar = _libraries['FIXME_STUB'].delete_toolbar
    delete_toolbar.restype = ctypes.c_char
    delete_toolbar.argtypes = [ctypes.c_char_p]
    delete_unreferenced_stkvars = _libraries['FIXME_STUB'].delete_unreferenced_stkvars
    delete_unreferenced_stkvars.restype = ctypes.c_int32
    delete_unreferenced_stkvars.argtypes = [ctypes.POINTER(struct_func_t)]
    delete_wrong_stkvar_ops = _libraries['FIXME_STUB'].delete_wrong_stkvar_ops
    delete_wrong_stkvar_ops.restype = ctypes.c_int32
    delete_wrong_stkvar_ops.argtypes = [ctypes.POINTER(struct_func_t)]
    delinf = _libraries['FIXME_STUB'].delinf
    delinf.restype = ctypes.c_char
    delinf.argtypes = [inftag_t]
    demangle = _libraries['FIXME_STUB'].demangle
    demangle.restype = int32
    demangle.argtypes = [ctypes.c_char_p, uint, ctypes.c_char_p, uint32]
    demangle_name = _libraries['FIXME_STUB'].demangle_name
    demangle_name.restype = qstring
    demangle_name.argtypes = [ctypes.c_char_p, uint32, demreq_type_t]
    deref_idcv = _libraries['FIXME_STUB'].deref_idcv
    deref_idcv.restype = ctypes.POINTER(struct_idc_value_t)
    deref_idcv.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.c_int32]
    deref_ptr = _libraries['FIXME_STUB'].deref_ptr
    deref_ptr.restype = ctypes.c_char
    deref_ptr.argtypes = [ctypes.POINTER(ea_t), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(ea_t)]
    deserialize_dynamic_register_set = _libraries['FIXME_STUB'].deserialize_dynamic_register_set
    deserialize_dynamic_register_set.restype = None
    deserialize_dynamic_register_set.argtypes = [ctypes.POINTER(struct_dynamic_register_set_t), ctypes.POINTER(struct_memory_deserializer_t)]
    deserialize_tinfo = _libraries['FIXME_STUB'].deserialize_tinfo
    deserialize_tinfo.restype = ctypes.c_char
    deserialize_tinfo.argtypes = [ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_til_t), ctypes.POINTER(ctypes.POINTER(type_t)), ctypes.POINTER(ctypes.POINTER(p_list)), ctypes.POINTER(ctypes.POINTER(p_list))]
    destroy_custom_viewer = _libraries['FIXME_STUB'].destroy_custom_viewer
    destroy_custom_viewer.restype = None
    destroy_custom_viewer.argtypes = [ctypes.POINTER(struct_TWidget)]
    destroy_lexer = _libraries['FIXME_STUB'].destroy_lexer
    destroy_lexer.restype = None
    destroy_lexer.argtypes = [ctypes.POINTER(struct_lexer_t)]
    detach_action_from_menu = _libraries['FIXME_STUB'].detach_action_from_menu
    detach_action_from_menu.restype = ctypes.c_char
    detach_action_from_menu.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    detach_action_from_popup = _libraries['FIXME_STUB'].detach_action_from_popup
    detach_action_from_popup.restype = ctypes.c_char
    detach_action_from_popup.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.c_char_p]
    detach_action_from_toolbar = _libraries['FIXME_STUB'].detach_action_from_toolbar
    detach_action_from_toolbar.restype = ctypes.c_char
    detach_action_from_toolbar.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    detach_custom_data_format = _libraries['FIXME_STUB'].detach_custom_data_format
    detach_custom_data_format.restype = ctypes.c_char
    detach_custom_data_format.argtypes = [ctypes.c_int32, ctypes.c_int32]
    detach_process = _libraries['FIXME_STUB'].detach_process
    detach_process.restype = ctypes.c_char
    detach_process.argtypes = []
    detect_compiler_using_demangler = _libraries['FIXME_STUB'].detect_compiler_using_demangler
    detect_compiler_using_demangler.restype = int32
    detect_compiler_using_demangler.argtypes = [ctypes.c_char_p]
    determine_rtl = _libraries['FIXME_STUB'].determine_rtl
    determine_rtl.restype = None
    determine_rtl.argtypes = []
    diff_trace_file = _libraries['FIXME_STUB'].diff_trace_file
    diff_trace_file.restype = ctypes.c_char
    diff_trace_file.argtypes = [ctypes.c_char_p]
    dirtree_change_rank = _libraries['FIXME_STUB'].dirtree_change_rank
    dirtree_change_rank.restype = dterr_t
    dirtree_change_rank.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), ctypes.c_char_p, ssize_t]
    dirtree_chdir = _libraries['FIXME_STUB'].dirtree_chdir
    dirtree_chdir.restype = dterr_t
    dirtree_chdir.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), ctypes.c_char_p]
    dirtree_errstr = _libraries['FIXME_STUB'].dirtree_errstr
    dirtree_errstr.restype = ctypes.c_char_p
    dirtree_errstr.argtypes = [dterr_t]
    dirtree_find_entry = _libraries['FIXME_STUB'].dirtree_find_entry
    dirtree_find_entry.restype = dterr_t
    dirtree_find_entry.argtypes = [ctypes.POINTER(struct_dirtree_cursor_t), ctypes.POINTER(struct_dirtree_t), ctypes.POINTER(struct_direntry_t)]
    dirtree_findfirst = _libraries['FIXME_STUB'].dirtree_findfirst
    dirtree_findfirst.restype = ctypes.c_char
    dirtree_findfirst.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), ctypes.POINTER(struct_dirtree_iterator_t), ctypes.c_char_p]
    dirtree_findnext = _libraries['FIXME_STUB'].dirtree_findnext
    dirtree_findnext.restype = ctypes.c_char
    dirtree_findnext.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), ctypes.POINTER(struct_dirtree_iterator_t)]
    dirtree_get_abspath_by_cursor = _libraries['FIXME_STUB'].dirtree_get_abspath_by_cursor
    dirtree_get_abspath_by_cursor.restype = ctypes.c_char
    dirtree_get_abspath_by_cursor.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_dirtree_impl_t), ctypes.POINTER(struct_dirtree_cursor_t)]
    dirtree_get_abspath_by_relpath = _libraries['FIXME_STUB'].dirtree_get_abspath_by_relpath
    dirtree_get_abspath_by_relpath.restype = ctypes.c_char
    dirtree_get_abspath_by_relpath.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_dirtree_impl_t), ctypes.c_char_p]
    dirtree_get_dir_size = _libraries['FIXME_STUB'].dirtree_get_dir_size
    dirtree_get_dir_size.restype = ssize_t
    dirtree_get_dir_size.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), diridx_t]
    dirtree_get_entry_attrs = _libraries['FIXME_STUB'].dirtree_get_entry_attrs
    dirtree_get_entry_attrs.restype = None
    dirtree_get_entry_attrs.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_dirtree_impl_t), ctypes.POINTER(struct_direntry_t)]
    dirtree_get_entry_name = _libraries['FIXME_STUB'].dirtree_get_entry_name
    dirtree_get_entry_name.restype = ctypes.c_char
    dirtree_get_entry_name.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_dirtree_impl_t), ctypes.POINTER(struct_direntry_t), uint32]
    dirtree_get_id = _libraries['FIXME_STUB'].dirtree_get_id
    dirtree_get_id.restype = ctypes.c_char_p
    dirtree_get_id.argtypes = [ctypes.POINTER(struct_dirtree_impl_t)]
    dirtree_get_nodename = _libraries['FIXME_STUB'].dirtree_get_nodename
    dirtree_get_nodename.restype = ctypes.c_char_p
    dirtree_get_nodename.argtypes = [ctypes.POINTER(struct_dirtree_impl_t)]
    dirtree_get_parent_cursor = _libraries['FIXME_STUB'].dirtree_get_parent_cursor
    dirtree_get_parent_cursor.restype = None
    dirtree_get_parent_cursor.argtypes = [ctypes.POINTER(struct_dirtree_cursor_t), ctypes.POINTER(struct_dirtree_impl_t), ctypes.POINTER(struct_dirtree_cursor_t)]
    dirtree_get_rank = _libraries['FIXME_STUB'].dirtree_get_rank
    dirtree_get_rank.restype = ssize_t
    dirtree_get_rank.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), diridx_t, ctypes.POINTER(struct_direntry_t)]
    dirtree_getcwd = _libraries['FIXME_STUB'].dirtree_getcwd
    dirtree_getcwd.restype = None
    dirtree_getcwd.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_dirtree_impl_t)]
    dirtree_link = _libraries['FIXME_STUB'].dirtree_link
    dirtree_link.restype = dterr_t
    dirtree_link.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), ctypes.c_char_p, ctypes.c_char]
    dirtree_link_inode = _libraries['FIXME_STUB'].dirtree_link_inode
    dirtree_link_inode.restype = dterr_t
    dirtree_link_inode.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), inode_t, ctypes.c_char]
    dirtree_mkdir = _libraries['FIXME_STUB'].dirtree_mkdir
    dirtree_mkdir.restype = dterr_t
    dirtree_mkdir.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), ctypes.c_char_p]
    dirtree_rename = _libraries['FIXME_STUB'].dirtree_rename
    dirtree_rename.restype = dterr_t
    dirtree_rename.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), ctypes.c_char_p, ctypes.c_char_p]
    dirtree_resolve_cursor = _libraries['FIXME_STUB'].dirtree_resolve_cursor
    dirtree_resolve_cursor.restype = None
    dirtree_resolve_cursor.argtypes = [ctypes.POINTER(struct_direntry_t), ctypes.POINTER(struct_dirtree_impl_t), ctypes.POINTER(struct_dirtree_cursor_t)]
    dirtree_resolve_path = _libraries['FIXME_STUB'].dirtree_resolve_path
    dirtree_resolve_path.restype = None
    dirtree_resolve_path.argtypes = [ctypes.POINTER(struct_direntry_t), ctypes.POINTER(struct_dirtree_impl_t), ctypes.c_char_p]
    dirtree_rmdir = _libraries['FIXME_STUB'].dirtree_rmdir
    dirtree_rmdir.restype = dterr_t
    dirtree_rmdir.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), ctypes.c_char_p]
    dirtree_set_id = _libraries['FIXME_STUB'].dirtree_set_id
    dirtree_set_id.restype = None
    dirtree_set_id.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), ctypes.c_char_p]
    dirtree_set_nodename = _libraries['FIXME_STUB'].dirtree_set_nodename
    dirtree_set_nodename.restype = None
    dirtree_set_nodename.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), ctypes.c_char_p]
    dirtree_traverse = _libraries['FIXME_STUB'].dirtree_traverse
    dirtree_traverse.restype = ssize_t
    dirtree_traverse.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), ctypes.POINTER(struct_dirtree_visitor_t)]
    disable_bblk_trace = _libraries['FIXME_STUB'].disable_bblk_trace
    disable_bblk_trace.restype = ctypes.c_char
    disable_bblk_trace.argtypes = []
    disable_bpt = _libraries['FIXME_STUB'].disable_bpt
    disable_bpt.restype = ctypes.c_char
    disable_bpt.argtypes = [ctypes.POINTER(struct_bpt_location_t)]
    disable_flags = _libraries['FIXME_STUB'].disable_flags
    disable_flags.restype = error_t
    disable_flags.argtypes = [ea_t, ea_t]
    disable_func_trace = _libraries['FIXME_STUB'].disable_func_trace
    disable_func_trace.restype = ctypes.c_char
    disable_func_trace.argtypes = []
    disable_insn_trace = _libraries['FIXME_STUB'].disable_insn_trace
    disable_insn_trace.restype = ctypes.c_char
    disable_insn_trace.argtypes = []
    disable_step_trace = _libraries['FIXME_STUB'].disable_step_trace
    disable_step_trace.restype = ctypes.c_char
    disable_step_trace.argtypes = []
    display_copyright_warning = _libraries['FIXME_STUB'].display_copyright_warning
    display_copyright_warning.restype = ctypes.c_char
    display_copyright_warning.argtypes = []
    display_gdl = _libraries['FIXME_STUB'].display_gdl
    display_gdl.restype = ctypes.c_int32
    display_gdl.argtypes = [ctypes.c_char_p]
    display_widget = _libraries['FIXME_STUB'].display_widget
    display_widget.restype = None
    display_widget.argtypes = [ctypes.POINTER(struct_TWidget), uint32, ctypes.c_char_p]
    div = _libraries['FIXME_STUB'].div
    div.restype = lldiv_t
    div.argtypes = [ctypes.c_int64, ctypes.c_int64]
    double_flag = _libraries['FIXME_STUB'].double_flag
    double_flag.restype = flags_t
    double_flag.argtypes = []
    ds_packed_size = _libraries['FIXME_STUB'].ds_packed_size
    ds_packed_size.restype = ctypes.c_int32
    ds_packed_size.argtypes = [ctypes.c_char_p]
    dstr_tinfo = _libraries['FIXME_STUB'].dstr_tinfo
    dstr_tinfo.restype = ctypes.c_char_p
    dstr_tinfo.argtypes = [ctypes.POINTER(struct_tinfo_t)]
    dummy_name_ea = _libraries['FIXME_STUB'].dummy_name_ea
    dummy_name_ea.restype = ea_t
    dummy_name_ea.argtypes = [ctypes.c_char_p]
    dump_func_type_data = _libraries['FIXME_STUB'].dump_func_type_data
    dump_func_type_data.restype = ctypes.c_char
    dump_func_type_data.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_func_type_data_t), ctypes.c_int32]
    dup = _libraries['FIXME_STUB'].dup
    dup.restype = ctypes.c_int32
    dup.argtypes = [ctypes.c_int32]
    dup2 = _libraries['FIXME_STUB'].dup2
    dup2.restype = ctypes.c_int32
    dup2.argtypes = [ctypes.c_int32, ctypes.c_int32]
    dw_size = _libraries['FIXME_STUB'].dw_size
    dw_size.restype = ctypes.c_int32
    dw_size.argtypes = [uchar]
    dword_flag = _libraries['FIXME_STUB'].dword_flag
    dword_flag.restype = flags_t
    dword_flag.argtypes = []
    ea2node = _libraries['FIXME_STUB'].ea2node
    ea2node.restype = nodeidx_t
    ea2node.argtypes = [ea_t]
    ea2str = _libraries['FIXME_STUB'].ea2str
    ea2str.restype = ctypes.c_char
    ea2str.argtypes = [ctypes.POINTER(qstring), ea_t]
    ea_viewer_history_push_and_jump = _libraries['FIXME_STUB'].ea_viewer_history_push_and_jump
    ea_viewer_history_push_and_jump.restype = ctypes.c_char
    ea_viewer_history_push_and_jump.argtypes = [ctypes.POINTER(struct_TWidget), ea_t, ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
    eadd = _libraries['FIXME_STUB'].eadd
    eadd.restype = fpvalue_error_t
    eadd.argtypes = [ctypes.POINTER(struct_fpvalue_t), ctypes.POINTER(struct_fpvalue_t), ctypes.POINTER(struct_fpvalue_t), ctypes.c_char]
    echsize = _libraries['FIXME_STUB'].echsize
    echsize.restype = None
    echsize.argtypes = [ctypes.POINTER(FILE), uint64]
    ecleaz = _libraries['FIXME_STUB'].ecleaz
    ecleaz.restype = None
    ecleaz.argtypes = [eNI]
    eclose = _libraries['FIXME_STUB'].eclose
    eclose.restype = None
    eclose.argtypes = [ctypes.POINTER(FILE)]
    ecmp = _libraries['FIXME_STUB'].ecmp
    ecmp.restype = ctypes.c_int32
    ecmp.argtypes = [ctypes.POINTER(struct_fpvalue_t), ctypes.POINTER(struct_fpvalue_t)]
    ecreate = _libraries['FIXME_STUB'].ecreate
    ecreate.restype = ctypes.POINTER(FILE)
    ecreate.argtypes = [ctypes.c_char_p]
    ecvt = _libraries['FIXME_STUB'].ecvt
    ecvt.restype = ctypes.c_char_p
    ecvt.argtypes = [ctypes.c_double, ctypes.c_int32, ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32)]
    edit_manual_regions = _libraries['FIXME_STUB'].edit_manual_regions
    edit_manual_regions.restype = None
    edit_manual_regions.argtypes = []
    ediv = _libraries['FIXME_STUB'].ediv
    ediv.restype = fpvalue_error_t
    ediv.argtypes = [ctypes.POINTER(struct_fpvalue_t), ctypes.POINTER(struct_fpvalue_t), ctypes.POINTER(struct_fpvalue_t)]
    eetol = _libraries['FIXME_STUB'].eetol
    eetol.restype = fpvalue_error_t
    eetol.argtypes = [ctypes.POINTER(sval_t), ctypes.POINTER(struct_fpvalue_t), ctypes.c_char]
    eetol64 = _libraries['FIXME_STUB'].eetol64
    eetol64.restype = fpvalue_error_t
    eetol64.argtypes = [ctypes.POINTER(int64), ctypes.POINTER(struct_fpvalue_t), ctypes.c_char]
    eetol64u = _libraries['FIXME_STUB'].eetol64u
    eetol64u.restype = fpvalue_error_t
    eetol64u.argtypes = [ctypes.POINTER(uint64), ctypes.POINTER(struct_fpvalue_t), ctypes.c_char]
    eldexp = _libraries['FIXME_STUB'].eldexp
    eldexp.restype = fpvalue_error_t
    eldexp.argtypes = [ctypes.POINTER(struct_fpvalue_t), int32, ctypes.POINTER(struct_fpvalue_t)]
    eltoe = _libraries['FIXME_STUB'].eltoe
    eltoe.restype = None
    eltoe.argtypes = [sval_t, ctypes.POINTER(struct_fpvalue_t)]
    eltoe64 = _libraries['FIXME_STUB'].eltoe64
    eltoe64.restype = None
    eltoe64.argtypes = [int64, ctypes.POINTER(struct_fpvalue_t)]
    eltoe64u = _libraries['FIXME_STUB'].eltoe64u
    eltoe64u.restype = None
    eltoe64u.argtypes = [uint64, ctypes.POINTER(struct_fpvalue_t)]
    emdnorm = _libraries['FIXME_STUB'].emdnorm
    emdnorm.restype = ctypes.c_char
    emdnorm.argtypes = [eNI, ctypes.c_char, ctypes.c_char, int32, ctypes.c_int32]
    emovi = _libraries['FIXME_STUB'].emovi
    emovi.restype = None
    emovi.argtypes = [ctypes.POINTER(struct_fpvalue_t), eNI]
    emovo = _libraries['FIXME_STUB'].emovo
    emovo.restype = None
    emovo.argtypes = [eNI, ctypes.POINTER(struct_fpvalue_t)]
    emul = _libraries['FIXME_STUB'].emul
    emul.restype = fpvalue_error_t
    emul.argtypes = [ctypes.POINTER(struct_fpvalue_t), ctypes.POINTER(struct_fpvalue_t), ctypes.POINTER(struct_fpvalue_t)]
    enable_auto = _libraries['FIXME_STUB'].enable_auto
    enable_auto.restype = ctypes.c_char
    enable_auto.argtypes = [ctypes.c_char]
    enable_bblk_trace = _libraries['FIXME_STUB'].enable_bblk_trace
    enable_bblk_trace.restype = ctypes.c_char
    enable_bblk_trace.argtypes = [ctypes.c_char]
    enable_bpt = _libraries['FIXME_STUB'].enable_bpt
    enable_bpt.restype = ctypes.c_char
    enable_bpt.argtypes = [ctypes.POINTER(struct_bpt_location_t), ctypes.c_char]
    enable_bptgrp = _libraries['FIXME_STUB'].enable_bptgrp
    enable_bptgrp.restype = ctypes.c_int32
    enable_bptgrp.argtypes = [ctypes.c_char_p, ctypes.c_char]
    enable_chooser_item_attrs = _libraries['FIXME_STUB'].enable_chooser_item_attrs
    enable_chooser_item_attrs.restype = ctypes.c_char
    enable_chooser_item_attrs.argtypes = [ctypes.c_char_p, ctypes.c_char]
    enable_flags = _libraries['FIXME_STUB'].enable_flags
    enable_flags.restype = error_t
    enable_flags.argtypes = [ea_t, ea_t, storage_type_t]
    enable_func_trace = _libraries['FIXME_STUB'].enable_func_trace
    enable_func_trace.restype = ctypes.c_char
    enable_func_trace.argtypes = [ctypes.c_char]
    enable_insn_trace = _libraries['FIXME_STUB'].enable_insn_trace
    enable_insn_trace.restype = ctypes.c_char
    enable_insn_trace.argtypes = [ctypes.c_char]
    enable_manual_regions = _libraries['FIXME_STUB'].enable_manual_regions
    enable_manual_regions.restype = None
    enable_manual_regions.argtypes = [ctypes.c_char]
    enable_numbered_types = _libraries['FIXME_STUB'].enable_numbered_types
    enable_numbered_types.restype = ctypes.c_char
    enable_numbered_types.argtypes = [ctypes.POINTER(struct_til_t), ctypes.c_char]
    enable_step_trace = _libraries['FIXME_STUB'].enable_step_trace
    enable_step_trace.restype = ctypes.c_char
    enable_step_trace.argtypes = [ctypes.c_int32]
    encoding_from_strtype = _libraries['FIXME_STUB'].encoding_from_strtype
    encoding_from_strtype.restype = ctypes.c_char_p
    encoding_from_strtype.argtypes = [int32]
    end_type_updating = _libraries['FIXME_STUB'].end_type_updating
    end_type_updating.restype = None
    end_type_updating.argtypes = [update_type_t]
    enum_flag = _libraries['FIXME_STUB'].enum_flag
    enum_flag.restype = flags_t
    enum_flag.argtypes = []
    enum_import_names = _libraries['FIXME_STUB'].enum_import_names
    enum_import_names.restype = ctypes.c_int32
    enum_import_names.argtypes = [ctypes.c_int32, import_enum_cb_t, ctypes.POINTER(None)]
    enumerate_files = _libraries['FIXME_STUB'].enumerate_files
    enumerate_files.restype = ctypes.c_int32
    enumerate_files.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, ctypes.c_char_p, ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.c_char_p, ctypes.POINTER(None)), ctypes.POINTER(None)]
    enumerate_files2 = _libraries['FIXME_STUB'].enumerate_files2
    enumerate_files2.restype = ctypes.c_int32
    enumerate_files2.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(struct_file_enumerator_t)]
    enumerate_segments_with_selector = _libraries['FIXME_STUB'].enumerate_segments_with_selector
    enumerate_segments_with_selector.restype = ea_t
    enumerate_segments_with_selector.argtypes = [sel_t, ctypes.CFUNCTYPE(ea_t, ctypes.POINTER(struct_segment_t), ctypes.POINTER(None)), ctypes.POINTER(None)]
    enumerate_selectors = _libraries['FIXME_STUB'].enumerate_selectors
    enumerate_selectors.restype = ctypes.c_int32
    enumerate_selectors.argtypes = [ctypes.CFUNCTYPE(ctypes.c_int32, sel_t, ea_t)]
    enumplace_t__adjust = _libraries['FIXME_STUB'].enumplace_t__adjust
    enumplace_t__adjust.restype = None
    enumplace_t__adjust.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(None)]
    enumplace_t__beginning = _libraries['FIXME_STUB'].enumplace_t__beginning
    enumplace_t__beginning.restype = ctypes.c_char
    enumplace_t__beginning.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(None)]
    enumplace_t__clone = _libraries['FIXME_STUB'].enumplace_t__clone
    enumplace_t__clone.restype = ctypes.POINTER(struct_place_t)
    enumplace_t__clone.argtypes = [ctypes.POINTER(struct_enumplace_t)]
    enumplace_t__compare = _libraries['FIXME_STUB'].enumplace_t__compare
    enumplace_t__compare.restype = ctypes.c_int32
    enumplace_t__compare.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(struct_place_t)]
    enumplace_t__compare2 = _libraries['FIXME_STUB'].enumplace_t__compare2
    enumplace_t__compare2.restype = ctypes.c_int32
    enumplace_t__compare2.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(struct_place_t), ctypes.POINTER(None)]
    enumplace_t__copyfrom = _libraries['FIXME_STUB'].enumplace_t__copyfrom
    enumplace_t__copyfrom.restype = None
    enumplace_t__copyfrom.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(struct_place_t)]
    enumplace_t__deserialize = _libraries['FIXME_STUB'].enumplace_t__deserialize
    enumplace_t__deserialize.restype = ctypes.c_char
    enumplace_t__deserialize.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    enumplace_t__ending = _libraries['FIXME_STUB'].enumplace_t__ending
    enumplace_t__ending.restype = ctypes.c_char
    enumplace_t__ending.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(None)]
    enumplace_t__enter = _libraries['FIXME_STUB'].enumplace_t__enter
    enumplace_t__enter.restype = ctypes.POINTER(struct_place_t)
    enumplace_t__enter.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(uint32)]
    enumplace_t__generate = _libraries['FIXME_STUB'].enumplace_t__generate
    enumplace_t__generate.restype = ctypes.c_int32
    enumplace_t__generate.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(qstrvec_t), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(color_t), ctypes.POINTER(bgcolor_t), ctypes.POINTER(None), ctypes.c_int32]
    enumplace_t__id = _libraries['FIXME_STUB'].enumplace_t__id
    enumplace_t__id.restype = ctypes.c_int32
    enumplace_t__id.argtypes = [ctypes.POINTER(struct_enumplace_t)]
    enumplace_t__leave = _libraries['FIXME_STUB'].enumplace_t__leave
    enumplace_t__leave.restype = None
    enumplace_t__leave.argtypes = [ctypes.POINTER(struct_enumplace_t), uint32]
    enumplace_t__makeplace = _libraries['FIXME_STUB'].enumplace_t__makeplace
    enumplace_t__makeplace.restype = ctypes.POINTER(struct_place_t)
    enumplace_t__makeplace.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(None), uval_t, ctypes.c_int32]
    enumplace_t__name = _libraries['FIXME_STUB'].enumplace_t__name
    enumplace_t__name.restype = ctypes.c_char_p
    enumplace_t__name.argtypes = [ctypes.POINTER(struct_enumplace_t)]
    enumplace_t__next = _libraries['FIXME_STUB'].enumplace_t__next
    enumplace_t__next.restype = ctypes.c_char
    enumplace_t__next.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(None)]
    enumplace_t__prev = _libraries['FIXME_STUB'].enumplace_t__prev
    enumplace_t__prev.restype = ctypes.c_char
    enumplace_t__prev.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(None)]
    enumplace_t__print = _libraries['FIXME_STUB'].enumplace_t__print
    enumplace_t__print.restype = None
    enumplace_t__print.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(qstring), ctypes.POINTER(None)]
    enumplace_t__rebase = _libraries['FIXME_STUB'].enumplace_t__rebase
    enumplace_t__rebase.restype = ctypes.c_char
    enumplace_t__rebase.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(struct_segm_move_infos_t)]
    enumplace_t__serialize = _libraries['FIXME_STUB'].enumplace_t__serialize
    enumplace_t__serialize.restype = None
    enumplace_t__serialize.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(struct_bytevec_t)]
    enumplace_t__toea = _libraries['FIXME_STUB'].enumplace_t__toea
    enumplace_t__toea.restype = ea_t
    enumplace_t__toea.argtypes = [ctypes.POINTER(struct_enumplace_t)]
    enumplace_t__touval = _libraries['FIXME_STUB'].enumplace_t__touval
    enumplace_t__touval.restype = uval_t
    enumplace_t__touval.argtypes = [ctypes.POINTER(struct_enumplace_t), ctypes.POINTER(None)]
    eof = _libraries['FIXME_STUB'].eof
    eof.restype = ctypes.c_int32
    eof.argtypes = [ctypes.c_int32]
    equal_bytes = _libraries['FIXME_STUB'].equal_bytes
    equal_bytes.restype = ctypes.c_char
    equal_bytes.argtypes = [ea_t, ctypes.POINTER(uchar), ctypes.POINTER(uchar), size_t, ctypes.c_int32]
    eread = _libraries['FIXME_STUB'].eread
    eread.restype = None
    eread.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(None), size_t]
    erf = _libraries['FIXME_STUB'].erf
    erf.restype = ctypes.c_double
    erf.argtypes = [ctypes.c_double]
    erfc = _libraries['FIXME_STUB'].erfc
    erfc.restype = ctypes.c_double
    erfc.argtypes = [ctypes.c_double]
    erfcf = _libraries['FIXME_STUB'].erfcf
    erfcf.restype = ctypes.c_float
    erfcf.argtypes = [ctypes.c_float]
    erfcl = _libraries['FIXME_STUB'].erfcl
    erfcl.restype = ctypes.c_double
    erfcl.argtypes = [ctypes.c_double]
    erff = _libraries['FIXME_STUB'].erff
    erff.restype = ctypes.c_float
    erff.argtypes = [ctypes.c_float]
    erfl = _libraries['FIXME_STUB'].erfl
    erfl.restype = ctypes.c_double
    erfl.argtypes = [ctypes.c_double]
    error = _libraries['FIXME_STUB'].error
    error.restype = None
    error.argtypes = [ctypes.c_char_p]
    errorexit = (ctypes.c_int32).in_dll(_libraries['FIXME_STUB'], 'errorexit') if getattr(_libraries['FIXME_STUB'], 'errorexit', None) else None
    eseek = _libraries['FIXME_STUB'].eseek
    eseek.restype = None
    eseek.argtypes = [ctypes.POINTER(FILE), int64]
    eshift = _libraries['FIXME_STUB'].eshift
    eshift.restype = ctypes.c_int32
    eshift.argtypes = [eNI, ctypes.c_int32]
    eval_expr = _libraries['FIXME_STUB'].eval_expr
    eval_expr.restype = ctypes.c_char
    eval_expr.argtypes = [ctypes.POINTER(struct_idc_value_t), ea_t, ctypes.c_char_p, ctypes.POINTER(qstring)]
    eval_expr_long = _libraries['FIXME_STUB'].eval_expr_long
    eval_expr_long.restype = ctypes.c_char
    eval_expr_long.argtypes = [ctypes.POINTER(uval_t), ea_t, ctypes.c_char_p, ctypes.POINTER(qstring)]
    eval_idc_expr = _libraries['FIXME_STUB'].eval_idc_expr
    eval_idc_expr.restype = ctypes.c_char
    eval_idc_expr.argtypes = [ctypes.POINTER(struct_idc_value_t), ea_t, ctypes.c_char_p, ctypes.POINTER(qstring)]
    eval_idc_snippet = _libraries['FIXME_STUB'].eval_idc_snippet
    eval_idc_snippet.restype = ctypes.c_char
    eval_idc_snippet.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p, ctypes.POINTER(qstring), ctypes.POINTER(struct_idc_resolver_t)]
    ewrite = _libraries['FIXME_STUB'].ewrite
    ewrite.restype = None
    ewrite.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(None), size_t]
    exec_idc_script = _libraries['FIXME_STUB'].exec_idc_script
    exec_idc_script.restype = ctypes.c_char
    exec_idc_script.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p, ctypes.c_char_p, struct_idc_value_t * 0, size_t, ctypes.POINTER(qstring)]
    exec_system_script = _libraries['FIXME_STUB'].exec_system_script
    exec_system_script.restype = ctypes.c_char
    exec_system_script.argtypes = [ctypes.c_char_p, ctypes.c_char]
    execute_sync = _libraries['FIXME_STUB'].execute_sync
    execute_sync.restype = ctypes.c_int32
    execute_sync.argtypes = [ctypes.POINTER(struct_exec_request_t), ctypes.c_int32]
    execute_ui_requests = _libraries['FIXME_STUB'].execute_ui_requests
    execute_ui_requests.restype = ctypes.c_int32
    execute_ui_requests.argtypes = [ctypes.POINTER(struct_ui_request_t)]
    exist_bpt = _libraries['FIXME_STUB'].exist_bpt
    exist_bpt.restype = ctypes.c_char
    exist_bpt.argtypes = [ea_t]
    exists_fixup = _libraries['FIXME_STUB'].exists_fixup
    exists_fixup.restype = ctypes.c_char
    exists_fixup.argtypes = [ea_t]
    exit = _libraries['FIXME_STUB'].exit
    exit.restype = None
    exit.argtypes = [ctypes.c_int32]
    exit_process = _libraries['FIXME_STUB'].exit_process
    exit_process.restype = ctypes.c_char
    exit_process.argtypes = []
    exp = _libraries['FIXME_STUB'].exp
    exp.restype = ctypes.c_double
    exp.argtypes = [ctypes.c_double]
    exp2 = _libraries['FIXME_STUB'].exp2
    exp2.restype = ctypes.c_double
    exp2.argtypes = [ctypes.c_double]
    exp2f = _libraries['FIXME_STUB'].exp2f
    exp2f.restype = ctypes.c_float
    exp2f.argtypes = [ctypes.c_float]
    exp2l = _libraries['FIXME_STUB'].exp2l
    exp2l.restype = ctypes.c_double
    exp2l.argtypes = [ctypes.c_double]
    expand_argv = _libraries['FIXME_STUB'].expand_argv
    expand_argv.restype = ctypes.POINTER(ctypes.c_char_p)
    expand_argv.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_int32, ctypes.c_char_p * 0]
    expand_struc = _libraries['FIXME_STUB'].expand_struc
    expand_struc.restype = ctypes.c_char
    expand_struc.argtypes = [ctypes.POINTER(struct_struc_t), ea_t, adiff_t, ctypes.c_char]
    expf = _libraries['FIXME_STUB'].expf
    expf.restype = ctypes.c_float
    expf.argtypes = [ctypes.c_float]
    expl = _libraries['FIXME_STUB'].expl
    expl.restype = ctypes.c_double
    expl.argtypes = [ctypes.c_double]
    expm1 = _libraries['FIXME_STUB'].expm1
    expm1.restype = ctypes.c_double
    expm1.argtypes = [ctypes.c_double]
    expm1f = _libraries['FIXME_STUB'].expm1f
    expm1f.restype = ctypes.c_float
    expm1f.argtypes = [ctypes.c_float]
    expm1l = _libraries['FIXME_STUB'].expm1l
    expm1l.restype = ctypes.c_double
    expm1l.argtypes = [ctypes.c_double]
    extend_sign = _libraries['FIXME_STUB'].extend_sign
    extend_sign.restype = uint64
    extend_sign.argtypes = [uint64, ctypes.c_int32, ctypes.c_char]
    extract_argloc = _libraries['FIXME_STUB'].extract_argloc
    extract_argloc.restype = ctypes.c_char
    extract_argloc.argtypes = [ctypes.POINTER(struct_argloc_t), ctypes.POINTER(ctypes.POINTER(type_t)), ctypes.c_char]
    extract_module_from_archive = _libraries['FIXME_STUB'].extract_module_from_archive
    extract_module_from_archive.restype = ctypes.c_char
    extract_module_from_archive.argtypes = [ctypes.c_char_p, size_t, ctypes.POINTER(ctypes.c_char_p), ctypes.c_char]
    extract_name = _libraries['FIXME_STUB'].extract_name
    extract_name.restype = ssize_t
    extract_name.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.c_int32]
    f_any = _libraries['FIXME_STUB'].f_any
    f_any.restype = ctypes.c_char
    f_any.argtypes = [flags_t, ctypes.POINTER(None)]
    f_has_cmt = _libraries['FIXME_STUB'].f_has_cmt
    f_has_cmt.restype = ctypes.c_char
    f_has_cmt.argtypes = [flags_t, ctypes.POINTER(None)]
    f_has_dummy_name = _libraries['FIXME_STUB'].f_has_dummy_name
    f_has_dummy_name.restype = ctypes.c_char
    f_has_dummy_name.argtypes = [flags_t, ctypes.POINTER(None)]
    f_has_extra_cmts = _libraries['FIXME_STUB'].f_has_extra_cmts
    f_has_extra_cmts.restype = ctypes.c_char
    f_has_extra_cmts.argtypes = [flags_t, ctypes.POINTER(None)]
    f_has_name = _libraries['FIXME_STUB'].f_has_name
    f_has_name.restype = ctypes.c_char
    f_has_name.argtypes = [flags_t, ctypes.POINTER(None)]
    f_has_user_name = _libraries['FIXME_STUB'].f_has_user_name
    f_has_user_name.restype = ctypes.c_char
    f_has_user_name.argtypes = [flags_t, ctypes.POINTER(None)]
    f_has_xref = _libraries['FIXME_STUB'].f_has_xref
    f_has_xref.restype = ctypes.c_char
    f_has_xref.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_align = _libraries['FIXME_STUB'].f_is_align
    f_is_align.restype = ctypes.c_char
    f_is_align.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_byte = _libraries['FIXME_STUB'].f_is_byte
    f_is_byte.restype = ctypes.c_char
    f_is_byte.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_code = _libraries['FIXME_STUB'].f_is_code
    f_is_code.restype = ctypes.c_char
    f_is_code.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_custom = _libraries['FIXME_STUB'].f_is_custom
    f_is_custom.restype = ctypes.c_char
    f_is_custom.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_data = _libraries['FIXME_STUB'].f_is_data
    f_is_data.restype = ctypes.c_char
    f_is_data.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_double = _libraries['FIXME_STUB'].f_is_double
    f_is_double.restype = ctypes.c_char
    f_is_double.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_dword = _libraries['FIXME_STUB'].f_is_dword
    f_is_dword.restype = ctypes.c_char
    f_is_dword.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_float = _libraries['FIXME_STUB'].f_is_float
    f_is_float.restype = ctypes.c_char
    f_is_float.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_head = _libraries['FIXME_STUB'].f_is_head
    f_is_head.restype = ctypes.c_char
    f_is_head.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_not_tail = _libraries['FIXME_STUB'].f_is_not_tail
    f_is_not_tail.restype = ctypes.c_char
    f_is_not_tail.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_oword = _libraries['FIXME_STUB'].f_is_oword
    f_is_oword.restype = ctypes.c_char
    f_is_oword.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_pack_real = _libraries['FIXME_STUB'].f_is_pack_real
    f_is_pack_real.restype = ctypes.c_char
    f_is_pack_real.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_qword = _libraries['FIXME_STUB'].f_is_qword
    f_is_qword.restype = ctypes.c_char
    f_is_qword.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_strlit = _libraries['FIXME_STUB'].f_is_strlit
    f_is_strlit.restype = ctypes.c_char
    f_is_strlit.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_struct = _libraries['FIXME_STUB'].f_is_struct
    f_is_struct.restype = ctypes.c_char
    f_is_struct.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_tail = _libraries['FIXME_STUB'].f_is_tail
    f_is_tail.restype = ctypes.c_char
    f_is_tail.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_tbyte = _libraries['FIXME_STUB'].f_is_tbyte
    f_is_tbyte.restype = ctypes.c_char
    f_is_tbyte.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_word = _libraries['FIXME_STUB'].f_is_word
    f_is_word.restype = ctypes.c_char
    f_is_word.argtypes = [flags_t, ctypes.POINTER(None)]
    f_is_yword = _libraries['FIXME_STUB'].f_is_yword
    f_is_yword.restype = ctypes.c_char
    f_is_yword.argtypes = [flags_t, ctypes.POINTER(None)]
    fabs = _libraries['FIXME_STUB'].fabs
    fabs.restype = ctypes.c_double
    fabs.argtypes = [ctypes.c_double]
    fabsf = _libraries['FIXME_STUB'].fabsf
    fabsf.restype = ctypes.c_float
    fabsf.argtypes = [ctypes.c_float]
    fabsl = _libraries['FIXME_STUB'].fabsl
    fabsl.restype = ctypes.c_double
    fabsl.argtypes = [ctypes.c_double]
    fc_calc_block_type = _libraries['FIXME_STUB'].fc_calc_block_type
    fc_calc_block_type.restype = fc_block_type_t
    fc_calc_block_type.argtypes = [ctypes.POINTER(struct_qflow_chart_t), size_t]
    fclose = _libraries['FIXME_STUB'].fclose
    fclose.restype = ctypes.c_int32
    fclose.argtypes = [ctypes.POINTER(FILE)]
    fcloseall = _libraries['FIXME_STUB'].fcloseall
    fcloseall.restype = ctypes.c_int32
    fcloseall.argtypes = []
    fcvt = _libraries['FIXME_STUB'].fcvt
    fcvt.restype = ctypes.c_char_p
    fcvt.argtypes = [ctypes.c_double, ctypes.c_int32, ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32)]
    fdim = _libraries['FIXME_STUB'].fdim
    fdim.restype = ctypes.c_double
    fdim.argtypes = [ctypes.c_double, ctypes.c_double]
    fdimf = _libraries['FIXME_STUB'].fdimf
    fdimf.restype = ctypes.c_float
    fdimf.argtypes = [ctypes.c_float, ctypes.c_float]
    fdiml = _libraries['FIXME_STUB'].fdiml
    fdiml.restype = ctypes.c_double
    fdiml.argtypes = [ctypes.c_double, ctypes.c_double]
    fdopen = _libraries['FIXME_STUB'].fdopen
    fdopen.restype = ctypes.POINTER(FILE)
    fdopen.argtypes = [ctypes.c_int32, ctypes.c_char_p]
    feof = _libraries['FIXME_STUB'].feof
    feof.restype = ctypes.c_int32
    feof.argtypes = [ctypes.POINTER(FILE)]
    ferror = _libraries['FIXME_STUB'].ferror
    ferror.restype = ctypes.c_int32
    ferror.argtypes = [ctypes.POINTER(FILE)]
    fflush = _libraries['FIXME_STUB'].fflush
    fflush.restype = ctypes.c_int32
    fflush.argtypes = [ctypes.POINTER(FILE)]
    fgetc = _libraries['FIXME_STUB'].fgetc
    fgetc.restype = ctypes.c_int32
    fgetc.argtypes = [ctypes.POINTER(FILE)]
    fgetchar = _libraries['FIXME_STUB'].fgetchar
    fgetchar.restype = ctypes.c_int32
    fgetchar.argtypes = []
    fgetpos = _libraries['FIXME_STUB'].fgetpos
    fgetpos.restype = ctypes.c_int32
    fgetpos.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(fpos_t)]
    fgets = _libraries['FIXME_STUB'].fgets
    fgets.restype = ctypes.c_char_p
    fgets.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.POINTER(FILE)]
    fgetwc = _libraries['FIXME_STUB'].fgetwc
    fgetwc.restype = wint_t
    fgetwc.argtypes = [ctypes.POINTER(FILE)]
    fgetws = _libraries['FIXME_STUB'].fgetws
    fgetws.restype = ctypes.POINTER(ctypes.c_int16)
    fgetws.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int32, ctypes.POINTER(FILE)]
    file2base = _libraries['FIXME_STUB'].file2base
    file2base.restype = ctypes.c_int32
    file2base.argtypes = [ctypes.POINTER(struct_linput_t), int64, ea_t, ea_t, ctypes.c_int32]
    filelength = _libraries['FIXME_STUB'].filelength
    filelength.restype = ctypes.c_int32
    filelength.argtypes = [ctypes.c_int32]
    fileno = _libraries['FIXME_STUB'].fileno
    fileno.restype = ctypes.c_int32
    fileno.argtypes = [ctypes.POINTER(FILE)]
    find_binary = _libraries['FIXME_STUB'].find_binary
    find_binary.restype = ea_t
    find_binary.argtypes = [ea_t, ea_t, ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32]
    find_bpt = _libraries['FIXME_STUB'].find_bpt
    find_bpt.restype = ctypes.c_char
    find_bpt.argtypes = [ctypes.POINTER(struct_bpt_location_t), ctypes.POINTER(struct_bpt_t)]
    find_byte = _libraries['FIXME_STUB'].find_byte
    find_byte.restype = ea_t
    find_byte.argtypes = [ea_t, asize_t, uchar, ctypes.c_int32]
    find_byter = _libraries['FIXME_STUB'].find_byter
    find_byter.restype = ea_t
    find_byter.argtypes = [ea_t, asize_t, uchar, ctypes.c_int32]
    find_code = _libraries['FIXME_STUB'].find_code
    find_code.restype = ea_t
    find_code.argtypes = [ea_t, ctypes.c_int32]
    find_custom_data_format = _libraries['FIXME_STUB'].find_custom_data_format
    find_custom_data_format.restype = ctypes.c_int32
    find_custom_data_format.argtypes = [ctypes.c_char_p]
    find_custom_data_type = _libraries['FIXME_STUB'].find_custom_data_type
    find_custom_data_type.restype = ctypes.c_int32
    find_custom_data_type.argtypes = [ctypes.c_char_p]
    find_custom_fixup = _libraries['FIXME_STUB'].find_custom_fixup
    find_custom_fixup.restype = fixup_type_t
    find_custom_fixup.argtypes = [ctypes.c_char_p]
    find_custom_refinfo = _libraries['FIXME_STUB'].find_custom_refinfo
    find_custom_refinfo.restype = ctypes.c_int32
    find_custom_refinfo.argtypes = [ctypes.c_char_p]
    find_data = _libraries['FIXME_STUB'].find_data
    find_data.restype = ea_t
    find_data.argtypes = [ea_t, ctypes.c_int32]
    find_defined = _libraries['FIXME_STUB'].find_defined
    find_defined.restype = ea_t
    find_defined.argtypes = [ea_t, ctypes.c_int32]
    find_defjump_from_table = _libraries['FIXME_STUB'].find_defjump_from_table
    find_defjump_from_table.restype = ea_t
    find_defjump_from_table.argtypes = [ea_t, ctypes.POINTER(struct_switch_info_t)]
    find_error = _libraries['FIXME_STUB'].find_error
    find_error.restype = ea_t
    find_error.argtypes = [ea_t, ctypes.c_int32, ctypes.POINTER(ctypes.c_int32)]
    find_extlang = _libraries['FIXME_STUB'].find_extlang
    find_extlang.restype = ctypes.POINTER(None)
    find_extlang.argtypes = [ctypes.POINTER(None), find_extlang_kind_t]
    find_extlang_by_ext = _libraries['FIXME_STUB'].find_extlang_by_ext
    find_extlang_by_ext.restype = extlang_object_t
    find_extlang_by_ext.argtypes = [ctypes.c_char_p]
    find_extlang_by_index = _libraries['FIXME_STUB'].find_extlang_by_index
    find_extlang_by_index.restype = extlang_object_t
    find_extlang_by_index.argtypes = [size_t]
    find_extlang_by_name = _libraries['FIXME_STUB'].find_extlang_by_name
    find_extlang_by_name.restype = extlang_object_t
    find_extlang_by_name.argtypes = [ctypes.c_char_p]
    find_free_selector = _libraries['FIXME_STUB'].find_free_selector
    find_free_selector.restype = sel_t
    find_free_selector.argtypes = []
    find_func_bounds = _libraries['FIXME_STUB'].find_func_bounds
    find_func_bounds.restype = ctypes.c_int32
    find_func_bounds.argtypes = [ctypes.POINTER(struct_func_t), ctypes.c_int32]
    find_idc_class = _libraries['FIXME_STUB'].find_idc_class
    find_idc_class.restype = ctypes.POINTER(struct_idc_class_t)
    find_idc_class.argtypes = [ctypes.c_char_p]
    find_idc_func = _libraries['FIXME_STUB'].find_idc_func
    find_idc_func.restype = ctypes.c_char
    find_idc_func.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.c_int32]
    find_idc_gvar = _libraries['FIXME_STUB'].find_idc_gvar
    find_idc_gvar.restype = ctypes.POINTER(struct_idc_value_t)
    find_idc_gvar.argtypes = [ctypes.c_char_p]
    find_imm = _libraries['FIXME_STUB'].find_imm
    find_imm.restype = ea_t
    find_imm.argtypes = [ea_t, ctypes.c_int32, uval_t, ctypes.POINTER(ctypes.c_int32)]
    find_ioport = _libraries['FIXME_STUB'].find_ioport
    find_ioport.restype = ctypes.POINTER(struct_ioport_t)
    find_ioport.argtypes = [ctypes.POINTER(ioports_t), ea_t]
    find_ioport_bit = _libraries['FIXME_STUB'].find_ioport_bit
    find_ioport_bit.restype = ctypes.POINTER(struct_ioport_bit_t)
    find_ioport_bit.argtypes = [ctypes.POINTER(ioports_t), ea_t, size_t]
    find_jtable_size = _libraries['FIXME_STUB'].find_jtable_size
    find_jtable_size.restype = ctypes.c_char
    find_jtable_size.argtypes = [ctypes.POINTER(struct_switch_info_t)]
    find_not_func = _libraries['FIXME_STUB'].find_not_func
    find_not_func.restype = ea_t
    find_not_func.argtypes = [ea_t, ctypes.c_int32]
    find_notype = _libraries['FIXME_STUB'].find_notype
    find_notype.restype = ea_t
    find_notype.argtypes = [ea_t, ctypes.c_int32, ctypes.POINTER(ctypes.c_int32)]
    find_plugin = _libraries['FIXME_STUB'].find_plugin
    find_plugin.restype = ctypes.POINTER(struct_plugin_t)
    find_plugin.argtypes = [ctypes.c_char_p, ctypes.c_char]
    find_reg_access = _libraries['FIXME_STUB'].find_reg_access
    find_reg_access.restype = ea_t
    find_reg_access.argtypes = [ctypes.POINTER(struct_reg_access_t), ea_t, ea_t, ctypes.c_char_p, ctypes.c_int32]
    find_regvar = _libraries['FIXME_STUB'].find_regvar
    find_regvar.restype = ctypes.POINTER(struct_regvar_t)
    find_regvar.argtypes = [ctypes.POINTER(struct_func_t), ea_t, ctypes.c_char_p]
    find_selector = _libraries['FIXME_STUB'].find_selector
    find_selector.restype = sel_t
    find_selector.argtypes = [ea_t]
    find_suspop = _libraries['FIXME_STUB'].find_suspop
    find_suspop.restype = ea_t
    find_suspop.argtypes = [ea_t, ctypes.c_int32, ctypes.POINTER(ctypes.c_int32)]
    find_syseh = _libraries['FIXME_STUB'].find_syseh
    find_syseh.restype = ea_t
    find_syseh.argtypes = [ea_t]
    find_text = _libraries['FIXME_STUB'].find_text
    find_text.restype = ea_t
    find_text.argtypes = [ea_t, ctypes.c_int32, ctypes.c_int32, ctypes.c_char_p, ctypes.c_int32]
    find_tinfo_udt_member = _libraries['FIXME_STUB'].find_tinfo_udt_member
    find_tinfo_udt_member.restype = ctypes.c_int32
    find_tinfo_udt_member.argtypes = [ctypes.POINTER(struct_udt_member_t), uint32, ctypes.c_int32]
    find_unknown = _libraries['FIXME_STUB'].find_unknown
    find_unknown.restype = ea_t
    find_unknown.argtypes = [ea_t, ctypes.c_int32]
    find_widget = _libraries['FIXME_STUB'].find_widget
    find_widget.restype = ctypes.POINTER(struct_TWidget)
    find_widget.argtypes = [ctypes.c_char_p]
    first_idcv_attr = _libraries['FIXME_STUB'].first_idcv_attr
    first_idcv_attr.restype = ctypes.c_char_p
    first_idcv_attr.argtypes = [ctypes.POINTER(struct_idc_value_t)]
    first_named_type = _libraries['FIXME_STUB'].first_named_type
    first_named_type.restype = ctypes.c_char_p
    first_named_type.argtypes = [ctypes.POINTER(struct_til_t), ctypes.c_int32]
    float_flag = _libraries['FIXME_STUB'].float_flag
    float_flag.restype = flags_t
    float_flag.argtypes = []
    floor = _libraries['FIXME_STUB'].floor
    floor.restype = ctypes.c_double
    floor.argtypes = [ctypes.c_double]
    floorf = _libraries['FIXME_STUB'].floorf
    floorf.restype = ctypes.c_float
    floorf.argtypes = [ctypes.c_float]
    floorl = _libraries['FIXME_STUB'].floorl
    floorl.restype = ctypes.c_double
    floorl.argtypes = [ctypes.c_double]
    flt_flag = _libraries['FIXME_STUB'].flt_flag
    flt_flag.restype = flags_t
    flt_flag.argtypes = []
    flush_buffers = _libraries['FIXME_STUB'].flush_buffers
    flush_buffers.restype = ctypes.c_int32
    flush_buffers.argtypes = []
    flushall = _libraries['FIXME_STUB'].flushall
    flushall.restype = ctypes.c_int32
    flushall.argtypes = []
    fma = _libraries['FIXME_STUB'].fma
    fma.restype = ctypes.c_double
    fma.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double]
    fmaf = _libraries['FIXME_STUB'].fmaf
    fmaf.restype = ctypes.c_float
    fmaf.argtypes = [ctypes.c_float, ctypes.c_float, ctypes.c_float]
    fmal = _libraries['FIXME_STUB'].fmal
    fmal.restype = ctypes.c_double
    fmal.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double]
    fmax = _libraries['FIXME_STUB'].fmax
    fmax.restype = ctypes.c_double
    fmax.argtypes = [ctypes.c_double, ctypes.c_double]
    fmaxf = _libraries['FIXME_STUB'].fmaxf
    fmaxf.restype = ctypes.c_float
    fmaxf.argtypes = [ctypes.c_float, ctypes.c_float]
    fmaxl = _libraries['FIXME_STUB'].fmaxl
    fmaxl.restype = ctypes.c_double
    fmaxl.argtypes = [ctypes.c_double, ctypes.c_double]
    fmin = _libraries['FIXME_STUB'].fmin
    fmin.restype = ctypes.c_double
    fmin.argtypes = [ctypes.c_double, ctypes.c_double]
    fminf = _libraries['FIXME_STUB'].fminf
    fminf.restype = ctypes.c_float
    fminf.argtypes = [ctypes.c_float, ctypes.c_float]
    fminl = _libraries['FIXME_STUB'].fminl
    fminl.restype = ctypes.c_double
    fminl.argtypes = [ctypes.c_double, ctypes.c_double]
    fmod = _libraries['FIXME_STUB'].fmod
    fmod.restype = ctypes.c_double
    fmod.argtypes = [ctypes.c_double, ctypes.c_double]
    fmodf = _libraries['FIXME_STUB'].fmodf
    fmodf.restype = ctypes.c_float
    fmodf.argtypes = [ctypes.c_float, ctypes.c_float]
    fmodl = _libraries['FIXME_STUB'].fmodl
    fmodl.restype = ctypes.c_double
    fmodl.argtypes = [ctypes.c_double, ctypes.c_double]
    fopen = _libraries['FIXME_STUB'].fopen
    fopen.restype = ctypes.POINTER(FILE)
    fopen.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    fopenA = _libraries['FIXME_STUB'].fopenA
    fopenA.restype = ctypes.POINTER(FILE)
    fopenA.argtypes = [ctypes.c_char_p]
    fopenM = _libraries['FIXME_STUB'].fopenM
    fopenM.restype = ctypes.POINTER(FILE)
    fopenM.argtypes = [ctypes.c_char_p]
    fopenRB = _libraries['FIXME_STUB'].fopenRB
    fopenRB.restype = ctypes.POINTER(FILE)
    fopenRB.argtypes = [ctypes.c_char_p]
    fopenRT = _libraries['FIXME_STUB'].fopenRT
    fopenRT.restype = ctypes.POINTER(FILE)
    fopenRT.argtypes = [ctypes.c_char_p]
    fopenWB = _libraries['FIXME_STUB'].fopenWB
    fopenWB.restype = ctypes.POINTER(FILE)
    fopenWB.argtypes = [ctypes.c_char_p]
    fopenWT = _libraries['FIXME_STUB'].fopenWT
    fopenWT.restype = ctypes.POINTER(FILE)
    fopenWT.argtypes = [ctypes.c_char_p]
    fopen_s = _libraries['FIXME_STUB'].fopen_s
    fopen_s.restype = errno_t
    fopen_s.argtypes = [ctypes.POINTER(ctypes.POINTER(FILE)), ctypes.c_char_p, ctypes.c_char_p]
    for_all_arglocs = _libraries['FIXME_STUB'].for_all_arglocs
    for_all_arglocs.restype = ctypes.c_int32
    for_all_arglocs.argtypes = [ctypes.POINTER(struct_aloc_visitor_t), ctypes.POINTER(struct_argloc_t), ctypes.c_int32, ctypes.c_int32]
    for_all_const_arglocs = _libraries['FIXME_STUB'].for_all_const_arglocs
    for_all_const_arglocs.restype = ctypes.c_int32
    for_all_const_arglocs.argtypes = [ctypes.POINTER(struct_const_aloc_visitor_t), ctypes.POINTER(struct_argloc_t), ctypes.c_int32, ctypes.c_int32]
    for_all_enum_members = _libraries['FIXME_STUB'].for_all_enum_members
    for_all_enum_members.restype = ctypes.c_int32
    for_all_enum_members.argtypes = [enum_t, ctypes.POINTER(struct_enum_member_visitor_t)]
    for_all_extlangs = _libraries['FIXME_STUB'].for_all_extlangs
    for_all_extlangs.restype = ssize_t
    for_all_extlangs.argtypes = [ctypes.POINTER(struct_extlang_visitor_t), ctypes.c_char]
    force_name = _libraries['FIXME_STUB'].force_name
    force_name.restype = ctypes.c_char
    force_name.argtypes = [ea_t, ctypes.c_char_p, ctypes.c_int32]
    forget_problem = _libraries['FIXME_STUB'].forget_problem
    forget_problem.restype = ctypes.c_char
    forget_problem.argtypes = [problist_id_t, ea_t]
    format_c_number = _libraries['FIXME_STUB'].format_c_number
    format_c_number.restype = size_t
    format_c_number.argtypes = [ctypes.c_char_p, size_t, struct_uint128, ctypes.c_int32, ctypes.c_int32]
    format_cdata = _libraries['FIXME_STUB'].format_cdata
    format_cdata.restype = ctypes.c_char
    format_cdata.argtypes = [ctypes.POINTER(qstrvec_t), ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_valstr_t), ctypes.POINTER(struct_format_data_info_t)]
    format_charlit = _libraries['FIXME_STUB'].format_charlit
    format_charlit.restype = ctypes.c_char
    format_charlit.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(ctypes.POINTER(uchar)), size_t, uint32, ctypes.c_int32]
    fpclassify = _libraries['FIXME_STUB'].fpclassify
    fpclassify.restype = ctypes.c_int32
    fpclassify.argtypes = [ctypes.c_double]
    fpreset = _libraries['FIXME_STUB'].fpreset
    fpreset.restype = None
    fpreset.argtypes = []
    fprintf = _libraries['FIXME_STUB'].fprintf
    fprintf.restype = ctypes.c_int32
    fprintf.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p]
    fprintf_s = _libraries['FIXME_STUB'].fprintf_s
    fprintf_s.restype = ctypes.c_int32
    fprintf_s.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p]
    fputc = _libraries['FIXME_STUB'].fputc
    fputc.restype = ctypes.c_int32
    fputc.argtypes = [ctypes.c_int32, ctypes.POINTER(FILE)]
    fputchar = _libraries['FIXME_STUB'].fputchar
    fputchar.restype = ctypes.c_int32
    fputchar.argtypes = [ctypes.c_int32]
    fputs = _libraries['FIXME_STUB'].fputs
    fputs.restype = ctypes.c_int32
    fputs.argtypes = [ctypes.c_char_p, ctypes.POINTER(FILE)]
    fputwc = _libraries['FIXME_STUB'].fputwc
    fputwc.restype = wint_t
    fputwc.argtypes = [ctypes.c_int16, ctypes.POINTER(FILE)]
    fputws = _libraries['FIXME_STUB'].fputws
    fputws.restype = ctypes.c_int32
    fputws.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(FILE)]
    frame_off_args = _libraries['FIXME_STUB'].frame_off_args
    frame_off_args.restype = ea_t
    frame_off_args.argtypes = [ctypes.POINTER(struct_func_t)]
    frame_off_lvars = _libraries['FIXME_STUB'].frame_off_lvars
    frame_off_lvars.restype = ea_t
    frame_off_lvars.argtypes = [ctypes.POINTER(struct_func_t)]
    frame_off_retaddr = _libraries['FIXME_STUB'].frame_off_retaddr
    frame_off_retaddr.restype = ea_t
    frame_off_retaddr.argtypes = [ctypes.POINTER(struct_func_t)]
    frame_off_savregs = _libraries['FIXME_STUB'].frame_off_savregs
    frame_off_savregs.restype = ea_t
    frame_off_savregs.argtypes = [ctypes.POINTER(struct_func_t)]
    fread = _libraries['FIXME_STUB'].fread
    fread.restype = size_t
    fread.argtypes = [ctypes.POINTER(None), size_t, size_t, ctypes.POINTER(FILE)]
    fread2bytes = _libraries['FIXME_STUB'].fread2bytes
    fread2bytes.restype = ctypes.c_int32
    fread2bytes.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(uint16), ctypes.c_char]
    fread4bytes = _libraries['FIXME_STUB'].fread4bytes
    fread4bytes.restype = ctypes.c_int32
    fread4bytes.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(uint32), ctypes.c_char]
    fread8bytes = _libraries['FIXME_STUB'].fread8bytes
    fread8bytes.restype = ctypes.c_int32
    fread8bytes.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ulonglong), ctypes.c_char]
    fread_s = _libraries['FIXME_STUB'].fread_s
    fread_s.restype = size_t
    fread_s.argtypes = [ctypes.POINTER(None), size_t, size_t, size_t, ctypes.POINTER(FILE)]
    freadbytes = _libraries['FIXME_STUB'].freadbytes
    freadbytes.restype = ctypes.c_int32
    freadbytes.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(None), ctypes.c_int32, ctypes.c_int32]
    free = _libraries['FIXME_STUB'].free
    free.restype = None
    free.argtypes = [ctypes.POINTER(None)]
    free_argv = _libraries['FIXME_STUB'].free_argv
    free_argv.restype = None
    free_argv.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_char_p)]
    free_chunk = _libraries['FIXME_STUB'].free_chunk
    free_chunk.restype = ea_t
    free_chunk.argtypes = [ea_t, asize_t, int32]
    free_custom_icon = _libraries['FIXME_STUB'].free_custom_icon
    free_custom_icon.restype = None
    free_custom_icon.argtypes = [ctypes.c_int32]
    free_debug_event = _libraries['FIXME_STUB'].free_debug_event
    free_debug_event.restype = None
    free_debug_event.argtypes = [ctypes.POINTER(struct_debug_event_t)]
    free_dll = _libraries['FIXME_STUB'].free_dll
    free_dll.restype = None
    free_dll.argtypes = [ctypes.POINTER(struct_idadll_t)]
    free_idcv = _libraries['FIXME_STUB'].free_idcv
    free_idcv.restype = None
    free_idcv.argtypes = [ctypes.POINTER(struct_idc_value_t)]
    free_loaders_list = _libraries['FIXME_STUB'].free_loaders_list
    free_loaders_list.restype = None
    free_loaders_list.argtypes = [ctypes.POINTER(struct_load_info_t)]
    free_regarg = _libraries['FIXME_STUB'].free_regarg
    free_regarg.restype = None
    free_regarg.argtypes = [ctypes.POINTER(struct_regarg_t)]
    free_regvar = _libraries['FIXME_STUB'].free_regvar
    free_regvar.restype = None
    free_regvar.argtypes = [ctypes.POINTER(struct_regvar_t)]
    free_til = _libraries['FIXME_STUB'].free_til
    free_til.restype = None
    free_til.argtypes = [ctypes.POINTER(struct_til_t)]
    freopen = _libraries['FIXME_STUB'].freopen
    freopen.restype = ctypes.POINTER(FILE)
    freopen.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(FILE)]
    freopen_s = _libraries['FIXME_STUB'].freopen_s
    freopen_s.restype = errno_t
    freopen_s.argtypes = [ctypes.POINTER(ctypes.POINTER(FILE)), ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(FILE)]
    frexp = _libraries['FIXME_STUB'].frexp
    frexp.restype = ctypes.c_double
    frexp.argtypes = [ctypes.c_double, ctypes.POINTER(ctypes.c_int32)]
    frexpf = _libraries['FIXME_STUB'].frexpf
    frexpf.restype = ctypes.c_float
    frexpf.argtypes = [ctypes.c_float, ctypes.POINTER(ctypes.c_int32)]
    frexpl = _libraries['FIXME_STUB'].frexpl
    frexpl.restype = ctypes.c_double
    frexpl.argtypes = [ctypes.c_double, ctypes.POINTER(ctypes.c_int32)]
    fscanf = _libraries['FIXME_STUB'].fscanf
    fscanf.restype = ctypes.c_int32
    fscanf.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p]
    fscanf_s = _libraries['FIXME_STUB'].fscanf_s
    fscanf_s.restype = ctypes.c_int32
    fscanf_s.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p]
    fseek = _libraries['FIXME_STUB'].fseek
    fseek.restype = ctypes.c_int32
    fseek.argtypes = [ctypes.POINTER(FILE), ctypes.c_int32, ctypes.c_int32]
    fsetpos = _libraries['FIXME_STUB'].fsetpos
    fsetpos.restype = ctypes.c_int32
    fsetpos.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(fpos_t)]
    ftell = _libraries['FIXME_STUB'].ftell
    ftell.restype = ctypes.c_int32
    ftell.argtypes = [ctypes.POINTER(FILE)]
    func_contains = _libraries['FIXME_STUB'].func_contains
    func_contains.restype = ctypes.c_char
    func_contains.argtypes = [ctypes.POINTER(struct_func_t), ea_t]
    func_does_return = _libraries['FIXME_STUB'].func_does_return
    func_does_return.restype = ctypes.c_char
    func_does_return.argtypes = [ea_t]
    func_has_stkframe_hole = _libraries['FIXME_STUB'].func_has_stkframe_hole
    func_has_stkframe_hole.restype = ctypes.c_char
    func_has_stkframe_hole.argtypes = [ea_t, ctypes.POINTER(struct_func_type_data_t)]
    func_item_iterator_decode_preceding_insn = _libraries['FIXME_STUB'].func_item_iterator_decode_preceding_insn
    func_item_iterator_decode_preceding_insn.restype = ctypes.c_char
    func_item_iterator_decode_preceding_insn.argtypes = [ctypes.POINTER(struct_func_item_iterator_t), ctypes.POINTER(eavec_t), ctypes.c_char_p, ctypes.POINTER(struct_insn_t)]
    func_item_iterator_decode_prev_insn = _libraries['FIXME_STUB'].func_item_iterator_decode_prev_insn
    func_item_iterator_decode_prev_insn.restype = ctypes.c_char
    func_item_iterator_decode_prev_insn.argtypes = [ctypes.POINTER(struct_func_item_iterator_t), ctypes.POINTER(struct_insn_t)]
    func_item_iterator_next = _libraries['FIXME_STUB'].func_item_iterator_next
    func_item_iterator_next.restype = ctypes.c_char
    func_item_iterator_next.argtypes = [ctypes.POINTER(struct_func_item_iterator_t), testf_t, ctypes.POINTER(None)]
    func_item_iterator_prev = _libraries['FIXME_STUB'].func_item_iterator_prev
    func_item_iterator_prev.restype = ctypes.c_char
    func_item_iterator_prev.argtypes = [ctypes.POINTER(struct_func_item_iterator_t), testf_t, ctypes.POINTER(None)]
    func_item_iterator_succ = _libraries['FIXME_STUB'].func_item_iterator_succ
    func_item_iterator_succ.restype = ctypes.c_char
    func_item_iterator_succ.argtypes = [ctypes.POINTER(struct_func_item_iterator_t), testf_t, ctypes.POINTER(None)]
    func_parent_iterator_set = _libraries['FIXME_STUB'].func_parent_iterator_set
    func_parent_iterator_set.restype = ctypes.c_char
    func_parent_iterator_set.argtypes = [ctypes.POINTER(struct_func_parent_iterator_t), ctypes.POINTER(struct_func_t)]
    func_tail_iterator_set = _libraries['FIXME_STUB'].func_tail_iterator_set
    func_tail_iterator_set.restype = ctypes.c_char
    func_tail_iterator_set.argtypes = [ctypes.POINTER(struct_func_tail_iterator_t), ctypes.POINTER(struct_func_t), ea_t]
    func_tail_iterator_set_ea = _libraries['FIXME_STUB'].func_tail_iterator_set_ea
    func_tail_iterator_set_ea.restype = ctypes.c_char
    func_tail_iterator_set_ea.argtypes = [ctypes.POINTER(struct_func_tail_iterator_t), ea_t]
    fwide = _libraries['FIXME_STUB'].fwide
    fwide.restype = ctypes.c_int32
    fwide.argtypes = [ctypes.POINTER(FILE), ctypes.c_int32]
    fwprintf = _libraries['FIXME_STUB'].fwprintf
    fwprintf.restype = ctypes.c_int32
    fwprintf.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16)]
    fwprintf_s = _libraries['FIXME_STUB'].fwprintf_s
    fwprintf_s.restype = ctypes.c_int32
    fwprintf_s.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16)]
    fwrite = _libraries['FIXME_STUB'].fwrite
    fwrite.restype = size_t
    fwrite.argtypes = [ctypes.POINTER(None), size_t, size_t, ctypes.POINTER(FILE)]
    fwrite2bytes = _libraries['FIXME_STUB'].fwrite2bytes
    fwrite2bytes.restype = ctypes.c_int32
    fwrite2bytes.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(uint16), ctypes.c_char]
    fwrite4bytes = _libraries['FIXME_STUB'].fwrite4bytes
    fwrite4bytes.restype = ctypes.c_int32
    fwrite4bytes.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(uint32), ctypes.c_char]
    fwrite8bytes = _libraries['FIXME_STUB'].fwrite8bytes
    fwrite8bytes.restype = ctypes.c_int32
    fwrite8bytes.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ulonglong), ctypes.c_char]
    fwritebytes = _libraries['FIXME_STUB'].fwritebytes
    fwritebytes.restype = ctypes.c_int32
    fwritebytes.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(None), ctypes.c_int32, ctypes.c_int32]
    fwscanf = _libraries['FIXME_STUB'].fwscanf
    fwscanf.restype = ctypes.c_int32
    fwscanf.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16)]
    fwscanf_s = _libraries['FIXME_STUB'].fwscanf_s
    fwscanf_s.restype = ctypes.c_int32
    fwscanf_s.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16)]
    gcc_layout = _libraries['FIXME_STUB'].gcc_layout
    gcc_layout.restype = ctypes.c_char
    gcc_layout.argtypes = []
    gcvt = _libraries['FIXME_STUB'].gcvt
    gcvt.restype = ctypes.c_char_p
    gcvt.argtypes = [ctypes.c_double, ctypes.c_int32, ctypes.c_char_p]
    gen_complex_call_chart = _libraries['FIXME_STUB'].gen_complex_call_chart
    gen_complex_call_chart.restype = ctypes.c_char
    gen_complex_call_chart.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ea_t, ea_t, ctypes.c_int32, int32]
    gen_decorate_name = _libraries['FIXME_STUB'].gen_decorate_name
    gen_decorate_name.restype = ctypes.c_char
    gen_decorate_name.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.c_char, cm_t, ctypes.POINTER(struct_tinfo_t)]
    gen_disasm_text = _libraries['FIXME_STUB'].gen_disasm_text
    gen_disasm_text.restype = None
    gen_disasm_text.argtypes = [ctypes.POINTER(text_t), ea_t, ea_t, ctypes.c_char]
    gen_exe_file = _libraries['FIXME_STUB'].gen_exe_file
    gen_exe_file.restype = ctypes.c_int32
    gen_exe_file.argtypes = [ctypes.POINTER(FILE)]
    gen_file = _libraries['FIXME_STUB'].gen_file
    gen_file.restype = ctypes.c_int32
    gen_file.argtypes = [ofile_type_t, ctypes.POINTER(FILE), ea_t, ea_t, ctypes.c_int32]
    gen_fix_fixups = _libraries['FIXME_STUB'].gen_fix_fixups
    gen_fix_fixups.restype = None
    gen_fix_fixups.argtypes = [ea_t, ea_t, asize_t]
    gen_flow_graph = _libraries['FIXME_STUB'].gen_flow_graph
    gen_flow_graph.restype = ctypes.c_char
    gen_flow_graph.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(struct_func_t), ea_t, ea_t, ctypes.c_int32]
    gen_gdl = _libraries['FIXME_STUB'].gen_gdl
    gen_gdl.restype = None
    gen_gdl.argtypes = [ctypes.POINTER(struct_gdl_graph_t), ctypes.c_char_p]
    gen_idb_event = _libraries['FIXME_STUB'].gen_idb_event
    gen_idb_event.restype = None
    gen_idb_event.argtypes = [idb_event__event_code_t]
    gen_rand_buf = _libraries['FIXME_STUB'].gen_rand_buf
    gen_rand_buf.restype = ctypes.c_char
    gen_rand_buf.argtypes = [ctypes.POINTER(None), size_t]
    gen_simple_call_chart = _libraries['FIXME_STUB'].gen_simple_call_chart
    gen_simple_call_chart.restype = ctypes.c_char
    gen_simple_call_chart.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32]
    gen_use_arg_tinfos = _libraries['FIXME_STUB'].gen_use_arg_tinfos
    gen_use_arg_tinfos.restype = None
    gen_use_arg_tinfos.argtypes = [ea_t, ctypes.POINTER(struct_func_type_data_t), ctypes.POINTER(funcargvec_t), set_op_tinfo_t, is_stkarg_load_t, has_delay_slot_t]
    gen_use_arg_tinfos2 = _libraries['FIXME_STUB'].gen_use_arg_tinfos2
    gen_use_arg_tinfos2.restype = None
    gen_use_arg_tinfos2.argtypes = [ctypes.POINTER(struct_argtinfo_helper_t), ea_t, ctypes.POINTER(struct_func_type_data_t), ctypes.POINTER(funcargvec_t)]
    generate_disasm_line = _libraries['FIXME_STUB'].generate_disasm_line
    generate_disasm_line.restype = ctypes.c_char
    generate_disasm_line.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.c_int32]
    generate_disassembly = _libraries['FIXME_STUB'].generate_disassembly
    generate_disassembly.restype = ctypes.c_int32
    generate_disassembly.argtypes = [ctypes.POINTER(qstrvec_t), ctypes.POINTER(ctypes.c_int32), ea_t, ctypes.c_int32, ctypes.c_char]
    get_16bit = _libraries['FIXME_STUB'].get_16bit
    get_16bit.restype = uint32
    get_16bit.argtypes = [ea_t]
    get_32bit = _libraries['FIXME_STUB'].get_32bit
    get_32bit.restype = uint32
    get_32bit.argtypes = [ea_t]
    get_64bit = _libraries['FIXME_STUB'].get_64bit
    get_64bit.restype = uint64
    get_64bit.argtypes = [ea_t]
    get_8bit = _libraries['FIXME_STUB'].get_8bit
    get_8bit.restype = uchar
    get_8bit.argtypes = [ctypes.POINTER(ea_t), ctypes.POINTER(uint32), ctypes.POINTER(ctypes.c_int32)]
    get_abi_name = _libraries['FIXME_STUB'].get_abi_name
    get_abi_name.restype = ssize_t
    get_abi_name.argtypes = [ctypes.POINTER(qstring)]
    get_absbase = _libraries['FIXME_STUB'].get_absbase
    get_absbase.restype = ea_t
    get_absbase.argtypes = [ea_t]
    get_action_checkable = _libraries['FIXME_STUB'].get_action_checkable
    get_action_checkable.restype = ctypes.c_char
    get_action_checkable.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    get_action_checked = _libraries['FIXME_STUB'].get_action_checked
    get_action_checked.restype = ctypes.c_char
    get_action_checked.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    get_action_icon = _libraries['FIXME_STUB'].get_action_icon
    get_action_icon.restype = ctypes.c_char
    get_action_icon.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_int32)]
    get_action_label = _libraries['FIXME_STUB'].get_action_label
    get_action_label.restype = ctypes.c_char
    get_action_label.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p]
    get_action_shortcut = _libraries['FIXME_STUB'].get_action_shortcut
    get_action_shortcut.restype = ctypes.c_char
    get_action_shortcut.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p]
    get_action_state = _libraries['FIXME_STUB'].get_action_state
    get_action_state.restype = ctypes.c_char
    get_action_state.argtypes = [ctypes.c_char_p, ctypes.POINTER(action_state_t)]
    get_action_tooltip = _libraries['FIXME_STUB'].get_action_tooltip
    get_action_tooltip.restype = ctypes.c_char
    get_action_tooltip.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p]
    get_action_visibility = _libraries['FIXME_STUB'].get_action_visibility
    get_action_visibility.restype = ctypes.c_char
    get_action_visibility.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    get_active_modal_widget = _libraries['FIXME_STUB'].get_active_modal_widget
    get_active_modal_widget.restype = ctypes.POINTER(struct_TWidget)
    get_active_modal_widget.argtypes = []
    get_addon_info = _libraries['FIXME_STUB'].get_addon_info
    get_addon_info.restype = ctypes.c_char
    get_addon_info.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_addon_info_t)]
    get_addon_info_idx = _libraries['FIXME_STUB'].get_addon_info_idx
    get_addon_info_idx.restype = ctypes.c_char
    get_addon_info_idx.argtypes = [ctypes.c_int32, ctypes.POINTER(struct_addon_info_t)]
    get_aflags = _libraries['FIXME_STUB'].get_aflags
    get_aflags.restype = aflags_t
    get_aflags.argtypes = [ea_t]
    get_alias_target = _libraries['FIXME_STUB'].get_alias_target
    get_alias_target.restype = uint32
    get_alias_target.argtypes = [ctypes.POINTER(struct_til_t), uint32]
    get_alignment = _libraries['FIXME_STUB'].get_alignment
    get_alignment.restype = uint32
    get_alignment.argtypes = [ea_t]
    get_archive_path = _libraries['FIXME_STUB'].get_archive_path
    get_archive_path.restype = ssize_t
    get_archive_path.argtypes = [ctypes.POINTER(qstring)]
    get_arg_addrs = _libraries['FIXME_STUB'].get_arg_addrs
    get_arg_addrs.restype = ctypes.c_char
    get_arg_addrs.argtypes = [ctypes.POINTER(eavec_t), ea_t]
    get_arg_align = _libraries['FIXME_STUB'].get_arg_align
    get_arg_align.restype = ctypes.c_int32
    get_arg_align.argtypes = [ctypes.POINTER(struct_tinfo_t), ctypes.c_int32, cm_t]
    get_array_parameters = _libraries['FIXME_STUB'].get_array_parameters
    get_array_parameters.restype = ssize_t
    get_array_parameters.argtypes = [ctypes.POINTER(struct_array_parameters_t), ea_t]
    get_ash = _libraries['FIXME_STUB'].get_ash
    get_ash.restype = ctypes.POINTER(struct_asm_t)
    get_ash.argtypes = []
    get_asm_inc_file = _libraries['FIXME_STUB'].get_asm_inc_file
    get_asm_inc_file.restype = ssize_t
    get_asm_inc_file.argtypes = [ctypes.POINTER(qstring)]
    get_auto_display = _libraries['FIXME_STUB'].get_auto_display
    get_auto_display.restype = ctypes.c_char
    get_auto_display.argtypes = [ctypes.POINTER(struct_auto_display_t)]
    get_auto_state = _libraries['FIXME_STUB'].get_auto_state
    get_auto_state.restype = atype_t
    get_auto_state.argtypes = []
    get_base_type = _libraries['FIXME_STUB'].get_base_type
    get_base_type.restype = type_t
    get_base_type.argtypes = [type_t]
    get_basic_file_type = _libraries['FIXME_STUB'].get_basic_file_type
    get_basic_file_type.restype = filetype_t
    get_basic_file_type.argtypes = [ctypes.POINTER(struct_linput_t)]
    get_bblk_trace_options = _libraries['FIXME_STUB'].get_bblk_trace_options
    get_bblk_trace_options.restype = ctypes.c_int32
    get_bblk_trace_options.argtypes = []
    get_best_fit_member = _libraries['FIXME_STUB'].get_best_fit_member
    get_best_fit_member.restype = ctypes.POINTER(struct_member_t)
    get_best_fit_member.argtypes = [ctypes.POINTER(struct_struc_t), asize_t]
    get_bmask_cmt = _libraries['FIXME_STUB'].get_bmask_cmt
    get_bmask_cmt.restype = ssize_t
    get_bmask_cmt.argtypes = [ctypes.POINTER(qstring), enum_t, bmask_t, ctypes.c_char]
    get_bmask_name = _libraries['FIXME_STUB'].get_bmask_name
    get_bmask_name.restype = ssize_t
    get_bmask_name.argtypes = [ctypes.POINTER(qstring), enum_t, bmask_t]
    get_bpt = _libraries['FIXME_STUB'].get_bpt
    get_bpt.restype = ctypes.c_char
    get_bpt.argtypes = [ea_t, ctypes.POINTER(struct_bpt_t)]
    get_bpt_group = _libraries['FIXME_STUB'].get_bpt_group
    get_bpt_group.restype = ctypes.c_char
    get_bpt_group.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_bpt_location_t)]
    get_bpt_qty = _libraries['FIXME_STUB'].get_bpt_qty
    get_bpt_qty.restype = ctypes.c_int32
    get_bpt_qty.argtypes = []
    get_bpt_tev_ea = _libraries['FIXME_STUB'].get_bpt_tev_ea
    get_bpt_tev_ea.restype = ea_t
    get_bpt_tev_ea.argtypes = [ctypes.c_int32]
    get_bptloc_string = _libraries['FIXME_STUB'].get_bptloc_string
    get_bptloc_string.restype = ctypes.c_char_p
    get_bptloc_string.argtypes = [ctypes.c_int32]
    get_byte = _libraries['FIXME_STUB'].get_byte
    get_byte.restype = uchar
    get_byte.argtypes = [ea_t]
    get_bytes = _libraries['FIXME_STUB'].get_bytes
    get_bytes.restype = ssize_t
    get_bytes.argtypes = [ctypes.POINTER(None), ssize_t, ea_t, ctypes.c_int32, ctypes.POINTER(None)]
    get_c_header_path = _libraries['FIXME_STUB'].get_c_header_path
    get_c_header_path.restype = ssize_t
    get_c_header_path.argtypes = [ctypes.POINTER(qstring)]
    get_c_macros = _libraries['FIXME_STUB'].get_c_macros
    get_c_macros.restype = ssize_t
    get_c_macros.argtypes = [ctypes.POINTER(qstring)]
    get_call_tev_callee = _libraries['FIXME_STUB'].get_call_tev_callee
    get_call_tev_callee.restype = ea_t
    get_call_tev_callee.argtypes = [ctypes.c_int32]
    get_cc = _libraries['FIXME_STUB'].get_cc
    get_cc.restype = cm_t
    get_cc.argtypes = [cm_t]
    get_chooser_data = _libraries['FIXME_STUB'].get_chooser_data
    get_chooser_data.restype = ctypes.c_char
    get_chooser_data.argtypes = [ctypes.POINTER(qstrvec_t), ctypes.c_char_p, ctypes.c_int32]
    get_chooser_obj = _libraries['FIXME_STUB'].get_chooser_obj
    get_chooser_obj.restype = ctypes.POINTER(None)
    get_chooser_obj.argtypes = [ctypes.c_char_p]
    get_cmt = _libraries['FIXME_STUB'].get_cmt
    get_cmt.restype = ssize_t
    get_cmt.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.c_char]
    get_colored_demangled_name = _libraries['FIXME_STUB'].get_colored_demangled_name
    get_colored_demangled_name.restype = qstring
    get_colored_demangled_name.argtypes = [ea_t, int32, ctypes.c_int32, ctypes.c_int32]
    get_colored_long_name = _libraries['FIXME_STUB'].get_colored_long_name
    get_colored_long_name.restype = qstring
    get_colored_long_name.argtypes = [ea_t, ctypes.c_int32]
    get_colored_name = _libraries['FIXME_STUB'].get_colored_name
    get_colored_name.restype = qstring
    get_colored_name.argtypes = [ea_t, ctypes.c_int32]
    get_colored_short_name = _libraries['FIXME_STUB'].get_colored_short_name
    get_colored_short_name.restype = qstring
    get_colored_short_name.argtypes = [ea_t, ctypes.c_int32]
    get_comp = _libraries['FIXME_STUB'].get_comp
    get_comp.restype = comp_t
    get_comp.argtypes = [comp_t]
    get_compiler_abbr = _libraries['FIXME_STUB'].get_compiler_abbr
    get_compiler_abbr.restype = ctypes.c_char_p
    get_compiler_abbr.argtypes = [comp_t]
    get_compiler_name = _libraries['FIXME_STUB'].get_compiler_name
    get_compiler_name.restype = ctypes.c_char_p
    get_compiler_name.argtypes = [comp_t]
    get_compilers = _libraries['FIXME_STUB'].get_compilers
    get_compilers.restype = None
    get_compilers.argtypes = [ctypes.POINTER(compvec_t), ctypes.POINTER(qstrvec_t), ctypes.POINTER(qstrvec_t)]
    get_cp_validity = _libraries['FIXME_STUB'].get_cp_validity
    get_cp_validity.restype = ctypes.c_char
    get_cp_validity.argtypes = [ucdr_kind_t, wchar32_t, wchar32_t]
    get_curline = _libraries['FIXME_STUB'].get_curline
    get_curline.restype = ctypes.c_char_p
    get_curline.argtypes = []
    get_current_extlang = _libraries['FIXME_STUB'].get_current_extlang
    get_current_extlang.restype = ctypes.POINTER(None)
    get_current_extlang.argtypes = []
    get_current_idasgn = _libraries['FIXME_STUB'].get_current_idasgn
    get_current_idasgn.restype = ctypes.c_int32
    get_current_idasgn.argtypes = []
    get_current_source_file = _libraries['FIXME_STUB'].get_current_source_file
    get_current_source_file.restype = ctypes.c_char
    get_current_source_file.argtypes = [ctypes.POINTER(qstring)]
    get_current_source_line = _libraries['FIXME_STUB'].get_current_source_line
    get_current_source_line.restype = ctypes.c_int32
    get_current_source_line.argtypes = []
    get_current_thread = _libraries['FIXME_STUB'].get_current_thread
    get_current_thread.restype = thid_t
    get_current_thread.argtypes = []
    get_current_viewer = _libraries['FIXME_STUB'].get_current_viewer
    get_current_viewer.restype = ctypes.POINTER(struct_TWidget)
    get_current_viewer.argtypes = []
    get_current_widget = _libraries['FIXME_STUB'].get_current_widget
    get_current_widget.restype = ctypes.POINTER(struct_TWidget)
    get_current_widget.argtypes = []
    get_cursor = _libraries['FIXME_STUB'].get_cursor
    get_cursor.restype = ctypes.c_char
    get_cursor.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32)]
    get_custom_data_format = _libraries['FIXME_STUB'].get_custom_data_format
    get_custom_data_format.restype = ctypes.POINTER(struct_data_format_t)
    get_custom_data_format.argtypes = [ctypes.c_int32]
    get_custom_data_formats = _libraries['FIXME_STUB'].get_custom_data_formats
    get_custom_data_formats.restype = ctypes.c_int32
    get_custom_data_formats.argtypes = [ctypes.POINTER(intvec_t), ctypes.c_int32]
    get_custom_data_type = _libraries['FIXME_STUB'].get_custom_data_type
    get_custom_data_type.restype = ctypes.POINTER(struct_data_type_t)
    get_custom_data_type.argtypes = [ctypes.c_int32]
    get_custom_data_type_ids = _libraries['FIXME_STUB'].get_custom_data_type_ids
    get_custom_data_type_ids.restype = ctypes.c_int32
    get_custom_data_type_ids.argtypes = [ctypes.POINTER(struct_custom_data_type_ids_t), ea_t]
    get_custom_data_types = _libraries['FIXME_STUB'].get_custom_data_types
    get_custom_data_types.restype = ctypes.c_int32
    get_custom_data_types.argtypes = [ctypes.POINTER(intvec_t), asize_t, asize_t]
    get_custom_refinfo = _libraries['FIXME_STUB'].get_custom_refinfo
    get_custom_refinfo.restype = ctypes.POINTER(struct_custom_refinfo_handler_t)
    get_custom_refinfo.argtypes = [ctypes.c_int32]
    get_custom_refinfo_handler = _libraries['FIXME_STUB'].get_custom_refinfo_handler
    get_custom_refinfo_handler.restype = ctypes.POINTER(struct_custom_refinfo_handler_t)
    get_custom_refinfo_handler.argtypes = [ctypes.POINTER(struct_refinfo_t)]
    get_custom_viewer_curline = _libraries['FIXME_STUB'].get_custom_viewer_curline
    get_custom_viewer_curline.restype = ctypes.c_char_p
    get_custom_viewer_curline.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.c_char]
    get_custom_viewer_location = _libraries['FIXME_STUB'].get_custom_viewer_location
    get_custom_viewer_location.restype = ctypes.c_char
    get_custom_viewer_location.argtypes = [ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_TWidget), ctypes.c_char]
    get_custom_viewer_place = _libraries['FIXME_STUB'].get_custom_viewer_place
    get_custom_viewer_place.restype = ctypes.POINTER(struct_place_t)
    get_custom_viewer_place.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.c_char, ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32)]
    get_custom_viewer_place_xcoord = _libraries['FIXME_STUB'].get_custom_viewer_place_xcoord
    get_custom_viewer_place_xcoord.restype = ctypes.c_int32
    get_custom_viewer_place_xcoord.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_place_t), ctypes.POINTER(struct_place_t)]
    get_data_elsize = _libraries['FIXME_STUB'].get_data_elsize
    get_data_elsize.restype = asize_t
    get_data_elsize.argtypes = [ea_t, flags_t, ctypes.POINTER(union_opinfo_t)]
    get_data_value = _libraries['FIXME_STUB'].get_data_value
    get_data_value.restype = ctypes.c_char
    get_data_value.argtypes = [ctypes.POINTER(uval_t), ea_t, asize_t]
    get_db_byte = _libraries['FIXME_STUB'].get_db_byte
    get_db_byte.restype = uchar
    get_db_byte.argtypes = [ea_t]
    get_dbctx_id = _libraries['FIXME_STUB'].get_dbctx_id
    get_dbctx_id.restype = ssize_t
    get_dbctx_id.argtypes = []
    get_dbctx_qty = _libraries['FIXME_STUB'].get_dbctx_qty
    get_dbctx_qty.restype = size_t
    get_dbctx_qty.argtypes = []
    get_dbg_byte = _libraries['FIXME_STUB'].get_dbg_byte
    get_dbg_byte.restype = ctypes.c_char
    get_dbg_byte.argtypes = [ctypes.POINTER(uint32), ea_t]
    get_dbg_memory_info = _libraries['FIXME_STUB'].get_dbg_memory_info
    get_dbg_memory_info.restype = ctypes.c_int32
    get_dbg_memory_info.argtypes = [ctypes.POINTER(meminfo_vec_t)]
    get_dbg_reg_info = _libraries['FIXME_STUB'].get_dbg_reg_info
    get_dbg_reg_info.restype = ctypes.c_char
    get_dbg_reg_info.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_register_info_t)]
    get_debug_event = _libraries['FIXME_STUB'].get_debug_event
    get_debug_event.restype = ctypes.POINTER(struct_debug_event_t)
    get_debug_event.argtypes = []
    get_debug_name = _libraries['FIXME_STUB'].get_debug_name
    get_debug_name.restype = ssize_t
    get_debug_name.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(ea_t), debug_name_how_t]
    get_debug_name_ea = _libraries['FIXME_STUB'].get_debug_name_ea
    get_debug_name_ea.restype = ea_t
    get_debug_name_ea.argtypes = [ctypes.c_char_p]
    get_debug_names = _libraries['FIXME_STUB'].get_debug_names
    get_debug_names.restype = None
    get_debug_names.argtypes = [ctypes.POINTER(ea_name_vec_t), ea_t, ea_t]
    get_debugger_event_cond = _libraries['FIXME_STUB'].get_debugger_event_cond
    get_debugger_event_cond.restype = ctypes.c_char_p
    get_debugger_event_cond.argtypes = []
    get_debugger_plugins = _libraries['FIXME_STUB'].get_debugger_plugins
    get_debugger_plugins.restype = size_t
    get_debugger_plugins.argtypes = [ctypes.POINTER(ctypes.POINTER(struct_dbg_info_t))]
    get_default_align = _libraries['FIXME_STUB'].get_default_align
    get_default_align.restype = size_t
    get_default_align.argtypes = []
    get_default_encoding_idx = _libraries['FIXME_STUB'].get_default_encoding_idx
    get_default_encoding_idx.restype = ctypes.c_int32
    get_default_encoding_idx.argtypes = [ctypes.c_int32]
    get_default_radix = _libraries['FIXME_STUB'].get_default_radix
    get_default_radix.restype = ctypes.c_int32
    get_default_radix.argtypes = []
    get_default_reftype = _libraries['FIXME_STUB'].get_default_reftype
    get_default_reftype.restype = reftype_t
    get_default_reftype.argtypes = [ea_t]
    get_demangled_name = _libraries['FIXME_STUB'].get_demangled_name
    get_demangled_name.restype = qstring
    get_demangled_name.argtypes = [ea_t, int32, ctypes.c_int32, ctypes.c_int32]
    get_dirty_infos = _libraries['FIXME_STUB'].get_dirty_infos
    get_dirty_infos.restype = uint64
    get_dirty_infos.argtypes = []
    get_dtype_by_size = _libraries['FIXME_STUB'].get_dtype_by_size
    get_dtype_by_size.restype = op_dtype_t
    get_dtype_by_size.argtypes = [asize_t]
    get_dtype_flag = _libraries['FIXME_STUB'].get_dtype_flag
    get_dtype_flag.restype = flags_t
    get_dtype_flag.argtypes = [op_dtype_t]
    get_dtype_size = _libraries['FIXME_STUB'].get_dtype_size
    get_dtype_size.restype = size_t
    get_dtype_size.argtypes = [op_dtype_t]
    get_dword = _libraries['FIXME_STUB'].get_dword
    get_dword.restype = uint32
    get_dword.argtypes = [ea_t]
    get_ea_name = _libraries['FIXME_STUB'].get_ea_name
    get_ea_name.restype = ssize_t
    get_ea_name.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.c_int32, ctypes.POINTER(struct_getname_info_t)]
    get_ea_viewer_history_info = _libraries['FIXME_STUB'].get_ea_viewer_history_info
    get_ea_viewer_history_info.restype = ctypes.c_char
    get_ea_viewer_history_info.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(struct_TWidget)]
    get_effective_cc = _libraries['FIXME_STUB'].get_effective_cc
    get_effective_cc.restype = cm_t
    get_effective_cc.argtypes = [cm_t]
    get_effective_spd = _libraries['FIXME_STUB'].get_effective_spd
    get_effective_spd.restype = sval_t
    get_effective_spd.argtypes = [ctypes.POINTER(struct_func_t), ea_t]
    get_elapsed_secs = _libraries['FIXME_STUB'].get_elapsed_secs
    get_elapsed_secs.restype = size_t
    get_elapsed_secs.argtypes = []
    get_elf_debug_file_directory = _libraries['FIXME_STUB'].get_elf_debug_file_directory
    get_elf_debug_file_directory.restype = ctypes.c_char_p
    get_elf_debug_file_directory.argtypes = []
    get_encoding_bpu = _libraries['FIXME_STUB'].get_encoding_bpu
    get_encoding_bpu.restype = ctypes.c_int32
    get_encoding_bpu.argtypes = [ctypes.c_int32]
    get_encoding_bpu_by_name = _libraries['FIXME_STUB'].get_encoding_bpu_by_name
    get_encoding_bpu_by_name.restype = ctypes.c_int32
    get_encoding_bpu_by_name.argtypes = [ctypes.c_char_p]
    get_encoding_name = _libraries['FIXME_STUB'].get_encoding_name
    get_encoding_name.restype = ctypes.c_char_p
    get_encoding_name.argtypes = [ctypes.c_int32]
    get_encoding_qty = _libraries['FIXME_STUB'].get_encoding_qty
    get_encoding_qty.restype = ctypes.c_int32
    get_encoding_qty.argtypes = []
    get_entry = _libraries['FIXME_STUB'].get_entry
    get_entry.restype = ea_t
    get_entry.argtypes = [uval_t]
    get_entry_forwarder = _libraries['FIXME_STUB'].get_entry_forwarder
    get_entry_forwarder.restype = ssize_t
    get_entry_forwarder.argtypes = [ctypes.POINTER(qstring), uval_t]
    get_entry_name = _libraries['FIXME_STUB'].get_entry_name
    get_entry_name.restype = ssize_t
    get_entry_name.argtypes = [ctypes.POINTER(qstring), uval_t]
    get_entry_ordinal = _libraries['FIXME_STUB'].get_entry_ordinal
    get_entry_ordinal.restype = uval_t
    get_entry_ordinal.argtypes = [size_t]
    get_entry_qty = _libraries['FIXME_STUB'].get_entry_qty
    get_entry_qty.restype = size_t
    get_entry_qty.argtypes = []
    get_enum = _libraries['FIXME_STUB'].get_enum
    get_enum.restype = enum_t
    get_enum.argtypes = [ctypes.c_char_p]
    get_enum_cmt = _libraries['FIXME_STUB'].get_enum_cmt
    get_enum_cmt.restype = ssize_t
    get_enum_cmt.argtypes = [ctypes.POINTER(qstring), enum_t, ctypes.c_char]
    get_enum_flag = _libraries['FIXME_STUB'].get_enum_flag
    get_enum_flag.restype = flags_t
    get_enum_flag.argtypes = [enum_t]
    get_enum_id = _libraries['FIXME_STUB'].get_enum_id
    get_enum_id.restype = enum_t
    get_enum_id.argtypes = [ctypes.POINTER(uchar), ea_t, ctypes.c_int32]
    get_enum_idx = _libraries['FIXME_STUB'].get_enum_idx
    get_enum_idx.restype = uval_t
    get_enum_idx.argtypes = [enum_t]
    get_enum_member = _libraries['FIXME_STUB'].get_enum_member
    get_enum_member.restype = const_t
    get_enum_member.argtypes = [enum_t, uval_t, ctypes.c_int32, bmask_t]
    get_enum_member_bmask = _libraries['FIXME_STUB'].get_enum_member_bmask
    get_enum_member_bmask.restype = bmask_t
    get_enum_member_bmask.argtypes = [const_t]
    get_enum_member_by_name = _libraries['FIXME_STUB'].get_enum_member_by_name
    get_enum_member_by_name.restype = const_t
    get_enum_member_by_name.argtypes = [ctypes.c_char_p]
    get_enum_member_cmt = _libraries['FIXME_STUB'].get_enum_member_cmt
    get_enum_member_cmt.restype = ssize_t
    get_enum_member_cmt.argtypes = [ctypes.POINTER(qstring), const_t, ctypes.c_char]
    get_enum_member_enum = _libraries['FIXME_STUB'].get_enum_member_enum
    get_enum_member_enum.restype = enum_t
    get_enum_member_enum.argtypes = [const_t]
    get_enum_member_expr = _libraries['FIXME_STUB'].get_enum_member_expr
    get_enum_member_expr.restype = ctypes.c_char
    get_enum_member_expr.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_tinfo_t), ctypes.c_int32, uint64]
    get_enum_member_name = _libraries['FIXME_STUB'].get_enum_member_name
    get_enum_member_name.restype = ssize_t
    get_enum_member_name.argtypes = [ctypes.POINTER(qstring), const_t]
    get_enum_member_serial = _libraries['FIXME_STUB'].get_enum_member_serial
    get_enum_member_serial.restype = uchar
    get_enum_member_serial.argtypes = [const_t]
    get_enum_member_value = _libraries['FIXME_STUB'].get_enum_member_value
    get_enum_member_value.restype = uval_t
    get_enum_member_value.argtypes = [const_t]
    get_enum_name = _libraries['FIXME_STUB'].get_enum_name
    get_enum_name.restype = qstring
    get_enum_name.argtypes = [tid_t, ctypes.c_int32]
    get_enum_name2 = _libraries['FIXME_STUB'].get_enum_name2
    get_enum_name2.restype = ssize_t
    get_enum_name2.argtypes = [ctypes.POINTER(qstring), enum_t, ctypes.c_int32]
    get_enum_qty = _libraries['FIXME_STUB'].get_enum_qty
    get_enum_qty.restype = size_t
    get_enum_qty.argtypes = []
    get_enum_size = _libraries['FIXME_STUB'].get_enum_size
    get_enum_size.restype = size_t
    get_enum_size.argtypes = [enum_t]
    get_enum_type_ordinal = _libraries['FIXME_STUB'].get_enum_type_ordinal
    get_enum_type_ordinal.restype = int32
    get_enum_type_ordinal.argtypes = [enum_t]
    get_enum_width = _libraries['FIXME_STUB'].get_enum_width
    get_enum_width.restype = size_t
    get_enum_width.argtypes = [enum_t]
    get_errdesc = _libraries['FIXME_STUB'].get_errdesc
    get_errdesc.restype = ctypes.c_char_p
    get_errdesc.argtypes = [ctypes.c_char_p, error_t]
    get_error_data = _libraries['FIXME_STUB'].get_error_data
    get_error_data.restype = size_t
    get_error_data.argtypes = [ctypes.c_int32]
    get_error_string = _libraries['FIXME_STUB'].get_error_string
    get_error_string.restype = ctypes.c_char_p
    get_error_string.argtypes = [ctypes.c_int32]
    get_extlang = _libraries['FIXME_STUB'].get_extlang
    get_extlang.restype = extlang_object_t
    get_extlang.argtypes = []
    get_extra_cmt = _libraries['FIXME_STUB'].get_extra_cmt
    get_extra_cmt.restype = ssize_t
    get_extra_cmt.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.c_int32]
    get_fchunk = _libraries['FIXME_STUB'].get_fchunk
    get_fchunk.restype = ctypes.POINTER(struct_func_t)
    get_fchunk.argtypes = [ea_t]
    get_fchunk_num = _libraries['FIXME_STUB'].get_fchunk_num
    get_fchunk_num.restype = ctypes.c_int32
    get_fchunk_num.argtypes = [ea_t]
    get_fchunk_qty = _libraries['FIXME_STUB'].get_fchunk_qty
    get_fchunk_qty.restype = size_t
    get_fchunk_qty.argtypes = []
    get_file_ext = _libraries['FIXME_STUB'].get_file_ext
    get_file_ext.restype = ctypes.c_char_p
    get_file_ext.argtypes = [ctypes.c_char_p]
    get_file_type_name = _libraries['FIXME_STUB'].get_file_type_name
    get_file_type_name.restype = size_t
    get_file_type_name.argtypes = [ctypes.c_char_p, size_t]
    get_fileregion_ea = _libraries['FIXME_STUB'].get_fileregion_ea
    get_fileregion_ea.restype = ea_t
    get_fileregion_ea.argtypes = [int64]
    get_fileregion_offset = _libraries['FIXME_STUB'].get_fileregion_offset
    get_fileregion_offset.restype = int64
    get_fileregion_offset.argtypes = [ea_t]
    get_first_bmask = _libraries['FIXME_STUB'].get_first_bmask
    get_first_bmask.restype = bmask_t
    get_first_bmask.argtypes = [enum_t]
    get_first_cref_from = _libraries['FIXME_STUB'].get_first_cref_from
    get_first_cref_from.restype = ea_t
    get_first_cref_from.argtypes = [ea_t]
    get_first_cref_to = _libraries['FIXME_STUB'].get_first_cref_to
    get_first_cref_to.restype = ea_t
    get_first_cref_to.argtypes = [ea_t]
    get_first_dref_from = _libraries['FIXME_STUB'].get_first_dref_from
    get_first_dref_from.restype = ea_t
    get_first_dref_from.argtypes = [ea_t]
    get_first_dref_to = _libraries['FIXME_STUB'].get_first_dref_to
    get_first_dref_to.restype = ea_t
    get_first_dref_to.argtypes = [ea_t]
    get_first_enum_member = _libraries['FIXME_STUB'].get_first_enum_member
    get_first_enum_member.restype = uval_t
    get_first_enum_member.argtypes = [enum_t, bmask_t]
    get_first_fcref_from = _libraries['FIXME_STUB'].get_first_fcref_from
    get_first_fcref_from.restype = ea_t
    get_first_fcref_from.argtypes = [ea_t]
    get_first_fcref_to = _libraries['FIXME_STUB'].get_first_fcref_to
    get_first_fcref_to.restype = ea_t
    get_first_fcref_to.argtypes = [ea_t]
    get_first_fixup_ea = _libraries['FIXME_STUB'].get_first_fixup_ea
    get_first_fixup_ea.restype = ea_t
    get_first_fixup_ea.argtypes = []
    get_first_free_extra_cmtidx = _libraries['FIXME_STUB'].get_first_free_extra_cmtidx
    get_first_free_extra_cmtidx.restype = ctypes.c_int32
    get_first_free_extra_cmtidx.argtypes = [ea_t, ctypes.c_int32]
    get_first_hidden_range = _libraries['FIXME_STUB'].get_first_hidden_range
    get_first_hidden_range.restype = ctypes.POINTER(struct_hidden_range_t)
    get_first_hidden_range.argtypes = []
    get_first_module = _libraries['FIXME_STUB'].get_first_module
    get_first_module.restype = ctypes.c_char
    get_first_module.argtypes = [ctypes.POINTER(struct_modinfo_t)]
    get_first_seg = _libraries['FIXME_STUB'].get_first_seg
    get_first_seg.restype = ctypes.POINTER(struct_segment_t)
    get_first_seg.argtypes = []
    get_first_serial_enum_member = _libraries['FIXME_STUB'].get_first_serial_enum_member
    get_first_serial_enum_member.restype = const_t
    get_first_serial_enum_member.argtypes = [ctypes.POINTER(uchar), enum_t, uval_t, bmask_t]
    get_first_struc_idx = _libraries['FIXME_STUB'].get_first_struc_idx
    get_first_struc_idx.restype = uval_t
    get_first_struc_idx.argtypes = []
    get_fixup = _libraries['FIXME_STUB'].get_fixup
    get_fixup.restype = ctypes.c_char
    get_fixup.argtypes = [ctypes.POINTER(struct_fixup_data_t), ea_t]
    get_fixup_desc = _libraries['FIXME_STUB'].get_fixup_desc
    get_fixup_desc.restype = ctypes.c_char_p
    get_fixup_desc.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.POINTER(struct_fixup_data_t)]
    get_fixup_handler = _libraries['FIXME_STUB'].get_fixup_handler
    get_fixup_handler.restype = ctypes.POINTER(struct_fixup_handler_t)
    get_fixup_handler.argtypes = [fixup_type_t]
    get_fixup_value = _libraries['FIXME_STUB'].get_fixup_value
    get_fixup_value.restype = uval_t
    get_fixup_value.argtypes = [ea_t, fixup_type_t]
    get_fixups = _libraries['FIXME_STUB'].get_fixups
    get_fixups.restype = ctypes.c_char
    get_fixups.argtypes = [ctypes.POINTER(fixups_t), ea_t, asize_t]
    get_flags = _libraries['FIXME_STUB'].get_flags
    get_flags.restype = flags_t
    get_flags.argtypes = [ea_t]
    get_flags_by_size = _libraries['FIXME_STUB'].get_flags_by_size
    get_flags_by_size.restype = flags_t
    get_flags_by_size.argtypes = [size_t]
    get_flags_ex = _libraries['FIXME_STUB'].get_flags_ex
    get_flags_ex.restype = flags_t
    get_flags_ex.argtypes = [ea_t, ctypes.c_int32]
    get_forced_operand = _libraries['FIXME_STUB'].get_forced_operand
    get_forced_operand.restype = ssize_t
    get_forced_operand.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.c_int32]
    get_fpvalue_kind = _libraries['FIXME_STUB'].get_fpvalue_kind
    get_fpvalue_kind.restype = fpvalue_kind_t
    get_fpvalue_kind.argtypes = [ctypes.POINTER(struct_fpvalue_t), uint16]
    get_frame = _libraries['FIXME_STUB'].get_frame
    get_frame.restype = ctypes.POINTER(struct_struc_t)
    get_frame.argtypes = [ea_t]
    get_frame_part = _libraries['FIXME_STUB'].get_frame_part
    get_frame_part.restype = None
    get_frame_part.argtypes = [ctypes.POINTER(struct_range_t), ctypes.POINTER(struct_func_t), frame_part_t]
    get_frame_retsize = _libraries['FIXME_STUB'].get_frame_retsize
    get_frame_retsize.restype = ctypes.c_int32
    get_frame_retsize.argtypes = [ctypes.POINTER(struct_func_t)]
    get_frame_size = _libraries['FIXME_STUB'].get_frame_size
    get_frame_size.restype = asize_t
    get_frame_size.argtypes = [ctypes.POINTER(struct_func_t)]
    get_free_disk_space = _libraries['FIXME_STUB'].get_free_disk_space
    get_free_disk_space.restype = uint64
    get_free_disk_space.argtypes = [ctypes.c_char_p]
    get_full_data_elsize = _libraries['FIXME_STUB'].get_full_data_elsize
    get_full_data_elsize.restype = asize_t
    get_full_data_elsize.argtypes = [ea_t, flags_t, ctypes.POINTER(union_opinfo_t)]
    get_full_flags = _libraries['FIXME_STUB'].get_full_flags
    get_full_flags.restype = flags_t
    get_full_flags.argtypes = [ea_t]
    get_full_type = _libraries['FIXME_STUB'].get_full_type
    get_full_type.restype = type_t
    get_full_type.argtypes = [type_t]
    get_func = _libraries['FIXME_STUB'].get_func
    get_func.restype = ctypes.POINTER(struct_func_t)
    get_func.argtypes = [ea_t]
    get_func_bitness = _libraries['FIXME_STUB'].get_func_bitness
    get_func_bitness.restype = ctypes.c_int32
    get_func_bitness.argtypes = [ctypes.POINTER(struct_func_t)]
    get_func_bits = _libraries['FIXME_STUB'].get_func_bits
    get_func_bits.restype = ctypes.c_int32
    get_func_bits.argtypes = [ctypes.POINTER(struct_func_t)]
    get_func_by_frame = _libraries['FIXME_STUB'].get_func_by_frame
    get_func_by_frame.restype = ea_t
    get_func_by_frame.argtypes = [tid_t]
    get_func_bytes = _libraries['FIXME_STUB'].get_func_bytes
    get_func_bytes.restype = ctypes.c_int32
    get_func_bytes.argtypes = [ctypes.POINTER(struct_func_t)]
    get_func_chunknum = _libraries['FIXME_STUB'].get_func_chunknum
    get_func_chunknum.restype = ctypes.c_int32
    get_func_chunknum.argtypes = [ctypes.POINTER(struct_func_t), ea_t]
    get_func_cmt = _libraries['FIXME_STUB'].get_func_cmt
    get_func_cmt.restype = ssize_t
    get_func_cmt.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_func_t), ctypes.c_char]
    get_func_name = _libraries['FIXME_STUB'].get_func_name
    get_func_name.restype = ssize_t
    get_func_name.argtypes = [ctypes.POINTER(qstring), ea_t]
    get_func_num = _libraries['FIXME_STUB'].get_func_num
    get_func_num.restype = ctypes.c_int32
    get_func_num.argtypes = [ea_t]
    get_func_qty = _libraries['FIXME_STUB'].get_func_qty
    get_func_qty.restype = size_t
    get_func_qty.argtypes = []
    get_func_ranges = _libraries['FIXME_STUB'].get_func_ranges
    get_func_ranges.restype = ea_t
    get_func_ranges.argtypes = [ctypes.POINTER(struct_rangeset_t), ctypes.POINTER(struct_func_t)]
    get_func_trace_options = _libraries['FIXME_STUB'].get_func_trace_options
    get_func_trace_options.restype = ctypes.c_int32
    get_func_trace_options.argtypes = []
    get_global_var = _libraries['FIXME_STUB'].get_global_var
    get_global_var.restype = ctypes.c_char
    get_global_var.argtypes = [ctypes.POINTER(struct_srcinfo_provider_t), ea_t, ctypes.c_char_p, ctypes.POINTER(source_item_ptr)]
    get_gotea = _libraries['FIXME_STUB'].get_gotea
    get_gotea.restype = ea_t
    get_gotea.argtypes = []
    get_graph_viewer = _libraries['FIXME_STUB'].get_graph_viewer
    get_graph_viewer.restype = ctypes.POINTER(graph_viewer_t)
    get_graph_viewer.argtypes = [ctypes.POINTER(struct_TWidget)]
    get_group_selector = _libraries['FIXME_STUB'].get_group_selector
    get_group_selector.restype = sel_t
    get_group_selector.argtypes = [sel_t]
    get_grp_bpts = _libraries['FIXME_STUB'].get_grp_bpts
    get_grp_bpts.restype = ssize_t
    get_grp_bpts.argtypes = [ctypes.POINTER(bpt_vec_t), ctypes.c_char_p]
    get_hex_string = _libraries['FIXME_STUB'].get_hex_string
    get_hex_string.restype = ssize_t
    get_hex_string.argtypes = [ctypes.c_char_p, size_t, ctypes.POINTER(uchar), size_t]
    get_hexdsp = _libraries['FIXME_STUB'].get_hexdsp
    get_hexdsp.restype = hexdsp_t
    get_hexdsp.argtypes = []
    get_hexdump_ea = _libraries['FIXME_STUB'].get_hexdump_ea
    get_hexdump_ea.restype = ea_t
    get_hexdump_ea.argtypes = [ctypes.c_int32]
    get_hidden_range = _libraries['FIXME_STUB'].get_hidden_range
    get_hidden_range.restype = ctypes.POINTER(struct_hidden_range_t)
    get_hidden_range.argtypes = [ea_t]
    get_hidden_range_num = _libraries['FIXME_STUB'].get_hidden_range_num
    get_hidden_range_num.restype = ctypes.c_int32
    get_hidden_range_num.argtypes = [ea_t]
    get_hidden_range_qty = _libraries['FIXME_STUB'].get_hidden_range_qty
    get_hidden_range_qty.restype = ctypes.c_int32
    get_hidden_range_qty.argtypes = []
    get_highlight = _libraries['FIXME_STUB'].get_highlight
    get_highlight.restype = ctypes.c_char
    get_highlight.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_TWidget), ctypes.POINTER(uint32), uint32]
    get_ida_notepad_text = _libraries['FIXME_STUB'].get_ida_notepad_text
    get_ida_notepad_text.restype = ssize_t
    get_ida_notepad_text.argtypes = [ctypes.POINTER(qstring)]
    get_ida_subdirs = _libraries['FIXME_STUB'].get_ida_subdirs
    get_ida_subdirs.restype = ctypes.c_int32
    get_ida_subdirs.argtypes = [ctypes.POINTER(qstrvec_t), ctypes.c_char_p, ctypes.c_int32]
    get_idainfo_by_type = _libraries['FIXME_STUB'].get_idainfo_by_type
    get_idainfo_by_type.restype = ctypes.c_char
    get_idainfo_by_type.argtypes = [ctypes.POINTER(size_t), ctypes.POINTER(flags_t), ctypes.POINTER(union_opinfo_t), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(size_t)]
    get_idasgn_desc = _libraries['FIXME_STUB'].get_idasgn_desc
    get_idasgn_desc.restype = int32
    get_idasgn_desc.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(qstring), ctypes.c_int32]
    get_idasgn_header_by_short_name = _libraries['FIXME_STUB'].get_idasgn_header_by_short_name
    get_idasgn_header_by_short_name.restype = ctypes.POINTER(struct_idasgn_t)
    get_idasgn_header_by_short_name.argtypes = [ctypes.c_char_p]
    get_idasgn_qty = _libraries['FIXME_STUB'].get_idasgn_qty
    get_idasgn_qty.restype = ctypes.c_int32
    get_idasgn_qty.argtypes = []
    get_idasgn_title = _libraries['FIXME_STUB'].get_idasgn_title
    get_idasgn_title.restype = ssize_t
    get_idasgn_title.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p]
    get_idati = _libraries['FIXME_STUB'].get_idati
    get_idati.restype = ctypes.POINTER(struct_til_t)
    get_idati.argtypes = []
    get_idb_ctime = _libraries['FIXME_STUB'].get_idb_ctime
    get_idb_ctime.restype = time_t
    get_idb_ctime.argtypes = []
    get_idb_nopens = _libraries['FIXME_STUB'].get_idb_nopens
    get_idb_nopens.restype = size_t
    get_idb_nopens.argtypes = []
    get_idc_filename = _libraries['FIXME_STUB'].get_idc_filename
    get_idc_filename.restype = ctypes.c_char_p
    get_idc_filename.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    get_idcv_attr = _libraries['FIXME_STUB'].get_idcv_attr
    get_idcv_attr.restype = error_t
    get_idcv_attr.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p, ctypes.c_char]
    get_idcv_class_name = _libraries['FIXME_STUB'].get_idcv_class_name
    get_idcv_class_name.restype = error_t
    get_idcv_class_name.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_idc_value_t)]
    get_idcv_slice = _libraries['FIXME_STUB'].get_idcv_slice
    get_idcv_slice.restype = error_t
    get_idcv_slice.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t), uval_t, uval_t, ctypes.c_int32]
    get_idp_descs = _libraries['FIXME_STUB'].get_idp_descs
    get_idp_descs.restype = ctypes.POINTER(idp_descs_t)
    get_idp_descs.argtypes = []
    get_idp_name = _libraries['FIXME_STUB'].get_idp_name
    get_idp_name.restype = ctypes.c_char_p
    get_idp_name.argtypes = [ctypes.c_char_p, size_t]
    get_idptype_and_data = _libraries['FIXME_STUB'].get_idptype_and_data
    get_idptype_and_data.restype = ctypes.c_char
    get_idptype_and_data.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.POINTER(None)), ctypes.POINTER(struct_idc_value_t)]
    get_ids_modnode = _libraries['FIXME_STUB'].get_ids_modnode
    get_ids_modnode.restype = struct_netnode
    get_ids_modnode.argtypes = []
    get_ignore_micro = _libraries['FIXME_STUB'].get_ignore_micro
    get_ignore_micro.restype = ctypes.c_char
    get_ignore_micro.argtypes = [ea_t]
    get_imagebase = _libraries['FIXME_STUB'].get_imagebase
    get_imagebase.restype = ea_t
    get_imagebase.argtypes = []
    get_immvals = _libraries['FIXME_STUB'].get_immvals
    get_immvals.restype = size_t
    get_immvals.argtypes = [ctypes.POINTER(uval_t), ea_t, ctypes.c_int32, flags_t, ctypes.POINTER(struct_insn_t)]
    get_import_module_name = _libraries['FIXME_STUB'].get_import_module_name
    get_import_module_name.restype = ctypes.c_char
    get_import_module_name.argtypes = [ctypes.POINTER(qstring), ctypes.c_int32]
    get_import_module_qty = _libraries['FIXME_STUB'].get_import_module_qty
    get_import_module_qty.restype = uint
    get_import_module_qty.argtypes = []
    get_ind_purged = _libraries['FIXME_STUB'].get_ind_purged
    get_ind_purged.restype = ea_t
    get_ind_purged.argtypes = [ea_t]
    get_initial_ida_version = _libraries['FIXME_STUB'].get_initial_ida_version
    get_initial_ida_version.restype = ssize_t
    get_initial_ida_version.argtypes = [ctypes.POINTER(qstring)]
    get_initial_idb_version = _libraries['FIXME_STUB'].get_initial_idb_version
    get_initial_idb_version.restype = ushort
    get_initial_idb_version.argtypes = []
    get_innermost_member = _libraries['FIXME_STUB'].get_innermost_member
    get_innermost_member.restype = ctypes.POINTER(struct_member_t)
    get_innermost_member.argtypes = [ctypes.POINTER(ctypes.POINTER(struct_struc_t)), ctypes.POINTER(asize_t)]
    get_input_file_path = _libraries['FIXME_STUB'].get_input_file_path
    get_input_file_path.restype = ssize_t
    get_input_file_path.argtypes = [ctypes.c_char_p, size_t]
    get_insn_tev_reg_mem = _libraries['FIXME_STUB'].get_insn_tev_reg_mem
    get_insn_tev_reg_mem.restype = ctypes.c_char
    get_insn_tev_reg_mem.argtypes = [ctypes.c_int32, ctypes.POINTER(memreg_infos_t)]
    get_insn_tev_reg_result = _libraries['FIXME_STUB'].get_insn_tev_reg_result
    get_insn_tev_reg_result.restype = ctypes.c_char
    get_insn_tev_reg_result.argtypes = [ctypes.c_int32, ctypes.c_char_p, ctypes.POINTER(uint64)]
    get_insn_tev_reg_val = _libraries['FIXME_STUB'].get_insn_tev_reg_val
    get_insn_tev_reg_val.restype = ctypes.c_char
    get_insn_tev_reg_val.argtypes = [ctypes.c_int32, ctypes.c_char_p, ctypes.POINTER(uint64)]
    get_insn_trace_options = _libraries['FIXME_STUB'].get_insn_trace_options
    get_insn_trace_options.restype = ctypes.c_int32
    get_insn_trace_options.argtypes = []
    get_ip_val = _libraries['FIXME_STUB'].get_ip_val
    get_ip_val.restype = ctypes.c_char
    get_ip_val.argtypes = [ctypes.POINTER(ea_t)]
    get_item_color = _libraries['FIXME_STUB'].get_item_color
    get_item_color.restype = bgcolor_t
    get_item_color.argtypes = [ea_t]
    get_item_end = _libraries['FIXME_STUB'].get_item_end
    get_item_end.restype = ea_t
    get_item_end.argtypes = [ea_t]
    get_item_flag = _libraries['FIXME_STUB'].get_item_flag
    get_item_flag.restype = flags_t
    get_item_flag.argtypes = [ea_t, ctypes.c_int32, ea_t, ctypes.c_char]
    get_item_head = _libraries['FIXME_STUB'].get_item_head
    get_item_head.restype = ea_t
    get_item_head.argtypes = [ea_t]
    get_item_size = _libraries['FIXME_STUB'].get_item_size
    get_item_size.restype = asize_t
    get_item_size.argtypes = [ea_t]
    get_jtable_target = _libraries['FIXME_STUB'].get_jtable_target
    get_jtable_target.restype = ea_t
    get_jtable_target.argtypes = [ea_t, ctypes.POINTER(struct_switch_info_t), ctypes.c_int32]
    get_kernel_version = _libraries['FIXME_STUB'].get_kernel_version
    get_kernel_version.restype = ssize_t
    get_kernel_version.argtypes = [ctypes.c_char_p, size_t]
    get_key_code = _libraries['FIXME_STUB'].get_key_code
    get_key_code.restype = ushort
    get_key_code.argtypes = [ctypes.c_char_p]
    get_last_bmask = _libraries['FIXME_STUB'].get_last_bmask
    get_last_bmask.restype = bmask_t
    get_last_bmask.argtypes = [enum_t]
    get_last_enum_member = _libraries['FIXME_STUB'].get_last_enum_member
    get_last_enum_member.restype = uval_t
    get_last_enum_member.argtypes = [enum_t, bmask_t]
    get_last_hidden_range = _libraries['FIXME_STUB'].get_last_hidden_range
    get_last_hidden_range.restype = ctypes.POINTER(struct_hidden_range_t)
    get_last_hidden_range.argtypes = []
    get_last_pfxlen = _libraries['FIXME_STUB'].get_last_pfxlen
    get_last_pfxlen.restype = ctypes.c_int32
    get_last_pfxlen.argtypes = []
    get_last_seg = _libraries['FIXME_STUB'].get_last_seg
    get_last_seg.restype = ctypes.POINTER(struct_segment_t)
    get_last_seg.argtypes = []
    get_last_serial_enum_member = _libraries['FIXME_STUB'].get_last_serial_enum_member
    get_last_serial_enum_member.restype = const_t
    get_last_serial_enum_member.argtypes = [ctypes.POINTER(uchar), enum_t, uval_t, bmask_t]
    get_last_struc_idx = _libraries['FIXME_STUB'].get_last_struc_idx
    get_last_struc_idx.restype = uval_t
    get_last_struc_idx.argtypes = []
    get_linput_type = _libraries['FIXME_STUB'].get_linput_type
    get_linput_type.restype = linput_type_t
    get_linput_type.argtypes = [ctypes.POINTER(struct_linput_t)]
    get_loader_format_name = _libraries['FIXME_STUB'].get_loader_format_name
    get_loader_format_name.restype = ssize_t
    get_loader_format_name.argtypes = [ctypes.POINTER(qstring)]
    get_loader_name = _libraries['FIXME_STUB'].get_loader_name
    get_loader_name.restype = ssize_t
    get_loader_name.argtypes = [ctypes.c_char_p, size_t]
    get_loader_name_from_dll = _libraries['FIXME_STUB'].get_loader_name_from_dll
    get_loader_name_from_dll.restype = ctypes.c_char_p
    get_loader_name_from_dll.argtypes = [ctypes.c_char_p]
    get_local_var = _libraries['FIXME_STUB'].get_local_var
    get_local_var.restype = ctypes.c_char
    get_local_var.argtypes = [ctypes.POINTER(struct_srcinfo_provider_t), ea_t, ctypes.c_char_p, ctypes.POINTER(source_item_ptr)]
    get_local_vars = _libraries['FIXME_STUB'].get_local_vars
    get_local_vars.restype = ctypes.c_char
    get_local_vars.argtypes = [ctypes.POINTER(struct_srcinfo_provider_t), ea_t, ctypes.POINTER(source_items_t)]
    get_long_name = _libraries['FIXME_STUB'].get_long_name
    get_long_name.restype = qstring
    get_long_name.argtypes = [ea_t, ctypes.c_int32]
    get_lookback = _libraries['FIXME_STUB'].get_lookback
    get_lookback.restype = ctypes.c_int32
    get_lookback.argtypes = []
    get_mangled_name_type = _libraries['FIXME_STUB'].get_mangled_name_type
    get_mangled_name_type.restype = mangled_name_type_t
    get_mangled_name_type.argtypes = [ctypes.c_char_p]
    get_manual_insn = _libraries['FIXME_STUB'].get_manual_insn
    get_manual_insn.restype = ssize_t
    get_manual_insn.argtypes = [ctypes.POINTER(qstring), ea_t]
    get_manual_regions = _libraries['FIXME_STUB'].get_manual_regions
    get_manual_regions.restype = None
    get_manual_regions.argtypes = [ctypes.POINTER(meminfo_vec_t)]
    get_mapping = _libraries['FIXME_STUB'].get_mapping
    get_mapping.restype = ctypes.c_char
    get_mapping.argtypes = [ctypes.POINTER(ea_t), ctypes.POINTER(ea_t), ctypes.POINTER(asize_t), size_t]
    get_mappings_qty = _libraries['FIXME_STUB'].get_mappings_qty
    get_mappings_qty.restype = size_t
    get_mappings_qty.argtypes = []
    get_max_offset = _libraries['FIXME_STUB'].get_max_offset
    get_max_offset.restype = ea_t
    get_max_offset.argtypes = [ctypes.POINTER(struct_struc_t)]
    get_max_strlit_length = _libraries['FIXME_STUB'].get_max_strlit_length
    get_max_strlit_length.restype = size_t
    get_max_strlit_length.argtypes = [ea_t, int32, ctypes.c_int32]
    get_member = _libraries['FIXME_STUB'].get_member
    get_member.restype = ctypes.POINTER(struct_member_t)
    get_member.argtypes = [ctypes.POINTER(struct_struc_t), asize_t]
    get_member_by_fullname = _libraries['FIXME_STUB'].get_member_by_fullname
    get_member_by_fullname.restype = ctypes.POINTER(struct_member_t)
    get_member_by_fullname.argtypes = [ctypes.POINTER(ctypes.POINTER(struct_struc_t)), ctypes.c_char_p]
    get_member_by_id = _libraries['FIXME_STUB'].get_member_by_id
    get_member_by_id.restype = ctypes.POINTER(struct_member_t)
    get_member_by_id.argtypes = [tid_t, ctypes.POINTER(ctypes.POINTER(struct_struc_t))]
    get_member_by_name = _libraries['FIXME_STUB'].get_member_by_name
    get_member_by_name.restype = ctypes.POINTER(struct_member_t)
    get_member_by_name.argtypes = [ctypes.POINTER(struct_struc_t), ctypes.c_char_p]
    get_member_cmt = _libraries['FIXME_STUB'].get_member_cmt
    get_member_cmt.restype = ssize_t
    get_member_cmt.argtypes = [ctypes.POINTER(qstring), tid_t, ctypes.c_char]
    get_member_fullname = _libraries['FIXME_STUB'].get_member_fullname
    get_member_fullname.restype = ssize_t
    get_member_fullname.argtypes = [ctypes.POINTER(qstring), tid_t]
    get_member_id = _libraries['FIXME_STUB'].get_member_id
    get_member_id.restype = tid_t
    get_member_id.argtypes = [ctypes.POINTER(struct_struc_t), asize_t]
    get_member_name = _libraries['FIXME_STUB'].get_member_name
    get_member_name.restype = qstring
    get_member_name.argtypes = [tid_t]
    get_member_size = _libraries['FIXME_STUB'].get_member_size
    get_member_size.restype = asize_t
    get_member_size.argtypes = [ctypes.POINTER(struct_member_t)]
    get_member_struc = _libraries['FIXME_STUB'].get_member_struc
    get_member_struc.restype = ctypes.POINTER(struct_struc_t)
    get_member_struc.argtypes = [ctypes.c_char_p]
    get_member_tinfo = _libraries['FIXME_STUB'].get_member_tinfo
    get_member_tinfo.restype = ctypes.c_char
    get_member_tinfo.argtypes = [ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_member_t)]
    get_min_spd_ea = _libraries['FIXME_STUB'].get_min_spd_ea
    get_min_spd_ea.restype = ea_t
    get_min_spd_ea.argtypes = [ctypes.POINTER(struct_func_t)]
    get_module_data = _libraries['FIXME_STUB'].get_module_data
    get_module_data.restype = ctypes.POINTER(None)
    get_module_data.argtypes = [ctypes.c_int32]
    get_module_info = _libraries['FIXME_STUB'].get_module_info
    get_module_info.restype = ctypes.c_char
    get_module_info.argtypes = [ea_t, ctypes.POINTER(struct_modinfo_t)]
    get_name = _libraries['FIXME_STUB'].get_name
    get_name.restype = qstring
    get_name.argtypes = [ea_t, ctypes.c_int32]
    get_name_base_ea = _libraries['FIXME_STUB'].get_name_base_ea
    get_name_base_ea.restype = ea_t
    get_name_base_ea.argtypes = [ea_t, ea_t]
    get_name_color = _libraries['FIXME_STUB'].get_name_color
    get_name_color.restype = color_t
    get_name_color.argtypes = [ea_t, ea_t]
    get_name_ea = _libraries['FIXME_STUB'].get_name_ea
    get_name_ea.restype = ea_t
    get_name_ea.argtypes = [ea_t, ctypes.c_char_p]
    get_name_expr = _libraries['FIXME_STUB'].get_name_expr
    get_name_expr.restype = ssize_t
    get_name_expr.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.c_int32, ea_t, uval_t, ctypes.c_int32]
    get_name_value = _libraries['FIXME_STUB'].get_name_value
    get_name_value.restype = ctypes.c_int32
    get_name_value.argtypes = [ctypes.POINTER(uval_t), ea_t, ctypes.c_char_p]
    get_named_type = _libraries['FIXME_STUB'].get_named_type
    get_named_type.restype = ctypes.c_int32
    get_named_type.argtypes = [ctypes.POINTER(struct_til_t), ctypes.c_char_p, ctypes.c_int32, ctypes.POINTER(ctypes.POINTER(type_t)), ctypes.POINTER(ctypes.POINTER(p_list)), ctypes.POINTER(ctypes.c_char_p), ctypes.POINTER(ctypes.POINTER(p_list)), ctypes.POINTER(sclass_t), ctypes.POINTER(uint32)]
    get_named_type64 = _libraries['FIXME_STUB'].get_named_type64
    get_named_type64.restype = ctypes.c_int32
    get_named_type64.argtypes = [ctypes.POINTER(struct_til_t), ctypes.c_char_p, ctypes.c_int32, ctypes.POINTER(ctypes.POINTER(type_t)), ctypes.POINTER(ctypes.POINTER(p_list)), ctypes.POINTER(ctypes.c_char_p), ctypes.POINTER(ctypes.POINTER(p_list)), ctypes.POINTER(sclass_t), ctypes.POINTER(uint64)]
    get_navband_ea = _libraries['FIXME_STUB'].get_navband_ea
    get_navband_ea.restype = ea_t
    get_navband_ea.argtypes = [ctypes.c_int32]
    get_navband_pixel = _libraries['FIXME_STUB'].get_navband_pixel
    get_navband_pixel.restype = ctypes.c_int32
    get_navband_pixel.argtypes = [ctypes.c_char_p, ea_t]
    get_new_handler = _libraries['FIXME_STUB'].get_new_handler
    get_new_handler.restype = std__new_handler
    get_new_handler.argtypes = []
    get_next_bmask = _libraries['FIXME_STUB'].get_next_bmask
    get_next_bmask.restype = bmask_t
    get_next_bmask.argtypes = [enum_t, bmask_t]
    get_next_cref_from = _libraries['FIXME_STUB'].get_next_cref_from
    get_next_cref_from.restype = ea_t
    get_next_cref_from.argtypes = [ea_t, ea_t]
    get_next_cref_to = _libraries['FIXME_STUB'].get_next_cref_to
    get_next_cref_to.restype = ea_t
    get_next_cref_to.argtypes = [ea_t, ea_t]
    get_next_dref_from = _libraries['FIXME_STUB'].get_next_dref_from
    get_next_dref_from.restype = ea_t
    get_next_dref_from.argtypes = [ea_t, ea_t]
    get_next_dref_to = _libraries['FIXME_STUB'].get_next_dref_to
    get_next_dref_to.restype = ea_t
    get_next_dref_to.argtypes = [ea_t, ea_t]
    get_next_enum_member = _libraries['FIXME_STUB'].get_next_enum_member
    get_next_enum_member.restype = uval_t
    get_next_enum_member.argtypes = [enum_t, uval_t, bmask_t]
    get_next_fchunk = _libraries['FIXME_STUB'].get_next_fchunk
    get_next_fchunk.restype = ctypes.POINTER(struct_func_t)
    get_next_fchunk.argtypes = [ea_t]
    get_next_fcref_from = _libraries['FIXME_STUB'].get_next_fcref_from
    get_next_fcref_from.restype = ea_t
    get_next_fcref_from.argtypes = [ea_t, ea_t]
    get_next_fcref_to = _libraries['FIXME_STUB'].get_next_fcref_to
    get_next_fcref_to.restype = ea_t
    get_next_fcref_to.argtypes = [ea_t, ea_t]
    get_next_fixup_ea = _libraries['FIXME_STUB'].get_next_fixup_ea
    get_next_fixup_ea.restype = ea_t
    get_next_fixup_ea.argtypes = [ea_t]
    get_next_func = _libraries['FIXME_STUB'].get_next_func
    get_next_func.restype = ctypes.POINTER(struct_func_t)
    get_next_func.argtypes = [ea_t]
    get_next_func_addr = _libraries['FIXME_STUB'].get_next_func_addr
    get_next_func_addr.restype = ea_t
    get_next_func_addr.argtypes = [ctypes.POINTER(struct_func_t), ea_t]
    get_next_hidden_range = _libraries['FIXME_STUB'].get_next_hidden_range
    get_next_hidden_range.restype = ctypes.POINTER(struct_hidden_range_t)
    get_next_hidden_range.argtypes = [ea_t]
    get_next_member_idx = _libraries['FIXME_STUB'].get_next_member_idx
    get_next_member_idx.restype = ssize_t
    get_next_member_idx.argtypes = [ctypes.POINTER(struct_struc_t), asize_t]
    get_next_module = _libraries['FIXME_STUB'].get_next_module
    get_next_module.restype = ctypes.c_char
    get_next_module.argtypes = [ctypes.POINTER(struct_modinfo_t)]
    get_next_seg = _libraries['FIXME_STUB'].get_next_seg
    get_next_seg.restype = ctypes.POINTER(struct_segment_t)
    get_next_seg.argtypes = [ea_t]
    get_next_serial_enum_member = _libraries['FIXME_STUB'].get_next_serial_enum_member
    get_next_serial_enum_member.restype = const_t
    get_next_serial_enum_member.argtypes = [ctypes.POINTER(uchar), const_t]
    get_next_struc_idx = _libraries['FIXME_STUB'].get_next_struc_idx
    get_next_struc_idx.restype = uval_t
    get_next_struc_idx.argtypes = [uval_t]
    get_nice_colored_name = _libraries['FIXME_STUB'].get_nice_colored_name
    get_nice_colored_name.restype = ssize_t
    get_nice_colored_name.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.c_int32]
    get_nlist_ea = _libraries['FIXME_STUB'].get_nlist_ea
    get_nlist_ea.restype = ea_t
    get_nlist_ea.argtypes = [size_t]
    get_nlist_idx = _libraries['FIXME_STUB'].get_nlist_idx
    get_nlist_idx.restype = size_t
    get_nlist_idx.argtypes = [ea_t]
    get_nlist_name = _libraries['FIXME_STUB'].get_nlist_name
    get_nlist_name.restype = ctypes.c_char_p
    get_nlist_name.argtypes = [size_t]
    get_nlist_size = _libraries['FIXME_STUB'].get_nlist_size
    get_nlist_size.restype = size_t
    get_nlist_size.argtypes = []
    get_node_info = _libraries['FIXME_STUB'].get_node_info
    get_node_info.restype = ctypes.c_char
    get_node_info.argtypes = [ctypes.POINTER(struct_node_info_t), graph_id_t, ctypes.c_int32]
    get_nsec_stamp = _libraries['FIXME_STUB'].get_nsec_stamp
    get_nsec_stamp.restype = uint64
    get_nsec_stamp.argtypes = []
    get_numbered_type = _libraries['FIXME_STUB'].get_numbered_type
    get_numbered_type.restype = ctypes.c_char
    get_numbered_type.argtypes = [ctypes.POINTER(struct_til_t), uint32, ctypes.POINTER(ctypes.POINTER(type_t)), ctypes.POINTER(ctypes.POINTER(p_list)), ctypes.POINTER(ctypes.c_char_p), ctypes.POINTER(ctypes.POINTER(p_list)), ctypes.POINTER(sclass_t)]
    get_numbered_type_name = _libraries['FIXME_STUB'].get_numbered_type_name
    get_numbered_type_name.restype = ctypes.c_char_p
    get_numbered_type_name.argtypes = [ctypes.POINTER(struct_til_t), uint32]
    get_octet = _libraries['FIXME_STUB'].get_octet
    get_octet.restype = uchar
    get_octet.argtypes = [ctypes.POINTER(ea_t), ctypes.POINTER(uint64), ctypes.POINTER(ctypes.c_int32)]
    get_offbase = _libraries['FIXME_STUB'].get_offbase
    get_offbase.restype = ea_t
    get_offbase.argtypes = [ea_t, ctypes.c_int32]
    get_offset_expr = _libraries['FIXME_STUB'].get_offset_expr
    get_offset_expr.restype = ctypes.c_int32
    get_offset_expr.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.c_int32, ctypes.POINTER(struct_refinfo_t), ea_t, adiff_t, ctypes.c_int32]
    get_offset_expression = _libraries['FIXME_STUB'].get_offset_expression
    get_offset_expression.restype = ctypes.c_int32
    get_offset_expression.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.c_int32, ea_t, adiff_t, ctypes.c_int32]
    get_op_tinfo = _libraries['FIXME_STUB'].get_op_tinfo
    get_op_tinfo.restype = ctypes.c_char
    get_op_tinfo.argtypes = [ctypes.POINTER(struct_tinfo_t), ea_t, ctypes.c_int32]
    get_opinfo = _libraries['FIXME_STUB'].get_opinfo
    get_opinfo.restype = ctypes.POINTER(union_opinfo_t)
    get_opinfo.argtypes = [ctypes.POINTER(union_opinfo_t), ea_t, ctypes.c_int32, flags_t]
    get_opnum = _libraries['FIXME_STUB'].get_opnum
    get_opnum.restype = ctypes.c_int32
    get_opnum.argtypes = []
    get_optype_flags0 = _libraries['FIXME_STUB'].get_optype_flags0
    get_optype_flags0.restype = flags_t
    get_optype_flags0.argtypes = [flags_t]
    get_optype_flags1 = _libraries['FIXME_STUB'].get_optype_flags1
    get_optype_flags1.restype = flags_t
    get_optype_flags1.argtypes = [flags_t]
    get_or_guess_member_tinfo = _libraries['FIXME_STUB'].get_or_guess_member_tinfo
    get_or_guess_member_tinfo.restype = ctypes.c_char
    get_or_guess_member_tinfo.argtypes = [ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_member_t)]
    get_ordinal_from_idb_type = _libraries['FIXME_STUB'].get_ordinal_from_idb_type
    get_ordinal_from_idb_type.restype = ctypes.c_int32
    get_ordinal_from_idb_type.argtypes = [ctypes.c_char_p, ctypes.POINTER(type_t)]
    get_ordinal_qty = _libraries['FIXME_STUB'].get_ordinal_qty
    get_ordinal_qty.restype = uint32
    get_ordinal_qty.argtypes = [ctypes.POINTER(struct_til_t)]
    get_original_byte = _libraries['FIXME_STUB'].get_original_byte
    get_original_byte.restype = uint64
    get_original_byte.argtypes = [ea_t]
    get_original_dword = _libraries['FIXME_STUB'].get_original_dword
    get_original_dword.restype = uint64
    get_original_dword.argtypes = [ea_t]
    get_original_qword = _libraries['FIXME_STUB'].get_original_qword
    get_original_qword.restype = uint64
    get_original_qword.argtypes = [ea_t]
    get_original_word = _libraries['FIXME_STUB'].get_original_word
    get_original_word.restype = uint64
    get_original_word.argtypes = [ea_t]
    get_outfile_encoding_idx = _libraries['FIXME_STUB'].get_outfile_encoding_idx
    get_outfile_encoding_idx.restype = ctypes.c_int32
    get_outfile_encoding_idx.argtypes = []
    get_output_curline = _libraries['FIXME_STUB'].get_output_curline
    get_output_curline.restype = ctypes.c_char
    get_output_curline.argtypes = [ctypes.POINTER(qstring), ctypes.c_char]
    get_output_cursor = _libraries['FIXME_STUB'].get_output_cursor
    get_output_cursor.restype = ctypes.c_char
    get_output_cursor.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32)]
    get_output_selected_text = _libraries['FIXME_STUB'].get_output_selected_text
    get_output_selected_text.restype = ctypes.c_char
    get_output_selected_text.argtypes = [ctypes.POINTER(qstring)]
    get_path = _libraries['FIXME_STUB'].get_path
    get_path.restype = ctypes.c_char_p
    get_path.argtypes = [path_type_t]
    get_ph = _libraries['FIXME_STUB'].get_ph
    get_ph.restype = ctypes.POINTER(struct_processor_t)
    get_ph.argtypes = []
    get_place_class = _libraries['FIXME_STUB'].get_place_class
    get_place_class.restype = ctypes.POINTER(struct_place_t)
    get_place_class.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_int32), ctypes.c_int32]
    get_place_class_id = _libraries['FIXME_STUB'].get_place_class_id
    get_place_class_id.restype = ctypes.c_int32
    get_place_class_id.argtypes = [ctypes.c_char_p]
    get_place_class_template = _libraries['FIXME_STUB'].get_place_class_template
    get_place_class_template.restype = ctypes.POINTER(struct_place_t)
    get_place_class_template.argtypes = [ctypes.c_int32]
    get_plugin_options = _libraries['FIXME_STUB'].get_plugin_options
    get_plugin_options.restype = ctypes.c_char_p
    get_plugin_options.argtypes = [ctypes.c_char_p]
    get_plugins = _libraries['FIXME_STUB'].get_plugins
    get_plugins.restype = ctypes.POINTER(struct_plugin_info_t)
    get_plugins.argtypes = []
    get_predef_insn_cmt = _libraries['FIXME_STUB'].get_predef_insn_cmt
    get_predef_insn_cmt.restype = ssize_t
    get_predef_insn_cmt.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_insn_t)]
    get_prev_bmask = _libraries['FIXME_STUB'].get_prev_bmask
    get_prev_bmask.restype = bmask_t
    get_prev_bmask.argtypes = [enum_t, bmask_t]
    get_prev_enum_member = _libraries['FIXME_STUB'].get_prev_enum_member
    get_prev_enum_member.restype = uval_t
    get_prev_enum_member.argtypes = [enum_t, uval_t, bmask_t]
    get_prev_fchunk = _libraries['FIXME_STUB'].get_prev_fchunk
    get_prev_fchunk.restype = ctypes.POINTER(struct_func_t)
    get_prev_fchunk.argtypes = [ea_t]
    get_prev_fixup_ea = _libraries['FIXME_STUB'].get_prev_fixup_ea
    get_prev_fixup_ea.restype = ea_t
    get_prev_fixup_ea.argtypes = [ea_t]
    get_prev_func = _libraries['FIXME_STUB'].get_prev_func
    get_prev_func.restype = ctypes.POINTER(struct_func_t)
    get_prev_func.argtypes = [ea_t]
    get_prev_func_addr = _libraries['FIXME_STUB'].get_prev_func_addr
    get_prev_func_addr.restype = ea_t
    get_prev_func_addr.argtypes = [ctypes.POINTER(struct_func_t), ea_t]
    get_prev_hidden_range = _libraries['FIXME_STUB'].get_prev_hidden_range
    get_prev_hidden_range.restype = ctypes.POINTER(struct_hidden_range_t)
    get_prev_hidden_range.argtypes = [ea_t]
    get_prev_member_idx = _libraries['FIXME_STUB'].get_prev_member_idx
    get_prev_member_idx.restype = ssize_t
    get_prev_member_idx.argtypes = [ctypes.POINTER(struct_struc_t), asize_t]
    get_prev_seg = _libraries['FIXME_STUB'].get_prev_seg
    get_prev_seg.restype = ctypes.POINTER(struct_segment_t)
    get_prev_seg.argtypes = [ea_t]
    get_prev_serial_enum_member = _libraries['FIXME_STUB'].get_prev_serial_enum_member
    get_prev_serial_enum_member.restype = const_t
    get_prev_serial_enum_member.argtypes = [ctypes.POINTER(uchar), const_t]
    get_prev_sreg_range = _libraries['FIXME_STUB'].get_prev_sreg_range
    get_prev_sreg_range.restype = ctypes.c_char
    get_prev_sreg_range.argtypes = [ctypes.POINTER(struct_sreg_range_t), ea_t, ctypes.c_int32]
    get_prev_struc_idx = _libraries['FIXME_STUB'].get_prev_struc_idx
    get_prev_struc_idx.restype = uval_t
    get_prev_struc_idx.argtypes = [uval_t]
    get_printable_immvals = _libraries['FIXME_STUB'].get_printable_immvals
    get_printable_immvals.restype = size_t
    get_printable_immvals.argtypes = [ctypes.POINTER(uval_t), ea_t, ctypes.c_int32, flags_t, ctypes.POINTER(struct_insn_t)]
    get_problem = _libraries['FIXME_STUB'].get_problem
    get_problem.restype = ea_t
    get_problem.argtypes = [problist_id_t, ea_t]
    get_problem_desc = _libraries['FIXME_STUB'].get_problem_desc
    get_problem_desc.restype = ssize_t
    get_problem_desc.argtypes = [ctypes.POINTER(qstring), problist_id_t, ea_t]
    get_problem_name = _libraries['FIXME_STUB'].get_problem_name
    get_problem_name.restype = ctypes.c_char_p
    get_problem_name.argtypes = [problist_id_t, ctypes.c_char]
    get_process_options = _libraries['FIXME_STUB'].get_process_options
    get_process_options.restype = None
    get_process_options.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(qstring), ctypes.POINTER(qstring), ctypes.POINTER(qstring), ctypes.POINTER(qstring), ctypes.POINTER(ctypes.c_int32)]
    get_process_state = _libraries['FIXME_STUB'].get_process_state
    get_process_state.restype = ctypes.c_int32
    get_process_state.argtypes = []
    get_processes = _libraries['FIXME_STUB'].get_processes
    get_processes.restype = ssize_t
    get_processes.argtypes = [ctypes.POINTER(procinfo_vec_t)]
    get_qerrno = _libraries['FIXME_STUB'].get_qerrno
    get_qerrno.restype = error_t
    get_qerrno.argtypes = []
    get_qword = _libraries['FIXME_STUB'].get_qword
    get_qword.restype = uint64
    get_qword.argtypes = [ea_t]
    get_radix = _libraries['FIXME_STUB'].get_radix
    get_radix.restype = ctypes.c_int32
    get_radix.argtypes = [flags_t, ctypes.c_int32]
    get_refinfo = _libraries['FIXME_STUB'].get_refinfo
    get_refinfo.restype = ctypes.c_char
    get_refinfo.argtypes = [ctypes.POINTER(struct_refinfo_t), ea_t, ctypes.c_int32]
    get_refinfo_descs = _libraries['FIXME_STUB'].get_refinfo_descs
    get_refinfo_descs.restype = None
    get_refinfo_descs.argtypes = [ctypes.POINTER(refinfo_desc_vec_t)]
    get_reftype_by_size = _libraries['FIXME_STUB'].get_reftype_by_size
    get_reftype_by_size.restype = reftype_t
    get_reftype_by_size.argtypes = [size_t]
    get_reg_name = _libraries['FIXME_STUB'].get_reg_name
    get_reg_name.restype = ssize_t
    get_reg_name.argtypes = [ctypes.POINTER(qstring), ctypes.c_int32, size_t, ctypes.c_int32]
    get_reg_val = _libraries['FIXME_STUB'].get_reg_val
    get_reg_val.restype = ctypes.c_char
    get_reg_val.argtypes = [ctypes.c_char_p, ctypes.POINTER(uint64)]
    get_reg_vals = _libraries['FIXME_STUB'].get_reg_vals
    get_reg_vals.restype = ctypes.c_int32
    get_reg_vals.argtypes = [thid_t, ctypes.c_int32, ctypes.POINTER(struct_regval_t)]
    get_registered_actions = _libraries['FIXME_STUB'].get_registered_actions
    get_registered_actions.restype = None
    get_registered_actions.argtypes = [ctypes.POINTER(qstrvec_t)]
    get_ret_tev_return = _libraries['FIXME_STUB'].get_ret_tev_return
    get_ret_tev_return.restype = ea_t
    get_ret_tev_return.argtypes = [ctypes.c_int32]
    get_root_filename = _libraries['FIXME_STUB'].get_root_filename
    get_root_filename.restype = ssize_t
    get_root_filename.argtypes = [ctypes.c_char_p, size_t]
    get_scalar_bt = _libraries['FIXME_STUB'].get_scalar_bt
    get_scalar_bt.restype = type_t
    get_scalar_bt.argtypes = [ctypes.c_int32]
    get_screen_ea = _libraries['FIXME_STUB'].get_screen_ea
    get_screen_ea.restype = ea_t
    get_screen_ea.argtypes = []
    get_secs = _libraries['FIXME_STUB'].get_secs
    get_secs.restype = uint32
    get_secs.argtypes = [qtime64_t]
    get_segm_base = _libraries['FIXME_STUB'].get_segm_base
    get_segm_base.restype = ea_t
    get_segm_base.argtypes = [ctypes.POINTER(struct_segment_t)]
    get_segm_by_name = _libraries['FIXME_STUB'].get_segm_by_name
    get_segm_by_name.restype = ctypes.POINTER(struct_segment_t)
    get_segm_by_name.argtypes = [ctypes.c_char_p]
    get_segm_by_sel = _libraries['FIXME_STUB'].get_segm_by_sel
    get_segm_by_sel.restype = ctypes.POINTER(struct_segment_t)
    get_segm_by_sel.argtypes = [sel_t]
    get_segm_class = _libraries['FIXME_STUB'].get_segm_class
    get_segm_class.restype = ssize_t
    get_segm_class.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_segment_t)]
    get_segm_expr = _libraries['FIXME_STUB'].get_segm_expr
    get_segm_expr.restype = ssize_t
    get_segm_expr.argtypes = [ctypes.POINTER(qstring), ea_t, sel_t]
    get_segm_name = _libraries['FIXME_STUB'].get_segm_name
    get_segm_name.restype = ssize_t
    get_segm_name.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_segment_t), ctypes.c_int32]
    get_segm_num = _libraries['FIXME_STUB'].get_segm_num
    get_segm_num.restype = ctypes.c_int32
    get_segm_num.argtypes = [ea_t]
    get_segm_para = _libraries['FIXME_STUB'].get_segm_para
    get_segm_para.restype = ea_t
    get_segm_para.argtypes = [ctypes.POINTER(struct_segment_t)]
    get_segm_qty = _libraries['FIXME_STUB'].get_segm_qty
    get_segm_qty.restype = ctypes.c_int32
    get_segm_qty.argtypes = []
    get_segment_alignment = _libraries['FIXME_STUB'].get_segment_alignment
    get_segment_alignment.restype = ctypes.c_char_p
    get_segment_alignment.argtypes = [uchar]
    get_segment_cmt = _libraries['FIXME_STUB'].get_segment_cmt
    get_segment_cmt.restype = ssize_t
    get_segment_cmt.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_segment_t), ctypes.c_char]
    get_segment_combination = _libraries['FIXME_STUB'].get_segment_combination
    get_segment_combination.restype = ctypes.c_char_p
    get_segment_combination.argtypes = [uchar]
    get_segment_translations = _libraries['FIXME_STUB'].get_segment_translations
    get_segment_translations.restype = ssize_t
    get_segment_translations.argtypes = [ctypes.POINTER(eavec_t), ea_t]
    get_selector_qty = _libraries['FIXME_STUB'].get_selector_qty
    get_selector_qty.restype = size_t
    get_selector_qty.argtypes = []
    get_short_name = _libraries['FIXME_STUB'].get_short_name
    get_short_name.restype = qstring
    get_short_name.argtypes = [ea_t, ctypes.c_int32]
    get_source_linnum = _libraries['FIXME_STUB'].get_source_linnum
    get_source_linnum.restype = uval_t
    get_source_linnum.argtypes = [ea_t]
    get_sourcefile = _libraries['FIXME_STUB'].get_sourcefile
    get_sourcefile.restype = ctypes.c_char_p
    get_sourcefile.argtypes = [ea_t, ctypes.POINTER(struct_range_t)]
    get_sp_delta = _libraries['FIXME_STUB'].get_sp_delta
    get_sp_delta.restype = sval_t
    get_sp_delta.argtypes = [ctypes.POINTER(struct_func_t), ea_t]
    get_sp_val = _libraries['FIXME_STUB'].get_sp_val
    get_sp_val.restype = ctypes.c_char
    get_sp_val.argtypes = [ctypes.POINTER(ea_t)]
    get_spd = _libraries['FIXME_STUB'].get_spd
    get_spd.restype = sval_t
    get_spd.argtypes = [ctypes.POINTER(struct_func_t), ea_t]
    get_special_folder = _libraries['FIXME_STUB'].get_special_folder
    get_special_folder.restype = ctypes.c_char
    get_special_folder.argtypes = [ctypes.c_char_p, size_t, ctypes.c_int32]
    get_spoiled_reg = _libraries['FIXME_STUB'].get_spoiled_reg
    get_spoiled_reg.restype = ctypes.c_int32
    get_spoiled_reg.argtypes = [ctypes.POINTER(struct_insn_t), ctypes.POINTER(uint32), size_t]
    get_sptr = _libraries['FIXME_STUB'].get_sptr
    get_sptr.restype = ctypes.POINTER(struct_struc_t)
    get_sptr.argtypes = [ctypes.POINTER(struct_member_t)]
    get_srcdbg_paths = _libraries['FIXME_STUB'].get_srcdbg_paths
    get_srcdbg_paths.restype = ssize_t
    get_srcdbg_paths.argtypes = [ctypes.POINTER(qstring)]
    get_srcdbg_undesired_paths = _libraries['FIXME_STUB'].get_srcdbg_undesired_paths
    get_srcdbg_undesired_paths.restype = ssize_t
    get_srcdbg_undesired_paths.argtypes = [ctypes.POINTER(qstring)]
    get_srcinfo_provider = _libraries['FIXME_STUB'].get_srcinfo_provider
    get_srcinfo_provider.restype = ctypes.POINTER(struct_srcinfo_provider_t)
    get_srcinfo_provider.argtypes = [ctypes.c_char_p]
    get_sreg = _libraries['FIXME_STUB'].get_sreg
    get_sreg.restype = sel_t
    get_sreg.argtypes = [ea_t, ctypes.c_int32]
    get_sreg_range = _libraries['FIXME_STUB'].get_sreg_range
    get_sreg_range.restype = ctypes.c_char
    get_sreg_range.argtypes = [ctypes.POINTER(struct_sreg_range_t), ea_t, ctypes.c_int32]
    get_sreg_range_num = _libraries['FIXME_STUB'].get_sreg_range_num
    get_sreg_range_num.restype = ctypes.c_int32
    get_sreg_range_num.argtypes = [ea_t, ctypes.c_int32]
    get_sreg_ranges_qty = _libraries['FIXME_STUB'].get_sreg_ranges_qty
    get_sreg_ranges_qty.restype = size_t
    get_sreg_ranges_qty.argtypes = [ctypes.c_int32]
    get_std_dirtree = _libraries['FIXME_STUB'].get_std_dirtree
    get_std_dirtree.restype = ctypes.POINTER(struct_dirtree_t)
    get_std_dirtree.argtypes = [dirtree_id_t]
    get_step_trace_options = _libraries['FIXME_STUB'].get_step_trace_options
    get_step_trace_options.restype = ctypes.c_int32
    get_step_trace_options.argtypes = []
    get_stkvar = _libraries['FIXME_STUB'].get_stkvar
    get_stkvar.restype = ctypes.POINTER(struct_member_t)
    get_stkvar.argtypes = [ctypes.POINTER(sval_t), ctypes.POINTER(struct_insn_t), ctypes.POINTER(struct_op_t), sval_t]
    get_stock_tinfo = _libraries['FIXME_STUB'].get_stock_tinfo
    get_stock_tinfo.restype = ctypes.c_char
    get_stock_tinfo.argtypes = [ctypes.POINTER(struct_tinfo_t), stock_type_id_t]
    get_str_encoding_idx = _libraries['FIXME_STUB'].get_str_encoding_idx
    get_str_encoding_idx.restype = uchar
    get_str_encoding_idx.argtypes = [int32]
    get_str_term1 = _libraries['FIXME_STUB'].get_str_term1
    get_str_term1.restype = ctypes.c_char
    get_str_term1.argtypes = [int32]
    get_str_term2 = _libraries['FIXME_STUB'].get_str_term2
    get_str_term2.restype = ctypes.c_char
    get_str_term2.argtypes = [int32]
    get_str_type = _libraries['FIXME_STUB'].get_str_type
    get_str_type.restype = uint32
    get_str_type.argtypes = [ea_t]
    get_str_type_code = _libraries['FIXME_STUB'].get_str_type_code
    get_str_type_code.restype = uchar
    get_str_type_code.argtypes = [int32]
    get_str_type_prefix_length = _libraries['FIXME_STUB'].get_str_type_prefix_length
    get_str_type_prefix_length.restype = size_t
    get_str_type_prefix_length.argtypes = [int32]
    get_strid = _libraries['FIXME_STUB'].get_strid
    get_strid.restype = tid_t
    get_strid.argtypes = [ea_t]
    get_strlist_item = _libraries['FIXME_STUB'].get_strlist_item
    get_strlist_item.restype = ctypes.c_char
    get_strlist_item.argtypes = [ctypes.POINTER(struct_string_info_t), size_t]
    get_strlist_options = _libraries['FIXME_STUB'].get_strlist_options
    get_strlist_options.restype = ctypes.POINTER(struct_strwinsetup_t)
    get_strlist_options.argtypes = []
    get_strlist_qty = _libraries['FIXME_STUB'].get_strlist_qty
    get_strlist_qty.restype = size_t
    get_strlist_qty.argtypes = []
    get_strlit_contents = _libraries['FIXME_STUB'].get_strlit_contents
    get_strlit_contents.restype = ssize_t
    get_strlit_contents.argtypes = [ctypes.POINTER(qstring), ea_t, size_t, int32, ctypes.POINTER(size_t), ctypes.c_int32]
    get_stroff_path = _libraries['FIXME_STUB'].get_stroff_path
    get_stroff_path.restype = ctypes.c_int32
    get_stroff_path.argtypes = [ctypes.POINTER(tid_t), ctypes.POINTER(adiff_t), ea_t, ctypes.c_int32]
    get_strtype_bpu = _libraries['FIXME_STUB'].get_strtype_bpu
    get_strtype_bpu.restype = ctypes.c_int32
    get_strtype_bpu.argtypes = [int32]
    get_struc = _libraries['FIXME_STUB'].get_struc
    get_struc.restype = ctypes.POINTER(struct_struc_t)
    get_struc.argtypes = [tid_t]
    get_struc_by_idx = _libraries['FIXME_STUB'].get_struc_by_idx
    get_struc_by_idx.restype = tid_t
    get_struc_by_idx.argtypes = [uval_t]
    get_struc_cmt = _libraries['FIXME_STUB'].get_struc_cmt
    get_struc_cmt.restype = ssize_t
    get_struc_cmt.argtypes = [ctypes.POINTER(qstring), tid_t, ctypes.c_char]
    get_struc_first_offset = _libraries['FIXME_STUB'].get_struc_first_offset
    get_struc_first_offset.restype = ea_t
    get_struc_first_offset.argtypes = [ctypes.POINTER(struct_struc_t)]
    get_struc_id = _libraries['FIXME_STUB'].get_struc_id
    get_struc_id.restype = tid_t
    get_struc_id.argtypes = [ctypes.c_char_p]
    get_struc_idx = _libraries['FIXME_STUB'].get_struc_idx
    get_struc_idx.restype = uval_t
    get_struc_idx.argtypes = [tid_t]
    get_struc_last_offset = _libraries['FIXME_STUB'].get_struc_last_offset
    get_struc_last_offset.restype = ea_t
    get_struc_last_offset.argtypes = [ctypes.POINTER(struct_struc_t)]
    get_struc_name = _libraries['FIXME_STUB'].get_struc_name
    get_struc_name.restype = qstring
    get_struc_name.argtypes = [tid_t, ctypes.c_int32]
    get_struc_next_offset = _libraries['FIXME_STUB'].get_struc_next_offset
    get_struc_next_offset.restype = ea_t
    get_struc_next_offset.argtypes = [ctypes.POINTER(struct_struc_t), ea_t]
    get_struc_prev_offset = _libraries['FIXME_STUB'].get_struc_prev_offset
    get_struc_prev_offset.restype = ea_t
    get_struc_prev_offset.argtypes = [ctypes.POINTER(struct_struc_t), ea_t]
    get_struc_qty = _libraries['FIXME_STUB'].get_struc_qty
    get_struc_qty.restype = size_t
    get_struc_qty.argtypes = []
    get_struc_size = _libraries['FIXME_STUB'].get_struc_size
    get_struc_size.restype = asize_t
    get_struc_size.argtypes = [tid_t]
    get_struct_operand = _libraries['FIXME_STUB'].get_struct_operand
    get_struct_operand.restype = ctypes.c_int32
    get_struct_operand.argtypes = [ctypes.POINTER(adiff_t), ctypes.POINTER(adiff_t), ctypes.POINTER(tid_t), ea_t, ctypes.c_int32]
    get_switch_info = _libraries['FIXME_STUB'].get_switch_info
    get_switch_info.restype = ssize_t
    get_switch_info.argtypes = [ctypes.POINTER(struct_switch_info_t), ea_t]
    get_switch_parent = _libraries['FIXME_STUB'].get_switch_parent
    get_switch_parent.restype = ea_t
    get_switch_parent.argtypes = [ea_t]
    get_synced_group = _libraries['FIXME_STUB'].get_synced_group
    get_synced_group.restype = ctypes.POINTER(struct_synced_group_t)
    get_synced_group.argtypes = [ctypes.POINTER(struct_TWidget)]
    get_tab_size = _libraries['FIXME_STUB'].get_tab_size
    get_tab_size.restype = ctypes.c_int32
    get_tab_size.argtypes = [ctypes.c_char_p]
    get_terminate = _libraries['FIXME_STUB'].get_terminate
    get_terminate.restype = terminate_handler
    get_terminate.argtypes = []
    get_tev_ea = _libraries['FIXME_STUB'].get_tev_ea
    get_tev_ea.restype = ea_t
    get_tev_ea.argtypes = [ctypes.c_int32]
    get_tev_event = _libraries['FIXME_STUB'].get_tev_event
    get_tev_event.restype = ctypes.c_char
    get_tev_event.argtypes = [ctypes.c_int32, ctypes.POINTER(struct_debug_event_t)]
    get_tev_info = _libraries['FIXME_STUB'].get_tev_info
    get_tev_info.restype = ctypes.c_char
    get_tev_info.argtypes = [ctypes.c_int32, ctypes.POINTER(struct_tev_info_t)]
    get_tev_memory_info = _libraries['FIXME_STUB'].get_tev_memory_info
    get_tev_memory_info.restype = ctypes.c_char
    get_tev_memory_info.argtypes = [ctypes.c_int32, ctypes.POINTER(meminfo_vec_t)]
    get_tev_qty = _libraries['FIXME_STUB'].get_tev_qty
    get_tev_qty.restype = ctypes.c_int32
    get_tev_qty.argtypes = []
    get_tev_tid = _libraries['FIXME_STUB'].get_tev_tid
    get_tev_tid.restype = ctypes.c_int32
    get_tev_tid.argtypes = [ctypes.c_int32]
    get_tev_type = _libraries['FIXME_STUB'].get_tev_type
    get_tev_type.restype = ctypes.c_int32
    get_tev_type.argtypes = [ctypes.c_int32]
    get_thread_qty = _libraries['FIXME_STUB'].get_thread_qty
    get_thread_qty.restype = ctypes.c_int32
    get_thread_qty.argtypes = []
    get_tinfo = _libraries['FIXME_STUB'].get_tinfo
    get_tinfo.restype = ctypes.c_char
    get_tinfo.argtypes = [ctypes.POINTER(struct_tinfo_t), ea_t]
    get_tinfo_attr = _libraries['FIXME_STUB'].get_tinfo_attr
    get_tinfo_attr.restype = ctypes.c_char
    get_tinfo_attr.argtypes = [uint32, ctypes.POINTER(qstring), ctypes.POINTER(struct_bytevec_t), ctypes.c_char]
    get_tinfo_attrs = _libraries['FIXME_STUB'].get_tinfo_attrs
    get_tinfo_attrs.restype = ctypes.c_char
    get_tinfo_attrs.argtypes = [uint32, ctypes.POINTER(type_attrs_t), ctypes.c_char]
    get_tinfo_details = _libraries['FIXME_STUB'].get_tinfo_details
    get_tinfo_details.restype = ctypes.c_char
    get_tinfo_details.argtypes = [uint32, type_t, ctypes.POINTER(None)]
    get_tinfo_pdata = _libraries['FIXME_STUB'].get_tinfo_pdata
    get_tinfo_pdata.restype = size_t
    get_tinfo_pdata.argtypes = [ctypes.POINTER(None), uint32, ctypes.c_int32]
    get_tinfo_property = _libraries['FIXME_STUB'].get_tinfo_property
    get_tinfo_property.restype = size_t
    get_tinfo_property.argtypes = [uint32, ctypes.c_int32]
    get_tinfo_size = _libraries['FIXME_STUB'].get_tinfo_size
    get_tinfo_size.restype = size_t
    get_tinfo_size.argtypes = [ctypes.POINTER(uint32), uint32, ctypes.c_int32]
    get_token = _libraries['FIXME_STUB'].get_token
    get_token.restype = ctypes.c_char
    get_token.argtypes = [ctypes.POINTER(struct_token_t), ctypes.POINTER(struct_lexer_t), ctypes.POINTER(tokenstack_t)]
    get_trace_base_address = _libraries['FIXME_STUB'].get_trace_base_address
    get_trace_base_address.restype = ea_t
    get_trace_base_address.argtypes = []
    get_trace_dynamic_register_set = _libraries['FIXME_STUB'].get_trace_dynamic_register_set
    get_trace_dynamic_register_set.restype = None
    get_trace_dynamic_register_set.argtypes = [ctypes.POINTER(struct_dynamic_register_set_t)]
    get_trace_file_desc = _libraries['FIXME_STUB'].get_trace_file_desc
    get_trace_file_desc.restype = ctypes.c_char
    get_trace_file_desc.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p]
    get_trace_platform = _libraries['FIXME_STUB'].get_trace_platform
    get_trace_platform.restype = ctypes.c_char_p
    get_trace_platform.argtypes = []
    get_tryblks = _libraries['FIXME_STUB'].get_tryblks
    get_tryblks.restype = size_t
    get_tryblks.argtypes = [ctypes.POINTER(tryblks_t), ctypes.POINTER(struct_range_t)]
    get_type_flags = _libraries['FIXME_STUB'].get_type_flags
    get_type_flags.restype = type_t
    get_type_flags.argtypes = [type_t]
    get_type_ordinal = _libraries['FIXME_STUB'].get_type_ordinal
    get_type_ordinal.restype = int32
    get_type_ordinal.argtypes = [ctypes.POINTER(struct_til_t), ctypes.c_char_p]
    get_unexpected = _libraries['FIXME_STUB'].get_unexpected
    get_unexpected.restype = unexpected_handler
    get_unexpected.argtypes = []
    get_usecs = _libraries['FIXME_STUB'].get_usecs
    get_usecs.restype = uint32
    get_usecs.argtypes = [qtime64_t]
    get_user_idadir = _libraries['FIXME_STUB'].get_user_idadir
    get_user_idadir.restype = ctypes.c_char_p
    get_user_idadir.argtypes = []
    get_user_input_event = _libraries['FIXME_STUB'].get_user_input_event
    get_user_input_event.restype = ctypes.c_char
    get_user_input_event.argtypes = [ctypes.POINTER(struct_input_event_t)]
    get_user_strlist_options = _libraries['FIXME_STUB'].get_user_strlist_options
    get_user_strlist_options.restype = None
    get_user_strlist_options.argtypes = [ctypes.POINTER(struct_strwinsetup_t)]
    get_utf8_char = _libraries['FIXME_STUB'].get_utf8_char
    get_utf8_char.restype = wchar32_t
    get_utf8_char.argtypes = [ctypes.POINTER(ctypes.c_char_p)]
    get_vftable_ea = _libraries['FIXME_STUB'].get_vftable_ea
    get_vftable_ea.restype = ea_t
    get_vftable_ea.argtypes = [uint32]
    get_vftable_ordinal = _libraries['FIXME_STUB'].get_vftable_ordinal
    get_vftable_ordinal.restype = uint32
    get_vftable_ordinal.argtypes = [ea_t]
    get_view_renderer_type = _libraries['FIXME_STUB'].get_view_renderer_type
    get_view_renderer_type.restype = tcc_renderer_type_t
    get_view_renderer_type.argtypes = [ctypes.POINTER(struct_TWidget)]
    get_viewer_graph = _libraries['FIXME_STUB'].get_viewer_graph
    get_viewer_graph.restype = ctypes.POINTER(struct_mutable_graph_t)
    get_viewer_graph.argtypes = [ctypes.POINTER(graph_viewer_t)]
    get_viewer_place_type = _libraries['FIXME_STUB'].get_viewer_place_type
    get_viewer_place_type.restype = tcc_place_type_t
    get_viewer_place_type.argtypes = [ctypes.POINTER(struct_TWidget)]
    get_viewer_user_data = _libraries['FIXME_STUB'].get_viewer_user_data
    get_viewer_user_data.restype = ctypes.POINTER(None)
    get_viewer_user_data.argtypes = [ctypes.POINTER(struct_TWidget)]
    get_visible_name = _libraries['FIXME_STUB'].get_visible_name
    get_visible_name.restype = qstring
    get_visible_name.argtypes = [ea_t, ctypes.c_int32]
    get_visible_segm_name = _libraries['FIXME_STUB'].get_visible_segm_name
    get_visible_segm_name.restype = ssize_t
    get_visible_segm_name.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_segment_t)]
    get_wide_byte = _libraries['FIXME_STUB'].get_wide_byte
    get_wide_byte.restype = uint64
    get_wide_byte.argtypes = [ea_t]
    get_wide_dword = _libraries['FIXME_STUB'].get_wide_dword
    get_wide_dword.restype = uint64
    get_wide_dword.argtypes = [ea_t]
    get_wide_word = _libraries['FIXME_STUB'].get_wide_word
    get_wide_word.restype = uint64
    get_wide_word.argtypes = [ea_t]
    get_widget_title = _libraries['FIXME_STUB'].get_widget_title
    get_widget_title.restype = ctypes.c_char
    get_widget_title.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_TWidget)]
    get_widget_type = _libraries['FIXME_STUB'].get_widget_type
    get_widget_type.restype = twidget_type_t
    get_widget_type.argtypes = [ctypes.POINTER(struct_TWidget)]
    get_window_id = _libraries['FIXME_STUB'].get_window_id
    get_window_id.restype = ctypes.POINTER(None)
    get_window_id.argtypes = [ctypes.c_char_p]
    get_word = _libraries['FIXME_STUB'].get_word
    get_word.restype = ushort
    get_word.argtypes = [ea_t]
    get_xrefpos = _libraries['FIXME_STUB'].get_xrefpos
    get_xrefpos.restype = ssize_t
    get_xrefpos.argtypes = [ctypes.POINTER(struct_xrefpos_t), ea_t]
    get_zero_ranges = _libraries['FIXME_STUB'].get_zero_ranges
    get_zero_ranges.restype = ctypes.c_char
    get_zero_ranges.argtypes = [ctypes.POINTER(struct_rangeset_t), ctypes.POINTER(struct_range_t)]
    getc = _libraries['FIXME_STUB'].getc
    getc.restype = ctypes.c_int32
    getc.argtypes = [ctypes.POINTER(FILE)]
    getchar = _libraries['FIXME_STUB'].getchar
    getchar.restype = ctypes.c_int32
    getchar.argtypes = []
    getcwd = _libraries['FIXME_STUB'].getcwd
    getcwd.restype = ctypes.c_char_p
    getcwd.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    getenv = _libraries['FIXME_STUB'].getenv
    getenv.restype = ctypes.c_char_p
    getenv.argtypes = [ctypes.c_char_p]
    getenv_s = _libraries['FIXME_STUB'].getenv_s
    getenv_s.restype = errno_t
    getenv_s.argtypes = [ctypes.POINTER(size_t), ctypes.c_char_p, rsize_t, ctypes.c_char_p]
    getinf = _libraries['FIXME_STUB'].getinf
    getinf.restype = size_t
    getinf.argtypes = [inftag_t]
    getinf_buf = _libraries['FIXME_STUB'].getinf_buf
    getinf_buf.restype = ssize_t
    getinf_buf.argtypes = [inftag_t, ctypes.POINTER(None), size_t]
    getinf_flag = _libraries['FIXME_STUB'].getinf_flag
    getinf_flag.restype = ctypes.c_char
    getinf_flag.argtypes = [inftag_t, uint32]
    getinf_str = _libraries['FIXME_STUB'].getinf_str
    getinf_str.restype = ssize_t
    getinf_str.argtypes = [ctypes.POINTER(qstring), inftag_t]
    getn_bpt = _libraries['FIXME_STUB'].getn_bpt
    getn_bpt.restype = ctypes.c_char
    getn_bpt.argtypes = [ctypes.c_int32, ctypes.POINTER(struct_bpt_t)]
    getn_enum = _libraries['FIXME_STUB'].getn_enum
    getn_enum.restype = enum_t
    getn_enum.argtypes = [size_t]
    getn_fchunk = _libraries['FIXME_STUB'].getn_fchunk
    getn_fchunk.restype = ctypes.POINTER(struct_func_t)
    getn_fchunk.argtypes = [ctypes.c_int32]
    getn_func = _libraries['FIXME_STUB'].getn_func
    getn_func.restype = ctypes.POINTER(struct_func_t)
    getn_func.argtypes = [size_t]
    getn_hidden_range = _libraries['FIXME_STUB'].getn_hidden_range
    getn_hidden_range.restype = ctypes.POINTER(struct_hidden_range_t)
    getn_hidden_range.argtypes = [ctypes.c_int32]
    getn_selector = _libraries['FIXME_STUB'].getn_selector
    getn_selector.restype = ctypes.c_char
    getn_selector.argtypes = [ctypes.POINTER(sel_t), ctypes.POINTER(ea_t), ctypes.c_int32]
    getn_sreg_range = _libraries['FIXME_STUB'].getn_sreg_range
    getn_sreg_range.restype = ctypes.c_char
    getn_sreg_range.argtypes = [ctypes.POINTER(struct_sreg_range_t), ctypes.c_int32, ctypes.c_int32]
    getn_thread = _libraries['FIXME_STUB'].getn_thread
    getn_thread.restype = thid_t
    getn_thread.argtypes = [ctypes.c_int32]
    getn_thread_name = _libraries['FIXME_STUB'].getn_thread_name
    getn_thread_name.restype = ctypes.c_char_p
    getn_thread_name.argtypes = [ctypes.c_int32]
    getnode = _libraries['FIXME_STUB'].getnode
    getnode.restype = struct_netnode
    getnode.argtypes = [ea_t]
    getnseg = _libraries['FIXME_STUB'].getnseg
    getnseg.restype = ctypes.POINTER(struct_segment_t)
    getnseg.argtypes = [ctypes.c_int32]
    gets_s = _libraries['FIXME_STUB'].gets_s
    gets_s.restype = ctypes.c_char_p
    gets_s.argtypes = [ctypes.c_char_p, rsize_t]
    getseg = _libraries['FIXME_STUB'].getseg
    getseg.restype = ctypes.POINTER(struct_segment_t)
    getseg.argtypes = [ea_t]
    getsysfile = _libraries['FIXME_STUB'].getsysfile
    getsysfile.restype = ctypes.c_char_p
    getsysfile.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, ctypes.c_char_p]
    getw = _libraries['FIXME_STUB'].getw
    getw.restype = ctypes.c_int32
    getw.argtypes = [ctypes.POINTER(FILE)]
    getwc = _libraries['FIXME_STUB'].getwc
    getwc.restype = wint_t
    getwc.argtypes = [ctypes.POINTER(FILE)]
    getwchar = _libraries['FIXME_STUB'].getwchar
    getwchar.restype = wint_t
    getwchar.argtypes = []
    graph_trace = _libraries['FIXME_STUB'].graph_trace
    graph_trace.restype = ctypes.c_char
    graph_trace.argtypes = []
    grentry = _libraries['FIXME_STUB'].grentry
    grentry.restype = ssize_t
    grentry.argtypes = [graph_notification_t]
    guess_func_cc = _libraries['FIXME_STUB'].guess_func_cc
    guess_func_cc.restype = cm_t
    guess_func_cc.argtypes = [ctypes.POINTER(struct_func_type_data_t), ctypes.c_int32, ctypes.c_int32]
    guess_tinfo = _libraries['FIXME_STUB'].guess_tinfo
    guess_tinfo.restype = ctypes.c_int32
    guess_tinfo.argtypes = [ctypes.POINTER(struct_tinfo_t), tid_t]
    h2ti = _libraries['FIXME_STUB'].h2ti
    h2ti.restype = ctypes.c_int32
    h2ti.argtypes = [ctypes.POINTER(struct_til_t), ctypes.POINTER(struct_lexer_t), ctypes.c_char_p, ctypes.c_int32, h2ti_type_cb, h2ti_type_cb, printer_t, ctypes.POINTER(None), abs_t]
    handle_debug_event = _libraries['FIXME_STUB'].handle_debug_event
    handle_debug_event.restype = ctypes.c_int32
    handle_debug_event.argtypes = [ctypes.POINTER(struct_debug_event_t), ctypes.c_int32]
    handle_fixups_in_macro = _libraries['FIXME_STUB'].handle_fixups_in_macro
    handle_fixups_in_macro.restype = ctypes.c_char
    handle_fixups_in_macro.argtypes = [ctypes.POINTER(struct_refinfo_t), ea_t, fixup_type_t, uint32]
    has_aflag_linnum = _libraries['FIXME_STUB'].has_aflag_linnum
    has_aflag_linnum.restype = ctypes.c_char
    has_aflag_linnum.argtypes = [aflags_t]
    has_aflag_lname = _libraries['FIXME_STUB'].has_aflag_lname
    has_aflag_lname.restype = ctypes.c_char
    has_aflag_lname.argtypes = [aflags_t]
    has_aflag_ti = _libraries['FIXME_STUB'].has_aflag_ti
    has_aflag_ti.restype = ctypes.c_char
    has_aflag_ti.argtypes = [aflags_t]
    has_aflag_ti0 = _libraries['FIXME_STUB'].has_aflag_ti0
    has_aflag_ti0.restype = ctypes.c_char
    has_aflag_ti0.argtypes = [aflags_t]
    has_aflag_ti1 = _libraries['FIXME_STUB'].has_aflag_ti1
    has_aflag_ti1.restype = ctypes.c_char
    has_aflag_ti1.argtypes = [aflags_t]
    has_any_name = _libraries['FIXME_STUB'].has_any_name
    has_any_name.restype = ctypes.c_char
    has_any_name.argtypes = [flags_t]
    has_auto_name = _libraries['FIXME_STUB'].has_auto_name
    has_auto_name.restype = ctypes.c_char
    has_auto_name.argtypes = [flags_t]
    has_cf_chg = _libraries['FIXME_STUB'].has_cf_chg
    has_cf_chg.restype = ctypes.c_char
    has_cf_chg.argtypes = [uint32, uint]
    has_cf_use = _libraries['FIXME_STUB'].has_cf_use
    has_cf_use.restype = ctypes.c_char
    has_cf_use.argtypes = [uint32, uint]
    has_cmt = _libraries['FIXME_STUB'].has_cmt
    has_cmt.restype = ctypes.c_char
    has_cmt.argtypes = [flags_t]
    has_dummy_name = _libraries['FIXME_STUB'].has_dummy_name
    has_dummy_name.restype = ctypes.c_char
    has_dummy_name.argtypes = [flags_t]
    has_external_refs = _libraries['FIXME_STUB'].has_external_refs
    has_external_refs.restype = ctypes.c_char
    has_external_refs.argtypes = [ctypes.POINTER(struct_func_t), ea_t]
    has_extra_cmts = _libraries['FIXME_STUB'].has_extra_cmts
    has_extra_cmts.restype = ctypes.c_char
    has_extra_cmts.argtypes = [flags_t]
    has_file_ext = _libraries['FIXME_STUB'].has_file_ext
    has_file_ext.restype = ctypes.c_char
    has_file_ext.argtypes = [ctypes.c_char_p]
    has_immd = _libraries['FIXME_STUB'].has_immd
    has_immd.restype = ctypes.c_char
    has_immd.argtypes = [flags_t]
    has_insn_feature = _libraries['FIXME_STUB'].has_insn_feature
    has_insn_feature.restype = ctypes.c_char
    has_insn_feature.argtypes = [ctypes.c_int32, uint32]
    has_lname = _libraries['FIXME_STUB'].has_lname
    has_lname.restype = ctypes.c_char
    has_lname.argtypes = [ea_t]
    has_name = _libraries['FIXME_STUB'].has_name
    has_name.restype = ctypes.c_char
    has_name.argtypes = [flags_t]
    has_regvar = _libraries['FIXME_STUB'].has_regvar
    has_regvar.restype = ctypes.c_char
    has_regvar.argtypes = [ctypes.POINTER(struct_func_t), ea_t]
    has_ti = _libraries['FIXME_STUB'].has_ti
    has_ti.restype = ctypes.c_char
    has_ti.argtypes = [ea_t]
    has_ti0 = _libraries['FIXME_STUB'].has_ti0
    has_ti0.restype = ctypes.c_char
    has_ti0.argtypes = [ea_t]
    has_ti1 = _libraries['FIXME_STUB'].has_ti1
    has_ti1.restype = ctypes.c_char
    has_ti1.argtypes = [ea_t]
    has_user_name = _libraries['FIXME_STUB'].has_user_name
    has_user_name.restype = ctypes.c_char
    has_user_name.argtypes = [flags_t]
    has_value = _libraries['FIXME_STUB'].has_value
    has_value.restype = ctypes.c_char
    has_value.argtypes = [flags_t]
    has_xref = _libraries['FIXME_STUB'].has_xref
    has_xref.restype = ctypes.c_char
    has_xref.argtypes = [flags_t]
    have_set_options = _libraries['FIXME_STUB'].have_set_options
    have_set_options.restype = ctypes.c_char
    have_set_options.argtypes = [ctypes.POINTER(struct_debugger_t)]
    hex_flag = _libraries['FIXME_STUB'].hex_flag
    hex_flag.restype = flags_t
    hex_flag.argtypes = []
    hexplace_t__adjust = _libraries['FIXME_STUB'].hexplace_t__adjust
    hexplace_t__adjust.restype = None
    hexplace_t__adjust.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(None)]
    hexplace_t__beginning = _libraries['FIXME_STUB'].hexplace_t__beginning
    hexplace_t__beginning.restype = ctypes.c_char
    hexplace_t__beginning.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(None)]
    hexplace_t__clone = _libraries['FIXME_STUB'].hexplace_t__clone
    hexplace_t__clone.restype = ctypes.POINTER(struct_place_t)
    hexplace_t__clone.argtypes = [ctypes.POINTER(struct_hexplace_t)]
    hexplace_t__compare = _libraries['FIXME_STUB'].hexplace_t__compare
    hexplace_t__compare.restype = ctypes.c_int32
    hexplace_t__compare.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(struct_place_t)]
    hexplace_t__compare2 = _libraries['FIXME_STUB'].hexplace_t__compare2
    hexplace_t__compare2.restype = ctypes.c_int32
    hexplace_t__compare2.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(struct_place_t), ctypes.POINTER(None)]
    hexplace_t__copyfrom = _libraries['FIXME_STUB'].hexplace_t__copyfrom
    hexplace_t__copyfrom.restype = None
    hexplace_t__copyfrom.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(struct_place_t)]
    hexplace_t__deserialize = _libraries['FIXME_STUB'].hexplace_t__deserialize
    hexplace_t__deserialize.restype = ctypes.c_char
    hexplace_t__deserialize.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    hexplace_t__ea2str = _libraries['FIXME_STUB'].hexplace_t__ea2str
    hexplace_t__ea2str.restype = size_t
    hexplace_t__ea2str.argtypes = [ctypes.c_char_p, size_t, ctypes.POINTER(struct_hexplace_gen_t), ea_t]
    hexplace_t__ending = _libraries['FIXME_STUB'].hexplace_t__ending
    hexplace_t__ending.restype = ctypes.c_char
    hexplace_t__ending.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(None)]
    hexplace_t__enter = _libraries['FIXME_STUB'].hexplace_t__enter
    hexplace_t__enter.restype = ctypes.POINTER(struct_place_t)
    hexplace_t__enter.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(uint32)]
    hexplace_t__generate = _libraries['FIXME_STUB'].hexplace_t__generate
    hexplace_t__generate.restype = ctypes.c_int32
    hexplace_t__generate.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(qstrvec_t), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(color_t), ctypes.POINTER(bgcolor_t), ctypes.POINTER(None), ctypes.c_int32]
    hexplace_t__id = _libraries['FIXME_STUB'].hexplace_t__id
    hexplace_t__id.restype = ctypes.c_int32
    hexplace_t__id.argtypes = [ctypes.POINTER(struct_hexplace_t)]
    hexplace_t__leave = _libraries['FIXME_STUB'].hexplace_t__leave
    hexplace_t__leave.restype = None
    hexplace_t__leave.argtypes = [ctypes.POINTER(struct_hexplace_t), uint32]
    hexplace_t__makeplace = _libraries['FIXME_STUB'].hexplace_t__makeplace
    hexplace_t__makeplace.restype = ctypes.POINTER(struct_place_t)
    hexplace_t__makeplace.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(None), uval_t, ctypes.c_int32]
    hexplace_t__name = _libraries['FIXME_STUB'].hexplace_t__name
    hexplace_t__name.restype = ctypes.c_char_p
    hexplace_t__name.argtypes = [ctypes.POINTER(struct_hexplace_t)]
    hexplace_t__next = _libraries['FIXME_STUB'].hexplace_t__next
    hexplace_t__next.restype = ctypes.c_char
    hexplace_t__next.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(None)]
    hexplace_t__out_one_item = _libraries['FIXME_STUB'].hexplace_t__out_one_item
    hexplace_t__out_one_item.restype = None
    hexplace_t__out_one_item.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(struct_outctx_base_t), ctypes.POINTER(struct_hexplace_gen_t), ctypes.c_int32, ctypes.POINTER(color_t), color_t]
    hexplace_t__prev = _libraries['FIXME_STUB'].hexplace_t__prev
    hexplace_t__prev.restype = ctypes.c_char
    hexplace_t__prev.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(None)]
    hexplace_t__print = _libraries['FIXME_STUB'].hexplace_t__print
    hexplace_t__print.restype = None
    hexplace_t__print.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(qstring), ctypes.POINTER(None)]
    hexplace_t__rebase = _libraries['FIXME_STUB'].hexplace_t__rebase
    hexplace_t__rebase.restype = ctypes.c_char
    hexplace_t__rebase.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(struct_segm_move_infos_t)]
    hexplace_t__serialize = _libraries['FIXME_STUB'].hexplace_t__serialize
    hexplace_t__serialize.restype = None
    hexplace_t__serialize.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(struct_bytevec_t)]
    hexplace_t__toea = _libraries['FIXME_STUB'].hexplace_t__toea
    hexplace_t__toea.restype = ea_t
    hexplace_t__toea.argtypes = [ctypes.POINTER(struct_hexplace_t)]
    hexplace_t__touval = _libraries['FIXME_STUB'].hexplace_t__touval
    hexplace_t__touval.restype = uval_t
    hexplace_t__touval.argtypes = [ctypes.POINTER(struct_hexplace_t), ctypes.POINTER(None)]
    hide_all_bpts = _libraries['FIXME_STUB'].hide_all_bpts
    hide_all_bpts.restype = ctypes.c_int32
    hide_all_bpts.argtypes = []
    hide_border = _libraries['FIXME_STUB'].hide_border
    hide_border.restype = None
    hide_border.argtypes = [ea_t]
    hide_item = _libraries['FIXME_STUB'].hide_item
    hide_item.restype = None
    hide_item.argtypes = [ea_t]
    hide_name = _libraries['FIXME_STUB'].hide_name
    hide_name.restype = None
    hide_name.argtypes = [ea_t]
    hide_wait_box = _libraries['FIXME_STUB'].hide_wait_box
    hide_wait_box.restype = None
    hide_wait_box.argtypes = []
    high = _libraries['FIXME_STUB'].high
    high.restype = int32
    high.argtypes = [ctypes.POINTER(longlong)]
    hook_event_listener = _libraries['FIXME_STUB'].hook_event_listener
    hook_event_listener.restype = ctypes.c_char
    hook_event_listener.argtypes = [hook_type_t, ctypes.POINTER(struct_event_listener_t), ctypes.POINTER(None), ctypes.c_int32]
    hook_to_notification_point = _libraries['FIXME_STUB'].hook_to_notification_point
    hook_to_notification_point.restype = ctypes.c_char
    hook_to_notification_point.argtypes = [hook_type_t, hook_cb_t, ctypes.POINTER(None)]
    hypot = _libraries['FIXME_STUB'].hypot
    hypot.restype = ctypes.c_double
    hypot.argtypes = [ctypes.c_double, ctypes.c_double]
    hypotf = _libraries['FIXME_STUB'].hypotf
    hypotf.restype = ctypes.c_float
    hypotf.argtypes = [ctypes.c_float, ctypes.c_float]
    hypotl = _libraries['FIXME_STUB'].hypotl
    hypotl.restype = ctypes.c_double
    hypotl.argtypes = [ctypes.c_double, ctypes.c_double]
    ida_checkmem = _libraries['FIXME_STUB'].ida_checkmem
    ida_checkmem.restype = None
    ida_checkmem.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    ida_deb = _libraries['FIXME_STUB'].ida_deb
    ida_deb.restype = ctypes.c_int32
    ida_deb.argtypes = [ctypes.c_char_p]
    idadir = _libraries['FIXME_STUB'].idadir
    idadir.restype = ctypes.c_char_p
    idadir.argtypes = [ctypes.c_char_p]
    idaplace_t__adjust = _libraries['FIXME_STUB'].idaplace_t__adjust
    idaplace_t__adjust.restype = None
    idaplace_t__adjust.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(None)]
    idaplace_t__beginning = _libraries['FIXME_STUB'].idaplace_t__beginning
    idaplace_t__beginning.restype = ctypes.c_char
    idaplace_t__beginning.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(None)]
    idaplace_t__clone = _libraries['FIXME_STUB'].idaplace_t__clone
    idaplace_t__clone.restype = ctypes.POINTER(struct_place_t)
    idaplace_t__clone.argtypes = [ctypes.POINTER(struct_idaplace_t)]
    idaplace_t__compare = _libraries['FIXME_STUB'].idaplace_t__compare
    idaplace_t__compare.restype = ctypes.c_int32
    idaplace_t__compare.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(struct_place_t)]
    idaplace_t__compare2 = _libraries['FIXME_STUB'].idaplace_t__compare2
    idaplace_t__compare2.restype = ctypes.c_int32
    idaplace_t__compare2.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(struct_place_t), ctypes.POINTER(None)]
    idaplace_t__copyfrom = _libraries['FIXME_STUB'].idaplace_t__copyfrom
    idaplace_t__copyfrom.restype = None
    idaplace_t__copyfrom.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(struct_place_t)]
    idaplace_t__deserialize = _libraries['FIXME_STUB'].idaplace_t__deserialize
    idaplace_t__deserialize.restype = ctypes.c_char
    idaplace_t__deserialize.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    idaplace_t__ending = _libraries['FIXME_STUB'].idaplace_t__ending
    idaplace_t__ending.restype = ctypes.c_char
    idaplace_t__ending.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(None)]
    idaplace_t__enter = _libraries['FIXME_STUB'].idaplace_t__enter
    idaplace_t__enter.restype = ctypes.POINTER(struct_place_t)
    idaplace_t__enter.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(uint32)]
    idaplace_t__generate = _libraries['FIXME_STUB'].idaplace_t__generate
    idaplace_t__generate.restype = ctypes.c_int32
    idaplace_t__generate.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(qstrvec_t), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(color_t), ctypes.POINTER(bgcolor_t), ctypes.POINTER(None), ctypes.c_int32]
    idaplace_t__id = _libraries['FIXME_STUB'].idaplace_t__id
    idaplace_t__id.restype = ctypes.c_int32
    idaplace_t__id.argtypes = [ctypes.POINTER(struct_idaplace_t)]
    idaplace_t__leave = _libraries['FIXME_STUB'].idaplace_t__leave
    idaplace_t__leave.restype = None
    idaplace_t__leave.argtypes = [ctypes.POINTER(struct_idaplace_t), uint32]
    idaplace_t__makeplace = _libraries['FIXME_STUB'].idaplace_t__makeplace
    idaplace_t__makeplace.restype = ctypes.POINTER(struct_place_t)
    idaplace_t__makeplace.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(None), uval_t, ctypes.c_int32]
    idaplace_t__name = _libraries['FIXME_STUB'].idaplace_t__name
    idaplace_t__name.restype = ctypes.c_char_p
    idaplace_t__name.argtypes = [ctypes.POINTER(struct_idaplace_t)]
    idaplace_t__next = _libraries['FIXME_STUB'].idaplace_t__next
    idaplace_t__next.restype = ctypes.c_char
    idaplace_t__next.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(None)]
    idaplace_t__prev = _libraries['FIXME_STUB'].idaplace_t__prev
    idaplace_t__prev.restype = ctypes.c_char
    idaplace_t__prev.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(None)]
    idaplace_t__print = _libraries['FIXME_STUB'].idaplace_t__print
    idaplace_t__print.restype = None
    idaplace_t__print.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(qstring), ctypes.POINTER(None)]
    idaplace_t__rebase = _libraries['FIXME_STUB'].idaplace_t__rebase
    idaplace_t__rebase.restype = ctypes.c_char
    idaplace_t__rebase.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(struct_segm_move_infos_t)]
    idaplace_t__serialize = _libraries['FIXME_STUB'].idaplace_t__serialize
    idaplace_t__serialize.restype = None
    idaplace_t__serialize.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(struct_bytevec_t)]
    idaplace_t__toea = _libraries['FIXME_STUB'].idaplace_t__toea
    idaplace_t__toea.restype = ea_t
    idaplace_t__toea.argtypes = [ctypes.POINTER(struct_idaplace_t)]
    idaplace_t__touval = _libraries['FIXME_STUB'].idaplace_t__touval
    idaplace_t__touval.restype = uval_t
    idaplace_t__touval.argtypes = [ctypes.POINTER(struct_idaplace_t), ctypes.POINTER(None)]
    idb_utf8 = _libraries['FIXME_STUB'].idb_utf8
    idb_utf8.restype = ctypes.c_char
    idb_utf8.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32]
    idcv_float = _libraries['FIXME_STUB'].idcv_float
    idcv_float.restype = error_t
    idcv_float.argtypes = [ctypes.POINTER(struct_idc_value_t)]
    idcv_int64 = _libraries['FIXME_STUB'].idcv_int64
    idcv_int64.restype = error_t
    idcv_int64.argtypes = [ctypes.POINTER(struct_idc_value_t)]
    idcv_long = _libraries['FIXME_STUB'].idcv_long
    idcv_long.restype = error_t
    idcv_long.argtypes = [ctypes.POINTER(struct_idc_value_t)]
    idcv_num = _libraries['FIXME_STUB'].idcv_num
    idcv_num.restype = error_t
    idcv_num.argtypes = [ctypes.POINTER(struct_idc_value_t)]
    idcv_object = _libraries['FIXME_STUB'].idcv_object
    idcv_object.restype = error_t
    idcv_object.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_class_t)]
    idcv_string = _libraries['FIXME_STUB'].idcv_string
    idcv_string.restype = error_t
    idcv_string.argtypes = [ctypes.POINTER(struct_idc_value_t)]
    ieee_e32 = (struct_fpvalue_t).in_dll(_libraries['FIXME_STUB'], 'ieee_e32') if getattr(_libraries['FIXME_STUB'], 'ieee_e32', None) else None
    ieee_eeul = (struct_fpvalue_t).in_dll(_libraries['FIXME_STUB'], 'ieee_eeul') if getattr(_libraries['FIXME_STUB'], 'ieee_eeul', None) else None
    ieee_elog2 = (struct_fpvalue_t).in_dll(_libraries['FIXME_STUB'], 'ieee_elog2') if getattr(_libraries['FIXME_STUB'], 'ieee_elog2', None) else None
    ieee_eone = (struct_fpvalue_t).in_dll(_libraries['FIXME_STUB'], 'ieee_eone') if getattr(_libraries['FIXME_STUB'], 'ieee_eone', None) else None
    ieee_eoneopi = (struct_fpvalue_t).in_dll(_libraries['FIXME_STUB'], 'ieee_eoneopi') if getattr(_libraries['FIXME_STUB'], 'ieee_eoneopi', None) else None
    ieee_epi = (struct_fpvalue_t).in_dll(_libraries['FIXME_STUB'], 'ieee_epi') if getattr(_libraries['FIXME_STUB'], 'ieee_epi', None) else None
    ieee_esqrt2 = (struct_fpvalue_t).in_dll(_libraries['FIXME_STUB'], 'ieee_esqrt2') if getattr(_libraries['FIXME_STUB'], 'ieee_esqrt2', None) else None
    ieee_etwo = (struct_fpvalue_t).in_dll(_libraries['FIXME_STUB'], 'ieee_etwo') if getattr(_libraries['FIXME_STUB'], 'ieee_etwo', None) else None
    ieee_ezero = (struct_fpvalue_t).in_dll(_libraries['FIXME_STUB'], 'ieee_ezero') if getattr(_libraries['FIXME_STUB'], 'ieee_ezero', None) else None
    ieee_realcvt = _libraries['FIXME_STUB'].ieee_realcvt
    ieee_realcvt.restype = fpvalue_error_t
    ieee_realcvt.argtypes = [ctypes.POINTER(None), ctypes.POINTER(struct_fpvalue_t), uint16]
    ignore_micro = (struct_netnode).in_dll(_libraries['FIXME_STUB'], 'ignore_micro') if getattr(_libraries['FIXME_STUB'], 'ignore_micro', None) else None
    ilogb = _libraries['FIXME_STUB'].ilogb
    ilogb.restype = ctypes.c_int32
    ilogb.argtypes = [ctypes.c_double]
    ilogbf = _libraries['FIXME_STUB'].ilogbf
    ilogbf.restype = ctypes.c_int32
    ilogbf.argtypes = [ctypes.c_float]
    ilogbl = _libraries['FIXME_STUB'].ilogbl
    ilogbl.restype = ctypes.c_int32
    ilogbl.argtypes = [ctypes.c_double]
    import_module = _libraries['FIXME_STUB'].import_module
    import_module.restype = None
    import_module.argtypes = [ctypes.c_char_p, ctypes.c_char_p, uval_t, importer_t, ctypes.c_char_p]
    import_type = _libraries['FIXME_STUB'].import_type
    import_type.restype = tid_t
    import_type.argtypes = [ctypes.POINTER(struct_til_t), ctypes.c_int32, ctypes.c_char_p, ctypes.c_int32]
    includes = _libraries['FIXME_STUB'].includes
    includes.restype = ctypes.c_char
    includes.argtypes = [uval_t, asize_t, uval_t, asize_t]
    inf = (struct_idainfo).in_dll(_libraries['FIXME_STUB'], 'inf') if getattr(_libraries['FIXME_STUB'], 'inf', None) else None
    inf_abi_set_by_user = _libraries['FIXME_STUB'].inf_abi_set_by_user
    inf_abi_set_by_user.restype = ctypes.c_char
    inf_abi_set_by_user.argtypes = []
    inf_allow_non_matched_ops = _libraries['FIXME_STUB'].inf_allow_non_matched_ops
    inf_allow_non_matched_ops.restype = ctypes.c_char
    inf_allow_non_matched_ops.argtypes = []
    inf_allow_sigmulti = _libraries['FIXME_STUB'].inf_allow_sigmulti
    inf_allow_sigmulti.restype = ctypes.c_char
    inf_allow_sigmulti.argtypes = []
    inf_append_sigcmt = _libraries['FIXME_STUB'].inf_append_sigcmt
    inf_append_sigcmt.restype = ctypes.c_char
    inf_append_sigcmt.argtypes = []
    inf_big_arg_align = _libraries['FIXME_STUB'].inf_big_arg_align
    inf_big_arg_align.restype = ctypes.c_char
    inf_big_arg_align.argtypes = [cm_t]
    inf_check_manual_ops = _libraries['FIXME_STUB'].inf_check_manual_ops
    inf_check_manual_ops.restype = ctypes.c_char
    inf_check_manual_ops.argtypes = []
    inf_check_unicode_strlits = _libraries['FIXME_STUB'].inf_check_unicode_strlits
    inf_check_unicode_strlits.restype = ctypes.c_char
    inf_check_unicode_strlits.argtypes = []
    inf_coagulate_code = _libraries['FIXME_STUB'].inf_coagulate_code
    inf_coagulate_code.restype = ctypes.c_char
    inf_coagulate_code.argtypes = []
    inf_coagulate_data = _libraries['FIXME_STUB'].inf_coagulate_data
    inf_coagulate_data.restype = ctypes.c_char
    inf_coagulate_data.argtypes = []
    inf_compress_idb = _libraries['FIXME_STUB'].inf_compress_idb
    inf_compress_idb.restype = ctypes.c_char
    inf_compress_idb.argtypes = []
    inf_create_all_xrefs = _libraries['FIXME_STUB'].inf_create_all_xrefs
    inf_create_all_xrefs.restype = ctypes.c_char
    inf_create_all_xrefs.argtypes = []
    inf_create_func_from_call = _libraries['FIXME_STUB'].inf_create_func_from_call
    inf_create_func_from_call.restype = ctypes.c_char
    inf_create_func_from_call.argtypes = []
    inf_create_func_from_ptr = _libraries['FIXME_STUB'].inf_create_func_from_ptr
    inf_create_func_from_ptr.restype = ctypes.c_char
    inf_create_func_from_ptr.argtypes = []
    inf_create_func_tails = _libraries['FIXME_STUB'].inf_create_func_tails
    inf_create_func_tails.restype = ctypes.c_char
    inf_create_func_tails.argtypes = []
    inf_create_jump_tables = _libraries['FIXME_STUB'].inf_create_jump_tables
    inf_create_jump_tables.restype = ctypes.c_char
    inf_create_jump_tables.argtypes = []
    inf_create_off_on_dref = _libraries['FIXME_STUB'].inf_create_off_on_dref
    inf_create_off_on_dref.restype = ctypes.c_char
    inf_create_off_on_dref.argtypes = []
    inf_create_off_using_fixup = _libraries['FIXME_STUB'].inf_create_off_using_fixup
    inf_create_off_using_fixup.restype = ctypes.c_char
    inf_create_off_using_fixup.argtypes = []
    inf_create_strlit_on_xref = _libraries['FIXME_STUB'].inf_create_strlit_on_xref
    inf_create_strlit_on_xref.restype = ctypes.c_char
    inf_create_strlit_on_xref.argtypes = []
    inf_data_offset = _libraries['FIXME_STUB'].inf_data_offset
    inf_data_offset.restype = ctypes.c_char
    inf_data_offset.argtypes = []
    inf_dbg_no_store_path = _libraries['FIXME_STUB'].inf_dbg_no_store_path
    inf_dbg_no_store_path.restype = ctypes.c_char
    inf_dbg_no_store_path.argtypes = []
    inf_decode_fpp = _libraries['FIXME_STUB'].inf_decode_fpp
    inf_decode_fpp.restype = ctypes.c_char
    inf_decode_fpp.argtypes = []
    inf_del_no_xref_insns = _libraries['FIXME_STUB'].inf_del_no_xref_insns
    inf_del_no_xref_insns.restype = ctypes.c_char
    inf_del_no_xref_insns.argtypes = []
    inf_final_pass = _libraries['FIXME_STUB'].inf_final_pass
    inf_final_pass.restype = ctypes.c_char
    inf_final_pass.argtypes = []
    inf_full_sp_ana = _libraries['FIXME_STUB'].inf_full_sp_ana
    inf_full_sp_ana.restype = ctypes.c_char
    inf_full_sp_ana.argtypes = []
    inf_gen_assume = _libraries['FIXME_STUB'].inf_gen_assume
    inf_gen_assume.restype = ctypes.c_char
    inf_gen_assume.argtypes = []
    inf_gen_lzero = _libraries['FIXME_STUB'].inf_gen_lzero
    inf_gen_lzero.restype = ctypes.c_char
    inf_gen_lzero.argtypes = []
    inf_gen_null = _libraries['FIXME_STUB'].inf_gen_null
    inf_gen_null.restype = ctypes.c_char
    inf_gen_null.argtypes = []
    inf_gen_org = _libraries['FIXME_STUB'].inf_gen_org
    inf_gen_org.restype = ctypes.c_char
    inf_gen_org.argtypes = []
    inf_gen_tryblks = _libraries['FIXME_STUB'].inf_gen_tryblks
    inf_gen_tryblks.restype = ctypes.c_char
    inf_gen_tryblks.argtypes = []
    inf_get_abibits = _libraries['FIXME_STUB'].inf_get_abibits
    inf_get_abibits.restype = uint32
    inf_get_abibits.argtypes = []
    inf_get_af = _libraries['FIXME_STUB'].inf_get_af
    inf_get_af.restype = uint32
    inf_get_af.argtypes = []
    inf_get_af2 = _libraries['FIXME_STUB'].inf_get_af2
    inf_get_af2.restype = uint32
    inf_get_af2.argtypes = []
    inf_get_af2_low = _libraries['FIXME_STUB'].inf_get_af2_low
    inf_get_af2_low.restype = ushort
    inf_get_af2_low.argtypes = []
    inf_get_af_high = _libraries['FIXME_STUB'].inf_get_af_high
    inf_get_af_high.restype = ushort
    inf_get_af_high.argtypes = []
    inf_get_af_low = _libraries['FIXME_STUB'].inf_get_af_low
    inf_get_af_low.restype = ushort
    inf_get_af_low.argtypes = []
    inf_get_app_bitness = _libraries['FIXME_STUB'].inf_get_app_bitness
    inf_get_app_bitness.restype = uint
    inf_get_app_bitness.argtypes = []
    inf_get_appcall_options = _libraries['FIXME_STUB'].inf_get_appcall_options
    inf_get_appcall_options.restype = uint32
    inf_get_appcall_options.argtypes = []
    inf_get_apptype = _libraries['FIXME_STUB'].inf_get_apptype
    inf_get_apptype.restype = ushort
    inf_get_apptype.argtypes = []
    inf_get_asmtype = _libraries['FIXME_STUB'].inf_get_asmtype
    inf_get_asmtype.restype = uchar
    inf_get_asmtype.argtypes = []
    inf_get_baseaddr = _libraries['FIXME_STUB'].inf_get_baseaddr
    inf_get_baseaddr.restype = uval_t
    inf_get_baseaddr.argtypes = []
    inf_get_bin_prefix_size = _libraries['FIXME_STUB'].inf_get_bin_prefix_size
    inf_get_bin_prefix_size.restype = ctypes.c_int16
    inf_get_bin_prefix_size.argtypes = []
    inf_get_cc = _libraries['FIXME_STUB'].inf_get_cc
    inf_get_cc.restype = ctypes.c_char
    inf_get_cc.argtypes = [ctypes.POINTER(struct_compiler_info_t)]
    inf_get_cc_cm = _libraries['FIXME_STUB'].inf_get_cc_cm
    inf_get_cc_cm.restype = cm_t
    inf_get_cc_cm.argtypes = []
    inf_get_cc_defalign = _libraries['FIXME_STUB'].inf_get_cc_defalign
    inf_get_cc_defalign.restype = uchar
    inf_get_cc_defalign.argtypes = []
    inf_get_cc_id = _libraries['FIXME_STUB'].inf_get_cc_id
    inf_get_cc_id.restype = comp_t
    inf_get_cc_id.argtypes = []
    inf_get_cc_size_b = _libraries['FIXME_STUB'].inf_get_cc_size_b
    inf_get_cc_size_b.restype = uchar
    inf_get_cc_size_b.argtypes = []
    inf_get_cc_size_e = _libraries['FIXME_STUB'].inf_get_cc_size_e
    inf_get_cc_size_e.restype = uchar
    inf_get_cc_size_e.argtypes = []
    inf_get_cc_size_i = _libraries['FIXME_STUB'].inf_get_cc_size_i
    inf_get_cc_size_i.restype = uchar
    inf_get_cc_size_i.argtypes = []
    inf_get_cc_size_l = _libraries['FIXME_STUB'].inf_get_cc_size_l
    inf_get_cc_size_l.restype = uchar
    inf_get_cc_size_l.argtypes = []
    inf_get_cc_size_ldbl = _libraries['FIXME_STUB'].inf_get_cc_size_ldbl
    inf_get_cc_size_ldbl.restype = uchar
    inf_get_cc_size_ldbl.argtypes = []
    inf_get_cc_size_ll = _libraries['FIXME_STUB'].inf_get_cc_size_ll
    inf_get_cc_size_ll.restype = uchar
    inf_get_cc_size_ll.argtypes = []
    inf_get_cc_size_s = _libraries['FIXME_STUB'].inf_get_cc_size_s
    inf_get_cc_size_s.restype = uchar
    inf_get_cc_size_s.argtypes = []
    inf_get_cmt_indent = _libraries['FIXME_STUB'].inf_get_cmt_indent
    inf_get_cmt_indent.restype = uchar
    inf_get_cmt_indent.argtypes = []
    inf_get_cmtflg = _libraries['FIXME_STUB'].inf_get_cmtflg
    inf_get_cmtflg.restype = uchar
    inf_get_cmtflg.argtypes = []
    inf_get_database_change_count = _libraries['FIXME_STUB'].inf_get_database_change_count
    inf_get_database_change_count.restype = uint32
    inf_get_database_change_count.argtypes = []
    inf_get_datatypes = _libraries['FIXME_STUB'].inf_get_datatypes
    inf_get_datatypes.restype = uval_t
    inf_get_datatypes.argtypes = []
    inf_get_demname_form = _libraries['FIXME_STUB'].inf_get_demname_form
    inf_get_demname_form.restype = uchar
    inf_get_demname_form.argtypes = []
    inf_get_demnames = _libraries['FIXME_STUB'].inf_get_demnames
    inf_get_demnames.restype = uchar
    inf_get_demnames.argtypes = []
    inf_get_genflags = _libraries['FIXME_STUB'].inf_get_genflags
    inf_get_genflags.restype = ushort
    inf_get_genflags.argtypes = []
    inf_get_highoff = _libraries['FIXME_STUB'].inf_get_highoff
    inf_get_highoff.restype = ea_t
    inf_get_highoff.argtypes = []
    inf_get_indent = _libraries['FIXME_STUB'].inf_get_indent
    inf_get_indent.restype = uchar
    inf_get_indent.argtypes = []
    inf_get_lenxref = _libraries['FIXME_STUB'].inf_get_lenxref
    inf_get_lenxref.restype = ushort
    inf_get_lenxref.argtypes = []
    inf_get_lflags = _libraries['FIXME_STUB'].inf_get_lflags
    inf_get_lflags.restype = uint32
    inf_get_lflags.argtypes = []
    inf_get_limiter = _libraries['FIXME_STUB'].inf_get_limiter
    inf_get_limiter.restype = uchar
    inf_get_limiter.argtypes = []
    inf_get_listnames = _libraries['FIXME_STUB'].inf_get_listnames
    inf_get_listnames.restype = uchar
    inf_get_listnames.argtypes = []
    inf_get_long_demnames = _libraries['FIXME_STUB'].inf_get_long_demnames
    inf_get_long_demnames.restype = uint32
    inf_get_long_demnames.argtypes = []
    inf_get_lowoff = _libraries['FIXME_STUB'].inf_get_lowoff
    inf_get_lowoff.restype = ea_t
    inf_get_lowoff.argtypes = []
    inf_get_main = _libraries['FIXME_STUB'].inf_get_main
    inf_get_main.restype = ea_t
    inf_get_main.argtypes = []
    inf_get_margin = _libraries['FIXME_STUB'].inf_get_margin
    inf_get_margin.restype = ushort
    inf_get_margin.argtypes = []
    inf_get_max_autoname_len = _libraries['FIXME_STUB'].inf_get_max_autoname_len
    inf_get_max_autoname_len.restype = ushort
    inf_get_max_autoname_len.argtypes = []
    inf_get_max_ea = _libraries['FIXME_STUB'].inf_get_max_ea
    inf_get_max_ea.restype = ea_t
    inf_get_max_ea.argtypes = []
    inf_get_maxref = _libraries['FIXME_STUB'].inf_get_maxref
    inf_get_maxref.restype = uval_t
    inf_get_maxref.argtypes = []
    inf_get_min_ea = _libraries['FIXME_STUB'].inf_get_min_ea
    inf_get_min_ea.restype = ea_t
    inf_get_min_ea.argtypes = []
    inf_get_nametype = _libraries['FIXME_STUB'].inf_get_nametype
    inf_get_nametype.restype = ctypes.c_char
    inf_get_nametype.argtypes = []
    inf_get_netdelta = _libraries['FIXME_STUB'].inf_get_netdelta
    inf_get_netdelta.restype = sval_t
    inf_get_netdelta.argtypes = []
    inf_get_omax_ea = _libraries['FIXME_STUB'].inf_get_omax_ea
    inf_get_omax_ea.restype = ea_t
    inf_get_omax_ea.argtypes = []
    inf_get_omin_ea = _libraries['FIXME_STUB'].inf_get_omin_ea
    inf_get_omin_ea.restype = ea_t
    inf_get_omin_ea.argtypes = []
    inf_get_ostype = _libraries['FIXME_STUB'].inf_get_ostype
    inf_get_ostype.restype = ushort
    inf_get_ostype.argtypes = []
    inf_get_outflags = _libraries['FIXME_STUB'].inf_get_outflags
    inf_get_outflags.restype = uint32
    inf_get_outflags.argtypes = []
    inf_get_pack_mode = _libraries['FIXME_STUB'].inf_get_pack_mode
    inf_get_pack_mode.restype = ctypes.c_int32
    inf_get_pack_mode.argtypes = []
    inf_get_prefflag = _libraries['FIXME_STUB'].inf_get_prefflag
    inf_get_prefflag.restype = uchar
    inf_get_prefflag.argtypes = []
    inf_get_privrange = _libraries['FIXME_STUB'].inf_get_privrange
    inf_get_privrange.restype = struct_range_t
    inf_get_privrange.argtypes = []
    inf_get_privrange_end_ea = _libraries['FIXME_STUB'].inf_get_privrange_end_ea
    inf_get_privrange_end_ea.restype = ea_t
    inf_get_privrange_end_ea.argtypes = []
    inf_get_privrange_start_ea = _libraries['FIXME_STUB'].inf_get_privrange_start_ea
    inf_get_privrange_start_ea.restype = ea_t
    inf_get_privrange_start_ea.argtypes = []
    inf_get_procname = _libraries['FIXME_STUB'].inf_get_procname
    inf_get_procname.restype = qstring
    inf_get_procname.argtypes = []
    inf_get_refcmtnum = _libraries['FIXME_STUB'].inf_get_refcmtnum
    inf_get_refcmtnum.restype = uchar
    inf_get_refcmtnum.argtypes = []
    inf_get_short_demnames = _libraries['FIXME_STUB'].inf_get_short_demnames
    inf_get_short_demnames.restype = uint32
    inf_get_short_demnames.argtypes = []
    inf_get_specsegs = _libraries['FIXME_STUB'].inf_get_specsegs
    inf_get_specsegs.restype = uchar
    inf_get_specsegs.argtypes = []
    inf_get_start_cs = _libraries['FIXME_STUB'].inf_get_start_cs
    inf_get_start_cs.restype = sel_t
    inf_get_start_cs.argtypes = []
    inf_get_start_ea = _libraries['FIXME_STUB'].inf_get_start_ea
    inf_get_start_ea.restype = ea_t
    inf_get_start_ea.argtypes = []
    inf_get_start_ip = _libraries['FIXME_STUB'].inf_get_start_ip
    inf_get_start_ip.restype = ea_t
    inf_get_start_ip.argtypes = []
    inf_get_start_sp = _libraries['FIXME_STUB'].inf_get_start_sp
    inf_get_start_sp.restype = ea_t
    inf_get_start_sp.argtypes = []
    inf_get_start_ss = _libraries['FIXME_STUB'].inf_get_start_ss
    inf_get_start_ss.restype = sel_t
    inf_get_start_ss.argtypes = []
    inf_get_strlit_break = _libraries['FIXME_STUB'].inf_get_strlit_break
    inf_get_strlit_break.restype = uchar
    inf_get_strlit_break.argtypes = []
    inf_get_strlit_flags = _libraries['FIXME_STUB'].inf_get_strlit_flags
    inf_get_strlit_flags.restype = uchar
    inf_get_strlit_flags.argtypes = []
    inf_get_strlit_pref = _libraries['FIXME_STUB'].inf_get_strlit_pref
    inf_get_strlit_pref.restype = qstring
    inf_get_strlit_pref.argtypes = []
    inf_get_strlit_sernum = _libraries['FIXME_STUB'].inf_get_strlit_sernum
    inf_get_strlit_sernum.restype = uval_t
    inf_get_strlit_sernum.argtypes = []
    inf_get_strlit_zeroes = _libraries['FIXME_STUB'].inf_get_strlit_zeroes
    inf_get_strlit_zeroes.restype = ctypes.c_char
    inf_get_strlit_zeroes.argtypes = []
    inf_get_strtype = _libraries['FIXME_STUB'].inf_get_strtype
    inf_get_strtype.restype = int32
    inf_get_strtype.argtypes = []
    inf_get_type_xrefnum = _libraries['FIXME_STUB'].inf_get_type_xrefnum
    inf_get_type_xrefnum.restype = uchar
    inf_get_type_xrefnum.argtypes = []
    inf_get_version = _libraries['FIXME_STUB'].inf_get_version
    inf_get_version.restype = ushort
    inf_get_version.argtypes = []
    inf_get_xrefflag = _libraries['FIXME_STUB'].inf_get_xrefflag
    inf_get_xrefflag.restype = uchar
    inf_get_xrefflag.argtypes = []
    inf_get_xrefnum = _libraries['FIXME_STUB'].inf_get_xrefnum
    inf_get_xrefnum.restype = uchar
    inf_get_xrefnum.argtypes = []
    inf_guess_func_type = _libraries['FIXME_STUB'].inf_guess_func_type
    inf_guess_func_type.restype = ctypes.c_char
    inf_guess_func_type.argtypes = []
    inf_handle_eh = _libraries['FIXME_STUB'].inf_handle_eh
    inf_handle_eh.restype = ctypes.c_char
    inf_handle_eh.argtypes = []
    inf_handle_rtti = _libraries['FIXME_STUB'].inf_handle_rtti
    inf_handle_rtti.restype = ctypes.c_char
    inf_handle_rtti.argtypes = []
    inf_hide_comments = _libraries['FIXME_STUB'].inf_hide_comments
    inf_hide_comments.restype = ctypes.c_char
    inf_hide_comments.argtypes = []
    inf_hide_libfuncs = _libraries['FIXME_STUB'].inf_hide_libfuncs
    inf_hide_libfuncs.restype = ctypes.c_char
    inf_hide_libfuncs.argtypes = []
    inf_huge_arg_align = _libraries['FIXME_STUB'].inf_huge_arg_align
    inf_huge_arg_align.restype = ctypes.c_char
    inf_huge_arg_align.argtypes = []
    inf_inc_database_change_count = _libraries['FIXME_STUB'].inf_inc_database_change_count
    inf_inc_database_change_count.restype = None
    inf_inc_database_change_count.argtypes = [ctypes.c_int32]
    inf_is_16bit = _libraries['FIXME_STUB'].inf_is_16bit
    inf_is_16bit.restype = ctypes.c_char
    inf_is_16bit.argtypes = []
    inf_is_32bit_exactly = _libraries['FIXME_STUB'].inf_is_32bit_exactly
    inf_is_32bit_exactly.restype = ctypes.c_char
    inf_is_32bit_exactly.argtypes = []
    inf_is_32bit_or_higher = _libraries['FIXME_STUB'].inf_is_32bit_or_higher
    inf_is_32bit_or_higher.restype = ctypes.c_char
    inf_is_32bit_or_higher.argtypes = []
    inf_is_64bit = _libraries['FIXME_STUB'].inf_is_64bit
    inf_is_64bit.restype = ctypes.c_char
    inf_is_64bit.argtypes = []
    inf_is_auto_enabled = _libraries['FIXME_STUB'].inf_is_auto_enabled
    inf_is_auto_enabled.restype = ctypes.c_char
    inf_is_auto_enabled.argtypes = []
    inf_is_be = _libraries['FIXME_STUB'].inf_is_be
    inf_is_be.restype = ctypes.c_char
    inf_is_be.argtypes = []
    inf_is_dll = _libraries['FIXME_STUB'].inf_is_dll
    inf_is_dll.restype = ctypes.c_char
    inf_is_dll.argtypes = []
    inf_is_flat_off32 = _libraries['FIXME_STUB'].inf_is_flat_off32
    inf_is_flat_off32.restype = ctypes.c_char
    inf_is_flat_off32.argtypes = []
    inf_is_graph_view = _libraries['FIXME_STUB'].inf_is_graph_view
    inf_is_graph_view.restype = ctypes.c_char
    inf_is_graph_view.argtypes = []
    inf_is_hard_float = _libraries['FIXME_STUB'].inf_is_hard_float
    inf_is_hard_float.restype = ctypes.c_char
    inf_is_hard_float.argtypes = []
    inf_is_kernel_mode = _libraries['FIXME_STUB'].inf_is_kernel_mode
    inf_is_kernel_mode.restype = ctypes.c_char
    inf_is_kernel_mode.argtypes = []
    inf_is_limiter_empty = _libraries['FIXME_STUB'].inf_is_limiter_empty
    inf_is_limiter_empty.restype = ctypes.c_char
    inf_is_limiter_empty.argtypes = []
    inf_is_limiter_thick = _libraries['FIXME_STUB'].inf_is_limiter_thick
    inf_is_limiter_thick.restype = ctypes.c_char
    inf_is_limiter_thick.argtypes = []
    inf_is_limiter_thin = _libraries['FIXME_STUB'].inf_is_limiter_thin
    inf_is_limiter_thin.restype = ctypes.c_char
    inf_is_limiter_thin.argtypes = []
    inf_is_mem_aligned4 = _libraries['FIXME_STUB'].inf_is_mem_aligned4
    inf_is_mem_aligned4.restype = ctypes.c_char
    inf_is_mem_aligned4.argtypes = []
    inf_is_snapshot = _libraries['FIXME_STUB'].inf_is_snapshot
    inf_is_snapshot.restype = ctypes.c_char
    inf_is_snapshot.argtypes = []
    inf_is_wide_high_byte_first = _libraries['FIXME_STUB'].inf_is_wide_high_byte_first
    inf_is_wide_high_byte_first.restype = ctypes.c_char
    inf_is_wide_high_byte_first.argtypes = []
    inf_like_binary = _libraries['FIXME_STUB'].inf_like_binary
    inf_like_binary.restype = ctypes.c_char
    inf_like_binary.argtypes = []
    inf_line_pref_with_seg = _libraries['FIXME_STUB'].inf_line_pref_with_seg
    inf_line_pref_with_seg.restype = ctypes.c_char
    inf_line_pref_with_seg.argtypes = []
    inf_loading_idc = _libraries['FIXME_STUB'].inf_loading_idc
    inf_loading_idc.restype = ctypes.c_char
    inf_loading_idc.argtypes = []
    inf_macros_enabled = _libraries['FIXME_STUB'].inf_macros_enabled
    inf_macros_enabled.restype = ctypes.c_char
    inf_macros_enabled.argtypes = []
    inf_map_stkargs = _libraries['FIXME_STUB'].inf_map_stkargs
    inf_map_stkargs.restype = ctypes.c_char
    inf_map_stkargs.argtypes = []
    inf_mark_code = _libraries['FIXME_STUB'].inf_mark_code
    inf_mark_code.restype = ctypes.c_char
    inf_mark_code.argtypes = []
    inf_no_store_user_info = _libraries['FIXME_STUB'].inf_no_store_user_info
    inf_no_store_user_info.restype = ctypes.c_char
    inf_no_store_user_info.argtypes = []
    inf_noflow_to_data = _libraries['FIXME_STUB'].inf_noflow_to_data
    inf_noflow_to_data.restype = ctypes.c_char
    inf_noflow_to_data.argtypes = []
    inf_noret_ana = _libraries['FIXME_STUB'].inf_noret_ana
    inf_noret_ana.restype = ctypes.c_char
    inf_noret_ana.argtypes = []
    inf_op_offset = _libraries['FIXME_STUB'].inf_op_offset
    inf_op_offset.restype = ctypes.c_char
    inf_op_offset.argtypes = []
    inf_pack_idb = _libraries['FIXME_STUB'].inf_pack_idb
    inf_pack_idb.restype = ctypes.c_char
    inf_pack_idb.argtypes = []
    inf_pack_stkargs = _libraries['FIXME_STUB'].inf_pack_stkargs
    inf_pack_stkargs.restype = ctypes.c_char
    inf_pack_stkargs.argtypes = [cm_t]
    inf_postinc_strlit_sernum = _libraries['FIXME_STUB'].inf_postinc_strlit_sernum
    inf_postinc_strlit_sernum.restype = uval_t
    inf_postinc_strlit_sernum.argtypes = [uval_t]
    inf_prefix_show_funcoff = _libraries['FIXME_STUB'].inf_prefix_show_funcoff
    inf_prefix_show_funcoff.restype = ctypes.c_char
    inf_prefix_show_funcoff.argtypes = []
    inf_prefix_show_segaddr = _libraries['FIXME_STUB'].inf_prefix_show_segaddr
    inf_prefix_show_segaddr.restype = ctypes.c_char
    inf_prefix_show_segaddr.argtypes = []
    inf_prefix_show_stack = _libraries['FIXME_STUB'].inf_prefix_show_stack
    inf_prefix_show_stack.restype = ctypes.c_char
    inf_prefix_show_stack.argtypes = []
    inf_prefix_truncate_opcode_bytes = _libraries['FIXME_STUB'].inf_prefix_truncate_opcode_bytes
    inf_prefix_truncate_opcode_bytes.restype = ctypes.c_char
    inf_prefix_truncate_opcode_bytes.argtypes = []
    inf_propagate_regargs = _libraries['FIXME_STUB'].inf_propagate_regargs
    inf_propagate_regargs.restype = ctypes.c_char
    inf_propagate_regargs.argtypes = []
    inf_propagate_stkargs = _libraries['FIXME_STUB'].inf_propagate_stkargs
    inf_propagate_stkargs.restype = ctypes.c_char
    inf_propagate_stkargs.argtypes = []
    inf_readonly_idb = _libraries['FIXME_STUB'].inf_readonly_idb
    inf_readonly_idb.restype = ctypes.c_char
    inf_readonly_idb.argtypes = []
    inf_rename_jumpfunc = _libraries['FIXME_STUB'].inf_rename_jumpfunc
    inf_rename_jumpfunc.restype = ctypes.c_char
    inf_rename_jumpfunc.argtypes = []
    inf_rename_nullsub = _libraries['FIXME_STUB'].inf_rename_nullsub
    inf_rename_nullsub.restype = ctypes.c_char
    inf_rename_nullsub.argtypes = []
    inf_set_32bit = _libraries['FIXME_STUB'].inf_set_32bit
    inf_set_32bit.restype = ctypes.c_char
    inf_set_32bit.argtypes = [ctypes.c_char]
    inf_set_64bit = _libraries['FIXME_STUB'].inf_set_64bit
    inf_set_64bit.restype = ctypes.c_char
    inf_set_64bit.argtypes = [ctypes.c_char]
    inf_set_abi_set_by_user = _libraries['FIXME_STUB'].inf_set_abi_set_by_user
    inf_set_abi_set_by_user.restype = ctypes.c_char
    inf_set_abi_set_by_user.argtypes = [ctypes.c_char]
    inf_set_abibits = _libraries['FIXME_STUB'].inf_set_abibits
    inf_set_abibits.restype = ctypes.c_char
    inf_set_abibits.argtypes = [uint32]
    inf_set_af = _libraries['FIXME_STUB'].inf_set_af
    inf_set_af.restype = ctypes.c_char
    inf_set_af.argtypes = [uint32]
    inf_set_af2 = _libraries['FIXME_STUB'].inf_set_af2
    inf_set_af2.restype = ctypes.c_char
    inf_set_af2.argtypes = [uint32]
    inf_set_af2_low = _libraries['FIXME_STUB'].inf_set_af2_low
    inf_set_af2_low.restype = None
    inf_set_af2_low.argtypes = [ushort]
    inf_set_af_high = _libraries['FIXME_STUB'].inf_set_af_high
    inf_set_af_high.restype = None
    inf_set_af_high.argtypes = [ushort]
    inf_set_af_low = _libraries['FIXME_STUB'].inf_set_af_low
    inf_set_af_low.restype = None
    inf_set_af_low.argtypes = [ushort]
    inf_set_allow_non_matched_ops = _libraries['FIXME_STUB'].inf_set_allow_non_matched_ops
    inf_set_allow_non_matched_ops.restype = ctypes.c_char
    inf_set_allow_non_matched_ops.argtypes = [ctypes.c_char]
    inf_set_allow_sigmulti = _libraries['FIXME_STUB'].inf_set_allow_sigmulti
    inf_set_allow_sigmulti.restype = ctypes.c_char
    inf_set_allow_sigmulti.argtypes = [ctypes.c_char]
    inf_set_appcall_options = _libraries['FIXME_STUB'].inf_set_appcall_options
    inf_set_appcall_options.restype = ctypes.c_char
    inf_set_appcall_options.argtypes = [uint32]
    inf_set_append_sigcmt = _libraries['FIXME_STUB'].inf_set_append_sigcmt
    inf_set_append_sigcmt.restype = ctypes.c_char
    inf_set_append_sigcmt.argtypes = [ctypes.c_char]
    inf_set_apptype = _libraries['FIXME_STUB'].inf_set_apptype
    inf_set_apptype.restype = ctypes.c_char
    inf_set_apptype.argtypes = [ushort]
    inf_set_asmtype = _libraries['FIXME_STUB'].inf_set_asmtype
    inf_set_asmtype.restype = ctypes.c_char
    inf_set_asmtype.argtypes = [uchar]
    inf_set_auto_enabled = _libraries['FIXME_STUB'].inf_set_auto_enabled
    inf_set_auto_enabled.restype = ctypes.c_char
    inf_set_auto_enabled.argtypes = [ctypes.c_char]
    inf_set_baseaddr = _libraries['FIXME_STUB'].inf_set_baseaddr
    inf_set_baseaddr.restype = ctypes.c_char
    inf_set_baseaddr.argtypes = [uval_t]
    inf_set_be = _libraries['FIXME_STUB'].inf_set_be
    inf_set_be.restype = ctypes.c_char
    inf_set_be.argtypes = [ctypes.c_char]
    inf_set_big_arg_align = _libraries['FIXME_STUB'].inf_set_big_arg_align
    inf_set_big_arg_align.restype = ctypes.c_char
    inf_set_big_arg_align.argtypes = [ctypes.c_char]
    inf_set_bin_prefix_size = _libraries['FIXME_STUB'].inf_set_bin_prefix_size
    inf_set_bin_prefix_size.restype = ctypes.c_char
    inf_set_bin_prefix_size.argtypes = [ctypes.c_int16]
    inf_set_cc = _libraries['FIXME_STUB'].inf_set_cc
    inf_set_cc.restype = ctypes.c_char
    inf_set_cc.argtypes = [ctypes.POINTER(struct_compiler_info_t)]
    inf_set_cc_cm = _libraries['FIXME_STUB'].inf_set_cc_cm
    inf_set_cc_cm.restype = ctypes.c_char
    inf_set_cc_cm.argtypes = [cm_t]
    inf_set_cc_defalign = _libraries['FIXME_STUB'].inf_set_cc_defalign
    inf_set_cc_defalign.restype = ctypes.c_char
    inf_set_cc_defalign.argtypes = [uchar]
    inf_set_cc_id = _libraries['FIXME_STUB'].inf_set_cc_id
    inf_set_cc_id.restype = ctypes.c_char
    inf_set_cc_id.argtypes = [comp_t]
    inf_set_cc_size_b = _libraries['FIXME_STUB'].inf_set_cc_size_b
    inf_set_cc_size_b.restype = ctypes.c_char
    inf_set_cc_size_b.argtypes = [uchar]
    inf_set_cc_size_e = _libraries['FIXME_STUB'].inf_set_cc_size_e
    inf_set_cc_size_e.restype = ctypes.c_char
    inf_set_cc_size_e.argtypes = [uchar]
    inf_set_cc_size_i = _libraries['FIXME_STUB'].inf_set_cc_size_i
    inf_set_cc_size_i.restype = ctypes.c_char
    inf_set_cc_size_i.argtypes = [uchar]
    inf_set_cc_size_l = _libraries['FIXME_STUB'].inf_set_cc_size_l
    inf_set_cc_size_l.restype = ctypes.c_char
    inf_set_cc_size_l.argtypes = [uchar]
    inf_set_cc_size_ldbl = _libraries['FIXME_STUB'].inf_set_cc_size_ldbl
    inf_set_cc_size_ldbl.restype = ctypes.c_char
    inf_set_cc_size_ldbl.argtypes = [uchar]
    inf_set_cc_size_ll = _libraries['FIXME_STUB'].inf_set_cc_size_ll
    inf_set_cc_size_ll.restype = ctypes.c_char
    inf_set_cc_size_ll.argtypes = [uchar]
    inf_set_cc_size_s = _libraries['FIXME_STUB'].inf_set_cc_size_s
    inf_set_cc_size_s.restype = ctypes.c_char
    inf_set_cc_size_s.argtypes = [uchar]
    inf_set_check_manual_ops = _libraries['FIXME_STUB'].inf_set_check_manual_ops
    inf_set_check_manual_ops.restype = ctypes.c_char
    inf_set_check_manual_ops.argtypes = [ctypes.c_char]
    inf_set_check_unicode_strlits = _libraries['FIXME_STUB'].inf_set_check_unicode_strlits
    inf_set_check_unicode_strlits.restype = ctypes.c_char
    inf_set_check_unicode_strlits.argtypes = [ctypes.c_char]
    inf_set_cmt_indent = _libraries['FIXME_STUB'].inf_set_cmt_indent
    inf_set_cmt_indent.restype = ctypes.c_char
    inf_set_cmt_indent.argtypes = [uchar]
    inf_set_cmtflg = _libraries['FIXME_STUB'].inf_set_cmtflg
    inf_set_cmtflg.restype = ctypes.c_char
    inf_set_cmtflg.argtypes = [uchar]
    inf_set_coagulate_code = _libraries['FIXME_STUB'].inf_set_coagulate_code
    inf_set_coagulate_code.restype = ctypes.c_char
    inf_set_coagulate_code.argtypes = [ctypes.c_char]
    inf_set_coagulate_data = _libraries['FIXME_STUB'].inf_set_coagulate_data
    inf_set_coagulate_data.restype = ctypes.c_char
    inf_set_coagulate_data.argtypes = [ctypes.c_char]
    inf_set_compress_idb = _libraries['FIXME_STUB'].inf_set_compress_idb
    inf_set_compress_idb.restype = ctypes.c_char
    inf_set_compress_idb.argtypes = [ctypes.c_char]
    inf_set_create_all_xrefs = _libraries['FIXME_STUB'].inf_set_create_all_xrefs
    inf_set_create_all_xrefs.restype = ctypes.c_char
    inf_set_create_all_xrefs.argtypes = [ctypes.c_char]
    inf_set_create_func_from_call = _libraries['FIXME_STUB'].inf_set_create_func_from_call
    inf_set_create_func_from_call.restype = ctypes.c_char
    inf_set_create_func_from_call.argtypes = [ctypes.c_char]
    inf_set_create_func_from_ptr = _libraries['FIXME_STUB'].inf_set_create_func_from_ptr
    inf_set_create_func_from_ptr.restype = ctypes.c_char
    inf_set_create_func_from_ptr.argtypes = [ctypes.c_char]
    inf_set_create_func_tails = _libraries['FIXME_STUB'].inf_set_create_func_tails
    inf_set_create_func_tails.restype = ctypes.c_char
    inf_set_create_func_tails.argtypes = [ctypes.c_char]
    inf_set_create_jump_tables = _libraries['FIXME_STUB'].inf_set_create_jump_tables
    inf_set_create_jump_tables.restype = ctypes.c_char
    inf_set_create_jump_tables.argtypes = [ctypes.c_char]
    inf_set_create_off_on_dref = _libraries['FIXME_STUB'].inf_set_create_off_on_dref
    inf_set_create_off_on_dref.restype = ctypes.c_char
    inf_set_create_off_on_dref.argtypes = [ctypes.c_char]
    inf_set_create_off_using_fixup = _libraries['FIXME_STUB'].inf_set_create_off_using_fixup
    inf_set_create_off_using_fixup.restype = ctypes.c_char
    inf_set_create_off_using_fixup.argtypes = [ctypes.c_char]
    inf_set_create_strlit_on_xref = _libraries['FIXME_STUB'].inf_set_create_strlit_on_xref
    inf_set_create_strlit_on_xref.restype = ctypes.c_char
    inf_set_create_strlit_on_xref.argtypes = [ctypes.c_char]
    inf_set_data_offset = _libraries['FIXME_STUB'].inf_set_data_offset
    inf_set_data_offset.restype = ctypes.c_char
    inf_set_data_offset.argtypes = [ctypes.c_char]
    inf_set_database_change_count = _libraries['FIXME_STUB'].inf_set_database_change_count
    inf_set_database_change_count.restype = ctypes.c_char
    inf_set_database_change_count.argtypes = [uint32]
    inf_set_datatypes = _libraries['FIXME_STUB'].inf_set_datatypes
    inf_set_datatypes.restype = ctypes.c_char
    inf_set_datatypes.argtypes = [uval_t]
    inf_set_dbg_no_store_path = _libraries['FIXME_STUB'].inf_set_dbg_no_store_path
    inf_set_dbg_no_store_path.restype = ctypes.c_char
    inf_set_dbg_no_store_path.argtypes = [ctypes.c_char]
    inf_set_decode_fpp = _libraries['FIXME_STUB'].inf_set_decode_fpp
    inf_set_decode_fpp.restype = ctypes.c_char
    inf_set_decode_fpp.argtypes = [ctypes.c_char]
    inf_set_del_no_xref_insns = _libraries['FIXME_STUB'].inf_set_del_no_xref_insns
    inf_set_del_no_xref_insns.restype = ctypes.c_char
    inf_set_del_no_xref_insns.argtypes = [ctypes.c_char]
    inf_set_demnames = _libraries['FIXME_STUB'].inf_set_demnames
    inf_set_demnames.restype = ctypes.c_char
    inf_set_demnames.argtypes = [uchar]
    inf_set_dll = _libraries['FIXME_STUB'].inf_set_dll
    inf_set_dll.restype = ctypes.c_char
    inf_set_dll.argtypes = [ctypes.c_char]
    inf_set_filetype = _libraries['FIXME_STUB'].inf_set_filetype
    inf_set_filetype.restype = ctypes.c_char
    inf_set_filetype.argtypes = [filetype_t]
    inf_set_final_pass = _libraries['FIXME_STUB'].inf_set_final_pass
    inf_set_final_pass.restype = ctypes.c_char
    inf_set_final_pass.argtypes = [ctypes.c_char]
    inf_set_flat_off32 = _libraries['FIXME_STUB'].inf_set_flat_off32
    inf_set_flat_off32.restype = ctypes.c_char
    inf_set_flat_off32.argtypes = [ctypes.c_char]
    inf_set_full_sp_ana = _libraries['FIXME_STUB'].inf_set_full_sp_ana
    inf_set_full_sp_ana.restype = ctypes.c_char
    inf_set_full_sp_ana.argtypes = [ctypes.c_char]
    inf_set_gen_assume = _libraries['FIXME_STUB'].inf_set_gen_assume
    inf_set_gen_assume.restype = ctypes.c_char
    inf_set_gen_assume.argtypes = [ctypes.c_char]
    inf_set_gen_lzero = _libraries['FIXME_STUB'].inf_set_gen_lzero
    inf_set_gen_lzero.restype = ctypes.c_char
    inf_set_gen_lzero.argtypes = [ctypes.c_char]
    inf_set_gen_null = _libraries['FIXME_STUB'].inf_set_gen_null
    inf_set_gen_null.restype = ctypes.c_char
    inf_set_gen_null.argtypes = [ctypes.c_char]
    inf_set_gen_org = _libraries['FIXME_STUB'].inf_set_gen_org
    inf_set_gen_org.restype = ctypes.c_char
    inf_set_gen_org.argtypes = [ctypes.c_char]
    inf_set_gen_tryblks = _libraries['FIXME_STUB'].inf_set_gen_tryblks
    inf_set_gen_tryblks.restype = ctypes.c_char
    inf_set_gen_tryblks.argtypes = [ctypes.c_char]
    inf_set_genflags = _libraries['FIXME_STUB'].inf_set_genflags
    inf_set_genflags.restype = ctypes.c_char
    inf_set_genflags.argtypes = [ushort]
    inf_set_graph_view = _libraries['FIXME_STUB'].inf_set_graph_view
    inf_set_graph_view.restype = ctypes.c_char
    inf_set_graph_view.argtypes = [ctypes.c_char]
    inf_set_guess_func_type = _libraries['FIXME_STUB'].inf_set_guess_func_type
    inf_set_guess_func_type.restype = ctypes.c_char
    inf_set_guess_func_type.argtypes = [ctypes.c_char]
    inf_set_handle_eh = _libraries['FIXME_STUB'].inf_set_handle_eh
    inf_set_handle_eh.restype = ctypes.c_char
    inf_set_handle_eh.argtypes = [ctypes.c_char]
    inf_set_handle_rtti = _libraries['FIXME_STUB'].inf_set_handle_rtti
    inf_set_handle_rtti.restype = ctypes.c_char
    inf_set_handle_rtti.argtypes = [ctypes.c_char]
    inf_set_hard_float = _libraries['FIXME_STUB'].inf_set_hard_float
    inf_set_hard_float.restype = ctypes.c_char
    inf_set_hard_float.argtypes = [ctypes.c_char]
    inf_set_hide_comments = _libraries['FIXME_STUB'].inf_set_hide_comments
    inf_set_hide_comments.restype = ctypes.c_char
    inf_set_hide_comments.argtypes = [ctypes.c_char]
    inf_set_hide_libfuncs = _libraries['FIXME_STUB'].inf_set_hide_libfuncs
    inf_set_hide_libfuncs.restype = ctypes.c_char
    inf_set_hide_libfuncs.argtypes = [ctypes.c_char]
    inf_set_highoff = _libraries['FIXME_STUB'].inf_set_highoff
    inf_set_highoff.restype = ctypes.c_char
    inf_set_highoff.argtypes = [ea_t]
    inf_set_huge_arg_align = _libraries['FIXME_STUB'].inf_set_huge_arg_align
    inf_set_huge_arg_align.restype = ctypes.c_char
    inf_set_huge_arg_align.argtypes = [ctypes.c_char]
    inf_set_indent = _libraries['FIXME_STUB'].inf_set_indent
    inf_set_indent.restype = ctypes.c_char
    inf_set_indent.argtypes = [uchar]
    inf_set_kernel_mode = _libraries['FIXME_STUB'].inf_set_kernel_mode
    inf_set_kernel_mode.restype = ctypes.c_char
    inf_set_kernel_mode.argtypes = [ctypes.c_char]
    inf_set_lenxref = _libraries['FIXME_STUB'].inf_set_lenxref
    inf_set_lenxref.restype = ctypes.c_char
    inf_set_lenxref.argtypes = [ushort]
    inf_set_lflags = _libraries['FIXME_STUB'].inf_set_lflags
    inf_set_lflags.restype = ctypes.c_char
    inf_set_lflags.argtypes = [uint32]
    inf_set_limiter = _libraries['FIXME_STUB'].inf_set_limiter
    inf_set_limiter.restype = ctypes.c_char
    inf_set_limiter.argtypes = [uchar]
    inf_set_limiter_empty = _libraries['FIXME_STUB'].inf_set_limiter_empty
    inf_set_limiter_empty.restype = ctypes.c_char
    inf_set_limiter_empty.argtypes = [ctypes.c_char]
    inf_set_limiter_thick = _libraries['FIXME_STUB'].inf_set_limiter_thick
    inf_set_limiter_thick.restype = ctypes.c_char
    inf_set_limiter_thick.argtypes = [ctypes.c_char]
    inf_set_limiter_thin = _libraries['FIXME_STUB'].inf_set_limiter_thin
    inf_set_limiter_thin.restype = ctypes.c_char
    inf_set_limiter_thin.argtypes = [ctypes.c_char]
    inf_set_line_pref_with_seg = _libraries['FIXME_STUB'].inf_set_line_pref_with_seg
    inf_set_line_pref_with_seg.restype = ctypes.c_char
    inf_set_line_pref_with_seg.argtypes = [ctypes.c_char]
    inf_set_listnames = _libraries['FIXME_STUB'].inf_set_listnames
    inf_set_listnames.restype = ctypes.c_char
    inf_set_listnames.argtypes = [uchar]
    inf_set_loading_idc = _libraries['FIXME_STUB'].inf_set_loading_idc
    inf_set_loading_idc.restype = ctypes.c_char
    inf_set_loading_idc.argtypes = [ctypes.c_char]
    inf_set_long_demnames = _libraries['FIXME_STUB'].inf_set_long_demnames
    inf_set_long_demnames.restype = ctypes.c_char
    inf_set_long_demnames.argtypes = [uint32]
    inf_set_lowoff = _libraries['FIXME_STUB'].inf_set_lowoff
    inf_set_lowoff.restype = ctypes.c_char
    inf_set_lowoff.argtypes = [ea_t]
    inf_set_macros_enabled = _libraries['FIXME_STUB'].inf_set_macros_enabled
    inf_set_macros_enabled.restype = ctypes.c_char
    inf_set_macros_enabled.argtypes = [ctypes.c_char]
    inf_set_main = _libraries['FIXME_STUB'].inf_set_main
    inf_set_main.restype = ctypes.c_char
    inf_set_main.argtypes = [ea_t]
    inf_set_map_stkargs = _libraries['FIXME_STUB'].inf_set_map_stkargs
    inf_set_map_stkargs.restype = ctypes.c_char
    inf_set_map_stkargs.argtypes = [ctypes.c_char]
    inf_set_margin = _libraries['FIXME_STUB'].inf_set_margin
    inf_set_margin.restype = ctypes.c_char
    inf_set_margin.argtypes = [ushort]
    inf_set_mark_code = _libraries['FIXME_STUB'].inf_set_mark_code
    inf_set_mark_code.restype = ctypes.c_char
    inf_set_mark_code.argtypes = [ctypes.c_char]
    inf_set_max_autoname_len = _libraries['FIXME_STUB'].inf_set_max_autoname_len
    inf_set_max_autoname_len.restype = ctypes.c_char
    inf_set_max_autoname_len.argtypes = [ushort]
    inf_set_max_ea = _libraries['FIXME_STUB'].inf_set_max_ea
    inf_set_max_ea.restype = ctypes.c_char
    inf_set_max_ea.argtypes = [ea_t]
    inf_set_maxref = _libraries['FIXME_STUB'].inf_set_maxref
    inf_set_maxref.restype = ctypes.c_char
    inf_set_maxref.argtypes = [uval_t]
    inf_set_mem_aligned4 = _libraries['FIXME_STUB'].inf_set_mem_aligned4
    inf_set_mem_aligned4.restype = ctypes.c_char
    inf_set_mem_aligned4.argtypes = [ctypes.c_char]
    inf_set_min_ea = _libraries['FIXME_STUB'].inf_set_min_ea
    inf_set_min_ea.restype = ctypes.c_char
    inf_set_min_ea.argtypes = [ea_t]
    inf_set_nametype = _libraries['FIXME_STUB'].inf_set_nametype
    inf_set_nametype.restype = ctypes.c_char
    inf_set_nametype.argtypes = [ctypes.c_char]
    inf_set_netdelta = _libraries['FIXME_STUB'].inf_set_netdelta
    inf_set_netdelta.restype = ctypes.c_char
    inf_set_netdelta.argtypes = [sval_t]
    inf_set_no_store_user_info = _libraries['FIXME_STUB'].inf_set_no_store_user_info
    inf_set_no_store_user_info.restype = ctypes.c_char
    inf_set_no_store_user_info.argtypes = [ctypes.c_char]
    inf_set_noflow_to_data = _libraries['FIXME_STUB'].inf_set_noflow_to_data
    inf_set_noflow_to_data.restype = ctypes.c_char
    inf_set_noflow_to_data.argtypes = [ctypes.c_char]
    inf_set_noret_ana = _libraries['FIXME_STUB'].inf_set_noret_ana
    inf_set_noret_ana.restype = ctypes.c_char
    inf_set_noret_ana.argtypes = [ctypes.c_char]
    inf_set_omax_ea = _libraries['FIXME_STUB'].inf_set_omax_ea
    inf_set_omax_ea.restype = ctypes.c_char
    inf_set_omax_ea.argtypes = [ea_t]
    inf_set_omin_ea = _libraries['FIXME_STUB'].inf_set_omin_ea
    inf_set_omin_ea.restype = ctypes.c_char
    inf_set_omin_ea.argtypes = [ea_t]
    inf_set_op_offset = _libraries['FIXME_STUB'].inf_set_op_offset
    inf_set_op_offset.restype = ctypes.c_char
    inf_set_op_offset.argtypes = [ctypes.c_char]
    inf_set_ostype = _libraries['FIXME_STUB'].inf_set_ostype
    inf_set_ostype.restype = ctypes.c_char
    inf_set_ostype.argtypes = [ushort]
    inf_set_outflags = _libraries['FIXME_STUB'].inf_set_outflags
    inf_set_outflags.restype = ctypes.c_char
    inf_set_outflags.argtypes = [uint32]
    inf_set_pack_idb = _libraries['FIXME_STUB'].inf_set_pack_idb
    inf_set_pack_idb.restype = ctypes.c_char
    inf_set_pack_idb.argtypes = [ctypes.c_char]
    inf_set_pack_mode = _libraries['FIXME_STUB'].inf_set_pack_mode
    inf_set_pack_mode.restype = ctypes.c_int32
    inf_set_pack_mode.argtypes = [ctypes.c_int32]
    inf_set_pack_stkargs = _libraries['FIXME_STUB'].inf_set_pack_stkargs
    inf_set_pack_stkargs.restype = ctypes.c_char
    inf_set_pack_stkargs.argtypes = [ctypes.c_char]
    inf_set_prefflag = _libraries['FIXME_STUB'].inf_set_prefflag
    inf_set_prefflag.restype = ctypes.c_char
    inf_set_prefflag.argtypes = [uchar]
    inf_set_prefix_show_funcoff = _libraries['FIXME_STUB'].inf_set_prefix_show_funcoff
    inf_set_prefix_show_funcoff.restype = ctypes.c_char
    inf_set_prefix_show_funcoff.argtypes = [ctypes.c_char]
    inf_set_prefix_show_segaddr = _libraries['FIXME_STUB'].inf_set_prefix_show_segaddr
    inf_set_prefix_show_segaddr.restype = ctypes.c_char
    inf_set_prefix_show_segaddr.argtypes = [ctypes.c_char]
    inf_set_prefix_show_stack = _libraries['FIXME_STUB'].inf_set_prefix_show_stack
    inf_set_prefix_show_stack.restype = ctypes.c_char
    inf_set_prefix_show_stack.argtypes = [ctypes.c_char]
    inf_set_prefix_truncate_opcode_bytes = _libraries['FIXME_STUB'].inf_set_prefix_truncate_opcode_bytes
    inf_set_prefix_truncate_opcode_bytes.restype = ctypes.c_char
    inf_set_prefix_truncate_opcode_bytes.argtypes = [ctypes.c_char]
    inf_set_privrange = _libraries['FIXME_STUB'].inf_set_privrange
    inf_set_privrange.restype = ctypes.c_char
    inf_set_privrange.argtypes = [ctypes.POINTER(struct_range_t)]
    inf_set_privrange_end_ea = _libraries['FIXME_STUB'].inf_set_privrange_end_ea
    inf_set_privrange_end_ea.restype = ctypes.c_char
    inf_set_privrange_end_ea.argtypes = [ea_t]
    inf_set_privrange_start_ea = _libraries['FIXME_STUB'].inf_set_privrange_start_ea
    inf_set_privrange_start_ea.restype = ctypes.c_char
    inf_set_privrange_start_ea.argtypes = [ea_t]
    inf_set_procname = _libraries['FIXME_STUB'].inf_set_procname
    inf_set_procname.restype = ctypes.c_char
    inf_set_procname.argtypes = [ctypes.c_char_p, size_t]
    inf_set_propagate_regargs = _libraries['FIXME_STUB'].inf_set_propagate_regargs
    inf_set_propagate_regargs.restype = ctypes.c_char
    inf_set_propagate_regargs.argtypes = [ctypes.c_char]
    inf_set_propagate_stkargs = _libraries['FIXME_STUB'].inf_set_propagate_stkargs
    inf_set_propagate_stkargs.restype = ctypes.c_char
    inf_set_propagate_stkargs.argtypes = [ctypes.c_char]
    inf_set_readonly_idb = _libraries['FIXME_STUB'].inf_set_readonly_idb
    inf_set_readonly_idb.restype = ctypes.c_char
    inf_set_readonly_idb.argtypes = [ctypes.c_char]
    inf_set_refcmtnum = _libraries['FIXME_STUB'].inf_set_refcmtnum
    inf_set_refcmtnum.restype = ctypes.c_char
    inf_set_refcmtnum.argtypes = [uchar]
    inf_set_rename_jumpfunc = _libraries['FIXME_STUB'].inf_set_rename_jumpfunc
    inf_set_rename_jumpfunc.restype = ctypes.c_char
    inf_set_rename_jumpfunc.argtypes = [ctypes.c_char]
    inf_set_rename_nullsub = _libraries['FIXME_STUB'].inf_set_rename_nullsub
    inf_set_rename_nullsub.restype = ctypes.c_char
    inf_set_rename_nullsub.argtypes = [ctypes.c_char]
    inf_set_short_demnames = _libraries['FIXME_STUB'].inf_set_short_demnames
    inf_set_short_demnames.restype = ctypes.c_char
    inf_set_short_demnames.argtypes = [uint32]
    inf_set_should_create_stkvars = _libraries['FIXME_STUB'].inf_set_should_create_stkvars
    inf_set_should_create_stkvars.restype = ctypes.c_char
    inf_set_should_create_stkvars.argtypes = [ctypes.c_char]
    inf_set_should_trace_sp = _libraries['FIXME_STUB'].inf_set_should_trace_sp
    inf_set_should_trace_sp.restype = ctypes.c_char
    inf_set_should_trace_sp.argtypes = [ctypes.c_char]
    inf_set_show_all_comments = _libraries['FIXME_STUB'].inf_set_show_all_comments
    inf_set_show_all_comments.restype = ctypes.c_char
    inf_set_show_all_comments.argtypes = [ctypes.c_char]
    inf_set_show_auto = _libraries['FIXME_STUB'].inf_set_show_auto
    inf_set_show_auto.restype = ctypes.c_char
    inf_set_show_auto.argtypes = [ctypes.c_char]
    inf_set_show_hidden_funcs = _libraries['FIXME_STUB'].inf_set_show_hidden_funcs
    inf_set_show_hidden_funcs.restype = ctypes.c_char
    inf_set_show_hidden_funcs.argtypes = [ctypes.c_char]
    inf_set_show_hidden_insns = _libraries['FIXME_STUB'].inf_set_show_hidden_insns
    inf_set_show_hidden_insns.restype = ctypes.c_char
    inf_set_show_hidden_insns.argtypes = [ctypes.c_char]
    inf_set_show_hidden_segms = _libraries['FIXME_STUB'].inf_set_show_hidden_segms
    inf_set_show_hidden_segms.restype = ctypes.c_char
    inf_set_show_hidden_segms.argtypes = [ctypes.c_char]
    inf_set_show_line_pref = _libraries['FIXME_STUB'].inf_set_show_line_pref
    inf_set_show_line_pref.restype = ctypes.c_char
    inf_set_show_line_pref.argtypes = [ctypes.c_char]
    inf_set_show_repeatables = _libraries['FIXME_STUB'].inf_set_show_repeatables
    inf_set_show_repeatables.restype = ctypes.c_char
    inf_set_show_repeatables.argtypes = [ctypes.c_char]
    inf_set_show_src_linnum = _libraries['FIXME_STUB'].inf_set_show_src_linnum
    inf_set_show_src_linnum.restype = ctypes.c_char
    inf_set_show_src_linnum.argtypes = [ctypes.c_char]
    inf_set_show_void = _libraries['FIXME_STUB'].inf_set_show_void
    inf_set_show_void.restype = ctypes.c_char
    inf_set_show_void.argtypes = [ctypes.c_char]
    inf_set_show_xref_fncoff = _libraries['FIXME_STUB'].inf_set_show_xref_fncoff
    inf_set_show_xref_fncoff.restype = ctypes.c_char
    inf_set_show_xref_fncoff.argtypes = [ctypes.c_char]
    inf_set_show_xref_seg = _libraries['FIXME_STUB'].inf_set_show_xref_seg
    inf_set_show_xref_seg.restype = ctypes.c_char
    inf_set_show_xref_seg.argtypes = [ctypes.c_char]
    inf_set_show_xref_tmarks = _libraries['FIXME_STUB'].inf_set_show_xref_tmarks
    inf_set_show_xref_tmarks.restype = ctypes.c_char
    inf_set_show_xref_tmarks.argtypes = [ctypes.c_char]
    inf_set_show_xref_val = _libraries['FIXME_STUB'].inf_set_show_xref_val
    inf_set_show_xref_val.restype = ctypes.c_char
    inf_set_show_xref_val.argtypes = [ctypes.c_char]
    inf_set_snapshot = _libraries['FIXME_STUB'].inf_set_snapshot
    inf_set_snapshot.restype = ctypes.c_char
    inf_set_snapshot.argtypes = [ctypes.c_char]
    inf_set_specsegs = _libraries['FIXME_STUB'].inf_set_specsegs
    inf_set_specsegs.restype = ctypes.c_char
    inf_set_specsegs.argtypes = [uchar]
    inf_set_stack_ldbl = _libraries['FIXME_STUB'].inf_set_stack_ldbl
    inf_set_stack_ldbl.restype = ctypes.c_char
    inf_set_stack_ldbl.argtypes = [ctypes.c_char]
    inf_set_stack_varargs = _libraries['FIXME_STUB'].inf_set_stack_varargs
    inf_set_stack_varargs.restype = ctypes.c_char
    inf_set_stack_varargs.argtypes = [ctypes.c_char]
    inf_set_start_cs = _libraries['FIXME_STUB'].inf_set_start_cs
    inf_set_start_cs.restype = ctypes.c_char
    inf_set_start_cs.argtypes = [sel_t]
    inf_set_start_ea = _libraries['FIXME_STUB'].inf_set_start_ea
    inf_set_start_ea.restype = ctypes.c_char
    inf_set_start_ea.argtypes = [ea_t]
    inf_set_start_ip = _libraries['FIXME_STUB'].inf_set_start_ip
    inf_set_start_ip.restype = ctypes.c_char
    inf_set_start_ip.argtypes = [ea_t]
    inf_set_start_sp = _libraries['FIXME_STUB'].inf_set_start_sp
    inf_set_start_sp.restype = ctypes.c_char
    inf_set_start_sp.argtypes = [ea_t]
    inf_set_start_ss = _libraries['FIXME_STUB'].inf_set_start_ss
    inf_set_start_ss.restype = ctypes.c_char
    inf_set_start_ss.argtypes = [sel_t]
    inf_set_strlit_autocmt = _libraries['FIXME_STUB'].inf_set_strlit_autocmt
    inf_set_strlit_autocmt.restype = ctypes.c_char
    inf_set_strlit_autocmt.argtypes = [ctypes.c_char]
    inf_set_strlit_break = _libraries['FIXME_STUB'].inf_set_strlit_break
    inf_set_strlit_break.restype = ctypes.c_char
    inf_set_strlit_break.argtypes = [uchar]
    inf_set_strlit_flags = _libraries['FIXME_STUB'].inf_set_strlit_flags
    inf_set_strlit_flags.restype = ctypes.c_char
    inf_set_strlit_flags.argtypes = [uchar]
    inf_set_strlit_name_bit = _libraries['FIXME_STUB'].inf_set_strlit_name_bit
    inf_set_strlit_name_bit.restype = ctypes.c_char
    inf_set_strlit_name_bit.argtypes = [ctypes.c_char]
    inf_set_strlit_names = _libraries['FIXME_STUB'].inf_set_strlit_names
    inf_set_strlit_names.restype = ctypes.c_char
    inf_set_strlit_names.argtypes = [ctypes.c_char]
    inf_set_strlit_pref = _libraries['FIXME_STUB'].inf_set_strlit_pref
    inf_set_strlit_pref.restype = ctypes.c_char
    inf_set_strlit_pref.argtypes = [ctypes.c_char_p, size_t]
    inf_set_strlit_savecase = _libraries['FIXME_STUB'].inf_set_strlit_savecase
    inf_set_strlit_savecase.restype = ctypes.c_char
    inf_set_strlit_savecase.argtypes = [ctypes.c_char]
    inf_set_strlit_serial_names = _libraries['FIXME_STUB'].inf_set_strlit_serial_names
    inf_set_strlit_serial_names.restype = ctypes.c_char
    inf_set_strlit_serial_names.argtypes = [ctypes.c_char]
    inf_set_strlit_sernum = _libraries['FIXME_STUB'].inf_set_strlit_sernum
    inf_set_strlit_sernum.restype = ctypes.c_char
    inf_set_strlit_sernum.argtypes = [uval_t]
    inf_set_strlit_zeroes = _libraries['FIXME_STUB'].inf_set_strlit_zeroes
    inf_set_strlit_zeroes.restype = ctypes.c_char
    inf_set_strlit_zeroes.argtypes = [ctypes.c_char]
    inf_set_strtype = _libraries['FIXME_STUB'].inf_set_strtype
    inf_set_strtype.restype = ctypes.c_char
    inf_set_strtype.argtypes = [int32]
    inf_set_trace_flow = _libraries['FIXME_STUB'].inf_set_trace_flow
    inf_set_trace_flow.restype = ctypes.c_char
    inf_set_trace_flow.argtypes = [ctypes.c_char]
    inf_set_truncate_on_del = _libraries['FIXME_STUB'].inf_set_truncate_on_del
    inf_set_truncate_on_del.restype = ctypes.c_char
    inf_set_truncate_on_del.argtypes = [ctypes.c_char]
    inf_set_type_xrefnum = _libraries['FIXME_STUB'].inf_set_type_xrefnum
    inf_set_type_xrefnum.restype = ctypes.c_char
    inf_set_type_xrefnum.argtypes = [uchar]
    inf_set_unicode_strlits = _libraries['FIXME_STUB'].inf_set_unicode_strlits
    inf_set_unicode_strlits.restype = ctypes.c_char
    inf_set_unicode_strlits.argtypes = [ctypes.c_char]
    inf_set_use_allasm = _libraries['FIXME_STUB'].inf_set_use_allasm
    inf_set_use_allasm.restype = ctypes.c_char
    inf_set_use_allasm.argtypes = [ctypes.c_char]
    inf_set_use_flirt = _libraries['FIXME_STUB'].inf_set_use_flirt
    inf_set_use_flirt.restype = ctypes.c_char
    inf_set_use_flirt.argtypes = [ctypes.c_char]
    inf_set_use_gcc_layout = _libraries['FIXME_STUB'].inf_set_use_gcc_layout
    inf_set_use_gcc_layout.restype = ctypes.c_char
    inf_set_use_gcc_layout.argtypes = [ctypes.c_char]
    inf_set_version = _libraries['FIXME_STUB'].inf_set_version
    inf_set_version.restype = ctypes.c_char
    inf_set_version.argtypes = [ushort]
    inf_set_wide_high_byte_first = _libraries['FIXME_STUB'].inf_set_wide_high_byte_first
    inf_set_wide_high_byte_first.restype = ctypes.c_char
    inf_set_wide_high_byte_first.argtypes = [ctypes.c_char]
    inf_set_xrefflag = _libraries['FIXME_STUB'].inf_set_xrefflag
    inf_set_xrefflag.restype = ctypes.c_char
    inf_set_xrefflag.argtypes = [uchar]
    inf_set_xrefnum = _libraries['FIXME_STUB'].inf_set_xrefnum
    inf_set_xrefnum.restype = ctypes.c_char
    inf_set_xrefnum.argtypes = [uchar]
    inf_should_create_stkvars = _libraries['FIXME_STUB'].inf_should_create_stkvars
    inf_should_create_stkvars.restype = ctypes.c_char
    inf_should_create_stkvars.argtypes = []
    inf_should_trace_sp = _libraries['FIXME_STUB'].inf_should_trace_sp
    inf_should_trace_sp.restype = ctypes.c_char
    inf_should_trace_sp.argtypes = []
    inf_show_all_comments = _libraries['FIXME_STUB'].inf_show_all_comments
    inf_show_all_comments.restype = ctypes.c_char
    inf_show_all_comments.argtypes = []
    inf_show_auto = _libraries['FIXME_STUB'].inf_show_auto
    inf_show_auto.restype = ctypes.c_char
    inf_show_auto.argtypes = []
    inf_show_hidden_funcs = _libraries['FIXME_STUB'].inf_show_hidden_funcs
    inf_show_hidden_funcs.restype = ctypes.c_char
    inf_show_hidden_funcs.argtypes = []
    inf_show_hidden_insns = _libraries['FIXME_STUB'].inf_show_hidden_insns
    inf_show_hidden_insns.restype = ctypes.c_char
    inf_show_hidden_insns.argtypes = []
    inf_show_hidden_segms = _libraries['FIXME_STUB'].inf_show_hidden_segms
    inf_show_hidden_segms.restype = ctypes.c_char
    inf_show_hidden_segms.argtypes = []
    inf_show_line_pref = _libraries['FIXME_STUB'].inf_show_line_pref
    inf_show_line_pref.restype = ctypes.c_char
    inf_show_line_pref.argtypes = []
    inf_show_repeatables = _libraries['FIXME_STUB'].inf_show_repeatables
    inf_show_repeatables.restype = ctypes.c_char
    inf_show_repeatables.argtypes = []
    inf_show_src_linnum = _libraries['FIXME_STUB'].inf_show_src_linnum
    inf_show_src_linnum.restype = ctypes.c_char
    inf_show_src_linnum.argtypes = []
    inf_show_void = _libraries['FIXME_STUB'].inf_show_void
    inf_show_void.restype = ctypes.c_char
    inf_show_void.argtypes = []
    inf_show_xref_fncoff = _libraries['FIXME_STUB'].inf_show_xref_fncoff
    inf_show_xref_fncoff.restype = ctypes.c_char
    inf_show_xref_fncoff.argtypes = []
    inf_show_xref_seg = _libraries['FIXME_STUB'].inf_show_xref_seg
    inf_show_xref_seg.restype = ctypes.c_char
    inf_show_xref_seg.argtypes = []
    inf_show_xref_tmarks = _libraries['FIXME_STUB'].inf_show_xref_tmarks
    inf_show_xref_tmarks.restype = ctypes.c_char
    inf_show_xref_tmarks.argtypes = []
    inf_show_xref_val = _libraries['FIXME_STUB'].inf_show_xref_val
    inf_show_xref_val.restype = ctypes.c_char
    inf_show_xref_val.argtypes = []
    inf_stack_ldbl = _libraries['FIXME_STUB'].inf_stack_ldbl
    inf_stack_ldbl.restype = ctypes.c_char
    inf_stack_ldbl.argtypes = []
    inf_stack_varargs = _libraries['FIXME_STUB'].inf_stack_varargs
    inf_stack_varargs.restype = ctypes.c_char
    inf_stack_varargs.argtypes = []
    inf_strlit_autocmt = _libraries['FIXME_STUB'].inf_strlit_autocmt
    inf_strlit_autocmt.restype = ctypes.c_char
    inf_strlit_autocmt.argtypes = []
    inf_strlit_name_bit = _libraries['FIXME_STUB'].inf_strlit_name_bit
    inf_strlit_name_bit.restype = ctypes.c_char
    inf_strlit_name_bit.argtypes = []
    inf_strlit_names = _libraries['FIXME_STUB'].inf_strlit_names
    inf_strlit_names.restype = ctypes.c_char
    inf_strlit_names.argtypes = []
    inf_strlit_savecase = _libraries['FIXME_STUB'].inf_strlit_savecase
    inf_strlit_savecase.restype = ctypes.c_char
    inf_strlit_savecase.argtypes = []
    inf_strlit_serial_names = _libraries['FIXME_STUB'].inf_strlit_serial_names
    inf_strlit_serial_names.restype = ctypes.c_char
    inf_strlit_serial_names.argtypes = []
    inf_test_mode = _libraries['FIXME_STUB'].inf_test_mode
    inf_test_mode.restype = ctypes.c_char
    inf_test_mode.argtypes = []
    inf_trace_flow = _libraries['FIXME_STUB'].inf_trace_flow
    inf_trace_flow.restype = ctypes.c_char
    inf_trace_flow.argtypes = []
    inf_truncate_on_del = _libraries['FIXME_STUB'].inf_truncate_on_del
    inf_truncate_on_del.restype = ctypes.c_char
    inf_truncate_on_del.argtypes = []
    inf_unicode_strlits = _libraries['FIXME_STUB'].inf_unicode_strlits
    inf_unicode_strlits.restype = ctypes.c_char
    inf_unicode_strlits.argtypes = []
    inf_use_allasm = _libraries['FIXME_STUB'].inf_use_allasm
    inf_use_allasm.restype = ctypes.c_char
    inf_use_allasm.argtypes = []
    inf_use_flirt = _libraries['FIXME_STUB'].inf_use_flirt
    inf_use_flirt.restype = ctypes.c_char
    inf_use_flirt.argtypes = []
    inf_use_gcc_layout = _libraries['FIXME_STUB'].inf_use_gcc_layout
    inf_use_gcc_layout.restype = ctypes.c_char
    inf_use_gcc_layout.argtypes = []
    info = _libraries['FIXME_STUB'].info
    info.restype = None
    info.argtypes = [ctypes.c_char_p]
    init_database = _libraries['FIXME_STUB'].init_database
    init_database.restype = ctypes.c_int32
    init_database.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_char_p), ctypes.POINTER(ctypes.c_int32)]
    init_ignore_micro = _libraries['FIXME_STUB'].init_ignore_micro
    init_ignore_micro.restype = None
    init_ignore_micro.argtypes = []
    init_plugins = _libraries['FIXME_STUB'].init_plugins
    init_plugins.restype = None
    init_plugins.argtypes = [ctypes.c_int32]
    insn_add_cref = _libraries['FIXME_STUB'].insn_add_cref
    insn_add_cref.restype = None
    insn_add_cref.argtypes = [ctypes.POINTER(struct_insn_t), ea_t, ctypes.c_int32, cref_t]
    insn_add_dref = _libraries['FIXME_STUB'].insn_add_dref
    insn_add_dref.restype = None
    insn_add_dref.argtypes = [ctypes.POINTER(struct_insn_t), ea_t, ctypes.c_int32, dref_t]
    insn_add_off_drefs = _libraries['FIXME_STUB'].insn_add_off_drefs
    insn_add_off_drefs.restype = ea_t
    insn_add_off_drefs.argtypes = [ctypes.POINTER(struct_insn_t), ctypes.POINTER(struct_op_t), dref_t, ctypes.c_int32]
    insn_create_op_data = _libraries['FIXME_STUB'].insn_create_op_data
    insn_create_op_data.restype = ctypes.c_char
    insn_create_op_data.argtypes = [ctypes.POINTER(struct_insn_t), ea_t, ctypes.c_int32, op_dtype_t]
    insn_create_stkvar = _libraries['FIXME_STUB'].insn_create_stkvar
    insn_create_stkvar.restype = ctypes.c_char
    insn_create_stkvar.argtypes = [ctypes.POINTER(struct_insn_t), ctypes.POINTER(struct_op_t), adiff_t, ctypes.c_int32]
    install_command_interpreter = _libraries['FIXME_STUB'].install_command_interpreter
    install_command_interpreter.restype = None
    install_command_interpreter.argtypes = [ctypes.POINTER(struct_cli_t)]
    install_custom_argloc = _libraries['FIXME_STUB'].install_custom_argloc
    install_custom_argloc.restype = ctypes.c_int32
    install_custom_argloc.argtypes = [ctypes.POINTER(struct_custloc_desc_t)]
    install_extlang = _libraries['FIXME_STUB'].install_extlang
    install_extlang.restype = ssize_t
    install_extlang.argtypes = [ctypes.POINTER(struct_extlang_t)]
    install_user_defined_prefix = _libraries['FIXME_STUB'].install_user_defined_prefix
    install_user_defined_prefix.restype = ctypes.c_char
    install_user_defined_prefix.argtypes = [size_t, ctypes.POINTER(struct_user_defined_prefix_t), ctypes.POINTER(None)]
    internal_cleanup_appcall = _libraries['FIXME_STUB'].internal_cleanup_appcall
    internal_cleanup_appcall.restype = ctypes.c_int32
    internal_cleanup_appcall.argtypes = [thid_t]
    internal_get_sreg_base = _libraries['FIXME_STUB'].internal_get_sreg_base
    internal_get_sreg_base.restype = ctypes.c_int32
    internal_get_sreg_base.argtypes = [ctypes.POINTER(ea_t), thid_t, ctypes.c_int32]
    internal_ioctl = _libraries['FIXME_STUB'].internal_ioctl
    internal_ioctl.restype = ctypes.c_int32
    internal_ioctl.argtypes = [ctypes.c_int32, ctypes.POINTER(None), size_t, ctypes.POINTER(ctypes.POINTER(None)), ctypes.POINTER(ssize_t)]
    internal_register_place_class = _libraries['FIXME_STUB'].internal_register_place_class
    internal_register_place_class.restype = ctypes.c_int32
    internal_register_place_class.argtypes = [ctypes.POINTER(struct_place_t), ctypes.c_int32, ctypes.POINTER(struct_plugin_t), ctypes.c_int32]
    interr = _libraries['FIXME_STUB'].interr
    interr.restype = None
    interr.argtypes = [ctypes.c_int32]
    interr_should_throw = (ctypes.c_char).in_dll(_libraries['FIXME_STUB'], 'interr_should_throw') if getattr(_libraries['FIXME_STUB'], 'interr_should_throw', None) else None
    invalidate_dbg_state = _libraries['FIXME_STUB'].invalidate_dbg_state
    invalidate_dbg_state.restype = ctypes.c_int32
    invalidate_dbg_state.argtypes = [ctypes.c_int32]
    invalidate_dbgmem_config = _libraries['FIXME_STUB'].invalidate_dbgmem_config
    invalidate_dbgmem_config.restype = None
    invalidate_dbgmem_config.argtypes = []
    invalidate_dbgmem_contents = _libraries['FIXME_STUB'].invalidate_dbgmem_contents
    invalidate_dbgmem_contents.restype = None
    invalidate_dbgmem_contents.argtypes = [ea_t, asize_t]
    invalidate_sp_analysis = _libraries['FIXME_STUB'].invalidate_sp_analysis
    invalidate_sp_analysis.restype = ctypes.c_char
    invalidate_sp_analysis.argtypes = [ea_t]
    invoke_callbacks = _libraries['FIXME_STUB'].invoke_callbacks
    invoke_callbacks.restype = ssize_t
    invoke_callbacks.argtypes = [hook_type_t, ctypes.c_int32, va_list]
    invoke_plugin = _libraries['FIXME_STUB'].invoke_plugin
    invoke_plugin.restype = ctypes.c_char
    invoke_plugin.argtypes = [ctypes.POINTER(struct_plugin_info_t)]
    is__bnot0 = _libraries['FIXME_STUB'].is__bnot0
    is__bnot0.restype = ctypes.c_char
    is__bnot0.argtypes = [ea_t]
    is__bnot1 = _libraries['FIXME_STUB'].is__bnot1
    is__bnot1.restype = ctypes.c_char
    is__bnot1.argtypes = [ea_t]
    is__invsign0 = _libraries['FIXME_STUB'].is__invsign0
    is__invsign0.restype = ctypes.c_char
    is__invsign0.argtypes = [ea_t]
    is__invsign1 = _libraries['FIXME_STUB'].is__invsign1
    is__invsign1.restype = ctypes.c_char
    is__invsign1.argtypes = [ea_t]
    is_action_enabled = _libraries['FIXME_STUB'].is_action_enabled
    is_action_enabled.restype = ctypes.c_char
    is_action_enabled.argtypes = [action_state_t]
    is_aflag__bnot0 = _libraries['FIXME_STUB'].is_aflag__bnot0
    is_aflag__bnot0.restype = ctypes.c_char
    is_aflag__bnot0.argtypes = [aflags_t]
    is_aflag__bnot1 = _libraries['FIXME_STUB'].is_aflag__bnot1
    is_aflag__bnot1.restype = ctypes.c_char
    is_aflag__bnot1.argtypes = [aflags_t]
    is_aflag__invsign0 = _libraries['FIXME_STUB'].is_aflag__invsign0
    is_aflag__invsign0.restype = ctypes.c_char
    is_aflag__invsign0.argtypes = [aflags_t]
    is_aflag__invsign1 = _libraries['FIXME_STUB'].is_aflag__invsign1
    is_aflag__invsign1.restype = ctypes.c_char
    is_aflag__invsign1.argtypes = [aflags_t]
    is_aflag_align_flow = _libraries['FIXME_STUB'].is_aflag_align_flow
    is_aflag_align_flow.restype = ctypes.c_char
    is_aflag_align_flow.argtypes = [aflags_t]
    is_aflag_colored_item = _libraries['FIXME_STUB'].is_aflag_colored_item
    is_aflag_colored_item.restype = ctypes.c_char
    is_aflag_colored_item.argtypes = [aflags_t]
    is_aflag_data_guessed_by_hexrays = _libraries['FIXME_STUB'].is_aflag_data_guessed_by_hexrays
    is_aflag_data_guessed_by_hexrays.restype = ctypes.c_char
    is_aflag_data_guessed_by_hexrays.argtypes = [aflags_t]
    is_aflag_fixed_spd = _libraries['FIXME_STUB'].is_aflag_fixed_spd
    is_aflag_fixed_spd.restype = ctypes.c_char
    is_aflag_fixed_spd.argtypes = [aflags_t]
    is_aflag_func_guessed_by_hexrays = _libraries['FIXME_STUB'].is_aflag_func_guessed_by_hexrays
    is_aflag_func_guessed_by_hexrays.restype = ctypes.c_char
    is_aflag_func_guessed_by_hexrays.argtypes = [aflags_t]
    is_aflag_hidden_border = _libraries['FIXME_STUB'].is_aflag_hidden_border
    is_aflag_hidden_border.restype = ctypes.c_char
    is_aflag_hidden_border.argtypes = [aflags_t]
    is_aflag_hidden_item = _libraries['FIXME_STUB'].is_aflag_hidden_item
    is_aflag_hidden_item.restype = ctypes.c_char
    is_aflag_hidden_item.argtypes = [aflags_t]
    is_aflag_libitem = _libraries['FIXME_STUB'].is_aflag_libitem
    is_aflag_libitem.restype = ctypes.c_char
    is_aflag_libitem.argtypes = [aflags_t]
    is_aflag_lzero0 = _libraries['FIXME_STUB'].is_aflag_lzero0
    is_aflag_lzero0.restype = ctypes.c_char
    is_aflag_lzero0.argtypes = [aflags_t]
    is_aflag_lzero1 = _libraries['FIXME_STUB'].is_aflag_lzero1
    is_aflag_lzero1.restype = ctypes.c_char
    is_aflag_lzero1.argtypes = [aflags_t]
    is_aflag_manual_insn = _libraries['FIXME_STUB'].is_aflag_manual_insn
    is_aflag_manual_insn.restype = ctypes.c_char
    is_aflag_manual_insn.argtypes = [aflags_t]
    is_aflag_noret = _libraries['FIXME_STUB'].is_aflag_noret
    is_aflag_noret.restype = ctypes.c_char
    is_aflag_noret.argtypes = [aflags_t]
    is_aflag_notcode = _libraries['FIXME_STUB'].is_aflag_notcode
    is_aflag_notcode.restype = ctypes.c_char
    is_aflag_notcode.argtypes = [aflags_t]
    is_aflag_notproc = _libraries['FIXME_STUB'].is_aflag_notproc
    is_aflag_notproc.restype = ctypes.c_char
    is_aflag_notproc.argtypes = [aflags_t]
    is_aflag_public_name = _libraries['FIXME_STUB'].is_aflag_public_name
    is_aflag_public_name.restype = ctypes.c_char
    is_aflag_public_name.argtypes = [aflags_t]
    is_aflag_retfp = _libraries['FIXME_STUB'].is_aflag_retfp
    is_aflag_retfp.restype = ctypes.c_char
    is_aflag_retfp.argtypes = [aflags_t]
    is_aflag_terse_struc = _libraries['FIXME_STUB'].is_aflag_terse_struc
    is_aflag_terse_struc.restype = ctypes.c_char
    is_aflag_terse_struc.argtypes = [aflags_t]
    is_aflag_tilcmt = _libraries['FIXME_STUB'].is_aflag_tilcmt
    is_aflag_tilcmt.restype = ctypes.c_char
    is_aflag_tilcmt.argtypes = [aflags_t]
    is_aflag_type_determined_by_hexrays = _libraries['FIXME_STUB'].is_aflag_type_determined_by_hexrays
    is_aflag_type_determined_by_hexrays.restype = ctypes.c_char
    is_aflag_type_determined_by_hexrays.argtypes = [aflags_t]
    is_aflag_type_guessed_by_hexrays = _libraries['FIXME_STUB'].is_aflag_type_guessed_by_hexrays
    is_aflag_type_guessed_by_hexrays.restype = ctypes.c_char
    is_aflag_type_guessed_by_hexrays.argtypes = [aflags_t]
    is_aflag_type_guessed_by_ida = _libraries['FIXME_STUB'].is_aflag_type_guessed_by_ida
    is_aflag_type_guessed_by_ida.restype = ctypes.c_char
    is_aflag_type_guessed_by_ida.argtypes = [aflags_t]
    is_aflag_usersp = _libraries['FIXME_STUB'].is_aflag_usersp
    is_aflag_usersp.restype = ctypes.c_char
    is_aflag_usersp.argtypes = [aflags_t]
    is_aflag_userti = _libraries['FIXME_STUB'].is_aflag_userti
    is_aflag_userti.restype = ctypes.c_char
    is_aflag_userti.argtypes = [aflags_t]
    is_aflag_weak_name = _libraries['FIXME_STUB'].is_aflag_weak_name
    is_aflag_weak_name.restype = ctypes.c_char
    is_aflag_weak_name.argtypes = [aflags_t]
    is_aflag_zstroff = _libraries['FIXME_STUB'].is_aflag_zstroff
    is_aflag_zstroff.restype = ctypes.c_char
    is_aflag_zstroff.argtypes = [aflags_t]
    is_align = _libraries['FIXME_STUB'].is_align
    is_align.restype = ctypes.c_char
    is_align.argtypes = [flags_t]
    is_align_flow = _libraries['FIXME_STUB'].is_align_flow
    is_align_flow.restype = ctypes.c_char
    is_align_flow.argtypes = [ea_t]
    is_align_insn = _libraries['FIXME_STUB'].is_align_insn
    is_align_insn.restype = ctypes.c_int32
    is_align_insn.argtypes = [ea_t]
    is_anonymous_member_name = _libraries['FIXME_STUB'].is_anonymous_member_name
    is_anonymous_member_name.restype = ctypes.c_char
    is_anonymous_member_name.argtypes = [ctypes.c_char_p]
    is_attached_custom_data_format = _libraries['FIXME_STUB'].is_attached_custom_data_format
    is_attached_custom_data_format.restype = ctypes.c_char
    is_attached_custom_data_format.argtypes = [ctypes.c_int32, ctypes.c_int32]
    is_auto_enabled = _libraries['FIXME_STUB'].is_auto_enabled
    is_auto_enabled.restype = ctypes.c_char
    is_auto_enabled.argtypes = []
    is_autosync = _libraries['FIXME_STUB'].is_autosync
    is_autosync.restype = ctypes.c_char
    is_autosync.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_tinfo_t)]
    is_basic_block_end = _libraries['FIXME_STUB'].is_basic_block_end
    is_basic_block_end.restype = ctypes.c_char
    is_basic_block_end.argtypes = [ctypes.POINTER(struct_insn_t), ctypes.c_char]
    is_bblk_trace_enabled = _libraries['FIXME_STUB'].is_bblk_trace_enabled
    is_bblk_trace_enabled.restype = ctypes.c_char
    is_bblk_trace_enabled.argtypes = []
    is_bf = _libraries['FIXME_STUB'].is_bf
    is_bf.restype = ctypes.c_char
    is_bf.argtypes = [enum_t]
    is_bnot = _libraries['FIXME_STUB'].is_bnot
    is_bnot.restype = ctypes.c_char
    is_bnot.argtypes = [ea_t, flags_t, ctypes.c_int32]
    is_byte = _libraries['FIXME_STUB'].is_byte
    is_byte.restype = ctypes.c_char
    is_byte.argtypes = [flags_t]
    is_call_insn = _libraries['FIXME_STUB'].is_call_insn
    is_call_insn.restype = ctypes.c_char
    is_call_insn.argtypes = [ctypes.POINTER(struct_insn_t)]
    is_char = _libraries['FIXME_STUB'].is_char
    is_char.restype = ctypes.c_char
    is_char.argtypes = [flags_t, ctypes.c_int32]
    is_char0 = _libraries['FIXME_STUB'].is_char0
    is_char0.restype = ctypes.c_char
    is_char0.argtypes = [flags_t]
    is_char1 = _libraries['FIXME_STUB'].is_char1
    is_char1.restype = ctypes.c_char
    is_char1.argtypes = [flags_t]
    is_chooser_widget = _libraries['FIXME_STUB'].is_chooser_widget
    is_chooser_widget.restype = ctypes.c_char
    is_chooser_widget.argtypes = [twidget_type_t]
    is_code = _libraries['FIXME_STUB'].is_code
    is_code.restype = ctypes.c_char
    is_code.argtypes = [flags_t]
    is_code_far = _libraries['FIXME_STUB'].is_code_far
    is_code_far.restype = ctypes.c_char
    is_code_far.argtypes = [cm_t]
    is_colored_item = _libraries['FIXME_STUB'].is_colored_item
    is_colored_item.restype = ctypes.c_char
    is_colored_item.argtypes = [ea_t]
    is_comp_unsure = _libraries['FIXME_STUB'].is_comp_unsure
    is_comp_unsure.restype = comp_t
    is_comp_unsure.argtypes = [comp_t]
    is_control_tty = _libraries['FIXME_STUB'].is_control_tty
    is_control_tty.restype = tty_control_t
    is_control_tty.argtypes = [ctypes.c_int32]
    is_cp_graphical = _libraries['FIXME_STUB'].is_cp_graphical
    is_cp_graphical.restype = ctypes.c_char
    is_cp_graphical.argtypes = [wchar32_t]
    is_custfmt = _libraries['FIXME_STUB'].is_custfmt
    is_custfmt.restype = ctypes.c_char
    is_custfmt.argtypes = [flags_t, ctypes.c_int32]
    is_custfmt0 = _libraries['FIXME_STUB'].is_custfmt0
    is_custfmt0.restype = ctypes.c_char
    is_custfmt0.argtypes = [flags_t]
    is_custfmt1 = _libraries['FIXME_STUB'].is_custfmt1
    is_custfmt1.restype = ctypes.c_char
    is_custfmt1.argtypes = [flags_t]
    is_custom = _libraries['FIXME_STUB'].is_custom
    is_custom.restype = ctypes.c_char
    is_custom.argtypes = [flags_t]
    is_data = _libraries['FIXME_STUB'].is_data
    is_data.restype = ctypes.c_char
    is_data.argtypes = [flags_t]
    is_data_far = _libraries['FIXME_STUB'].is_data_far
    is_data_far.restype = ctypes.c_char
    is_data_far.argtypes = [cm_t]
    is_data_guessed_by_hexrays = _libraries['FIXME_STUB'].is_data_guessed_by_hexrays
    is_data_guessed_by_hexrays.restype = ctypes.c_char
    is_data_guessed_by_hexrays.argtypes = [ea_t]
    is_database_ext = _libraries['FIXME_STUB'].is_database_ext
    is_database_ext.restype = ctypes.c_char
    is_database_ext.argtypes = [ctypes.c_char_p]
    is_database_flag = _libraries['FIXME_STUB'].is_database_flag
    is_database_flag.restype = ctypes.c_char
    is_database_flag.argtypes = [uint32]
    is_debugger_busy = _libraries['FIXME_STUB'].is_debugger_busy
    is_debugger_busy.restype = ctypes.c_char
    is_debugger_busy.argtypes = []
    is_debugger_memory = _libraries['FIXME_STUB'].is_debugger_memory
    is_debugger_memory.restype = ctypes.c_char
    is_debugger_memory.argtypes = [ea_t]
    is_debugger_on = _libraries['FIXME_STUB'].is_debugger_on
    is_debugger_on.restype = ctypes.c_char
    is_debugger_on.argtypes = []
    is_debugger_segm = _libraries['FIXME_STUB'].is_debugger_segm
    is_debugger_segm.restype = ctypes.c_char
    is_debugger_segm.argtypes = [ea_t]
    is_defarg = _libraries['FIXME_STUB'].is_defarg
    is_defarg.restype = ctypes.c_char
    is_defarg.argtypes = [flags_t, ctypes.c_int32]
    is_defarg0 = _libraries['FIXME_STUB'].is_defarg0
    is_defarg0.restype = ctypes.c_char
    is_defarg0.argtypes = [flags_t]
    is_defarg1 = _libraries['FIXME_STUB'].is_defarg1
    is_defarg1.restype = ctypes.c_char
    is_defarg1.argtypes = [flags_t]
    is_double = _libraries['FIXME_STUB'].is_double
    is_double.restype = ctypes.c_char
    is_double.argtypes = [flags_t]
    is_dummy_member_name = _libraries['FIXME_STUB'].is_dummy_member_name
    is_dummy_member_name.restype = ctypes.c_char
    is_dummy_member_name.argtypes = [ctypes.c_char_p]
    is_dword = _libraries['FIXME_STUB'].is_dword
    is_dword.restype = ctypes.c_char
    is_dword.argtypes = [flags_t]
    is_ea_tryblks = _libraries['FIXME_STUB'].is_ea_tryblks
    is_ea_tryblks.restype = ctypes.c_char
    is_ea_tryblks.argtypes = [ea_t, uint32]
    is_enum = _libraries['FIXME_STUB'].is_enum
    is_enum.restype = ctypes.c_char
    is_enum.argtypes = [flags_t, ctypes.c_int32]
    is_enum0 = _libraries['FIXME_STUB'].is_enum0
    is_enum0.restype = ctypes.c_char
    is_enum0.argtypes = [flags_t]
    is_enum1 = _libraries['FIXME_STUB'].is_enum1
    is_enum1.restype = ctypes.c_char
    is_enum1.argtypes = [flags_t]
    is_enum_fromtil = _libraries['FIXME_STUB'].is_enum_fromtil
    is_enum_fromtil.restype = ctypes.c_char
    is_enum_fromtil.argtypes = [enum_t]
    is_enum_hidden = _libraries['FIXME_STUB'].is_enum_hidden
    is_enum_hidden.restype = ctypes.c_char
    is_enum_hidden.argtypes = [enum_t]
    is_ephemeral_segm = _libraries['FIXME_STUB'].is_ephemeral_segm
    is_ephemeral_segm.restype = ctypes.c_char
    is_ephemeral_segm.argtypes = [ea_t]
    is_epilog_insn = _libraries['FIXME_STUB'].is_epilog_insn
    is_epilog_insn.restype = ctypes.c_char
    is_epilog_insn.argtypes = [ea_t]
    is_filetype_like_binary = _libraries['FIXME_STUB'].is_filetype_like_binary
    is_filetype_like_binary.restype = ctypes.c_char
    is_filetype_like_binary.argtypes = [filetype_t]
    is_finally_visible_func = _libraries['FIXME_STUB'].is_finally_visible_func
    is_finally_visible_func.restype = ctypes.c_char
    is_finally_visible_func.argtypes = [ctypes.POINTER(struct_func_t)]
    is_finally_visible_item = _libraries['FIXME_STUB'].is_finally_visible_item
    is_finally_visible_item.restype = ctypes.c_char
    is_finally_visible_item.argtypes = [ea_t]
    is_finally_visible_segm = _libraries['FIXME_STUB'].is_finally_visible_segm
    is_finally_visible_segm.restype = ctypes.c_char
    is_finally_visible_segm.argtypes = [ctypes.POINTER(struct_segment_t)]
    is_first_visea = _libraries['FIXME_STUB'].is_first_visea
    is_first_visea.restype = ctypes.c_char
    is_first_visea.argtypes = [ea_t]
    is_fixed_spd = _libraries['FIXME_STUB'].is_fixed_spd
    is_fixed_spd.restype = ctypes.c_char
    is_fixed_spd.argtypes = [ea_t]
    is_fixup_custom = _libraries['FIXME_STUB'].is_fixup_custom
    is_fixup_custom.restype = ctypes.c_char
    is_fixup_custom.argtypes = [fixup_type_t]
    is_float = _libraries['FIXME_STUB'].is_float
    is_float.restype = ctypes.c_char
    is_float.argtypes = [flags_t]
    is_float0 = _libraries['FIXME_STUB'].is_float0
    is_float0.restype = ctypes.c_char
    is_float0.argtypes = [flags_t]
    is_float1 = _libraries['FIXME_STUB'].is_float1
    is_float1.restype = ctypes.c_char
    is_float1.argtypes = [flags_t]
    is_floating_dtype = _libraries['FIXME_STUB'].is_floating_dtype
    is_floating_dtype.restype = ctypes.c_char
    is_floating_dtype.argtypes = [op_dtype_t]
    is_flow = _libraries['FIXME_STUB'].is_flow
    is_flow.restype = ctypes.c_char
    is_flow.argtypes = [flags_t]
    is_fltnum = _libraries['FIXME_STUB'].is_fltnum
    is_fltnum.restype = ctypes.c_char
    is_fltnum.argtypes = [flags_t, ctypes.c_int32]
    is_forced_operand = _libraries['FIXME_STUB'].is_forced_operand
    is_forced_operand.restype = ctypes.c_char
    is_forced_operand.argtypes = [ea_t, ctypes.c_int32]
    is_func = _libraries['FIXME_STUB'].is_func
    is_func.restype = ctypes.c_char
    is_func.argtypes = [flags_t]
    is_func_entry = _libraries['FIXME_STUB'].is_func_entry
    is_func_entry.restype = ctypes.c_char
    is_func_entry.argtypes = [ctypes.POINTER(struct_func_t)]
    is_func_guessed_by_hexrays = _libraries['FIXME_STUB'].is_func_guessed_by_hexrays
    is_func_guessed_by_hexrays.restype = ctypes.c_char
    is_func_guessed_by_hexrays.argtypes = [ea_t]
    is_func_locked = _libraries['FIXME_STUB'].is_func_locked
    is_func_locked.restype = ctypes.c_char
    is_func_locked.argtypes = [ctypes.POINTER(struct_func_t)]
    is_func_tail = _libraries['FIXME_STUB'].is_func_tail
    is_func_tail.restype = ctypes.c_char
    is_func_tail.argtypes = [ctypes.POINTER(struct_func_t)]
    is_func_trace_enabled = _libraries['FIXME_STUB'].is_func_trace_enabled
    is_func_trace_enabled.restype = ctypes.c_char
    is_func_trace_enabled.argtypes = []
    is_gcc = _libraries['FIXME_STUB'].is_gcc
    is_gcc.restype = ctypes.c_char
    is_gcc.argtypes = []
    is_gcc32 = _libraries['FIXME_STUB'].is_gcc32
    is_gcc32.restype = ctypes.c_char
    is_gcc32.argtypes = []
    is_gcc64 = _libraries['FIXME_STUB'].is_gcc64
    is_gcc64.restype = ctypes.c_char
    is_gcc64.argtypes = []
    is_ghost_enum = _libraries['FIXME_STUB'].is_ghost_enum
    is_ghost_enum.restype = ctypes.c_char
    is_ghost_enum.argtypes = [enum_t]
    is_golang_cc = _libraries['FIXME_STUB'].is_golang_cc
    is_golang_cc.restype = ctypes.c_char
    is_golang_cc.argtypes = [cm_t]
    is_head = _libraries['FIXME_STUB'].is_head
    is_head.restype = ctypes.c_char
    is_head.argtypes = [flags_t]
    is_hidden_border = _libraries['FIXME_STUB'].is_hidden_border
    is_hidden_border.restype = ctypes.c_char
    is_hidden_border.argtypes = [ea_t]
    is_hidden_item = _libraries['FIXME_STUB'].is_hidden_item
    is_hidden_item.restype = ctypes.c_char
    is_hidden_item.argtypes = [ea_t]
    is_ida_kernel = (ctypes.c_char).in_dll(_libraries['FIXME_STUB'], 'is_ida_kernel') if getattr(_libraries['FIXME_STUB'], 'is_ida_kernel', None) else None
    is_idaq = _libraries['FIXME_STUB'].is_idaq
    is_idaq.restype = ctypes.c_char
    is_idaq.argtypes = []
    is_idaview = _libraries['FIXME_STUB'].is_idaview
    is_idaview.restype = ctypes.c_char
    is_idaview.argtypes = [ctypes.POINTER(struct_TWidget)]
    is_ident = _libraries['FIXME_STUB'].is_ident
    is_ident.restype = ctypes.c_char
    is_ident.argtypes = [ctypes.c_char_p]
    is_ident_cp = _libraries['FIXME_STUB'].is_ident_cp
    is_ident_cp.restype = ctypes.c_char
    is_ident_cp.argtypes = [wchar32_t]
    is_in_nlist = _libraries['FIXME_STUB'].is_in_nlist
    is_in_nlist.restype = ctypes.c_char
    is_in_nlist.argtypes = [ea_t]
    is_indirect_jump_insn = _libraries['FIXME_STUB'].is_indirect_jump_insn
    is_indirect_jump_insn.restype = ctypes.c_char
    is_indirect_jump_insn.argtypes = [ctypes.POINTER(struct_insn_t)]
    is_insn_trace_enabled = _libraries['FIXME_STUB'].is_insn_trace_enabled
    is_insn_trace_enabled.restype = ctypes.c_char
    is_insn_trace_enabled.argtypes = []
    is_invsign = _libraries['FIXME_STUB'].is_invsign
    is_invsign.restype = ctypes.c_char
    is_invsign.argtypes = [ea_t, flags_t, ctypes.c_int32]
    is_last_visea = _libraries['FIXME_STUB'].is_last_visea
    is_last_visea.restype = ctypes.c_char
    is_last_visea.argtypes = [ea_t]
    is_lead_surrogate = _libraries['FIXME_STUB'].is_lead_surrogate
    is_lead_surrogate.restype = ctypes.c_char
    is_lead_surrogate.argtypes = [wchar32_t]
    is_libitem = _libraries['FIXME_STUB'].is_libitem
    is_libitem.restype = ctypes.c_char
    is_libitem.argtypes = [ea_t]
    is_loaded = _libraries['FIXME_STUB'].is_loaded
    is_loaded.restype = ctypes.c_char
    is_loaded.argtypes = [ea_t]
    is_lzero = _libraries['FIXME_STUB'].is_lzero
    is_lzero.restype = ctypes.c_char
    is_lzero.argtypes = [ea_t, ctypes.c_int32]
    is_lzero0 = _libraries['FIXME_STUB'].is_lzero0
    is_lzero0.restype = ctypes.c_char
    is_lzero0.argtypes = [ea_t]
    is_lzero1 = _libraries['FIXME_STUB'].is_lzero1
    is_lzero1.restype = ctypes.c_char
    is_lzero1.argtypes = [ea_t]
    is_main_thread = _libraries['FIXME_STUB'].is_main_thread
    is_main_thread.restype = ctypes.c_char
    is_main_thread.argtypes = []
    is_manual = _libraries['FIXME_STUB'].is_manual
    is_manual.restype = ctypes.c_char
    is_manual.argtypes = [flags_t, ctypes.c_int32]
    is_manual_insn = _libraries['FIXME_STUB'].is_manual_insn
    is_manual_insn.restype = ctypes.c_char
    is_manual_insn.argtypes = [ea_t]
    is_mapped = _libraries['FIXME_STUB'].is_mapped
    is_mapped.restype = ctypes.c_char
    is_mapped.argtypes = [ea_t]
    is_member_id = _libraries['FIXME_STUB'].is_member_id
    is_member_id.restype = ctypes.c_char
    is_member_id.argtypes = [tid_t]
    is_miniidb = _libraries['FIXME_STUB'].is_miniidb
    is_miniidb.restype = ctypes.c_char
    is_miniidb.argtypes = []
    is_msg_inited = _libraries['FIXME_STUB'].is_msg_inited
    is_msg_inited.restype = ctypes.c_char
    is_msg_inited.argtypes = []
    is_name_defined_locally = _libraries['FIXME_STUB'].is_name_defined_locally
    is_name_defined_locally.restype = ctypes.c_char
    is_name_defined_locally.argtypes = [ctypes.POINTER(struct_func_t), ctypes.c_char_p, ignore_name_def_t, ea_t, ea_t]
    is_noret = _libraries['FIXME_STUB'].is_noret
    is_noret.restype = ctypes.c_char
    is_noret.argtypes = [ea_t]
    is_noret_block = _libraries['FIXME_STUB'].is_noret_block
    is_noret_block.restype = ctypes.c_char
    is_noret_block.argtypes = [fc_block_type_t]
    is_not_tail = _libraries['FIXME_STUB'].is_not_tail
    is_not_tail.restype = ctypes.c_char
    is_not_tail.argtypes = [flags_t]
    is_notcode = _libraries['FIXME_STUB'].is_notcode
    is_notcode.restype = ctypes.c_char
    is_notcode.argtypes = [ea_t]
    is_notproc = _libraries['FIXME_STUB'].is_notproc
    is_notproc.restype = ctypes.c_char
    is_notproc.argtypes = [ea_t]
    is_numop = _libraries['FIXME_STUB'].is_numop
    is_numop.restype = ctypes.c_char
    is_numop.argtypes = [flags_t, ctypes.c_int32]
    is_numop0 = _libraries['FIXME_STUB'].is_numop0
    is_numop0.restype = ctypes.c_char
    is_numop0.argtypes = [flags_t]
    is_numop1 = _libraries['FIXME_STUB'].is_numop1
    is_numop1.restype = ctypes.c_char
    is_numop1.argtypes = [flags_t]
    is_off = _libraries['FIXME_STUB'].is_off
    is_off.restype = ctypes.c_char
    is_off.argtypes = [flags_t, ctypes.c_int32]
    is_off0 = _libraries['FIXME_STUB'].is_off0
    is_off0.restype = ctypes.c_char
    is_off0.argtypes = [flags_t]
    is_off1 = _libraries['FIXME_STUB'].is_off1
    is_off1.restype = ctypes.c_char
    is_off1.argtypes = [flags_t]
    is_one_bit_mask = _libraries['FIXME_STUB'].is_one_bit_mask
    is_one_bit_mask.restype = ctypes.c_char
    is_one_bit_mask.argtypes = [bmask_t]
    is_ordinal_name = _libraries['FIXME_STUB'].is_ordinal_name
    is_ordinal_name.restype = ctypes.c_char
    is_ordinal_name.argtypes = [ctypes.c_char_p, ctypes.POINTER(uint32)]
    is_oword = _libraries['FIXME_STUB'].is_oword
    is_oword.restype = ctypes.c_char
    is_oword.argtypes = [flags_t]
    is_pack_real = _libraries['FIXME_STUB'].is_pack_real
    is_pack_real.restype = ctypes.c_char
    is_pack_real.argtypes = [flags_t]
    is_pascal = _libraries['FIXME_STUB'].is_pascal
    is_pascal.restype = ctypes.c_char
    is_pascal.argtypes = [int32]
    is_place_class_ea_capable = _libraries['FIXME_STUB'].is_place_class_ea_capable
    is_place_class_ea_capable.restype = ctypes.c_char
    is_place_class_ea_capable.argtypes = [ctypes.c_int32]
    is_problem_present = _libraries['FIXME_STUB'].is_problem_present
    is_problem_present.restype = ctypes.c_char
    is_problem_present.argtypes = [problist_id_t, ea_t]
    is_prolog_insn = _libraries['FIXME_STUB'].is_prolog_insn
    is_prolog_insn.restype = ctypes.c_char
    is_prolog_insn.argtypes = [ea_t]
    is_public_name = _libraries['FIXME_STUB'].is_public_name
    is_public_name.restype = ctypes.c_char
    is_public_name.argtypes = [ea_t]
    is_purging_cc = _libraries['FIXME_STUB'].is_purging_cc
    is_purging_cc.restype = ctypes.c_char
    is_purging_cc.argtypes = [cm_t]
    is_qword = _libraries['FIXME_STUB'].is_qword
    is_qword.restype = ctypes.c_char
    is_qword.argtypes = [flags_t]
    is_refresh_requested = _libraries['FIXME_STUB'].is_refresh_requested
    is_refresh_requested.restype = ctypes.c_char
    is_refresh_requested.argtypes = [uint64]
    is_reftype_target_optional = _libraries['FIXME_STUB'].is_reftype_target_optional
    is_reftype_target_optional.restype = ctypes.c_char
    is_reftype_target_optional.argtypes = [reftype_t]
    is_reg_custom = _libraries['FIXME_STUB'].is_reg_custom
    is_reg_custom.restype = ctypes.c_char
    is_reg_custom.argtypes = [ctypes.c_char_p]
    is_reg_float = _libraries['FIXME_STUB'].is_reg_float
    is_reg_float.restype = ctypes.c_char
    is_reg_float.argtypes = [ctypes.c_char_p]
    is_reg_integer = _libraries['FIXME_STUB'].is_reg_integer
    is_reg_integer.restype = ctypes.c_char
    is_reg_integer.argtypes = [ctypes.c_char_p]
    is_request_running = _libraries['FIXME_STUB'].is_request_running
    is_request_running.restype = ctypes.c_char
    is_request_running.argtypes = []
    is_restype_enum = _libraries['FIXME_STUB'].is_restype_enum
    is_restype_enum.restype = ctypes.c_char
    is_restype_enum.argtypes = [ctypes.POINTER(struct_til_t), ctypes.POINTER(type_t)]
    is_restype_struct = _libraries['FIXME_STUB'].is_restype_struct
    is_restype_struct.restype = ctypes.c_char
    is_restype_struct.argtypes = [ctypes.POINTER(struct_til_t), ctypes.POINTER(type_t)]
    is_restype_struni = _libraries['FIXME_STUB'].is_restype_struni
    is_restype_struni.restype = ctypes.c_char
    is_restype_struni.argtypes = [ctypes.POINTER(struct_til_t), ctypes.POINTER(type_t)]
    is_restype_void = _libraries['FIXME_STUB'].is_restype_void
    is_restype_void.restype = ctypes.c_char
    is_restype_void.argtypes = [ctypes.POINTER(struct_til_t), ctypes.POINTER(type_t)]
    is_ret_block = _libraries['FIXME_STUB'].is_ret_block
    is_ret_block.restype = ctypes.c_char
    is_ret_block.argtypes = [fc_block_type_t]
    is_ret_insn = _libraries['FIXME_STUB'].is_ret_insn
    is_ret_insn.restype = ctypes.c_char
    is_ret_insn.argtypes = [ctypes.POINTER(struct_insn_t), ctypes.c_char]
    is_retfp = _libraries['FIXME_STUB'].is_retfp
    is_retfp.restype = ctypes.c_char
    is_retfp.argtypes = [ea_t]
    is_same_data_type = _libraries['FIXME_STUB'].is_same_data_type
    is_same_data_type.restype = ctypes.c_char
    is_same_data_type.argtypes = [flags_t, flags_t]
    is_same_func = _libraries['FIXME_STUB'].is_same_func
    is_same_func.restype = ctypes.c_char
    is_same_func.argtypes = [ea_t, ea_t]
    is_sdacl_byte = _libraries['FIXME_STUB'].is_sdacl_byte
    is_sdacl_byte.restype = ctypes.c_char
    is_sdacl_byte.argtypes = [type_t]
    is_seg = _libraries['FIXME_STUB'].is_seg
    is_seg.restype = ctypes.c_char
    is_seg.argtypes = [flags_t, ctypes.c_int32]
    is_seg0 = _libraries['FIXME_STUB'].is_seg0
    is_seg0.restype = ctypes.c_char
    is_seg0.argtypes = [flags_t]
    is_seg1 = _libraries['FIXME_STUB'].is_seg1
    is_seg1.restype = ctypes.c_char
    is_seg1.argtypes = [flags_t]
    is_segm_locked = _libraries['FIXME_STUB'].is_segm_locked
    is_segm_locked.restype = ctypes.c_char
    is_segm_locked.argtypes = [ctypes.POINTER(struct_segment_t)]
    is_spec_ea = _libraries['FIXME_STUB'].is_spec_ea
    is_spec_ea.restype = ctypes.c_char
    is_spec_ea.argtypes = [ea_t]
    is_spec_segm = _libraries['FIXME_STUB'].is_spec_segm
    is_spec_segm.restype = ctypes.c_char
    is_spec_segm.argtypes = [uchar]
    is_special_member = _libraries['FIXME_STUB'].is_special_member
    is_special_member.restype = ctypes.c_char
    is_special_member.argtypes = [tid_t]
    is_step_trace_enabled = _libraries['FIXME_STUB'].is_step_trace_enabled
    is_step_trace_enabled.restype = ctypes.c_char
    is_step_trace_enabled.argtypes = []
    is_stkvar = _libraries['FIXME_STUB'].is_stkvar
    is_stkvar.restype = ctypes.c_char
    is_stkvar.argtypes = [flags_t, ctypes.c_int32]
    is_stkvar0 = _libraries['FIXME_STUB'].is_stkvar0
    is_stkvar0.restype = ctypes.c_char
    is_stkvar0.argtypes = [flags_t]
    is_stkvar1 = _libraries['FIXME_STUB'].is_stkvar1
    is_stkvar1.restype = ctypes.c_char
    is_stkvar1.argtypes = [flags_t]
    is_strlit = _libraries['FIXME_STUB'].is_strlit
    is_strlit.restype = ctypes.c_char
    is_strlit.argtypes = [flags_t]
    is_strlit_cp = _libraries['FIXME_STUB'].is_strlit_cp
    is_strlit_cp.restype = ctypes.c_char
    is_strlit_cp.argtypes = [wchar32_t, ctypes.POINTER(rangeset_crefvec_t)]
    is_stroff = _libraries['FIXME_STUB'].is_stroff
    is_stroff.restype = ctypes.c_char
    is_stroff.argtypes = [flags_t, ctypes.c_int32]
    is_stroff0 = _libraries['FIXME_STUB'].is_stroff0
    is_stroff0.restype = ctypes.c_char
    is_stroff0.argtypes = [flags_t]
    is_stroff1 = _libraries['FIXME_STUB'].is_stroff1
    is_stroff1.restype = ctypes.c_char
    is_stroff1.argtypes = [flags_t]
    is_struct = _libraries['FIXME_STUB'].is_struct
    is_struct.restype = ctypes.c_char
    is_struct.argtypes = [flags_t]
    is_suspop = _libraries['FIXME_STUB'].is_suspop
    is_suspop.restype = ctypes.c_char
    is_suspop.argtypes = [ea_t, flags_t, ctypes.c_int32]
    is_switch_insn = _libraries['FIXME_STUB'].is_switch_insn
    is_switch_insn.restype = ctypes.c_char
    is_switch_insn.argtypes = [ea_t]
    is_tah_byte = _libraries['FIXME_STUB'].is_tah_byte
    is_tah_byte.restype = ctypes.c_char
    is_tah_byte.argtypes = [type_t]
    is_tail = _libraries['FIXME_STUB'].is_tail
    is_tail.restype = ctypes.c_char
    is_tail.argtypes = [flags_t]
    is_tail_surrogate = _libraries['FIXME_STUB'].is_tail_surrogate
    is_tail_surrogate.restype = ctypes.c_char
    is_tail_surrogate.argtypes = [wchar32_t]
    is_tbyte = _libraries['FIXME_STUB'].is_tbyte
    is_tbyte.restype = ctypes.c_char
    is_tbyte.argtypes = [flags_t]
    is_temp_database = _libraries['FIXME_STUB'].is_temp_database
    is_temp_database.restype = ctypes.c_char
    is_temp_database.argtypes = []
    is_terse_struc = _libraries['FIXME_STUB'].is_terse_struc
    is_terse_struc.restype = ctypes.c_char
    is_terse_struc.argtypes = [ea_t]
    is_tilcmt = _libraries['FIXME_STUB'].is_tilcmt
    is_tilcmt.restype = ctypes.c_char
    is_tilcmt.argtypes = [ea_t]
    is_trusted_idb = _libraries['FIXME_STUB'].is_trusted_idb
    is_trusted_idb.restype = ctypes.c_char
    is_trusted_idb.argtypes = []
    is_type_arithmetic = _libraries['FIXME_STUB'].is_type_arithmetic
    is_type_arithmetic.restype = ctypes.c_char
    is_type_arithmetic.argtypes = [type_t]
    is_type_array = _libraries['FIXME_STUB'].is_type_array
    is_type_array.restype = ctypes.c_char
    is_type_array.argtypes = [type_t]
    is_type_bitfld = _libraries['FIXME_STUB'].is_type_bitfld
    is_type_bitfld.restype = ctypes.c_char
    is_type_bitfld.argtypes = [type_t]
    is_type_bool = _libraries['FIXME_STUB'].is_type_bool
    is_type_bool.restype = ctypes.c_char
    is_type_bool.argtypes = [type_t]
    is_type_char = _libraries['FIXME_STUB'].is_type_char
    is_type_char.restype = ctypes.c_char
    is_type_char.argtypes = [type_t]
    is_type_complex = _libraries['FIXME_STUB'].is_type_complex
    is_type_complex.restype = ctypes.c_char
    is_type_complex.argtypes = [type_t]
    is_type_const = _libraries['FIXME_STUB'].is_type_const
    is_type_const.restype = ctypes.c_char
    is_type_const.argtypes = [type_t]
    is_type_determined_by_hexrays = _libraries['FIXME_STUB'].is_type_determined_by_hexrays
    is_type_determined_by_hexrays.restype = ctypes.c_char
    is_type_determined_by_hexrays.argtypes = [ea_t]
    is_type_double = _libraries['FIXME_STUB'].is_type_double
    is_type_double.restype = ctypes.c_char
    is_type_double.argtypes = [type_t]
    is_type_enum = _libraries['FIXME_STUB'].is_type_enum
    is_type_enum.restype = ctypes.c_char
    is_type_enum.argtypes = [type_t]
    is_type_ext_arithmetic = _libraries['FIXME_STUB'].is_type_ext_arithmetic
    is_type_ext_arithmetic.restype = ctypes.c_char
    is_type_ext_arithmetic.argtypes = [type_t]
    is_type_ext_integral = _libraries['FIXME_STUB'].is_type_ext_integral
    is_type_ext_integral.restype = ctypes.c_char
    is_type_ext_integral.argtypes = [type_t]
    is_type_float = _libraries['FIXME_STUB'].is_type_float
    is_type_float.restype = ctypes.c_char
    is_type_float.argtypes = [type_t]
    is_type_floating = _libraries['FIXME_STUB'].is_type_floating
    is_type_floating.restype = ctypes.c_char
    is_type_floating.argtypes = [type_t]
    is_type_func = _libraries['FIXME_STUB'].is_type_func
    is_type_func.restype = ctypes.c_char
    is_type_func.argtypes = [type_t]
    is_type_guessed_by_hexrays = _libraries['FIXME_STUB'].is_type_guessed_by_hexrays
    is_type_guessed_by_hexrays.restype = ctypes.c_char
    is_type_guessed_by_hexrays.argtypes = [ea_t]
    is_type_guessed_by_ida = _libraries['FIXME_STUB'].is_type_guessed_by_ida
    is_type_guessed_by_ida.restype = ctypes.c_char
    is_type_guessed_by_ida.argtypes = [ea_t]
    is_type_int = _libraries['FIXME_STUB'].is_type_int
    is_type_int.restype = ctypes.c_char
    is_type_int.argtypes = [type_t]
    is_type_int128 = _libraries['FIXME_STUB'].is_type_int128
    is_type_int128.restype = ctypes.c_char
    is_type_int128.argtypes = [type_t]
    is_type_int16 = _libraries['FIXME_STUB'].is_type_int16
    is_type_int16.restype = ctypes.c_char
    is_type_int16.argtypes = [type_t]
    is_type_int32 = _libraries['FIXME_STUB'].is_type_int32
    is_type_int32.restype = ctypes.c_char
    is_type_int32.argtypes = [type_t]
    is_type_int64 = _libraries['FIXME_STUB'].is_type_int64
    is_type_int64.restype = ctypes.c_char
    is_type_int64.argtypes = [type_t]
    is_type_integral = _libraries['FIXME_STUB'].is_type_integral
    is_type_integral.restype = ctypes.c_char
    is_type_integral.argtypes = [type_t]
    is_type_ldouble = _libraries['FIXME_STUB'].is_type_ldouble
    is_type_ldouble.restype = ctypes.c_char
    is_type_ldouble.argtypes = [type_t]
    is_type_paf = _libraries['FIXME_STUB'].is_type_paf
    is_type_paf.restype = ctypes.c_char
    is_type_paf.argtypes = [type_t]
    is_type_partial = _libraries['FIXME_STUB'].is_type_partial
    is_type_partial.restype = ctypes.c_char
    is_type_partial.argtypes = [type_t]
    is_type_ptr = _libraries['FIXME_STUB'].is_type_ptr
    is_type_ptr.restype = ctypes.c_char
    is_type_ptr.argtypes = [type_t]
    is_type_ptr_or_array = _libraries['FIXME_STUB'].is_type_ptr_or_array
    is_type_ptr_or_array.restype = ctypes.c_char
    is_type_ptr_or_array.argtypes = [type_t]
    is_type_struct = _libraries['FIXME_STUB'].is_type_struct
    is_type_struct.restype = ctypes.c_char
    is_type_struct.argtypes = [type_t]
    is_type_struni = _libraries['FIXME_STUB'].is_type_struni
    is_type_struni.restype = ctypes.c_char
    is_type_struni.argtypes = [type_t]
    is_type_sue = _libraries['FIXME_STUB'].is_type_sue
    is_type_sue.restype = ctypes.c_char
    is_type_sue.argtypes = [type_t]
    is_type_tbyte = _libraries['FIXME_STUB'].is_type_tbyte
    is_type_tbyte.restype = ctypes.c_char
    is_type_tbyte.argtypes = [type_t]
    is_type_typedef = _libraries['FIXME_STUB'].is_type_typedef
    is_type_typedef.restype = ctypes.c_char
    is_type_typedef.argtypes = [type_t]
    is_type_uchar = _libraries['FIXME_STUB'].is_type_uchar
    is_type_uchar.restype = ctypes.c_char
    is_type_uchar.argtypes = [type_t]
    is_type_uint = _libraries['FIXME_STUB'].is_type_uint
    is_type_uint.restype = ctypes.c_char
    is_type_uint.argtypes = [type_t]
    is_type_uint128 = _libraries['FIXME_STUB'].is_type_uint128
    is_type_uint128.restype = ctypes.c_char
    is_type_uint128.argtypes = [type_t]
    is_type_uint16 = _libraries['FIXME_STUB'].is_type_uint16
    is_type_uint16.restype = ctypes.c_char
    is_type_uint16.argtypes = [type_t]
    is_type_uint32 = _libraries['FIXME_STUB'].is_type_uint32
    is_type_uint32.restype = ctypes.c_char
    is_type_uint32.argtypes = [type_t]
    is_type_uint64 = _libraries['FIXME_STUB'].is_type_uint64
    is_type_uint64.restype = ctypes.c_char
    is_type_uint64.argtypes = [type_t]
    is_type_union = _libraries['FIXME_STUB'].is_type_union
    is_type_union.restype = ctypes.c_char
    is_type_union.argtypes = [type_t]
    is_type_unknown = _libraries['FIXME_STUB'].is_type_unknown
    is_type_unknown.restype = ctypes.c_char
    is_type_unknown.argtypes = [type_t]
    is_type_void = _libraries['FIXME_STUB'].is_type_void
    is_type_void.restype = ctypes.c_char
    is_type_void.argtypes = [type_t]
    is_type_volatile = _libraries['FIXME_STUB'].is_type_volatile
    is_type_volatile.restype = ctypes.c_char
    is_type_volatile.argtypes = [type_t]
    is_typeid_last = _libraries['FIXME_STUB'].is_typeid_last
    is_typeid_last.restype = ctypes.c_char
    is_typeid_last.argtypes = [type_t]
    is_uname = _libraries['FIXME_STUB'].is_uname
    is_uname.restype = ctypes.c_char
    is_uname.argtypes = [ctypes.c_char_p]
    is_union = _libraries['FIXME_STUB'].is_union
    is_union.restype = ctypes.c_char
    is_union.argtypes = [tid_t]
    is_unknown = _libraries['FIXME_STUB'].is_unknown
    is_unknown.restype = ctypes.c_char
    is_unknown.argtypes = [flags_t]
    is_user_cc = _libraries['FIXME_STUB'].is_user_cc
    is_user_cc.restype = ctypes.c_char
    is_user_cc.argtypes = [cm_t]
    is_usersp = _libraries['FIXME_STUB'].is_usersp
    is_usersp.restype = ctypes.c_char
    is_usersp.argtypes = [ea_t]
    is_userti = _libraries['FIXME_STUB'].is_userti
    is_userti.restype = ctypes.c_char
    is_userti.argtypes = [ea_t]
    is_valid_cp = _libraries['FIXME_STUB'].is_valid_cp
    is_valid_cp.restype = ctypes.c_char
    is_valid_cp.argtypes = [wchar32_t, nametype_t, ctypes.POINTER(None)]
    is_valid_trace_file = _libraries['FIXME_STUB'].is_valid_trace_file
    is_valid_trace_file.restype = ctypes.c_char
    is_valid_trace_file.argtypes = [ctypes.c_char_p]
    is_valid_typename = _libraries['FIXME_STUB'].is_valid_typename
    is_valid_typename.restype = ctypes.c_char
    is_valid_typename.argtypes = [ctypes.c_char_p]
    is_valid_utf8 = _libraries['FIXME_STUB'].is_valid_utf8
    is_valid_utf8.restype = ctypes.c_char
    is_valid_utf8.argtypes = [ctypes.c_char_p]
    is_vararg_cc = _libraries['FIXME_STUB'].is_vararg_cc
    is_vararg_cc.restype = ctypes.c_char
    is_vararg_cc.argtypes = [cm_t]
    is_varmember = _libraries['FIXME_STUB'].is_varmember
    is_varmember.restype = ctypes.c_char
    is_varmember.argtypes = [ctypes.POINTER(struct_member_t)]
    is_varsize_item = _libraries['FIXME_STUB'].is_varsize_item
    is_varsize_item.restype = ctypes.c_int32
    is_varsize_item.argtypes = [ea_t, flags_t, ctypes.POINTER(union_opinfo_t), ctypes.POINTER(asize_t)]
    is_varstr = _libraries['FIXME_STUB'].is_varstr
    is_varstr.restype = ctypes.c_char
    is_varstr.argtypes = [tid_t]
    is_visible_cp = _libraries['FIXME_STUB'].is_visible_cp
    is_visible_cp.restype = ctypes.c_char
    is_visible_cp.argtypes = [wchar32_t]
    is_visible_finally = _libraries['FIXME_STUB'].is_visible_finally
    is_visible_finally.restype = ctypes.c_char
    is_visible_finally.argtypes = [ea_t]
    is_visible_func = _libraries['FIXME_STUB'].is_visible_func
    is_visible_func.restype = ctypes.c_char
    is_visible_func.argtypes = [ctypes.POINTER(struct_func_t)]
    is_visible_item = _libraries['FIXME_STUB'].is_visible_item
    is_visible_item.restype = ctypes.c_char
    is_visible_item.argtypes = [ea_t]
    is_visible_segm = _libraries['FIXME_STUB'].is_visible_segm
    is_visible_segm.restype = ctypes.c_char
    is_visible_segm.argtypes = [ctypes.POINTER(struct_segment_t)]
    is_wctype = _libraries['FIXME_STUB'].is_wctype
    is_wctype.restype = ctypes.c_int32
    is_wctype.argtypes = [wint_t, wctype_t]
    is_weak_name = _libraries['FIXME_STUB'].is_weak_name
    is_weak_name.restype = ctypes.c_char
    is_weak_name.argtypes = [ea_t]
    is_word = _libraries['FIXME_STUB'].is_word
    is_word.restype = ctypes.c_char
    is_word.argtypes = [flags_t]
    is_yword = _libraries['FIXME_STUB'].is_yword
    is_yword.restype = ctypes.c_char
    is_yword.argtypes = [flags_t]
    is_zstroff = _libraries['FIXME_STUB'].is_zstroff
    is_zstroff.restype = ctypes.c_char
    is_zstroff.argtypes = [ea_t]
    is_zword = _libraries['FIXME_STUB'].is_zword
    is_zword.restype = ctypes.c_char
    is_zword.argtypes = [flags_t]
    isalnum = _libraries['FIXME_STUB'].isalnum
    isalnum.restype = ctypes.c_int32
    isalnum.argtypes = [ctypes.c_int32]
    isalpha = _libraries['FIXME_STUB'].isalpha
    isalpha.restype = ctypes.c_int32
    isalpha.argtypes = [ctypes.c_int32]
    isatty = _libraries['FIXME_STUB'].isatty
    isatty.restype = ctypes.c_int32
    isatty.argtypes = [ctypes.c_int32]
    isblank = _libraries['FIXME_STUB'].isblank
    isblank.restype = ctypes.c_int32
    isblank.argtypes = [ctypes.c_int32]
    iscntrl = _libraries['FIXME_STUB'].iscntrl
    iscntrl.restype = ctypes.c_int32
    iscntrl.argtypes = [ctypes.c_int32]
    isdigit = _libraries['FIXME_STUB'].isdigit
    isdigit.restype = ctypes.c_int32
    isdigit.argtypes = [ctypes.c_int32]
    isgraph = _libraries['FIXME_STUB'].isgraph
    isgraph.restype = ctypes.c_int32
    isgraph.argtypes = [ctypes.c_int32]
    isleadbyte = _libraries['FIXME_STUB'].isleadbyte
    isleadbyte.restype = ctypes.c_int32
    isleadbyte.argtypes = [ctypes.c_int32]
    islower = _libraries['FIXME_STUB'].islower
    islower.restype = ctypes.c_int32
    islower.argtypes = [ctypes.c_int32]
    isprint = _libraries['FIXME_STUB'].isprint
    isprint.restype = ctypes.c_int32
    isprint.argtypes = [ctypes.c_int32]
    ispunct = _libraries['FIXME_STUB'].ispunct
    ispunct.restype = ctypes.c_int32
    ispunct.argtypes = [ctypes.c_int32]
    isspace = _libraries['FIXME_STUB'].isspace
    isspace.restype = ctypes.c_int32
    isspace.argtypes = [ctypes.c_int32]
    isupper = _libraries['FIXME_STUB'].isupper
    isupper.restype = ctypes.c_int32
    isupper.argtypes = [ctypes.c_int32]
    iswalnum = _libraries['FIXME_STUB'].iswalnum
    iswalnum.restype = ctypes.c_int32
    iswalnum.argtypes = [wint_t]
    iswalpha = _libraries['FIXME_STUB'].iswalpha
    iswalpha.restype = ctypes.c_int32
    iswalpha.argtypes = [wint_t]
    iswascii = _libraries['FIXME_STUB'].iswascii
    iswascii.restype = ctypes.c_int32
    iswascii.argtypes = [wint_t]
    iswblank = _libraries['FIXME_STUB'].iswblank
    iswblank.restype = ctypes.c_int32
    iswblank.argtypes = [wint_t]
    iswcntrl = _libraries['FIXME_STUB'].iswcntrl
    iswcntrl.restype = ctypes.c_int32
    iswcntrl.argtypes = [wint_t]
    iswctype = _libraries['FIXME_STUB'].iswctype
    iswctype.restype = ctypes.c_int32
    iswctype.argtypes = [wint_t, wctype_t]
    iswdigit = _libraries['FIXME_STUB'].iswdigit
    iswdigit.restype = ctypes.c_int32
    iswdigit.argtypes = [wint_t]
    iswgraph = _libraries['FIXME_STUB'].iswgraph
    iswgraph.restype = ctypes.c_int32
    iswgraph.argtypes = [wint_t]
    iswlower = _libraries['FIXME_STUB'].iswlower
    iswlower.restype = ctypes.c_int32
    iswlower.argtypes = [wint_t]
    iswprint = _libraries['FIXME_STUB'].iswprint
    iswprint.restype = ctypes.c_int32
    iswprint.argtypes = [wint_t]
    iswpunct = _libraries['FIXME_STUB'].iswpunct
    iswpunct.restype = ctypes.c_int32
    iswpunct.argtypes = [wint_t]
    iswspace = _libraries['FIXME_STUB'].iswspace
    iswspace.restype = ctypes.c_int32
    iswspace.argtypes = [wint_t]
    iswupper = _libraries['FIXME_STUB'].iswupper
    iswupper.restype = ctypes.c_int32
    iswupper.argtypes = [wint_t]
    iswxdigit = _libraries['FIXME_STUB'].iswxdigit
    iswxdigit.restype = ctypes.c_int32
    iswxdigit.argtypes = [wint_t]
    isxdigit = _libraries['FIXME_STUB'].isxdigit
    isxdigit.restype = ctypes.c_int32
    isxdigit.argtypes = [ctypes.c_int32]
    iterate_func_chunks = _libraries['FIXME_STUB'].iterate_func_chunks
    iterate_func_chunks.restype = None
    iterate_func_chunks.argtypes = [ctypes.POINTER(struct_func_t), ctypes.CFUNCTYPE(None, ea_t, ea_t, ctypes.POINTER(None)), ctypes.POINTER(None), ctypes.c_char]
    itext = _libraries['FIXME_STUB'].itext
    itext.restype = ctypes.c_char_p
    itext.argtypes = [help_t]
    itoa = _libraries['FIXME_STUB'].itoa
    itoa.restype = ctypes.c_char_p
    itoa.argtypes = [ctypes.c_int32, ctypes.c_char_p, ctypes.c_int32]
    j0 = _libraries['FIXME_STUB'].j0
    j0.restype = ctypes.c_double
    j0.argtypes = [ctypes.c_double]
    j1 = _libraries['FIXME_STUB'].j1
    j1.restype = ctypes.c_double
    j1.argtypes = [ctypes.c_double]
    jn = _libraries['FIXME_STUB'].jn
    jn.restype = ctypes.c_double
    jn.argtypes = [ctypes.c_int32, ctypes.c_double]
    jumpto = _libraries['FIXME_STUB'].jumpto
    jumpto.restype = ctypes.c_char
    jumpto.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_place_t), ctypes.c_int32, ctypes.c_int32]
    jvalue_t_clear = _libraries['FIXME_STUB'].jvalue_t_clear
    jvalue_t_clear.restype = None
    jvalue_t_clear.argtypes = [ctypes.POINTER(struct_jvalue_t)]
    jvalue_t_copy = _libraries['FIXME_STUB'].jvalue_t_copy
    jvalue_t_copy.restype = None
    jvalue_t_copy.argtypes = [ctypes.POINTER(struct_jvalue_t), ctypes.POINTER(struct_jvalue_t)]
    l_compare = _libraries['FIXME_STUB'].l_compare
    l_compare.restype = ctypes.c_int32
    l_compare.argtypes = [ctypes.POINTER(struct_place_t), ctypes.POINTER(struct_place_t)]
    l_compare2 = _libraries['FIXME_STUB'].l_compare2
    l_compare2.restype = ctypes.c_int32
    l_compare2.argtypes = [ctypes.POINTER(struct_place_t), ctypes.POINTER(struct_place_t), ctypes.POINTER(None)]
    l_realcvt = _libraries['FIXME_STUB'].l_realcvt
    l_realcvt.restype = fpvalue_error_t
    l_realcvt.argtypes = [ctypes.POINTER(None), ctypes.POINTER(struct_fpvalue_t), uint16]
    labs = _libraries['FIXME_STUB'].labs
    labs.restype = ctypes.c_int32
    labs.argtypes = [ctypes.c_int32]
    last = _libraries['FIXME_STUB'].last
    last.restype = uval_t
    last.argtypes = [uval_t, asize_t]
    last_idcv_attr = _libraries['FIXME_STUB'].last_idcv_attr
    last_idcv_attr.restype = ctypes.c_char_p
    last_idcv_attr.argtypes = [ctypes.POINTER(struct_idc_value_t)]
    launch_process = _libraries['FIXME_STUB'].launch_process
    launch_process.restype = ctypes.POINTER(None)
    launch_process.argtypes = [ctypes.POINTER(struct_launch_process_params_t), ctypes.POINTER(qstring)]
    ldexp = _libraries['FIXME_STUB'].ldexp
    ldexp.restype = ctypes.c_double
    ldexp.argtypes = [ctypes.c_double, ctypes.c_int32]
    ldexpf = _libraries['FIXME_STUB'].ldexpf
    ldexpf.restype = ctypes.c_float
    ldexpf.argtypes = [ctypes.c_float, ctypes.c_int32]
    ldexpl = _libraries['FIXME_STUB'].ldexpl
    ldexpl.restype = ctypes.c_double
    ldexpl.argtypes = [ctypes.c_double, ctypes.c_int32]
    ldiv = _libraries['FIXME_STUB'].ldiv
    ldiv.restype = ldiv_t
    ldiv.argtypes = [ctypes.c_int32, ctypes.c_int32]
    leading_zero_important = _libraries['FIXME_STUB'].leading_zero_important
    leading_zero_important.restype = ctypes.c_char
    leading_zero_important.argtypes = [ea_t, ctypes.c_int32]
    legacy_idb = (ctypes.c_char).in_dll(_libraries['FIXME_STUB'], 'legacy_idb') if getattr(_libraries['FIXME_STUB'], 'legacy_idb', None) else None
    lex_define_macro = _libraries['FIXME_STUB'].lex_define_macro
    lex_define_macro.restype = error_t
    lex_define_macro.argtypes = [ctypes.POINTER(struct_lexer_t), ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32, ctypes.c_char]
    lex_get_file_line = _libraries['FIXME_STUB'].lex_get_file_line
    lex_get_file_line.restype = ctypes.c_char_p
    lex_get_file_line.argtypes = [ctypes.POINTER(struct_lexer_t), ctypes.POINTER(int32), ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32]
    lex_get_token = _libraries['FIXME_STUB'].lex_get_token
    lex_get_token.restype = error_t
    lex_get_token.argtypes = [ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t)]
    lex_get_token2 = _libraries['FIXME_STUB'].lex_get_token2
    lex_get_token2.restype = error_t
    lex_get_token2.argtypes = [ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t), ctypes.POINTER(int32)]
    lex_init_file = _libraries['FIXME_STUB'].lex_init_file
    lex_init_file.restype = error_t
    lex_init_file.argtypes = [ctypes.POINTER(struct_lexer_t), ctypes.c_char_p]
    lex_init_string = _libraries['FIXME_STUB'].lex_init_string
    lex_init_string.restype = error_t
    lex_init_string.argtypes = [ctypes.POINTER(struct_lexer_t), ctypes.c_char_p, ctypes.POINTER(None)]
    lex_print_token = _libraries['FIXME_STUB'].lex_print_token
    lex_print_token.restype = ctypes.c_char_p
    lex_print_token.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_token_t)]
    lex_set_options = _libraries['FIXME_STUB'].lex_set_options
    lex_set_options.restype = ctypes.c_int32
    lex_set_options.argtypes = [ctypes.POINTER(struct_lexer_t), ctypes.c_int32]
    lex_term_file = _libraries['FIXME_STUB'].lex_term_file
    lex_term_file.restype = None
    lex_term_file.argtypes = [ctypes.POINTER(struct_lexer_t), ctypes.c_char]
    lex_undefine_macro = _libraries['FIXME_STUB'].lex_undefine_macro
    lex_undefine_macro.restype = None
    lex_undefine_macro.argtypes = [ctypes.POINTER(struct_lexer_t), ctypes.c_char_p]
    lexcompare_tinfo = _libraries['FIXME_STUB'].lexcompare_tinfo
    lexcompare_tinfo.restype = ctypes.c_int32
    lexcompare_tinfo.argtypes = [uint32, uint32, ctypes.c_int32]
    lfind = _libraries['FIXME_STUB'].lfind
    lfind.restype = ctypes.POINTER(None)
    lfind.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32, _CoreCrtNonSecureSearchSortCompareFunction]
    lgamma = _libraries['FIXME_STUB'].lgamma
    lgamma.restype = ctypes.c_double
    lgamma.argtypes = [ctypes.c_double]
    lgammaf = _libraries['FIXME_STUB'].lgammaf
    lgammaf.restype = ctypes.c_float
    lgammaf.argtypes = [ctypes.c_float]
    lgammal = _libraries['FIXME_STUB'].lgammal
    lgammal.restype = ctypes.c_double
    lgammal.argtypes = [ctypes.c_double]
    linearray_t_beginning = _libraries['FIXME_STUB'].linearray_t_beginning
    linearray_t_beginning.restype = ctypes.c_char
    linearray_t_beginning.argtypes = [ctypes.POINTER(struct_linearray_t)]
    linearray_t_ctr = _libraries['FIXME_STUB'].linearray_t_ctr
    linearray_t_ctr.restype = None
    linearray_t_ctr.argtypes = [ctypes.POINTER(struct_linearray_t), ctypes.POINTER(None)]
    linearray_t_down = _libraries['FIXME_STUB'].linearray_t_down
    linearray_t_down.restype = ctypes.POINTER(qstring)
    linearray_t_down.argtypes = [ctypes.POINTER(struct_linearray_t)]
    linearray_t_dtr = _libraries['FIXME_STUB'].linearray_t_dtr
    linearray_t_dtr.restype = None
    linearray_t_dtr.argtypes = [ctypes.POINTER(struct_linearray_t)]
    linearray_t_ending = _libraries['FIXME_STUB'].linearray_t_ending
    linearray_t_ending.restype = ctypes.c_char
    linearray_t_ending.argtypes = [ctypes.POINTER(struct_linearray_t)]
    linearray_t_set_place = _libraries['FIXME_STUB'].linearray_t_set_place
    linearray_t_set_place.restype = ctypes.c_int32
    linearray_t_set_place.argtypes = [ctypes.POINTER(struct_linearray_t), ctypes.POINTER(struct_place_t)]
    linearray_t_up = _libraries['FIXME_STUB'].linearray_t_up
    linearray_t_up.restype = ctypes.POINTER(qstring)
    linearray_t_up.argtypes = [ctypes.POINTER(struct_linearray_t)]
    list_bptgrps = _libraries['FIXME_STUB'].list_bptgrps
    list_bptgrps.restype = size_t
    list_bptgrps.argtypes = [ctypes.POINTER(qstrvec_t)]
    llabs = _libraries['FIXME_STUB'].llabs
    llabs.restype = ctypes.c_int64
    llabs.argtypes = [ctypes.c_int64]
    lldiv = _libraries['FIXME_STUB'].lldiv
    lldiv.restype = lldiv_t
    lldiv.argtypes = [ctypes.c_int64, ctypes.c_int64]
    llong_scan = _libraries['FIXME_STUB'].llong_scan
    llong_scan.restype = longlong
    llong_scan.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.POINTER(ctypes.c_char_p)]
    llrint = _libraries['FIXME_STUB'].llrint
    llrint.restype = ctypes.c_int64
    llrint.argtypes = [ctypes.c_double]
    llrintf = _libraries['FIXME_STUB'].llrintf
    llrintf.restype = ctypes.c_int64
    llrintf.argtypes = [ctypes.c_float]
    llrintl = _libraries['FIXME_STUB'].llrintl
    llrintl.restype = ctypes.c_int64
    llrintl.argtypes = [ctypes.c_double]
    llround = _libraries['FIXME_STUB'].llround
    llround.restype = ctypes.c_int64
    llround.argtypes = [ctypes.c_double]
    llroundf = _libraries['FIXME_STUB'].llroundf
    llroundf.restype = ctypes.c_int64
    llroundf.argtypes = [ctypes.c_float]
    llroundl = _libraries['FIXME_STUB'].llroundl
    llroundl.restype = ctypes.c_int64
    llroundl.argtypes = [ctypes.c_double]
    load_and_run_plugin = _libraries['FIXME_STUB'].load_and_run_plugin
    load_and_run_plugin.restype = ctypes.c_char
    load_and_run_plugin.argtypes = [ctypes.c_char_p, size_t]
    load_binary_file = _libraries['FIXME_STUB'].load_binary_file
    load_binary_file.restype = ctypes.c_char
    load_binary_file.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_linput_t), ushort, int64, ea_t, ea_t, uint64]
    load_core_module = _libraries['FIXME_STUB'].load_core_module
    load_core_module.restype = ctypes.c_char
    load_core_module.argtypes = [ctypes.POINTER(struct_idadll_t), ctypes.c_char_p, ctypes.c_char_p]
    load_core_module_or_die = _libraries['FIXME_STUB'].load_core_module_or_die
    load_core_module_or_die.restype = None
    load_core_module_or_die.argtypes = [ctypes.POINTER(struct_idadll_t), ctypes.c_char_p, ctypes.c_char_p]
    load_custom_icon = _libraries['FIXME_STUB'].load_custom_icon
    load_custom_icon.restype = ctypes.c_int32
    load_custom_icon.argtypes = [ctypes.POINTER(None), ctypes.c_uint32, ctypes.c_char_p]
    load_dbg_dbginfo = _libraries['FIXME_STUB'].load_dbg_dbginfo
    load_dbg_dbginfo.restype = ctypes.c_char
    load_dbg_dbginfo.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_linput_t), ea_t, ctypes.c_char]
    load_debugger = _libraries['FIXME_STUB'].load_debugger
    load_debugger.restype = ctypes.c_char
    load_debugger.argtypes = [ctypes.c_char_p, ctypes.c_char]
    load_dirtree = _libraries['FIXME_STUB'].load_dirtree
    load_dirtree.restype = ctypes.c_char
    load_dirtree.argtypes = [ctypes.POINTER(struct_dirtree_impl_t)]
    load_ids_module = _libraries['FIXME_STUB'].load_ids_module
    load_ids_module.restype = ctypes.c_int32
    load_ids_module.argtypes = [ctypes.c_char_p]
    load_nonbinary_file = _libraries['FIXME_STUB'].load_nonbinary_file
    load_nonbinary_file.restype = ctypes.c_char
    load_nonbinary_file.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_linput_t), ctypes.c_char_p, ushort, ctypes.POINTER(struct_load_info_t)]
    load_plugin = _libraries['FIXME_STUB'].load_plugin
    load_plugin.restype = ctypes.POINTER(struct_plugin_t)
    load_plugin.argtypes = [ctypes.c_char_p]
    load_til = _libraries['FIXME_STUB'].load_til
    load_til.restype = ctypes.POINTER(struct_til_t)
    load_til.argtypes = [ctypes.c_char_p, ctypes.POINTER(qstring), ctypes.c_char_p]
    load_til_header = _libraries['FIXME_STUB'].load_til_header
    load_til_header.restype = ctypes.POINTER(struct_til_t)
    load_til_header.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(qstring)]
    load_trace_file = _libraries['FIXME_STUB'].load_trace_file
    load_trace_file.restype = ctypes.c_char
    load_trace_file.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p]
    loader_failure = _libraries['FIXME_STUB'].loader_failure
    loader_failure.restype = None
    loader_failure.argtypes = [ctypes.c_char_p]
    lochist_entry_t_deserialize = _libraries['FIXME_STUB'].lochist_entry_t_deserialize
    lochist_entry_t_deserialize.restype = ctypes.c_char
    lochist_entry_t_deserialize.argtypes = [ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar), ctypes.POINTER(struct_place_t)]
    lochist_entry_t_serialize = _libraries['FIXME_STUB'].lochist_entry_t_serialize
    lochist_entry_t_serialize.restype = None
    lochist_entry_t_serialize.argtypes = [ctypes.POINTER(struct_bytevec_t), ctypes.POINTER(struct_lochist_entry_t)]
    lochist_t_back = _libraries['FIXME_STUB'].lochist_t_back
    lochist_t_back.restype = ctypes.c_char
    lochist_t_back.argtypes = [ctypes.POINTER(struct_lochist_t), uint32, ctypes.c_char]
    lochist_t_clear = _libraries['FIXME_STUB'].lochist_t_clear
    lochist_t_clear.restype = None
    lochist_t_clear.argtypes = [ctypes.POINTER(struct_lochist_t)]
    lochist_t_current_index = _libraries['FIXME_STUB'].lochist_t_current_index
    lochist_t_current_index.restype = uint32
    lochist_t_current_index.argtypes = [ctypes.POINTER(struct_lochist_t)]
    lochist_t_deregister_live = _libraries['FIXME_STUB'].lochist_t_deregister_live
    lochist_t_deregister_live.restype = None
    lochist_t_deregister_live.argtypes = [ctypes.POINTER(struct_lochist_t)]
    lochist_t_fwd = _libraries['FIXME_STUB'].lochist_t_fwd
    lochist_t_fwd.restype = ctypes.c_char
    lochist_t_fwd.argtypes = [ctypes.POINTER(struct_lochist_t), uint32, ctypes.c_char]
    lochist_t_get = _libraries['FIXME_STUB'].lochist_t_get
    lochist_t_get.restype = ctypes.c_char
    lochist_t_get.argtypes = [ctypes.POINTER(struct_lochist_entry_t), ctypes.POINTER(struct_lochist_t), uint32]
    lochist_t_get_current = _libraries['FIXME_STUB'].lochist_t_get_current
    lochist_t_get_current.restype = ctypes.POINTER(struct_lochist_entry_t)
    lochist_t_get_current.argtypes = [ctypes.POINTER(struct_lochist_t)]
    lochist_t_init = _libraries['FIXME_STUB'].lochist_t_init
    lochist_t_init.restype = ctypes.c_char
    lochist_t_init.argtypes = [ctypes.POINTER(struct_lochist_t), ctypes.c_char_p, ctypes.POINTER(struct_place_t), ctypes.POINTER(None), uint32]
    lochist_t_jump = _libraries['FIXME_STUB'].lochist_t_jump
    lochist_t_jump.restype = None
    lochist_t_jump.argtypes = [ctypes.POINTER(struct_lochist_t), ctypes.c_char, ctypes.POINTER(struct_lochist_entry_t)]
    lochist_t_register_live = _libraries['FIXME_STUB'].lochist_t_register_live
    lochist_t_register_live.restype = None
    lochist_t_register_live.argtypes = [ctypes.POINTER(struct_lochist_t)]
    lochist_t_save = _libraries['FIXME_STUB'].lochist_t_save
    lochist_t_save.restype = None
    lochist_t_save.argtypes = [ctypes.POINTER(struct_lochist_t)]
    lochist_t_seek = _libraries['FIXME_STUB'].lochist_t_seek
    lochist_t_seek.restype = ctypes.c_char
    lochist_t_seek.argtypes = [ctypes.POINTER(struct_lochist_t), uint32, ctypes.c_char, ctypes.c_char]
    lochist_t_set = _libraries['FIXME_STUB'].lochist_t_set
    lochist_t_set.restype = None
    lochist_t_set.argtypes = [ctypes.POINTER(struct_lochist_t), uint32, ctypes.POINTER(struct_lochist_entry_t)]
    lochist_t_size = _libraries['FIXME_STUB'].lochist_t_size
    lochist_t_size.restype = uint32
    lochist_t_size.argtypes = [ctypes.POINTER(struct_lochist_t)]
    lock_dbgmem_config = _libraries['FIXME_STUB'].lock_dbgmem_config
    lock_dbgmem_config.restype = None
    lock_dbgmem_config.argtypes = []
    lock_func_range = _libraries['FIXME_STUB'].lock_func_range
    lock_func_range.restype = None
    lock_func_range.argtypes = [ctypes.POINTER(struct_func_t), ctypes.c_char]
    lock_segm = _libraries['FIXME_STUB'].lock_segm
    lock_segm.restype = None
    lock_segm.argtypes = [ctypes.POINTER(struct_segment_t), ctypes.c_char]
    locking = _libraries['FIXME_STUB'].locking
    locking.restype = ctypes.c_int32
    locking.argtypes = [ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
    log = _libraries['FIXME_STUB'].log
    log.restype = ctypes.c_double
    log.argtypes = [ctypes.c_double]
    log10 = _libraries['FIXME_STUB'].log10
    log10.restype = ctypes.c_double
    log10.argtypes = [ctypes.c_double]
    log10f = _libraries['FIXME_STUB'].log10f
    log10f.restype = ctypes.c_float
    log10f.argtypes = [ctypes.c_float]
    log10l = _libraries['FIXME_STUB'].log10l
    log10l.restype = ctypes.c_double
    log10l.argtypes = [ctypes.c_double]
    log1p = _libraries['FIXME_STUB'].log1p
    log1p.restype = ctypes.c_double
    log1p.argtypes = [ctypes.c_double]
    log1pf = _libraries['FIXME_STUB'].log1pf
    log1pf.restype = ctypes.c_float
    log1pf.argtypes = [ctypes.c_float]
    log1pl = _libraries['FIXME_STUB'].log1pl
    log1pl.restype = ctypes.c_double
    log1pl.argtypes = [ctypes.c_double]
    log2 = _libraries['FIXME_STUB'].log2
    log2.restype = ctypes.c_double
    log2.argtypes = [ctypes.c_double]
    log2ceil = _libraries['FIXME_STUB'].log2ceil
    log2ceil.restype = ctypes.c_int32
    log2ceil.argtypes = [uint64]
    log2f = _libraries['FIXME_STUB'].log2f
    log2f.restype = ctypes.c_float
    log2f.argtypes = [ctypes.c_float]
    log2floor = _libraries['FIXME_STUB'].log2floor
    log2floor.restype = ctypes.c_int32
    log2floor.argtypes = [uint64]
    log2l = _libraries['FIXME_STUB'].log2l
    log2l.restype = ctypes.c_double
    log2l.argtypes = [ctypes.c_double]
    logb = _libraries['FIXME_STUB'].logb
    logb.restype = ctypes.c_double
    logb.argtypes = [ctypes.c_double]
    logbf = _libraries['FIXME_STUB'].logbf
    logbf.restype = ctypes.c_float
    logbf.argtypes = [ctypes.c_float]
    logbl = _libraries['FIXME_STUB'].logbl
    logbl.restype = ctypes.c_double
    logbl.argtypes = [ctypes.c_double]
    logf = _libraries['FIXME_STUB'].logf
    logf.restype = ctypes.c_float
    logf.argtypes = [ctypes.c_float]
    logl = _libraries['FIXME_STUB'].logl
    logl.restype = ctypes.c_double
    logl.argtypes = [ctypes.c_double]
    lookup_key_code = _libraries['FIXME_STUB'].lookup_key_code
    lookup_key_code.restype = ushort
    lookup_key_code.argtypes = [ctypes.c_int32, ctypes.c_int32, ctypes.c_char]
    lookup_loc_converter2 = _libraries['FIXME_STUB'].lookup_loc_converter2
    lookup_loc_converter2.restype = lochist_entry_cvt2_t
    lookup_loc_converter2.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    low = _libraries['FIXME_STUB'].low
    low.restype = uint32
    low.argtypes = [ctypes.POINTER(longlong)]
    lower_type = _libraries['FIXME_STUB'].lower_type
    lower_type.restype = ctypes.c_int32
    lower_type.argtypes = [ctypes.POINTER(struct_til_t), ctypes.POINTER(struct_tinfo_t), ctypes.c_char_p, ctypes.POINTER(struct_lowertype_helper_t)]
    lread = _libraries['FIXME_STUB'].lread
    lread.restype = None
    lread.argtypes = [ctypes.POINTER(struct_linput_t), ctypes.POINTER(None), size_t]
    lread2bytes = _libraries['FIXME_STUB'].lread2bytes
    lread2bytes.restype = ctypes.c_int32
    lread2bytes.argtypes = [ctypes.POINTER(struct_linput_t), ctypes.POINTER(uint16), ctypes.c_char]
    lread4bytes = _libraries['FIXME_STUB'].lread4bytes
    lread4bytes.restype = ctypes.c_int32
    lread4bytes.argtypes = [ctypes.POINTER(struct_linput_t), ctypes.POINTER(uint32), ctypes.c_char]
    lread8bytes = _libraries['FIXME_STUB'].lread8bytes
    lread8bytes.restype = ctypes.c_int32
    lread8bytes.argtypes = [ctypes.POINTER(struct_linput_t), ctypes.POINTER(uint64), ctypes.c_char]
    lreadbytes = _libraries['FIXME_STUB'].lreadbytes
    lreadbytes.restype = ctypes.c_int32
    lreadbytes.argtypes = [ctypes.POINTER(struct_linput_t), ctypes.POINTER(None), size_t, ctypes.c_char]
    lrint = _libraries['FIXME_STUB'].lrint
    lrint.restype = ctypes.c_int32
    lrint.argtypes = [ctypes.c_double]
    lrintf = _libraries['FIXME_STUB'].lrintf
    lrintf.restype = ctypes.c_int32
    lrintf.argtypes = [ctypes.c_float]
    lrintl = _libraries['FIXME_STUB'].lrintl
    lrintl.restype = ctypes.c_int32
    lrintl.argtypes = [ctypes.c_double]
    lround = _libraries['FIXME_STUB'].lround
    lround.restype = ctypes.c_int32
    lround.argtypes = [ctypes.c_double]
    lroundf = _libraries['FIXME_STUB'].lroundf
    lroundf.restype = ctypes.c_int32
    lroundf.argtypes = [ctypes.c_float]
    lroundl = _libraries['FIXME_STUB'].lroundl
    lroundl.restype = ctypes.c_int32
    lroundl.argtypes = [ctypes.c_double]
    lsearch = _libraries['FIXME_STUB'].lsearch
    lsearch.restype = ctypes.POINTER(None)
    lsearch.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32, _CoreCrtNonSecureSearchSortCompareFunction]
    lseek = _libraries['FIXME_STUB'].lseek
    lseek.restype = ctypes.c_int32
    lseek.argtypes = [ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
    ltoa = _libraries['FIXME_STUB'].ltoa
    ltoa.restype = ctypes.c_char_p
    ltoa.argtypes = [ctypes.c_int32, ctypes.c_char_p, ctypes.c_int32]
    make_file_ext = _libraries['FIXME_STUB'].make_file_ext
    make_file_ext.restype = ctypes.c_char_p
    make_file_ext.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, ctypes.c_char_p]
    make_int128 = _libraries['FIXME_STUB'].make_int128
    make_int128.restype = struct_int128
    make_int128.argtypes = [ulonglong, longlong]
    make_linput = _libraries['FIXME_STUB'].make_linput
    make_linput.restype = ctypes.POINTER(struct_linput_t)
    make_linput.argtypes = [ctypes.POINTER(FILE)]
    make_longlong = _libraries['FIXME_STUB'].make_longlong
    make_longlong.restype = longlong
    make_longlong.argtypes = [uint32, int32]
    make_name_auto = _libraries['FIXME_STUB'].make_name_auto
    make_name_auto.restype = ctypes.c_char
    make_name_auto.argtypes = [ea_t]
    make_name_non_public = _libraries['FIXME_STUB'].make_name_non_public
    make_name_non_public.restype = None
    make_name_non_public.argtypes = [ea_t]
    make_name_non_weak = _libraries['FIXME_STUB'].make_name_non_weak
    make_name_non_weak.restype = None
    make_name_non_weak.argtypes = [ea_t]
    make_name_public = _libraries['FIXME_STUB'].make_name_public
    make_name_public.restype = None
    make_name_public.argtypes = [ea_t]
    make_name_user = _libraries['FIXME_STUB'].make_name_user
    make_name_user.restype = ctypes.c_char
    make_name_user.argtypes = [ea_t]
    make_name_weak = _libraries['FIXME_STUB'].make_name_weak
    make_name_weak.restype = None
    make_name_weak.argtypes = [ea_t]
    make_qtime64 = _libraries['FIXME_STUB'].make_qtime64
    make_qtime64.restype = qtime64_t
    make_qtime64.argtypes = [uint32, int32]
    make_str_type = _libraries['FIXME_STUB'].make_str_type
    make_str_type.restype = int32
    make_str_type.argtypes = [uchar, ctypes.c_int32, uchar, uchar]
    make_uint128 = _libraries['FIXME_STUB'].make_uint128
    make_uint128.restype = struct_uint128
    make_uint128.argtypes = [ulonglong, longlong]
    make_ulonglong = _libraries['FIXME_STUB'].make_ulonglong
    make_ulonglong.restype = ulonglong
    make_ulonglong.argtypes = [uint32, int32]
    malloc = _libraries['FIXME_STUB'].malloc
    malloc.restype = ctypes.POINTER(None)
    malloc.argtypes = [size_t]
    map_code_ea = _libraries['FIXME_STUB'].map_code_ea
    map_code_ea.restype = ea_t
    map_code_ea.argtypes = [ctypes.POINTER(struct_insn_t), ctypes.POINTER(struct_op_t)]
    map_data_ea = _libraries['FIXME_STUB'].map_data_ea
    map_data_ea.restype = ea_t
    map_data_ea.argtypes = [ctypes.POINTER(struct_insn_t), ctypes.POINTER(struct_op_t)]
    map_ea = _libraries['FIXME_STUB'].map_ea
    map_ea.restype = ea_t
    map_ea.argtypes = [ctypes.POINTER(struct_insn_t), ea_t, ctypes.c_int32, ctypes.c_char]
    mark_all_eaviews_for_refresh = _libraries['FIXME_STUB'].mark_all_eaviews_for_refresh
    mark_all_eaviews_for_refresh.restype = None
    mark_all_eaviews_for_refresh.argtypes = []
    mark_epilog_insn = _libraries['FIXME_STUB'].mark_epilog_insn
    mark_epilog_insn.restype = None
    mark_epilog_insn.argtypes = [ea_t]
    mark_prolog_insn = _libraries['FIXME_STUB'].mark_prolog_insn
    mark_prolog_insn.restype = None
    mark_prolog_insn.argtypes = [ea_t]
    mark_range_for_refresh = _libraries['FIXME_STUB'].mark_range_for_refresh
    mark_range_for_refresh.restype = None
    mark_range_for_refresh.argtypes = [ea_t, asize_t]
    mark_switch_insn = _libraries['FIXME_STUB'].mark_switch_insn
    mark_switch_insn.restype = None
    mark_switch_insn.argtypes = [ea_t]
    mark_switch_insns_jpt = _libraries['FIXME_STUB'].mark_switch_insns_jpt
    mark_switch_insns_jpt.restype = None
    mark_switch_insns_jpt.argtypes = [ctypes.POINTER(struct_jump_pattern_t), ctypes.c_int32, ctypes.c_int32]
    match_jpt = _libraries['FIXME_STUB'].match_jpt
    match_jpt.restype = ctypes.c_char
    match_jpt.argtypes = [ctypes.POINTER(struct_jump_pattern_t)]
    max = _libraries['FIXME_STUB'].max
    max.restype = ctypes.POINTER(ctypes.c_uint64)
    max.argtypes = [ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64)]
    max_history_files = (ctypes.c_int32).in_dll(_libraries['FIXME_STUB'], 'max_history_files') if getattr(_libraries['FIXME_STUB'], 'max_history_files', None) else None
    may_create_stkvars = _libraries['FIXME_STUB'].may_create_stkvars
    may_create_stkvars.restype = ctypes.c_char
    may_create_stkvars.argtypes = []
    may_trace_sp = _libraries['FIXME_STUB'].may_trace_sp
    may_trace_sp.restype = ctypes.c_char
    may_trace_sp.argtypes = []
    mblen = _libraries['FIXME_STUB'].mblen
    mblen.restype = ctypes.c_int32
    mblen.argtypes = [ctypes.c_char_p, size_t]
    mbrlen = _libraries['FIXME_STUB'].mbrlen
    mbrlen.restype = size_t
    mbrlen.argtypes = [ctypes.c_char_p, size_t, ctypes.POINTER(mbstate_t)]
    mbrtowc = _libraries['FIXME_STUB'].mbrtowc
    mbrtowc.restype = size_t
    mbrtowc.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_char_p, size_t, ctypes.POINTER(mbstate_t)]
    mbsinit = _libraries['FIXME_STUB'].mbsinit
    mbsinit.restype = ctypes.c_int32
    mbsinit.argtypes = [ctypes.POINTER(mbstate_t)]
    mbsrtowcs = _libraries['FIXME_STUB'].mbsrtowcs
    mbsrtowcs.restype = size_t
    mbsrtowcs.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_char_p), size_t, ctypes.POINTER(mbstate_t)]
    mbsrtowcs_s = _libraries['FIXME_STUB'].mbsrtowcs_s
    mbsrtowcs_s.restype = errno_t
    mbsrtowcs_s.argtypes = [ctypes.POINTER(size_t), ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_char_p), size_t, ctypes.POINTER(mbstate_t)]
    mbstowcs = _libraries['FIXME_STUB'].mbstowcs
    mbstowcs.restype = size_t
    mbstowcs.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_char_p, size_t]
    mbstowcs_s = _libraries['FIXME_STUB'].mbstowcs_s
    mbstowcs_s.restype = errno_t
    mbstowcs_s.argtypes = [ctypes.POINTER(size_t), ctypes.POINTER(ctypes.c_int16), size_t, ctypes.c_char_p, size_t]
    mbtowc = _libraries['FIXME_STUB'].mbtowc
    mbtowc.restype = ctypes.c_int32
    mbtowc.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_char_p, size_t]
    mem2base = _libraries['FIXME_STUB'].mem2base
    mem2base.restype = ctypes.c_int32
    mem2base.argtypes = [ctypes.POINTER(None), ea_t, ea_t, int64]
    memccpy = _libraries['FIXME_STUB'].memccpy
    memccpy.restype = ctypes.POINTER(None)
    memccpy.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.c_int32, size_t]
    memchr = _libraries['FIXME_STUB'].memchr
    memchr.restype = ctypes.POINTER(None)
    memchr.argtypes = [ctypes.POINTER(None), ctypes.c_int32, size_t]
    memcmp = _libraries['FIXME_STUB'].memcmp
    memcmp.restype = ctypes.c_int32
    memcmp.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), size_t]
    memcpy = _libraries['FIXME_STUB'].memcpy
    memcpy.restype = ctypes.POINTER(None)
    memcpy.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), size_t]
    memicmp = _libraries['FIXME_STUB'].memicmp
    memicmp.restype = ctypes.c_int32
    memicmp.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), size_t]
    memmove = _libraries['FIXME_STUB'].memmove
    memmove.restype = ctypes.POINTER(None)
    memmove.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), size_t]
    memrev = _libraries['FIXME_STUB'].memrev
    memrev.restype = ctypes.POINTER(None)
    memrev.argtypes = [ctypes.POINTER(None), ssize_t]
    memset = _libraries['FIXME_STUB'].memset
    memset.restype = ctypes.POINTER(None)
    memset.argtypes = [ctypes.POINTER(None), ctypes.c_int32, size_t]
    min = _libraries['FIXME_STUB'].min
    min.restype = ctypes.POINTER(ctypes.c_uint64)
    min.argtypes = [ctypes.POINTER(ctypes.c_uint64), ctypes.POINTER(ctypes.c_uint64)]
    mkdir = _libraries['FIXME_STUB'].mkdir
    mkdir.restype = ctypes.c_int32
    mkdir.argtypes = [ctypes.c_char_p]
    mktemp = _libraries['FIXME_STUB'].mktemp
    mktemp.restype = ctypes.c_char_p
    mktemp.argtypes = [ctypes.c_char_p]
    modf = _libraries['FIXME_STUB'].modf
    modf.restype = ctypes.c_double
    modf.argtypes = [ctypes.c_double, ctypes.POINTER(ctypes.c_double)]
    modff = _libraries['FIXME_STUB'].modff
    modff.restype = ctypes.c_float
    modff.argtypes = [ctypes.c_float, ctypes.POINTER(ctypes.c_float)]
    modfl = _libraries['FIXME_STUB'].modfl
    modfl.restype = ctypes.c_double
    modfl.argtypes = [ctypes.c_double, ctypes.POINTER(ctypes.c_double)]
    move_idcv = _libraries['FIXME_STUB'].move_idcv
    move_idcv.restype = error_t
    move_idcv.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t)]
    move_segm = _libraries['FIXME_STUB'].move_segm
    move_segm.restype = ctypes.c_int32
    move_segm.argtypes = [ctypes.POINTER(struct_segment_t), ea_t, ctypes.c_int32]
    move_segm_start = _libraries['FIXME_STUB'].move_segm_start
    move_segm_start.restype = ctypes.c_char
    move_segm_start.argtypes = [ea_t, ea_t, ctypes.c_int32]
    msg = _libraries['FIXME_STUB'].msg
    msg.restype = ctypes.c_int32
    msg.argtypes = [ctypes.c_char_p]
    msg_clear = _libraries['FIXME_STUB'].msg_clear
    msg_clear.restype = None
    msg_clear.argtypes = []
    msg_get_lines = _libraries['FIXME_STUB'].msg_get_lines
    msg_get_lines.restype = None
    msg_get_lines.argtypes = [ctypes.POINTER(qstrvec_t), ctypes.c_int32]
    msg_save = _libraries['FIXME_STUB'].msg_save
    msg_save.restype = ctypes.c_char
    msg_save.argtypes = [ctypes.POINTER(qstring)]
    name_requires_qualifier = _libraries['FIXME_STUB'].name_requires_qualifier
    name_requires_qualifier.restype = ctypes.c_char
    name_requires_qualifier.argtypes = [ctypes.POINTER(qstring), uint32, ctypes.c_char_p, uint64]
    nan = _libraries['FIXME_STUB'].nan
    nan.restype = ctypes.c_double
    nan.argtypes = [ctypes.c_char_p]
    nanf = _libraries['FIXME_STUB'].nanf
    nanf.restype = ctypes.c_float
    nanf.argtypes = [ctypes.c_char_p]
    nanl = _libraries['FIXME_STUB'].nanl
    nanl.restype = ctypes.c_double
    nanl.argtypes = [ctypes.c_char_p]
    nbits = _libraries['FIXME_STUB'].nbits
    nbits.restype = ctypes.c_int32
    nbits.argtypes = [ea_t]
    nearbyint = _libraries['FIXME_STUB'].nearbyint
    nearbyint.restype = ctypes.c_double
    nearbyint.argtypes = [ctypes.c_double]
    nearbyintf = _libraries['FIXME_STUB'].nearbyintf
    nearbyintf.restype = ctypes.c_float
    nearbyintf.argtypes = [ctypes.c_float]
    nearbyintl = _libraries['FIXME_STUB'].nearbyintl
    nearbyintl.restype = ctypes.c_double
    nearbyintl.argtypes = [ctypes.c_double]
    netnode_altadjust = _libraries['FIXME_STUB'].netnode_altadjust
    netnode_altadjust.restype = None
    netnode_altadjust.argtypes = [nodeidx_t, nodeidx_t, nodeidx_t, nodeidx_t, ctypes.CFUNCTYPE(ctypes.c_char, nodeidx_t)]
    netnode_altadjust2 = _libraries['FIXME_STUB'].netnode_altadjust2
    netnode_altadjust2.restype = None
    netnode_altadjust2.argtypes = [nodeidx_t, nodeidx_t, nodeidx_t, nodeidx_t, ctypes.POINTER(struct_altadjust_visitor_t)]
    netnode_altshift = _libraries['FIXME_STUB'].netnode_altshift
    netnode_altshift.restype = size_t
    netnode_altshift.argtypes = [nodeidx_t, nodeidx_t, nodeidx_t, nodeidx_t, ctypes.c_int32]
    netnode_altval = _libraries['FIXME_STUB'].netnode_altval
    netnode_altval.restype = nodeidx_t
    netnode_altval.argtypes = [nodeidx_t, nodeidx_t, ctypes.c_int32]
    netnode_altval_idx8 = _libraries['FIXME_STUB'].netnode_altval_idx8
    netnode_altval_idx8.restype = nodeidx_t
    netnode_altval_idx8.argtypes = [nodeidx_t, uchar, ctypes.c_int32]
    netnode_blobsize = _libraries['FIXME_STUB'].netnode_blobsize
    netnode_blobsize.restype = size_t
    netnode_blobsize.argtypes = [nodeidx_t, nodeidx_t, ctypes.c_int32]
    netnode_charshift = _libraries['FIXME_STUB'].netnode_charshift
    netnode_charshift.restype = size_t
    netnode_charshift.argtypes = [nodeidx_t, nodeidx_t, nodeidx_t, nodeidx_t, ctypes.c_int32]
    netnode_charval = _libraries['FIXME_STUB'].netnode_charval
    netnode_charval.restype = uchar
    netnode_charval.argtypes = [nodeidx_t, nodeidx_t, ctypes.c_int32]
    netnode_charval_idx8 = _libraries['FIXME_STUB'].netnode_charval_idx8
    netnode_charval_idx8.restype = uchar
    netnode_charval_idx8.argtypes = [nodeidx_t, uchar, ctypes.c_int32]
    netnode_check = _libraries['FIXME_STUB'].netnode_check
    netnode_check.restype = ctypes.c_char
    netnode_check.argtypes = [ctypes.POINTER(struct_netnode), ctypes.c_char_p, size_t, ctypes.c_char]
    netnode_copy = _libraries['FIXME_STUB'].netnode_copy
    netnode_copy.restype = size_t
    netnode_copy.argtypes = [nodeidx_t, nodeidx_t, nodeidx_t, ctypes.c_char]
    netnode_delblob = _libraries['FIXME_STUB'].netnode_delblob
    netnode_delblob.restype = ctypes.c_int32
    netnode_delblob.argtypes = [nodeidx_t, nodeidx_t, ctypes.c_int32]
    netnode_delvalue = _libraries['FIXME_STUB'].netnode_delvalue
    netnode_delvalue.restype = ctypes.c_char
    netnode_delvalue.argtypes = [nodeidx_t]
    netnode_end = _libraries['FIXME_STUB'].netnode_end
    netnode_end.restype = ctypes.c_char
    netnode_end.argtypes = [ctypes.POINTER(struct_netnode)]
    netnode_exist = _libraries['FIXME_STUB'].netnode_exist
    netnode_exist.restype = ctypes.c_char
    netnode_exist.argtypes = [ctypes.POINTER(struct_netnode)]
    netnode_get_name = _libraries['FIXME_STUB'].netnode_get_name
    netnode_get_name.restype = ssize_t
    netnode_get_name.argtypes = [nodeidx_t, ctypes.POINTER(qstring)]
    netnode_getblob = _libraries['FIXME_STUB'].netnode_getblob
    netnode_getblob.restype = ctypes.POINTER(None)
    netnode_getblob.argtypes = [nodeidx_t, ctypes.POINTER(None), ctypes.POINTER(size_t), nodeidx_t, ctypes.c_int32]
    netnode_hashdel = _libraries['FIXME_STUB'].netnode_hashdel
    netnode_hashdel.restype = ctypes.c_char
    netnode_hashdel.argtypes = [nodeidx_t, ctypes.c_char_p, ctypes.c_int32]
    netnode_hashfirst = _libraries['FIXME_STUB'].netnode_hashfirst
    netnode_hashfirst.restype = ssize_t
    netnode_hashfirst.argtypes = [nodeidx_t, ctypes.c_char_p, size_t, ctypes.c_int32]
    netnode_hashlast = _libraries['FIXME_STUB'].netnode_hashlast
    netnode_hashlast.restype = ssize_t
    netnode_hashlast.argtypes = [nodeidx_t, ctypes.c_char_p, size_t, ctypes.c_int32]
    netnode_hashnext = _libraries['FIXME_STUB'].netnode_hashnext
    netnode_hashnext.restype = ssize_t
    netnode_hashnext.argtypes = [nodeidx_t, ctypes.c_char_p, ctypes.c_char_p, size_t, ctypes.c_int32]
    netnode_hashprev = _libraries['FIXME_STUB'].netnode_hashprev
    netnode_hashprev.restype = ssize_t
    netnode_hashprev.argtypes = [nodeidx_t, ctypes.c_char_p, ctypes.c_char_p, size_t, ctypes.c_int32]
    netnode_hashset = _libraries['FIXME_STUB'].netnode_hashset
    netnode_hashset.restype = ctypes.c_char
    netnode_hashset.argtypes = [nodeidx_t, ctypes.c_char_p, ctypes.POINTER(None), size_t, ctypes.c_int32]
    netnode_hashstr = _libraries['FIXME_STUB'].netnode_hashstr
    netnode_hashstr.restype = ssize_t
    netnode_hashstr.argtypes = [nodeidx_t, ctypes.c_char_p, ctypes.c_char_p, size_t, ctypes.c_int32]
    netnode_hashval = _libraries['FIXME_STUB'].netnode_hashval
    netnode_hashval.restype = ssize_t
    netnode_hashval.argtypes = [nodeidx_t, ctypes.c_char_p, ctypes.POINTER(None), size_t, ctypes.c_int32]
    netnode_hashval_long = _libraries['FIXME_STUB'].netnode_hashval_long
    netnode_hashval_long.restype = nodeidx_t
    netnode_hashval_long.argtypes = [nodeidx_t, ctypes.c_char_p, ctypes.c_int32]
    netnode_inited = _libraries['FIXME_STUB'].netnode_inited
    netnode_inited.restype = ctypes.c_char
    netnode_inited.argtypes = []
    netnode_is_available = _libraries['FIXME_STUB'].netnode_is_available
    netnode_is_available.restype = ctypes.c_char
    netnode_is_available.argtypes = []
    netnode_kill = _libraries['FIXME_STUB'].netnode_kill
    netnode_kill.restype = None
    netnode_kill.argtypes = [ctypes.POINTER(struct_netnode)]
    netnode_lower_bound = _libraries['FIXME_STUB'].netnode_lower_bound
    netnode_lower_bound.restype = nodeidx_t
    netnode_lower_bound.argtypes = [nodeidx_t, nodeidx_t, ctypes.c_int32]
    netnode_lower_bound_idx8 = _libraries['FIXME_STUB'].netnode_lower_bound_idx8
    netnode_lower_bound_idx8.restype = nodeidx_t
    netnode_lower_bound_idx8.argtypes = [nodeidx_t, uchar, ctypes.c_int32]
    netnode_next = _libraries['FIXME_STUB'].netnode_next
    netnode_next.restype = ctypes.c_char
    netnode_next.argtypes = [ctypes.POINTER(struct_netnode)]
    netnode_prev = _libraries['FIXME_STUB'].netnode_prev
    netnode_prev.restype = ctypes.c_char
    netnode_prev.argtypes = [ctypes.POINTER(struct_netnode)]
    netnode_qgetblob = _libraries['FIXME_STUB'].netnode_qgetblob
    netnode_qgetblob.restype = ssize_t
    netnode_qgetblob.argtypes = [nodeidx_t, ctypes.POINTER(struct_bytevec_t), size_t, nodeidx_t, ctypes.c_int32]
    netnode_qhashfirst = _libraries['FIXME_STUB'].netnode_qhashfirst
    netnode_qhashfirst.restype = ssize_t
    netnode_qhashfirst.argtypes = [nodeidx_t, ctypes.POINTER(qstring), ctypes.c_int32]
    netnode_qhashlast = _libraries['FIXME_STUB'].netnode_qhashlast
    netnode_qhashlast.restype = ssize_t
    netnode_qhashlast.argtypes = [nodeidx_t, ctypes.POINTER(qstring), ctypes.c_int32]
    netnode_qhashnext = _libraries['FIXME_STUB'].netnode_qhashnext
    netnode_qhashnext.restype = ssize_t
    netnode_qhashnext.argtypes = [nodeidx_t, ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.c_int32]
    netnode_qhashprev = _libraries['FIXME_STUB'].netnode_qhashprev
    netnode_qhashprev.restype = ssize_t
    netnode_qhashprev.argtypes = [nodeidx_t, ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.c_int32]
    netnode_qhashstr = _libraries['FIXME_STUB'].netnode_qhashstr
    netnode_qhashstr.restype = ssize_t
    netnode_qhashstr.argtypes = [nodeidx_t, ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.c_int32]
    netnode_qsupstr = _libraries['FIXME_STUB'].netnode_qsupstr
    netnode_qsupstr.restype = ssize_t
    netnode_qsupstr.argtypes = [nodeidx_t, ctypes.POINTER(qstring), nodeidx_t, ctypes.c_int32]
    netnode_qsupstr_idx8 = _libraries['FIXME_STUB'].netnode_qsupstr_idx8
    netnode_qsupstr_idx8.restype = ssize_t
    netnode_qsupstr_idx8.argtypes = [nodeidx_t, ctypes.POINTER(qstring), uchar, ctypes.c_int32]
    netnode_qvalstr = _libraries['FIXME_STUB'].netnode_qvalstr
    netnode_qvalstr.restype = ssize_t
    netnode_qvalstr.argtypes = [nodeidx_t, ctypes.POINTER(qstring)]
    netnode_rename = _libraries['FIXME_STUB'].netnode_rename
    netnode_rename.restype = ctypes.c_char
    netnode_rename.argtypes = [nodeidx_t, ctypes.c_char_p, size_t]
    netnode_set = _libraries['FIXME_STUB'].netnode_set
    netnode_set.restype = ctypes.c_char
    netnode_set.argtypes = [nodeidx_t, ctypes.POINTER(None), size_t]
    netnode_setblob = _libraries['FIXME_STUB'].netnode_setblob
    netnode_setblob.restype = ctypes.c_char
    netnode_setblob.argtypes = [nodeidx_t, ctypes.POINTER(None), size_t, nodeidx_t, ctypes.c_int32]
    netnode_start = _libraries['FIXME_STUB'].netnode_start
    netnode_start.restype = ctypes.c_char
    netnode_start.argtypes = [ctypes.POINTER(struct_netnode)]
    netnode_supdel = _libraries['FIXME_STUB'].netnode_supdel
    netnode_supdel.restype = ctypes.c_char
    netnode_supdel.argtypes = [nodeidx_t, nodeidx_t, ctypes.c_int32]
    netnode_supdel_all = _libraries['FIXME_STUB'].netnode_supdel_all
    netnode_supdel_all.restype = ctypes.c_char
    netnode_supdel_all.argtypes = [nodeidx_t, ctypes.c_int32]
    netnode_supdel_idx8 = _libraries['FIXME_STUB'].netnode_supdel_idx8
    netnode_supdel_idx8.restype = ctypes.c_char
    netnode_supdel_idx8.argtypes = [nodeidx_t, uchar, ctypes.c_int32]
    netnode_supdel_range = _libraries['FIXME_STUB'].netnode_supdel_range
    netnode_supdel_range.restype = ctypes.c_int32
    netnode_supdel_range.argtypes = [nodeidx_t, nodeidx_t, nodeidx_t, ctypes.c_int32]
    netnode_supdel_range_idx8 = _libraries['FIXME_STUB'].netnode_supdel_range_idx8
    netnode_supdel_range_idx8.restype = ctypes.c_int32
    netnode_supdel_range_idx8.argtypes = [nodeidx_t, nodeidx_t, nodeidx_t, ctypes.c_int32]
    netnode_supfirst = _libraries['FIXME_STUB'].netnode_supfirst
    netnode_supfirst.restype = nodeidx_t
    netnode_supfirst.argtypes = [nodeidx_t, ctypes.c_int32]
    netnode_supfirst_idx8 = _libraries['FIXME_STUB'].netnode_supfirst_idx8
    netnode_supfirst_idx8.restype = nodeidx_t
    netnode_supfirst_idx8.argtypes = [nodeidx_t, ctypes.c_int32]
    netnode_suplast = _libraries['FIXME_STUB'].netnode_suplast
    netnode_suplast.restype = nodeidx_t
    netnode_suplast.argtypes = [nodeidx_t, ctypes.c_int32]
    netnode_suplast_idx8 = _libraries['FIXME_STUB'].netnode_suplast_idx8
    netnode_suplast_idx8.restype = nodeidx_t
    netnode_suplast_idx8.argtypes = [nodeidx_t, ctypes.c_int32]
    netnode_supnext = _libraries['FIXME_STUB'].netnode_supnext
    netnode_supnext.restype = nodeidx_t
    netnode_supnext.argtypes = [nodeidx_t, nodeidx_t, ctypes.c_int32]
    netnode_supnext_idx8 = _libraries['FIXME_STUB'].netnode_supnext_idx8
    netnode_supnext_idx8.restype = nodeidx_t
    netnode_supnext_idx8.argtypes = [nodeidx_t, uchar, ctypes.c_int32]
    netnode_supprev = _libraries['FIXME_STUB'].netnode_supprev
    netnode_supprev.restype = nodeidx_t
    netnode_supprev.argtypes = [nodeidx_t, nodeidx_t, ctypes.c_int32]
    netnode_supprev_idx8 = _libraries['FIXME_STUB'].netnode_supprev_idx8
    netnode_supprev_idx8.restype = nodeidx_t
    netnode_supprev_idx8.argtypes = [nodeidx_t, uchar, ctypes.c_int32]
    netnode_supset = _libraries['FIXME_STUB'].netnode_supset
    netnode_supset.restype = ctypes.c_char
    netnode_supset.argtypes = [nodeidx_t, nodeidx_t, ctypes.POINTER(None), size_t, ctypes.c_int32]
    netnode_supset_idx8 = _libraries['FIXME_STUB'].netnode_supset_idx8
    netnode_supset_idx8.restype = ctypes.c_char
    netnode_supset_idx8.argtypes = [nodeidx_t, uchar, ctypes.POINTER(None), size_t, ctypes.c_int32]
    netnode_supshift = _libraries['FIXME_STUB'].netnode_supshift
    netnode_supshift.restype = size_t
    netnode_supshift.argtypes = [nodeidx_t, nodeidx_t, nodeidx_t, nodeidx_t, ctypes.c_int32]
    netnode_supstr = _libraries['FIXME_STUB'].netnode_supstr
    netnode_supstr.restype = ssize_t
    netnode_supstr.argtypes = [nodeidx_t, nodeidx_t, ctypes.c_char_p, size_t, ctypes.c_int32]
    netnode_supstr_idx8 = _libraries['FIXME_STUB'].netnode_supstr_idx8
    netnode_supstr_idx8.restype = ssize_t
    netnode_supstr_idx8.argtypes = [nodeidx_t, uchar, ctypes.c_char_p, size_t, ctypes.c_int32]
    netnode_supval = _libraries['FIXME_STUB'].netnode_supval
    netnode_supval.restype = ssize_t
    netnode_supval.argtypes = [nodeidx_t, nodeidx_t, ctypes.POINTER(None), size_t, ctypes.c_int32]
    netnode_supval_idx8 = _libraries['FIXME_STUB'].netnode_supval_idx8
    netnode_supval_idx8.restype = ssize_t
    netnode_supval_idx8.argtypes = [nodeidx_t, uchar, ctypes.POINTER(None), size_t, ctypes.c_int32]
    netnode_valobj = _libraries['FIXME_STUB'].netnode_valobj
    netnode_valobj.restype = ssize_t
    netnode_valobj.argtypes = [nodeidx_t, ctypes.POINTER(None), size_t]
    netnode_valstr = _libraries['FIXME_STUB'].netnode_valstr
    netnode_valstr.restype = ssize_t
    netnode_valstr.argtypes = [nodeidx_t, ctypes.c_char_p, size_t]
    new_til = _libraries['FIXME_STUB'].new_til
    new_til.restype = ctypes.POINTER(struct_til_t)
    new_til.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    next_addr = _libraries['FIXME_STUB'].next_addr
    next_addr.restype = ea_t
    next_addr.argtypes = [ea_t]
    next_chunk = _libraries['FIXME_STUB'].next_chunk
    next_chunk.restype = ea_t
    next_chunk.argtypes = [ea_t]
    next_head = _libraries['FIXME_STUB'].next_head
    next_head.restype = ea_t
    next_head.argtypes = [ea_t, ea_t]
    next_idcv_attr = _libraries['FIXME_STUB'].next_idcv_attr
    next_idcv_attr.restype = ctypes.c_char_p
    next_idcv_attr.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p]
    next_inited = _libraries['FIXME_STUB'].next_inited
    next_inited.restype = ea_t
    next_inited.argtypes = [ea_t, ea_t]
    next_marked_insn = _libraries['FIXME_STUB'].next_marked_insn
    next_marked_insn.restype = ea_t
    next_marked_insn.argtypes = [ea_t]
    next_named_type = _libraries['FIXME_STUB'].next_named_type
    next_named_type.restype = ctypes.c_char_p
    next_named_type.argtypes = [ctypes.POINTER(struct_til_t), ctypes.c_char_p, ctypes.c_int32]
    next_not_tail = _libraries['FIXME_STUB'].next_not_tail
    next_not_tail.restype = ea_t
    next_not_tail.argtypes = [ea_t]
    next_that = _libraries['FIXME_STUB'].next_that
    next_that.restype = ea_t
    next_that.argtypes = [ea_t, ea_t, testf_t, ctypes.POINTER(None)]
    next_unknown = _libraries['FIXME_STUB'].next_unknown
    next_unknown.restype = ea_t
    next_unknown.argtypes = [ea_t, ea_t]
    next_visea = _libraries['FIXME_STUB'].next_visea
    next_visea.restype = ea_t
    next_visea.argtypes = [ea_t]
    nextafter = _libraries['FIXME_STUB'].nextafter
    nextafter.restype = ctypes.c_double
    nextafter.argtypes = [ctypes.c_double, ctypes.c_double]
    nextafterf = _libraries['FIXME_STUB'].nextafterf
    nextafterf.restype = ctypes.c_float
    nextafterf.argtypes = [ctypes.c_float, ctypes.c_float]
    nextafterl = _libraries['FIXME_STUB'].nextafterl
    nextafterl.restype = ctypes.c_double
    nextafterl.argtypes = [ctypes.c_double, ctypes.c_double]
    nexttoward = _libraries['FIXME_STUB'].nexttoward
    nexttoward.restype = ctypes.c_double
    nexttoward.argtypes = [ctypes.c_double, ctypes.c_double]
    nexttowardf = _libraries['FIXME_STUB'].nexttowardf
    nexttowardf.restype = ctypes.c_float
    nexttowardf.argtypes = [ctypes.c_float, ctypes.c_double]
    nexttowardl = _libraries['FIXME_STUB'].nexttowardl
    nexttowardl.restype = ctypes.c_double
    nexttowardl.argtypes = [ctypes.c_double, ctypes.c_double]
    node2ea = _libraries['FIXME_STUB'].node2ea
    node2ea.restype = ea_t
    node2ea.argtypes = [nodeidx_t]
    node_iterator_goup = _libraries['FIXME_STUB'].node_iterator_goup
    node_iterator_goup.restype = ctypes.POINTER(struct_node_iterator)
    node_iterator_goup.argtypes = [ctypes.POINTER(struct_node_iterator)]
    nomem = _libraries['FIXME_STUB'].nomem
    nomem.restype = None
    nomem.argtypes = [ctypes.c_char_p]
    nothrow = (struct_std__nothrow_t).in_dll(_libraries['FIXME_STUB'], 'nothrow') if getattr(_libraries['FIXME_STUB'], 'nothrow', None) else None
    notify_dirtree = _libraries['FIXME_STUB'].notify_dirtree
    notify_dirtree.restype = None
    notify_dirtree.argtypes = [ctypes.POINTER(struct_dirtree_impl_t), ctypes.c_char, inode_t]
    nowarn_qsnprintf = _libraries['FIXME_STUB'].nowarn_qsnprintf
    nowarn_qsnprintf.restype = ctypes.c_int32
    nowarn_qsnprintf.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    num_flag = _libraries['FIXME_STUB'].num_flag
    num_flag.restype = flags_t
    num_flag.argtypes = []
    numop2str = _libraries['FIXME_STUB'].numop2str
    numop2str.restype = size_t
    numop2str.argtypes = [ctypes.c_char_p, size_t, ea_t, ctypes.c_int32, uint64, ctypes.c_int32, ctypes.c_int32]
    oct_flag = _libraries['FIXME_STUB'].oct_flag
    oct_flag.restype = flags_t
    oct_flag.argtypes = []
    off_flag = _libraries['FIXME_STUB'].off_flag
    off_flag.restype = flags_t
    off_flag.argtypes = []
    onexit = _libraries['FIXME_STUB'].onexit
    onexit.restype = _onexit_t
    onexit.argtypes = [_onexit_t]
    op_adds_xrefs = _libraries['FIXME_STUB'].op_adds_xrefs
    op_adds_xrefs.restype = ctypes.c_char
    op_adds_xrefs.argtypes = [flags_t, ctypes.c_int32]
    op_bin = _libraries['FIXME_STUB'].op_bin
    op_bin.restype = ctypes.c_char
    op_bin.argtypes = [ea_t, ctypes.c_int32]
    op_chr = _libraries['FIXME_STUB'].op_chr
    op_chr.restype = ctypes.c_char
    op_chr.argtypes = [ea_t, ctypes.c_int32]
    op_custfmt = _libraries['FIXME_STUB'].op_custfmt
    op_custfmt.restype = ctypes.c_char
    op_custfmt.argtypes = [ea_t, ctypes.c_int32, ctypes.c_int32]
    op_dec = _libraries['FIXME_STUB'].op_dec
    op_dec.restype = ctypes.c_char
    op_dec.argtypes = [ea_t, ctypes.c_int32]
    op_enum = _libraries['FIXME_STUB'].op_enum
    op_enum.restype = ctypes.c_char
    op_enum.argtypes = [ea_t, ctypes.c_int32, enum_t, uchar]
    op_flt = _libraries['FIXME_STUB'].op_flt
    op_flt.restype = ctypes.c_char
    op_flt.argtypes = [ea_t, ctypes.c_int32]
    op_hex = _libraries['FIXME_STUB'].op_hex
    op_hex.restype = ctypes.c_char
    op_hex.argtypes = [ea_t, ctypes.c_int32]
    op_num = _libraries['FIXME_STUB'].op_num
    op_num.restype = ctypes.c_char
    op_num.argtypes = [ea_t, ctypes.c_int32]
    op_oct = _libraries['FIXME_STUB'].op_oct
    op_oct.restype = ctypes.c_char
    op_oct.argtypes = [ea_t, ctypes.c_int32]
    op_offset = _libraries['FIXME_STUB'].op_offset
    op_offset.restype = ctypes.c_char
    op_offset.argtypes = [ea_t, ctypes.c_int32, uint32, ea_t, ea_t, adiff_t]
    op_offset_ex = _libraries['FIXME_STUB'].op_offset_ex
    op_offset_ex.restype = ctypes.c_char
    op_offset_ex.argtypes = [ea_t, ctypes.c_int32, ctypes.POINTER(struct_refinfo_t)]
    op_plain_offset = _libraries['FIXME_STUB'].op_plain_offset
    op_plain_offset.restype = ctypes.c_char
    op_plain_offset.argtypes = [ea_t, ctypes.c_int32, ea_t]
    op_seg = _libraries['FIXME_STUB'].op_seg
    op_seg.restype = ctypes.c_char
    op_seg.argtypes = [ea_t, ctypes.c_int32]
    op_stkvar = _libraries['FIXME_STUB'].op_stkvar
    op_stkvar.restype = ctypes.c_char
    op_stkvar.argtypes = [ea_t, ctypes.c_int32]
    op_stroff = _libraries['FIXME_STUB'].op_stroff
    op_stroff.restype = ctypes.c_char
    op_stroff.argtypes = [ctypes.POINTER(struct_insn_t), ctypes.c_int32, ctypes.POINTER(tid_t), ctypes.c_int32, adiff_t]
    open = _libraries['FIXME_STUB'].open
    open.restype = ctypes.c_int32
    open.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    openM = _libraries['FIXME_STUB'].openM
    openM.restype = ctypes.POINTER(FILE)
    openM.argtypes = [ctypes.c_char_p]
    openR = _libraries['FIXME_STUB'].openR
    openR.restype = ctypes.POINTER(FILE)
    openR.argtypes = [ctypes.c_char_p]
    openRT = _libraries['FIXME_STUB'].openRT
    openRT.restype = ctypes.POINTER(FILE)
    openRT.argtypes = [ctypes.c_char_p]
    open_bookmarks_window = _libraries['FIXME_STUB'].open_bookmarks_window
    open_bookmarks_window.restype = ctypes.POINTER(struct_TWidget)
    open_bookmarks_window.argtypes = [ctypes.POINTER(struct_TWidget)]
    open_bpts_window = _libraries['FIXME_STUB'].open_bpts_window
    open_bpts_window.restype = ctypes.POINTER(struct_TWidget)
    open_bpts_window.argtypes = [ea_t]
    open_calls_window = _libraries['FIXME_STUB'].open_calls_window
    open_calls_window.restype = ctypes.POINTER(struct_TWidget)
    open_calls_window.argtypes = [ea_t]
    open_disasm_window = _libraries['FIXME_STUB'].open_disasm_window
    open_disasm_window.restype = ctypes.POINTER(struct_TWidget)
    open_disasm_window.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_rangevec_t)]
    open_enums_window = _libraries['FIXME_STUB'].open_enums_window
    open_enums_window.restype = ctypes.POINTER(struct_TWidget)
    open_enums_window.argtypes = [tid_t]
    open_exports_window = _libraries['FIXME_STUB'].open_exports_window
    open_exports_window.restype = ctypes.POINTER(struct_TWidget)
    open_exports_window.argtypes = [ea_t]
    open_form = _libraries['FIXME_STUB'].open_form
    open_form.restype = ctypes.POINTER(struct_TWidget)
    open_form.argtypes = [ctypes.c_char_p, uint32]
    open_frame_window = _libraries['FIXME_STUB'].open_frame_window
    open_frame_window.restype = ctypes.POINTER(struct_TWidget)
    open_frame_window.argtypes = [ctypes.POINTER(struct_func_t), uval_t]
    open_funcs_window = _libraries['FIXME_STUB'].open_funcs_window
    open_funcs_window.restype = ctypes.POINTER(struct_TWidget)
    open_funcs_window.argtypes = [ea_t]
    open_hexdump_window = _libraries['FIXME_STUB'].open_hexdump_window
    open_hexdump_window.restype = ctypes.POINTER(struct_TWidget)
    open_hexdump_window.argtypes = [ctypes.c_char_p]
    open_imports_window = _libraries['FIXME_STUB'].open_imports_window
    open_imports_window.restype = ctypes.POINTER(struct_TWidget)
    open_imports_window.argtypes = [ea_t]
    open_linput = _libraries['FIXME_STUB'].open_linput
    open_linput.restype = ctypes.POINTER(struct_linput_t)
    open_linput.argtypes = [ctypes.c_char_p, ctypes.c_char]
    open_loctypes_window = _libraries['FIXME_STUB'].open_loctypes_window
    open_loctypes_window.restype = ctypes.POINTER(struct_TWidget)
    open_loctypes_window.argtypes = [ctypes.c_int32]
    open_modules_window = _libraries['FIXME_STUB'].open_modules_window
    open_modules_window.restype = ctypes.POINTER(struct_TWidget)
    open_modules_window.argtypes = []
    open_names_window = _libraries['FIXME_STUB'].open_names_window
    open_names_window.restype = ctypes.POINTER(struct_TWidget)
    open_names_window.argtypes = [ea_t]
    open_navband_window = _libraries['FIXME_STUB'].open_navband_window
    open_navband_window.restype = ctypes.POINTER(struct_TWidget)
    open_navband_window.argtypes = [ea_t, ctypes.c_int32]
    open_notepad_window = _libraries['FIXME_STUB'].open_notepad_window
    open_notepad_window.restype = ctypes.POINTER(struct_TWidget)
    open_notepad_window.argtypes = []
    open_problems_window = _libraries['FIXME_STUB'].open_problems_window
    open_problems_window.restype = ctypes.POINTER(struct_TWidget)
    open_problems_window.argtypes = [ea_t]
    open_segments_window = _libraries['FIXME_STUB'].open_segments_window
    open_segments_window.restype = ctypes.POINTER(struct_TWidget)
    open_segments_window.argtypes = [ea_t]
    open_segregs_window = _libraries['FIXME_STUB'].open_segregs_window
    open_segregs_window.restype = ctypes.POINTER(struct_TWidget)
    open_segregs_window.argtypes = [ea_t]
    open_selectors_window = _libraries['FIXME_STUB'].open_selectors_window
    open_selectors_window.restype = ctypes.POINTER(struct_TWidget)
    open_selectors_window.argtypes = []
    open_signatures_window = _libraries['FIXME_STUB'].open_signatures_window
    open_signatures_window.restype = ctypes.POINTER(struct_TWidget)
    open_signatures_window.argtypes = []
    open_stack_window = _libraries['FIXME_STUB'].open_stack_window
    open_stack_window.restype = ctypes.POINTER(struct_TWidget)
    open_stack_window.argtypes = []
    open_strings_window = _libraries['FIXME_STUB'].open_strings_window
    open_strings_window.restype = ctypes.POINTER(struct_TWidget)
    open_strings_window.argtypes = [ea_t, ea_t, ea_t]
    open_structs_window = _libraries['FIXME_STUB'].open_structs_window
    open_structs_window.restype = ctypes.POINTER(struct_TWidget)
    open_structs_window.argtypes = [tid_t, uval_t]
    open_threads_window = _libraries['FIXME_STUB'].open_threads_window
    open_threads_window.restype = ctypes.POINTER(struct_TWidget)
    open_threads_window.argtypes = []
    open_tils_window = _libraries['FIXME_STUB'].open_tils_window
    open_tils_window.restype = ctypes.POINTER(struct_TWidget)
    open_tils_window.argtypes = []
    open_trace_window = _libraries['FIXME_STUB'].open_trace_window
    open_trace_window.restype = ctypes.POINTER(struct_TWidget)
    open_trace_window.argtypes = []
    open_url = _libraries['FIXME_STUB'].open_url
    open_url.restype = None
    open_url.argtypes = [ctypes.c_char_p]
    open_xrefs_window = _libraries['FIXME_STUB'].open_xrefs_window
    open_xrefs_window.restype = ctypes.POINTER(struct_TWidget)
    open_xrefs_window.argtypes = [ea_t]
    optimize_argloc = _libraries['FIXME_STUB'].optimize_argloc
    optimize_argloc.restype = ctypes.c_char
    optimize_argloc.argtypes = [ctypes.POINTER(struct_argloc_t), ctypes.c_int32, ctypes.POINTER(struct_rangeset_t)]
    overlap = _libraries['FIXME_STUB'].overlap
    overlap.restype = ctypes.c_char
    overlap.argtypes = [uval_t, asize_t, uval_t, asize_t]
    oword_flag = _libraries['FIXME_STUB'].oword_flag
    oword_flag.restype = flags_t
    oword_flag.argtypes = []
    pack_db = _libraries['FIXME_STUB'].pack_db
    pack_db.restype = ctypes.POINTER(uchar)
    pack_db.argtypes = [ctypes.POINTER(uchar), ctypes.POINTER(uchar), uchar]
    pack_dd = _libraries['FIXME_STUB'].pack_dd
    pack_dd.restype = ctypes.POINTER(uchar)
    pack_dd.argtypes = [ctypes.POINTER(uchar), ctypes.POINTER(uchar), uint32]
    pack_dq = _libraries['FIXME_STUB'].pack_dq
    pack_dq.restype = ctypes.POINTER(uchar)
    pack_dq.argtypes = [ctypes.POINTER(uchar), ctypes.POINTER(uchar), uint64]
    pack_ds = _libraries['FIXME_STUB'].pack_ds
    pack_ds.restype = ctypes.POINTER(uchar)
    pack_ds.argtypes = [ctypes.POINTER(uchar), ctypes.POINTER(uchar), ctypes.c_char_p, size_t]
    pack_dw = _libraries['FIXME_STUB'].pack_dw
    pack_dw.restype = ctypes.POINTER(uchar)
    pack_dw.argtypes = [ctypes.POINTER(uchar), ctypes.POINTER(uchar), uint16]
    pack_ea = _libraries['FIXME_STUB'].pack_ea
    pack_ea.restype = ctypes.POINTER(uchar)
    pack_ea.argtypes = [ctypes.POINTER(uchar), ctypes.POINTER(uchar), ea_t]
    pack_idcobj_to_bv = _libraries['FIXME_STUB'].pack_idcobj_to_bv
    pack_idcobj_to_bv.restype = error_t
    pack_idcobj_to_bv.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_relobj_t), ctypes.POINTER(None), ctypes.c_int32]
    pack_idcobj_to_idb = _libraries['FIXME_STUB'].pack_idcobj_to_idb
    pack_idcobj_to_idb.restype = error_t
    pack_idcobj_to_idb.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_tinfo_t), ea_t, ctypes.c_int32]
    packreal_flag = _libraries['FIXME_STUB'].packreal_flag
    packreal_flag.restype = flags_t
    packreal_flag.argtypes = []
    parse_binpat_str = _libraries['FIXME_STUB'].parse_binpat_str
    parse_binpat_str.restype = ctypes.c_char
    parse_binpat_str.argtypes = [ctypes.POINTER(compiled_binpat_vec_t), ea_t, ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(qstring)]
    parse_command_line = _libraries['FIXME_STUB'].parse_command_line
    parse_command_line.restype = size_t
    parse_command_line.argtypes = [ctypes.POINTER(qstrvec_t), ctypes.POINTER(channel_redirs_t), ctypes.c_char_p, ctypes.c_int32]
    parse_config_value = _libraries['FIXME_STUB'].parse_config_value
    parse_config_value.restype = ctypes.c_char
    parse_config_value.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_lexer_t), ctypes.POINTER(struct_token_t)]
    parse_dbgopts = _libraries['FIXME_STUB'].parse_dbgopts
    parse_dbgopts.restype = ctypes.c_char
    parse_dbgopts.argtypes = [ctypes.POINTER(struct_instant_dbgopts_t), ctypes.c_char_p]
    parse_decl = _libraries['FIXME_STUB'].parse_decl
    parse_decl.restype = ctypes.c_char
    parse_decl.argtypes = [ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(qstring), ctypes.POINTER(struct_til_t), ctypes.c_char_p, ctypes.c_int32]
    parse_decls = _libraries['FIXME_STUB'].parse_decls
    parse_decls.restype = ctypes.c_int32
    parse_decls.argtypes = [ctypes.POINTER(struct_til_t), ctypes.c_char_p, printer_t, ctypes.c_int32]
    parse_json = _libraries['FIXME_STUB'].parse_json
    parse_json.restype = error_t
    parse_json.argtypes = [ctypes.POINTER(struct_jvalue_t), ctypes.POINTER(struct_lexer_t), ctypes.POINTER(tokenstack_t)]
    parse_json_string = _libraries['FIXME_STUB'].parse_json_string
    parse_json_string.restype = error_t
    parse_json_string.argtypes = [ctypes.POINTER(struct_jvalue_t), ctypes.c_char_p]
    parse_reg_name = _libraries['FIXME_STUB'].parse_reg_name
    parse_reg_name.restype = ctypes.c_char
    parse_reg_name.argtypes = [ctypes.POINTER(struct_reg_info_t), ctypes.c_char_p]
    patch_byte = _libraries['FIXME_STUB'].patch_byte
    patch_byte.restype = ctypes.c_char
    patch_byte.argtypes = [ea_t, uint64]
    patch_bytes = _libraries['FIXME_STUB'].patch_bytes
    patch_bytes.restype = None
    patch_bytes.argtypes = [ea_t, ctypes.POINTER(None), size_t]
    patch_dword = _libraries['FIXME_STUB'].patch_dword
    patch_dword.restype = ctypes.c_char
    patch_dword.argtypes = [ea_t, uint64]
    patch_fixup_value = _libraries['FIXME_STUB'].patch_fixup_value
    patch_fixup_value.restype = ctypes.c_char
    patch_fixup_value.argtypes = [ea_t, ctypes.POINTER(struct_fixup_data_t)]
    patch_qword = _libraries['FIXME_STUB'].patch_qword
    patch_qword.restype = ctypes.c_char
    patch_qword.argtypes = [ea_t, uint64]
    patch_word = _libraries['FIXME_STUB'].patch_word
    patch_word.restype = ctypes.c_char
    patch_word.argtypes = [ea_t, uint64]
    peek_auto_queue = _libraries['FIXME_STUB'].peek_auto_queue
    peek_auto_queue.restype = ea_t
    peek_auto_queue.argtypes = [ea_t, atype_t]
    perror = _libraries['FIXME_STUB'].perror
    perror.restype = None
    perror.argtypes = [ctypes.c_char_p]
    ph = (struct_processor_t).in_dll(_libraries['FIXME_STUB'], 'ph') if getattr(_libraries['FIXME_STUB'], 'ph', None) else None
    place_t__deserialize = _libraries['FIXME_STUB'].place_t__deserialize
    place_t__deserialize.restype = ctypes.c_char
    place_t__deserialize.argtypes = [ctypes.POINTER(struct_place_t), ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    place_t__serialize = _libraries['FIXME_STUB'].place_t__serialize
    place_t__serialize.restype = None
    place_t__serialize.argtypes = [ctypes.POINTER(struct_place_t), ctypes.POINTER(struct_bytevec_t)]
    plan_and_wait = _libraries['FIXME_STUB'].plan_and_wait
    plan_and_wait.restype = ctypes.c_int32
    plan_and_wait.argtypes = [ea_t, ea_t, ctypes.c_char]
    plan_ea = _libraries['FIXME_STUB'].plan_ea
    plan_ea.restype = None
    plan_ea.argtypes = [ea_t]
    plan_range = _libraries['FIXME_STUB'].plan_range
    plan_range.restype = None
    plan_range.argtypes = [ea_t, ea_t]
    plan_to_apply_idasgn = _libraries['FIXME_STUB'].plan_to_apply_idasgn
    plan_to_apply_idasgn.restype = ctypes.c_int32
    plan_to_apply_idasgn.argtypes = [ctypes.c_char_p]
    pow = _libraries['FIXME_STUB'].pow
    pow.restype = ctypes.c_double
    pow.argtypes = [ctypes.c_double, ctypes.c_double]
    powf = _libraries['FIXME_STUB'].powf
    powf.restype = ctypes.c_float
    powf.argtypes = [ctypes.c_float, ctypes.c_float]
    powl = _libraries['FIXME_STUB'].powl
    powl.restype = ctypes.c_double
    powl.argtypes = [ctypes.c_double, ctypes.c_double]
    prev_addr = _libraries['FIXME_STUB'].prev_addr
    prev_addr.restype = ea_t
    prev_addr.argtypes = [ea_t]
    prev_chunk = _libraries['FIXME_STUB'].prev_chunk
    prev_chunk.restype = ea_t
    prev_chunk.argtypes = [ea_t]
    prev_head = _libraries['FIXME_STUB'].prev_head
    prev_head.restype = ea_t
    prev_head.argtypes = [ea_t, ea_t]
    prev_idcv_attr = _libraries['FIXME_STUB'].prev_idcv_attr
    prev_idcv_attr.restype = ctypes.c_char_p
    prev_idcv_attr.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p]
    prev_inited = _libraries['FIXME_STUB'].prev_inited
    prev_inited.restype = ea_t
    prev_inited.argtypes = [ea_t, ea_t]
    prev_not_tail = _libraries['FIXME_STUB'].prev_not_tail
    prev_not_tail.restype = ea_t
    prev_not_tail.argtypes = [ea_t]
    prev_that = _libraries['FIXME_STUB'].prev_that
    prev_that.restype = ea_t
    prev_that.argtypes = [ea_t, ea_t, testf_t, ctypes.POINTER(None)]
    prev_unknown = _libraries['FIXME_STUB'].prev_unknown
    prev_unknown.restype = ea_t
    prev_unknown.argtypes = [ea_t, ea_t]
    prev_utf8_char = _libraries['FIXME_STUB'].prev_utf8_char
    prev_utf8_char.restype = ctypes.c_char
    prev_utf8_char.argtypes = [ctypes.POINTER(wchar32_t), ctypes.POINTER(ctypes.c_char_p), ctypes.c_char_p]
    prev_visea = _libraries['FIXME_STUB'].prev_visea
    prev_visea.restype = ea_t
    prev_visea.argtypes = [ea_t]
    print_argloc = _libraries['FIXME_STUB'].print_argloc
    print_argloc.restype = size_t
    print_argloc.argtypes = [ctypes.c_char_p, size_t, ctypes.POINTER(struct_argloc_t), ctypes.c_int32, ctypes.c_int32]
    print_cdata = _libraries['FIXME_STUB'].print_cdata
    print_cdata.restype = ctypes.c_int32
    print_cdata.argtypes = [ctypes.POINTER(struct_text_sink_t), ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_format_data_info_t)]
    print_charlit = _libraries['FIXME_STUB'].print_charlit
    print_charlit.restype = ctypes.c_char
    print_charlit.argtypes = [ctypes.c_char_p, ctypes.POINTER(None), ctypes.c_int32]
    print_decls = _libraries['FIXME_STUB'].print_decls
    print_decls.restype = ctypes.c_int32
    print_decls.argtypes = [ctypes.POINTER(struct_text_sink_t), ctypes.POINTER(struct_til_t), ctypes.POINTER(ordvec_t), uint32]
    print_fpval = _libraries['FIXME_STUB'].print_fpval
    print_fpval.restype = ctypes.c_char
    print_fpval.argtypes = [ctypes.c_char_p, size_t, ctypes.POINTER(None), ctypes.c_int32]
    print_idcv = _libraries['FIXME_STUB'].print_idcv
    print_idcv.restype = ctypes.c_char
    print_idcv.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p, ctypes.c_int32]
    print_insn_mnem = _libraries['FIXME_STUB'].print_insn_mnem
    print_insn_mnem.restype = ctypes.c_char
    print_insn_mnem.argtypes = [ctypes.POINTER(qstring), ea_t]
    print_operand = _libraries['FIXME_STUB'].print_operand
    print_operand.restype = ctypes.c_char
    print_operand.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(struct_printop_t)]
    print_strlit_type = _libraries['FIXME_STUB'].print_strlit_type
    print_strlit_type.restype = ctypes.c_char
    print_strlit_type.argtypes = [ctypes.POINTER(qstring), int32, ctypes.POINTER(qstring), ctypes.c_int32]
    print_tinfo = _libraries['FIXME_STUB'].print_tinfo
    print_tinfo.restype = ctypes.c_char
    print_tinfo.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(struct_tinfo_t), ctypes.c_char_p, ctypes.c_char_p]
    print_type = _libraries['FIXME_STUB'].print_type
    print_type.restype = ctypes.c_char
    print_type.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.c_int32]
    printf = _libraries['FIXME_STUB'].printf
    printf.restype = ctypes.c_int32
    printf.argtypes = [ctypes.c_char_p]
    printf_s = _libraries['FIXME_STUB'].printf_s
    printf_s.restype = ctypes.c_int32
    printf_s.argtypes = [ctypes.c_char_p]
    process_archive = _libraries['FIXME_STUB'].process_archive
    process_archive.restype = ctypes.c_int32
    process_archive.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_linput_t), ctypes.POINTER(qstring), ctypes.POINTER(ushort), ctypes.c_char_p, ctypes.POINTER(struct_load_info_t), ctypes.POINTER(qstring)]
    process_ui_action = _libraries['FIXME_STUB'].process_ui_action
    process_ui_action.restype = ctypes.c_char
    process_ui_action.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.POINTER(None)]
    process_zip_linput = _libraries['FIXME_STUB'].process_zip_linput
    process_zip_linput.restype = ctypes.c_int32
    process_zip_linput.argtypes = [ctypes.POINTER(struct_linput_t), ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), int64, ctypes.c_int32, uint64, uint64, uint32, ctypes.c_char_p), ctypes.POINTER(None)]
    process_zipfile = _libraries['FIXME_STUB'].process_zipfile
    process_zipfile.restype = ctypes.c_int32
    process_zipfile.argtypes = [ctypes.c_char_p, ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), int64, ctypes.c_int32, uint64, uint64, uint32, ctypes.c_char_p), ctypes.POINTER(None)]
    process_zipfile_entry = _libraries['FIXME_STUB'].process_zipfile_entry
    process_zipfile_entry.restype = ctypes.c_int32
    process_zipfile_entry.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None), int64, ctypes.c_int32, uint64, uint64, uint32, ctypes.c_char_p), ctypes.POINTER(None), ctypes.c_char]
    put_byte = _libraries['FIXME_STUB'].put_byte
    put_byte.restype = ctypes.c_char
    put_byte.argtypes = [ea_t, uint64]
    put_bytes = _libraries['FIXME_STUB'].put_bytes
    put_bytes.restype = None
    put_bytes.argtypes = [ea_t, ctypes.POINTER(None), size_t]
    put_dbg_byte = _libraries['FIXME_STUB'].put_dbg_byte
    put_dbg_byte.restype = ctypes.c_char
    put_dbg_byte.argtypes = [ea_t, uint32]
    put_dword = _libraries['FIXME_STUB'].put_dword
    put_dword.restype = None
    put_dword.argtypes = [ea_t, uint64]
    put_qword = _libraries['FIXME_STUB'].put_qword
    put_qword.restype = None
    put_qword.argtypes = [ea_t, uint64]
    put_utf8_char = _libraries['FIXME_STUB'].put_utf8_char
    put_utf8_char.restype = ssize_t
    put_utf8_char.argtypes = [ctypes.c_char_p, wchar32_t]
    put_word = _libraries['FIXME_STUB'].put_word
    put_word.restype = None
    put_word.argtypes = [ea_t, uint64]
    putc = _libraries['FIXME_STUB'].putc
    putc.restype = ctypes.c_int32
    putc.argtypes = [ctypes.c_int32, ctypes.POINTER(FILE)]
    putchar = _libraries['FIXME_STUB'].putchar
    putchar.restype = ctypes.c_int32
    putchar.argtypes = [ctypes.c_int32]
    putenv = _libraries['FIXME_STUB'].putenv
    putenv.restype = ctypes.c_int32
    putenv.argtypes = [ctypes.c_char_p]
    puts = _libraries['FIXME_STUB'].puts
    puts.restype = ctypes.c_int32
    puts.argtypes = [ctypes.c_char_p]
    putw = _libraries['FIXME_STUB'].putw
    putw.restype = ctypes.c_int32
    putw.argtypes = [ctypes.c_int32, ctypes.POINTER(FILE)]
    putwc = _libraries['FIXME_STUB'].putwc
    putwc.restype = wint_t
    putwc.argtypes = [ctypes.c_int16, ctypes.POINTER(FILE)]
    putwchar = _libraries['FIXME_STUB'].putwchar
    putwchar.restype = wint_t
    putwchar.argtypes = [ctypes.c_int16]
    qaccess = _libraries['FIXME_STUB'].qaccess
    qaccess.restype = ctypes.c_int32
    qaccess.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    qalloc = _libraries['FIXME_STUB'].qalloc
    qalloc.restype = ctypes.POINTER(None)
    qalloc.argtypes = [size_t]
    qalloc_or_throw = _libraries['FIXME_STUB'].qalloc_or_throw
    qalloc_or_throw.restype = ctypes.POINTER(None)
    qalloc_or_throw.argtypes = [size_t]
    qatexit = _libraries['FIXME_STUB'].qatexit
    qatexit.restype = None
    qatexit.argtypes = [ctypes.CFUNCTYPE(None)]
    qatoll = _libraries['FIXME_STUB'].qatoll
    qatoll.restype = int64
    qatoll.argtypes = [ctypes.c_char_p]
    qbasename = _libraries['FIXME_STUB'].qbasename
    qbasename.restype = ctypes.c_char_p
    qbasename.argtypes = [ctypes.c_char_p]
    qcalloc = _libraries['FIXME_STUB'].qcalloc
    qcalloc.restype = ctypes.POINTER(None)
    qcalloc.argtypes = [size_t, size_t]
    qchdir = _libraries['FIXME_STUB'].qchdir
    qchdir.restype = ctypes.c_int32
    qchdir.argtypes = [ctypes.c_char_p]
    qchsize = _libraries['FIXME_STUB'].qchsize
    qchsize.restype = ctypes.c_int32
    qchsize.argtypes = [ctypes.c_int32, uint64]
    qcleanline = _libraries['FIXME_STUB'].qcleanline
    qcleanline.restype = ssize_t
    qcleanline.argtypes = [ctypes.POINTER(qstring), ctypes.c_char, uint32]
    qclose = _libraries['FIXME_STUB'].qclose
    qclose.restype = ctypes.c_int32
    qclose.argtypes = [ctypes.c_int32]
    qcontrol_tty = _libraries['FIXME_STUB'].qcontrol_tty
    qcontrol_tty.restype = None
    qcontrol_tty.argtypes = []
    qcopyfile = _libraries['FIXME_STUB'].qcopyfile
    qcopyfile.restype = ctypes.c_int32
    qcopyfile.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char, ctypes.CFUNCTYPE(ctypes.c_char, uint64, uint64, ctypes.POINTER(None)), ctypes.POINTER(None), ctypes.c_int32]
    qcreate = _libraries['FIXME_STUB'].qcreate
    qcreate.restype = ctypes.c_int32
    qcreate.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    qctime = _libraries['FIXME_STUB'].qctime
    qctime.restype = ctypes.c_char
    qctime.argtypes = [ctypes.c_char_p, size_t, qtime32_t]
    qctime_utc = _libraries['FIXME_STUB'].qctime_utc
    qctime_utc.restype = ctypes.c_char
    qctime_utc.argtypes = [ctypes.c_char_p, size_t, qtime32_t]
    qdetach_tty = _libraries['FIXME_STUB'].qdetach_tty
    qdetach_tty.restype = None
    qdetach_tty.argtypes = []
    qdirname = _libraries['FIXME_STUB'].qdirname
    qdirname.restype = ctypes.c_char
    qdirname.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    qdup = _libraries['FIXME_STUB'].qdup
    qdup.restype = ctypes.c_int32
    qdup.argtypes = [ctypes.c_int32]
    qeprintf = _libraries['FIXME_STUB'].qeprintf
    qeprintf.restype = ctypes.c_int32
    qeprintf.argtypes = [ctypes.c_char_p]
    qerrcode = _libraries['FIXME_STUB'].qerrcode
    qerrcode.restype = ctypes.c_int32
    qerrcode.argtypes = [ctypes.c_int32]
    qerrstr = _libraries['FIXME_STUB'].qerrstr
    qerrstr.restype = ctypes.c_char_p
    qerrstr.argtypes = [ctypes.c_int32]
    qexit = _libraries['FIXME_STUB'].qexit
    qexit.restype = None
    qexit.argtypes = [ctypes.c_int32]
    qfclose = _libraries['FIXME_STUB'].qfclose
    qfclose.restype = ctypes.c_int32
    qfclose.argtypes = [ctypes.POINTER(FILE)]
    qfgetc = _libraries['FIXME_STUB'].qfgetc
    qfgetc.restype = ctypes.c_int32
    qfgetc.argtypes = [ctypes.POINTER(FILE)]
    qfgets = _libraries['FIXME_STUB'].qfgets
    qfgets.restype = ctypes.c_char_p
    qfgets.argtypes = [ctypes.c_char_p, size_t, ctypes.POINTER(FILE)]
    qfileexist = _libraries['FIXME_STUB'].qfileexist
    qfileexist.restype = ctypes.c_char
    qfileexist.argtypes = [ctypes.c_char_p]
    qfilelength = _libraries['FIXME_STUB'].qfilelength
    qfilelength.restype = uint64
    qfilelength.argtypes = [ctypes.c_int32]
    qfilesize = _libraries['FIXME_STUB'].qfilesize
    qfilesize.restype = uint64
    qfilesize.argtypes = [ctypes.c_char_p]
    qfindclose = _libraries['FIXME_STUB'].qfindclose
    qfindclose.restype = None
    qfindclose.argtypes = [ctypes.POINTER(struct_qffblk64_t)]
    qfindfirst = _libraries['FIXME_STUB'].qfindfirst
    qfindfirst.restype = ctypes.c_int32
    qfindfirst.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_qffblk64_t), ctypes.c_int32]
    qfindnext = _libraries['FIXME_STUB'].qfindnext
    qfindnext.restype = ctypes.c_int32
    qfindnext.argtypes = [ctypes.POINTER(struct_qffblk64_t)]
    qflush = _libraries['FIXME_STUB'].qflush
    qflush.restype = ctypes.c_int32
    qflush.argtypes = [ctypes.POINTER(FILE)]
    qfopen = _libraries['FIXME_STUB'].qfopen
    qfopen.restype = ctypes.POINTER(FILE)
    qfopen.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    qfprintf = _libraries['FIXME_STUB'].qfprintf
    qfprintf.restype = ctypes.c_int32
    qfprintf.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p]
    qfputc = _libraries['FIXME_STUB'].qfputc
    qfputc.restype = ctypes.c_int32
    qfputc.argtypes = [ctypes.c_int32, ctypes.POINTER(FILE)]
    qfputs = _libraries['FIXME_STUB'].qfputs
    qfputs.restype = ctypes.c_int32
    qfputs.argtypes = [ctypes.c_char_p, ctypes.POINTER(FILE)]
    qfread = _libraries['FIXME_STUB'].qfread
    qfread.restype = ssize_t
    qfread.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(None), size_t]
    qfree = _libraries['FIXME_STUB'].qfree
    qfree.restype = None
    qfree.argtypes = [ctypes.POINTER(None)]
    qfscanf = _libraries['FIXME_STUB'].qfscanf
    qfscanf.restype = ctypes.c_int32
    qfscanf.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p]
    qfseek = _libraries['FIXME_STUB'].qfseek
    qfseek.restype = ctypes.c_int32
    qfseek.argtypes = [ctypes.POINTER(FILE), int64, ctypes.c_int32]
    qfsize = _libraries['FIXME_STUB'].qfsize
    qfsize.restype = uint64
    qfsize.argtypes = [ctypes.POINTER(FILE)]
    qfstat = _libraries['FIXME_STUB'].qfstat
    qfstat.restype = ctypes.c_int32
    qfstat.argtypes = [ctypes.c_int32, ctypes.POINTER(struct_qstatbuf)]
    qfsync = _libraries['FIXME_STUB'].qfsync
    qfsync.restype = ctypes.c_int32
    qfsync.argtypes = [ctypes.c_int32]
    qftell = _libraries['FIXME_STUB'].qftell
    qftell.restype = int64
    qftell.argtypes = [ctypes.POINTER(FILE)]
    qfwrite = _libraries['FIXME_STUB'].qfwrite
    qfwrite.restype = ssize_t
    qfwrite.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(None), size_t]
    qgetcwd = _libraries['FIXME_STUB'].qgetcwd
    qgetcwd.restype = None
    qgetcwd.argtypes = [ctypes.c_char_p, size_t]
    qgetenv = _libraries['FIXME_STUB'].qgetenv
    qgetenv.restype = ctypes.c_char
    qgetenv.argtypes = [ctypes.c_char_p, ctypes.POINTER(qstring)]
    qgetline = _libraries['FIXME_STUB'].qgetline
    qgetline.restype = ssize_t
    qgetline.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(FILE)]
    qgets = _libraries['FIXME_STUB'].qgets
    qgets.restype = ctypes.c_char_p
    qgets.argtypes = [ctypes.c_char_p, size_t]
    qgmtime = _libraries['FIXME_STUB'].qgmtime
    qgmtime.restype = ctypes.c_char
    qgmtime.argtypes = [ctypes.POINTER(struct_tm), qtime32_t]
    qgmtime64 = _libraries['FIXME_STUB'].qgmtime64
    qgmtime64.restype = ctypes.c_char
    qgmtime64.argtypes = [ctypes.POINTER(struct_tm), qtime64_t]
    qisabspath = _libraries['FIXME_STUB'].qisabspath
    qisabspath.restype = ctypes.c_char
    qisabspath.argtypes = [ctypes.c_char_p]
    qisalnum = _libraries['FIXME_STUB'].qisalnum
    qisalnum.restype = ctypes.c_char
    qisalnum.argtypes = [ctypes.c_char]
    qisalpha = _libraries['FIXME_STUB'].qisalpha
    qisalpha.restype = ctypes.c_char
    qisalpha.argtypes = [ctypes.c_char]
    qisascii = _libraries['FIXME_STUB'].qisascii
    qisascii.restype = ctypes.c_char
    qisascii.argtypes = [ctypes.c_char]
    qisdigit = _libraries['FIXME_STUB'].qisdigit
    qisdigit.restype = ctypes.c_char
    qisdigit.argtypes = [ctypes.c_char]
    qisdir = _libraries['FIXME_STUB'].qisdir
    qisdir.restype = ctypes.c_char
    qisdir.argtypes = [ctypes.c_char_p]
    qislower = _libraries['FIXME_STUB'].qislower
    qislower.restype = ctypes.c_char
    qislower.argtypes = [ctypes.c_char]
    qisprint = _libraries['FIXME_STUB'].qisprint
    qisprint.restype = ctypes.c_char
    qisprint.argtypes = [ctypes.c_char]
    qispunct = _libraries['FIXME_STUB'].qispunct
    qispunct.restype = ctypes.c_char
    qispunct.argtypes = [ctypes.c_char]
    qisspace = _libraries['FIXME_STUB'].qisspace
    qisspace.restype = ctypes.c_char
    qisspace.argtypes = [ctypes.c_char]
    qisupper = _libraries['FIXME_STUB'].qisupper
    qisupper.restype = ctypes.c_char
    qisupper.argtypes = [ctypes.c_char]
    qisxdigit = _libraries['FIXME_STUB'].qisxdigit
    qisxdigit.restype = ctypes.c_char
    qisxdigit.argtypes = [ctypes.c_char]
    qlfile = _libraries['FIXME_STUB'].qlfile
    qlfile.restype = ctypes.POINTER(FILE)
    qlfile.argtypes = [ctypes.POINTER(struct_linput_t)]
    qlgetc = _libraries['FIXME_STUB'].qlgetc
    qlgetc.restype = ctypes.c_int32
    qlgetc.argtypes = [ctypes.POINTER(struct_linput_t)]
    qlgets = _libraries['FIXME_STUB'].qlgets
    qlgets.restype = ctypes.c_char_p
    qlgets.argtypes = [ctypes.c_char_p, size_t, ctypes.POINTER(struct_linput_t)]
    qlgetz = _libraries['FIXME_STUB'].qlgetz
    qlgetz.restype = ctypes.c_char_p
    qlgetz.argtypes = [ctypes.POINTER(struct_linput_t), int64, ctypes.c_char_p, size_t]
    qlocaltime = _libraries['FIXME_STUB'].qlocaltime
    qlocaltime.restype = ctypes.c_char
    qlocaltime.argtypes = [ctypes.POINTER(struct_tm), qtime32_t]
    qlocaltime64 = _libraries['FIXME_STUB'].qlocaltime64
    qlocaltime64.restype = ctypes.c_char
    qlocaltime64.argtypes = [ctypes.POINTER(struct_tm), qtime64_t]
    qlread = _libraries['FIXME_STUB'].qlread
    qlread.restype = ssize_t
    qlread.argtypes = [ctypes.POINTER(struct_linput_t), ctypes.POINTER(None), size_t]
    qlseek = _libraries['FIXME_STUB'].qlseek
    qlseek.restype = int64
    qlseek.argtypes = [ctypes.POINTER(struct_linput_t), int64, ctypes.c_int32]
    qlsize = _libraries['FIXME_STUB'].qlsize
    qlsize.restype = int64
    qlsize.argtypes = [ctypes.POINTER(struct_linput_t)]
    qltell = _libraries['FIXME_STUB'].qltell
    qltell.restype = int64
    qltell.argtypes = [ctypes.POINTER(struct_linput_t)]
    qmake_full_path = _libraries['FIXME_STUB'].qmake_full_path
    qmake_full_path.restype = ctypes.c_char_p
    qmake_full_path.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    qmakefile = _libraries['FIXME_STUB'].qmakefile
    qmakefile.restype = ctypes.c_char_p
    qmakefile.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, ctypes.c_char_p]
    qmakepath = _libraries['FIXME_STUB'].qmakepath
    qmakepath.restype = ctypes.c_char_p
    qmakepath.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    qmkdir = _libraries['FIXME_STUB'].qmkdir
    qmkdir.restype = ctypes.c_int32
    qmkdir.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    qmove = _libraries['FIXME_STUB'].qmove
    qmove.restype = ctypes.c_int32
    qmove.argtypes = [ctypes.c_char_p, ctypes.c_char_p, uint32]
    qmutex_create = _libraries['FIXME_STUB'].qmutex_create
    qmutex_create.restype = qmutex_t
    qmutex_create.argtypes = []
    qmutex_free = _libraries['FIXME_STUB'].qmutex_free
    qmutex_free.restype = ctypes.c_char
    qmutex_free.argtypes = [qmutex_t]
    qmutex_lock = _libraries['FIXME_STUB'].qmutex_lock
    qmutex_lock.restype = ctypes.c_char
    qmutex_lock.argtypes = [qmutex_t]
    qmutex_unlock = _libraries['FIXME_STUB'].qmutex_unlock
    qmutex_unlock.restype = ctypes.c_char
    qmutex_unlock.argtypes = [qmutex_t]
    qopen = _libraries['FIXME_STUB'].qopen
    qopen.restype = ctypes.c_int32
    qopen.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    qopen_shared = _libraries['FIXME_STUB'].qopen_shared
    qopen_shared.restype = ctypes.c_int32
    qopen_shared.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32]
    qperror = _libraries['FIXME_STUB'].qperror
    qperror.restype = None
    qperror.argtypes = [ctypes.c_char_p]
    qpipe_close = _libraries['FIXME_STUB'].qpipe_close
    qpipe_close.restype = ctypes.c_int32
    qpipe_close.argtypes = [qhandle_t]
    qpipe_create = _libraries['FIXME_STUB'].qpipe_create
    qpipe_create.restype = ctypes.c_int32
    qpipe_create.argtypes = [ctypes.POINTER(None) * 2]
    qpipe_read = _libraries['FIXME_STUB'].qpipe_read
    qpipe_read.restype = ssize_t
    qpipe_read.argtypes = [qhandle_t, ctypes.POINTER(None), size_t]
    qpipe_write = _libraries['FIXME_STUB'].qpipe_write
    qpipe_write.restype = ssize_t
    qpipe_write.argtypes = [qhandle_t, ctypes.POINTER(None), size_t]
    qprintf = _libraries['FIXME_STUB'].qprintf
    qprintf.restype = ctypes.c_int32
    qprintf.argtypes = [ctypes.c_char_p]
    qread = _libraries['FIXME_STUB'].qread
    qread.restype = ctypes.c_int32
    qread.argtypes = [ctypes.c_int32, ctypes.POINTER(None), size_t]
    qrealloc = _libraries['FIXME_STUB'].qrealloc
    qrealloc.restype = ctypes.POINTER(None)
    qrealloc.argtypes = [ctypes.POINTER(None), size_t]
    qrealloc_or_throw = _libraries['FIXME_STUB'].qrealloc_or_throw
    qrealloc_or_throw.restype = ctypes.POINTER(None)
    qrealloc_or_throw.argtypes = [ctypes.POINTER(None), size_t]
    qregcomp = _libraries['FIXME_STUB'].qregcomp
    qregcomp.restype = ctypes.c_int32
    qregcomp.argtypes = [ctypes.POINTER(struct_regex_t), ctypes.c_char_p, ctypes.c_int32]
    qregerror = _libraries['FIXME_STUB'].qregerror
    qregerror.restype = size_t
    qregerror.argtypes = [ctypes.c_int32, ctypes.POINTER(struct_regex_t), ctypes.c_char_p, size_t]
    qregexec = _libraries['FIXME_STUB'].qregexec
    qregexec.restype = ctypes.c_int32
    qregexec.argtypes = [ctypes.POINTER(struct_regex_t), ctypes.c_char_p, size_t, struct_regmatch_t * 0, ctypes.c_int32]
    qregfree = _libraries['FIXME_STUB'].qregfree
    qregfree.restype = None
    qregfree.argtypes = [ctypes.POINTER(struct_regex_t)]
    qrename = _libraries['FIXME_STUB'].qrename
    qrename.restype = ctypes.c_int32
    qrename.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    qrmdir = _libraries['FIXME_STUB'].qrmdir
    qrmdir.restype = ctypes.c_int32
    qrmdir.argtypes = [ctypes.c_char_p]
    qseek = _libraries['FIXME_STUB'].qseek
    qseek.restype = int64
    qseek.argtypes = [ctypes.c_int32, int64, ctypes.c_int32]
    qsem_create = _libraries['FIXME_STUB'].qsem_create
    qsem_create.restype = qsemaphore_t
    qsem_create.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    qsem_free = _libraries['FIXME_STUB'].qsem_free
    qsem_free.restype = ctypes.c_char
    qsem_free.argtypes = [qsemaphore_t]
    qsem_post = _libraries['FIXME_STUB'].qsem_post
    qsem_post.restype = ctypes.c_char
    qsem_post.argtypes = [qsemaphore_t]
    qsem_wait = _libraries['FIXME_STUB'].qsem_wait
    qsem_wait.restype = ctypes.c_char
    qsem_wait.argtypes = [qsemaphore_t, ctypes.c_int32]
    qsetenv = _libraries['FIXME_STUB'].qsetenv
    qsetenv.restype = ctypes.c_char
    qsetenv.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    qsleep = _libraries['FIXME_STUB'].qsleep
    qsleep.restype = None
    qsleep.argtypes = [ctypes.c_int32]
    qsnprintf = _libraries['FIXME_STUB'].qsnprintf
    qsnprintf.restype = ctypes.c_int32
    qsnprintf.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    qsort = _libraries['FIXME_STUB'].qsort
    qsort.restype = None
    qsort.argtypes = [ctypes.POINTER(None), size_t, size_t, _CoreCrtNonSecureSearchSortCompareFunction]
    qsort_s = _libraries['FIXME_STUB'].qsort_s
    qsort_s.restype = None
    qsort_s.argtypes = [ctypes.POINTER(None), rsize_t, rsize_t, _CoreCrtSecureSearchSortCompareFunction, ctypes.POINTER(None)]
    qsplitfile = _libraries['FIXME_STUB'].qsplitfile
    qsplitfile.restype = ctypes.c_char_p
    qsplitfile.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.POINTER(ctypes.c_char_p)]
    qsscanf = _libraries['FIXME_STUB'].qsscanf
    qsscanf.restype = ctypes.c_int32
    qsscanf.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    qstat = _libraries['FIXME_STUB'].qstat
    qstat.restype = ctypes.c_int32
    qstat.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_qstatbuf)]
    qstpncpy = _libraries['FIXME_STUB'].qstpncpy
    qstpncpy.restype = ctypes.c_char_p
    qstpncpy.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    qstr2user = _libraries['FIXME_STUB'].qstr2user
    qstr2user.restype = None
    qstr2user.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(qstring)]
    qstrchr = _libraries['FIXME_STUB'].qstrchr
    qstrchr.restype = ctypes.POINTER(wchar16_t)
    qstrchr.argtypes = [ctypes.POINTER(wchar16_t), wchar16_t]
    qstrcmp = _libraries['FIXME_STUB'].qstrcmp
    qstrcmp.restype = ctypes.c_int32
    qstrcmp.argtypes = [ctypes.POINTER(wchar16_t), ctypes.POINTER(wchar16_t)]
    qstrdup = _libraries['FIXME_STUB'].qstrdup
    qstrdup.restype = ctypes.c_char_p
    qstrdup.argtypes = [ctypes.c_char_p]
    qstrerror = _libraries['FIXME_STUB'].qstrerror
    qstrerror.restype = ctypes.c_char_p
    qstrerror.argtypes = [error_t]
    qstrftime = _libraries['FIXME_STUB'].qstrftime
    qstrftime.restype = size_t
    qstrftime.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, qtime32_t]
    qstrftime64 = _libraries['FIXME_STUB'].qstrftime64
    qstrftime64.restype = size_t
    qstrftime64.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, qtime64_t]
    qstrlen = _libraries['FIXME_STUB'].qstrlen
    qstrlen.restype = size_t
    qstrlen.argtypes = [ctypes.POINTER(wchar16_t)]
    qstrlwr = _libraries['FIXME_STUB'].qstrlwr
    qstrlwr.restype = ctypes.c_char_p
    qstrlwr.argtypes = [ctypes.c_char_p]
    qstrncat = _libraries['FIXME_STUB'].qstrncat
    qstrncat.restype = ctypes.c_char_p
    qstrncat.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    qstrncpy = _libraries['FIXME_STUB'].qstrncpy
    qstrncpy.restype = ctypes.c_char_p
    qstrncpy.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    qstrrchr = _libraries['FIXME_STUB'].qstrrchr
    qstrrchr.restype = ctypes.POINTER(wchar16_t)
    qstrrchr.argtypes = [ctypes.POINTER(wchar16_t), wchar16_t]
    qstrstr = _libraries['FIXME_STUB'].qstrstr
    qstrstr.restype = ctypes.POINTER(uchar)
    qstrstr.argtypes = [ctypes.POINTER(uchar), ctypes.POINTER(uchar)]
    qstrtok = _libraries['FIXME_STUB'].qstrtok
    qstrtok.restype = ctypes.c_char_p
    qstrtok.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p)]
    qstrupr = _libraries['FIXME_STUB'].qstrupr
    qstrupr.restype = ctypes.c_char_p
    qstrupr.argtypes = [ctypes.c_char_p]
    qtell = _libraries['FIXME_STUB'].qtell
    qtell.restype = int64
    qtell.argtypes = [ctypes.c_int32]
    qthread_create = _libraries['FIXME_STUB'].qthread_create
    qthread_create.restype = qthread_t
    qthread_create.argtypes = [qthread_cb_t, ctypes.POINTER(None)]
    qthread_equal = _libraries['FIXME_STUB'].qthread_equal
    qthread_equal.restype = ctypes.c_char
    qthread_equal.argtypes = [qthread_t, qthread_t]
    qthread_free = _libraries['FIXME_STUB'].qthread_free
    qthread_free.restype = None
    qthread_free.argtypes = [qthread_t]
    qthread_join = _libraries['FIXME_STUB'].qthread_join
    qthread_join.restype = ctypes.c_char
    qthread_join.argtypes = [qthread_t]
    qthread_kill = _libraries['FIXME_STUB'].qthread_kill
    qthread_kill.restype = ctypes.c_char
    qthread_kill.argtypes = [qthread_t]
    qthread_same = _libraries['FIXME_STUB'].qthread_same
    qthread_same.restype = ctypes.c_char
    qthread_same.argtypes = [qthread_t]
    qthread_self = _libraries['FIXME_STUB'].qthread_self
    qthread_self.restype = qthread_t
    qthread_self.argtypes = []
    qtime64 = _libraries['FIXME_STUB'].qtime64
    qtime64.restype = qtime64_t
    qtime64.argtypes = []
    qtimegm = _libraries['FIXME_STUB'].qtimegm
    qtimegm.restype = qtime32_t
    qtimegm.argtypes = [ctypes.POINTER(struct_tm)]
    qtmpfile = _libraries['FIXME_STUB'].qtmpfile
    qtmpfile.restype = ctypes.POINTER(FILE)
    qtmpfile.argtypes = []
    qtmpnam = _libraries['FIXME_STUB'].qtmpnam
    qtmpnam.restype = ctypes.c_char_p
    qtmpnam.argtypes = [ctypes.c_char_p, size_t]
    qtolower = _libraries['FIXME_STUB'].qtolower
    qtolower.restype = ctypes.c_int32
    qtolower.argtypes = [ctypes.c_char]
    qtoupper = _libraries['FIXME_STUB'].qtoupper
    qtoupper.restype = ctypes.c_int32
    qtoupper.argtypes = [ctypes.c_char]
    quick_exit = _libraries['FIXME_STUB'].quick_exit
    quick_exit.restype = None
    quick_exit.argtypes = [ctypes.c_int32]
    qunlink = _libraries['FIXME_STUB'].qunlink
    qunlink.restype = ctypes.c_int32
    qunlink.argtypes = [ctypes.c_char_p]
    quote_cmdline_arg = _libraries['FIXME_STUB'].quote_cmdline_arg
    quote_cmdline_arg.restype = ctypes.c_char
    quote_cmdline_arg.argtypes = [ctypes.POINTER(qstring)]
    qustrlen = _libraries['FIXME_STUB'].qustrlen
    qustrlen.restype = size_t
    qustrlen.argtypes = [ctypes.c_char_p]
    qustrncpy = _libraries['FIXME_STUB'].qustrncpy
    qustrncpy.restype = ctypes.c_char
    qustrncpy.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    qvector_reserve = _libraries['FIXME_STUB'].qvector_reserve
    qvector_reserve.restype = ctypes.POINTER(None)
    qvector_reserve.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), size_t, size_t]
    qveprintf = _libraries['FIXME_STUB'].qveprintf
    qveprintf.restype = ctypes.c_int32
    qveprintf.argtypes = [ctypes.c_char_p, va_list]
    qvfprintf = _libraries['FIXME_STUB'].qvfprintf
    qvfprintf.restype = ctypes.c_int32
    qvfprintf.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, va_list]
    qvfscanf = _libraries['FIXME_STUB'].qvfscanf
    qvfscanf.restype = ctypes.c_int32
    qvfscanf.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, va_list]
    qvprintf = _libraries['FIXME_STUB'].qvprintf
    qvprintf.restype = ctypes.c_int32
    qvprintf.argtypes = [ctypes.c_char_p, va_list]
    qvsnprintf = _libraries['FIXME_STUB'].qvsnprintf
    qvsnprintf.restype = ctypes.c_int32
    qvsnprintf.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, va_list]
    qvsscanf = _libraries['FIXME_STUB'].qvsscanf
    qvsscanf.restype = ctypes.c_int32
    qvsscanf.argtypes = [ctypes.c_char_p, ctypes.c_char_p, va_list]
    qwait_for_handles = _libraries['FIXME_STUB'].qwait_for_handles
    qwait_for_handles.restype = ctypes.c_int32
    qwait_for_handles.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(qhandle_t), ctypes.c_int32, uint32, ctypes.c_int32]
    qwait_timed = _libraries['FIXME_STUB'].qwait_timed
    qwait_timed.restype = ctypes.c_int32
    qwait_timed.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
    qword_flag = _libraries['FIXME_STUB'].qword_flag
    qword_flag.restype = flags_t
    qword_flag.argtypes = []
    qwrite = _libraries['FIXME_STUB'].qwrite
    qwrite.restype = ctypes.c_int32
    qwrite.argtypes = [ctypes.c_int32, ctypes.POINTER(None), size_t]
    r50_to_asc = _libraries['FIXME_STUB'].r50_to_asc
    r50_to_asc.restype = ctypes.c_int32
    r50_to_asc.argtypes = [ctypes.c_char_p, ctypes.POINTER(ushort), ctypes.c_int32]
    rand = _libraries['FIXME_STUB'].rand
    rand.restype = ctypes.c_int32
    rand.argtypes = []
    range_marker = (ctypes.CFUNCTYPE(None, ctypes.c_uint64, ctypes.c_uint64)).in_dll(_libraries['FIXME_STUB'], 'range_marker') if getattr(_libraries['FIXME_STUB'], 'range_marker', None) else None
    range_t_print = _libraries['FIXME_STUB'].range_t_print
    range_t_print.restype = size_t
    range_t_print.argtypes = [ctypes.POINTER(struct_range_t), ctypes.c_char_p, size_t]
    rangeset_t_add = _libraries['FIXME_STUB'].rangeset_t_add
    rangeset_t_add.restype = ctypes.c_char
    rangeset_t_add.argtypes = [ctypes.POINTER(struct_rangeset_t), ctypes.POINTER(struct_range_t)]
    rangeset_t_add2 = _libraries['FIXME_STUB'].rangeset_t_add2
    rangeset_t_add2.restype = ctypes.c_char
    rangeset_t_add2.argtypes = [ctypes.POINTER(struct_rangeset_t), ctypes.POINTER(struct_rangeset_t)]
    rangeset_t_contains = _libraries['FIXME_STUB'].rangeset_t_contains
    rangeset_t_contains.restype = ctypes.c_char
    rangeset_t_contains.argtypes = [ctypes.POINTER(struct_rangeset_t), ctypes.POINTER(struct_rangeset_t)]
    rangeset_t_find_range = _libraries['FIXME_STUB'].rangeset_t_find_range
    rangeset_t_find_range.restype = ctypes.POINTER(struct_range_t)
    rangeset_t_find_range.argtypes = [ctypes.POINTER(struct_rangeset_t), ea_t]
    rangeset_t_has_common = _libraries['FIXME_STUB'].rangeset_t_has_common
    rangeset_t_has_common.restype = ctypes.c_char
    rangeset_t_has_common.argtypes = [ctypes.POINTER(struct_rangeset_t), ctypes.POINTER(struct_range_t), ctypes.c_char]
    rangeset_t_has_common2 = _libraries['FIXME_STUB'].rangeset_t_has_common2
    rangeset_t_has_common2.restype = ctypes.c_char
    rangeset_t_has_common2.argtypes = [ctypes.POINTER(struct_rangeset_t), ctypes.POINTER(struct_rangeset_t)]
    rangeset_t_intersect = _libraries['FIXME_STUB'].rangeset_t_intersect
    rangeset_t_intersect.restype = ctypes.c_char
    rangeset_t_intersect.argtypes = [ctypes.POINTER(struct_rangeset_t), ctypes.POINTER(struct_rangeset_t)]
    rangeset_t_lower_bound = _libraries['FIXME_STUB'].rangeset_t_lower_bound
    rangeset_t_lower_bound.restype = qvector_range_t___const_iterator
    rangeset_t_lower_bound.argtypes = [ctypes.POINTER(struct_rangeset_t), ea_t]
    rangeset_t_next_addr = _libraries['FIXME_STUB'].rangeset_t_next_addr
    rangeset_t_next_addr.restype = ea_t
    rangeset_t_next_addr.argtypes = [ctypes.POINTER(struct_rangeset_t), ea_t]
    rangeset_t_next_range = _libraries['FIXME_STUB'].rangeset_t_next_range
    rangeset_t_next_range.restype = ea_t
    rangeset_t_next_range.argtypes = [ctypes.POINTER(struct_rangeset_t), ea_t]
    rangeset_t_prev_addr = _libraries['FIXME_STUB'].rangeset_t_prev_addr
    rangeset_t_prev_addr.restype = ea_t
    rangeset_t_prev_addr.argtypes = [ctypes.POINTER(struct_rangeset_t), ea_t]
    rangeset_t_prev_range = _libraries['FIXME_STUB'].rangeset_t_prev_range
    rangeset_t_prev_range.restype = ea_t
    rangeset_t_prev_range.argtypes = [ctypes.POINTER(struct_rangeset_t), ea_t]
    rangeset_t_print = _libraries['FIXME_STUB'].rangeset_t_print
    rangeset_t_print.restype = size_t
    rangeset_t_print.argtypes = [ctypes.POINTER(struct_rangeset_t), ctypes.c_char_p, size_t]
    rangeset_t_sub = _libraries['FIXME_STUB'].rangeset_t_sub
    rangeset_t_sub.restype = ctypes.c_char
    rangeset_t_sub.argtypes = [ctypes.POINTER(struct_rangeset_t), ctypes.POINTER(struct_range_t)]
    rangeset_t_sub2 = _libraries['FIXME_STUB'].rangeset_t_sub2
    rangeset_t_sub2.restype = ctypes.c_char
    rangeset_t_sub2.argtypes = [ctypes.POINTER(struct_rangeset_t), ctypes.POINTER(struct_rangeset_t)]
    rangeset_t_swap = _libraries['FIXME_STUB'].rangeset_t_swap
    rangeset_t_swap.restype = None
    rangeset_t_swap.argtypes = [ctypes.POINTER(struct_rangeset_t), ctypes.POINTER(struct_rangeset_t)]
    rangeset_t_upper_bound = _libraries['FIXME_STUB'].rangeset_t_upper_bound
    rangeset_t_upper_bound.restype = qvector_range_t___const_iterator
    rangeset_t_upper_bound.argtypes = [ctypes.POINTER(struct_rangeset_t), ea_t]
    read = _libraries['FIXME_STUB'].read
    read.restype = ctypes.c_int32
    read.argtypes = [ctypes.c_int32, ctypes.POINTER(None), ctypes.c_uint32]
    read2bytes = _libraries['FIXME_STUB'].read2bytes
    read2bytes.restype = ctypes.c_int32
    read2bytes.argtypes = [ctypes.c_int32, ctypes.POINTER(uint16), ctypes.c_char]
    read_config = _libraries['FIXME_STUB'].read_config
    read_config.restype = ctypes.c_char
    read_config.argtypes = [ctypes.c_char_p, ctypes.c_char, struct_cfgopt_t * 0, size_t, cfgopt_handler_t, ctypes.POINTER(ctypes.c_char_p), size_t]
    read_config2 = _libraries['FIXME_STUB'].read_config2
    read_config2.restype = ctypes.c_char
    read_config2.argtypes = [ctypes.c_char_p, ctypes.c_char, struct_cfgopt_t * 0, size_t, cfgopt_handler_t, ctypes.POINTER(ctypes.c_char_p), size_t, ctypes.POINTER(None)]
    read_config_file = _libraries['FIXME_STUB'].read_config_file
    read_config_file.restype = ctypes.c_char
    read_config_file.argtypes = [ctypes.c_char_p, struct_cfgopt_t * 0, size_t, cfgopt_handler_t, ctypes.POINTER(ctypes.c_char_p), size_t]
    read_config_file2 = _libraries['FIXME_STUB'].read_config_file2
    read_config_file2.restype = ctypes.c_char
    read_config_file2.argtypes = [ctypes.c_char_p, struct_cfgopt_t * 0, size_t, cfgopt_handler_t, ctypes.POINTER(ctypes.c_char_p), size_t, ctypes.POINTER(None)]
    read_config_string = _libraries['FIXME_STUB'].read_config_string
    read_config_string.restype = ctypes.c_char
    read_config_string.argtypes = [ctypes.c_char_p, struct_cfgopt_t * 0, size_t, cfgopt_handler_t, ctypes.POINTER(ctypes.c_char_p), size_t]
    read_dbg_memory = _libraries['FIXME_STUB'].read_dbg_memory
    read_dbg_memory.restype = ssize_t
    read_dbg_memory.argtypes = [ea_t, ctypes.POINTER(None), size_t]
    read_ioports = _libraries['FIXME_STUB'].read_ioports
    read_ioports.restype = ssize_t
    read_ioports.argtypes = [ctypes.POINTER(ioports_t), ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.CFUNCTYPE(ctypes.c_char_p, ctypes.POINTER(ioports_t), ctypes.c_char_p)]
    read_ioports2 = _libraries['FIXME_STUB'].read_ioports2
    read_ioports2.restype = ssize_t
    read_ioports2.argtypes = [ctypes.POINTER(ioports_t), ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.POINTER(struct_ioports_fallback_t)]
    read_range_selection = _libraries['FIXME_STUB'].read_range_selection
    read_range_selection.restype = ctypes.c_char
    read_range_selection.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.POINTER(ea_t), ctypes.POINTER(ea_t)]
    read_regargs = _libraries['FIXME_STUB'].read_regargs
    read_regargs.restype = None
    read_regargs.argtypes = [ctypes.POINTER(struct_func_t)]
    read_selection = _libraries['FIXME_STUB'].read_selection
    read_selection.restype = ctypes.c_char
    read_selection.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_twinpos_t), ctypes.POINTER(struct_twinpos_t)]
    read_struc_path = _libraries['FIXME_STUB'].read_struc_path
    read_struc_path.restype = ctypes.c_int32
    read_struc_path.argtypes = [ctypes.POINTER(tid_t), ctypes.POINTER(adiff_t), ea_t, ctypes.c_int32]
    read_tinfo_bitfield_value = _libraries['FIXME_STUB'].read_tinfo_bitfield_value
    read_tinfo_bitfield_value.restype = uint64
    read_tinfo_bitfield_value.argtypes = [uint32, uint64, ctypes.c_int32]
    readbytes = _libraries['FIXME_STUB'].readbytes
    readbytes.restype = ctypes.c_int32
    readbytes.argtypes = [ctypes.c_int32, ctypes.POINTER(uint32), ctypes.c_int32, ctypes.c_char]
    realcvt = _libraries['FIXME_STUB'].realcvt
    realcvt.restype = fpvalue_error_t
    realcvt.argtypes = [ctypes.POINTER(None), ctypes.POINTER(struct_fpvalue_t), uint16]
    realloc = _libraries['FIXME_STUB'].realloc
    realloc.restype = ctypes.POINTER(None)
    realloc.argtypes = [ctypes.POINTER(None), size_t]
    realtoasc = _libraries['FIXME_STUB'].realtoasc
    realtoasc.restype = None
    realtoasc.argtypes = [ctypes.c_char_p, size_t, ctypes.POINTER(struct_fpvalue_t), uint]
    reanalyze_callers = _libraries['FIXME_STUB'].reanalyze_callers
    reanalyze_callers.restype = None
    reanalyze_callers.argtypes = [ea_t, ctypes.c_char]
    reanalyze_function = _libraries['FIXME_STUB'].reanalyze_function
    reanalyze_function.restype = None
    reanalyze_function.argtypes = [ctypes.POINTER(struct_func_t), ea_t, ea_t, ctypes.c_char]
    reanalyze_noret_flag = _libraries['FIXME_STUB'].reanalyze_noret_flag
    reanalyze_noret_flag.restype = ctypes.c_char
    reanalyze_noret_flag.argtypes = [ea_t]
    rebase_program = _libraries['FIXME_STUB'].rebase_program
    rebase_program.restype = ctypes.c_int32
    rebase_program.argtypes = [adiff_t, ctypes.c_int32]
    rebuild_nlist = _libraries['FIXME_STUB'].rebuild_nlist
    rebuild_nlist.restype = None
    rebuild_nlist.argtypes = []
    recalc_spd = _libraries['FIXME_STUB'].recalc_spd
    recalc_spd.restype = ctypes.c_char
    recalc_spd.argtypes = [ea_t]
    refresh_chooser = _libraries['FIXME_STUB'].refresh_chooser
    refresh_chooser.restype = ctypes.c_char
    refresh_chooser.argtypes = [ctypes.c_char_p]
    refresh_custom_viewer = _libraries['FIXME_STUB'].refresh_custom_viewer
    refresh_custom_viewer.restype = None
    refresh_custom_viewer.argtypes = [ctypes.POINTER(struct_TWidget)]
    refresh_idaview = _libraries['FIXME_STUB'].refresh_idaview
    refresh_idaview.restype = None
    refresh_idaview.argtypes = []
    refresh_idaview_anyway = _libraries['FIXME_STUB'].refresh_idaview_anyway
    refresh_idaview_anyway.restype = None
    refresh_idaview_anyway.argtypes = []
    refresh_navband = _libraries['FIXME_STUB'].refresh_navband
    refresh_navband.restype = None
    refresh_navband.argtypes = [ctypes.c_char]
    refresh_viewer = _libraries['FIXME_STUB'].refresh_viewer
    refresh_viewer.restype = None
    refresh_viewer.argtypes = [ctypes.POINTER(graph_viewer_t)]
    reg_bin_op = _libraries['FIXME_STUB'].reg_bin_op
    reg_bin_op.restype = ctypes.c_char
    reg_bin_op.argtypes = [ctypes.c_char_p, ctypes.c_char, ctypes.POINTER(None), size_t, ctypes.c_char_p, ctypes.c_int32]
    reg_data_type = _libraries['FIXME_STUB'].reg_data_type
    reg_data_type.restype = ctypes.c_char
    reg_data_type.argtypes = [ctypes.POINTER(regval_type_t), ctypes.c_char_p, ctypes.c_char_p]
    reg_delete = _libraries['FIXME_STUB'].reg_delete
    reg_delete.restype = ctypes.c_char
    reg_delete.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    reg_delete_subkey = _libraries['FIXME_STUB'].reg_delete_subkey
    reg_delete_subkey.restype = ctypes.c_char
    reg_delete_subkey.argtypes = [ctypes.c_char_p]
    reg_delete_tree = _libraries['FIXME_STUB'].reg_delete_tree
    reg_delete_tree.restype = ctypes.c_char
    reg_delete_tree.argtypes = [ctypes.c_char_p]
    reg_exists = _libraries['FIXME_STUB'].reg_exists
    reg_exists.restype = ctypes.c_char
    reg_exists.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    reg_flush = _libraries['FIXME_STUB'].reg_flush
    reg_flush.restype = None
    reg_flush.argtypes = []
    reg_history_size_truncate = _libraries['FIXME_STUB'].reg_history_size_truncate
    reg_history_size_truncate.restype = None
    reg_history_size_truncate.argtypes = []
    reg_int_op = _libraries['FIXME_STUB'].reg_int_op
    reg_int_op.restype = ctypes.c_int32
    reg_int_op.argtypes = [ctypes.c_char_p, ctypes.c_char, ctypes.c_int32, ctypes.c_char_p]
    reg_load = _libraries['FIXME_STUB'].reg_load
    reg_load.restype = None
    reg_load.argtypes = []
    reg_read_binary = _libraries['FIXME_STUB'].reg_read_binary
    reg_read_binary.restype = ctypes.c_char
    reg_read_binary.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_bytevec_t), ctypes.c_char_p]
    reg_read_binary_part = _libraries['FIXME_STUB'].reg_read_binary_part
    reg_read_binary_part.restype = ctypes.c_char
    reg_read_binary_part.argtypes = [ctypes.c_char_p, ctypes.POINTER(None), size_t, ctypes.c_char_p]
    reg_read_bool = _libraries['FIXME_STUB'].reg_read_bool
    reg_read_bool.restype = ctypes.c_char
    reg_read_bool.argtypes = [ctypes.c_char_p, ctypes.c_char, ctypes.c_char_p]
    reg_read_int = _libraries['FIXME_STUB'].reg_read_int
    reg_read_int.restype = ctypes.c_int32
    reg_read_int.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.c_char_p]
    reg_read_string = _libraries['FIXME_STUB'].reg_read_string
    reg_read_string.restype = ctypes.c_char
    reg_read_string.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.c_char_p]
    reg_read_strlist = _libraries['FIXME_STUB'].reg_read_strlist
    reg_read_strlist.restype = None
    reg_read_strlist.argtypes = [ctypes.POINTER(qstrvec_t), ctypes.c_char_p]
    reg_str_get = _libraries['FIXME_STUB'].reg_str_get
    reg_str_get.restype = ctypes.c_char
    reg_str_get.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.c_char_p]
    reg_str_set = _libraries['FIXME_STUB'].reg_str_set
    reg_str_set.restype = None
    reg_str_set.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p]
    reg_subkey_children = _libraries['FIXME_STUB'].reg_subkey_children
    reg_subkey_children.restype = ctypes.c_char
    reg_subkey_children.argtypes = [ctypes.POINTER(qstrvec_t), ctypes.c_char_p, ctypes.c_char]
    reg_subkey_exists = _libraries['FIXME_STUB'].reg_subkey_exists
    reg_subkey_exists.restype = ctypes.c_char
    reg_subkey_exists.argtypes = [ctypes.c_char_p]
    reg_subkey_subkeys = _libraries['FIXME_STUB'].reg_subkey_subkeys
    reg_subkey_subkeys.restype = ctypes.c_char
    reg_subkey_subkeys.argtypes = [ctypes.POINTER(qstrvec_t), ctypes.c_char_p]
    reg_subkey_values = _libraries['FIXME_STUB'].reg_subkey_values
    reg_subkey_values.restype = ctypes.c_char
    reg_subkey_values.argtypes = [ctypes.POINTER(qstrvec_t), ctypes.c_char_p]
    reg_update_filestrlist = _libraries['FIXME_STUB'].reg_update_filestrlist
    reg_update_filestrlist.restype = None
    reg_update_filestrlist.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t, ctypes.c_char_p]
    reg_update_history = _libraries['FIXME_STUB'].reg_update_history
    reg_update_history.restype = None
    reg_update_history.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    reg_update_strlist = _libraries['FIXME_STUB'].reg_update_strlist
    reg_update_strlist.restype = None
    reg_update_strlist.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t, ctypes.c_char_p, ctypes.c_char]
    reg_write_binary = _libraries['FIXME_STUB'].reg_write_binary
    reg_write_binary.restype = None
    reg_write_binary.argtypes = [ctypes.c_char_p, ctypes.POINTER(None), size_t, ctypes.c_char_p]
    reg_write_bool = _libraries['FIXME_STUB'].reg_write_bool
    reg_write_bool.restype = None
    reg_write_bool.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.c_char_p]
    reg_write_int = _libraries['FIXME_STUB'].reg_write_int
    reg_write_int.restype = None
    reg_write_int.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.c_char_p]
    reg_write_string = _libraries['FIXME_STUB'].reg_write_string
    reg_write_string.restype = None
    reg_write_string.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p]
    regcomp = _libraries['FIXME_STUB'].regcomp
    regcomp.restype = ctypes.c_int32
    regcomp.argtypes = [ctypes.POINTER(struct_regex_t), ctypes.c_char_p, ctypes.c_int32]
    regerror = _libraries['FIXME_STUB'].regerror
    regerror.restype = size_t
    regerror.argtypes = [ctypes.c_int32, ctypes.POINTER(struct_regex_t), ctypes.c_char_p, size_t]
    regex_match = _libraries['FIXME_STUB'].regex_match
    regex_match.restype = ctypes.c_int32
    regex_match.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char]
    regexec = _libraries['FIXME_STUB'].regexec
    regexec.restype = ctypes.c_int32
    regexec.argtypes = [ctypes.POINTER(struct_regex_t), ctypes.c_char_p, size_t, struct_regmatch_t * 0, ctypes.c_int32]
    regfree = _libraries['FIXME_STUB'].regfree
    regfree.restype = None
    regfree.argtypes = [ctypes.POINTER(struct_regex_t)]
    regget_history = _libraries['FIXME_STUB'].regget_history
    regget_history.restype = None
    regget_history.argtypes = [ctypes.POINTER(qstrvec_t)]
    register_action = _libraries['FIXME_STUB'].register_action
    register_action.restype = ctypes.c_char
    register_action.argtypes = [ctypes.POINTER(struct_action_desc_t)]
    register_addon = _libraries['FIXME_STUB'].register_addon
    register_addon.restype = ctypes.c_int32
    register_addon.argtypes = [ctypes.POINTER(struct_addon_info_t)]
    register_and_attach_to_menu = _libraries['FIXME_STUB'].register_and_attach_to_menu
    register_and_attach_to_menu.restype = ctypes.c_char
    register_and_attach_to_menu.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32, ctypes.POINTER(struct_action_handler_t), ctypes.POINTER(None), ctypes.c_int32]
    register_cfgopts = _libraries['FIXME_STUB'].register_cfgopts
    register_cfgopts.restype = ctypes.c_char
    register_cfgopts.argtypes = [struct_cfgopt_t * 0, size_t, config_changed_cb_t, ctypes.POINTER(None)]
    register_custom_data_format = _libraries['FIXME_STUB'].register_custom_data_format
    register_custom_data_format.restype = ctypes.c_int32
    register_custom_data_format.argtypes = [ctypes.POINTER(struct_data_format_t)]
    register_custom_data_type = _libraries['FIXME_STUB'].register_custom_data_type
    register_custom_data_type.restype = ctypes.c_int32
    register_custom_data_type.argtypes = [ctypes.POINTER(struct_data_type_t)]
    register_custom_fixup = _libraries['FIXME_STUB'].register_custom_fixup
    register_custom_fixup.restype = fixup_type_t
    register_custom_fixup.argtypes = [ctypes.POINTER(struct_fixup_handler_t)]
    register_custom_refinfo = _libraries['FIXME_STUB'].register_custom_refinfo
    register_custom_refinfo.restype = ctypes.c_int32
    register_custom_refinfo.argtypes = [ctypes.POINTER(struct_custom_refinfo_handler_t)]
    register_loc_converter2 = _libraries['FIXME_STUB'].register_loc_converter2
    register_loc_converter2.restype = None
    register_loc_converter2.argtypes = [ctypes.c_char_p, ctypes.c_char_p, lochist_entry_cvt2_t]
    register_place_class = _libraries['FIXME_STUB'].register_place_class
    register_place_class.restype = ctypes.c_int32
    register_place_class.argtypes = [ctypes.POINTER(struct_place_t), ctypes.c_int32, ctypes.POINTER(struct_plugin_t)]
    register_post_event_visitor = _libraries['FIXME_STUB'].register_post_event_visitor
    register_post_event_visitor.restype = ctypes.c_char
    register_post_event_visitor.argtypes = [hook_type_t, ctypes.POINTER(struct_post_event_visitor_t), ctypes.POINTER(struct_plugmod_t)]
    register_srcinfo_provider = _libraries['FIXME_STUB'].register_srcinfo_provider
    register_srcinfo_provider.restype = ctypes.c_char
    register_srcinfo_provider.argtypes = [ctypes.POINTER(struct_srcinfo_provider_t)]
    register_timer = _libraries['FIXME_STUB'].register_timer
    register_timer.restype = qtimer_t
    register_timer.argtypes = [ctypes.c_int32, ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(None)), ctypes.POINTER(None)]
    reload_file = _libraries['FIXME_STUB'].reload_file
    reload_file.restype = ctypes.c_char
    reload_file.argtypes = [ctypes.c_char_p, ctypes.c_char]
    reloc_value = _libraries['FIXME_STUB'].reloc_value
    reloc_value.restype = None
    reloc_value.argtypes = [ctypes.POINTER(None), ctypes.c_int32, adiff_t, ctypes.c_char]
    relocate_relobj = _libraries['FIXME_STUB'].relocate_relobj
    relocate_relobj.restype = ctypes.c_char
    relocate_relobj.argtypes = [ctypes.POINTER(struct_relobj_t), ea_t, ctypes.c_char]
    remainder = _libraries['FIXME_STUB'].remainder
    remainder.restype = ctypes.c_double
    remainder.argtypes = [ctypes.c_double, ctypes.c_double]
    remainderf = _libraries['FIXME_STUB'].remainderf
    remainderf.restype = ctypes.c_float
    remainderf.argtypes = [ctypes.c_float, ctypes.c_float]
    remainderl = _libraries['FIXME_STUB'].remainderl
    remainderl.restype = ctypes.c_double
    remainderl.argtypes = [ctypes.c_double, ctypes.c_double]
    remember_problem = _libraries['FIXME_STUB'].remember_problem
    remember_problem.restype = None
    remember_problem.argtypes = [problist_id_t, ea_t, ctypes.c_char_p]
    remove = _libraries['FIXME_STUB'].remove
    remove.restype = ctypes.c_int32
    remove.argtypes = [ctypes.c_char_p]
    remove_abi_opts = _libraries['FIXME_STUB'].remove_abi_opts
    remove_abi_opts.restype = ctypes.c_char
    remove_abi_opts.argtypes = [ctypes.c_char_p, ctypes.c_char]
    remove_command_interpreter = _libraries['FIXME_STUB'].remove_command_interpreter
    remove_command_interpreter.restype = None
    remove_command_interpreter.argtypes = [ctypes.POINTER(struct_cli_t)]
    remove_custom_argloc = _libraries['FIXME_STUB'].remove_custom_argloc
    remove_custom_argloc.restype = ctypes.c_char
    remove_custom_argloc.argtypes = [ctypes.c_int32]
    remove_event_listener = _libraries['FIXME_STUB'].remove_event_listener
    remove_event_listener.restype = None
    remove_event_listener.argtypes = [ctypes.POINTER(struct_event_listener_t)]
    remove_extlang = _libraries['FIXME_STUB'].remove_extlang
    remove_extlang.restype = ctypes.c_char
    remove_extlang.argtypes = [ctypes.POINTER(struct_extlang_t)]
    remove_func_tail = _libraries['FIXME_STUB'].remove_func_tail
    remove_func_tail.restype = ctypes.c_char
    remove_func_tail.argtypes = [ctypes.POINTER(struct_func_t), ea_t]
    remove_pointer = _libraries['FIXME_STUB'].remove_pointer
    remove_pointer.restype = struct_tinfo_t
    remove_pointer.argtypes = [ctypes.POINTER(struct_tinfo_t)]
    remove_tinfo_pointer = _libraries['FIXME_STUB'].remove_tinfo_pointer
    remove_tinfo_pointer.restype = ctypes.c_char
    remove_tinfo_pointer.argtypes = [ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(ctypes.c_char_p), ctypes.POINTER(struct_til_t)]
    remquo = _libraries['FIXME_STUB'].remquo
    remquo.restype = ctypes.c_double
    remquo.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.POINTER(ctypes.c_int32)]
    remquof = _libraries['FIXME_STUB'].remquof
    remquof.restype = ctypes.c_float
    remquof.argtypes = [ctypes.c_float, ctypes.c_float, ctypes.POINTER(ctypes.c_int32)]
    remquol = _libraries['FIXME_STUB'].remquol
    remquol.restype = ctypes.c_double
    remquol.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.POINTER(ctypes.c_int32)]
    rename = _libraries['FIXME_STUB'].rename
    rename.restype = ctypes.c_int32
    rename.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    rename_bptgrp = _libraries['FIXME_STUB'].rename_bptgrp
    rename_bptgrp.restype = ctypes.c_char
    rename_bptgrp.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    rename_encoding = _libraries['FIXME_STUB'].rename_encoding
    rename_encoding.restype = ctypes.c_char
    rename_encoding.argtypes = [ctypes.c_int32, ctypes.c_char_p]
    rename_entry = _libraries['FIXME_STUB'].rename_entry
    rename_entry.restype = ctypes.c_char
    rename_entry.argtypes = [uval_t, ctypes.c_char_p, ctypes.c_int32]
    rename_regvar = _libraries['FIXME_STUB'].rename_regvar
    rename_regvar.restype = ctypes.c_int32
    rename_regvar.argtypes = [ctypes.POINTER(struct_func_t), ctypes.POINTER(struct_regvar_t), ctypes.c_char_p]
    reorder_dummy_names = _libraries['FIXME_STUB'].reorder_dummy_names
    reorder_dummy_names.restype = None
    reorder_dummy_names.argtypes = []
    repaint_custom_viewer = _libraries['FIXME_STUB'].repaint_custom_viewer
    repaint_custom_viewer.restype = None
    repaint_custom_viewer.argtypes = [ctypes.POINTER(struct_TWidget)]
    replace_ordinal_typerefs = _libraries['FIXME_STUB'].replace_ordinal_typerefs
    replace_ordinal_typerefs.restype = ctypes.c_int32
    replace_ordinal_typerefs.argtypes = [ctypes.POINTER(struct_til_t), ctypes.POINTER(struct_tinfo_t)]
    replace_tabs = _libraries['FIXME_STUB'].replace_tabs
    replace_tabs.restype = ctypes.c_char
    replace_tabs.argtypes = [ctypes.POINTER(qstring), ctypes.c_char_p, ctypes.c_int32]
    replace_wait_box = _libraries['FIXME_STUB'].replace_wait_box
    replace_wait_box.restype = None
    replace_wait_box.argtypes = [ctypes.c_char_p]
    request_add_bpt = _libraries['FIXME_STUB'].request_add_bpt
    request_add_bpt.restype = ctypes.c_char
    request_add_bpt.argtypes = [ctypes.POINTER(struct_bpt_t)]
    request_attach_process = _libraries['FIXME_STUB'].request_attach_process
    request_attach_process.restype = ctypes.c_int32
    request_attach_process.argtypes = [pid_t, ctypes.c_int32]
    request_clear_trace = _libraries['FIXME_STUB'].request_clear_trace
    request_clear_trace.restype = None
    request_clear_trace.argtypes = []
    request_continue_process = _libraries['FIXME_STUB'].request_continue_process
    request_continue_process.restype = ctypes.c_char
    request_continue_process.argtypes = []
    request_del_bpt = _libraries['FIXME_STUB'].request_del_bpt
    request_del_bpt.restype = ctypes.c_char
    request_del_bpt.argtypes = [ctypes.POINTER(struct_bpt_location_t)]
    request_detach_process = _libraries['FIXME_STUB'].request_detach_process
    request_detach_process.restype = ctypes.c_char
    request_detach_process.argtypes = []
    request_disable_bblk_trace = _libraries['FIXME_STUB'].request_disable_bblk_trace
    request_disable_bblk_trace.restype = ctypes.c_char
    request_disable_bblk_trace.argtypes = []
    request_disable_bpt = _libraries['FIXME_STUB'].request_disable_bpt
    request_disable_bpt.restype = ctypes.c_char
    request_disable_bpt.argtypes = [ctypes.POINTER(struct_bpt_location_t)]
    request_disable_func_trace = _libraries['FIXME_STUB'].request_disable_func_trace
    request_disable_func_trace.restype = ctypes.c_char
    request_disable_func_trace.argtypes = []
    request_disable_insn_trace = _libraries['FIXME_STUB'].request_disable_insn_trace
    request_disable_insn_trace.restype = ctypes.c_char
    request_disable_insn_trace.argtypes = []
    request_disable_step_trace = _libraries['FIXME_STUB'].request_disable_step_trace
    request_disable_step_trace.restype = ctypes.c_char
    request_disable_step_trace.argtypes = []
    request_enable_bblk_trace = _libraries['FIXME_STUB'].request_enable_bblk_trace
    request_enable_bblk_trace.restype = ctypes.c_char
    request_enable_bblk_trace.argtypes = [ctypes.c_char]
    request_enable_bpt = _libraries['FIXME_STUB'].request_enable_bpt
    request_enable_bpt.restype = ctypes.c_char
    request_enable_bpt.argtypes = [ctypes.POINTER(struct_bpt_location_t), ctypes.c_char]
    request_enable_func_trace = _libraries['FIXME_STUB'].request_enable_func_trace
    request_enable_func_trace.restype = ctypes.c_char
    request_enable_func_trace.argtypes = [ctypes.c_char]
    request_enable_insn_trace = _libraries['FIXME_STUB'].request_enable_insn_trace
    request_enable_insn_trace.restype = ctypes.c_char
    request_enable_insn_trace.argtypes = [ctypes.c_char]
    request_enable_step_trace = _libraries['FIXME_STUB'].request_enable_step_trace
    request_enable_step_trace.restype = ctypes.c_char
    request_enable_step_trace.argtypes = [ctypes.c_int32]
    request_exit_process = _libraries['FIXME_STUB'].request_exit_process
    request_exit_process.restype = ctypes.c_char
    request_exit_process.argtypes = []
    request_refresh = _libraries['FIXME_STUB'].request_refresh
    request_refresh.restype = None
    request_refresh.argtypes = [uint64, ctypes.c_char]
    request_resume_thread = _libraries['FIXME_STUB'].request_resume_thread
    request_resume_thread.restype = ctypes.c_int32
    request_resume_thread.argtypes = [thid_t]
    request_run_to = _libraries['FIXME_STUB'].request_run_to
    request_run_to.restype = ctypes.c_char
    request_run_to.argtypes = [ea_t, pid_t, thid_t]
    request_select_thread = _libraries['FIXME_STUB'].request_select_thread
    request_select_thread.restype = ctypes.c_char
    request_select_thread.argtypes = [thid_t]
    request_set_bblk_trace_options = _libraries['FIXME_STUB'].request_set_bblk_trace_options
    request_set_bblk_trace_options.restype = None
    request_set_bblk_trace_options.argtypes = [ctypes.c_int32]
    request_set_func_trace_options = _libraries['FIXME_STUB'].request_set_func_trace_options
    request_set_func_trace_options.restype = None
    request_set_func_trace_options.argtypes = [ctypes.c_int32]
    request_set_insn_trace_options = _libraries['FIXME_STUB'].request_set_insn_trace_options
    request_set_insn_trace_options.restype = None
    request_set_insn_trace_options.argtypes = [ctypes.c_int32]
    request_set_reg_val = _libraries['FIXME_STUB'].request_set_reg_val
    request_set_reg_val.restype = ctypes.c_char
    request_set_reg_val.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_regval_t)]
    request_set_resume_mode = _libraries['FIXME_STUB'].request_set_resume_mode
    request_set_resume_mode.restype = ctypes.c_char
    request_set_resume_mode.argtypes = [thid_t, resume_mode_t]
    request_set_step_trace_options = _libraries['FIXME_STUB'].request_set_step_trace_options
    request_set_step_trace_options.restype = None
    request_set_step_trace_options.argtypes = [ctypes.c_int32]
    request_start_process = _libraries['FIXME_STUB'].request_start_process
    request_start_process.restype = ctypes.c_int32
    request_start_process.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p]
    request_step_into = _libraries['FIXME_STUB'].request_step_into
    request_step_into.restype = ctypes.c_char
    request_step_into.argtypes = []
    request_step_over = _libraries['FIXME_STUB'].request_step_over
    request_step_over.restype = ctypes.c_char
    request_step_over.argtypes = []
    request_step_until_ret = _libraries['FIXME_STUB'].request_step_until_ret
    request_step_until_ret.restype = ctypes.c_char
    request_step_until_ret.argtypes = []
    request_suspend_process = _libraries['FIXME_STUB'].request_suspend_process
    request_suspend_process.restype = ctypes.c_char
    request_suspend_process.argtypes = []
    request_suspend_thread = _libraries['FIXME_STUB'].request_suspend_thread
    request_suspend_thread.restype = ctypes.c_int32
    request_suspend_thread.argtypes = [thid_t]
    requires_color_esc = _libraries['FIXME_STUB'].requires_color_esc
    requires_color_esc.restype = ctypes.c_char
    requires_color_esc.argtypes = [ctypes.c_char]
    reset_dirtree = _libraries['FIXME_STUB'].reset_dirtree
    reset_dirtree.restype = None
    reset_dirtree.argtypes = [ctypes.POINTER(struct_dirtree_impl_t)]
    resolve_typedef = _libraries['FIXME_STUB'].resolve_typedef
    resolve_typedef.restype = ctypes.POINTER(type_t)
    resolve_typedef.argtypes = [ctypes.POINTER(struct_til_t), ctypes.POINTER(type_t)]
    restore_database_snapshot = _libraries['FIXME_STUB'].restore_database_snapshot
    restore_database_snapshot.restype = ctypes.c_char
    restore_database_snapshot.argtypes = [ctypes.POINTER(struct_snapshot_t), ss_restore_cb_t, ctypes.POINTER(None)]
    resume_thread = _libraries['FIXME_STUB'].resume_thread
    resume_thread.restype = ctypes.c_int32
    resume_thread.argtypes = [thid_t]
    rethrow_exception = _libraries['FIXME_STUB'].rethrow_exception
    rethrow_exception.restype = None
    rethrow_exception.argtypes = [struct_std__exception_ptr]
    retrieve_custom_argloc = _libraries['FIXME_STUB'].retrieve_custom_argloc
    retrieve_custom_argloc.restype = ctypes.POINTER(struct_custloc_desc_t)
    retrieve_custom_argloc.argtypes = [ctypes.c_int32]
    retrieve_exceptions = _libraries['FIXME_STUB'].retrieve_exceptions
    retrieve_exceptions.restype = ctypes.POINTER(excvec_t)
    retrieve_exceptions.argtypes = []
    retrieve_input_file_crc32 = _libraries['FIXME_STUB'].retrieve_input_file_crc32
    retrieve_input_file_crc32.restype = uint32
    retrieve_input_file_crc32.argtypes = []
    retrieve_input_file_md5 = _libraries['FIXME_STUB'].retrieve_input_file_md5
    retrieve_input_file_md5.restype = ctypes.c_char
    retrieve_input_file_md5.argtypes = [ctypes.c_ubyte * 16]
    retrieve_input_file_sha256 = _libraries['FIXME_STUB'].retrieve_input_file_sha256
    retrieve_input_file_sha256.restype = ctypes.c_char
    retrieve_input_file_sha256.argtypes = [ctypes.c_ubyte * 32]
    retrieve_input_file_size = _libraries['FIXME_STUB'].retrieve_input_file_size
    retrieve_input_file_size.restype = size_t
    retrieve_input_file_size.argtypes = []
    retrieve_member_info = _libraries['FIXME_STUB'].retrieve_member_info
    retrieve_member_info.restype = ctypes.POINTER(union_opinfo_t)
    retrieve_member_info.argtypes = [ctypes.POINTER(union_opinfo_t), ctypes.POINTER(struct_member_t)]
    revert_byte = _libraries['FIXME_STUB'].revert_byte
    revert_byte.restype = ctypes.c_char
    revert_byte.argtypes = [ea_t]
    revert_ida_decisions = _libraries['FIXME_STUB'].revert_ida_decisions
    revert_ida_decisions.restype = None
    revert_ida_decisions.argtypes = [ea_t, ea_t]
    rewind = _libraries['FIXME_STUB'].rewind
    rewind.restype = None
    rewind.argtypes = [ctypes.POINTER(FILE)]
    rint = _libraries['FIXME_STUB'].rint
    rint.restype = ctypes.c_double
    rint.argtypes = [ctypes.c_double]
    rintf = _libraries['FIXME_STUB'].rintf
    rintf.restype = ctypes.c_float
    rintf.argtypes = [ctypes.c_float]
    rintl = _libraries['FIXME_STUB'].rintl
    rintl.restype = ctypes.c_double
    rintl.argtypes = [ctypes.c_double]
    rmdir = _libraries['FIXME_STUB'].rmdir
    rmdir.restype = ctypes.c_int32
    rmdir.argtypes = [ctypes.c_char_p]
    rmtmp = _libraries['FIXME_STUB'].rmtmp
    rmtmp.restype = ctypes.c_int32
    rmtmp.argtypes = []
    root_node = (struct_netnode).in_dll(_libraries['FIXME_STUB'], 'root_node') if getattr(_libraries['FIXME_STUB'], 'root_node', None) else None
    rotate_left = _libraries['FIXME_STUB'].rotate_left
    rotate_left.restype = uval_t
    rotate_left.argtypes = [uval_t, ctypes.c_int32, size_t, size_t]
    round = _libraries['FIXME_STUB'].round
    round.restype = ctypes.c_double
    round.argtypes = [ctypes.c_double]
    round_down_power2 = _libraries['FIXME_STUB'].round_down_power2
    round_down_power2.restype = uint32
    round_down_power2.argtypes = [uint32]
    round_up_power2 = _libraries['FIXME_STUB'].round_up_power2
    round_up_power2.restype = uint32
    round_up_power2.argtypes = [uint32]
    roundf = _libraries['FIXME_STUB'].roundf
    roundf.restype = ctypes.c_float
    roundf.argtypes = [ctypes.c_float]
    roundl = _libraries['FIXME_STUB'].roundl
    roundl.restype = ctypes.c_double
    roundl.argtypes = [ctypes.c_double]
    run_plugin = _libraries['FIXME_STUB'].run_plugin
    run_plugin.restype = ctypes.c_char
    run_plugin.argtypes = [ctypes.POINTER(struct_plugin_t), size_t]
    run_requests = _libraries['FIXME_STUB'].run_requests
    run_requests.restype = ctypes.c_char
    run_requests.argtypes = []
    run_to = _libraries['FIXME_STUB'].run_to
    run_to.restype = ctypes.c_char
    run_to.argtypes = [ea_t, pid_t, thid_t]
    same_value_jpt = _libraries['FIXME_STUB'].same_value_jpt
    same_value_jpt.restype = ctypes.c_char
    same_value_jpt.argtypes = [ctypes.POINTER(struct_jump_pattern_t), ctypes.POINTER(struct_op_t), ctypes.c_int32]
    sanitize_file_name = _libraries['FIXME_STUB'].sanitize_file_name
    sanitize_file_name.restype = ctypes.c_char
    sanitize_file_name.argtypes = [ctypes.c_char_p, size_t]
    save_database = _libraries['FIXME_STUB'].save_database
    save_database.restype = ctypes.c_char
    save_database.argtypes = [ctypes.c_char_p, uint32, ctypes.POINTER(struct_snapshot_t), ctypes.POINTER(struct_snapshot_t)]
    save_dirtree = _libraries['FIXME_STUB'].save_dirtree
    save_dirtree.restype = ctypes.c_char
    save_dirtree.argtypes = [ctypes.POINTER(struct_dirtree_impl_t)]
    save_signatures = _libraries['FIXME_STUB'].save_signatures
    save_signatures.restype = None
    save_signatures.argtypes = []
    save_struc = _libraries['FIXME_STUB'].save_struc
    save_struc.restype = None
    save_struc.argtypes = [ctypes.POINTER(struct_struc_t), ctypes.c_char]
    save_structs = _libraries['FIXME_STUB'].save_structs
    save_structs.restype = None
    save_structs.argtypes = []
    save_tinfo = _libraries['FIXME_STUB'].save_tinfo
    save_tinfo.restype = tinfo_code_t
    save_tinfo.argtypes = [ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_til_t), size_t, ctypes.c_char_p, ctypes.c_int32]
    save_trace_file = _libraries['FIXME_STUB'].save_trace_file
    save_trace_file.restype = ctypes.c_char
    save_trace_file.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    scalbln = _libraries['FIXME_STUB'].scalbln
    scalbln.restype = ctypes.c_double
    scalbln.argtypes = [ctypes.c_double, ctypes.c_int32]
    scalblnf = _libraries['FIXME_STUB'].scalblnf
    scalblnf.restype = ctypes.c_float
    scalblnf.argtypes = [ctypes.c_float, ctypes.c_int32]
    scalblnl = _libraries['FIXME_STUB'].scalblnl
    scalblnl.restype = ctypes.c_double
    scalblnl.argtypes = [ctypes.c_double, ctypes.c_int32]
    scalbn = _libraries['FIXME_STUB'].scalbn
    scalbn.restype = ctypes.c_double
    scalbn.argtypes = [ctypes.c_double, ctypes.c_int32]
    scalbnf = _libraries['FIXME_STUB'].scalbnf
    scalbnf.restype = ctypes.c_float
    scalbnf.argtypes = [ctypes.c_float, ctypes.c_int32]
    scalbnl = _libraries['FIXME_STUB'].scalbnl
    scalbnl.restype = ctypes.c_double
    scalbnl.argtypes = [ctypes.c_double, ctypes.c_int32]
    scanf = _libraries['FIXME_STUB'].scanf
    scanf.restype = ctypes.c_int32
    scanf.argtypes = [ctypes.c_char_p]
    scanf_s = _libraries['FIXME_STUB'].scanf_s
    scanf_s.restype = ctypes.c_int32
    scanf_s.argtypes = [ctypes.c_char_p]
    score_tinfo = _libraries['FIXME_STUB'].score_tinfo
    score_tinfo.restype = uint32
    score_tinfo.argtypes = [ctypes.POINTER(struct_tinfo_t)]
    search = _libraries['FIXME_STUB'].search
    search.restype = ctypes.c_int32
    search.argtypes = [ctypes.POINTER(None), ctypes.POINTER(struct_place_t), ctypes.POINTER(struct_place_t), ctypes.POINTER(ctypes.c_int32), ctypes.c_char_p, ctypes.c_int32]
    search_down = _libraries['FIXME_STUB'].search_down
    search_down.restype = ctypes.c_char
    search_down.argtypes = [ctypes.c_int32]
    search_path = _libraries['FIXME_STUB'].search_path
    search_path.restype = ctypes.c_char
    search_path.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, ctypes.c_char]
    seg_flag = _libraries['FIXME_STUB'].seg_flag
    seg_flag.restype = flags_t
    seg_flag.argtypes = []
    segm_adjust_diff = _libraries['FIXME_STUB'].segm_adjust_diff
    segm_adjust_diff.restype = adiff_t
    segm_adjust_diff.argtypes = [ctypes.POINTER(struct_segment_t), adiff_t]
    segm_adjust_ea = _libraries['FIXME_STUB'].segm_adjust_ea
    segm_adjust_ea.restype = ea_t
    segm_adjust_ea.argtypes = [ctypes.POINTER(struct_segment_t), ea_t]
    segtype = _libraries['FIXME_STUB'].segtype
    segtype.restype = uchar
    segtype.argtypes = [ea_t]
    sel2ea = _libraries['FIXME_STUB'].sel2ea
    sel2ea.restype = ea_t
    sel2ea.argtypes = [sel_t]
    sel2para = _libraries['FIXME_STUB'].sel2para
    sel2para.restype = ea_t
    sel2para.argtypes = [sel_t]
    select_extlang = _libraries['FIXME_STUB'].select_extlang
    select_extlang.restype = ctypes.c_char
    select_extlang.argtypes = [ctypes.POINTER(struct_extlang_t)]
    select_thread = _libraries['FIXME_STUB'].select_thread
    select_thread.restype = ctypes.c_char
    select_thread.argtypes = [thid_t]
    serialize_dynamic_register_set = _libraries['FIXME_STUB'].serialize_dynamic_register_set
    serialize_dynamic_register_set.restype = None
    serialize_dynamic_register_set.argtypes = [ctypes.POINTER(struct_bytevec_t), ctypes.POINTER(struct_dynamic_register_set_t)]
    serialize_json = _libraries['FIXME_STUB'].serialize_json
    serialize_json.restype = ctypes.c_char
    serialize_json.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(struct_jobj_t), uint32]
    serialize_tinfo = _libraries['FIXME_STUB'].serialize_tinfo
    serialize_tinfo.restype = ctypes.c_char
    serialize_tinfo.argtypes = [ctypes.POINTER(qtype), ctypes.POINTER(qtype), ctypes.POINTER(qtype), ctypes.POINTER(struct_tinfo_t), ctypes.c_int32]
    set__bnot0 = _libraries['FIXME_STUB'].set__bnot0
    set__bnot0.restype = None
    set__bnot0.argtypes = [ea_t]
    set__bnot1 = _libraries['FIXME_STUB'].set__bnot1
    set__bnot1.restype = None
    set__bnot1.argtypes = [ea_t]
    set__invsign0 = _libraries['FIXME_STUB'].set__invsign0
    set__invsign0.restype = None
    set__invsign0.argtypes = [ea_t]
    set__invsign1 = _libraries['FIXME_STUB'].set__invsign1
    set__invsign1.restype = None
    set__invsign1.argtypes = [ea_t]
    set_abi_name = _libraries['FIXME_STUB'].set_abi_name
    set_abi_name.restype = ctypes.c_char
    set_abi_name.argtypes = [ctypes.c_char_p, ctypes.c_char]
    set_abits = _libraries['FIXME_STUB'].set_abits
    set_abits.restype = None
    set_abits.argtypes = [ea_t, aflags_t]
    set_absbase = _libraries['FIXME_STUB'].set_absbase
    set_absbase.restype = None
    set_absbase.argtypes = [ea_t, ea_t]
    set_aflags = _libraries['FIXME_STUB'].set_aflags
    set_aflags.restype = None
    set_aflags.argtypes = [ea_t, aflags_t]
    set_align_flow = _libraries['FIXME_STUB'].set_align_flow
    set_align_flow.restype = None
    set_align_flow.argtypes = [ea_t]
    set_alignment = _libraries['FIXME_STUB'].set_alignment
    set_alignment.restype = None
    set_alignment.argtypes = [ea_t, uint32]
    set_all_bits = _libraries['FIXME_STUB'].set_all_bits
    set_all_bits.restype = None
    set_all_bits.argtypes = [ctypes.POINTER(uchar), size_t]
    set_archive_path = _libraries['FIXME_STUB'].set_archive_path
    set_archive_path.restype = ctypes.c_char
    set_archive_path.argtypes = [ctypes.c_char_p]
    set_array_parameters = _libraries['FIXME_STUB'].set_array_parameters
    set_array_parameters.restype = None
    set_array_parameters.argtypes = [ea_t, ctypes.POINTER(struct_array_parameters_t)]
    set_asm_inc_file = _libraries['FIXME_STUB'].set_asm_inc_file
    set_asm_inc_file.restype = ctypes.c_char
    set_asm_inc_file.argtypes = [ctypes.c_char_p]
    set_auto_state = _libraries['FIXME_STUB'].set_auto_state
    set_auto_state.restype = atype_t
    set_auto_state.argtypes = [atype_t]
    set_bblk_trace_options = _libraries['FIXME_STUB'].set_bblk_trace_options
    set_bblk_trace_options.restype = None
    set_bblk_trace_options.argtypes = [ctypes.c_int32]
    set_bit = _libraries['FIXME_STUB'].set_bit
    set_bit.restype = None
    set_bit.argtypes = [ctypes.POINTER(uchar), size_t]
    set_bits = _libraries['FIXME_STUB'].set_bits
    set_bits.restype = None
    set_bits.argtypes = [ctypes.POINTER(uchar), size_t, size_t]
    set_bmask_cmt = _libraries['FIXME_STUB'].set_bmask_cmt
    set_bmask_cmt.restype = ctypes.c_char
    set_bmask_cmt.argtypes = [enum_t, bmask_t, ctypes.c_char_p, ctypes.c_char]
    set_bmask_name = _libraries['FIXME_STUB'].set_bmask_name
    set_bmask_name.restype = ctypes.c_char
    set_bmask_name.argtypes = [enum_t, bmask_t, ctypes.c_char_p]
    set_bpt_group = _libraries['FIXME_STUB'].set_bpt_group
    set_bpt_group.restype = ctypes.c_char
    set_bpt_group.argtypes = [ctypes.POINTER(struct_bpt_t), ctypes.c_char_p]
    set_bptloc_group = _libraries['FIXME_STUB'].set_bptloc_group
    set_bptloc_group.restype = ctypes.c_char
    set_bptloc_group.argtypes = [ctypes.POINTER(struct_bpt_location_t), ctypes.c_char_p]
    set_bptloc_string = _libraries['FIXME_STUB'].set_bptloc_string
    set_bptloc_string.restype = ctypes.c_int32
    set_bptloc_string.argtypes = [ctypes.c_char_p]
    set_c_header_path = _libraries['FIXME_STUB'].set_c_header_path
    set_c_header_path.restype = None
    set_c_header_path.argtypes = [ctypes.c_char_p]
    set_c_macros = _libraries['FIXME_STUB'].set_c_macros
    set_c_macros.restype = None
    set_c_macros.argtypes = [ctypes.c_char_p]
    set_cancelled = _libraries['FIXME_STUB'].set_cancelled
    set_cancelled.restype = None
    set_cancelled.argtypes = []
    set_cmt = _libraries['FIXME_STUB'].set_cmt
    set_cmt.restype = ctypes.c_char
    set_cmt.argtypes = [ea_t, ctypes.c_char_p, ctypes.c_char]
    set_code_viewer_handler = _libraries['FIXME_STUB'].set_code_viewer_handler
    set_code_viewer_handler.restype = ctypes.POINTER(None)
    set_code_viewer_handler.argtypes = [ctypes.POINTER(struct_TWidget), custom_viewer_handler_id_t, ctypes.POINTER(None)]
    set_code_viewer_is_source = _libraries['FIXME_STUB'].set_code_viewer_is_source
    set_code_viewer_is_source.restype = ctypes.c_char
    set_code_viewer_is_source.argtypes = [ctypes.POINTER(struct_TWidget)]
    set_code_viewer_line_handlers = _libraries['FIXME_STUB'].set_code_viewer_line_handlers
    set_code_viewer_line_handlers.restype = None
    set_code_viewer_line_handlers.argtypes = [ctypes.POINTER(struct_TWidget), code_viewer_lines_click_t, code_viewer_lines_click_t, code_viewer_lines_click_t, code_viewer_lines_icon_t, code_viewer_lines_linenum_t]
    set_code_viewer_lines_alignment = _libraries['FIXME_STUB'].set_code_viewer_lines_alignment
    set_code_viewer_lines_alignment.restype = ctypes.c_char
    set_code_viewer_lines_alignment.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.c_int32]
    set_code_viewer_lines_icon_margin = _libraries['FIXME_STUB'].set_code_viewer_lines_icon_margin
    set_code_viewer_lines_icon_margin.restype = ctypes.c_char
    set_code_viewer_lines_icon_margin.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.c_int32]
    set_code_viewer_lines_radix = _libraries['FIXME_STUB'].set_code_viewer_lines_radix
    set_code_viewer_lines_radix.restype = ctypes.c_char
    set_code_viewer_lines_radix.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.c_int32]
    set_code_viewer_user_data = _libraries['FIXME_STUB'].set_code_viewer_user_data
    set_code_viewer_user_data.restype = ctypes.c_char
    set_code_viewer_user_data.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.POINTER(None)]
    set_colored_item = _libraries['FIXME_STUB'].set_colored_item
    set_colored_item.restype = None
    set_colored_item.argtypes = [ea_t]
    set_compiler = _libraries['FIXME_STUB'].set_compiler
    set_compiler.restype = ctypes.c_char
    set_compiler.argtypes = [ctypes.POINTER(struct_compiler_info_t), ctypes.c_int32, ctypes.c_char_p]
    set_compiler_id = _libraries['FIXME_STUB'].set_compiler_id
    set_compiler_id.restype = ctypes.c_char
    set_compiler_id.argtypes = [comp_t, ctypes.c_char_p]
    set_compiler_string = _libraries['FIXME_STUB'].set_compiler_string
    set_compiler_string.restype = ctypes.c_char
    set_compiler_string.argtypes = [ctypes.c_char_p, ctypes.c_char]
    set_cp_validity = _libraries['FIXME_STUB'].set_cp_validity
    set_cp_validity.restype = None
    set_cp_validity.argtypes = [ucdr_kind_t, wchar32_t, wchar32_t, ctypes.c_char]
    set_custom_data_type_ids = _libraries['FIXME_STUB'].set_custom_data_type_ids
    set_custom_data_type_ids.restype = None
    set_custom_data_type_ids.argtypes = [ea_t, ctypes.POINTER(struct_custom_data_type_ids_t)]
    set_custom_viewer_handler = _libraries['FIXME_STUB'].set_custom_viewer_handler
    set_custom_viewer_handler.restype = ctypes.POINTER(None)
    set_custom_viewer_handler.argtypes = [ctypes.POINTER(struct_TWidget), custom_viewer_handler_id_t, ctypes.POINTER(None)]
    set_custom_viewer_handlers = _libraries['FIXME_STUB'].set_custom_viewer_handlers
    set_custom_viewer_handlers.restype = None
    set_custom_viewer_handlers.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_custom_viewer_handlers_t), ctypes.POINTER(None)]
    set_custom_viewer_qt_aware = _libraries['FIXME_STUB'].set_custom_viewer_qt_aware
    set_custom_viewer_qt_aware.restype = ctypes.c_char
    set_custom_viewer_qt_aware.argtypes = [ctypes.POINTER(struct_TWidget)]
    set_custom_viewer_range = _libraries['FIXME_STUB'].set_custom_viewer_range
    set_custom_viewer_range.restype = None
    set_custom_viewer_range.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.POINTER(struct_place_t), ctypes.POINTER(struct_place_t)]
    set_data_guessed_by_hexrays = _libraries['FIXME_STUB'].set_data_guessed_by_hexrays
    set_data_guessed_by_hexrays.restype = None
    set_data_guessed_by_hexrays.argtypes = [ea_t]
    set_database_flag = _libraries['FIXME_STUB'].set_database_flag
    set_database_flag.restype = None
    set_database_flag.argtypes = [uint32, ctypes.c_char]
    set_dbg_default_options = _libraries['FIXME_STUB'].set_dbg_default_options
    set_dbg_default_options.restype = ctypes.c_char_p
    set_dbg_default_options.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.POINTER(None)]
    set_dbg_options = _libraries['FIXME_STUB'].set_dbg_options
    set_dbg_options.restype = ctypes.c_char_p
    set_dbg_options.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(None)]
    set_dbgmem_source = _libraries['FIXME_STUB'].set_dbgmem_source
    set_dbgmem_source.restype = None
    set_dbgmem_source.argtypes = [ctypes.CFUNCTYPE(ctypes.POINTER(struct_range_t), ctypes.POINTER(ctypes.c_int32)), ctypes.CFUNCTYPE(ctypes.c_int32, ea_t, ctypes.POINTER(None), ctypes.c_int32), ctypes.CFUNCTYPE(ctypes.c_int32, ea_t, ctypes.POINTER(None), ctypes.c_int32)]
    set_debug_event_code = _libraries['FIXME_STUB'].set_debug_event_code
    set_debug_event_code.restype = None
    set_debug_event_code.argtypes = [ctypes.POINTER(struct_debug_event_t), event_id_t]
    set_debug_name = _libraries['FIXME_STUB'].set_debug_name
    set_debug_name.restype = ctypes.c_char
    set_debug_name.argtypes = [ea_t, ctypes.c_char_p]
    set_debug_names = _libraries['FIXME_STUB'].set_debug_names
    set_debug_names.restype = ctypes.c_int32
    set_debug_names.argtypes = [ctypes.POINTER(ea_t), ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32]
    set_debugger_event_cond = _libraries['FIXME_STUB'].set_debugger_event_cond
    set_debugger_event_cond.restype = None
    set_debugger_event_cond.argtypes = [ctypes.c_char_p]
    set_debugger_options = _libraries['FIXME_STUB'].set_debugger_options
    set_debugger_options.restype = uint
    set_debugger_options.argtypes = [uint]
    set_default_dataseg = _libraries['FIXME_STUB'].set_default_dataseg
    set_default_dataseg.restype = None
    set_default_dataseg.argtypes = [sel_t]
    set_default_encoding_idx = _libraries['FIXME_STUB'].set_default_encoding_idx
    set_default_encoding_idx.restype = ctypes.c_char
    set_default_encoding_idx.argtypes = [ctypes.c_int32, ctypes.c_int32]
    set_default_sreg_value = _libraries['FIXME_STUB'].set_default_sreg_value
    set_default_sreg_value.restype = ctypes.c_char
    set_default_sreg_value.argtypes = [ctypes.POINTER(struct_segment_t), ctypes.c_int32, sel_t]
    set_dock_pos = _libraries['FIXME_STUB'].set_dock_pos
    set_dock_pos.restype = ctypes.c_char
    set_dock_pos.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32, ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]
    set_dummy_name = _libraries['FIXME_STUB'].set_dummy_name
    set_dummy_name.restype = ctypes.c_char
    set_dummy_name.argtypes = [ea_t, ea_t]
    set_entry_forwarder = _libraries['FIXME_STUB'].set_entry_forwarder
    set_entry_forwarder.restype = ctypes.c_char
    set_entry_forwarder.argtypes = [uval_t, ctypes.c_char_p, ctypes.c_int32]
    set_enum_bf = _libraries['FIXME_STUB'].set_enum_bf
    set_enum_bf.restype = ctypes.c_char
    set_enum_bf.argtypes = [enum_t, ctypes.c_char]
    set_enum_cmt = _libraries['FIXME_STUB'].set_enum_cmt
    set_enum_cmt.restype = ctypes.c_char
    set_enum_cmt.argtypes = [enum_t, ctypes.c_char_p, ctypes.c_char]
    set_enum_flag = _libraries['FIXME_STUB'].set_enum_flag
    set_enum_flag.restype = ctypes.c_char
    set_enum_flag.argtypes = [enum_t, flags_t]
    set_enum_fromtil = _libraries['FIXME_STUB'].set_enum_fromtil
    set_enum_fromtil.restype = ctypes.c_char
    set_enum_fromtil.argtypes = [enum_t, ctypes.c_char]
    set_enum_ghost = _libraries['FIXME_STUB'].set_enum_ghost
    set_enum_ghost.restype = ctypes.c_char
    set_enum_ghost.argtypes = [enum_t, ctypes.c_char]
    set_enum_hidden = _libraries['FIXME_STUB'].set_enum_hidden
    set_enum_hidden.restype = ctypes.c_char
    set_enum_hidden.argtypes = [enum_t, ctypes.c_char]
    set_enum_idx = _libraries['FIXME_STUB'].set_enum_idx
    set_enum_idx.restype = ctypes.c_char
    set_enum_idx.argtypes = [enum_t, size_t]
    set_enum_member_cmt = _libraries['FIXME_STUB'].set_enum_member_cmt
    set_enum_member_cmt.restype = ctypes.c_char
    set_enum_member_cmt.argtypes = [const_t, ctypes.c_char_p, ctypes.c_char]
    set_enum_member_name = _libraries['FIXME_STUB'].set_enum_member_name
    set_enum_member_name.restype = ctypes.c_char
    set_enum_member_name.argtypes = [const_t, ctypes.c_char_p]
    set_enum_name = _libraries['FIXME_STUB'].set_enum_name
    set_enum_name.restype = ctypes.c_char
    set_enum_name.argtypes = [enum_t, ctypes.c_char_p]
    set_enum_type_ordinal = _libraries['FIXME_STUB'].set_enum_type_ordinal
    set_enum_type_ordinal.restype = None
    set_enum_type_ordinal.argtypes = [enum_t, int32]
    set_enum_width = _libraries['FIXME_STUB'].set_enum_width
    set_enum_width.restype = ctypes.c_char
    set_enum_width.argtypes = [enum_t, ctypes.c_int32]
    set_errno = _libraries['FIXME_STUB'].set_errno
    set_errno.restype = None
    set_errno.argtypes = [ctypes.c_int32]
    set_error_data = _libraries['FIXME_STUB'].set_error_data
    set_error_data.restype = None
    set_error_data.argtypes = [ctypes.c_int32, size_t]
    set_error_string = _libraries['FIXME_STUB'].set_error_string
    set_error_string.restype = None
    set_error_string.argtypes = [ctypes.c_int32, ctypes.c_char_p]
    set_file_ext = _libraries['FIXME_STUB'].set_file_ext
    set_file_ext.restype = ctypes.c_char_p
    set_file_ext.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, ctypes.c_char_p]
    set_fixed_spd = _libraries['FIXME_STUB'].set_fixed_spd
    set_fixed_spd.restype = None
    set_fixed_spd.argtypes = [ea_t]
    set_fixup = _libraries['FIXME_STUB'].set_fixup
    set_fixup.restype = None
    set_fixup.argtypes = [ea_t, ctypes.POINTER(struct_fixup_data_t)]
    set_forced_operand = _libraries['FIXME_STUB'].set_forced_operand
    set_forced_operand.restype = ctypes.c_char
    set_forced_operand.argtypes = [ea_t, ctypes.c_int32, ctypes.c_char_p]
    set_frame_size = _libraries['FIXME_STUB'].set_frame_size
    set_frame_size.restype = ctypes.c_char
    set_frame_size.argtypes = [ctypes.POINTER(struct_func_t), asize_t, ushort, asize_t]
    set_func_cmt = _libraries['FIXME_STUB'].set_func_cmt
    set_func_cmt.restype = ctypes.c_char
    set_func_cmt.argtypes = [ctypes.POINTER(struct_func_t), ctypes.c_char_p, ctypes.c_char]
    set_func_end = _libraries['FIXME_STUB'].set_func_end
    set_func_end.restype = ctypes.c_char
    set_func_end.argtypes = [ea_t, ea_t]
    set_func_guessed_by_hexrays = _libraries['FIXME_STUB'].set_func_guessed_by_hexrays
    set_func_guessed_by_hexrays.restype = None
    set_func_guessed_by_hexrays.argtypes = [ea_t]
    set_func_name_if_jumpfunc = _libraries['FIXME_STUB'].set_func_name_if_jumpfunc
    set_func_name_if_jumpfunc.restype = ctypes.c_int32
    set_func_name_if_jumpfunc.argtypes = [ctypes.POINTER(struct_func_t), ctypes.c_char_p]
    set_func_start = _libraries['FIXME_STUB'].set_func_start
    set_func_start.restype = ctypes.c_int32
    set_func_start.argtypes = [ea_t, ea_t]
    set_func_trace_options = _libraries['FIXME_STUB'].set_func_trace_options
    set_func_trace_options.restype = None
    set_func_trace_options.argtypes = [ctypes.c_int32]
    set_gotea = _libraries['FIXME_STUB'].set_gotea
    set_gotea.restype = None
    set_gotea.argtypes = [ea_t]
    set_group_selector = _libraries['FIXME_STUB'].set_group_selector
    set_group_selector.restype = ctypes.c_int32
    set_group_selector.argtypes = [sel_t, sel_t]
    set_has_lname = _libraries['FIXME_STUB'].set_has_lname
    set_has_lname.restype = None
    set_has_lname.argtypes = [ea_t]
    set_has_ti = _libraries['FIXME_STUB'].set_has_ti
    set_has_ti.restype = None
    set_has_ti.argtypes = [ea_t]
    set_has_ti0 = _libraries['FIXME_STUB'].set_has_ti0
    set_has_ti0.restype = None
    set_has_ti0.argtypes = [ea_t]
    set_has_ti1 = _libraries['FIXME_STUB'].set_has_ti1
    set_has_ti1.restype = None
    set_has_ti1.argtypes = [ea_t]
    set_header_path = _libraries['FIXME_STUB'].set_header_path
    set_header_path.restype = ctypes.c_char
    set_header_path.argtypes = [ctypes.c_char_p, ctypes.c_char]
    set_hexdsp = _libraries['FIXME_STUB'].set_hexdsp
    set_hexdsp.restype = None
    set_hexdsp.argtypes = [hexdsp_t]
    set_highlight = _libraries['FIXME_STUB'].set_highlight
    set_highlight.restype = ctypes.c_char
    set_highlight.argtypes = [ctypes.POINTER(struct_TWidget), ctypes.c_char_p, ctypes.c_int32]
    set_highlight_trace_options = _libraries['FIXME_STUB'].set_highlight_trace_options
    set_highlight_trace_options.restype = None
    set_highlight_trace_options.argtypes = [ctypes.c_char, bgcolor_t, bgcolor_t]
    set_ida_notepad_text = _libraries['FIXME_STUB'].set_ida_notepad_text
    set_ida_notepad_text.restype = None
    set_ida_notepad_text.argtypes = [ctypes.c_char_p, size_t]
    set_ida_state = _libraries['FIXME_STUB'].set_ida_state
    set_ida_state.restype = idastate_t
    set_ida_state.argtypes = [idastate_t]
    set_idc_dtor = _libraries['FIXME_STUB'].set_idc_dtor
    set_idc_dtor.restype = ctypes.c_char_p
    set_idc_dtor.argtypes = [ctypes.POINTER(struct_idc_class_t), ctypes.c_char_p]
    set_idc_getattr = _libraries['FIXME_STUB'].set_idc_getattr
    set_idc_getattr.restype = ctypes.c_char_p
    set_idc_getattr.argtypes = [ctypes.POINTER(struct_idc_class_t), ctypes.c_char_p]
    set_idc_method = _libraries['FIXME_STUB'].set_idc_method
    set_idc_method.restype = ctypes.c_char
    set_idc_method.argtypes = [ctypes.POINTER(struct_idc_class_t), ctypes.c_char_p]
    set_idc_setattr = _libraries['FIXME_STUB'].set_idc_setattr
    set_idc_setattr.restype = ctypes.c_char_p
    set_idc_setattr.argtypes = [ctypes.POINTER(struct_idc_class_t), ctypes.c_char_p]
    set_idcv_attr = _libraries['FIXME_STUB'].set_idcv_attr
    set_idcv_attr.restype = error_t
    set_idcv_attr.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p, ctypes.POINTER(struct_idc_value_t), ctypes.c_char]
    set_idcv_slice = _libraries['FIXME_STUB'].set_idcv_slice
    set_idcv_slice.restype = error_t
    set_idcv_slice.argtypes = [ctypes.POINTER(struct_idc_value_t), uval_t, uval_t, ctypes.POINTER(struct_idc_value_t), ctypes.c_int32]
    set_ids_modnode = _libraries['FIXME_STUB'].set_ids_modnode
    set_ids_modnode.restype = None
    set_ids_modnode.argtypes = [struct_netnode]
    set_ignore_micro = _libraries['FIXME_STUB'].set_ignore_micro
    set_ignore_micro.restype = None
    set_ignore_micro.argtypes = [ea_t, uchar]
    set_imagebase = _libraries['FIXME_STUB'].set_imagebase
    set_imagebase.restype = None
    set_imagebase.argtypes = [ea_t]
    set_immd = _libraries['FIXME_STUB'].set_immd
    set_immd.restype = ctypes.c_char
    set_immd.argtypes = [ea_t]
    set_import_name = _libraries['FIXME_STUB'].set_import_name
    set_import_name.restype = None
    set_import_name.argtypes = [uval_t, ea_t, ctypes.c_char_p]
    set_import_ordinal = _libraries['FIXME_STUB'].set_import_ordinal
    set_import_ordinal.restype = None
    set_import_ordinal.argtypes = [uval_t, ea_t, uval_t]
    set_ind_purged = _libraries['FIXME_STUB'].set_ind_purged
    set_ind_purged.restype = None
    set_ind_purged.argtypes = [ea_t, ea_t]
    set_insn_trace_options = _libraries['FIXME_STUB'].set_insn_trace_options
    set_insn_trace_options.restype = None
    set_insn_trace_options.argtypes = [ctypes.c_int32]
    set_int_dbg_options = _libraries['FIXME_STUB'].set_int_dbg_options
    set_int_dbg_options.restype = ctypes.c_char_p
    set_int_dbg_options.argtypes = [ctypes.c_char_p, int32]
    set_item_color = _libraries['FIXME_STUB'].set_item_color
    set_item_color.restype = None
    set_item_color.argtypes = [ea_t, bgcolor_t]
    set_libitem = _libraries['FIXME_STUB'].set_libitem
    set_libitem.restype = None
    set_libitem.argtypes = [ea_t]
    set_loader_format_name = _libraries['FIXME_STUB'].set_loader_format_name
    set_loader_format_name.restype = None
    set_loader_format_name.argtypes = [ctypes.c_char_p]
    set_lzero = _libraries['FIXME_STUB'].set_lzero
    set_lzero.restype = ctypes.c_char
    set_lzero.argtypes = [ea_t, ctypes.c_int32]
    set_lzero0 = _libraries['FIXME_STUB'].set_lzero0
    set_lzero0.restype = None
    set_lzero0.argtypes = [ea_t]
    set_lzero1 = _libraries['FIXME_STUB'].set_lzero1
    set_lzero1.restype = None
    set_lzero1.argtypes = [ea_t]
    set_manual_insn = _libraries['FIXME_STUB'].set_manual_insn
    set_manual_insn.restype = None
    set_manual_insn.argtypes = [ea_t, ctypes.c_char_p]
    set_manual_regions = _libraries['FIXME_STUB'].set_manual_regions
    set_manual_regions.restype = None
    set_manual_regions.argtypes = [ctypes.POINTER(meminfo_vec_t)]
    set_member_cmt = _libraries['FIXME_STUB'].set_member_cmt
    set_member_cmt.restype = ctypes.c_char
    set_member_cmt.argtypes = [ctypes.POINTER(struct_member_t), ctypes.c_char_p, ctypes.c_char]
    set_member_name = _libraries['FIXME_STUB'].set_member_name
    set_member_name.restype = ctypes.c_char
    set_member_name.argtypes = [ctypes.POINTER(struct_struc_t), ea_t, ctypes.c_char_p]
    set_member_tinfo = _libraries['FIXME_STUB'].set_member_tinfo
    set_member_tinfo.restype = smt_code_t
    set_member_tinfo.argtypes = [ctypes.POINTER(struct_struc_t), ctypes.POINTER(struct_member_t), uval_t, ctypes.POINTER(struct_tinfo_t), ctypes.c_int32]
    set_member_type = _libraries['FIXME_STUB'].set_member_type
    set_member_type.restype = ctypes.c_char
    set_member_type.argtypes = [ctypes.POINTER(struct_struc_t), ea_t, flags_t, ctypes.POINTER(union_opinfo_t), asize_t]
    set_module_data = _libraries['FIXME_STUB'].set_module_data
    set_module_data.restype = ctypes.POINTER(None)
    set_module_data.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(None)]
    set_moved_jpt = _libraries['FIXME_STUB'].set_moved_jpt
    set_moved_jpt.restype = ctypes.c_char
    set_moved_jpt.argtypes = [ctypes.POINTER(struct_jump_pattern_t), ctypes.POINTER(struct_op_t), ctypes.POINTER(struct_op_t), ctypes.POINTER(tracked_regs_t), op_dtype_t, op_dtype_t]
    set_name = _libraries['FIXME_STUB'].set_name
    set_name.restype = ctypes.c_char
    set_name.argtypes = [ea_t, ctypes.c_char_p, ctypes.c_int32]
    set_nav_colorizer = _libraries['FIXME_STUB'].set_nav_colorizer
    set_nav_colorizer.restype = None
    set_nav_colorizer.argtypes = [ctypes.POINTER(nav_colorizer_t), ctypes.POINTER(ctypes.POINTER(None)), nav_colorizer_t, ctypes.POINTER(None)]
    set_new_handler = _libraries['FIXME_STUB'].set_new_handler
    set_new_handler.restype = std__new_handler
    set_new_handler.argtypes = [std__new_handler]
    set_node_info = _libraries['FIXME_STUB'].set_node_info
    set_node_info.restype = None
    set_node_info.argtypes = [graph_id_t, ctypes.c_int32, ctypes.POINTER(struct_node_info_t), uint32]
    set_noret = _libraries['FIXME_STUB'].set_noret
    set_noret.restype = None
    set_noret.argtypes = [ea_t]
    set_noret_insn = _libraries['FIXME_STUB'].set_noret_insn
    set_noret_insn.restype = ctypes.c_char
    set_noret_insn.argtypes = [ea_t, ctypes.c_char]
    set_notcode = _libraries['FIXME_STUB'].set_notcode
    set_notcode.restype = None
    set_notcode.argtypes = [ea_t]
    set_notproc = _libraries['FIXME_STUB'].set_notproc
    set_notproc.restype = None
    set_notproc.argtypes = [ea_t]
    set_numbered_type = _libraries['FIXME_STUB'].set_numbered_type
    set_numbered_type.restype = tinfo_code_t
    set_numbered_type.argtypes = [ctypes.POINTER(struct_til_t), uint32, ctypes.c_int32, ctypes.c_char_p, ctypes.POINTER(type_t), ctypes.POINTER(p_list), ctypes.c_char_p, ctypes.POINTER(p_list), ctypes.POINTER(sclass_t)]
    set_op_tinfo = _libraries['FIXME_STUB'].set_op_tinfo
    set_op_tinfo.restype = ctypes.c_char
    set_op_tinfo.argtypes = [ea_t, ctypes.c_int32, ctypes.POINTER(struct_tinfo_t)]
    set_op_type = _libraries['FIXME_STUB'].set_op_type
    set_op_type.restype = ctypes.c_char
    set_op_type.argtypes = [ea_t, flags_t, ctypes.c_int32]
    set_opinfo = _libraries['FIXME_STUB'].set_opinfo
    set_opinfo.restype = ctypes.c_char
    set_opinfo.argtypes = [ea_t, ctypes.c_int32, flags_t, ctypes.POINTER(union_opinfo_t), ctypes.c_char]
    set_outfile_encoding_idx = _libraries['FIXME_STUB'].set_outfile_encoding_idx
    set_outfile_encoding_idx.restype = ctypes.c_char
    set_outfile_encoding_idx.argtypes = [ctypes.c_int32]
    set_path = _libraries['FIXME_STUB'].set_path
    set_path.restype = None
    set_path.argtypes = [path_type_t, ctypes.c_char_p]
    set_process_options = _libraries['FIXME_STUB'].set_process_options
    set_process_options.restype = None
    set_process_options.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32]
    set_process_state = _libraries['FIXME_STUB'].set_process_state
    set_process_state.restype = ctypes.c_int32
    set_process_state.argtypes = [ctypes.c_int32, ctypes.POINTER(thid_t), ctypes.c_int32]
    set_processor_type = _libraries['FIXME_STUB'].set_processor_type
    set_processor_type.restype = ctypes.c_char
    set_processor_type.argtypes = [ctypes.c_char_p, setproc_level_t]
    set_purged = _libraries['FIXME_STUB'].set_purged
    set_purged.restype = ctypes.c_char
    set_purged.argtypes = [ea_t, ctypes.c_int32, ctypes.c_char]
    set_qerrno = _libraries['FIXME_STUB'].set_qerrno
    set_qerrno.restype = error_t
    set_qerrno.argtypes = [error_t]
    set_refinfo = _libraries['FIXME_STUB'].set_refinfo
    set_refinfo.restype = ctypes.c_char
    set_refinfo.argtypes = [ea_t, ctypes.c_int32, reftype_t, ea_t, ea_t, adiff_t]
    set_refinfo_ex = _libraries['FIXME_STUB'].set_refinfo_ex
    set_refinfo_ex.restype = ctypes.c_char
    set_refinfo_ex.argtypes = [ea_t, ctypes.c_int32, ctypes.POINTER(struct_refinfo_t)]
    set_reg_val = _libraries['FIXME_STUB'].set_reg_val
    set_reg_val.restype = ctypes.c_int32
    set_reg_val.argtypes = [thid_t, ctypes.c_int32, ctypes.POINTER(struct_regval_t)]
    set_regvar_cmt = _libraries['FIXME_STUB'].set_regvar_cmt
    set_regvar_cmt.restype = ctypes.c_int32
    set_regvar_cmt.argtypes = [ctypes.POINTER(struct_func_t), ctypes.POINTER(struct_regvar_t), ctypes.c_char_p]
    set_remote_debugger = _libraries['FIXME_STUB'].set_remote_debugger
    set_remote_debugger.restype = None
    set_remote_debugger.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32]
    set_resume_mode = _libraries['FIXME_STUB'].set_resume_mode
    set_resume_mode.restype = ctypes.c_char
    set_resume_mode.argtypes = [thid_t, resume_mode_t]
    set_retfp = _libraries['FIXME_STUB'].set_retfp
    set_retfp.restype = None
    set_retfp.argtypes = [ea_t]
    set_root_filename = _libraries['FIXME_STUB'].set_root_filename
    set_root_filename.restype = None
    set_root_filename.argtypes = [ctypes.c_char_p]
    set_segm_addressing = _libraries['FIXME_STUB'].set_segm_addressing
    set_segm_addressing.restype = ctypes.c_char
    set_segm_addressing.argtypes = [ctypes.POINTER(struct_segment_t), size_t]
    set_segm_base = _libraries['FIXME_STUB'].set_segm_base
    set_segm_base.restype = ctypes.c_char
    set_segm_base.argtypes = [ctypes.POINTER(struct_segment_t), ea_t]
    set_segm_class = _libraries['FIXME_STUB'].set_segm_class
    set_segm_class.restype = ctypes.c_int32
    set_segm_class.argtypes = [ctypes.POINTER(struct_segment_t), ctypes.c_char_p, ctypes.c_int32]
    set_segm_end = _libraries['FIXME_STUB'].set_segm_end
    set_segm_end.restype = ctypes.c_char
    set_segm_end.argtypes = [ea_t, ea_t, ctypes.c_int32]
    set_segm_name = _libraries['FIXME_STUB'].set_segm_name
    set_segm_name.restype = ctypes.c_int32
    set_segm_name.argtypes = [ctypes.POINTER(struct_segment_t), ctypes.c_char_p, ctypes.c_int32]
    set_segm_start = _libraries['FIXME_STUB'].set_segm_start
    set_segm_start.restype = ctypes.c_char
    set_segm_start.argtypes = [ea_t, ea_t, ctypes.c_int32]
    set_segment_cmt = _libraries['FIXME_STUB'].set_segment_cmt
    set_segment_cmt.restype = None
    set_segment_cmt.argtypes = [ctypes.POINTER(struct_segment_t), ctypes.c_char_p, ctypes.c_char]
    set_segment_translations = _libraries['FIXME_STUB'].set_segment_translations
    set_segment_translations.restype = ctypes.c_char
    set_segment_translations.argtypes = [ea_t, ctypes.POINTER(eavec_t)]
    set_selector = _libraries['FIXME_STUB'].set_selector
    set_selector.restype = ctypes.c_int32
    set_selector.argtypes = [sel_t, ea_t]
    set_source_linnum = _libraries['FIXME_STUB'].set_source_linnum
    set_source_linnum.restype = None
    set_source_linnum.argtypes = [ea_t, uval_t]
    set_srcdbg_paths = _libraries['FIXME_STUB'].set_srcdbg_paths
    set_srcdbg_paths.restype = None
    set_srcdbg_paths.argtypes = [ctypes.c_char_p]
    set_srcdbg_undesired_paths = _libraries['FIXME_STUB'].set_srcdbg_undesired_paths
    set_srcdbg_undesired_paths.restype = None
    set_srcdbg_undesired_paths.argtypes = [ctypes.c_char_p]
    set_sreg_at_next_code = _libraries['FIXME_STUB'].set_sreg_at_next_code
    set_sreg_at_next_code.restype = None
    set_sreg_at_next_code.argtypes = [ea_t, ea_t, ctypes.c_int32, sel_t]
    set_step_trace_options = _libraries['FIXME_STUB'].set_step_trace_options
    set_step_trace_options.restype = None
    set_step_trace_options.argtypes = [ctypes.c_int32]
    set_str_encoding_idx = _libraries['FIXME_STUB'].set_str_encoding_idx
    set_str_encoding_idx.restype = int32
    set_str_encoding_idx.argtypes = [int32, ctypes.c_int32]
    set_str_type = _libraries['FIXME_STUB'].set_str_type
    set_str_type.restype = None
    set_str_type.argtypes = [ea_t, uint32]
    set_struc_align = _libraries['FIXME_STUB'].set_struc_align
    set_struc_align.restype = ctypes.c_char
    set_struc_align.argtypes = [ctypes.POINTER(struct_struc_t), ctypes.c_int32]
    set_struc_cmt = _libraries['FIXME_STUB'].set_struc_cmt
    set_struc_cmt.restype = ctypes.c_char
    set_struc_cmt.argtypes = [tid_t, ctypes.c_char_p, ctypes.c_char]
    set_struc_hidden = _libraries['FIXME_STUB'].set_struc_hidden
    set_struc_hidden.restype = None
    set_struc_hidden.argtypes = [ctypes.POINTER(struct_struc_t), ctypes.c_char]
    set_struc_idx = _libraries['FIXME_STUB'].set_struc_idx
    set_struc_idx.restype = ctypes.c_char
    set_struc_idx.argtypes = [ctypes.POINTER(struct_struc_t), uval_t]
    set_struc_listed = _libraries['FIXME_STUB'].set_struc_listed
    set_struc_listed.restype = None
    set_struc_listed.argtypes = [ctypes.POINTER(struct_struc_t), ctypes.c_char]
    set_struc_name = _libraries['FIXME_STUB'].set_struc_name
    set_struc_name.restype = ctypes.c_char
    set_struc_name.argtypes = [tid_t, ctypes.c_char_p]
    set_switch_info = _libraries['FIXME_STUB'].set_switch_info
    set_switch_info.restype = None
    set_switch_info.argtypes = [ea_t, ctypes.POINTER(struct_switch_info_t)]
    set_switch_parent = _libraries['FIXME_STUB'].set_switch_parent
    set_switch_parent.restype = None
    set_switch_parent.argtypes = [ea_t, ea_t]
    set_tail_owner = _libraries['FIXME_STUB'].set_tail_owner
    set_tail_owner.restype = ctypes.c_char
    set_tail_owner.argtypes = [ctypes.POINTER(struct_func_t), ea_t]
    set_target_assembler = _libraries['FIXME_STUB'].set_target_assembler
    set_target_assembler.restype = ctypes.c_char
    set_target_assembler.argtypes = [ctypes.c_int32]
    set_terminate = _libraries['FIXME_STUB'].set_terminate
    set_terminate.restype = terminate_handler
    set_terminate.argtypes = [terminate_handler]
    set_terse_struc = _libraries['FIXME_STUB'].set_terse_struc
    set_terse_struc.restype = None
    set_terse_struc.argtypes = [ea_t]
    set_tilcmt = _libraries['FIXME_STUB'].set_tilcmt
    set_tilcmt.restype = None
    set_tilcmt.argtypes = [ea_t]
    set_tinfo = _libraries['FIXME_STUB'].set_tinfo
    set_tinfo.restype = ctypes.c_char
    set_tinfo.argtypes = [ea_t, ctypes.POINTER(struct_tinfo_t)]
    set_tinfo_attr = _libraries['FIXME_STUB'].set_tinfo_attr
    set_tinfo_attr.restype = ctypes.c_char
    set_tinfo_attr.argtypes = [ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_type_attr_t), ctypes.c_char]
    set_tinfo_attrs = _libraries['FIXME_STUB'].set_tinfo_attrs
    set_tinfo_attrs.restype = ctypes.c_char
    set_tinfo_attrs.argtypes = [ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(type_attrs_t)]
    set_tinfo_property = _libraries['FIXME_STUB'].set_tinfo_property
    set_tinfo_property.restype = size_t
    set_tinfo_property.argtypes = [ctypes.POINTER(struct_tinfo_t), ctypes.c_int32, size_t]
    set_trace_base_address = _libraries['FIXME_STUB'].set_trace_base_address
    set_trace_base_address.restype = None
    set_trace_base_address.argtypes = [ea_t]
    set_trace_dynamic_register_set = _libraries['FIXME_STUB'].set_trace_dynamic_register_set
    set_trace_dynamic_register_set.restype = None
    set_trace_dynamic_register_set.argtypes = [ctypes.POINTER(struct_dynamic_register_set_t)]
    set_trace_file_desc = _libraries['FIXME_STUB'].set_trace_file_desc
    set_trace_file_desc.restype = ctypes.c_char
    set_trace_file_desc.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    set_trace_platform = _libraries['FIXME_STUB'].set_trace_platform
    set_trace_platform.restype = None
    set_trace_platform.argtypes = [ctypes.c_char_p]
    set_trace_size = _libraries['FIXME_STUB'].set_trace_size
    set_trace_size.restype = ctypes.c_char
    set_trace_size.argtypes = [ctypes.c_int32]
    set_type_alias = _libraries['FIXME_STUB'].set_type_alias
    set_type_alias.restype = ctypes.c_char
    set_type_alias.argtypes = [ctypes.POINTER(struct_til_t), uint32, uint32]
    set_type_determined_by_hexrays = _libraries['FIXME_STUB'].set_type_determined_by_hexrays
    set_type_determined_by_hexrays.restype = None
    set_type_determined_by_hexrays.argtypes = [ea_t]
    set_type_guessed_by_ida = _libraries['FIXME_STUB'].set_type_guessed_by_ida
    set_type_guessed_by_ida.restype = None
    set_type_guessed_by_ida.argtypes = [ea_t]
    set_unexpected = _libraries['FIXME_STUB'].set_unexpected
    set_unexpected.restype = unexpected_handler
    set_unexpected.argtypes = [unexpected_handler]
    set_usemodsp = _libraries['FIXME_STUB'].set_usemodsp
    set_usemodsp.restype = None
    set_usemodsp.argtypes = [ea_t]
    set_user_defined_prefix = _libraries['FIXME_STUB'].set_user_defined_prefix
    set_user_defined_prefix.restype = None
    set_user_defined_prefix.argtypes = [size_t, ctypes.CFUNCTYPE(None, ctypes.POINTER(qstring), ea_t, ctypes.c_int32, ctypes.c_int32, ctypes.c_char_p)]
    set_usersp = _libraries['FIXME_STUB'].set_usersp
    set_usersp.restype = None
    set_usersp.argtypes = [ea_t]
    set_userti = _libraries['FIXME_STUB'].set_userti
    set_userti.restype = None
    set_userti.argtypes = [ea_t]
    set_vftable_ea = _libraries['FIXME_STUB'].set_vftable_ea
    set_vftable_ea.restype = ctypes.c_char
    set_vftable_ea.argtypes = [uint32, ea_t]
    set_view_renderer_type = _libraries['FIXME_STUB'].set_view_renderer_type
    set_view_renderer_type.restype = None
    set_view_renderer_type.argtypes = [ctypes.POINTER(struct_TWidget), tcc_renderer_type_t]
    set_viewer_graph = _libraries['FIXME_STUB'].set_viewer_graph
    set_viewer_graph.restype = None
    set_viewer_graph.argtypes = [ctypes.POINTER(graph_viewer_t), ctypes.POINTER(struct_mutable_graph_t)]
    set_visible_func = _libraries['FIXME_STUB'].set_visible_func
    set_visible_func.restype = None
    set_visible_func.argtypes = [ctypes.POINTER(struct_func_t), ctypes.c_char]
    set_visible_item = _libraries['FIXME_STUB'].set_visible_item
    set_visible_item.restype = None
    set_visible_item.argtypes = [ea_t, ctypes.c_char]
    set_visible_segm = _libraries['FIXME_STUB'].set_visible_segm
    set_visible_segm.restype = None
    set_visible_segm.argtypes = [ctypes.POINTER(struct_segment_t), ctypes.c_char]
    set_xrefpos = _libraries['FIXME_STUB'].set_xrefpos
    set_xrefpos.restype = None
    set_xrefpos.argtypes = [ea_t, ctypes.POINTER(struct_xrefpos_t)]
    set_zstroff = _libraries['FIXME_STUB'].set_zstroff
    set_zstroff.restype = None
    set_zstroff.argtypes = [ea_t]
    setbuf = _libraries['FIXME_STUB'].setbuf
    setbuf.restype = None
    setbuf.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p]
    setinf = _libraries['FIXME_STUB'].setinf
    setinf.restype = ctypes.c_char
    setinf.argtypes = [inftag_t, ssize_t]
    setinf_buf = _libraries['FIXME_STUB'].setinf_buf
    setinf_buf.restype = ctypes.c_char
    setinf_buf.argtypes = [inftag_t, ctypes.POINTER(None), size_t]
    setinf_flag = _libraries['FIXME_STUB'].setinf_flag
    setinf_flag.restype = ctypes.c_char
    setinf_flag.argtypes = [inftag_t, uint32, ctypes.c_char]
    setmode = _libraries['FIXME_STUB'].setmode
    setmode.restype = ctypes.c_int32
    setmode.argtypes = [ctypes.c_int32, ctypes.c_int32]
    setup_graph_subsystem = _libraries['FIXME_STUB'].setup_graph_subsystem
    setup_graph_subsystem.restype = None
    setup_graph_subsystem.argtypes = [ctypes.c_char_p, ctypes.CFUNCTYPE(bgcolor_t, ctypes.c_int32)]
    setup_lowcnd_regfuncs = _libraries['FIXME_STUB'].setup_lowcnd_regfuncs
    setup_lowcnd_regfuncs.restype = None
    setup_lowcnd_regfuncs.argtypes = [idc_func_t, idc_func_t]
    setup_range_marker = _libraries['FIXME_STUB'].setup_range_marker
    setup_range_marker.restype = None
    setup_range_marker.argtypes = []
    setup_selector = _libraries['FIXME_STUB'].setup_selector
    setup_selector.restype = sel_t
    setup_selector.argtypes = [ea_t]
    setvbuf = _libraries['FIXME_STUB'].setvbuf
    setvbuf.restype = ctypes.c_int32
    setvbuf.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, ctypes.c_int32, size_t]
    should_ignore_micro = _libraries['FIXME_STUB'].should_ignore_micro
    should_ignore_micro.restype = ctypes.c_char
    should_ignore_micro.argtypes = [ea_t]
    show_addr = _libraries['FIXME_STUB'].show_addr
    show_addr.restype = None
    show_addr.argtypes = [ea_t]
    show_auto = _libraries['FIXME_STUB'].show_auto
    show_auto.restype = None
    show_auto.argtypes = [ea_t, atype_t]
    show_hex = _libraries['FIXME_STUB'].show_hex
    show_hex.restype = None
    show_hex.argtypes = [ctypes.POINTER(None), size_t, ctypes.c_char_p]
    show_hex_file = _libraries['FIXME_STUB'].show_hex_file
    show_hex_file.restype = None
    show_hex_file.argtypes = [ctypes.POINTER(struct_linput_t), int64, size_t, ctypes.c_char_p]
    show_name = _libraries['FIXME_STUB'].show_name
    show_name.restype = None
    show_name.argtypes = [ea_t]
    show_wait_box = _libraries['FIXME_STUB'].show_wait_box
    show_wait_box.restype = None
    show_wait_box.argtypes = [ctypes.c_char_p]
    show_wait_box_v = _libraries['FIXME_STUB'].show_wait_box_v
    show_wait_box_v.restype = None
    show_wait_box_v.argtypes = [ctypes.c_char_p, va_list]
    signbit = _libraries['FIXME_STUB'].signbit
    signbit.restype = ctypes.c_char
    signbit.argtypes = [ctypes.c_double]
    simpleline_place_t__adjust = _libraries['FIXME_STUB'].simpleline_place_t__adjust
    simpleline_place_t__adjust.restype = None
    simpleline_place_t__adjust.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(None)]
    simpleline_place_t__beginning = _libraries['FIXME_STUB'].simpleline_place_t__beginning
    simpleline_place_t__beginning.restype = ctypes.c_char
    simpleline_place_t__beginning.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(None)]
    simpleline_place_t__clone = _libraries['FIXME_STUB'].simpleline_place_t__clone
    simpleline_place_t__clone.restype = ctypes.POINTER(struct_place_t)
    simpleline_place_t__clone.argtypes = [ctypes.POINTER(struct_simpleline_place_t)]
    simpleline_place_t__compare = _libraries['FIXME_STUB'].simpleline_place_t__compare
    simpleline_place_t__compare.restype = ctypes.c_int32
    simpleline_place_t__compare.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(struct_place_t)]
    simpleline_place_t__compare2 = _libraries['FIXME_STUB'].simpleline_place_t__compare2
    simpleline_place_t__compare2.restype = ctypes.c_int32
    simpleline_place_t__compare2.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(struct_place_t), ctypes.POINTER(None)]
    simpleline_place_t__copyfrom = _libraries['FIXME_STUB'].simpleline_place_t__copyfrom
    simpleline_place_t__copyfrom.restype = None
    simpleline_place_t__copyfrom.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(struct_place_t)]
    simpleline_place_t__deserialize = _libraries['FIXME_STUB'].simpleline_place_t__deserialize
    simpleline_place_t__deserialize.restype = ctypes.c_char
    simpleline_place_t__deserialize.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    simpleline_place_t__ending = _libraries['FIXME_STUB'].simpleline_place_t__ending
    simpleline_place_t__ending.restype = ctypes.c_char
    simpleline_place_t__ending.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(None)]
    simpleline_place_t__enter = _libraries['FIXME_STUB'].simpleline_place_t__enter
    simpleline_place_t__enter.restype = ctypes.POINTER(struct_place_t)
    simpleline_place_t__enter.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(uint32)]
    simpleline_place_t__generate = _libraries['FIXME_STUB'].simpleline_place_t__generate
    simpleline_place_t__generate.restype = ctypes.c_int32
    simpleline_place_t__generate.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(qstrvec_t), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(color_t), ctypes.POINTER(bgcolor_t), ctypes.POINTER(None), ctypes.c_int32]
    simpleline_place_t__id = _libraries['FIXME_STUB'].simpleline_place_t__id
    simpleline_place_t__id.restype = ctypes.c_int32
    simpleline_place_t__id.argtypes = [ctypes.POINTER(struct_simpleline_place_t)]
    simpleline_place_t__leave = _libraries['FIXME_STUB'].simpleline_place_t__leave
    simpleline_place_t__leave.restype = None
    simpleline_place_t__leave.argtypes = [ctypes.POINTER(struct_simpleline_place_t), uint32]
    simpleline_place_t__makeplace = _libraries['FIXME_STUB'].simpleline_place_t__makeplace
    simpleline_place_t__makeplace.restype = ctypes.POINTER(struct_place_t)
    simpleline_place_t__makeplace.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(None), uval_t, ctypes.c_int32]
    simpleline_place_t__name = _libraries['FIXME_STUB'].simpleline_place_t__name
    simpleline_place_t__name.restype = ctypes.c_char_p
    simpleline_place_t__name.argtypes = [ctypes.POINTER(struct_simpleline_place_t)]
    simpleline_place_t__next = _libraries['FIXME_STUB'].simpleline_place_t__next
    simpleline_place_t__next.restype = ctypes.c_char
    simpleline_place_t__next.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(None)]
    simpleline_place_t__prev = _libraries['FIXME_STUB'].simpleline_place_t__prev
    simpleline_place_t__prev.restype = ctypes.c_char
    simpleline_place_t__prev.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(None)]
    simpleline_place_t__print = _libraries['FIXME_STUB'].simpleline_place_t__print
    simpleline_place_t__print.restype = None
    simpleline_place_t__print.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(qstring), ctypes.POINTER(None)]
    simpleline_place_t__rebase = _libraries['FIXME_STUB'].simpleline_place_t__rebase
    simpleline_place_t__rebase.restype = ctypes.c_char
    simpleline_place_t__rebase.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(struct_segm_move_infos_t)]
    simpleline_place_t__serialize = _libraries['FIXME_STUB'].simpleline_place_t__serialize
    simpleline_place_t__serialize.restype = None
    simpleline_place_t__serialize.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(struct_bytevec_t)]
    simpleline_place_t__toea = _libraries['FIXME_STUB'].simpleline_place_t__toea
    simpleline_place_t__toea.restype = ea_t
    simpleline_place_t__toea.argtypes = [ctypes.POINTER(struct_simpleline_place_t)]
    simpleline_place_t__touval = _libraries['FIXME_STUB'].simpleline_place_t__touval
    simpleline_place_t__touval.restype = uval_t
    simpleline_place_t__touval.argtypes = [ctypes.POINTER(struct_simpleline_place_t), ctypes.POINTER(None)]
    sin = _libraries['FIXME_STUB'].sin
    sin.restype = ctypes.c_double
    sin.argtypes = [ctypes.c_double]
    sinf = _libraries['FIXME_STUB'].sinf
    sinf.restype = ctypes.c_float
    sinf.argtypes = [ctypes.c_float]
    sinh = _libraries['FIXME_STUB'].sinh
    sinh.restype = ctypes.c_double
    sinh.argtypes = [ctypes.c_double]
    sinhf = _libraries['FIXME_STUB'].sinhf
    sinhf.restype = ctypes.c_float
    sinhf.argtypes = [ctypes.c_float]
    sinhl = _libraries['FIXME_STUB'].sinhl
    sinhl.restype = ctypes.c_double
    sinhl.argtypes = [ctypes.c_double]
    sinl = _libraries['FIXME_STUB'].sinl
    sinl.restype = ctypes.c_double
    sinl.argtypes = [ctypes.c_double]
    skip_spaces = _libraries['FIXME_STUB'].skip_spaces
    skip_spaces.restype = ctypes.c_char_p
    skip_spaces.argtypes = [ctypes.c_char_p]
    skip_utf8 = _libraries['FIXME_STUB'].skip_utf8
    skip_utf8.restype = size_t
    skip_utf8.argtypes = [ctypes.POINTER(ctypes.c_char_p), size_t]
    snprintf = _libraries['FIXME_STUB'].snprintf
    snprintf.restype = ctypes.c_int32
    snprintf.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    soff_to_fpoff = _libraries['FIXME_STUB'].soff_to_fpoff
    soff_to_fpoff.restype = sval_t
    soff_to_fpoff.argtypes = [ctypes.POINTER(struct_func_t), uval_t]
    sopen = _libraries['FIXME_STUB'].sopen
    sopen.restype = ctypes.c_int32
    sopen.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32]
    sort_til = _libraries['FIXME_STUB'].sort_til
    sort_til.restype = ctypes.c_char
    sort_til.argtypes = [ctypes.POINTER(struct_til_t)]
    split_sreg_range = _libraries['FIXME_STUB'].split_sreg_range
    split_sreg_range.restype = ctypes.c_char
    split_sreg_range.argtypes = [ea_t, ctypes.c_int32, sel_t, uchar, ctypes.c_char]
    sprintf = _libraries['FIXME_STUB'].sprintf
    sprintf.restype = ctypes.c_int32
    sprintf.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    sprintf_s = _libraries['FIXME_STUB'].sprintf_s
    sprintf_s.restype = ctypes.c_int32
    sprintf_s.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p]
    sqrt = _libraries['FIXME_STUB'].sqrt
    sqrt.restype = ctypes.c_double
    sqrt.argtypes = [ctypes.c_double]
    sqrtf = _libraries['FIXME_STUB'].sqrtf
    sqrtf.restype = ctypes.c_float
    sqrtf.argtypes = [ctypes.c_float]
    sqrtl = _libraries['FIXME_STUB'].sqrtl
    sqrtl.restype = ctypes.c_double
    sqrtl.argtypes = [ctypes.c_double]
    srand = _libraries['FIXME_STUB'].srand
    srand.restype = None
    srand.argtypes = [ctypes.c_uint32]
    srcdbg_request_step_into = _libraries['FIXME_STUB'].srcdbg_request_step_into
    srcdbg_request_step_into.restype = ctypes.c_char
    srcdbg_request_step_into.argtypes = []
    srcdbg_request_step_over = _libraries['FIXME_STUB'].srcdbg_request_step_over
    srcdbg_request_step_over.restype = ctypes.c_char
    srcdbg_request_step_over.argtypes = []
    srcdbg_request_step_until_ret = _libraries['FIXME_STUB'].srcdbg_request_step_until_ret
    srcdbg_request_step_until_ret.restype = ctypes.c_char
    srcdbg_request_step_until_ret.argtypes = []
    srcdbg_step_into = _libraries['FIXME_STUB'].srcdbg_step_into
    srcdbg_step_into.restype = ctypes.c_char
    srcdbg_step_into.argtypes = []
    srcdbg_step_over = _libraries['FIXME_STUB'].srcdbg_step_over
    srcdbg_step_over.restype = ctypes.c_char
    srcdbg_step_over.argtypes = []
    srcdbg_step_until_ret = _libraries['FIXME_STUB'].srcdbg_step_until_ret
    srcdbg_step_until_ret.restype = ctypes.c_char
    srcdbg_step_until_ret.argtypes = []
    sscanf = _libraries['FIXME_STUB'].sscanf
    sscanf.restype = ctypes.c_int32
    sscanf.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    sscanf_s = _libraries['FIXME_STUB'].sscanf_s
    sscanf_s.restype = ctypes.c_int32
    sscanf_s.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    start_process = _libraries['FIXME_STUB'].start_process
    start_process.restype = ctypes.c_int32
    start_process.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p]
    std_out_segm_footer = _libraries['FIXME_STUB'].std_out_segm_footer
    std_out_segm_footer.restype = None
    std_out_segm_footer.argtypes = [ctypes.POINTER(struct_outctx_t), ctypes.POINTER(struct_segment_t)]
    step_into = _libraries['FIXME_STUB'].step_into
    step_into.restype = ctypes.c_char
    step_into.argtypes = []
    step_over = _libraries['FIXME_STUB'].step_over
    step_over.restype = ctypes.c_char
    step_over.argtypes = []
    step_until_ret = _libraries['FIXME_STUB'].step_until_ret
    step_until_ret.restype = ctypes.c_char
    step_until_ret.argtypes = []
    stkvar_flag = _libraries['FIXME_STUB'].stkvar_flag
    stkvar_flag.restype = flags_t
    stkvar_flag.argtypes = []
    stoa = _libraries['FIXME_STUB'].stoa
    stoa.restype = size_t
    stoa.argtypes = [ctypes.POINTER(qstring), ea_t, sel_t]
    stod = _libraries['FIXME_STUB'].stod
    stod.restype = ctypes.c_double
    stod.argtypes = [ctypes.POINTER(std__wstring), ctypes.POINTER(size_t)]
    stof = _libraries['FIXME_STUB'].stof
    stof.restype = ctypes.c_float
    stof.argtypes = [ctypes.POINTER(std__wstring), ctypes.POINTER(size_t)]
    stoi = _libraries['FIXME_STUB'].stoi
    stoi.restype = ctypes.c_int32
    stoi.argtypes = [ctypes.POINTER(std__wstring), ctypes.POINTER(size_t), ctypes.c_int32]
    stol = _libraries['FIXME_STUB'].stol
    stol.restype = ctypes.c_int32
    stol.argtypes = [ctypes.POINTER(std__wstring), ctypes.POINTER(size_t), ctypes.c_int32]
    stold = _libraries['FIXME_STUB'].stold
    stold.restype = ctypes.c_double
    stold.argtypes = [ctypes.POINTER(std__wstring), ctypes.POINTER(size_t)]
    stoll = _libraries['FIXME_STUB'].stoll
    stoll.restype = ctypes.c_int64
    stoll.argtypes = [ctypes.POINTER(std__wstring), ctypes.POINTER(size_t), ctypes.c_int32]
    store_exceptions = _libraries['FIXME_STUB'].store_exceptions
    store_exceptions.restype = ctypes.c_char
    store_exceptions.argtypes = []
    store_til = _libraries['FIXME_STUB'].store_til
    store_til.restype = ctypes.c_char
    store_til.argtypes = [ctypes.POINTER(struct_til_t), ctypes.c_char_p, ctypes.c_char_p]
    stoul = _libraries['FIXME_STUB'].stoul
    stoul.restype = ctypes.c_uint32
    stoul.argtypes = [ctypes.POINTER(std__wstring), ctypes.POINTER(size_t), ctypes.c_int32]
    stoull = _libraries['FIXME_STUB'].stoull
    stoull.restype = ctypes.c_uint64
    stoull.argtypes = [ctypes.POINTER(std__wstring), ctypes.POINTER(size_t), ctypes.c_int32]
    str2ea = _libraries['FIXME_STUB'].str2ea
    str2ea.restype = ctypes.c_char
    str2ea.argtypes = [ctypes.POINTER(ea_t), ctypes.c_char_p, ea_t]
    str2ea_ex = _libraries['FIXME_STUB'].str2ea_ex
    str2ea_ex.restype = ctypes.c_char
    str2ea_ex.argtypes = [ctypes.POINTER(ea_t), ctypes.c_char_p, ea_t, ctypes.c_int32]
    str2reg = _libraries['FIXME_STUB'].str2reg
    str2reg.restype = ctypes.c_int32
    str2reg.argtypes = [ctypes.c_char_p]
    str2user = _libraries['FIXME_STUB'].str2user
    str2user.restype = ctypes.c_char_p
    str2user.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    strarray = _libraries['FIXME_STUB'].strarray
    strarray.restype = ctypes.c_char_p
    strarray.argtypes = [ctypes.POINTER(struct_strarray_t), size_t, ctypes.c_int32]
    strcat = _libraries['FIXME_STUB'].strcat
    strcat.restype = ctypes.c_char_p
    strcat.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    strcat_s = _libraries['FIXME_STUB'].strcat_s
    strcat_s.restype = errno_t
    strcat_s.argtypes = [ctypes.c_char_p, rsize_t, ctypes.c_char_p]
    strchr = _libraries['FIXME_STUB'].strchr
    strchr.restype = ctypes.c_char_p
    strchr.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    strcmp = _libraries['FIXME_STUB'].strcmp
    strcmp.restype = ctypes.c_int32
    strcmp.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    strcmpi = _libraries['FIXME_STUB'].strcmpi
    strcmpi.restype = ctypes.c_int32
    strcmpi.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    strcoll = _libraries['FIXME_STUB'].strcoll
    strcoll.restype = ctypes.c_int32
    strcoll.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    strcpy = _libraries['FIXME_STUB'].strcpy
    strcpy.restype = ctypes.c_char_p
    strcpy.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    strcpy_s = _libraries['FIXME_STUB'].strcpy_s
    strcpy_s.restype = errno_t
    strcpy_s.argtypes = [ctypes.c_char_p, rsize_t, ctypes.c_char_p]
    strcspn = _libraries['FIXME_STUB'].strcspn
    strcspn.restype = size_t
    strcspn.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    strdup = _libraries['FIXME_STUB'].strdup
    strdup.restype = ctypes.c_char_p
    strdup.argtypes = [ctypes.c_char_p]
    strerror = _libraries['FIXME_STUB'].strerror
    strerror.restype = ctypes.c_char_p
    strerror.argtypes = [ctypes.c_int32]
    strerror_s = _libraries['FIXME_STUB'].strerror_s
    strerror_s.restype = errno_t
    strerror_s.argtypes = [ctypes.c_char_p, size_t, ctypes.c_int32]
    strftime = _libraries['FIXME_STUB'].strftime
    strftime.restype = size_t
    strftime.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, ctypes.POINTER(struct_tm)]
    stricmp = _libraries['FIXME_STUB'].stricmp
    stricmp.restype = ctypes.c_int32
    stricmp.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    stristr = _libraries['FIXME_STUB'].stristr
    stristr.restype = ctypes.c_char_p
    stristr.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    strlen = _libraries['FIXME_STUB'].strlen
    strlen.restype = size_t
    strlen.argtypes = [ctypes.c_char_p]
    strlit_flag = _libraries['FIXME_STUB'].strlit_flag
    strlit_flag.restype = flags_t
    strlit_flag.argtypes = []
    strlwr = _libraries['FIXME_STUB'].strlwr
    strlwr.restype = ctypes.c_char_p
    strlwr.argtypes = [ctypes.c_char_p]
    strncat = _libraries['FIXME_STUB'].strncat
    strncat.restype = ctypes.c_char_p
    strncat.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    strncat_s = _libraries['FIXME_STUB'].strncat_s
    strncat_s.restype = errno_t
    strncat_s.argtypes = [ctypes.c_char_p, rsize_t, ctypes.c_char_p, rsize_t]
    strncmp = _libraries['FIXME_STUB'].strncmp
    strncmp.restype = ctypes.c_int32
    strncmp.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    strncpy = _libraries['FIXME_STUB'].strncpy
    strncpy.restype = ctypes.c_char_p
    strncpy.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    strncpy_s = _libraries['FIXME_STUB'].strncpy_s
    strncpy_s.restype = errno_t
    strncpy_s.argtypes = [ctypes.c_char_p, rsize_t, ctypes.c_char_p, rsize_t]
    strnicmp = _libraries['FIXME_STUB'].strnicmp
    strnicmp.restype = ctypes.c_int32
    strnicmp.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    strnlen = _libraries['FIXME_STUB'].strnlen
    strnlen.restype = size_t
    strnlen.argtypes = [ctypes.c_char_p, size_t]
    strnset = _libraries['FIXME_STUB'].strnset
    strnset.restype = ctypes.c_char_p
    strnset.argtypes = [ctypes.c_char_p, ctypes.c_int32, size_t]
    stroff_as_size = _libraries['FIXME_STUB'].stroff_as_size
    stroff_as_size.restype = ctypes.c_char
    stroff_as_size.argtypes = [ctypes.c_int32, ctypes.POINTER(struct_struc_t), asize_t]
    stroff_flag = _libraries['FIXME_STUB'].stroff_flag
    stroff_flag.restype = flags_t
    stroff_flag.argtypes = []
    strpbrk = _libraries['FIXME_STUB'].strpbrk
    strpbrk.restype = ctypes.c_char_p
    strpbrk.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    strrchr = _libraries['FIXME_STUB'].strrchr
    strrchr.restype = ctypes.c_char_p
    strrchr.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    strrev = _libraries['FIXME_STUB'].strrev
    strrev.restype = ctypes.c_char_p
    strrev.argtypes = [ctypes.c_char_p]
    strrpl = _libraries['FIXME_STUB'].strrpl
    strrpl.restype = ctypes.c_char_p
    strrpl.argtypes = [ctypes.c_char_p, ctypes.c_int32, ctypes.c_int32]
    strset = _libraries['FIXME_STUB'].strset
    strset.restype = ctypes.c_char_p
    strset.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    strspn = _libraries['FIXME_STUB'].strspn
    strspn.restype = size_t
    strspn.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    strstr = _libraries['FIXME_STUB'].strstr
    strstr.restype = ctypes.c_char_p
    strstr.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    strtod = _libraries['FIXME_STUB'].strtod
    strtod.restype = ctypes.c_double
    strtod.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p)]
    strtof = _libraries['FIXME_STUB'].strtof
    strtof.restype = ctypes.c_float
    strtof.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p)]
    strtok = _libraries['FIXME_STUB'].strtok
    strtok.restype = ctypes.c_char_p
    strtok.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    strtok_s = _libraries['FIXME_STUB'].strtok_s
    strtok_s.restype = ctypes.c_char_p
    strtok_s.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p)]
    strtol = _libraries['FIXME_STUB'].strtol
    strtol.restype = ctypes.c_int32
    strtol.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32]
    strtold = _libraries['FIXME_STUB'].strtold
    strtold.restype = ctypes.c_double
    strtold.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p)]
    strtoll = _libraries['FIXME_STUB'].strtoll
    strtoll.restype = ctypes.c_int64
    strtoll.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32]
    strtoul = _libraries['FIXME_STUB'].strtoul
    strtoul.restype = ctypes.c_uint32
    strtoul.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32]
    strtoull = _libraries['FIXME_STUB'].strtoull
    strtoull.restype = ctypes.c_uint64
    strtoull.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p), ctypes.c_int32]
    stru_flag = _libraries['FIXME_STUB'].stru_flag
    stru_flag.restype = flags_t
    stru_flag.argtypes = []
    structplace_t__adjust = _libraries['FIXME_STUB'].structplace_t__adjust
    structplace_t__adjust.restype = None
    structplace_t__adjust.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(None)]
    structplace_t__beginning = _libraries['FIXME_STUB'].structplace_t__beginning
    structplace_t__beginning.restype = ctypes.c_char
    structplace_t__beginning.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(None)]
    structplace_t__clone = _libraries['FIXME_STUB'].structplace_t__clone
    structplace_t__clone.restype = ctypes.POINTER(struct_place_t)
    structplace_t__clone.argtypes = [ctypes.POINTER(struct_structplace_t)]
    structplace_t__compare = _libraries['FIXME_STUB'].structplace_t__compare
    structplace_t__compare.restype = ctypes.c_int32
    structplace_t__compare.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(struct_place_t)]
    structplace_t__compare2 = _libraries['FIXME_STUB'].structplace_t__compare2
    structplace_t__compare2.restype = ctypes.c_int32
    structplace_t__compare2.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(struct_place_t), ctypes.POINTER(None)]
    structplace_t__copyfrom = _libraries['FIXME_STUB'].structplace_t__copyfrom
    structplace_t__copyfrom.restype = None
    structplace_t__copyfrom.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(struct_place_t)]
    structplace_t__deserialize = _libraries['FIXME_STUB'].structplace_t__deserialize
    structplace_t__deserialize.restype = ctypes.c_char
    structplace_t__deserialize.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    structplace_t__ending = _libraries['FIXME_STUB'].structplace_t__ending
    structplace_t__ending.restype = ctypes.c_char
    structplace_t__ending.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(None)]
    structplace_t__enter = _libraries['FIXME_STUB'].structplace_t__enter
    structplace_t__enter.restype = ctypes.POINTER(struct_place_t)
    structplace_t__enter.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(uint32)]
    structplace_t__generate = _libraries['FIXME_STUB'].structplace_t__generate
    structplace_t__generate.restype = ctypes.c_int32
    structplace_t__generate.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(qstrvec_t), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(color_t), ctypes.POINTER(bgcolor_t), ctypes.POINTER(None), ctypes.c_int32]
    structplace_t__id = _libraries['FIXME_STUB'].structplace_t__id
    structplace_t__id.restype = ctypes.c_int32
    structplace_t__id.argtypes = [ctypes.POINTER(struct_structplace_t)]
    structplace_t__leave = _libraries['FIXME_STUB'].structplace_t__leave
    structplace_t__leave.restype = None
    structplace_t__leave.argtypes = [ctypes.POINTER(struct_structplace_t), uint32]
    structplace_t__makeplace = _libraries['FIXME_STUB'].structplace_t__makeplace
    structplace_t__makeplace.restype = ctypes.POINTER(struct_place_t)
    structplace_t__makeplace.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(None), uval_t, ctypes.c_int32]
    structplace_t__name = _libraries['FIXME_STUB'].structplace_t__name
    structplace_t__name.restype = ctypes.c_char_p
    structplace_t__name.argtypes = [ctypes.POINTER(struct_structplace_t)]
    structplace_t__next = _libraries['FIXME_STUB'].structplace_t__next
    structplace_t__next.restype = ctypes.c_char
    structplace_t__next.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(None)]
    structplace_t__prev = _libraries['FIXME_STUB'].structplace_t__prev
    structplace_t__prev.restype = ctypes.c_char
    structplace_t__prev.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(None)]
    structplace_t__print = _libraries['FIXME_STUB'].structplace_t__print
    structplace_t__print.restype = None
    structplace_t__print.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(qstring), ctypes.POINTER(None)]
    structplace_t__rebase = _libraries['FIXME_STUB'].structplace_t__rebase
    structplace_t__rebase.restype = ctypes.c_char
    structplace_t__rebase.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(struct_segm_move_infos_t)]
    structplace_t__serialize = _libraries['FIXME_STUB'].structplace_t__serialize
    structplace_t__serialize.restype = None
    structplace_t__serialize.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(struct_bytevec_t)]
    structplace_t__toea = _libraries['FIXME_STUB'].structplace_t__toea
    structplace_t__toea.restype = ea_t
    structplace_t__toea.argtypes = [ctypes.POINTER(struct_structplace_t)]
    structplace_t__touval = _libraries['FIXME_STUB'].structplace_t__touval
    structplace_t__touval.restype = uval_t
    structplace_t__touval.argtypes = [ctypes.POINTER(struct_structplace_t), ctypes.POINTER(None)]
    strupr = _libraries['FIXME_STUB'].strupr
    strupr.restype = ctypes.c_char_p
    strupr.argtypes = [ctypes.c_char_p]
    strxfrm = _libraries['FIXME_STUB'].strxfrm
    strxfrm.restype = size_t
    strxfrm.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    suspend_process = _libraries['FIXME_STUB'].suspend_process
    suspend_process.restype = ctypes.c_char
    suspend_process.argtypes = []
    suspend_thread = _libraries['FIXME_STUB'].suspend_thread
    suspend_thread.restype = ctypes.c_int32
    suspend_thread.argtypes = [thid_t]
    swab = _libraries['FIXME_STUB'].swab
    swab.restype = None
    swab.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32]
    swap = _libraries['FIXME_STUB'].swap
    swap.restype = None
    swap.argtypes = []
    swap128 = _libraries['FIXME_STUB'].swap128
    swap128.restype = None
    swap128.argtypes = [ctypes.POINTER(struct_uint128)]
    swap16 = _libraries['FIXME_STUB'].swap16
    swap16.restype = ushort
    swap16.argtypes = [ushort]
    swap32 = _libraries['FIXME_STUB'].swap32
    swap32.restype = uint32
    swap32.argtypes = [uint32]
    swap64 = _libraries['FIXME_STUB'].swap64
    swap64.restype = longlong
    swap64.argtypes = [longlong]
    swap_idcvs = _libraries['FIXME_STUB'].swap_idcvs
    swap_idcvs.restype = None
    swap_idcvs.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_idc_value_t)]
    swap_value = _libraries['FIXME_STUB'].swap_value
    swap_value.restype = None
    swap_value.argtypes = [ctypes.POINTER(None), ctypes.POINTER(None), ctypes.c_int32]
    switch_dbctx = _libraries['FIXME_STUB'].switch_dbctx
    switch_dbctx.restype = ctypes.POINTER(struct_dbctx_t)
    switch_dbctx.argtypes = [size_t]
    switch_to_golang = _libraries['FIXME_STUB'].switch_to_golang
    switch_to_golang.restype = None
    switch_to_golang.argtypes = []
    swprintf = _libraries['FIXME_STUB'].swprintf
    swprintf.restype = ctypes.c_int32
    swprintf.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    swprintf_s = _libraries['FIXME_STUB'].swprintf_s
    swprintf_s.restype = ctypes.c_int32
    swprintf_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16)]
    swscanf = _libraries['FIXME_STUB'].swscanf
    swscanf.restype = ctypes.c_int32
    swscanf.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    swscanf_s = _libraries['FIXME_STUB'].swscanf_s
    swscanf_s.restype = ctypes.c_int32
    swscanf_s.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    sync_sources = _libraries['FIXME_STUB'].sync_sources
    sync_sources.restype = ctypes.c_char
    sync_sources.argtypes = [ctypes.POINTER(struct_sync_source_t), ctypes.POINTER(struct_sync_source_t), ctypes.c_char]
    system = _libraries['FIXME_STUB'].system
    system.restype = ctypes.c_int32
    system.argtypes = [ctypes.c_char_p]
    tag_addr = _libraries['FIXME_STUB'].tag_addr
    tag_addr.restype = None
    tag_addr.argtypes = [ctypes.POINTER(qstring), ea_t, ctypes.c_char]
    tag_advance = _libraries['FIXME_STUB'].tag_advance
    tag_advance.restype = ctypes.c_char_p
    tag_advance.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    tag_remove = _libraries['FIXME_STUB'].tag_remove
    tag_remove.restype = ssize_t
    tag_remove.argtypes = [ctypes.POINTER(qstring), ctypes.c_int32]
    tag_skipcode = _libraries['FIXME_STUB'].tag_skipcode
    tag_skipcode.restype = ctypes.c_char_p
    tag_skipcode.argtypes = [ctypes.c_char_p]
    tag_skipcodes = _libraries['FIXME_STUB'].tag_skipcodes
    tag_skipcodes.restype = ctypes.c_char_p
    tag_skipcodes.argtypes = [ctypes.c_char_p]
    tag_strlen = _libraries['FIXME_STUB'].tag_strlen
    tag_strlen.restype = ssize_t
    tag_strlen.argtypes = [ctypes.c_char_p]
    tail = _libraries['FIXME_STUB'].tail
    tail.restype = ctypes.c_char_p
    tail.argtypes = [ctypes.c_char_p]
    take_database_snapshot = _libraries['FIXME_STUB'].take_database_snapshot
    take_database_snapshot.restype = ctypes.c_char
    take_database_snapshot.argtypes = [ctypes.POINTER(struct_snapshot_t), ctypes.POINTER(qstring)]
    take_memory_snapshot = _libraries['FIXME_STUB'].take_memory_snapshot
    take_memory_snapshot.restype = ctypes.c_char
    take_memory_snapshot.argtypes = [ctypes.c_char]
    tan = _libraries['FIXME_STUB'].tan
    tan.restype = ctypes.c_double
    tan.argtypes = [ctypes.c_double]
    tanf = _libraries['FIXME_STUB'].tanf
    tanf.restype = ctypes.c_float
    tanf.argtypes = [ctypes.c_float]
    tanh = _libraries['FIXME_STUB'].tanh
    tanh.restype = ctypes.c_double
    tanh.argtypes = [ctypes.c_double]
    tanhf = _libraries['FIXME_STUB'].tanhf
    tanhf.restype = ctypes.c_float
    tanhf.argtypes = [ctypes.c_float]
    tanhl = _libraries['FIXME_STUB'].tanhl
    tanhl.restype = ctypes.c_double
    tanhl.argtypes = [ctypes.c_double]
    tanl = _libraries['FIXME_STUB'].tanl
    tanl.restype = ctypes.c_double
    tanl.argtypes = [ctypes.c_double]
    tbyte_flag = _libraries['FIXME_STUB'].tbyte_flag
    tbyte_flag.restype = flags_t
    tbyte_flag.argtypes = []
    tell = _libraries['FIXME_STUB'].tell
    tell.restype = ctypes.c_int32
    tell.argtypes = [ctypes.c_int32]
    tempnam = _libraries['FIXME_STUB'].tempnam
    tempnam.restype = ctypes.c_char_p
    tempnam.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    term_database = _libraries['FIXME_STUB'].term_database
    term_database.restype = None
    term_database.argtypes = []
    term_ignore_micro = _libraries['FIXME_STUB'].term_ignore_micro
    term_ignore_micro.restype = None
    term_ignore_micro.argtypes = []
    term_plugins = _libraries['FIXME_STUB'].term_plugins
    term_plugins.restype = None
    term_plugins.argtypes = [ctypes.c_int32]
    term_process = _libraries['FIXME_STUB'].term_process
    term_process.restype = ctypes.c_int32
    term_process.argtypes = [ctypes.POINTER(None)]
    terminate = _libraries['FIXME_STUB'].terminate
    terminate.restype = None
    terminate.argtypes = []
    test_bit = _libraries['FIXME_STUB'].test_bit
    test_bit.restype = ctypes.c_char
    test_bit.argtypes = [ctypes.POINTER(uchar), size_t]
    tgamma = _libraries['FIXME_STUB'].tgamma
    tgamma.restype = ctypes.c_double
    tgamma.argtypes = [ctypes.c_double]
    tgammaf = _libraries['FIXME_STUB'].tgammaf
    tgammaf.restype = ctypes.c_float
    tgammaf.argtypes = [ctypes.c_float]
    tgammal = _libraries['FIXME_STUB'].tgammal
    tgammal.restype = ctypes.c_double
    tgammal.argtypes = [ctypes.c_double]
    throw_idc_exception = _libraries['FIXME_STUB'].throw_idc_exception
    throw_idc_exception.restype = error_t
    throw_idc_exception.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.c_char_p]
    tmpfile = _libraries['FIXME_STUB'].tmpfile
    tmpfile.restype = ctypes.POINTER(FILE)
    tmpfile.argtypes = []
    tmpfile_s = _libraries['FIXME_STUB'].tmpfile_s
    tmpfile_s.restype = errno_t
    tmpfile_s.argtypes = [ctypes.POINTER(ctypes.POINTER(FILE))]
    tmpnam = _libraries['FIXME_STUB'].tmpnam
    tmpnam.restype = ctypes.c_char_p
    tmpnam.argtypes = [ctypes.c_char_p]
    tmpnam_s = _libraries['FIXME_STUB'].tmpnam_s
    tmpnam_s.restype = errno_t
    tmpnam_s.argtypes = [ctypes.c_char_p, rsize_t]
    to_ea = _libraries['FIXME_STUB'].to_ea
    to_ea.restype = ea_t
    to_ea.argtypes = [sel_t, uval_t]
    to_string = _libraries['FIXME_STUB'].to_string
    to_string.restype = std__string
    to_string.argtypes = [ctypes.c_double]
    to_wstring = _libraries['FIXME_STUB'].to_wstring
    to_wstring.restype = std__wstring
    to_wstring.argtypes = [ctypes.c_double]
    toggle_bnot = _libraries['FIXME_STUB'].toggle_bnot
    toggle_bnot.restype = ctypes.c_char
    toggle_bnot.argtypes = [ea_t, ctypes.c_int32]
    toggle_lzero = _libraries['FIXME_STUB'].toggle_lzero
    toggle_lzero.restype = ctypes.c_char
    toggle_lzero.argtypes = [ea_t, ctypes.c_int32]
    toggle_sign = _libraries['FIXME_STUB'].toggle_sign
    toggle_sign.restype = ctypes.c_char
    toggle_sign.argtypes = [ea_t, ctypes.c_int32]
    tolower = _libraries['FIXME_STUB'].tolower
    tolower.restype = ctypes.c_int32
    tolower.argtypes = [ctypes.c_int32]
    toupper = _libraries['FIXME_STUB'].toupper
    toupper.restype = ctypes.c_int32
    toupper.argtypes = [ctypes.c_int32]
    towlower = _libraries['FIXME_STUB'].towlower
    towlower.restype = wint_t
    towlower.argtypes = [wint_t]
    towupper = _libraries['FIXME_STUB'].towupper
    towupper.restype = wint_t
    towupper.argtypes = [wint_t]
    track_value_until_address_jpt = _libraries['FIXME_STUB'].track_value_until_address_jpt
    track_value_until_address_jpt.restype = ctypes.c_char
    track_value_until_address_jpt.argtypes = [ctypes.POINTER(struct_jump_pattern_t), ctypes.POINTER(struct_op_t), ea_t]
    trim = _libraries['FIXME_STUB'].trim
    trim.restype = ctypes.c_char_p
    trim.argtypes = [ctypes.c_char_p]
    trim_jtable = _libraries['FIXME_STUB'].trim_jtable
    trim_jtable.restype = None
    trim_jtable.argtypes = [ctypes.POINTER(struct_switch_info_t), ea_t, ctypes.c_char]
    trunc = _libraries['FIXME_STUB'].trunc
    trunc.restype = ctypes.c_double
    trunc.argtypes = [ctypes.c_double]
    truncf = _libraries['FIXME_STUB'].truncf
    truncf.restype = ctypes.c_float
    truncf.argtypes = [ctypes.c_float]
    truncl = _libraries['FIXME_STUB'].truncl
    truncl.restype = ctypes.c_double
    truncl.argtypes = [ctypes.c_double]
    try_to_add_libfunc = _libraries['FIXME_STUB'].try_to_add_libfunc
    try_to_add_libfunc.restype = ctypes.c_int32
    try_to_add_libfunc.argtypes = [ea_t]
    tzset = _libraries['FIXME_STUB'].tzset
    tzset.restype = None
    tzset.argtypes = []
    ui_load_new_file = _libraries['FIXME_STUB'].ui_load_new_file
    ui_load_new_file.restype = ctypes.c_char
    ui_load_new_file.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(qstring), ctypes.POINTER(ctypes.POINTER(struct_linput_t)), ushort, ctypes.POINTER(ctypes.POINTER(struct_load_info_t))]
    ui_run_debugger = _libraries['FIXME_STUB'].ui_run_debugger
    ui_run_debugger.restype = ctypes.c_char
    ui_run_debugger.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32, ctypes.POINTER(ctypes.c_char_p)]
    ultoa = _libraries['FIXME_STUB'].ultoa
    ultoa.restype = ctypes.c_char_p
    ultoa.argtypes = [ctypes.c_uint32, ctypes.c_char_p, ctypes.c_int32]
    umask = _libraries['FIXME_STUB'].umask
    umask.restype = ctypes.c_int32
    umask.argtypes = [ctypes.c_int32]
    uncaught_exception = _libraries['FIXME_STUB'].uncaught_exception
    uncaught_exception.restype = ctypes.c_char
    uncaught_exception.argtypes = []
    uncaught_exceptions = _libraries['FIXME_STUB'].uncaught_exceptions
    uncaught_exceptions.restype = ctypes.c_int32
    uncaught_exceptions.argtypes = []
    under_debugger = (ctypes.c_char).in_dll(_libraries['FIXME_STUB'], 'under_debugger') if getattr(_libraries['FIXME_STUB'], 'under_debugger', None) else None
    unexpected = _libraries['FIXME_STUB'].unexpected
    unexpected.restype = None
    unexpected.argtypes = []
    unget_token = _libraries['FIXME_STUB'].unget_token
    unget_token.restype = None
    unget_token.argtypes = [ctypes.POINTER(struct_token_t), ctypes.POINTER(tokenstack_t)]
    ungetc = _libraries['FIXME_STUB'].ungetc
    ungetc.restype = ctypes.c_int32
    ungetc.argtypes = [ctypes.c_int32, ctypes.POINTER(FILE)]
    ungetwc = _libraries['FIXME_STUB'].ungetwc
    ungetwc.restype = wint_t
    ungetwc.argtypes = [wint_t, ctypes.POINTER(FILE)]
    unhide_border = _libraries['FIXME_STUB'].unhide_border
    unhide_border.restype = None
    unhide_border.argtypes = [ea_t]
    unhide_item = _libraries['FIXME_STUB'].unhide_item
    unhide_item.restype = None
    unhide_item.argtypes = [ea_t]
    unhook_event_listener = _libraries['FIXME_STUB'].unhook_event_listener
    unhook_event_listener.restype = ctypes.c_char
    unhook_event_listener.argtypes = [hook_type_t, ctypes.POINTER(struct_event_listener_t)]
    unhook_from_notification_point = _libraries['FIXME_STUB'].unhook_from_notification_point
    unhook_from_notification_point.restype = ctypes.c_int32
    unhook_from_notification_point.argtypes = [hook_type_t, hook_cb_t, ctypes.POINTER(None)]
    unlink = _libraries['FIXME_STUB'].unlink
    unlink.restype = ctypes.c_int32
    unlink.argtypes = [ctypes.c_char_p]
    unlock_dbgmem_config = _libraries['FIXME_STUB'].unlock_dbgmem_config
    unlock_dbgmem_config.restype = None
    unlock_dbgmem_config.argtypes = []
    unmake_linput = _libraries['FIXME_STUB'].unmake_linput
    unmake_linput.restype = None
    unmake_linput.argtypes = [ctypes.POINTER(struct_linput_t)]
    unmark_selection = _libraries['FIXME_STUB'].unmark_selection
    unmark_selection.restype = None
    unmark_selection.argtypes = []
    unpack_buf = _libraries['FIXME_STUB'].unpack_buf
    unpack_buf.restype = ctypes.POINTER(None)
    unpack_buf.argtypes = [ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_buf_inplace = _libraries['FIXME_STUB'].unpack_buf_inplace
    unpack_buf_inplace.restype = ctypes.POINTER(None)
    unpack_buf_inplace.argtypes = [ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_bytevec = _libraries['FIXME_STUB'].unpack_bytevec
    unpack_bytevec.restype = ctypes.c_char
    unpack_bytevec.argtypes = [ctypes.POINTER(struct_bytevec_t), ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_db = _libraries['FIXME_STUB'].unpack_db
    unpack_db.restype = uchar
    unpack_db.argtypes = [ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_dd = _libraries['FIXME_STUB'].unpack_dd
    unpack_dd.restype = uint32
    unpack_dd.argtypes = [ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_dq = _libraries['FIXME_STUB'].unpack_dq
    unpack_dq.restype = uint64
    unpack_dq.argtypes = [ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_ds = _libraries['FIXME_STUB'].unpack_ds
    unpack_ds.restype = ctypes.c_char_p
    unpack_ds.argtypes = [ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar), ctypes.c_char]
    unpack_ds_to_buf = _libraries['FIXME_STUB'].unpack_ds_to_buf
    unpack_ds_to_buf.restype = ctypes.c_char
    unpack_ds_to_buf.argtypes = [ctypes.c_char_p, size_t, ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_dw = _libraries['FIXME_STUB'].unpack_dw
    unpack_dw.restype = ushort
    unpack_dw.argtypes = [ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_ea = _libraries['FIXME_STUB'].unpack_ea
    unpack_ea.restype = ea_t
    unpack_ea.argtypes = [ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_ea64 = _libraries['FIXME_STUB'].unpack_ea64
    unpack_ea64.restype = ea64_t
    unpack_ea64.argtypes = [ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_eavec = _libraries['FIXME_STUB'].unpack_eavec
    unpack_eavec.restype = None
    unpack_eavec.argtypes = [ctypes.POINTER(eavec_t), ea_t, ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_idcobj_from_bv = _libraries['FIXME_STUB'].unpack_idcobj_from_bv
    unpack_idcobj_from_bv.restype = error_t
    unpack_idcobj_from_bv.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_tinfo_t), ctypes.POINTER(struct_bytevec_t), ctypes.c_int32]
    unpack_idcobj_from_idb = _libraries['FIXME_STUB'].unpack_idcobj_from_idb
    unpack_idcobj_from_idb.restype = error_t
    unpack_idcobj_from_idb.argtypes = [ctypes.POINTER(struct_idc_value_t), ctypes.POINTER(struct_tinfo_t), ea_t, ctypes.POINTER(struct_bytevec_t), ctypes.c_int32]
    unpack_memory = _libraries['FIXME_STUB'].unpack_memory
    unpack_memory.restype = ctypes.c_char
    unpack_memory.argtypes = [ctypes.POINTER(None), size_t, ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_obj = _libraries['FIXME_STUB'].unpack_obj
    unpack_obj.restype = ctypes.POINTER(None)
    unpack_obj.argtypes = [ctypes.POINTER(None), size_t, ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_obj_inplace = _libraries['FIXME_STUB'].unpack_obj_inplace
    unpack_obj_inplace.restype = ctypes.POINTER(None)
    unpack_obj_inplace.argtypes = [ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar), size_t]
    unpack_regvals = _libraries['FIXME_STUB'].unpack_regvals
    unpack_regvals.restype = None
    unpack_regvals.argtypes = [ctypes.POINTER(struct_regval_t), ctypes.c_int32, ctypes.POINTER(uchar), ctypes.POINTER(struct_memory_deserializer_t)]
    unpack_str = _libraries['FIXME_STUB'].unpack_str
    unpack_str.restype = ctypes.c_char
    unpack_str.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unpack_xleb128 = _libraries['FIXME_STUB'].unpack_xleb128
    unpack_xleb128.restype = ctypes.c_char
    unpack_xleb128.argtypes = [ctypes.POINTER(None), ctypes.c_int32, ctypes.c_char, ctypes.POINTER(ctypes.POINTER(uchar)), ctypes.POINTER(uchar)]
    unregister_action = _libraries['FIXME_STUB'].unregister_action
    unregister_action.restype = ctypes.c_char
    unregister_action.argtypes = [ctypes.c_char_p]
    unregister_custom_data_format = _libraries['FIXME_STUB'].unregister_custom_data_format
    unregister_custom_data_format.restype = ctypes.c_char
    unregister_custom_data_format.argtypes = [ctypes.c_int32]
    unregister_custom_data_type = _libraries['FIXME_STUB'].unregister_custom_data_type
    unregister_custom_data_type.restype = ctypes.c_char
    unregister_custom_data_type.argtypes = [ctypes.c_int32]
    unregister_custom_fixup = _libraries['FIXME_STUB'].unregister_custom_fixup
    unregister_custom_fixup.restype = ctypes.c_char
    unregister_custom_fixup.argtypes = [fixup_type_t]
    unregister_custom_refinfo = _libraries['FIXME_STUB'].unregister_custom_refinfo
    unregister_custom_refinfo.restype = ctypes.c_char
    unregister_custom_refinfo.argtypes = [ctypes.c_int32]
    unregister_post_event_visitor = _libraries['FIXME_STUB'].unregister_post_event_visitor
    unregister_post_event_visitor.restype = ctypes.c_char
    unregister_post_event_visitor.argtypes = [hook_type_t, ctypes.POINTER(struct_post_event_visitor_t)]
    unregister_srcinfo_provider = _libraries['FIXME_STUB'].unregister_srcinfo_provider
    unregister_srcinfo_provider.restype = ctypes.c_char
    unregister_srcinfo_provider.argtypes = [ctypes.POINTER(struct_srcinfo_provider_t)]
    unregister_timer = _libraries['FIXME_STUB'].unregister_timer
    unregister_timer.restype = ctypes.c_char
    unregister_timer.argtypes = [qtimer_t]
    upd_abits = _libraries['FIXME_STUB'].upd_abits
    upd_abits.restype = None
    upd_abits.argtypes = [ea_t, aflags_t, aflags_t]
    update_action_checkable = _libraries['FIXME_STUB'].update_action_checkable
    update_action_checkable.restype = ctypes.c_char
    update_action_checkable.argtypes = [ctypes.c_char_p, ctypes.c_char]
    update_action_checked = _libraries['FIXME_STUB'].update_action_checked
    update_action_checked.restype = ctypes.c_char
    update_action_checked.argtypes = [ctypes.c_char_p, ctypes.c_char]
    update_action_icon = _libraries['FIXME_STUB'].update_action_icon
    update_action_icon.restype = ctypes.c_char
    update_action_icon.argtypes = [ctypes.c_char_p, ctypes.c_int32]
    update_action_label = _libraries['FIXME_STUB'].update_action_label
    update_action_label.restype = ctypes.c_char
    update_action_label.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    update_action_shortcut = _libraries['FIXME_STUB'].update_action_shortcut
    update_action_shortcut.restype = ctypes.c_char
    update_action_shortcut.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    update_action_state = _libraries['FIXME_STUB'].update_action_state
    update_action_state.restype = ctypes.c_char
    update_action_state.argtypes = [ctypes.c_char_p, action_state_t]
    update_action_tooltip = _libraries['FIXME_STUB'].update_action_tooltip
    update_action_tooltip.restype = ctypes.c_char
    update_action_tooltip.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    update_action_visibility = _libraries['FIXME_STUB'].update_action_visibility
    update_action_visibility.restype = ctypes.c_char
    update_action_visibility.argtypes = [ctypes.c_char_p, ctypes.c_char]
    update_bpt = _libraries['FIXME_STUB'].update_bpt
    update_bpt.restype = ctypes.c_char
    update_bpt.argtypes = [ctypes.POINTER(struct_bpt_t)]
    update_extra_cmt = _libraries['FIXME_STUB'].update_extra_cmt
    update_extra_cmt.restype = None
    update_extra_cmt.argtypes = [ea_t, ctypes.c_int32, ctypes.c_char_p]
    update_fpd = _libraries['FIXME_STUB'].update_fpd
    update_fpd.restype = ctypes.c_char
    update_fpd.argtypes = [ctypes.POINTER(struct_func_t), asize_t]
    update_func = _libraries['FIXME_STUB'].update_func
    update_func.restype = ctypes.c_char
    update_func.argtypes = [ctypes.POINTER(struct_func_t)]
    update_hidden_range = _libraries['FIXME_STUB'].update_hidden_range
    update_hidden_range.restype = ctypes.c_char
    update_hidden_range.argtypes = [ctypes.POINTER(struct_hidden_range_t)]
    update_segm = _libraries['FIXME_STUB'].update_segm
    update_segm.restype = ctypes.c_char
    update_segm.argtypes = [ctypes.POINTER(struct_segment_t)]
    update_snapshot_attributes = _libraries['FIXME_STUB'].update_snapshot_attributes
    update_snapshot_attributes.restype = ctypes.c_char
    update_snapshot_attributes.argtypes = [ctypes.c_char_p, ctypes.POINTER(struct_snapshot_t), ctypes.POINTER(struct_snapshot_t), ctypes.c_int32]
    use_golang_cc = _libraries['FIXME_STUB'].use_golang_cc
    use_golang_cc.restype = ctypes.c_char
    use_golang_cc.argtypes = []
    use_mapping = _libraries['FIXME_STUB'].use_mapping
    use_mapping.restype = ea_t
    use_mapping.argtypes = [ea_t]
    user2bin = _libraries['FIXME_STUB'].user2bin
    user2bin.restype = ctypes.c_int32
    user2bin.argtypes = [ctypes.POINTER(uchar), ctypes.POINTER(uchar), ea_t, ctypes.c_char_p, ctypes.c_int32, ctypes.c_char]
    user2qstr = _libraries['FIXME_STUB'].user2qstr
    user2qstr.restype = None
    user2qstr.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(qstring)]
    user2str = _libraries['FIXME_STUB'].user2str
    user2str.restype = ctypes.c_char_p
    user2str.argtypes = [ctypes.c_char_p, ctypes.c_char_p, size_t]
    user_cancelled = _libraries['FIXME_STUB'].user_cancelled
    user_cancelled.restype = ctypes.c_char
    user_cancelled.argtypes = []
    uses_aflag_modsp = _libraries['FIXME_STUB'].uses_aflag_modsp
    uses_aflag_modsp.restype = ctypes.c_char
    uses_aflag_modsp.argtypes = [aflags_t]
    uses_modsp = _libraries['FIXME_STUB'].uses_modsp
    uses_modsp.restype = ctypes.c_char
    uses_modsp.argtypes = [ea_t]
    utf16_surrogates_to_cp = _libraries['FIXME_STUB'].utf16_surrogates_to_cp
    utf16_surrogates_to_cp.restype = wchar32_t
    utf16_surrogates_to_cp.argtypes = [wchar16_t, wchar16_t]
    utf16_utf8 = _libraries['FIXME_STUB'].utf16_utf8
    utf16_utf8.restype = ctypes.c_char
    utf16_utf8.argtypes = [ctypes.POINTER(qstring), ctypes.POINTER(wchar16_t), ctypes.c_int32]
    utf8_utf16 = _libraries['FIXME_STUB'].utf8_utf16
    utf8_utf16.restype = ctypes.c_char
    utf8_utf16.argtypes = [ctypes.POINTER(qwstring), ctypes.c_char_p, ctypes.c_int32]
    utf8_wchar16 = _libraries['FIXME_STUB'].utf8_wchar16
    utf8_wchar16.restype = wchar16_t
    utf8_wchar16.argtypes = [uchar, uchar, uchar]
    utf8_wchar32 = _libraries['FIXME_STUB'].utf8_wchar32
    utf8_wchar32.restype = wchar32_t
    utf8_wchar32.argtypes = [uchar, uchar, uchar, uchar]
    vadd_extra_line = _libraries['FIXME_STUB'].vadd_extra_line
    vadd_extra_line.restype = ctypes.c_char
    vadd_extra_line.argtypes = [ea_t, ctypes.c_int32, ctypes.c_char_p, va_list]
    validate_idb_names = _libraries['FIXME_STUB'].validate_idb_names
    validate_idb_names.restype = ctypes.c_int32
    validate_idb_names.argtypes = []
    validate_idb_names2 = _libraries['FIXME_STUB'].validate_idb_names2
    validate_idb_names2.restype = ctypes.c_int32
    validate_idb_names2.argtypes = [ctypes.c_char]
    validate_name = _libraries['FIXME_STUB'].validate_name
    validate_name.restype = ctypes.c_char
    validate_name.argtypes = [ctypes.POINTER(qstring), nametype_t, ctypes.c_int32]
    vask_buttons = _libraries['FIXME_STUB'].vask_buttons
    vask_buttons.restype = ctypes.c_int32
    vask_buttons.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int32, ctypes.c_char_p, va_list]
    vask_file = _libraries['FIXME_STUB'].vask_file
    vask_file.restype = ctypes.c_char_p
    vask_file.argtypes = [ctypes.c_char, ctypes.c_char_p, ctypes.c_char_p, va_list]
    vask_form = _libraries['FIXME_STUB'].vask_form
    vask_form.restype = ctypes.c_int32
    vask_form.argtypes = [ctypes.c_char_p, va_list]
    vask_str = _libraries['FIXME_STUB'].vask_str
    vask_str.restype = ctypes.c_char
    vask_str.argtypes = [ctypes.POINTER(qstring), ctypes.c_int32, ctypes.c_char_p, va_list]
    vask_text = _libraries['FIXME_STUB'].vask_text
    vask_text.restype = ctypes.c_char
    vask_text.argtypes = [ctypes.POINTER(qstring), size_t, ctypes.c_char_p, ctypes.c_char_p, va_list]
    vask_yn = _libraries['FIXME_STUB'].vask_yn
    vask_yn.restype = ctypes.c_int32
    vask_yn.argtypes = [ctypes.c_int32, help_t, va_list]
    verify_argloc = _libraries['FIXME_STUB'].verify_argloc
    verify_argloc.restype = ctypes.c_int32
    verify_argloc.argtypes = [ctypes.POINTER(struct_argloc_t), ctypes.c_int32, ctypes.POINTER(struct_rangeset_t)]
    verify_tinfo = _libraries['FIXME_STUB'].verify_tinfo
    verify_tinfo.restype = ctypes.c_int32
    verify_tinfo.argtypes = [uint32]
    verror = _libraries['FIXME_STUB'].verror
    verror.restype = None
    verror.argtypes = [ctypes.c_char_p, va_list]
    vfprintf = _libraries['FIXME_STUB'].vfprintf
    vfprintf.restype = ctypes.c_int32
    vfprintf.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, va_list]
    vfprintf_s = _libraries['FIXME_STUB'].vfprintf_s
    vfprintf_s.restype = ctypes.c_int32
    vfprintf_s.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, va_list]
    vfscanf = _libraries['FIXME_STUB'].vfscanf
    vfscanf.restype = ctypes.c_int32
    vfscanf.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, va_list]
    vfscanf_s = _libraries['FIXME_STUB'].vfscanf_s
    vfscanf_s.restype = ctypes.c_int32
    vfscanf_s.argtypes = [ctypes.POINTER(FILE), ctypes.c_char_p, va_list]
    vfwprintf = _libraries['FIXME_STUB'].vfwprintf
    vfwprintf.restype = ctypes.c_int32
    vfwprintf.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), va_list]
    vfwprintf_s = _libraries['FIXME_STUB'].vfwprintf_s
    vfwprintf_s.restype = ctypes.c_int32
    vfwprintf_s.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), va_list]
    vfwscanf = _libraries['FIXME_STUB'].vfwscanf
    vfwscanf.restype = ctypes.c_int32
    vfwscanf.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), va_list]
    vfwscanf_s = _libraries['FIXME_STUB'].vfwscanf_s
    vfwscanf_s.restype = ctypes.c_int32
    vfwscanf_s.argtypes = [ctypes.POINTER(FILE), ctypes.POINTER(ctypes.c_int16), va_list]
    viewer_attach_menu_item = _libraries['FIXME_STUB'].viewer_attach_menu_item
    viewer_attach_menu_item.restype = ctypes.c_char
    viewer_attach_menu_item.argtypes = [ctypes.POINTER(graph_viewer_t), ctypes.c_char_p]
    viewer_center_on = _libraries['FIXME_STUB'].viewer_center_on
    viewer_center_on.restype = None
    viewer_center_on.argtypes = [ctypes.POINTER(graph_viewer_t), ctypes.c_int32]
    viewer_create_groups = _libraries['FIXME_STUB'].viewer_create_groups
    viewer_create_groups.restype = ctypes.c_char
    viewer_create_groups.argtypes = [ctypes.POINTER(graph_viewer_t), ctypes.POINTER(intvec_t), ctypes.POINTER(groups_crinfos_t)]
    viewer_del_node_info = _libraries['FIXME_STUB'].viewer_del_node_info
    viewer_del_node_info.restype = None
    viewer_del_node_info.argtypes = [ctypes.POINTER(graph_viewer_t), ctypes.c_int32]
    viewer_delete_groups = _libraries['FIXME_STUB'].viewer_delete_groups
    viewer_delete_groups.restype = ctypes.c_char
    viewer_delete_groups.argtypes = [ctypes.POINTER(graph_viewer_t), ctypes.POINTER(intvec_t), ctypes.c_int32]
    viewer_fit_window = _libraries['FIXME_STUB'].viewer_fit_window
    viewer_fit_window.restype = None
    viewer_fit_window.argtypes = [ctypes.POINTER(graph_viewer_t)]
    viewer_get_curnode = _libraries['FIXME_STUB'].viewer_get_curnode
    viewer_get_curnode.restype = ctypes.c_int32
    viewer_get_curnode.argtypes = [ctypes.POINTER(graph_viewer_t)]
    viewer_get_gli = _libraries['FIXME_STUB'].viewer_get_gli
    viewer_get_gli.restype = ctypes.c_char
    viewer_get_gli.argtypes = [ctypes.POINTER(struct_graph_location_info_t), ctypes.POINTER(graph_viewer_t), uint32]
    viewer_get_node_info = _libraries['FIXME_STUB'].viewer_get_node_info
    viewer_get_node_info.restype = ctypes.c_char
    viewer_get_node_info.argtypes = [ctypes.POINTER(graph_viewer_t), ctypes.POINTER(struct_node_info_t), ctypes.c_int32]
    viewer_get_selection = _libraries['FIXME_STUB'].viewer_get_selection
    viewer_get_selection.restype = ctypes.c_char
    viewer_get_selection.argtypes = [ctypes.POINTER(graph_viewer_t), ctypes.POINTER(struct_screen_graph_selection_t)]
    viewer_set_gli = _libraries['FIXME_STUB'].viewer_set_gli
    viewer_set_gli.restype = None
    viewer_set_gli.argtypes = [ctypes.POINTER(graph_viewer_t), ctypes.POINTER(struct_graph_location_info_t), uint32]
    viewer_set_groups_visibility = _libraries['FIXME_STUB'].viewer_set_groups_visibility
    viewer_set_groups_visibility.restype = ctypes.c_char
    viewer_set_groups_visibility.argtypes = [ctypes.POINTER(graph_viewer_t), ctypes.POINTER(intvec_t), ctypes.c_char, ctypes.c_int32]
    viewer_set_node_info = _libraries['FIXME_STUB'].viewer_set_node_info
    viewer_set_node_info.restype = None
    viewer_set_node_info.argtypes = [ctypes.POINTER(graph_viewer_t), ctypes.c_int32, ctypes.POINTER(struct_node_info_t), uint32]
    viewer_set_titlebar_height = _libraries['FIXME_STUB'].viewer_set_titlebar_height
    viewer_set_titlebar_height.restype = ctypes.c_int32
    viewer_set_titlebar_height.argtypes = [ctypes.POINTER(graph_viewer_t), ctypes.c_int32]
    vinfo = _libraries['FIXME_STUB'].vinfo
    vinfo.restype = None
    vinfo.argtypes = [ctypes.c_char_p, va_list]
    visit_patched_bytes = _libraries['FIXME_STUB'].visit_patched_bytes
    visit_patched_bytes.restype = ctypes.c_int32
    visit_patched_bytes.argtypes = [ea_t, ea_t, ctypes.CFUNCTYPE(ctypes.c_int32, ea_t, int64, uint64, uint64, ctypes.POINTER(None)), ctypes.POINTER(None)]
    visit_snapshot_tree = _libraries['FIXME_STUB'].visit_snapshot_tree
    visit_snapshot_tree.restype = ctypes.c_int32
    visit_snapshot_tree.argtypes = [ctypes.POINTER(struct_snapshot_t), ctypes.CFUNCTYPE(ctypes.c_int32, ctypes.POINTER(struct_snapshot_t), ctypes.POINTER(None)), ctypes.POINTER(None)]
    visit_stroff_fields = _libraries['FIXME_STUB'].visit_stroff_fields
    visit_stroff_fields.restype = flags_t
    visit_stroff_fields.argtypes = [ctypes.POINTER(struct_struct_field_visitor_t), ctypes.POINTER(tid_t), ctypes.c_int32, ctypes.POINTER(adiff_t), ctypes.c_char]
    visit_subtypes = _libraries['FIXME_STUB'].visit_subtypes
    visit_subtypes.restype = ctypes.c_int32
    visit_subtypes.argtypes = [ctypes.POINTER(struct_tinfo_visitor_t), ctypes.POINTER(struct_type_mods_t), ctypes.POINTER(struct_tinfo_t), ctypes.c_char_p, ctypes.c_char_p]
    vloader_failure = _libraries['FIXME_STUB'].vloader_failure
    vloader_failure.restype = None
    vloader_failure.argtypes = [ctypes.c_char_p, va_list]
    vmsg = _libraries['FIXME_STUB'].vmsg
    vmsg.restype = ctypes.c_int32
    vmsg.argtypes = [ctypes.c_char_p, va_list]
    vnomem = _libraries['FIXME_STUB'].vnomem
    vnomem.restype = None
    vnomem.argtypes = [ctypes.c_char_p, va_list]
    vopen_form = _libraries['FIXME_STUB'].vopen_form
    vopen_form.restype = ctypes.POINTER(struct_TWidget)
    vopen_form.argtypes = [ctypes.c_char_p, uint32, va_list]
    vprintf = _libraries['FIXME_STUB'].vprintf
    vprintf.restype = ctypes.c_int32
    vprintf.argtypes = [ctypes.c_char_p, va_list]
    vprintf_s = _libraries['FIXME_STUB'].vprintf_s
    vprintf_s.restype = ctypes.c_int32
    vprintf_s.argtypes = [ctypes.c_char_p, va_list]
    vqmakepath = _libraries['FIXME_STUB'].vqmakepath
    vqmakepath.restype = ctypes.c_char_p
    vqmakepath.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, va_list]
    vqperror = _libraries['FIXME_STUB'].vqperror
    vqperror.restype = None
    vqperror.argtypes = [ctypes.c_char_p, va_list]
    vscanf = _libraries['FIXME_STUB'].vscanf
    vscanf.restype = ctypes.c_int32
    vscanf.argtypes = [ctypes.c_char_p, va_list]
    vscanf_s = _libraries['FIXME_STUB'].vscanf_s
    vscanf_s.restype = ctypes.c_int32
    vscanf_s.argtypes = [ctypes.c_char_p, va_list]
    vshow_hex = _libraries['FIXME_STUB'].vshow_hex
    vshow_hex.restype = None
    vshow_hex.argtypes = [ctypes.POINTER(None), size_t, ctypes.c_char_p, va_list]
    vshow_hex_file = _libraries['FIXME_STUB'].vshow_hex_file
    vshow_hex_file.restype = None
    vshow_hex_file.argtypes = [ctypes.POINTER(struct_linput_t), int64, size_t, ctypes.c_char_p, va_list]
    vsnprintf = _libraries['FIXME_STUB'].vsnprintf
    vsnprintf.restype = ctypes.c_int32
    vsnprintf.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, va_list]
    vsnprintf_s = _libraries['FIXME_STUB'].vsnprintf_s
    vsnprintf_s.restype = ctypes.c_int32
    vsnprintf_s.argtypes = [ctypes.c_char_p, size_t, size_t, ctypes.c_char_p, va_list]
    vsprintf = _libraries['FIXME_STUB'].vsprintf
    vsprintf.restype = ctypes.c_int32
    vsprintf.argtypes = [ctypes.c_char_p, ctypes.c_char_p, va_list]
    vsprintf_s = _libraries['FIXME_STUB'].vsprintf_s
    vsprintf_s.restype = ctypes.c_int32
    vsprintf_s.argtypes = [ctypes.c_char_p, size_t, ctypes.c_char_p, va_list]
    vsscanf = _libraries['FIXME_STUB'].vsscanf
    vsscanf.restype = ctypes.c_int32
    vsscanf.argtypes = [ctypes.c_char_p, ctypes.c_char_p, va_list]
    vsscanf_s = _libraries['FIXME_STUB'].vsscanf_s
    vsscanf_s.restype = ctypes.c_int32
    vsscanf_s.argtypes = [ctypes.c_char_p, ctypes.c_char_p, va_list]
    vswprintf = _libraries['FIXME_STUB'].vswprintf
    vswprintf.restype = ctypes.c_int32
    vswprintf.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), va_list]
    vswprintf_s = _libraries['FIXME_STUB'].vswprintf_s
    vswprintf_s.restype = ctypes.c_int32
    vswprintf_s.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), va_list]
    vswscanf = _libraries['FIXME_STUB'].vswscanf
    vswscanf.restype = ctypes.c_int32
    vswscanf.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), va_list]
    vswscanf_s = _libraries['FIXME_STUB'].vswscanf_s
    vswscanf_s.restype = ctypes.c_int32
    vswscanf_s.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), va_list]
    vwarning = _libraries['FIXME_STUB'].vwarning
    vwarning.restype = None
    vwarning.argtypes = [ctypes.c_char_p, va_list]
    vwprintf = _libraries['FIXME_STUB'].vwprintf
    vwprintf.restype = ctypes.c_int32
    vwprintf.argtypes = [ctypes.POINTER(ctypes.c_int16), va_list]
    vwprintf_s = _libraries['FIXME_STUB'].vwprintf_s
    vwprintf_s.restype = ctypes.c_int32
    vwprintf_s.argtypes = [ctypes.POINTER(ctypes.c_int16), va_list]
    vwscanf = _libraries['FIXME_STUB'].vwscanf
    vwscanf.restype = ctypes.c_int32
    vwscanf.argtypes = [ctypes.POINTER(ctypes.c_int16), va_list]
    vwscanf_s = _libraries['FIXME_STUB'].vwscanf_s
    vwscanf_s.restype = ctypes.c_int32
    vwscanf_s.argtypes = [ctypes.POINTER(ctypes.c_int16), va_list]
    wait_for_next_event = _libraries['FIXME_STUB'].wait_for_next_event
    wait_for_next_event.restype = dbg_event_code_t
    wait_for_next_event.argtypes = [ctypes.c_int32, ctypes.c_int32]
    warning = _libraries['FIXME_STUB'].warning
    warning.restype = None
    warning.argtypes = [ctypes.c_char_p]
    was_ida_decision = _libraries['FIXME_STUB'].was_ida_decision
    was_ida_decision.restype = ctypes.c_char
    was_ida_decision.argtypes = [ea_t]
    wcrtomb = _libraries['FIXME_STUB'].wcrtomb
    wcrtomb.restype = size_t
    wcrtomb.argtypes = [ctypes.c_char_p, ctypes.c_int16, ctypes.POINTER(mbstate_t)]
    wcrtomb_s = _libraries['FIXME_STUB'].wcrtomb_s
    wcrtomb_s.restype = errno_t
    wcrtomb_s.argtypes = [ctypes.POINTER(size_t), ctypes.c_char_p, size_t, ctypes.c_int16, ctypes.POINTER(mbstate_t)]
    wcscat = _libraries['FIXME_STUB'].wcscat
    wcscat.restype = ctypes.POINTER(ctypes.c_int16)
    wcscat.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    wcscat_s = _libraries['FIXME_STUB'].wcscat_s
    wcscat_s.restype = errno_t
    wcscat_s.argtypes = [ctypes.POINTER(ctypes.c_int16), rsize_t, ctypes.POINTER(ctypes.c_int16)]
    wcschr = _libraries['FIXME_STUB'].wcschr
    wcschr.restype = ctypes.POINTER(ctypes.c_int16)
    wcschr.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16]
    wcscmp = _libraries['FIXME_STUB'].wcscmp
    wcscmp.restype = ctypes.c_int32
    wcscmp.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    wcscoll = _libraries['FIXME_STUB'].wcscoll
    wcscoll.restype = ctypes.c_int32
    wcscoll.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    wcscpy = _libraries['FIXME_STUB'].wcscpy
    wcscpy.restype = ctypes.POINTER(ctypes.c_int16)
    wcscpy.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    wcscpy_s = _libraries['FIXME_STUB'].wcscpy_s
    wcscpy_s.restype = errno_t
    wcscpy_s.argtypes = [ctypes.POINTER(ctypes.c_int16), rsize_t, ctypes.POINTER(ctypes.c_int16)]
    wcscspn = _libraries['FIXME_STUB'].wcscspn
    wcscspn.restype = size_t
    wcscspn.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    wcsdup = _libraries['FIXME_STUB'].wcsdup
    wcsdup.restype = ctypes.POINTER(ctypes.c_int16)
    wcsdup.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    wcsftime = _libraries['FIXME_STUB'].wcsftime
    wcsftime.restype = size_t
    wcsftime.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t, ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(struct_tm)]
    wcsicmp = _libraries['FIXME_STUB'].wcsicmp
    wcsicmp.restype = ctypes.c_int32
    wcsicmp.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    wcsicoll = _libraries['FIXME_STUB'].wcsicoll
    wcsicoll.restype = ctypes.c_int32
    wcsicoll.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    wcslen = _libraries['FIXME_STUB'].wcslen
    wcslen.restype = size_t
    wcslen.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    wcslwr = _libraries['FIXME_STUB'].wcslwr
    wcslwr.restype = ctypes.POINTER(ctypes.c_int16)
    wcslwr.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    wcsncat = _libraries['FIXME_STUB'].wcsncat
    wcsncat.restype = ctypes.POINTER(ctypes.c_int16)
    wcsncat.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t]
    wcsncat_s = _libraries['FIXME_STUB'].wcsncat_s
    wcsncat_s.restype = errno_t
    wcsncat_s.argtypes = [ctypes.POINTER(ctypes.c_int16), rsize_t, ctypes.POINTER(ctypes.c_int16), rsize_t]
    wcsncmp = _libraries['FIXME_STUB'].wcsncmp
    wcsncmp.restype = ctypes.c_int32
    wcsncmp.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t]
    wcsncpy = _libraries['FIXME_STUB'].wcsncpy
    wcsncpy.restype = ctypes.POINTER(ctypes.c_int16)
    wcsncpy.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t]
    wcsncpy_s = _libraries['FIXME_STUB'].wcsncpy_s
    wcsncpy_s.restype = errno_t
    wcsncpy_s.argtypes = [ctypes.POINTER(ctypes.c_int16), rsize_t, ctypes.POINTER(ctypes.c_int16), rsize_t]
    wcsnicmp = _libraries['FIXME_STUB'].wcsnicmp
    wcsnicmp.restype = ctypes.c_int32
    wcsnicmp.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t]
    wcsnlen = _libraries['FIXME_STUB'].wcsnlen
    wcsnlen.restype = size_t
    wcsnlen.argtypes = [ctypes.POINTER(ctypes.c_int16), size_t]
    wcsnset = _libraries['FIXME_STUB'].wcsnset
    wcsnset.restype = ctypes.POINTER(ctypes.c_int16)
    wcsnset.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16, size_t]
    wcspbrk = _libraries['FIXME_STUB'].wcspbrk
    wcspbrk.restype = ctypes.POINTER(ctypes.c_int16)
    wcspbrk.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    wcsrchr = _libraries['FIXME_STUB'].wcsrchr
    wcsrchr.restype = ctypes.POINTER(ctypes.c_int16)
    wcsrchr.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16]
    wcsrev = _libraries['FIXME_STUB'].wcsrev
    wcsrev.restype = ctypes.POINTER(ctypes.c_int16)
    wcsrev.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    wcsrtombs = _libraries['FIXME_STUB'].wcsrtombs
    wcsrtombs.restype = size_t
    wcsrtombs.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), size_t, ctypes.POINTER(mbstate_t)]
    wcsrtombs_s = _libraries['FIXME_STUB'].wcsrtombs_s
    wcsrtombs_s.restype = errno_t
    wcsrtombs_s.argtypes = [ctypes.POINTER(size_t), ctypes.c_char_p, size_t, ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), size_t, ctypes.POINTER(mbstate_t)]
    wcsset = _libraries['FIXME_STUB'].wcsset
    wcsset.restype = ctypes.POINTER(ctypes.c_int16)
    wcsset.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16]
    wcsspn = _libraries['FIXME_STUB'].wcsspn
    wcsspn.restype = size_t
    wcsspn.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    wcsstr = _libraries['FIXME_STUB'].wcsstr
    wcsstr.restype = ctypes.POINTER(ctypes.c_int16)
    wcsstr.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    wcstod = _libraries['FIXME_STUB'].wcstod
    wcstod.restype = ctypes.c_double
    wcstod.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))]
    wcstof = _libraries['FIXME_STUB'].wcstof
    wcstof.restype = ctypes.c_float
    wcstof.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))]
    wcstok = _libraries['FIXME_STUB'].wcstok
    wcstok.restype = ctypes.POINTER(ctypes.c_int16)
    wcstok.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16)]
    wcstok_s = _libraries['FIXME_STUB'].wcstok_s
    wcstok_s.restype = ctypes.POINTER(ctypes.c_int16)
    wcstok_s.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))]
    wcstol = _libraries['FIXME_STUB'].wcstol
    wcstol.restype = ctypes.c_int32
    wcstol.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.c_int32]
    wcstold = _libraries['FIXME_STUB'].wcstold
    wcstold.restype = ctypes.c_double
    wcstold.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16))]
    wcstoll = _libraries['FIXME_STUB'].wcstoll
    wcstoll.restype = ctypes.c_int64
    wcstoll.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.c_int32]
    wcstombs = _libraries['FIXME_STUB'].wcstombs
    wcstombs.restype = size_t
    wcstombs.argtypes = [ctypes.c_char_p, ctypes.POINTER(ctypes.c_int16), size_t]
    wcstombs_s = _libraries['FIXME_STUB'].wcstombs_s
    wcstombs_s.restype = errno_t
    wcstombs_s.argtypes = [ctypes.POINTER(size_t), ctypes.c_char_p, size_t, ctypes.POINTER(ctypes.c_int16), size_t]
    wcstoul = _libraries['FIXME_STUB'].wcstoul
    wcstoul.restype = ctypes.c_uint32
    wcstoul.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.c_int32]
    wcstoull = _libraries['FIXME_STUB'].wcstoull
    wcstoull.restype = ctypes.c_uint64
    wcstoull.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.POINTER(ctypes.c_int16)), ctypes.c_int32]
    wcsupr = _libraries['FIXME_STUB'].wcsupr
    wcsupr.restype = ctypes.POINTER(ctypes.c_int16)
    wcsupr.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    wcsxfrm = _libraries['FIXME_STUB'].wcsxfrm
    wcsxfrm.restype = size_t
    wcsxfrm.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t]
    wctob = _libraries['FIXME_STUB'].wctob
    wctob.restype = ctypes.c_int32
    wctob.argtypes = [wint_t]
    wctomb = _libraries['FIXME_STUB'].wctomb
    wctomb.restype = ctypes.c_int32
    wctomb.argtypes = [ctypes.c_char_p, ctypes.c_int16]
    wctomb_s = _libraries['FIXME_STUB'].wctomb_s
    wctomb_s.restype = errno_t
    wctomb_s.argtypes = [ctypes.POINTER(ctypes.c_int32), ctypes.c_char_p, rsize_t, ctypes.c_int16]
    wildcard_match = _libraries['FIXME_STUB'].wildcard_match
    wildcard_match.restype = ctypes.c_char
    wildcard_match.argtypes = [ctypes.c_char_p, ctypes.c_char_p]
    winerr = _libraries['FIXME_STUB'].winerr
    winerr.restype = ctypes.c_char_p
    winerr.argtypes = [ctypes.c_int32]
    wmemchr = _libraries['FIXME_STUB'].wmemchr
    wmemchr.restype = ctypes.POINTER(ctypes.c_int16)
    wmemchr.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16, size_t]
    wmemcmp = _libraries['FIXME_STUB'].wmemcmp
    wmemcmp.restype = ctypes.c_int32
    wmemcmp.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t]
    wmemcpy = _libraries['FIXME_STUB'].wmemcpy
    wmemcpy.restype = ctypes.POINTER(ctypes.c_int16)
    wmemcpy.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t]
    wmemcpy_s = _libraries['FIXME_STUB'].wmemcpy_s
    wmemcpy_s.restype = errno_t
    wmemcpy_s.argtypes = [ctypes.POINTER(ctypes.c_int16), rsize_t, ctypes.POINTER(ctypes.c_int16), rsize_t]
    wmemmove = _libraries['FIXME_STUB'].wmemmove
    wmemmove.restype = ctypes.POINTER(ctypes.c_int16)
    wmemmove.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.POINTER(ctypes.c_int16), size_t]
    wmemmove_s = _libraries['FIXME_STUB'].wmemmove_s
    wmemmove_s.restype = errno_t
    wmemmove_s.argtypes = [ctypes.POINTER(ctypes.c_int16), rsize_t, ctypes.POINTER(ctypes.c_int16), rsize_t]
    wmemset = _libraries['FIXME_STUB'].wmemset
    wmemset.restype = ctypes.POINTER(ctypes.c_int16)
    wmemset.argtypes = [ctypes.POINTER(ctypes.c_int16), ctypes.c_int16, size_t]
    word_flag = _libraries['FIXME_STUB'].word_flag
    word_flag.restype = flags_t
    word_flag.argtypes = []
    wprintf = _libraries['FIXME_STUB'].wprintf
    wprintf.restype = ctypes.c_int32
    wprintf.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    wprintf_s = _libraries['FIXME_STUB'].wprintf_s
    wprintf_s.restype = ctypes.c_int32
    wprintf_s.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    write = _libraries['FIXME_STUB'].write
    write.restype = ctypes.c_int32
    write.argtypes = [ctypes.c_int32, ctypes.POINTER(None), ctypes.c_uint32]
    write_dbg_memory = _libraries['FIXME_STUB'].write_dbg_memory
    write_dbg_memory.restype = ssize_t
    write_dbg_memory.argtypes = [ea_t, ctypes.POINTER(None), size_t]
    write_struc_path = _libraries['FIXME_STUB'].write_struc_path
    write_struc_path.restype = None
    write_struc_path.argtypes = [ea_t, ctypes.c_int32, ctypes.POINTER(tid_t), ctypes.c_int32, adiff_t]
    write_tinfo_bitfield_value = _libraries['FIXME_STUB'].write_tinfo_bitfield_value
    write_tinfo_bitfield_value.restype = uint64
    write_tinfo_bitfield_value.argtypes = [uint32, uint64, uint64, ctypes.c_int32]
    writebytes = _libraries['FIXME_STUB'].writebytes
    writebytes.restype = ctypes.c_int32
    writebytes.argtypes = [ctypes.c_int32, uint32, ctypes.c_int32, ctypes.c_char]
    wscanf = _libraries['FIXME_STUB'].wscanf
    wscanf.restype = ctypes.c_int32
    wscanf.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    wscanf_s = _libraries['FIXME_STUB'].wscanf_s
    wscanf_s.restype = ctypes.c_int32
    wscanf_s.argtypes = [ctypes.POINTER(ctypes.c_int16)]
    xrefblk_t_first_from = _libraries['FIXME_STUB'].xrefblk_t_first_from
    xrefblk_t_first_from.restype = ctypes.c_char
    xrefblk_t_first_from.argtypes = [ctypes.POINTER(struct_xrefblk_t), ea_t, ctypes.c_int32]
    xrefblk_t_first_to = _libraries['FIXME_STUB'].xrefblk_t_first_to
    xrefblk_t_first_to.restype = ctypes.c_char
    xrefblk_t_first_to.argtypes = [ctypes.POINTER(struct_xrefblk_t), ea_t, ctypes.c_int32]
    xrefblk_t_next_from = _libraries['FIXME_STUB'].xrefblk_t_next_from
    xrefblk_t_next_from.restype = ctypes.c_char
    xrefblk_t_next_from.argtypes = [ctypes.POINTER(struct_xrefblk_t)]
    xrefblk_t_next_to = _libraries['FIXME_STUB'].xrefblk_t_next_to
    xrefblk_t_next_to.restype = ctypes.c_char
    xrefblk_t_next_to.argtypes = [ctypes.POINTER(struct_xrefblk_t)]
    xrefchar = _libraries['FIXME_STUB'].xrefchar
    xrefchar.restype = ctypes.c_char
    xrefchar.argtypes = [ctypes.c_char]
    y0 = _libraries['FIXME_STUB'].y0
    y0.restype = ctypes.c_double
    y0.argtypes = [ctypes.c_double]
    y1 = _libraries['FIXME_STUB'].y1
    y1.restype = ctypes.c_double
    y1.argtypes = [ctypes.c_double]
    yn = _libraries['FIXME_STUB'].yn
    yn.restype = ctypes.c_double
    yn.argtypes = [ctypes.c_int32, ctypes.c_double]
    yword_flag = _libraries['FIXME_STUB'].yword_flag
    yword_flag.restype = flags_t
    yword_flag.argtypes = []
    zip_deflate = _libraries['FIXME_STUB'].zip_deflate
    zip_deflate.restype = ctypes.c_int32
    zip_deflate.argtypes = [ctypes.POINTER(None), ctypes.CFUNCTYPE(ssize_t, ctypes.POINTER(None), ctypes.POINTER(None), size_t), ctypes.CFUNCTYPE(ssize_t, ctypes.POINTER(None), ctypes.POINTER(None), size_t)]
    zip_inflate = _libraries['FIXME_STUB'].zip_inflate
    zip_inflate.restype = ctypes.c_int32
    zip_inflate.argtypes = [ctypes.POINTER(None), ctypes.CFUNCTYPE(ssize_t, ctypes.POINTER(None), ctypes.POINTER(None), size_t), ctypes.CFUNCTYPE(ssize_t, ctypes.POINTER(None), ctypes.POINTER(None), size_t)]
    zword_flag = _libraries['FIXME_STUB'].zword_flag
    zword_flag.restype = flags_t
    zword_flag.argtypes = []
    __all__ = \
        ['AA_CHECKABLE', 'AA_CHECKED', 'AA_ICON', 'AA_LABEL', 'AA_NONE',
        'AA_SHORTCUT', 'AA_STATE', 'AA_TOOLTIP', 'AA_VISIBILITY',
        'ALL_CHANGED', 'ARGREGS_BY_SLOTS', 'ARGREGS_FP_CONSUME_GP',
        'ARGREGS_GP_ONLY', 'ARGREGS_INDEPENDENT', 'ARGREGS_MIPS_O32',
        'ARGREGS_POLICY_UNDEFINED', 'AST_DISABLE', 'AST_DISABLE_ALWAYS',
        'AST_DISABLE_FOR_IDB', 'AST_DISABLE_FOR_WIDGET', 'AST_ENABLE',
        'AST_ENABLE_ALWAYS', 'AST_ENABLE_FOR_IDB',
        'AST_ENABLE_FOR_WIDGET', 'BK_INVALIDADDR', 'BK_NOVALUE',
        'BK_VALID', 'BPLT_ABS', 'BPLT_REL', 'BPLT_SRC', 'BPLT_SYM',
        'BREAKPOINT', 'CB_CLOSE', 'CB_DESTROYING', 'CB_INIT',
        'CB_INVISIBLE', 'CB_YES', 'CDVH_LINES_ALIGNMENT',
        'CDVH_LINES_CLICK', 'CDVH_LINES_DBLCLICK', 'CDVH_LINES_DRAWICON',
        'CDVH_LINES_ICONMARGIN', 'CDVH_LINES_LINENUM', 'CDVH_LINES_POPUP',
        'CDVH_LINES_RADIX', 'CDVH_SRCVIEW', 'CDVH_USERDATA', 'CVH_CLICK',
        'CVH_CLOSE', 'CVH_CURPOS', 'CVH_DBLCLICK', 'CVH_HELP',
        'CVH_KEYDOWN', 'CVH_MOUSEMOVE', 'CVH_POPUP', 'CVH_QT_AWARE',
        'CVH_USERDATA', 'DEBNAME_EXACT', 'DEBNAME_LOWER', 'DEBNAME_NICE',
        'DEBNAME_UPPER', 'DEC_ERROR', 'DEC_NOTASK', 'DEC_TIMEOUT',
        'DIRTREE_BPTS', 'DIRTREE_END', 'DIRTREE_ENUMS',
        'DIRTREE_ENUMS_BOOKMARKS', 'DIRTREE_FUNCS',
        'DIRTREE_IDAPLACE_BOOKMARKS', 'DIRTREE_IMPORTS',
        'DIRTREE_LOCAL_TYPES', 'DIRTREE_NAMES', 'DIRTREE_STRUCTS',
        'DIRTREE_STRUCTS_BOOKMARKS', 'DQT_COMPILER', 'DQT_FULL',
        'DQT_NAME_TYPE', 'DQT_NPURGED_2', 'DQT_NPURGED_4',
        'DQT_NPURGED_8', 'DRC_CRC', 'DRC_ERROR', 'DRC_EVENTS',
        'DRC_FAILED', 'DRC_IDBSEG', 'DRC_NETERR', 'DRC_NOCHG',
        'DRC_NOFILE', 'DRC_NONE', 'DRC_NOPROC', 'DRC_OK',
        'DTE_ALREADY_EXISTS', 'DTE_BAD_PATH', 'DTE_CANT_RENAME',
        'DTE_LAST', 'DTE_MAX_DIR', 'DTE_NOT_DIRECTORY', 'DTE_NOT_EMPTY',
        'DTE_NOT_FOUND', 'DTE_OK', 'DTE_OWN_CHILD', 'DTN_DISPLAY_NAME',
        'DTN_FULL_NAME', 'EXCEPTION', 'Err', 'FILE',
        'FIND_EXTLANG_BY_EXT', 'FIND_EXTLANG_BY_IDX',
        'FIND_EXTLANG_BY_NAME', 'FMTFUNC_PRINTF', 'FMTFUNC_SCANF',
        'FMTFUNC_STRFMON', 'FMTFUNC_STRFTIME', 'FPC_ARGS', 'FPC_LVARS',
        'FPC_RETADDR', 'FPC_SAVREGS', 'FPV_BADARG', 'FPV_NAN', 'FPV_NINF',
        'FPV_NORM', 'FPV_PINF', 'GDE_ERROR', 'GDE_MANY_EVENTS',
        'GDE_NO_EVENT', 'GDE_ONE_EVENT', 'GTD_CALC_ARGLOCS',
        'GTD_CALC_LAYOUT', 'GTD_DEL_BITFLDS', 'GTD_NO_ARGLOCS',
        'GTD_NO_LAYOUT', 'GTS_BASECLASS', 'GTS_NESTED', 'HF_COMMENT',
        'HF_DEFAULT', 'HF_KEYWORD1', 'HF_KEYWORD2', 'HF_KEYWORD3',
        'HF_MAX', 'HF_NUMBER', 'HF_PREPROC', 'HF_STRING', 'HT_DBG',
        'HT_DEV', 'HT_GRAPH', 'HT_IDB', 'HT_IDD', 'HT_IDP', 'HT_LAST',
        'HT_OUTPUT', 'HT_UI', 'HT_VIEW', 'HUGE', 'INFORMATION',
        'INF_ABIBITS', 'INF_ABINAME', 'INF_AF', 'INF_AF2',
        'INF_APPCALL_OPTIONS', 'INF_APPTYPE', 'INF_ARCHIVE_PATH',
        'INF_ASMTYPE', 'INF_BASEADDR', 'INF_BIN_PREFIX_SIZE', 'INF_CC',
        'INF_CC_CM', 'INF_CC_DEFALIGN', 'INF_CC_ID', 'INF_CC_SIZE_B',
        'INF_CC_SIZE_E', 'INF_CC_SIZE_I', 'INF_CC_SIZE_L',
        'INF_CC_SIZE_LDBL', 'INF_CC_SIZE_LL', 'INF_CC_SIZE_S',
        'INF_CMTFLG', 'INF_CMT_INDENT', 'INF_CRC32', 'INF_CTIME',
        'INF_C_MACROS', 'INF_DATABASE_CHANGE_COUNT', 'INF_DATATYPES',
        'INF_DBG_BINPATHS', 'INF_DEMNAMES', 'INF_DUALOP_GRAPH',
        'INF_DUALOP_TEXT', 'INF_ELAPSED', 'INF_FILETYPE',
        'INF_FILE_FORMAT_NAME', 'INF_FSIZE', 'INF_GENFLAGS', 'INF_GROUPS',
        'INF_HIGHOFF', 'INF_H_PATH', 'INF_IDA_VERSION', 'INF_IDSNODE',
        'INF_IMAGEBASE', 'INF_INCLUDE', 'INF_INDENT',
        'INF_INITIAL_VERSION', 'INF_INPUT_FILE_PATH', 'INF_LAST',
        'INF_LENXREF', 'INF_LFLAGS', 'INF_LIMITER', 'INF_LISTNAMES',
        'INF_LONG_DEMNAMES', 'INF_LOWOFF', 'INF_MAIN', 'INF_MARGIN',
        'INF_MAXREF', 'INF_MAX_AUTONAME_LEN', 'INF_MAX_EA', 'INF_MD5',
        'INF_MIN_EA', 'INF_NAMETYPE', 'INF_NETDELTA', 'INF_NOPENS',
        'INF_NOTEPAD', 'INF_OMAX_EA', 'INF_OMIN_EA', 'INF_OSTYPE',
        'INF_OUTFILEENC', 'INF_OUTFLAGS', 'INF_PREFFLAG', 'INF_PRIVRANGE',
        'INF_PRIVRANGE_END_EA', 'INF_PRIVRANGE_START_EA', 'INF_PROBLEMS',
        'INF_PROCNAME', 'INF_REFCMTNUM', 'INF_SELECTORS', 'INF_SHA256',
        'INF_SHORT_DEMNAMES', 'INF_SPECSEGS', 'INF_SRCDBG_PATHS',
        'INF_SRCDBG_UNDESIRED', 'INF_START_CS', 'INF_START_EA',
        'INF_START_IP', 'INF_START_SP', 'INF_START_SS',
        'INF_STRLIT_BREAK', 'INF_STRLIT_FLAGS', 'INF_STRLIT_PREF',
        'INF_STRLIT_SERNUM', 'INF_STRLIT_ZEROES', 'INF_STRTYPE',
        'INF_STR_ENCODINGS', 'INF_TYPE_XREFNUM', 'INF_VERSION',
        'INF_XREFFLAG', 'INF_XREFNUM', 'ISA_AVAILABILITY', 'Info',
        'JT_ARR', 'JT_BOOL', 'JT_CALL', 'JT_NONE', 'JT_NUM', 'JT_OBJ',
        'JT_STR', 'JT_SWITCH', 'JT_UNKNOWN', 'LECVT_CANCELED',
        'LECVT_ERROR', 'LECVT_OK', 'LIB_LOADED', 'LIB_UNLOADED',
        'LINPUT_GENERIC', 'LINPUT_LOCAL', 'LINPUT_NONE', 'LINPUT_PROCMEM',
        'LINPUT_RFILE', 'LOC_CLOSE', 'LOC_KEEP', 'LOC_UNMAKE', 'MD5Final',
        'MD5Init', 'MD5Transform', 'MD5Update', 'MOVBPT_BAD_TYPE',
        'MOVBPT_DEST_BUSY', 'MOVBPT_NOT_FOUND', 'MOVBPT_OK', 'Message',
        'NOTHING_CHANGED', 'NO_ACCESS', 'NO_EVENT', 'OFILE_ASM',
        'OFILE_DIF', 'OFILE_EXE', 'OFILE_IDC', 'OFILE_LST', 'OFILE_MAP',
        'PATH_TYPE_CMD', 'PATH_TYPE_ID0', 'PATH_TYPE_IDB', 'PLUGIN',
        'PROCESS_ATTACHED', 'PROCESS_DETACHED', 'PROCESS_EXITED',
        'PROCESS_STARTED', 'PROCESS_SUSPENDED', 'QMOVE_CROSS_FS',
        'QMOVE_OVERWRITE', 'QMOVE_OVR_RO', 'RANGE_KIND_FUNC',
        'RANGE_KIND_HIDDEN_RANGE', 'RANGE_KIND_SEGMENT',
        'RANGE_KIND_UNKNOWN', 'READ_ACCESS', 'REAL_ERROR_BADDATA',
        'REAL_ERROR_BADSTR', 'REAL_ERROR_FORMAT', 'REAL_ERROR_FPOVER',
        'REAL_ERROR_INTOVER', 'REAL_ERROR_OK', 'REAL_ERROR_RANGE',
        'REAL_ERROR_ZERODIV', 'REG_ASSERT', 'REG_BADBR', 'REG_BADPAT',
        'REG_BADRPT', 'REG_EBRACE', 'REG_EBRACK', 'REG_ECOLLATE',
        'REG_ECTYPE', 'REG_EESCAPE', 'REG_EMPTY', 'REG_EPAREN',
        'REG_ERANGE', 'REG_ESIZE', 'REG_ESPACE', 'REG_ESUBREG',
        'REG_INVARG', 'REG_NOMATCH', 'RESMOD_HANDLE', 'RESMOD_INTO',
        'RESMOD_MAX', 'RESMOD_NONE', 'RESMOD_OUT', 'RESMOD_OVER',
        'RESMOD_SRCINTO', 'RESMOD_SRCOUT', 'RESMOD_SRCOVER',
        'RESMOD_USER', 'RW_ACCESS', 'SAVE_ALL_VALUES', 'SAVE_DIFF',
        'SAVE_NONE', 'SELECTION_CHANGED', 'SETPROC_IDB', 'SETPROC_LOADER',
        'SETPROC_LOADER_NON_FATAL', 'SETPROC_USER', 'SMT_ARRAY',
        'SMT_BADARG', 'SMT_FAILED', 'SMT_KEEP', 'SMT_NOCOMPAT', 'SMT_OK',
        'SMT_OVERLAP', 'SMT_SIZE', 'SMT_WORSE', 'SRCIT_EXPR',
        'SRCIT_FUNC', 'SRCIT_LOCVAR', 'SRCIT_MODULE', 'SRCIT_NONE',
        'SRCIT_STMT', 'SRCIT_STTVAR', 'STEP', 'STI_ACCHAR', 'STI_ACHAR',
        'STI_ACUCHAR', 'STI_AEABI_LCMP', 'STI_AEABI_MEMCLR',
        'STI_AEABI_MEMCPY', 'STI_AEABI_MEMSET', 'STI_AEABI_ULCMP',
        'STI_AUCHAR', 'STI_COMPLEX128', 'STI_COMPLEX64', 'STI_DONT_USE',
        'STI_FDELOP', 'STI_FPURGING', 'STI_LAST', 'STI_MSGSEND',
        'STI_PBYTE', 'STI_PCCHAR', 'STI_PCHAR', 'STI_PCUCHAR',
        'STI_PCVOID', 'STI_PINT', 'STI_PPVOID', 'STI_PUCHAR', 'STI_PUINT',
        'STI_PVOID', 'STI_RTC_CHECK_2', 'STI_RTC_CHECK_4',
        'STI_RTC_CHECK_8', 'STI_SIZE_T', 'STI_SSIZE_T',
        'STRUC_ERROR_MEMBER_NAME', 'STRUC_ERROR_MEMBER_NESTED',
        'STRUC_ERROR_MEMBER_OFFSET', 'STRUC_ERROR_MEMBER_OK',
        'STRUC_ERROR_MEMBER_SIZE', 'STRUC_ERROR_MEMBER_STRUCT',
        'STRUC_ERROR_MEMBER_TINFO', 'STRUC_ERROR_MEMBER_UNIVAR',
        'STRUC_ERROR_MEMBER_VARLAST', 'STT_CUR', 'STT_DBG', 'STT_MM',
        'STT_VA', 'TCCPT_ENUMPLACE', 'TCCPT_IDAPLACE', 'TCCPT_INVALID',
        'TCCPT_PLACE', 'TCCPT_SIMPLELINE_PLACE', 'TCCPT_STRUCTPLACE',
        'TCCRT_FLAT', 'TCCRT_GRAPH', 'TCCRT_INVALID', 'TCCRT_PROXIMITY',
        'TCT_NOT_OWNER', 'TCT_OWNER', 'TCT_UNKNOWN', 'TERR_BADSYNC',
        'TERR_OK', 'TERR_SAVE', 'TERR_SERIALIZE', 'TERR_WRONGNAME',
        'THREAD_EXITED', 'THREAD_STARTED', 'TRACE_FULL', 'UCDR_MANGLED',
        'UCDR_NAME', 'UCDR_STRLIT', 'UCDR_TYPE', 'UTP_ENUM', 'UTP_STRUCT',
        'VME_LEFT_BUTTON', 'VME_MID_BUTTON', 'VME_RIGHT_BUTTON',
        'VME_UNKNOWN', 'VNT_IDENT', 'VNT_STRLIT', 'VNT_TYPE',
        'VNT_UDTMEM', 'VNT_VISIBLE', 'WRITE_ACCESS', 'Warn',
        '_7014156F94AE1B7FC5F5E3560392A8C4',
        '_94D4D585A38CDA12BD4A7F760DAFD340',
        '_A32948CF266C727D9CC1D79F2B35CC28',
        '_Adjust_manually_vector_aligned', '_BitScanForward',
        '_BitScanForward64', '_BitScanReverse', '_BitScanReverse64',
        '_C7C212E52085C0E483DB7F2B4EDAB218', '_CRT_ALLOC_HOOK',
        '_CRT_DUMP_CLIENT', '_CRT_REPORT_HOOK', '_CRT_REPORT_HOOKW',
        '_Convert_size', '_CoreCrtNonSecureSearchSortCompareFunction',
        '_CoreCrtSecureSearchSortCompareFunction', '_Denorm_C', '_Eps_C',
        '_Exit', '_FDenorm_C', '_FEps_C', '_FInf_C', '_FNan_C',
        '_FRteps_C', '_FSnan_C', '_FXbig_C', '_FZero_C',
        '_Fnv1a_append_bytes', '_Functor', '_HEAPINFO', '_HFILE', '_HUGE',
        '_Hugeval_C', '_Idl_dist_add', '_Inf_C', '_InterlockedAnd',
        '_InterlockedAnd16', '_InterlockedAnd64', '_InterlockedAnd8',
        '_InterlockedCompareExchange', '_InterlockedCompareExchange128',
        '_InterlockedCompareExchange16', '_InterlockedCompareExchange64',
        '_InterlockedCompareExchange8', '_InterlockedDecrement',
        '_InterlockedDecrement16', '_InterlockedDecrement64',
        '_InterlockedExchange', '_InterlockedExchange16',
        '_InterlockedExchange64', '_InterlockedExchange8',
        '_InterlockedExchangeAdd', '_InterlockedExchangeAdd16',
        '_InterlockedExchangeAdd64', '_InterlockedExchangeAdd8',
        '_InterlockedIncrement', '_InterlockedIncrement16',
        '_InterlockedIncrement64', '_InterlockedOr', '_InterlockedOr16',
        '_InterlockedOr64', '_InterlockedOr8', '_InterlockedXor',
        '_InterlockedXor16', '_InterlockedXor64', '_InterlockedXor8',
        '_Is_pow_2', '_LDenorm_C', '_LEps_C', '_LInf_C', '_LNan_C',
        '_LRteps_C', '_LSnan_C', '_LXbig_C', '_LZero_C', '_Left',
        '_MallocaComputeSize', '_MarkAllocaS', '_Nan_C', '_Noinit',
        '_Pmd_object', '_Pmd_pointer', '_Pmd_refwrap', '_Pmf_object',
        '_Pmf_pointer', '_Pmf_refwrap', '_ReadWriteBarrier', '_Right',
        '_Rteps_C', '_Snan_C', '_Throw_bad_array_new_length',
        '_Throw_tree_length_error', '_Unused', '_Wint_t',
        '_XGetLastError', '_Xbad_alloc', '_Xbig_C', '_Xinvalid_argument',
        '_Xlen_string', '_Xlength_error', '_Xout_of_range',
        '_Xoverflow_error', '_Xruntime_error', '_Zero_C',
        '__ExceptionPtrAssign', '__ExceptionPtrCompare',
        '__ExceptionPtrCopy', '__ExceptionPtrCopyException',
        '__ExceptionPtrCreate', '__ExceptionPtrCurrentException',
        '__ExceptionPtrDestroy', '__ExceptionPtrRethrow',
        '__ExceptionPtrSwap', '__ExceptionPtrToBool',
        '__ISA_AVAILABLE_ARMNT', '__ISA_AVAILABLE_AVX',
        '__ISA_AVAILABLE_AVX2', '__ISA_AVAILABLE_AVX512',
        '__ISA_AVAILABLE_ENFSTRG', '__ISA_AVAILABLE_NEON',
        '__ISA_AVAILABLE_NEON_ARM64', '__ISA_AVAILABLE_SSE2',
        '__ISA_AVAILABLE_SSE42', '__ISA_AVAILABLE_X86',
        '___mb_cur_max_func', '___mb_cur_max_l_func',
        '__acrt_get_locale_data_prefix', '__acrt_iob_func',
        '__acrt_locale_get_ctype_array_value', '__ascii_iswalpha',
        '__ascii_iswdigit', '__ascii_tolower', '__ascii_toupper',
        '__ascii_towlower', '__ascii_towupper',
        '__builtin_assume_aligned', '__ceil', '__ceilf',
        '__conio_common_vcwprintf', '__conio_common_vcwprintf_p',
        '__conio_common_vcwprintf_s', '__conio_common_vcwscanf',
        '__copysign', '__copysignf', '__crt_bool', '__daylight',
        '__doserrno', '__dstbias', '__floor', '__floorf',
        '__fpe_flt_rounds', '__fpecode', '__isa_available', '__isascii',
        '__iscsym', '__iscsymf', '__iso_volatile_load16',
        '__iso_volatile_load32', '__iso_volatile_load64',
        '__iso_volatile_load8', '__iso_volatile_store16',
        '__iso_volatile_store32', '__iso_volatile_store64',
        '__iso_volatile_store8', '__iswcsym', '__iswcsymf',
        '__local_stdio_printf_options', '__local_stdio_scanf_options',
        '__lzcnt', '__lzcnt16', '__lzcnt64', '__p___argc', '__p___argv',
        '__p___wargv', '__p__commode', '__p__environ', '__p__fmode',
        '__p__pgmptr', '__p__wenviron', '__p__wpgmptr', '__pctype_func',
        '__popcnt', '__popcnt16', '__popcnt64', '__pwctype_func',
        '__report_gsfailure', '__round', '__roundf',
        '__security_check_cookie', '__security_cookie',
        '__security_init_cookie', '__shiftright128', '__signbitvalue',
        '__signbitvaluef', '__std_exception_copy',
        '__std_exception_destroy',
        '__std_reverse_copy_trivially_copyable_1',
        '__std_reverse_copy_trivially_copyable_2',
        '__std_reverse_copy_trivially_copyable_4',
        '__std_reverse_copy_trivially_copyable_8',
        '__std_reverse_trivially_swappable_1',
        '__std_reverse_trivially_swappable_2',
        '__std_reverse_trivially_swappable_4',
        '__std_reverse_trivially_swappable_8',
        '__std_swap_ranges_trivially_swappable_noalias',
        '__stdio_common_vfprintf', '__stdio_common_vfprintf_p',
        '__stdio_common_vfprintf_s', '__stdio_common_vfscanf',
        '__stdio_common_vfwprintf', '__stdio_common_vfwprintf_p',
        '__stdio_common_vfwprintf_s', '__stdio_common_vfwscanf',
        '__stdio_common_vsnprintf_s', '__stdio_common_vsnwprintf_s',
        '__stdio_common_vsprintf', '__stdio_common_vsprintf_p',
        '__stdio_common_vsprintf_s', '__stdio_common_vsscanf',
        '__stdio_common_vswprintf', '__stdio_common_vswprintf_p',
        '__stdio_common_vswprintf_s', '__stdio_common_vswscanf',
        '__strncnt', '__swprintf_l', '__sys_errlist', '__sys_nerr',
        '__threadhandle', '__threadid', '__time32_t', '__time64_t',
        '__timezone', '__toascii', '__trunc', '__truncf', '__tzname',
        '__uncaught_exception', '__uncaught_exceptions', '__va_start',
        '__vcrt_bool', '__vswprintf_l', '__wcserror', '__wcserror_s',
        '_abs64', '_access', '_access_s', '_aligned_free',
        '_aligned_malloc', '_aligned_msize', '_aligned_offset_malloc',
        '_aligned_offset_realloc', '_aligned_offset_recalloc',
        '_aligned_realloc', '_aligned_recalloc', '_alloca', '_atodbl',
        '_atodbl_l', '_atof_l', '_atoflt', '_atoflt_l', '_atoi64',
        '_atoi64_l', '_atoi_l', '_atol_l', '_atoldbl', '_atoldbl_l',
        '_atoll_l', '_beep', '_bittest', '_byteswap_uint64',
        '_byteswap_ulong', '_byteswap_ushort', '_cabs', '_callnewh',
        '_calloc_base', '_cgetws_s', '_chdir', '_chdrive', '_chgsign',
        '_chgsignf', '_chgsignl', '_chmod', '_chsize', '_chsize_s',
        '_chvalidchk_l', '_clearfp', '_close', '_commit', '_control87',
        '_controlfp', '_controlfp_s', '_copysign', '_copysignf',
        '_copysignl', '_cputws', '_creat', '_ctime32', '_ctime32_s',
        '_ctime64', '_ctime64_s', '_cvt_dtoi_sat', '_cvt_dtoi_sent',
        '_cvt_dtoll_sat', '_cvt_dtoll_sent', '_cvt_dtoui_sat',
        '_cvt_dtoui_sent', '_cvt_dtoull_sat', '_cvt_dtoull_sent',
        '_cvt_ftoi_sat', '_cvt_ftoi_sent', '_cvt_ftoll_sat',
        '_cvt_ftoll_sent', '_cvt_ftoui_sat', '_cvt_ftoui_sent',
        '_cvt_ftoull_sat', '_cvt_ftoull_sent', '_cwprintf', '_cwprintf_l',
        '_cwprintf_p', '_cwprintf_p_l', '_cwprintf_s', '_cwprintf_s_l',
        '_cwscanf', '_cwscanf_l', '_cwscanf_s', '_cwscanf_s_l', '_d_int',
        '_dclass', '_dev_t', '_dexp', '_difftime32', '_difftime64',
        '_dlog', '_dnorm', '_dpcomp', '_dpoly', '_dscale', '_dsign',
        '_dsin', '_dtest', '_dunscale', '_dup', '_dup2', '_dupenv_s',
        '_ecvt', '_ecvt_s', '_eof', '_errno', '_exit', '_expand',
        '_fclose_nolock', '_fcloseall', '_fcvt', '_fcvt_s', '_fd_int',
        '_fdclass', '_fdexp', '_fdlog', '_fdnorm', '_fdopen', '_fdpcomp',
        '_fdpoly', '_fdscale', '_fdsign', '_fdsin', '_fdtest',
        '_fdunscale', '_fflush_nolock', '_fgetc_nolock', '_fgetchar',
        '_fgetwc_nolock', '_fgetwchar', '_filelength', '_filelengthi64',
        '_fileno', '_findclose', '_findfirst32', '_findfirst32i64',
        '_findfirst64', '_findfirst64i32', '_findnext32',
        '_findnext32i64', '_findnext64', '_findnext64i32', '_finite',
        '_finitef', '_flushall', '_fpclass', '_fpclassf', '_fpcomp',
        '_fperrraise', '_fpreset', '_fprintf_l', '_fprintf_p',
        '_fprintf_p_l', '_fprintf_s_l', '_fputc_nolock', '_fputchar',
        '_fputwc_nolock', '_fputwchar', '_fread_nolock',
        '_fread_nolock_s', '_free_base', '_freea', '_fscanf_l',
        '_fscanf_s_l', '_fseek_nolock', '_fseeki64', '_fseeki64_nolock',
        '_fsize_t', '_fsopen', '_fstat32', '_fstat32i64', '_fstat64',
        '_fstat64i32', '_ftell_nolock', '_ftelli64', '_ftelli64_nolock',
        '_fullpath', '_fwprintf_l', '_fwprintf_p', '_fwprintf_p_l',
        '_fwprintf_s_l', '_fwrite_nolock', '_fwscanf_l', '_fwscanf_s_l',
        '_gcvt', '_gcvt_s', '_get_FMA3_enable', '_get_daylight',
        '_get_doserrno', '_get_dstbias', '_get_errno', '_get_fmode',
        '_get_heap_handle', '_get_invalid_parameter_handler',
        '_get_osfhandle', '_get_pgmptr', '_get_printf_count_output',
        '_get_purecall_handler', '_get_stream_buffer_pointers',
        '_get_terminate', '_get_thread_local_invalid_parameter_handler',
        '_get_timezone', '_get_tzname', '_get_unexpected', '_get_wpgmptr',
        '_getc_nolock', '_getcwd', '_getdcwd', '_getdiskfree',
        '_getdrive', '_getdrives', '_getmaxstdio', '_getsystime', '_getw',
        '_getwc_nolock', '_getwch', '_getwch_nolock', '_getwche',
        '_getwche_nolock', '_getws_s', '_gmtime32', '_gmtime32_s',
        '_gmtime64', '_gmtime64_s', '_heapchk', '_heapmin', '_heapwalk',
        '_hypot', '_hypotf', '_hypotl', '_i64toa', '_i64toa_s', '_i64tow',
        '_i64tow_s', '_ino_t', '_interlockedand64',
        '_interlockedbittestandset', '_interlockeddecrement64',
        '_interlockedexchange64', '_interlockedexchangeadd64',
        '_interlockedincrement64', '_interlockedor64',
        '_interlockedxor64', '_invalid_parameter_handler',
        '_invalid_parameter_noinfo', '_invalid_parameter_noinfo_noreturn',
        '_invoke_watson', '_is_exception_typeof', '_isalnum_l',
        '_isalpha_l', '_isatty', '_isblank_l', '_ischartype_l',
        '_iscntrl_l', '_isctype', '_isctype_l', '_isdigit_l',
        '_isgraph_l', '_isleadbyte_l', '_islower_l', '_isnan', '_isnanf',
        '_isprint_l', '_ispunct_l', '_isspace_l', '_isupper_l',
        '_iswalnum_l', '_iswalpha_l', '_iswblank_l', '_iswcntrl_l',
        '_iswcsym_l', '_iswcsymf_l', '_iswctype_l', '_iswdigit_l',
        '_iswgraph_l', '_iswlower_l', '_iswprint_l', '_iswpunct_l',
        '_iswspace_l', '_iswupper_l', '_iswxdigit_l', '_isxdigit_l',
        '_itoa', '_itoa_s', '_itow', '_itow_s', '_j0', '_j1', '_jn',
        '_ld_int', '_ldclass', '_ldexp', '_ldlog', '_ldpcomp', '_ldpoly',
        '_ldscale', '_ldsign', '_ldsin', '_ldtest', '_ldunscale',
        '_lfind', '_lfind_s', '_load_core_module', '_locale_t',
        '_localtime32', '_localtime32_s', '_localtime64',
        '_localtime64_s', '_lock_file', '_locking', '_logb', '_logbf',
        '_lrotl', '_lrotr', '_lsearch', '_lsearch_s', '_lseek',
        '_lseeki64', '_ltoa', '_ltoa_s', '_ltow', '_ltow_s', '_makepath',
        '_makepath_s', '_malloc_base', '_matherr', '_mblen_l',
        '_mbstowcs_l', '_mbstowcs_s_l', '_mbstrlen', '_mbstrlen_l',
        '_mbstrnlen', '_mbstrnlen_l', '_mbtowc_l', '_memccpy', '_memicmp',
        '_memicmp_l', '_mkdir', '_mkgmtime32', '_mkgmtime64', '_mktemp',
        '_mktemp_s', '_mktime32', '_mktime64', '_mm_pause', '_msize',
        '_msize_base', '_nextafter', '_nextafterf', '_off_t', '_onexit',
        '_onexit_t', '_open', '_open_osfhandle', '_pclose', '_pipe',
        '_popen', '_printf_l', '_printf_p', '_printf_p_l', '_printf_s_l',
        '_purecall_handler', '_putc_nolock', '_putenv', '_putenv_s',
        '_putw', '_putwc_nolock', '_putwch', '_putwch_nolock', '_putws',
        '_qstring_char___const_iterator', '_qstring_char___iterator',
        '_qstring_unsigned_char___const_iterator',
        '_qstring_unsigned_char___iterator',
        '_qstring_wchar_t___const_iterator',
        '_qstring_wchar_t___iterator', '_read', '_realloc_base',
        '_recalloc', '_recalloc_base', '_resetstkoflw', '_rmdir',
        '_rmtmp', '_rotl', '_rotl64', '_rotr', '_rotr64', '_scalb',
        '_scalbf', '_scanf_l', '_scanf_s_l', '_scprintf', '_scprintf_l',
        '_scprintf_p', '_scprintf_p_l', '_scwprintf', '_scwprintf_l',
        '_scwprintf_p', '_scwprintf_p_l', '_se_translator_function',
        '_searchenv', '_searchenv_s', '_set_FMA3_enable',
        '_set_abort_behavior', '_set_controlfp', '_set_doserrno',
        '_set_errno', '_set_error_mode', '_set_fmode',
        '_set_invalid_parameter_handler', '_set_printf_count_output',
        '_set_purecall_handler', '_set_se_translator',
        '_set_thread_local_invalid_parameter_handler', '_seterrormode',
        '_setmaxstdio', '_setmode', '_setsystime', '_sleep', '_snprintf',
        '_snprintf_c', '_snprintf_c_l', '_snprintf_l', '_snprintf_s',
        '_snprintf_s_l', '_snscanf', '_snscanf_l', '_snscanf_s',
        '_snscanf_s_l', '_snwprintf', '_snwprintf_l', '_snwprintf_s',
        '_snwprintf_s_l', '_snwscanf', '_snwscanf_l', '_snwscanf_s',
        '_snwscanf_s_l', '_sopen', '_sopen_dispatch', '_sopen_s',
        '_sopen_s_nolock', '_source_file_iterator',
        '_source_item_iterator', '_splitpath', '_splitpath_s',
        '_sprintf_l', '_sprintf_p', '_sprintf_p_l', '_sprintf_s_l',
        '_sscanf_l', '_sscanf_s_l', '_stat32', '_stat32i64', '_stat64',
        '_stat64i32', '_statusfp', '_strcmpi', '_strcoll_l', '_strdate',
        '_strdate_s', '_strdup', '_strerror', '_strerror_s',
        '_strftime_l', '_stricmp', '_stricmp_l', '_stricoll',
        '_stricoll_l', '_strlwr', '_strlwr_l', '_strlwr_s', '_strlwr_s_l',
        '_strncoll', '_strncoll_l', '_strnicmp', '_strnicmp_l',
        '_strnicoll', '_strnicoll_l', '_strnset', '_strnset_s', '_strrev',
        '_strset', '_strset_s', '_strtime', '_strtime_s', '_strtod_l',
        '_strtof_l', '_strtoi64', '_strtoi64_l', '_strtol_l',
        '_strtold_l', '_strtoll_l', '_strtoui64', '_strtoui64_l',
        '_strtoul_l', '_strtoull_l', '_strupr', '_strupr_l', '_strupr_s',
        '_strupr_s_l', '_strxfrm_l', '_swab', '_swprintf', '_swprintf_c',
        '_swprintf_c_l', '_swprintf_l', '_swprintf_p', '_swprintf_p_l',
        '_swprintf_s_l', '_swscanf_l', '_swscanf_s_l', '_tell',
        '_telli64', '_tempnam', '_time32', '_time64', '_timespec32_get',
        '_timespec64_get', '_tolower', '_tolower_l', '_toupper',
        '_toupper_l', '_towlower_l', '_towupper_l', '_tzset', '_ui64toa',
        '_ui64toa_s', '_ui64tow', '_ui64tow_s', '_ultoa', '_ultoa_s',
        '_ultow', '_ultow_s', '_umask', '_umask_s', '_umul128',
        '_ungetc_nolock', '_ungetwc_nolock', '_ungetwch',
        '_ungetwch_nolock', '_unlink', '_unlock_file', '_vcwprintf',
        '_vcwprintf_l', '_vcwprintf_p', '_vcwprintf_p_l', '_vcwprintf_s',
        '_vcwprintf_s_l', '_vcwscanf', '_vcwscanf_l', '_vcwscanf_s',
        '_vcwscanf_s_l', '_vfprintf_l', '_vfprintf_p', '_vfprintf_p_l',
        '_vfprintf_s_l', '_vfscanf_l', '_vfscanf_s_l', '_vfwprintf_l',
        '_vfwprintf_p', '_vfwprintf_p_l', '_vfwprintf_s_l', '_vfwscanf_l',
        '_vfwscanf_s_l', '_vprintf_l', '_vprintf_p', '_vprintf_p_l',
        '_vprintf_s_l', '_vscanf_l', '_vscanf_s_l', '_vscprintf',
        '_vscprintf_l', '_vscprintf_p', '_vscprintf_p_l', '_vscwprintf',
        '_vscwprintf_l', '_vscwprintf_p', '_vscwprintf_p_l', '_vsnprintf',
        '_vsnprintf_c', '_vsnprintf_c_l', '_vsnprintf_l', '_vsnprintf_s',
        '_vsnprintf_s_l', '_vsnwprintf', '_vsnwprintf_l', '_vsnwprintf_s',
        '_vsnwprintf_s_l', '_vsnwscanf_l', '_vsnwscanf_s_l',
        '_vsprintf_l', '_vsprintf_p', '_vsprintf_p_l', '_vsprintf_s_l',
        '_vsscanf_l', '_vsscanf_s_l', '_vswprintf', '_vswprintf_c',
        '_vswprintf_c_l', '_vswprintf_l', '_vswprintf_p',
        '_vswprintf_p_l', '_vswprintf_s_l', '_vswscanf_l',
        '_vswscanf_s_l', '_vwprintf_l', '_vwprintf_p', '_vwprintf_p_l',
        '_vwprintf_s_l', '_vwscanf_l', '_vwscanf_s_l', '_waccess',
        '_waccess_s', '_wasctime', '_wasctime_s', '_wassert', '_wchdir',
        '_wchmod', '_wcreat', '_wcreate_locale', '_wcscoll_l', '_wcsdup',
        '_wcserror', '_wcserror_s', '_wcsftime_l', '_wcsicmp',
        '_wcsicmp_l', '_wcsicoll', '_wcsicoll_l', '_wcslwr', '_wcslwr_l',
        '_wcslwr_s', '_wcslwr_s_l', '_wcsncoll', '_wcsncoll_l',
        '_wcsnicmp', '_wcsnicmp_l', '_wcsnicoll', '_wcsnicoll_l',
        '_wcsnset', '_wcsnset_s', '_wcsrev', '_wcsset', '_wcsset_s',
        '_wcstod_l', '_wcstof_l', '_wcstoi64', '_wcstoi64_l', '_wcstol_l',
        '_wcstold_l', '_wcstoll_l', '_wcstombs_l', '_wcstombs_s_l',
        '_wcstoui64', '_wcstoui64_l', '_wcstoul_l', '_wcstoull_l',
        '_wcsupr', '_wcsupr_l', '_wcsupr_s', '_wcsupr_s_l', '_wcsxfrm_l',
        '_wctime32', '_wctime32_s', '_wctime64', '_wctime64_s',
        '_wctomb_l', '_wctomb_s_l', '_wdupenv_s', '_wexecl', '_wexecle',
        '_wexeclp', '_wexeclpe', '_wexecv', '_wexecve', '_wexecvp',
        '_wexecvpe', '_wfdopen', '_wfindfirst32', '_wfindfirst32i64',
        '_wfindfirst64', '_wfindfirst64i32', '_wfindnext32',
        '_wfindnext32i64', '_wfindnext64', '_wfindnext64i32', '_wfopen',
        '_wfopen_s', '_wfreopen', '_wfreopen_s', '_wfsopen', '_wfullpath',
        '_wgetcwd', '_wgetdcwd', '_wgetenv', '_wgetenv_s', '_wmakepath',
        '_wmakepath_s', '_wmkdir', '_wmktemp', '_wmktemp_s', '_wopen',
        '_wperror', '_wpopen', '_wprintf_l', '_wprintf_p', '_wprintf_p_l',
        '_wprintf_s_l', '_wputenv', '_wputenv_s', '_wremove', '_wrename',
        '_write', '_wrmdir', '_wscanf_l', '_wscanf_s_l', '_wsearchenv',
        '_wsearchenv_s', '_wsetlocale', '_wsopen', '_wsopen_dispatch',
        '_wsopen_s', '_wspawnl', '_wspawnle', '_wspawnlp', '_wspawnlpe',
        '_wspawnv', '_wspawnve', '_wspawnvp', '_wspawnvpe', '_wsplitpath',
        '_wsplitpath_s', '_wstat32', '_wstat32i64', '_wstat64',
        '_wstat64i32', '_wstrdate', '_wstrdate_s', '_wstrtime',
        '_wstrtime_s', '_wsystem', '_wtempnam', '_wtmpnam', '_wtmpnam_s',
        '_wtof', '_wtof_l', '_wtoi', '_wtoi64', '_wtoi64_l', '_wtoi_l',
        '_wtol', '_wtol_l', '_wtoll', '_wtoll_l', '_wunlink', '_y0',
        '_y1', '_yn', 'abort', 'abs', 'abs_no', 'abs_t', 'abs_unk',
        'abs_yes', 'access', 'access_type_t', 'acos', 'acosf', 'acosh',
        'acoshf', 'acoshl', 'acosl', 'acp_utf8',
        'action_activation_ctx_t', 'action_attr_t', 'action_state_t',
        'action_update_ctx_t', 'activate_widget', 'add_auto_stkpnt',
        'add_base_tils', 'add_bpt', 'add_byte', 'add_cref', 'add_dref',
        'add_dword', 'add_encoding', 'add_entry', 'add_enum',
        'add_enum_member', 'add_extra_cmt', 'add_extra_line', 'add_frame',
        'add_func', 'add_func_ex', 'add_hidden_range', 'add_idc_class',
        'add_idc_func', 'add_idc_gvar', 'add_idc_hotkey', 'add_mapping',
        'add_path_mapping', 'add_pgm_cmt', 'add_qword',
        'add_refinfo_dref', 'add_regarg', 'add_regvar', 'add_segm',
        'add_segm_ex', 'add_segment_translation', 'add_sourcefile',
        'add_spaces', 'add_stkvar', 'add_struc', 'add_struc_member',
        'add_til', 'add_tryblk', 'add_user_stkpnt', 'add_virt_module',
        'add_word', 'adding_segm', 'addon_count', 'adiff_t',
        'adjust_visea', 'aflags_t', 'align_down_to_stack', 'align_flag',
        'align_size', 'align_stkarg_up', 'align_up_to_stack',
        'alloc_type_ordinal', 'alloc_type_ordinals', 'allocate_selector',
        'allsegs_moved', 'analyzer_options', 'append_abi_opts',
        'append_argloc', 'append_cmt', 'append_disp', 'append_func_tail',
        'append_regval', 'append_snprintf', 'append_struct_fields',
        'append_tinfo_covered', 'append_to_flowchart',
        'apply_callee_tinfo', 'apply_cdecl', 'apply_fixup',
        'apply_idasgn_to', 'apply_named_type',
        'apply_once_tinfo_and_name', 'apply_startup_sig', 'apply_tinfo',
        'apply_tinfo_to_stkarg', 'argloc_t__biggest_t', 'argloc_type_t',
        'arglocs_t', 'argpartvec_t', 'argreg_policy_t',
        'array_of_intmap_t', 'array_of_intvec_t', 'array_of_node_set_t',
        'array_of_rangesets', 'asc_to_r50', 'asctime', 'asctime_s',
        'asctoreal', 'ash', 'asin', 'asinf', 'asinh', 'asinhf', 'asinhl',
        'asinl', 'asize_t', 'ask_addr', 'ask_buttons', 'ask_file',
        'ask_for_feedback', 'ask_form', 'ask_ident', 'ask_long',
        'ask_seg', 'ask_str', 'ask_text', 'ask_yn', 'at_quick_exit',
        'atan', 'atan2', 'atan2f', 'atan2l', 'atanf', 'atanh', 'atanhf',
        'atanhl', 'atanl', 'atexit', 'atob32', 'atob64', 'atoea', 'atof',
        'atoi', 'atol', 'atoll', 'atos', 'attach_action_to_menu',
        'attach_action_to_popup', 'attach_action_to_toolbar',
        'attach_custom_data_format', 'attach_dynamic_action_to_popup',
        'attach_process', 'atype_t', 'auto_apply_tail', 'auto_apply_type',
        'auto_cancel', 'auto_empty', 'auto_empty_finally', 'auto_get',
        'auto_is_ok', 'auto_make_code', 'auto_make_proc',
        'auto_make_step', 'auto_mark', 'auto_mark_range',
        'auto_recreate_insn', 'auto_unmark', 'auto_wait',
        'auto_wait_range', 'b2a32', 'b2a64', 'b2a_width', 'b_realcvt',
        'back_char', 'backward_flow_iterator_t_State__Ctrl___visited_t',
        'backward_flow_iterator_t_no_regs_t__simple_bfi_t___waiting_t',
        'banner', 'base2file', 'base64_decode', 'base64_encode', 'batch',
        'beep', 'beep_default', 'beep_t', 'begin_type_updating',
        'bgcolor_t', 'bin_flag', 'bin_search', 'bin_search2',
        'bin_search3', 'bitcount', 'bitrange_t_extract_using_bitrange',
        'bitrange_t_inject_using_bitrange', 'blob_idx_t', 'bmask_t',
        'bookmark_changed', 'bookmarks_t_erase', 'bookmarks_t_find_index',
        'bookmarks_t_get', 'bookmarks_t_get_desc',
        'bookmarks_t_get_dirtree_id', 'bookmarks_t_mark',
        'bookmarks_t_set_desc', 'bookmarks_t_size', 'boolvec_t',
        'bpt_constptr_vec_t', 'bpt_loctype_t', 'bpt_vec_t', 'bpteas_t',
        'bptptr_vec_t', 'bpttype_t', 'bring_debugger_to_front', 'bsearch',
        'bsearch_s', 'bte_t', 'btoa128', 'btoa32', 'btoa64', 'btoa_width',
        'btowc', 'build_anon_type_name', 'build_loaders_list',
        'build_snapshot_tree', 'build_stkvar_name', 'build_stkvar_xrefs',
        'build_strlist', 'buttoncb_t', 'byte_flag', 'byte_patched',
        'bytesize', 'calc_basevalue', 'calc_bg_color', 'calc_c_cpp_name',
        'calc_crc32', 'calc_dataseg', 'calc_def_align',
        'calc_default_idaplace_flags', 'calc_dflags', 'calc_dist',
        'calc_file_crc32', 'calc_fixup_size', 'calc_func_size',
        'calc_gtn_flags', 'calc_idasgn_state', 'calc_max_align',
        'calc_max_item_end', 'calc_min_align', 'calc_number_of_children',
        'calc_offset_base', 'calc_prefix_color',
        'calc_probable_base_by_value', 'calc_reference_data',
        'calc_stkvar_struc_offset', 'calc_switch_cases', 'calc_target',
        'calc_thunk_func_target', 'calc_tinfo_gaps', 'call_idc_func',
        'call_system', 'callee_addr_changed', 'calloc', 'callui',
        'can_be_off32', 'can_decode', 'can_define_item',
        'cancel_exec_request', 'cancel_thread_exec_requests', 'casevec_t',
        'catchvec_t', 'cb_id', 'cbrt', 'cbrtf', 'cbrtl', 'ceil', 'ceilf',
        'ceill', 'cfgopt_handler2_t', 'cfgopt_handler3_t',
        'cfgopt_handler_t', 'cfgopt_t__apply', 'cfgopt_t__apply2',
        'cfgopt_t__apply3', 'change_bptlocs', 'change_codepage',
        'change_segment_status', 'change_storage_type', 'changing_cmt',
        'changing_enum_bf', 'changing_enum_cmt', 'changing_op_ti',
        'changing_op_type', 'changing_range_cmt', 'changing_segm_class',
        'changing_segm_end', 'changing_segm_name', 'changing_segm_start',
        'changing_struc_align', 'changing_struc_cmt',
        'changing_struc_member', 'changing_ti', 'channel_redirs_t',
        'char_flag', 'chdir', 'check_bpt', 'check_flat_jump_table',
        'check_for_table_jump', 'check_process_exit', 'check_spoiled_jpt',
        'chmod', 'choose', 'choose_entry', 'choose_enum',
        'choose_enum_by_value', 'choose_func', 'choose_idasgn',
        'choose_ioport_device', 'choose_ioport_device2',
        'choose_local_tinfo', 'choose_local_tinfo_and_delta',
        'choose_name', 'choose_named_type', 'choose_segm', 'choose_srcp',
        'choose_stkvar_xref', 'choose_struc', 'choose_struc_path',
        'choose_til', 'choose_trace_file', 'choose_type_t', 'choose_xref',
        'chooser_base_t__cbres_t', 'chsize', 'chtype_entry',
        'chtype_enum', 'chtype_enum_by_value',
        'chtype_enum_by_value_and_size', 'chtype_func', 'chtype_generic',
        'chtype_idasgn', 'chtype_idatil', 'chtype_name', 'chtype_segm',
        'chtype_srcp', 'chtype_stkvar_xref', 'chtype_strpath',
        'chtype_struc', 'chtype_xref', 'chunk_size', 'chunk_start',
        'cleanup_appcall', 'cleanup_argloc', 'cleanup_name',
        'clear_all_bits', 'clear_bit', 'clear_bits',
        'clear_refresh_request', 'clear_requests_queue', 'clear_strlist',
        'clear_tinfo_t', 'clear_trace', 'clearerr', 'clearerr_s',
        'cliopt_handler_t', 'cliopt_poly_handler_t',
        'cliopts_t__usage_printer_t', 'cliopts_t_add', 'cliopts_t_apply',
        'cliopts_t_find_long', 'cliopts_t_find_short', 'cliopts_t_usage',
        'clock', 'clock_t', 'close', 'close_chooser', 'close_linput',
        'close_widget', 'closebase', 'closing_comment', 'clr__bnot0',
        'clr__bnot1', 'clr__invsign0', 'clr__invsign1', 'clr_abits',
        'clr_align_flow', 'clr_cancelled', 'clr_colored_item',
        'clr_database_flag', 'clr_fixed_spd', 'clr_has_lname',
        'clr_has_ti', 'clr_has_ti0', 'clr_has_ti1', 'clr_ignore_micro',
        'clr_libitem', 'clr_lzero', 'clr_lzero0', 'clr_lzero1',
        'clr_module_data', 'clr_node_info', 'clr_noret', 'clr_notcode',
        'clr_notproc', 'clr_op_type', 'clr_retfp', 'clr_terse_struc',
        'clr_tilcmt', 'clr_usemodsp', 'clr_usersp', 'clr_userti',
        'clr_zstroff', 'cm_t', 'cmt_changed', 'code_flag',
        'code_highlight_block', 'code_viewer_lines_click_t',
        'code_viewer_lines_icon_t', 'code_viewer_lines_linenum_t',
        'collect_stack_trace', 'color_t', 'combine_regs_jpt', 'comp_t',
        'compact_numbered_types', 'compact_til', 'compare_arglocs',
        'compare_tinfo', 'compile_idc_file', 'compile_idc_snippet',
        'compile_idc_text', 'compiled_binpat_vec_t', 'compiler_changed',
        'compvec_t', 'config_changed_cb_t', 'const_t', 'construct_macro',
        'construct_macro2', 'contains', 'contains_fixups',
        'continue_process', 'convert_encoding', 'convert_pt_flags_to_hti',
        'copy_argloc', 'copy_debug_event', 'copy_idcv', 'copy_named_type',
        'copy_sreg_ranges', 'copy_tinfo_t', 'copysign', 'copysignf',
        'copysignl', 'correct_address', 'cos', 'cosf', 'cosh', 'coshf',
        'coshl', 'cosl', 'creat', 'create_16bit_data',
        'create_32bit_data', 'create_align', 'create_byte',
        'create_bytearray_linput', 'create_code_viewer',
        'create_custdata', 'create_custom_viewer', 'create_data',
        'create_dirtree', 'create_disasm_graph', 'create_double',
        'create_dword', 'create_empty_widget', 'create_encoding_helper',
        'create_filename_cmt', 'create_float', 'create_generic_linput',
        'create_graph_viewer', 'create_idcv_ref', 'create_insn',
        'create_lexer', 'create_memory_linput', 'create_menu',
        'create_multirange_qflow_chart', 'create_mutable_graph',
        'create_numbered_type_name', 'create_outctx', 'create_oword',
        'create_packed_real', 'create_qflow_chart', 'create_qword',
        'create_source_viewer', 'create_strlit', 'create_struct',
        'create_switch_table', 'create_switch_xrefs', 'create_tbyte',
        'create_tinfo', 'create_toolbar', 'create_user_graph_place',
        'create_word', 'create_xrefs_from', 'create_yword',
        'create_zip_linput', 'create_zword', 'cref_t',
        'current_exception', 'cust_flag', 'custfmt_flag',
        'custom_viewer_adjust_place_t', 'custom_viewer_can_navigate_t',
        'custom_viewer_click_t', 'custom_viewer_close_t',
        'custom_viewer_curpos_t', 'custom_viewer_dblclick_t',
        'custom_viewer_get_place_xcoord_t', 'custom_viewer_handler_id_t',
        'custom_viewer_help_t', 'custom_viewer_jump',
        'custom_viewer_keydown_t', 'custom_viewer_location_changed_t',
        'custom_viewer_mouse_moved_t', 'custom_viewer_popup_t', 'dbg',
        'dbg_add_bpt_tev', 'dbg_add_call_tev', 'dbg_add_debug_event',
        'dbg_add_insn_tev', 'dbg_add_many_tevs', 'dbg_add_ret_tev',
        'dbg_add_tev', 'dbg_add_thread', 'dbg_appcall', 'dbg_bin_search',
        'dbg_bpt', 'dbg_bpt_changed', 'dbg_can_query', 'dbg_del_thread',
        'dbg_event_code_t', 'dbg_exception', 'dbg_finished_loading_bpts',
        'dbg_get_input_path', 'dbg_information', 'dbg_last',
        'dbg_library_load', 'dbg_library_unload', 'dbg_notification_t',
        'dbg_null', 'dbg_process_attach', 'dbg_process_detach',
        'dbg_process_exit', 'dbg_process_start', 'dbg_request_error',
        'dbg_run_to', 'dbg_started_loading_bpts', 'dbg_step_into',
        'dbg_step_over', 'dbg_step_until_ret', 'dbg_suspend_process',
        'dbg_thread_exit', 'dbg_thread_start', 'dbg_trace',
        'dbgevt_vec_t', 'dbt_cancel', 'dbt_no', 'dbt_yes', 'dd_size',
        'debug', 'debug_name_how_t', 'debugger_t__event_t', 'dec_flag',
        'decode_insn', 'decode_preceding_insn', 'decode_prev_insn',
        'decorate_name', 'deep_copy_idcv', 'default_compiler',
        'define_exception', 'define_stkvar', 'del_absbase', 'del_aflags',
        'del_alignment', 'del_array_parameters', 'del_bpt', 'del_bptgrp',
        'del_cref', 'del_custom_data_type_ids', 'del_debug_names',
        'del_dref', 'del_encoding', 'del_enum', 'del_enum_member',
        'del_extra_cmt', 'del_fixup', 'del_frame', 'del_func',
        'del_global_name', 'del_hidden_range', 'del_idasgn',
        'del_idc_func', 'del_idc_hotkey', 'del_idcv_attr',
        'del_ind_purged', 'del_item_color', 'del_items', 'del_local_name',
        'del_mapping', 'del_member_tinfo', 'del_named_type',
        'del_node_info', 'del_numbered_type', 'del_op_tinfo',
        'del_qatexit', 'del_refinfo', 'del_regvar', 'del_segm',
        'del_segment_translations', 'del_selector', 'del_source_linnum',
        'del_sourcefile', 'del_sreg_range', 'del_stkpnt', 'del_str_type',
        'del_struc', 'del_struc_member', 'del_struc_members',
        'del_switch_info', 'del_switch_parent', 'del_til', 'del_tinfo',
        'del_tinfo_attr', 'del_tryblks', 'del_value', 'del_vftable_ea',
        'del_virt_module', 'del_xrefpos', 'delete_all_xrefs_from',
        'delete_dirtree', 'delete_extra_cmts', 'delete_imports',
        'delete_menu', 'delete_mutable_graph', 'delete_switch_table',
        'delete_toolbar', 'delete_unreferenced_stkvars',
        'delete_wrong_stkvar_ops', 'deleting_enum',
        'deleting_enum_member', 'deleting_func', 'deleting_func_tail',
        'deleting_segm', 'deleting_struc', 'deleting_struc_member',
        'deleting_tryblks', 'delinf', 'demangle', 'demangle_name',
        'demangler_t', 'demreq_type_t', 'denorm_absent',
        'denorm_indeterminate', 'denorm_present', 'deref_idcv',
        'deref_ptr', 'deserialize_dynamic_register_set',
        'deserialize_tinfo', 'destroy_custom_viewer', 'destroy_lexer',
        'destroyed_items', 'detach_action_from_menu',
        'detach_action_from_popup', 'detach_action_from_toolbar',
        'detach_custom_data_format', 'detach_process',
        'detect_compiler_using_demangler', 'determine_rtl',
        'determined_main', 'dev_t', 'diff_trace_file', 'diffpos_t',
        'direntry_vec_t', 'diridx_t', 'dirtree_change_rank',
        'dirtree_chdir', 'dirtree_cursor_vec_t', 'dirtree_errstr',
        'dirtree_find_entry', 'dirtree_findfirst', 'dirtree_findnext',
        'dirtree_get_abspath_by_cursor', 'dirtree_get_abspath_by_relpath',
        'dirtree_get_dir_size', 'dirtree_get_entry_attrs',
        'dirtree_get_entry_name', 'dirtree_get_id',
        'dirtree_get_nodename', 'dirtree_get_parent_cursor',
        'dirtree_get_rank', 'dirtree_getcwd', 'dirtree_id_t',
        'dirtree_link', 'dirtree_link', 'dirtree_link_inode',
        'dirtree_mkdir', 'dirtree_mkdir', 'dirtree_move', 'dirtree_rank',
        'dirtree_rename', 'dirtree_resolve_cursor',
        'dirtree_resolve_path', 'dirtree_rmdir', 'dirtree_rmdir',
        'dirtree_rminode', 'dirtree_segm_moved', 'dirtree_set_id',
        'dirtree_set_nodename', 'dirtree_traverse', 'dirvec_t',
        'disable_bblk_trace', 'disable_bpt', 'disable_flags',
        'disable_func_trace', 'disable_insn_trace', 'disable_step_trace',
        'display_copyright_warning', 'display_gdl', 'display_widget',
        'div', 'div_t', 'dk_addr_names', 'dk_addr_text', 'dk_float',
        'dk_int', 'double_flag', 'double_t', 'dr_I', 'dr_O', 'dr_R',
        'dr_S', 'dr_T', 'dr_U', 'dr_W', 'drc_t', 'dref_t',
        'ds_packed_size', 'dstr_tinfo', 'dterr_t', 'dummy_name_ea',
        'dump_func_type_data', 'dup', 'dup2', 'dw_size', 'dword_flag',
        'dynamic_register_set_t__const_char_vec_t', 'eNI', 'ea2node',
        'ea2str', 'ea64_t', 'ea_name_vec_t', 'ea_t',
        'ea_viewer_history_push_and_jump', 'eadd', 'eavec_t', 'echsize',
        'ecleaz', 'eclose', 'ecmp', 'ecreate', 'ecvt', 'edge_back',
        'edge_cross', 'edge_error', 'edge_forward', 'edge_subgraph',
        'edge_tree', 'edge_type_t', 'edgevec_t', 'edit_manual_regions',
        'ediv', 'eetol', 'eetol64', 'eetol64u', 'eldexp', 'eltoe',
        'eltoe64', 'eltoe64u', 'emdnorm', 'emovi', 'emovo', 'emul',
        'enable_auto', 'enable_bblk_trace', 'enable_bpt', 'enable_bptgrp',
        'enable_chooser_item_attrs', 'enable_flags', 'enable_func_trace',
        'enable_insn_trace', 'enable_manual_regions',
        'enable_numbered_types', 'enable_step_trace',
        'encoder_t__notify_recerr_t', 'encoding_from_strtype',
        'end_type_updating', 'enum_bf_changed', 'enum_cmt_changed',
        'enum_created', 'enum_deleted', 'enum_flag', 'enum_flag_changed',
        'enum_import_names', 'enum_member_created', 'enum_member_deleted',
        'enum_member_vec_t', 'enum_ordinal_changed', 'enum_renamed',
        'enum_t', 'enum_width_changed', 'enumerate_files',
        'enumerate_files2', 'enumerate_segments_with_selector',
        'enumerate_selectors', 'enumplace_t__adjust',
        'enumplace_t__beginning', 'enumplace_t__clone',
        'enumplace_t__compare', 'enumplace_t__compare2',
        'enumplace_t__copyfrom', 'enumplace_t__deserialize',
        'enumplace_t__ending', 'enumplace_t__enter',
        'enumplace_t__generate', 'enumplace_t__id', 'enumplace_t__leave',
        'enumplace_t__makeplace', 'enumplace_t__name',
        'enumplace_t__next', 'enumplace_t__prev', 'enumplace_t__print',
        'enumplace_t__rebase', 'enumplace_t__serialize',
        'enumplace_t__toea', 'enumplace_t__touval', 'eof', 'equal_bytes',
        'eread', 'erf', 'erfc', 'erfcf', 'erfcl', 'erff', 'erfl',
        'errno_t', 'error', 'error_t', 'errorexit', 'eseek', 'eshift',
        'ev_add_cref', 'ev_add_dref', 'ev_adjust_argloc',
        'ev_adjust_libfunc_ea', 'ev_adjust_refinfo', 'ev_ana_insn',
        'ev_analyze_prolog', 'ev_appcall', 'ev_arch_changed',
        'ev_arg_addrs_ready', 'ev_asm_installed', 'ev_assemble',
        'ev_attach_process', 'ev_auto_queue_empty', 'ev_bin_search',
        'ev_broadcast', 'ev_calc_arglocs', 'ev_calc_cdecl_purged_bytes',
        'ev_calc_next_eas', 'ev_calc_purged_bytes', 'ev_calc_retloc',
        'ev_calc_spdelta', 'ev_calc_step_over', 'ev_calc_switch_cases',
        'ev_calc_varglocs', 'ev_calcrel', 'ev_can_have_type',
        'ev_check_bpt', 'ev_clean_tbit', 'ev_cleanup_appcall',
        'ev_close_file', 'ev_cmp_operands', 'ev_coagulate',
        'ev_coagulate_dref', 'ev_create_flat_group',
        'ev_create_func_frame', 'ev_create_merge_handlers',
        'ev_create_switch_xrefs', 'ev_creating_segm',
        'ev_dbg_enable_trace', 'ev_decorate_name', 'ev_del_cref',
        'ev_del_dref', 'ev_delay_slot_insn', 'ev_demangle_name',
        'ev_detach_process', 'ev_emu_insn', 'ev_endbinary',
        'ev_ending_undo', 'ev_equal_reglocs', 'ev_eval_lowcnd',
        'ev_exit_process', 'ev_extract_address', 'ev_find_op_value',
        'ev_find_reg_value', 'ev_func_bounds', 'ev_gen_asm_or_lst',
        'ev_gen_map_file', 'ev_gen_regvar_def', 'ev_gen_src_file_lnnum',
        'ev_gen_stkvar_def', 'ev_get_abi_info', 'ev_get_autocmt',
        'ev_get_bg_color', 'ev_get_cc_regs', 'ev_get_code16_mode',
        'ev_get_dbr_opnum', 'ev_get_debapp_attrs',
        'ev_get_debmod_extensions', 'ev_get_debug_event',
        'ev_get_default_enum_size', 'ev_get_frame_retsize',
        'ev_get_idd_opinfo', 'ev_get_macro_insn_head',
        'ev_get_memory_info', 'ev_get_operand_string', 'ev_get_processes',
        'ev_get_procmod', 'ev_get_reg_accesses', 'ev_get_reg_info',
        'ev_get_reg_name', 'ev_get_simd_types', 'ev_get_srcinfo_path',
        'ev_get_stkarg_area_info', 'ev_get_stkvar_scale_factor',
        'ev_getreg', 'ev_init', 'ev_init_debugger', 'ev_insn_reads_tbit',
        'ev_is_align_insn', 'ev_is_alloca_probe', 'ev_is_basic_block_end',
        'ev_is_call_insn', 'ev_is_cond_insn', 'ev_is_control_flow_guard',
        'ev_is_far_jump', 'ev_is_indirect_jump', 'ev_is_insn_table_jump',
        'ev_is_jump_func', 'ev_is_ret_insn', 'ev_is_sane_insn',
        'ev_is_sp_based', 'ev_is_switch', 'ev_is_tracing_enabled',
        'ev_last_cb_before_debugger', 'ev_last_cb_before_loader',
        'ev_last_cb_before_type_callbacks', 'ev_loader',
        'ev_loader_elf_machine', 'ev_lower_func_type', 'ev_map_address',
        'ev_max_ptr_size', 'ev_may_be_func', 'ev_may_show_sreg',
        'ev_moving_segm', 'ev_newasm', 'ev_newbinary', 'ev_newfile',
        'ev_newprc', 'ev_next_exec_insn', 'ev_obsolete1', 'ev_obsolete2',
        'ev_oldfile', 'ev_open_file', 'ev_out_assumes', 'ev_out_data',
        'ev_out_footer', 'ev_out_header', 'ev_out_insn', 'ev_out_label',
        'ev_out_mnem', 'ev_out_operand', 'ev_out_segend',
        'ev_out_segstart', 'ev_out_special_item', 'ev_privrange_changed',
        'ev_read_file', 'ev_read_memory', 'ev_read_registers',
        'ev_realcvt', 'ev_rebase_if_required_to', 'ev_rename',
        'ev_replaying_undo', 'ev_request_pause', 'ev_resume', 'ev_rexec',
        'ev_send_ioctl', 'ev_set_code16_mode', 'ev_set_exception_info',
        'ev_set_idp_options', 'ev_set_proc_options', 'ev_set_resume_mode',
        'ev_setup_til', 'ev_start_process', 'ev_str2reg', 'ev_suspended',
        'ev_term', 'ev_term_debugger', 'ev_thread_continue',
        'ev_thread_get_sreg_base', 'ev_thread_suspend',
        'ev_treat_hindering_item', 'ev_undefine', 'ev_update_bpts',
        'ev_update_call_stack', 'ev_update_lowcnds', 'ev_use_arg_types',
        'ev_use_regarg_type', 'ev_use_stkarg_type',
        'ev_validate_flirt_func', 'ev_verify_noreturn', 'ev_verify_sp',
        'ev_write_file', 'ev_write_memory', 'ev_write_register',
        'eval_expr', 'eval_expr_long', 'eval_idc_expr',
        'eval_idc_snippet', 'event_id_t', 'ewrite', 'excvec_t',
        'exec_idc_script', 'exec_system_script', 'execute_sync',
        'execute_ui_requests', 'exist_bpt', 'exists_fixup', 'exit',
        'exit_process', 'exp', 'exp2', 'exp2f', 'exp2l', 'expand_argv',
        'expand_struc', 'expanding_struc', 'expf', 'expl', 'expm1',
        'expm1f', 'expm1l', 'extend_sign', 'external_colorizer_t',
        'external_colorizers_t', 'external_ident_colorizer_t',
        'external_ident_colorizers_t', 'extlang_changed',
        'extlang_object_t', 'extlangs_t', 'extra_cmt_changed',
        'extract_argloc', 'extract_module_from_archive', 'extract_name',
        'f_AIXAR', 'f_AOUT', 'f_AR', 'f_BIN', 'f_COFF', 'f_COM',
        'f_COM_old', 'f_DRV', 'f_ELF', 'f_EXE', 'f_EXE_old', 'f_HEX',
        'f_LE', 'f_LOADER', 'f_LX', 'f_MACHO', 'f_MEX', 'f_NLM', 'f_OMF',
        'f_OMFLIB', 'f_PE', 'f_PRC', 'f_PSXOBJ', 'f_SREC', 'f_W32RUN',
        'f_WIN', 'f_ZIP', 'f_any', 'f_has_cmt', 'f_has_dummy_name',
        'f_has_extra_cmts', 'f_has_name', 'f_has_user_name', 'f_has_xref',
        'f_is_align', 'f_is_byte', 'f_is_code', 'f_is_custom',
        'f_is_data', 'f_is_double', 'f_is_dword', 'f_is_float',
        'f_is_head', 'f_is_not_tail', 'f_is_oword', 'f_is_pack_real',
        'f_is_qword', 'f_is_strlit', 'f_is_struct', 'f_is_tail',
        'f_is_tbyte', 'f_is_word', 'f_is_yword', 'fabs', 'fabsf', 'fabsl',
        'fc_block_type_t', 'fc_calc_block_type', 'fcb_cndret',
        'fcb_enoret', 'fcb_error', 'fcb_extern', 'fcb_indjump',
        'fcb_noret', 'fcb_normal', 'fcb_ret', 'fclose', 'fcloseall',
        'fcvt', 'fdim', 'fdimf', 'fdiml', 'fdopen', 'feof', 'ferror',
        'fflush', 'fgetc', 'fgetchar', 'fgetpos', 'fgets', 'fgetwc',
        'fgetws', 'file2base', 'file_janitor_t', 'filelength', 'fileno',
        'filetype_t', 'find_binary', 'find_bpt', 'find_byte',
        'find_byter', 'find_code', 'find_custom_data_format',
        'find_custom_data_type', 'find_custom_fixup',
        'find_custom_refinfo', 'find_data', 'find_defined',
        'find_defjump_from_table', 'find_error', 'find_extlang',
        'find_extlang_by_ext', 'find_extlang_by_index',
        'find_extlang_by_name', 'find_extlang_kind_t',
        'find_free_selector', 'find_func_bounds', 'find_idc_class',
        'find_idc_func', 'find_idc_gvar', 'find_imm', 'find_ioport',
        'find_ioport_bit', 'find_jtable_size', 'find_not_func',
        'find_notype', 'find_plugin', 'find_reg_access', 'find_regvar',
        'find_selector', 'find_suspop', 'find_syseh', 'find_text',
        'find_tinfo_udt_member', 'find_unknown', 'find_widget',
        'first_idcv_attr', 'first_named_type', 'fixup_type_t', 'fixups_t',
        'fl_CF', 'fl_CN', 'fl_F', 'fl_JF', 'fl_JN', 'fl_U',
        'fl_USobsolete', 'flags_t', 'float_flag', 'float_t', 'floor',
        'floorf', 'floorl', 'flow_chart_created', 'flt_flag',
        'flush_buffers', 'flushall', 'fma', 'fmaf', 'fmal', 'fmax',
        'fmaxf', 'fmaxl', 'fmin', 'fminf', 'fminl', 'fmod', 'fmodf',
        'fmodl', 'fopen', 'fopenA', 'fopenM', 'fopenRB', 'fopenRT',
        'fopenWB', 'fopenWT', 'fopen_s', 'for_all_arglocs',
        'for_all_const_arglocs', 'for_all_enum_members',
        'for_all_extlangs', 'force_name', 'forget_problem',
        'form_actions_t__dlgbtn_t', 'format_c_number', 'format_cdata',
        'format_charlit', 'format_functype_t', 'formchgcb_t',
        'fpclassify', 'fpos_t', 'fpreset', 'fprintf', 'fprintf_s',
        'fputc', 'fputchar', 'fputs', 'fputwc', 'fputws',
        'fpvalue_error_t', 'fpvalue_kind_t', 'frame_deleted',
        'frame_off_args', 'frame_off_lvars', 'frame_off_retaddr',
        'frame_off_savregs', 'frame_part_t', 'fread', 'fread2bytes',
        'fread4bytes', 'fread8bytes', 'fread_s', 'freadbytes', 'free',
        'free_argv', 'free_chunk', 'free_custom_icon', 'free_debug_event',
        'free_dll', 'free_idcv', 'free_loaders_list', 'free_regarg',
        'free_regvar', 'free_til', 'freopen', 'freopen_s', 'frexp',
        'frexpf', 'frexpl', 'fscanf', 'fscanf_s', 'fseek', 'fsetpos',
        'ftell', 'func_added', 'func_contains', 'func_deleted',
        'func_does_return', 'func_has_stkframe_hole',
        'func_item_iterator_decode_preceding_insn',
        'func_item_iterator_decode_prev_insn', 'func_item_iterator_next',
        'func_item_iterator_prev', 'func_item_iterator_succ',
        'func_noret_changed', 'func_parent_iterator_set',
        'func_tail_appended', 'func_tail_deleted',
        'func_tail_iterator_set', 'func_tail_iterator_set_ea',
        'func_updated', 'funcargvec_t', 'fwide', 'fwprintf', 'fwprintf_s',
        'fwrite', 'fwrite2bytes', 'fwrite4bytes', 'fwrite8bytes',
        'fwritebytes', 'fwscanf', 'fwscanf_s', 'gcc_layout', 'gcvt',
        'gdecode_t', 'gen_complex_call_chart', 'gen_decorate_name',
        'gen_disasm_text', 'gen_exe_file', 'gen_file', 'gen_fix_fixups',
        'gen_flow_graph', 'gen_gdl', 'gen_idb_event', 'gen_rand_buf',
        'gen_simple_call_chart', 'gen_use_arg_tinfos',
        'gen_use_arg_tinfos2', 'generate_disasm_line',
        'generate_disassembly', 'get_16bit', 'get_32bit', 'get_64bit',
        'get_8bit', 'get_abi_name', 'get_absbase', 'get_action_checkable',
        'get_action_checked', 'get_action_icon', 'get_action_label',
        'get_action_shortcut', 'get_action_state', 'get_action_tooltip',
        'get_action_visibility', 'get_active_modal_widget',
        'get_addon_info', 'get_addon_info_idx', 'get_aflags',
        'get_alias_target', 'get_alignment', 'get_archive_path',
        'get_arg_addrs', 'get_arg_align', 'get_array_parameters',
        'get_ash', 'get_asm_inc_file', 'get_auto_display',
        'get_auto_state', 'get_base_type', 'get_basic_file_type',
        'get_bblk_trace_options', 'get_best_fit_member', 'get_bmask_cmt',
        'get_bmask_name', 'get_bpt', 'get_bpt_group', 'get_bpt_qty',
        'get_bpt_tev_ea', 'get_bptloc_string', 'get_byte', 'get_bytes',
        'get_c_header_path', 'get_c_macros', 'get_call_tev_callee',
        'get_cc', 'get_chooser_data', 'get_chooser_obj', 'get_cmt',
        'get_colored_demangled_name', 'get_colored_long_name',
        'get_colored_name', 'get_colored_short_name', 'get_comp',
        'get_compiler_abbr', 'get_compiler_name', 'get_compilers',
        'get_cp_validity', 'get_curline', 'get_current_extlang',
        'get_current_idasgn', 'get_current_source_file',
        'get_current_source_line', 'get_current_thread',
        'get_current_viewer', 'get_current_widget', 'get_cursor',
        'get_custom_data_format', 'get_custom_data_formats',
        'get_custom_data_type', 'get_custom_data_type_ids',
        'get_custom_data_types', 'get_custom_refinfo',
        'get_custom_refinfo_handler', 'get_custom_viewer_curline',
        'get_custom_viewer_location', 'get_custom_viewer_place',
        'get_custom_viewer_place_xcoord', 'get_data_elsize',
        'get_data_value', 'get_db_byte', 'get_dbctx_id', 'get_dbctx_qty',
        'get_dbg_byte', 'get_dbg_memory_info', 'get_dbg_reg_info',
        'get_debug_event', 'get_debug_name', 'get_debug_name_ea',
        'get_debug_names', 'get_debugger_event_cond',
        'get_debugger_plugins', 'get_default_align',
        'get_default_encoding_idx', 'get_default_radix',
        'get_default_reftype', 'get_demangled_name', 'get_dirty_infos',
        'get_dtype_by_size', 'get_dtype_flag', 'get_dtype_size',
        'get_dword', 'get_ea_name', 'get_ea_viewer_history_info',
        'get_effective_cc', 'get_effective_spd', 'get_elapsed_secs',
        'get_elf_debug_file_directory', 'get_encoding_bpu',
        'get_encoding_bpu_by_name', 'get_encoding_name',
        'get_encoding_qty', 'get_entry', 'get_entry_forwarder',
        'get_entry_name', 'get_entry_ordinal', 'get_entry_qty',
        'get_enum', 'get_enum_cmt', 'get_enum_flag', 'get_enum_id',
        'get_enum_idx', 'get_enum_member', 'get_enum_member_bmask',
        'get_enum_member_by_name', 'get_enum_member_cmt',
        'get_enum_member_enum', 'get_enum_member_expr',
        'get_enum_member_name', 'get_enum_member_serial',
        'get_enum_member_value', 'get_enum_name', 'get_enum_name2',
        'get_enum_qty', 'get_enum_size', 'get_enum_type_ordinal',
        'get_enum_width', 'get_errdesc', 'get_error_data',
        'get_error_string', 'get_extlang', 'get_extra_cmt', 'get_fchunk',
        'get_fchunk_num', 'get_fchunk_qty', 'get_file_ext',
        'get_file_type_name', 'get_fileregion_ea',
        'get_fileregion_offset', 'get_first_bmask', 'get_first_cref_from',
        'get_first_cref_to', 'get_first_dref_from', 'get_first_dref_to',
        'get_first_enum_member', 'get_first_fcref_from',
        'get_first_fcref_to', 'get_first_fixup_ea',
        'get_first_free_extra_cmtidx', 'get_first_hidden_range',
        'get_first_module', 'get_first_seg',
        'get_first_serial_enum_member', 'get_first_struc_idx',
        'get_fixup', 'get_fixup_desc', 'get_fixup_handler',
        'get_fixup_value', 'get_fixups', 'get_flags', 'get_flags_by_size',
        'get_flags_ex', 'get_forced_operand', 'get_fpvalue_kind',
        'get_frame', 'get_frame_part', 'get_frame_retsize',
        'get_frame_size', 'get_free_disk_space', 'get_full_data_elsize',
        'get_full_flags', 'get_full_type', 'get_func', 'get_func_bitness',
        'get_func_bits', 'get_func_by_frame', 'get_func_bytes',
        'get_func_chunknum', 'get_func_cmt', 'get_func_name',
        'get_func_num', 'get_func_qty', 'get_func_ranges',
        'get_func_trace_options', 'get_global_var', 'get_gotea',
        'get_graph_viewer', 'get_group_selector', 'get_grp_bpts',
        'get_hex_string', 'get_hexdsp', 'get_hexdump_ea',
        'get_hidden_range', 'get_hidden_range_num',
        'get_hidden_range_qty', 'get_highlight', 'get_ida_notepad_text',
        'get_ida_subdirs', 'get_idainfo_by_type', 'get_idasgn_desc',
        'get_idasgn_header_by_short_name', 'get_idasgn_qty',
        'get_idasgn_title', 'get_idati', 'get_idb_ctime',
        'get_idb_nopens', 'get_idc_filename', 'get_idcv_attr',
        'get_idcv_class_name', 'get_idcv_slice', 'get_idp_descs',
        'get_idp_name', 'get_idptype_and_data', 'get_ids_modnode',
        'get_ignore_micro', 'get_imagebase', 'get_immvals',
        'get_import_module_name', 'get_import_module_qty',
        'get_ind_purged', 'get_initial_ida_version',
        'get_initial_idb_version', 'get_innermost_member',
        'get_input_file_path', 'get_insn_tev_reg_mem',
        'get_insn_tev_reg_result', 'get_insn_tev_reg_val',
        'get_insn_trace_options', 'get_ip_val', 'get_item_color',
        'get_item_end', 'get_item_flag', 'get_item_head', 'get_item_size',
        'get_jtable_target', 'get_kernel_version', 'get_key_code',
        'get_last_bmask', 'get_last_enum_member', 'get_last_hidden_range',
        'get_last_pfxlen', 'get_last_seg', 'get_last_serial_enum_member',
        'get_last_struc_idx', 'get_linput_type', 'get_loader_format_name',
        'get_loader_name', 'get_loader_name_from_dll', 'get_local_var',
        'get_local_vars', 'get_long_name', 'get_lookback',
        'get_mangled_name_type', 'get_manual_insn', 'get_manual_regions',
        'get_mapping', 'get_mappings_qty', 'get_max_offset',
        'get_max_strlit_length', 'get_member', 'get_member_by_fullname',
        'get_member_by_id', 'get_member_by_name', 'get_member_cmt',
        'get_member_fullname', 'get_member_id', 'get_member_name',
        'get_member_size', 'get_member_struc', 'get_member_tinfo',
        'get_min_spd_ea', 'get_module_data', 'get_module_info',
        'get_name', 'get_name_base_ea', 'get_name_color', 'get_name_ea',
        'get_name_expr', 'get_name_value', 'get_named_type',
        'get_named_type64', 'get_navband_ea', 'get_navband_pixel',
        'get_new_handler', 'get_next_bmask', 'get_next_cref_from',
        'get_next_cref_to', 'get_next_dref_from', 'get_next_dref_to',
        'get_next_enum_member', 'get_next_fchunk', 'get_next_fcref_from',
        'get_next_fcref_to', 'get_next_fixup_ea', 'get_next_func',
        'get_next_func_addr', 'get_next_hidden_range',
        'get_next_member_idx', 'get_next_module', 'get_next_seg',
        'get_next_serial_enum_member', 'get_next_struc_idx',
        'get_nice_colored_name', 'get_nlist_ea', 'get_nlist_idx',
        'get_nlist_name', 'get_nlist_size', 'get_node_info',
        'get_nsec_stamp', 'get_numbered_type', 'get_numbered_type_name',
        'get_octet', 'get_offbase', 'get_offset_expr',
        'get_offset_expression', 'get_op_tinfo', 'get_opinfo',
        'get_opnum', 'get_optype_flags0', 'get_optype_flags1',
        'get_or_guess_member_tinfo', 'get_ordinal_from_idb_type',
        'get_ordinal_qty', 'get_original_byte', 'get_original_dword',
        'get_original_qword', 'get_original_word',
        'get_outfile_encoding_idx', 'get_output_curline',
        'get_output_cursor', 'get_output_selected_text', 'get_path',
        'get_ph', 'get_place_class', 'get_place_class_id',
        'get_place_class_template', 'get_plugin_options', 'get_plugins',
        'get_predef_insn_cmt', 'get_prev_bmask', 'get_prev_enum_member',
        'get_prev_fchunk', 'get_prev_fixup_ea', 'get_prev_func',
        'get_prev_func_addr', 'get_prev_hidden_range',
        'get_prev_member_idx', 'get_prev_seg',
        'get_prev_serial_enum_member', 'get_prev_sreg_range',
        'get_prev_struc_idx', 'get_printable_immvals', 'get_problem',
        'get_problem_desc', 'get_problem_name', 'get_process_options',
        'get_process_state', 'get_processes', 'get_qerrno', 'get_qword',
        'get_radix', 'get_refinfo', 'get_refinfo_descs',
        'get_reftype_by_size', 'get_reg_name', 'get_reg_val',
        'get_reg_vals', 'get_registered_actions', 'get_ret_tev_return',
        'get_root_filename', 'get_scalar_bt', 'get_screen_ea', 'get_secs',
        'get_segm_base', 'get_segm_by_name', 'get_segm_by_sel',
        'get_segm_class', 'get_segm_expr', 'get_segm_name',
        'get_segm_num', 'get_segm_para', 'get_segm_qty',
        'get_segment_alignment', 'get_segment_cmt',
        'get_segment_combination', 'get_segment_translations',
        'get_selector_qty', 'get_short_name', 'get_source_linnum',
        'get_sourcefile', 'get_sp_delta', 'get_sp_val', 'get_spd',
        'get_special_folder', 'get_spoiled_reg', 'get_sptr',
        'get_srcdbg_paths', 'get_srcdbg_undesired_paths',
        'get_srcinfo_provider', 'get_sreg', 'get_sreg_range',
        'get_sreg_range_num', 'get_sreg_ranges_qty', 'get_std_dirtree',
        'get_step_trace_options', 'get_stkvar', 'get_stock_tinfo',
        'get_str_encoding_idx', 'get_str_term1', 'get_str_term2',
        'get_str_type', 'get_str_type_code', 'get_str_type_prefix_length',
        'get_strid', 'get_strlist_item', 'get_strlist_options',
        'get_strlist_qty', 'get_strlit_contents', 'get_stroff_path',
        'get_strtype_bpu', 'get_struc', 'get_struc_by_idx',
        'get_struc_cmt', 'get_struc_first_offset', 'get_struc_id',
        'get_struc_idx', 'get_struc_last_offset', 'get_struc_name',
        'get_struc_next_offset', 'get_struc_prev_offset', 'get_struc_qty',
        'get_struc_size', 'get_struct_operand', 'get_switch_info',
        'get_switch_parent', 'get_synced_group', 'get_tab_size',
        'get_terminate', 'get_tev_ea', 'get_tev_event', 'get_tev_info',
        'get_tev_memory_info', 'get_tev_qty', 'get_tev_tid',
        'get_tev_type', 'get_thread_qty', 'get_tinfo', 'get_tinfo_attr',
        'get_tinfo_attrs', 'get_tinfo_details', 'get_tinfo_pdata',
        'get_tinfo_property', 'get_tinfo_size', 'get_token',
        'get_trace_base_address', 'get_trace_dynamic_register_set',
        'get_trace_file_desc', 'get_trace_platform', 'get_tryblks',
        'get_type_flags', 'get_type_ordinal', 'get_unexpected',
        'get_usecs', 'get_user_idadir', 'get_user_input_event',
        'get_user_strlist_options', 'get_utf8_char', 'get_vftable_ea',
        'get_vftable_ordinal', 'get_view_renderer_type',
        'get_viewer_graph', 'get_viewer_place_type',
        'get_viewer_user_data', 'get_visible_name',
        'get_visible_segm_name', 'get_wide_byte', 'get_wide_dword',
        'get_wide_word', 'get_widget_title', 'get_widget_type',
        'get_window_id', 'get_word', 'get_xrefpos', 'get_zero_ranges',
        'getc', 'getchar', 'getcwd', 'getenv', 'getenv_s', 'getinf',
        'getinf_buf', 'getinf_flag', 'getinf_str', 'getn_bpt',
        'getn_enum', 'getn_fchunk', 'getn_func', 'getn_hidden_range',
        'getn_selector', 'getn_sreg_range', 'getn_thread',
        'getn_thread_name', 'getnode', 'getnseg', 'gets_s', 'getseg',
        'getsysfile', 'getw', 'getwc', 'getwchar', 'git_edge', 'git_elp',
        'git_node', 'git_none', 'git_text', 'git_tool', 'graph_id_t',
        'graph_item_type_t', 'graph_notification_t', 'graph_row_info_t',
        'graph_trace', 'graph_viewer_t', 'grcode_attach_menu_item',
        'grcode_calculating_layout', 'grcode_center_on',
        'grcode_change_group_visibility', 'grcode_changed_graph',
        'grcode_clear', 'grcode_clicked', 'grcode_create_circle_layout',
        'grcode_create_digraph_layout', 'grcode_create_disasm_graph1',
        'grcode_create_disasm_graph2', 'grcode_create_graph_viewer',
        'grcode_create_group', 'grcode_create_mutable_graph',
        'grcode_create_tree_layout', 'grcode_create_user_graph_place',
        'grcode_creating_group', 'grcode_dblclicked',
        'grcode_del_custom_layout', 'grcode_del_node_info',
        'grcode_delete_group', 'grcode_delete_mutable_graph',
        'grcode_deleting_group', 'grcode_destroyed',
        'grcode_edge_infos_wrapper_clear',
        'grcode_edge_infos_wrapper_copy', 'grcode_empty',
        'grcode_find_subgraph_node', 'grcode_fit_window',
        'grcode_get_curnode', 'grcode_get_custom_layout',
        'grcode_get_gli', 'grcode_get_graph_groups',
        'grcode_get_graph_viewer', 'grcode_get_node_info',
        'grcode_get_node_representative', 'grcode_get_selection',
        'grcode_get_viewer_graph', 'grcode_gotfocus',
        'grcode_group_visibility', 'grcode_is_visible_node',
        'grcode_layout_calculated', 'grcode_lostfocus', 'grcode_node_qty',
        'grcode_nrect', 'grcode_refresh_viewer', 'grcode_reserved',
        'grcode_reserved2', 'grcode_set_custom_layout', 'grcode_set_edge',
        'grcode_set_gli', 'grcode_set_graph_groups',
        'grcode_set_node_info', 'grcode_set_titlebar_height',
        'grcode_set_viewer_graph', 'grcode_user_draw', 'grcode_user_hint',
        'grcode_user_refresh', 'grcode_user_size', 'grcode_user_text',
        'grcode_user_title', 'grcode_viewer_create_groups',
        'grcode_viewer_create_groups_vec', 'grcode_viewer_delete_groups',
        'grcode_viewer_delete_groups_vec',
        'grcode_viewer_groups_visibility',
        'grcode_viewer_groups_visibility_vec', 'grentry',
        'groups_crinfos_t', 'gtd_func_t', 'gtd_udt_t', 'gts_code_t',
        'guess_func_cc', 'guess_tinfo', 'h2ti', 'h2ti_type_cb',
        'handle_debug_event', 'handle_fixups_in_macro',
        'has_aflag_linnum', 'has_aflag_lname', 'has_aflag_ti',
        'has_aflag_ti0', 'has_aflag_ti1', 'has_any_name', 'has_auto_name',
        'has_cf_chg', 'has_cf_use', 'has_cmt', 'has_delay_slot_t',
        'has_dummy_name', 'has_external_refs', 'has_extra_cmts',
        'has_file_ext', 'has_immd', 'has_insn_feature', 'has_lname',
        'has_name', 'has_regvar', 'has_ti', 'has_ti0', 'has_ti1',
        'has_user_name', 'has_value', 'has_xref', 'have_set_options',
        'help_t', 'hex_flag', 'hexdsp_t', 'hexplace_gen_t__byte_kind_t',
        'hexplace_gen_t__data_kind_t', 'hexplace_gen_t__int_format_t',
        'hexplace_t__adjust', 'hexplace_t__beginning',
        'hexplace_t__clone', 'hexplace_t__compare',
        'hexplace_t__compare2', 'hexplace_t__copyfrom',
        'hexplace_t__deserialize', 'hexplace_t__ea2str',
        'hexplace_t__ending', 'hexplace_t__enter', 'hexplace_t__generate',
        'hexplace_t__id', 'hexplace_t__leave', 'hexplace_t__makeplace',
        'hexplace_t__name', 'hexplace_t__next',
        'hexplace_t__out_one_item', 'hexplace_t__prev',
        'hexplace_t__print', 'hexplace_t__rebase',
        'hexplace_t__serialize', 'hexplace_t__toea', 'hexplace_t__touval',
        'hide_all_bpts', 'hide_border', 'hide_item', 'hide_name',
        'hide_wait_box', 'high', 'hook_cb_t', 'hook_event_listener',
        'hook_to_notification_point', 'hook_type_t', 'html_footer_cb_t',
        'html_header_cb_t', 'html_line_cb_t', 'hypot', 'hypotf', 'hypotl',
        'ida_checkmem', 'ida_deb', 'ida_syntax_highlighter_t__keywords_t',
        'ida_syntax_highlighter_t__multicmtvec_t', 'idadir',
        'idaplace_t__adjust', 'idaplace_t__beginning',
        'idaplace_t__clone', 'idaplace_t__compare',
        'idaplace_t__compare2', 'idaplace_t__copyfrom',
        'idaplace_t__deserialize', 'idaplace_t__ending',
        'idaplace_t__enter', 'idaplace_t__generate', 'idaplace_t__id',
        'idaplace_t__leave', 'idaplace_t__makeplace', 'idaplace_t__name',
        'idaplace_t__next', 'idaplace_t__prev', 'idaplace_t__print',
        'idaplace_t__rebase', 'idaplace_t__serialize', 'idaplace_t__toea',
        'idaplace_t__touval', 'idasgn_loaded', 'idastate_t',
        'idb_event__event_code_t', 'idb_utf8', 'idc_func_t', 'idc_vars_t',
        'idcv_float', 'idcv_int64', 'idcv_long', 'idcv_num',
        'idcv_object', 'idcv_string', 'idp_descs_t', 'idp_names_t',
        'ieee_e32', 'ieee_eeul', 'ieee_elog2', 'ieee_eone',
        'ieee_eoneopi', 'ieee_epi', 'ieee_esqrt2', 'ieee_etwo',
        'ieee_ezero', 'ieee_realcvt', 'iek_key_press', 'iek_key_release',
        'iek_mouse_button_press', 'iek_mouse_button_release',
        'iek_mouse_wheel', 'iek_shortcut', 'iek_unknown', 'if_hex',
        'if_signed', 'if_unsigned', 'ignore_micro', 'ignore_name_def_t',
        'ilogb', 'ilogbf', 'ilogbl', 'import_enum_cb_t', 'import_module',
        'import_type', 'importer_t', 'includes', 'inf',
        'inf_abi_set_by_user', 'inf_allow_non_matched_ops',
        'inf_allow_sigmulti', 'inf_append_sigcmt', 'inf_big_arg_align',
        'inf_check_manual_ops', 'inf_check_unicode_strlits',
        'inf_coagulate_code', 'inf_coagulate_data', 'inf_compress_idb',
        'inf_create_all_xrefs', 'inf_create_func_from_call',
        'inf_create_func_from_ptr', 'inf_create_func_tails',
        'inf_create_jump_tables', 'inf_create_off_on_dref',
        'inf_create_off_using_fixup', 'inf_create_strlit_on_xref',
        'inf_data_offset', 'inf_dbg_no_store_path', 'inf_decode_fpp',
        'inf_del_no_xref_insns', 'inf_final_pass', 'inf_full_sp_ana',
        'inf_gen_assume', 'inf_gen_lzero', 'inf_gen_null', 'inf_gen_org',
        'inf_gen_tryblks', 'inf_get_abibits', 'inf_get_af', 'inf_get_af2',
        'inf_get_af2_low', 'inf_get_af_high', 'inf_get_af_low',
        'inf_get_app_bitness', 'inf_get_appcall_options',
        'inf_get_apptype', 'inf_get_asmtype', 'inf_get_baseaddr',
        'inf_get_bin_prefix_size', 'inf_get_cc', 'inf_get_cc_cm',
        'inf_get_cc_defalign', 'inf_get_cc_id', 'inf_get_cc_size_b',
        'inf_get_cc_size_e', 'inf_get_cc_size_i', 'inf_get_cc_size_l',
        'inf_get_cc_size_ldbl', 'inf_get_cc_size_ll', 'inf_get_cc_size_s',
        'inf_get_cmt_indent', 'inf_get_cmtflg',
        'inf_get_database_change_count', 'inf_get_datatypes',
        'inf_get_demname_form', 'inf_get_demnames', 'inf_get_genflags',
        'inf_get_highoff', 'inf_get_indent', 'inf_get_lenxref',
        'inf_get_lflags', 'inf_get_limiter', 'inf_get_listnames',
        'inf_get_long_demnames', 'inf_get_lowoff', 'inf_get_main',
        'inf_get_margin', 'inf_get_max_autoname_len', 'inf_get_max_ea',
        'inf_get_maxref', 'inf_get_min_ea', 'inf_get_nametype',
        'inf_get_netdelta', 'inf_get_omax_ea', 'inf_get_omin_ea',
        'inf_get_ostype', 'inf_get_outflags', 'inf_get_pack_mode',
        'inf_get_prefflag', 'inf_get_privrange',
        'inf_get_privrange_end_ea', 'inf_get_privrange_start_ea',
        'inf_get_procname', 'inf_get_refcmtnum', 'inf_get_short_demnames',
        'inf_get_specsegs', 'inf_get_start_cs', 'inf_get_start_ea',
        'inf_get_start_ip', 'inf_get_start_sp', 'inf_get_start_ss',
        'inf_get_strlit_break', 'inf_get_strlit_flags',
        'inf_get_strlit_pref', 'inf_get_strlit_sernum',
        'inf_get_strlit_zeroes', 'inf_get_strtype',
        'inf_get_type_xrefnum', 'inf_get_version', 'inf_get_xrefflag',
        'inf_get_xrefnum', 'inf_guess_func_type', 'inf_handle_eh',
        'inf_handle_rtti', 'inf_hide_comments', 'inf_hide_libfuncs',
        'inf_huge_arg_align', 'inf_inc_database_change_count',
        'inf_is_16bit', 'inf_is_32bit_exactly', 'inf_is_32bit_or_higher',
        'inf_is_64bit', 'inf_is_auto_enabled', 'inf_is_be', 'inf_is_dll',
        'inf_is_flat_off32', 'inf_is_graph_view', 'inf_is_hard_float',
        'inf_is_kernel_mode', 'inf_is_limiter_empty',
        'inf_is_limiter_thick', 'inf_is_limiter_thin',
        'inf_is_mem_aligned4', 'inf_is_snapshot',
        'inf_is_wide_high_byte_first', 'inf_like_binary',
        'inf_line_pref_with_seg', 'inf_loading_idc', 'inf_macros_enabled',
        'inf_map_stkargs', 'inf_mark_code', 'inf_no_store_user_info',
        'inf_noflow_to_data', 'inf_noret_ana', 'inf_op_offset',
        'inf_pack_idb', 'inf_pack_stkargs', 'inf_postinc_strlit_sernum',
        'inf_prefix_show_funcoff', 'inf_prefix_show_segaddr',
        'inf_prefix_show_stack', 'inf_prefix_truncate_opcode_bytes',
        'inf_propagate_regargs', 'inf_propagate_stkargs',
        'inf_readonly_idb', 'inf_rename_jumpfunc', 'inf_rename_nullsub',
        'inf_set_32bit', 'inf_set_64bit', 'inf_set_abi_set_by_user',
        'inf_set_abibits', 'inf_set_af', 'inf_set_af2', 'inf_set_af2_low',
        'inf_set_af_high', 'inf_set_af_low',
        'inf_set_allow_non_matched_ops', 'inf_set_allow_sigmulti',
        'inf_set_appcall_options', 'inf_set_append_sigcmt',
        'inf_set_apptype', 'inf_set_asmtype', 'inf_set_auto_enabled',
        'inf_set_baseaddr', 'inf_set_be', 'inf_set_big_arg_align',
        'inf_set_bin_prefix_size', 'inf_set_cc', 'inf_set_cc_cm',
        'inf_set_cc_defalign', 'inf_set_cc_id', 'inf_set_cc_size_b',
        'inf_set_cc_size_e', 'inf_set_cc_size_i', 'inf_set_cc_size_l',
        'inf_set_cc_size_ldbl', 'inf_set_cc_size_ll', 'inf_set_cc_size_s',
        'inf_set_check_manual_ops', 'inf_set_check_unicode_strlits',
        'inf_set_cmt_indent', 'inf_set_cmtflg', 'inf_set_coagulate_code',
        'inf_set_coagulate_data', 'inf_set_compress_idb',
        'inf_set_create_all_xrefs', 'inf_set_create_func_from_call',
        'inf_set_create_func_from_ptr', 'inf_set_create_func_tails',
        'inf_set_create_jump_tables', 'inf_set_create_off_on_dref',
        'inf_set_create_off_using_fixup', 'inf_set_create_strlit_on_xref',
        'inf_set_data_offset', 'inf_set_database_change_count',
        'inf_set_datatypes', 'inf_set_dbg_no_store_path',
        'inf_set_decode_fpp', 'inf_set_del_no_xref_insns',
        'inf_set_demnames', 'inf_set_dll', 'inf_set_filetype',
        'inf_set_final_pass', 'inf_set_flat_off32', 'inf_set_full_sp_ana',
        'inf_set_gen_assume', 'inf_set_gen_lzero', 'inf_set_gen_null',
        'inf_set_gen_org', 'inf_set_gen_tryblks', 'inf_set_genflags',
        'inf_set_graph_view', 'inf_set_guess_func_type',
        'inf_set_handle_eh', 'inf_set_handle_rtti', 'inf_set_hard_float',
        'inf_set_hide_comments', 'inf_set_hide_libfuncs',
        'inf_set_highoff', 'inf_set_huge_arg_align', 'inf_set_indent',
        'inf_set_kernel_mode', 'inf_set_lenxref', 'inf_set_lflags',
        'inf_set_limiter', 'inf_set_limiter_empty',
        'inf_set_limiter_thick', 'inf_set_limiter_thin',
        'inf_set_line_pref_with_seg', 'inf_set_listnames',
        'inf_set_loading_idc', 'inf_set_long_demnames', 'inf_set_lowoff',
        'inf_set_macros_enabled', 'inf_set_main', 'inf_set_map_stkargs',
        'inf_set_margin', 'inf_set_mark_code', 'inf_set_max_autoname_len',
        'inf_set_max_ea', 'inf_set_maxref', 'inf_set_mem_aligned4',
        'inf_set_min_ea', 'inf_set_nametype', 'inf_set_netdelta',
        'inf_set_no_store_user_info', 'inf_set_noflow_to_data',
        'inf_set_noret_ana', 'inf_set_omax_ea', 'inf_set_omin_ea',
        'inf_set_op_offset', 'inf_set_ostype', 'inf_set_outflags',
        'inf_set_pack_idb', 'inf_set_pack_mode', 'inf_set_pack_stkargs',
        'inf_set_prefflag', 'inf_set_prefix_show_funcoff',
        'inf_set_prefix_show_segaddr', 'inf_set_prefix_show_stack',
        'inf_set_prefix_truncate_opcode_bytes', 'inf_set_privrange',
        'inf_set_privrange_end_ea', 'inf_set_privrange_start_ea',
        'inf_set_procname', 'inf_set_propagate_regargs',
        'inf_set_propagate_stkargs', 'inf_set_readonly_idb',
        'inf_set_refcmtnum', 'inf_set_rename_jumpfunc',
        'inf_set_rename_nullsub', 'inf_set_short_demnames',
        'inf_set_should_create_stkvars', 'inf_set_should_trace_sp',
        'inf_set_show_all_comments', 'inf_set_show_auto',
        'inf_set_show_hidden_funcs', 'inf_set_show_hidden_insns',
        'inf_set_show_hidden_segms', 'inf_set_show_line_pref',
        'inf_set_show_repeatables', 'inf_set_show_src_linnum',
        'inf_set_show_void', 'inf_set_show_xref_fncoff',
        'inf_set_show_xref_seg', 'inf_set_show_xref_tmarks',
        'inf_set_show_xref_val', 'inf_set_snapshot', 'inf_set_specsegs',
        'inf_set_stack_ldbl', 'inf_set_stack_varargs', 'inf_set_start_cs',
        'inf_set_start_ea', 'inf_set_start_ip', 'inf_set_start_sp',
        'inf_set_start_ss', 'inf_set_strlit_autocmt',
        'inf_set_strlit_break', 'inf_set_strlit_flags',
        'inf_set_strlit_name_bit', 'inf_set_strlit_names',
        'inf_set_strlit_pref', 'inf_set_strlit_savecase',
        'inf_set_strlit_serial_names', 'inf_set_strlit_sernum',
        'inf_set_strlit_zeroes', 'inf_set_strtype', 'inf_set_trace_flow',
        'inf_set_truncate_on_del', 'inf_set_type_xrefnum',
        'inf_set_unicode_strlits', 'inf_set_use_allasm',
        'inf_set_use_flirt', 'inf_set_use_gcc_layout', 'inf_set_version',
        'inf_set_wide_high_byte_first', 'inf_set_xrefflag',
        'inf_set_xrefnum', 'inf_should_create_stkvars',
        'inf_should_trace_sp', 'inf_show_all_comments', 'inf_show_auto',
        'inf_show_hidden_funcs', 'inf_show_hidden_insns',
        'inf_show_hidden_segms', 'inf_show_line_pref',
        'inf_show_repeatables', 'inf_show_src_linnum', 'inf_show_void',
        'inf_show_xref_fncoff', 'inf_show_xref_seg',
        'inf_show_xref_tmarks', 'inf_show_xref_val', 'inf_stack_ldbl',
        'inf_stack_varargs', 'inf_strlit_autocmt', 'inf_strlit_name_bit',
        'inf_strlit_names', 'inf_strlit_savecase',
        'inf_strlit_serial_names', 'inf_test_mode', 'inf_trace_flow',
        'inf_truncate_on_del', 'inf_unicode_strlits', 'inf_use_allasm',
        'inf_use_flirt', 'inf_use_gcc_layout', 'info', 'inftag_t',
        'init_database', 'init_ignore_micro', 'init_plugins', 'ino_t',
        'inode_t', 'inodevec_t', 'input_event_kind_t',
        'input_event_modifiers_t', 'insn_add_cref', 'insn_add_dref',
        'insn_add_off_drefs', 'insn_create_op_data', 'insn_create_stkvar',
        'install_command_interpreter', 'install_custom_argloc',
        'install_extlang', 'install_user_defined_prefix', 'int16',
        'int16_t', 'int32', 'int32_t', 'int64', 'int64_t', 'int8',
        'int8_t', 'int_fast16_t', 'int_fast32_t', 'int_fast64_t',
        'int_fast8_t', 'int_least16_t', 'int_least32_t', 'int_least64_t',
        'int_least8_t', 'internal_cleanup_appcall',
        'internal_get_sreg_base', 'internal_ioctl',
        'internal_register_place_class', 'interr', 'interr_should_throw',
        'intmax_t', 'intptr_t', 'intvec_t', 'invalidate_dbg_state',
        'invalidate_dbgmem_config', 'invalidate_dbgmem_contents',
        'invalidate_sp_analysis', 'invoke_callbacks', 'invoke_plugin',
        'ioport_bits_t', 'ioports_t', 'is__bnot0', 'is__bnot1',
        'is__invsign0', 'is__invsign1', 'is_action_enabled',
        'is_aflag__bnot0', 'is_aflag__bnot1', 'is_aflag__invsign0',
        'is_aflag__invsign1', 'is_aflag_align_flow',
        'is_aflag_colored_item', 'is_aflag_data_guessed_by_hexrays',
        'is_aflag_fixed_spd', 'is_aflag_func_guessed_by_hexrays',
        'is_aflag_hidden_border', 'is_aflag_hidden_item',
        'is_aflag_libitem', 'is_aflag_lzero0', 'is_aflag_lzero1',
        'is_aflag_manual_insn', 'is_aflag_noret', 'is_aflag_notcode',
        'is_aflag_notproc', 'is_aflag_public_name', 'is_aflag_retfp',
        'is_aflag_terse_struc', 'is_aflag_tilcmt',
        'is_aflag_type_determined_by_hexrays',
        'is_aflag_type_guessed_by_hexrays',
        'is_aflag_type_guessed_by_ida', 'is_aflag_usersp',
        'is_aflag_userti', 'is_aflag_weak_name', 'is_aflag_zstroff',
        'is_align', 'is_align_flow', 'is_align_insn',
        'is_anonymous_member_name', 'is_attached_custom_data_format',
        'is_auto_enabled', 'is_autosync', 'is_basic_block_end',
        'is_bblk_trace_enabled', 'is_bf', 'is_bnot', 'is_byte',
        'is_call_insn', 'is_char', 'is_char0', 'is_char1',
        'is_chooser_widget', 'is_code', 'is_code_far', 'is_colored_item',
        'is_comp_unsure', 'is_control_tty', 'is_cp_graphical',
        'is_custfmt', 'is_custfmt0', 'is_custfmt1', 'is_custom',
        'is_data', 'is_data_far', 'is_data_guessed_by_hexrays',
        'is_database_ext', 'is_database_flag', 'is_debugger_busy',
        'is_debugger_memory', 'is_debugger_on', 'is_debugger_segm',
        'is_defarg', 'is_defarg0', 'is_defarg1', 'is_double',
        'is_dummy_member_name', 'is_dword', 'is_ea_tryblks', 'is_enum',
        'is_enum0', 'is_enum1', 'is_enum_fromtil', 'is_enum_hidden',
        'is_ephemeral_segm', 'is_epilog_insn', 'is_filetype_like_binary',
        'is_finally_visible_func', 'is_finally_visible_item',
        'is_finally_visible_segm', 'is_first_visea', 'is_fixed_spd',
        'is_fixup_custom', 'is_float', 'is_float0', 'is_float1',
        'is_floating_dtype', 'is_flow', 'is_fltnum', 'is_forced_operand',
        'is_func', 'is_func_entry', 'is_func_guessed_by_hexrays',
        'is_func_locked', 'is_func_tail', 'is_func_trace_enabled',
        'is_gcc', 'is_gcc32', 'is_gcc64', 'is_ghost_enum', 'is_golang_cc',
        'is_head', 'is_hidden_border', 'is_hidden_item', 'is_ida_kernel',
        'is_idaq', 'is_idaview', 'is_ident', 'is_ident_cp', 'is_in_nlist',
        'is_indirect_jump_insn', 'is_insn_trace_enabled', 'is_invsign',
        'is_last_visea', 'is_lead_surrogate', 'is_libitem', 'is_loaded',
        'is_lzero', 'is_lzero0', 'is_lzero1', 'is_main_thread',
        'is_manual', 'is_manual_insn', 'is_mapped', 'is_member_id',
        'is_miniidb', 'is_msg_inited', 'is_name_defined_locally',
        'is_noret', 'is_noret_block', 'is_not_tail', 'is_notcode',
        'is_notproc', 'is_numop', 'is_numop0', 'is_numop1', 'is_off',
        'is_off0', 'is_off1', 'is_one_bit_mask', 'is_ordinal_name',
        'is_oword', 'is_pack_real', 'is_pascal', 'is_pattern_t',
        'is_place_class_ea_capable', 'is_problem_present',
        'is_prolog_insn', 'is_public_name', 'is_purging_cc', 'is_qword',
        'is_refresh_requested', 'is_reftype_target_optional',
        'is_reg_custom', 'is_reg_float', 'is_reg_integer',
        'is_request_running', 'is_restype_enum', 'is_restype_struct',
        'is_restype_struni', 'is_restype_void', 'is_ret_block',
        'is_ret_insn', 'is_retfp', 'is_same_data_type', 'is_same_func',
        'is_sdacl_byte', 'is_seg', 'is_seg0', 'is_seg1', 'is_segm_locked',
        'is_spec_ea', 'is_spec_segm', 'is_special_member',
        'is_step_trace_enabled', 'is_stkarg_load_t', 'is_stkvar',
        'is_stkvar0', 'is_stkvar1', 'is_strlit', 'is_strlit_cp',
        'is_stroff', 'is_stroff0', 'is_stroff1', 'is_struct', 'is_suspop',
        'is_switch_insn', 'is_tah_byte', 'is_tail', 'is_tail_surrogate',
        'is_tbyte', 'is_temp_database', 'is_terse_struc', 'is_tilcmt',
        'is_trusted_idb', 'is_type_arithmetic', 'is_type_array',
        'is_type_bitfld', 'is_type_bool', 'is_type_char',
        'is_type_complex', 'is_type_const',
        'is_type_determined_by_hexrays', 'is_type_double', 'is_type_enum',
        'is_type_ext_arithmetic', 'is_type_ext_integral', 'is_type_float',
        'is_type_floating', 'is_type_func', 'is_type_guessed_by_hexrays',
        'is_type_guessed_by_ida', 'is_type_int', 'is_type_int128',
        'is_type_int16', 'is_type_int32', 'is_type_int64',
        'is_type_integral', 'is_type_ldouble', 'is_type_paf',
        'is_type_partial', 'is_type_ptr', 'is_type_ptr_or_array',
        'is_type_struct', 'is_type_struni', 'is_type_sue',
        'is_type_tbyte', 'is_type_typedef', 'is_type_uchar',
        'is_type_uint', 'is_type_uint128', 'is_type_uint16',
        'is_type_uint32', 'is_type_uint64', 'is_type_union',
        'is_type_unknown', 'is_type_void', 'is_type_volatile',
        'is_typeid_last', 'is_uname', 'is_union', 'is_unknown',
        'is_user_cc', 'is_usersp', 'is_userti', 'is_valid_cp',
        'is_valid_trace_file', 'is_valid_typename', 'is_valid_utf8',
        'is_vararg_cc', 'is_varmember', 'is_varsize_item', 'is_varstr',
        'is_visible_cp', 'is_visible_finally', 'is_visible_func',
        'is_visible_item', 'is_visible_segm', 'is_wctype', 'is_weak_name',
        'is_word', 'is_yword', 'is_zstroff', 'is_zword', 'isalnum',
        'isalpha', 'isatty', 'isblank', 'iscntrl', 'isdigit', 'isgraph',
        'isleadbyte', 'islower', 'isprint', 'ispunct', 'isspace',
        'isupper', 'iswalnum', 'iswalpha', 'iswascii', 'iswblank',
        'iswcntrl', 'iswctype', 'iswdigit', 'iswgraph', 'iswlower',
        'iswprint', 'iswpunct', 'iswspace', 'iswupper', 'iswxdigit',
        'isxdigit', 'item_color_changed', 'iterate_func_chunks', 'itext',
        'itoa', 'j0', 'j1', 'jn', 'jtype_t',
        'jump_pattern_t__check_insn_t', 'jumpto', 'jvalue_t_clear',
        'jvalue_t_copy', 'jvalues_t', 'kernel_config_loaded', 'l_compare',
        'l_compare2', 'l_realcvt', 'labs', 'last', 'last_idcv_attr',
        'launch_process', 'layout_type_t', 'lcr_auto_switch', 'lcr_goto',
        'lcr_internal', 'lcr_jump', 'lcr_navigate', 'lcr_scroll',
        'lcr_unknown', 'lcr_user_switch', 'ldexp', 'ldexpf', 'ldexpl',
        'ldiv', 'ldiv_t', 'leading_zero_important', 'lecvt_code_t',
        'legacy_idb', 'lex_define_macro', 'lex_get_file_line',
        'lex_get_token', 'lex_get_token2', 'lex_init_file',
        'lex_init_string', 'lex_print_token', 'lex_set_options',
        'lex_term_file', 'lex_undefine_macro', 'lexcompare_tinfo',
        'lfind', 'lgamma', 'lgammaf', 'lgammal',
        'line_rendering_output_entries_refs_t', 'linearray_t_beginning',
        'linearray_t_ctr', 'linearray_t_down', 'linearray_t_dtr',
        'linearray_t_ending', 'linearray_t_set_place', 'linearray_t_up',
        'linput_close_code_t', 'linput_janitor_t', 'linput_type_t',
        'list_bptgrps', 'llabs', 'lldiv', 'lldiv_t', 'llong_scan',
        'llrint', 'llrintf', 'llrintl', 'llround', 'llroundf', 'llroundl',
        'load_and_run_plugin', 'load_binary_file', 'load_core_module',
        'load_core_module_or_die', 'load_custom_icon', 'load_dbg_dbginfo',
        'load_debugger', 'load_dirtree', 'load_ids_module',
        'load_nonbinary_file', 'load_plugin', 'load_til',
        'load_til_header', 'load_trace_file', 'loader_failure',
        'loader_finished', 'local_tinfo_predicate_t',
        'local_types_changed', 'locchange_reason_t',
        'lochist_entry_cvt2_t', 'lochist_entry_t_deserialize',
        'lochist_entry_t_serialize', 'lochist_entry_vec_t',
        'lochist_t_back', 'lochist_t_clear', 'lochist_t_current_index',
        'lochist_t_deregister_live', 'lochist_t_fwd', 'lochist_t_get',
        'lochist_t_get_current', 'lochist_t_init', 'lochist_t_jump',
        'lochist_t_register_live', 'lochist_t_save', 'lochist_t_seek',
        'lochist_t_set', 'lochist_t_size', 'lock_dbgmem_config',
        'lock_func_range', 'lock_segm', 'locking', 'log', 'log10',
        'log10f', 'log10l', 'log1p', 'log1pf', 'log1pl', 'log2',
        'log2ceil', 'log2f', 'log2floor', 'log2l', 'logb', 'logbf',
        'logbl', 'logf', 'logl', 'longlong', 'lookup_key_code',
        'lookup_loc_converter2', 'low', 'lowcnd_vec_t', 'lower_type',
        'lread', 'lread2bytes', 'lread4bytes', 'lread8bytes',
        'lreadbytes', 'lrint', 'lrintf', 'lrintl', 'lround', 'lroundf',
        'lroundl', 'lsearch', 'lseek', 'ltoa', 'lx_macro_cb',
        'lx_parse_cast_t', 'lx_pragma_cb', 'lx_preprocessor_cb',
        'lx_resolver_t', 'lx_undef_cb', 'lx_warning_cb', 'lxtype',
        'make_code', 'make_data', 'make_file_ext', 'make_int128',
        'make_linput', 'make_longlong', 'make_name_auto',
        'make_name_non_public', 'make_name_non_weak', 'make_name_public',
        'make_name_user', 'make_name_weak', 'make_qtime64',
        'make_str_type', 'make_uint128', 'make_ulonglong', 'malloc',
        'mangled_name_type_t', 'map_code_ea', 'map_data_ea', 'map_ea',
        'mark_all_eaviews_for_refresh', 'mark_epilog_insn',
        'mark_prolog_insn', 'mark_range_for_refresh', 'mark_switch_insn',
        'mark_switch_insns_jpt', 'match_jpt', 'max', 'max_history_files',
        'may_create_stkvars', 'may_destroy_cb_t', 'may_trace_sp', 'mblen',
        'mbox_error', 'mbox_feedback', 'mbox_filestruct', 'mbox_hide',
        'mbox_info', 'mbox_internal', 'mbox_kind_t', 'mbox_nomem',
        'mbox_readerror', 'mbox_replace', 'mbox_wait', 'mbox_warning',
        'mbox_writeerror', 'mbrlen', 'mbrtowc', 'mbsinit', 'mbsrtowcs',
        'mbsrtowcs_s', 'mbstate_t', 'mbstowcs', 'mbstowcs_s', 'mbtowc',
        'mem2base', 'memccpy', 'memchr', 'memcmp', 'memcpy', 'memicmp',
        'meminfo_vec_t', 'memmove', 'memory_order_acq_rel',
        'memory_order_acquire', 'memory_order_consume',
        'memory_order_relaxed', 'memory_order_release',
        'memory_order_seq_cst', 'memreg_infos_t', 'memrev', 'memset',
        'min', 'mkdir', 'mktemp', 'modf', 'modff', 'modfl',
        'modinfovec_t', 'movbpt_code_t', 'movbpt_codes_t',
        'movbpt_infos_t', 'move_idcv', 'move_segm', 'move_segm_start',
        'msg', 'msg_activated', 'msg_clear', 'msg_click', 'msg_closed',
        'msg_dblclick', 'msg_deactivated', 'msg_get_lines', 'msg_keydown',
        'msg_notification_t', 'msg_save',
        'mutable_graph_t__node_layout_t', 'name_requires_qualifier',
        'nametype_t', 'nan', 'nanf', 'nanl', 'nat_auto', 'nat_cod',
        'nat_cur', 'nat_dat', 'nat_err', 'nat_ext', 'nat_fun', 'nat_gap',
        'nat_hlo', 'nat_last', 'nat_lib', 'nat_lum', 'nat_und',
        'nav_colorizer_t', 'navaddr_type_t', 'nbits', 'nearbyint',
        'nearbyintf', 'nearbyintl', 'netnode_altadjust',
        'netnode_altadjust2', 'netnode_altshift', 'netnode_altval',
        'netnode_altval_idx8', 'netnode_blobsize', 'netnode_charshift',
        'netnode_charval', 'netnode_charval_idx8', 'netnode_check',
        'netnode_copy', 'netnode_delblob', 'netnode_delvalue',
        'netnode_end', 'netnode_exist', 'netnode_get_name',
        'netnode_getblob', 'netnode_hashdel', 'netnode_hashfirst',
        'netnode_hashlast', 'netnode_hashnext', 'netnode_hashprev',
        'netnode_hashset', 'netnode_hashstr', 'netnode_hashval',
        'netnode_hashval_long', 'netnode_inited', 'netnode_is_available',
        'netnode_kill', 'netnode_lower_bound', 'netnode_lower_bound_idx8',
        'netnode_next', 'netnode_prev', 'netnode_qgetblob',
        'netnode_qhashfirst', 'netnode_qhashlast', 'netnode_qhashnext',
        'netnode_qhashprev', 'netnode_qhashstr', 'netnode_qsupstr',
        'netnode_qsupstr_idx8', 'netnode_qvalstr', 'netnode_rename',
        'netnode_set', 'netnode_setblob', 'netnode_start',
        'netnode_supdel', 'netnode_supdel_all', 'netnode_supdel_idx8',
        'netnode_supdel_range', 'netnode_supdel_range_idx8',
        'netnode_supfirst', 'netnode_supfirst_idx8', 'netnode_suplast',
        'netnode_suplast_idx8', 'netnode_supnext', 'netnode_supnext_idx8',
        'netnode_supprev', 'netnode_supprev_idx8', 'netnode_supset',
        'netnode_supset_idx8', 'netnode_supshift', 'netnode_supstr',
        'netnode_supstr_idx8', 'netnode_supval', 'netnode_supval_idx8',
        'netnode_valobj', 'netnode_valstr', 'new_til', 'next_addr',
        'next_chunk', 'next_head', 'next_idcv_attr', 'next_inited',
        'next_marked_insn', 'next_named_type', 'next_not_tail',
        'next_that', 'next_unknown', 'next_visea', 'nextafter',
        'nextafterf', 'nextafterl', 'nexttoward', 'nexttowardf',
        'nexttowardl', 'node2ea', 'node_iterator_goup', 'nodeidx_t',
        'nomem', 'nothrow', 'notify_dirtree', 'nowarn_qsnprintf',
        'nr_none', 'nr_once', 'num_flag', 'numop2str', 'oct_flag',
        'off_flag', 'off_t', 'ofile_type_t', 'onexit', 'op_adds_xrefs',
        'op_bin', 'op_chr', 'op_custfmt', 'op_dec', 'op_dtype_t',
        'op_enum', 'op_flt', 'op_hex', 'op_num', 'op_oct', 'op_offset',
        'op_offset_ex', 'op_plain_offset', 'op_seg', 'op_stkvar',
        'op_stroff', 'op_ti_changed', 'op_type_changed', 'open', 'openM',
        'openR', 'openRT', 'open_bookmarks_window', 'open_bpts_window',
        'open_calls_window', 'open_disasm_window', 'open_enums_window',
        'open_exports_window', 'open_form', 'open_frame_window',
        'open_funcs_window', 'open_hexdump_window', 'open_imports_window',
        'open_linput', 'open_loctypes_window', 'open_modules_window',
        'open_names_window', 'open_navband_window', 'open_notepad_window',
        'open_problems_window', 'open_segments_window',
        'open_segregs_window', 'open_selectors_window',
        'open_signatures_window', 'open_stack_window',
        'open_strings_window', 'open_structs_window',
        'open_threads_window', 'open_tils_window', 'open_trace_window',
        'open_url', 'open_xrefs_window', 'optimize_argloc', 'optype_t',
        'ordvec_t', 'overlap', 'oword_flag', 'p_list', 'p_string',
        'pack_db', 'pack_dd', 'pack_dq', 'pack_ds', 'pack_dw', 'pack_ea',
        'pack_idcobj_to_bv', 'pack_idcobj_to_idb', 'packreal_flag',
        'parse_binpat_str', 'parse_command_line', 'parse_config_value',
        'parse_dbgopts', 'parse_decl', 'parse_decls', 'parse_json',
        'parse_json_string', 'parse_reg_name', 'patch_byte',
        'patch_bytes', 'patch_dword', 'patch_fixup_value', 'patch_qword',
        'patch_word', 'path_type_t', 'peek_auto_queue', 'perror', 'ph',
        'pid_t', 'place_t__deserialize', 'place_t__serialize',
        'plan_and_wait', 'plan_ea', 'plan_range', 'plan_to_apply_idasgn',
        'pointvec_t', 'pow', 'powf', 'powl', 'prev_addr', 'prev_chunk',
        'prev_head', 'prev_idcv_attr', 'prev_inited', 'prev_not_tail',
        'prev_that', 'prev_unknown', 'prev_utf8_char', 'prev_visea',
        'print_argloc', 'print_cdata', 'print_charlit', 'print_decls',
        'print_fpval', 'print_idcv', 'print_insn_mnem', 'print_operand',
        'print_strlit_type', 'print_tinfo', 'print_type', 'printer_t',
        'printf', 'printf_s', 'problist_id_t', 'process_archive',
        'process_ui_action', 'process_zip_linput', 'process_zipfile',
        'process_zipfile_entry', 'processor_t__event_t',
        'processor_t__regval_getter_t', 'procinfo_vec_t', 'ptrdiff_t',
        'put_byte', 'put_bytes', 'put_dbg_byte', 'put_dword', 'put_qword',
        'put_utf8_char', 'put_word', 'putc', 'putchar', 'putenv', 'puts',
        'putw', 'putwc', 'putwchar', 'qaccess', 'qalloc',
        'qalloc_or_throw', 'qatexit', 'qatoll', 'qbasename', 'qcalloc',
        'qchdir', 'qchsize', 'qcleanline', 'qclose', 'qcontrol_tty',
        'qcopyfile', 'qcreate', 'qctime', 'qctime_utc', 'qdetach_tty',
        'qdirname', 'qdup', 'qeprintf', 'qerrcode', 'qerrstr', 'qexit',
        'qfclose', 'qfgetc', 'qfgets', 'qfileexist', 'qfilelength',
        'qfilesize', 'qfindclose', 'qfindfirst', 'qfindnext',
        'qflow_chart_t__blocks_t', 'qflush', 'qfopen', 'qfprintf',
        'qfputc', 'qfputs', 'qfread', 'qfree', 'qfscanf', 'qfseek',
        'qfsize', 'qfstat', 'qfsync', 'qftell', 'qfwrite', 'qgetcwd',
        'qgetenv', 'qgetline', 'qgets', 'qgmtime', 'qgmtime64',
        'qhandle_t', 'qisabspath', 'qisalnum', 'qisalpha', 'qisascii',
        'qisdigit', 'qisdir', 'qislower', 'qisprint', 'qispunct',
        'qisspace', 'qisupper', 'qisxdigit', 'qlfile', 'qlgetc', 'qlgets',
        'qlgetz', 'qlocaltime', 'qlocaltime64', 'qlread', 'qlseek',
        'qlsize', 'qltell', 'qmake_full_path', 'qmakefile', 'qmakepath',
        'qmkdir', 'qmove', 'qmutex_create', 'qmutex_free', 'qmutex_lock',
        'qmutex_t', 'qmutex_unlock', 'qopen', 'qopen_shared', 'qperror',
        'qpipe_close', 'qpipe_create', 'qpipe_read', 'qpipe_write',
        'qprintf', 'qread', 'qrealloc', 'qrealloc_or_throw', 'qregcomp',
        'qregerror', 'qregexec', 'qregfree', 'qrename', 'qrmdir', 'qseek',
        'qsem_create', 'qsem_free', 'qsem_post', 'qsem_wait',
        'qsemaphore_t', 'qsetenv', 'qsleep', 'qsnprintf', 'qsort',
        'qsort_s', 'qsplitfile', 'qsscanf', 'qstat', 'qstpncpy',
        'qstr2user', 'qstrchr', 'qstrcmp', 'qstrdup', 'qstrerror',
        'qstrftime', 'qstrftime64', 'qstring', 'qstrlen', 'qstrlwr',
        'qstrncat', 'qstrncpy', 'qstrrchr', 'qstrstr', 'qstrtok',
        'qstrupr', 'qstrvec_t', 'qtell', 'qthread_cb_t', 'qthread_create',
        'qthread_equal', 'qthread_free', 'qthread_join', 'qthread_kill',
        'qthread_same', 'qthread_self', 'qthread_t', 'qtime32_t',
        'qtime64', 'qtime64_t', 'qtimegm', 'qtimer_t', 'qtmpfile',
        'qtmpnam', 'qtolower', 'qtoupper', 'qtype', 'quick_exit',
        'qunlink', 'quote_cmdline_arg', 'qustrlen', 'qustrncpy',
        'qvector__qstring_char____const_iterator',
        'qvector__qstring_char____iterator',
        'qvector__qstring_unsigned_char____const_iterator',
        'qvector__qstring_unsigned_char____iterator',
        'qvector__qstring_wchar_t____const_iterator',
        'qvector__qstring_wchar_t____iterator',
        'qvector_argloc_t___const_iterator',
        'qvector_argloc_t___iterator',
        'qvector_argpart_t___const_iterator',
        'qvector_argpart_t___iterator',
        'qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R____const_iterator',
        'qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R____iterator',
        'qvector_bool___const_iterator', 'qvector_bool___iterator',
        'qvector_bpt_t__P___const_iterator',
        'qvector_bpt_t__P___iterator', 'qvector_bpt_t___const_iterator',
        'qvector_bpt_t___iterator', 'qvector_bptaddrs_t___const_iterator',
        'qvector_bptaddrs_t___iterator',
        'qvector_call_stack_info_t___const_iterator',
        'qvector_call_stack_info_t___iterator',
        'qvector_catch_t___const_iterator', 'qvector_catch_t___iterator',
        'qvector_cfgopt_set_t___const_iterator',
        'qvector_cfgopt_set_t___iterator',
        'qvector_channel_redir_t___const_iterator',
        'qvector_channel_redir_t___iterator',
        'qvector_char___const_iterator', 'qvector_char___iterator',
        'qvector_cliopt_t___const_iterator',
        'qvector_cliopt_t___iterator',
        'qvector_compiled_binpat_t___const_iterator',
        'qvector_compiled_binpat_t___iterator',
        'qvector_const_bpt_t__P___const_iterator',
        'qvector_const_bpt_t__P___iterator',
        'qvector_const_char__P___const_iterator',
        'qvector_const_char__P___iterator',
        'qvector_const_rangeset_t__P___const_iterator',
        'qvector_const_rangeset_t__P___iterator',
        'qvector_const_twinline_t__P___const_iterator',
        'qvector_const_twinline_t__P___iterator',
        'qvector_debug_event_t___const_iterator',
        'qvector_debug_event_t___iterator',
        'qvector_direntry_t___const_iterator',
        'qvector_direntry_t___iterator',
        'qvector_dirtree_cursor_t___const_iterator',
        'qvector_dirtree_cursor_t___iterator',
        'qvector_ea_name_t___const_iterator',
        'qvector_ea_name_t___iterator', 'qvector_edge_t___const_iterator',
        'qvector_edge_t___iterator',
        'qvector_enum_member_t___const_iterator',
        'qvector_enum_member_t___iterator',
        'qvector_exception_info_t___const_iterator',
        'qvector_exception_info_t___iterator',
        'qvector_extlang_t__P___const_iterator',
        'qvector_extlang_t__P___iterator',
        'qvector_fixup_info_t___const_iterator',
        'qvector_fixup_info_t___iterator',
        'qvector_funcarg_t___const_iterator',
        'qvector_funcarg_t___iterator',
        'qvector_group_crinfo_t___const_iterator',
        'qvector_group_crinfo_t___iterator',
        'qvector_ida_syntax_highlighter_t__keywords_style_t___const_iterator',
        'qvector_ida_syntax_highlighter_t__keywords_style_t___iterator',
        'qvector_ida_syntax_highlighter_t__multicmt_t___const_iterator',
        'qvector_ida_syntax_highlighter_t__multicmt_t___iterator',
        'qvector_ida_syntax_highlighter_t__plain_char_ptr_t___const_iterator',
        'qvector_ida_syntax_highlighter_t__plain_char_ptr_t___iterator',
        'qvector_idc_global_t___const_iterator',
        'qvector_idc_global_t___iterator',
        'qvector_idp_desc_t___const_iterator',
        'qvector_idp_desc_t___iterator',
        'qvector_idp_name_t___const_iterator',
        'qvector_idp_name_t___iterator', 'qvector_int___const_iterator',
        'qvector_int___iterator', 'qvector_intmap_t___const_iterator',
        'qvector_intmap_t___iterator',
        'qvector_ioport_bit_t___const_iterator',
        'qvector_ioport_bit_t___iterator',
        'qvector_ioport_t___const_iterator',
        'qvector_ioport_t___iterator',
        'qvector_jvalue_t___const_iterator',
        'qvector_jvalue_t___iterator', 'qvector_kvp_t___const_iterator',
        'qvector_kvp_t___iterator',
        'qvector_line_rendering_output_entry_t__P___const_iterator',
        'qvector_line_rendering_output_entry_t__P___iterator',
        'qvector_lochist_entry_t___const_iterator',
        'qvector_lochist_entry_t___iterator',
        'qvector_long_long___P__syntax_highlight_style__P__const_char__P____const_iterator',
        'qvector_long_long___P__syntax_highlight_style__P__const_char__P____iterator',
        'qvector_long_long___const_iterator',
        'qvector_long_long___iterator',
        'qvector_lowcnd_t___const_iterator',
        'qvector_lowcnd_t___iterator',
        'qvector_memory_info_t___const_iterator',
        'qvector_memory_info_t___iterator',
        'qvector_memreg_info_t___const_iterator',
        'qvector_memreg_info_t___iterator',
        'qvector_modinfo_t___const_iterator',
        'qvector_modinfo_t___iterator',
        'qvector_movbpt_code_t___const_iterator',
        'qvector_movbpt_code_t___iterator',
        'qvector_movbpt_info_t___const_iterator',
        'qvector_movbpt_info_t___iterator',
        'qvector_node_set_t___const_iterator',
        'qvector_node_set_t___iterator', 'qvector_op_t___const_iterator',
        'qvector_op_t___iterator', 'qvector_point_t___const_iterator',
        'qvector_point_t___iterator',
        'qvector_process_info_t___const_iterator',
        'qvector_process_info_t___iterator',
        'qvector_qbasic_block_t___const_iterator',
        'qvector_qbasic_block_t___iterator',
        'qvector_qrefcnt_t_source_item_t____const_iterator',
        'qvector_qrefcnt_t_source_item_t____iterator',
        'qvector_qvector_const_char__P____const_iterator',
        'qvector_qvector_const_char__P____iterator',
        'qvector_qvector_const_twinline_t__P____const_iterator',
        'qvector_qvector_const_twinline_t__P____iterator',
        'qvector_qvector_int____const_iterator',
        'qvector_qvector_int____iterator',
        'qvector_qvector_long_long____const_iterator',
        'qvector_qvector_long_long____iterator',
        'qvector_range_t___const_iterator', 'qvector_range_t___iterator',
        'qvector_rangeset_t___const_iterator',
        'qvector_rangeset_t___iterator',
        'qvector_rect_t___const_iterator', 'qvector_rect_t___iterator',
        'qvector_refinfo_desc_t___const_iterator',
        'qvector_refinfo_desc_t___iterator',
        'qvector_reg_access_t___const_iterator',
        'qvector_reg_access_t___iterator',
        'qvector_reg_info_t___const_iterator',
        'qvector_reg_info_t___iterator',
        'qvector_register_info_t___const_iterator',
        'qvector_register_info_t___iterator',
        'qvector_regobj_t___const_iterator',
        'qvector_regobj_t___iterator',
        'qvector_regval_t___const_iterator',
        'qvector_regval_t___iterator', 'qvector_reserve',
        'qvector_row_info_t___const_iterator',
        'qvector_row_info_t___iterator',
        'qvector_scattered_segm_t___const_iterator',
        'qvector_scattered_segm_t___iterator',
        'qvector_segm_move_info_t___const_iterator',
        'qvector_segm_move_info_t___iterator',
        'qvector_selection_item_t___const_iterator',
        'qvector_selection_item_t___iterator',
        'qvector_simd_info_t___const_iterator',
        'qvector_simd_info_t___iterator',
        'qvector_simpleline_t___const_iterator',
        'qvector_simpleline_t___iterator',
        'qvector_snapshot_t__P___const_iterator',
        'qvector_snapshot_t__P___iterator',
        'qvector_stkpnt_t___const_iterator',
        'qvector_stkpnt_t___iterator',
        'qvector_sync_source_t___const_iterator',
        'qvector_sync_source_t___iterator',
        'qvector_tev_info_reg_t___const_iterator',
        'qvector_tev_info_reg_t___iterator',
        'qvector_tev_info_t___const_iterator',
        'qvector_tev_info_t___iterator',
        'qvector_tev_reg_value_t___const_iterator',
        'qvector_tev_reg_value_t___iterator',
        'qvector_thread_name_t___const_iterator',
        'qvector_thread_name_t___iterator',
        'qvector_tinfo_t___const_iterator', 'qvector_tinfo_t___iterator',
        'qvector_token_t___const_iterator', 'qvector_token_t___iterator',
        'qvector_tryblk_t___const_iterator',
        'qvector_tryblk_t___iterator',
        'qvector_twinline_t___const_iterator',
        'qvector_twinline_t___iterator',
        'qvector_type_attr_t___const_iterator',
        'qvector_type_attr_t___iterator',
        'qvector_udt_member_t___const_iterator',
        'qvector_udt_member_t___iterator',
        'qvector_unsigned_char___const_iterator',
        'qvector_unsigned_char___iterator',
        'qvector_unsigned_int___const_iterator',
        'qvector_unsigned_int___iterator',
        'qvector_unsigned_long_long___const_iterator',
        'qvector_unsigned_long_long___iterator',
        'qvector_update_bpt_info_t___const_iterator',
        'qvector_update_bpt_info_t___iterator',
        'qvector_valstr_t___const_iterator',
        'qvector_valstr_t___iterator', 'qvector_wchar_t___const_iterator',
        'qvector_wchar_t___iterator',
        'qvector_xreflist_entry_t___const_iterator',
        'qvector_xreflist_entry_t___iterator', 'qveprintf', 'qvfprintf',
        'qvfscanf', 'qvprintf', 'qvsnprintf', 'qvsscanf',
        'qwait_for_handles', 'qwait_timed', 'qword_flag', 'qwrite',
        'qwstring', 'qwstrvec_t', 'r50_to_asc', 'rand',
        'range_cmt_changed', 'range_kind_t', 'range_marker',
        'range_t_print', 'rangeset_crefvec_t',
        'rangeset_t__const_iterator', 'rangeset_t__iterator',
        'rangeset_t_add', 'rangeset_t_add2', 'rangeset_t_contains',
        'rangeset_t_find_range', 'rangeset_t_has_common',
        'rangeset_t_has_common2', 'rangeset_t_intersect',
        'rangeset_t_lower_bound', 'rangeset_t_next_addr',
        'rangeset_t_next_range', 'rangeset_t_prev_addr',
        'rangeset_t_prev_range', 'rangeset_t_print', 'rangeset_t_sub',
        'rangeset_t_sub2', 'rangeset_t_swap', 'rangeset_t_upper_bound',
        'rangevec_base_t', 'read', 'read2bytes', 'read_config',
        'read_config2', 'read_config_file', 'read_config_file2',
        'read_config_string', 'read_dbg_memory', 'read_ioports',
        'read_ioports2', 'read_range_selection', 'read_regargs',
        'read_selection', 'read_struc_path', 'read_tinfo_bitfield_value',
        'readbytes', 'realcvt', 'realloc', 'realtoasc',
        'reanalyze_callers', 'reanalyze_function', 'reanalyze_noret_flag',
        'rebase_program', 'rebuild_nlist', 'recalc_spd',
        'refinfo_desc_vec_t', 'refresh_chooser', 'refresh_custom_viewer',
        'refresh_idaview', 'refresh_idaview_anyway', 'refresh_navband',
        'refresh_viewer', 'reftype_t', 'reg_access_vec_t', 'reg_bin_op',
        'reg_binary', 'reg_data_type', 'reg_delete', 'reg_delete_subkey',
        'reg_delete_tree', 'reg_dword', 'reg_exists', 'reg_flush',
        'reg_history_size_truncate', 'reg_int_op', 'reg_load',
        'reg_read_binary', 'reg_read_binary_part', 'reg_read_bool',
        'reg_read_int', 'reg_read_string', 'reg_read_strlist',
        'reg_str_get', 'reg_str_set', 'reg_subkey_children',
        'reg_subkey_exists', 'reg_subkey_subkeys', 'reg_subkey_values',
        'reg_sz', 'reg_unknown', 'reg_update_filestrlist',
        'reg_update_history', 'reg_update_strlist', 'reg_write_binary',
        'reg_write_bool', 'reg_write_int', 'reg_write_string', 'regcomp',
        'regerror', 'regex_cache_t__regex_cache_map_t', 'regex_match',
        'regex_ptr_t', 'regexec', 'regfree', 'regget_history',
        'reginfovec_t', 'register_action', 'register_addon',
        'register_and_attach_to_menu', 'register_cfgopts',
        'register_class_t', 'register_custom_data_format',
        'register_custom_data_type', 'register_custom_fixup',
        'register_custom_refinfo', 'register_info_vec_t',
        'register_loc_converter2', 'register_place_class',
        'register_post_event_visitor', 'register_srcinfo_provider',
        'register_timer', 'regobjvec_t', 'regoff_t', 'regval_type_t',
        'regvals_t', 'reload_file', 'reloc_value', 'relocate_relobj',
        'remainder', 'remainderf', 'remainderl', 'remember_problem',
        'remove', 'remove_abi_opts', 'remove_command_interpreter',
        'remove_custom_argloc', 'remove_event_listener', 'remove_extlang',
        'remove_func_tail', 'remove_pointer', 'remove_tinfo_pointer',
        'remquo', 'remquof', 'remquol', 'rename', 'rename_bptgrp',
        'rename_encoding', 'rename_entry', 'rename_regvar', 'renamed',
        'renaming_enum', 'renaming_struc', 'renaming_struc_member',
        'renderer_info_t__pos_t', 'reorder_dummy_names',
        'repaint_custom_viewer', 'replace_ordinal_typerefs',
        'replace_tabs', 'replace_wait_box', 'request_add_bpt',
        'request_attach_process', 'request_clear_trace',
        'request_continue_process', 'request_del_bpt',
        'request_detach_process', 'request_disable_bblk_trace',
        'request_disable_bpt', 'request_disable_func_trace',
        'request_disable_insn_trace', 'request_disable_step_trace',
        'request_enable_bblk_trace', 'request_enable_bpt',
        'request_enable_func_trace', 'request_enable_insn_trace',
        'request_enable_step_trace', 'request_exit_process',
        'request_refresh', 'request_resume_thread', 'request_run_to',
        'request_select_thread', 'request_set_bblk_trace_options',
        'request_set_func_trace_options',
        'request_set_insn_trace_options', 'request_set_reg_val',
        'request_set_resume_mode', 'request_set_step_trace_options',
        'request_start_process', 'request_step_into', 'request_step_over',
        'request_step_until_ret', 'request_suspend_process',
        'request_suspend_thread', 'requires_color_esc', 'reset_dirtree',
        'resolve_typedef', 'restore_database_snapshot', 'resume_mode_t',
        'resume_thread', 'rethrow_exception', 'retrieve_custom_argloc',
        'retrieve_exceptions', 'retrieve_input_file_crc32',
        'retrieve_input_file_md5', 'retrieve_input_file_sha256',
        'retrieve_input_file_size', 'retrieve_member_info', 'revert_byte',
        'revert_ida_decisions', 'rewind', 'rint', 'rintf', 'rintl',
        'rmdir', 'rmtmp', 'root_node', 'rotate_left', 'round',
        'round_down_power2', 'round_indeterminate', 'round_to_nearest',
        'round_toward_infinity', 'round_toward_neg_infinity',
        'round_toward_zero', 'round_up_power2', 'roundf', 'roundl',
        'rsize_t', 'run_plugin', 'run_requests', 'run_to',
        'same_value_jpt', 'sanitize_file_name', 'save_database',
        'save_dirtree', 'save_reg_values_t', 'save_signatures',
        'save_struc', 'save_structs', 'save_tinfo', 'save_trace_file',
        'savebase', 'sc_auto', 'sc_ext', 'sc_friend', 'sc_reg', 'sc_stat',
        'sc_type', 'sc_unk', 'sc_virt', 'scalbln', 'scalblnf', 'scalblnl',
        'scalbn', 'scalbnf', 'scalbnl', 'scanf', 'scanf_s',
        'scattered_image_t', 'sclass_t', 'score_tinfo',
        'screen_graph_selection_base_t', 'search', 'search_down',
        'search_path', 'section_lines_refs_t', 'sections_lines_refs_t',
        'seg_flag', 'segm_added', 'segm_adjust_diff', 'segm_adjust_ea',
        'segm_attrs_updated', 'segm_class_changed', 'segm_deleted',
        'segm_end_changed', 'segm_move_info_vec_t', 'segm_moved',
        'segm_name_changed', 'segm_start_changed', 'segtype', 'sel2ea',
        'sel2para', 'sel_t', 'select_extlang', 'select_thread',
        'serialize_dynamic_register_set', 'serialize_json',
        'serialize_tinfo', 'set__bnot0', 'set__bnot1', 'set__invsign0',
        'set__invsign1', 'set_abi_name', 'set_abits', 'set_absbase',
        'set_aflags', 'set_align_flow', 'set_alignment', 'set_all_bits',
        'set_archive_path', 'set_array_parameters', 'set_asm_inc_file',
        'set_auto_state', 'set_bblk_trace_options', 'set_bit', 'set_bits',
        'set_bmask_cmt', 'set_bmask_name', 'set_bpt_group',
        'set_bptloc_group', 'set_bptloc_string', 'set_c_header_path',
        'set_c_macros', 'set_cancelled', 'set_cmt',
        'set_code_viewer_handler', 'set_code_viewer_is_source',
        'set_code_viewer_line_handlers',
        'set_code_viewer_lines_alignment',
        'set_code_viewer_lines_icon_margin',
        'set_code_viewer_lines_radix', 'set_code_viewer_user_data',
        'set_colored_item', 'set_compiler', 'set_compiler_id',
        'set_compiler_string', 'set_cp_validity',
        'set_custom_data_type_ids', 'set_custom_viewer_handler',
        'set_custom_viewer_handlers', 'set_custom_viewer_qt_aware',
        'set_custom_viewer_range', 'set_data_guessed_by_hexrays',
        'set_database_flag', 'set_dbg_default_options', 'set_dbg_options',
        'set_dbgmem_source', 'set_debug_event_code', 'set_debug_name',
        'set_debug_names', 'set_debugger_event_cond',
        'set_debugger_options', 'set_default_dataseg',
        'set_default_encoding_idx', 'set_default_sreg_value',
        'set_dock_pos', 'set_dummy_name', 'set_entry_forwarder',
        'set_enum_bf', 'set_enum_cmt', 'set_enum_flag',
        'set_enum_fromtil', 'set_enum_ghost', 'set_enum_hidden',
        'set_enum_idx', 'set_enum_member_cmt', 'set_enum_member_name',
        'set_enum_name', 'set_enum_type_ordinal', 'set_enum_width',
        'set_errno', 'set_error_data', 'set_error_string', 'set_file_ext',
        'set_fixed_spd', 'set_fixup', 'set_forced_operand',
        'set_frame_size', 'set_func_cmt', 'set_func_end', 'set_func_end',
        'set_func_guessed_by_hexrays', 'set_func_name_if_jumpfunc',
        'set_func_start', 'set_func_start', 'set_func_trace_options',
        'set_gotea', 'set_group_selector', 'set_has_lname', 'set_has_ti',
        'set_has_ti0', 'set_has_ti1', 'set_header_path', 'set_hexdsp',
        'set_highlight', 'set_highlight_trace_options',
        'set_ida_notepad_text', 'set_ida_state', 'set_idc_dtor',
        'set_idc_getattr', 'set_idc_method', 'set_idc_setattr',
        'set_idcv_attr', 'set_idcv_slice', 'set_ids_modnode',
        'set_ignore_micro', 'set_imagebase', 'set_immd',
        'set_import_name', 'set_import_ordinal', 'set_ind_purged',
        'set_insn_trace_options', 'set_int_dbg_options', 'set_item_color',
        'set_libitem', 'set_loader_format_name', 'set_lzero',
        'set_lzero0', 'set_lzero1', 'set_manual_insn',
        'set_manual_regions', 'set_member_cmt', 'set_member_name',
        'set_member_tinfo', 'set_member_type', 'set_module_data',
        'set_moved_jpt', 'set_name', 'set_nav_colorizer',
        'set_new_handler', 'set_node_info', 'set_noret', 'set_noret_insn',
        'set_notcode', 'set_notproc', 'set_numbered_type', 'set_op_tinfo',
        'set_op_tinfo_t', 'set_op_type', 'set_opinfo', 'set_options_t',
        'set_outfile_encoding_idx', 'set_path', 'set_process_options',
        'set_process_state', 'set_processor_type', 'set_purged',
        'set_qerrno', 'set_refinfo', 'set_refinfo_ex', 'set_reg_val',
        'set_regvar_cmt', 'set_remote_debugger', 'set_resume_mode',
        'set_retfp', 'set_root_filename', 'set_segm_addressing',
        'set_segm_base', 'set_segm_class', 'set_segm_end',
        'set_segm_name', 'set_segm_start', 'set_segment_cmt',
        'set_segment_translations', 'set_selector', 'set_source_linnum',
        'set_srcdbg_paths', 'set_srcdbg_undesired_paths',
        'set_sreg_at_next_code', 'set_step_trace_options',
        'set_str_encoding_idx', 'set_str_type', 'set_struc_align',
        'set_struc_cmt', 'set_struc_hidden', 'set_struc_idx',
        'set_struc_listed', 'set_struc_name', 'set_switch_info',
        'set_switch_parent', 'set_tail_owner', 'set_target_assembler',
        'set_terminate', 'set_terse_struc', 'set_tilcmt', 'set_tinfo',
        'set_tinfo_attr', 'set_tinfo_attrs', 'set_tinfo_property',
        'set_trace_base_address', 'set_trace_dynamic_register_set',
        'set_trace_file_desc', 'set_trace_platform', 'set_trace_size',
        'set_type_alias', 'set_type_determined_by_hexrays',
        'set_type_guessed_by_ida', 'set_unexpected', 'set_usemodsp',
        'set_user_defined_prefix', 'set_usersp', 'set_userti',
        'set_vftable_ea', 'set_view_renderer_type', 'set_viewer_graph',
        'set_visible_func', 'set_visible_item', 'set_visible_segm',
        'set_xrefpos', 'set_zstroff', 'setbuf', 'setinf', 'setinf_buf',
        'setinf_flag', 'setmode', 'setproc_level_t',
        'setup_graph_subsystem', 'setup_lowcnd_regfuncs',
        'setup_range_marker', 'setup_selector', 'setvbuf', 'sgr_changed',
        'sgr_deleted', 'should_ignore_micro', 'show_addr', 'show_auto',
        'show_hex', 'show_hex_file', 'show_name', 'show_wait_box',
        'show_wait_box_v', 'signbit', 'simd_info_vec_t',
        'simpleline_place_t__adjust', 'simpleline_place_t__beginning',
        'simpleline_place_t__clone', 'simpleline_place_t__compare',
        'simpleline_place_t__compare2', 'simpleline_place_t__copyfrom',
        'simpleline_place_t__deserialize', 'simpleline_place_t__ending',
        'simpleline_place_t__enter', 'simpleline_place_t__generate',
        'simpleline_place_t__id', 'simpleline_place_t__leave',
        'simpleline_place_t__makeplace', 'simpleline_place_t__name',
        'simpleline_place_t__next', 'simpleline_place_t__prev',
        'simpleline_place_t__print', 'simpleline_place_t__rebase',
        'simpleline_place_t__serialize', 'simpleline_place_t__toea',
        'simpleline_place_t__touval', 'sin', 'sinf', 'sinh', 'sinhf',
        'sinhl', 'sinl', 'sint8', 'size_t', 'sizevec_t', 'skip_spaces',
        'skip_utf8', 'smt_code_t', 'snapshots_t', 'snprintf',
        'soff_to_fpoff', 'sopen', 'sort_til', 'source_file_iterator',
        'source_file_ptr', 'source_item_iterator', 'source_item_ptr',
        'source_items_t', 'split_sreg_range', 'sprintf', 'sprintf_s',
        'sqrt', 'sqrtf', 'sqrtl', 'srand', 'src_item_kind_t',
        'srcdbg_request_step_into', 'srcdbg_request_step_over',
        'srcdbg_request_step_until_ret', 'srcdbg_step_into',
        'srcdbg_step_over', 'srcdbg_step_until_ret', 'ss_restore_cb_t',
        'sscanf', 'sscanf_s', 'ssize_t', 'start_process', 'std___Any_tag',
        'std___Atomic_counter_t',
        'std___Char_traits_char16_t__unsigned_short___int_type',
        'std___Char_traits_char32_t__unsigned_int___int_type',
        'std___Char_traits_char__int___int_type',
        'std___Char_traits_unsigned_short__unsigned_short___int_type',
        'std___Char_traits_wchar_t__unsigned_short___int_type',
        'std___Container_base',
        'std___Default_allocator_traits_std__allocator_char16_t____size_type',
        'std___Default_allocator_traits_std__allocator_char32_t____size_type',
        'std___Default_allocator_traits_std__allocator_char____size_type',
        'std___Default_allocator_traits_std__allocator_int____size_type',
        'std___Default_allocator_traits_std__allocator_std___Tree_node_int__void__P_____pointer',
        'std___Default_allocator_traits_std__allocator_std___Tree_node_int__void__P_____value_type',
        'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_____pointer',
        'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_____value_type',
        'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_int__int___void__P_____pointer',
        'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_int__int___void__P_____value_type',
        'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_____pointer',
        'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_____value_type',
        'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_____pointer',
        'std___Default_allocator_traits_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_____value_type',
        'std___Default_allocator_traits_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______size_type',
        'std___Default_allocator_traits_std__allocator_std__pair_const_int__int_____size_type',
        'std___Default_allocator_traits_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____size_type',
        'std___Default_allocator_traits_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long_____size_type',
        'std___Default_allocator_traits_std__allocator_wchar_t____size_type',
        'std___Invoker_strategy',
        'std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____',
        'std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____',
        'std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_char____',
        'std___Iter_diff_t_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____',
        'std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char16_t____',
        'std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char32_t____',
        'std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_char____',
        'std___Iter_diff_t_std___String_iterator_std___String_val_std___Simple_types_wchar_t____',
        'std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____',
        'std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
        'std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
        'std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
        'std___Iter_diff_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
        'std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
        'std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
        'std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
        'std___Iter_diff_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
        'std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____',
        'std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____',
        'std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_char____',
        'std___Iter_ref_t_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____',
        'std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char16_t____',
        'std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char32_t____',
        'std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_char____',
        'std___Iter_ref_t_std___String_iterator_std___String_val_std___Simple_types_wchar_t____',
        'std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____',
        'std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
        'std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
        'std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
        'std___Iter_ref_t_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
        'std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
        'std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
        'std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
        'std___Iter_ref_t_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
        'std___Iterator_base',
        'std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______pointer',
        'std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______pointer',
        'std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_char______pointer',
        'std___Iterator_traits_base_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______pointer',
        'std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char16_t______pointer',
        'std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char32_t______pointer',
        'std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_char______pointer',
        'std___Iterator_traits_base_std___String_iterator_std___String_val_std___Simple_types_wchar_t______pointer',
        'std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______pointer',
        'std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer',
        'std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer',
        'std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer',
        'std___Iterator_traits_base_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer',
        'std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer',
        'std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer',
        'std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer',
        'std___Iterator_traits_base_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer',
        'std___Narrow_char_traits_char__int___int_type',
        'std___No_propagate_allocators', 'std___Propagate_allocators',
        'std___Rand_urng_from_func__result_type',
        'std___Rebind_pointer_t_void__P__std___Tree_node_int__void__P__',
        'std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__',
        'std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_int__int___void__P__',
        'std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__',
        'std___Rebind_pointer_t_void__P__std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__',
        'std___Simple_types_char16_t___const_pointer',
        'std___Simple_types_char16_t___difference_type',
        'std___Simple_types_char16_t___pointer',
        'std___Simple_types_char16_t___size_type',
        'std___Simple_types_char16_t___value_type',
        'std___Simple_types_char32_t___const_pointer',
        'std___Simple_types_char32_t___difference_type',
        'std___Simple_types_char32_t___pointer',
        'std___Simple_types_char32_t___size_type',
        'std___Simple_types_char32_t___value_type',
        'std___Simple_types_char___const_pointer',
        'std___Simple_types_char___difference_type',
        'std___Simple_types_char___pointer',
        'std___Simple_types_char___size_type',
        'std___Simple_types_char___value_type',
        'std___Simple_types_int___const_pointer',
        'std___Simple_types_int___size_type',
        'std___Simple_types_int___value_type',
        'std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____const_pointer',
        'std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____pointer',
        'std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____size_type',
        'std___Simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____value_type',
        'std___Simple_types_std__pair_const_int__int____const_pointer',
        'std___Simple_types_std__pair_const_int__int____pointer',
        'std___Simple_types_std__pair_const_int__int____size_type',
        'std___Simple_types_std__pair_const_int__int____value_type',
        'std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____const_pointer',
        'std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____pointer',
        'std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____size_type',
        'std___Simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____value_type',
        'std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____const_pointer',
        'std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____pointer',
        'std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____size_type',
        'std___Simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____value_type',
        'std___Simple_types_wchar_t___const_pointer',
        'std___Simple_types_wchar_t___difference_type',
        'std___Simple_types_wchar_t___pointer',
        'std___Simple_types_wchar_t___size_type',
        'std___Simple_types_wchar_t___value_type',
        'std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____difference_type',
        'std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____pointer',
        'std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____reference',
        'std___String_const_iterator_std___String_val_std___Simple_types_char16_t_____value_type',
        'std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____difference_type',
        'std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____pointer',
        'std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____reference',
        'std___String_const_iterator_std___String_val_std___Simple_types_char32_t_____value_type',
        'std___String_const_iterator_std___String_val_std___Simple_types_char_____difference_type',
        'std___String_const_iterator_std___String_val_std___Simple_types_char_____pointer',
        'std___String_const_iterator_std___String_val_std___Simple_types_char_____reference',
        'std___String_const_iterator_std___String_val_std___Simple_types_char_____value_type',
        'std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____difference_type',
        'std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____pointer',
        'std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____reference',
        'std___String_const_iterator_std___String_val_std___Simple_types_wchar_t_____value_type',
        'std___String_iterator_std___String_val_std___Simple_types_char16_t_____difference_type',
        'std___String_iterator_std___String_val_std___Simple_types_char16_t_____pointer',
        'std___String_iterator_std___String_val_std___Simple_types_char16_t_____reference',
        'std___String_iterator_std___String_val_std___Simple_types_char16_t_____value_type',
        'std___String_iterator_std___String_val_std___Simple_types_char32_t_____difference_type',
        'std___String_iterator_std___String_val_std___Simple_types_char32_t_____pointer',
        'std___String_iterator_std___String_val_std___Simple_types_char32_t_____reference',
        'std___String_iterator_std___String_val_std___Simple_types_char32_t_____value_type',
        'std___String_iterator_std___String_val_std___Simple_types_char_____difference_type',
        'std___String_iterator_std___String_val_std___Simple_types_char_____pointer',
        'std___String_iterator_std___String_val_std___Simple_types_char_____reference',
        'std___String_iterator_std___String_val_std___Simple_types_char_____value_type',
        'std___String_iterator_std___String_val_std___Simple_types_wchar_t_____difference_type',
        'std___String_iterator_std___String_val_std___Simple_types_wchar_t_____pointer',
        'std___String_iterator_std___String_val_std___Simple_types_wchar_t_____reference',
        'std___String_iterator_std___String_val_std___Simple_types_wchar_t_____value_type',
        'std___String_val_std___Simple_types_char16_t____const_pointer',
        'std___String_val_std___Simple_types_char16_t____difference_type',
        'std___String_val_std___Simple_types_char16_t____pointer',
        'std___String_val_std___Simple_types_char16_t____size_type',
        'std___String_val_std___Simple_types_char16_t____value_type',
        'std___String_val_std___Simple_types_char32_t____const_pointer',
        'std___String_val_std___Simple_types_char32_t____difference_type',
        'std___String_val_std___Simple_types_char32_t____pointer',
        'std___String_val_std___Simple_types_char32_t____size_type',
        'std___String_val_std___Simple_types_char32_t____value_type',
        'std___String_val_std___Simple_types_char____const_pointer',
        'std___String_val_std___Simple_types_char____difference_type',
        'std___String_val_std___Simple_types_char____pointer',
        'std___String_val_std___Simple_types_char____size_type',
        'std___String_val_std___Simple_types_char____value_type',
        'std___String_val_std___Simple_types_wchar_t____const_pointer',
        'std___String_val_std___Simple_types_wchar_t____difference_type',
        'std___String_val_std___Simple_types_wchar_t____pointer',
        'std___String_val_std___Simple_types_wchar_t____size_type',
        'std___String_val_std___Simple_types_wchar_t____value_type',
        'std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___allocator_type',
        'std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___key_compare',
        'std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___key_type',
        'std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_type',
        'std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___allocator_type',
        'std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___key_compare',
        'std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___key_type',
        'std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_type',
        'std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___allocator_type',
        'std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___key_compare',
        'std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___key_type',
        'std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_type',
        'std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___allocator_type',
        'std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___key_compare',
        'std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___key_type',
        'std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_type',
        'std___Tree_child',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____pointer',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____reference',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____value_type',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference',
        'std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type',
        'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer',
        'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference',
        'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type',
        'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer',
        'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference',
        'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type',
        'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer',
        'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference',
        'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type',
        'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer',
        'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference',
        'std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type',
        'std___Tree_node_int__void__P____Nodeptr',
        'std___Tree_node_int__void__P___value_type',
        'std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____Nodeptr',
        'std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___value_type',
        'std___Tree_node_std__pair_const_int__int___void__P____Nodeptr',
        'std___Tree_node_std__pair_const_int__int___void__P___value_type',
        'std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____Nodeptr',
        'std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___value_type',
        'std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____Nodeptr',
        'std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___value_type',
        'std___Tree_simple_types_int____Node',
        'std___Tree_simple_types_int____Nodeptr',
        'std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______Node',
        'std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______Nodeptr',
        'std___Tree_simple_types_std__pair_const_int__int_____Node',
        'std___Tree_simple_types_std__pair_const_int__int_____Nodeptr',
        'std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____Node',
        'std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____Nodeptr',
        'std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____Node',
        'std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____Nodeptr',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Alnode',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Nodeptr',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Scary_val',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Unchecked_const_iterator',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false_____Unchecked_iterator',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____allocator_type',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____const_iterator',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____const_reverse_iterator',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____iterator',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____key_compare',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____key_type',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____reverse_iterator',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____size_type',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____value_compare',
        'std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false____value_type',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Alnode',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Nodeptr',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Scary_val',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Unchecked_const_iterator',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false_____Unchecked_iterator',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____allocator_type',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____const_iterator',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____const_reverse_iterator',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____iterator',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____key_compare',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____key_type',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____reverse_iterator',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____size_type',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____value_compare',
        'std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false____value_type',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Alnode',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Nodeptr',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Scary_val',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Unchecked_const_iterator',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false_____Unchecked_iterator',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____allocator_type',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____const_iterator',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____const_reverse_iterator',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____iterator',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____key_compare',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____key_type',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____reverse_iterator',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____size_type',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____value_compare',
        'std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false____value_type',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Alnode',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Nodeptr',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Scary_val',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Unchecked_const_iterator',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false_____Unchecked_iterator',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____allocator_type',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____const_iterator',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____const_reverse_iterator',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____iterator',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____key_compare',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____key_type',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____reverse_iterator',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____size_type',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____value_compare',
        'std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false____value_type',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Alnode',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Nodeptr',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Scary_val',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Unchecked_const_iterator',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false_____Unchecked_iterator',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____allocator_type',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____const_iterator',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____const_reverse_iterator',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____iterator',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____key_compare',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____key_type',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____reverse_iterator',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____size_type',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____value_compare',
        'std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false____value_type',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int______Nodeptr',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____pointer',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____reference',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int_____value_type',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________Nodeptr',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______Nodeptr',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______Nodeptr',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______Nodeptr',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference',
        'std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type',
        'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______pointer',
        'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______reference',
        'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______value_type',
        'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______pointer',
        'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______reference',
        'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______value_type',
        'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______pointer',
        'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______reference',
        'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______value_type',
        'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______pointer',
        'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______reference',
        'std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______value_type',
        'std___Tree_val_std___Tree_simple_types_int_____Nodeptr',
        'std___Tree_val_std___Tree_simple_types_int_____Unchecked_const_iterator',
        'std___Tree_val_std___Tree_simple_types_int____const_pointer',
        'std___Tree_val_std___Tree_simple_types_int____size_type',
        'std___Tree_val_std___Tree_simple_types_int____value_type',
        'std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______Nodeptr',
        'std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______Unchecked_const_iterator',
        'std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______const_pointer',
        'std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______pointer',
        'std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______size_type',
        'std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______value_type',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______Nodeptr',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______Unchecked_const_iterator',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____const_pointer',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____pointer',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____size_type',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____value_type',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______Nodeptr',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______Unchecked_const_iterator',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____const_pointer',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____pointer',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____size_type',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____value_type',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______Nodeptr',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______Unchecked_const_iterator',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____const_pointer',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____pointer',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____size_type',
        'std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____value_type',
        'std___Tset_traits_int__std__less_int___std__allocator_int___false___allocator_type',
        'std___Tset_traits_int__std__less_int___std__allocator_int___false___key_compare',
        'std___Tset_traits_int__std__less_int___std__allocator_int___false___key_type',
        'std___Tset_traits_int__std__less_int___std__allocator_int___false___value_compare',
        'std___Tset_traits_int__std__less_int___std__allocator_int___false___value_type',
        'std___Uninitialized', 'std___WChar_traits__Elem___int_type',
        'std___WChar_traits_char16_t___int_type',
        'std___WChar_traits_unsigned_short___int_type',
        'std___WChar_traits_wchar_t___int_type',
        'std__allocator_std___Tree_node_int__void__P____value_type',
        'std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____value_type',
        'std__allocator_std___Tree_node_std__pair_const_int__int___void__P____value_type',
        'std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____value_type',
        'std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____value_type',
        'std__basic_string_char16_t____Alty',
        'std__basic_string_char16_t____Scary_val',
        'std__basic_string_char16_t___allocator_type',
        'std__basic_string_char16_t___const_iterator',
        'std__basic_string_char16_t___const_reference',
        'std__basic_string_char16_t___const_reverse_iterator',
        'std__basic_string_char16_t___iterator',
        'std__basic_string_char16_t___reference',
        'std__basic_string_char16_t___reverse_iterator',
        'std__basic_string_char16_t___size_type',
        'std__basic_string_char16_t___value_type',
        'std__basic_string_char32_t____Alty',
        'std__basic_string_char32_t____Scary_val',
        'std__basic_string_char32_t___allocator_type',
        'std__basic_string_char32_t___const_iterator',
        'std__basic_string_char32_t___const_reference',
        'std__basic_string_char32_t___const_reverse_iterator',
        'std__basic_string_char32_t___iterator',
        'std__basic_string_char32_t___reference',
        'std__basic_string_char32_t___reverse_iterator',
        'std__basic_string_char32_t___size_type',
        'std__basic_string_char32_t___value_type',
        'std__basic_string_char____Alty',
        'std__basic_string_char____Scary_val',
        'std__basic_string_char___allocator_type',
        'std__basic_string_char___const_iterator',
        'std__basic_string_char___const_reference',
        'std__basic_string_char___const_reverse_iterator',
        'std__basic_string_char___iterator',
        'std__basic_string_char___reference',
        'std__basic_string_char___reverse_iterator',
        'std__basic_string_char___size_type',
        'std__basic_string_char___value_type',
        'std__basic_string_wchar_t____Alty',
        'std__basic_string_wchar_t____Scary_val',
        'std__basic_string_wchar_t___allocator_type',
        'std__basic_string_wchar_t___const_iterator',
        'std__basic_string_wchar_t___const_reference',
        'std__basic_string_wchar_t___const_reverse_iterator',
        'std__basic_string_wchar_t___iterator',
        'std__basic_string_wchar_t___reference',
        'std__basic_string_wchar_t___reverse_iterator',
        'std__basic_string_wchar_t___size_type',
        'std__basic_string_wchar_t___value_type', 'std__false_type',
        'std__filebuf', 'std__float_denorm_style',
        'std__float_round_style', 'std__fstream', 'std__ifstream',
        'std__integral_constant_bool__false___value_type',
        'std__integral_constant_bool__true___value_type',
        'std__integral_constant_unsigned_long_long__0___value_type',
        'std__ios', 'std__iostream', 'std__istream', 'std__istringstream',
        'std__map__qstring_char___qrefcnt_t_refcnted_regex_t____allocator_type',
        'std__map__qstring_char___qrefcnt_t_refcnted_regex_t____key_compare',
        'std__map__qstring_char___qrefcnt_t_refcnted_regex_t____key_type',
        'std__map__qstring_char___qrefcnt_t_refcnted_regex_t____mapped_type',
        'std__map_int__int___allocator_type',
        'std__map_int__int___key_compare', 'std__map_int__int___key_type',
        'std__map_int__int___mapped_type',
        'std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___allocator_type',
        'std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___key_compare',
        'std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___key_type',
        'std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___mapped_type',
        'std__map_unsigned_long_long__unsigned_long_long___allocator_type',
        'std__map_unsigned_long_long__unsigned_long_long___key_compare',
        'std__map_unsigned_long_long__unsigned_long_long___key_type',
        'std__map_unsigned_long_long__unsigned_long_long___mapped_type',
        'std__max_align_t', 'std__memory_order', 'std__new_handler',
        'std__nullptr_t', 'std__ofstream', 'std__ostream',
        'std__ostringstream',
        'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______difference_type',
        'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______pointer',
        'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t______reference',
        'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______difference_type',
        'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______pointer',
        'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t______reference',
        'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______difference_type',
        'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______pointer',
        'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char______reference',
        'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______difference_type',
        'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______pointer',
        'std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t______reference',
        'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______difference_type',
        'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______pointer',
        'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t______reference',
        'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______difference_type',
        'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______pointer',
        'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t______reference',
        'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______difference_type',
        'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______pointer',
        'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char______reference',
        'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______difference_type',
        'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______pointer',
        'std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t______reference',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______difference_type',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______pointer',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int______reference',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________difference_type',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________reference',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______difference_type',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______reference',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______difference_type',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______reference',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______difference_type',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer',
        'std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______reference',
        'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________difference_type',
        'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________pointer',
        'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t________reference',
        'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______difference_type',
        'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______pointer',
        'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_______reference',
        'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______difference_type',
        'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______pointer',
        'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_______reference',
        'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______difference_type',
        'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______pointer',
        'std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_______reference',
        'std__set_int___allocator_type', 'std__set_int___key_compare',
        'std__streambuf', 'std__streamoff', 'std__streampos',
        'std__streamsize', 'std__string', 'std__stringbuf',
        'std__stringstream', 'std__true_type', 'std__u16streampos',
        'std__u16string', 'std__u32streampos', 'std__u32string',
        'std__wfilebuf', 'std__wfstream', 'std__wifstream', 'std__wios',
        'std__wiostream', 'std__wistream', 'std__wistringstream',
        'std__wofstream', 'std__wostream', 'std__wostringstream',
        'std__wstreambuf', 'std__wstreampos', 'std__wstring',
        'std__wstringbuf', 'std__wstringstream', 'std_out_segm_footer',
        'step_into', 'step_over', 'step_until_ret', 'stkpnts_changed',
        'stkvar_flag', 'stoa', 'stock_type_id_t', 'stod', 'stof', 'stoi',
        'stol', 'stold', 'stoll', 'storage_type_t', 'store_exceptions',
        'store_til', 'stoul', 'stoull', 'str2ea', 'str2ea_ex', 'str2reg',
        'str2user', 'strarray', 'strcat', 'strcat_s', 'strchr', 'strcmp',
        'strcmpi', 'strcoll', 'strcpy', 'strcpy_s', 'strcspn', 'strdup',
        'strerror', 'strerror_s', 'strftime', 'stricmp', 'stristr',
        'strlen', 'strlit_flag', 'strlwr', 'strncat', 'strncat_s',
        'strncmp', 'strncpy', 'strncpy_s', 'strnicmp', 'strnlen',
        'strnset', 'stroff_as_size', 'stroff_flag', 'strpbrk', 'strrchr',
        'strrev', 'strrpl', 'strset', 'strspn', 'strstr', 'strtod',
        'strtof', 'strtok', 'strtok_s', 'strtol', 'strtold', 'strtoll',
        'strtoul', 'strtoull', 'stru_flag', 'struc_align_changed',
        'struc_cmt_changed', 'struc_created', 'struc_deleted',
        'struc_error_t', 'struc_expanded', 'struc_member_changed',
        'struc_member_created', 'struc_member_deleted',
        'struc_member_renamed', 'struc_renamed', 'struct_MD5Context',
        'struct_TPointDouble', 'struct_TPopupMenu', 'struct_TWidget',
        'struct__0B605D7B00AC5C12C153272CF5BD15AF',
        'struct__37EC8ECBAB39934116D1B12D6D12C693',
        'struct__C21FB2E1BAA97F44BFD298211C4C916B', 'struct__CRT_DOUBLE',
        'struct__CRT_FLOAT', 'struct__Combined_type_float__double_',
        'struct__Combined_type_float__long_double_',
        'struct__CrtMemBlockHeader', 'struct__CrtMemState',
        'struct__EBE02DBEC342F8268AFE19180D75885B',
        'struct__EXCEPTION_POINTERS', 'struct__LDBL12', 'struct__LDOUBLE',
        'struct__LONGDOUBLE', 'struct__Real_type_float_',
        'struct__Real_type_long_double_',
        'struct__Real_widened_double__double_',
        'struct__Real_widened_double__float_',
        'struct__Real_widened_float__double_',
        'struct__Real_widened_float__float_', 'struct___crt_locale_data',
        'struct___crt_locale_data_public', 'struct___crt_locale_pointers',
        'struct___crt_multibyte_data', 'struct___finddata64_t',
        'struct___qmutex_t', 'struct___qsemaphore_t',
        'struct___qthread_t', 'struct___qtimer_t',
        'struct___std_exception_data', 'struct__complex',
        'struct__diskfree_t', 'struct__div_t', 'struct__exception',
        'struct__finddata32_t', 'struct__finddata32i64_t',
        'struct__finddata64i32_t', 'struct__heapinfo', 'struct__iobuf',
        'struct__ldiv_t', 'struct__lldiv_t', 'struct__qstring_char_',
        'struct__qstring_unsigned_char_', 'struct__qstring_wchar_t_',
        'struct__stat32', 'struct__stat32i64', 'struct__stat64',
        'struct__stat64i32', 'struct__timespec32', 'struct__timespec64',
        'struct__wfinddata32_t', 'struct__wfinddata32i64_t',
        'struct__wfinddata64_t', 'struct__wfinddata64i32_t',
        'struct_abstract_graph_t', 'struct_abstract_graph_t_vtbl',
        'struct_action_ctx_base_cur_sel_t', 'struct_action_ctx_base_t',
        'struct_action_desc_t', 'struct_action_handler_t',
        'struct_action_handler_t_vtbl', 'struct_addon_info_t',
        'struct_aloc_visitor_t', 'struct_aloc_visitor_t_vtbl',
        'struct_altadjust_visitor_t', 'struct_altadjust_visitor_t_vtbl',
        'struct_argloc_t', 'struct_argpart_t', 'struct_argtinfo_helper_t',
        'struct_argtinfo_helper_t_vtbl', 'struct_array_parameters_t',
        'struct_array_type_data_t', 'struct_asm_t',
        'struct_auto_display_t',
        'struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t_',
        'struct_backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t',
        'struct_bitfield_type_data_t', 'struct_bitrange_t',
        'struct_bookmarks_t', 'struct_bpt_location_t', 'struct_bpt_t',
        'struct_bpt_visitor_t', 'struct_bpt_visitor_t_vtbl',
        'struct_bptaddr_t', 'struct_bptaddrs_t', 'struct_bytes_t',
        'struct_bytevec_t', 'struct_call_stack_info_t',
        'struct_call_stack_t', 'struct_callregs_t',
        'struct_cancellable_graph_t', 'struct_cancellable_graph_t_vtbl',
        'struct_cast_t', 'struct_catch_t', 'struct_cfgopt_set_t',
        'struct_cfgopt_set_vec_t', 'struct_cfgopt_t',
        'struct_cfgopt_t__num_range_t', 'struct_cfgopt_t__params_t',
        'struct_channel_redir_t', 'struct_choose_ioport_parser_t',
        'struct_choose_ioport_parser_t_vtbl', 'struct_chooser_base_t',
        'struct_chooser_base_t_vtbl', 'struct_chooser_item_attrs_t',
        'struct_chooser_multi_t', 'struct_chooser_multi_t_vtbl',
        'struct_chooser_t', 'struct_chooser_t__cbret_t',
        'struct_chooser_t_vtbl', 'struct_cli_t', 'struct_cliopt_t',
        'struct_cliopts_t', 'struct_compiled_binpat_t',
        'struct_compiler_info_t', 'struct_const_aloc_visitor_t',
        'struct_const_aloc_visitor_t_vtbl', 'struct_custloc_desc_t',
        'struct_custom_data_type_ids_t',
        'struct_custom_refinfo_handler_t',
        'struct_custom_viewer_handlers_t', 'struct_data_format_t',
        'struct_data_type_t', 'struct_dbctx_t', 'struct_dbg_info_t',
        'struct_debapp_attrs_t', 'struct_debug_event_t',
        'struct_debugger_t', 'struct_depth_first_info_t',
        'struct_destset_t', 'struct_direntry_t', 'struct_dirspec_t',
        'struct_dirspec_t_vtbl', 'struct_dirtree_cursor_t',
        'struct_dirtree_impl_t', 'struct_dirtree_iterator_t',
        'struct_dirtree_selection_t', 'struct_dirtree_t',
        'struct_dirtree_visitor_t', 'struct_dirtree_visitor_t_vtbl',
        'struct_dynamic_register_set_t', 'struct_ea_name_t',
        'struct_edge_info_t', 'struct_edge_infos_t',
        'struct_edge_infos_wrapper_t', 'struct_edge_layout_point_t',
        'struct_edge_segment_t', 'struct_edge_segs_vec_t',
        'struct_edge_t', 'struct_edge_typer_t', 'struct_edgeset_t',
        'struct_elf_loader_t', 'struct_encoder_t',
        'struct_encoder_t_vtbl', 'struct_enum_const_t',
        'struct_enum_member_t', 'struct_enum_member_visitor_t',
        'struct_enum_member_visitor_t_vtbl', 'struct_enum_type_data_t',
        'struct_enumplace_t', 'struct_enumplace_t_vtbl',
        'struct_eval_ctx_t', 'struct_event_listener_t',
        'struct_event_listener_t_vtbl', 'struct_exception_info_t',
        'struct_excinfo_t', 'struct_exec_request_t',
        'struct_exec_request_t_vtbl', 'struct_exehdr',
        'struct_exehdr_full', 'struct_expanded_area_t',
        'struct_ext_idcfunc_t', 'struct_extlang_t',
        'struct_extlang_visitor_t', 'struct_extlang_visitor_t_vtbl',
        'struct_file_enumerator_t', 'struct_file_enumerator_t_vtbl',
        'struct_fixup_data_t', 'struct_fixup_handler_t',
        'struct_fixup_info_t', 'struct_form_actions_t',
        'struct_form_actions_t_vtbl', 'struct_format_data_info_t',
        'struct_fpvalue_t', 'struct_func_item_iterator_t',
        'struct_func_parent_iterator_t', 'struct_func_t',
        'struct_func_t_0_0', 'struct_func_t_0_1',
        'struct_func_t___C940058B2272AD9112E2141245617273_0',
        'struct_func_t___C940058B2272AD9112E2141245617273_1',
        'struct_func_tail_iterator_t', 'struct_func_type_data_t',
        'struct_funcarg_t', 'struct_gdl_graph_t',
        'struct_gdl_graph_t_vtbl', 'struct_generic_linput_t',
        'struct_generic_linput_t_vtbl', 'struct_getname_info_t',
        'struct_graph_item_t', 'struct_graph_location_info_t',
        'struct_graph_node_visitor_t', 'struct_graph_node_visitor_t_vtbl',
        'struct_graph_path_visitor_t', 'struct_graph_path_visitor_t_vtbl',
        'struct_graph_visitor_t', 'struct_graph_visitor_t_vtbl',
        'struct_group_crinfo_t', 'struct_hexplace_gen_t',
        'struct_hexplace_gen_t_vtbl', 'struct_hexplace_t',
        'struct_hexplace_t_vtbl', 'struct_hexview_t',
        'struct_hidden_range_t', 'struct_highlighter_cbs_t',
        'struct_highlighter_cbs_t_vtbl', 'struct_ida_lowertype_helper_t',
        'struct_ida_lowertype_helper_t_vtbl',
        'struct_ida_movable_type_argloc_t_',
        'struct_ida_movable_type_argpart_t_',
        'struct_ida_movable_type_array_type_data_t_',
        'struct_ida_movable_type_bitfield_type_data_t_',
        'struct_ida_movable_type_bpt_location_t_',
        'struct_ida_movable_type_bpt_t_',
        'struct_ida_movable_type_call_stack_info_t_',
        'struct_ida_movable_type_catch_t_',
        'struct_ida_movable_type_cliopt_t_',
        'struct_ida_movable_type_compiled_binpat_t_',
        'struct_ida_movable_type_dbg_info_t_',
        'struct_ida_movable_type_debug_event_t_',
        'struct_ida_movable_type_direntry_t_',
        'struct_ida_movable_type_dirtree_cursor_t_',
        'struct_ida_movable_type_ea_name_t_',
        'struct_ida_movable_type_edge_t_',
        'struct_ida_movable_type_enum_member_t_',
        'struct_ida_movable_type_enum_type_data_t_',
        'struct_ida_movable_type_exception_info_t_',
        'struct_ida_movable_type_fixup_info_t_',
        'struct_ida_movable_type_func_t_',
        'struct_ida_movable_type_funcarg_t_',
        'struct_ida_movable_type_idc_global_t_',
        'struct_ida_movable_type_idc_value_t_',
        'struct_ida_movable_type_idp_desc_t_',
        'struct_ida_movable_type_idp_name_t_',
        'struct_ida_movable_type_ioport_bit_t_',
        'struct_ida_movable_type_ioport_t_',
        'struct_ida_movable_type_jarr_t_',
        'struct_ida_movable_type_jobj_t_',
        'struct_ida_movable_type_jvalue_t_',
        'struct_ida_movable_type_kvp_t_',
        'struct_ida_movable_type_line_rendering_output_entry_t_',
        'struct_ida_movable_type_load_info_t_',
        'struct_ida_movable_type_locchange_md_t_',
        'struct_ida_movable_type_lochist_entry_t_',
        'struct_ida_movable_type_lochist_t_',
        'struct_ida_movable_type_memory_info_t_',
        'struct_ida_movable_type_memreg_info_t_',
        'struct_ida_movable_type_modinfo_t_',
        'struct_ida_movable_type_movbpt_info_t_',
        'struct_ida_movable_type_point_t_',
        'struct_ida_movable_type_process_info_t_',
        'struct_ida_movable_type_ptr_type_data_t_',
        'struct_ida_movable_type_range_t_',
        'struct_ida_movable_type_rangeset_t_',
        'struct_ida_movable_type_rect_t_',
        'struct_ida_movable_type_refinfo_desc_t_',
        'struct_ida_movable_type_reg_access_t_',
        'struct_ida_movable_type_reg_info_t_',
        'struct_ida_movable_type_regarg_t_',
        'struct_ida_movable_type_register_info_t_',
        'struct_ida_movable_type_regobj_t_',
        'struct_ida_movable_type_regval_t_',
        'struct_ida_movable_type_regvar_t_',
        'struct_ida_movable_type_scattered_aloc_t_',
        'struct_ida_movable_type_scattered_segm_t_',
        'struct_ida_movable_type_segm_move_info_t_',
        'struct_ida_movable_type_seh_t_',
        'struct_ida_movable_type_simd_info_t_',
        'struct_ida_movable_type_snapshot_t_',
        'struct_ida_movable_type_sreg_range_t_',
        'struct_ida_movable_type_stkpnt_t_',
        'struct_ida_movable_type_string_info_t_',
        'struct_ida_movable_type_sync_source_t_',
        'struct_ida_movable_type_tev_info_reg_t_',
        'struct_ida_movable_type_tev_reg_value_t_',
        'struct_ida_movable_type_til_symbol_t_',
        'struct_ida_movable_type_tinfo_t_',
        'struct_ida_movable_type_token_t_',
        'struct_ida_movable_type_try_handler_t_',
        'struct_ida_movable_type_tryblk_t_',
        'struct_ida_movable_type_twinline_t_',
        'struct_ida_movable_type_type_attr_t_',
        'struct_ida_movable_type_typedef_type_data_t_',
        'struct_ida_movable_type_udt_member_t_',
        'struct_ida_movable_type_udt_type_data_t_',
        'struct_ida_movable_type_update_bpt_info_t_',
        'struct_ida_movable_type_valinfo_t_',
        'struct_ida_movable_type_valstr_t_',
        'struct_ida_movable_type_xreflist_entry_t_',
        'struct_ida_syntax_highlighter_t',
        'struct_ida_syntax_highlighter_t__keywords_style_t',
        'struct_ida_syntax_highlighter_t__multicmt_t',
        'struct_ida_syntax_highlighter_t__plain_char_ptr_t',
        'struct_ida_syntax_highlighter_t_vtbl', 'struct_idadll_t',
        'struct_idainfo', 'struct_idaplace_t', 'struct_idaplace_t_vtbl',
        'struct_idasgn_t', 'struct_idc_class_t', 'struct_idc_global_t',
        'struct_idc_object_t', 'struct_idc_resolver_t',
        'struct_idc_resolver_t_vtbl', 'struct_idc_value_t',
        'struct_idcfuncs_t', 'struct_idd_opinfo_t', 'struct_idp_desc_t',
        'struct_idp_name_t', 'struct_ignore_micro_t', 'struct_impinfo_t',
        'struct_input_event_t',
        'struct_input_event_t__input_event_keyboard_data_t',
        'struct_input_event_t__input_event_mouse_data_t',
        'struct_input_event_t__input_event_shortcut_data_t',
        'struct_insn_t', 'struct_instant_dbgopts_t', 'struct_instruc_t',
        'struct_int128', 'struct_interr_exc_t',
        'struct_interr_exc_t_vtbl', 'struct_interval_t',
        'struct_intmap_t', 'struct_intset_t', 'struct_ioport_bit_t',
        'struct_ioport_t', 'struct_ioports_fallback_t',
        'struct_ioports_fallback_t_vtbl', 'struct_janitor_t__iobuf__P_',
        'struct_janitor_t_linput_t__P_', 'struct_jarr_t', 'struct_jobj_t',
        'struct_jump_pattern_t', 'struct_jump_pattern_t_vtbl',
        'struct_jvalue_t', 'struct_kvp_t',
        'struct_launch_process_params_t', 'struct_lex_value_t',
        'struct_lexer_t', 'struct_libfunc_t',
        'struct_line_rendering_output_entry_t', 'struct_linearray_t',
        'struct_lines_rendering_input_t',
        'struct_lines_rendering_output_t', 'struct_linput_buffer_t',
        'struct_linput_t', 'struct_llabel_t', 'struct_load_info_t',
        'struct_loader_t', 'struct_location_t', 'struct_locchange_md_t',
        'struct_lochist_entry_t', 'struct_lochist_t', 'struct_lock_func',
        'struct_lock_segment', 'struct_lowcnd_t',
        'struct_lowertype_helper_t', 'struct_lowertype_helper_t_vtbl',
        'struct_macro_constructor_t', 'struct_macro_constructor_t_vtbl',
        'struct_member_t', 'struct_memory_deserializer_t',
        'struct_memory_info_t', 'struct_memreg_info_t',
        'struct_merge_data_t', 'struct_minsn_t', 'struct_modinfo_t',
        'struct_movbpt_info_t', 'struct_mutable_graph_t',
        'struct_mutable_graph_t_vtbl', 'struct_netnode',
        'struct_no_regs_t', 'struct_node_info_t', 'struct_node_iterator',
        'struct_node_ordering_t', 'struct_node_set_t', 'struct_op_t',
        'struct_outctx_base_t', 'struct_outctx_base_t_vtbl',
        'struct_outctx_t', 'struct_outctx_t_vtbl', 'struct_place_t',
        'struct_place_t_vtbl', 'struct_plugin_info_t', 'struct_plugin_t',
        'struct_plugmod_t', 'struct_plugmod_t_vtbl', 'struct_point_t',
        'struct_pointseq_t', 'struct_post_event_visitor_t',
        'struct_post_event_visitor_t_vtbl', 'struct_predicate_t',
        'struct_predicate_t_vtbl', 'struct_printop_t',
        'struct_proc_def_t', 'struct_process_info_t',
        'struct_processor_t', 'struct_procmod_t', 'struct_procmod_t_vtbl',
        'struct_ptr_type_data_t', 'struct_qbasic_block_t',
        'struct_qffblk64_t', 'struct_qffblk_t', 'struct_qflow_chart_t',
        'struct_qflow_chart_t_vtbl',
        'struct_qiterator_qrefcnt_t_source_file_t__',
        'struct_qiterator_qrefcnt_t_source_file_t___vtbl',
        'struct_qiterator_qrefcnt_t_source_item_t__',
        'struct_qiterator_qrefcnt_t_source_item_t___vtbl',
        'struct_qlist_ui_request_t__P_',
        'struct_qlist_ui_request_t__P___const_iterator',
        'struct_qlist_ui_request_t__P___const_reverse_iterator',
        'struct_qlist_ui_request_t__P___iterator',
        'struct_qlist_ui_request_t__P___listnode_t',
        'struct_qlist_ui_request_t__P___reverse_iterator',
        'struct_qmutex_locker_t', 'struct_qrefcnt_obj_t',
        'struct_qrefcnt_obj_t_vtbl', 'struct_qrefcnt_t_extlang_t_',
        'struct_qrefcnt_t_qiterator_qrefcnt_t_source_file_t___',
        'struct_qrefcnt_t_qiterator_qrefcnt_t_source_item_t___',
        'struct_qrefcnt_t_refcnted_regex_t_',
        'struct_qrefcnt_t_source_file_t_',
        'struct_qrefcnt_t_source_item_t_', 'struct_qstack_token_t_',
        'struct_qstatbuf', 'struct_qvector__qstring_char__',
        'struct_qvector__qstring_unsigned_char__',
        'struct_qvector__qstring_wchar_t__', 'struct_qvector_argloc_t_',
        'struct_qvector_argpart_t_', 'struct_qvector_bool_',
        'struct_qvector_bool___P__syntax_highlight_style__P__const__qstring_char___R__',
        'struct_qvector_bpt_t_', 'struct_qvector_bpt_t__P_',
        'struct_qvector_bptaddrs_t_', 'struct_qvector_call_stack_info_t_',
        'struct_qvector_catch_t_', 'struct_qvector_cfgopt_set_t_',
        'struct_qvector_channel_redir_t_', 'struct_qvector_char_',
        'struct_qvector_cliopt_t_', 'struct_qvector_compiled_binpat_t_',
        'struct_qvector_const_bpt_t__P_', 'struct_qvector_const_char__P_',
        'struct_qvector_const_rangeset_t__P_',
        'struct_qvector_const_twinline_t__P_',
        'struct_qvector_debug_event_t_', 'struct_qvector_direntry_t_',
        'struct_qvector_dirtree_cursor_t_', 'struct_qvector_ea_name_t_',
        'struct_qvector_edge_t_', 'struct_qvector_enum_member_t_',
        'struct_qvector_exception_info_t_',
        'struct_qvector_extlang_t__P_', 'struct_qvector_fixup_info_t_',
        'struct_qvector_funcarg_t_', 'struct_qvector_group_crinfo_t_',
        'struct_qvector_ida_syntax_highlighter_t__keywords_style_t_',
        'struct_qvector_ida_syntax_highlighter_t__multicmt_t_',
        'struct_qvector_ida_syntax_highlighter_t__plain_char_ptr_t_',
        'struct_qvector_idc_global_t_', 'struct_qvector_idp_desc_t_',
        'struct_qvector_idp_name_t_', 'struct_qvector_int_',
        'struct_qvector_intmap_t_', 'struct_qvector_ioport_bit_t_',
        'struct_qvector_ioport_t_', 'struct_qvector_jvalue_t_',
        'struct_qvector_kvp_t_',
        'struct_qvector_line_rendering_output_entry_t__P_',
        'struct_qvector_lochist_entry_t_', 'struct_qvector_long_long_',
        'struct_qvector_long_long___P__syntax_highlight_style__P__const_char__P__',
        'struct_qvector_lowcnd_t_', 'struct_qvector_memory_info_t_',
        'struct_qvector_memreg_info_t_', 'struct_qvector_modinfo_t_',
        'struct_qvector_movbpt_code_t_', 'struct_qvector_movbpt_info_t_',
        'struct_qvector_node_set_t_', 'struct_qvector_op_t_',
        'struct_qvector_point_t_', 'struct_qvector_process_info_t_',
        'struct_qvector_qbasic_block_t_',
        'struct_qvector_qrefcnt_t_source_item_t__',
        'struct_qvector_qvector_const_char__P__',
        'struct_qvector_qvector_const_twinline_t__P__',
        'struct_qvector_qvector_int__',
        'struct_qvector_qvector_long_long__', 'struct_qvector_range_t_',
        'struct_qvector_rangeset_t_', 'struct_qvector_rect_t_',
        'struct_qvector_refinfo_desc_t_', 'struct_qvector_reg_access_t_',
        'struct_qvector_reg_info_t_', 'struct_qvector_register_info_t_',
        'struct_qvector_regobj_t_', 'struct_qvector_regval_t_',
        'struct_qvector_row_info_t_', 'struct_qvector_scattered_segm_t_',
        'struct_qvector_segm_move_info_t_',
        'struct_qvector_selection_item_t_', 'struct_qvector_simd_info_t_',
        'struct_qvector_simpleline_t_', 'struct_qvector_snapshot_t__P_',
        'struct_qvector_stkpnt_t_', 'struct_qvector_sync_source_t_',
        'struct_qvector_tev_info_reg_t_', 'struct_qvector_tev_info_t_',
        'struct_qvector_tev_reg_value_t_',
        'struct_qvector_thread_name_t_', 'struct_qvector_tinfo_t_',
        'struct_qvector_token_t_', 'struct_qvector_tryblk_t_',
        'struct_qvector_twinline_t_', 'struct_qvector_type_attr_t_',
        'struct_qvector_udt_member_t_', 'struct_qvector_unsigned_char_',
        'struct_qvector_unsigned_int_',
        'struct_qvector_unsigned_long_long_',
        'struct_qvector_update_bpt_info_t_', 'struct_qvector_valstr_t_',
        'struct_qvector_wchar_t_', 'struct_qvector_xreflist_entry_t_',
        'struct_range_marker_suspender_t', 'struct_range_t',
        'struct_rangeset_t', 'struct_rangevec_t', 'struct_reader_t',
        'struct_rect_t', 'struct_refcnted_regex_t',
        'struct_refcnted_regex_t_vtbl', 'struct_refinfo_desc_t',
        'struct_refinfo_t', 'struct_reg_access_t',
        'struct_reg_accesses_t', 'struct_reg_info_t', 'struct_regarg_t',
        'struct_regex_cache_t', 'struct_regex_t',
        'struct_register_info_t', 'struct_regmatch_t', 'struct_regobj_t',
        'struct_regobjs_t', 'struct_regval_t', 'struct_regvar_t',
        'struct_relobj_t', 'struct_reloc_info_t',
        'struct_renderer_info_pos_t', 'struct_renderer_info_t',
        'struct_renderer_pos_info_t', 'struct_row_info_t',
        'struct_rrel_t', 'struct_scattered_aloc_t',
        'struct_scattered_segm_t', 'struct_screen_graph_selection_t',
        'struct_segm_move_info_t', 'struct_segm_move_infos_t',
        'struct_segment_t', 'struct_seh_t', 'struct_selection_item_t',
        'struct_simd_info_t', 'struct_simple_bfi_t',
        'struct_simpleline_place_t', 'struct_simpleline_place_t_vtbl',
        'struct_simpleline_t', 'struct_snapshot_t',
        'struct_source_file_t', 'struct_source_file_t_vtbl',
        'struct_source_item_t', 'struct_source_item_t_vtbl',
        'struct_source_view_t', 'struct_srcinfo_provider_t',
        'struct_srcinfo_provider_t_vtbl', 'struct_sreg_range_t',
        'struct_stat', 'struct_std___Alloc_exact_args_t',
        'struct_std___Alloc_unpack_tuple_t',
        'struct_std___Basic_container_proxy_ptr12',
        'struct_std___Char_traits_char16_t__unsigned_short_',
        'struct_std___Char_traits_char32_t__unsigned_int_',
        'struct_std___Char_traits_char__int_',
        'struct_std___Char_traits_unsigned_short__unsigned_short_',
        'struct_std___Char_traits_wchar_t__unsigned_short_',
        'struct_std___Compressed_pair_std__allocator_char16_t___std___String_val_std___Simple_types_char16_t____true_',
        'struct_std___Compressed_pair_std__allocator_char32_t___std___String_val_std___Simple_types_char32_t____true_',
        'struct_std___Compressed_pair_std__allocator_char___std___String_val_std___Simple_types_char____true_',
        'struct_std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true_',
        'struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true_',
        'struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true_',
        'struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true_',
        'struct_std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true_',
        'struct_std___Compressed_pair_std__allocator_wchar_t___std___String_val_std___Simple_types_wchar_t____true_',
        'struct_std___Compressed_pair_std__less__qstring_char____std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P____std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______true___true_',
        'struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_int__void__P____std___Tree_val_std___Tree_simple_types_int____true___true_',
        'struct_std___Compressed_pair_std__less_int___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_int__int___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____true___true_',
        'struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____true___true_',
        'struct_std___Compressed_pair_std__less_unsigned_long_long___std___Compressed_pair_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P____std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____true___true_',
        'struct_std___Container_base0', 'struct_std___Container_base12',
        'struct_std___Container_proxy',
        'struct_std___Default_allocate_traits',
        'struct_std___Default_sentinel', 'struct_std___Distance_unknown',
        'struct_std___Equal_allocators', 'struct_std___Exact_args_t',
        'struct_std___Fake_allocator', 'struct_std___Fake_proxy_ptr_impl',
        'struct_std___False_copy_cat',
        'struct_std___Floating_type_traits_double_',
        'struct_std___Floating_type_traits_float_',
        'struct_std___Floating_type_traits_long_double_',
        'struct_std___Ignore', 'struct_std___Init_locks',
        'struct_std___Invoker_functor', 'struct_std___Invoker_pmd_object',
        'struct_std___Invoker_pmd_pointer',
        'struct_std___Invoker_pmd_refwrap',
        'struct_std___Invoker_pmf_object',
        'struct_std___Invoker_pmf_pointer',
        'struct_std___Invoker_pmf_refwrap',
        'struct_std___Is_character_char_',
        'struct_std___Is_character_or_bool_bool_',
        'struct_std___Is_character_signed_char_',
        'struct_std___Is_character_unsigned_char_',
        'struct_std___Iterator_base0', 'struct_std___Iterator_base12',
        'struct_std___Leave_proxy_unbound', 'struct_std___Lockit',
        'struct_std___Make_signed2_1_', 'struct_std___Make_signed2_2_',
        'struct_std___Make_signed2_4_', 'struct_std___Make_signed2_8_',
        'struct_std___Make_unsigned2_1_',
        'struct_std___Make_unsigned2_2_',
        'struct_std___Make_unsigned2_4_',
        'struct_std___Make_unsigned2_8_', 'struct_std___Maximum__',
        'struct_std___Move_allocator_tag',
        'struct_std___Narrow_char_traits_char__int_',
        'struct_std___Nontrivial_dummy_type', 'struct_std___Num_base',
        'struct_std___Num_float_base', 'struct_std___Num_int_base',
        'struct_std___One_then_variadic_args_t',
        'struct_std___Rand_urng_from_func', 'struct_std___Select_false_',
        'struct_std___String_const_iterator_std___String_val_std___Simple_types_char16_t___',
        'struct_std___String_const_iterator_std___String_val_std___Simple_types_char32_t___',
        'struct_std___String_const_iterator_std___String_val_std___Simple_types_char___',
        'struct_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t___',
        'struct_std___String_constructor_concat_tag',
        'struct_std___String_constructor_rvalue_allocator_tag',
        'struct_std___String_iterator_std___String_val_std___Simple_types_char16_t___',
        'struct_std___String_iterator_std___String_val_std___Simple_types_char32_t___',
        'struct_std___String_iterator_std___String_val_std___Simple_types_char___',
        'struct_std___String_iterator_std___String_val_std___Simple_types_wchar_t___',
        'struct_std___String_val_std___Simple_types_char16_t__',
        'struct_std___String_val_std___Simple_types_char32_t__',
        'struct_std___String_val_std___Simple_types_char__',
        'struct_std___String_val_std___Simple_types_wchar_t__',
        'struct_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false___value_compare',
        'struct_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false___value_compare',
        'struct_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false___value_compare',
        'struct_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false___value_compare',
        'struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int___',
        'struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____',
        'struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____',
        'struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____',
        'struct_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____',
        'struct_std___Tree_id_std___Tree_node_int__void__P___P_',
        'struct_std___Tree_id_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P___P_',
        'struct_std___Tree_id_std___Tree_node_std__pair_const_int__int___void__P___P_',
        'struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P___P_',
        'struct_std___Tree_id_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P___P_',
        'struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____',
        'struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____',
        'struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____',
        'struct_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____',
        'struct_std___Tree_node_int__void__P_',
        'struct_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P_',
        'struct_std___Tree_node_std__pair_const_int__int___void__P_',
        'struct_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P_',
        'struct_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P_',
        'struct_std___Tree_std___Tmap_traits__qstring_char___qrefcnt_t_refcnted_regex_t___std__less__qstring_char____std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____false__',
        'struct_std___Tree_std___Tmap_traits_int__int__std__less_int___std__allocator_std__pair_const_int__int____false__',
        'struct_std___Tree_std___Tmap_traits_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____false__',
        'struct_std___Tree_std___Tmap_traits_unsigned_long_long__unsigned_long_long__std__less_unsigned_long_long___std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long____false__',
        'struct_std___Tree_std___Tset_traits_int__std__less_int___std__allocator_int___false__',
        'struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_int___',
        'struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____',
        'struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____',
        'struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____',
        'struct_std___Tree_unchecked_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____',
        'struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_____',
        'struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int____',
        'struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t____',
        'struct_std___Tree_unchecked_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long____',
        'struct_std___Tree_val_std___Tree_simple_types_int__',
        'struct_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____',
        'struct_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int___',
        'struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___',
        'struct_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long___',
        'struct_std___Unpack_tuple_t', 'struct_std___Unused_parameter',
        'struct_std___WChar_traits_char16_t_',
        'struct_std___WChar_traits_unsigned_short_',
        'struct_std___WChar_traits_wchar_t_',
        'struct_std___Zero_then_variadic_args_t',
        'struct_std__allocator_arg_t', 'struct_std__allocator_char16_t_',
        'struct_std__allocator_char32_t_', 'struct_std__allocator_char_',
        'struct_std__allocator_int_',
        'struct_std__allocator_std___Tree_node_int__void__P__',
        'struct_std__allocator_std___Tree_node_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t____void__P__',
        'struct_std__allocator_std___Tree_node_std__pair_const_int__int___void__P__',
        'struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t___void__P__',
        'struct_std__allocator_std___Tree_node_std__pair_const_unsigned_long_long__unsigned_long_long___void__P__',
        'struct_std__allocator_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___',
        'struct_std__allocator_std__pair_const_int__int__',
        'struct_std__allocator_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__',
        'struct_std__allocator_std__pair_const_unsigned_long_long__unsigned_long_long__',
        'struct_std__allocator_void_', 'struct_std__allocator_wchar_t_',
        'struct_std__bad_alloc', 'struct_std__bad_alloc_vtbl',
        'struct_std__bad_array_new_length',
        'struct_std__bad_array_new_length_vtbl',
        'struct_std__bad_exception', 'struct_std__bad_exception_vtbl',
        'struct_std__basic_filebuf_char_',
        'struct_std__basic_filebuf_wchar_t_',
        'struct_std__basic_fstream_char_',
        'struct_std__basic_fstream_wchar_t_',
        'struct_std__basic_ifstream_char_',
        'struct_std__basic_ifstream_wchar_t_',
        'struct_std__basic_ios_char_', 'struct_std__basic_ios_wchar_t_',
        'struct_std__basic_iostream_char_',
        'struct_std__basic_iostream_wchar_t_',
        'struct_std__basic_istream_char_',
        'struct_std__basic_istream_wchar_t_',
        'struct_std__basic_istringstream_char_',
        'struct_std__basic_istringstream_wchar_t_',
        'struct_std__basic_ofstream_char_',
        'struct_std__basic_ofstream_wchar_t_',
        'struct_std__basic_ostream_char_',
        'struct_std__basic_ostream_wchar_t_',
        'struct_std__basic_ostringstream_char_',
        'struct_std__basic_ostringstream_wchar_t_',
        'struct_std__basic_streambuf_char_',
        'struct_std__basic_streambuf_wchar_t_',
        'struct_std__basic_string_char16_t_',
        'struct_std__basic_string_char32_t_',
        'struct_std__basic_string_char_',
        'struct_std__basic_string_wchar_t_',
        'struct_std__basic_stringbuf_char_',
        'struct_std__basic_stringbuf_wchar_t_',
        'struct_std__basic_stringstream_char_',
        'struct_std__basic_stringstream_wchar_t_',
        'struct_std__bidirectional_iterator_tag',
        'struct_std__char_traits_char16_t_',
        'struct_std__char_traits_char32_t_',
        'struct_std__char_traits_char_',
        'struct_std__char_traits_unsigned_short_',
        'struct_std__char_traits_wchar_t_', 'struct_std__common_type__',
        'struct_std__equal_to_void_', 'struct_std__exception',
        'struct_std__exception_ptr', 'struct_std__exception_vtbl',
        'struct_std__forward_iterator_tag', 'struct_std__fpos__Mbstatet_',
        'struct_std__greater_equal_void_', 'struct_std__greater_void_',
        'struct_std__hash_double_', 'struct_std__hash_float_',
        'struct_std__hash_long_double_',
        'struct_std__hash_std__nullptr_t_',
        'struct_std__initializer_list_char16_t_',
        'struct_std__initializer_list_char32_t_',
        'struct_std__initializer_list_char_',
        'struct_std__initializer_list_int_',
        'struct_std__initializer_list_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t___',
        'struct_std__initializer_list_std__pair_const_int__int__',
        'struct_std__initializer_list_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t__',
        'struct_std__initializer_list_std__pair_const_unsigned_long_long__unsigned_long_long__',
        'struct_std__initializer_list_wchar_t_',
        'struct_std__input_iterator_tag',
        'struct_std__integral_constant_bool__false_',
        'struct_std__integral_constant_bool__true_',
        'struct_std__integral_constant_unsigned_long_long__0_',
        'struct_std__ios_base', 'struct_std__less__qstring_char__',
        'struct_std__less_equal_void_', 'struct_std__less_int_',
        'struct_std__less_unsigned_long_long_', 'struct_std__less_void_',
        'struct_std__locale',
        'struct_std__map__qstring_char___qrefcnt_t_refcnted_regex_t__',
        'struct_std__map_int__int_',
        'struct_std__map_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_',
        'struct_std__map_unsigned_long_long__unsigned_long_long_',
        'struct_std__minus_void_', 'struct_std__multiplies_void_',
        'struct_std__nested_exception',
        'struct_std__nested_exception_vtbl',
        'struct_std__not_equal_to_void_', 'struct_std__nothrow_t',
        'struct_std__numeric_limits_bool_',
        'struct_std__numeric_limits_char16_t_',
        'struct_std__numeric_limits_char32_t_',
        'struct_std__numeric_limits_char_',
        'struct_std__numeric_limits_double_',
        'struct_std__numeric_limits_float_',
        'struct_std__numeric_limits_int_',
        'struct_std__numeric_limits_long_',
        'struct_std__numeric_limits_long_double_',
        'struct_std__numeric_limits_long_long_',
        'struct_std__numeric_limits_short_',
        'struct_std__numeric_limits_signed_char_',
        'struct_std__numeric_limits_unsigned_char_',
        'struct_std__numeric_limits_unsigned_int_',
        'struct_std__numeric_limits_unsigned_long_',
        'struct_std__numeric_limits_unsigned_long_long_',
        'struct_std__numeric_limits_unsigned_short_',
        'struct_std__numeric_limits_wchar_t_',
        'struct_std__output_iterator_tag',
        'struct_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t__',
        'struct_std__pair_const_int__int_',
        'struct_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_',
        'struct_std__pair_const_unsigned_long_long__unsigned_long_long_',
        'struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int_____std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____',
        'struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
        'struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
        'struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
        'struct_std__pair_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
        'struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t_______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
        'struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
        'struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
        'struct_std__pair_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long______std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
        'struct_std__piecewise_construct_t', 'struct_std__plus_void_',
        'struct_std__random_access_iterator_tag',
        'struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char16_t____',
        'struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char32_t____',
        'struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_char____',
        'struct_std__reverse_iterator_std___String_const_iterator_std___String_val_std___Simple_types_wchar_t____',
        'struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char16_t____',
        'struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char32_t____',
        'struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_char____',
        'struct_std__reverse_iterator_std___String_iterator_std___String_val_std___Simple_types_wchar_t____',
        'struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_int____',
        'struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
        'struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
        'struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
        'struct_std__reverse_iterator_std___Tree_const_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
        'struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const__qstring_char___qrefcnt_t_refcnted_regex_t______',
        'struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_int__int_____',
        'struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__backward_flow_iterator_t_no_regs_t__simple_bfi_t___state_t_____',
        'struct_std__reverse_iterator_std___Tree_iterator_std___Tree_val_std___Tree_simple_types_std__pair_const_unsigned_long_long__unsigned_long_long_____',
        'struct_std__set_int_', 'struct_std__tuple__',
        'struct_stkarg_area_info_t', 'struct_stkpnt_t',
        'struct_stkpnts_t', 'struct_strarray_t', 'struct_string_info_t',
        'struct_strpath_t', 'struct_struc_t',
        'struct_struct_field_visitor_t',
        'struct_struct_field_visitor_t_vtbl', 'struct_structplace_t',
        'struct_structplace_t_vtbl', 'struct_strwinsetup_t',
        'struct_switch_info_t', 'struct_sync_source_t',
        'struct_synced_group_t', 'struct_syntax_highlighter_t',
        'struct_syntax_highlighter_t_vtbl', 'struct_tev_info_reg_t',
        'struct_tev_info_t', 'struct_tev_reg_value_t',
        'struct_text_sink_t', 'struct_text_sink_t_vtbl',
        'struct_textctrl_info_t', 'struct_thread_name_t',
        'struct_til_bucket_t', 'struct_til_stream_t',
        'struct_til_symbol_t', 'struct_til_t', 'struct_timespec',
        'struct_tinfo_t', 'struct_tinfo_visitor_t',
        'struct_tinfo_visitor_t_vtbl', 'struct_tm', 'struct_token_t',
        'struct_try_handler_t', 'struct_tryblk_t', 'struct_twinline_t',
        'struct_twinpos_t', 'struct_type_attr_t', 'struct_type_info',
        'struct_type_mods_t', 'struct_typedef_type_data_t',
        'struct_udt_member_t', 'struct_udt_type_data_t',
        'struct_udtmembervec_t', 'struct_ui_request_t',
        'struct_ui_request_t_vtbl', 'struct_ui_requests_t',
        'struct_uint128', 'struct_update_bpt_info_t',
        'struct_user_defined_prefix_t',
        'struct_user_defined_prefix_t_vtbl', 'struct_user_graph_place_t',
        'struct_user_graph_place_t_vtbl', 'struct_valinfo_t',
        'struct_valstr_t', 'struct_valstr_t__flatten_args_t',
        'struct_valstrs_t', 'struct_value_u__d128_t',
        'struct_value_u__dq_t', 'struct_value_u__dt_t',
        'struct_view_mouse_event_t', 'struct_xrefblk_t',
        'struct_xreflist_entry_t', 'struct_xrefpos_t',
        'structplace_t__adjust', 'structplace_t__beginning',
        'structplace_t__clone', 'structplace_t__compare',
        'structplace_t__compare2', 'structplace_t__copyfrom',
        'structplace_t__deserialize', 'structplace_t__ending',
        'structplace_t__enter', 'structplace_t__generate',
        'structplace_t__id', 'structplace_t__leave',
        'structplace_t__makeplace', 'structplace_t__name',
        'structplace_t__next', 'structplace_t__prev',
        'structplace_t__print', 'structplace_t__rebase',
        'structplace_t__serialize', 'structplace_t__toea',
        'structplace_t__touval', 'strupr', 'strvec_t', 'strxfrm',
        'suspend_process', 'suspend_thread', 'sval_t', 'svalvec_t',
        'swab', 'swap', 'swap128', 'swap16', 'swap32', 'swap64',
        'swap_idcvs', 'swap_value', 'switch_dbctx', 'switch_to_golang',
        'swprintf', 'swprintf_s', 'swscanf', 'swscanf_s',
        'sync_source_vec_t', 'sync_sources', 'syntax_highlight_style',
        'syntax_highlighter_t__block_highlighter_t', 'system',
        'table_checker_t', 'tag_addr', 'tag_advance', 'tag_remove',
        'tag_skipcode', 'tag_skipcodes', 'tag_strlen', 'tail',
        'tail_owner_changed', 'take_database_snapshot',
        'take_memory_snapshot', 'tan', 'tanf', 'tanh', 'tanhf', 'tanhl',
        'tanl', 'tbyte_flag', 'tcc_place_type_t', 'tcc_renderer_type_t',
        'tell', 'tempnam', 'term_database', 'term_ignore_micro',
        'term_plugins', 'term_process', 'terminate', 'terminate_function',
        'terminate_handler', 'test_bit', 'testf_t', 'tev_bpt', 'tev_call',
        'tev_event', 'tev_insn', 'tev_max', 'tev_mem', 'tev_none',
        'tev_reg_values_t', 'tev_ret', 'tev_type_t', 'tevinfo_vec_t',
        'tevinforeg_vec_t', 'text_t', 'tgamma', 'tgammaf', 'tgammal',
        'thid_t', 'thread_name_vec_t', 'throw_idc_exception',
        'thunk_func_created', 'ti_changed', 'tid_t', 'time_t',
        'tinfo_code_t', 'tinfovec_t', 'tmpfile', 'tmpfile_s', 'tmpnam',
        'tmpnam_s', 'to_ea', 'to_string', 'to_wstring', 'toggle_bnot',
        'toggle_lzero', 'toggle_sign', 'tokenstack_t', 'tolower',
        'toupper', 'towlower', 'towupper',
        'track_value_until_address_jpt', 'tracked_regs_t', 'trim',
        'trim_jtable', 'trunc', 'truncf', 'truncl', 'try_to_add_libfunc',
        'tryblks_t', 'tryblks_updated', 'tty_control_t', 'twidget_type_t',
        'type_attrs_t', 'type_sign_t', 'type_t', 'tzset', 'ucdr_kind_t',
        'uchar', 'ui_activate_widget', 'ui_add_idckey', 'ui_addons',
        'ui_analyzer_options', 'ui_ask_addr', 'ui_ask_buttons',
        'ui_ask_file', 'ui_ask_form', 'ui_ask_long', 'ui_ask_seg',
        'ui_ask_str', 'ui_ask_text', 'ui_attach_action_to_menu',
        'ui_attach_action_to_popup', 'ui_attach_action_to_toolbar',
        'ui_attach_dynamic_action_to_popup', 'ui_banner', 'ui_beep',
        'ui_broadcast', 'ui_cancel_exec_request',
        'ui_cancel_thread_exec_requests', 'ui_choose',
        'ui_choose_bookmark', 'ui_chooser_default_enter',
        'ui_close_chooser', 'ui_close_widget', 'ui_clr_cancelled',
        'ui_copywarn', 'ui_create_code_viewer', 'ui_create_custom_viewer',
        'ui_create_desktop_widget', 'ui_create_empty_widget',
        'ui_create_menu', 'ui_create_source_viewer', 'ui_create_toolbar',
        'ui_current_widget_changed', 'ui_custom_viewer_jump',
        'ui_custom_viewer_set_userdata', 'ui_database_closed',
        'ui_database_inited', 'ui_dbg_add_bpt', 'ui_dbg_add_bpt_tev',
        'ui_dbg_add_call_tev', 'ui_dbg_add_debug_event',
        'ui_dbg_add_insn_tev', 'ui_dbg_add_many_tevs',
        'ui_dbg_add_oldbpt', 'ui_dbg_add_path_mapping',
        'ui_dbg_add_ret_tev', 'ui_dbg_add_tev', 'ui_dbg_add_thread',
        'ui_dbg_add_vmod', 'ui_dbg_attach_process', 'ui_dbg_begin',
        'ui_dbg_bin_search', 'ui_dbg_bring_to_front',
        'ui_dbg_change_bptlocs', 'ui_dbg_check_bpt',
        'ui_dbg_choose_trace_file', 'ui_dbg_clear_requests_queue',
        'ui_dbg_clear_trace', 'ui_dbg_collect_stack_trace',
        'ui_dbg_compare_bpt_locs', 'ui_dbg_continue_process',
        'ui_dbg_define_exception', 'ui_dbg_del_bpt', 'ui_dbg_del_bptgrp',
        'ui_dbg_del_oldbpt', 'ui_dbg_del_thread', 'ui_dbg_del_vmod',
        'ui_dbg_detach_process', 'ui_dbg_diff_trace_file',
        'ui_dbg_edit_manual_regions', 'ui_dbg_enable_bblk_trace',
        'ui_dbg_enable_bpt', 'ui_dbg_enable_bptgrp',
        'ui_dbg_enable_func_trace', 'ui_dbg_enable_insn_trace',
        'ui_dbg_enable_manual_regions', 'ui_dbg_enable_oldbpt',
        'ui_dbg_enable_step_trace', 'ui_dbg_end', 'ui_dbg_exit_process',
        'ui_dbg_find_bpt', 'ui_dbg_for_all_bpts',
        'ui_dbg_get_bblk_trace_options', 'ui_dbg_get_bpt',
        'ui_dbg_get_bpt_group', 'ui_dbg_get_bpt_qty',
        'ui_dbg_get_bpt_tev_ea', 'ui_dbg_get_bptloc_string',
        'ui_dbg_get_call_tev_callee', 'ui_dbg_get_current_source_file',
        'ui_dbg_get_current_source_line', 'ui_dbg_get_current_thread',
        'ui_dbg_get_debug_event', 'ui_dbg_get_event_cond',
        'ui_dbg_get_first_module', 'ui_dbg_get_func_trace_options',
        'ui_dbg_get_global_var', 'ui_dbg_get_grp_bpts',
        'ui_dbg_get_insn_tev_reg_mem', 'ui_dbg_get_insn_tev_reg_result',
        'ui_dbg_get_insn_tev_reg_result_i', 'ui_dbg_get_insn_tev_reg_val',
        'ui_dbg_get_insn_tev_reg_val_i', 'ui_dbg_get_insn_trace_options',
        'ui_dbg_get_ip_val', 'ui_dbg_get_local_var',
        'ui_dbg_get_local_vars', 'ui_dbg_get_manual_regions',
        'ui_dbg_get_memory_info', 'ui_dbg_get_module_info',
        'ui_dbg_get_next_module', 'ui_dbg_get_process_options',
        'ui_dbg_get_process_state', 'ui_dbg_get_processes',
        'ui_dbg_get_reg_info', 'ui_dbg_get_reg_val',
        'ui_dbg_get_reg_val_i', 'ui_dbg_get_reg_value_type',
        'ui_dbg_get_ret_tev_return', 'ui_dbg_get_running_notification',
        'ui_dbg_get_running_request', 'ui_dbg_get_sp_val',
        'ui_dbg_get_srcinfo_provider', 'ui_dbg_get_step_trace_options',
        'ui_dbg_get_tev_ea', 'ui_dbg_get_tev_event',
        'ui_dbg_get_tev_info', 'ui_dbg_get_tev_memory_info',
        'ui_dbg_get_tev_qty', 'ui_dbg_get_tev_tid', 'ui_dbg_get_tev_type',
        'ui_dbg_get_thread_qty', 'ui_dbg_get_trace_base_address',
        'ui_dbg_get_trace_dynamic_register_set',
        'ui_dbg_get_trace_file_desc', 'ui_dbg_get_trace_platform',
        'ui_dbg_getn_bpt', 'ui_dbg_getn_thread',
        'ui_dbg_getn_thread_name', 'ui_dbg_graph_trace',
        'ui_dbg_handle_debug_event', 'ui_dbg_hide_all_bpts',
        'ui_dbg_internal_appcall', 'ui_dbg_internal_cleanup_appcall',
        'ui_dbg_internal_get_elang', 'ui_dbg_internal_get_sreg_base',
        'ui_dbg_internal_ioctl', 'ui_dbg_internal_set_elang',
        'ui_dbg_is_bblk_trace_enabled', 'ui_dbg_is_busy',
        'ui_dbg_is_func_trace_enabled', 'ui_dbg_is_insn_trace_enabled',
        'ui_dbg_is_step_trace_enabled', 'ui_dbg_is_valid_trace_file',
        'ui_dbg_list_bptgrps', 'ui_dbg_load_dbg_dbginfo',
        'ui_dbg_load_debugger', 'ui_dbg_load_trace_file',
        'ui_dbg_map_source_file_path', 'ui_dbg_map_source_path',
        'ui_dbg_modify_source_paths', 'ui_dbg_read_memory',
        'ui_dbg_read_registers', 'ui_dbg_register_provider',
        'ui_dbg_rename_bptgrp', 'ui_dbg_request_add_bpt',
        'ui_dbg_request_add_oldbpt', 'ui_dbg_request_attach_process',
        'ui_dbg_request_clear_trace', 'ui_dbg_request_continue_process',
        'ui_dbg_request_del_bpt', 'ui_dbg_request_del_oldbpt',
        'ui_dbg_request_detach_process',
        'ui_dbg_request_enable_bblk_trace', 'ui_dbg_request_enable_bpt',
        'ui_dbg_request_enable_func_trace',
        'ui_dbg_request_enable_insn_trace',
        'ui_dbg_request_enable_oldbpt',
        'ui_dbg_request_enable_step_trace', 'ui_dbg_request_exit_process',
        'ui_dbg_request_resume_thread', 'ui_dbg_request_run_to',
        'ui_dbg_request_select_thread',
        'ui_dbg_request_set_bblk_trace_options',
        'ui_dbg_request_set_func_trace_options',
        'ui_dbg_request_set_insn_trace_options',
        'ui_dbg_request_set_reg_val', 'ui_dbg_request_set_resume_mode',
        'ui_dbg_request_set_step_trace_options',
        'ui_dbg_request_start_process', 'ui_dbg_request_step_into',
        'ui_dbg_request_step_over', 'ui_dbg_request_step_until_ret',
        'ui_dbg_request_suspend_process', 'ui_dbg_request_suspend_thread',
        'ui_dbg_resume_thread', 'ui_dbg_retrieve_exceptions',
        'ui_dbg_run_requests', 'ui_dbg_run_to', 'ui_dbg_save_trace_file',
        'ui_dbg_select_thread', 'ui_dbg_set_bblk_trace_options',
        'ui_dbg_set_bpt_group', 'ui_dbg_set_bptloc_group',
        'ui_dbg_set_bptloc_string', 'ui_dbg_set_debugger_options',
        'ui_dbg_set_event_cond', 'ui_dbg_set_func_trace_options',
        'ui_dbg_set_highlight_trace_options',
        'ui_dbg_set_insn_trace_options', 'ui_dbg_set_manual_regions',
        'ui_dbg_set_process_options', 'ui_dbg_set_process_state',
        'ui_dbg_set_reg_val', 'ui_dbg_set_reg_val_i',
        'ui_dbg_set_remote_debugger', 'ui_dbg_set_resume_mode',
        'ui_dbg_set_step_trace_options', 'ui_dbg_set_trace_base_address',
        'ui_dbg_set_trace_dynamic_register_set',
        'ui_dbg_set_trace_file_desc', 'ui_dbg_set_trace_platform',
        'ui_dbg_set_trace_size', 'ui_dbg_srcdbg_request_step_into',
        'ui_dbg_srcdbg_request_step_over',
        'ui_dbg_srcdbg_request_step_until_ret', 'ui_dbg_srcdbg_step_into',
        'ui_dbg_srcdbg_step_over', 'ui_dbg_srcdbg_step_until_ret',
        'ui_dbg_start_process', 'ui_dbg_step_into', 'ui_dbg_step_over',
        'ui_dbg_step_until_ret', 'ui_dbg_store_exceptions',
        'ui_dbg_suspend_process', 'ui_dbg_suspend_thread',
        'ui_dbg_unregister_provider', 'ui_dbg_update_bpt',
        'ui_dbg_wait_for_next_event', 'ui_dbg_write_memory',
        'ui_dbg_write_register', 'ui_debugger_menu_change',
        'ui_delete_menu', 'ui_delete_toolbar', 'ui_desktop_applied',
        'ui_destroy_custom_viewer', 'ui_destroying_plugmod',
        'ui_destroying_procmod', 'ui_detach_action_from_menu',
        'ui_detach_action_from_popup', 'ui_detach_action_from_toolbar',
        'ui_display_widget', 'ui_ea_viewer_history_info',
        'ui_ea_viewer_history_push_and_jump',
        'ui_enable_chooser_item_attrs', 'ui_execute_sync',
        'ui_execute_ui_requests', 'ui_execute_ui_requests_list',
        'ui_find_widget', 'ui_finish_populating_widget_popup',
        'ui_free_custom_icon', 'ui_gen_disasm_text',
        'ui_gen_idanode_text', 'ui_genfile_callback',
        'ui_get_action_attr', 'ui_get_active_modal_widget',
        'ui_get_chooser_data', 'ui_get_chooser_item_attrs',
        'ui_get_chooser_obj', 'ui_get_curline', 'ui_get_curplace',
        'ui_get_current_viewer', 'ui_get_current_widget', 'ui_get_cursor',
        'ui_get_custom_viewer_curline', 'ui_get_custom_viewer_hint',
        'ui_get_custom_viewer_location',
        'ui_get_custom_viewer_place_xcoord', 'ui_get_ea_hint',
        'ui_get_highlight_2', 'ui_get_item_hint', 'ui_get_kernel_version',
        'ui_get_key_code', 'ui_get_lines_rendering_info', 'ui_get_opnum',
        'ui_get_output_curline', 'ui_get_output_cursor',
        'ui_get_output_selected_text', 'ui_get_range_marker',
        'ui_get_registered_actions', 'ui_get_renderer_type',
        'ui_get_synced_group', 'ui_get_tab_size',
        'ui_get_user_input_event', 'ui_get_viewer_place_type',
        'ui_get_viewer_user_data', 'ui_get_widget_config',
        'ui_get_widget_title', 'ui_get_widget_type', 'ui_get_window_id',
        'ui_hexdumpea', 'ui_idcstart', 'ui_idcstop',
        'ui_initing_database', 'ui_install_cli',
        'ui_install_custom_datatype_menu',
        'ui_install_custom_optype_menu', 'ui_is_idaq', 'ui_is_idaview',
        'ui_is_msg_inited', 'ui_jump_in_custom_viewer', 'ui_jumpto',
        'ui_last', 'ui_load_custom_icon', 'ui_load_custom_icon_file',
        'ui_load_file', 'ui_load_new_file', 'ui_lock_range_refresh',
        'ui_lookup_key_code', 'ui_mbox', 'ui_msg', 'ui_msg_clear',
        'ui_msg_get_lines', 'ui_msg_save', 'ui_navband_ea',
        'ui_navband_pixel', 'ui_noabort', 'ui_notification_t', 'ui_null',
        'ui_obsolete_dbg_save_bpts', 'ui_obsolete_del_idckey',
        'ui_obsolete_display_widget', 'ui_obsolete_get_highlight',
        'ui_obsolete_get_user_strlist_options',
        'ui_obsolete_refresh_custom_code_viewer',
        'ui_obsolete_set_nav_colorizer', 'ui_open_builtin',
        'ui_open_form', 'ui_open_url', 'ui_plugin_loaded',
        'ui_plugin_unloading', 'ui_populating_widget_popup',
        'ui_postprocess_action', 'ui_preprocess_action',
        'ui_process_action', 'ui_range', 'ui_read_range_selection',
        'ui_read_selection', 'ui_ready_to_run', 'ui_refresh',
        'ui_refresh_chooser', 'ui_refresh_choosers',
        'ui_refresh_custom_viewer', 'ui_refresh_navband',
        'ui_refreshmarked', 'ui_register_action', 'ui_register_timer',
        'ui_repaint_qwidget', 'ui_restore_database_snapshot', 'ui_resume',
        'ui_run_dbg', 'ui_run_debugger', 'ui_saved', 'ui_saving',
        'ui_screen_ea_changed', 'ui_screenea', 'ui_set_cancelled',
        'ui_set_code_viewer_line_handlers',
        'ui_set_custom_viewer_handler', 'ui_set_custom_viewer_handlers',
        'ui_set_custom_viewer_mode', 'ui_set_custom_viewer_range',
        'ui_set_dock_pos', 'ui_set_highlight', 'ui_set_mappings',
        'ui_set_nav_colorizer', 'ui_set_renderer_type',
        'ui_set_widget_config', 'ui_setidle', 'ui_setup_plugins_menu',
        'ui_show_rename_dialog', 'ui_strchoose', 'ui_suspend',
        'ui_sync_sources', 'ui_take_database_snapshot',
        'ui_test_cancelled', 'ui_unlock_range_refresh', 'ui_unmarksel',
        'ui_unrecognized_config_directive', 'ui_unregister_action',
        'ui_unregister_timer', 'ui_update_action_attr',
        'ui_update_file_history', 'ui_updated_actions',
        'ui_updating_actions', 'ui_widget_closing', 'ui_widget_invisible',
        'ui_widget_visible', 'uint', 'uint16', 'uint16_t', 'uint32',
        'uint32_t', 'uint64', 'uint64_t', 'uint8', 'uint8_t',
        'uint_fast16_t', 'uint_fast32_t', 'uint_fast64_t', 'uint_fast8_t',
        'uint_least16_t', 'uint_least32_t', 'uint_least64_t',
        'uint_least8_t', 'uintmax_t', 'uintptr_t', 'ulonglong', 'ultoa',
        'umask', 'uncaught_exception', 'uncaught_exceptions',
        'under_debugger', 'unexpected', 'unexpected_function',
        'unexpected_handler', 'unget_token', 'ungetc', 'ungetwc',
        'unhide_border', 'unhide_item', 'unhook_event_listener',
        'unhook_from_notification_point', 'union__double_val',
        'union__float_const', 'union__float_val', 'union__ldouble_val',
        'union_action_ctx_base_source_t', 'union_argloc_t_0',
        'union_argloc_t___F4A6A313BC9EA9730D72EF3AFDF761E4',
        'union_callui_t', 'union_cfgopt_t_0', 'union_cfgopt_t_1',
        'union_cfgopt_t___275FC9DDBA9D1187AC5032610B4D4F63',
        'union_cfgopt_t___99DF67CCA67C584E9D46033DDA6FC151',
        'union_func_t_0',
        'union_func_t___C940058B2272AD9112E2141245617273',
        'union_idc_value_t_0',
        'union_idc_value_t___D589224ACA3955A7C89073061DACDDE8',
        'union_input_event_t_0',
        'union_input_event_t___4953DA15226C435F033B39D89D558652',
        'union_insn_t_0',
        'union_insn_t___F4FA00FEEF275F329AD5381050035CF8',
        'union_jvalue_t_0',
        'union_jvalue_t___86FD308AB52B8F8AFE7E7C65068A43C3',
        'union_lex_value_t_0',
        'union_lex_value_t___6E94C03EE084EC1E8773E8F11C206FDC',
        'union_op_t_0', 'union_op_t_1', 'union_op_t_2', 'union_op_t_3',
        'union_op_t___03EE851906E7470B48652C42A8F5F22F',
        'union_op_t___1DAE607E75260845BFCA6DE571F2D359',
        'union_op_t___63479489C28A4014434636A3BFC4DC99',
        'union_op_t___9FE5DDDE6246481B3EE86C7EEB25DDF5', 'union_opinfo_t',
        'union_regval_t_0',
        'union_regval_t___E2461B07C1F03128F15079BB1FB5F381',
        'union_std___String_val_std___Simple_types_char16_t_____Bxty',
        'union_std___String_val_std___Simple_types_char32_t_____Bxty',
        'union_std___String_val_std___Simple_types_char_____Bxty',
        'union_std___String_val_std___Simple_types_wchar_t_____Bxty',
        'union_switch_info_t_0',
        'union_switch_info_t___76B1A80AA47B7214ED24D33A3285D956',
        'union_token_t_0', 'union_token_t_1',
        'union_token_t___8299423771E115C2E8FEC5C7170C0424',
        'union_token_t___EFD300335D00E904D0DC340AFA3DF967',
        'union_typedef_type_data_t_0',
        'union_typedef_type_data_t___F773DD8B4C420A056648FD7EB1349F55',
        'union_value_u', 'union_view_mouse_event_location_t', 'unlink',
        'unlock_dbgmem_config', 'unmake_linput', 'unmark_selection',
        'unpack_buf', 'unpack_buf_inplace', 'unpack_bytevec', 'unpack_db',
        'unpack_dd', 'unpack_dq', 'unpack_ds', 'unpack_ds_to_buf',
        'unpack_dw', 'unpack_ea', 'unpack_ea64', 'unpack_eavec',
        'unpack_idcobj_from_bv', 'unpack_idcobj_from_idb',
        'unpack_memory', 'unpack_obj', 'unpack_obj_inplace',
        'unpack_regvals', 'unpack_str', 'unpack_xleb128',
        'unregister_action', 'unregister_custom_data_format',
        'unregister_custom_data_type', 'unregister_custom_fixup',
        'unregister_custom_refinfo', 'unregister_post_event_visitor',
        'unregister_srcinfo_provider', 'unregister_timer', 'upd_abits',
        'update_action_checkable', 'update_action_checked',
        'update_action_icon', 'update_action_label',
        'update_action_shortcut', 'update_action_state',
        'update_action_tooltip', 'update_action_visibility', 'update_bpt',
        'update_bpt_vec_t', 'update_extra_cmt', 'update_fpd',
        'update_func', 'update_hidden_range', 'update_segm',
        'update_snapshot_attributes', 'update_type_t', 'updating_tryblks',
        'upgraded', 'use_golang_cc', 'use_mapping', 'user2bin',
        'user2qstr', 'user2str', 'user_cancelled', 'uses_aflag_modsp',
        'uses_modsp', 'ushort', 'utf16_surrogates_to_cp', 'utf16_utf8',
        'utf8_utf16', 'utf8_wchar16', 'utf8_wchar32', 'uval_t',
        'uvalvec_t', 'va_list', 'vadd_extra_line', 'validate_idb_names',
        'validate_idb_names2', 'validate_name', 'valstrvec_t',
        'vask_buttons', 'vask_file', 'vask_form', 'vask_str', 'vask_text',
        'vask_yn', 'verify_argloc', 'verify_tinfo', 'verror', 'vfprintf',
        'vfprintf_s', 'vfscanf', 'vfscanf_s', 'vfwprintf', 'vfwprintf_s',
        'vfwscanf', 'vfwscanf_s', 'view_activated', 'view_click',
        'view_close', 'view_created', 'view_curpos', 'view_dblclick',
        'view_deactivated', 'view_event_state_t', 'view_keydown',
        'view_loc_changed', 'view_mouse_event_t__location_t',
        'view_mouse_moved', 'view_mouse_over', 'view_notification_t',
        'view_switched', 'viewer_attach_menu_item', 'viewer_center_on',
        'viewer_create_groups', 'viewer_del_node_info',
        'viewer_delete_groups', 'viewer_fit_window', 'viewer_get_curnode',
        'viewer_get_gli', 'viewer_get_node_info', 'viewer_get_selection',
        'viewer_set_gli', 'viewer_set_groups_visibility',
        'viewer_set_node_info', 'viewer_set_titlebar_height', 'vinfo',
        'visit_patched_bytes', 'visit_snapshot_tree',
        'visit_stroff_fields', 'visit_subtypes', 'vloader_failure',
        'vme_button_t', 'vmsg', 'vnomem', 'vopen_form', 'vprintf',
        'vprintf_s', 'vqmakepath', 'vqperror', 'vscanf', 'vscanf_s',
        'vshow_hex', 'vshow_hex_file', 'vsnprintf', 'vsnprintf_s',
        'vsprintf', 'vsprintf_s', 'vsscanf', 'vsscanf_s', 'vswprintf',
        'vswprintf_s', 'vswscanf', 'vswscanf_s', 'vwarning', 'vwprintf',
        'vwprintf_s', 'vwscanf', 'vwscanf_s', 'wait_for_next_event',
        'warning', 'was_ida_decision', 'wchar16_t', 'wchar32_t',
        'wcrtomb', 'wcrtomb_s', 'wcscat', 'wcscat_s', 'wcschr', 'wcscmp',
        'wcscoll', 'wcscpy', 'wcscpy_s', 'wcscspn', 'wcsdup', 'wcsftime',
        'wcsicmp', 'wcsicoll', 'wcslen', 'wcslwr', 'wcsncat', 'wcsncat_s',
        'wcsncmp', 'wcsncpy', 'wcsncpy_s', 'wcsnicmp', 'wcsnlen',
        'wcsnset', 'wcspbrk', 'wcsrchr', 'wcsrev', 'wcsrtombs',
        'wcsrtombs_s', 'wcsset', 'wcsspn', 'wcsstr', 'wcstod', 'wcstof',
        'wcstok', 'wcstok_s', 'wcstol', 'wcstold', 'wcstoll', 'wcstombs',
        'wcstombs_s', 'wcstoul', 'wcstoull', 'wcsupr', 'wcsxfrm', 'wctob',
        'wctomb', 'wctomb_s', 'wctype_t', 'wildcard_match', 'winerr',
        'wint_t', 'wmemchr', 'wmemcmp', 'wmemcpy', 'wmemcpy_s',
        'wmemmove', 'wmemmove_s', 'wmemset', 'word_flag', 'wprintf',
        'wprintf_s', 'write', 'write_dbg_memory', 'write_struc_path',
        'write_tinfo_bitfield_value', 'writebytes', 'wscanf', 'wscanf_s',
        'xrefblk_t_first_from', 'xrefblk_t_first_to',
        'xrefblk_t_next_from', 'xrefblk_t_next_to', 'xrefchar',
        'xreflist_t', 'y0', 'y1', 'yn', 'yword_flag', 'zip_deflate',
        'zip_inflate', 'zword_flag']
    
    return locals()
